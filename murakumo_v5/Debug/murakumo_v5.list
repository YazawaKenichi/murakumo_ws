
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dff4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  0800e188  0800e188  0001e188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecac  0800ecac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ecac  0800ecac  0001ecac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ecb4  0800ecb4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ecb4  0800ecb4  0001ecb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ecb8  0800ecb8  0001ecb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ecbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  200001e0  0800ee9c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  0800ee9c  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036ac6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005517  00000000  00000000  00056cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0005c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  0005dc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002803d  00000000  00000000  0005f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002339a  00000000  00000000  000874e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d50bd  00000000  00000000  000aa87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017f93c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c0  00000000  00000000  0017f990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e16c 	.word	0x0800e16c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e16c 	.word	0x0800e16c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <imu_read_byte>:
volatile Inertial inertial_offset;

Coordinate COORDINATE_ZERO;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <imu_read_byte+0x54>)
 8001008:	f005 fc04 	bl	8006814 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <imu_read_byte+0x58>)
 8001016:	f006 fa56 	bl	80074c6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <imu_read_byte+0x58>)
 8001024:	f006 fb8b 	bl	800773e <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <imu_read_byte+0x54>)
 8001030:	f005 fbf0 	bl	8006814 <HAL_GPIO_WritePin>
#endif

	return val;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	20000408 	.word	0x20000408

08001048 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <imu_write_byte+0x54>)
 800106a:	f005 fbd3 	bl	8006814 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2201      	movs	r2, #1
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <imu_write_byte+0x58>)
 8001078:	f006 fa25 	bl	80074c6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 800107c:	1db9      	adds	r1, r7, #6
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <imu_write_byte+0x58>)
 8001084:	f006 fa1f 	bl	80074c6 <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <imu_write_byte+0x54>)
 8001090:	f005 fbc0 	bl	8006814 <HAL_GPIO_WritePin>
#endif
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	20000408 	.word	0x20000408

080010a4 <imu_init>:

void imu_init()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	printf("Starting SPI2 (IMU)\r\n");
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <imu_init+0x40>)
 80010ac:	f009 faba 	bl	800a624 <puts>
	uint8_t wai, ret;
	ret = imu_initialize(&wai);
 80010b0:	1dbb      	adds	r3, r7, #6
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f820 	bl	80010f8 <imu_initialize>
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
	printf("who_am_i = %d\r\n", wai);
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	4619      	mov	r1, r3
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <imu_init+0x44>)
 80010c2:	f009 fa29 	bl	800a518 <iprintf>
	if(ret == 1)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d103      	bne.n	80010d4 <imu_init+0x30>
	{
		printf("SPI INIT COLLECT!\r\n");
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <imu_init+0x48>)
 80010ce:	f009 faa9 	bl	800a624 <puts>
	}
	else
	{
		printf("SPI INIT FAILURE x_x \r\n");
	}
}
 80010d2:	e002      	b.n	80010da <imu_init+0x36>
		printf("SPI INIT FAILURE x_x \r\n");
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <imu_init+0x4c>)
 80010d6:	f009 faa5 	bl	800a624 <puts>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0800e188 	.word	0x0800e188
 80010e8:	0800e1a0 	.word	0x0800e1a0
 80010ec:	0800e1b0 	.word	0x0800e1b0
 80010f0:	0800e1c4 	.word	0x0800e1c4
 80010f4:	00000000 	.word	0x00000000

080010f8 <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001106:	4834      	ldr	r0, [pc, #208]	; (80011d8 <imu_initialize+0xe0>)
 8001108:	f005 fb84 	bl	8006814 <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	COORDINATE_ZERO.x = 0;
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <imu_initialize+0xe4>)
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]
	COORDINATE_ZERO.y = 0;
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <imu_initialize+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	805a      	strh	r2, [r3, #2]
	COORDINATE_ZERO.z = 0;
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <imu_initialize+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	809a      	strh	r2, [r3, #4]

	RADPERDEG = ((double) M_PI / (double) 180);
 8001122:	492f      	ldr	r1, [pc, #188]	; (80011e0 <imu_initialize+0xe8>)
 8001124:	a32a      	add	r3, pc, #168	; (adr r3, 80011d0 <imu_initialize+0xd8>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	e9c1 2300 	strd	r2, r3, [r1]

#if	INIT_ZERO
	inertial.accel = COORDINATE_ZERO;
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <imu_initialize+0xec>)
 8001130:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <imu_initialize+0xe4>)
 8001132:	6811      	ldr	r1, [r2, #0]
 8001134:	6019      	str	r1, [r3, #0]
 8001136:	8892      	ldrh	r2, [r2, #4]
 8001138:	809a      	strh	r2, [r3, #4]
	inertial.gyro = COORDINATE_ZERO;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <imu_initialize+0xec>)
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <imu_initialize+0xe4>)
 800113e:	3306      	adds	r3, #6
 8001140:	6811      	ldr	r1, [r2, #0]
 8001142:	6019      	str	r1, [r3, #0]
 8001144:	8892      	ldrh	r2, [r2, #4]
 8001146:	809a      	strh	r2, [r3, #4]
	displacement.position = COORDINATE_ZERO;
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <imu_initialize+0xf0>)
 800114a:	4a24      	ldr	r2, [pc, #144]	; (80011dc <imu_initialize+0xe4>)
 800114c:	6811      	ldr	r1, [r2, #0]
 800114e:	6019      	str	r1, [r3, #0]
 8001150:	8892      	ldrh	r2, [r2, #4]
 8001152:	809a      	strh	r2, [r3, #4]
	displacement.theta = COORDINATE_ZERO;
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <imu_initialize+0xf0>)
 8001156:	4a21      	ldr	r2, [pc, #132]	; (80011dc <imu_initialize+0xe4>)
 8001158:	3306      	adds	r3, #6
 800115a:	6811      	ldr	r1, [r2, #0]
 800115c:	6019      	str	r1, [r3, #0]
 800115e:	8892      	ldrh	r2, [r2, #4]
 8001160:	809a      	strh	r2, [r3, #4]
#endif

	who_am_i = imu_read_byte(0x00);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff ff42 	bl	8000fec <imu_read_byte>
 8001168:	4603      	mov	r3, r0
 800116a:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7bba      	ldrb	r2, [r7, #14]
 8001170:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	2be0      	cmp	r3, #224	; 0xe0
 8001176:	d11e      	bne.n	80011b6 <imu_initialize+0xbe>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 800117c:	2101      	movs	r1, #1
 800117e:	2006      	movs	r0, #6
 8001180:	f7ff ff62 	bl	8001048 <imu_write_byte>
		HAL_Delay(100);
 8001184:	2064      	movs	r0, #100	; 0x64
 8001186:	f003 fd41 	bl	8004c0c <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 800118a:	2110      	movs	r1, #16
 800118c:	2003      	movs	r0, #3
 800118e:	f7ff ff5b 	bl	8001048 <imu_write_byte>
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 8001192:	2120      	movs	r1, #32
 8001194:	207f      	movs	r0, #127	; 0x7f
 8001196:	f7ff ff57 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		imu_write_byte(0x01, 0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 800119a:	2107      	movs	r1, #7
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff ff53 	bl	8001048 <imu_write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		imu_write_byte(0x14, 0x00);	//range±2g
 80011a2:	2100      	movs	r1, #0
 80011a4:	2014      	movs	r0, #20
 80011a6:	f7ff ff4f 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		imu_write_byte(REG_BANK_SEL, 0x00);	//USER_BANK0
 80011aa:	2100      	movs	r1, #0
 80011ac:	207f      	movs	r0, #127	; 0x7f
 80011ae:	f7ff ff4b 	bl	8001048 <imu_write_byte>
		imu_set_offset();
 80011b2:	f000 f81b 	bl	80011ec <imu_set_offset>
	}
#if USE_NCS
	CS_SET;
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <imu_initialize+0xe0>)
 80011be:	f005 fb29 	bl	8006814 <HAL_GPIO_WritePin>
#endif
	return ret;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	f3af 8000 	nop.w
 80011d0:	a2529d39 	.word	0xa2529d39
 80011d4:	3f91df46 	.word	0x3f91df46
 80011d8:	40020400 	.word	0x40020400
 80011dc:	20000210 	.word	0x20000210
 80011e0:	20000208 	.word	0x20000208
 80011e4:	20000230 	.word	0x20000230
 80011e8:	20000224 	.word	0x20000224

080011ec <imu_set_offset>:
	CS_SET;
#endif
}

void imu_set_offset()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	imu_read();
 80011f0:	f000 f80e 	bl	8001210 <imu_read>
	inertial_offset = inertial;
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <imu_set_offset+0x1c>)
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <imu_set_offset+0x20>)
 80011f8:	6810      	ldr	r0, [r2, #0]
 80011fa:	6851      	ldr	r1, [r2, #4]
 80011fc:	6892      	ldr	r2, [r2, #8]
 80011fe:	6018      	str	r0, [r3, #0]
 8001200:	6059      	str	r1, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000218 	.word	0x20000218
 800120c:	20000230 	.word	0x20000230

08001210 <imu_read>:

void imu_read()
{
 8001210:	b598      	push	{r3, r4, r7, lr}
 8001212:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)imu_read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_XOUT_L));
 8001214:	202d      	movs	r0, #45	; 0x2d
 8001216:	f7ff fee9 	bl	8000fec <imu_read_byte>
 800121a:	4603      	mov	r3, r0
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21c      	sxth	r4, r3
 8001220:	202e      	movs	r0, #46	; 0x2e
 8001222:	f7ff fee3 	bl	8000fec <imu_read_byte>
 8001226:	4603      	mov	r3, r0
 8001228:	b21b      	sxth	r3, r3
 800122a:	4323      	orrs	r3, r4
 800122c:	b21a      	sxth	r2, r3
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <imu_read+0xbc>)
 8001230:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)imu_read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_YOUT_L));
 8001232:	202f      	movs	r0, #47	; 0x2f
 8001234:	f7ff feda 	bl	8000fec <imu_read_byte>
 8001238:	4603      	mov	r3, r0
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21c      	sxth	r4, r3
 800123e:	2030      	movs	r0, #48	; 0x30
 8001240:	f7ff fed4 	bl	8000fec <imu_read_byte>
 8001244:	4603      	mov	r3, r0
 8001246:	b21b      	sxth	r3, r3
 8001248:	4323      	orrs	r3, r4
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <imu_read+0xbc>)
 800124e:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)imu_read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_ZOUT_L));
 8001250:	2031      	movs	r0, #49	; 0x31
 8001252:	f7ff fecb 	bl	8000fec <imu_read_byte>
 8001256:	4603      	mov	r3, r0
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21c      	sxth	r4, r3
 800125c:	2032      	movs	r0, #50	; 0x32
 800125e:	f7ff fec5 	bl	8000fec <imu_read_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	b21b      	sxth	r3, r3
 8001266:	4323      	orrs	r3, r4
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <imu_read+0xbc>)
 800126c:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 800126e:	2033      	movs	r0, #51	; 0x33
 8001270:	f7ff febc 	bl	8000fec <imu_read_byte>
 8001274:	4603      	mov	r3, r0
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21c      	sxth	r4, r3
 800127a:	2034      	movs	r0, #52	; 0x34
 800127c:	f7ff feb6 	bl	8000fec <imu_read_byte>
 8001280:	4603      	mov	r3, r0
 8001282:	b21b      	sxth	r3, r3
 8001284:	4323      	orrs	r3, r4
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <imu_read+0xbc>)
 800128a:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 800128c:	2035      	movs	r0, #53	; 0x35
 800128e:	f7ff fead 	bl	8000fec <imu_read_byte>
 8001292:	4603      	mov	r3, r0
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21c      	sxth	r4, r3
 8001298:	2036      	movs	r0, #54	; 0x36
 800129a:	f7ff fea7 	bl	8000fec <imu_read_byte>
 800129e:	4603      	mov	r3, r0
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4323      	orrs	r3, r4
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <imu_read+0xbc>)
 80012a8:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 80012aa:	2037      	movs	r0, #55	; 0x37
 80012ac:	f7ff fe9e 	bl	8000fec <imu_read_byte>
 80012b0:	4603      	mov	r3, r0
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21c      	sxth	r4, r3
 80012b6:	2038      	movs	r0, #56	; 0x38
 80012b8:	f7ff fe98 	bl	8000fec <imu_read_byte>
 80012bc:	4603      	mov	r3, r0
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4323      	orrs	r3, r4
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	4b01      	ldr	r3, [pc, #4]	; (80012cc <imu_read+0xbc>)
 80012c6:	815a      	strh	r2, [r3, #10]
}
 80012c8:	bf00      	nop
 80012ca:	bd98      	pop	{r3, r4, r7, pc}
 80012cc:	20000230 	.word	0x20000230

080012d0 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 80012d4:	f000 f804 	bl	80012e0 <rotary_set_playmode>
    rotary_set_value();
 80012d8:	f000 f81a 	bl	8001310 <rotary_set_value>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <rotary_set_playmode>:

void rotary_set_playmode()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 80012e4:	f000 f82c 	bl	8001340 <rotary_read>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b01      	ldr	r3, [pc, #4]	; (80012f4 <rotary_set_playmode+0x14>)
 80012ee:	701a      	strb	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000023c 	.word	0x2000023c

080012f8 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    return playmode;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <rotary_read_playmode+0x14>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000023c 	.word	0x2000023c

08001310 <rotary_set_value>:

void rotary_set_value()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    value = rotary_read();
 8001314:	f000 f814 	bl	8001340 <rotary_read>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b01      	ldr	r3, [pc, #4]	; (8001324 <rotary_set_value+0x14>)
 800131e:	701a      	strb	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000023d 	.word	0x2000023d

08001328 <rotary_read_value>:

uint8_t rotary_read_value()
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
    return value;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <rotary_read_value+0x14>)
 800132e:	781b      	ldrb	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000023d 	.word	0x2000023d

08001340 <rotary_read>:

uint8_t rotary_read()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 800134a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <rotary_read+0x8c>)
 8001350:	f005 fa48 	bl	80067e4 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf0c      	ite	eq
 800135a:	2301      	moveq	r3, #1
 800135c:	2300      	movne	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4413      	add	r3, r2
 8001366:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136c:	4817      	ldr	r0, [pc, #92]	; (80013cc <rotary_read+0x8c>)
 800136e:	f005 fa39 	bl	80067e4 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <rotary_read+0x3c>
 8001378:	2302      	movs	r3, #2
 800137a:	e000      	b.n	800137e <rotary_read+0x3e>
 800137c:	2300      	movs	r3, #0
 800137e:	b2da      	uxtb	r2, r3
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4413      	add	r3, r2
 8001384:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 8001386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <rotary_read+0x90>)
 800138c:	f005 fa2a 	bl	80067e4 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <rotary_read+0x5a>
 8001396:	2304      	movs	r3, #4
 8001398:	e000      	b.n	800139c <rotary_read+0x5c>
 800139a:	2300      	movs	r3, #0
 800139c:	b2da      	uxtb	r2, r3
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4413      	add	r3, r2
 80013a2:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 80013a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <rotary_read+0x8c>)
 80013aa:	f005 fa1b 	bl	80067e4 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <rotary_read+0x78>
 80013b4:	2308      	movs	r3, #8
 80013b6:	e000      	b.n	80013ba <rotary_read+0x7a>
 80013b8:	2300      	movs	r3, #0
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4413      	add	r3, r2
 80013c0:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 80013c2:	79fb      	ldrb	r3, [r7, #7]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020000 	.word	0x40020000

080013d4 <rotary_print_playmode>:

void rotary_print_playmode()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	printf("playmode = ");
 80013d8:	482c      	ldr	r0, [pc, #176]	; (800148c <rotary_print_playmode+0xb8>)
 80013da:	f009 f89d 	bl	800a518 <iprintf>
	switch(rotary_read_playmode())
 80013de:	f7ff ff8b 	bl	80012f8 <rotary_read_playmode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d847      	bhi.n	8001478 <rotary_print_playmode+0xa4>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <rotary_print_playmode+0x1c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001431 	.word	0x08001431
 80013f4:	08001439 	.word	0x08001439
 80013f8:	08001441 	.word	0x08001441
 80013fc:	08001449 	.word	0x08001449
 8001400:	08001451 	.word	0x08001451
 8001404:	08001459 	.word	0x08001459
 8001408:	08001461 	.word	0x08001461
 800140c:	08001469 	.word	0x08001469
 8001410:	08001479 	.word	0x08001479
 8001414:	08001479 	.word	0x08001479
 8001418:	08001479 	.word	0x08001479
 800141c:	08001479 	.word	0x08001479
 8001420:	08001479 	.word	0x08001479
 8001424:	08001479 	.word	0x08001479
 8001428:	08001479 	.word	0x08001479
 800142c:	08001471 	.word	0x08001471
	{
		case calibration:
			printf("calibration");
 8001430:	4817      	ldr	r0, [pc, #92]	; (8001490 <rotary_print_playmode+0xbc>)
 8001432:	f009 f871 	bl	800a518 <iprintf>
			break;
 8001436:	e023      	b.n	8001480 <rotary_print_playmode+0xac>
		case search:
			printf("search");
 8001438:	4816      	ldr	r0, [pc, #88]	; (8001494 <rotary_print_playmode+0xc0>)
 800143a:	f009 f86d 	bl	800a518 <iprintf>
			break;
 800143e:	e01f      	b.n	8001480 <rotary_print_playmode+0xac>
		case accel:
			printf("accel");
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <rotary_print_playmode+0xc4>)
 8001442:	f009 f869 	bl	800a518 <iprintf>
			break;
 8001446:	e01b      	b.n	8001480 <rotary_print_playmode+0xac>
		case max_enable:
			printf("max_enable");
 8001448:	4814      	ldr	r0, [pc, #80]	; (800149c <rotary_print_playmode+0xc8>)
 800144a:	f009 f865 	bl	800a518 <iprintf>
			break;
 800144e:	e017      	b.n	8001480 <rotary_print_playmode+0xac>
        case motor_free:
            printf("motor_free");
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <rotary_print_playmode+0xcc>)
 8001452:	f009 f861 	bl	800a518 <iprintf>
            break;
 8001456:	e013      	b.n	8001480 <rotary_print_playmode+0xac>
		case tracer_tuning:
			printf("tracer_tuning");
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <rotary_print_playmode+0xd0>)
 800145a:	f009 f85d 	bl	800a518 <iprintf>
			break;
 800145e:	e00f      	b.n	8001480 <rotary_print_playmode+0xac>
		case velotrace_tuning:
			printf("velotrace_tuning");
 8001460:	4811      	ldr	r0, [pc, #68]	; (80014a8 <rotary_print_playmode+0xd4>)
 8001462:	f009 f859 	bl	800a518 <iprintf>
			break;
 8001466:	e00b      	b.n	8001480 <rotary_print_playmode+0xac>
		case banquet:
			printf("banquet");
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <rotary_print_playmode+0xd8>)
 800146a:	f009 f855 	bl	800a518 <iprintf>
			break;
 800146e:	e007      	b.n	8001480 <rotary_print_playmode+0xac>
		case flash_print:
			printf("flash_print");
 8001470:	480f      	ldr	r0, [pc, #60]	; (80014b0 <rotary_print_playmode+0xdc>)
 8001472:	f009 f851 	bl	800a518 <iprintf>
			break;
 8001476:	e003      	b.n	8001480 <rotary_print_playmode+0xac>
		default:
			printf("unknown playmode...");
 8001478:	480e      	ldr	r0, [pc, #56]	; (80014b4 <rotary_print_playmode+0xe0>)
 800147a:	f009 f84d 	bl	800a518 <iprintf>
			break;
 800147e:	bf00      	nop
	}
	printf("\r\n");
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <rotary_print_playmode+0xe4>)
 8001482:	f009 f8cf 	bl	800a624 <puts>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800e1dc 	.word	0x0800e1dc
 8001490:	0800e1e8 	.word	0x0800e1e8
 8001494:	0800e1f4 	.word	0x0800e1f4
 8001498:	0800e1fc 	.word	0x0800e1fc
 800149c:	0800e204 	.word	0x0800e204
 80014a0:	0800e210 	.word	0x0800e210
 80014a4:	0800e21c 	.word	0x0800e21c
 80014a8:	0800e22c 	.word	0x0800e22c
 80014ac:	0800e240 	.word	0x0800e240
 80014b0:	0800e248 	.word	0x0800e248
 80014b4:	0800e254 	.word	0x0800e254
 80014b8:	0800e268 	.word	0x0800e268

080014bc <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
    enter = 1;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <switch_set_enter+0x14>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	2000023e 	.word	0x2000023e

080014d4 <switch_reset_enter>:

void switch_reset_enter()
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
    enter = 0;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <switch_reset_enter+0x14>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	2000023e 	.word	0x2000023e

080014ec <switch_init>:
{
    switch_reset_enter();
}

void switch_init()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    switch_reset_enter();
 80014f0:	f7ff fff0 	bl	80014d4 <switch_reset_enter>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <switch_read_enter>:

uint8_t switch_read_enter()
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
    return enter;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <switch_read_enter+0x14>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000023e 	.word	0x2000023e

08001510 <switch1_read>:

uint8_t switch1_read()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 8001514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <switch1_read+0x20>)
 800151a:	f005 f963 	bl	80067e4 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40020800 	.word	0x40020800

08001534 <switch2_read>:

uint8_t switch2_read()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 8001538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <switch2_read+0x20>)
 800153e:	f005 f951 	bl	80067e4 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020800 	.word	0x40020800

08001558 <switch_read>:

uint8_t switch_read()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 8001562:	f7ff ffd5 	bl	8001510 <switch1_read>
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	4413      	add	r3, r2
 8001570:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 8001572:	f7ff ffdf 	bl	8001534 <switch2_read>
 8001576:	4603      	mov	r3, r0
 8001578:	b2da      	uxtb	r2, r3
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4413      	add	r3, r2
 800157e:	71fb      	strb	r3, [r7, #7]

    return value_;
 8001580:	79fb      	ldrb	r3, [r7, #7]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <switch_enter>:

void switch_enter()
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 800158e:	f7ff ffe3 	bl	8001558 <switch_read>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <switch_enter+0x14>
    {
        switch_reset_enter();
 8001598:	f7ff ff9c 	bl	80014d4 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 800159c:	e006      	b.n	80015ac <switch_enter+0x22>
    else if(switch_read() == 0b10)
 800159e:	f7ff ffdb 	bl	8001558 <switch_read>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d101      	bne.n	80015ac <switch_enter+0x22>
        switch_set_enter();
 80015a8:	f7ff ff88 	bl	80014bc <switch_set_enter>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 80015b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b4:	b08e      	sub	sp, #56	; 0x38
 80015b6:	af0a      	add	r7, sp, #40	; 0x28
 80015b8:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 80015ba:	482d      	ldr	r0, [pc, #180]	; (8001670 <analog_array_print+0xc0>)
 80015bc:	f008 ffac 	bl	800a518 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3318      	adds	r3, #24
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	331c      	adds	r3, #28
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	331e      	adds	r3, #30
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	331a      	adds	r3, #26
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	4603      	mov	r3, r0
 80015e2:	4824      	ldr	r0, [pc, #144]	; (8001674 <analog_array_print+0xc4>)
 80015e4:	f008 ff98 	bl	800a518 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	469c      	mov	ip, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3304      	adds	r3, #4
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	469e      	mov	lr, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3308      	adds	r3, #8
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	4698      	mov	r8, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	330c      	adds	r3, #12
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3310      	adds	r3, #16
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3314      	adds	r3, #20
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3316      	adds	r3, #22
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	461c      	mov	r4, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3312      	adds	r3, #18
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	461d      	mov	r5, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	330e      	adds	r3, #14
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	461e      	mov	r6, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	330a      	adds	r3, #10
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3306      	adds	r3, #6
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3302      	adds	r3, #2
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	9308      	str	r3, [sp, #32]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	9307      	str	r3, [sp, #28]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	9306      	str	r3, [sp, #24]
 800164e:	9605      	str	r6, [sp, #20]
 8001650:	9504      	str	r5, [sp, #16]
 8001652:	9403      	str	r4, [sp, #12]
 8001654:	9002      	str	r0, [sp, #8]
 8001656:	9101      	str	r1, [sp, #4]
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	4643      	mov	r3, r8
 800165c:	4672      	mov	r2, lr
 800165e:	4661      	mov	r1, ip
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <analog_array_print+0xc8>)
 8001662:	f008 ff59 	bl	800a518 <iprintf>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001670:	0800e26c 	.word	0x0800e26c
 8001674:	0800e274 	.word	0x0800e274
 8001678:	0800e28c 	.word	0x0800e28c

0800167c <analog_rate_array_print>:

void analog_rate_array_print()
{
 800167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001680:	b092      	sub	sp, #72	; 0x48
 8001682:	af0a      	add	r7, sp, #40	; 0x28
	printf("\r\n");
 8001684:	4850      	ldr	r0, [pc, #320]	; (80017c8 <analog_rate_array_print+0x14c>)
 8001686:	f008 ffcd 	bl	800a624 <puts>
	printf("\x1b[24C");	// Cursor move right *24
 800168a:	4850      	ldr	r0, [pc, #320]	; (80017cc <analog_rate_array_print+0x150>)
 800168c:	f008 ff44 	bl	800a518 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", analog_sensor_get(12), analog_sensor_get(14), analog_sensor_get(15), analog_sensor_get(13));
 8001690:	200c      	movs	r0, #12
 8001692:	f000 faaf 	bl	8001bf4 <analog_sensor_get>
 8001696:	4603      	mov	r3, r0
 8001698:	461c      	mov	r4, r3
 800169a:	200e      	movs	r0, #14
 800169c:	f000 faaa 	bl	8001bf4 <analog_sensor_get>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461d      	mov	r5, r3
 80016a4:	200f      	movs	r0, #15
 80016a6:	f000 faa5 	bl	8001bf4 <analog_sensor_get>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461e      	mov	r6, r3
 80016ae:	200d      	movs	r0, #13
 80016b0:	f000 faa0 	bl	8001bf4 <analog_sensor_get>
 80016b4:	4603      	mov	r3, r0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	4633      	mov	r3, r6
 80016ba:	462a      	mov	r2, r5
 80016bc:	4621      	mov	r1, r4
 80016be:	4844      	ldr	r0, [pc, #272]	; (80017d0 <analog_rate_array_print+0x154>)
 80016c0:	f008 ff2a 	bl	800a518 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10), analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3), analog_sensor_get(1));
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 fa95 	bl	8001bf4 <analog_sensor_get>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4698      	mov	r8, r3
 80016ce:	2002      	movs	r0, #2
 80016d0:	f000 fa90 	bl	8001bf4 <analog_sensor_get>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4699      	mov	r9, r3
 80016d8:	2004      	movs	r0, #4
 80016da:	f000 fa8b 	bl	8001bf4 <analog_sensor_get>
 80016de:	4603      	mov	r3, r0
 80016e0:	469a      	mov	sl, r3
 80016e2:	2006      	movs	r0, #6
 80016e4:	f000 fa86 	bl	8001bf4 <analog_sensor_get>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461c      	mov	r4, r3
 80016ec:	2008      	movs	r0, #8
 80016ee:	f000 fa81 	bl	8001bf4 <analog_sensor_get>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461d      	mov	r5, r3
 80016f6:	200a      	movs	r0, #10
 80016f8:	f000 fa7c 	bl	8001bf4 <analog_sensor_get>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461e      	mov	r6, r3
 8001700:	200b      	movs	r0, #11
 8001702:	f000 fa77 	bl	8001bf4 <analog_sensor_get>
 8001706:	4603      	mov	r3, r0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	2009      	movs	r0, #9
 800170c:	f000 fa72 	bl	8001bf4 <analog_sensor_get>
 8001710:	4603      	mov	r3, r0
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	2007      	movs	r0, #7
 8001716:	f000 fa6d 	bl	8001bf4 <analog_sensor_get>
 800171a:	4603      	mov	r3, r0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	2005      	movs	r0, #5
 8001720:	f000 fa68 	bl	8001bf4 <analog_sensor_get>
 8001724:	4603      	mov	r3, r0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	2003      	movs	r0, #3
 800172a:	f000 fa63 	bl	8001bf4 <analog_sensor_get>
 800172e:	4603      	mov	r3, r0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	2001      	movs	r0, #1
 8001734:	f000 fa5e 	bl	8001bf4 <analog_sensor_get>
 8001738:	4603      	mov	r3, r0
 800173a:	9308      	str	r3, [sp, #32]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	9207      	str	r2, [sp, #28]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	9206      	str	r2, [sp, #24]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	9205      	str	r2, [sp, #20]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	9204      	str	r2, [sp, #16]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	9303      	str	r3, [sp, #12]
 8001750:	9602      	str	r6, [sp, #8]
 8001752:	9501      	str	r5, [sp, #4]
 8001754:	9400      	str	r4, [sp, #0]
 8001756:	4653      	mov	r3, sl
 8001758:	464a      	mov	r2, r9
 800175a:	4641      	mov	r1, r8
 800175c:	481d      	ldr	r0, [pc, #116]	; (80017d4 <analog_rate_array_print+0x158>)
 800175e:	f008 fedb 	bl	800a518 <iprintf>
	printf("\r\n");
 8001762:	4819      	ldr	r0, [pc, #100]	; (80017c8 <analog_rate_array_print+0x14c>)
 8001764:	f008 ff5e 	bl	800a624 <puts>

	uint16_t sum_, size_;

	sum_ = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	83fb      	strh	r3, [r7, #30]
	size_ = 16;
 800176c:	2310      	movs	r3, #16
 800176e:	837b      	strh	r3, [r7, #26]

	for(unsigned char i; i < size_; i++)
 8001770:	e00b      	b.n	800178a <analog_rate_array_print+0x10e>
	{
		sum_ += analog_sensor_get(i);
 8001772:	7f7b      	ldrb	r3, [r7, #29]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fa3d 	bl	8001bf4 <analog_sensor_get>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	4413      	add	r3, r2
 8001782:	83fb      	strh	r3, [r7, #30]
	for(unsigned char i; i < size_; i++)
 8001784:	7f7b      	ldrb	r3, [r7, #29]
 8001786:	3301      	adds	r3, #1
 8001788:	777b      	strb	r3, [r7, #29]
 800178a:	7f7b      	ldrb	r3, [r7, #29]
 800178c:	b29b      	uxth	r3, r3
 800178e:	8b7a      	ldrh	r2, [r7, #26]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8ee      	bhi.n	8001772 <analog_rate_array_print+0xf6>
	}

	printf("average = %4.2f\r\n\r\n", sum_ / (double) size_);
 8001794:	8bfb      	ldrh	r3, [r7, #30]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fec4 	bl	8000524 <__aeabi_i2d>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	8b7b      	ldrh	r3, [r7, #26]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe feae 	bl	8000504 <__aeabi_ui2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7ff f84c 	bl	800084c <__aeabi_ddiv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <analog_rate_array_print+0x15c>)
 80017ba:	f008 fead 	bl	800a518 <iprintf>
}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017c8:	0800e2cc 	.word	0x0800e2cc
 80017cc:	0800e26c 	.word	0x0800e26c
 80017d0:	0800e274 	.word	0x0800e274
 80017d4:	0800e28c 	.word	0x0800e28c
 80017d8:	0800e2d0 	.word	0x0800e2d0

080017dc <analog_d_print>:

void analog_d_print()
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	analog_print_analogmode();
 80017e0:	f000 f804 	bl	80017ec <analog_print_analogmode>
	analog_rate_array_print();
 80017e4:	f7ff ff4a 	bl	800167c <analog_rate_array_print>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <analog_print_analogmode>:

void analog_print_analogmode()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	printf("analogmode = ");
 80017f0:	4823      	ldr	r0, [pc, #140]	; (8001880 <analog_print_analogmode+0x94>)
 80017f2:	f008 fe91 	bl	800a518 <iprintf>
	switch(analog_read_analogmode())
 80017f6:	f000 f963 	bl	8001ac0 <analog_read_analogmode>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b10      	cmp	r3, #16
 80017fe:	d835      	bhi.n	800186c <analog_print_analogmode+0x80>
 8001800:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <analog_print_analogmode+0x1c>)
 8001802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001806:	bf00      	nop
 8001808:	0800184d 	.word	0x0800184d
 800180c:	0800186d 	.word	0x0800186d
 8001810:	0800186d 	.word	0x0800186d
 8001814:	0800186d 	.word	0x0800186d
 8001818:	08001855 	.word	0x08001855
 800181c:	0800186d 	.word	0x0800186d
 8001820:	0800186d 	.word	0x0800186d
 8001824:	0800186d 	.word	0x0800186d
 8001828:	0800186d 	.word	0x0800186d
 800182c:	0800186d 	.word	0x0800186d
 8001830:	0800186d 	.word	0x0800186d
 8001834:	0800186d 	.word	0x0800186d
 8001838:	0800185d 	.word	0x0800185d
 800183c:	0800186d 	.word	0x0800186d
 8001840:	0800186d 	.word	0x0800186d
 8001844:	0800186d 	.word	0x0800186d
 8001848:	08001865 	.word	0x08001865
	{
		case analogmode_calibrating:
			printf("analogmode_calibrating\r\n");
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <analog_print_analogmode+0x98>)
 800184e:	f008 fee9 	bl	800a624 <puts>
			break;
 8001852:	e00f      	b.n	8001874 <analog_print_analogmode+0x88>
		case analogmode_long:
			printf("analogmode_long\r\n");
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <analog_print_analogmode+0x9c>)
 8001856:	f008 fee5 	bl	800a624 <puts>
			break;
 800185a:	e00b      	b.n	8001874 <analog_print_analogmode+0x88>
		case analogmode_short:
			printf("analogmode_short\r\n");
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <analog_print_analogmode+0xa0>)
 800185e:	f008 fee1 	bl	800a624 <puts>
			break;
 8001862:	e007      	b.n	8001874 <analog_print_analogmode+0x88>
		case analogmode_all:
			printf("analogmode_all\r\n");
 8001864:	480a      	ldr	r0, [pc, #40]	; (8001890 <analog_print_analogmode+0xa4>)
 8001866:	f008 fedd 	bl	800a624 <puts>
			break;
 800186a:	e003      	b.n	8001874 <analog_print_analogmode+0x88>
		default:
			printf("Unknown analogmode ... \r\n");
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <analog_print_analogmode+0xa8>)
 800186e:	f008 fed9 	bl	800a624 <puts>
			break;
 8001872:	bf00      	nop
	}
	printf("\r\n");
 8001874:	4808      	ldr	r0, [pc, #32]	; (8001898 <analog_print_analogmode+0xac>)
 8001876:	f008 fed5 	bl	800a624 <puts>
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	0800e2e4 	.word	0x0800e2e4
 8001884:	0800e2f4 	.word	0x0800e2f4
 8001888:	0800e30c 	.word	0x0800e30c
 800188c:	0800e320 	.word	0x0800e320
 8001890:	0800e334 	.word	0x0800e334
 8001894:	0800e344 	.word	0x0800e344
 8001898:	0800e2cc 	.word	0x0800e2cc

0800189c <analog_print_max>:
	analog_print_analogmode();
	analog_array_print(analog);
}

void analog_print_max()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 80018a0:	4806      	ldr	r0, [pc, #24]	; (80018bc <analog_print_max+0x20>)
 80018a2:	f008 fe39 	bl	800a518 <iprintf>
	printf("analog_print_max\r\n");
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <analog_print_max+0x24>)
 80018a8:	f008 febc 	bl	800a624 <puts>
	analog_array_print(analogmax);
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <analog_print_max+0x28>)
 80018ae:	f7ff fe7f 	bl	80015b0 <analog_array_print>
	printf(ESC_DEF);
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <analog_print_max+0x2c>)
 80018b4:	f008 fe30 	bl	800a518 <iprintf>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	0800e384 	.word	0x0800e384
 80018c0:	0800e38c 	.word	0x0800e38c
 80018c4:	200003e8 	.word	0x200003e8
 80018c8:	0800e3a0 	.word	0x0800e3a0

080018cc <analog_print_min>:

void analog_print_min()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 80018d0:	4806      	ldr	r0, [pc, #24]	; (80018ec <analog_print_min+0x20>)
 80018d2:	f008 fe21 	bl	800a518 <iprintf>
	printf("analog_print_min\r\n");
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <analog_print_min+0x24>)
 80018d8:	f008 fea4 	bl	800a624 <puts>
	analog_array_print(analogmin);
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <analog_print_min+0x28>)
 80018de:	f7ff fe67 	bl	80015b0 <analog_array_print>
	printf(ESC_DEF);
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <analog_print_min+0x2c>)
 80018e4:	f008 fe18 	bl	800a518 <iprintf>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	0800e3a8 	.word	0x0800e3a8
 80018f0:	0800e3b0 	.word	0x0800e3b0
 80018f4:	20000284 	.word	0x20000284
 80018f8:	0800e3a0 	.word	0x0800e3a0

080018fc <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	printf("analog_set_to_flash()\r\n");
 8001906:	482a      	ldr	r0, [pc, #168]	; (80019b0 <analog_set_on_flash+0xb4>)
 8001908:	f008 fe8c 	bl	800a624 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e046      	b.n	80019a0 <analog_set_on_flash+0xa4>
	{
		printf(ESC_MAG);
 8001912:	4828      	ldr	r0, [pc, #160]	; (80019b4 <analog_set_on_flash+0xb8>)
 8001914:	f008 fe00 	bl	800a518 <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001918:	4a27      	ldr	r2, [pc, #156]	; (80019b8 <analog_set_on_flash+0xbc>)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	885b      	ldrh	r3, [r3, #2]
 8001922:	4619      	mov	r1, r3
 8001924:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <analog_set_on_flash+0xbc>)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3310      	adds	r3, #16
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	885b      	ldrh	r3, [r3, #2]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	460a      	mov	r2, r1
 8001936:	68f9      	ldr	r1, [r7, #12]
 8001938:	4820      	ldr	r0, [pc, #128]	; (80019bc <analog_set_on_flash+0xc0>)
 800193a:	f008 fded 	bl	800a518 <iprintf>
		printf(ESC_DEF);
 800193e:	4820      	ldr	r0, [pc, #128]	; (80019c0 <analog_set_on_flash+0xc4>)
 8001940:	f008 fdea 	bl	800a518 <iprintf>
		*(analogmin_ + i) = analogmin[i];
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	491d      	ldr	r1, [pc, #116]	; (80019c4 <analog_set_on_flash+0xc8>)
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001954:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	4413      	add	r3, r2
 800195e:	491a      	ldr	r1, [pc, #104]	; (80019c8 <analog_set_on_flash+0xcc>)
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001966:	801a      	strh	r2, [r3, #0]
		printf(ESC_GRE);
 8001968:	4818      	ldr	r0, [pc, #96]	; (80019cc <analog_set_on_flash+0xd0>)
 800196a:	f008 fdd5 	bl	800a518 <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <analog_set_on_flash+0xbc>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	4619      	mov	r1, r3
 800197a:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <analog_set_on_flash+0xbc>)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3310      	adds	r3, #16
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	885b      	ldrh	r3, [r3, #2]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	460a      	mov	r2, r1
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	480b      	ldr	r0, [pc, #44]	; (80019bc <analog_set_on_flash+0xc0>)
 8001990:	f008 fdc2 	bl	800a518 <iprintf>
		printf(ESC_DEF);
 8001994:	480a      	ldr	r0, [pc, #40]	; (80019c0 <analog_set_on_flash+0xc4>)
 8001996:	f008 fdbf 	bl	800a518 <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	d9b5      	bls.n	8001912 <analog_set_on_flash+0x16>
	}
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	0800e3c4 	.word	0x0800e3c4
 80019b4:	0800e3dc 	.word	0x0800e3dc
 80019b8:	200007f8 	.word	0x200007f8
 80019bc:	0800e3e4 	.word	0x0800e3e4
 80019c0:	0800e3a0 	.word	0x0800e3a0
 80019c4:	20000284 	.word	0x20000284
 80019c8:	200003e8 	.word	0x200003e8
 80019cc:	0800e420 	.word	0x0800e420

080019d0 <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	printf("analog_set_from_flash()\r\n");
 80019da:	4824      	ldr	r0, [pc, #144]	; (8001a6c <analog_set_from_flash+0x9c>)
 80019dc:	f008 fe22 	bl	800a624 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e03a      	b.n	8001a5c <analog_set_from_flash+0x8c>
	{
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 80019e6:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <analog_set_from_flash+0xa0>)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	885b      	ldrh	r3, [r3, #2]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <analog_set_from_flash+0xa0>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3310      	adds	r3, #16
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	885b      	ldrh	r3, [r3, #2]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	460a      	mov	r2, r1
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	481b      	ldr	r0, [pc, #108]	; (8001a74 <analog_set_from_flash+0xa4>)
 8001a08:	f008 fd86 	bl	800a518 <iprintf>
		analogmin[i] = *(analogmin_ + i);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	8819      	ldrh	r1, [r3, #0]
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <analog_set_from_flash+0xa8>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	8819      	ldrh	r1, [r3, #0]
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <analog_set_from_flash+0xac>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <analog_set_from_flash+0xa0>)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	885b      	ldrh	r3, [r3, #2]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <analog_set_from_flash+0xa0>)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3310      	adds	r3, #16
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	885b      	ldrh	r3, [r3, #2]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	4808      	ldr	r0, [pc, #32]	; (8001a74 <analog_set_from_flash+0xa4>)
 8001a52:	f008 fd61 	bl	800a518 <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b0f      	cmp	r3, #15
 8001a60:	d9c1      	bls.n	80019e6 <analog_set_from_flash+0x16>
	}
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	0800e428 	.word	0x0800e428
 8001a70:	200007f8 	.word	0x200007f8
 8001a74:	0800e3e4 	.word	0x0800e3e4
 8001a78:	20000284 	.word	0x20000284
 8001a7c:	200003e8 	.word	0x200003e8

08001a80 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <analog_set_calibrationsize+0x1c>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	7013      	strb	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	200002a5 	.word	0x200002a5

08001aa0 <analog_set_analogmode>:
{
	return calibrationsize;
}

void analog_set_analogmode(AnalogMode analogmode_)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <analog_set_analogmode+0x1c>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	7013      	strb	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	200002a4 	.word	0x200002a4

08001ac0 <analog_read_analogmode>:

AnalogMode analog_read_analogmode()
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	return analogmode;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <analog_read_analogmode+0x14>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200002a4 	.word	0x200002a4

08001ad8 <analog_calibration_start>:

void analog_calibration_start()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	analog_set_analogmode(analogmode_calibrating);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff ffde 	bl	8001aa0 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	e00d      	b.n	8001b06 <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <analog_calibration_start+0x48>)
 8001aee:	2100      	movs	r1, #0
 8001af0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <analog_calibration_start+0x4c>)
 8001af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	3301      	adds	r3, #1
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d9ee      	bls.n	8001aea <analog_calibration_start+0x12>
    }
	analog_print_max();
 8001b0c:	f7ff fec6 	bl	800189c <analog_print_max>
	analog_print_min();
 8001b10:	f7ff fedc 	bl	80018cc <analog_print_min>
	analog_sensor_start();
 8001b14:	f000 f844 	bl	8001ba0 <analog_sensor_start>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200003e8 	.word	0x200003e8
 8001b24:	20000284 	.word	0x20000284

08001b28 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(analogmode_all);
 8001b2c:	2010      	movs	r0, #16
 8001b2e:	f7ff ffb7 	bl	8001aa0 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001b32:	f000 f82f 	bl	8001b94 <analog_stop>
	analog_print_max();
 8001b36:	f7ff feb1 	bl	800189c <analog_print_max>
	analog_print_min();
 8001b3a:	f7ff fec7 	bl	80018cc <analog_print_min>
	/* flashbuffer.analogmin/max = analogmin/max */
	analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8001b3e:	4904      	ldr	r1, [pc, #16]	; (8001b50 <analog_calibration_stop+0x28>)
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <analog_calibration_stop+0x2c>)
 8001b42:	f7ff fedb 	bl	80018fc <analog_set_on_flash>
	flash_write();
 8001b46:	f000 fa7b 	bl	8002040 <flash_write>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000081a 	.word	0x2000081a
 8001b54:	200007fa 	.word	0x200007fa

08001b58 <analog_init>:

void analog_init()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 8001b5c:	2010      	movs	r0, #16
 8001b5e:	f7ff ff8f 	bl	8001a80 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <analog_init+0x20>)
 8001b64:	f003 f876 	bl	8004c54 <HAL_ADC_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <analog_init+0x1a>
    {
        Error_Handler();
 8001b6e:	f001 f96d 	bl	8002e4c <Error_Handler>
    }
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000058c 	.word	0x2000058c

08001b7c <analog_start>:

void analog_start()
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	printf("analog_sensor_start()\r\n");
 8001b80:	4803      	ldr	r0, [pc, #12]	; (8001b90 <analog_start+0x14>)
 8001b82:	f008 fd4f 	bl	800a624 <puts>
	analog_sensor_start();
 8001b86:	f000 f80b 	bl	8001ba0 <analog_sensor_start>
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	0800e444 	.word	0x0800e444

08001b94 <analog_stop>:

void analog_stop()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001b98:	f000 f822 	bl	8001be0 <analog_sensor_stop>
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <analog_sensor_start>:

void analog_sensor_start()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
 8001ba4:	480a      	ldr	r0, [pc, #40]	; (8001bd0 <analog_sensor_start+0x30>)
 8001ba6:	f008 fd3d 	bl	800a624 <puts>
    sensgettime = 0;
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <analog_sensor_start+0x34>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
	analog_set_analogmode(analogmode_all);
 8001bb0:	2010      	movs	r0, #16
 8001bb2:	f7ff ff75 	bl	8001aa0 <analog_set_analogmode>
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	4907      	ldr	r1, [pc, #28]	; (8001bd8 <analog_sensor_start+0x38>)
 8001bba:	4808      	ldr	r0, [pc, #32]	; (8001bdc <analog_sensor_start+0x3c>)
 8001bbc:	f003 f88e 	bl	8004cdc <HAL_ADC_Start_DMA>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <analog_sensor_start+0x2a>
    {
        Error_Handler();
 8001bc6:	f001 f941 	bl	8002e4c <Error_Handler>
    }
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	0800e45c 	.word	0x0800e45c
 8001bd4:	20000260 	.word	0x20000260
 8001bd8:	20000264 	.word	0x20000264
 8001bdc:	2000058c 	.word	0x2000058c

08001be0 <analog_sensor_stop>:

void analog_sensor_stop()
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <analog_sensor_stop+0x10>)
 8001be6:	f003 f989 	bl	8004efc <HAL_ADC_Stop_DMA>
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000058c 	.word	0x2000058c

08001bf4 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001bf4:	b5b0      	push	{r4, r5, r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (double) (analogmax[i] - analogmin[i]);
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <analog_sensor_get+0x80>)
 8001c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c06:	4619      	mov	r1, r3
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	4a1b      	ldr	r2, [pc, #108]	; (8001c78 <analog_sensor_get+0x84>)
 8001c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c10:	1acb      	subs	r3, r1, r3
 8001c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fc82 	bl	8000524 <__aeabi_i2d>
 8001c20:	4604      	mov	r4, r0
 8001c22:	460d      	mov	r5, r1
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	4a15      	ldr	r2, [pc, #84]	; (8001c7c <analog_sensor_get+0x88>)
 8001c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <analog_sensor_get+0x84>)
 8001c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c36:	1acb      	subs	r3, r1, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc73 	bl	8000524 <__aeabi_i2d>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	f7fe fe01 	bl	800084c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	79fc      	ldrb	r4, [r7, #7]
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe ffa8 	bl	8000ba8 <__aeabi_d2uiz>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <analog_sensor_get+0x8c>)
 8001c5e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500);
#endif
	return analograte[i];
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <analog_sensor_get+0x8c>)
 8001c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bdb0      	pop	{r4, r5, r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000240 	.word	0x20000240
 8001c78:	20000284 	.word	0x20000284
 8001c7c:	200003e8 	.word	0x200003e8
 8001c80:	200002a8 	.word	0x200002a8

08001c84 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001c8c:	f000 f804 	bl	8001c98 <analog_get_and_sort>
#endif
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001c98:	b490      	push	{r4, r7}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001c9e:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <analog_get_and_sort+0x120>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d968      	bls.n	8001d78 <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001ca6:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <analog_get_and_sort+0x120>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	e05f      	b.n	8001d72 <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	71bb      	strb	r3, [r7, #6]
 8001cb6:	e02d      	b.n	8001d14 <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	717b      	strb	r3, [r7, #5]
 8001cbc:	e023      	b.n	8001d06 <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001cbe:	797b      	ldrb	r3, [r7, #5]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	493d      	ldr	r1, [pc, #244]	; (8001dbc <analog_get_and_sort+0x124>)
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cce:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001cd0:	7978      	ldrb	r0, [r7, #5]
 8001cd2:	79f9      	ldrb	r1, [r7, #7]
 8001cd4:	797b      	ldrb	r3, [r7, #5]
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	4c38      	ldr	r4, [pc, #224]	; (8001dbc <analog_get_and_sort+0x124>)
 8001cdc:	0100      	lsls	r0, r0, #4
 8001cde:	4401      	add	r1, r0
 8001ce0:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001ce4:	4935      	ldr	r1, [pc, #212]	; (8001dbc <analog_get_and_sort+0x124>)
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	4413      	add	r3, r2
 8001cea:	4602      	mov	r2, r0
 8001cec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001cf0:	797a      	ldrb	r2, [r7, #5]
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	4931      	ldr	r1, [pc, #196]	; (8001dbc <analog_get_and_sort+0x124>)
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	717b      	strb	r3, [r7, #5]
 8001d06:	797a      	ldrb	r2, [r7, #5]
 8001d08:	79bb      	ldrb	r3, [r7, #6]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d8d7      	bhi.n	8001cbe <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001d0e:	79bb      	ldrb	r3, [r7, #6]
 8001d10:	3301      	adds	r3, #1
 8001d12:	71bb      	strb	r3, [r7, #6]
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d9ce      	bls.n	8001cb8 <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	4927      	ldr	r1, [pc, #156]	; (8001dbc <analog_get_and_sort+0x124>)
 8001d20:	3240      	adds	r2, #64	; 0x40
 8001d22:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d26:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <analog_get_and_sort+0x128>)
 8001d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <analog_get_and_sort+0x12c>)
 8001d30:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <analog_get_and_sort+0x128>)
 8001d38:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	428a      	cmp	r2, r1
 8001d40:	bf38      	it	cc
 8001d42:	460a      	movcc	r2, r1
 8001d44:	b291      	uxth	r1, r2
 8001d46:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <analog_get_and_sort+0x12c>)
 8001d48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <analog_get_and_sort+0x130>)
 8001d50:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <analog_get_and_sort+0x128>)
 8001d58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	428a      	cmp	r2, r1
 8001d60:	bf28      	it	cs
 8001d62:	460a      	movcs	r2, r1
 8001d64:	b291      	uxth	r1, r2
 8001d66:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <analog_get_and_sort+0x130>)
 8001d68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d99c      	bls.n	8001cb2 <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	713b      	strb	r3, [r7, #4]
 8001d7c:	e00f      	b.n	8001d9e <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001d7e:	7939      	ldrb	r1, [r7, #4]
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <analog_get_and_sort+0x120>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	793b      	ldrb	r3, [r7, #4]
 8001d86:	4811      	ldr	r0, [pc, #68]	; (8001dcc <analog_get_and_sort+0x134>)
 8001d88:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001d8c:	490b      	ldr	r1, [pc, #44]	; (8001dbc <analog_get_and_sort+0x124>)
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	4413      	add	r3, r2
 8001d92:	4602      	mov	r2, r0
 8001d94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d98:	793b      	ldrb	r3, [r7, #4]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	713b      	strb	r3, [r7, #4]
 8001d9e:	793b      	ldrb	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d9ec      	bls.n	8001d7e <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <analog_get_and_sort+0x120>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <analog_get_and_sort+0x120>)
 8001dac:	6013      	str	r3, [r2, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc90      	pop	{r4, r7}
 8001db6:	4770      	bx	lr
 8001db8:	20000260 	.word	0x20000260
 8001dbc:	200002c8 	.word	0x200002c8
 8001dc0:	20000240 	.word	0x20000240
 8001dc4:	200003e8 	.word	0x200003e8
 8001dc8:	20000284 	.word	0x20000284
 8001dcc:	20000264 	.word	0x20000264

08001dd0 <encoder_length>:
int16_t encoder_left, encoder_right;
double encoder;

/* public */
double encoder_length()
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length() > ");
    printf("encoder * (double) LENGTHPERPULSE = %6.1f * %1.5f = %7.5f\r\n", encoder, LENGTHPERPULSE, encoder * (double) LENGTHPERPULSE);
    #endif
    return (double) encoder * (double) LENGTHPERPULSE;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <encoder_length+0x30>)
 8001dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dda:	a307      	add	r3, pc, #28	; (adr r3, 8001df8 <encoder_length+0x28>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	f7fe fc0a 	bl	80005f8 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dec:	eeb0 0a47 	vmov.f32	s0, s14
 8001df0:	eef0 0a67 	vmov.f32	s1, s15
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	24a478cb 	.word	0x24a478cb
 8001dfc:	40192ab8 	.word	0x40192ab8
 8001e00:	200007e8 	.word	0x200007e8
 8001e04:	00000000 	.word	0x00000000

08001e08 <encoder_length_left>:

double encoder_length_left()
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_left() > ");
    printf("encoder_left * (double) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_left, LENGTHPERPULSE, encoder_left * (double) LENGTHPERPULSE);
    #endif
    return (double) encoder_left * (double) LENGTHPERPULSE;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <encoder_length_left+0x38>)
 8001e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb86 	bl	8000524 <__aeabi_i2d>
 8001e18:	a307      	add	r3, pc, #28	; (adr r3, 8001e38 <encoder_length_left+0x30>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fbeb 	bl	80005f8 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e2e:	eef0 0a67 	vmov.f32	s1, s15
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	f3af 8000 	nop.w
 8001e38:	24a478cb 	.word	0x24a478cb
 8001e3c:	40192ab8 	.word	0x40192ab8
 8001e40:	200007e0 	.word	0x200007e0
 8001e44:	00000000 	.word	0x00000000

08001e48 <encoder_length_right>:

double encoder_length_right()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_right() > ");
    printf("encoder_right * (double) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_right, LENGTHPERPULSE, encoder_right * (double) LENGTHPERPULSE);
    #endif
    return (double) encoder_right * (double) LENGTHPERPULSE;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <encoder_length_right+0x38>)
 8001e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb66 	bl	8000524 <__aeabi_i2d>
 8001e58:	a307      	add	r3, pc, #28	; (adr r3, 8001e78 <encoder_length_right+0x30>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fbcb 	bl	80005f8 <__aeabi_dmul>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e6e:	eef0 0a67 	vmov.f32	s1, s15
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	f3af 8000 	nop.w
 8001e78:	24a478cb 	.word	0x24a478cb
 8001e7c:	40192ab8 	.word	0x40192ab8
 8001e80:	200007f0 	.word	0x200007f0

08001e84 <encoder_set>:
    #endif
}

/* only read tim10_main */
void encoder_set()
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <encoder_set+0x5c>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <encoder_set+0x60>)
 8001e98:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <encoder_set+0x64>)
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <encoder_set+0x68>)
 8001eaa:	801a      	strh	r2, [r3, #0]
    encoder = (encoder_left + encoder_right) / (double) 2;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <encoder_set+0x60>)
 8001eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <encoder_set+0x68>)
 8001eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb31 	bl	8000524 <__aeabi_i2d>
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001eca:	f7fe fcbf 	bl	800084c <__aeabi_ddiv>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4907      	ldr	r1, [pc, #28]	; (8001ef0 <encoder_set+0x6c>)
 8001ed4:	e9c1 2300 	strd	r2, r3, [r1]
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set() > ");
    printf("encoder_left = %6d, encoder_right = %6d, encoder = %6.1f\r\n", encoder_left, encoder_right, encoder);
    #endif

    encoder_set_middle();
 8001ed8:	f000 f84e 	bl	8001f78 <encoder_set_middle>
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	200007e0 	.word	0x200007e0
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	200007f0 	.word	0x200007f0
 8001ef0:	200007e8 	.word	0x200007e8

08001ef4 <encoder_init>:

void encoder_init()
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
    #endif
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
    encoder_left = 0;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <encoder_start+0x3c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <encoder_start+0x40>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 8001f14:	490c      	ldr	r1, [pc, #48]	; (8001f48 <encoder_start+0x44>)
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	f04f 0300 	mov.w	r3, #0
 8001f1e:	e9c1 2300 	strd	r2, r3, [r1]

    encoder_set_middle();
 8001f22:	f000 f829 	bl	8001f78 <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001f26:	213c      	movs	r1, #60	; 0x3c
 8001f28:	4808      	ldr	r0, [pc, #32]	; (8001f4c <encoder_start+0x48>)
 8001f2a:	f006 fb07 	bl	800853c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001f2e:	213c      	movs	r1, #60	; 0x3c
 8001f30:	4807      	ldr	r0, [pc, #28]	; (8001f50 <encoder_start+0x4c>)
 8001f32:	f006 fb03 	bl	800853c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 8001f36:	4807      	ldr	r0, [pc, #28]	; (8001f54 <encoder_start+0x50>)
 8001f38:	f006 f834 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200007e0 	.word	0x200007e0
 8001f44:	200007f0 	.word	0x200007f0
 8001f48:	200007e8 	.word	0x200007e8
 8001f4c:	200006c4 	.word	0x200006c4
 8001f50:	20000544 	.word	0x20000544
 8001f54:	200004fc 	.word	0x200004fc

08001f58 <encoder_stop>:

void encoder_stop()
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001f5c:	213c      	movs	r1, #60	; 0x3c
 8001f5e:	4804      	ldr	r0, [pc, #16]	; (8001f70 <encoder_stop+0x18>)
 8001f60:	f006 fb7a 	bl	8008658 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001f64:	213c      	movs	r1, #60	; 0x3c
 8001f66:	4803      	ldr	r0, [pc, #12]	; (8001f74 <encoder_stop+0x1c>)
 8001f68:	f006 fb76 	bl	8008658 <HAL_TIM_Encoder_Stop>
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200006c4 	.word	0x200006c4
 8001f74:	20000544 	.word	0x20000544

08001f78 <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <encoder_set_middle+0x20>)
 8001f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <encoder_set_middle+0x24>)
 8001f86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set_middle() > ");
    printf("TIM1 -> CNT = %6lu, TIM3 -> CNT = %6lu\r\n", TIM1->CNT, TIM3->CNT);
    #endif
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40000400 	.word	0x40000400

08001fa0 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 8001faa:	230b      	movs	r3, #11
 8001fac:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 8001fba:	463a      	mov	r2, r7
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 f951 	bl	8006268 <HAL_FLASHEx_Erase>
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 8001fda:	f003 ffe3 	bl	8005fa4 <HAL_FLASH_Unlock>
	flash_erase();
 8001fde:	f7ff ffdf 	bl	8001fa0 <flash_erase>

	for (uint32_t add = address; add < (address + size); add++)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e00e      	b.n	8002006 <flash_writting+0x38>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	6979      	ldr	r1, [r7, #20]
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f003 ff81 	bl	8005efc <HAL_FLASH_Program>
		data++;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	429a      	cmp	r2, r3
 8002010:	d3ea      	bcc.n	8001fe8 <flash_writting+0x1a>
	}

	HAL_FLASH_Lock();
 8002012:	f003 ffe9 	bl	8005fe8 <HAL_FLASH_Lock>
#endif
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4619      	mov	r1, r3
 8002030:	68b8      	ldr	r0, [r7, #8]
 8002032:	f007 fbe1 	bl	80097f8 <memcpy>
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <flash_write>:

void flash_write()
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	flash_writting(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <flash_write+0x14>)
 8002046:	2260      	movs	r2, #96	; 0x60
 8002048:	4903      	ldr	r1, [pc, #12]	; (8002058 <flash_write+0x18>)
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ffbf 	bl	8001fce <flash_writting>
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	080e0000 	.word	0x080e0000
 8002058:	200007f8 	.word	0x200007f8

0800205c <flash_read>:

void flash_read()
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	flash_reading(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <flash_read+0x14>)
 8002062:	2260      	movs	r2, #96	; 0x60
 8002064:	4903      	ldr	r1, [pc, #12]	; (8002074 <flash_read+0x18>)
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ffd9 	bl	800201e <flash_reading>
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	080e0000 	.word	0x080e0000
 8002074:	200007f8 	.word	0x200007f8

08002078 <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	flash_read();
 800207c:	f7ff ffee 	bl	800205c <flash_read>
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		#if !D_TIM6_WHILE
		tim6_main();
 8002096:	f001 fed3 	bl	8003e40 <tim6_main>
		#endif
	}

	if(htim->Instance == TIM10)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		#if !D_TIM7_WHILE
		tim7_main();
 80020a4:	f001 ffd4 	bl	8004050 <tim7_main>
		#endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    #if !D_TIM10_WHILE
		tim10_main();
 80020b2:	f001 fd7d 	bl	8003bb0 <tim10_main>
    #endif
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d101      	bne.n	80020c4 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim11_main();
 80020c0:	f001 fe78 	bl	8003db4 <tim11_main>
	}
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40001000 	.word	0x40001000
 80020d0:	40014400 	.word	0x40014400
 80020d4:	40014800 	.word	0x40014800

080020d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020dc:	f002 fd24 	bl	8004b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e0:	f000 f94c 	bl	800237c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e4:	f000 fd6e 	bl	8002bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 80020e8:	f000 fd4c 	bl	8002b84 <MX_DMA_Init>
  MX_ADC1_Init();
 80020ec:	f000 f9b0 	bl	8002450 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80020f0:	f000 fd1e 	bl	8002b30 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80020f4:	f000 fc44 	bl	8002980 <MX_TIM6_Init>
  MX_TIM4_Init();
 80020f8:	f000 fbde 	bl	80028b8 <MX_TIM4_Init>
  MX_TIM1_Init();
 80020fc:	f000 fb30 	bl	8002760 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002100:	f000 fb86 	bl	8002810 <MX_TIM3_Init>
  MX_TIM10_Init();
 8002104:	f000 fca8 	bl	8002a58 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002108:	f000 fcca 	bl	8002aa0 <MX_TIM11_Init>
  MX_SPI2_Init();
 800210c:	f000 faf2 	bl	80026f4 <MX_SPI2_Init>
  MX_I2C1_Init();
 8002110:	f000 fac2 	bl	8002698 <MX_I2C1_Init>
  MX_TIM14_Init();
 8002114:	f000 fce8 	bl	8002ae8 <MX_TIM14_Init>
  MX_TIM7_Init();
 8002118:	f000 fc68 	bl	80029ec <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 800211c:	4895      	ldr	r0, [pc, #596]	; (8002374 <main+0x29c>)
 800211e:	f008 f9fb 	bl	800a518 <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8002122:	4895      	ldr	r0, [pc, #596]	; (8002378 <main+0x2a0>)
 8002124:	f008 fa7e 	bl	800a624 <puts>

  main_init();
 8002128:	f000 fe36 	bl	8002d98 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 800212c:	f000 fe5e 	bl	8002dec <main_print_while>

		if(switch_read_enter())
 8002130:	f7ff f9e2 	bl	80014f8 <switch_read_enter>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8111 	beq.w	800235e <main+0x286>
		{
			switch(rotary_read())
 800213c:	f7ff f900 	bl	8001340 <rotary_read>
 8002140:	4603      	mov	r3, r0
 8002142:	2b0f      	cmp	r3, #15
 8002144:	f200 810d 	bhi.w	8002362 <main+0x28a>
 8002148:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <main+0x78>)
 800214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214e:	bf00      	nop
 8002150:	08002191 	.word	0x08002191
 8002154:	080021cf 	.word	0x080021cf
 8002158:	080021e9 	.word	0x080021e9
 800215c:	08002203 	.word	0x08002203
 8002160:	0800221d 	.word	0x0800221d
 8002164:	08002237 	.word	0x08002237
 8002168:	08002251 	.word	0x08002251
 800216c:	0800226b 	.word	0x0800226b
 8002170:	08002285 	.word	0x08002285
 8002174:	0800229f 	.word	0x0800229f
 8002178:	080022b9 	.word	0x080022b9
 800217c:	080022d3 	.word	0x080022d3
 8002180:	080022ed 	.word	0x080022ed
 8002184:	08002307 	.word	0x08002307
 8002188:	08002321 	.word	0x08002321
 800218c:	0800233b 	.word	0x0800233b
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8002190:	f7ff f8b2 	bl	80012f8 <rotary_read_playmode>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10c      	bne.n	80021b4 <main+0xdc>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 800219a:	f7ff fc9d 	bl	8001ad8 <analog_calibration_start>

            while(switch_read_enter())
 800219e:	e001      	b.n	80021a4 <main+0xcc>
            {
              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_main();
 80021a0:	f000 fe36 	bl	8002e10 <main_main>
            while(switch_read_enter())
 80021a4:	f7ff f9a8 	bl	80014f8 <switch_read_enter>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f8      	bne.n	80021a0 <main+0xc8>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 80021ae:	f7ff fcbb 	bl	8001b28 <analog_calibration_stop>
              main_main();
            }

            running_stop();
          }
          break;	// case 0x00:
 80021b2:	e0d9      	b.n	8002368 <main+0x290>
            running_start();
 80021b4:	f000 fe00 	bl	8002db8 <running_start>
            while(switch_read_enter())
 80021b8:	e001      	b.n	80021be <main+0xe6>
              main_main();
 80021ba:	f000 fe29 	bl	8002e10 <main_main>
            while(switch_read_enter())
 80021be:	f7ff f99b 	bl	80014f8 <switch_read_enter>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f8      	bne.n	80021ba <main+0xe2>
            running_stop();
 80021c8:	f000 fe06 	bl	8002dd8 <running_stop>
          break;	// case 0x00:
 80021cc:	e0cc      	b.n	8002368 <main+0x290>
        case 0x01:	// 1
          running_start();
 80021ce:	f000 fdf3 	bl	8002db8 <running_start>

          while (switch_read_enter())
 80021d2:	e001      	b.n	80021d8 <main+0x100>
          {
            main_main();
 80021d4:	f000 fe1c 	bl	8002e10 <main_main>
          while (switch_read_enter())
 80021d8:	f7ff f98e 	bl	80014f8 <switch_read_enter>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f8      	bne.n	80021d4 <main+0xfc>
          }

          running_stop();
 80021e2:	f000 fdf9 	bl	8002dd8 <running_stop>
          break;
 80021e6:	e0bf      	b.n	8002368 <main+0x290>
        case 0x02:	// 2
          running_start();
 80021e8:	f000 fde6 	bl	8002db8 <running_start>

          while(switch_read_enter())
 80021ec:	e001      	b.n	80021f2 <main+0x11a>
          {
            main_main();
 80021ee:	f000 fe0f 	bl	8002e10 <main_main>
          while(switch_read_enter())
 80021f2:	f7ff f981 	bl	80014f8 <switch_read_enter>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f8      	bne.n	80021ee <main+0x116>
          }

          running_stop();
 80021fc:	f000 fdec 	bl	8002dd8 <running_stop>
          break;
 8002200:	e0b2      	b.n	8002368 <main+0x290>
        case 0x03:	// 3
          running_start();
 8002202:	f000 fdd9 	bl	8002db8 <running_start>

          while(switch_read_enter())
 8002206:	e001      	b.n	800220c <main+0x134>
          {
            main_main();
 8002208:	f000 fe02 	bl	8002e10 <main_main>
          while(switch_read_enter())
 800220c:	f7ff f974 	bl	80014f8 <switch_read_enter>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f8      	bne.n	8002208 <main+0x130>
          }

          running_stop();
 8002216:	f000 fddf 	bl	8002dd8 <running_stop>
          break;
 800221a:	e0a5      	b.n	8002368 <main+0x290>
        case 0x04:	// 4
          running_start();
 800221c:	f000 fdcc 	bl	8002db8 <running_start>

          while(switch_read_enter())
 8002220:	e001      	b.n	8002226 <main+0x14e>
          {
            main_main();
 8002222:	f000 fdf5 	bl	8002e10 <main_main>
          while(switch_read_enter())
 8002226:	f7ff f967 	bl	80014f8 <switch_read_enter>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f8      	bne.n	8002222 <main+0x14a>
          }

          running_stop();
 8002230:	f000 fdd2 	bl	8002dd8 <running_stop>
          break;
 8002234:	e098      	b.n	8002368 <main+0x290>
        case 0x05:	// 5
          running_start();
 8002236:	f000 fdbf 	bl	8002db8 <running_start>

          while(switch_read_enter())
 800223a:	e001      	b.n	8002240 <main+0x168>
          {
            main_main();
 800223c:	f000 fde8 	bl	8002e10 <main_main>
          while(switch_read_enter())
 8002240:	f7ff f95a 	bl	80014f8 <switch_read_enter>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f8      	bne.n	800223c <main+0x164>
          }

          running_stop();
 800224a:	f000 fdc5 	bl	8002dd8 <running_stop>
          break;
 800224e:	e08b      	b.n	8002368 <main+0x290>
        case 0x06:	// 6
          running_start();
 8002250:	f000 fdb2 	bl	8002db8 <running_start>

          while(switch_read_enter())
 8002254:	e001      	b.n	800225a <main+0x182>
          {
            main_main();
 8002256:	f000 fddb 	bl	8002e10 <main_main>
          while(switch_read_enter())
 800225a:	f7ff f94d 	bl	80014f8 <switch_read_enter>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f8      	bne.n	8002256 <main+0x17e>
          }

          running_stop();
 8002264:	f000 fdb8 	bl	8002dd8 <running_stop>
          break;
 8002268:	e07e      	b.n	8002368 <main+0x290>
        case 0x07:	// 7
          running_start();
 800226a:	f000 fda5 	bl	8002db8 <running_start>

          while(switch_read_enter())
 800226e:	e001      	b.n	8002274 <main+0x19c>
          {
            main_main();
 8002270:	f000 fdce 	bl	8002e10 <main_main>
          while(switch_read_enter())
 8002274:	f7ff f940 	bl	80014f8 <switch_read_enter>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f8      	bne.n	8002270 <main+0x198>
          }

          running_stop();
 800227e:	f000 fdab 	bl	8002dd8 <running_stop>
          break;
 8002282:	e071      	b.n	8002368 <main+0x290>
        case 0x08:	// 8
          running_start();
 8002284:	f000 fd98 	bl	8002db8 <running_start>

          while(switch_read_enter())
 8002288:	e001      	b.n	800228e <main+0x1b6>
          {
            main_main();
 800228a:	f000 fdc1 	bl	8002e10 <main_main>
          while(switch_read_enter())
 800228e:	f7ff f933 	bl	80014f8 <switch_read_enter>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f8      	bne.n	800228a <main+0x1b2>
          }

          running_stop();
 8002298:	f000 fd9e 	bl	8002dd8 <running_stop>
          break;
 800229c:	e064      	b.n	8002368 <main+0x290>
        case 0x09:	// 9
          running_start();
 800229e:	f000 fd8b 	bl	8002db8 <running_start>

          while(switch_read_enter())
 80022a2:	e001      	b.n	80022a8 <main+0x1d0>
          {
            main_main();
 80022a4:	f000 fdb4 	bl	8002e10 <main_main>
          while(switch_read_enter())
 80022a8:	f7ff f926 	bl	80014f8 <switch_read_enter>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f8      	bne.n	80022a4 <main+0x1cc>
          }

          running_stop();
 80022b2:	f000 fd91 	bl	8002dd8 <running_stop>
          break;
 80022b6:	e057      	b.n	8002368 <main+0x290>
        case 0x0A:	// A
          running_start();
 80022b8:	f000 fd7e 	bl	8002db8 <running_start>

          while(switch_read_enter())
 80022bc:	e001      	b.n	80022c2 <main+0x1ea>
          {
            main_main();
 80022be:	f000 fda7 	bl	8002e10 <main_main>
          while(switch_read_enter())
 80022c2:	f7ff f919 	bl	80014f8 <switch_read_enter>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f8      	bne.n	80022be <main+0x1e6>
          }

          running_stop();
 80022cc:	f000 fd84 	bl	8002dd8 <running_stop>
          break;
 80022d0:	e04a      	b.n	8002368 <main+0x290>
        case 0x0B:	// B
          running_start();
 80022d2:	f000 fd71 	bl	8002db8 <running_start>

          while(switch_read_enter())
 80022d6:	e001      	b.n	80022dc <main+0x204>
          {
            main_main();
 80022d8:	f000 fd9a 	bl	8002e10 <main_main>
          while(switch_read_enter())
 80022dc:	f7ff f90c 	bl	80014f8 <switch_read_enter>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f8      	bne.n	80022d8 <main+0x200>
          }

          running_stop();
 80022e6:	f000 fd77 	bl	8002dd8 <running_stop>
          break;
 80022ea:	e03d      	b.n	8002368 <main+0x290>
        case 0x0C:	// C
          running_start();
 80022ec:	f000 fd64 	bl	8002db8 <running_start>

          while(switch_read_enter())
 80022f0:	e001      	b.n	80022f6 <main+0x21e>
          {
            main_main();
 80022f2:	f000 fd8d 	bl	8002e10 <main_main>
          while(switch_read_enter())
 80022f6:	f7ff f8ff 	bl	80014f8 <switch_read_enter>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f8      	bne.n	80022f2 <main+0x21a>
          }

          running_stop();
 8002300:	f000 fd6a 	bl	8002dd8 <running_stop>
          break;
 8002304:	e030      	b.n	8002368 <main+0x290>
        case 0x0D:	// D
          running_start();
 8002306:	f000 fd57 	bl	8002db8 <running_start>

          while(switch_read_enter())
 800230a:	e001      	b.n	8002310 <main+0x238>
          {
            main_main();
 800230c:	f000 fd80 	bl	8002e10 <main_main>
          while(switch_read_enter())
 8002310:	f7ff f8f2 	bl	80014f8 <switch_read_enter>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f8      	bne.n	800230c <main+0x234>
          }

          running_stop();
 800231a:	f000 fd5d 	bl	8002dd8 <running_stop>
          break;
 800231e:	e023      	b.n	8002368 <main+0x290>
        case 0x0E:	// E
          running_start();
 8002320:	f000 fd4a 	bl	8002db8 <running_start>

          while(switch_read_enter())
 8002324:	e001      	b.n	800232a <main+0x252>
          {
            main_main();
 8002326:	f000 fd73 	bl	8002e10 <main_main>
          while(switch_read_enter())
 800232a:	f7ff f8e5 	bl	80014f8 <switch_read_enter>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f8      	bne.n	8002326 <main+0x24e>
          }

          running_stop();
 8002334:	f000 fd50 	bl	8002dd8 <running_stop>
          break;
 8002338:	e016      	b.n	8002368 <main+0x290>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 800233a:	f7fe ffdd 	bl	80012f8 <rotary_read_playmode>
 800233e:	4603      	mov	r3, r0
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d010      	beq.n	8002366 <main+0x28e>
          {
          }
          else    // if(!(rotary_read_playmode()== flash_print))
          {
            running_start();
 8002344:	f000 fd38 	bl	8002db8 <running_start>

            while(switch_read_enter())
 8002348:	e001      	b.n	800234e <main+0x276>
            {
              main_main();
 800234a:	f000 fd61 	bl	8002e10 <main_main>
            while(switch_read_enter())
 800234e:	f7ff f8d3 	bl	80014f8 <switch_read_enter>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f8      	bne.n	800234a <main+0x272>
            }

            running_stop();
 8002358:	f000 fd3e 	bl	8002dd8 <running_stop>
          }
          break;
 800235c:	e003      	b.n	8002366 <main+0x28e>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 800235e:	bf00      	nop
 8002360:	e002      	b.n	8002368 <main+0x290>
          break;
 8002362:	bf00      	nop
 8002364:	e000      	b.n	8002368 <main+0x290>
          break;
 8002366:	bf00      	nop
    HAL_Delay(500);
 8002368:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800236c:	f002 fc4e 	bl	8004c0c <HAL_Delay>
    main_print_while();
 8002370:	e6dc      	b.n	800212c <main+0x54>
 8002372:	bf00      	nop
 8002374:	0800e484 	.word	0x0800e484
 8002378:	0800e48c 	.word	0x0800e48c

0800237c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b094      	sub	sp, #80	; 0x50
 8002380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002382:	f107 0320 	add.w	r3, r7, #32
 8002386:	2230      	movs	r2, #48	; 0x30
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f007 fa42 	bl	8009814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <SystemClock_Config+0xcc>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	4a27      	ldr	r2, [pc, #156]	; (8002448 <SystemClock_Config+0xcc>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6413      	str	r3, [r2, #64]	; 0x40
 80023b0:	4b25      	ldr	r3, [pc, #148]	; (8002448 <SystemClock_Config+0xcc>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023bc:	2300      	movs	r3, #0
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <SystemClock_Config+0xd0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a21      	ldr	r2, [pc, #132]	; (800244c <SystemClock_Config+0xd0>)
 80023c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b1f      	ldr	r3, [pc, #124]	; (800244c <SystemClock_Config+0xd0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023d8:	2301      	movs	r3, #1
 80023da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80023dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023e2:	2302      	movs	r3, #2
 80023e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023ec:	2308      	movs	r3, #8
 80023ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023f0:	23a8      	movs	r3, #168	; 0xa8
 80023f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023f4:	2302      	movs	r3, #2
 80023f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023f8:	2304      	movs	r3, #4
 80023fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023fc:	f107 0320 	add.w	r3, r7, #32
 8002400:	4618      	mov	r0, r3
 8002402:	f004 fb65 	bl	8006ad0 <HAL_RCC_OscConfig>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800240c:	f000 fd1e 	bl	8002e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002410:	230f      	movs	r3, #15
 8002412:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002414:	2302      	movs	r3, #2
 8002416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800241c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002426:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	2105      	movs	r1, #5
 800242e:	4618      	mov	r0, r3
 8002430:	f004 fdc6 	bl	8006fc0 <HAL_RCC_ClockConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800243a:	f000 fd07 	bl	8002e4c <Error_Handler>
  }
}
 800243e:	bf00      	nop
 8002440:	3750      	adds	r7, #80	; 0x50
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40007000 	.word	0x40007000

08002450 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002456:	463b      	mov	r3, r7
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002462:	4b8a      	ldr	r3, [pc, #552]	; (800268c <MX_ADC1_Init+0x23c>)
 8002464:	4a8a      	ldr	r2, [pc, #552]	; (8002690 <MX_ADC1_Init+0x240>)
 8002466:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002468:	4b88      	ldr	r3, [pc, #544]	; (800268c <MX_ADC1_Init+0x23c>)
 800246a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800246e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002470:	4b86      	ldr	r3, [pc, #536]	; (800268c <MX_ADC1_Init+0x23c>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002476:	4b85      	ldr	r3, [pc, #532]	; (800268c <MX_ADC1_Init+0x23c>)
 8002478:	2201      	movs	r2, #1
 800247a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800247c:	4b83      	ldr	r3, [pc, #524]	; (800268c <MX_ADC1_Init+0x23c>)
 800247e:	2201      	movs	r2, #1
 8002480:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002482:	4b82      	ldr	r3, [pc, #520]	; (800268c <MX_ADC1_Init+0x23c>)
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800248a:	4b80      	ldr	r3, [pc, #512]	; (800268c <MX_ADC1_Init+0x23c>)
 800248c:	2200      	movs	r2, #0
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002490:	4b7e      	ldr	r3, [pc, #504]	; (800268c <MX_ADC1_Init+0x23c>)
 8002492:	4a80      	ldr	r2, [pc, #512]	; (8002694 <MX_ADC1_Init+0x244>)
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002496:	4b7d      	ldr	r3, [pc, #500]	; (800268c <MX_ADC1_Init+0x23c>)
 8002498:	2200      	movs	r2, #0
 800249a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 800249c:	4b7b      	ldr	r3, [pc, #492]	; (800268c <MX_ADC1_Init+0x23c>)
 800249e:	2210      	movs	r2, #16
 80024a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80024a2:	4b7a      	ldr	r3, [pc, #488]	; (800268c <MX_ADC1_Init+0x23c>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024aa:	4b78      	ldr	r3, [pc, #480]	; (800268c <MX_ADC1_Init+0x23c>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024b0:	4876      	ldr	r0, [pc, #472]	; (800268c <MX_ADC1_Init+0x23c>)
 80024b2:	f002 fbcf 	bl	8004c54 <HAL_ADC_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80024bc:	f000 fcc6 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80024c0:	2309      	movs	r3, #9
 80024c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80024c8:	2303      	movs	r3, #3
 80024ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024cc:	463b      	mov	r3, r7
 80024ce:	4619      	mov	r1, r3
 80024d0:	486e      	ldr	r0, [pc, #440]	; (800268c <MX_ADC1_Init+0x23c>)
 80024d2:	f002 fd81 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80024dc:	f000 fcb6 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80024e0:	230a      	movs	r3, #10
 80024e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80024e4:	2302      	movs	r3, #2
 80024e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024e8:	463b      	mov	r3, r7
 80024ea:	4619      	mov	r1, r3
 80024ec:	4867      	ldr	r0, [pc, #412]	; (800268c <MX_ADC1_Init+0x23c>)
 80024ee:	f002 fd73 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80024f8:	f000 fca8 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80024fc:	2308      	movs	r3, #8
 80024fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002500:	2303      	movs	r3, #3
 8002502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	4860      	ldr	r0, [pc, #384]	; (800268c <MX_ADC1_Init+0x23c>)
 800250a:	f002 fd65 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002514:	f000 fc9a 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002518:	230b      	movs	r3, #11
 800251a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800251c:	2304      	movs	r3, #4
 800251e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	4619      	mov	r1, r3
 8002524:	4859      	ldr	r0, [pc, #356]	; (800268c <MX_ADC1_Init+0x23c>)
 8002526:	f002 fd57 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002530:	f000 fc8c 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002534:	230f      	movs	r3, #15
 8002536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002538:	2305      	movs	r3, #5
 800253a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4619      	mov	r1, r3
 8002540:	4852      	ldr	r0, [pc, #328]	; (800268c <MX_ADC1_Init+0x23c>)
 8002542:	f002 fd49 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800254c:	f000 fc7e 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002550:	230c      	movs	r3, #12
 8002552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002554:	2306      	movs	r3, #6
 8002556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002558:	463b      	mov	r3, r7
 800255a:	4619      	mov	r1, r3
 800255c:	484b      	ldr	r0, [pc, #300]	; (800268c <MX_ADC1_Init+0x23c>)
 800255e:	f002 fd3b 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002568:	f000 fc70 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800256c:	230e      	movs	r3, #14
 800256e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002570:	2307      	movs	r3, #7
 8002572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002574:	463b      	mov	r3, r7
 8002576:	4619      	mov	r1, r3
 8002578:	4844      	ldr	r0, [pc, #272]	; (800268c <MX_ADC1_Init+0x23c>)
 800257a:	f002 fd2d 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002584:	f000 fc62 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002588:	230d      	movs	r3, #13
 800258a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800258c:	2308      	movs	r3, #8
 800258e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002590:	463b      	mov	r3, r7
 8002592:	4619      	mov	r1, r3
 8002594:	483d      	ldr	r0, [pc, #244]	; (800268c <MX_ADC1_Init+0x23c>)
 8002596:	f002 fd1f 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80025a0:	f000 fc54 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80025a4:	2307      	movs	r3, #7
 80025a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80025a8:	2309      	movs	r3, #9
 80025aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ac:	463b      	mov	r3, r7
 80025ae:	4619      	mov	r1, r3
 80025b0:	4836      	ldr	r0, [pc, #216]	; (800268c <MX_ADC1_Init+0x23c>)
 80025b2:	f002 fd11 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80025bc:	f000 fc46 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80025c4:	230a      	movs	r3, #10
 80025c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025c8:	463b      	mov	r3, r7
 80025ca:	4619      	mov	r1, r3
 80025cc:	482f      	ldr	r0, [pc, #188]	; (800268c <MX_ADC1_Init+0x23c>)
 80025ce:	f002 fd03 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80025d8:	f000 fc38 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80025dc:	2306      	movs	r3, #6
 80025de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80025e0:	230b      	movs	r3, #11
 80025e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e4:	463b      	mov	r3, r7
 80025e6:	4619      	mov	r1, r3
 80025e8:	4828      	ldr	r0, [pc, #160]	; (800268c <MX_ADC1_Init+0x23c>)
 80025ea:	f002 fcf5 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80025f4:	f000 fc2a 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025f8:	2301      	movs	r3, #1
 80025fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80025fc:	230c      	movs	r3, #12
 80025fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002600:	463b      	mov	r3, r7
 8002602:	4619      	mov	r1, r3
 8002604:	4821      	ldr	r0, [pc, #132]	; (800268c <MX_ADC1_Init+0x23c>)
 8002606:	f002 fce7 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002610:	f000 fc1c 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002614:	2305      	movs	r3, #5
 8002616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002618:	230d      	movs	r3, #13
 800261a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800261c:	463b      	mov	r3, r7
 800261e:	4619      	mov	r1, r3
 8002620:	481a      	ldr	r0, [pc, #104]	; (800268c <MX_ADC1_Init+0x23c>)
 8002622:	f002 fcd9 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800262c:	f000 fc0e 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002630:	2302      	movs	r3, #2
 8002632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002634:	230e      	movs	r3, #14
 8002636:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002638:	463b      	mov	r3, r7
 800263a:	4619      	mov	r1, r3
 800263c:	4813      	ldr	r0, [pc, #76]	; (800268c <MX_ADC1_Init+0x23c>)
 800263e:	f002 fccb 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8002648:	f000 fc00 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800264c:	2304      	movs	r3, #4
 800264e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002650:	230f      	movs	r3, #15
 8002652:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002654:	463b      	mov	r3, r7
 8002656:	4619      	mov	r1, r3
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <MX_ADC1_Init+0x23c>)
 800265a:	f002 fcbd 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8002664:	f000 fbf2 	bl	8002e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002668:	2303      	movs	r3, #3
 800266a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 800266c:	2310      	movs	r3, #16
 800266e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002670:	463b      	mov	r3, r7
 8002672:	4619      	mov	r1, r3
 8002674:	4805      	ldr	r0, [pc, #20]	; (800268c <MX_ADC1_Init+0x23c>)
 8002676:	f002 fcaf 	bl	8004fd8 <HAL_ADC_ConfigChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8002680:	f000 fbe4 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	2000058c 	.word	0x2000058c
 8002690:	40012000 	.word	0x40012000
 8002694:	0f000001 	.word	0x0f000001

08002698 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <MX_I2C1_Init+0x50>)
 800269e:	4a13      	ldr	r2, [pc, #76]	; (80026ec <MX_I2C1_Init+0x54>)
 80026a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_I2C1_Init+0x50>)
 80026a4:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <MX_I2C1_Init+0x58>)
 80026a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_I2C1_Init+0x50>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_I2C1_Init+0x50>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_I2C1_Init+0x50>)
 80026b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <MX_I2C1_Init+0x50>)
 80026be:	2200      	movs	r2, #0
 80026c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_I2C1_Init+0x50>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <MX_I2C1_Init+0x50>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_I2C1_Init+0x50>)
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026d4:	4804      	ldr	r0, [pc, #16]	; (80026e8 <MX_I2C1_Init+0x50>)
 80026d6:	f004 f8b7 	bl	8006848 <HAL_I2C_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026e0:	f000 fbb4 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200004a8 	.word	0x200004a8
 80026ec:	40005400 	.word	0x40005400
 80026f0:	000186a0 	.word	0x000186a0

080026f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80026f8:	4b17      	ldr	r3, [pc, #92]	; (8002758 <MX_SPI2_Init+0x64>)
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <MX_SPI2_Init+0x68>)
 80026fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <MX_SPI2_Init+0x64>)
 8002700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002704:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <MX_SPI2_Init+0x64>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <MX_SPI2_Init+0x64>)
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <MX_SPI2_Init+0x64>)
 8002714:	2202      	movs	r2, #2
 8002716:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <MX_SPI2_Init+0x64>)
 800271a:	2201      	movs	r2, #1
 800271c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <MX_SPI2_Init+0x64>)
 8002720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002724:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <MX_SPI2_Init+0x64>)
 8002728:	2228      	movs	r2, #40	; 0x28
 800272a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <MX_SPI2_Init+0x64>)
 800272e:	2200      	movs	r2, #0
 8002730:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <MX_SPI2_Init+0x64>)
 8002734:	2200      	movs	r2, #0
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <MX_SPI2_Init+0x64>)
 800273a:	2200      	movs	r2, #0
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <MX_SPI2_Init+0x64>)
 8002740:	220a      	movs	r2, #10
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002744:	4804      	ldr	r0, [pc, #16]	; (8002758 <MX_SPI2_Init+0x64>)
 8002746:	f004 fe35 	bl	80073b4 <HAL_SPI_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002750:	f000 fb7c 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000408 	.word	0x20000408
 800275c:	40003800 	.word	0x40003800

08002760 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	; 0x30
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	2224      	movs	r2, #36	; 0x24
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f007 f850 	bl	8009814 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <MX_TIM1_Init+0xa8>)
 800277e:	4a23      	ldr	r2, [pc, #140]	; (800280c <MX_TIM1_Init+0xac>)
 8002780:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002782:	4b21      	ldr	r3, [pc, #132]	; (8002808 <MX_TIM1_Init+0xa8>)
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <MX_TIM1_Init+0xa8>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800278e:	4b1e      	ldr	r3, [pc, #120]	; (8002808 <MX_TIM1_Init+0xa8>)
 8002790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002794:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002796:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <MX_TIM1_Init+0xa8>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <MX_TIM1_Init+0xa8>)
 800279e:	2200      	movs	r2, #0
 80027a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <MX_TIM1_Init+0xa8>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027a8:	2303      	movs	r3, #3
 80027aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027b0:	2301      	movs	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027bc:	2300      	movs	r3, #0
 80027be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027c0:	2301      	movs	r3, #1
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	4619      	mov	r1, r3
 80027d2:	480d      	ldr	r0, [pc, #52]	; (8002808 <MX_TIM1_Init+0xa8>)
 80027d4:	f005 fe0c 	bl	80083f0 <HAL_TIM_Encoder_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80027de:	f000 fb35 	bl	8002e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	4619      	mov	r1, r3
 80027ee:	4806      	ldr	r0, [pc, #24]	; (8002808 <MX_TIM1_Init+0xa8>)
 80027f0:	f006 fc32 	bl	8009058 <HAL_TIMEx_MasterConfigSynchronization>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80027fa:	f000 fb27 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027fe:	bf00      	nop
 8002800:	3730      	adds	r7, #48	; 0x30
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200006c4 	.word	0x200006c4
 800280c:	40010000 	.word	0x40010000

08002810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	; 0x30
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	2224      	movs	r2, #36	; 0x24
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f006 fff8 	bl	8009814 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800282c:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <MX_TIM3_Init+0xa0>)
 800282e:	4a21      	ldr	r2, [pc, #132]	; (80028b4 <MX_TIM3_Init+0xa4>)
 8002830:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <MX_TIM3_Init+0xa0>)
 8002834:	2200      	movs	r2, #0
 8002836:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002838:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <MX_TIM3_Init+0xa0>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 800283e:	4b1c      	ldr	r3, [pc, #112]	; (80028b0 <MX_TIM3_Init+0xa0>)
 8002840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002844:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002846:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <MX_TIM3_Init+0xa0>)
 8002848:	2200      	movs	r2, #0
 800284a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MX_TIM3_Init+0xa0>)
 800284e:	2200      	movs	r2, #0
 8002850:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002852:	2303      	movs	r3, #3
 8002854:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800285a:	2301      	movs	r3, #1
 800285c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800286a:	2301      	movs	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800286e:	2300      	movs	r3, #0
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4619      	mov	r1, r3
 800287c:	480c      	ldr	r0, [pc, #48]	; (80028b0 <MX_TIM3_Init+0xa0>)
 800287e:	f005 fdb7 	bl	80083f0 <HAL_TIM_Encoder_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002888:	f000 fae0 	bl	8002e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_TIM3_Init+0xa0>)
 800289a:	f006 fbdd 	bl	8009058 <HAL_TIMEx_MasterConfigSynchronization>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80028a4:	f000 fad2 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028a8:	bf00      	nop
 80028aa:	3730      	adds	r7, #48	; 0x30
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000544 	.word	0x20000544
 80028b4:	40000400 	.word	0x40000400

080028b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08a      	sub	sp, #40	; 0x28
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028be:	f107 0320 	add.w	r3, r7, #32
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028c8:	1d3b      	adds	r3, r7, #4
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	60da      	str	r2, [r3, #12]
 80028d4:	611a      	str	r2, [r3, #16]
 80028d6:	615a      	str	r2, [r3, #20]
 80028d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028da:	4b27      	ldr	r3, [pc, #156]	; (8002978 <MX_TIM4_Init+0xc0>)
 80028dc:	4a27      	ldr	r2, [pc, #156]	; (800297c <MX_TIM4_Init+0xc4>)
 80028de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <MX_TIM4_Init+0xc0>)
 80028e2:	2202      	movs	r2, #2
 80028e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <MX_TIM4_Init+0xc0>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80028ec:	4b22      	ldr	r3, [pc, #136]	; (8002978 <MX_TIM4_Init+0xc0>)
 80028ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f4:	4b20      	ldr	r3, [pc, #128]	; (8002978 <MX_TIM4_Init+0xc0>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <MX_TIM4_Init+0xc0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002900:	481d      	ldr	r0, [pc, #116]	; (8002978 <MX_TIM4_Init+0xc0>)
 8002902:	f005 fbee 	bl	80080e2 <HAL_TIM_PWM_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800290c:	f000 fa9e 	bl	8002e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002918:	f107 0320 	add.w	r3, r7, #32
 800291c:	4619      	mov	r1, r3
 800291e:	4816      	ldr	r0, [pc, #88]	; (8002978 <MX_TIM4_Init+0xc0>)
 8002920:	f006 fb9a 	bl	8009058 <HAL_TIMEx_MasterConfigSynchronization>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800292a:	f000 fa8f 	bl	8002e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800292e:	2360      	movs	r3, #96	; 0x60
 8002930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	480c      	ldr	r0, [pc, #48]	; (8002978 <MX_TIM4_Init+0xc0>)
 8002946:	f006 f827 	bl	8008998 <HAL_TIM_PWM_ConfigChannel>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002950:	f000 fa7c 	bl	8002e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	2204      	movs	r2, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4807      	ldr	r0, [pc, #28]	; (8002978 <MX_TIM4_Init+0xc0>)
 800295c:	f006 f81c 	bl	8008998 <HAL_TIM_PWM_ConfigChannel>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002966:	f000 fa71 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800296a:	4803      	ldr	r0, [pc, #12]	; (8002978 <MX_TIM4_Init+0xc0>)
 800296c:	f000 ff1a 	bl	80037a4 <HAL_TIM_MspPostInit>

}
 8002970:	bf00      	nop
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000460 	.word	0x20000460
 800297c:	40000800 	.word	0x40000800

08002980 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002986:	463b      	mov	r3, r7
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <MX_TIM6_Init+0x64>)
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <MX_TIM6_Init+0x68>)
 8002992:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8002994:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <MX_TIM6_Init+0x64>)
 8002996:	2204      	movs	r2, #4
 8002998:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <MX_TIM6_Init+0x64>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 33599;
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <MX_TIM6_Init+0x64>)
 80029a2:	f248 323f 	movw	r2, #33599	; 0x833f
 80029a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <MX_TIM6_Init+0x64>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029ae:	480d      	ldr	r0, [pc, #52]	; (80029e4 <MX_TIM6_Init+0x64>)
 80029b0:	f005 faa8 	bl	8007f04 <HAL_TIM_Base_Init>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80029ba:	f000 fa47 	bl	8002e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029c6:	463b      	mov	r3, r7
 80029c8:	4619      	mov	r1, r3
 80029ca:	4806      	ldr	r0, [pc, #24]	; (80029e4 <MX_TIM6_Init+0x64>)
 80029cc:	f006 fb44 	bl	8009058 <HAL_TIMEx_MasterConfigSynchronization>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80029d6:	f000 fa39 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000067c 	.word	0x2000067c
 80029e8:	40001000 	.word	0x40001000

080029ec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f2:	463b      	mov	r3, r7
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <MX_TIM7_Init+0x64>)
 80029fc:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <MX_TIM7_Init+0x68>)
 80029fe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8002a00:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <MX_TIM7_Init+0x64>)
 8002a02:	2204      	movs	r2, #4
 8002a04:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <MX_TIM7_Init+0x64>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33599;
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <MX_TIM7_Init+0x64>)
 8002a0e:	f248 323f 	movw	r2, #33599	; 0x833f
 8002a12:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MX_TIM7_Init+0x64>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a1a:	480d      	ldr	r0, [pc, #52]	; (8002a50 <MX_TIM7_Init+0x64>)
 8002a1c:	f005 fa72 	bl	8007f04 <HAL_TIM_Base_Init>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002a26:	f000 fa11 	bl	8002e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a32:	463b      	mov	r3, r7
 8002a34:	4619      	mov	r1, r3
 8002a36:	4806      	ldr	r0, [pc, #24]	; (8002a50 <MX_TIM7_Init+0x64>)
 8002a38:	f006 fb0e 	bl	8009058 <HAL_TIMEx_MasterConfigSynchronization>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002a42:	f000 fa03 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000798 	.word	0x20000798
 8002a54:	40001400 	.word	0x40001400

08002a58 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <MX_TIM10_Init+0x40>)
 8002a5e:	4a0f      	ldr	r2, [pc, #60]	; (8002a9c <MX_TIM10_Init+0x44>)
 8002a60:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <MX_TIM10_Init+0x40>)
 8002a64:	2204      	movs	r2, #4
 8002a66:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <MX_TIM10_Init+0x40>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <MX_TIM10_Init+0x40>)
 8002a70:	f248 323f 	movw	r2, #33599	; 0x833f
 8002a74:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <MX_TIM10_Init+0x40>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <MX_TIM10_Init+0x40>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002a82:	4805      	ldr	r0, [pc, #20]	; (8002a98 <MX_TIM10_Init+0x40>)
 8002a84:	f005 fa3e 	bl	8007f04 <HAL_TIM_Base_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002a8e:	f000 f9dd 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200004fc 	.word	0x200004fc
 8002a9c:	40014400 	.word	0x40014400

08002aa0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <MX_TIM11_Init+0x40>)
 8002aa6:	4a0f      	ldr	r2, [pc, #60]	; (8002ae4 <MX_TIM11_Init+0x44>)
 8002aa8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <MX_TIM11_Init+0x40>)
 8002aac:	2204      	movs	r2, #4
 8002aae:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <MX_TIM11_Init+0x40>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <MX_TIM11_Init+0x40>)
 8002ab8:	f248 323f 	movw	r2, #33599	; 0x833f
 8002abc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <MX_TIM11_Init+0x40>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <MX_TIM11_Init+0x40>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002aca:	4805      	ldr	r0, [pc, #20]	; (8002ae0 <MX_TIM11_Init+0x40>)
 8002acc:	f005 fa1a 	bl	8007f04 <HAL_TIM_Base_Init>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002ad6:	f000 f9b9 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	200005d4 	.word	0x200005d4
 8002ae4:	40014800 	.word	0x40014800

08002ae8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <MX_TIM14_Init+0x40>)
 8002aee:	4a0f      	ldr	r2, [pc, #60]	; (8002b2c <MX_TIM14_Init+0x44>)
 8002af0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <MX_TIM14_Init+0x40>)
 8002af4:	2204      	movs	r2, #4
 8002af6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <MX_TIM14_Init+0x40>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <MX_TIM14_Init+0x40>)
 8002b00:	f248 323f 	movw	r2, #33599	; 0x833f
 8002b04:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <MX_TIM14_Init+0x40>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <MX_TIM14_Init+0x40>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002b12:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_TIM14_Init+0x40>)
 8002b14:	f005 f9f6 	bl	8007f04 <HAL_TIM_Base_Init>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002b1e:	f000 f995 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000750 	.word	0x20000750
 8002b2c:	40002000 	.word	0x40002000

08002b30 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <MX_USART6_UART_Init+0x4c>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <MX_USART6_UART_Init+0x50>)
 8002b38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <MX_USART6_UART_Init+0x4c>)
 8002b3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b42:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_USART6_UART_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <MX_USART6_UART_Init+0x4c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b4e:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <MX_USART6_UART_Init+0x4c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b54:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <MX_USART6_UART_Init+0x4c>)
 8002b56:	220c      	movs	r2, #12
 8002b58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <MX_USART6_UART_Init+0x4c>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <MX_USART6_UART_Init+0x4c>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b66:	4805      	ldr	r0, [pc, #20]	; (8002b7c <MX_USART6_UART_Init+0x4c>)
 8002b68:	f006 fb06 	bl	8009178 <HAL_UART_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002b72:	f000 f96b 	bl	8002e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	2000070c 	.word	0x2000070c
 8002b80:	40011400 	.word	0x40011400

08002b84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <MX_DMA_Init+0x3c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <MX_DMA_Init+0x3c>)
 8002b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <MX_DMA_Init+0x3c>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2038      	movs	r0, #56	; 0x38
 8002bac:	f002 fd8f 	bl	80056ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002bb0:	2038      	movs	r0, #56	; 0x38
 8002bb2:	f002 fda8 	bl	8005706 <HAL_NVIC_EnableIRQ>

}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	; 0x28
 8002bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	4b69      	ldr	r3, [pc, #420]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	4a68      	ldr	r2, [pc, #416]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002be4:	f043 0304 	orr.w	r3, r3, #4
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b66      	ldr	r3, [pc, #408]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b62      	ldr	r3, [pc, #392]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a61      	ldr	r2, [pc, #388]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a5a      	ldr	r2, [pc, #360]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
 8002c32:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a53      	ldr	r2, [pc, #332]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b51      	ldr	r3, [pc, #324]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	4b4d      	ldr	r3, [pc, #308]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a4c      	ldr	r2, [pc, #304]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c54:	f043 0308 	orr.w	r3, r3, #8
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b4a      	ldr	r3, [pc, #296]	; (8002d84 <MX_GPIO_Init+0x1c0>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8002c66:	2200      	movs	r2, #0
 8002c68:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8002c6c:	4846      	ldr	r0, [pc, #280]	; (8002d88 <MX_GPIO_Init+0x1c4>)
 8002c6e:	f003 fdd1 	bl	8006814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8002c72:	2200      	movs	r2, #0
 8002c74:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002c78:	4844      	ldr	r0, [pc, #272]	; (8002d8c <MX_GPIO_Init+0x1c8>)
 8002c7a:	f003 fdcb 	bl	8006814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002c84:	4842      	ldr	r0, [pc, #264]	; (8002d90 <MX_GPIO_Init+0x1cc>)
 8002c86:	f003 fdc5 	bl	8006814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	4841      	ldr	r0, [pc, #260]	; (8002d94 <MX_GPIO_Init+0x1d0>)
 8002c90:	f003 fdc0 	bl	8006814 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8002c94:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	4619      	mov	r1, r3
 8002cac:	4836      	ldr	r0, [pc, #216]	; (8002d88 <MX_GPIO_Init+0x1c4>)
 8002cae:	f003 fbfd 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8002cb2:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8002cb6:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4830      	ldr	r0, [pc, #192]	; (8002d88 <MX_GPIO_Init+0x1c4>)
 8002cc8:	f003 fbf0 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8002ccc:	f640 0304 	movw	r3, #2052	; 0x804
 8002cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	482a      	ldr	r0, [pc, #168]	; (8002d8c <MX_GPIO_Init+0x1c8>)
 8002ce2:	f003 fbe3 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8002ce6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cec:	2301      	movs	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4823      	ldr	r0, [pc, #140]	; (8002d8c <MX_GPIO_Init+0x1c8>)
 8002d00:	f003 fbd4 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8002d04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d16:	f107 0314 	add.w	r3, r7, #20
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	481c      	ldr	r0, [pc, #112]	; (8002d90 <MX_GPIO_Init+0x1cc>)
 8002d1e:	f003 fbc5 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8002d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	4816      	ldr	r0, [pc, #88]	; (8002d90 <MX_GPIO_Init+0x1cc>)
 8002d38:	f003 fbb8 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d42:	2302      	movs	r3, #2
 8002d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	4619      	mov	r1, r3
 8002d58:	480d      	ldr	r0, [pc, #52]	; (8002d90 <MX_GPIO_Init+0x1cc>)
 8002d5a:	f003 fba7 	bl	80064ac <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8002d5e:	2304      	movs	r3, #4
 8002d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d62:	2301      	movs	r3, #1
 8002d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	4619      	mov	r1, r3
 8002d74:	4807      	ldr	r0, [pc, #28]	; (8002d94 <MX_GPIO_Init+0x1d0>)
 8002d76:	f003 fb99 	bl	80064ac <HAL_GPIO_Init>

}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020400 	.word	0x40020400
 8002d90:	40020000 	.word	0x40020000
 8002d94:	40020c00 	.word	0x40020c00

08002d98 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  flash_init();
 8002d9c:	f7ff f96c 	bl	8002078 <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 8002da0:	f000 fffa 	bl	8003d98 <tim11_init>
  /* encoder_init */
  tim10_init();
 8002da4:	f000 feb8 	bl	8003b18 <tim10_init>
  /* tim7 */
  tim7_init();
 8002da8:	f001 f8f6 	bl	8003f98 <tim7_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8002dac:	f001 f80a 	bl	8003dc4 <tim6_init>
  /* print who am i */
  imu_init();
 8002db0:	f7fe f978 	bl	80010a4 <imu_init>
}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <running_start>:

void running_start()
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  #if D_TIM7
  printf("main.c > running_start() > ");
 8002dbc:	4805      	ldr	r0, [pc, #20]	; (8002dd4 <running_start+0x1c>)
 8002dbe:	f007 fbab 	bl	800a518 <iprintf>
  #endif
  tim7_start();
 8002dc2:	f001 f901 	bl	8003fc8 <tim7_start>
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 8002dc6:	f000 fec1 	bl	8003b4c <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 8002dca:	f001 f807 	bl	8003ddc <tim6_start>
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	0800e4ac 	.word	0x0800e4ac

08002dd8 <running_stop>:

void running_stop()
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8002ddc:	f001 f822 	bl	8003e24 <tim6_stop>
  /* tim7 */
  tim7_stop();
 8002de0:	f001 f922 	bl	8004028 <tim7_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8002de4:	f000 fed6 	bl	8003b94 <tim10_stop>
}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}

08002dec <main_print_while>:

void main_print_while()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	printf("///// WHILE /////\n\r");
 8002df0:	4806      	ldr	r0, [pc, #24]	; (8002e0c <main_print_while+0x20>)
 8002df2:	f007 fb91 	bl	800a518 <iprintf>
  rotary_print_playmode();
 8002df6:	f7fe faed 	bl	80013d4 <rotary_print_playmode>
	print_rotary_value();
 8002dfa:	f000 f91f 	bl	800303c <print_rotary_value>
	/* print Tracer and Velotracer target and gains */
	tracer_print_values();
 8002dfe:	f001 fbd1 	bl	80045a4 <tracer_print_values>
	velotrace_print_values();
 8002e02:	f001 fe1f 	bl	8004a44 <velotrace_print_values>
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	0800e4c8 	.word	0x0800e4c8

08002e10 <main_main>:

void main_main()
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
	printf("////////// main_d_print() //////////\r\n");
 8002e14:	4804      	ldr	r0, [pc, #16]	; (8002e28 <main_main+0x18>)
 8002e16:	f007 fc05 	bl	800a624 <puts>
	main_d_print();
 8002e1a:	f000 f807 	bl	8002e2c <main_d_print>
	#endif
	#if D_TIM6_WHILE
	printf("////////// tim6_main() //////////\r\n");
	tim6_main();
	#endif
	HAL_Delay(200);
 8002e1e:	20c8      	movs	r0, #200	; 0xc8
 8002e20:	f001 fef4 	bl	8004c0c <HAL_Delay>
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	0800e4dc 	.word	0x0800e4dc

08002e2c <main_d_print>:

void main_d_print()
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  #if D_TIM10
  printf("main.c > main_d_print > ");
  tim10_d_print();
  #endif
  #if D_TIM7
  printf("main.c > main_d_print > ");
 8002e30:	4805      	ldr	r0, [pc, #20]	; (8002e48 <main_d_print+0x1c>)
 8002e32:	f007 fb71 	bl	800a518 <iprintf>
  tim7_d_print();
 8002e36:	f001 f9ed 	bl	8004214 <tim7_d_print>
  #endif
  #if D_TIM6
  printf("main.c > main_d_print > ");
 8002e3a:	4803      	ldr	r0, [pc, #12]	; (8002e48 <main_d_print+0x1c>)
 8002e3c:	f007 fb6c 	bl	800a518 <iprintf>
  tim6_d_print();
 8002e40:	f001 f88a 	bl	8003f58 <tim6_d_print>
  #endif
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	0800e504 	.word	0x0800e504

08002e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e50:	b672      	cpsid	i
}
 8002e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002e54:	e7fe      	b.n	8002e54 <Error_Handler+0x8>

08002e56 <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
    motor_enable(0);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f000 f826 	bl	8002eac <motor_enable>
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <motor_start>:

void motor_start()
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4806      	ldr	r0, [pc, #24]	; (8002e84 <motor_start+0x20>)
 8002e6c:	f005 f988 	bl	8008180 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002e70:	2104      	movs	r1, #4
 8002e72:	4804      	ldr	r0, [pc, #16]	; (8002e84 <motor_start+0x20>)
 8002e74:	f005 f984 	bl	8008180 <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8002e78:	2001      	movs	r0, #1
 8002e7a:	f000 f817 	bl	8002eac <motor_enable>
#endif
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000460 	.word	0x20000460

08002e88 <motor_stop>:

void motor_stop()
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
    motor_enable(0);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f000 f80d 	bl	8002eac <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8002e92:	2104      	movs	r1, #4
 8002e94:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <motor_stop+0x20>)
 8002e96:	f005 fa3b 	bl	8008310 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <motor_stop+0x20>)
 8002e9e:	f005 fa37 	bl	8008310 <HAL_TIM_PWM_Stop>
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000460 	.word	0x20000460

08002eac <motor_enable>:

void motor_enable(uint8_t enable_)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <motor_enable+0x28>)
 8002ec6:	701a      	strb	r2, [r3, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	20000858 	.word	0x20000858

08002ed8 <motor_read_enable>:

char motor_read_enable()
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
    return enable;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <motor_read_enable+0x14>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000858 	.word	0x20000858

08002ef0 <motor_set>:

void motor_set(double motor_left_, double motor_right_)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	ed87 0b02 	vstr	d0, [r7, #8]
 8002efa:	ed87 1b00 	vstr	d1, [r7]
    if(motor_left_ < 0)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f0a:	f7fd fde7 	bl	8000adc <__aeabi_dcmplt>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <motor_set+0x3c>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2104      	movs	r1, #4
 8002f18:	483a      	ldr	r0, [pc, #232]	; (8003004 <motor_set+0x114>)
 8002f1a:	f003 fc7b 	bl	8006814 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e004      	b.n	8002f36 <motor_set+0x46>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2104      	movs	r1, #4
 8002f30:	4834      	ldr	r0, [pc, #208]	; (8003004 <motor_set+0x114>)
 8002f32:	f003 fc6f 	bl	8006814 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f42:	f7fd fdcb 	bl	8000adc <__aeabi_dcmplt>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00c      	beq.n	8002f66 <motor_set+0x76>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f52:	482d      	ldr	r0, [pc, #180]	; (8003008 <motor_set+0x118>)
 8002f54:	f003 fc5e 	bl	8006814 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	e005      	b.n	8002f72 <motor_set+0x82>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f66:	2200      	movs	r2, #0
 8002f68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f6c:	4826      	ldr	r0, [pc, #152]	; (8003008 <motor_set+0x118>)
 8002f6e:	f003 fc51 	bl	8006814 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	4b25      	ldr	r3, [pc, #148]	; (800300c <motor_set+0x11c>)
 8002f78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f7c:	f7fd fdcc 	bl	8000b18 <__aeabi_dcmpgt>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <motor_set+0x9e>
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <motor_set+0x11c>)
 8002f8c:	e001      	b.n	8002f92 <motor_set+0xa2>
 8002f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f92:	e9c7 2302 	strd	r2, r3, [r7, #8]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <motor_set+0x11c>)
 8002f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fa0:	f7fd fdba 	bl	8000b18 <__aeabi_dcmpgt>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <motor_set+0xc2>
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <motor_set+0x11c>)
 8002fb0:	e001      	b.n	8002fb6 <motor_set+0xc6>
 8002fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb6:	e9c7 2300 	strd	r2, r3, [r7]

    if(!enable)
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <motor_set+0x120>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <motor_set+0xea>
    {
        motor_left_ = 0;
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9c7 2302 	strd	r2, r3, [r7, #8]
        motor_right_ = 0;
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9c7 2300 	strd	r2, r3, [r7]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <motor_set+0x124>)
 8002fdc:	681c      	ldr	r4, [r3, #0]
 8002fde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fe2:	f7fd fde1 	bl	8000ba8 <__aeabi_d2uiz>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <motor_set+0x124>)
 8002fec:	681c      	ldr	r4, [r3, #0]
 8002fee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ff2:	f7fd fdd9 	bl	8000ba8 <__aeabi_d2uiz>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd90      	pop	{r4, r7, pc}
 8003002:	bf00      	nop
 8003004:	40020c00 	.word	0x40020c00
 8003008:	40020800 	.word	0x40020800
 800300c:	408f4000 	.word	0x408f4000
 8003010:	20000858 	.word	0x20000858
 8003014:	20000460 	.word	0x20000460

08003018 <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8003020:	1d39      	adds	r1, r7, #4
 8003022:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003026:	2201      	movs	r2, #1
 8003028:	4803      	ldr	r0, [pc, #12]	; (8003038 <__io_putchar+0x20>)
 800302a:	f006 f8f2 	bl	8009212 <HAL_UART_Transmit>
	return ch;
 800302e:	687b      	ldr	r3, [r7, #4]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	2000070c 	.word	0x2000070c

0800303c <print_rotary_value>:

void print_rotary_value()
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8003040:	f7fe f972 	bl	8001328 <rotary_read_value>
 8003044:	4603      	mov	r3, r0
 8003046:	4619      	mov	r1, r3
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <print_rotary_value+0x18>)
 800304a:	f007 fa65 	bl	800a518 <iprintf>
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	0800e520 	.word	0x0800e520

08003058 <sidesensor_read>:
unsigned char subsensbuf, marker, sidedeltacount, rightmarkercount;
SideSensorState markerstate;
char sidesensor_start_or_stop;

uint8_t sidesensor_read()
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 8003062:	2104      	movs	r1, #4
 8003064:	4810      	ldr	r0, [pc, #64]	; (80030a8 <sidesensor_read+0x50>)
 8003066:	f003 fbbd 	bl	80067e4 <HAL_GPIO_ReadPin>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	b2da      	uxtb	r2, r3
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	4413      	add	r3, r2
 800307c:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 800307e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003082:	4809      	ldr	r0, [pc, #36]	; (80030a8 <sidesensor_read+0x50>)
 8003084:	f003 fbae 	bl	80067e4 <HAL_GPIO_ReadPin>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <sidesensor_read+0x3a>
 800308e:	2302      	movs	r3, #2
 8003090:	e000      	b.n	8003094 <sidesensor_read+0x3c>
 8003092:	2300      	movs	r3, #0
 8003094:	b2da      	uxtb	r2, r3
 8003096:	79fb      	ldrb	r3, [r7, #7]
 8003098:	4413      	add	r3, r2
 800309a:	71fb      	strb	r3, [r7, #7]

    return subsens;
 800309c:	79fb      	ldrb	r3, [r7, #7]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40020400 	.word	0x40020400

080030ac <sidesensor_start>:

void sidesensor_start()
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
    marker = 0;
 80030b0:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <sidesensor_start+0x2c>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <sidesensor_start+0x30>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 80030bc:	4b08      	ldr	r3, [pc, #32]	; (80030e0 <sidesensor_start+0x34>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <sidesensor_start+0x38>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
	markerstate = start;
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <sidesensor_start+0x3c>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	2000085c 	.word	0x2000085c
 80030dc:	20000859 	.word	0x20000859
 80030e0:	2000085a 	.word	0x2000085a
 80030e4:	2000085e 	.word	0x2000085e
 80030e8:	2000085b 	.word	0x2000085b

080030ec <sidesensor_stop>:

void sidesensor_stop()
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <sidesensor_read_markerstate>:

SideSensorState sidesensor_read_markerstate()
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
	return markerstate;
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <sidesensor_read_markerstate+0x14>)
 8003102:	781b      	ldrb	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	2000085b 	.word	0x2000085b

08003114 <sidesensor_right>:

void sidesensor_right()
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
    if(rightmarkercount == 1 - 1)
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <sidesensor_right+0x38>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <sidesensor_right+0x14>
    {
        // start
		markerstate = straight;
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <sidesensor_right+0x3c>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e006      	b.n	8003136 <sidesensor_right+0x22>
    }
    else if(rightmarkercount == 2 - 1)
 8003128:	4b08      	ldr	r3, [pc, #32]	; (800314c <sidesensor_right+0x38>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d102      	bne.n	8003136 <sidesensor_right+0x22>
    {
        // stop
		markerstate = stop;
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <sidesensor_right+0x3c>)
 8003132:	2202      	movs	r2, #2
 8003134:	701a      	strb	r2, [r3, #0]
    }
    rightmarkercount++;
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <sidesensor_right+0x38>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	3301      	adds	r3, #1
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b03      	ldr	r3, [pc, #12]	; (800314c <sidesensor_right+0x38>)
 8003140:	701a      	strb	r2, [r3, #0]
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	2000085e 	.word	0x2000085e
 8003150:	2000085b 	.word	0x2000085b

08003154 <sidesensor_left>:

void sidesensor_left()
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <sidesensor_left+0x14>)
 800315a:	2203      	movs	r2, #3
 800315c:	701a      	strb	r2, [r3, #0]
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	2000085b 	.word	0x2000085b

0800316c <sidesensor_cross>:

void sidesensor_cross()
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <sidesensor_cross+0x14>)
 8003172:	2204      	movs	r2, #4
 8003174:	701a      	strb	r2, [r3, #0]
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	2000085b 	.word	0x2000085b

08003184 <sidesensor_main>:
	// straight
	markerstate = straight;
}

void sidesensor_main()
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 800318a:	f7ff ff65 	bl	8003058 <sidesensor_read>
 800318e:	4603      	mov	r3, r0
 8003190:	71fb      	strb	r3, [r7, #7]

	if(subsens != subsensbuf)
 8003192:	4b27      	ldr	r3, [pc, #156]	; (8003230 <sidesensor_main+0xac>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	79fa      	ldrb	r2, [r7, #7]
 8003198:	429a      	cmp	r2, r3
 800319a:	d044      	beq.n	8003226 <sidesensor_main+0xa2>
	{
		subsensbuf = subsens;
 800319c:	4a24      	ldr	r2, [pc, #144]	; (8003230 <sidesensor_main+0xac>)
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 80031a2:	79fa      	ldrb	r2, [r7, #7]
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <sidesensor_main+0xb0>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b21      	ldr	r3, [pc, #132]	; (8003238 <sidesensor_main+0xb4>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4413      	add	r3, r2
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <sidesensor_main+0xb4>)
 80031ba:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d12b      	bne.n	800321a <sidesensor_main+0x96>
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <sidesensor_main+0xb0>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d027      	beq.n	800321a <sidesensor_main+0x96>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <sidesensor_main+0xb4>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <sidesensor_main+0xb4>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	109b      	asrs	r3, r3, #2
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 80031e2:	797b      	ldrb	r3, [r7, #5]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10e      	bne.n	8003206 <sidesensor_main+0x82>
			{
				if (first == 0b01)
 80031e8:	79bb      	ldrb	r3, [r7, #6]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d102      	bne.n	80031f4 <sidesensor_main+0x70>
				{
					// right -> start / stop
                    sidesensor_right();
 80031ee:	f7ff ff91 	bl	8003114 <sidesensor_right>
 80031f2:	e00a      	b.n	800320a <sidesensor_main+0x86>
				}
				else if (first == 0b10)
 80031f4:	79bb      	ldrb	r3, [r7, #6]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d102      	bne.n	8003200 <sidesensor_main+0x7c>
				{
					// left -> curve
                    sidesensor_left();
 80031fa:	f7ff ffab 	bl	8003154 <sidesensor_left>
 80031fe:	e004      	b.n	800320a <sidesensor_main+0x86>
				}
				else
				{
					// cross
                    sidesensor_cross();
 8003200:	f7ff ffb4 	bl	800316c <sidesensor_cross>
 8003204:	e001      	b.n	800320a <sidesensor_main+0x86>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8003206:	f7ff ffb1 	bl	800316c <sidesensor_cross>
			}
			sidedeltacount = 0;
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <sidesensor_main+0xb0>)
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <sidesensor_main+0xb4>)
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
		{
 8003216:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 8003218:	e005      	b.n	8003226 <sidesensor_main+0xa2>
			sidedeltacount++;
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <sidesensor_main+0xb0>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	b2da      	uxtb	r2, r3
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <sidesensor_main+0xb0>)
 8003224:	701a      	strb	r2, [r3, #0]
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000859 	.word	0x20000859
 8003234:	2000085a 	.word	0x2000085a
 8003238:	2000085c 	.word	0x2000085c

0800323c <sidesensor_d_print>:
			break;
	}
}

void sidesensor_d_print()
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
	#if D_SIDESENSOR
	printf("sidesensor.c > sidesensor_d_print() > ");
	sidesensor_print_sidesensorstate(markerstate);
	#endif
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <HAL_MspInit+0x54>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <HAL_MspInit+0x54>)
 800325c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003260:	6453      	str	r3, [r2, #68]	; 0x44
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_MspInit+0x54>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_MspInit+0x54>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HAL_MspInit+0x54>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327c:	6413      	str	r3, [r2, #64]	; 0x40
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HAL_MspInit+0x54>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	210f      	movs	r1, #15
 800328e:	f06f 0003 	mvn.w	r0, #3
 8003292:	f002 fa1c 	bl	80056ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800

080032a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08c      	sub	sp, #48	; 0x30
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 031c 	add.w	r3, r7, #28
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a49      	ldr	r2, [pc, #292]	; (80033e8 <HAL_ADC_MspInit+0x144>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	f040 808c 	bne.w	80033e0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	4b47      	ldr	r3, [pc, #284]	; (80033ec <HAL_ADC_MspInit+0x148>)
 80032ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d0:	4a46      	ldr	r2, [pc, #280]	; (80033ec <HAL_ADC_MspInit+0x148>)
 80032d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d6:	6453      	str	r3, [r2, #68]	; 0x44
 80032d8:	4b44      	ldr	r3, [pc, #272]	; (80033ec <HAL_ADC_MspInit+0x148>)
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	4b40      	ldr	r3, [pc, #256]	; (80033ec <HAL_ADC_MspInit+0x148>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <HAL_ADC_MspInit+0x148>)
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	6313      	str	r3, [r2, #48]	; 0x30
 80032f4:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <HAL_ADC_MspInit+0x148>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	4b39      	ldr	r3, [pc, #228]	; (80033ec <HAL_ADC_MspInit+0x148>)
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	4a38      	ldr	r2, [pc, #224]	; (80033ec <HAL_ADC_MspInit+0x148>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6313      	str	r3, [r2, #48]	; 0x30
 8003310:	4b36      	ldr	r3, [pc, #216]	; (80033ec <HAL_ADC_MspInit+0x148>)
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	4b32      	ldr	r3, [pc, #200]	; (80033ec <HAL_ADC_MspInit+0x148>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	4a31      	ldr	r2, [pc, #196]	; (80033ec <HAL_ADC_MspInit+0x148>)
 8003326:	f043 0302 	orr.w	r3, r3, #2
 800332a:	6313      	str	r3, [r2, #48]	; 0x30
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_ADC_MspInit+0x148>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003338:	233f      	movs	r3, #63	; 0x3f
 800333a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800333c:	2303      	movs	r3, #3
 800333e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003340:	2300      	movs	r3, #0
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003344:	f107 031c 	add.w	r3, r7, #28
 8003348:	4619      	mov	r1, r3
 800334a:	4829      	ldr	r0, [pc, #164]	; (80033f0 <HAL_ADC_MspInit+0x14c>)
 800334c:	f003 f8ae 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003350:	23ff      	movs	r3, #255	; 0xff
 8003352:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003354:	2303      	movs	r3, #3
 8003356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335c:	f107 031c 	add.w	r3, r7, #28
 8003360:	4619      	mov	r1, r3
 8003362:	4824      	ldr	r0, [pc, #144]	; (80033f4 <HAL_ADC_MspInit+0x150>)
 8003364:	f003 f8a2 	bl	80064ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003368:	2303      	movs	r3, #3
 800336a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800336c:	2303      	movs	r3, #3
 800336e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003374:	f107 031c 	add.w	r3, r7, #28
 8003378:	4619      	mov	r1, r3
 800337a:	481f      	ldr	r0, [pc, #124]	; (80033f8 <HAL_ADC_MspInit+0x154>)
 800337c:	f003 f896 	bl	80064ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_ADC_MspInit+0x158>)
 8003382:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <HAL_ADC_MspInit+0x15c>)
 8003384:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003386:	4b1d      	ldr	r3, [pc, #116]	; (80033fc <HAL_ADC_MspInit+0x158>)
 8003388:	2200      	movs	r2, #0
 800338a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800338c:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_ADC_MspInit+0x158>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <HAL_ADC_MspInit+0x158>)
 8003394:	2200      	movs	r2, #0
 8003396:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003398:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_ADC_MspInit+0x158>)
 800339a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800339e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033a0:	4b16      	ldr	r3, [pc, #88]	; (80033fc <HAL_ADC_MspInit+0x158>)
 80033a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033a8:	4b14      	ldr	r3, [pc, #80]	; (80033fc <HAL_ADC_MspInit+0x158>)
 80033aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_ADC_MspInit+0x158>)
 80033b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <HAL_ADC_MspInit+0x158>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_ADC_MspInit+0x158>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <HAL_ADC_MspInit+0x158>)
 80033c6:	f002 f9b9 	bl	800573c <HAL_DMA_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80033d0:	f7ff fd3c 	bl	8002e4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HAL_ADC_MspInit+0x158>)
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <HAL_ADC_MspInit+0x158>)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033e0:	bf00      	nop
 80033e2:	3730      	adds	r7, #48	; 0x30
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40012000 	.word	0x40012000
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020800 	.word	0x40020800
 80033f4:	40020000 	.word	0x40020000
 80033f8:	40020400 	.word	0x40020400
 80033fc:	2000061c 	.word	0x2000061c
 8003400:	40026410 	.word	0x40026410

08003404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08a      	sub	sp, #40	; 0x28
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a19      	ldr	r2, [pc, #100]	; (8003488 <HAL_I2C_MspInit+0x84>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d12c      	bne.n	8003480 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	4b18      	ldr	r3, [pc, #96]	; (800348c <HAL_I2C_MspInit+0x88>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4a17      	ldr	r2, [pc, #92]	; (800348c <HAL_I2C_MspInit+0x88>)
 8003430:	f043 0302 	orr.w	r3, r3, #2
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_I2C_MspInit+0x88>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003442:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003448:	2312      	movs	r3, #18
 800344a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800344c:	2301      	movs	r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003450:	2303      	movs	r3, #3
 8003452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003454:	2304      	movs	r3, #4
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	4619      	mov	r1, r3
 800345e:	480c      	ldr	r0, [pc, #48]	; (8003490 <HAL_I2C_MspInit+0x8c>)
 8003460:	f003 f824 	bl	80064ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_I2C_MspInit+0x88>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	4a07      	ldr	r2, [pc, #28]	; (800348c <HAL_I2C_MspInit+0x88>)
 800346e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003472:	6413      	str	r3, [r2, #64]	; 0x40
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_I2C_MspInit+0x88>)
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003480:	bf00      	nop
 8003482:	3728      	adds	r7, #40	; 0x28
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40005400 	.word	0x40005400
 800348c:	40023800 	.word	0x40023800
 8003490:	40020400 	.word	0x40020400

08003494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	f107 0314 	add.w	r3, r7, #20
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <HAL_SPI_MspInit+0x84>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d12c      	bne.n	8003510 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	4b18      	ldr	r3, [pc, #96]	; (800351c <HAL_SPI_MspInit+0x88>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	4a17      	ldr	r2, [pc, #92]	; (800351c <HAL_SPI_MspInit+0x88>)
 80034c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c4:	6413      	str	r3, [r2, #64]	; 0x40
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <HAL_SPI_MspInit+0x88>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b11      	ldr	r3, [pc, #68]	; (800351c <HAL_SPI_MspInit+0x88>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a10      	ldr	r2, [pc, #64]	; (800351c <HAL_SPI_MspInit+0x88>)
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_SPI_MspInit+0x88>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80034ee:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80034f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	2302      	movs	r3, #2
 80034f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fc:	2303      	movs	r3, #3
 80034fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003500:	2305      	movs	r3, #5
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	4619      	mov	r1, r3
 800350a:	4805      	ldr	r0, [pc, #20]	; (8003520 <HAL_SPI_MspInit+0x8c>)
 800350c:	f002 ffce 	bl	80064ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003510:	bf00      	nop
 8003512:	3728      	adds	r7, #40	; 0x28
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40003800 	.word	0x40003800
 800351c:	40023800 	.word	0x40023800
 8003520:	40020400 	.word	0x40020400

08003524 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08c      	sub	sp, #48	; 0x30
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800352c:	f107 031c 	add.w	r3, r7, #28
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	605a      	str	r2, [r3, #4]
 8003536:	609a      	str	r2, [r3, #8]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a3a      	ldr	r2, [pc, #232]	; (800362c <HAL_TIM_Encoder_MspInit+0x108>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d13d      	bne.n	80035c2 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	4a38      	ldr	r2, [pc, #224]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6453      	str	r3, [r2, #68]	; 0x44
 8003556:	4b36      	ldr	r3, [pc, #216]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	61bb      	str	r3, [r7, #24]
 8003560:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	4b32      	ldr	r3, [pc, #200]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a31      	ldr	r2, [pc, #196]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b2f      	ldr	r3, [pc, #188]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 800357e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358c:	2300      	movs	r3, #0
 800358e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003590:	2301      	movs	r3, #1
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003594:	f107 031c 	add.w	r3, r7, #28
 8003598:	4619      	mov	r1, r3
 800359a:	4826      	ldr	r0, [pc, #152]	; (8003634 <HAL_TIM_Encoder_MspInit+0x110>)
 800359c:	f002 ff86 	bl	80064ac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80035a0:	2200      	movs	r2, #0
 80035a2:	2100      	movs	r1, #0
 80035a4:	2019      	movs	r0, #25
 80035a6:	f002 f892 	bl	80056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80035aa:	2019      	movs	r0, #25
 80035ac:	f002 f8ab 	bl	8005706 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	201a      	movs	r0, #26
 80035b6:	f002 f88a 	bl	80056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80035ba:	201a      	movs	r0, #26
 80035bc:	f002 f8a3 	bl	8005706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035c0:	e030      	b.n	8003624 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <HAL_TIM_Encoder_MspInit+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d12b      	bne.n	8003624 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035cc:	2300      	movs	r3, #0
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	4b17      	ldr	r3, [pc, #92]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	4a16      	ldr	r2, [pc, #88]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035d6:	f043 0302 	orr.w	r3, r3, #2
 80035da:	6413      	str	r3, [r2, #64]	; 0x40
 80035dc:	4b14      	ldr	r3, [pc, #80]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	4b10      	ldr	r3, [pc, #64]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	4a0f      	ldr	r2, [pc, #60]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035f2:	f043 0302 	orr.w	r3, r3, #2
 80035f6:	6313      	str	r3, [r2, #48]	; 0x30
 80035f8:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8003604:	2330      	movs	r3, #48	; 0x30
 8003606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003608:	2302      	movs	r3, #2
 800360a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003610:	2300      	movs	r3, #0
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003614:	2302      	movs	r3, #2
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	4619      	mov	r1, r3
 800361e:	4807      	ldr	r0, [pc, #28]	; (800363c <HAL_TIM_Encoder_MspInit+0x118>)
 8003620:	f002 ff44 	bl	80064ac <HAL_GPIO_Init>
}
 8003624:	bf00      	nop
 8003626:	3730      	adds	r7, #48	; 0x30
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40010000 	.word	0x40010000
 8003630:	40023800 	.word	0x40023800
 8003634:	40020000 	.word	0x40020000
 8003638:	40000400 	.word	0x40000400
 800363c:	40020400 	.word	0x40020400

08003640 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a0b      	ldr	r2, [pc, #44]	; (800367c <HAL_TIM_PWM_MspInit+0x3c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d10d      	bne.n	800366e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <HAL_TIM_PWM_MspInit+0x40>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	4a09      	ldr	r2, [pc, #36]	; (8003680 <HAL_TIM_PWM_MspInit+0x40>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	6413      	str	r3, [r2, #64]	; 0x40
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <HAL_TIM_PWM_MspInit+0x40>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40000800 	.word	0x40000800
 8003680:	40023800 	.word	0x40023800

08003684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b088      	sub	sp, #32
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a3e      	ldr	r2, [pc, #248]	; (800378c <HAL_TIM_Base_MspInit+0x108>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d116      	bne.n	80036c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a3c      	ldr	r2, [pc, #240]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 80036a0:	f043 0310 	orr.w	r3, r3, #16
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40
 80036a6:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f003 0310 	and.w	r3, r3, #16
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	2036      	movs	r0, #54	; 0x36
 80036b8:	f002 f809 	bl	80056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036bc:	2036      	movs	r0, #54	; 0x36
 80036be:	f002 f822 	bl	8005706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80036c2:	e05e      	b.n	8003782 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a32      	ldr	r2, [pc, #200]	; (8003794 <HAL_TIM_Base_MspInit+0x110>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d10e      	bne.n	80036ec <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a2e      	ldr	r2, [pc, #184]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 80036d8:	f043 0320 	orr.w	r3, r3, #32
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
 80036de:	4b2c      	ldr	r3, [pc, #176]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	61bb      	str	r3, [r7, #24]
 80036e8:	69bb      	ldr	r3, [r7, #24]
}
 80036ea:	e04a      	b.n	8003782 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a29      	ldr	r2, [pc, #164]	; (8003798 <HAL_TIM_Base_MspInit+0x114>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d116      	bne.n	8003724 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	4b25      	ldr	r3, [pc, #148]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	4a24      	ldr	r2, [pc, #144]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 8003700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003704:	6453      	str	r3, [r2, #68]	; 0x44
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	2019      	movs	r0, #25
 8003718:	f001 ffd9 	bl	80056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800371c:	2019      	movs	r0, #25
 800371e:	f001 fff2 	bl	8005706 <HAL_NVIC_EnableIRQ>
}
 8003722:	e02e      	b.n	8003782 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1c      	ldr	r2, [pc, #112]	; (800379c <HAL_TIM_Base_MspInit+0x118>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d116      	bne.n	800375c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	4a16      	ldr	r2, [pc, #88]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 8003738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800373c:	6453      	str	r3, [r2, #68]	; 0x44
 800373e:	4b14      	ldr	r3, [pc, #80]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	2100      	movs	r1, #0
 800374e:	201a      	movs	r0, #26
 8003750:	f001 ffbd 	bl	80056ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003754:	201a      	movs	r0, #26
 8003756:	f001 ffd6 	bl	8005706 <HAL_NVIC_EnableIRQ>
}
 800375a:	e012      	b.n	8003782 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM14)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <HAL_TIM_Base_MspInit+0x11c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10d      	bne.n	8003782 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a08      	ldr	r2, [pc, #32]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_TIM_Base_MspInit+0x10c>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
}
 8003782:	bf00      	nop
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40001000 	.word	0x40001000
 8003790:	40023800 	.word	0x40023800
 8003794:	40001400 	.word	0x40001400
 8003798:	40014400 	.word	0x40014400
 800379c:	40014800 	.word	0x40014800
 80037a0:	40002000 	.word	0x40002000

080037a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a12      	ldr	r2, [pc, #72]	; (800380c <HAL_TIM_MspPostInit+0x68>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d11d      	bne.n	8003802 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	4b11      	ldr	r3, [pc, #68]	; (8003810 <HAL_TIM_MspPostInit+0x6c>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	4a10      	ldr	r2, [pc, #64]	; (8003810 <HAL_TIM_MspPostInit+0x6c>)
 80037d0:	f043 0302 	orr.w	r3, r3, #2
 80037d4:	6313      	str	r3, [r2, #48]	; 0x30
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <HAL_TIM_MspPostInit+0x6c>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 80037e2:	23c0      	movs	r3, #192	; 0xc0
 80037e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037f2:	2302      	movs	r3, #2
 80037f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f6:	f107 030c 	add.w	r3, r7, #12
 80037fa:	4619      	mov	r1, r3
 80037fc:	4805      	ldr	r0, [pc, #20]	; (8003814 <HAL_TIM_MspPostInit+0x70>)
 80037fe:	f002 fe55 	bl	80064ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003802:	bf00      	nop
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40000800 	.word	0x40000800
 8003810:	40023800 	.word	0x40023800
 8003814:	40020400 	.word	0x40020400

08003818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_UART_MspInit+0x84>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d12b      	bne.n	8003892 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_UART_MspInit+0x88>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4a17      	ldr	r2, [pc, #92]	; (80038a0 <HAL_UART_MspInit+0x88>)
 8003844:	f043 0320 	orr.w	r3, r3, #32
 8003848:	6453      	str	r3, [r2, #68]	; 0x44
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_UART_MspInit+0x88>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <HAL_UART_MspInit+0x88>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a10      	ldr	r2, [pc, #64]	; (80038a0 <HAL_UART_MspInit+0x88>)
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_UART_MspInit+0x88>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003872:	23c0      	movs	r3, #192	; 0xc0
 8003874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	2302      	movs	r3, #2
 8003878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387e:	2303      	movs	r3, #3
 8003880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003882:	2308      	movs	r3, #8
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003886:	f107 0314 	add.w	r3, r7, #20
 800388a:	4619      	mov	r1, r3
 800388c:	4805      	ldr	r0, [pc, #20]	; (80038a4 <HAL_UART_MspInit+0x8c>)
 800388e:	f002 fe0d 	bl	80064ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003892:	bf00      	nop
 8003894:	3728      	adds	r7, #40	; 0x28
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40011400 	.word	0x40011400
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40020800 	.word	0x40020800

080038a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038ac:	e7fe      	b.n	80038ac <NMI_Handler+0x4>

080038ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038b2:	e7fe      	b.n	80038b2 <HardFault_Handler+0x4>

080038b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b8:	e7fe      	b.n	80038b8 <MemManage_Handler+0x4>

080038ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038ba:	b480      	push	{r7}
 80038bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038be:	e7fe      	b.n	80038be <BusFault_Handler+0x4>

080038c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038c4:	e7fe      	b.n	80038c4 <UsageFault_Handler+0x4>

080038c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038f4:	f001 f96a 	bl	8004bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}

080038fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003900:	4803      	ldr	r0, [pc, #12]	; (8003910 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003902:	f004 ff40 	bl	8008786 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003906:	4803      	ldr	r0, [pc, #12]	; (8003914 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003908:	f004 ff3d 	bl	8008786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200006c4 	.word	0x200006c4
 8003914:	200004fc 	.word	0x200004fc

08003918 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800391c:	4803      	ldr	r0, [pc, #12]	; (800392c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800391e:	f004 ff32 	bl	8008786 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003922:	4803      	ldr	r0, [pc, #12]	; (8003930 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003924:	f004 ff2f 	bl	8008786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}
 800392c:	200006c4 	.word	0x200006c4
 8003930:	200005d4 	.word	0x200005d4

08003934 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003938:	4802      	ldr	r0, [pc, #8]	; (8003944 <TIM6_DAC_IRQHandler+0x10>)
 800393a:	f004 ff24 	bl	8008786 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	2000067c 	.word	0x2000067c

08003948 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <DMA2_Stream0_IRQHandler+0x10>)
 800394e:	f002 f86b 	bl	8005a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	2000061c 	.word	0x2000061c

0800395c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
	return 1;
 8003960:	2301      	movs	r3, #1
}
 8003962:	4618      	mov	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <_kill>:

int _kill(int pid, int sig)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003976:	f005 ff15 	bl	80097a4 <__errno>
 800397a:	4603      	mov	r3, r0
 800397c:	2216      	movs	r2, #22
 800397e:	601a      	str	r2, [r3, #0]
	return -1;
 8003980:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <_exit>:

void _exit (int status)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003994:	f04f 31ff 	mov.w	r1, #4294967295
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ffe7 	bl	800396c <_kill>
	while (1) {}		/* Make sure we hang here */
 800399e:	e7fe      	b.n	800399e <_exit+0x12>

080039a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	e00a      	b.n	80039c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039b2:	f3af 8000 	nop.w
 80039b6:	4601      	mov	r1, r0
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	60ba      	str	r2, [r7, #8]
 80039be:	b2ca      	uxtb	r2, r1
 80039c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3301      	adds	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	dbf0      	blt.n	80039b2 <_read+0x12>
	}

return len;
 80039d0:	687b      	ldr	r3, [r7, #4]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e009      	b.n	8003a00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	60ba      	str	r2, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fb0f 	bl	8003018 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	3301      	adds	r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	dbf1      	blt.n	80039ec <_write+0x12>
	}
	return len;
 8003a08:	687b      	ldr	r3, [r7, #4]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <_close>:

int _close(int file)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	return -1;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a3a:	605a      	str	r2, [r3, #4]
	return 0;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <_isatty>:

int _isatty(int file)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
	return 1;
 8003a52:	2301      	movs	r3, #1
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
	...

08003a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <_sbrk+0x5c>)
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <_sbrk+0x60>)
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <_sbrk+0x64>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <_sbrk+0x64>)
 8003a9a:	4a12      	ldr	r2, [pc, #72]	; (8003ae4 <_sbrk+0x68>)
 8003a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <_sbrk+0x64>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d207      	bcs.n	8003abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aac:	f005 fe7a 	bl	80097a4 <__errno>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	220c      	movs	r2, #12
 8003ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aba:	e009      	b.n	8003ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003abc:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <_sbrk+0x64>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <_sbrk+0x64>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4413      	add	r3, r2
 8003aca:	4a05      	ldr	r2, [pc, #20]	; (8003ae0 <_sbrk+0x64>)
 8003acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ace:	68fb      	ldr	r3, [r7, #12]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3718      	adds	r7, #24
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20020000 	.word	0x20020000
 8003adc:	00000400 	.word	0x00000400
 8003ae0:	200001fc 	.word	0x200001fc
 8003ae4:	20000978 	.word	0x20000978

08003ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aec:	4b08      	ldr	r3, [pc, #32]	; (8003b10 <SystemInit+0x28>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	4a07      	ldr	r2, [pc, #28]	; (8003b10 <SystemInit+0x28>)
 8003af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003afc:	4b04      	ldr	r3, [pc, #16]	; (8003b10 <SystemInit+0x28>)
 8003afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b02:	609a      	str	r2, [r3, #8]
#endif
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000ed00 	.word	0xe000ed00
 8003b14:	00000000 	.word	0x00000000

08003b18 <tim10_init>:
  return velocity;
}

/* only use in main.c */
void tim10_init()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  tim10_length_set_zero();
 8003b1c:	f000 f8d4 	bl	8003cc8 <tim10_length_set_zero>
  tim10_velocity_set_zero();
 8003b20:	f000 f8f4 	bl	8003d0c <tim10_velocity_set_zero>
  velotrace_init(1);
 8003b24:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8003b40 <tim10_init+0x28>
 8003b28:	f000 fd7a 	bl	8004620 <velotrace_init>
	encoder_init();
 8003b2c:	f7fe f9e2 	bl	8001ef4 <encoder_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8003b30:	4805      	ldr	r0, [pc, #20]	; (8003b48 <tim10_init+0x30>)
 8003b32:	f004 faa7 	bl	8008084 <HAL_TIM_Base_Stop_IT>
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	f3af 8000 	nop.w
 8003b40:	00000000 	.word	0x00000000
 8003b44:	3ff00000 	.word	0x3ff00000
 8003b48:	200004fc 	.word	0x200004fc

08003b4c <tim10_start>:

void tim10_start()
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  tim10_left = 0;
 8003b50:	490d      	ldr	r1, [pc, #52]	; (8003b88 <tim10_start+0x3c>)
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	e9c1 2300 	strd	r2, r3, [r1]
  tim10_right = 0;
 8003b5e:	490b      	ldr	r1, [pc, #44]	; (8003b8c <tim10_start+0x40>)
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	e9c1 2300 	strd	r2, r3, [r1]
  /* encoder_set_middle, HAL_TIM_Encoder_Start */
  encoder_start();
 8003b6c:	f7fe f9ca 	bl	8001f04 <encoder_start>
  /* marker = subsensbuf = sidedeltacount = markerstate = rightmarkercount = 0 */
  velotrace_start();
 8003b70:	f000 fd68 	bl	8004644 <velotrace_start>
  tim10_length_set_zero();
 8003b74:	f000 f8a8 	bl	8003cc8 <tim10_length_set_zero>
  tim10_velocity_set_zero();
 8003b78:	f000 f8c8 	bl	8003d0c <tim10_velocity_set_zero>
  HAL_TIM_Base_Start_IT(&htim10);
 8003b7c:	4804      	ldr	r0, [pc, #16]	; (8003b90 <tim10_start+0x44>)
 8003b7e:	f004 fa11 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000870 	.word	0x20000870
 8003b8c:	20000890 	.word	0x20000890
 8003b90:	200004fc 	.word	0x200004fc

08003b94 <tim10_stop>:

void tim10_stop()
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 8003b98:	4804      	ldr	r0, [pc, #16]	; (8003bac <tim10_stop+0x18>)
 8003b9a:	f004 fa73 	bl	8008084 <HAL_TIM_Base_Stop_IT>
  velotrace_stop();
 8003b9e:	f000 fd97 	bl	80046d0 <velotrace_stop>
  encoder_stop();
 8003ba2:	f7fe f9d9 	bl	8001f58 <encoder_stop>
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200004fc 	.word	0x200004fc

08003bb0 <tim10_main>:

void tim10_main()
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0

  /* set encoder middle and update velocities */
  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > ");
  #endif
  encoder_set();
 8003bb6:	f7fe f965 	bl	8001e84 <encoder_set>

  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > ");
  #endif
  el = encoder_length_left();
 8003bba:	f7fe f925 	bl	8001e08 <encoder_length_left>
 8003bbe:	ed87 0b04 	vstr	d0, [r7, #16]
  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > ");
  #endif
  er = encoder_length_right();
 8003bc2:	f7fe f941 	bl	8001e48 <encoder_length_right>
 8003bc6:	ed87 0b02 	vstr	d0, [r7, #8]
  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > ");
  #endif
  e = encoder_length();
 8003bca:	f7fe f901 	bl	8001dd0 <encoder_length>
 8003bce:	ed87 0b00 	vstr	d0, [r7]
  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > el = %7.2f, er = %7.2f, e = %7.2f\r\n", el, er, e);
  #endif

  /* update velocity */
  velocity_left = el * (double) TIM10_Hz;
 8003bd2:	a333      	add	r3, pc, #204	; (adr r3, 8003ca0 <tim10_main+0xf0>)
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bdc:	f7fc fd0c 	bl	80005f8 <__aeabi_dmul>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4930      	ldr	r1, [pc, #192]	; (8003ca8 <tim10_main+0xf8>)
 8003be6:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = er * (double) TIM10_Hz;
 8003bea:	a32d      	add	r3, pc, #180	; (adr r3, 8003ca0 <tim10_main+0xf0>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bf4:	f7fc fd00 	bl	80005f8 <__aeabi_dmul>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	492b      	ldr	r1, [pc, #172]	; (8003cac <tim10_main+0xfc>)
 8003bfe:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = e * (double) TIM10_Hz;
 8003c02:	a327      	add	r3, pc, #156	; (adr r3, 8003ca0 <tim10_main+0xf0>)
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c0c:	f7fc fcf4 	bl	80005f8 <__aeabi_dmul>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4926      	ldr	r1, [pc, #152]	; (8003cb0 <tim10_main+0x100>)
 8003c16:	e9c1 2300 	strd	r2, r3, [r1]


  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > ");
  #endif
  tim10_left  = velotrace_solve(velocity);
 8003c1a:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <tim10_main+0x100>)
 8003c1c:	ed93 7b00 	vldr	d7, [r3]
 8003c20:	eeb0 0a47 	vmov.f32	s0, s14
 8003c24:	eef0 0a67 	vmov.f32	s1, s15
 8003c28:	f000 fe8a 	bl	8004940 <velotrace_solve>
 8003c2c:	eeb0 7a40 	vmov.f32	s14, s0
 8003c30:	eef0 7a60 	vmov.f32	s15, s1
 8003c34:	4b1f      	ldr	r3, [pc, #124]	; (8003cb4 <tim10_main+0x104>)
 8003c36:	ed83 7b00 	vstr	d7, [r3]
  tim10_right = tim10_left;
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <tim10_main+0x104>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	491d      	ldr	r1, [pc, #116]	; (8003cb8 <tim10_main+0x108>)
 8003c42:	e9c1 2300 	strd	r2, r3, [r1]
  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > tim10_left = %7.2f, tim10_right = %7.2f\r\n", tim10_left, tim10_right);
  #endif

  /* update lengths */
  length_left += velocity_left;
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <tim10_main+0x10c>)
 8003c48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c4c:	4b16      	ldr	r3, [pc, #88]	; (8003ca8 <tim10_main+0xf8>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f7fc fb1b 	bl	800028c <__adddf3>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4918      	ldr	r1, [pc, #96]	; (8003cbc <tim10_main+0x10c>)
 8003c5c:	e9c1 2300 	strd	r2, r3, [r1]
  length_right += velocity_right;
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <tim10_main+0x110>)
 8003c62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <tim10_main+0xfc>)
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f7fc fb0e 	bl	800028c <__adddf3>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4912      	ldr	r1, [pc, #72]	; (8003cc0 <tim10_main+0x110>)
 8003c76:	e9c1 2300 	strd	r2, r3, [r1]
  length += velocity;
 8003c7a:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <tim10_main+0x114>)
 8003c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <tim10_main+0x100>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f7fc fb01 	bl	800028c <__adddf3>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	490d      	ldr	r1, [pc, #52]	; (8003cc4 <tim10_main+0x114>)
 8003c90:	e9c1 2300 	strd	r2, r3, [r1]
  if(length >= SAMPLING_LENGTH)
  {
    course_state_function();
  }
  */
}
 8003c94:	bf00      	nop
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	f3af 8000 	nop.w
 8003ca0:	e0000000 	.word	0xe0000000
 8003ca4:	3f50624d 	.word	0x3f50624d
 8003ca8:	20000888 	.word	0x20000888
 8003cac:	20000880 	.word	0x20000880
 8003cb0:	20000878 	.word	0x20000878
 8003cb4:	20000870 	.word	0x20000870
 8003cb8:	20000890 	.word	0x20000890
 8003cbc:	20000860 	.word	0x20000860
 8003cc0:	20000898 	.word	0x20000898
 8003cc4:	20000868 	.word	0x20000868

08003cc8 <tim10_length_set_zero>:
  #endif
}

/* private */
void tim10_length_set_zero()
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  length_left = 0;
 8003ccc:	490c      	ldr	r1, [pc, #48]	; (8003d00 <tim10_length_set_zero+0x38>)
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9c1 2300 	strd	r2, r3, [r1]
  length_right = 0;
 8003cda:	490a      	ldr	r1, [pc, #40]	; (8003d04 <tim10_length_set_zero+0x3c>)
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9c1 2300 	strd	r2, r3, [r1]
  length = 0;
 8003ce8:	4907      	ldr	r1, [pc, #28]	; (8003d08 <tim10_length_set_zero+0x40>)
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003cf6:	bf00      	nop
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	20000860 	.word	0x20000860
 8003d04:	20000898 	.word	0x20000898
 8003d08:	20000868 	.word	0x20000868

08003d0c <tim10_velocity_set_zero>:

void tim10_velocity_set_zero()
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  velocity_left = 0;
 8003d10:	490c      	ldr	r1, [pc, #48]	; (8003d44 <tim10_velocity_set_zero+0x38>)
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = 0;
 8003d1e:	490a      	ldr	r1, [pc, #40]	; (8003d48 <tim10_velocity_set_zero+0x3c>)
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = 0;
 8003d2c:	4907      	ldr	r1, [pc, #28]	; (8003d4c <tim10_velocity_set_zero+0x40>)
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003d3a:	bf00      	nop
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	20000888 	.word	0x20000888
 8003d48:	20000880 	.word	0x20000880
 8003d4c:	20000878 	.word	0x20000878

08003d50 <tim10_read_left>:

double tim10_read_left()
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return tim10_left;
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <tim10_read_left+0x20>)
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	ec43 2b17 	vmov	d7, r2, r3
}
 8003d5e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d62:	eef0 0a67 	vmov.f32	s1, s15
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000870 	.word	0x20000870

08003d74 <tim10_read_right>:

double tim10_read_right()
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return tim10_right;
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <tim10_read_right+0x20>)
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003d82:	eeb0 0a47 	vmov.f32	s0, s14
 8003d86:	eef0 0a67 	vmov.f32	s1, s15
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000890 	.word	0x20000890

08003d98 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
    switch_init();
 8003d9c:	f7fd fba6 	bl	80014ec <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8003da0:	4803      	ldr	r0, [pc, #12]	; (8003db0 <tim11_init+0x18>)
 8003da2:	f004 f8ff 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
    rotary_init();
 8003da6:	f7fd fa93 	bl	80012d0 <rotary_init>
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	200005d4 	.word	0x200005d4

08003db4 <tim11_main>:

void tim11_main()
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
    switch_enter();
 8003db8:	f7fd fbe7 	bl	800158a <switch_enter>
    rotary_set_value();
 8003dbc:	f7fd faa8 	bl	8001310 <rotary_set_value>
}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <tim6_init>:
#if D_TIM6
double leftmotor, rightmotor;
#endif

void tim6_init()
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
    motor_init();
 8003dc8:	f7ff f845 	bl	8002e56 <motor_init>
    // sidesensor_init();
    HAL_TIM_Base_Stop_IT(&htim6);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <tim6_init+0x14>)
 8003dce:	f004 f959 	bl	8008084 <HAL_TIM_Base_Stop_IT>
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000067c 	.word	0x2000067c

08003ddc <tim6_start>:

void tim6_start()
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
    printf("motor_start()\r\n");
 8003de0:	480c      	ldr	r0, [pc, #48]	; (8003e14 <tim6_start+0x38>)
 8003de2:	f006 fc1f 	bl	800a624 <puts>
    #if D_TIM6
    leftmotor = 0;
 8003de6:	490c      	ldr	r1, [pc, #48]	; (8003e18 <tim6_start+0x3c>)
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	e9c1 2300 	strd	r2, r3, [r1]
    rightmotor = 0;
 8003df4:	4909      	ldr	r1, [pc, #36]	; (8003e1c <tim6_start+0x40>)
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9c1 2300 	strd	r2, r3, [r1]
    #endif
    sidesensor_start();
 8003e02:	f7ff f953 	bl	80030ac <sidesensor_start>
    motor_start();
 8003e06:	f7ff f82d 	bl	8002e64 <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8003e0a:	4805      	ldr	r0, [pc, #20]	; (8003e20 <tim6_start+0x44>)
 8003e0c:	f004 f8ca 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
}
 8003e10:	bf00      	nop
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	0800e598 	.word	0x0800e598
 8003e18:	200008a8 	.word	0x200008a8
 8003e1c:	200008a0 	.word	0x200008a0
 8003e20:	2000067c 	.word	0x2000067c

08003e24 <tim6_stop>:

void tim6_stop()
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8003e28:	4804      	ldr	r0, [pc, #16]	; (8003e3c <tim6_stop+0x18>)
 8003e2a:	f004 f92b 	bl	8008084 <HAL_TIM_Base_Stop_IT>
    motor_stop();
 8003e2e:	f7ff f82b 	bl	8002e88 <motor_stop>
    sidesensor_stop();
 8003e32:	f7ff f95b 	bl	80030ec <sidesensor_stop>
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	2000067c 	.word	0x2000067c

08003e40 <tim6_main>:

void tim6_main()
{
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	af00      	add	r7, sp, #0
    #if !D_TIM6
    double leftmotor, rightmotor;
    #endif

    sidesensor_main();
 8003e44:	f7ff f99e 	bl	8003184 <sidesensor_main>

    if(motor_read_enable())
 8003e48:	f7ff f846 	bl	8002ed8 <motor_read_enable>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d046      	beq.n	8003ee0 <tim6_main+0xa0>
                #endif
                break;
        }
        #else
        #if TRACER_TUNING
        leftmotor  =  tim7_read_left();
 8003e52:	f000 f9bb 	bl	80041cc <tim7_read_left>
 8003e56:	eeb0 7a40 	vmov.f32	s14, s0
 8003e5a:	eef0 7a60 	vmov.f32	s15, s1
 8003e5e:	4b3c      	ldr	r3, [pc, #240]	; (8003f50 <tim6_main+0x110>)
 8003e60:	ed83 7b00 	vstr	d7, [r3]
        rightmotor = tim7_read_right();
 8003e64:	f000 f9c4 	bl	80041f0 <tim7_read_right>
 8003e68:	eeb0 7a40 	vmov.f32	s14, s0
 8003e6c:	eef0 7a60 	vmov.f32	s15, s1
 8003e70:	4b38      	ldr	r3, [pc, #224]	; (8003f54 <tim6_main+0x114>)
 8003e72:	ed83 7b00 	vstr	d7, [r3]
        #endif
        #if VELOTRACE_TUNING
        leftmotor  =  tim10_read_left();
 8003e76:	f7ff ff6b 	bl	8003d50 <tim10_read_left>
 8003e7a:	eeb0 7a40 	vmov.f32	s14, s0
 8003e7e:	eef0 7a60 	vmov.f32	s15, s1
 8003e82:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <tim6_main+0x110>)
 8003e84:	ed83 7b00 	vstr	d7, [r3]
        rightmotor = tim10_read_right();
 8003e88:	f7ff ff74 	bl	8003d74 <tim10_read_right>
 8003e8c:	eeb0 7a40 	vmov.f32	s14, s0
 8003e90:	eef0 7a60 	vmov.f32	s15, s1
 8003e94:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <tim6_main+0x114>)
 8003e96:	ed83 7b00 	vstr	d7, [r3]
        #endif
        #if VELOTRACE_TUNING && TRACER_TUNING
        leftmotor  =  tim10_read_left() +  tim7_read_left();
 8003e9a:	f7ff ff59 	bl	8003d50 <tim10_read_left>
 8003e9e:	ec55 4b10 	vmov	r4, r5, d0
 8003ea2:	f000 f993 	bl	80041cc <tim7_read_left>
 8003ea6:	ec53 2b10 	vmov	r2, r3, d0
 8003eaa:	4620      	mov	r0, r4
 8003eac:	4629      	mov	r1, r5
 8003eae:	f7fc f9ed 	bl	800028c <__adddf3>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4926      	ldr	r1, [pc, #152]	; (8003f50 <tim6_main+0x110>)
 8003eb8:	e9c1 2300 	strd	r2, r3, [r1]
        rightmotor = tim10_read_right() + tim7_read_right();
 8003ebc:	f7ff ff5a 	bl	8003d74 <tim10_read_right>
 8003ec0:	ec55 4b10 	vmov	r4, r5, d0
 8003ec4:	f000 f994 	bl	80041f0 <tim7_read_right>
 8003ec8:	ec53 2b10 	vmov	r2, r3, d0
 8003ecc:	4620      	mov	r0, r4
 8003ece:	4629      	mov	r1, r5
 8003ed0:	f7fc f9dc 	bl	800028c <__adddf3>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	491e      	ldr	r1, [pc, #120]	; (8003f54 <tim6_main+0x114>)
 8003eda:	e9c1 2300 	strd	r2, r3, [r1]
 8003ede:	e00d      	b.n	8003efc <tim6_main+0xbc>
        // printf("tracer_solve(direction) = %7.2f velotrace_solve(tim10_read_velocity()) = %7.2f\r\n", tracer_solve(direction), velotrace_solve(tim10_read_velocity()));
        #endif
    }
    else
    {
        leftmotor = 0;
 8003ee0:	491b      	ldr	r1, [pc, #108]	; (8003f50 <tim6_main+0x110>)
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	e9c1 2300 	strd	r2, r3, [r1]
        rightmotor = 0;
 8003eee:	4919      	ldr	r1, [pc, #100]	; (8003f54 <tim6_main+0x114>)
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9c1 2300 	strd	r2, r3, [r1]
    #if D_TIM6_WHILE
    printf("tim6.c > tim6_main() > ");
    printf("leftmotor = %7.2f, rightmotor = %7.2f\r\n", leftmotor, rightmotor);
    #endif

    if(rotary_read_playmode() == motor_free)
 8003efc:	f7fd f9fc 	bl	80012f8 <rotary_read_playmode>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d106      	bne.n	8003f14 <tim6_main+0xd4>
    {
        motor_set(0, 0);
 8003f06:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8003f48 <tim6_main+0x108>
 8003f0a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8003f48 <tim6_main+0x108>
 8003f0e:	f7fe ffef 	bl	8002ef0 <motor_set>
            switch_reset_enter();
        }
		#endif	/* TEMPLATE */
    }

}
 8003f12:	e017      	b.n	8003f44 <tim6_main+0x104>
        if(sidesensor_read_markerstate() != stop)
 8003f14:	f7ff f8f2 	bl	80030fc <sidesensor_read_markerstate>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d010      	beq.n	8003f40 <tim6_main+0x100>
            motor_set(leftmotor, rightmotor);
 8003f1e:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <tim6_main+0x110>)
 8003f20:	ed93 7b00 	vldr	d7, [r3]
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <tim6_main+0x114>)
 8003f26:	ed93 6b00 	vldr	d6, [r3]
 8003f2a:	eeb0 1a46 	vmov.f32	s2, s12
 8003f2e:	eef0 1a66 	vmov.f32	s3, s13
 8003f32:	eeb0 0a47 	vmov.f32	s0, s14
 8003f36:	eef0 0a67 	vmov.f32	s1, s15
 8003f3a:	f7fe ffd9 	bl	8002ef0 <motor_set>
}
 8003f3e:	e001      	b.n	8003f44 <tim6_main+0x104>
            switch_reset_enter();
 8003f40:	f7fd fac8 	bl	80014d4 <switch_reset_enter>
}
 8003f44:	bf00      	nop
 8003f46:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8003f50:	200008a8 	.word	0x200008a8
 8003f54:	200008a0 	.word	0x200008a0

08003f58 <tim6_d_print>:

void tim6_d_print()
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af02      	add	r7, sp, #8
    #if D_TIM6
    printf("tim6.c > tim6_d_print() > leftmotor = %5.3f, rightmotor = %5.3f\r\n", leftmotor, rightmotor); 
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <tim6_d_print+0x30>)
 8003f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <tim6_d_print+0x34>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	e9cd 2300 	strd	r2, r3, [sp]
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4807      	ldr	r0, [pc, #28]	; (8003f90 <tim6_d_print+0x38>)
 8003f74:	f006 fad0 	bl	800a518 <iprintf>
    printf("tim6.c > tim6_d_print() > sidesensor_d_print() > ");
 8003f78:	4806      	ldr	r0, [pc, #24]	; (8003f94 <tim6_d_print+0x3c>)
 8003f7a:	f006 facd 	bl	800a518 <iprintf>
    sidesensor_d_print();
 8003f7e:	f7ff f95d 	bl	800323c <sidesensor_d_print>
    #endif
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	200008a8 	.word	0x200008a8
 8003f8c:	200008a0 	.word	0x200008a0
 8003f90:	0800e5a8 	.word	0x0800e5a8
 8003f94:	0800e5ec 	.word	0x0800e5ec

08003f98 <tim7_init>:
#if D_TIM7
unsigned char i_count, i_start;
#endif

void tim7_init()
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
    /* init */
    #if D_TIM7
    printf("tim7.c > tim7_init() > ");
 8003f9c:	4808      	ldr	r0, [pc, #32]	; (8003fc0 <tim7_init+0x28>)
 8003f9e:	f006 fabb 	bl	800a518 <iprintf>
    #endif
    analog_init();
 8003fa2:	f7fd fdd9 	bl	8001b58 <analog_init>
    tracer_init(1);
 8003fa6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8003fb8 <tim7_init+0x20>
 8003faa:	f000 f979 	bl	80042a0 <tracer_init>
    HAL_TIM_Base_Stop_IT(&htim7);
 8003fae:	4805      	ldr	r0, [pc, #20]	; (8003fc4 <tim7_init+0x2c>)
 8003fb0:	f004 f868 	bl	8008084 <HAL_TIM_Base_Stop_IT>
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	00000000 	.word	0x00000000
 8003fbc:	3ff00000 	.word	0x3ff00000
 8003fc0:	0800e620 	.word	0x0800e620
 8003fc4:	20000798 	.word	0x20000798

08003fc8 <tim7_start>:

void tim7_start()
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
    /* start */
    #if D_TIM7
    printf("tim7.c > tim7_start() > ");
 8003fcc:	4810      	ldr	r0, [pc, #64]	; (8004010 <tim7_start+0x48>)
 8003fce:	f006 faa3 	bl	800a518 <iprintf>
    #endif
    tim7_set_emergency(0);
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f000 f8ea 	bl	80041ac <tim7_set_emergency>
    tim7_left = 0;
 8003fd8:	490e      	ldr	r1, [pc, #56]	; (8004014 <tim7_start+0x4c>)
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	e9c1 2300 	strd	r2, r3, [r1]
    tim7_right = 0;
 8003fe6:	490c      	ldr	r1, [pc, #48]	; (8004018 <tim7_start+0x50>)
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9c1 2300 	strd	r2, r3, [r1]
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8003ff4:	4909      	ldr	r1, [pc, #36]	; (800401c <tim7_start+0x54>)
 8003ff6:	480a      	ldr	r0, [pc, #40]	; (8004020 <tim7_start+0x58>)
 8003ff8:	f7fd fcea 	bl	80019d0 <analog_set_from_flash>
    analog_start();
 8003ffc:	f7fd fdbe 	bl	8001b7c <analog_start>
    tracer_start();
 8004000:	f000 f922 	bl	8004248 <tracer_start>
    HAL_TIM_Base_Start_IT(&htim7);
 8004004:	4807      	ldr	r0, [pc, #28]	; (8004024 <tim7_start+0x5c>)
 8004006:	f003 ffcd 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
}
 800400a:	bf00      	nop
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	0800e638 	.word	0x0800e638
 8004014:	200008c0 	.word	0x200008c0
 8004018:	200008b0 	.word	0x200008b0
 800401c:	2000081a 	.word	0x2000081a
 8004020:	200007fa 	.word	0x200007fa
 8004024:	20000798 	.word	0x20000798

08004028 <tim7_stop>:

void tim7_stop()
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
    /* stop */
    #if D_TIM7
    printf("tim7.c > tim7_stop() > ");
 800402c:	4806      	ldr	r0, [pc, #24]	; (8004048 <tim7_stop+0x20>)
 800402e:	f006 fa73 	bl	800a518 <iprintf>
    #endif
    HAL_TIM_Base_Stop_IT(&htim7);
 8004032:	4806      	ldr	r0, [pc, #24]	; (800404c <tim7_stop+0x24>)
 8004034:	f004 f826 	bl	8008084 <HAL_TIM_Base_Stop_IT>
    motor_stop();
 8004038:	f7fe ff26 	bl	8002e88 <motor_stop>
    tracer_stop();
 800403c:	f000 f928 	bl	8004290 <tracer_stop>
    analog_stop();
 8004040:	f7fd fda8 	bl	8001b94 <analog_stop>
}
 8004044:	bf00      	nop
 8004046:	bd80      	pop	{r7, pc}
 8004048:	0800e654 	.word	0x0800e654
 800404c:	20000798 	.word	0x20000798

08004050 <tim7_main>:

void tim7_main()
{
 8004050:	b5b0      	push	{r4, r5, r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
    /* main */
    int direction;

    direction = tim7_read_direction();
 8004056:	f000 f81d 	bl	8004094 <tim7_read_direction>
 800405a:	6078      	str	r0, [r7, #4]
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("analogl = %5d, analogr = %5d, direction = %5d\r\n", analogl, analogr, direction);
    #endif

    tim7_left   =   tracer_solve(direction);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fa2b 	bl	80044b8 <tracer_solve>
 8004062:	eeb0 7a40 	vmov.f32	s14, s0
 8004066:	eef0 7a60 	vmov.f32	s15, s1
 800406a:	4b08      	ldr	r3, [pc, #32]	; (800408c <tim7_main+0x3c>)
 800406c:	ed83 7b00 	vstr	d7, [r3]
    tim7_right  = - tim7_left;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <tim7_main+0x3c>)
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	4614      	mov	r4, r2
 8004078:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <tim7_main+0x40>)
 800407e:	e9c3 4500 	strd	r4, r5, [r3]

    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("tim7_left = %7.2f, tim7_right = %7.2f\r\n", tim7_left, tim7_right);
    #endif
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bdb0      	pop	{r4, r5, r7, pc}
 800408a:	bf00      	nop
 800408c:	200008c0 	.word	0x200008c0
 8004090:	200008b0 	.word	0x200008b0

08004094 <tim7_read_direction>:

/* this method is private */
int tim7_read_direction()
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
    uint16_t analogl, analogr;
	#if !D_TIM7
    unsigned char i_count, i_start;
	#endif

    analogl = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	80fb      	strh	r3, [r7, #6]
    analogr = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	80bb      	strh	r3, [r7, #4]

    switch(analog_read_analogmode())
 80040a2:	f7fd fd0d 	bl	8001ac0 <analog_read_analogmode>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b10      	cmp	r3, #16
 80040aa:	d83a      	bhi.n	8004122 <tim7_read_direction+0x8e>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <tim7_read_direction+0x20>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	08004123 	.word	0x08004123
 80040b8:	08004123 	.word	0x08004123
 80040bc:	08004123 	.word	0x08004123
 80040c0:	08004123 	.word	0x08004123
 80040c4:	08004107 	.word	0x08004107
 80040c8:	08004123 	.word	0x08004123
 80040cc:	08004123 	.word	0x08004123
 80040d0:	08004123 	.word	0x08004123
 80040d4:	08004123 	.word	0x08004123
 80040d8:	08004123 	.word	0x08004123
 80040dc:	08004123 	.word	0x08004123
 80040e0:	08004123 	.word	0x08004123
 80040e4:	080040f9 	.word	0x080040f9
 80040e8:	08004123 	.word	0x08004123
 80040ec:	08004123 	.word	0x08004123
 80040f0:	08004123 	.word	0x08004123
 80040f4:	08004115 	.word	0x08004115
    {
        case analogmode_calibrating:
            break;
        case analogmode_short:
            i_count = 12;
 80040f8:	4b27      	ldr	r3, [pc, #156]	; (8004198 <tim7_read_direction+0x104>)
 80040fa:	220c      	movs	r2, #12
 80040fc:	701a      	strb	r2, [r3, #0]
            i_start = 0;
 80040fe:	4b27      	ldr	r3, [pc, #156]	; (800419c <tim7_read_direction+0x108>)
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
            break;
 8004104:	e00e      	b.n	8004124 <tim7_read_direction+0x90>
        case analogmode_long:
            i_count = 4;
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <tim7_read_direction+0x104>)
 8004108:	2204      	movs	r2, #4
 800410a:	701a      	strb	r2, [r3, #0]
            i_start = 12;
 800410c:	4b23      	ldr	r3, [pc, #140]	; (800419c <tim7_read_direction+0x108>)
 800410e:	220c      	movs	r2, #12
 8004110:	701a      	strb	r2, [r3, #0]
            break;
 8004112:	e007      	b.n	8004124 <tim7_read_direction+0x90>
        case analogmode_all:
            i_count = 16;
 8004114:	4b20      	ldr	r3, [pc, #128]	; (8004198 <tim7_read_direction+0x104>)
 8004116:	2210      	movs	r2, #16
 8004118:	701a      	strb	r2, [r3, #0]
            i_start = 0;
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <tim7_read_direction+0x108>)
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
            break;
 8004120:	e000      	b.n	8004124 <tim7_read_direction+0x90>
        default:
            /* unknown analogmode ... x_x */
            break;
 8004122:	bf00      	nop
    }

    for(unsigned char i = i_start; i < i_count; i++)
 8004124:	4b1d      	ldr	r3, [pc, #116]	; (800419c <tim7_read_direction+0x108>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	70fb      	strb	r3, [r7, #3]
 800412a:	e01b      	b.n	8004164 <tim7_read_direction+0xd0>
    {
        #if D_TIM7_WHILE
        printf("tim7.c > tim7_main() > for() > ");
        printf("i = %2d", i);
        #endif
        if(i % 2 == 0)
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <tim7_read_direction+0xb8>
        {
            #if D_TIM7_WHILE
            printf("  odd\r\n");
            #endif
            analogl += analog_sensor_get(i);
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd fd5a 	bl	8001bf4 <analog_sensor_get>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	4413      	add	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
 800414a:	e008      	b.n	800415e <tim7_read_direction+0xca>
        else
        {
            #if D_TIM7_WHILE
            printf(" even\r\n");
            #endif
            analogr += analog_sensor_get(i);
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fd fd50 	bl	8001bf4 <analog_sensor_get>
 8004154:	4603      	mov	r3, r0
 8004156:	461a      	mov	r2, r3
 8004158:	88bb      	ldrh	r3, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	80bb      	strh	r3, [r7, #4]
    for(unsigned char i = i_start; i < i_count; i++)
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	3301      	adds	r3, #1
 8004162:	70fb      	strb	r3, [r7, #3]
 8004164:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <tim7_read_direction+0x104>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	429a      	cmp	r2, r3
 800416c:	d3de      	bcc.n	800412c <tim7_read_direction+0x98>
        }
    }

    if(analogl + analogr >= 970 * i_count)
 800416e:	88fa      	ldrh	r2, [r7, #6]
 8004170:	88bb      	ldrh	r3, [r7, #4]
 8004172:	441a      	add	r2, r3
 8004174:	4b08      	ldr	r3, [pc, #32]	; (8004198 <tim7_read_direction+0x104>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	4619      	mov	r1, r3
 800417a:	f240 33ca 	movw	r3, #970	; 0x3ca
 800417e:	fb03 f301 	mul.w	r3, r3, r1
 8004182:	429a      	cmp	r2, r3
 8004184:	db01      	blt.n	800418a <tim7_read_direction+0xf6>
    {
    	tim7_main_emergency();
 8004186:	f000 f80b 	bl	80041a0 <tim7_main_emergency>
    }

    return analogl - analogr;
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	88bb      	ldrh	r3, [r7, #4]
 800418e:	1ad3      	subs	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	200008b8 	.word	0x200008b8
 800419c:	200008c8 	.word	0x200008c8

080041a0 <tim7_main_emergency>:

void tim7_main_emergency()
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
	switch_reset_enter();
 80041a4:	f7fd f996 	bl	80014d4 <switch_reset_enter>
}
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}

080041ac <tim7_set_emergency>:

void tim7_set_emergency(char emergency_)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
    tim7_emergency = emergency_;
 80041b6:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <tim7_set_emergency+0x1c>)
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	7013      	strb	r3, [r2, #0]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	200008b9 	.word	0x200008b9

080041cc <tim7_read_left>:
{
    return tim7_emergency;
}

double tim7_read_left()
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c >  tim7_read_left() >  tim7_left = %7.2f\r\n", tim7_left);
    #endif
    return tim7_left;
 80041d0:	4b06      	ldr	r3, [pc, #24]	; (80041ec <tim7_read_left+0x20>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80041da:	eeb0 0a47 	vmov.f32	s0, s14
 80041de:	eef0 0a67 	vmov.f32	s1, s15
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	200008c0 	.word	0x200008c0

080041f0 <tim7_read_right>:

double tim7_read_right()
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_read_right() > tim7_right = %7.2f\r\n", tim7_right);
    #endif
    return tim7_right;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <tim7_read_right+0x20>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80041fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004202:	eef0 0a67 	vmov.f32	s1, s15
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	200008b0 	.word	0x200008b0

08004214 <tim7_d_print>:

void tim7_d_print()
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
    /* d_print */
    #if D_TIM7
    printf("tim7.c > tim7_d_print() > ");
 8004218:	4807      	ldr	r0, [pc, #28]	; (8004238 <tim7_d_print+0x24>)
 800421a:	f006 f97d 	bl	800a518 <iprintf>
    printf("i_count = %3d, i_start = %3d\r\n", i_count, i_start);
 800421e:	4b07      	ldr	r3, [pc, #28]	; (800423c <tim7_d_print+0x28>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	4619      	mov	r1, r3
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <tim7_d_print+0x2c>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	461a      	mov	r2, r3
 800422a:	4806      	ldr	r0, [pc, #24]	; (8004244 <tim7_d_print+0x30>)
 800422c:	f006 f974 	bl	800a518 <iprintf>
    analog_d_print();
 8004230:	f7fd fad4 	bl	80017dc <analog_d_print>
    #endif
}
 8004234:	bf00      	nop
 8004236:	bd80      	pop	{r7, pc}
 8004238:	0800e66c 	.word	0x0800e66c
 800423c:	200008b8 	.word	0x200008b8
 8004240:	200008c8 	.word	0x200008c8
 8004244:	0800e688 	.word	0x0800e688

08004248 <tracer_start>:
double tracer_samplingtime;

PID tracer_pid;

void tracer_start()
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
    tracer_s_error = 0;
 800424c:	490e      	ldr	r1, [pc, #56]	; (8004288 <tracer_start+0x40>)
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	e9c1 2300 	strd	r2, r3, [r1]
    tracer_before_error = 0;
 800425a:	4b0c      	ldr	r3, [pc, #48]	; (800428c <tracer_start+0x44>)
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
    tracer_set_gain(rotary_read_value());
 8004260:	f7fd f862 	bl	8001328 <rotary_read_value>
 8004264:	4603      	mov	r3, r0
 8004266:	b29b      	uxth	r3, r3
 8004268:	4618      	mov	r0, r3
 800426a:	f000 f8e7 	bl	800443c <tracer_set_gain>
    tracer_set_target(0);
 800426e:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8004280 <tracer_start+0x38>
 8004272:	f000 f90f 	bl	8004494 <tracer_set_target>
    printf("tracer.c > tracer_start > ");
    printf("target = %5.2f\r\n", tracer_pid.target);
    printf("tracer.c > tracer_start > ");
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
    #endif
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	f3af 8000 	nop.w
	...
 8004288:	20000900 	.word	0x20000900
 800428c:	200008f8 	.word	0x200008f8

08004290 <tracer_stop>:

void tracer_stop()
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
    tracer_set_target_zero();
 8004294:	f000 f826 	bl	80042e4 <tracer_set_target_zero>
    tracer_set_gain_zero();
 8004298:	f000 f814 	bl	80042c4 <tracer_set_gain_zero>
}
 800429c:	bf00      	nop
 800429e:	bd80      	pop	{r7, pc}

080042a0 <tracer_init>:

void tracer_init(double samplingtime_)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	ed87 0b00 	vstr	d0, [r7]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_init > ");
    printf("sampling_time = 1, tracer_s_error = 0, tracer_before_error = 0\r\n");
    #endif
    tracer_samplingtime = samplingtime_;
 80042aa:	4905      	ldr	r1, [pc, #20]	; (80042c0 <tracer_init+0x20>)
 80042ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	200008f0 	.word	0x200008f0

080042c4 <tracer_set_gain_zero>:

void tracer_set_gain_zero()
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
    tracer_pid.target = 0;
 80042c8:	4905      	ldr	r1, [pc, #20]	; (80042e0 <tracer_set_gain_zero+0x1c>)
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80042d6:	bf00      	nop
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	200008d0 	.word	0x200008d0

080042e4 <tracer_set_target_zero>:

void tracer_set_target_zero()
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
    tracer_pid.kp = 0;
 80042e8:	490c      	ldr	r1, [pc, #48]	; (800431c <tracer_set_target_zero+0x38>)
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    tracer_pid.ki = 0;
 80042f6:	4909      	ldr	r1, [pc, #36]	; (800431c <tracer_set_target_zero+0x38>)
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9c1 2304 	strd	r2, r3, [r1, #16]
    tracer_pid.kd = 0;
 8004304:	4905      	ldr	r1, [pc, #20]	; (800431c <tracer_set_target_zero+0x38>)
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8004312:	bf00      	nop
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	200008d0 	.word	0x200008d0

08004320 <tracer_read_gain_kp>:

double tracer_read_gain_kp(unsigned short int i)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KP_MAX - TRACER_KP_MIN) / (double) (TRACER_STEP_SIZE - 1);
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	f1c3 030f 	rsb	r3, r3, #15
 8004330:	4618      	mov	r0, r3
 8004332:	f7fc f8f7 	bl	8000524 <__aeabi_i2d>
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	f7fc f95b 	bl	80005f8 <__aeabi_dmul>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4610      	mov	r0, r2
 8004348:	4619      	mov	r1, r3
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <tracer_read_gain_kp+0x58>)
 8004350:	f7fc fa7c 	bl	800084c <__aeabi_ddiv>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	f04f 0000 	mov.w	r0, #0
 800435c:	4907      	ldr	r1, [pc, #28]	; (800437c <tracer_read_gain_kp+0x5c>)
 800435e:	f7fb ff93 	bl	8000288 <__aeabi_dsub>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	ec43 2b17 	vmov	d7, r2, r3
}
 800436a:	eeb0 0a47 	vmov.f32	s0, s14
 800436e:	eef0 0a67 	vmov.f32	s1, s15
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	402e0000 	.word	0x402e0000
 800437c:	40080000 	.word	0x40080000

08004380 <tracer_read_gain_ki>:

double tracer_read_gain_ki(unsigned short int i)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KI_MAX - TRACER_KI_MIN) / (double) (TRACER_STEP_SIZE - 1);
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	f1c3 030f 	rsb	r3, r3, #15
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc f8c7 	bl	8000524 <__aeabi_i2d>
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	f7fc f92b 	bl	80005f8 <__aeabi_dmul>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <tracer_read_gain_ki+0x5c>)
 80043b0:	f7fc fa4c 	bl	800084c <__aeabi_ddiv>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	f04f 0000 	mov.w	r0, #0
 80043bc:	f04f 0100 	mov.w	r1, #0
 80043c0:	f7fb ff62 	bl	8000288 <__aeabi_dsub>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80043cc:	eeb0 0a47 	vmov.f32	s0, s14
 80043d0:	eef0 0a67 	vmov.f32	s1, s15
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	402e0000 	.word	0x402e0000

080043e0 <tracer_read_gain_kd>:

double tracer_read_gain_kd(unsigned short int i)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KD_MAX - TRACER_KD_MIN) / (double) (TRACER_STEP_SIZE - 1);
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	f1c3 030f 	rsb	r3, r3, #15
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fc f897 	bl	8000524 <__aeabi_i2d>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	f7fb ff47 	bl	800028c <__adddf3>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <tracer_read_gain_kd+0x58>)
 800440c:	f7fc fa1e 	bl	800084c <__aeabi_ddiv>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800441c:	f7fb ff34 	bl	8000288 <__aeabi_dsub>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	ec43 2b17 	vmov	d7, r2, r3
}
 8004428:	eeb0 0a47 	vmov.f32	s0, s14
 800442c:	eef0 0a67 	vmov.f32	s1, s15
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	402e0000 	.word	0x402e0000

0800443c <tracer_set_gain>:

void tracer_set_gain(unsigned short int i)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	80fb      	strh	r3, [r7, #6]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_set_gain() > ");
    #endif
    tracer_pid.kp = tracer_read_gain_kp(i);
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ff69 	bl	8004320 <tracer_read_gain_kp>
 800444e:	eeb0 7a40 	vmov.f32	s14, s0
 8004452:	eef0 7a60 	vmov.f32	s15, s1
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <tracer_set_gain+0x54>)
 8004458:	ed83 7b02 	vstr	d7, [r3, #8]
    tracer_pid.ki = tracer_read_gain_ki(i);
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff ff8e 	bl	8004380 <tracer_read_gain_ki>
 8004464:	eeb0 7a40 	vmov.f32	s14, s0
 8004468:	eef0 7a60 	vmov.f32	s15, s1
 800446c:	4b08      	ldr	r3, [pc, #32]	; (8004490 <tracer_set_gain+0x54>)
 800446e:	ed83 7b04 	vstr	d7, [r3, #16]
    tracer_pid.kd = tracer_read_gain_kd(i);
 8004472:	88fb      	ldrh	r3, [r7, #6]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff ffb3 	bl	80043e0 <tracer_read_gain_kd>
 800447a:	eeb0 7a40 	vmov.f32	s14, s0
 800447e:	eef0 7a60 	vmov.f32	s15, s1
 8004482:	4b03      	ldr	r3, [pc, #12]	; (8004490 <tracer_set_gain+0x54>)
 8004484:	ed83 7b06 	vstr	d7, [r3, #24]
    #if D_TRACER
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
    #endif
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	200008d0 	.word	0x200008d0

08004494 <tracer_set_target>:

void tracer_set_target(double target_)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	ed87 0b00 	vstr	d0, [r7]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_set_target() > ");
    #endif
    tracer_pid.target = target_;
 800449e:	4905      	ldr	r1, [pc, #20]	; (80044b4 <tracer_set_target+0x20>)
 80044a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a4:	e9c1 2300 	strd	r2, r3, [r1]
    #if D_TRACER
    printf("target_ = %5.2f, target = %5.2f\r\n", target_, tracer_pid.target);
    #endif
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	200008d0 	.word	0x200008d0

080044b8 <tracer_solve>:

double tracer_solve(int reference_)
{
 80044b8:	b5b0      	push	{r4, r5, r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("reference_ = %5d\r\n", reference_);
    #endif

    error = reference_;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	61fb      	str	r3, [r7, #28]

    d_error = (error - tracer_before_error) / (double) tracer_samplingtime;
 80044c4:	4b33      	ldr	r3, [pc, #204]	; (8004594 <tracer_solve+0xdc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69fa      	ldr	r2, [r7, #28]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fc f829 	bl	8000524 <__aeabi_i2d>
 80044d2:	4b31      	ldr	r3, [pc, #196]	; (8004598 <tracer_solve+0xe0>)
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f7fc f9b8 	bl	800084c <__aeabi_ddiv>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    tracer_s_error += error * (double) tracer_samplingtime;
 80044e4:	69f8      	ldr	r0, [r7, #28]
 80044e6:	f7fc f81d 	bl	8000524 <__aeabi_i2d>
 80044ea:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <tracer_solve+0xe0>)
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	f7fc f882 	bl	80005f8 <__aeabi_dmul>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4610      	mov	r0, r2
 80044fa:	4619      	mov	r1, r3
 80044fc:	4b27      	ldr	r3, [pc, #156]	; (800459c <tracer_solve+0xe4>)
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	f7fb fec3 	bl	800028c <__adddf3>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4924      	ldr	r1, [pc, #144]	; (800459c <tracer_solve+0xe4>)
 800450c:	e9c1 2300 	strd	r2, r3, [r1]

    result = tracer_pid.kp * error + tracer_pid.ki * tracer_s_error + tracer_pid.kd * d_error;
 8004510:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <tracer_solve+0xe8>)
 8004512:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004516:	69f8      	ldr	r0, [r7, #28]
 8004518:	f7fc f804 	bl	8000524 <__aeabi_i2d>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4620      	mov	r0, r4
 8004522:	4629      	mov	r1, r5
 8004524:	f7fc f868 	bl	80005f8 <__aeabi_dmul>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4614      	mov	r4, r2
 800452e:	461d      	mov	r5, r3
 8004530:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <tracer_solve+0xe8>)
 8004532:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004536:	4b19      	ldr	r3, [pc, #100]	; (800459c <tracer_solve+0xe4>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f7fc f85c 	bl	80005f8 <__aeabi_dmul>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4620      	mov	r0, r4
 8004546:	4629      	mov	r1, r5
 8004548:	f7fb fea0 	bl	800028c <__adddf3>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4614      	mov	r4, r2
 8004552:	461d      	mov	r5, r3
 8004554:	4b12      	ldr	r3, [pc, #72]	; (80045a0 <tracer_solve+0xe8>)
 8004556:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800455a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800455e:	f7fc f84b 	bl	80005f8 <__aeabi_dmul>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4620      	mov	r0, r4
 8004568:	4629      	mov	r1, r5
 800456a:	f7fb fe8f 	bl	800028c <__adddf3>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	e9c7 2302 	strd	r2, r3, [r7, #8]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("%7.2f = %7.2f * %5d + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, tracer_pid.kp, error, tracer_pid.ki, tracer_s_error, tracer_pid.kd, d_error);
    #endif

    tracer_before_error = error;
 8004576:	4a07      	ldr	r2, [pc, #28]	; (8004594 <tracer_solve+0xdc>)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	6013      	str	r3, [r2, #0]

    return result;
 800457c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004580:	ec43 2b17 	vmov	d7, r2, r3
}
 8004584:	eeb0 0a47 	vmov.f32	s0, s14
 8004588:	eef0 0a67 	vmov.f32	s1, s15
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bdb0      	pop	{r4, r5, r7, pc}
 8004592:	bf00      	nop
 8004594:	200008f8 	.word	0x200008f8
 8004598:	200008f0 	.word	0x200008f0
 800459c:	20000900 	.word	0x20000900
 80045a0:	200008d0 	.word	0x200008d0

080045a4 <tracer_print_values>:
    printf("tracer.c > tracer_d_print() > target = %5d, kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", 0, tracer_read_gain_kp(0), tracer_read_gain_ki(0), tracer_read_gain_kd(0));
    printf("tracer.c > tracer_d_print() > tracer_before_error = %5d, tracer_s_error = %7.2f\r\n", tracer_before_error, tracer_s_error);
}

void tracer_print_values()
{
 80045a4:	b5b0      	push	{r4, r5, r7, lr}
 80045a6:	ed2d 8b02 	vpush	{d8}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af04      	add	r7, sp, #16
	printf("Tracer\r\n");
 80045ae:	4819      	ldr	r0, [pc, #100]	; (8004614 <tracer_print_values+0x70>)
 80045b0:	f006 f838 	bl	800a624 <puts>
	printf("target = 0\r\n");
 80045b4:	4818      	ldr	r0, [pc, #96]	; (8004618 <tracer_print_values+0x74>)
 80045b6:	f006 f835 	bl	800a624 <puts>
	printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", tracer_read_gain_kp(rotary_read_value()), tracer_read_gain_ki(rotary_read_value()), tracer_read_gain_kd(rotary_read_value()));
 80045ba:	f7fc feb5 	bl	8001328 <rotary_read_value>
 80045be:	4603      	mov	r3, r0
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff feac 	bl	8004320 <tracer_read_gain_kp>
 80045c8:	ec55 4b10 	vmov	r4, r5, d0
 80045cc:	f7fc feac 	bl	8001328 <rotary_read_value>
 80045d0:	4603      	mov	r3, r0
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fed3 	bl	8004380 <tracer_read_gain_ki>
 80045da:	eeb0 8a40 	vmov.f32	s16, s0
 80045de:	eef0 8a60 	vmov.f32	s17, s1
 80045e2:	f7fc fea1 	bl	8001328 <rotary_read_value>
 80045e6:	4603      	mov	r3, r0
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fef8 	bl	80043e0 <tracer_read_gain_kd>
 80045f0:	eeb0 7a40 	vmov.f32	s14, s0
 80045f4:	eef0 7a60 	vmov.f32	s15, s1
 80045f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80045fc:	ed8d 8b00 	vstr	d8, [sp]
 8004600:	4622      	mov	r2, r4
 8004602:	462b      	mov	r3, r5
 8004604:	4805      	ldr	r0, [pc, #20]	; (800461c <tracer_print_values+0x78>)
 8004606:	f005 ff87 	bl	800a518 <iprintf>
}
 800460a:	bf00      	nop
 800460c:	46bd      	mov	sp, r7
 800460e:	ecbd 8b02 	vpop	{d8}
 8004612:	bdb0      	pop	{r4, r5, r7, pc}
 8004614:	0800e750 	.word	0x0800e750
 8004618:	0800e758 	.word	0x0800e758
 800461c:	0800e764 	.word	0x0800e764

08004620 <velotrace_init>:
double velotrace_samplingtime;

PID velotrace_pid;

void velotrace_init(double samplingtime_)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	ed87 0b00 	vstr	d0, [r7]
    velotrace_samplingtime = samplingtime_;
 800462a:	4905      	ldr	r1, [pc, #20]	; (8004640 <velotrace_init+0x20>)
 800462c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004630:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	20000910 	.word	0x20000910

08004644 <velotrace_start>:

void velotrace_start()
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
    #if D_VELOTRACE
    printf("velotrace_samplingtime = 1, velotrace_s_error = 0, velotrace_before_error = 0\r\n");
    #endif
    velotrace_s_error = 0;
 8004648:	491f      	ldr	r1, [pc, #124]	; (80046c8 <velotrace_start+0x84>)
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	e9c1 2300 	strd	r2, r3, [r1]
    velotrace_before_error = 0;
 8004656:	491d      	ldr	r1, [pc, #116]	; (80046cc <velotrace_start+0x88>)
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9c1 2300 	strd	r2, r3, [r1]
    switch(rotary_read_playmode())
 8004664:	f7fc fe48 	bl	80012f8 <rotary_read_playmode>
 8004668:	4603      	mov	r3, r0
 800466a:	2b06      	cmp	r3, #6
 800466c:	d00d      	beq.n	800468a <velotrace_start+0x46>
 800466e:	2b06      	cmp	r3, #6
 8004670:	dc19      	bgt.n	80046a6 <velotrace_start+0x62>
 8004672:	2b01      	cmp	r3, #1
 8004674:	d002      	beq.n	800467c <velotrace_start+0x38>
 8004676:	2b05      	cmp	r3, #5
 8004678:	d011      	beq.n	800469e <velotrace_start+0x5a>
 800467a:	e014      	b.n	80046a6 <velotrace_start+0x62>
    {
        case search:
            velotrace_set_gain(0);
 800467c:	2000      	movs	r0, #0
 800467e:	f000 f8ef 	bl	8004860 <velotrace_set_gain>
            velotrace_set_target(0);
 8004682:	2000      	movs	r0, #0
 8004684:	f000 f918 	bl	80048b8 <velotrace_set_target>
            break;
 8004688:	e01c      	b.n	80046c4 <velotrace_start+0x80>
        case velotrace_tuning:
            velotrace_set_target_zero();
 800468a:	f000 f949 	bl	8004920 <velotrace_set_target_zero>
            velotrace_set_gain(rotary_read_value());
 800468e:	f7fc fe4b 	bl	8001328 <rotary_read_value>
 8004692:	4603      	mov	r3, r0
 8004694:	b29b      	uxth	r3, r3
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f8e2 	bl	8004860 <velotrace_set_gain>
            break;
 800469c:	e012      	b.n	80046c4 <velotrace_start+0x80>
        case tracer_tuning:
            velotrace_set_target_zero();
 800469e:	f000 f93f 	bl	8004920 <velotrace_set_target_zero>
            velotrace_set_gain_zero();
 80046a2:	f000 f91f 	bl	80048e4 <velotrace_set_gain_zero>
        default:
            velotrace_set_gain(rotary_read_value());
 80046a6:	f7fc fe3f 	bl	8001328 <rotary_read_value>
 80046aa:	4603      	mov	r3, r0
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f8d6 	bl	8004860 <velotrace_set_gain>
            velotrace_set_target(rotary_read_value());
 80046b4:	f7fc fe38 	bl	8001328 <rotary_read_value>
 80046b8:	4603      	mov	r3, r0
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f8fb 	bl	80048b8 <velotrace_set_target>
            break;
 80046c2:	bf00      	nop
    }
}
 80046c4:	bf00      	nop
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000918 	.word	0x20000918
 80046cc:	20000908 	.word	0x20000908

080046d0 <velotrace_stop>:

void velotrace_stop()
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
    velotrace_set_target_zero();
 80046d4:	f000 f924 	bl	8004920 <velotrace_set_target_zero>
    velotrace_set_gain_zero();
 80046d8:	f000 f904 	bl	80048e4 <velotrace_set_gain_zero>
}
 80046dc:	bf00      	nop
 80046de:	bd80      	pop	{r7, pc}

080046e0 <velotrace_read_target>:

double velotrace_read_target(unsigned short int i)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	f1c3 030f 	rsb	r3, r3, #15
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fb ff17 	bl	8000524 <__aeabi_i2d>
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	f7fb ff7b 	bl	80005f8 <__aeabi_dmul>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4610      	mov	r0, r2
 8004708:	4619      	mov	r1, r3
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <velotrace_read_target+0x58>)
 8004710:	f7fc f89c 	bl	800084c <__aeabi_ddiv>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	f04f 0000 	mov.w	r0, #0
 800471c:	4907      	ldr	r1, [pc, #28]	; (800473c <velotrace_read_target+0x5c>)
 800471e:	f7fb fdb3 	bl	8000288 <__aeabi_dsub>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	ec43 2b17 	vmov	d7, r2, r3
}
 800472a:	eeb0 0a47 	vmov.f32	s0, s14
 800472e:	eef0 0a67 	vmov.f32	s1, s15
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	402e0000 	.word	0x402e0000
 800473c:	3ff00000 	.word	0x3ff00000

08004740 <velotrace_read_gain_kp>:

double velotrace_read_gain_kp(unsigned short int i)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 800474a:	88fb      	ldrh	r3, [r7, #6]
 800474c:	f1c3 030f 	rsb	r3, r3, #15
 8004750:	4618      	mov	r0, r3
 8004752:	f7fb fee7 	bl	8000524 <__aeabi_i2d>
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	f7fb ff4b 	bl	80005f8 <__aeabi_dmul>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <velotrace_read_gain_kp+0x58>)
 8004770:	f7fc f86c 	bl	800084c <__aeabi_ddiv>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	4907      	ldr	r1, [pc, #28]	; (800479c <velotrace_read_gain_kp+0x5c>)
 800477e:	f7fb fd83 	bl	8000288 <__aeabi_dsub>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	ec43 2b17 	vmov	d7, r2, r3
}
 800478a:	eeb0 0a47 	vmov.f32	s0, s14
 800478e:	eef0 0a67 	vmov.f32	s1, s15
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	402e0000 	.word	0x402e0000
 800479c:	408f4000 	.word	0x408f4000

080047a0 <velotrace_read_gain_ki>:

double velotrace_read_gain_ki(unsigned short int i)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	f1c3 030f 	rsb	r3, r3, #15
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fb feb7 	bl	8000524 <__aeabi_i2d>
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	f7fb ff1b 	bl	80005f8 <__aeabi_dmul>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4610      	mov	r0, r2
 80047c8:	4619      	mov	r1, r3
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <velotrace_read_gain_ki+0x58>)
 80047d0:	f7fc f83c 	bl	800084c <__aeabi_ddiv>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	f04f 0000 	mov.w	r0, #0
 80047dc:	4907      	ldr	r1, [pc, #28]	; (80047fc <velotrace_read_gain_ki+0x5c>)
 80047de:	f7fb fd53 	bl	8000288 <__aeabi_dsub>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80047ea:	eeb0 0a47 	vmov.f32	s0, s14
 80047ee:	eef0 0a67 	vmov.f32	s1, s15
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	402e0000 	.word	0x402e0000
 80047fc:	40590000 	.word	0x40590000

08004800 <velotrace_read_gain_kd>:

double velotrace_read_gain_kd(unsigned short int i)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	f1c3 030f 	rsb	r3, r3, #15
 8004810:	4618      	mov	r0, r3
 8004812:	f7fb fe87 	bl	8000524 <__aeabi_i2d>
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	f7fb feeb 	bl	80005f8 <__aeabi_dmul>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4610      	mov	r0, r2
 8004828:	4619      	mov	r1, r3
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	4b0b      	ldr	r3, [pc, #44]	; (800485c <velotrace_read_gain_kd+0x5c>)
 8004830:	f7fc f80c 	bl	800084c <__aeabi_ddiv>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	f04f 0000 	mov.w	r0, #0
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	f7fb fd22 	bl	8000288 <__aeabi_dsub>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	ec43 2b17 	vmov	d7, r2, r3
}
 800484c:	eeb0 0a47 	vmov.f32	s0, s14
 8004850:	eef0 0a67 	vmov.f32	s1, s15
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	402e0000 	.word	0x402e0000

08004860 <velotrace_set_gain>:

void velotrace_set_gain(unsigned short int i)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	80fb      	strh	r3, [r7, #6]
    #if D_VELOTRACE
    printf("velotrace_pid = velotrace_read_gain\r\n");
    #endif
    velotrace_pid.kp = velotrace_read_gain_kp(i);
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff ff67 	bl	8004740 <velotrace_read_gain_kp>
 8004872:	eeb0 7a40 	vmov.f32	s14, s0
 8004876:	eef0 7a60 	vmov.f32	s15, s1
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <velotrace_set_gain+0x54>)
 800487c:	ed83 7b02 	vstr	d7, [r3, #8]
    velotrace_pid.ki = velotrace_read_gain_ki(i);
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ff8c 	bl	80047a0 <velotrace_read_gain_ki>
 8004888:	eeb0 7a40 	vmov.f32	s14, s0
 800488c:	eef0 7a60 	vmov.f32	s15, s1
 8004890:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <velotrace_set_gain+0x54>)
 8004892:	ed83 7b04 	vstr	d7, [r3, #16]
    velotrace_pid.kd = velotrace_read_gain_kd(i);
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ffb1 	bl	8004800 <velotrace_read_gain_kd>
 800489e:	eeb0 7a40 	vmov.f32	s14, s0
 80048a2:	eef0 7a60 	vmov.f32	s15, s1
 80048a6:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <velotrace_set_gain+0x54>)
 80048a8:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000920 	.word	0x20000920

080048b8 <velotrace_set_target>:

void velotrace_set_target(unsigned short int i)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	80fb      	strh	r3, [r7, #6]
    #if D_VELOTRACE
    printf("velotrace_pid = velotrace_read_target\r\n");
    #endif
    velotrace_pid.target = velotrace_read_target(i);
 80048c2:	88fb      	ldrh	r3, [r7, #6]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff ff0b 	bl	80046e0 <velotrace_read_target>
 80048ca:	eeb0 7a40 	vmov.f32	s14, s0
 80048ce:	eef0 7a60 	vmov.f32	s15, s1
 80048d2:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <velotrace_set_target+0x28>)
 80048d4:	ed83 7b00 	vstr	d7, [r3]
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000920 	.word	0x20000920

080048e4 <velotrace_set_gain_zero>:

void velotrace_set_gain_zero()
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
    velotrace_pid.kp = 0;
 80048e8:	490c      	ldr	r1, [pc, #48]	; (800491c <velotrace_set_gain_zero+0x38>)
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    velotrace_pid.ki = 0;
 80048f6:	4909      	ldr	r1, [pc, #36]	; (800491c <velotrace_set_gain_zero+0x38>)
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	e9c1 2304 	strd	r2, r3, [r1, #16]
    velotrace_pid.kd = 0;
 8004904:	4905      	ldr	r1, [pc, #20]	; (800491c <velotrace_set_gain_zero+0x38>)
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8004912:	bf00      	nop
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	20000920 	.word	0x20000920

08004920 <velotrace_set_target_zero>:

void velotrace_set_target_zero()
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
    velotrace_pid.target = 0;
 8004924:	4905      	ldr	r1, [pc, #20]	; (800493c <velotrace_set_target_zero+0x1c>)
 8004926:	f04f 0200 	mov.w	r2, #0
 800492a:	f04f 0300 	mov.w	r3, #0
 800492e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004932:	bf00      	nop
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	20000920 	.word	0x20000920

08004940 <velotrace_solve>:

double velotrace_solve(double reference_)
{
 8004940:	b5b0      	push	{r4, r5, r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	ed87 0b00 	vstr	d0, [r7]
    double error;
    double d_error;
    double result;

    error = reference_ - velotrace_pid.target;
 800494a:	4b3a      	ldr	r3, [pc, #232]	; (8004a34 <velotrace_solve+0xf4>)
 800494c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004950:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004954:	f7fb fc98 	bl	8000288 <__aeabi_dsub>
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    d_error = (error - velotrace_before_error) / (double) velotrace_samplingtime;
 8004960:	4b35      	ldr	r3, [pc, #212]	; (8004a38 <velotrace_solve+0xf8>)
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800496a:	f7fb fc8d 	bl	8000288 <__aeabi_dsub>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	4b31      	ldr	r3, [pc, #196]	; (8004a3c <velotrace_solve+0xfc>)
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f7fb ff66 	bl	800084c <__aeabi_ddiv>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	e9c7 2304 	strd	r2, r3, [r7, #16]
    velotrace_s_error += error * (double) velotrace_samplingtime;
 8004988:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <velotrace_solve+0xfc>)
 800498a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800498e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004992:	f7fb fe31 	bl	80005f8 <__aeabi_dmul>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <velotrace_solve+0x100>)
 80049a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a4:	f7fb fc72 	bl	800028c <__adddf3>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4924      	ldr	r1, [pc, #144]	; (8004a40 <velotrace_solve+0x100>)
 80049ae:	e9c1 2300 	strd	r2, r3, [r1]

    result = - (velotrace_pid.kp * error + velotrace_pid.ki * velotrace_s_error + velotrace_pid.kd * d_error);
 80049b2:	4b20      	ldr	r3, [pc, #128]	; (8004a34 <velotrace_solve+0xf4>)
 80049b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80049b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049bc:	f7fb fe1c 	bl	80005f8 <__aeabi_dmul>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4614      	mov	r4, r2
 80049c6:	461d      	mov	r5, r3
 80049c8:	4b1a      	ldr	r3, [pc, #104]	; (8004a34 <velotrace_solve+0xf4>)
 80049ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80049ce:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <velotrace_solve+0x100>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb fe10 	bl	80005f8 <__aeabi_dmul>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4620      	mov	r0, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	f7fb fc54 	bl	800028c <__adddf3>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4614      	mov	r4, r2
 80049ea:	461d      	mov	r5, r3
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <velotrace_solve+0xf4>)
 80049ee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80049f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049f6:	f7fb fdff 	bl	80005f8 <__aeabi_dmul>
 80049fa:	4602      	mov	r2, r0
 80049fc:	460b      	mov	r3, r1
 80049fe:	4620      	mov	r0, r4
 8004a00:	4629      	mov	r1, r5
 8004a02:	f7fb fc43 	bl	800028c <__adddf3>
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004a12:	60fb      	str	r3, [r7, #12]
    printf("velotrace_solve()\r\n");
    printf("reference_ - velotrace_pid.target = %7.2f - %7.2f = %7.2f\r\n", reference_, velotrace_pid.target, reference_ - velotrace_pid.target);
    printf("%7.2f = %7.2f * %7.2f + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, velotrace_pid.kp, error, velotrace_pid.ki, velotrace_s_error, velotrace_pid.kd, d_error);
    #endif

    velotrace_before_error = error;
 8004a14:	4908      	ldr	r1, [pc, #32]	; (8004a38 <velotrace_solve+0xf8>)
 8004a16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a1a:	e9c1 2300 	strd	r2, r3, [r1]

    return result;
 8004a1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a22:	ec43 2b17 	vmov	d7, r2, r3
}
 8004a26:	eeb0 0a47 	vmov.f32	s0, s14
 8004a2a:	eef0 0a67 	vmov.f32	s1, s15
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bdb0      	pop	{r4, r5, r7, pc}
 8004a34:	20000920 	.word	0x20000920
 8004a38:	20000908 	.word	0x20000908
 8004a3c:	20000910 	.word	0x20000910
 8004a40:	20000918 	.word	0x20000918

08004a44 <velotrace_print_values>:

void velotrace_print_values()
{
 8004a44:	b5b0      	push	{r4, r5, r7, lr}
 8004a46:	ed2d 8b02 	vpush	{d8}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af04      	add	r7, sp, #16
	printf("Velotrace\r\n");
 8004a4e:	481e      	ldr	r0, [pc, #120]	; (8004ac8 <velotrace_print_values+0x84>)
 8004a50:	f005 fde8 	bl	800a624 <puts>
	printf("target = %5.3f\r\n", velotrace_read_target(rotary_read_value()));
 8004a54:	f7fc fc68 	bl	8001328 <rotary_read_value>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fe3f 	bl	80046e0 <velotrace_read_target>
 8004a62:	ec53 2b10 	vmov	r2, r3, d0
 8004a66:	4819      	ldr	r0, [pc, #100]	; (8004acc <velotrace_print_values+0x88>)
 8004a68:	f005 fd56 	bl	800a518 <iprintf>
	printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_read_gain_kp(rotary_read_value()), velotrace_read_gain_ki(rotary_read_value()), velotrace_read_gain_kd(rotary_read_value()));
 8004a6c:	f7fc fc5c 	bl	8001328 <rotary_read_value>
 8004a70:	4603      	mov	r3, r0
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff fe63 	bl	8004740 <velotrace_read_gain_kp>
 8004a7a:	ec55 4b10 	vmov	r4, r5, d0
 8004a7e:	f7fc fc53 	bl	8001328 <rotary_read_value>
 8004a82:	4603      	mov	r3, r0
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff fe8a 	bl	80047a0 <velotrace_read_gain_ki>
 8004a8c:	eeb0 8a40 	vmov.f32	s16, s0
 8004a90:	eef0 8a60 	vmov.f32	s17, s1
 8004a94:	f7fc fc48 	bl	8001328 <rotary_read_value>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff feaf 	bl	8004800 <velotrace_read_gain_kd>
 8004aa2:	eeb0 7a40 	vmov.f32	s14, s0
 8004aa6:	eef0 7a60 	vmov.f32	s15, s1
 8004aaa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004aae:	ed8d 8b00 	vstr	d8, [sp]
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	4806      	ldr	r0, [pc, #24]	; (8004ad0 <velotrace_print_values+0x8c>)
 8004ab8:	f005 fd2e 	bl	800a518 <iprintf>
}
 8004abc:	bf00      	nop
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	ecbd 8b02 	vpop	{d8}
 8004ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	0800e78c 	.word	0x0800e78c
 8004acc:	0800e798 	.word	0x0800e798
 8004ad0:	0800e7ac 	.word	0x0800e7ac

08004ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ada:	e003      	b.n	8004ae4 <LoopCopyDataInit>

08004adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ae2:	3104      	adds	r1, #4

08004ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ae4:	480b      	ldr	r0, [pc, #44]	; (8004b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004ae6:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004aec:	d3f6      	bcc.n	8004adc <CopyDataInit>
  ldr  r2, =_sbss
 8004aee:	4a0b      	ldr	r2, [pc, #44]	; (8004b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004af0:	e002      	b.n	8004af8 <LoopFillZerobss>

08004af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004af4:	f842 3b04 	str.w	r3, [r2], #4

08004af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004afc:	d3f9      	bcc.n	8004af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004afe:	f7fe fff3 	bl	8003ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b02:	f004 fe55 	bl	80097b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b06:	f7fd fae7 	bl	80020d8 <main>
  bx  lr    
 8004b0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b0c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004b10:	0800ecbc 	.word	0x0800ecbc
  ldr  r0, =_sdata
 8004b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b18:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8004b1c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8004b20:	20000974 	.word	0x20000974

08004b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b24:	e7fe      	b.n	8004b24 <ADC_IRQHandler>
	...

08004b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b2c:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <HAL_Init+0x40>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <HAL_Init+0x40>)
 8004b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_Init+0x40>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a0a      	ldr	r2, [pc, #40]	; (8004b68 <HAL_Init+0x40>)
 8004b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <HAL_Init+0x40>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a07      	ldr	r2, [pc, #28]	; (8004b68 <HAL_Init+0x40>)
 8004b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b50:	2003      	movs	r0, #3
 8004b52:	f000 fdb1 	bl	80056b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b56:	2000      	movs	r0, #0
 8004b58:	f000 f808 	bl	8004b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b5c:	f7fe fb76 	bl	800324c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40023c00 	.word	0x40023c00

08004b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b74:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_InitTick+0x54>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_InitTick+0x58>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fdc9 	bl	8005722 <HAL_SYSTICK_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e00e      	b.n	8004bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b0f      	cmp	r3, #15
 8004b9e:	d80a      	bhi.n	8004bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba8:	f000 fd91 	bl	80056ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bac:	4a06      	ldr	r2, [pc, #24]	; (8004bc8 <HAL_InitTick+0x5c>)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e000      	b.n	8004bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000000 	.word	0x20000000
 8004bc4:	20000008 	.word	0x20000008
 8004bc8:	20000004 	.word	0x20000004

08004bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bd0:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_IncTick+0x20>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <HAL_IncTick+0x24>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4413      	add	r3, r2
 8004bdc:	4a04      	ldr	r2, [pc, #16]	; (8004bf0 <HAL_IncTick+0x24>)
 8004bde:	6013      	str	r3, [r2, #0]
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	20000008 	.word	0x20000008
 8004bf0:	20000940 	.word	0x20000940

08004bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <HAL_GetTick+0x14>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000940 	.word	0x20000940

08004c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c14:	f7ff ffee 	bl	8004bf4 <HAL_GetTick>
 8004c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d005      	beq.n	8004c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c26:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <HAL_Delay+0x44>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c32:	bf00      	nop
 8004c34:	f7ff ffde 	bl	8004bf4 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d8f7      	bhi.n	8004c34 <HAL_Delay+0x28>
  {
  }
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000008 	.word	0x20000008

08004c54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e033      	b.n	8004cd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fe fb16 	bl	80032a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d118      	bne.n	8004cc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c9a:	f023 0302 	bic.w	r3, r3, #2
 8004c9e:	f043 0202 	orr.w	r2, r3, #2
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fab8 	bl	800521c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f023 0303 	bic.w	r3, r3, #3
 8004cba:	f043 0201 	orr.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40
 8004cc2:	e001      	b.n	8004cc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d101      	bne.n	8004cfa <HAL_ADC_Start_DMA+0x1e>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e0e9      	b.n	8004ece <HAL_ADC_Start_DMA+0x1f2>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d018      	beq.n	8004d42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d20:	4b6d      	ldr	r3, [pc, #436]	; (8004ed8 <HAL_ADC_Start_DMA+0x1fc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6d      	ldr	r2, [pc, #436]	; (8004edc <HAL_ADC_Start_DMA+0x200>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0c9a      	lsrs	r2, r3, #18
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	4413      	add	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004d34:	e002      	b.n	8004d3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f9      	bne.n	8004d36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d50:	d107      	bne.n	8004d62 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d60:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	f040 80a1 	bne.w	8004eb4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db0:	d106      	bne.n	8004dc0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	f023 0206 	bic.w	r2, r3, #6
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
 8004dbe:	e002      	b.n	8004dc6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dce:	4b44      	ldr	r3, [pc, #272]	; (8004ee0 <HAL_ADC_Start_DMA+0x204>)
 8004dd0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	4a43      	ldr	r2, [pc, #268]	; (8004ee4 <HAL_ADC_Start_DMA+0x208>)
 8004dd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	4a42      	ldr	r2, [pc, #264]	; (8004ee8 <HAL_ADC_Start_DMA+0x20c>)
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	4a41      	ldr	r2, [pc, #260]	; (8004eec <HAL_ADC_Start_DMA+0x210>)
 8004de8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004df2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004e02:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e12:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	334c      	adds	r3, #76	; 0x4c
 8004e1e:	4619      	mov	r1, r3
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f000 fd38 	bl	8005898 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d12a      	bne.n	8004e8a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2d      	ldr	r2, [pc, #180]	; (8004ef0 <HAL_ADC_Start_DMA+0x214>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d015      	beq.n	8004e6a <HAL_ADC_Start_DMA+0x18e>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2c      	ldr	r2, [pc, #176]	; (8004ef4 <HAL_ADC_Start_DMA+0x218>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d105      	bne.n	8004e54 <HAL_ADC_Start_DMA+0x178>
 8004e48:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <HAL_ADC_Start_DMA+0x204>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 031f 	and.w	r3, r3, #31
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a27      	ldr	r2, [pc, #156]	; (8004ef8 <HAL_ADC_Start_DMA+0x21c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d136      	bne.n	8004ecc <HAL_ADC_Start_DMA+0x1f0>
 8004e5e:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <HAL_ADC_Start_DMA+0x204>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0310 	and.w	r3, r3, #16
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d130      	bne.n	8004ecc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d129      	bne.n	8004ecc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	e020      	b.n	8004ecc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a18      	ldr	r2, [pc, #96]	; (8004ef0 <HAL_ADC_Start_DMA+0x214>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d11b      	bne.n	8004ecc <HAL_ADC_Start_DMA+0x1f0>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d114      	bne.n	8004ecc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004eb0:	609a      	str	r2, [r3, #8]
 8004eb2:	e00b      	b.n	8004ecc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	f043 0210 	orr.w	r2, r3, #16
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	f043 0201 	orr.w	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20000000 	.word	0x20000000
 8004edc:	431bde83 	.word	0x431bde83
 8004ee0:	40012300 	.word	0x40012300
 8004ee4:	08005415 	.word	0x08005415
 8004ee8:	080054cf 	.word	0x080054cf
 8004eec:	080054eb 	.word	0x080054eb
 8004ef0:	40012000 	.word	0x40012000
 8004ef4:	40012100 	.word	0x40012100
 8004ef8:	40012200 	.word	0x40012200

08004efc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_ADC_Stop_DMA+0x1a>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e048      	b.n	8004fa8 <HAL_ADC_Stop_DMA+0xac>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d130      	bne.n	8004f9e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d10f      	bne.n	8004f7a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fcf2 	bl	8005948 <HAL_DMA_Abort>
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004f88:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	f043 0201 	orr.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x1c>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e105      	b.n	8005200 <HAL_ADC_ConfigChannel+0x228>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b09      	cmp	r3, #9
 8005002:	d925      	bls.n	8005050 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68d9      	ldr	r1, [r3, #12]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	4613      	mov	r3, r2
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	4413      	add	r3, r2
 8005018:	3b1e      	subs	r3, #30
 800501a:	2207      	movs	r2, #7
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43da      	mvns	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	400a      	ands	r2, r1
 8005028:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68d9      	ldr	r1, [r3, #12]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	4618      	mov	r0, r3
 800503c:	4603      	mov	r3, r0
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4403      	add	r3, r0
 8005042:	3b1e      	subs	r3, #30
 8005044:	409a      	lsls	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	e022      	b.n	8005096 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6919      	ldr	r1, [r3, #16]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	2207      	movs	r2, #7
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43da      	mvns	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	400a      	ands	r2, r1
 8005072:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6919      	ldr	r1, [r3, #16]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	4618      	mov	r0, r3
 8005086:	4603      	mov	r3, r0
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4403      	add	r3, r0
 800508c:	409a      	lsls	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b06      	cmp	r3, #6
 800509c:	d824      	bhi.n	80050e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	3b05      	subs	r3, #5
 80050b0:	221f      	movs	r2, #31
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43da      	mvns	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	400a      	ands	r2, r1
 80050be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	4618      	mov	r0, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	3b05      	subs	r3, #5
 80050da:	fa00 f203 	lsl.w	r2, r0, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	635a      	str	r2, [r3, #52]	; 0x34
 80050e6:	e04c      	b.n	8005182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b0c      	cmp	r3, #12
 80050ee:	d824      	bhi.n	800513a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	3b23      	subs	r3, #35	; 0x23
 8005102:	221f      	movs	r2, #31
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43da      	mvns	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	400a      	ands	r2, r1
 8005110:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	4618      	mov	r0, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685a      	ldr	r2, [r3, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	3b23      	subs	r3, #35	; 0x23
 800512c:	fa00 f203 	lsl.w	r2, r0, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	631a      	str	r2, [r3, #48]	; 0x30
 8005138:	e023      	b.n	8005182 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	3b41      	subs	r3, #65	; 0x41
 800514c:	221f      	movs	r2, #31
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43da      	mvns	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	400a      	ands	r2, r1
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	4618      	mov	r0, r3
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	3b41      	subs	r3, #65	; 0x41
 8005176:	fa00 f203 	lsl.w	r2, r0, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005182:	4b22      	ldr	r3, [pc, #136]	; (800520c <HAL_ADC_ConfigChannel+0x234>)
 8005184:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a21      	ldr	r2, [pc, #132]	; (8005210 <HAL_ADC_ConfigChannel+0x238>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d109      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x1cc>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b12      	cmp	r3, #18
 8005196:	d105      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a19      	ldr	r2, [pc, #100]	; (8005210 <HAL_ADC_ConfigChannel+0x238>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d123      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x21e>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d003      	beq.n	80051be <HAL_ADC_ConfigChannel+0x1e6>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b11      	cmp	r3, #17
 80051bc:	d11b      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d111      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <HAL_ADC_ConfigChannel+0x23c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a10      	ldr	r2, [pc, #64]	; (8005218 <HAL_ADC_ConfigChannel+0x240>)
 80051d8:	fba2 2303 	umull	r2, r3, r2, r3
 80051dc:	0c9a      	lsrs	r2, r3, #18
 80051de:	4613      	mov	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80051e8:	e002      	b.n	80051f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f9      	bne.n	80051ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40012300 	.word	0x40012300
 8005210:	40012000 	.word	0x40012000
 8005214:	20000000 	.word	0x20000000
 8005218:	431bde83 	.word	0x431bde83

0800521c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005224:	4b79      	ldr	r3, [pc, #484]	; (800540c <ADC_Init+0x1f0>)
 8005226:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	431a      	orrs	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005250:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6859      	ldr	r1, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	021a      	lsls	r2, r3, #8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6859      	ldr	r1, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6899      	ldr	r1, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	4a58      	ldr	r2, [pc, #352]	; (8005410 <ADC_Init+0x1f4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6899      	ldr	r1, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	e00f      	b.n	800531a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005318:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0202 	bic.w	r2, r2, #2
 8005328:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6899      	ldr	r1, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	7e1b      	ldrb	r3, [r3, #24]
 8005334:	005a      	lsls	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005356:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005366:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	3b01      	subs	r3, #1
 8005374:	035a      	lsls	r2, r3, #13
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	e007      	b.n	8005390 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800538e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800539e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	051a      	lsls	r2, r3, #20
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6899      	ldr	r1, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053d2:	025a      	lsls	r2, r3, #9
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6899      	ldr	r1, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	029a      	lsls	r2, r3, #10
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	40012300 	.word	0x40012300
 8005410:	0f000001 	.word	0x0f000001

08005414 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800542a:	2b00      	cmp	r3, #0
 800542c:	d13c      	bne.n	80054a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d12b      	bne.n	80054a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800544c:	2b00      	cmp	r3, #0
 800544e:	d127      	bne.n	80054a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005468:	2b00      	cmp	r3, #0
 800546a:	d119      	bne.n	80054a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0220 	bic.w	r2, r2, #32
 800547a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	f043 0201 	orr.w	r2, r3, #1
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7fc fbef 	bl	8001c84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054a6:	e00e      	b.n	80054c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	f003 0310 	and.w	r3, r3, #16
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff fd85 	bl	8004fc4 <HAL_ADC_ErrorCallback>
}
 80054ba:	e004      	b.n	80054c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	4798      	blx	r3
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff fd67 	bl	8004fb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80054e2:	bf00      	nop
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2240      	movs	r2, #64	; 0x40
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f043 0204 	orr.w	r2, r3, #4
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7ff fd5a 	bl	8004fc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005510:	bf00      	nop
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005528:	4b0c      	ldr	r3, [pc, #48]	; (800555c <__NVIC_SetPriorityGrouping+0x44>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005534:	4013      	ands	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800554a:	4a04      	ldr	r2, [pc, #16]	; (800555c <__NVIC_SetPriorityGrouping+0x44>)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	60d3      	str	r3, [r2, #12]
}
 8005550:	bf00      	nop
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005564:	4b04      	ldr	r3, [pc, #16]	; (8005578 <__NVIC_GetPriorityGrouping+0x18>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	0a1b      	lsrs	r3, r3, #8
 800556a:	f003 0307 	and.w	r3, r3, #7
}
 800556e:	4618      	mov	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	e000ed00 	.word	0xe000ed00

0800557c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558a:	2b00      	cmp	r3, #0
 800558c:	db0b      	blt.n	80055a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	f003 021f 	and.w	r2, r3, #31
 8005594:	4907      	ldr	r1, [pc, #28]	; (80055b4 <__NVIC_EnableIRQ+0x38>)
 8005596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2001      	movs	r0, #1
 800559e:	fa00 f202 	lsl.w	r2, r0, r2
 80055a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	e000e100 	.word	0xe000e100

080055b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	6039      	str	r1, [r7, #0]
 80055c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	db0a      	blt.n	80055e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	490c      	ldr	r1, [pc, #48]	; (8005604 <__NVIC_SetPriority+0x4c>)
 80055d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d6:	0112      	lsls	r2, r2, #4
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	440b      	add	r3, r1
 80055dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055e0:	e00a      	b.n	80055f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	4908      	ldr	r1, [pc, #32]	; (8005608 <__NVIC_SetPriority+0x50>)
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	3b04      	subs	r3, #4
 80055f0:	0112      	lsls	r2, r2, #4
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	440b      	add	r3, r1
 80055f6:	761a      	strb	r2, [r3, #24]
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	e000e100 	.word	0xe000e100
 8005608:	e000ed00 	.word	0xe000ed00

0800560c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800560c:	b480      	push	{r7}
 800560e:	b089      	sub	sp, #36	; 0x24
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f1c3 0307 	rsb	r3, r3, #7
 8005626:	2b04      	cmp	r3, #4
 8005628:	bf28      	it	cs
 800562a:	2304      	movcs	r3, #4
 800562c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	3304      	adds	r3, #4
 8005632:	2b06      	cmp	r3, #6
 8005634:	d902      	bls.n	800563c <NVIC_EncodePriority+0x30>
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	3b03      	subs	r3, #3
 800563a:	e000      	b.n	800563e <NVIC_EncodePriority+0x32>
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005640:	f04f 32ff 	mov.w	r2, #4294967295
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	43da      	mvns	r2, r3
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	401a      	ands	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005654:	f04f 31ff 	mov.w	r1, #4294967295
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	43d9      	mvns	r1, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005664:	4313      	orrs	r3, r2
         );
}
 8005666:	4618      	mov	r0, r3
 8005668:	3724      	adds	r7, #36	; 0x24
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3b01      	subs	r3, #1
 8005680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005684:	d301      	bcc.n	800568a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005686:	2301      	movs	r3, #1
 8005688:	e00f      	b.n	80056aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800568a:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <SysTick_Config+0x40>)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3b01      	subs	r3, #1
 8005690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005692:	210f      	movs	r1, #15
 8005694:	f04f 30ff 	mov.w	r0, #4294967295
 8005698:	f7ff ff8e 	bl	80055b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <SysTick_Config+0x40>)
 800569e:	2200      	movs	r2, #0
 80056a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056a2:	4b04      	ldr	r3, [pc, #16]	; (80056b4 <SysTick_Config+0x40>)
 80056a4:	2207      	movs	r2, #7
 80056a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	e000e010 	.word	0xe000e010

080056b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ff29 	bl	8005518 <__NVIC_SetPriorityGrouping>
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b086      	sub	sp, #24
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	4603      	mov	r3, r0
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056e0:	f7ff ff3e 	bl	8005560 <__NVIC_GetPriorityGrouping>
 80056e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68b9      	ldr	r1, [r7, #8]
 80056ea:	6978      	ldr	r0, [r7, #20]
 80056ec:	f7ff ff8e 	bl	800560c <NVIC_EncodePriority>
 80056f0:	4602      	mov	r2, r0
 80056f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f6:	4611      	mov	r1, r2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff ff5d 	bl	80055b8 <__NVIC_SetPriority>
}
 80056fe:	bf00      	nop
 8005700:	3718      	adds	r7, #24
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b082      	sub	sp, #8
 800570a:	af00      	add	r7, sp, #0
 800570c:	4603      	mov	r3, r0
 800570e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ff31 	bl	800557c <__NVIC_EnableIRQ>
}
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7ff ffa2 	bl	8005674 <SysTick_Config>
 8005730:	4603      	mov	r3, r0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005748:	f7ff fa54 	bl	8004bf4 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e099      	b.n	800588c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0201 	bic.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005778:	e00f      	b.n	800579a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800577a:	f7ff fa3b 	bl	8004bf4 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b05      	cmp	r3, #5
 8005786:	d908      	bls.n	800579a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2203      	movs	r2, #3
 8005792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e078      	b.n	800588c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e8      	bne.n	800577a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	4b38      	ldr	r3, [pc, #224]	; (8005894 <HAL_DMA_Init+0x158>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d107      	bne.n	8005804 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	4313      	orrs	r3, r2
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0307 	bic.w	r3, r3, #7
 800581a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	2b04      	cmp	r3, #4
 800582c:	d117      	bne.n	800585e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00e      	beq.n	800585e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fadf 	bl	8005e04 <DMA_CheckFifoParam>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2240      	movs	r2, #64	; 0x40
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800585a:	2301      	movs	r3, #1
 800585c:	e016      	b.n	800588c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fa96 	bl	8005d98 <DMA_CalcBaseAndBitshift>
 800586c:	4603      	mov	r3, r0
 800586e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005874:	223f      	movs	r2, #63	; 0x3f
 8005876:	409a      	lsls	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	f010803f 	.word	0xf010803f

08005898 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_DMA_Start_IT+0x26>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e040      	b.n	8005940 <HAL_DMA_Start_IT+0xa8>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d12f      	bne.n	8005932 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 fa28 	bl	8005d3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f0:	223f      	movs	r2, #63	; 0x3f
 80058f2:	409a      	lsls	r2, r3
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0216 	orr.w	r2, r2, #22
 8005906:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d007      	beq.n	8005920 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e005      	b.n	800593e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800593a:	2302      	movs	r3, #2
 800593c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800593e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005954:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005956:	f7ff f94d 	bl	8004bf4 <HAL_GetTick>
 800595a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005962:	b2db      	uxtb	r3, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d008      	beq.n	800597a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2280      	movs	r2, #128	; 0x80
 800596c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e052      	b.n	8005a20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0216 	bic.w	r2, r2, #22
 8005988:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005998:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <HAL_DMA_Abort+0x62>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0208 	bic.w	r2, r2, #8
 80059b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059ca:	e013      	b.n	80059f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059cc:	f7ff f912 	bl	8004bf4 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b05      	cmp	r3, #5
 80059d8:	d90c      	bls.n	80059f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2203      	movs	r2, #3
 80059e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e015      	b.n	8005a20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e4      	bne.n	80059cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a06:	223f      	movs	r2, #63	; 0x3f
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a34:	4b92      	ldr	r3, [pc, #584]	; (8005c80 <HAL_DMA_IRQHandler+0x258>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a92      	ldr	r2, [pc, #584]	; (8005c84 <HAL_DMA_IRQHandler+0x25c>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	0a9b      	lsrs	r3, r3, #10
 8005a40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a52:	2208      	movs	r2, #8
 8005a54:	409a      	lsls	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01a      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d013      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0204 	bic.w	r2, r2, #4
 8005a7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a80:	2208      	movs	r2, #8
 8005a82:	409a      	lsls	r2, r3
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8c:	f043 0201 	orr.w	r2, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a98:	2201      	movs	r2, #1
 8005a9a:	409a      	lsls	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d012      	beq.n	8005aca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00b      	beq.n	8005aca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	409a      	lsls	r2, r3
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	f043 0202 	orr.w	r2, r3, #2
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ace:	2204      	movs	r2, #4
 8005ad0:	409a      	lsls	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d012      	beq.n	8005b00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aec:	2204      	movs	r2, #4
 8005aee:	409a      	lsls	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af8:	f043 0204 	orr.w	r2, r3, #4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b04:	2210      	movs	r2, #16
 8005b06:	409a      	lsls	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d043      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d03c      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b22:	2210      	movs	r2, #16
 8005b24:	409a      	lsls	r2, r3
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d018      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d108      	bne.n	8005b58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d024      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
 8005b56:	e01f      	b.n	8005b98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d01b      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
 8005b68:	e016      	b.n	8005b98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d107      	bne.n	8005b88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0208 	bic.w	r2, r2, #8
 8005b86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	409a      	lsls	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 808e 	beq.w	8005cc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8086 	beq.w	8005cc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d136      	bne.n	8005c40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0216 	bic.w	r2, r2, #22
 8005be0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695a      	ldr	r2, [r3, #20]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d103      	bne.n	8005c02 <HAL_DMA_IRQHandler+0x1da>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0208 	bic.w	r2, r2, #8
 8005c10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c16:	223f      	movs	r2, #63	; 0x3f
 8005c18:	409a      	lsls	r2, r3
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d07d      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	4798      	blx	r3
        }
        return;
 8005c3e:	e078      	b.n	8005d32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01c      	beq.n	8005c88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d108      	bne.n	8005c6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d030      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
 8005c6c:	e02b      	b.n	8005cc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d027      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
 8005c7e:	e022      	b.n	8005cc6 <HAL_DMA_IRQHandler+0x29e>
 8005c80:	20000000 	.word	0x20000000
 8005c84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10f      	bne.n	8005cb6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0210 	bic.w	r2, r2, #16
 8005ca4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d032      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d022      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2205      	movs	r2, #5
 8005cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0201 	bic.w	r2, r2, #1
 8005cf0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d307      	bcc.n	8005d0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f2      	bne.n	8005cf2 <HAL_DMA_IRQHandler+0x2ca>
 8005d0c:	e000      	b.n	8005d10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005d0e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
 8005d30:	e000      	b.n	8005d34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005d32:	bf00      	nop
    }
  }
}
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop

08005d3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	683a      	ldr	r2, [r7, #0]
 8005d60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b40      	cmp	r3, #64	; 0x40
 8005d68:	d108      	bne.n	8005d7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005d7a:	e007      	b.n	8005d8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	60da      	str	r2, [r3, #12]
}
 8005d8c:	bf00      	nop
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	3b10      	subs	r3, #16
 8005da8:	4a14      	ldr	r2, [pc, #80]	; (8005dfc <DMA_CalcBaseAndBitshift+0x64>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	091b      	lsrs	r3, r3, #4
 8005db0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005db2:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <DMA_CalcBaseAndBitshift+0x68>)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d909      	bls.n	8005dda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	1d1a      	adds	r2, r3, #4
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	659a      	str	r2, [r3, #88]	; 0x58
 8005dd8:	e007      	b.n	8005dea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005de2:	f023 0303 	bic.w	r3, r3, #3
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	aaaaaaab 	.word	0xaaaaaaab
 8005e00:	0800e7ec 	.word	0x0800e7ec

08005e04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d11f      	bne.n	8005e5e <DMA_CheckFifoParam+0x5a>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d856      	bhi.n	8005ed2 <DMA_CheckFifoParam+0xce>
 8005e24:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <DMA_CheckFifoParam+0x28>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e3d 	.word	0x08005e3d
 8005e30:	08005e4f 	.word	0x08005e4f
 8005e34:	08005e3d 	.word	0x08005e3d
 8005e38:	08005ed3 	.word	0x08005ed3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d046      	beq.n	8005ed6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e4c:	e043      	b.n	8005ed6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e56:	d140      	bne.n	8005eda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e5c:	e03d      	b.n	8005eda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e66:	d121      	bne.n	8005eac <DMA_CheckFifoParam+0xa8>
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d837      	bhi.n	8005ede <DMA_CheckFifoParam+0xda>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <DMA_CheckFifoParam+0x70>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e85 	.word	0x08005e85
 8005e78:	08005e8b 	.word	0x08005e8b
 8005e7c:	08005e85 	.word	0x08005e85
 8005e80:	08005e9d 	.word	0x08005e9d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	73fb      	strb	r3, [r7, #15]
      break;
 8005e88:	e030      	b.n	8005eec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d025      	beq.n	8005ee2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e9a:	e022      	b.n	8005ee2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ea4:	d11f      	bne.n	8005ee6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005eaa:	e01c      	b.n	8005ee6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d903      	bls.n	8005eba <DMA_CheckFifoParam+0xb6>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d003      	beq.n	8005ec0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005eb8:	e018      	b.n	8005eec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ebe:	e015      	b.n	8005eec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00e      	beq.n	8005eea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed0:	e00b      	b.n	8005eea <DMA_CheckFifoParam+0xe6>
      break;
 8005ed2:	bf00      	nop
 8005ed4:	e00a      	b.n	8005eec <DMA_CheckFifoParam+0xe8>
      break;
 8005ed6:	bf00      	nop
 8005ed8:	e008      	b.n	8005eec <DMA_CheckFifoParam+0xe8>
      break;
 8005eda:	bf00      	nop
 8005edc:	e006      	b.n	8005eec <DMA_CheckFifoParam+0xe8>
      break;
 8005ede:	bf00      	nop
 8005ee0:	e004      	b.n	8005eec <DMA_CheckFifoParam+0xe8>
      break;
 8005ee2:	bf00      	nop
 8005ee4:	e002      	b.n	8005eec <DMA_CheckFifoParam+0xe8>
      break;   
 8005ee6:	bf00      	nop
 8005ee8:	e000      	b.n	8005eec <DMA_CheckFifoParam+0xe8>
      break;
 8005eea:	bf00      	nop
    }
  } 
  
  return status; 
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop

08005efc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f0e:	4b23      	ldr	r3, [pc, #140]	; (8005f9c <HAL_FLASH_Program+0xa0>)
 8005f10:	7e1b      	ldrb	r3, [r3, #24]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_FLASH_Program+0x1e>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e03b      	b.n	8005f92 <HAL_FLASH_Program+0x96>
 8005f1a:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <HAL_FLASH_Program+0xa0>)
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f24:	f000 f870 	bl	8006008 <FLASH_WaitForLastOperation>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d12b      	bne.n	8005f8a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d105      	bne.n	8005f44 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005f38:	783b      	ldrb	r3, [r7, #0]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	68b8      	ldr	r0, [r7, #8]
 8005f3e:	f000 f91b 	bl	8006178 <FLASH_Program_Byte>
 8005f42:	e016      	b.n	8005f72 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d105      	bne.n	8005f56 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005f4a:	883b      	ldrh	r3, [r7, #0]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	68b8      	ldr	r0, [r7, #8]
 8005f50:	f000 f8ee 	bl	8006130 <FLASH_Program_HalfWord>
 8005f54:	e00d      	b.n	8005f72 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d105      	bne.n	8005f68 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	68b8      	ldr	r0, [r7, #8]
 8005f62:	f000 f8c3 	bl	80060ec <FLASH_Program_Word>
 8005f66:	e004      	b.n	8005f72 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f6c:	68b8      	ldr	r0, [r7, #8]
 8005f6e:	f000 f88b 	bl	8006088 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f76:	f000 f847 	bl	8006008 <FLASH_WaitForLastOperation>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005f7e:	4b08      	ldr	r3, [pc, #32]	; (8005fa0 <HAL_FLASH_Program+0xa4>)
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	4a07      	ldr	r2, [pc, #28]	; (8005fa0 <HAL_FLASH_Program+0xa4>)
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f8a:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <HAL_FLASH_Program+0xa0>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000944 	.word	0x20000944
 8005fa0:	40023c00 	.word	0x40023c00

08005fa4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <HAL_FLASH_Unlock+0x38>)
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	da0b      	bge.n	8005fce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <HAL_FLASH_Unlock+0x38>)
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <HAL_FLASH_Unlock+0x3c>)
 8005fba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005fbc:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <HAL_FLASH_Unlock+0x38>)
 8005fbe:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <HAL_FLASH_Unlock+0x40>)
 8005fc0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <HAL_FLASH_Unlock+0x38>)
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da01      	bge.n	8005fce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005fce:	79fb      	ldrb	r3, [r7, #7]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	40023c00 	.word	0x40023c00
 8005fe0:	45670123 	.word	0x45670123
 8005fe4:	cdef89ab 	.word	0xcdef89ab

08005fe8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <HAL_FLASH_Lock+0x1c>)
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	4a04      	ldr	r2, [pc, #16]	; (8006004 <HAL_FLASH_Lock+0x1c>)
 8005ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ff6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	40023c00 	.word	0x40023c00

08006008 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006014:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <FLASH_WaitForLastOperation+0x78>)
 8006016:	2200      	movs	r2, #0
 8006018:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800601a:	f7fe fdeb 	bl	8004bf4 <HAL_GetTick>
 800601e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006020:	e010      	b.n	8006044 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d00c      	beq.n	8006044 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <FLASH_WaitForLastOperation+0x38>
 8006030:	f7fe fde0 	bl	8004bf4 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	429a      	cmp	r2, r3
 800603e:	d201      	bcs.n	8006044 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e019      	b.n	8006078 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006044:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <FLASH_WaitForLastOperation+0x7c>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e8      	bne.n	8006022 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006050:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <FLASH_WaitForLastOperation+0x7c>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <FLASH_WaitForLastOperation+0x7c>)
 800605e:	2201      	movs	r2, #1
 8006060:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006062:	4b08      	ldr	r3, [pc, #32]	; (8006084 <FLASH_WaitForLastOperation+0x7c>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800606e:	f000 f8a5 	bl	80061bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
  
}  
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20000944 	.word	0x20000944
 8006084:	40023c00 	.word	0x40023c00

08006088 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006094:	4b14      	ldr	r3, [pc, #80]	; (80060e8 <FLASH_Program_DoubleWord+0x60>)
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <FLASH_Program_DoubleWord+0x60>)
 800609a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80060a0:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <FLASH_Program_DoubleWord+0x60>)
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <FLASH_Program_DoubleWord+0x60>)
 80060a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80060aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80060ac:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <FLASH_Program_DoubleWord+0x60>)
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	4a0d      	ldr	r2, [pc, #52]	; (80060e8 <FLASH_Program_DoubleWord+0x60>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80060be:	f3bf 8f6f 	isb	sy
}
 80060c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80060c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	000a      	movs	r2, r1
 80060d2:	2300      	movs	r3, #0
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	3104      	adds	r1, #4
 80060d8:	4613      	mov	r3, r2
 80060da:	600b      	str	r3, [r1, #0]
}
 80060dc:	bf00      	nop
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40023c00 	.word	0x40023c00

080060ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060f6:	4b0d      	ldr	r3, [pc, #52]	; (800612c <FLASH_Program_Word+0x40>)
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	4a0c      	ldr	r2, [pc, #48]	; (800612c <FLASH_Program_Word+0x40>)
 80060fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006100:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <FLASH_Program_Word+0x40>)
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	4a09      	ldr	r2, [pc, #36]	; (800612c <FLASH_Program_Word+0x40>)
 8006108:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800610c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800610e:	4b07      	ldr	r3, [pc, #28]	; (800612c <FLASH_Program_Word+0x40>)
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	4a06      	ldr	r2, [pc, #24]	; (800612c <FLASH_Program_Word+0x40>)
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	601a      	str	r2, [r3, #0]
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	40023c00 	.word	0x40023c00

08006130 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800613c:	4b0d      	ldr	r3, [pc, #52]	; (8006174 <FLASH_Program_HalfWord+0x44>)
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	4a0c      	ldr	r2, [pc, #48]	; (8006174 <FLASH_Program_HalfWord+0x44>)
 8006142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006146:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <FLASH_Program_HalfWord+0x44>)
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	4a09      	ldr	r2, [pc, #36]	; (8006174 <FLASH_Program_HalfWord+0x44>)
 800614e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006152:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006154:	4b07      	ldr	r3, [pc, #28]	; (8006174 <FLASH_Program_HalfWord+0x44>)
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	4a06      	ldr	r2, [pc, #24]	; (8006174 <FLASH_Program_HalfWord+0x44>)
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	887a      	ldrh	r2, [r7, #2]
 8006164:	801a      	strh	r2, [r3, #0]
}
 8006166:	bf00      	nop
 8006168:	370c      	adds	r7, #12
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40023c00 	.word	0x40023c00

08006178 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006184:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <FLASH_Program_Byte+0x40>)
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	4a0b      	ldr	r2, [pc, #44]	; (80061b8 <FLASH_Program_Byte+0x40>)
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006190:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <FLASH_Program_Byte+0x40>)
 8006192:	4a09      	ldr	r2, [pc, #36]	; (80061b8 <FLASH_Program_Byte+0x40>)
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006198:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <FLASH_Program_Byte+0x40>)
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	4a06      	ldr	r2, [pc, #24]	; (80061b8 <FLASH_Program_Byte+0x40>)
 800619e:	f043 0301 	orr.w	r3, r3, #1
 80061a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	78fa      	ldrb	r2, [r7, #3]
 80061a8:	701a      	strb	r2, [r3, #0]
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40023c00 	.word	0x40023c00

080061bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80061c0:	4b27      	ldr	r3, [pc, #156]	; (8006260 <FLASH_SetErrorCode+0xa4>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d008      	beq.n	80061de <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80061cc:	4b25      	ldr	r3, [pc, #148]	; (8006264 <FLASH_SetErrorCode+0xa8>)
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f043 0310 	orr.w	r3, r3, #16
 80061d4:	4a23      	ldr	r2, [pc, #140]	; (8006264 <FLASH_SetErrorCode+0xa8>)
 80061d6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80061d8:	4b21      	ldr	r3, [pc, #132]	; (8006260 <FLASH_SetErrorCode+0xa4>)
 80061da:	2210      	movs	r2, #16
 80061dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80061de:	4b20      	ldr	r3, [pc, #128]	; (8006260 <FLASH_SetErrorCode+0xa4>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d008      	beq.n	80061fc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80061ea:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <FLASH_SetErrorCode+0xa8>)
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f043 0308 	orr.w	r3, r3, #8
 80061f2:	4a1c      	ldr	r2, [pc, #112]	; (8006264 <FLASH_SetErrorCode+0xa8>)
 80061f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80061f6:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <FLASH_SetErrorCode+0xa4>)
 80061f8:	2220      	movs	r2, #32
 80061fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80061fc:	4b18      	ldr	r3, [pc, #96]	; (8006260 <FLASH_SetErrorCode+0xa4>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006208:	4b16      	ldr	r3, [pc, #88]	; (8006264 <FLASH_SetErrorCode+0xa8>)
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f043 0304 	orr.w	r3, r3, #4
 8006210:	4a14      	ldr	r2, [pc, #80]	; (8006264 <FLASH_SetErrorCode+0xa8>)
 8006212:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006214:	4b12      	ldr	r3, [pc, #72]	; (8006260 <FLASH_SetErrorCode+0xa4>)
 8006216:	2240      	movs	r2, #64	; 0x40
 8006218:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <FLASH_SetErrorCode+0xa4>)
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006226:	4b0f      	ldr	r3, [pc, #60]	; (8006264 <FLASH_SetErrorCode+0xa8>)
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f043 0302 	orr.w	r3, r3, #2
 800622e:	4a0d      	ldr	r2, [pc, #52]	; (8006264 <FLASH_SetErrorCode+0xa8>)
 8006230:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <FLASH_SetErrorCode+0xa4>)
 8006234:	2280      	movs	r2, #128	; 0x80
 8006236:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006238:	4b09      	ldr	r3, [pc, #36]	; (8006260 <FLASH_SetErrorCode+0xa4>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006244:	4b07      	ldr	r3, [pc, #28]	; (8006264 <FLASH_SetErrorCode+0xa8>)
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f043 0320 	orr.w	r3, r3, #32
 800624c:	4a05      	ldr	r2, [pc, #20]	; (8006264 <FLASH_SetErrorCode+0xa8>)
 800624e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006250:	4b03      	ldr	r3, [pc, #12]	; (8006260 <FLASH_SetErrorCode+0xa4>)
 8006252:	2202      	movs	r2, #2
 8006254:	60da      	str	r2, [r3, #12]
  }
}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	40023c00 	.word	0x40023c00
 8006264:	20000944 	.word	0x20000944

08006268 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800627a:	4b31      	ldr	r3, [pc, #196]	; (8006340 <HAL_FLASHEx_Erase+0xd8>)
 800627c:	7e1b      	ldrb	r3, [r3, #24]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_FLASHEx_Erase+0x1e>
 8006282:	2302      	movs	r3, #2
 8006284:	e058      	b.n	8006338 <HAL_FLASHEx_Erase+0xd0>
 8006286:	4b2e      	ldr	r3, [pc, #184]	; (8006340 <HAL_FLASHEx_Erase+0xd8>)
 8006288:	2201      	movs	r2, #1
 800628a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800628c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006290:	f7ff feba 	bl	8006008 <FLASH_WaitForLastOperation>
 8006294:	4603      	mov	r3, r0
 8006296:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d148      	bne.n	8006330 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295
 80062a4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d115      	bne.n	80062da <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f000 f844 	bl	8006348 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80062c4:	f7ff fea0 	bl	8006008 <FLASH_WaitForLastOperation>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80062cc:	4b1d      	ldr	r3, [pc, #116]	; (8006344 <HAL_FLASHEx_Erase+0xdc>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	4a1c      	ldr	r2, [pc, #112]	; (8006344 <HAL_FLASHEx_Erase+0xdc>)
 80062d2:	f023 0304 	bic.w	r3, r3, #4
 80062d6:	6113      	str	r3, [r2, #16]
 80062d8:	e028      	b.n	800632c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60bb      	str	r3, [r7, #8]
 80062e0:	e01c      	b.n	800631c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	4619      	mov	r1, r3
 80062ea:	68b8      	ldr	r0, [r7, #8]
 80062ec:	f000 f850 	bl	8006390 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80062f4:	f7ff fe88 	bl	8006008 <FLASH_WaitForLastOperation>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <HAL_FLASHEx_Erase+0xdc>)
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	4a10      	ldr	r2, [pc, #64]	; (8006344 <HAL_FLASHEx_Erase+0xdc>)
 8006302:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006306:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	601a      	str	r2, [r3, #0]
          break;
 8006314:	e00a      	b.n	800632c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	3301      	adds	r3, #1
 800631a:	60bb      	str	r3, [r7, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4413      	add	r3, r2
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	429a      	cmp	r2, r3
 800632a:	d3da      	bcc.n	80062e2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800632c:	f000 f878 	bl	8006420 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006330:	4b03      	ldr	r3, [pc, #12]	; (8006340 <HAL_FLASHEx_Erase+0xd8>)
 8006332:	2200      	movs	r2, #0
 8006334:	761a      	strb	r2, [r3, #24]

  return status;
 8006336:	7bfb      	ldrb	r3, [r7, #15]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000944 	.word	0x20000944
 8006344:	40023c00 	.word	0x40023c00

08006348 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	6039      	str	r1, [r7, #0]
 8006352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006354:	4b0d      	ldr	r3, [pc, #52]	; (800638c <FLASH_MassErase+0x44>)
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	4a0c      	ldr	r2, [pc, #48]	; (800638c <FLASH_MassErase+0x44>)
 800635a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800635e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006360:	4b0a      	ldr	r3, [pc, #40]	; (800638c <FLASH_MassErase+0x44>)
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	4a09      	ldr	r2, [pc, #36]	; (800638c <FLASH_MassErase+0x44>)
 8006366:	f043 0304 	orr.w	r3, r3, #4
 800636a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800636c:	4b07      	ldr	r3, [pc, #28]	; (800638c <FLASH_MassErase+0x44>)
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	4313      	orrs	r3, r2
 8006376:	4a05      	ldr	r2, [pc, #20]	; (800638c <FLASH_MassErase+0x44>)
 8006378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800637c:	6113      	str	r3, [r2, #16]
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40023c00 	.word	0x40023c00

08006390 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	e010      	b.n	80063ce <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d103      	bne.n	80063ba <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80063b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	e009      	b.n	80063ce <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d103      	bne.n	80063c8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80063c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e002      	b.n	80063ce <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80063c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063cc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063ce:	4b13      	ldr	r3, [pc, #76]	; (800641c <FLASH_Erase_Sector+0x8c>)
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	4a12      	ldr	r2, [pc, #72]	; (800641c <FLASH_Erase_Sector+0x8c>)
 80063d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80063da:	4b10      	ldr	r3, [pc, #64]	; (800641c <FLASH_Erase_Sector+0x8c>)
 80063dc:	691a      	ldr	r2, [r3, #16]
 80063de:	490f      	ldr	r1, [pc, #60]	; (800641c <FLASH_Erase_Sector+0x8c>)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80063e6:	4b0d      	ldr	r3, [pc, #52]	; (800641c <FLASH_Erase_Sector+0x8c>)
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	4a0c      	ldr	r2, [pc, #48]	; (800641c <FLASH_Erase_Sector+0x8c>)
 80063ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80063f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80063f2:	4b0a      	ldr	r3, [pc, #40]	; (800641c <FLASH_Erase_Sector+0x8c>)
 80063f4:	691a      	ldr	r2, [r3, #16]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	4313      	orrs	r3, r2
 80063fc:	4a07      	ldr	r2, [pc, #28]	; (800641c <FLASH_Erase_Sector+0x8c>)
 80063fe:	f043 0302 	orr.w	r3, r3, #2
 8006402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <FLASH_Erase_Sector+0x8c>)
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	4a04      	ldr	r2, [pc, #16]	; (800641c <FLASH_Erase_Sector+0x8c>)
 800640a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800640e:	6113      	str	r3, [r2, #16]
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40023c00 	.word	0x40023c00

08006420 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006424:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <FLASH_FlushCaches+0x88>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642c:	2b00      	cmp	r3, #0
 800642e:	d017      	beq.n	8006460 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006430:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <FLASH_FlushCaches+0x88>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1c      	ldr	r2, [pc, #112]	; (80064a8 <FLASH_FlushCaches+0x88>)
 8006436:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800643a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800643c:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <FLASH_FlushCaches+0x88>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <FLASH_FlushCaches+0x88>)
 8006442:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <FLASH_FlushCaches+0x88>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a16      	ldr	r2, [pc, #88]	; (80064a8 <FLASH_FlushCaches+0x88>)
 800644e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006452:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006454:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <FLASH_FlushCaches+0x88>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a13      	ldr	r2, [pc, #76]	; (80064a8 <FLASH_FlushCaches+0x88>)
 800645a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800645e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006460:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <FLASH_FlushCaches+0x88>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006468:	2b00      	cmp	r3, #0
 800646a:	d017      	beq.n	800649c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800646c:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <FLASH_FlushCaches+0x88>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a0d      	ldr	r2, [pc, #52]	; (80064a8 <FLASH_FlushCaches+0x88>)
 8006472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006476:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <FLASH_FlushCaches+0x88>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a0a      	ldr	r2, [pc, #40]	; (80064a8 <FLASH_FlushCaches+0x88>)
 800647e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <FLASH_FlushCaches+0x88>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <FLASH_FlushCaches+0x88>)
 800648a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800648e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <FLASH_FlushCaches+0x88>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a04      	ldr	r2, [pc, #16]	; (80064a8 <FLASH_FlushCaches+0x88>)
 8006496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800649a:	6013      	str	r3, [r2, #0]
  }
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40023c00 	.word	0x40023c00

080064ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b089      	sub	sp, #36	; 0x24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064be:	2300      	movs	r3, #0
 80064c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064c2:	2300      	movs	r3, #0
 80064c4:	61fb      	str	r3, [r7, #28]
 80064c6:	e16b      	b.n	80067a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064c8:	2201      	movs	r2, #1
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	fa02 f303 	lsl.w	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4013      	ands	r3, r2
 80064da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	f040 815a 	bne.w	800679a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d005      	beq.n	80064fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d130      	bne.n	8006560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	2203      	movs	r2, #3
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	43db      	mvns	r3, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4013      	ands	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	4313      	orrs	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006534:	2201      	movs	r2, #1
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	43db      	mvns	r3, r3
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4013      	ands	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	091b      	lsrs	r3, r3, #4
 800654a:	f003 0201 	and.w	r2, r3, #1
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	4313      	orrs	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	2b03      	cmp	r3, #3
 800656a:	d017      	beq.n	800659c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	2203      	movs	r2, #3
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4013      	ands	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	4313      	orrs	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d123      	bne.n	80065f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	08da      	lsrs	r2, r3, #3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3208      	adds	r2, #8
 80065b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	220f      	movs	r2, #15
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	691a      	ldr	r2, [r3, #16]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	4313      	orrs	r3, r2
 80065e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	08da      	lsrs	r2, r3, #3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	3208      	adds	r2, #8
 80065ea:	69b9      	ldr	r1, [r7, #24]
 80065ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	2203      	movs	r2, #3
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	4013      	ands	r3, r2
 8006606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f003 0203 	and.w	r2, r3, #3
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4313      	orrs	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 80b4 	beq.w	800679a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	4b60      	ldr	r3, [pc, #384]	; (80067b8 <HAL_GPIO_Init+0x30c>)
 8006638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663a:	4a5f      	ldr	r2, [pc, #380]	; (80067b8 <HAL_GPIO_Init+0x30c>)
 800663c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006640:	6453      	str	r3, [r2, #68]	; 0x44
 8006642:	4b5d      	ldr	r3, [pc, #372]	; (80067b8 <HAL_GPIO_Init+0x30c>)
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800664e:	4a5b      	ldr	r2, [pc, #364]	; (80067bc <HAL_GPIO_Init+0x310>)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	089b      	lsrs	r3, r3, #2
 8006654:	3302      	adds	r3, #2
 8006656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	220f      	movs	r2, #15
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	4013      	ands	r3, r2
 8006670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a52      	ldr	r2, [pc, #328]	; (80067c0 <HAL_GPIO_Init+0x314>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d02b      	beq.n	80066d2 <HAL_GPIO_Init+0x226>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a51      	ldr	r2, [pc, #324]	; (80067c4 <HAL_GPIO_Init+0x318>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d025      	beq.n	80066ce <HAL_GPIO_Init+0x222>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a50      	ldr	r2, [pc, #320]	; (80067c8 <HAL_GPIO_Init+0x31c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d01f      	beq.n	80066ca <HAL_GPIO_Init+0x21e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a4f      	ldr	r2, [pc, #316]	; (80067cc <HAL_GPIO_Init+0x320>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d019      	beq.n	80066c6 <HAL_GPIO_Init+0x21a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a4e      	ldr	r2, [pc, #312]	; (80067d0 <HAL_GPIO_Init+0x324>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d013      	beq.n	80066c2 <HAL_GPIO_Init+0x216>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a4d      	ldr	r2, [pc, #308]	; (80067d4 <HAL_GPIO_Init+0x328>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d00d      	beq.n	80066be <HAL_GPIO_Init+0x212>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a4c      	ldr	r2, [pc, #304]	; (80067d8 <HAL_GPIO_Init+0x32c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d007      	beq.n	80066ba <HAL_GPIO_Init+0x20e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a4b      	ldr	r2, [pc, #300]	; (80067dc <HAL_GPIO_Init+0x330>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d101      	bne.n	80066b6 <HAL_GPIO_Init+0x20a>
 80066b2:	2307      	movs	r3, #7
 80066b4:	e00e      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066b6:	2308      	movs	r3, #8
 80066b8:	e00c      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066ba:	2306      	movs	r3, #6
 80066bc:	e00a      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066be:	2305      	movs	r3, #5
 80066c0:	e008      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066c2:	2304      	movs	r3, #4
 80066c4:	e006      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066c6:	2303      	movs	r3, #3
 80066c8:	e004      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066ca:	2302      	movs	r3, #2
 80066cc:	e002      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066ce:	2301      	movs	r3, #1
 80066d0:	e000      	b.n	80066d4 <HAL_GPIO_Init+0x228>
 80066d2:	2300      	movs	r3, #0
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	f002 0203 	and.w	r2, r2, #3
 80066da:	0092      	lsls	r2, r2, #2
 80066dc:	4093      	lsls	r3, r2
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066e4:	4935      	ldr	r1, [pc, #212]	; (80067bc <HAL_GPIO_Init+0x310>)
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	089b      	lsrs	r3, r3, #2
 80066ea:	3302      	adds	r3, #2
 80066ec:	69ba      	ldr	r2, [r7, #24]
 80066ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066f2:	4b3b      	ldr	r3, [pc, #236]	; (80067e0 <HAL_GPIO_Init+0x334>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	43db      	mvns	r3, r3
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	4013      	ands	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006716:	4a32      	ldr	r2, [pc, #200]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800671c:	4b30      	ldr	r3, [pc, #192]	; (80067e0 <HAL_GPIO_Init+0x334>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	43db      	mvns	r3, r3
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	4013      	ands	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006740:	4a27      	ldr	r2, [pc, #156]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006746:	4b26      	ldr	r3, [pc, #152]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	43db      	mvns	r3, r3
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	4013      	ands	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800676a:	4a1d      	ldr	r2, [pc, #116]	; (80067e0 <HAL_GPIO_Init+0x334>)
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006770:	4b1b      	ldr	r3, [pc, #108]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	43db      	mvns	r3, r3
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	4013      	ands	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d003      	beq.n	8006794 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800678c:	69ba      	ldr	r2, [r7, #24]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006794:	4a12      	ldr	r2, [pc, #72]	; (80067e0 <HAL_GPIO_Init+0x334>)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	3301      	adds	r3, #1
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b0f      	cmp	r3, #15
 80067a4:	f67f ae90 	bls.w	80064c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	3724      	adds	r7, #36	; 0x24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40023800 	.word	0x40023800
 80067bc:	40013800 	.word	0x40013800
 80067c0:	40020000 	.word	0x40020000
 80067c4:	40020400 	.word	0x40020400
 80067c8:	40020800 	.word	0x40020800
 80067cc:	40020c00 	.word	0x40020c00
 80067d0:	40021000 	.word	0x40021000
 80067d4:	40021400 	.word	0x40021400
 80067d8:	40021800 	.word	0x40021800
 80067dc:	40021c00 	.word	0x40021c00
 80067e0:	40013c00 	.word	0x40013c00

080067e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	887b      	ldrh	r3, [r7, #2]
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067fc:	2301      	movs	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]
 8006800:	e001      	b.n	8006806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006802:	2300      	movs	r3, #0
 8006804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	807b      	strh	r3, [r7, #2]
 8006820:	4613      	mov	r3, r2
 8006822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006824:	787b      	ldrb	r3, [r7, #1]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800682a:	887a      	ldrh	r2, [r7, #2]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006830:	e003      	b.n	800683a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006832:	887b      	ldrh	r3, [r7, #2]
 8006834:	041a      	lsls	r2, r3, #16
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	619a      	str	r2, [r3, #24]
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e12b      	b.n	8006ab2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fc fdc8 	bl	8003404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2224      	movs	r2, #36	; 0x24
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0201 	bic.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800689a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068ac:	f000 fd5a 	bl	8007364 <HAL_RCC_GetPCLK1Freq>
 80068b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	4a81      	ldr	r2, [pc, #516]	; (8006abc <HAL_I2C_Init+0x274>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d807      	bhi.n	80068cc <HAL_I2C_Init+0x84>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a80      	ldr	r2, [pc, #512]	; (8006ac0 <HAL_I2C_Init+0x278>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	bf94      	ite	ls
 80068c4:	2301      	movls	r3, #1
 80068c6:	2300      	movhi	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	e006      	b.n	80068da <HAL_I2C_Init+0x92>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4a7d      	ldr	r2, [pc, #500]	; (8006ac4 <HAL_I2C_Init+0x27c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	bf94      	ite	ls
 80068d4:	2301      	movls	r3, #1
 80068d6:	2300      	movhi	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e0e7      	b.n	8006ab2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4a78      	ldr	r2, [pc, #480]	; (8006ac8 <HAL_I2C_Init+0x280>)
 80068e6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ea:	0c9b      	lsrs	r3, r3, #18
 80068ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4a6a      	ldr	r2, [pc, #424]	; (8006abc <HAL_I2C_Init+0x274>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d802      	bhi.n	800691c <HAL_I2C_Init+0xd4>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	3301      	adds	r3, #1
 800691a:	e009      	b.n	8006930 <HAL_I2C_Init+0xe8>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006922:	fb02 f303 	mul.w	r3, r2, r3
 8006926:	4a69      	ldr	r2, [pc, #420]	; (8006acc <HAL_I2C_Init+0x284>)
 8006928:	fba2 2303 	umull	r2, r3, r2, r3
 800692c:	099b      	lsrs	r3, r3, #6
 800692e:	3301      	adds	r3, #1
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	430b      	orrs	r3, r1
 8006936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006942:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	495c      	ldr	r1, [pc, #368]	; (8006abc <HAL_I2C_Init+0x274>)
 800694c:	428b      	cmp	r3, r1
 800694e:	d819      	bhi.n	8006984 <HAL_I2C_Init+0x13c>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	1e59      	subs	r1, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	fbb1 f3f3 	udiv	r3, r1, r3
 800695e:	1c59      	adds	r1, r3, #1
 8006960:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006964:	400b      	ands	r3, r1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <HAL_I2C_Init+0x138>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1e59      	subs	r1, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	fbb1 f3f3 	udiv	r3, r1, r3
 8006978:	3301      	adds	r3, #1
 800697a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800697e:	e051      	b.n	8006a24 <HAL_I2C_Init+0x1dc>
 8006980:	2304      	movs	r3, #4
 8006982:	e04f      	b.n	8006a24 <HAL_I2C_Init+0x1dc>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d111      	bne.n	80069b0 <HAL_I2C_Init+0x168>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	1e58      	subs	r0, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6859      	ldr	r1, [r3, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	440b      	add	r3, r1
 800699a:	fbb0 f3f3 	udiv	r3, r0, r3
 800699e:	3301      	adds	r3, #1
 80069a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf0c      	ite	eq
 80069a8:	2301      	moveq	r3, #1
 80069aa:	2300      	movne	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	e012      	b.n	80069d6 <HAL_I2C_Init+0x18e>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	1e58      	subs	r0, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6859      	ldr	r1, [r3, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	0099      	lsls	r1, r3, #2
 80069c0:	440b      	add	r3, r1
 80069c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069c6:	3301      	adds	r3, #1
 80069c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bf0c      	ite	eq
 80069d0:	2301      	moveq	r3, #1
 80069d2:	2300      	movne	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_I2C_Init+0x196>
 80069da:	2301      	movs	r3, #1
 80069dc:	e022      	b.n	8006a24 <HAL_I2C_Init+0x1dc>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10e      	bne.n	8006a04 <HAL_I2C_Init+0x1bc>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1e58      	subs	r0, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6859      	ldr	r1, [r3, #4]
 80069ee:	460b      	mov	r3, r1
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	440b      	add	r3, r1
 80069f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80069f8:	3301      	adds	r3, #1
 80069fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a02:	e00f      	b.n	8006a24 <HAL_I2C_Init+0x1dc>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	1e58      	subs	r0, r3, #1
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6859      	ldr	r1, [r3, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	0099      	lsls	r1, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	6809      	ldr	r1, [r1, #0]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69da      	ldr	r2, [r3, #28]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6911      	ldr	r1, [r2, #16]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	68d2      	ldr	r2, [r2, #12]
 8006a5e:	4311      	orrs	r1, r2
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6812      	ldr	r2, [r2, #0]
 8006a64:	430b      	orrs	r3, r1
 8006a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3710      	adds	r7, #16
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	000186a0 	.word	0x000186a0
 8006ac0:	001e847f 	.word	0x001e847f
 8006ac4:	003d08ff 	.word	0x003d08ff
 8006ac8:	431bde83 	.word	0x431bde83
 8006acc:	10624dd3 	.word	0x10624dd3

08006ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e264      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d075      	beq.n	8006bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aee:	4ba3      	ldr	r3, [pc, #652]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d00c      	beq.n	8006b14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006afa:	4ba0      	ldr	r3, [pc, #640]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d112      	bne.n	8006b2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b06:	4b9d      	ldr	r3, [pc, #628]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b12:	d10b      	bne.n	8006b2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b14:	4b99      	ldr	r3, [pc, #612]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d05b      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x108>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d157      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e23f      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b34:	d106      	bne.n	8006b44 <HAL_RCC_OscConfig+0x74>
 8006b36:	4b91      	ldr	r3, [pc, #580]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a90      	ldr	r2, [pc, #576]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	e01d      	b.n	8006b80 <HAL_RCC_OscConfig+0xb0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b4c:	d10c      	bne.n	8006b68 <HAL_RCC_OscConfig+0x98>
 8006b4e:	4b8b      	ldr	r3, [pc, #556]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a8a      	ldr	r2, [pc, #552]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	4b88      	ldr	r3, [pc, #544]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a87      	ldr	r2, [pc, #540]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	e00b      	b.n	8006b80 <HAL_RCC_OscConfig+0xb0>
 8006b68:	4b84      	ldr	r3, [pc, #528]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a83      	ldr	r2, [pc, #524]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	4b81      	ldr	r3, [pc, #516]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a80      	ldr	r2, [pc, #512]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d013      	beq.n	8006bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b88:	f7fe f834 	bl	8004bf4 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b90:	f7fe f830 	bl	8004bf4 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b64      	cmp	r3, #100	; 0x64
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e204      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba2:	4b76      	ldr	r3, [pc, #472]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f0      	beq.n	8006b90 <HAL_RCC_OscConfig+0xc0>
 8006bae:	e014      	b.n	8006bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb0:	f7fe f820 	bl	8004bf4 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bb8:	f7fe f81c 	bl	8004bf4 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	; 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e1f0      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bca:	4b6c      	ldr	r3, [pc, #432]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0xe8>
 8006bd6:	e000      	b.n	8006bda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d063      	beq.n	8006cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006be6:	4b65      	ldr	r3, [pc, #404]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 030c 	and.w	r3, r3, #12
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bf2:	4b62      	ldr	r3, [pc, #392]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d11c      	bne.n	8006c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bfe:	4b5f      	ldr	r3, [pc, #380]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d116      	bne.n	8006c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c0a:	4b5c      	ldr	r3, [pc, #368]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_RCC_OscConfig+0x152>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d001      	beq.n	8006c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e1c4      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c22:	4b56      	ldr	r3, [pc, #344]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	4952      	ldr	r1, [pc, #328]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c36:	e03a      	b.n	8006cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d020      	beq.n	8006c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c40:	4b4f      	ldr	r3, [pc, #316]	; (8006d80 <HAL_RCC_OscConfig+0x2b0>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c46:	f7fd ffd5 	bl	8004bf4 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c4e:	f7fd ffd1 	bl	8004bf4 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e1a5      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c60:	4b46      	ldr	r3, [pc, #280]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6c:	4b43      	ldr	r3, [pc, #268]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4940      	ldr	r1, [pc, #256]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	600b      	str	r3, [r1, #0]
 8006c80:	e015      	b.n	8006cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c82:	4b3f      	ldr	r3, [pc, #252]	; (8006d80 <HAL_RCC_OscConfig+0x2b0>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c88:	f7fd ffb4 	bl	8004bf4 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c90:	f7fd ffb0 	bl	8004bf4 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e184      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ca2:	4b36      	ldr	r3, [pc, #216]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f0      	bne.n	8006c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d030      	beq.n	8006d1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d016      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cc2:	4b30      	ldr	r3, [pc, #192]	; (8006d84 <HAL_RCC_OscConfig+0x2b4>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc8:	f7fd ff94 	bl	8004bf4 <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cd0:	f7fd ff90 	bl	8004bf4 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e164      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ce2:	4b26      	ldr	r3, [pc, #152]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0f0      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x200>
 8006cee:	e015      	b.n	8006d1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cf0:	4b24      	ldr	r3, [pc, #144]	; (8006d84 <HAL_RCC_OscConfig+0x2b4>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cf6:	f7fd ff7d 	bl	8004bf4 <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cfe:	f7fd ff79 	bl	8004bf4 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e14d      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d10:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f0      	bne.n	8006cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 80a0 	beq.w	8006e6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d2e:	4b13      	ldr	r3, [pc, #76]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10f      	bne.n	8006d5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	4a0e      	ldr	r2, [pc, #56]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d48:	6413      	str	r3, [r2, #64]	; 0x40
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d52:	60bb      	str	r3, [r7, #8]
 8006d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <HAL_RCC_OscConfig+0x2b8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d121      	bne.n	8006daa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d66:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <HAL_RCC_OscConfig+0x2b8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a07      	ldr	r2, [pc, #28]	; (8006d88 <HAL_RCC_OscConfig+0x2b8>)
 8006d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d72:	f7fd ff3f 	bl	8004bf4 <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d78:	e011      	b.n	8006d9e <HAL_RCC_OscConfig+0x2ce>
 8006d7a:	bf00      	nop
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	42470000 	.word	0x42470000
 8006d84:	42470e80 	.word	0x42470e80
 8006d88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d8c:	f7fd ff32 	bl	8004bf4 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e106      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9e:	4b85      	ldr	r3, [pc, #532]	; (8006fb4 <HAL_RCC_OscConfig+0x4e4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d106      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x2f0>
 8006db2:	4b81      	ldr	r3, [pc, #516]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	4a80      	ldr	r2, [pc, #512]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006db8:	f043 0301 	orr.w	r3, r3, #1
 8006dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dbe:	e01c      	b.n	8006dfa <HAL_RCC_OscConfig+0x32a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b05      	cmp	r3, #5
 8006dc6:	d10c      	bne.n	8006de2 <HAL_RCC_OscConfig+0x312>
 8006dc8:	4b7b      	ldr	r3, [pc, #492]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dcc:	4a7a      	ldr	r2, [pc, #488]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006dce:	f043 0304 	orr.w	r3, r3, #4
 8006dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd4:	4b78      	ldr	r3, [pc, #480]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	4a77      	ldr	r2, [pc, #476]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006dda:	f043 0301 	orr.w	r3, r3, #1
 8006dde:	6713      	str	r3, [r2, #112]	; 0x70
 8006de0:	e00b      	b.n	8006dfa <HAL_RCC_OscConfig+0x32a>
 8006de2:	4b75      	ldr	r3, [pc, #468]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	4a74      	ldr	r2, [pc, #464]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	6713      	str	r3, [r2, #112]	; 0x70
 8006dee:	4b72      	ldr	r3, [pc, #456]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	4a71      	ldr	r2, [pc, #452]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006df4:	f023 0304 	bic.w	r3, r3, #4
 8006df8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d015      	beq.n	8006e2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e02:	f7fd fef7 	bl	8004bf4 <HAL_GetTick>
 8006e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e08:	e00a      	b.n	8006e20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e0a:	f7fd fef3 	bl	8004bf4 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e0c5      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e20:	4b65      	ldr	r3, [pc, #404]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0ee      	beq.n	8006e0a <HAL_RCC_OscConfig+0x33a>
 8006e2c:	e014      	b.n	8006e58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e2e:	f7fd fee1 	bl	8004bf4 <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e34:	e00a      	b.n	8006e4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e36:	f7fd fedd 	bl	8004bf4 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e0af      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e4c:	4b5a      	ldr	r3, [pc, #360]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1ee      	bne.n	8006e36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d105      	bne.n	8006e6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e5e:	4b56      	ldr	r3, [pc, #344]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	4a55      	ldr	r2, [pc, #340]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 809b 	beq.w	8006faa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e74:	4b50      	ldr	r3, [pc, #320]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 030c 	and.w	r3, r3, #12
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d05c      	beq.n	8006f3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d141      	bne.n	8006f0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e88:	4b4c      	ldr	r3, [pc, #304]	; (8006fbc <HAL_RCC_OscConfig+0x4ec>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8e:	f7fd feb1 	bl	8004bf4 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e94:	e008      	b.n	8006ea8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e96:	f7fd fead 	bl	8004bf4 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e081      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea8:	4b43      	ldr	r3, [pc, #268]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f0      	bne.n	8006e96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	019b      	lsls	r3, r3, #6
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	085b      	lsrs	r3, r3, #1
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	041b      	lsls	r3, r3, #16
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	061b      	lsls	r3, r3, #24
 8006ed8:	4937      	ldr	r1, [pc, #220]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ede:	4b37      	ldr	r3, [pc, #220]	; (8006fbc <HAL_RCC_OscConfig+0x4ec>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee4:	f7fd fe86 	bl	8004bf4 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eec:	f7fd fe82 	bl	8004bf4 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e056      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006efe:	4b2e      	ldr	r3, [pc, #184]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0x41c>
 8006f0a:	e04e      	b.n	8006faa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f0c:	4b2b      	ldr	r3, [pc, #172]	; (8006fbc <HAL_RCC_OscConfig+0x4ec>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f12:	f7fd fe6f 	bl	8004bf4 <HAL_GetTick>
 8006f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f1a:	f7fd fe6b 	bl	8004bf4 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e03f      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2c:	4b22      	ldr	r3, [pc, #136]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1f0      	bne.n	8006f1a <HAL_RCC_OscConfig+0x44a>
 8006f38:	e037      	b.n	8006faa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e032      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f46:	4b1c      	ldr	r3, [pc, #112]	; (8006fb8 <HAL_RCC_OscConfig+0x4e8>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d028      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d121      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d11a      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f76:	4013      	ands	r3, r2
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d111      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8c:	085b      	lsrs	r3, r3, #1
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d107      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d001      	beq.n	8006faa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e000      	b.n	8006fac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	40007000 	.word	0x40007000
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	42470060 	.word	0x42470060

08006fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e0cc      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd4:	4b68      	ldr	r3, [pc, #416]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d90c      	bls.n	8006ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe2:	4b65      	ldr	r3, [pc, #404]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fea:	4b63      	ldr	r3, [pc, #396]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d001      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e0b8      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d020      	beq.n	800704a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007014:	4b59      	ldr	r3, [pc, #356]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	4a58      	ldr	r2, [pc, #352]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800701e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800702c:	4b53      	ldr	r3, [pc, #332]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4a52      	ldr	r2, [pc, #328]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007038:	4b50      	ldr	r3, [pc, #320]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	494d      	ldr	r1, [pc, #308]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	4313      	orrs	r3, r2
 8007048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d044      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d107      	bne.n	800706e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800705e:	4b47      	ldr	r3, [pc, #284]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d119      	bne.n	800709e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e07f      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d003      	beq.n	800707e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800707a:	2b03      	cmp	r3, #3
 800707c:	d107      	bne.n	800708e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800707e:	4b3f      	ldr	r3, [pc, #252]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e06f      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800708e:	4b3b      	ldr	r3, [pc, #236]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e067      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800709e:	4b37      	ldr	r3, [pc, #220]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f023 0203 	bic.w	r2, r3, #3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	4934      	ldr	r1, [pc, #208]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070b0:	f7fd fda0 	bl	8004bf4 <HAL_GetTick>
 80070b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b6:	e00a      	b.n	80070ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b8:	f7fd fd9c 	bl	8004bf4 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e04f      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ce:	4b2b      	ldr	r3, [pc, #172]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 020c 	and.w	r2, r3, #12
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	429a      	cmp	r2, r3
 80070de:	d1eb      	bne.n	80070b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070e0:	4b25      	ldr	r3, [pc, #148]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d20c      	bcs.n	8007108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ee:	4b22      	ldr	r3, [pc, #136]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f6:	4b20      	ldr	r3, [pc, #128]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d001      	beq.n	8007108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e032      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007114:	4b19      	ldr	r3, [pc, #100]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4916      	ldr	r1, [pc, #88]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007122:	4313      	orrs	r3, r2
 8007124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d009      	beq.n	8007146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	490e      	ldr	r1, [pc, #56]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	4313      	orrs	r3, r2
 8007144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007146:	f000 f821 	bl	800718c <HAL_RCC_GetSysClockFreq>
 800714a:	4602      	mov	r2, r0
 800714c:	4b0b      	ldr	r3, [pc, #44]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	091b      	lsrs	r3, r3, #4
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	490a      	ldr	r1, [pc, #40]	; (8007180 <HAL_RCC_ClockConfig+0x1c0>)
 8007158:	5ccb      	ldrb	r3, [r1, r3]
 800715a:	fa22 f303 	lsr.w	r3, r2, r3
 800715e:	4a09      	ldr	r2, [pc, #36]	; (8007184 <HAL_RCC_ClockConfig+0x1c4>)
 8007160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <HAL_RCC_ClockConfig+0x1c8>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7fd fd00 	bl	8004b6c <HAL_InitTick>

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40023c00 	.word	0x40023c00
 800717c:	40023800 	.word	0x40023800
 8007180:	0800e7d4 	.word	0x0800e7d4
 8007184:	20000000 	.word	0x20000000
 8007188:	20000004 	.word	0x20000004

0800718c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800718c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	607b      	str	r3, [r7, #4]
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	2300      	movs	r3, #0
 800719e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071a4:	4b67      	ldr	r3, [pc, #412]	; (8007344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 030c 	and.w	r3, r3, #12
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d00d      	beq.n	80071cc <HAL_RCC_GetSysClockFreq+0x40>
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	f200 80bd 	bhi.w	8007330 <HAL_RCC_GetSysClockFreq+0x1a4>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_RCC_GetSysClockFreq+0x34>
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d003      	beq.n	80071c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80071be:	e0b7      	b.n	8007330 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071c0:	4b61      	ldr	r3, [pc, #388]	; (8007348 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071c2:	60bb      	str	r3, [r7, #8]
       break;
 80071c4:	e0b7      	b.n	8007336 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071c6:	4b60      	ldr	r3, [pc, #384]	; (8007348 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071c8:	60bb      	str	r3, [r7, #8]
      break;
 80071ca:	e0b4      	b.n	8007336 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071cc:	4b5d      	ldr	r3, [pc, #372]	; (8007344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071d6:	4b5b      	ldr	r3, [pc, #364]	; (8007344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d04d      	beq.n	800727e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071e2:	4b58      	ldr	r3, [pc, #352]	; (8007344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	099b      	lsrs	r3, r3, #6
 80071e8:	461a      	mov	r2, r3
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071f2:	f04f 0100 	mov.w	r1, #0
 80071f6:	ea02 0800 	and.w	r8, r2, r0
 80071fa:	ea03 0901 	and.w	r9, r3, r1
 80071fe:	4640      	mov	r0, r8
 8007200:	4649      	mov	r1, r9
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	014b      	lsls	r3, r1, #5
 800720c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007210:	0142      	lsls	r2, r0, #5
 8007212:	4610      	mov	r0, r2
 8007214:	4619      	mov	r1, r3
 8007216:	ebb0 0008 	subs.w	r0, r0, r8
 800721a:	eb61 0109 	sbc.w	r1, r1, r9
 800721e:	f04f 0200 	mov.w	r2, #0
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	018b      	lsls	r3, r1, #6
 8007228:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800722c:	0182      	lsls	r2, r0, #6
 800722e:	1a12      	subs	r2, r2, r0
 8007230:	eb63 0301 	sbc.w	r3, r3, r1
 8007234:	f04f 0000 	mov.w	r0, #0
 8007238:	f04f 0100 	mov.w	r1, #0
 800723c:	00d9      	lsls	r1, r3, #3
 800723e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007242:	00d0      	lsls	r0, r2, #3
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	eb12 0208 	adds.w	r2, r2, r8
 800724c:	eb43 0309 	adc.w	r3, r3, r9
 8007250:	f04f 0000 	mov.w	r0, #0
 8007254:	f04f 0100 	mov.w	r1, #0
 8007258:	0299      	lsls	r1, r3, #10
 800725a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800725e:	0290      	lsls	r0, r2, #10
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	461a      	mov	r2, r3
 800726c:	f04f 0300 	mov.w	r3, #0
 8007270:	f7f9 fd0a 	bl	8000c88 <__aeabi_uldivmod>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4613      	mov	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e04a      	b.n	8007314 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800727e:	4b31      	ldr	r3, [pc, #196]	; (8007344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	099b      	lsrs	r3, r3, #6
 8007284:	461a      	mov	r2, r3
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800728e:	f04f 0100 	mov.w	r1, #0
 8007292:	ea02 0400 	and.w	r4, r2, r0
 8007296:	ea03 0501 	and.w	r5, r3, r1
 800729a:	4620      	mov	r0, r4
 800729c:	4629      	mov	r1, r5
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	f04f 0300 	mov.w	r3, #0
 80072a6:	014b      	lsls	r3, r1, #5
 80072a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072ac:	0142      	lsls	r2, r0, #5
 80072ae:	4610      	mov	r0, r2
 80072b0:	4619      	mov	r1, r3
 80072b2:	1b00      	subs	r0, r0, r4
 80072b4:	eb61 0105 	sbc.w	r1, r1, r5
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	018b      	lsls	r3, r1, #6
 80072c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072c6:	0182      	lsls	r2, r0, #6
 80072c8:	1a12      	subs	r2, r2, r0
 80072ca:	eb63 0301 	sbc.w	r3, r3, r1
 80072ce:	f04f 0000 	mov.w	r0, #0
 80072d2:	f04f 0100 	mov.w	r1, #0
 80072d6:	00d9      	lsls	r1, r3, #3
 80072d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072dc:	00d0      	lsls	r0, r2, #3
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	1912      	adds	r2, r2, r4
 80072e4:	eb45 0303 	adc.w	r3, r5, r3
 80072e8:	f04f 0000 	mov.w	r0, #0
 80072ec:	f04f 0100 	mov.w	r1, #0
 80072f0:	0299      	lsls	r1, r3, #10
 80072f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80072f6:	0290      	lsls	r0, r2, #10
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4610      	mov	r0, r2
 80072fe:	4619      	mov	r1, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	461a      	mov	r2, r3
 8007304:	f04f 0300 	mov.w	r3, #0
 8007308:	f7f9 fcbe 	bl	8000c88 <__aeabi_uldivmod>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4613      	mov	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007314:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	0c1b      	lsrs	r3, r3, #16
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	3301      	adds	r3, #1
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	fbb2 f3f3 	udiv	r3, r2, r3
 800732c:	60bb      	str	r3, [r7, #8]
      break;
 800732e:	e002      	b.n	8007336 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007332:	60bb      	str	r3, [r7, #8]
      break;
 8007334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007336:	68bb      	ldr	r3, [r7, #8]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007342:	bf00      	nop
 8007344:	40023800 	.word	0x40023800
 8007348:	00f42400 	.word	0x00f42400

0800734c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007350:	4b03      	ldr	r3, [pc, #12]	; (8007360 <HAL_RCC_GetHCLKFreq+0x14>)
 8007352:	681b      	ldr	r3, [r3, #0]
}
 8007354:	4618      	mov	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20000000 	.word	0x20000000

08007364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007368:	f7ff fff0 	bl	800734c <HAL_RCC_GetHCLKFreq>
 800736c:	4602      	mov	r2, r0
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	0a9b      	lsrs	r3, r3, #10
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	4903      	ldr	r1, [pc, #12]	; (8007388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800737a:	5ccb      	ldrb	r3, [r1, r3]
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40023800 	.word	0x40023800
 8007388:	0800e7e4 	.word	0x0800e7e4

0800738c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007390:	f7ff ffdc 	bl	800734c <HAL_RCC_GetHCLKFreq>
 8007394:	4602      	mov	r2, r0
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	0b5b      	lsrs	r3, r3, #13
 800739c:	f003 0307 	and.w	r3, r3, #7
 80073a0:	4903      	ldr	r1, [pc, #12]	; (80073b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073a2:	5ccb      	ldrb	r3, [r1, r3]
 80073a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	40023800 	.word	0x40023800
 80073b0:	0800e7e4 	.word	0x0800e7e4

080073b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e07b      	b.n	80074be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d108      	bne.n	80073e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073d6:	d009      	beq.n	80073ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	61da      	str	r2, [r3, #28]
 80073de:	e005      	b.n	80073ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fc f844 	bl	8003494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2202      	movs	r2, #2
 8007410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007422:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	431a      	orrs	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800745c:	431a      	orrs	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007466:	431a      	orrs	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007470:	ea42 0103 	orr.w	r1, r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007478:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	0c1b      	lsrs	r3, r3, #16
 800748a:	f003 0104 	and.w	r1, r3, #4
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	f003 0210 	and.w	r2, r3, #16
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69da      	ldr	r2, [r3, #28]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b088      	sub	sp, #32
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	60f8      	str	r0, [r7, #12]
 80074ce:	60b9      	str	r1, [r7, #8]
 80074d0:	603b      	str	r3, [r7, #0]
 80074d2:	4613      	mov	r3, r2
 80074d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_SPI_Transmit+0x22>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e126      	b.n	8007736 <HAL_SPI_Transmit+0x270>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074f0:	f7fd fb80 	bl	8004bf4 <HAL_GetTick>
 80074f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074f6:	88fb      	ldrh	r3, [r7, #6]
 80074f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b01      	cmp	r3, #1
 8007504:	d002      	beq.n	800750c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007506:	2302      	movs	r3, #2
 8007508:	77fb      	strb	r3, [r7, #31]
    goto error;
 800750a:	e10b      	b.n	8007724 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <HAL_SPI_Transmit+0x52>
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800751c:	e102      	b.n	8007724 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2203      	movs	r2, #3
 8007522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	88fa      	ldrh	r2, [r7, #6]
 8007536:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007564:	d10f      	bne.n	8007586 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007574:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007584:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007590:	2b40      	cmp	r3, #64	; 0x40
 8007592:	d007      	beq.n	80075a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ac:	d14b      	bne.n	8007646 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <HAL_SPI_Transmit+0xf6>
 80075b6:	8afb      	ldrh	r3, [r7, #22]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d13e      	bne.n	800763a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c0:	881a      	ldrh	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	1c9a      	adds	r2, r3, #2
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075e0:	e02b      	b.n	800763a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d112      	bne.n	8007616 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f4:	881a      	ldrh	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	1c9a      	adds	r2, r3, #2
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	86da      	strh	r2, [r3, #54]	; 0x36
 8007614:	e011      	b.n	800763a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007616:	f7fd faed 	bl	8004bf4 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	683a      	ldr	r2, [r7, #0]
 8007622:	429a      	cmp	r2, r3
 8007624:	d803      	bhi.n	800762e <HAL_SPI_Transmit+0x168>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d102      	bne.n	8007634 <HAL_SPI_Transmit+0x16e>
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d102      	bne.n	800763a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007638:	e074      	b.n	8007724 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1ce      	bne.n	80075e2 <HAL_SPI_Transmit+0x11c>
 8007644:	e04c      	b.n	80076e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <HAL_SPI_Transmit+0x18e>
 800764e:	8afb      	ldrh	r3, [r7, #22]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d140      	bne.n	80076d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	330c      	adds	r3, #12
 800765e:	7812      	ldrb	r2, [r2, #0]
 8007660:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800767a:	e02c      	b.n	80076d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b02      	cmp	r3, #2
 8007688:	d113      	bne.n	80076b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	330c      	adds	r3, #12
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80076b0:	e011      	b.n	80076d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076b2:	f7fd fa9f 	bl	8004bf4 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d803      	bhi.n	80076ca <HAL_SPI_Transmit+0x204>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c8:	d102      	bne.n	80076d0 <HAL_SPI_Transmit+0x20a>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d102      	bne.n	80076d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076d4:	e026      	b.n	8007724 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1cd      	bne.n	800767c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	6839      	ldr	r1, [r7, #0]
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fbcb 	bl	8007e80 <SPI_EndRxTxTransaction>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076fe:	2300      	movs	r3, #0
 8007700:	613b      	str	r3, [r7, #16]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	77fb      	strb	r3, [r7, #31]
 8007720:	e000      	b.n	8007724 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007722:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007734:	7ffb      	ldrb	r3, [r7, #31]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3720      	adds	r7, #32
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b088      	sub	sp, #32
 8007742:	af02      	add	r7, sp, #8
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	4613      	mov	r3, r2
 800774c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800775a:	d112      	bne.n	8007782 <HAL_SPI_Receive+0x44>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10e      	bne.n	8007782 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2204      	movs	r2, #4
 8007768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800776c:	88fa      	ldrh	r2, [r7, #6]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f8f1 	bl	8007960 <HAL_SPI_TransmitReceive>
 800777e:	4603      	mov	r3, r0
 8007780:	e0ea      	b.n	8007958 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_SPI_Receive+0x52>
 800778c:	2302      	movs	r3, #2
 800778e:	e0e3      	b.n	8007958 <HAL_SPI_Receive+0x21a>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007798:	f7fd fa2c 	bl	8004bf4 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d002      	beq.n	80077b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
 80077ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077ae:	e0ca      	b.n	8007946 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <HAL_SPI_Receive+0x7e>
 80077b6:	88fb      	ldrh	r3, [r7, #6]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077c0:	e0c1      	b.n	8007946 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2204      	movs	r2, #4
 80077c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	88fa      	ldrh	r2, [r7, #6]
 80077da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	88fa      	ldrh	r2, [r7, #6]
 80077e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007808:	d10f      	bne.n	800782a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007818:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007828:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007834:	2b40      	cmp	r3, #64	; 0x40
 8007836:	d007      	beq.n	8007848 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007846:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d162      	bne.n	8007916 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007850:	e02e      	b.n	80078b0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f003 0301 	and.w	r3, r3, #1
 800785c:	2b01      	cmp	r3, #1
 800785e:	d115      	bne.n	800788c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f103 020c 	add.w	r2, r3, #12
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	7812      	ldrb	r2, [r2, #0]
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	87da      	strh	r2, [r3, #62]	; 0x3e
 800788a:	e011      	b.n	80078b0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800788c:	f7fd f9b2 	bl	8004bf4 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d803      	bhi.n	80078a4 <HAL_SPI_Receive+0x166>
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a2:	d102      	bne.n	80078aa <HAL_SPI_Receive+0x16c>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d102      	bne.n	80078b0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078ae:	e04a      	b.n	8007946 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1cb      	bne.n	8007852 <HAL_SPI_Receive+0x114>
 80078ba:	e031      	b.n	8007920 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d113      	bne.n	80078f2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68da      	ldr	r2, [r3, #12]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	b292      	uxth	r2, r2
 80078d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078dc:	1c9a      	adds	r2, r3, #2
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078f0:	e011      	b.n	8007916 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078f2:	f7fd f97f 	bl	8004bf4 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d803      	bhi.n	800790a <HAL_SPI_Receive+0x1cc>
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007908:	d102      	bne.n	8007910 <HAL_SPI_Receive+0x1d2>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007914:	e017      	b.n	8007946 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1cd      	bne.n	80078bc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 fa45 	bl	8007db4 <SPI_EndRxTransaction>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2220      	movs	r2, #32
 8007934:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793a:	2b00      	cmp	r3, #0
 800793c:	d002      	beq.n	8007944 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	75fb      	strb	r3, [r7, #23]
 8007942:	e000      	b.n	8007946 <HAL_SPI_Receive+0x208>
  }

error :
 8007944:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007956:	7dfb      	ldrb	r3, [r7, #23]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3718      	adds	r7, #24
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08c      	sub	sp, #48	; 0x30
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800796e:	2301      	movs	r3, #1
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_SPI_TransmitReceive+0x26>
 8007982:	2302      	movs	r3, #2
 8007984:	e18a      	b.n	8007c9c <HAL_SPI_TransmitReceive+0x33c>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800798e:	f7fd f931 	bl	8004bf4 <HAL_GetTick>
 8007992:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800799a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80079a4:	887b      	ldrh	r3, [r7, #2]
 80079a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d00f      	beq.n	80079d0 <HAL_SPI_TransmitReceive+0x70>
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079b6:	d107      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d103      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x68>
 80079c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d003      	beq.n	80079d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80079c8:	2302      	movs	r3, #2
 80079ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079ce:	e15b      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x82>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_SPI_TransmitReceive+0x82>
 80079dc:	887b      	ldrh	r3, [r7, #2]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d103      	bne.n	80079ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079e8:	e14e      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	d003      	beq.n	80079fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2205      	movs	r2, #5
 80079fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	887a      	ldrh	r2, [r7, #2]
 8007a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	887a      	ldrh	r2, [r7, #2]
 8007a14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	887a      	ldrh	r2, [r7, #2]
 8007a20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	887a      	ldrh	r2, [r7, #2]
 8007a26:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3e:	2b40      	cmp	r3, #64	; 0x40
 8007a40:	d007      	beq.n	8007a52 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a5a:	d178      	bne.n	8007b4e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <HAL_SPI_TransmitReceive+0x10a>
 8007a64:	8b7b      	ldrh	r3, [r7, #26]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d166      	bne.n	8007b38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	881a      	ldrh	r2, [r3, #0]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7a:	1c9a      	adds	r2, r3, #2
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	3b01      	subs	r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a8e:	e053      	b.n	8007b38 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d11b      	bne.n	8007ad6 <HAL_SPI_TransmitReceive+0x176>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d016      	beq.n	8007ad6 <HAL_SPI_TransmitReceive+0x176>
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d113      	bne.n	8007ad6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	881a      	ldrh	r2, [r3, #0]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abe:	1c9a      	adds	r2, r3, #2
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d119      	bne.n	8007b18 <HAL_SPI_TransmitReceive+0x1b8>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d014      	beq.n	8007b18 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	b292      	uxth	r2, r2
 8007afa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	1c9a      	adds	r2, r3, #2
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b14:	2301      	movs	r3, #1
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b18:	f7fd f86c 	bl	8004bf4 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d807      	bhi.n	8007b38 <HAL_SPI_TransmitReceive+0x1d8>
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2e:	d003      	beq.n	8007b38 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b36:	e0a7      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1a6      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x130>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1a1      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x130>
 8007b4c:	e07c      	b.n	8007c48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <HAL_SPI_TransmitReceive+0x1fc>
 8007b56:	8b7b      	ldrh	r3, [r7, #26]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d16b      	bne.n	8007c34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	330c      	adds	r3, #12
 8007b66:	7812      	ldrb	r2, [r2, #0]
 8007b68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	1c5a      	adds	r2, r3, #1
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b82:	e057      	b.n	8007c34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d11c      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x26c>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d017      	beq.n	8007bcc <HAL_SPI_TransmitReceive+0x26c>
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d114      	bne.n	8007bcc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	330c      	adds	r3, #12
 8007bac:	7812      	ldrb	r2, [r2, #0]
 8007bae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d119      	bne.n	8007c0e <HAL_SPI_TransmitReceive+0x2ae>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d014      	beq.n	8007c0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c0e:	f7fc fff1 	bl	8004bf4 <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d803      	bhi.n	8007c26 <HAL_SPI_TransmitReceive+0x2c6>
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d102      	bne.n	8007c2c <HAL_SPI_TransmitReceive+0x2cc>
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d103      	bne.n	8007c34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c32:	e029      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1a2      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x224>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d19d      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 f917 	bl	8007e80 <SPI_EndRxTxTransaction>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d006      	beq.n	8007c66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2220      	movs	r2, #32
 8007c62:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c64:	e010      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10b      	bne.n	8007c86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c6e:	2300      	movs	r3, #0
 8007c70:	617b      	str	r3, [r7, #20]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	617b      	str	r3, [r7, #20]
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	e000      	b.n	8007c88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007c86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3730      	adds	r7, #48	; 0x30
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007cb4:	f7fc ff9e 	bl	8004bf4 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	1a9b      	subs	r3, r3, r2
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cc4:	f7fc ff96 	bl	8004bf4 <HAL_GetTick>
 8007cc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cca:	4b39      	ldr	r3, [pc, #228]	; (8007db0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	015b      	lsls	r3, r3, #5
 8007cd0:	0d1b      	lsrs	r3, r3, #20
 8007cd2:	69fa      	ldr	r2, [r7, #28]
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
 8007cd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cda:	e054      	b.n	8007d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce2:	d050      	beq.n	8007d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ce4:	f7fc ff86 	bl	8004bf4 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d902      	bls.n	8007cfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d13d      	bne.n	8007d76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d12:	d111      	bne.n	8007d38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d1c:	d004      	beq.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d26:	d107      	bne.n	8007d38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d40:	d10f      	bne.n	8007d62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e017      	b.n	8007da6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	bf0c      	ite	eq
 8007d96:	2301      	moveq	r3, #1
 8007d98:	2300      	movne	r3, #0
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	79fb      	ldrb	r3, [r7, #7]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d19b      	bne.n	8007cdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20000000 	.word	0x20000000

08007db4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dc8:	d111      	bne.n	8007dee <SPI_EndRxTransaction+0x3a>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dd2:	d004      	beq.n	8007dde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ddc:	d107      	bne.n	8007dee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007df6:	d12a      	bne.n	8007e4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e00:	d012      	beq.n	8007e28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2180      	movs	r1, #128	; 0x80
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f7ff ff49 	bl	8007ca4 <SPI_WaitFlagStateUntilTimeout>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d02d      	beq.n	8007e74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1c:	f043 0220 	orr.w	r2, r3, #32
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e026      	b.n	8007e76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2101      	movs	r1, #1
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff ff36 	bl	8007ca4 <SPI_WaitFlagStateUntilTimeout>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01a      	beq.n	8007e74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e42:	f043 0220 	orr.w	r2, r3, #32
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e013      	b.n	8007e76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2200      	movs	r2, #0
 8007e56:	2101      	movs	r1, #1
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f7ff ff23 	bl	8007ca4 <SPI_WaitFlagStateUntilTimeout>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d007      	beq.n	8007e74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e68:	f043 0220 	orr.w	r2, r3, #32
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e000      	b.n	8007e76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af02      	add	r7, sp, #8
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e8c:	4b1b      	ldr	r3, [pc, #108]	; (8007efc <SPI_EndRxTxTransaction+0x7c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a1b      	ldr	r2, [pc, #108]	; (8007f00 <SPI_EndRxTxTransaction+0x80>)
 8007e92:	fba2 2303 	umull	r2, r3, r2, r3
 8007e96:	0d5b      	lsrs	r3, r3, #21
 8007e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e9c:	fb02 f303 	mul.w	r3, r2, r3
 8007ea0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eaa:	d112      	bne.n	8007ed2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	2180      	movs	r1, #128	; 0x80
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7ff fef4 	bl	8007ca4 <SPI_WaitFlagStateUntilTimeout>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d016      	beq.n	8007ef0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec6:	f043 0220 	orr.w	r2, r3, #32
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e00f      	b.n	8007ef2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00a      	beq.n	8007eee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee8:	2b80      	cmp	r3, #128	; 0x80
 8007eea:	d0f2      	beq.n	8007ed2 <SPI_EndRxTxTransaction+0x52>
 8007eec:	e000      	b.n	8007ef0 <SPI_EndRxTxTransaction+0x70>
        break;
 8007eee:	bf00      	nop
  }

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000000 	.word	0x20000000
 8007f00:	165e9f81 	.word	0x165e9f81

08007f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e041      	b.n	8007f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d106      	bne.n	8007f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7fb fbaa 	bl	8003684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4619      	mov	r1, r3
 8007f42:	4610      	mov	r0, r2
 8007f44:	f000 fe12 	bl	8008b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d001      	beq.n	8007fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e04e      	b.n	800805a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a23      	ldr	r2, [pc, #140]	; (8008068 <HAL_TIM_Base_Start_IT+0xc4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d022      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe6:	d01d      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a1f      	ldr	r2, [pc, #124]	; (800806c <HAL_TIM_Base_Start_IT+0xc8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d018      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a1e      	ldr	r2, [pc, #120]	; (8008070 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d013      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a1c      	ldr	r2, [pc, #112]	; (8008074 <HAL_TIM_Base_Start_IT+0xd0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00e      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a1b      	ldr	r2, [pc, #108]	; (8008078 <HAL_TIM_Base_Start_IT+0xd4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d009      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a19      	ldr	r2, [pc, #100]	; (800807c <HAL_TIM_Base_Start_IT+0xd8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d004      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a18      	ldr	r2, [pc, #96]	; (8008080 <HAL_TIM_Base_Start_IT+0xdc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d111      	bne.n	8008048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b06      	cmp	r3, #6
 8008034:	d010      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0201 	orr.w	r2, r2, #1
 8008044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008046:	e007      	b.n	8008058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0201 	orr.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	40010000 	.word	0x40010000
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800
 8008074:	40000c00 	.word	0x40000c00
 8008078:	40010400 	.word	0x40010400
 800807c:	40014000 	.word	0x40014000
 8008080:	40001800 	.word	0x40001800

08008084 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0201 	bic.w	r2, r2, #1
 800809a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6a1a      	ldr	r2, [r3, #32]
 80080a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80080a6:	4013      	ands	r3, r2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10f      	bne.n	80080cc <HAL_TIM_Base_Stop_IT+0x48>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6a1a      	ldr	r2, [r3, #32]
 80080b2:	f240 4344 	movw	r3, #1092	; 0x444
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d107      	bne.n	80080cc <HAL_TIM_Base_Stop_IT+0x48>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e041      	b.n	8008178 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d106      	bne.n	800810e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7fb fa99 	bl	8003640 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3304      	adds	r3, #4
 800811e:	4619      	mov	r1, r3
 8008120:	4610      	mov	r0, r2
 8008122:	f000 fd23 	bl	8008b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <HAL_TIM_PWM_Start+0x24>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b01      	cmp	r3, #1
 800819a:	bf14      	ite	ne
 800819c:	2301      	movne	r3, #1
 800819e:	2300      	moveq	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	e022      	b.n	80081ea <HAL_TIM_PWM_Start+0x6a>
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d109      	bne.n	80081be <HAL_TIM_PWM_Start+0x3e>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	bf14      	ite	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	2300      	moveq	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	e015      	b.n	80081ea <HAL_TIM_PWM_Start+0x6a>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2b08      	cmp	r3, #8
 80081c2:	d109      	bne.n	80081d8 <HAL_TIM_PWM_Start+0x58>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	bf14      	ite	ne
 80081d0:	2301      	movne	r3, #1
 80081d2:	2300      	moveq	r3, #0
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	e008      	b.n	80081ea <HAL_TIM_PWM_Start+0x6a>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	bf14      	ite	ne
 80081e4:	2301      	movne	r3, #1
 80081e6:	2300      	moveq	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e07c      	b.n	80082ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d104      	bne.n	8008202 <HAL_TIM_PWM_Start+0x82>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008200:	e013      	b.n	800822a <HAL_TIM_PWM_Start+0xaa>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b04      	cmp	r3, #4
 8008206:	d104      	bne.n	8008212 <HAL_TIM_PWM_Start+0x92>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008210:	e00b      	b.n	800822a <HAL_TIM_PWM_Start+0xaa>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b08      	cmp	r3, #8
 8008216:	d104      	bne.n	8008222 <HAL_TIM_PWM_Start+0xa2>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008220:	e003      	b.n	800822a <HAL_TIM_PWM_Start+0xaa>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2202      	movs	r2, #2
 8008226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2201      	movs	r2, #1
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f000 feea 	bl	800900c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a2d      	ldr	r2, [pc, #180]	; (80082f4 <HAL_TIM_PWM_Start+0x174>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d004      	beq.n	800824c <HAL_TIM_PWM_Start+0xcc>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a2c      	ldr	r2, [pc, #176]	; (80082f8 <HAL_TIM_PWM_Start+0x178>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d101      	bne.n	8008250 <HAL_TIM_PWM_Start+0xd0>
 800824c:	2301      	movs	r3, #1
 800824e:	e000      	b.n	8008252 <HAL_TIM_PWM_Start+0xd2>
 8008250:	2300      	movs	r3, #0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a22      	ldr	r2, [pc, #136]	; (80082f4 <HAL_TIM_PWM_Start+0x174>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d022      	beq.n	80082b6 <HAL_TIM_PWM_Start+0x136>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008278:	d01d      	beq.n	80082b6 <HAL_TIM_PWM_Start+0x136>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a1f      	ldr	r2, [pc, #124]	; (80082fc <HAL_TIM_PWM_Start+0x17c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d018      	beq.n	80082b6 <HAL_TIM_PWM_Start+0x136>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a1d      	ldr	r2, [pc, #116]	; (8008300 <HAL_TIM_PWM_Start+0x180>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <HAL_TIM_PWM_Start+0x136>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a1c      	ldr	r2, [pc, #112]	; (8008304 <HAL_TIM_PWM_Start+0x184>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d00e      	beq.n	80082b6 <HAL_TIM_PWM_Start+0x136>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <HAL_TIM_PWM_Start+0x178>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d009      	beq.n	80082b6 <HAL_TIM_PWM_Start+0x136>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a18      	ldr	r2, [pc, #96]	; (8008308 <HAL_TIM_PWM_Start+0x188>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d004      	beq.n	80082b6 <HAL_TIM_PWM_Start+0x136>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a16      	ldr	r2, [pc, #88]	; (800830c <HAL_TIM_PWM_Start+0x18c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d111      	bne.n	80082da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2b06      	cmp	r3, #6
 80082c6:	d010      	beq.n	80082ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d8:	e007      	b.n	80082ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f042 0201 	orr.w	r2, r2, #1
 80082e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40010000 	.word	0x40010000
 80082f8:	40010400 	.word	0x40010400
 80082fc:	40000400 	.word	0x40000400
 8008300:	40000800 	.word	0x40000800
 8008304:	40000c00 	.word	0x40000c00
 8008308:	40014000 	.word	0x40014000
 800830c:	40001800 	.word	0x40001800

08008310 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2200      	movs	r2, #0
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fe72 	bl	800900c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a2e      	ldr	r2, [pc, #184]	; (80083e8 <HAL_TIM_PWM_Stop+0xd8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_TIM_PWM_Stop+0x2c>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a2d      	ldr	r2, [pc, #180]	; (80083ec <HAL_TIM_PWM_Stop+0xdc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d101      	bne.n	8008340 <HAL_TIM_PWM_Stop+0x30>
 800833c:	2301      	movs	r3, #1
 800833e:	e000      	b.n	8008342 <HAL_TIM_PWM_Stop+0x32>
 8008340:	2300      	movs	r3, #0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d017      	beq.n	8008376 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6a1a      	ldr	r2, [r3, #32]
 800834c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008350:	4013      	ands	r3, r2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10f      	bne.n	8008376 <HAL_TIM_PWM_Stop+0x66>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6a1a      	ldr	r2, [r3, #32]
 800835c:	f240 4344 	movw	r3, #1092	; 0x444
 8008360:	4013      	ands	r3, r2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d107      	bne.n	8008376 <HAL_TIM_PWM_Stop+0x66>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008374:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6a1a      	ldr	r2, [r3, #32]
 800837c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008380:	4013      	ands	r3, r2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10f      	bne.n	80083a6 <HAL_TIM_PWM_Stop+0x96>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6a1a      	ldr	r2, [r3, #32]
 800838c:	f240 4344 	movw	r3, #1092	; 0x444
 8008390:	4013      	ands	r3, r2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d107      	bne.n	80083a6 <HAL_TIM_PWM_Stop+0x96>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_PWM_Stop+0xa6>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083b4:	e013      	b.n	80083de <HAL_TIM_PWM_Stop+0xce>
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d104      	bne.n	80083c6 <HAL_TIM_PWM_Stop+0xb6>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083c4:	e00b      	b.n	80083de <HAL_TIM_PWM_Stop+0xce>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d104      	bne.n	80083d6 <HAL_TIM_PWM_Stop+0xc6>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083d4:	e003      	b.n	80083de <HAL_TIM_PWM_Stop+0xce>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	40010000 	.word	0x40010000
 80083ec:	40010400 	.word	0x40010400

080083f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e097      	b.n	8008534 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d106      	bne.n	800841e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7fb f883 	bl	8003524 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2202      	movs	r2, #2
 8008422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008434:	f023 0307 	bic.w	r3, r3, #7
 8008438:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3304      	adds	r3, #4
 8008442:	4619      	mov	r1, r3
 8008444:	4610      	mov	r0, r2
 8008446:	f000 fb91 	bl	8008b6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008472:	f023 0303 	bic.w	r3, r3, #3
 8008476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	021b      	lsls	r3, r3, #8
 8008482:	4313      	orrs	r3, r2
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008490:	f023 030c 	bic.w	r3, r3, #12
 8008494:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800849c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	021b      	lsls	r3, r3, #8
 80084ac:	4313      	orrs	r3, r2
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	011a      	lsls	r2, r3, #4
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	031b      	lsls	r3, r3, #12
 80084c0:	4313      	orrs	r3, r2
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80084ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80084d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	695b      	ldr	r3, [r3, #20]
 80084e0:	011b      	lsls	r3, r3, #4
 80084e2:	4313      	orrs	r3, r2
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800854c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008554:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800855c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008564:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d110      	bne.n	800858e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800856c:	7bfb      	ldrb	r3, [r7, #15]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d102      	bne.n	8008578 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008572:	7b7b      	ldrb	r3, [r7, #13]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d001      	beq.n	800857c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e069      	b.n	8008650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800858c:	e031      	b.n	80085f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b04      	cmp	r3, #4
 8008592:	d110      	bne.n	80085b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d102      	bne.n	80085a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800859a:	7b3b      	ldrb	r3, [r7, #12]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d001      	beq.n	80085a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e055      	b.n	8008650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085b4:	e01d      	b.n	80085f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d108      	bne.n	80085ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d105      	bne.n	80085ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085c2:	7b7b      	ldrb	r3, [r7, #13]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d102      	bne.n	80085ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80085c8:	7b3b      	ldrb	r3, [r7, #12]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d001      	beq.n	80085d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e03e      	b.n	8008650 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2202      	movs	r2, #2
 80085d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2202      	movs	r2, #2
 80085de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2202      	movs	r2, #2
 80085e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2202      	movs	r2, #2
 80085ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_TIM_Encoder_Start+0xc4>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d008      	beq.n	8008610 <HAL_TIM_Encoder_Start+0xd4>
 80085fe:	e00f      	b.n	8008620 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2201      	movs	r2, #1
 8008606:	2100      	movs	r1, #0
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fcff 	bl	800900c <TIM_CCxChannelCmd>
      break;
 800860e:	e016      	b.n	800863e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2201      	movs	r2, #1
 8008616:	2104      	movs	r1, #4
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fcf7 	bl	800900c <TIM_CCxChannelCmd>
      break;
 800861e:	e00e      	b.n	800863e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2201      	movs	r2, #1
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fcef 	bl	800900c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2201      	movs	r2, #1
 8008634:	2104      	movs	r1, #4
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fce8 	bl	800900c <TIM_CCxChannelCmd>
      break;
 800863c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 0201 	orr.w	r2, r2, #1
 800864c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <HAL_TIM_Encoder_Stop+0x18>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2b04      	cmp	r3, #4
 800866c:	d008      	beq.n	8008680 <HAL_TIM_Encoder_Stop+0x28>
 800866e:	e00f      	b.n	8008690 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2200      	movs	r2, #0
 8008676:	2100      	movs	r1, #0
 8008678:	4618      	mov	r0, r3
 800867a:	f000 fcc7 	bl	800900c <TIM_CCxChannelCmd>
      break;
 800867e:	e016      	b.n	80086ae <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2200      	movs	r2, #0
 8008686:	2104      	movs	r1, #4
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fcbf 	bl	800900c <TIM_CCxChannelCmd>
      break;
 800868e:	e00e      	b.n	80086ae <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	4618      	mov	r0, r3
 800869a:	f000 fcb7 	bl	800900c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2200      	movs	r2, #0
 80086a4:	2104      	movs	r1, #4
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fcb0 	bl	800900c <TIM_CCxChannelCmd>
      break;
 80086ac:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	6a1a      	ldr	r2, [r3, #32]
 80086b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10f      	bne.n	80086de <HAL_TIM_Encoder_Stop+0x86>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	6a1a      	ldr	r2, [r3, #32]
 80086c4:	f240 4344 	movw	r3, #1092	; 0x444
 80086c8:	4013      	ands	r3, r2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d107      	bne.n	80086de <HAL_TIM_Encoder_Stop+0x86>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0201 	bic.w	r2, r2, #1
 80086dc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <HAL_TIM_Encoder_Stop+0x92>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d138      	bne.n	800875c <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_Encoder_Stop+0xa2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086f8:	e013      	b.n	8008722 <HAL_TIM_Encoder_Stop+0xca>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2b04      	cmp	r3, #4
 80086fe:	d104      	bne.n	800870a <HAL_TIM_Encoder_Stop+0xb2>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008708:	e00b      	b.n	8008722 <HAL_TIM_Encoder_Stop+0xca>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	2b08      	cmp	r3, #8
 800870e:	d104      	bne.n	800871a <HAL_TIM_Encoder_Stop+0xc2>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008718:	e003      	b.n	8008722 <HAL_TIM_Encoder_Stop+0xca>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <HAL_TIM_Encoder_Stop+0xda>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008730:	e024      	b.n	800877c <HAL_TIM_Encoder_Stop+0x124>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b04      	cmp	r3, #4
 8008736:	d104      	bne.n	8008742 <HAL_TIM_Encoder_Stop+0xea>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008740:	e01c      	b.n	800877c <HAL_TIM_Encoder_Stop+0x124>
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2b08      	cmp	r3, #8
 8008746:	d104      	bne.n	8008752 <HAL_TIM_Encoder_Stop+0xfa>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008750:	e014      	b.n	800877c <HAL_TIM_Encoder_Stop+0x124>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800875a:	e00f      	b.n	800877c <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b02      	cmp	r3, #2
 800879a:	d122      	bne.n	80087e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d11b      	bne.n	80087e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f06f 0202 	mvn.w	r2, #2
 80087b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	f003 0303 	and.w	r3, r3, #3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d003      	beq.n	80087d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f9b1 	bl	8008b30 <HAL_TIM_IC_CaptureCallback>
 80087ce:	e005      	b.n	80087dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f9a3 	bl	8008b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f9b4 	bl	8008b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d122      	bne.n	8008836 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	f003 0304 	and.w	r3, r3, #4
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	d11b      	bne.n	8008836 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f06f 0204 	mvn.w	r2, #4
 8008806:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2202      	movs	r2, #2
 800880c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f987 	bl	8008b30 <HAL_TIM_IC_CaptureCallback>
 8008822:	e005      	b.n	8008830 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f979 	bl	8008b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f98a 	bl	8008b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	2b08      	cmp	r3, #8
 8008842:	d122      	bne.n	800888a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f003 0308 	and.w	r3, r3, #8
 800884e:	2b08      	cmp	r3, #8
 8008850:	d11b      	bne.n	800888a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f06f 0208 	mvn.w	r2, #8
 800885a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2204      	movs	r2, #4
 8008860:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	f003 0303 	and.w	r3, r3, #3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f95d 	bl	8008b30 <HAL_TIM_IC_CaptureCallback>
 8008876:	e005      	b.n	8008884 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f94f 	bl	8008b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f960 	bl	8008b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b10      	cmp	r3, #16
 8008896:	d122      	bne.n	80088de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f003 0310 	and.w	r3, r3, #16
 80088a2:	2b10      	cmp	r3, #16
 80088a4:	d11b      	bne.n	80088de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f06f 0210 	mvn.w	r2, #16
 80088ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2208      	movs	r2, #8
 80088b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f933 	bl	8008b30 <HAL_TIM_IC_CaptureCallback>
 80088ca:	e005      	b.n	80088d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 f925 	bl	8008b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f936 	bl	8008b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d10e      	bne.n	800890a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d107      	bne.n	800890a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f06f 0201 	mvn.w	r2, #1
 8008902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7f9 fbbd 	bl	8002084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008914:	2b80      	cmp	r3, #128	; 0x80
 8008916:	d10e      	bne.n	8008936 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008922:	2b80      	cmp	r3, #128	; 0x80
 8008924:	d107      	bne.n	8008936 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800892e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fc17 	bl	8009164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008940:	2b40      	cmp	r3, #64	; 0x40
 8008942:	d10e      	bne.n	8008962 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894e:	2b40      	cmp	r3, #64	; 0x40
 8008950:	d107      	bne.n	8008962 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800895a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f8fb 	bl	8008b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	f003 0320 	and.w	r3, r3, #32
 800896c:	2b20      	cmp	r3, #32
 800896e:	d10e      	bne.n	800898e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f003 0320 	and.w	r3, r3, #32
 800897a:	2b20      	cmp	r3, #32
 800897c:	d107      	bne.n	800898e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f06f 0220 	mvn.w	r2, #32
 8008986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fbe1 	bl	8009150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
	...

08008998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d101      	bne.n	80089b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089b2:	2302      	movs	r3, #2
 80089b4:	e0ae      	b.n	8008b14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b0c      	cmp	r3, #12
 80089c2:	f200 809f 	bhi.w	8008b04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80089c6:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	08008a01 	.word	0x08008a01
 80089d0:	08008b05 	.word	0x08008b05
 80089d4:	08008b05 	.word	0x08008b05
 80089d8:	08008b05 	.word	0x08008b05
 80089dc:	08008a41 	.word	0x08008a41
 80089e0:	08008b05 	.word	0x08008b05
 80089e4:	08008b05 	.word	0x08008b05
 80089e8:	08008b05 	.word	0x08008b05
 80089ec:	08008a83 	.word	0x08008a83
 80089f0:	08008b05 	.word	0x08008b05
 80089f4:	08008b05 	.word	0x08008b05
 80089f8:	08008b05 	.word	0x08008b05
 80089fc:	08008ac3 	.word	0x08008ac3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 f950 	bl	8008cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0208 	orr.w	r2, r2, #8
 8008a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0204 	bic.w	r2, r2, #4
 8008a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6999      	ldr	r1, [r3, #24]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	691a      	ldr	r2, [r3, #16]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	619a      	str	r2, [r3, #24]
      break;
 8008a3e:	e064      	b.n	8008b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68b9      	ldr	r1, [r7, #8]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 f9a0 	bl	8008d8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6999      	ldr	r1, [r3, #24]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	021a      	lsls	r2, r3, #8
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	619a      	str	r2, [r3, #24]
      break;
 8008a80:	e043      	b.n	8008b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 f9f5 	bl	8008e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69da      	ldr	r2, [r3, #28]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f042 0208 	orr.w	r2, r2, #8
 8008a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69da      	ldr	r2, [r3, #28]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f022 0204 	bic.w	r2, r2, #4
 8008aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69d9      	ldr	r1, [r3, #28]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	691a      	ldr	r2, [r3, #16]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	61da      	str	r2, [r3, #28]
      break;
 8008ac0:	e023      	b.n	8008b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fa49 	bl	8008f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	69da      	ldr	r2, [r3, #28]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69da      	ldr	r2, [r3, #28]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69d9      	ldr	r1, [r3, #28]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	021a      	lsls	r2, r3, #8
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	61da      	str	r2, [r3, #28]
      break;
 8008b02:	e002      	b.n	8008b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	75fb      	strb	r3, [r7, #23]
      break;
 8008b08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a40      	ldr	r2, [pc, #256]	; (8008c80 <TIM_Base_SetConfig+0x114>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d013      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b8a:	d00f      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a3d      	ldr	r2, [pc, #244]	; (8008c84 <TIM_Base_SetConfig+0x118>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d00b      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a3c      	ldr	r2, [pc, #240]	; (8008c88 <TIM_Base_SetConfig+0x11c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d007      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a3b      	ldr	r2, [pc, #236]	; (8008c8c <TIM_Base_SetConfig+0x120>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d003      	beq.n	8008bac <TIM_Base_SetConfig+0x40>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a3a      	ldr	r2, [pc, #232]	; (8008c90 <TIM_Base_SetConfig+0x124>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d108      	bne.n	8008bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a2f      	ldr	r2, [pc, #188]	; (8008c80 <TIM_Base_SetConfig+0x114>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d02b      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bcc:	d027      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a2c      	ldr	r2, [pc, #176]	; (8008c84 <TIM_Base_SetConfig+0x118>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d023      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a2b      	ldr	r2, [pc, #172]	; (8008c88 <TIM_Base_SetConfig+0x11c>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d01f      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a2a      	ldr	r2, [pc, #168]	; (8008c8c <TIM_Base_SetConfig+0x120>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d01b      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a29      	ldr	r2, [pc, #164]	; (8008c90 <TIM_Base_SetConfig+0x124>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d017      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a28      	ldr	r2, [pc, #160]	; (8008c94 <TIM_Base_SetConfig+0x128>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d013      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a27      	ldr	r2, [pc, #156]	; (8008c98 <TIM_Base_SetConfig+0x12c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d00f      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a26      	ldr	r2, [pc, #152]	; (8008c9c <TIM_Base_SetConfig+0x130>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d00b      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a25      	ldr	r2, [pc, #148]	; (8008ca0 <TIM_Base_SetConfig+0x134>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d007      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a24      	ldr	r2, [pc, #144]	; (8008ca4 <TIM_Base_SetConfig+0x138>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d003      	beq.n	8008c1e <TIM_Base_SetConfig+0xb2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a23      	ldr	r2, [pc, #140]	; (8008ca8 <TIM_Base_SetConfig+0x13c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d108      	bne.n	8008c30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a0a      	ldr	r2, [pc, #40]	; (8008c80 <TIM_Base_SetConfig+0x114>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_Base_SetConfig+0xf8>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a0c      	ldr	r2, [pc, #48]	; (8008c90 <TIM_Base_SetConfig+0x124>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d103      	bne.n	8008c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	615a      	str	r2, [r3, #20]
}
 8008c72:	bf00      	nop
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40000c00 	.word	0x40000c00
 8008c90:	40010400 	.word	0x40010400
 8008c94:	40014000 	.word	0x40014000
 8008c98:	40014400 	.word	0x40014400
 8008c9c:	40014800 	.word	0x40014800
 8008ca0:	40001800 	.word	0x40001800
 8008ca4:	40001c00 	.word	0x40001c00
 8008ca8:	40002000 	.word	0x40002000

08008cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	f023 0201 	bic.w	r2, r3, #1
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0303 	bic.w	r3, r3, #3
 8008ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f023 0302 	bic.w	r3, r3, #2
 8008cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a20      	ldr	r2, [pc, #128]	; (8008d84 <TIM_OC1_SetConfig+0xd8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d003      	beq.n	8008d10 <TIM_OC1_SetConfig+0x64>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a1f      	ldr	r2, [pc, #124]	; (8008d88 <TIM_OC1_SetConfig+0xdc>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d10c      	bne.n	8008d2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 0308 	bic.w	r3, r3, #8
 8008d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f023 0304 	bic.w	r3, r3, #4
 8008d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a15      	ldr	r2, [pc, #84]	; (8008d84 <TIM_OC1_SetConfig+0xd8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d003      	beq.n	8008d3a <TIM_OC1_SetConfig+0x8e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a14      	ldr	r2, [pc, #80]	; (8008d88 <TIM_OC1_SetConfig+0xdc>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d111      	bne.n	8008d5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	693a      	ldr	r2, [r7, #16]
 8008d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	621a      	str	r2, [r3, #32]
}
 8008d78:	bf00      	nop
 8008d7a:	371c      	adds	r7, #28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	40010000 	.word	0x40010000
 8008d88:	40010400 	.word	0x40010400

08008d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	f023 0210 	bic.w	r2, r3, #16
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f023 0320 	bic.w	r3, r3, #32
 8008dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	011b      	lsls	r3, r3, #4
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a22      	ldr	r2, [pc, #136]	; (8008e70 <TIM_OC2_SetConfig+0xe4>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d003      	beq.n	8008df4 <TIM_OC2_SetConfig+0x68>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a21      	ldr	r2, [pc, #132]	; (8008e74 <TIM_OC2_SetConfig+0xe8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d10d      	bne.n	8008e10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a17      	ldr	r2, [pc, #92]	; (8008e70 <TIM_OC2_SetConfig+0xe4>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d003      	beq.n	8008e20 <TIM_OC2_SetConfig+0x94>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a16      	ldr	r2, [pc, #88]	; (8008e74 <TIM_OC2_SetConfig+0xe8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d113      	bne.n	8008e48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	699b      	ldr	r3, [r3, #24]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	697a      	ldr	r2, [r7, #20]
 8008e60:	621a      	str	r2, [r3, #32]
}
 8008e62:	bf00      	nop
 8008e64:	371c      	adds	r7, #28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40010000 	.word	0x40010000
 8008e74:	40010400 	.word	0x40010400

08008e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a1b      	ldr	r3, [r3, #32]
 8008e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a21      	ldr	r2, [pc, #132]	; (8008f58 <TIM_OC3_SetConfig+0xe0>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d003      	beq.n	8008ede <TIM_OC3_SetConfig+0x66>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a20      	ldr	r2, [pc, #128]	; (8008f5c <TIM_OC3_SetConfig+0xe4>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d10d      	bne.n	8008efa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	021b      	lsls	r3, r3, #8
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a16      	ldr	r2, [pc, #88]	; (8008f58 <TIM_OC3_SetConfig+0xe0>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d003      	beq.n	8008f0a <TIM_OC3_SetConfig+0x92>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a15      	ldr	r2, [pc, #84]	; (8008f5c <TIM_OC3_SetConfig+0xe4>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d113      	bne.n	8008f32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	621a      	str	r2, [r3, #32]
}
 8008f4c:	bf00      	nop
 8008f4e:	371c      	adds	r7, #28
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	40010000 	.word	0x40010000
 8008f5c:	40010400 	.word	0x40010400

08008f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	031b      	lsls	r3, r3, #12
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a12      	ldr	r2, [pc, #72]	; (8009004 <TIM_OC4_SetConfig+0xa4>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d003      	beq.n	8008fc8 <TIM_OC4_SetConfig+0x68>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a11      	ldr	r2, [pc, #68]	; (8009008 <TIM_OC4_SetConfig+0xa8>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d109      	bne.n	8008fdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	019b      	lsls	r3, r3, #6
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	621a      	str	r2, [r3, #32]
}
 8008ff6:	bf00      	nop
 8008ff8:	371c      	adds	r7, #28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40010000 	.word	0x40010000
 8009008:	40010400 	.word	0x40010400

0800900c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f003 031f 	and.w	r3, r3, #31
 800901e:	2201      	movs	r2, #1
 8009020:	fa02 f303 	lsl.w	r3, r2, r3
 8009024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6a1a      	ldr	r2, [r3, #32]
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	43db      	mvns	r3, r3
 800902e:	401a      	ands	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6a1a      	ldr	r2, [r3, #32]
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f003 031f 	and.w	r3, r3, #31
 800903e:	6879      	ldr	r1, [r7, #4]
 8009040:	fa01 f303 	lsl.w	r3, r1, r3
 8009044:	431a      	orrs	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	621a      	str	r2, [r3, #32]
}
 800904a:	bf00      	nop
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
	...

08009058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009068:	2b01      	cmp	r3, #1
 800906a:	d101      	bne.n	8009070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800906c:	2302      	movs	r3, #2
 800906e:	e05a      	b.n	8009126 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2202      	movs	r2, #2
 800907c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68fa      	ldr	r2, [r7, #12]
 80090a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a21      	ldr	r2, [pc, #132]	; (8009134 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d022      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090bc:	d01d      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a1d      	ldr	r2, [pc, #116]	; (8009138 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d018      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a1b      	ldr	r2, [pc, #108]	; (800913c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d013      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a1a      	ldr	r2, [pc, #104]	; (8009140 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d00e      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a18      	ldr	r2, [pc, #96]	; (8009144 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d009      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a17      	ldr	r2, [pc, #92]	; (8009148 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d004      	beq.n	80090fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a15      	ldr	r2, [pc, #84]	; (800914c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d10c      	bne.n	8009114 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	68ba      	ldr	r2, [r7, #8]
 8009108:	4313      	orrs	r3, r2
 800910a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	40010000 	.word	0x40010000
 8009138:	40000400 	.word	0x40000400
 800913c:	40000800 	.word	0x40000800
 8009140:	40000c00 	.word	0x40000c00
 8009144:	40010400 	.word	0x40010400
 8009148:	40014000 	.word	0x40014000
 800914c:	40001800 	.word	0x40001800

08009150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d101      	bne.n	800918a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e03f      	b.n	800920a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d106      	bne.n	80091a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7fa fb3a 	bl	8003818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2224      	movs	r2, #36	; 0x24
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68da      	ldr	r2, [r3, #12]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f929 	bl	8009414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	695a      	ldr	r2, [r3, #20]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2220      	movs	r2, #32
 8009204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b08a      	sub	sp, #40	; 0x28
 8009216:	af02      	add	r7, sp, #8
 8009218:	60f8      	str	r0, [r7, #12]
 800921a:	60b9      	str	r1, [r7, #8]
 800921c:	603b      	str	r3, [r7, #0]
 800921e:	4613      	mov	r3, r2
 8009220:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009222:	2300      	movs	r3, #0
 8009224:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b20      	cmp	r3, #32
 8009230:	d17c      	bne.n	800932c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d002      	beq.n	800923e <HAL_UART_Transmit+0x2c>
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d101      	bne.n	8009242 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e075      	b.n	800932e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_UART_Transmit+0x3e>
 800924c:	2302      	movs	r3, #2
 800924e:	e06e      	b.n	800932e <HAL_UART_Transmit+0x11c>
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2221      	movs	r2, #33	; 0x21
 8009262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009266:	f7fb fcc5 	bl	8004bf4 <HAL_GetTick>
 800926a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	88fa      	ldrh	r2, [r7, #6]
 8009270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	88fa      	ldrh	r2, [r7, #6]
 8009276:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009280:	d108      	bne.n	8009294 <HAL_UART_Transmit+0x82>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d104      	bne.n	8009294 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800928a:	2300      	movs	r3, #0
 800928c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	61bb      	str	r3, [r7, #24]
 8009292:	e003      	b.n	800929c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009298:	2300      	movs	r3, #0
 800929a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80092a4:	e02a      	b.n	80092fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2200      	movs	r2, #0
 80092ae:	2180      	movs	r1, #128	; 0x80
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 f840 	bl	8009336 <UART_WaitOnFlagUntilTimeout>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e036      	b.n	800932e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10b      	bne.n	80092de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	3302      	adds	r3, #2
 80092da:	61bb      	str	r3, [r7, #24]
 80092dc:	e007      	b.n	80092ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	781a      	ldrb	r2, [r3, #0]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	3301      	adds	r3, #1
 80092ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	3b01      	subs	r3, #1
 80092f6:	b29a      	uxth	r2, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009300:	b29b      	uxth	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1cf      	bne.n	80092a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2200      	movs	r2, #0
 800930e:	2140      	movs	r1, #64	; 0x40
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f000 f810 	bl	8009336 <UART_WaitOnFlagUntilTimeout>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e006      	b.n	800932e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2220      	movs	r2, #32
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	e000      	b.n	800932e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800932c:	2302      	movs	r3, #2
  }
}
 800932e:	4618      	mov	r0, r3
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b090      	sub	sp, #64	; 0x40
 800933a:	af00      	add	r7, sp, #0
 800933c:	60f8      	str	r0, [r7, #12]
 800933e:	60b9      	str	r1, [r7, #8]
 8009340:	603b      	str	r3, [r7, #0]
 8009342:	4613      	mov	r3, r2
 8009344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009346:	e050      	b.n	80093ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934e:	d04c      	beq.n	80093ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009352:	2b00      	cmp	r3, #0
 8009354:	d007      	beq.n	8009366 <UART_WaitOnFlagUntilTimeout+0x30>
 8009356:	f7fb fc4d 	bl	8004bf4 <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009362:	429a      	cmp	r2, r3
 8009364:	d241      	bcs.n	80093ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	330c      	adds	r3, #12
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	330c      	adds	r3, #12
 8009384:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009386:	637a      	str	r2, [r7, #52]	; 0x34
 8009388:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800938c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800938e:	e841 2300 	strex	r3, r2, [r1]
 8009392:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e5      	bne.n	8009366 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	3314      	adds	r3, #20
 80093a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	613b      	str	r3, [r7, #16]
   return(result);
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f023 0301 	bic.w	r3, r3, #1
 80093b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	3314      	adds	r3, #20
 80093b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ba:	623a      	str	r2, [r7, #32]
 80093bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	69f9      	ldr	r1, [r7, #28]
 80093c0:	6a3a      	ldr	r2, [r7, #32]
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e5      	bne.n	800939a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2220      	movs	r2, #32
 80093da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e00f      	b.n	800940a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	4013      	ands	r3, r2
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	bf0c      	ite	eq
 80093fa:	2301      	moveq	r3, #1
 80093fc:	2300      	movne	r3, #0
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	461a      	mov	r2, r3
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	429a      	cmp	r2, r3
 8009406:	d09f      	beq.n	8009348 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3740      	adds	r7, #64	; 0x40
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	b09f      	sub	sp, #124	; 0x7c
 800941a:	af00      	add	r7, sp, #0
 800941c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800941e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942a:	68d9      	ldr	r1, [r3, #12]
 800942c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	ea40 0301 	orr.w	r3, r0, r1
 8009434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009438:	689a      	ldr	r2, [r3, #8]
 800943a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	431a      	orrs	r2, r3
 8009440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	431a      	orrs	r2, r3
 8009446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	4313      	orrs	r3, r2
 800944c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800944e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009458:	f021 010c 	bic.w	r1, r1, #12
 800945c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009462:	430b      	orrs	r3, r1
 8009464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	695b      	ldr	r3, [r3, #20]
 800946c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009472:	6999      	ldr	r1, [r3, #24]
 8009474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	ea40 0301 	orr.w	r3, r0, r1
 800947c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800947e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	4bc5      	ldr	r3, [pc, #788]	; (8009798 <UART_SetConfig+0x384>)
 8009484:	429a      	cmp	r2, r3
 8009486:	d004      	beq.n	8009492 <UART_SetConfig+0x7e>
 8009488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	4bc3      	ldr	r3, [pc, #780]	; (800979c <UART_SetConfig+0x388>)
 800948e:	429a      	cmp	r2, r3
 8009490:	d103      	bne.n	800949a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009492:	f7fd ff7b 	bl	800738c <HAL_RCC_GetPCLK2Freq>
 8009496:	6778      	str	r0, [r7, #116]	; 0x74
 8009498:	e002      	b.n	80094a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800949a:	f7fd ff63 	bl	8007364 <HAL_RCC_GetPCLK1Freq>
 800949e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a2:	69db      	ldr	r3, [r3, #28]
 80094a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a8:	f040 80b6 	bne.w	8009618 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ae:	461c      	mov	r4, r3
 80094b0:	f04f 0500 	mov.w	r5, #0
 80094b4:	4622      	mov	r2, r4
 80094b6:	462b      	mov	r3, r5
 80094b8:	1891      	adds	r1, r2, r2
 80094ba:	6439      	str	r1, [r7, #64]	; 0x40
 80094bc:	415b      	adcs	r3, r3
 80094be:	647b      	str	r3, [r7, #68]	; 0x44
 80094c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094c4:	1912      	adds	r2, r2, r4
 80094c6:	eb45 0303 	adc.w	r3, r5, r3
 80094ca:	f04f 0000 	mov.w	r0, #0
 80094ce:	f04f 0100 	mov.w	r1, #0
 80094d2:	00d9      	lsls	r1, r3, #3
 80094d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094d8:	00d0      	lsls	r0, r2, #3
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
 80094de:	1911      	adds	r1, r2, r4
 80094e0:	6639      	str	r1, [r7, #96]	; 0x60
 80094e2:	416b      	adcs	r3, r5
 80094e4:	667b      	str	r3, [r7, #100]	; 0x64
 80094e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	461a      	mov	r2, r3
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	1891      	adds	r1, r2, r2
 80094f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80094f4:	415b      	adcs	r3, r3
 80094f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009500:	f7f7 fbc2 	bl	8000c88 <__aeabi_uldivmod>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4ba5      	ldr	r3, [pc, #660]	; (80097a0 <UART_SetConfig+0x38c>)
 800950a:	fba3 2302 	umull	r2, r3, r3, r2
 800950e:	095b      	lsrs	r3, r3, #5
 8009510:	011e      	lsls	r6, r3, #4
 8009512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009514:	461c      	mov	r4, r3
 8009516:	f04f 0500 	mov.w	r5, #0
 800951a:	4622      	mov	r2, r4
 800951c:	462b      	mov	r3, r5
 800951e:	1891      	adds	r1, r2, r2
 8009520:	6339      	str	r1, [r7, #48]	; 0x30
 8009522:	415b      	adcs	r3, r3
 8009524:	637b      	str	r3, [r7, #52]	; 0x34
 8009526:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800952a:	1912      	adds	r2, r2, r4
 800952c:	eb45 0303 	adc.w	r3, r5, r3
 8009530:	f04f 0000 	mov.w	r0, #0
 8009534:	f04f 0100 	mov.w	r1, #0
 8009538:	00d9      	lsls	r1, r3, #3
 800953a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800953e:	00d0      	lsls	r0, r2, #3
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	1911      	adds	r1, r2, r4
 8009546:	65b9      	str	r1, [r7, #88]	; 0x58
 8009548:	416b      	adcs	r3, r5
 800954a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800954c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	461a      	mov	r2, r3
 8009552:	f04f 0300 	mov.w	r3, #0
 8009556:	1891      	adds	r1, r2, r2
 8009558:	62b9      	str	r1, [r7, #40]	; 0x28
 800955a:	415b      	adcs	r3, r3
 800955c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800955e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009562:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009566:	f7f7 fb8f 	bl	8000c88 <__aeabi_uldivmod>
 800956a:	4602      	mov	r2, r0
 800956c:	460b      	mov	r3, r1
 800956e:	4b8c      	ldr	r3, [pc, #560]	; (80097a0 <UART_SetConfig+0x38c>)
 8009570:	fba3 1302 	umull	r1, r3, r3, r2
 8009574:	095b      	lsrs	r3, r3, #5
 8009576:	2164      	movs	r1, #100	; 0x64
 8009578:	fb01 f303 	mul.w	r3, r1, r3
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	3332      	adds	r3, #50	; 0x32
 8009582:	4a87      	ldr	r2, [pc, #540]	; (80097a0 <UART_SetConfig+0x38c>)
 8009584:	fba2 2303 	umull	r2, r3, r2, r3
 8009588:	095b      	lsrs	r3, r3, #5
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009590:	441e      	add	r6, r3
 8009592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009594:	4618      	mov	r0, r3
 8009596:	f04f 0100 	mov.w	r1, #0
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	1894      	adds	r4, r2, r2
 80095a0:	623c      	str	r4, [r7, #32]
 80095a2:	415b      	adcs	r3, r3
 80095a4:	627b      	str	r3, [r7, #36]	; 0x24
 80095a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095aa:	1812      	adds	r2, r2, r0
 80095ac:	eb41 0303 	adc.w	r3, r1, r3
 80095b0:	f04f 0400 	mov.w	r4, #0
 80095b4:	f04f 0500 	mov.w	r5, #0
 80095b8:	00dd      	lsls	r5, r3, #3
 80095ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095be:	00d4      	lsls	r4, r2, #3
 80095c0:	4622      	mov	r2, r4
 80095c2:	462b      	mov	r3, r5
 80095c4:	1814      	adds	r4, r2, r0
 80095c6:	653c      	str	r4, [r7, #80]	; 0x50
 80095c8:	414b      	adcs	r3, r1
 80095ca:	657b      	str	r3, [r7, #84]	; 0x54
 80095cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	461a      	mov	r2, r3
 80095d2:	f04f 0300 	mov.w	r3, #0
 80095d6:	1891      	adds	r1, r2, r2
 80095d8:	61b9      	str	r1, [r7, #24]
 80095da:	415b      	adcs	r3, r3
 80095dc:	61fb      	str	r3, [r7, #28]
 80095de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80095e6:	f7f7 fb4f 	bl	8000c88 <__aeabi_uldivmod>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4b6c      	ldr	r3, [pc, #432]	; (80097a0 <UART_SetConfig+0x38c>)
 80095f0:	fba3 1302 	umull	r1, r3, r3, r2
 80095f4:	095b      	lsrs	r3, r3, #5
 80095f6:	2164      	movs	r1, #100	; 0x64
 80095f8:	fb01 f303 	mul.w	r3, r1, r3
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	3332      	adds	r3, #50	; 0x32
 8009602:	4a67      	ldr	r2, [pc, #412]	; (80097a0 <UART_SetConfig+0x38c>)
 8009604:	fba2 2303 	umull	r2, r3, r2, r3
 8009608:	095b      	lsrs	r3, r3, #5
 800960a:	f003 0207 	and.w	r2, r3, #7
 800960e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4432      	add	r2, r6
 8009614:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009616:	e0b9      	b.n	800978c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800961a:	461c      	mov	r4, r3
 800961c:	f04f 0500 	mov.w	r5, #0
 8009620:	4622      	mov	r2, r4
 8009622:	462b      	mov	r3, r5
 8009624:	1891      	adds	r1, r2, r2
 8009626:	6139      	str	r1, [r7, #16]
 8009628:	415b      	adcs	r3, r3
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009630:	1912      	adds	r2, r2, r4
 8009632:	eb45 0303 	adc.w	r3, r5, r3
 8009636:	f04f 0000 	mov.w	r0, #0
 800963a:	f04f 0100 	mov.w	r1, #0
 800963e:	00d9      	lsls	r1, r3, #3
 8009640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009644:	00d0      	lsls	r0, r2, #3
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	eb12 0804 	adds.w	r8, r2, r4
 800964e:	eb43 0905 	adc.w	r9, r3, r5
 8009652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	4618      	mov	r0, r3
 8009658:	f04f 0100 	mov.w	r1, #0
 800965c:	f04f 0200 	mov.w	r2, #0
 8009660:	f04f 0300 	mov.w	r3, #0
 8009664:	008b      	lsls	r3, r1, #2
 8009666:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800966a:	0082      	lsls	r2, r0, #2
 800966c:	4640      	mov	r0, r8
 800966e:	4649      	mov	r1, r9
 8009670:	f7f7 fb0a 	bl	8000c88 <__aeabi_uldivmod>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4b49      	ldr	r3, [pc, #292]	; (80097a0 <UART_SetConfig+0x38c>)
 800967a:	fba3 2302 	umull	r2, r3, r3, r2
 800967e:	095b      	lsrs	r3, r3, #5
 8009680:	011e      	lsls	r6, r3, #4
 8009682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009684:	4618      	mov	r0, r3
 8009686:	f04f 0100 	mov.w	r1, #0
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	1894      	adds	r4, r2, r2
 8009690:	60bc      	str	r4, [r7, #8]
 8009692:	415b      	adcs	r3, r3
 8009694:	60fb      	str	r3, [r7, #12]
 8009696:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800969a:	1812      	adds	r2, r2, r0
 800969c:	eb41 0303 	adc.w	r3, r1, r3
 80096a0:	f04f 0400 	mov.w	r4, #0
 80096a4:	f04f 0500 	mov.w	r5, #0
 80096a8:	00dd      	lsls	r5, r3, #3
 80096aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096ae:	00d4      	lsls	r4, r2, #3
 80096b0:	4622      	mov	r2, r4
 80096b2:	462b      	mov	r3, r5
 80096b4:	1814      	adds	r4, r2, r0
 80096b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80096b8:	414b      	adcs	r3, r1
 80096ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f04f 0100 	mov.w	r1, #0
 80096c6:	f04f 0200 	mov.w	r2, #0
 80096ca:	f04f 0300 	mov.w	r3, #0
 80096ce:	008b      	lsls	r3, r1, #2
 80096d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80096d4:	0082      	lsls	r2, r0, #2
 80096d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80096da:	f7f7 fad5 	bl	8000c88 <__aeabi_uldivmod>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	4b2f      	ldr	r3, [pc, #188]	; (80097a0 <UART_SetConfig+0x38c>)
 80096e4:	fba3 1302 	umull	r1, r3, r3, r2
 80096e8:	095b      	lsrs	r3, r3, #5
 80096ea:	2164      	movs	r1, #100	; 0x64
 80096ec:	fb01 f303 	mul.w	r3, r1, r3
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	011b      	lsls	r3, r3, #4
 80096f4:	3332      	adds	r3, #50	; 0x32
 80096f6:	4a2a      	ldr	r2, [pc, #168]	; (80097a0 <UART_SetConfig+0x38c>)
 80096f8:	fba2 2303 	umull	r2, r3, r2, r3
 80096fc:	095b      	lsrs	r3, r3, #5
 80096fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009702:	441e      	add	r6, r3
 8009704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009706:	4618      	mov	r0, r3
 8009708:	f04f 0100 	mov.w	r1, #0
 800970c:	4602      	mov	r2, r0
 800970e:	460b      	mov	r3, r1
 8009710:	1894      	adds	r4, r2, r2
 8009712:	603c      	str	r4, [r7, #0]
 8009714:	415b      	adcs	r3, r3
 8009716:	607b      	str	r3, [r7, #4]
 8009718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800971c:	1812      	adds	r2, r2, r0
 800971e:	eb41 0303 	adc.w	r3, r1, r3
 8009722:	f04f 0400 	mov.w	r4, #0
 8009726:	f04f 0500 	mov.w	r5, #0
 800972a:	00dd      	lsls	r5, r3, #3
 800972c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009730:	00d4      	lsls	r4, r2, #3
 8009732:	4622      	mov	r2, r4
 8009734:	462b      	mov	r3, r5
 8009736:	eb12 0a00 	adds.w	sl, r2, r0
 800973a:	eb43 0b01 	adc.w	fp, r3, r1
 800973e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	4618      	mov	r0, r3
 8009744:	f04f 0100 	mov.w	r1, #0
 8009748:	f04f 0200 	mov.w	r2, #0
 800974c:	f04f 0300 	mov.w	r3, #0
 8009750:	008b      	lsls	r3, r1, #2
 8009752:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009756:	0082      	lsls	r2, r0, #2
 8009758:	4650      	mov	r0, sl
 800975a:	4659      	mov	r1, fp
 800975c:	f7f7 fa94 	bl	8000c88 <__aeabi_uldivmod>
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	4b0e      	ldr	r3, [pc, #56]	; (80097a0 <UART_SetConfig+0x38c>)
 8009766:	fba3 1302 	umull	r1, r3, r3, r2
 800976a:	095b      	lsrs	r3, r3, #5
 800976c:	2164      	movs	r1, #100	; 0x64
 800976e:	fb01 f303 	mul.w	r3, r1, r3
 8009772:	1ad3      	subs	r3, r2, r3
 8009774:	011b      	lsls	r3, r3, #4
 8009776:	3332      	adds	r3, #50	; 0x32
 8009778:	4a09      	ldr	r2, [pc, #36]	; (80097a0 <UART_SetConfig+0x38c>)
 800977a:	fba2 2303 	umull	r2, r3, r2, r3
 800977e:	095b      	lsrs	r3, r3, #5
 8009780:	f003 020f 	and.w	r2, r3, #15
 8009784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4432      	add	r2, r6
 800978a:	609a      	str	r2, [r3, #8]
}
 800978c:	bf00      	nop
 800978e:	377c      	adds	r7, #124	; 0x7c
 8009790:	46bd      	mov	sp, r7
 8009792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009796:	bf00      	nop
 8009798:	40011000 	.word	0x40011000
 800979c:	40011400 	.word	0x40011400
 80097a0:	51eb851f 	.word	0x51eb851f

080097a4 <__errno>:
 80097a4:	4b01      	ldr	r3, [pc, #4]	; (80097ac <__errno+0x8>)
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	2000000c 	.word	0x2000000c

080097b0 <__libc_init_array>:
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	4d0d      	ldr	r5, [pc, #52]	; (80097e8 <__libc_init_array+0x38>)
 80097b4:	4c0d      	ldr	r4, [pc, #52]	; (80097ec <__libc_init_array+0x3c>)
 80097b6:	1b64      	subs	r4, r4, r5
 80097b8:	10a4      	asrs	r4, r4, #2
 80097ba:	2600      	movs	r6, #0
 80097bc:	42a6      	cmp	r6, r4
 80097be:	d109      	bne.n	80097d4 <__libc_init_array+0x24>
 80097c0:	4d0b      	ldr	r5, [pc, #44]	; (80097f0 <__libc_init_array+0x40>)
 80097c2:	4c0c      	ldr	r4, [pc, #48]	; (80097f4 <__libc_init_array+0x44>)
 80097c4:	f004 fcd2 	bl	800e16c <_init>
 80097c8:	1b64      	subs	r4, r4, r5
 80097ca:	10a4      	asrs	r4, r4, #2
 80097cc:	2600      	movs	r6, #0
 80097ce:	42a6      	cmp	r6, r4
 80097d0:	d105      	bne.n	80097de <__libc_init_array+0x2e>
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d8:	4798      	blx	r3
 80097da:	3601      	adds	r6, #1
 80097dc:	e7ee      	b.n	80097bc <__libc_init_array+0xc>
 80097de:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e2:	4798      	blx	r3
 80097e4:	3601      	adds	r6, #1
 80097e6:	e7f2      	b.n	80097ce <__libc_init_array+0x1e>
 80097e8:	0800ecb4 	.word	0x0800ecb4
 80097ec:	0800ecb4 	.word	0x0800ecb4
 80097f0:	0800ecb4 	.word	0x0800ecb4
 80097f4:	0800ecb8 	.word	0x0800ecb8

080097f8 <memcpy>:
 80097f8:	440a      	add	r2, r1
 80097fa:	4291      	cmp	r1, r2
 80097fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009800:	d100      	bne.n	8009804 <memcpy+0xc>
 8009802:	4770      	bx	lr
 8009804:	b510      	push	{r4, lr}
 8009806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800980a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800980e:	4291      	cmp	r1, r2
 8009810:	d1f9      	bne.n	8009806 <memcpy+0xe>
 8009812:	bd10      	pop	{r4, pc}

08009814 <memset>:
 8009814:	4402      	add	r2, r0
 8009816:	4603      	mov	r3, r0
 8009818:	4293      	cmp	r3, r2
 800981a:	d100      	bne.n	800981e <memset+0xa>
 800981c:	4770      	bx	lr
 800981e:	f803 1b01 	strb.w	r1, [r3], #1
 8009822:	e7f9      	b.n	8009818 <memset+0x4>

08009824 <__cvt>:
 8009824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	ec55 4b10 	vmov	r4, r5, d0
 800982c:	2d00      	cmp	r5, #0
 800982e:	460e      	mov	r6, r1
 8009830:	4619      	mov	r1, r3
 8009832:	462b      	mov	r3, r5
 8009834:	bfbb      	ittet	lt
 8009836:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800983a:	461d      	movlt	r5, r3
 800983c:	2300      	movge	r3, #0
 800983e:	232d      	movlt	r3, #45	; 0x2d
 8009840:	700b      	strb	r3, [r1, #0]
 8009842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009844:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009848:	4691      	mov	r9, r2
 800984a:	f023 0820 	bic.w	r8, r3, #32
 800984e:	bfbc      	itt	lt
 8009850:	4622      	movlt	r2, r4
 8009852:	4614      	movlt	r4, r2
 8009854:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009858:	d005      	beq.n	8009866 <__cvt+0x42>
 800985a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800985e:	d100      	bne.n	8009862 <__cvt+0x3e>
 8009860:	3601      	adds	r6, #1
 8009862:	2102      	movs	r1, #2
 8009864:	e000      	b.n	8009868 <__cvt+0x44>
 8009866:	2103      	movs	r1, #3
 8009868:	ab03      	add	r3, sp, #12
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	ab02      	add	r3, sp, #8
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	ec45 4b10 	vmov	d0, r4, r5
 8009874:	4653      	mov	r3, sl
 8009876:	4632      	mov	r2, r6
 8009878:	f001 ff02 	bl	800b680 <_dtoa_r>
 800987c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009880:	4607      	mov	r7, r0
 8009882:	d102      	bne.n	800988a <__cvt+0x66>
 8009884:	f019 0f01 	tst.w	r9, #1
 8009888:	d022      	beq.n	80098d0 <__cvt+0xac>
 800988a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800988e:	eb07 0906 	add.w	r9, r7, r6
 8009892:	d110      	bne.n	80098b6 <__cvt+0x92>
 8009894:	783b      	ldrb	r3, [r7, #0]
 8009896:	2b30      	cmp	r3, #48	; 0x30
 8009898:	d10a      	bne.n	80098b0 <__cvt+0x8c>
 800989a:	2200      	movs	r2, #0
 800989c:	2300      	movs	r3, #0
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f7 f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80098a6:	b918      	cbnz	r0, 80098b0 <__cvt+0x8c>
 80098a8:	f1c6 0601 	rsb	r6, r6, #1
 80098ac:	f8ca 6000 	str.w	r6, [sl]
 80098b0:	f8da 3000 	ldr.w	r3, [sl]
 80098b4:	4499      	add	r9, r3
 80098b6:	2200      	movs	r2, #0
 80098b8:	2300      	movs	r3, #0
 80098ba:	4620      	mov	r0, r4
 80098bc:	4629      	mov	r1, r5
 80098be:	f7f7 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 80098c2:	b108      	cbz	r0, 80098c8 <__cvt+0xa4>
 80098c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80098c8:	2230      	movs	r2, #48	; 0x30
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	454b      	cmp	r3, r9
 80098ce:	d307      	bcc.n	80098e0 <__cvt+0xbc>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098d4:	1bdb      	subs	r3, r3, r7
 80098d6:	4638      	mov	r0, r7
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	b004      	add	sp, #16
 80098dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e0:	1c59      	adds	r1, r3, #1
 80098e2:	9103      	str	r1, [sp, #12]
 80098e4:	701a      	strb	r2, [r3, #0]
 80098e6:	e7f0      	b.n	80098ca <__cvt+0xa6>

080098e8 <__exponent>:
 80098e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ea:	4603      	mov	r3, r0
 80098ec:	2900      	cmp	r1, #0
 80098ee:	bfb8      	it	lt
 80098f0:	4249      	neglt	r1, r1
 80098f2:	f803 2b02 	strb.w	r2, [r3], #2
 80098f6:	bfb4      	ite	lt
 80098f8:	222d      	movlt	r2, #45	; 0x2d
 80098fa:	222b      	movge	r2, #43	; 0x2b
 80098fc:	2909      	cmp	r1, #9
 80098fe:	7042      	strb	r2, [r0, #1]
 8009900:	dd2a      	ble.n	8009958 <__exponent+0x70>
 8009902:	f10d 0407 	add.w	r4, sp, #7
 8009906:	46a4      	mov	ip, r4
 8009908:	270a      	movs	r7, #10
 800990a:	46a6      	mov	lr, r4
 800990c:	460a      	mov	r2, r1
 800990e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009912:	fb07 1516 	mls	r5, r7, r6, r1
 8009916:	3530      	adds	r5, #48	; 0x30
 8009918:	2a63      	cmp	r2, #99	; 0x63
 800991a:	f104 34ff 	add.w	r4, r4, #4294967295
 800991e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009922:	4631      	mov	r1, r6
 8009924:	dcf1      	bgt.n	800990a <__exponent+0x22>
 8009926:	3130      	adds	r1, #48	; 0x30
 8009928:	f1ae 0502 	sub.w	r5, lr, #2
 800992c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009930:	1c44      	adds	r4, r0, #1
 8009932:	4629      	mov	r1, r5
 8009934:	4561      	cmp	r1, ip
 8009936:	d30a      	bcc.n	800994e <__exponent+0x66>
 8009938:	f10d 0209 	add.w	r2, sp, #9
 800993c:	eba2 020e 	sub.w	r2, r2, lr
 8009940:	4565      	cmp	r5, ip
 8009942:	bf88      	it	hi
 8009944:	2200      	movhi	r2, #0
 8009946:	4413      	add	r3, r2
 8009948:	1a18      	subs	r0, r3, r0
 800994a:	b003      	add	sp, #12
 800994c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800994e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009952:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009956:	e7ed      	b.n	8009934 <__exponent+0x4c>
 8009958:	2330      	movs	r3, #48	; 0x30
 800995a:	3130      	adds	r1, #48	; 0x30
 800995c:	7083      	strb	r3, [r0, #2]
 800995e:	70c1      	strb	r1, [r0, #3]
 8009960:	1d03      	adds	r3, r0, #4
 8009962:	e7f1      	b.n	8009948 <__exponent+0x60>

08009964 <_printf_float>:
 8009964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009968:	ed2d 8b02 	vpush	{d8}
 800996c:	b08d      	sub	sp, #52	; 0x34
 800996e:	460c      	mov	r4, r1
 8009970:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009974:	4616      	mov	r6, r2
 8009976:	461f      	mov	r7, r3
 8009978:	4605      	mov	r5, r0
 800997a:	f003 f993 	bl	800cca4 <_localeconv_r>
 800997e:	f8d0 a000 	ldr.w	sl, [r0]
 8009982:	4650      	mov	r0, sl
 8009984:	f7f6 fc24 	bl	80001d0 <strlen>
 8009988:	2300      	movs	r3, #0
 800998a:	930a      	str	r3, [sp, #40]	; 0x28
 800998c:	6823      	ldr	r3, [r4, #0]
 800998e:	9305      	str	r3, [sp, #20]
 8009990:	f8d8 3000 	ldr.w	r3, [r8]
 8009994:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009998:	3307      	adds	r3, #7
 800999a:	f023 0307 	bic.w	r3, r3, #7
 800999e:	f103 0208 	add.w	r2, r3, #8
 80099a2:	f8c8 2000 	str.w	r2, [r8]
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80099ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80099b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099b6:	9307      	str	r3, [sp, #28]
 80099b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80099bc:	ee08 0a10 	vmov	s16, r0
 80099c0:	4b9f      	ldr	r3, [pc, #636]	; (8009c40 <_printf_float+0x2dc>)
 80099c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099c6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ca:	f7f7 f8af 	bl	8000b2c <__aeabi_dcmpun>
 80099ce:	bb88      	cbnz	r0, 8009a34 <_printf_float+0xd0>
 80099d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099d4:	4b9a      	ldr	r3, [pc, #616]	; (8009c40 <_printf_float+0x2dc>)
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	f7f7 f889 	bl	8000af0 <__aeabi_dcmple>
 80099de:	bb48      	cbnz	r0, 8009a34 <_printf_float+0xd0>
 80099e0:	2200      	movs	r2, #0
 80099e2:	2300      	movs	r3, #0
 80099e4:	4640      	mov	r0, r8
 80099e6:	4649      	mov	r1, r9
 80099e8:	f7f7 f878 	bl	8000adc <__aeabi_dcmplt>
 80099ec:	b110      	cbz	r0, 80099f4 <_printf_float+0x90>
 80099ee:	232d      	movs	r3, #45	; 0x2d
 80099f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099f4:	4b93      	ldr	r3, [pc, #588]	; (8009c44 <_printf_float+0x2e0>)
 80099f6:	4894      	ldr	r0, [pc, #592]	; (8009c48 <_printf_float+0x2e4>)
 80099f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099fc:	bf94      	ite	ls
 80099fe:	4698      	movls	r8, r3
 8009a00:	4680      	movhi	r8, r0
 8009a02:	2303      	movs	r3, #3
 8009a04:	6123      	str	r3, [r4, #16]
 8009a06:	9b05      	ldr	r3, [sp, #20]
 8009a08:	f023 0204 	bic.w	r2, r3, #4
 8009a0c:	6022      	str	r2, [r4, #0]
 8009a0e:	f04f 0900 	mov.w	r9, #0
 8009a12:	9700      	str	r7, [sp, #0]
 8009a14:	4633      	mov	r3, r6
 8009a16:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 f9d8 	bl	8009dd0 <_printf_common>
 8009a20:	3001      	adds	r0, #1
 8009a22:	f040 8090 	bne.w	8009b46 <_printf_float+0x1e2>
 8009a26:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2a:	b00d      	add	sp, #52	; 0x34
 8009a2c:	ecbd 8b02 	vpop	{d8}
 8009a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a34:	4642      	mov	r2, r8
 8009a36:	464b      	mov	r3, r9
 8009a38:	4640      	mov	r0, r8
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	f7f7 f876 	bl	8000b2c <__aeabi_dcmpun>
 8009a40:	b140      	cbz	r0, 8009a54 <_printf_float+0xf0>
 8009a42:	464b      	mov	r3, r9
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	bfbc      	itt	lt
 8009a48:	232d      	movlt	r3, #45	; 0x2d
 8009a4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a4e:	487f      	ldr	r0, [pc, #508]	; (8009c4c <_printf_float+0x2e8>)
 8009a50:	4b7f      	ldr	r3, [pc, #508]	; (8009c50 <_printf_float+0x2ec>)
 8009a52:	e7d1      	b.n	80099f8 <_printf_float+0x94>
 8009a54:	6863      	ldr	r3, [r4, #4]
 8009a56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a5a:	9206      	str	r2, [sp, #24]
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	d13f      	bne.n	8009ae0 <_printf_float+0x17c>
 8009a60:	2306      	movs	r3, #6
 8009a62:	6063      	str	r3, [r4, #4]
 8009a64:	9b05      	ldr	r3, [sp, #20]
 8009a66:	6861      	ldr	r1, [r4, #4]
 8009a68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	9303      	str	r3, [sp, #12]
 8009a70:	ab0a      	add	r3, sp, #40	; 0x28
 8009a72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a76:	ab09      	add	r3, sp, #36	; 0x24
 8009a78:	ec49 8b10 	vmov	d0, r8, r9
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	6022      	str	r2, [r4, #0]
 8009a80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a84:	4628      	mov	r0, r5
 8009a86:	f7ff fecd 	bl	8009824 <__cvt>
 8009a8a:	9b06      	ldr	r3, [sp, #24]
 8009a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a8e:	2b47      	cmp	r3, #71	; 0x47
 8009a90:	4680      	mov	r8, r0
 8009a92:	d108      	bne.n	8009aa6 <_printf_float+0x142>
 8009a94:	1cc8      	adds	r0, r1, #3
 8009a96:	db02      	blt.n	8009a9e <_printf_float+0x13a>
 8009a98:	6863      	ldr	r3, [r4, #4]
 8009a9a:	4299      	cmp	r1, r3
 8009a9c:	dd41      	ble.n	8009b22 <_printf_float+0x1be>
 8009a9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009aa2:	fa5f fb8b 	uxtb.w	fp, fp
 8009aa6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009aaa:	d820      	bhi.n	8009aee <_printf_float+0x18a>
 8009aac:	3901      	subs	r1, #1
 8009aae:	465a      	mov	r2, fp
 8009ab0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ab4:	9109      	str	r1, [sp, #36]	; 0x24
 8009ab6:	f7ff ff17 	bl	80098e8 <__exponent>
 8009aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009abc:	1813      	adds	r3, r2, r0
 8009abe:	2a01      	cmp	r2, #1
 8009ac0:	4681      	mov	r9, r0
 8009ac2:	6123      	str	r3, [r4, #16]
 8009ac4:	dc02      	bgt.n	8009acc <_printf_float+0x168>
 8009ac6:	6822      	ldr	r2, [r4, #0]
 8009ac8:	07d2      	lsls	r2, r2, #31
 8009aca:	d501      	bpl.n	8009ad0 <_printf_float+0x16c>
 8009acc:	3301      	adds	r3, #1
 8009ace:	6123      	str	r3, [r4, #16]
 8009ad0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d09c      	beq.n	8009a12 <_printf_float+0xae>
 8009ad8:	232d      	movs	r3, #45	; 0x2d
 8009ada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ade:	e798      	b.n	8009a12 <_printf_float+0xae>
 8009ae0:	9a06      	ldr	r2, [sp, #24]
 8009ae2:	2a47      	cmp	r2, #71	; 0x47
 8009ae4:	d1be      	bne.n	8009a64 <_printf_float+0x100>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1bc      	bne.n	8009a64 <_printf_float+0x100>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e7b9      	b.n	8009a62 <_printf_float+0xfe>
 8009aee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009af2:	d118      	bne.n	8009b26 <_printf_float+0x1c2>
 8009af4:	2900      	cmp	r1, #0
 8009af6:	6863      	ldr	r3, [r4, #4]
 8009af8:	dd0b      	ble.n	8009b12 <_printf_float+0x1ae>
 8009afa:	6121      	str	r1, [r4, #16]
 8009afc:	b913      	cbnz	r3, 8009b04 <_printf_float+0x1a0>
 8009afe:	6822      	ldr	r2, [r4, #0]
 8009b00:	07d0      	lsls	r0, r2, #31
 8009b02:	d502      	bpl.n	8009b0a <_printf_float+0x1a6>
 8009b04:	3301      	adds	r3, #1
 8009b06:	440b      	add	r3, r1
 8009b08:	6123      	str	r3, [r4, #16]
 8009b0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b0c:	f04f 0900 	mov.w	r9, #0
 8009b10:	e7de      	b.n	8009ad0 <_printf_float+0x16c>
 8009b12:	b913      	cbnz	r3, 8009b1a <_printf_float+0x1b6>
 8009b14:	6822      	ldr	r2, [r4, #0]
 8009b16:	07d2      	lsls	r2, r2, #31
 8009b18:	d501      	bpl.n	8009b1e <_printf_float+0x1ba>
 8009b1a:	3302      	adds	r3, #2
 8009b1c:	e7f4      	b.n	8009b08 <_printf_float+0x1a4>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e7f2      	b.n	8009b08 <_printf_float+0x1a4>
 8009b22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b28:	4299      	cmp	r1, r3
 8009b2a:	db05      	blt.n	8009b38 <_printf_float+0x1d4>
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	6121      	str	r1, [r4, #16]
 8009b30:	07d8      	lsls	r0, r3, #31
 8009b32:	d5ea      	bpl.n	8009b0a <_printf_float+0x1a6>
 8009b34:	1c4b      	adds	r3, r1, #1
 8009b36:	e7e7      	b.n	8009b08 <_printf_float+0x1a4>
 8009b38:	2900      	cmp	r1, #0
 8009b3a:	bfd4      	ite	le
 8009b3c:	f1c1 0202 	rsble	r2, r1, #2
 8009b40:	2201      	movgt	r2, #1
 8009b42:	4413      	add	r3, r2
 8009b44:	e7e0      	b.n	8009b08 <_printf_float+0x1a4>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	055a      	lsls	r2, r3, #21
 8009b4a:	d407      	bmi.n	8009b5c <_printf_float+0x1f8>
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	4642      	mov	r2, r8
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	d12c      	bne.n	8009bb4 <_printf_float+0x250>
 8009b5a:	e764      	b.n	8009a26 <_printf_float+0xc2>
 8009b5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b60:	f240 80e0 	bls.w	8009d24 <_printf_float+0x3c0>
 8009b64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b68:	2200      	movs	r2, #0
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f7f6 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d034      	beq.n	8009bde <_printf_float+0x27a>
 8009b74:	4a37      	ldr	r2, [pc, #220]	; (8009c54 <_printf_float+0x2f0>)
 8009b76:	2301      	movs	r3, #1
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b8      	blx	r7
 8009b7e:	3001      	adds	r0, #1
 8009b80:	f43f af51 	beq.w	8009a26 <_printf_float+0xc2>
 8009b84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	db02      	blt.n	8009b92 <_printf_float+0x22e>
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	07d8      	lsls	r0, r3, #31
 8009b90:	d510      	bpl.n	8009bb4 <_printf_float+0x250>
 8009b92:	ee18 3a10 	vmov	r3, s16
 8009b96:	4652      	mov	r2, sl
 8009b98:	4631      	mov	r1, r6
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	47b8      	blx	r7
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	f43f af41 	beq.w	8009a26 <_printf_float+0xc2>
 8009ba4:	f04f 0800 	mov.w	r8, #0
 8009ba8:	f104 091a 	add.w	r9, r4, #26
 8009bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	4543      	cmp	r3, r8
 8009bb2:	dc09      	bgt.n	8009bc8 <_printf_float+0x264>
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	079b      	lsls	r3, r3, #30
 8009bb8:	f100 8105 	bmi.w	8009dc6 <_printf_float+0x462>
 8009bbc:	68e0      	ldr	r0, [r4, #12]
 8009bbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc0:	4298      	cmp	r0, r3
 8009bc2:	bfb8      	it	lt
 8009bc4:	4618      	movlt	r0, r3
 8009bc6:	e730      	b.n	8009a2a <_printf_float+0xc6>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	464a      	mov	r2, r9
 8009bcc:	4631      	mov	r1, r6
 8009bce:	4628      	mov	r0, r5
 8009bd0:	47b8      	blx	r7
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	f43f af27 	beq.w	8009a26 <_printf_float+0xc2>
 8009bd8:	f108 0801 	add.w	r8, r8, #1
 8009bdc:	e7e6      	b.n	8009bac <_printf_float+0x248>
 8009bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	dc39      	bgt.n	8009c58 <_printf_float+0x2f4>
 8009be4:	4a1b      	ldr	r2, [pc, #108]	; (8009c54 <_printf_float+0x2f0>)
 8009be6:	2301      	movs	r3, #1
 8009be8:	4631      	mov	r1, r6
 8009bea:	4628      	mov	r0, r5
 8009bec:	47b8      	blx	r7
 8009bee:	3001      	adds	r0, #1
 8009bf0:	f43f af19 	beq.w	8009a26 <_printf_float+0xc2>
 8009bf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	d102      	bne.n	8009c02 <_printf_float+0x29e>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	07d9      	lsls	r1, r3, #31
 8009c00:	d5d8      	bpl.n	8009bb4 <_printf_float+0x250>
 8009c02:	ee18 3a10 	vmov	r3, s16
 8009c06:	4652      	mov	r2, sl
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	47b8      	blx	r7
 8009c0e:	3001      	adds	r0, #1
 8009c10:	f43f af09 	beq.w	8009a26 <_printf_float+0xc2>
 8009c14:	f04f 0900 	mov.w	r9, #0
 8009c18:	f104 0a1a 	add.w	sl, r4, #26
 8009c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c1e:	425b      	negs	r3, r3
 8009c20:	454b      	cmp	r3, r9
 8009c22:	dc01      	bgt.n	8009c28 <_printf_float+0x2c4>
 8009c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c26:	e792      	b.n	8009b4e <_printf_float+0x1ea>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	4652      	mov	r2, sl
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4628      	mov	r0, r5
 8009c30:	47b8      	blx	r7
 8009c32:	3001      	adds	r0, #1
 8009c34:	f43f aef7 	beq.w	8009a26 <_printf_float+0xc2>
 8009c38:	f109 0901 	add.w	r9, r9, #1
 8009c3c:	e7ee      	b.n	8009c1c <_printf_float+0x2b8>
 8009c3e:	bf00      	nop
 8009c40:	7fefffff 	.word	0x7fefffff
 8009c44:	0800e7f8 	.word	0x0800e7f8
 8009c48:	0800e7fc 	.word	0x0800e7fc
 8009c4c:	0800e804 	.word	0x0800e804
 8009c50:	0800e800 	.word	0x0800e800
 8009c54:	0800e808 	.word	0x0800e808
 8009c58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	bfa8      	it	ge
 8009c60:	461a      	movge	r2, r3
 8009c62:	2a00      	cmp	r2, #0
 8009c64:	4691      	mov	r9, r2
 8009c66:	dc37      	bgt.n	8009cd8 <_printf_float+0x374>
 8009c68:	f04f 0b00 	mov.w	fp, #0
 8009c6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c70:	f104 021a 	add.w	r2, r4, #26
 8009c74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c76:	9305      	str	r3, [sp, #20]
 8009c78:	eba3 0309 	sub.w	r3, r3, r9
 8009c7c:	455b      	cmp	r3, fp
 8009c7e:	dc33      	bgt.n	8009ce8 <_printf_float+0x384>
 8009c80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c84:	429a      	cmp	r2, r3
 8009c86:	db3b      	blt.n	8009d00 <_printf_float+0x39c>
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	07da      	lsls	r2, r3, #31
 8009c8c:	d438      	bmi.n	8009d00 <_printf_float+0x39c>
 8009c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c90:	9b05      	ldr	r3, [sp, #20]
 8009c92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	eba2 0901 	sub.w	r9, r2, r1
 8009c9a:	4599      	cmp	r9, r3
 8009c9c:	bfa8      	it	ge
 8009c9e:	4699      	movge	r9, r3
 8009ca0:	f1b9 0f00 	cmp.w	r9, #0
 8009ca4:	dc35      	bgt.n	8009d12 <_printf_float+0x3ae>
 8009ca6:	f04f 0800 	mov.w	r8, #0
 8009caa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cae:	f104 0a1a 	add.w	sl, r4, #26
 8009cb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	eba3 0309 	sub.w	r3, r3, r9
 8009cbc:	4543      	cmp	r3, r8
 8009cbe:	f77f af79 	ble.w	8009bb4 <_printf_float+0x250>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4652      	mov	r2, sl
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4628      	mov	r0, r5
 8009cca:	47b8      	blx	r7
 8009ccc:	3001      	adds	r0, #1
 8009cce:	f43f aeaa 	beq.w	8009a26 <_printf_float+0xc2>
 8009cd2:	f108 0801 	add.w	r8, r8, #1
 8009cd6:	e7ec      	b.n	8009cb2 <_printf_float+0x34e>
 8009cd8:	4613      	mov	r3, r2
 8009cda:	4631      	mov	r1, r6
 8009cdc:	4642      	mov	r2, r8
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d1c0      	bne.n	8009c68 <_printf_float+0x304>
 8009ce6:	e69e      	b.n	8009a26 <_printf_float+0xc2>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	9205      	str	r2, [sp, #20]
 8009cf0:	47b8      	blx	r7
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	f43f ae97 	beq.w	8009a26 <_printf_float+0xc2>
 8009cf8:	9a05      	ldr	r2, [sp, #20]
 8009cfa:	f10b 0b01 	add.w	fp, fp, #1
 8009cfe:	e7b9      	b.n	8009c74 <_printf_float+0x310>
 8009d00:	ee18 3a10 	vmov	r3, s16
 8009d04:	4652      	mov	r2, sl
 8009d06:	4631      	mov	r1, r6
 8009d08:	4628      	mov	r0, r5
 8009d0a:	47b8      	blx	r7
 8009d0c:	3001      	adds	r0, #1
 8009d0e:	d1be      	bne.n	8009c8e <_printf_float+0x32a>
 8009d10:	e689      	b.n	8009a26 <_printf_float+0xc2>
 8009d12:	9a05      	ldr	r2, [sp, #20]
 8009d14:	464b      	mov	r3, r9
 8009d16:	4442      	add	r2, r8
 8009d18:	4631      	mov	r1, r6
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	47b8      	blx	r7
 8009d1e:	3001      	adds	r0, #1
 8009d20:	d1c1      	bne.n	8009ca6 <_printf_float+0x342>
 8009d22:	e680      	b.n	8009a26 <_printf_float+0xc2>
 8009d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d26:	2a01      	cmp	r2, #1
 8009d28:	dc01      	bgt.n	8009d2e <_printf_float+0x3ca>
 8009d2a:	07db      	lsls	r3, r3, #31
 8009d2c:	d538      	bpl.n	8009da0 <_printf_float+0x43c>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4642      	mov	r2, r8
 8009d32:	4631      	mov	r1, r6
 8009d34:	4628      	mov	r0, r5
 8009d36:	47b8      	blx	r7
 8009d38:	3001      	adds	r0, #1
 8009d3a:	f43f ae74 	beq.w	8009a26 <_printf_float+0xc2>
 8009d3e:	ee18 3a10 	vmov	r3, s16
 8009d42:	4652      	mov	r2, sl
 8009d44:	4631      	mov	r1, r6
 8009d46:	4628      	mov	r0, r5
 8009d48:	47b8      	blx	r7
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f43f ae6b 	beq.w	8009a26 <_printf_float+0xc2>
 8009d50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d54:	2200      	movs	r2, #0
 8009d56:	2300      	movs	r3, #0
 8009d58:	f7f6 feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d5c:	b9d8      	cbnz	r0, 8009d96 <_printf_float+0x432>
 8009d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d60:	f108 0201 	add.w	r2, r8, #1
 8009d64:	3b01      	subs	r3, #1
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	d10e      	bne.n	8009d8e <_printf_float+0x42a>
 8009d70:	e659      	b.n	8009a26 <_printf_float+0xc2>
 8009d72:	2301      	movs	r3, #1
 8009d74:	4652      	mov	r2, sl
 8009d76:	4631      	mov	r1, r6
 8009d78:	4628      	mov	r0, r5
 8009d7a:	47b8      	blx	r7
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	f43f ae52 	beq.w	8009a26 <_printf_float+0xc2>
 8009d82:	f108 0801 	add.w	r8, r8, #1
 8009d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	4543      	cmp	r3, r8
 8009d8c:	dcf1      	bgt.n	8009d72 <_printf_float+0x40e>
 8009d8e:	464b      	mov	r3, r9
 8009d90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d94:	e6dc      	b.n	8009b50 <_printf_float+0x1ec>
 8009d96:	f04f 0800 	mov.w	r8, #0
 8009d9a:	f104 0a1a 	add.w	sl, r4, #26
 8009d9e:	e7f2      	b.n	8009d86 <_printf_float+0x422>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4642      	mov	r2, r8
 8009da4:	e7df      	b.n	8009d66 <_printf_float+0x402>
 8009da6:	2301      	movs	r3, #1
 8009da8:	464a      	mov	r2, r9
 8009daa:	4631      	mov	r1, r6
 8009dac:	4628      	mov	r0, r5
 8009dae:	47b8      	blx	r7
 8009db0:	3001      	adds	r0, #1
 8009db2:	f43f ae38 	beq.w	8009a26 <_printf_float+0xc2>
 8009db6:	f108 0801 	add.w	r8, r8, #1
 8009dba:	68e3      	ldr	r3, [r4, #12]
 8009dbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dbe:	1a5b      	subs	r3, r3, r1
 8009dc0:	4543      	cmp	r3, r8
 8009dc2:	dcf0      	bgt.n	8009da6 <_printf_float+0x442>
 8009dc4:	e6fa      	b.n	8009bbc <_printf_float+0x258>
 8009dc6:	f04f 0800 	mov.w	r8, #0
 8009dca:	f104 0919 	add.w	r9, r4, #25
 8009dce:	e7f4      	b.n	8009dba <_printf_float+0x456>

08009dd0 <_printf_common>:
 8009dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd4:	4616      	mov	r6, r2
 8009dd6:	4699      	mov	r9, r3
 8009dd8:	688a      	ldr	r2, [r1, #8]
 8009dda:	690b      	ldr	r3, [r1, #16]
 8009ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009de0:	4293      	cmp	r3, r2
 8009de2:	bfb8      	it	lt
 8009de4:	4613      	movlt	r3, r2
 8009de6:	6033      	str	r3, [r6, #0]
 8009de8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dec:	4607      	mov	r7, r0
 8009dee:	460c      	mov	r4, r1
 8009df0:	b10a      	cbz	r2, 8009df6 <_printf_common+0x26>
 8009df2:	3301      	adds	r3, #1
 8009df4:	6033      	str	r3, [r6, #0]
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	0699      	lsls	r1, r3, #26
 8009dfa:	bf42      	ittt	mi
 8009dfc:	6833      	ldrmi	r3, [r6, #0]
 8009dfe:	3302      	addmi	r3, #2
 8009e00:	6033      	strmi	r3, [r6, #0]
 8009e02:	6825      	ldr	r5, [r4, #0]
 8009e04:	f015 0506 	ands.w	r5, r5, #6
 8009e08:	d106      	bne.n	8009e18 <_printf_common+0x48>
 8009e0a:	f104 0a19 	add.w	sl, r4, #25
 8009e0e:	68e3      	ldr	r3, [r4, #12]
 8009e10:	6832      	ldr	r2, [r6, #0]
 8009e12:	1a9b      	subs	r3, r3, r2
 8009e14:	42ab      	cmp	r3, r5
 8009e16:	dc26      	bgt.n	8009e66 <_printf_common+0x96>
 8009e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e1c:	1e13      	subs	r3, r2, #0
 8009e1e:	6822      	ldr	r2, [r4, #0]
 8009e20:	bf18      	it	ne
 8009e22:	2301      	movne	r3, #1
 8009e24:	0692      	lsls	r2, r2, #26
 8009e26:	d42b      	bmi.n	8009e80 <_printf_common+0xb0>
 8009e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e2c:	4649      	mov	r1, r9
 8009e2e:	4638      	mov	r0, r7
 8009e30:	47c0      	blx	r8
 8009e32:	3001      	adds	r0, #1
 8009e34:	d01e      	beq.n	8009e74 <_printf_common+0xa4>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	68e5      	ldr	r5, [r4, #12]
 8009e3a:	6832      	ldr	r2, [r6, #0]
 8009e3c:	f003 0306 	and.w	r3, r3, #6
 8009e40:	2b04      	cmp	r3, #4
 8009e42:	bf08      	it	eq
 8009e44:	1aad      	subeq	r5, r5, r2
 8009e46:	68a3      	ldr	r3, [r4, #8]
 8009e48:	6922      	ldr	r2, [r4, #16]
 8009e4a:	bf0c      	ite	eq
 8009e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e50:	2500      	movne	r5, #0
 8009e52:	4293      	cmp	r3, r2
 8009e54:	bfc4      	itt	gt
 8009e56:	1a9b      	subgt	r3, r3, r2
 8009e58:	18ed      	addgt	r5, r5, r3
 8009e5a:	2600      	movs	r6, #0
 8009e5c:	341a      	adds	r4, #26
 8009e5e:	42b5      	cmp	r5, r6
 8009e60:	d11a      	bne.n	8009e98 <_printf_common+0xc8>
 8009e62:	2000      	movs	r0, #0
 8009e64:	e008      	b.n	8009e78 <_printf_common+0xa8>
 8009e66:	2301      	movs	r3, #1
 8009e68:	4652      	mov	r2, sl
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	47c0      	blx	r8
 8009e70:	3001      	adds	r0, #1
 8009e72:	d103      	bne.n	8009e7c <_printf_common+0xac>
 8009e74:	f04f 30ff 	mov.w	r0, #4294967295
 8009e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e7c:	3501      	adds	r5, #1
 8009e7e:	e7c6      	b.n	8009e0e <_printf_common+0x3e>
 8009e80:	18e1      	adds	r1, r4, r3
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	2030      	movs	r0, #48	; 0x30
 8009e86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e8a:	4422      	add	r2, r4
 8009e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e94:	3302      	adds	r3, #2
 8009e96:	e7c7      	b.n	8009e28 <_printf_common+0x58>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	47c0      	blx	r8
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	d0e6      	beq.n	8009e74 <_printf_common+0xa4>
 8009ea6:	3601      	adds	r6, #1
 8009ea8:	e7d9      	b.n	8009e5e <_printf_common+0x8e>
	...

08009eac <_printf_i>:
 8009eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	4691      	mov	r9, r2
 8009eb4:	7e27      	ldrb	r7, [r4, #24]
 8009eb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009eb8:	2f78      	cmp	r7, #120	; 0x78
 8009eba:	4680      	mov	r8, r0
 8009ebc:	469a      	mov	sl, r3
 8009ebe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ec2:	d807      	bhi.n	8009ed4 <_printf_i+0x28>
 8009ec4:	2f62      	cmp	r7, #98	; 0x62
 8009ec6:	d80a      	bhi.n	8009ede <_printf_i+0x32>
 8009ec8:	2f00      	cmp	r7, #0
 8009eca:	f000 80d8 	beq.w	800a07e <_printf_i+0x1d2>
 8009ece:	2f58      	cmp	r7, #88	; 0x58
 8009ed0:	f000 80a3 	beq.w	800a01a <_printf_i+0x16e>
 8009ed4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009edc:	e03a      	b.n	8009f54 <_printf_i+0xa8>
 8009ede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ee2:	2b15      	cmp	r3, #21
 8009ee4:	d8f6      	bhi.n	8009ed4 <_printf_i+0x28>
 8009ee6:	a001      	add	r0, pc, #4	; (adr r0, 8009eec <_printf_i+0x40>)
 8009ee8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009eec:	08009f45 	.word	0x08009f45
 8009ef0:	08009f59 	.word	0x08009f59
 8009ef4:	08009ed5 	.word	0x08009ed5
 8009ef8:	08009ed5 	.word	0x08009ed5
 8009efc:	08009ed5 	.word	0x08009ed5
 8009f00:	08009ed5 	.word	0x08009ed5
 8009f04:	08009f59 	.word	0x08009f59
 8009f08:	08009ed5 	.word	0x08009ed5
 8009f0c:	08009ed5 	.word	0x08009ed5
 8009f10:	08009ed5 	.word	0x08009ed5
 8009f14:	08009ed5 	.word	0x08009ed5
 8009f18:	0800a065 	.word	0x0800a065
 8009f1c:	08009f89 	.word	0x08009f89
 8009f20:	0800a047 	.word	0x0800a047
 8009f24:	08009ed5 	.word	0x08009ed5
 8009f28:	08009ed5 	.word	0x08009ed5
 8009f2c:	0800a087 	.word	0x0800a087
 8009f30:	08009ed5 	.word	0x08009ed5
 8009f34:	08009f89 	.word	0x08009f89
 8009f38:	08009ed5 	.word	0x08009ed5
 8009f3c:	08009ed5 	.word	0x08009ed5
 8009f40:	0800a04f 	.word	0x0800a04f
 8009f44:	680b      	ldr	r3, [r1, #0]
 8009f46:	1d1a      	adds	r2, r3, #4
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	600a      	str	r2, [r1, #0]
 8009f4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f54:	2301      	movs	r3, #1
 8009f56:	e0a3      	b.n	800a0a0 <_printf_i+0x1f4>
 8009f58:	6825      	ldr	r5, [r4, #0]
 8009f5a:	6808      	ldr	r0, [r1, #0]
 8009f5c:	062e      	lsls	r6, r5, #24
 8009f5e:	f100 0304 	add.w	r3, r0, #4
 8009f62:	d50a      	bpl.n	8009f7a <_printf_i+0xce>
 8009f64:	6805      	ldr	r5, [r0, #0]
 8009f66:	600b      	str	r3, [r1, #0]
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	da03      	bge.n	8009f74 <_printf_i+0xc8>
 8009f6c:	232d      	movs	r3, #45	; 0x2d
 8009f6e:	426d      	negs	r5, r5
 8009f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f74:	485e      	ldr	r0, [pc, #376]	; (800a0f0 <_printf_i+0x244>)
 8009f76:	230a      	movs	r3, #10
 8009f78:	e019      	b.n	8009fae <_printf_i+0x102>
 8009f7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009f7e:	6805      	ldr	r5, [r0, #0]
 8009f80:	600b      	str	r3, [r1, #0]
 8009f82:	bf18      	it	ne
 8009f84:	b22d      	sxthne	r5, r5
 8009f86:	e7ef      	b.n	8009f68 <_printf_i+0xbc>
 8009f88:	680b      	ldr	r3, [r1, #0]
 8009f8a:	6825      	ldr	r5, [r4, #0]
 8009f8c:	1d18      	adds	r0, r3, #4
 8009f8e:	6008      	str	r0, [r1, #0]
 8009f90:	0628      	lsls	r0, r5, #24
 8009f92:	d501      	bpl.n	8009f98 <_printf_i+0xec>
 8009f94:	681d      	ldr	r5, [r3, #0]
 8009f96:	e002      	b.n	8009f9e <_printf_i+0xf2>
 8009f98:	0669      	lsls	r1, r5, #25
 8009f9a:	d5fb      	bpl.n	8009f94 <_printf_i+0xe8>
 8009f9c:	881d      	ldrh	r5, [r3, #0]
 8009f9e:	4854      	ldr	r0, [pc, #336]	; (800a0f0 <_printf_i+0x244>)
 8009fa0:	2f6f      	cmp	r7, #111	; 0x6f
 8009fa2:	bf0c      	ite	eq
 8009fa4:	2308      	moveq	r3, #8
 8009fa6:	230a      	movne	r3, #10
 8009fa8:	2100      	movs	r1, #0
 8009faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fae:	6866      	ldr	r6, [r4, #4]
 8009fb0:	60a6      	str	r6, [r4, #8]
 8009fb2:	2e00      	cmp	r6, #0
 8009fb4:	bfa2      	ittt	ge
 8009fb6:	6821      	ldrge	r1, [r4, #0]
 8009fb8:	f021 0104 	bicge.w	r1, r1, #4
 8009fbc:	6021      	strge	r1, [r4, #0]
 8009fbe:	b90d      	cbnz	r5, 8009fc4 <_printf_i+0x118>
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	d04d      	beq.n	800a060 <_printf_i+0x1b4>
 8009fc4:	4616      	mov	r6, r2
 8009fc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009fca:	fb03 5711 	mls	r7, r3, r1, r5
 8009fce:	5dc7      	ldrb	r7, [r0, r7]
 8009fd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009fd4:	462f      	mov	r7, r5
 8009fd6:	42bb      	cmp	r3, r7
 8009fd8:	460d      	mov	r5, r1
 8009fda:	d9f4      	bls.n	8009fc6 <_printf_i+0x11a>
 8009fdc:	2b08      	cmp	r3, #8
 8009fde:	d10b      	bne.n	8009ff8 <_printf_i+0x14c>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	07df      	lsls	r7, r3, #31
 8009fe4:	d508      	bpl.n	8009ff8 <_printf_i+0x14c>
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	6861      	ldr	r1, [r4, #4]
 8009fea:	4299      	cmp	r1, r3
 8009fec:	bfde      	ittt	le
 8009fee:	2330      	movle	r3, #48	; 0x30
 8009ff0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009ff4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009ff8:	1b92      	subs	r2, r2, r6
 8009ffa:	6122      	str	r2, [r4, #16]
 8009ffc:	f8cd a000 	str.w	sl, [sp]
 800a000:	464b      	mov	r3, r9
 800a002:	aa03      	add	r2, sp, #12
 800a004:	4621      	mov	r1, r4
 800a006:	4640      	mov	r0, r8
 800a008:	f7ff fee2 	bl	8009dd0 <_printf_common>
 800a00c:	3001      	adds	r0, #1
 800a00e:	d14c      	bne.n	800a0aa <_printf_i+0x1fe>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	b004      	add	sp, #16
 800a016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01a:	4835      	ldr	r0, [pc, #212]	; (800a0f0 <_printf_i+0x244>)
 800a01c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	680e      	ldr	r6, [r1, #0]
 800a024:	061f      	lsls	r7, r3, #24
 800a026:	f856 5b04 	ldr.w	r5, [r6], #4
 800a02a:	600e      	str	r6, [r1, #0]
 800a02c:	d514      	bpl.n	800a058 <_printf_i+0x1ac>
 800a02e:	07d9      	lsls	r1, r3, #31
 800a030:	bf44      	itt	mi
 800a032:	f043 0320 	orrmi.w	r3, r3, #32
 800a036:	6023      	strmi	r3, [r4, #0]
 800a038:	b91d      	cbnz	r5, 800a042 <_printf_i+0x196>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	f023 0320 	bic.w	r3, r3, #32
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	2310      	movs	r3, #16
 800a044:	e7b0      	b.n	8009fa8 <_printf_i+0xfc>
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	f043 0320 	orr.w	r3, r3, #32
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	2378      	movs	r3, #120	; 0x78
 800a050:	4828      	ldr	r0, [pc, #160]	; (800a0f4 <_printf_i+0x248>)
 800a052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a056:	e7e3      	b.n	800a020 <_printf_i+0x174>
 800a058:	065e      	lsls	r6, r3, #25
 800a05a:	bf48      	it	mi
 800a05c:	b2ad      	uxthmi	r5, r5
 800a05e:	e7e6      	b.n	800a02e <_printf_i+0x182>
 800a060:	4616      	mov	r6, r2
 800a062:	e7bb      	b.n	8009fdc <_printf_i+0x130>
 800a064:	680b      	ldr	r3, [r1, #0]
 800a066:	6826      	ldr	r6, [r4, #0]
 800a068:	6960      	ldr	r0, [r4, #20]
 800a06a:	1d1d      	adds	r5, r3, #4
 800a06c:	600d      	str	r5, [r1, #0]
 800a06e:	0635      	lsls	r5, r6, #24
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	d501      	bpl.n	800a078 <_printf_i+0x1cc>
 800a074:	6018      	str	r0, [r3, #0]
 800a076:	e002      	b.n	800a07e <_printf_i+0x1d2>
 800a078:	0671      	lsls	r1, r6, #25
 800a07a:	d5fb      	bpl.n	800a074 <_printf_i+0x1c8>
 800a07c:	8018      	strh	r0, [r3, #0]
 800a07e:	2300      	movs	r3, #0
 800a080:	6123      	str	r3, [r4, #16]
 800a082:	4616      	mov	r6, r2
 800a084:	e7ba      	b.n	8009ffc <_printf_i+0x150>
 800a086:	680b      	ldr	r3, [r1, #0]
 800a088:	1d1a      	adds	r2, r3, #4
 800a08a:	600a      	str	r2, [r1, #0]
 800a08c:	681e      	ldr	r6, [r3, #0]
 800a08e:	6862      	ldr	r2, [r4, #4]
 800a090:	2100      	movs	r1, #0
 800a092:	4630      	mov	r0, r6
 800a094:	f7f6 f8a4 	bl	80001e0 <memchr>
 800a098:	b108      	cbz	r0, 800a09e <_printf_i+0x1f2>
 800a09a:	1b80      	subs	r0, r0, r6
 800a09c:	6060      	str	r0, [r4, #4]
 800a09e:	6863      	ldr	r3, [r4, #4]
 800a0a0:	6123      	str	r3, [r4, #16]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a8:	e7a8      	b.n	8009ffc <_printf_i+0x150>
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	47d0      	blx	sl
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d0ab      	beq.n	800a010 <_printf_i+0x164>
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	079b      	lsls	r3, r3, #30
 800a0bc:	d413      	bmi.n	800a0e6 <_printf_i+0x23a>
 800a0be:	68e0      	ldr	r0, [r4, #12]
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	4298      	cmp	r0, r3
 800a0c4:	bfb8      	it	lt
 800a0c6:	4618      	movlt	r0, r3
 800a0c8:	e7a4      	b.n	800a014 <_printf_i+0x168>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	47d0      	blx	sl
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	d09b      	beq.n	800a010 <_printf_i+0x164>
 800a0d8:	3501      	adds	r5, #1
 800a0da:	68e3      	ldr	r3, [r4, #12]
 800a0dc:	9903      	ldr	r1, [sp, #12]
 800a0de:	1a5b      	subs	r3, r3, r1
 800a0e0:	42ab      	cmp	r3, r5
 800a0e2:	dcf2      	bgt.n	800a0ca <_printf_i+0x21e>
 800a0e4:	e7eb      	b.n	800a0be <_printf_i+0x212>
 800a0e6:	2500      	movs	r5, #0
 800a0e8:	f104 0619 	add.w	r6, r4, #25
 800a0ec:	e7f5      	b.n	800a0da <_printf_i+0x22e>
 800a0ee:	bf00      	nop
 800a0f0:	0800e80a 	.word	0x0800e80a
 800a0f4:	0800e81b 	.word	0x0800e81b

0800a0f8 <_scanf_float>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	b087      	sub	sp, #28
 800a0fe:	4617      	mov	r7, r2
 800a100:	9303      	str	r3, [sp, #12]
 800a102:	688b      	ldr	r3, [r1, #8]
 800a104:	1e5a      	subs	r2, r3, #1
 800a106:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a10a:	bf83      	ittte	hi
 800a10c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a110:	195b      	addhi	r3, r3, r5
 800a112:	9302      	strhi	r3, [sp, #8]
 800a114:	2300      	movls	r3, #0
 800a116:	bf86      	itte	hi
 800a118:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a11c:	608b      	strhi	r3, [r1, #8]
 800a11e:	9302      	strls	r3, [sp, #8]
 800a120:	680b      	ldr	r3, [r1, #0]
 800a122:	468b      	mov	fp, r1
 800a124:	2500      	movs	r5, #0
 800a126:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a12a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a12e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a132:	4680      	mov	r8, r0
 800a134:	460c      	mov	r4, r1
 800a136:	465e      	mov	r6, fp
 800a138:	46aa      	mov	sl, r5
 800a13a:	46a9      	mov	r9, r5
 800a13c:	9501      	str	r5, [sp, #4]
 800a13e:	68a2      	ldr	r2, [r4, #8]
 800a140:	b152      	cbz	r2, 800a158 <_scanf_float+0x60>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b4e      	cmp	r3, #78	; 0x4e
 800a148:	d864      	bhi.n	800a214 <_scanf_float+0x11c>
 800a14a:	2b40      	cmp	r3, #64	; 0x40
 800a14c:	d83c      	bhi.n	800a1c8 <_scanf_float+0xd0>
 800a14e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a152:	b2c8      	uxtb	r0, r1
 800a154:	280e      	cmp	r0, #14
 800a156:	d93a      	bls.n	800a1ce <_scanf_float+0xd6>
 800a158:	f1b9 0f00 	cmp.w	r9, #0
 800a15c:	d003      	beq.n	800a166 <_scanf_float+0x6e>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a16a:	f1ba 0f01 	cmp.w	sl, #1
 800a16e:	f200 8113 	bhi.w	800a398 <_scanf_float+0x2a0>
 800a172:	455e      	cmp	r6, fp
 800a174:	f200 8105 	bhi.w	800a382 <_scanf_float+0x28a>
 800a178:	2501      	movs	r5, #1
 800a17a:	4628      	mov	r0, r5
 800a17c:	b007      	add	sp, #28
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a186:	2a0d      	cmp	r2, #13
 800a188:	d8e6      	bhi.n	800a158 <_scanf_float+0x60>
 800a18a:	a101      	add	r1, pc, #4	; (adr r1, 800a190 <_scanf_float+0x98>)
 800a18c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a190:	0800a2cf 	.word	0x0800a2cf
 800a194:	0800a159 	.word	0x0800a159
 800a198:	0800a159 	.word	0x0800a159
 800a19c:	0800a159 	.word	0x0800a159
 800a1a0:	0800a32f 	.word	0x0800a32f
 800a1a4:	0800a307 	.word	0x0800a307
 800a1a8:	0800a159 	.word	0x0800a159
 800a1ac:	0800a159 	.word	0x0800a159
 800a1b0:	0800a2dd 	.word	0x0800a2dd
 800a1b4:	0800a159 	.word	0x0800a159
 800a1b8:	0800a159 	.word	0x0800a159
 800a1bc:	0800a159 	.word	0x0800a159
 800a1c0:	0800a159 	.word	0x0800a159
 800a1c4:	0800a295 	.word	0x0800a295
 800a1c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a1cc:	e7db      	b.n	800a186 <_scanf_float+0x8e>
 800a1ce:	290e      	cmp	r1, #14
 800a1d0:	d8c2      	bhi.n	800a158 <_scanf_float+0x60>
 800a1d2:	a001      	add	r0, pc, #4	; (adr r0, 800a1d8 <_scanf_float+0xe0>)
 800a1d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a1d8:	0800a287 	.word	0x0800a287
 800a1dc:	0800a159 	.word	0x0800a159
 800a1e0:	0800a287 	.word	0x0800a287
 800a1e4:	0800a31b 	.word	0x0800a31b
 800a1e8:	0800a159 	.word	0x0800a159
 800a1ec:	0800a235 	.word	0x0800a235
 800a1f0:	0800a271 	.word	0x0800a271
 800a1f4:	0800a271 	.word	0x0800a271
 800a1f8:	0800a271 	.word	0x0800a271
 800a1fc:	0800a271 	.word	0x0800a271
 800a200:	0800a271 	.word	0x0800a271
 800a204:	0800a271 	.word	0x0800a271
 800a208:	0800a271 	.word	0x0800a271
 800a20c:	0800a271 	.word	0x0800a271
 800a210:	0800a271 	.word	0x0800a271
 800a214:	2b6e      	cmp	r3, #110	; 0x6e
 800a216:	d809      	bhi.n	800a22c <_scanf_float+0x134>
 800a218:	2b60      	cmp	r3, #96	; 0x60
 800a21a:	d8b2      	bhi.n	800a182 <_scanf_float+0x8a>
 800a21c:	2b54      	cmp	r3, #84	; 0x54
 800a21e:	d077      	beq.n	800a310 <_scanf_float+0x218>
 800a220:	2b59      	cmp	r3, #89	; 0x59
 800a222:	d199      	bne.n	800a158 <_scanf_float+0x60>
 800a224:	2d07      	cmp	r5, #7
 800a226:	d197      	bne.n	800a158 <_scanf_float+0x60>
 800a228:	2508      	movs	r5, #8
 800a22a:	e029      	b.n	800a280 <_scanf_float+0x188>
 800a22c:	2b74      	cmp	r3, #116	; 0x74
 800a22e:	d06f      	beq.n	800a310 <_scanf_float+0x218>
 800a230:	2b79      	cmp	r3, #121	; 0x79
 800a232:	e7f6      	b.n	800a222 <_scanf_float+0x12a>
 800a234:	6821      	ldr	r1, [r4, #0]
 800a236:	05c8      	lsls	r0, r1, #23
 800a238:	d51a      	bpl.n	800a270 <_scanf_float+0x178>
 800a23a:	9b02      	ldr	r3, [sp, #8]
 800a23c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a240:	6021      	str	r1, [r4, #0]
 800a242:	f109 0901 	add.w	r9, r9, #1
 800a246:	b11b      	cbz	r3, 800a250 <_scanf_float+0x158>
 800a248:	3b01      	subs	r3, #1
 800a24a:	3201      	adds	r2, #1
 800a24c:	9302      	str	r3, [sp, #8]
 800a24e:	60a2      	str	r2, [r4, #8]
 800a250:	68a3      	ldr	r3, [r4, #8]
 800a252:	3b01      	subs	r3, #1
 800a254:	60a3      	str	r3, [r4, #8]
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	3301      	adds	r3, #1
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3b01      	subs	r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	607b      	str	r3, [r7, #4]
 800a264:	f340 8084 	ble.w	800a370 <_scanf_float+0x278>
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	603b      	str	r3, [r7, #0]
 800a26e:	e766      	b.n	800a13e <_scanf_float+0x46>
 800a270:	eb1a 0f05 	cmn.w	sl, r5
 800a274:	f47f af70 	bne.w	800a158 <_scanf_float+0x60>
 800a278:	6822      	ldr	r2, [r4, #0]
 800a27a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a27e:	6022      	str	r2, [r4, #0]
 800a280:	f806 3b01 	strb.w	r3, [r6], #1
 800a284:	e7e4      	b.n	800a250 <_scanf_float+0x158>
 800a286:	6822      	ldr	r2, [r4, #0]
 800a288:	0610      	lsls	r0, r2, #24
 800a28a:	f57f af65 	bpl.w	800a158 <_scanf_float+0x60>
 800a28e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a292:	e7f4      	b.n	800a27e <_scanf_float+0x186>
 800a294:	f1ba 0f00 	cmp.w	sl, #0
 800a298:	d10e      	bne.n	800a2b8 <_scanf_float+0x1c0>
 800a29a:	f1b9 0f00 	cmp.w	r9, #0
 800a29e:	d10e      	bne.n	800a2be <_scanf_float+0x1c6>
 800a2a0:	6822      	ldr	r2, [r4, #0]
 800a2a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a2a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a2aa:	d108      	bne.n	800a2be <_scanf_float+0x1c6>
 800a2ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2b0:	6022      	str	r2, [r4, #0]
 800a2b2:	f04f 0a01 	mov.w	sl, #1
 800a2b6:	e7e3      	b.n	800a280 <_scanf_float+0x188>
 800a2b8:	f1ba 0f02 	cmp.w	sl, #2
 800a2bc:	d055      	beq.n	800a36a <_scanf_float+0x272>
 800a2be:	2d01      	cmp	r5, #1
 800a2c0:	d002      	beq.n	800a2c8 <_scanf_float+0x1d0>
 800a2c2:	2d04      	cmp	r5, #4
 800a2c4:	f47f af48 	bne.w	800a158 <_scanf_float+0x60>
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	b2ed      	uxtb	r5, r5
 800a2cc:	e7d8      	b.n	800a280 <_scanf_float+0x188>
 800a2ce:	f1ba 0f01 	cmp.w	sl, #1
 800a2d2:	f47f af41 	bne.w	800a158 <_scanf_float+0x60>
 800a2d6:	f04f 0a02 	mov.w	sl, #2
 800a2da:	e7d1      	b.n	800a280 <_scanf_float+0x188>
 800a2dc:	b97d      	cbnz	r5, 800a2fe <_scanf_float+0x206>
 800a2de:	f1b9 0f00 	cmp.w	r9, #0
 800a2e2:	f47f af3c 	bne.w	800a15e <_scanf_float+0x66>
 800a2e6:	6822      	ldr	r2, [r4, #0]
 800a2e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a2ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a2f0:	f47f af39 	bne.w	800a166 <_scanf_float+0x6e>
 800a2f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2f8:	6022      	str	r2, [r4, #0]
 800a2fa:	2501      	movs	r5, #1
 800a2fc:	e7c0      	b.n	800a280 <_scanf_float+0x188>
 800a2fe:	2d03      	cmp	r5, #3
 800a300:	d0e2      	beq.n	800a2c8 <_scanf_float+0x1d0>
 800a302:	2d05      	cmp	r5, #5
 800a304:	e7de      	b.n	800a2c4 <_scanf_float+0x1cc>
 800a306:	2d02      	cmp	r5, #2
 800a308:	f47f af26 	bne.w	800a158 <_scanf_float+0x60>
 800a30c:	2503      	movs	r5, #3
 800a30e:	e7b7      	b.n	800a280 <_scanf_float+0x188>
 800a310:	2d06      	cmp	r5, #6
 800a312:	f47f af21 	bne.w	800a158 <_scanf_float+0x60>
 800a316:	2507      	movs	r5, #7
 800a318:	e7b2      	b.n	800a280 <_scanf_float+0x188>
 800a31a:	6822      	ldr	r2, [r4, #0]
 800a31c:	0591      	lsls	r1, r2, #22
 800a31e:	f57f af1b 	bpl.w	800a158 <_scanf_float+0x60>
 800a322:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a326:	6022      	str	r2, [r4, #0]
 800a328:	f8cd 9004 	str.w	r9, [sp, #4]
 800a32c:	e7a8      	b.n	800a280 <_scanf_float+0x188>
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a334:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a338:	d006      	beq.n	800a348 <_scanf_float+0x250>
 800a33a:	0550      	lsls	r0, r2, #21
 800a33c:	f57f af0c 	bpl.w	800a158 <_scanf_float+0x60>
 800a340:	f1b9 0f00 	cmp.w	r9, #0
 800a344:	f43f af0f 	beq.w	800a166 <_scanf_float+0x6e>
 800a348:	0591      	lsls	r1, r2, #22
 800a34a:	bf58      	it	pl
 800a34c:	9901      	ldrpl	r1, [sp, #4]
 800a34e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a352:	bf58      	it	pl
 800a354:	eba9 0101 	subpl.w	r1, r9, r1
 800a358:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a35c:	bf58      	it	pl
 800a35e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a362:	6022      	str	r2, [r4, #0]
 800a364:	f04f 0900 	mov.w	r9, #0
 800a368:	e78a      	b.n	800a280 <_scanf_float+0x188>
 800a36a:	f04f 0a03 	mov.w	sl, #3
 800a36e:	e787      	b.n	800a280 <_scanf_float+0x188>
 800a370:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a374:	4639      	mov	r1, r7
 800a376:	4640      	mov	r0, r8
 800a378:	4798      	blx	r3
 800a37a:	2800      	cmp	r0, #0
 800a37c:	f43f aedf 	beq.w	800a13e <_scanf_float+0x46>
 800a380:	e6ea      	b.n	800a158 <_scanf_float+0x60>
 800a382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a386:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a38a:	463a      	mov	r2, r7
 800a38c:	4640      	mov	r0, r8
 800a38e:	4798      	blx	r3
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	3b01      	subs	r3, #1
 800a394:	6123      	str	r3, [r4, #16]
 800a396:	e6ec      	b.n	800a172 <_scanf_float+0x7a>
 800a398:	1e6b      	subs	r3, r5, #1
 800a39a:	2b06      	cmp	r3, #6
 800a39c:	d825      	bhi.n	800a3ea <_scanf_float+0x2f2>
 800a39e:	2d02      	cmp	r5, #2
 800a3a0:	d836      	bhi.n	800a410 <_scanf_float+0x318>
 800a3a2:	455e      	cmp	r6, fp
 800a3a4:	f67f aee8 	bls.w	800a178 <_scanf_float+0x80>
 800a3a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3b0:	463a      	mov	r2, r7
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	4798      	blx	r3
 800a3b6:	6923      	ldr	r3, [r4, #16]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	6123      	str	r3, [r4, #16]
 800a3bc:	e7f1      	b.n	800a3a2 <_scanf_float+0x2aa>
 800a3be:	9802      	ldr	r0, [sp, #8]
 800a3c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a3c8:	9002      	str	r0, [sp, #8]
 800a3ca:	463a      	mov	r2, r7
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	4798      	blx	r3
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	6123      	str	r3, [r4, #16]
 800a3d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3da:	fa5f fa8a 	uxtb.w	sl, sl
 800a3de:	f1ba 0f02 	cmp.w	sl, #2
 800a3e2:	d1ec      	bne.n	800a3be <_scanf_float+0x2c6>
 800a3e4:	3d03      	subs	r5, #3
 800a3e6:	b2ed      	uxtb	r5, r5
 800a3e8:	1b76      	subs	r6, r6, r5
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	05da      	lsls	r2, r3, #23
 800a3ee:	d52f      	bpl.n	800a450 <_scanf_float+0x358>
 800a3f0:	055b      	lsls	r3, r3, #21
 800a3f2:	d510      	bpl.n	800a416 <_scanf_float+0x31e>
 800a3f4:	455e      	cmp	r6, fp
 800a3f6:	f67f aebf 	bls.w	800a178 <_scanf_float+0x80>
 800a3fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a402:	463a      	mov	r2, r7
 800a404:	4640      	mov	r0, r8
 800a406:	4798      	blx	r3
 800a408:	6923      	ldr	r3, [r4, #16]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	6123      	str	r3, [r4, #16]
 800a40e:	e7f1      	b.n	800a3f4 <_scanf_float+0x2fc>
 800a410:	46aa      	mov	sl, r5
 800a412:	9602      	str	r6, [sp, #8]
 800a414:	e7df      	b.n	800a3d6 <_scanf_float+0x2de>
 800a416:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	2965      	cmp	r1, #101	; 0x65
 800a41e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a422:	f106 35ff 	add.w	r5, r6, #4294967295
 800a426:	6123      	str	r3, [r4, #16]
 800a428:	d00c      	beq.n	800a444 <_scanf_float+0x34c>
 800a42a:	2945      	cmp	r1, #69	; 0x45
 800a42c:	d00a      	beq.n	800a444 <_scanf_float+0x34c>
 800a42e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a432:	463a      	mov	r2, r7
 800a434:	4640      	mov	r0, r8
 800a436:	4798      	blx	r3
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a43e:	3b01      	subs	r3, #1
 800a440:	1eb5      	subs	r5, r6, #2
 800a442:	6123      	str	r3, [r4, #16]
 800a444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a448:	463a      	mov	r2, r7
 800a44a:	4640      	mov	r0, r8
 800a44c:	4798      	blx	r3
 800a44e:	462e      	mov	r6, r5
 800a450:	6825      	ldr	r5, [r4, #0]
 800a452:	f015 0510 	ands.w	r5, r5, #16
 800a456:	d158      	bne.n	800a50a <_scanf_float+0x412>
 800a458:	7035      	strb	r5, [r6, #0]
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a464:	d11c      	bne.n	800a4a0 <_scanf_float+0x3a8>
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	454b      	cmp	r3, r9
 800a46a:	eba3 0209 	sub.w	r2, r3, r9
 800a46e:	d124      	bne.n	800a4ba <_scanf_float+0x3c2>
 800a470:	2200      	movs	r2, #0
 800a472:	4659      	mov	r1, fp
 800a474:	4640      	mov	r0, r8
 800a476:	f000 ff29 	bl	800b2cc <_strtod_r>
 800a47a:	9b03      	ldr	r3, [sp, #12]
 800a47c:	6821      	ldr	r1, [r4, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f011 0f02 	tst.w	r1, #2
 800a484:	ec57 6b10 	vmov	r6, r7, d0
 800a488:	f103 0204 	add.w	r2, r3, #4
 800a48c:	d020      	beq.n	800a4d0 <_scanf_float+0x3d8>
 800a48e:	9903      	ldr	r1, [sp, #12]
 800a490:	600a      	str	r2, [r1, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	e9c3 6700 	strd	r6, r7, [r3]
 800a498:	68e3      	ldr	r3, [r4, #12]
 800a49a:	3301      	adds	r3, #1
 800a49c:	60e3      	str	r3, [r4, #12]
 800a49e:	e66c      	b.n	800a17a <_scanf_float+0x82>
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0e4      	beq.n	800a470 <_scanf_float+0x378>
 800a4a6:	9905      	ldr	r1, [sp, #20]
 800a4a8:	230a      	movs	r3, #10
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	3101      	adds	r1, #1
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	f000 ff96 	bl	800b3e0 <_strtol_r>
 800a4b4:	9b04      	ldr	r3, [sp, #16]
 800a4b6:	9e05      	ldr	r6, [sp, #20]
 800a4b8:	1ac2      	subs	r2, r0, r3
 800a4ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a4be:	429e      	cmp	r6, r3
 800a4c0:	bf28      	it	cs
 800a4c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a4c6:	4912      	ldr	r1, [pc, #72]	; (800a510 <_scanf_float+0x418>)
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	f000 f8b9 	bl	800a640 <siprintf>
 800a4ce:	e7cf      	b.n	800a470 <_scanf_float+0x378>
 800a4d0:	f011 0f04 	tst.w	r1, #4
 800a4d4:	9903      	ldr	r1, [sp, #12]
 800a4d6:	600a      	str	r2, [r1, #0]
 800a4d8:	d1db      	bne.n	800a492 <_scanf_float+0x39a>
 800a4da:	f8d3 8000 	ldr.w	r8, [r3]
 800a4de:	ee10 2a10 	vmov	r2, s0
 800a4e2:	ee10 0a10 	vmov	r0, s0
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	f7f6 fb1f 	bl	8000b2c <__aeabi_dcmpun>
 800a4ee:	b128      	cbz	r0, 800a4fc <_scanf_float+0x404>
 800a4f0:	4808      	ldr	r0, [pc, #32]	; (800a514 <_scanf_float+0x41c>)
 800a4f2:	f000 f89f 	bl	800a634 <nanf>
 800a4f6:	ed88 0a00 	vstr	s0, [r8]
 800a4fa:	e7cd      	b.n	800a498 <_scanf_float+0x3a0>
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	4639      	mov	r1, r7
 800a500:	f7f6 fb72 	bl	8000be8 <__aeabi_d2f>
 800a504:	f8c8 0000 	str.w	r0, [r8]
 800a508:	e7c6      	b.n	800a498 <_scanf_float+0x3a0>
 800a50a:	2500      	movs	r5, #0
 800a50c:	e635      	b.n	800a17a <_scanf_float+0x82>
 800a50e:	bf00      	nop
 800a510:	0800e82c 	.word	0x0800e82c
 800a514:	0800eca8 	.word	0x0800eca8

0800a518 <iprintf>:
 800a518:	b40f      	push	{r0, r1, r2, r3}
 800a51a:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <iprintf+0x2c>)
 800a51c:	b513      	push	{r0, r1, r4, lr}
 800a51e:	681c      	ldr	r4, [r3, #0]
 800a520:	b124      	cbz	r4, 800a52c <iprintf+0x14>
 800a522:	69a3      	ldr	r3, [r4, #24]
 800a524:	b913      	cbnz	r3, 800a52c <iprintf+0x14>
 800a526:	4620      	mov	r0, r4
 800a528:	f001 ffb0 	bl	800c48c <__sinit>
 800a52c:	ab05      	add	r3, sp, #20
 800a52e:	9a04      	ldr	r2, [sp, #16]
 800a530:	68a1      	ldr	r1, [r4, #8]
 800a532:	9301      	str	r3, [sp, #4]
 800a534:	4620      	mov	r0, r4
 800a536:	f003 fb35 	bl	800dba4 <_vfiprintf_r>
 800a53a:	b002      	add	sp, #8
 800a53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a540:	b004      	add	sp, #16
 800a542:	4770      	bx	lr
 800a544:	2000000c 	.word	0x2000000c

0800a548 <_puts_r>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	460e      	mov	r6, r1
 800a54c:	4605      	mov	r5, r0
 800a54e:	b118      	cbz	r0, 800a558 <_puts_r+0x10>
 800a550:	6983      	ldr	r3, [r0, #24]
 800a552:	b90b      	cbnz	r3, 800a558 <_puts_r+0x10>
 800a554:	f001 ff9a 	bl	800c48c <__sinit>
 800a558:	69ab      	ldr	r3, [r5, #24]
 800a55a:	68ac      	ldr	r4, [r5, #8]
 800a55c:	b913      	cbnz	r3, 800a564 <_puts_r+0x1c>
 800a55e:	4628      	mov	r0, r5
 800a560:	f001 ff94 	bl	800c48c <__sinit>
 800a564:	4b2c      	ldr	r3, [pc, #176]	; (800a618 <_puts_r+0xd0>)
 800a566:	429c      	cmp	r4, r3
 800a568:	d120      	bne.n	800a5ac <_puts_r+0x64>
 800a56a:	686c      	ldr	r4, [r5, #4]
 800a56c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a56e:	07db      	lsls	r3, r3, #31
 800a570:	d405      	bmi.n	800a57e <_puts_r+0x36>
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	0598      	lsls	r0, r3, #22
 800a576:	d402      	bmi.n	800a57e <_puts_r+0x36>
 800a578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a57a:	f002 fb98 	bl	800ccae <__retarget_lock_acquire_recursive>
 800a57e:	89a3      	ldrh	r3, [r4, #12]
 800a580:	0719      	lsls	r1, r3, #28
 800a582:	d51d      	bpl.n	800a5c0 <_puts_r+0x78>
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	b1db      	cbz	r3, 800a5c0 <_puts_r+0x78>
 800a588:	3e01      	subs	r6, #1
 800a58a:	68a3      	ldr	r3, [r4, #8]
 800a58c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a590:	3b01      	subs	r3, #1
 800a592:	60a3      	str	r3, [r4, #8]
 800a594:	bb39      	cbnz	r1, 800a5e6 <_puts_r+0x9e>
 800a596:	2b00      	cmp	r3, #0
 800a598:	da38      	bge.n	800a60c <_puts_r+0xc4>
 800a59a:	4622      	mov	r2, r4
 800a59c:	210a      	movs	r1, #10
 800a59e:	4628      	mov	r0, r5
 800a5a0:	f000 ff20 	bl	800b3e4 <__swbuf_r>
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d011      	beq.n	800a5cc <_puts_r+0x84>
 800a5a8:	250a      	movs	r5, #10
 800a5aa:	e011      	b.n	800a5d0 <_puts_r+0x88>
 800a5ac:	4b1b      	ldr	r3, [pc, #108]	; (800a61c <_puts_r+0xd4>)
 800a5ae:	429c      	cmp	r4, r3
 800a5b0:	d101      	bne.n	800a5b6 <_puts_r+0x6e>
 800a5b2:	68ac      	ldr	r4, [r5, #8]
 800a5b4:	e7da      	b.n	800a56c <_puts_r+0x24>
 800a5b6:	4b1a      	ldr	r3, [pc, #104]	; (800a620 <_puts_r+0xd8>)
 800a5b8:	429c      	cmp	r4, r3
 800a5ba:	bf08      	it	eq
 800a5bc:	68ec      	ldreq	r4, [r5, #12]
 800a5be:	e7d5      	b.n	800a56c <_puts_r+0x24>
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	f000 ff60 	bl	800b488 <__swsetup_r>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d0dd      	beq.n	800a588 <_puts_r+0x40>
 800a5cc:	f04f 35ff 	mov.w	r5, #4294967295
 800a5d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5d2:	07da      	lsls	r2, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_puts_r+0x9a>
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	059b      	lsls	r3, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_puts_r+0x9a>
 800a5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5de:	f002 fb67 	bl	800ccb0 <__retarget_lock_release_recursive>
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	da04      	bge.n	800a5f4 <_puts_r+0xac>
 800a5ea:	69a2      	ldr	r2, [r4, #24]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	dc06      	bgt.n	800a5fe <_puts_r+0xb6>
 800a5f0:	290a      	cmp	r1, #10
 800a5f2:	d004      	beq.n	800a5fe <_puts_r+0xb6>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	6022      	str	r2, [r4, #0]
 800a5fa:	7019      	strb	r1, [r3, #0]
 800a5fc:	e7c5      	b.n	800a58a <_puts_r+0x42>
 800a5fe:	4622      	mov	r2, r4
 800a600:	4628      	mov	r0, r5
 800a602:	f000 feef 	bl	800b3e4 <__swbuf_r>
 800a606:	3001      	adds	r0, #1
 800a608:	d1bf      	bne.n	800a58a <_puts_r+0x42>
 800a60a:	e7df      	b.n	800a5cc <_puts_r+0x84>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	250a      	movs	r5, #10
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	6022      	str	r2, [r4, #0]
 800a614:	701d      	strb	r5, [r3, #0]
 800a616:	e7db      	b.n	800a5d0 <_puts_r+0x88>
 800a618:	0800ea40 	.word	0x0800ea40
 800a61c:	0800ea60 	.word	0x0800ea60
 800a620:	0800ea20 	.word	0x0800ea20

0800a624 <puts>:
 800a624:	4b02      	ldr	r3, [pc, #8]	; (800a630 <puts+0xc>)
 800a626:	4601      	mov	r1, r0
 800a628:	6818      	ldr	r0, [r3, #0]
 800a62a:	f7ff bf8d 	b.w	800a548 <_puts_r>
 800a62e:	bf00      	nop
 800a630:	2000000c 	.word	0x2000000c

0800a634 <nanf>:
 800a634:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a63c <nanf+0x8>
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	7fc00000 	.word	0x7fc00000

0800a640 <siprintf>:
 800a640:	b40e      	push	{r1, r2, r3}
 800a642:	b500      	push	{lr}
 800a644:	b09c      	sub	sp, #112	; 0x70
 800a646:	ab1d      	add	r3, sp, #116	; 0x74
 800a648:	9002      	str	r0, [sp, #8]
 800a64a:	9006      	str	r0, [sp, #24]
 800a64c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a650:	4809      	ldr	r0, [pc, #36]	; (800a678 <siprintf+0x38>)
 800a652:	9107      	str	r1, [sp, #28]
 800a654:	9104      	str	r1, [sp, #16]
 800a656:	4909      	ldr	r1, [pc, #36]	; (800a67c <siprintf+0x3c>)
 800a658:	f853 2b04 	ldr.w	r2, [r3], #4
 800a65c:	9105      	str	r1, [sp, #20]
 800a65e:	6800      	ldr	r0, [r0, #0]
 800a660:	9301      	str	r3, [sp, #4]
 800a662:	a902      	add	r1, sp, #8
 800a664:	f003 f974 	bl	800d950 <_svfiprintf_r>
 800a668:	9b02      	ldr	r3, [sp, #8]
 800a66a:	2200      	movs	r2, #0
 800a66c:	701a      	strb	r2, [r3, #0]
 800a66e:	b01c      	add	sp, #112	; 0x70
 800a670:	f85d eb04 	ldr.w	lr, [sp], #4
 800a674:	b003      	add	sp, #12
 800a676:	4770      	bx	lr
 800a678:	2000000c 	.word	0x2000000c
 800a67c:	ffff0208 	.word	0xffff0208

0800a680 <sulp>:
 800a680:	b570      	push	{r4, r5, r6, lr}
 800a682:	4604      	mov	r4, r0
 800a684:	460d      	mov	r5, r1
 800a686:	ec45 4b10 	vmov	d0, r4, r5
 800a68a:	4616      	mov	r6, r2
 800a68c:	f002 fefc 	bl	800d488 <__ulp>
 800a690:	ec51 0b10 	vmov	r0, r1, d0
 800a694:	b17e      	cbz	r6, 800a6b6 <sulp+0x36>
 800a696:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a69a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	dd09      	ble.n	800a6b6 <sulp+0x36>
 800a6a2:	051b      	lsls	r3, r3, #20
 800a6a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a6a8:	2400      	movs	r4, #0
 800a6aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	462b      	mov	r3, r5
 800a6b2:	f7f5 ffa1 	bl	80005f8 <__aeabi_dmul>
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}

0800a6b8 <_strtod_l>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	b0a3      	sub	sp, #140	; 0x8c
 800a6be:	461f      	mov	r7, r3
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	931e      	str	r3, [sp, #120]	; 0x78
 800a6c4:	4ba4      	ldr	r3, [pc, #656]	; (800a958 <_strtod_l+0x2a0>)
 800a6c6:	9219      	str	r2, [sp, #100]	; 0x64
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	9307      	str	r3, [sp, #28]
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	4688      	mov	r8, r1
 800a6d2:	f7f5 fd7d 	bl	80001d0 <strlen>
 800a6d6:	f04f 0a00 	mov.w	sl, #0
 800a6da:	4605      	mov	r5, r0
 800a6dc:	f04f 0b00 	mov.w	fp, #0
 800a6e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a6e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6e6:	781a      	ldrb	r2, [r3, #0]
 800a6e8:	2a2b      	cmp	r2, #43	; 0x2b
 800a6ea:	d04c      	beq.n	800a786 <_strtod_l+0xce>
 800a6ec:	d839      	bhi.n	800a762 <_strtod_l+0xaa>
 800a6ee:	2a0d      	cmp	r2, #13
 800a6f0:	d832      	bhi.n	800a758 <_strtod_l+0xa0>
 800a6f2:	2a08      	cmp	r2, #8
 800a6f4:	d832      	bhi.n	800a75c <_strtod_l+0xa4>
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	d03c      	beq.n	800a774 <_strtod_l+0xbc>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	930e      	str	r3, [sp, #56]	; 0x38
 800a6fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a700:	7833      	ldrb	r3, [r6, #0]
 800a702:	2b30      	cmp	r3, #48	; 0x30
 800a704:	f040 80b4 	bne.w	800a870 <_strtod_l+0x1b8>
 800a708:	7873      	ldrb	r3, [r6, #1]
 800a70a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a70e:	2b58      	cmp	r3, #88	; 0x58
 800a710:	d16c      	bne.n	800a7ec <_strtod_l+0x134>
 800a712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a714:	9301      	str	r3, [sp, #4]
 800a716:	ab1e      	add	r3, sp, #120	; 0x78
 800a718:	9702      	str	r7, [sp, #8]
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	4a8f      	ldr	r2, [pc, #572]	; (800a95c <_strtod_l+0x2a4>)
 800a71e:	ab1f      	add	r3, sp, #124	; 0x7c
 800a720:	a91d      	add	r1, sp, #116	; 0x74
 800a722:	4620      	mov	r0, r4
 800a724:	f001 ffb6 	bl	800c694 <__gethex>
 800a728:	f010 0707 	ands.w	r7, r0, #7
 800a72c:	4605      	mov	r5, r0
 800a72e:	d005      	beq.n	800a73c <_strtod_l+0x84>
 800a730:	2f06      	cmp	r7, #6
 800a732:	d12a      	bne.n	800a78a <_strtod_l+0xd2>
 800a734:	3601      	adds	r6, #1
 800a736:	2300      	movs	r3, #0
 800a738:	961d      	str	r6, [sp, #116]	; 0x74
 800a73a:	930e      	str	r3, [sp, #56]	; 0x38
 800a73c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f040 8596 	bne.w	800b270 <_strtod_l+0xbb8>
 800a744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a746:	b1db      	cbz	r3, 800a780 <_strtod_l+0xc8>
 800a748:	4652      	mov	r2, sl
 800a74a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a74e:	ec43 2b10 	vmov	d0, r2, r3
 800a752:	b023      	add	sp, #140	; 0x8c
 800a754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a758:	2a20      	cmp	r2, #32
 800a75a:	d1ce      	bne.n	800a6fa <_strtod_l+0x42>
 800a75c:	3301      	adds	r3, #1
 800a75e:	931d      	str	r3, [sp, #116]	; 0x74
 800a760:	e7c0      	b.n	800a6e4 <_strtod_l+0x2c>
 800a762:	2a2d      	cmp	r2, #45	; 0x2d
 800a764:	d1c9      	bne.n	800a6fa <_strtod_l+0x42>
 800a766:	2201      	movs	r2, #1
 800a768:	920e      	str	r2, [sp, #56]	; 0x38
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	921d      	str	r2, [sp, #116]	; 0x74
 800a76e:	785b      	ldrb	r3, [r3, #1]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1c4      	bne.n	800a6fe <_strtod_l+0x46>
 800a774:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a776:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f040 8576 	bne.w	800b26c <_strtod_l+0xbb4>
 800a780:	4652      	mov	r2, sl
 800a782:	465b      	mov	r3, fp
 800a784:	e7e3      	b.n	800a74e <_strtod_l+0x96>
 800a786:	2200      	movs	r2, #0
 800a788:	e7ee      	b.n	800a768 <_strtod_l+0xb0>
 800a78a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a78c:	b13a      	cbz	r2, 800a79e <_strtod_l+0xe6>
 800a78e:	2135      	movs	r1, #53	; 0x35
 800a790:	a820      	add	r0, sp, #128	; 0x80
 800a792:	f002 ff84 	bl	800d69e <__copybits>
 800a796:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a798:	4620      	mov	r0, r4
 800a79a:	f002 fb49 	bl	800ce30 <_Bfree>
 800a79e:	3f01      	subs	r7, #1
 800a7a0:	2f05      	cmp	r7, #5
 800a7a2:	d807      	bhi.n	800a7b4 <_strtod_l+0xfc>
 800a7a4:	e8df f007 	tbb	[pc, r7]
 800a7a8:	1d180b0e 	.word	0x1d180b0e
 800a7ac:	030e      	.short	0x030e
 800a7ae:	f04f 0b00 	mov.w	fp, #0
 800a7b2:	46da      	mov	sl, fp
 800a7b4:	0728      	lsls	r0, r5, #28
 800a7b6:	d5c1      	bpl.n	800a73c <_strtod_l+0x84>
 800a7b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a7bc:	e7be      	b.n	800a73c <_strtod_l+0x84>
 800a7be:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a7c2:	e7f7      	b.n	800a7b4 <_strtod_l+0xfc>
 800a7c4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a7c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a7ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a7ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a7d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a7d6:	e7ed      	b.n	800a7b4 <_strtod_l+0xfc>
 800a7d8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a960 <_strtod_l+0x2a8>
 800a7dc:	f04f 0a00 	mov.w	sl, #0
 800a7e0:	e7e8      	b.n	800a7b4 <_strtod_l+0xfc>
 800a7e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a7e6:	f04f 3aff 	mov.w	sl, #4294967295
 800a7ea:	e7e3      	b.n	800a7b4 <_strtod_l+0xfc>
 800a7ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	921d      	str	r2, [sp, #116]	; 0x74
 800a7f2:	785b      	ldrb	r3, [r3, #1]
 800a7f4:	2b30      	cmp	r3, #48	; 0x30
 800a7f6:	d0f9      	beq.n	800a7ec <_strtod_l+0x134>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d09f      	beq.n	800a73c <_strtod_l+0x84>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f04f 0900 	mov.w	r9, #0
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a806:	930a      	str	r3, [sp, #40]	; 0x28
 800a808:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a80c:	464f      	mov	r7, r9
 800a80e:	220a      	movs	r2, #10
 800a810:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a812:	7806      	ldrb	r6, [r0, #0]
 800a814:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a818:	b2d9      	uxtb	r1, r3
 800a81a:	2909      	cmp	r1, #9
 800a81c:	d92a      	bls.n	800a874 <_strtod_l+0x1bc>
 800a81e:	9907      	ldr	r1, [sp, #28]
 800a820:	462a      	mov	r2, r5
 800a822:	f003 fb4c 	bl	800debe <strncmp>
 800a826:	b398      	cbz	r0, 800a890 <_strtod_l+0x1d8>
 800a828:	2000      	movs	r0, #0
 800a82a:	4633      	mov	r3, r6
 800a82c:	463d      	mov	r5, r7
 800a82e:	9007      	str	r0, [sp, #28]
 800a830:	4602      	mov	r2, r0
 800a832:	2b65      	cmp	r3, #101	; 0x65
 800a834:	d001      	beq.n	800a83a <_strtod_l+0x182>
 800a836:	2b45      	cmp	r3, #69	; 0x45
 800a838:	d118      	bne.n	800a86c <_strtod_l+0x1b4>
 800a83a:	b91d      	cbnz	r5, 800a844 <_strtod_l+0x18c>
 800a83c:	9b04      	ldr	r3, [sp, #16]
 800a83e:	4303      	orrs	r3, r0
 800a840:	d098      	beq.n	800a774 <_strtod_l+0xbc>
 800a842:	2500      	movs	r5, #0
 800a844:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a848:	f108 0301 	add.w	r3, r8, #1
 800a84c:	931d      	str	r3, [sp, #116]	; 0x74
 800a84e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a852:	2b2b      	cmp	r3, #43	; 0x2b
 800a854:	d075      	beq.n	800a942 <_strtod_l+0x28a>
 800a856:	2b2d      	cmp	r3, #45	; 0x2d
 800a858:	d07b      	beq.n	800a952 <_strtod_l+0x29a>
 800a85a:	f04f 0c00 	mov.w	ip, #0
 800a85e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a862:	2909      	cmp	r1, #9
 800a864:	f240 8082 	bls.w	800a96c <_strtod_l+0x2b4>
 800a868:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a86c:	2600      	movs	r6, #0
 800a86e:	e09d      	b.n	800a9ac <_strtod_l+0x2f4>
 800a870:	2300      	movs	r3, #0
 800a872:	e7c4      	b.n	800a7fe <_strtod_l+0x146>
 800a874:	2f08      	cmp	r7, #8
 800a876:	bfd8      	it	le
 800a878:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a87a:	f100 0001 	add.w	r0, r0, #1
 800a87e:	bfda      	itte	le
 800a880:	fb02 3301 	mlale	r3, r2, r1, r3
 800a884:	9309      	strle	r3, [sp, #36]	; 0x24
 800a886:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a88a:	3701      	adds	r7, #1
 800a88c:	901d      	str	r0, [sp, #116]	; 0x74
 800a88e:	e7bf      	b.n	800a810 <_strtod_l+0x158>
 800a890:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a892:	195a      	adds	r2, r3, r5
 800a894:	921d      	str	r2, [sp, #116]	; 0x74
 800a896:	5d5b      	ldrb	r3, [r3, r5]
 800a898:	2f00      	cmp	r7, #0
 800a89a:	d037      	beq.n	800a90c <_strtod_l+0x254>
 800a89c:	9007      	str	r0, [sp, #28]
 800a89e:	463d      	mov	r5, r7
 800a8a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a8a4:	2a09      	cmp	r2, #9
 800a8a6:	d912      	bls.n	800a8ce <_strtod_l+0x216>
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	e7c2      	b.n	800a832 <_strtod_l+0x17a>
 800a8ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	921d      	str	r2, [sp, #116]	; 0x74
 800a8b2:	785b      	ldrb	r3, [r3, #1]
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	2b30      	cmp	r3, #48	; 0x30
 800a8b8:	d0f8      	beq.n	800a8ac <_strtod_l+0x1f4>
 800a8ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a8be:	2a08      	cmp	r2, #8
 800a8c0:	f200 84db 	bhi.w	800b27a <_strtod_l+0xbc2>
 800a8c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a8c6:	9007      	str	r0, [sp, #28]
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	920a      	str	r2, [sp, #40]	; 0x28
 800a8cc:	4605      	mov	r5, r0
 800a8ce:	3b30      	subs	r3, #48	; 0x30
 800a8d0:	f100 0201 	add.w	r2, r0, #1
 800a8d4:	d014      	beq.n	800a900 <_strtod_l+0x248>
 800a8d6:	9907      	ldr	r1, [sp, #28]
 800a8d8:	4411      	add	r1, r2
 800a8da:	9107      	str	r1, [sp, #28]
 800a8dc:	462a      	mov	r2, r5
 800a8de:	eb00 0e05 	add.w	lr, r0, r5
 800a8e2:	210a      	movs	r1, #10
 800a8e4:	4572      	cmp	r2, lr
 800a8e6:	d113      	bne.n	800a910 <_strtod_l+0x258>
 800a8e8:	182a      	adds	r2, r5, r0
 800a8ea:	2a08      	cmp	r2, #8
 800a8ec:	f105 0501 	add.w	r5, r5, #1
 800a8f0:	4405      	add	r5, r0
 800a8f2:	dc1c      	bgt.n	800a92e <_strtod_l+0x276>
 800a8f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8f6:	220a      	movs	r2, #10
 800a8f8:	fb02 3301 	mla	r3, r2, r1, r3
 800a8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a8fe:	2200      	movs	r2, #0
 800a900:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a902:	1c59      	adds	r1, r3, #1
 800a904:	911d      	str	r1, [sp, #116]	; 0x74
 800a906:	785b      	ldrb	r3, [r3, #1]
 800a908:	4610      	mov	r0, r2
 800a90a:	e7c9      	b.n	800a8a0 <_strtod_l+0x1e8>
 800a90c:	4638      	mov	r0, r7
 800a90e:	e7d2      	b.n	800a8b6 <_strtod_l+0x1fe>
 800a910:	2a08      	cmp	r2, #8
 800a912:	dc04      	bgt.n	800a91e <_strtod_l+0x266>
 800a914:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a916:	434e      	muls	r6, r1
 800a918:	9609      	str	r6, [sp, #36]	; 0x24
 800a91a:	3201      	adds	r2, #1
 800a91c:	e7e2      	b.n	800a8e4 <_strtod_l+0x22c>
 800a91e:	f102 0c01 	add.w	ip, r2, #1
 800a922:	f1bc 0f10 	cmp.w	ip, #16
 800a926:	bfd8      	it	le
 800a928:	fb01 f909 	mulle.w	r9, r1, r9
 800a92c:	e7f5      	b.n	800a91a <_strtod_l+0x262>
 800a92e:	2d10      	cmp	r5, #16
 800a930:	bfdc      	itt	le
 800a932:	220a      	movle	r2, #10
 800a934:	fb02 3909 	mlale	r9, r2, r9, r3
 800a938:	e7e1      	b.n	800a8fe <_strtod_l+0x246>
 800a93a:	2300      	movs	r3, #0
 800a93c:	9307      	str	r3, [sp, #28]
 800a93e:	2201      	movs	r2, #1
 800a940:	e77c      	b.n	800a83c <_strtod_l+0x184>
 800a942:	f04f 0c00 	mov.w	ip, #0
 800a946:	f108 0302 	add.w	r3, r8, #2
 800a94a:	931d      	str	r3, [sp, #116]	; 0x74
 800a94c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a950:	e785      	b.n	800a85e <_strtod_l+0x1a6>
 800a952:	f04f 0c01 	mov.w	ip, #1
 800a956:	e7f6      	b.n	800a946 <_strtod_l+0x28e>
 800a958:	0800eaec 	.word	0x0800eaec
 800a95c:	0800e834 	.word	0x0800e834
 800a960:	7ff00000 	.word	0x7ff00000
 800a964:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a966:	1c59      	adds	r1, r3, #1
 800a968:	911d      	str	r1, [sp, #116]	; 0x74
 800a96a:	785b      	ldrb	r3, [r3, #1]
 800a96c:	2b30      	cmp	r3, #48	; 0x30
 800a96e:	d0f9      	beq.n	800a964 <_strtod_l+0x2ac>
 800a970:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a974:	2908      	cmp	r1, #8
 800a976:	f63f af79 	bhi.w	800a86c <_strtod_l+0x1b4>
 800a97a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a97e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a980:	9308      	str	r3, [sp, #32]
 800a982:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a984:	1c59      	adds	r1, r3, #1
 800a986:	911d      	str	r1, [sp, #116]	; 0x74
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a98e:	2e09      	cmp	r6, #9
 800a990:	d937      	bls.n	800aa02 <_strtod_l+0x34a>
 800a992:	9e08      	ldr	r6, [sp, #32]
 800a994:	1b89      	subs	r1, r1, r6
 800a996:	2908      	cmp	r1, #8
 800a998:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a99c:	dc02      	bgt.n	800a9a4 <_strtod_l+0x2ec>
 800a99e:	4576      	cmp	r6, lr
 800a9a0:	bfa8      	it	ge
 800a9a2:	4676      	movge	r6, lr
 800a9a4:	f1bc 0f00 	cmp.w	ip, #0
 800a9a8:	d000      	beq.n	800a9ac <_strtod_l+0x2f4>
 800a9aa:	4276      	negs	r6, r6
 800a9ac:	2d00      	cmp	r5, #0
 800a9ae:	d14f      	bne.n	800aa50 <_strtod_l+0x398>
 800a9b0:	9904      	ldr	r1, [sp, #16]
 800a9b2:	4301      	orrs	r1, r0
 800a9b4:	f47f aec2 	bne.w	800a73c <_strtod_l+0x84>
 800a9b8:	2a00      	cmp	r2, #0
 800a9ba:	f47f aedb 	bne.w	800a774 <_strtod_l+0xbc>
 800a9be:	2b69      	cmp	r3, #105	; 0x69
 800a9c0:	d027      	beq.n	800aa12 <_strtod_l+0x35a>
 800a9c2:	dc24      	bgt.n	800aa0e <_strtod_l+0x356>
 800a9c4:	2b49      	cmp	r3, #73	; 0x49
 800a9c6:	d024      	beq.n	800aa12 <_strtod_l+0x35a>
 800a9c8:	2b4e      	cmp	r3, #78	; 0x4e
 800a9ca:	f47f aed3 	bne.w	800a774 <_strtod_l+0xbc>
 800a9ce:	499e      	ldr	r1, [pc, #632]	; (800ac48 <_strtod_l+0x590>)
 800a9d0:	a81d      	add	r0, sp, #116	; 0x74
 800a9d2:	f002 f8b7 	bl	800cb44 <__match>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	f43f aecc 	beq.w	800a774 <_strtod_l+0xbc>
 800a9dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b28      	cmp	r3, #40	; 0x28
 800a9e2:	d12d      	bne.n	800aa40 <_strtod_l+0x388>
 800a9e4:	4999      	ldr	r1, [pc, #612]	; (800ac4c <_strtod_l+0x594>)
 800a9e6:	aa20      	add	r2, sp, #128	; 0x80
 800a9e8:	a81d      	add	r0, sp, #116	; 0x74
 800a9ea:	f002 f8bf 	bl	800cb6c <__hexnan>
 800a9ee:	2805      	cmp	r0, #5
 800a9f0:	d126      	bne.n	800aa40 <_strtod_l+0x388>
 800a9f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a9f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a9fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aa00:	e69c      	b.n	800a73c <_strtod_l+0x84>
 800aa02:	210a      	movs	r1, #10
 800aa04:	fb01 3e0e 	mla	lr, r1, lr, r3
 800aa08:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800aa0c:	e7b9      	b.n	800a982 <_strtod_l+0x2ca>
 800aa0e:	2b6e      	cmp	r3, #110	; 0x6e
 800aa10:	e7db      	b.n	800a9ca <_strtod_l+0x312>
 800aa12:	498f      	ldr	r1, [pc, #572]	; (800ac50 <_strtod_l+0x598>)
 800aa14:	a81d      	add	r0, sp, #116	; 0x74
 800aa16:	f002 f895 	bl	800cb44 <__match>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	f43f aeaa 	beq.w	800a774 <_strtod_l+0xbc>
 800aa20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa22:	498c      	ldr	r1, [pc, #560]	; (800ac54 <_strtod_l+0x59c>)
 800aa24:	3b01      	subs	r3, #1
 800aa26:	a81d      	add	r0, sp, #116	; 0x74
 800aa28:	931d      	str	r3, [sp, #116]	; 0x74
 800aa2a:	f002 f88b 	bl	800cb44 <__match>
 800aa2e:	b910      	cbnz	r0, 800aa36 <_strtod_l+0x37e>
 800aa30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa32:	3301      	adds	r3, #1
 800aa34:	931d      	str	r3, [sp, #116]	; 0x74
 800aa36:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ac64 <_strtod_l+0x5ac>
 800aa3a:	f04f 0a00 	mov.w	sl, #0
 800aa3e:	e67d      	b.n	800a73c <_strtod_l+0x84>
 800aa40:	4885      	ldr	r0, [pc, #532]	; (800ac58 <_strtod_l+0x5a0>)
 800aa42:	f003 f9e1 	bl	800de08 <nan>
 800aa46:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aa4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aa4e:	e675      	b.n	800a73c <_strtod_l+0x84>
 800aa50:	9b07      	ldr	r3, [sp, #28]
 800aa52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa54:	1af3      	subs	r3, r6, r3
 800aa56:	2f00      	cmp	r7, #0
 800aa58:	bf08      	it	eq
 800aa5a:	462f      	moveq	r7, r5
 800aa5c:	2d10      	cmp	r5, #16
 800aa5e:	9308      	str	r3, [sp, #32]
 800aa60:	46a8      	mov	r8, r5
 800aa62:	bfa8      	it	ge
 800aa64:	f04f 0810 	movge.w	r8, #16
 800aa68:	f7f5 fd4c 	bl	8000504 <__aeabi_ui2d>
 800aa6c:	2d09      	cmp	r5, #9
 800aa6e:	4682      	mov	sl, r0
 800aa70:	468b      	mov	fp, r1
 800aa72:	dd13      	ble.n	800aa9c <_strtod_l+0x3e4>
 800aa74:	4b79      	ldr	r3, [pc, #484]	; (800ac5c <_strtod_l+0x5a4>)
 800aa76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aa7e:	f7f5 fdbb 	bl	80005f8 <__aeabi_dmul>
 800aa82:	4682      	mov	sl, r0
 800aa84:	4648      	mov	r0, r9
 800aa86:	468b      	mov	fp, r1
 800aa88:	f7f5 fd3c 	bl	8000504 <__aeabi_ui2d>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4650      	mov	r0, sl
 800aa92:	4659      	mov	r1, fp
 800aa94:	f7f5 fbfa 	bl	800028c <__adddf3>
 800aa98:	4682      	mov	sl, r0
 800aa9a:	468b      	mov	fp, r1
 800aa9c:	2d0f      	cmp	r5, #15
 800aa9e:	dc38      	bgt.n	800ab12 <_strtod_l+0x45a>
 800aaa0:	9b08      	ldr	r3, [sp, #32]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f43f ae4a 	beq.w	800a73c <_strtod_l+0x84>
 800aaa8:	dd24      	ble.n	800aaf4 <_strtod_l+0x43c>
 800aaaa:	2b16      	cmp	r3, #22
 800aaac:	dc0b      	bgt.n	800aac6 <_strtod_l+0x40e>
 800aaae:	4d6b      	ldr	r5, [pc, #428]	; (800ac5c <_strtod_l+0x5a4>)
 800aab0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800aab4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800aab8:	4652      	mov	r2, sl
 800aaba:	465b      	mov	r3, fp
 800aabc:	f7f5 fd9c 	bl	80005f8 <__aeabi_dmul>
 800aac0:	4682      	mov	sl, r0
 800aac2:	468b      	mov	fp, r1
 800aac4:	e63a      	b.n	800a73c <_strtod_l+0x84>
 800aac6:	9a08      	ldr	r2, [sp, #32]
 800aac8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aacc:	4293      	cmp	r3, r2
 800aace:	db20      	blt.n	800ab12 <_strtod_l+0x45a>
 800aad0:	4c62      	ldr	r4, [pc, #392]	; (800ac5c <_strtod_l+0x5a4>)
 800aad2:	f1c5 050f 	rsb	r5, r5, #15
 800aad6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aada:	4652      	mov	r2, sl
 800aadc:	465b      	mov	r3, fp
 800aade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aae2:	f7f5 fd89 	bl	80005f8 <__aeabi_dmul>
 800aae6:	9b08      	ldr	r3, [sp, #32]
 800aae8:	1b5d      	subs	r5, r3, r5
 800aaea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aaee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aaf2:	e7e3      	b.n	800aabc <_strtod_l+0x404>
 800aaf4:	9b08      	ldr	r3, [sp, #32]
 800aaf6:	3316      	adds	r3, #22
 800aaf8:	db0b      	blt.n	800ab12 <_strtod_l+0x45a>
 800aafa:	9b07      	ldr	r3, [sp, #28]
 800aafc:	4a57      	ldr	r2, [pc, #348]	; (800ac5c <_strtod_l+0x5a4>)
 800aafe:	1b9e      	subs	r6, r3, r6
 800ab00:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ab04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab08:	4650      	mov	r0, sl
 800ab0a:	4659      	mov	r1, fp
 800ab0c:	f7f5 fe9e 	bl	800084c <__aeabi_ddiv>
 800ab10:	e7d6      	b.n	800aac0 <_strtod_l+0x408>
 800ab12:	9b08      	ldr	r3, [sp, #32]
 800ab14:	eba5 0808 	sub.w	r8, r5, r8
 800ab18:	4498      	add	r8, r3
 800ab1a:	f1b8 0f00 	cmp.w	r8, #0
 800ab1e:	dd71      	ble.n	800ac04 <_strtod_l+0x54c>
 800ab20:	f018 030f 	ands.w	r3, r8, #15
 800ab24:	d00a      	beq.n	800ab3c <_strtod_l+0x484>
 800ab26:	494d      	ldr	r1, [pc, #308]	; (800ac5c <_strtod_l+0x5a4>)
 800ab28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab2c:	4652      	mov	r2, sl
 800ab2e:	465b      	mov	r3, fp
 800ab30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab34:	f7f5 fd60 	bl	80005f8 <__aeabi_dmul>
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	f038 080f 	bics.w	r8, r8, #15
 800ab40:	d04d      	beq.n	800abde <_strtod_l+0x526>
 800ab42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ab46:	dd22      	ble.n	800ab8e <_strtod_l+0x4d6>
 800ab48:	2500      	movs	r5, #0
 800ab4a:	462e      	mov	r6, r5
 800ab4c:	9509      	str	r5, [sp, #36]	; 0x24
 800ab4e:	9507      	str	r5, [sp, #28]
 800ab50:	2322      	movs	r3, #34	; 0x22
 800ab52:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ac64 <_strtod_l+0x5ac>
 800ab56:	6023      	str	r3, [r4, #0]
 800ab58:	f04f 0a00 	mov.w	sl, #0
 800ab5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	f43f adec 	beq.w	800a73c <_strtod_l+0x84>
 800ab64:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ab66:	4620      	mov	r0, r4
 800ab68:	f002 f962 	bl	800ce30 <_Bfree>
 800ab6c:	9907      	ldr	r1, [sp, #28]
 800ab6e:	4620      	mov	r0, r4
 800ab70:	f002 f95e 	bl	800ce30 <_Bfree>
 800ab74:	4631      	mov	r1, r6
 800ab76:	4620      	mov	r0, r4
 800ab78:	f002 f95a 	bl	800ce30 <_Bfree>
 800ab7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f002 f956 	bl	800ce30 <_Bfree>
 800ab84:	4629      	mov	r1, r5
 800ab86:	4620      	mov	r0, r4
 800ab88:	f002 f952 	bl	800ce30 <_Bfree>
 800ab8c:	e5d6      	b.n	800a73c <_strtod_l+0x84>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ab94:	4650      	mov	r0, sl
 800ab96:	4659      	mov	r1, fp
 800ab98:	4699      	mov	r9, r3
 800ab9a:	f1b8 0f01 	cmp.w	r8, #1
 800ab9e:	dc21      	bgt.n	800abe4 <_strtod_l+0x52c>
 800aba0:	b10b      	cbz	r3, 800aba6 <_strtod_l+0x4ee>
 800aba2:	4682      	mov	sl, r0
 800aba4:	468b      	mov	fp, r1
 800aba6:	4b2e      	ldr	r3, [pc, #184]	; (800ac60 <_strtod_l+0x5a8>)
 800aba8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800abac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800abb0:	4652      	mov	r2, sl
 800abb2:	465b      	mov	r3, fp
 800abb4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800abb8:	f7f5 fd1e 	bl	80005f8 <__aeabi_dmul>
 800abbc:	4b29      	ldr	r3, [pc, #164]	; (800ac64 <_strtod_l+0x5ac>)
 800abbe:	460a      	mov	r2, r1
 800abc0:	400b      	ands	r3, r1
 800abc2:	4929      	ldr	r1, [pc, #164]	; (800ac68 <_strtod_l+0x5b0>)
 800abc4:	428b      	cmp	r3, r1
 800abc6:	4682      	mov	sl, r0
 800abc8:	d8be      	bhi.n	800ab48 <_strtod_l+0x490>
 800abca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800abce:	428b      	cmp	r3, r1
 800abd0:	bf86      	itte	hi
 800abd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ac6c <_strtod_l+0x5b4>
 800abd6:	f04f 3aff 	movhi.w	sl, #4294967295
 800abda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800abde:	2300      	movs	r3, #0
 800abe0:	9304      	str	r3, [sp, #16]
 800abe2:	e081      	b.n	800ace8 <_strtod_l+0x630>
 800abe4:	f018 0f01 	tst.w	r8, #1
 800abe8:	d007      	beq.n	800abfa <_strtod_l+0x542>
 800abea:	4b1d      	ldr	r3, [pc, #116]	; (800ac60 <_strtod_l+0x5a8>)
 800abec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f7f5 fd00 	bl	80005f8 <__aeabi_dmul>
 800abf8:	2301      	movs	r3, #1
 800abfa:	f109 0901 	add.w	r9, r9, #1
 800abfe:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac02:	e7ca      	b.n	800ab9a <_strtod_l+0x4e2>
 800ac04:	d0eb      	beq.n	800abde <_strtod_l+0x526>
 800ac06:	f1c8 0800 	rsb	r8, r8, #0
 800ac0a:	f018 020f 	ands.w	r2, r8, #15
 800ac0e:	d00a      	beq.n	800ac26 <_strtod_l+0x56e>
 800ac10:	4b12      	ldr	r3, [pc, #72]	; (800ac5c <_strtod_l+0x5a4>)
 800ac12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac16:	4650      	mov	r0, sl
 800ac18:	4659      	mov	r1, fp
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	f7f5 fe15 	bl	800084c <__aeabi_ddiv>
 800ac22:	4682      	mov	sl, r0
 800ac24:	468b      	mov	fp, r1
 800ac26:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ac2a:	d0d8      	beq.n	800abde <_strtod_l+0x526>
 800ac2c:	f1b8 0f1f 	cmp.w	r8, #31
 800ac30:	dd1e      	ble.n	800ac70 <_strtod_l+0x5b8>
 800ac32:	2500      	movs	r5, #0
 800ac34:	462e      	mov	r6, r5
 800ac36:	9509      	str	r5, [sp, #36]	; 0x24
 800ac38:	9507      	str	r5, [sp, #28]
 800ac3a:	2322      	movs	r3, #34	; 0x22
 800ac3c:	f04f 0a00 	mov.w	sl, #0
 800ac40:	f04f 0b00 	mov.w	fp, #0
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	e789      	b.n	800ab5c <_strtod_l+0x4a4>
 800ac48:	0800e805 	.word	0x0800e805
 800ac4c:	0800e848 	.word	0x0800e848
 800ac50:	0800e7fd 	.word	0x0800e7fd
 800ac54:	0800e98c 	.word	0x0800e98c
 800ac58:	0800eca8 	.word	0x0800eca8
 800ac5c:	0800eb88 	.word	0x0800eb88
 800ac60:	0800eb60 	.word	0x0800eb60
 800ac64:	7ff00000 	.word	0x7ff00000
 800ac68:	7ca00000 	.word	0x7ca00000
 800ac6c:	7fefffff 	.word	0x7fefffff
 800ac70:	f018 0310 	ands.w	r3, r8, #16
 800ac74:	bf18      	it	ne
 800ac76:	236a      	movne	r3, #106	; 0x6a
 800ac78:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b030 <_strtod_l+0x978>
 800ac7c:	9304      	str	r3, [sp, #16]
 800ac7e:	4650      	mov	r0, sl
 800ac80:	4659      	mov	r1, fp
 800ac82:	2300      	movs	r3, #0
 800ac84:	f018 0f01 	tst.w	r8, #1
 800ac88:	d004      	beq.n	800ac94 <_strtod_l+0x5dc>
 800ac8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac8e:	f7f5 fcb3 	bl	80005f8 <__aeabi_dmul>
 800ac92:	2301      	movs	r3, #1
 800ac94:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ac98:	f109 0908 	add.w	r9, r9, #8
 800ac9c:	d1f2      	bne.n	800ac84 <_strtod_l+0x5cc>
 800ac9e:	b10b      	cbz	r3, 800aca4 <_strtod_l+0x5ec>
 800aca0:	4682      	mov	sl, r0
 800aca2:	468b      	mov	fp, r1
 800aca4:	9b04      	ldr	r3, [sp, #16]
 800aca6:	b1bb      	cbz	r3, 800acd8 <_strtod_l+0x620>
 800aca8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800acac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	4659      	mov	r1, fp
 800acb4:	dd10      	ble.n	800acd8 <_strtod_l+0x620>
 800acb6:	2b1f      	cmp	r3, #31
 800acb8:	f340 8128 	ble.w	800af0c <_strtod_l+0x854>
 800acbc:	2b34      	cmp	r3, #52	; 0x34
 800acbe:	bfde      	ittt	le
 800acc0:	3b20      	suble	r3, #32
 800acc2:	f04f 32ff 	movle.w	r2, #4294967295
 800acc6:	fa02 f303 	lslle.w	r3, r2, r3
 800acca:	f04f 0a00 	mov.w	sl, #0
 800acce:	bfcc      	ite	gt
 800acd0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800acd4:	ea03 0b01 	andle.w	fp, r3, r1
 800acd8:	2200      	movs	r2, #0
 800acda:	2300      	movs	r3, #0
 800acdc:	4650      	mov	r0, sl
 800acde:	4659      	mov	r1, fp
 800ace0:	f7f5 fef2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d1a4      	bne.n	800ac32 <_strtod_l+0x57a>
 800ace8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800acee:	462b      	mov	r3, r5
 800acf0:	463a      	mov	r2, r7
 800acf2:	4620      	mov	r0, r4
 800acf4:	f002 f908 	bl	800cf08 <__s2b>
 800acf8:	9009      	str	r0, [sp, #36]	; 0x24
 800acfa:	2800      	cmp	r0, #0
 800acfc:	f43f af24 	beq.w	800ab48 <_strtod_l+0x490>
 800ad00:	9b07      	ldr	r3, [sp, #28]
 800ad02:	1b9e      	subs	r6, r3, r6
 800ad04:	9b08      	ldr	r3, [sp, #32]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	bfb4      	ite	lt
 800ad0a:	4633      	movlt	r3, r6
 800ad0c:	2300      	movge	r3, #0
 800ad0e:	9310      	str	r3, [sp, #64]	; 0x40
 800ad10:	9b08      	ldr	r3, [sp, #32]
 800ad12:	2500      	movs	r5, #0
 800ad14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ad18:	9318      	str	r3, [sp, #96]	; 0x60
 800ad1a:	462e      	mov	r6, r5
 800ad1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1e:	4620      	mov	r0, r4
 800ad20:	6859      	ldr	r1, [r3, #4]
 800ad22:	f002 f845 	bl	800cdb0 <_Balloc>
 800ad26:	9007      	str	r0, [sp, #28]
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	f43f af11 	beq.w	800ab50 <_strtod_l+0x498>
 800ad2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad30:	691a      	ldr	r2, [r3, #16]
 800ad32:	3202      	adds	r2, #2
 800ad34:	f103 010c 	add.w	r1, r3, #12
 800ad38:	0092      	lsls	r2, r2, #2
 800ad3a:	300c      	adds	r0, #12
 800ad3c:	f7fe fd5c 	bl	80097f8 <memcpy>
 800ad40:	ec4b ab10 	vmov	d0, sl, fp
 800ad44:	aa20      	add	r2, sp, #128	; 0x80
 800ad46:	a91f      	add	r1, sp, #124	; 0x7c
 800ad48:	4620      	mov	r0, r4
 800ad4a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ad4e:	f002 fc17 	bl	800d580 <__d2b>
 800ad52:	901e      	str	r0, [sp, #120]	; 0x78
 800ad54:	2800      	cmp	r0, #0
 800ad56:	f43f aefb 	beq.w	800ab50 <_strtod_l+0x498>
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f002 f96d 	bl	800d03c <__i2b>
 800ad62:	4606      	mov	r6, r0
 800ad64:	2800      	cmp	r0, #0
 800ad66:	f43f aef3 	beq.w	800ab50 <_strtod_l+0x498>
 800ad6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad6c:	9904      	ldr	r1, [sp, #16]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bfab      	itete	ge
 800ad72:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ad74:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ad76:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ad78:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ad7c:	bfac      	ite	ge
 800ad7e:	eb03 0902 	addge.w	r9, r3, r2
 800ad82:	1ad7      	sublt	r7, r2, r3
 800ad84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad86:	eba3 0801 	sub.w	r8, r3, r1
 800ad8a:	4490      	add	r8, r2
 800ad8c:	4ba3      	ldr	r3, [pc, #652]	; (800b01c <_strtod_l+0x964>)
 800ad8e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad92:	4598      	cmp	r8, r3
 800ad94:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad98:	f280 80cc 	bge.w	800af34 <_strtod_l+0x87c>
 800ad9c:	eba3 0308 	sub.w	r3, r3, r8
 800ada0:	2b1f      	cmp	r3, #31
 800ada2:	eba2 0203 	sub.w	r2, r2, r3
 800ada6:	f04f 0101 	mov.w	r1, #1
 800adaa:	f300 80b6 	bgt.w	800af1a <_strtod_l+0x862>
 800adae:	fa01 f303 	lsl.w	r3, r1, r3
 800adb2:	9311      	str	r3, [sp, #68]	; 0x44
 800adb4:	2300      	movs	r3, #0
 800adb6:	930c      	str	r3, [sp, #48]	; 0x30
 800adb8:	eb09 0802 	add.w	r8, r9, r2
 800adbc:	9b04      	ldr	r3, [sp, #16]
 800adbe:	45c1      	cmp	r9, r8
 800adc0:	4417      	add	r7, r2
 800adc2:	441f      	add	r7, r3
 800adc4:	464b      	mov	r3, r9
 800adc6:	bfa8      	it	ge
 800adc8:	4643      	movge	r3, r8
 800adca:	42bb      	cmp	r3, r7
 800adcc:	bfa8      	it	ge
 800adce:	463b      	movge	r3, r7
 800add0:	2b00      	cmp	r3, #0
 800add2:	bfc2      	ittt	gt
 800add4:	eba8 0803 	subgt.w	r8, r8, r3
 800add8:	1aff      	subgt	r7, r7, r3
 800adda:	eba9 0903 	subgt.w	r9, r9, r3
 800adde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	dd17      	ble.n	800ae14 <_strtod_l+0x75c>
 800ade4:	4631      	mov	r1, r6
 800ade6:	461a      	mov	r2, r3
 800ade8:	4620      	mov	r0, r4
 800adea:	f002 f9e3 	bl	800d1b4 <__pow5mult>
 800adee:	4606      	mov	r6, r0
 800adf0:	2800      	cmp	r0, #0
 800adf2:	f43f aead 	beq.w	800ab50 <_strtod_l+0x498>
 800adf6:	4601      	mov	r1, r0
 800adf8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800adfa:	4620      	mov	r0, r4
 800adfc:	f002 f934 	bl	800d068 <__multiply>
 800ae00:	900f      	str	r0, [sp, #60]	; 0x3c
 800ae02:	2800      	cmp	r0, #0
 800ae04:	f43f aea4 	beq.w	800ab50 <_strtod_l+0x498>
 800ae08:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f002 f810 	bl	800ce30 <_Bfree>
 800ae10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae12:	931e      	str	r3, [sp, #120]	; 0x78
 800ae14:	f1b8 0f00 	cmp.w	r8, #0
 800ae18:	f300 8091 	bgt.w	800af3e <_strtod_l+0x886>
 800ae1c:	9b08      	ldr	r3, [sp, #32]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	dd08      	ble.n	800ae34 <_strtod_l+0x77c>
 800ae22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae24:	9907      	ldr	r1, [sp, #28]
 800ae26:	4620      	mov	r0, r4
 800ae28:	f002 f9c4 	bl	800d1b4 <__pow5mult>
 800ae2c:	9007      	str	r0, [sp, #28]
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	f43f ae8e 	beq.w	800ab50 <_strtod_l+0x498>
 800ae34:	2f00      	cmp	r7, #0
 800ae36:	dd08      	ble.n	800ae4a <_strtod_l+0x792>
 800ae38:	9907      	ldr	r1, [sp, #28]
 800ae3a:	463a      	mov	r2, r7
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f002 fa13 	bl	800d268 <__lshift>
 800ae42:	9007      	str	r0, [sp, #28]
 800ae44:	2800      	cmp	r0, #0
 800ae46:	f43f ae83 	beq.w	800ab50 <_strtod_l+0x498>
 800ae4a:	f1b9 0f00 	cmp.w	r9, #0
 800ae4e:	dd08      	ble.n	800ae62 <_strtod_l+0x7aa>
 800ae50:	4631      	mov	r1, r6
 800ae52:	464a      	mov	r2, r9
 800ae54:	4620      	mov	r0, r4
 800ae56:	f002 fa07 	bl	800d268 <__lshift>
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	f43f ae77 	beq.w	800ab50 <_strtod_l+0x498>
 800ae62:	9a07      	ldr	r2, [sp, #28]
 800ae64:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ae66:	4620      	mov	r0, r4
 800ae68:	f002 fa86 	bl	800d378 <__mdiff>
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	f43f ae6e 	beq.w	800ab50 <_strtod_l+0x498>
 800ae74:	68c3      	ldr	r3, [r0, #12]
 800ae76:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae78:	2300      	movs	r3, #0
 800ae7a:	60c3      	str	r3, [r0, #12]
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	f002 fa5f 	bl	800d340 <__mcmp>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	da65      	bge.n	800af52 <_strtod_l+0x89a>
 800ae86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae88:	ea53 030a 	orrs.w	r3, r3, sl
 800ae8c:	f040 8087 	bne.w	800af9e <_strtod_l+0x8e6>
 800ae90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f040 8082 	bne.w	800af9e <_strtod_l+0x8e6>
 800ae9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae9e:	0d1b      	lsrs	r3, r3, #20
 800aea0:	051b      	lsls	r3, r3, #20
 800aea2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aea6:	d97a      	bls.n	800af9e <_strtod_l+0x8e6>
 800aea8:	696b      	ldr	r3, [r5, #20]
 800aeaa:	b913      	cbnz	r3, 800aeb2 <_strtod_l+0x7fa>
 800aeac:	692b      	ldr	r3, [r5, #16]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	dd75      	ble.n	800af9e <_strtod_l+0x8e6>
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f002 f9d6 	bl	800d268 <__lshift>
 800aebc:	4631      	mov	r1, r6
 800aebe:	4605      	mov	r5, r0
 800aec0:	f002 fa3e 	bl	800d340 <__mcmp>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	dd6a      	ble.n	800af9e <_strtod_l+0x8e6>
 800aec8:	9904      	ldr	r1, [sp, #16]
 800aeca:	4a55      	ldr	r2, [pc, #340]	; (800b020 <_strtod_l+0x968>)
 800aecc:	465b      	mov	r3, fp
 800aece:	2900      	cmp	r1, #0
 800aed0:	f000 8085 	beq.w	800afde <_strtod_l+0x926>
 800aed4:	ea02 010b 	and.w	r1, r2, fp
 800aed8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aedc:	dc7f      	bgt.n	800afde <_strtod_l+0x926>
 800aede:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aee2:	f77f aeaa 	ble.w	800ac3a <_strtod_l+0x582>
 800aee6:	4a4f      	ldr	r2, [pc, #316]	; (800b024 <_strtod_l+0x96c>)
 800aee8:	2300      	movs	r3, #0
 800aeea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800aeee:	4650      	mov	r0, sl
 800aef0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800aef4:	4659      	mov	r1, fp
 800aef6:	f7f5 fb7f 	bl	80005f8 <__aeabi_dmul>
 800aefa:	460b      	mov	r3, r1
 800aefc:	4303      	orrs	r3, r0
 800aefe:	bf08      	it	eq
 800af00:	2322      	moveq	r3, #34	; 0x22
 800af02:	4682      	mov	sl, r0
 800af04:	468b      	mov	fp, r1
 800af06:	bf08      	it	eq
 800af08:	6023      	streq	r3, [r4, #0]
 800af0a:	e62b      	b.n	800ab64 <_strtod_l+0x4ac>
 800af0c:	f04f 32ff 	mov.w	r2, #4294967295
 800af10:	fa02 f303 	lsl.w	r3, r2, r3
 800af14:	ea03 0a0a 	and.w	sl, r3, sl
 800af18:	e6de      	b.n	800acd8 <_strtod_l+0x620>
 800af1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800af1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800af22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800af26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800af2a:	fa01 f308 	lsl.w	r3, r1, r8
 800af2e:	930c      	str	r3, [sp, #48]	; 0x30
 800af30:	9111      	str	r1, [sp, #68]	; 0x44
 800af32:	e741      	b.n	800adb8 <_strtod_l+0x700>
 800af34:	2300      	movs	r3, #0
 800af36:	930c      	str	r3, [sp, #48]	; 0x30
 800af38:	2301      	movs	r3, #1
 800af3a:	9311      	str	r3, [sp, #68]	; 0x44
 800af3c:	e73c      	b.n	800adb8 <_strtod_l+0x700>
 800af3e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af40:	4642      	mov	r2, r8
 800af42:	4620      	mov	r0, r4
 800af44:	f002 f990 	bl	800d268 <__lshift>
 800af48:	901e      	str	r0, [sp, #120]	; 0x78
 800af4a:	2800      	cmp	r0, #0
 800af4c:	f47f af66 	bne.w	800ae1c <_strtod_l+0x764>
 800af50:	e5fe      	b.n	800ab50 <_strtod_l+0x498>
 800af52:	465f      	mov	r7, fp
 800af54:	d16e      	bne.n	800b034 <_strtod_l+0x97c>
 800af56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af5c:	b342      	cbz	r2, 800afb0 <_strtod_l+0x8f8>
 800af5e:	4a32      	ldr	r2, [pc, #200]	; (800b028 <_strtod_l+0x970>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d128      	bne.n	800afb6 <_strtod_l+0x8fe>
 800af64:	9b04      	ldr	r3, [sp, #16]
 800af66:	4650      	mov	r0, sl
 800af68:	b1eb      	cbz	r3, 800afa6 <_strtod_l+0x8ee>
 800af6a:	4a2d      	ldr	r2, [pc, #180]	; (800b020 <_strtod_l+0x968>)
 800af6c:	403a      	ands	r2, r7
 800af6e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800af72:	f04f 31ff 	mov.w	r1, #4294967295
 800af76:	d819      	bhi.n	800afac <_strtod_l+0x8f4>
 800af78:	0d12      	lsrs	r2, r2, #20
 800af7a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800af7e:	fa01 f303 	lsl.w	r3, r1, r3
 800af82:	4298      	cmp	r0, r3
 800af84:	d117      	bne.n	800afb6 <_strtod_l+0x8fe>
 800af86:	4b29      	ldr	r3, [pc, #164]	; (800b02c <_strtod_l+0x974>)
 800af88:	429f      	cmp	r7, r3
 800af8a:	d102      	bne.n	800af92 <_strtod_l+0x8da>
 800af8c:	3001      	adds	r0, #1
 800af8e:	f43f addf 	beq.w	800ab50 <_strtod_l+0x498>
 800af92:	4b23      	ldr	r3, [pc, #140]	; (800b020 <_strtod_l+0x968>)
 800af94:	403b      	ands	r3, r7
 800af96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800af9a:	f04f 0a00 	mov.w	sl, #0
 800af9e:	9b04      	ldr	r3, [sp, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1a0      	bne.n	800aee6 <_strtod_l+0x82e>
 800afa4:	e5de      	b.n	800ab64 <_strtod_l+0x4ac>
 800afa6:	f04f 33ff 	mov.w	r3, #4294967295
 800afaa:	e7ea      	b.n	800af82 <_strtod_l+0x8ca>
 800afac:	460b      	mov	r3, r1
 800afae:	e7e8      	b.n	800af82 <_strtod_l+0x8ca>
 800afb0:	ea53 030a 	orrs.w	r3, r3, sl
 800afb4:	d088      	beq.n	800aec8 <_strtod_l+0x810>
 800afb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afb8:	b1db      	cbz	r3, 800aff2 <_strtod_l+0x93a>
 800afba:	423b      	tst	r3, r7
 800afbc:	d0ef      	beq.n	800af9e <_strtod_l+0x8e6>
 800afbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800afc0:	9a04      	ldr	r2, [sp, #16]
 800afc2:	4650      	mov	r0, sl
 800afc4:	4659      	mov	r1, fp
 800afc6:	b1c3      	cbz	r3, 800affa <_strtod_l+0x942>
 800afc8:	f7ff fb5a 	bl	800a680 <sulp>
 800afcc:	4602      	mov	r2, r0
 800afce:	460b      	mov	r3, r1
 800afd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800afd4:	f7f5 f95a 	bl	800028c <__adddf3>
 800afd8:	4682      	mov	sl, r0
 800afda:	468b      	mov	fp, r1
 800afdc:	e7df      	b.n	800af9e <_strtod_l+0x8e6>
 800afde:	4013      	ands	r3, r2
 800afe0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800afe4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800afe8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800afec:	f04f 3aff 	mov.w	sl, #4294967295
 800aff0:	e7d5      	b.n	800af9e <_strtod_l+0x8e6>
 800aff2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aff4:	ea13 0f0a 	tst.w	r3, sl
 800aff8:	e7e0      	b.n	800afbc <_strtod_l+0x904>
 800affa:	f7ff fb41 	bl	800a680 <sulp>
 800affe:	4602      	mov	r2, r0
 800b000:	460b      	mov	r3, r1
 800b002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b006:	f7f5 f93f 	bl	8000288 <__aeabi_dsub>
 800b00a:	2200      	movs	r2, #0
 800b00c:	2300      	movs	r3, #0
 800b00e:	4682      	mov	sl, r0
 800b010:	468b      	mov	fp, r1
 800b012:	f7f5 fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 800b016:	2800      	cmp	r0, #0
 800b018:	d0c1      	beq.n	800af9e <_strtod_l+0x8e6>
 800b01a:	e60e      	b.n	800ac3a <_strtod_l+0x582>
 800b01c:	fffffc02 	.word	0xfffffc02
 800b020:	7ff00000 	.word	0x7ff00000
 800b024:	39500000 	.word	0x39500000
 800b028:	000fffff 	.word	0x000fffff
 800b02c:	7fefffff 	.word	0x7fefffff
 800b030:	0800e860 	.word	0x0800e860
 800b034:	4631      	mov	r1, r6
 800b036:	4628      	mov	r0, r5
 800b038:	f002 fafe 	bl	800d638 <__ratio>
 800b03c:	ec59 8b10 	vmov	r8, r9, d0
 800b040:	ee10 0a10 	vmov	r0, s0
 800b044:	2200      	movs	r2, #0
 800b046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b04a:	4649      	mov	r1, r9
 800b04c:	f7f5 fd50 	bl	8000af0 <__aeabi_dcmple>
 800b050:	2800      	cmp	r0, #0
 800b052:	d07c      	beq.n	800b14e <_strtod_l+0xa96>
 800b054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b056:	2b00      	cmp	r3, #0
 800b058:	d04c      	beq.n	800b0f4 <_strtod_l+0xa3c>
 800b05a:	4b95      	ldr	r3, [pc, #596]	; (800b2b0 <_strtod_l+0xbf8>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b062:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b2b0 <_strtod_l+0xbf8>
 800b066:	f04f 0800 	mov.w	r8, #0
 800b06a:	4b92      	ldr	r3, [pc, #584]	; (800b2b4 <_strtod_l+0xbfc>)
 800b06c:	403b      	ands	r3, r7
 800b06e:	9311      	str	r3, [sp, #68]	; 0x44
 800b070:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b072:	4b91      	ldr	r3, [pc, #580]	; (800b2b8 <_strtod_l+0xc00>)
 800b074:	429a      	cmp	r2, r3
 800b076:	f040 80b2 	bne.w	800b1de <_strtod_l+0xb26>
 800b07a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b07e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b082:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b086:	ec4b ab10 	vmov	d0, sl, fp
 800b08a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b08e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b092:	f002 f9f9 	bl	800d488 <__ulp>
 800b096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b09a:	ec53 2b10 	vmov	r2, r3, d0
 800b09e:	f7f5 faab 	bl	80005f8 <__aeabi_dmul>
 800b0a2:	4652      	mov	r2, sl
 800b0a4:	465b      	mov	r3, fp
 800b0a6:	f7f5 f8f1 	bl	800028c <__adddf3>
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	4981      	ldr	r1, [pc, #516]	; (800b2b4 <_strtod_l+0xbfc>)
 800b0ae:	4a83      	ldr	r2, [pc, #524]	; (800b2bc <_strtod_l+0xc04>)
 800b0b0:	4019      	ands	r1, r3
 800b0b2:	4291      	cmp	r1, r2
 800b0b4:	4682      	mov	sl, r0
 800b0b6:	d95e      	bls.n	800b176 <_strtod_l+0xabe>
 800b0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d103      	bne.n	800b0ca <_strtod_l+0xa12>
 800b0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	f43f ad43 	beq.w	800ab50 <_strtod_l+0x498>
 800b0ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b2c8 <_strtod_l+0xc10>
 800b0ce:	f04f 3aff 	mov.w	sl, #4294967295
 800b0d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f001 feab 	bl	800ce30 <_Bfree>
 800b0da:	9907      	ldr	r1, [sp, #28]
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f001 fea7 	bl	800ce30 <_Bfree>
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f001 fea3 	bl	800ce30 <_Bfree>
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	f001 fe9f 	bl	800ce30 <_Bfree>
 800b0f2:	e613      	b.n	800ad1c <_strtod_l+0x664>
 800b0f4:	f1ba 0f00 	cmp.w	sl, #0
 800b0f8:	d11b      	bne.n	800b132 <_strtod_l+0xa7a>
 800b0fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0fe:	b9f3      	cbnz	r3, 800b13e <_strtod_l+0xa86>
 800b100:	4b6b      	ldr	r3, [pc, #428]	; (800b2b0 <_strtod_l+0xbf8>)
 800b102:	2200      	movs	r2, #0
 800b104:	4640      	mov	r0, r8
 800b106:	4649      	mov	r1, r9
 800b108:	f7f5 fce8 	bl	8000adc <__aeabi_dcmplt>
 800b10c:	b9d0      	cbnz	r0, 800b144 <_strtod_l+0xa8c>
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	4b6b      	ldr	r3, [pc, #428]	; (800b2c0 <_strtod_l+0xc08>)
 800b114:	2200      	movs	r2, #0
 800b116:	f7f5 fa6f 	bl	80005f8 <__aeabi_dmul>
 800b11a:	4680      	mov	r8, r0
 800b11c:	4689      	mov	r9, r1
 800b11e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b122:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b126:	931b      	str	r3, [sp, #108]	; 0x6c
 800b128:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b12c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b130:	e79b      	b.n	800b06a <_strtod_l+0x9b2>
 800b132:	f1ba 0f01 	cmp.w	sl, #1
 800b136:	d102      	bne.n	800b13e <_strtod_l+0xa86>
 800b138:	2f00      	cmp	r7, #0
 800b13a:	f43f ad7e 	beq.w	800ac3a <_strtod_l+0x582>
 800b13e:	4b61      	ldr	r3, [pc, #388]	; (800b2c4 <_strtod_l+0xc0c>)
 800b140:	2200      	movs	r2, #0
 800b142:	e78c      	b.n	800b05e <_strtod_l+0x9a6>
 800b144:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b2c0 <_strtod_l+0xc08>
 800b148:	f04f 0800 	mov.w	r8, #0
 800b14c:	e7e7      	b.n	800b11e <_strtod_l+0xa66>
 800b14e:	4b5c      	ldr	r3, [pc, #368]	; (800b2c0 <_strtod_l+0xc08>)
 800b150:	4640      	mov	r0, r8
 800b152:	4649      	mov	r1, r9
 800b154:	2200      	movs	r2, #0
 800b156:	f7f5 fa4f 	bl	80005f8 <__aeabi_dmul>
 800b15a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b15c:	4680      	mov	r8, r0
 800b15e:	4689      	mov	r9, r1
 800b160:	b933      	cbnz	r3, 800b170 <_strtod_l+0xab8>
 800b162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b166:	9012      	str	r0, [sp, #72]	; 0x48
 800b168:	9313      	str	r3, [sp, #76]	; 0x4c
 800b16a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b16e:	e7dd      	b.n	800b12c <_strtod_l+0xa74>
 800b170:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b174:	e7f9      	b.n	800b16a <_strtod_l+0xab2>
 800b176:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b17a:	9b04      	ldr	r3, [sp, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1a8      	bne.n	800b0d2 <_strtod_l+0xa1a>
 800b180:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b184:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b186:	0d1b      	lsrs	r3, r3, #20
 800b188:	051b      	lsls	r3, r3, #20
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d1a1      	bne.n	800b0d2 <_strtod_l+0xa1a>
 800b18e:	4640      	mov	r0, r8
 800b190:	4649      	mov	r1, r9
 800b192:	f7f5 fd91 	bl	8000cb8 <__aeabi_d2lz>
 800b196:	f7f5 fa01 	bl	800059c <__aeabi_l2d>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	4640      	mov	r0, r8
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	f7f5 f871 	bl	8000288 <__aeabi_dsub>
 800b1a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1ac:	ea43 030a 	orr.w	r3, r3, sl
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	4680      	mov	r8, r0
 800b1b4:	4689      	mov	r9, r1
 800b1b6:	d053      	beq.n	800b260 <_strtod_l+0xba8>
 800b1b8:	a335      	add	r3, pc, #212	; (adr r3, 800b290 <_strtod_l+0xbd8>)
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	f7f5 fc8d 	bl	8000adc <__aeabi_dcmplt>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	f47f acce 	bne.w	800ab64 <_strtod_l+0x4ac>
 800b1c8:	a333      	add	r3, pc, #204	; (adr r3, 800b298 <_strtod_l+0xbe0>)
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	4640      	mov	r0, r8
 800b1d0:	4649      	mov	r1, r9
 800b1d2:	f7f5 fca1 	bl	8000b18 <__aeabi_dcmpgt>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	f43f af7b 	beq.w	800b0d2 <_strtod_l+0xa1a>
 800b1dc:	e4c2      	b.n	800ab64 <_strtod_l+0x4ac>
 800b1de:	9b04      	ldr	r3, [sp, #16]
 800b1e0:	b333      	cbz	r3, 800b230 <_strtod_l+0xb78>
 800b1e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b1e8:	d822      	bhi.n	800b230 <_strtod_l+0xb78>
 800b1ea:	a32d      	add	r3, pc, #180	; (adr r3, 800b2a0 <_strtod_l+0xbe8>)
 800b1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	4649      	mov	r1, r9
 800b1f4:	f7f5 fc7c 	bl	8000af0 <__aeabi_dcmple>
 800b1f8:	b1a0      	cbz	r0, 800b224 <_strtod_l+0xb6c>
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	f7f5 fcd3 	bl	8000ba8 <__aeabi_d2uiz>
 800b202:	2801      	cmp	r0, #1
 800b204:	bf38      	it	cc
 800b206:	2001      	movcc	r0, #1
 800b208:	f7f5 f97c 	bl	8000504 <__aeabi_ui2d>
 800b20c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b20e:	4680      	mov	r8, r0
 800b210:	4689      	mov	r9, r1
 800b212:	bb13      	cbnz	r3, 800b25a <_strtod_l+0xba2>
 800b214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b218:	9014      	str	r0, [sp, #80]	; 0x50
 800b21a:	9315      	str	r3, [sp, #84]	; 0x54
 800b21c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b220:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b228:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b22c:	1a9b      	subs	r3, r3, r2
 800b22e:	930d      	str	r3, [sp, #52]	; 0x34
 800b230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b234:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b238:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b23c:	f002 f924 	bl	800d488 <__ulp>
 800b240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b244:	ec53 2b10 	vmov	r2, r3, d0
 800b248:	f7f5 f9d6 	bl	80005f8 <__aeabi_dmul>
 800b24c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b250:	f7f5 f81c 	bl	800028c <__adddf3>
 800b254:	4682      	mov	sl, r0
 800b256:	468b      	mov	fp, r1
 800b258:	e78f      	b.n	800b17a <_strtod_l+0xac2>
 800b25a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b25e:	e7dd      	b.n	800b21c <_strtod_l+0xb64>
 800b260:	a311      	add	r3, pc, #68	; (adr r3, 800b2a8 <_strtod_l+0xbf0>)
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	f7f5 fc39 	bl	8000adc <__aeabi_dcmplt>
 800b26a:	e7b4      	b.n	800b1d6 <_strtod_l+0xb1e>
 800b26c:	2300      	movs	r3, #0
 800b26e:	930e      	str	r3, [sp, #56]	; 0x38
 800b270:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b272:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	f7ff ba65 	b.w	800a744 <_strtod_l+0x8c>
 800b27a:	2b65      	cmp	r3, #101	; 0x65
 800b27c:	f43f ab5d 	beq.w	800a93a <_strtod_l+0x282>
 800b280:	2b45      	cmp	r3, #69	; 0x45
 800b282:	f43f ab5a 	beq.w	800a93a <_strtod_l+0x282>
 800b286:	2201      	movs	r2, #1
 800b288:	f7ff bb92 	b.w	800a9b0 <_strtod_l+0x2f8>
 800b28c:	f3af 8000 	nop.w
 800b290:	94a03595 	.word	0x94a03595
 800b294:	3fdfffff 	.word	0x3fdfffff
 800b298:	35afe535 	.word	0x35afe535
 800b29c:	3fe00000 	.word	0x3fe00000
 800b2a0:	ffc00000 	.word	0xffc00000
 800b2a4:	41dfffff 	.word	0x41dfffff
 800b2a8:	94a03595 	.word	0x94a03595
 800b2ac:	3fcfffff 	.word	0x3fcfffff
 800b2b0:	3ff00000 	.word	0x3ff00000
 800b2b4:	7ff00000 	.word	0x7ff00000
 800b2b8:	7fe00000 	.word	0x7fe00000
 800b2bc:	7c9fffff 	.word	0x7c9fffff
 800b2c0:	3fe00000 	.word	0x3fe00000
 800b2c4:	bff00000 	.word	0xbff00000
 800b2c8:	7fefffff 	.word	0x7fefffff

0800b2cc <_strtod_r>:
 800b2cc:	4b01      	ldr	r3, [pc, #4]	; (800b2d4 <_strtod_r+0x8>)
 800b2ce:	f7ff b9f3 	b.w	800a6b8 <_strtod_l>
 800b2d2:	bf00      	nop
 800b2d4:	20000074 	.word	0x20000074

0800b2d8 <_strtol_l.isra.0>:
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2de:	d001      	beq.n	800b2e4 <_strtol_l.isra.0+0xc>
 800b2e0:	2b24      	cmp	r3, #36	; 0x24
 800b2e2:	d906      	bls.n	800b2f2 <_strtol_l.isra.0+0x1a>
 800b2e4:	f7fe fa5e 	bl	80097a4 <__errno>
 800b2e8:	2316      	movs	r3, #22
 800b2ea:	6003      	str	r3, [r0, #0]
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f2:	4f3a      	ldr	r7, [pc, #232]	; (800b3dc <_strtol_l.isra.0+0x104>)
 800b2f4:	468e      	mov	lr, r1
 800b2f6:	4676      	mov	r6, lr
 800b2f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b2fc:	5de5      	ldrb	r5, [r4, r7]
 800b2fe:	f015 0508 	ands.w	r5, r5, #8
 800b302:	d1f8      	bne.n	800b2f6 <_strtol_l.isra.0+0x1e>
 800b304:	2c2d      	cmp	r4, #45	; 0x2d
 800b306:	d134      	bne.n	800b372 <_strtol_l.isra.0+0x9a>
 800b308:	f89e 4000 	ldrb.w	r4, [lr]
 800b30c:	f04f 0801 	mov.w	r8, #1
 800b310:	f106 0e02 	add.w	lr, r6, #2
 800b314:	2b00      	cmp	r3, #0
 800b316:	d05c      	beq.n	800b3d2 <_strtol_l.isra.0+0xfa>
 800b318:	2b10      	cmp	r3, #16
 800b31a:	d10c      	bne.n	800b336 <_strtol_l.isra.0+0x5e>
 800b31c:	2c30      	cmp	r4, #48	; 0x30
 800b31e:	d10a      	bne.n	800b336 <_strtol_l.isra.0+0x5e>
 800b320:	f89e 4000 	ldrb.w	r4, [lr]
 800b324:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b328:	2c58      	cmp	r4, #88	; 0x58
 800b32a:	d14d      	bne.n	800b3c8 <_strtol_l.isra.0+0xf0>
 800b32c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b330:	2310      	movs	r3, #16
 800b332:	f10e 0e02 	add.w	lr, lr, #2
 800b336:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b33a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b33e:	2600      	movs	r6, #0
 800b340:	fbbc f9f3 	udiv	r9, ip, r3
 800b344:	4635      	mov	r5, r6
 800b346:	fb03 ca19 	mls	sl, r3, r9, ip
 800b34a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b34e:	2f09      	cmp	r7, #9
 800b350:	d818      	bhi.n	800b384 <_strtol_l.isra.0+0xac>
 800b352:	463c      	mov	r4, r7
 800b354:	42a3      	cmp	r3, r4
 800b356:	dd24      	ble.n	800b3a2 <_strtol_l.isra.0+0xca>
 800b358:	2e00      	cmp	r6, #0
 800b35a:	db1f      	blt.n	800b39c <_strtol_l.isra.0+0xc4>
 800b35c:	45a9      	cmp	r9, r5
 800b35e:	d31d      	bcc.n	800b39c <_strtol_l.isra.0+0xc4>
 800b360:	d101      	bne.n	800b366 <_strtol_l.isra.0+0x8e>
 800b362:	45a2      	cmp	sl, r4
 800b364:	db1a      	blt.n	800b39c <_strtol_l.isra.0+0xc4>
 800b366:	fb05 4503 	mla	r5, r5, r3, r4
 800b36a:	2601      	movs	r6, #1
 800b36c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b370:	e7eb      	b.n	800b34a <_strtol_l.isra.0+0x72>
 800b372:	2c2b      	cmp	r4, #43	; 0x2b
 800b374:	bf08      	it	eq
 800b376:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b37a:	46a8      	mov	r8, r5
 800b37c:	bf08      	it	eq
 800b37e:	f106 0e02 	addeq.w	lr, r6, #2
 800b382:	e7c7      	b.n	800b314 <_strtol_l.isra.0+0x3c>
 800b384:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b388:	2f19      	cmp	r7, #25
 800b38a:	d801      	bhi.n	800b390 <_strtol_l.isra.0+0xb8>
 800b38c:	3c37      	subs	r4, #55	; 0x37
 800b38e:	e7e1      	b.n	800b354 <_strtol_l.isra.0+0x7c>
 800b390:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b394:	2f19      	cmp	r7, #25
 800b396:	d804      	bhi.n	800b3a2 <_strtol_l.isra.0+0xca>
 800b398:	3c57      	subs	r4, #87	; 0x57
 800b39a:	e7db      	b.n	800b354 <_strtol_l.isra.0+0x7c>
 800b39c:	f04f 36ff 	mov.w	r6, #4294967295
 800b3a0:	e7e4      	b.n	800b36c <_strtol_l.isra.0+0x94>
 800b3a2:	2e00      	cmp	r6, #0
 800b3a4:	da05      	bge.n	800b3b2 <_strtol_l.isra.0+0xda>
 800b3a6:	2322      	movs	r3, #34	; 0x22
 800b3a8:	6003      	str	r3, [r0, #0]
 800b3aa:	4665      	mov	r5, ip
 800b3ac:	b942      	cbnz	r2, 800b3c0 <_strtol_l.isra.0+0xe8>
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	e79d      	b.n	800b2ee <_strtol_l.isra.0+0x16>
 800b3b2:	f1b8 0f00 	cmp.w	r8, #0
 800b3b6:	d000      	beq.n	800b3ba <_strtol_l.isra.0+0xe2>
 800b3b8:	426d      	negs	r5, r5
 800b3ba:	2a00      	cmp	r2, #0
 800b3bc:	d0f7      	beq.n	800b3ae <_strtol_l.isra.0+0xd6>
 800b3be:	b10e      	cbz	r6, 800b3c4 <_strtol_l.isra.0+0xec>
 800b3c0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b3c4:	6011      	str	r1, [r2, #0]
 800b3c6:	e7f2      	b.n	800b3ae <_strtol_l.isra.0+0xd6>
 800b3c8:	2430      	movs	r4, #48	; 0x30
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1b3      	bne.n	800b336 <_strtol_l.isra.0+0x5e>
 800b3ce:	2308      	movs	r3, #8
 800b3d0:	e7b1      	b.n	800b336 <_strtol_l.isra.0+0x5e>
 800b3d2:	2c30      	cmp	r4, #48	; 0x30
 800b3d4:	d0a4      	beq.n	800b320 <_strtol_l.isra.0+0x48>
 800b3d6:	230a      	movs	r3, #10
 800b3d8:	e7ad      	b.n	800b336 <_strtol_l.isra.0+0x5e>
 800b3da:	bf00      	nop
 800b3dc:	0800e889 	.word	0x0800e889

0800b3e0 <_strtol_r>:
 800b3e0:	f7ff bf7a 	b.w	800b2d8 <_strtol_l.isra.0>

0800b3e4 <__swbuf_r>:
 800b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e6:	460e      	mov	r6, r1
 800b3e8:	4614      	mov	r4, r2
 800b3ea:	4605      	mov	r5, r0
 800b3ec:	b118      	cbz	r0, 800b3f6 <__swbuf_r+0x12>
 800b3ee:	6983      	ldr	r3, [r0, #24]
 800b3f0:	b90b      	cbnz	r3, 800b3f6 <__swbuf_r+0x12>
 800b3f2:	f001 f84b 	bl	800c48c <__sinit>
 800b3f6:	4b21      	ldr	r3, [pc, #132]	; (800b47c <__swbuf_r+0x98>)
 800b3f8:	429c      	cmp	r4, r3
 800b3fa:	d12b      	bne.n	800b454 <__swbuf_r+0x70>
 800b3fc:	686c      	ldr	r4, [r5, #4]
 800b3fe:	69a3      	ldr	r3, [r4, #24]
 800b400:	60a3      	str	r3, [r4, #8]
 800b402:	89a3      	ldrh	r3, [r4, #12]
 800b404:	071a      	lsls	r2, r3, #28
 800b406:	d52f      	bpl.n	800b468 <__swbuf_r+0x84>
 800b408:	6923      	ldr	r3, [r4, #16]
 800b40a:	b36b      	cbz	r3, 800b468 <__swbuf_r+0x84>
 800b40c:	6923      	ldr	r3, [r4, #16]
 800b40e:	6820      	ldr	r0, [r4, #0]
 800b410:	1ac0      	subs	r0, r0, r3
 800b412:	6963      	ldr	r3, [r4, #20]
 800b414:	b2f6      	uxtb	r6, r6
 800b416:	4283      	cmp	r3, r0
 800b418:	4637      	mov	r7, r6
 800b41a:	dc04      	bgt.n	800b426 <__swbuf_r+0x42>
 800b41c:	4621      	mov	r1, r4
 800b41e:	4628      	mov	r0, r5
 800b420:	f000 ffa0 	bl	800c364 <_fflush_r>
 800b424:	bb30      	cbnz	r0, 800b474 <__swbuf_r+0x90>
 800b426:	68a3      	ldr	r3, [r4, #8]
 800b428:	3b01      	subs	r3, #1
 800b42a:	60a3      	str	r3, [r4, #8]
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	1c5a      	adds	r2, r3, #1
 800b430:	6022      	str	r2, [r4, #0]
 800b432:	701e      	strb	r6, [r3, #0]
 800b434:	6963      	ldr	r3, [r4, #20]
 800b436:	3001      	adds	r0, #1
 800b438:	4283      	cmp	r3, r0
 800b43a:	d004      	beq.n	800b446 <__swbuf_r+0x62>
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	07db      	lsls	r3, r3, #31
 800b440:	d506      	bpl.n	800b450 <__swbuf_r+0x6c>
 800b442:	2e0a      	cmp	r6, #10
 800b444:	d104      	bne.n	800b450 <__swbuf_r+0x6c>
 800b446:	4621      	mov	r1, r4
 800b448:	4628      	mov	r0, r5
 800b44a:	f000 ff8b 	bl	800c364 <_fflush_r>
 800b44e:	b988      	cbnz	r0, 800b474 <__swbuf_r+0x90>
 800b450:	4638      	mov	r0, r7
 800b452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b454:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <__swbuf_r+0x9c>)
 800b456:	429c      	cmp	r4, r3
 800b458:	d101      	bne.n	800b45e <__swbuf_r+0x7a>
 800b45a:	68ac      	ldr	r4, [r5, #8]
 800b45c:	e7cf      	b.n	800b3fe <__swbuf_r+0x1a>
 800b45e:	4b09      	ldr	r3, [pc, #36]	; (800b484 <__swbuf_r+0xa0>)
 800b460:	429c      	cmp	r4, r3
 800b462:	bf08      	it	eq
 800b464:	68ec      	ldreq	r4, [r5, #12]
 800b466:	e7ca      	b.n	800b3fe <__swbuf_r+0x1a>
 800b468:	4621      	mov	r1, r4
 800b46a:	4628      	mov	r0, r5
 800b46c:	f000 f80c 	bl	800b488 <__swsetup_r>
 800b470:	2800      	cmp	r0, #0
 800b472:	d0cb      	beq.n	800b40c <__swbuf_r+0x28>
 800b474:	f04f 37ff 	mov.w	r7, #4294967295
 800b478:	e7ea      	b.n	800b450 <__swbuf_r+0x6c>
 800b47a:	bf00      	nop
 800b47c:	0800ea40 	.word	0x0800ea40
 800b480:	0800ea60 	.word	0x0800ea60
 800b484:	0800ea20 	.word	0x0800ea20

0800b488 <__swsetup_r>:
 800b488:	4b32      	ldr	r3, [pc, #200]	; (800b554 <__swsetup_r+0xcc>)
 800b48a:	b570      	push	{r4, r5, r6, lr}
 800b48c:	681d      	ldr	r5, [r3, #0]
 800b48e:	4606      	mov	r6, r0
 800b490:	460c      	mov	r4, r1
 800b492:	b125      	cbz	r5, 800b49e <__swsetup_r+0x16>
 800b494:	69ab      	ldr	r3, [r5, #24]
 800b496:	b913      	cbnz	r3, 800b49e <__swsetup_r+0x16>
 800b498:	4628      	mov	r0, r5
 800b49a:	f000 fff7 	bl	800c48c <__sinit>
 800b49e:	4b2e      	ldr	r3, [pc, #184]	; (800b558 <__swsetup_r+0xd0>)
 800b4a0:	429c      	cmp	r4, r3
 800b4a2:	d10f      	bne.n	800b4c4 <__swsetup_r+0x3c>
 800b4a4:	686c      	ldr	r4, [r5, #4]
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4ac:	0719      	lsls	r1, r3, #28
 800b4ae:	d42c      	bmi.n	800b50a <__swsetup_r+0x82>
 800b4b0:	06dd      	lsls	r5, r3, #27
 800b4b2:	d411      	bmi.n	800b4d8 <__swsetup_r+0x50>
 800b4b4:	2309      	movs	r3, #9
 800b4b6:	6033      	str	r3, [r6, #0]
 800b4b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4bc:	81a3      	strh	r3, [r4, #12]
 800b4be:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c2:	e03e      	b.n	800b542 <__swsetup_r+0xba>
 800b4c4:	4b25      	ldr	r3, [pc, #148]	; (800b55c <__swsetup_r+0xd4>)
 800b4c6:	429c      	cmp	r4, r3
 800b4c8:	d101      	bne.n	800b4ce <__swsetup_r+0x46>
 800b4ca:	68ac      	ldr	r4, [r5, #8]
 800b4cc:	e7eb      	b.n	800b4a6 <__swsetup_r+0x1e>
 800b4ce:	4b24      	ldr	r3, [pc, #144]	; (800b560 <__swsetup_r+0xd8>)
 800b4d0:	429c      	cmp	r4, r3
 800b4d2:	bf08      	it	eq
 800b4d4:	68ec      	ldreq	r4, [r5, #12]
 800b4d6:	e7e6      	b.n	800b4a6 <__swsetup_r+0x1e>
 800b4d8:	0758      	lsls	r0, r3, #29
 800b4da:	d512      	bpl.n	800b502 <__swsetup_r+0x7a>
 800b4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4de:	b141      	cbz	r1, 800b4f2 <__swsetup_r+0x6a>
 800b4e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4e4:	4299      	cmp	r1, r3
 800b4e6:	d002      	beq.n	800b4ee <__swsetup_r+0x66>
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	f002 f92b 	bl	800d744 <_free_r>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b4f2:	89a3      	ldrh	r3, [r4, #12]
 800b4f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4f8:	81a3      	strh	r3, [r4, #12]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	6063      	str	r3, [r4, #4]
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	f043 0308 	orr.w	r3, r3, #8
 800b508:	81a3      	strh	r3, [r4, #12]
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	b94b      	cbnz	r3, 800b522 <__swsetup_r+0x9a>
 800b50e:	89a3      	ldrh	r3, [r4, #12]
 800b510:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b518:	d003      	beq.n	800b522 <__swsetup_r+0x9a>
 800b51a:	4621      	mov	r1, r4
 800b51c:	4630      	mov	r0, r6
 800b51e:	f001 fbed 	bl	800ccfc <__smakebuf_r>
 800b522:	89a0      	ldrh	r0, [r4, #12]
 800b524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b528:	f010 0301 	ands.w	r3, r0, #1
 800b52c:	d00a      	beq.n	800b544 <__swsetup_r+0xbc>
 800b52e:	2300      	movs	r3, #0
 800b530:	60a3      	str	r3, [r4, #8]
 800b532:	6963      	ldr	r3, [r4, #20]
 800b534:	425b      	negs	r3, r3
 800b536:	61a3      	str	r3, [r4, #24]
 800b538:	6923      	ldr	r3, [r4, #16]
 800b53a:	b943      	cbnz	r3, 800b54e <__swsetup_r+0xc6>
 800b53c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b540:	d1ba      	bne.n	800b4b8 <__swsetup_r+0x30>
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	0781      	lsls	r1, r0, #30
 800b546:	bf58      	it	pl
 800b548:	6963      	ldrpl	r3, [r4, #20]
 800b54a:	60a3      	str	r3, [r4, #8]
 800b54c:	e7f4      	b.n	800b538 <__swsetup_r+0xb0>
 800b54e:	2000      	movs	r0, #0
 800b550:	e7f7      	b.n	800b542 <__swsetup_r+0xba>
 800b552:	bf00      	nop
 800b554:	2000000c 	.word	0x2000000c
 800b558:	0800ea40 	.word	0x0800ea40
 800b55c:	0800ea60 	.word	0x0800ea60
 800b560:	0800ea20 	.word	0x0800ea20

0800b564 <quorem>:
 800b564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b568:	6903      	ldr	r3, [r0, #16]
 800b56a:	690c      	ldr	r4, [r1, #16]
 800b56c:	42a3      	cmp	r3, r4
 800b56e:	4607      	mov	r7, r0
 800b570:	f2c0 8081 	blt.w	800b676 <quorem+0x112>
 800b574:	3c01      	subs	r4, #1
 800b576:	f101 0814 	add.w	r8, r1, #20
 800b57a:	f100 0514 	add.w	r5, r0, #20
 800b57e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b582:	9301      	str	r3, [sp, #4]
 800b584:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b58c:	3301      	adds	r3, #1
 800b58e:	429a      	cmp	r2, r3
 800b590:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b594:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b598:	fbb2 f6f3 	udiv	r6, r2, r3
 800b59c:	d331      	bcc.n	800b602 <quorem+0x9e>
 800b59e:	f04f 0e00 	mov.w	lr, #0
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	46ac      	mov	ip, r5
 800b5a6:	46f2      	mov	sl, lr
 800b5a8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5ac:	b293      	uxth	r3, r2
 800b5ae:	fb06 e303 	mla	r3, r6, r3, lr
 800b5b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	ebaa 0303 	sub.w	r3, sl, r3
 800b5bc:	0c12      	lsrs	r2, r2, #16
 800b5be:	f8dc a000 	ldr.w	sl, [ip]
 800b5c2:	fb06 e202 	mla	r2, r6, r2, lr
 800b5c6:	fa13 f38a 	uxtah	r3, r3, sl
 800b5ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5ce:	fa1f fa82 	uxth.w	sl, r2
 800b5d2:	f8dc 2000 	ldr.w	r2, [ip]
 800b5d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b5da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5e4:	4581      	cmp	r9, r0
 800b5e6:	f84c 3b04 	str.w	r3, [ip], #4
 800b5ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5ee:	d2db      	bcs.n	800b5a8 <quorem+0x44>
 800b5f0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5f4:	b92b      	cbnz	r3, 800b602 <quorem+0x9e>
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	3b04      	subs	r3, #4
 800b5fa:	429d      	cmp	r5, r3
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	d32e      	bcc.n	800b65e <quorem+0xfa>
 800b600:	613c      	str	r4, [r7, #16]
 800b602:	4638      	mov	r0, r7
 800b604:	f001 fe9c 	bl	800d340 <__mcmp>
 800b608:	2800      	cmp	r0, #0
 800b60a:	db24      	blt.n	800b656 <quorem+0xf2>
 800b60c:	3601      	adds	r6, #1
 800b60e:	4628      	mov	r0, r5
 800b610:	f04f 0c00 	mov.w	ip, #0
 800b614:	f858 2b04 	ldr.w	r2, [r8], #4
 800b618:	f8d0 e000 	ldr.w	lr, [r0]
 800b61c:	b293      	uxth	r3, r2
 800b61e:	ebac 0303 	sub.w	r3, ip, r3
 800b622:	0c12      	lsrs	r2, r2, #16
 800b624:	fa13 f38e 	uxtah	r3, r3, lr
 800b628:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b62c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b630:	b29b      	uxth	r3, r3
 800b632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b636:	45c1      	cmp	r9, r8
 800b638:	f840 3b04 	str.w	r3, [r0], #4
 800b63c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b640:	d2e8      	bcs.n	800b614 <quorem+0xb0>
 800b642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b64a:	b922      	cbnz	r2, 800b656 <quorem+0xf2>
 800b64c:	3b04      	subs	r3, #4
 800b64e:	429d      	cmp	r5, r3
 800b650:	461a      	mov	r2, r3
 800b652:	d30a      	bcc.n	800b66a <quorem+0x106>
 800b654:	613c      	str	r4, [r7, #16]
 800b656:	4630      	mov	r0, r6
 800b658:	b003      	add	sp, #12
 800b65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65e:	6812      	ldr	r2, [r2, #0]
 800b660:	3b04      	subs	r3, #4
 800b662:	2a00      	cmp	r2, #0
 800b664:	d1cc      	bne.n	800b600 <quorem+0x9c>
 800b666:	3c01      	subs	r4, #1
 800b668:	e7c7      	b.n	800b5fa <quorem+0x96>
 800b66a:	6812      	ldr	r2, [r2, #0]
 800b66c:	3b04      	subs	r3, #4
 800b66e:	2a00      	cmp	r2, #0
 800b670:	d1f0      	bne.n	800b654 <quorem+0xf0>
 800b672:	3c01      	subs	r4, #1
 800b674:	e7eb      	b.n	800b64e <quorem+0xea>
 800b676:	2000      	movs	r0, #0
 800b678:	e7ee      	b.n	800b658 <quorem+0xf4>
 800b67a:	0000      	movs	r0, r0
 800b67c:	0000      	movs	r0, r0
	...

0800b680 <_dtoa_r>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	ed2d 8b02 	vpush	{d8}
 800b688:	ec57 6b10 	vmov	r6, r7, d0
 800b68c:	b095      	sub	sp, #84	; 0x54
 800b68e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b690:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b694:	9105      	str	r1, [sp, #20]
 800b696:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b69a:	4604      	mov	r4, r0
 800b69c:	9209      	str	r2, [sp, #36]	; 0x24
 800b69e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6a0:	b975      	cbnz	r5, 800b6c0 <_dtoa_r+0x40>
 800b6a2:	2010      	movs	r0, #16
 800b6a4:	f001 fb6a 	bl	800cd7c <malloc>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	6260      	str	r0, [r4, #36]	; 0x24
 800b6ac:	b920      	cbnz	r0, 800b6b8 <_dtoa_r+0x38>
 800b6ae:	4bb2      	ldr	r3, [pc, #712]	; (800b978 <_dtoa_r+0x2f8>)
 800b6b0:	21ea      	movs	r1, #234	; 0xea
 800b6b2:	48b2      	ldr	r0, [pc, #712]	; (800b97c <_dtoa_r+0x2fc>)
 800b6b4:	f002 fc34 	bl	800df20 <__assert_func>
 800b6b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b6bc:	6005      	str	r5, [r0, #0]
 800b6be:	60c5      	str	r5, [r0, #12]
 800b6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6c2:	6819      	ldr	r1, [r3, #0]
 800b6c4:	b151      	cbz	r1, 800b6dc <_dtoa_r+0x5c>
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	604a      	str	r2, [r1, #4]
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	4093      	lsls	r3, r2
 800b6ce:	608b      	str	r3, [r1, #8]
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	f001 fbad 	bl	800ce30 <_Bfree>
 800b6d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6d8:	2200      	movs	r2, #0
 800b6da:	601a      	str	r2, [r3, #0]
 800b6dc:	1e3b      	subs	r3, r7, #0
 800b6de:	bfb9      	ittee	lt
 800b6e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b6e4:	9303      	strlt	r3, [sp, #12]
 800b6e6:	2300      	movge	r3, #0
 800b6e8:	f8c8 3000 	strge.w	r3, [r8]
 800b6ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b6f0:	4ba3      	ldr	r3, [pc, #652]	; (800b980 <_dtoa_r+0x300>)
 800b6f2:	bfbc      	itt	lt
 800b6f4:	2201      	movlt	r2, #1
 800b6f6:	f8c8 2000 	strlt.w	r2, [r8]
 800b6fa:	ea33 0309 	bics.w	r3, r3, r9
 800b6fe:	d11b      	bne.n	800b738 <_dtoa_r+0xb8>
 800b700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b702:	f242 730f 	movw	r3, #9999	; 0x270f
 800b706:	6013      	str	r3, [r2, #0]
 800b708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b70c:	4333      	orrs	r3, r6
 800b70e:	f000 857a 	beq.w	800c206 <_dtoa_r+0xb86>
 800b712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b714:	b963      	cbnz	r3, 800b730 <_dtoa_r+0xb0>
 800b716:	4b9b      	ldr	r3, [pc, #620]	; (800b984 <_dtoa_r+0x304>)
 800b718:	e024      	b.n	800b764 <_dtoa_r+0xe4>
 800b71a:	4b9b      	ldr	r3, [pc, #620]	; (800b988 <_dtoa_r+0x308>)
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	3308      	adds	r3, #8
 800b720:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b722:	6013      	str	r3, [r2, #0]
 800b724:	9800      	ldr	r0, [sp, #0]
 800b726:	b015      	add	sp, #84	; 0x54
 800b728:	ecbd 8b02 	vpop	{d8}
 800b72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b730:	4b94      	ldr	r3, [pc, #592]	; (800b984 <_dtoa_r+0x304>)
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	3303      	adds	r3, #3
 800b736:	e7f3      	b.n	800b720 <_dtoa_r+0xa0>
 800b738:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b73c:	2200      	movs	r2, #0
 800b73e:	ec51 0b17 	vmov	r0, r1, d7
 800b742:	2300      	movs	r3, #0
 800b744:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b748:	f7f5 f9be 	bl	8000ac8 <__aeabi_dcmpeq>
 800b74c:	4680      	mov	r8, r0
 800b74e:	b158      	cbz	r0, 800b768 <_dtoa_r+0xe8>
 800b750:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b752:	2301      	movs	r3, #1
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 8551 	beq.w	800c200 <_dtoa_r+0xb80>
 800b75e:	488b      	ldr	r0, [pc, #556]	; (800b98c <_dtoa_r+0x30c>)
 800b760:	6018      	str	r0, [r3, #0]
 800b762:	1e43      	subs	r3, r0, #1
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	e7dd      	b.n	800b724 <_dtoa_r+0xa4>
 800b768:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b76c:	aa12      	add	r2, sp, #72	; 0x48
 800b76e:	a913      	add	r1, sp, #76	; 0x4c
 800b770:	4620      	mov	r0, r4
 800b772:	f001 ff05 	bl	800d580 <__d2b>
 800b776:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b77a:	4683      	mov	fp, r0
 800b77c:	2d00      	cmp	r5, #0
 800b77e:	d07c      	beq.n	800b87a <_dtoa_r+0x1fa>
 800b780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b782:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b78a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b78e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b792:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b796:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b79a:	4b7d      	ldr	r3, [pc, #500]	; (800b990 <_dtoa_r+0x310>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	4630      	mov	r0, r6
 800b7a0:	4639      	mov	r1, r7
 800b7a2:	f7f4 fd71 	bl	8000288 <__aeabi_dsub>
 800b7a6:	a36e      	add	r3, pc, #440	; (adr r3, 800b960 <_dtoa_r+0x2e0>)
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f7f4 ff24 	bl	80005f8 <__aeabi_dmul>
 800b7b0:	a36d      	add	r3, pc, #436	; (adr r3, 800b968 <_dtoa_r+0x2e8>)
 800b7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b6:	f7f4 fd69 	bl	800028c <__adddf3>
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	4628      	mov	r0, r5
 800b7be:	460f      	mov	r7, r1
 800b7c0:	f7f4 feb0 	bl	8000524 <__aeabi_i2d>
 800b7c4:	a36a      	add	r3, pc, #424	; (adr r3, 800b970 <_dtoa_r+0x2f0>)
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	f7f4 ff15 	bl	80005f8 <__aeabi_dmul>
 800b7ce:	4602      	mov	r2, r0
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	f7f4 fd59 	bl	800028c <__adddf3>
 800b7da:	4606      	mov	r6, r0
 800b7dc:	460f      	mov	r7, r1
 800b7de:	f7f5 f9bb 	bl	8000b58 <__aeabi_d2iz>
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	4682      	mov	sl, r0
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	f7f5 f976 	bl	8000adc <__aeabi_dcmplt>
 800b7f0:	b148      	cbz	r0, 800b806 <_dtoa_r+0x186>
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	f7f4 fe96 	bl	8000524 <__aeabi_i2d>
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	f7f5 f964 	bl	8000ac8 <__aeabi_dcmpeq>
 800b800:	b908      	cbnz	r0, 800b806 <_dtoa_r+0x186>
 800b802:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b806:	f1ba 0f16 	cmp.w	sl, #22
 800b80a:	d854      	bhi.n	800b8b6 <_dtoa_r+0x236>
 800b80c:	4b61      	ldr	r3, [pc, #388]	; (800b994 <_dtoa_r+0x314>)
 800b80e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b81a:	f7f5 f95f 	bl	8000adc <__aeabi_dcmplt>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d04b      	beq.n	800b8ba <_dtoa_r+0x23a>
 800b822:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b826:	2300      	movs	r3, #0
 800b828:	930e      	str	r3, [sp, #56]	; 0x38
 800b82a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b82c:	1b5d      	subs	r5, r3, r5
 800b82e:	1e6b      	subs	r3, r5, #1
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	bf43      	ittte	mi
 800b834:	2300      	movmi	r3, #0
 800b836:	f1c5 0801 	rsbmi	r8, r5, #1
 800b83a:	9304      	strmi	r3, [sp, #16]
 800b83c:	f04f 0800 	movpl.w	r8, #0
 800b840:	f1ba 0f00 	cmp.w	sl, #0
 800b844:	db3b      	blt.n	800b8be <_dtoa_r+0x23e>
 800b846:	9b04      	ldr	r3, [sp, #16]
 800b848:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b84c:	4453      	add	r3, sl
 800b84e:	9304      	str	r3, [sp, #16]
 800b850:	2300      	movs	r3, #0
 800b852:	9306      	str	r3, [sp, #24]
 800b854:	9b05      	ldr	r3, [sp, #20]
 800b856:	2b09      	cmp	r3, #9
 800b858:	d869      	bhi.n	800b92e <_dtoa_r+0x2ae>
 800b85a:	2b05      	cmp	r3, #5
 800b85c:	bfc4      	itt	gt
 800b85e:	3b04      	subgt	r3, #4
 800b860:	9305      	strgt	r3, [sp, #20]
 800b862:	9b05      	ldr	r3, [sp, #20]
 800b864:	f1a3 0302 	sub.w	r3, r3, #2
 800b868:	bfcc      	ite	gt
 800b86a:	2500      	movgt	r5, #0
 800b86c:	2501      	movle	r5, #1
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d869      	bhi.n	800b946 <_dtoa_r+0x2c6>
 800b872:	e8df f003 	tbb	[pc, r3]
 800b876:	4e2c      	.short	0x4e2c
 800b878:	5a4c      	.short	0x5a4c
 800b87a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b87e:	441d      	add	r5, r3
 800b880:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b884:	2b20      	cmp	r3, #32
 800b886:	bfc1      	itttt	gt
 800b888:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b88c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b890:	fa09 f303 	lslgt.w	r3, r9, r3
 800b894:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b898:	bfda      	itte	le
 800b89a:	f1c3 0320 	rsble	r3, r3, #32
 800b89e:	fa06 f003 	lslle.w	r0, r6, r3
 800b8a2:	4318      	orrgt	r0, r3
 800b8a4:	f7f4 fe2e 	bl	8000504 <__aeabi_ui2d>
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b8b0:	3d01      	subs	r5, #1
 800b8b2:	9310      	str	r3, [sp, #64]	; 0x40
 800b8b4:	e771      	b.n	800b79a <_dtoa_r+0x11a>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e7b6      	b.n	800b828 <_dtoa_r+0x1a8>
 800b8ba:	900e      	str	r0, [sp, #56]	; 0x38
 800b8bc:	e7b5      	b.n	800b82a <_dtoa_r+0x1aa>
 800b8be:	f1ca 0300 	rsb	r3, sl, #0
 800b8c2:	9306      	str	r3, [sp, #24]
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	eba8 080a 	sub.w	r8, r8, sl
 800b8ca:	930d      	str	r3, [sp, #52]	; 0x34
 800b8cc:	e7c2      	b.n	800b854 <_dtoa_r+0x1d4>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	9308      	str	r3, [sp, #32]
 800b8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	dc39      	bgt.n	800b94c <_dtoa_r+0x2cc>
 800b8d8:	f04f 0901 	mov.w	r9, #1
 800b8dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800b8e0:	464b      	mov	r3, r9
 800b8e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b8e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	6042      	str	r2, [r0, #4]
 800b8ec:	2204      	movs	r2, #4
 800b8ee:	f102 0614 	add.w	r6, r2, #20
 800b8f2:	429e      	cmp	r6, r3
 800b8f4:	6841      	ldr	r1, [r0, #4]
 800b8f6:	d92f      	bls.n	800b958 <_dtoa_r+0x2d8>
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f001 fa59 	bl	800cdb0 <_Balloc>
 800b8fe:	9000      	str	r0, [sp, #0]
 800b900:	2800      	cmp	r0, #0
 800b902:	d14b      	bne.n	800b99c <_dtoa_r+0x31c>
 800b904:	4b24      	ldr	r3, [pc, #144]	; (800b998 <_dtoa_r+0x318>)
 800b906:	4602      	mov	r2, r0
 800b908:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b90c:	e6d1      	b.n	800b6b2 <_dtoa_r+0x32>
 800b90e:	2301      	movs	r3, #1
 800b910:	e7de      	b.n	800b8d0 <_dtoa_r+0x250>
 800b912:	2300      	movs	r3, #0
 800b914:	9308      	str	r3, [sp, #32]
 800b916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b918:	eb0a 0903 	add.w	r9, sl, r3
 800b91c:	f109 0301 	add.w	r3, r9, #1
 800b920:	2b01      	cmp	r3, #1
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	bfb8      	it	lt
 800b926:	2301      	movlt	r3, #1
 800b928:	e7dd      	b.n	800b8e6 <_dtoa_r+0x266>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e7f2      	b.n	800b914 <_dtoa_r+0x294>
 800b92e:	2501      	movs	r5, #1
 800b930:	2300      	movs	r3, #0
 800b932:	9305      	str	r3, [sp, #20]
 800b934:	9508      	str	r5, [sp, #32]
 800b936:	f04f 39ff 	mov.w	r9, #4294967295
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b940:	2312      	movs	r3, #18
 800b942:	9209      	str	r2, [sp, #36]	; 0x24
 800b944:	e7cf      	b.n	800b8e6 <_dtoa_r+0x266>
 800b946:	2301      	movs	r3, #1
 800b948:	9308      	str	r3, [sp, #32]
 800b94a:	e7f4      	b.n	800b936 <_dtoa_r+0x2b6>
 800b94c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b950:	f8cd 9004 	str.w	r9, [sp, #4]
 800b954:	464b      	mov	r3, r9
 800b956:	e7c6      	b.n	800b8e6 <_dtoa_r+0x266>
 800b958:	3101      	adds	r1, #1
 800b95a:	6041      	str	r1, [r0, #4]
 800b95c:	0052      	lsls	r2, r2, #1
 800b95e:	e7c6      	b.n	800b8ee <_dtoa_r+0x26e>
 800b960:	636f4361 	.word	0x636f4361
 800b964:	3fd287a7 	.word	0x3fd287a7
 800b968:	8b60c8b3 	.word	0x8b60c8b3
 800b96c:	3fc68a28 	.word	0x3fc68a28
 800b970:	509f79fb 	.word	0x509f79fb
 800b974:	3fd34413 	.word	0x3fd34413
 800b978:	0800e996 	.word	0x0800e996
 800b97c:	0800e9ad 	.word	0x0800e9ad
 800b980:	7ff00000 	.word	0x7ff00000
 800b984:	0800e992 	.word	0x0800e992
 800b988:	0800e989 	.word	0x0800e989
 800b98c:	0800e809 	.word	0x0800e809
 800b990:	3ff80000 	.word	0x3ff80000
 800b994:	0800eb88 	.word	0x0800eb88
 800b998:	0800ea0c 	.word	0x0800ea0c
 800b99c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b99e:	9a00      	ldr	r2, [sp, #0]
 800b9a0:	601a      	str	r2, [r3, #0]
 800b9a2:	9b01      	ldr	r3, [sp, #4]
 800b9a4:	2b0e      	cmp	r3, #14
 800b9a6:	f200 80ad 	bhi.w	800bb04 <_dtoa_r+0x484>
 800b9aa:	2d00      	cmp	r5, #0
 800b9ac:	f000 80aa 	beq.w	800bb04 <_dtoa_r+0x484>
 800b9b0:	f1ba 0f00 	cmp.w	sl, #0
 800b9b4:	dd36      	ble.n	800ba24 <_dtoa_r+0x3a4>
 800b9b6:	4ac3      	ldr	r2, [pc, #780]	; (800bcc4 <_dtoa_r+0x644>)
 800b9b8:	f00a 030f 	and.w	r3, sl, #15
 800b9bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9c0:	ed93 7b00 	vldr	d7, [r3]
 800b9c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b9c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b9cc:	eeb0 8a47 	vmov.f32	s16, s14
 800b9d0:	eef0 8a67 	vmov.f32	s17, s15
 800b9d4:	d016      	beq.n	800ba04 <_dtoa_r+0x384>
 800b9d6:	4bbc      	ldr	r3, [pc, #752]	; (800bcc8 <_dtoa_r+0x648>)
 800b9d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b9dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9e0:	f7f4 ff34 	bl	800084c <__aeabi_ddiv>
 800b9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e8:	f007 070f 	and.w	r7, r7, #15
 800b9ec:	2503      	movs	r5, #3
 800b9ee:	4eb6      	ldr	r6, [pc, #728]	; (800bcc8 <_dtoa_r+0x648>)
 800b9f0:	b957      	cbnz	r7, 800ba08 <_dtoa_r+0x388>
 800b9f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f6:	ec53 2b18 	vmov	r2, r3, d8
 800b9fa:	f7f4 ff27 	bl	800084c <__aeabi_ddiv>
 800b9fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba02:	e029      	b.n	800ba58 <_dtoa_r+0x3d8>
 800ba04:	2502      	movs	r5, #2
 800ba06:	e7f2      	b.n	800b9ee <_dtoa_r+0x36e>
 800ba08:	07f9      	lsls	r1, r7, #31
 800ba0a:	d508      	bpl.n	800ba1e <_dtoa_r+0x39e>
 800ba0c:	ec51 0b18 	vmov	r0, r1, d8
 800ba10:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba14:	f7f4 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ba18:	ec41 0b18 	vmov	d8, r0, r1
 800ba1c:	3501      	adds	r5, #1
 800ba1e:	107f      	asrs	r7, r7, #1
 800ba20:	3608      	adds	r6, #8
 800ba22:	e7e5      	b.n	800b9f0 <_dtoa_r+0x370>
 800ba24:	f000 80a6 	beq.w	800bb74 <_dtoa_r+0x4f4>
 800ba28:	f1ca 0600 	rsb	r6, sl, #0
 800ba2c:	4ba5      	ldr	r3, [pc, #660]	; (800bcc4 <_dtoa_r+0x644>)
 800ba2e:	4fa6      	ldr	r7, [pc, #664]	; (800bcc8 <_dtoa_r+0x648>)
 800ba30:	f006 020f 	and.w	r2, r6, #15
 800ba34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba40:	f7f4 fdda 	bl	80005f8 <__aeabi_dmul>
 800ba44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba48:	1136      	asrs	r6, r6, #4
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	2502      	movs	r5, #2
 800ba4e:	2e00      	cmp	r6, #0
 800ba50:	f040 8085 	bne.w	800bb5e <_dtoa_r+0x4de>
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1d2      	bne.n	800b9fe <_dtoa_r+0x37e>
 800ba58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 808c 	beq.w	800bb78 <_dtoa_r+0x4f8>
 800ba60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba64:	4b99      	ldr	r3, [pc, #612]	; (800bccc <_dtoa_r+0x64c>)
 800ba66:	2200      	movs	r2, #0
 800ba68:	4630      	mov	r0, r6
 800ba6a:	4639      	mov	r1, r7
 800ba6c:	f7f5 f836 	bl	8000adc <__aeabi_dcmplt>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	f000 8081 	beq.w	800bb78 <_dtoa_r+0x4f8>
 800ba76:	9b01      	ldr	r3, [sp, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d07d      	beq.n	800bb78 <_dtoa_r+0x4f8>
 800ba7c:	f1b9 0f00 	cmp.w	r9, #0
 800ba80:	dd3c      	ble.n	800bafc <_dtoa_r+0x47c>
 800ba82:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ba86:	9307      	str	r3, [sp, #28]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4b91      	ldr	r3, [pc, #580]	; (800bcd0 <_dtoa_r+0x650>)
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f7f4 fdb2 	bl	80005f8 <__aeabi_dmul>
 800ba94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba98:	3501      	adds	r5, #1
 800ba9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ba9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800baa2:	4628      	mov	r0, r5
 800baa4:	f7f4 fd3e 	bl	8000524 <__aeabi_i2d>
 800baa8:	4632      	mov	r2, r6
 800baaa:	463b      	mov	r3, r7
 800baac:	f7f4 fda4 	bl	80005f8 <__aeabi_dmul>
 800bab0:	4b88      	ldr	r3, [pc, #544]	; (800bcd4 <_dtoa_r+0x654>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	f7f4 fbea 	bl	800028c <__adddf3>
 800bab8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800babc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bac0:	9303      	str	r3, [sp, #12]
 800bac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d15c      	bne.n	800bb82 <_dtoa_r+0x502>
 800bac8:	4b83      	ldr	r3, [pc, #524]	; (800bcd8 <_dtoa_r+0x658>)
 800baca:	2200      	movs	r2, #0
 800bacc:	4630      	mov	r0, r6
 800bace:	4639      	mov	r1, r7
 800bad0:	f7f4 fbda 	bl	8000288 <__aeabi_dsub>
 800bad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bad8:	4606      	mov	r6, r0
 800bada:	460f      	mov	r7, r1
 800badc:	f7f5 f81c 	bl	8000b18 <__aeabi_dcmpgt>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	f040 8296 	bne.w	800c012 <_dtoa_r+0x992>
 800bae6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800baea:	4630      	mov	r0, r6
 800baec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800baf0:	4639      	mov	r1, r7
 800baf2:	f7f4 fff3 	bl	8000adc <__aeabi_dcmplt>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	f040 8288 	bne.w	800c00c <_dtoa_r+0x98c>
 800bafc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f2c0 8158 	blt.w	800bdbc <_dtoa_r+0x73c>
 800bb0c:	f1ba 0f0e 	cmp.w	sl, #14
 800bb10:	f300 8154 	bgt.w	800bdbc <_dtoa_r+0x73c>
 800bb14:	4b6b      	ldr	r3, [pc, #428]	; (800bcc4 <_dtoa_r+0x644>)
 800bb16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f280 80e3 	bge.w	800bcec <_dtoa_r+0x66c>
 800bb26:	9b01      	ldr	r3, [sp, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f300 80df 	bgt.w	800bcec <_dtoa_r+0x66c>
 800bb2e:	f040 826d 	bne.w	800c00c <_dtoa_r+0x98c>
 800bb32:	4b69      	ldr	r3, [pc, #420]	; (800bcd8 <_dtoa_r+0x658>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	4640      	mov	r0, r8
 800bb38:	4649      	mov	r1, r9
 800bb3a:	f7f4 fd5d 	bl	80005f8 <__aeabi_dmul>
 800bb3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb42:	f7f4 ffdf 	bl	8000b04 <__aeabi_dcmpge>
 800bb46:	9e01      	ldr	r6, [sp, #4]
 800bb48:	4637      	mov	r7, r6
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	f040 8243 	bne.w	800bfd6 <_dtoa_r+0x956>
 800bb50:	9d00      	ldr	r5, [sp, #0]
 800bb52:	2331      	movs	r3, #49	; 0x31
 800bb54:	f805 3b01 	strb.w	r3, [r5], #1
 800bb58:	f10a 0a01 	add.w	sl, sl, #1
 800bb5c:	e23f      	b.n	800bfde <_dtoa_r+0x95e>
 800bb5e:	07f2      	lsls	r2, r6, #31
 800bb60:	d505      	bpl.n	800bb6e <_dtoa_r+0x4ee>
 800bb62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb66:	f7f4 fd47 	bl	80005f8 <__aeabi_dmul>
 800bb6a:	3501      	adds	r5, #1
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	1076      	asrs	r6, r6, #1
 800bb70:	3708      	adds	r7, #8
 800bb72:	e76c      	b.n	800ba4e <_dtoa_r+0x3ce>
 800bb74:	2502      	movs	r5, #2
 800bb76:	e76f      	b.n	800ba58 <_dtoa_r+0x3d8>
 800bb78:	9b01      	ldr	r3, [sp, #4]
 800bb7a:	f8cd a01c 	str.w	sl, [sp, #28]
 800bb7e:	930c      	str	r3, [sp, #48]	; 0x30
 800bb80:	e78d      	b.n	800ba9e <_dtoa_r+0x41e>
 800bb82:	9900      	ldr	r1, [sp, #0]
 800bb84:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bb86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb88:	4b4e      	ldr	r3, [pc, #312]	; (800bcc4 <_dtoa_r+0x644>)
 800bb8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb8e:	4401      	add	r1, r0
 800bb90:	9102      	str	r1, [sp, #8]
 800bb92:	9908      	ldr	r1, [sp, #32]
 800bb94:	eeb0 8a47 	vmov.f32	s16, s14
 800bb98:	eef0 8a67 	vmov.f32	s17, s15
 800bb9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bba0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bba4:	2900      	cmp	r1, #0
 800bba6:	d045      	beq.n	800bc34 <_dtoa_r+0x5b4>
 800bba8:	494c      	ldr	r1, [pc, #304]	; (800bcdc <_dtoa_r+0x65c>)
 800bbaa:	2000      	movs	r0, #0
 800bbac:	f7f4 fe4e 	bl	800084c <__aeabi_ddiv>
 800bbb0:	ec53 2b18 	vmov	r2, r3, d8
 800bbb4:	f7f4 fb68 	bl	8000288 <__aeabi_dsub>
 800bbb8:	9d00      	ldr	r5, [sp, #0]
 800bbba:	ec41 0b18 	vmov	d8, r0, r1
 800bbbe:	4639      	mov	r1, r7
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	f7f4 ffc9 	bl	8000b58 <__aeabi_d2iz>
 800bbc6:	900c      	str	r0, [sp, #48]	; 0x30
 800bbc8:	f7f4 fcac 	bl	8000524 <__aeabi_i2d>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	4639      	mov	r1, r7
 800bbd4:	f7f4 fb58 	bl	8000288 <__aeabi_dsub>
 800bbd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbda:	3330      	adds	r3, #48	; 0x30
 800bbdc:	f805 3b01 	strb.w	r3, [r5], #1
 800bbe0:	ec53 2b18 	vmov	r2, r3, d8
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	460f      	mov	r7, r1
 800bbe8:	f7f4 ff78 	bl	8000adc <__aeabi_dcmplt>
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d165      	bne.n	800bcbc <_dtoa_r+0x63c>
 800bbf0:	4632      	mov	r2, r6
 800bbf2:	463b      	mov	r3, r7
 800bbf4:	4935      	ldr	r1, [pc, #212]	; (800bccc <_dtoa_r+0x64c>)
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	f7f4 fb46 	bl	8000288 <__aeabi_dsub>
 800bbfc:	ec53 2b18 	vmov	r2, r3, d8
 800bc00:	f7f4 ff6c 	bl	8000adc <__aeabi_dcmplt>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	f040 80b9 	bne.w	800bd7c <_dtoa_r+0x6fc>
 800bc0a:	9b02      	ldr	r3, [sp, #8]
 800bc0c:	429d      	cmp	r5, r3
 800bc0e:	f43f af75 	beq.w	800bafc <_dtoa_r+0x47c>
 800bc12:	4b2f      	ldr	r3, [pc, #188]	; (800bcd0 <_dtoa_r+0x650>)
 800bc14:	ec51 0b18 	vmov	r0, r1, d8
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f7f4 fced 	bl	80005f8 <__aeabi_dmul>
 800bc1e:	4b2c      	ldr	r3, [pc, #176]	; (800bcd0 <_dtoa_r+0x650>)
 800bc20:	ec41 0b18 	vmov	d8, r0, r1
 800bc24:	2200      	movs	r2, #0
 800bc26:	4630      	mov	r0, r6
 800bc28:	4639      	mov	r1, r7
 800bc2a:	f7f4 fce5 	bl	80005f8 <__aeabi_dmul>
 800bc2e:	4606      	mov	r6, r0
 800bc30:	460f      	mov	r7, r1
 800bc32:	e7c4      	b.n	800bbbe <_dtoa_r+0x53e>
 800bc34:	ec51 0b17 	vmov	r0, r1, d7
 800bc38:	f7f4 fcde 	bl	80005f8 <__aeabi_dmul>
 800bc3c:	9b02      	ldr	r3, [sp, #8]
 800bc3e:	9d00      	ldr	r5, [sp, #0]
 800bc40:	930c      	str	r3, [sp, #48]	; 0x30
 800bc42:	ec41 0b18 	vmov	d8, r0, r1
 800bc46:	4639      	mov	r1, r7
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f7f4 ff85 	bl	8000b58 <__aeabi_d2iz>
 800bc4e:	9011      	str	r0, [sp, #68]	; 0x44
 800bc50:	f7f4 fc68 	bl	8000524 <__aeabi_i2d>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4630      	mov	r0, r6
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	f7f4 fb14 	bl	8000288 <__aeabi_dsub>
 800bc60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc62:	3330      	adds	r3, #48	; 0x30
 800bc64:	f805 3b01 	strb.w	r3, [r5], #1
 800bc68:	9b02      	ldr	r3, [sp, #8]
 800bc6a:	429d      	cmp	r5, r3
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	f04f 0200 	mov.w	r2, #0
 800bc74:	d134      	bne.n	800bce0 <_dtoa_r+0x660>
 800bc76:	4b19      	ldr	r3, [pc, #100]	; (800bcdc <_dtoa_r+0x65c>)
 800bc78:	ec51 0b18 	vmov	r0, r1, d8
 800bc7c:	f7f4 fb06 	bl	800028c <__adddf3>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4630      	mov	r0, r6
 800bc86:	4639      	mov	r1, r7
 800bc88:	f7f4 ff46 	bl	8000b18 <__aeabi_dcmpgt>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	d175      	bne.n	800bd7c <_dtoa_r+0x6fc>
 800bc90:	ec53 2b18 	vmov	r2, r3, d8
 800bc94:	4911      	ldr	r1, [pc, #68]	; (800bcdc <_dtoa_r+0x65c>)
 800bc96:	2000      	movs	r0, #0
 800bc98:	f7f4 faf6 	bl	8000288 <__aeabi_dsub>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4630      	mov	r0, r6
 800bca2:	4639      	mov	r1, r7
 800bca4:	f7f4 ff1a 	bl	8000adc <__aeabi_dcmplt>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	f43f af27 	beq.w	800bafc <_dtoa_r+0x47c>
 800bcae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bcb0:	1e6b      	subs	r3, r5, #1
 800bcb2:	930c      	str	r3, [sp, #48]	; 0x30
 800bcb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcb8:	2b30      	cmp	r3, #48	; 0x30
 800bcba:	d0f8      	beq.n	800bcae <_dtoa_r+0x62e>
 800bcbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bcc0:	e04a      	b.n	800bd58 <_dtoa_r+0x6d8>
 800bcc2:	bf00      	nop
 800bcc4:	0800eb88 	.word	0x0800eb88
 800bcc8:	0800eb60 	.word	0x0800eb60
 800bccc:	3ff00000 	.word	0x3ff00000
 800bcd0:	40240000 	.word	0x40240000
 800bcd4:	401c0000 	.word	0x401c0000
 800bcd8:	40140000 	.word	0x40140000
 800bcdc:	3fe00000 	.word	0x3fe00000
 800bce0:	4baf      	ldr	r3, [pc, #700]	; (800bfa0 <_dtoa_r+0x920>)
 800bce2:	f7f4 fc89 	bl	80005f8 <__aeabi_dmul>
 800bce6:	4606      	mov	r6, r0
 800bce8:	460f      	mov	r7, r1
 800bcea:	e7ac      	b.n	800bc46 <_dtoa_r+0x5c6>
 800bcec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bcf0:	9d00      	ldr	r5, [sp, #0]
 800bcf2:	4642      	mov	r2, r8
 800bcf4:	464b      	mov	r3, r9
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	f7f4 fda7 	bl	800084c <__aeabi_ddiv>
 800bcfe:	f7f4 ff2b 	bl	8000b58 <__aeabi_d2iz>
 800bd02:	9002      	str	r0, [sp, #8]
 800bd04:	f7f4 fc0e 	bl	8000524 <__aeabi_i2d>
 800bd08:	4642      	mov	r2, r8
 800bd0a:	464b      	mov	r3, r9
 800bd0c:	f7f4 fc74 	bl	80005f8 <__aeabi_dmul>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4630      	mov	r0, r6
 800bd16:	4639      	mov	r1, r7
 800bd18:	f7f4 fab6 	bl	8000288 <__aeabi_dsub>
 800bd1c:	9e02      	ldr	r6, [sp, #8]
 800bd1e:	9f01      	ldr	r7, [sp, #4]
 800bd20:	3630      	adds	r6, #48	; 0x30
 800bd22:	f805 6b01 	strb.w	r6, [r5], #1
 800bd26:	9e00      	ldr	r6, [sp, #0]
 800bd28:	1bae      	subs	r6, r5, r6
 800bd2a:	42b7      	cmp	r7, r6
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	d137      	bne.n	800bda2 <_dtoa_r+0x722>
 800bd32:	f7f4 faab 	bl	800028c <__adddf3>
 800bd36:	4642      	mov	r2, r8
 800bd38:	464b      	mov	r3, r9
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	460f      	mov	r7, r1
 800bd3e:	f7f4 feeb 	bl	8000b18 <__aeabi_dcmpgt>
 800bd42:	b9c8      	cbnz	r0, 800bd78 <_dtoa_r+0x6f8>
 800bd44:	4642      	mov	r2, r8
 800bd46:	464b      	mov	r3, r9
 800bd48:	4630      	mov	r0, r6
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 febc 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd50:	b110      	cbz	r0, 800bd58 <_dtoa_r+0x6d8>
 800bd52:	9b02      	ldr	r3, [sp, #8]
 800bd54:	07d9      	lsls	r1, r3, #31
 800bd56:	d40f      	bmi.n	800bd78 <_dtoa_r+0x6f8>
 800bd58:	4620      	mov	r0, r4
 800bd5a:	4659      	mov	r1, fp
 800bd5c:	f001 f868 	bl	800ce30 <_Bfree>
 800bd60:	2300      	movs	r3, #0
 800bd62:	702b      	strb	r3, [r5, #0]
 800bd64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd66:	f10a 0001 	add.w	r0, sl, #1
 800bd6a:	6018      	str	r0, [r3, #0]
 800bd6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f43f acd8 	beq.w	800b724 <_dtoa_r+0xa4>
 800bd74:	601d      	str	r5, [r3, #0]
 800bd76:	e4d5      	b.n	800b724 <_dtoa_r+0xa4>
 800bd78:	f8cd a01c 	str.w	sl, [sp, #28]
 800bd7c:	462b      	mov	r3, r5
 800bd7e:	461d      	mov	r5, r3
 800bd80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd84:	2a39      	cmp	r2, #57	; 0x39
 800bd86:	d108      	bne.n	800bd9a <_dtoa_r+0x71a>
 800bd88:	9a00      	ldr	r2, [sp, #0]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d1f7      	bne.n	800bd7e <_dtoa_r+0x6fe>
 800bd8e:	9a07      	ldr	r2, [sp, #28]
 800bd90:	9900      	ldr	r1, [sp, #0]
 800bd92:	3201      	adds	r2, #1
 800bd94:	9207      	str	r2, [sp, #28]
 800bd96:	2230      	movs	r2, #48	; 0x30
 800bd98:	700a      	strb	r2, [r1, #0]
 800bd9a:	781a      	ldrb	r2, [r3, #0]
 800bd9c:	3201      	adds	r2, #1
 800bd9e:	701a      	strb	r2, [r3, #0]
 800bda0:	e78c      	b.n	800bcbc <_dtoa_r+0x63c>
 800bda2:	4b7f      	ldr	r3, [pc, #508]	; (800bfa0 <_dtoa_r+0x920>)
 800bda4:	2200      	movs	r2, #0
 800bda6:	f7f4 fc27 	bl	80005f8 <__aeabi_dmul>
 800bdaa:	2200      	movs	r2, #0
 800bdac:	2300      	movs	r3, #0
 800bdae:	4606      	mov	r6, r0
 800bdb0:	460f      	mov	r7, r1
 800bdb2:	f7f4 fe89 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d09b      	beq.n	800bcf2 <_dtoa_r+0x672>
 800bdba:	e7cd      	b.n	800bd58 <_dtoa_r+0x6d8>
 800bdbc:	9a08      	ldr	r2, [sp, #32]
 800bdbe:	2a00      	cmp	r2, #0
 800bdc0:	f000 80c4 	beq.w	800bf4c <_dtoa_r+0x8cc>
 800bdc4:	9a05      	ldr	r2, [sp, #20]
 800bdc6:	2a01      	cmp	r2, #1
 800bdc8:	f300 80a8 	bgt.w	800bf1c <_dtoa_r+0x89c>
 800bdcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bdce:	2a00      	cmp	r2, #0
 800bdd0:	f000 80a0 	beq.w	800bf14 <_dtoa_r+0x894>
 800bdd4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bdd8:	9e06      	ldr	r6, [sp, #24]
 800bdda:	4645      	mov	r5, r8
 800bddc:	9a04      	ldr	r2, [sp, #16]
 800bdde:	2101      	movs	r1, #1
 800bde0:	441a      	add	r2, r3
 800bde2:	4620      	mov	r0, r4
 800bde4:	4498      	add	r8, r3
 800bde6:	9204      	str	r2, [sp, #16]
 800bde8:	f001 f928 	bl	800d03c <__i2b>
 800bdec:	4607      	mov	r7, r0
 800bdee:	2d00      	cmp	r5, #0
 800bdf0:	dd0b      	ble.n	800be0a <_dtoa_r+0x78a>
 800bdf2:	9b04      	ldr	r3, [sp, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	dd08      	ble.n	800be0a <_dtoa_r+0x78a>
 800bdf8:	42ab      	cmp	r3, r5
 800bdfa:	9a04      	ldr	r2, [sp, #16]
 800bdfc:	bfa8      	it	ge
 800bdfe:	462b      	movge	r3, r5
 800be00:	eba8 0803 	sub.w	r8, r8, r3
 800be04:	1aed      	subs	r5, r5, r3
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	9304      	str	r3, [sp, #16]
 800be0a:	9b06      	ldr	r3, [sp, #24]
 800be0c:	b1fb      	cbz	r3, 800be4e <_dtoa_r+0x7ce>
 800be0e:	9b08      	ldr	r3, [sp, #32]
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 809f 	beq.w	800bf54 <_dtoa_r+0x8d4>
 800be16:	2e00      	cmp	r6, #0
 800be18:	dd11      	ble.n	800be3e <_dtoa_r+0x7be>
 800be1a:	4639      	mov	r1, r7
 800be1c:	4632      	mov	r2, r6
 800be1e:	4620      	mov	r0, r4
 800be20:	f001 f9c8 	bl	800d1b4 <__pow5mult>
 800be24:	465a      	mov	r2, fp
 800be26:	4601      	mov	r1, r0
 800be28:	4607      	mov	r7, r0
 800be2a:	4620      	mov	r0, r4
 800be2c:	f001 f91c 	bl	800d068 <__multiply>
 800be30:	4659      	mov	r1, fp
 800be32:	9007      	str	r0, [sp, #28]
 800be34:	4620      	mov	r0, r4
 800be36:	f000 fffb 	bl	800ce30 <_Bfree>
 800be3a:	9b07      	ldr	r3, [sp, #28]
 800be3c:	469b      	mov	fp, r3
 800be3e:	9b06      	ldr	r3, [sp, #24]
 800be40:	1b9a      	subs	r2, r3, r6
 800be42:	d004      	beq.n	800be4e <_dtoa_r+0x7ce>
 800be44:	4659      	mov	r1, fp
 800be46:	4620      	mov	r0, r4
 800be48:	f001 f9b4 	bl	800d1b4 <__pow5mult>
 800be4c:	4683      	mov	fp, r0
 800be4e:	2101      	movs	r1, #1
 800be50:	4620      	mov	r0, r4
 800be52:	f001 f8f3 	bl	800d03c <__i2b>
 800be56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be58:	2b00      	cmp	r3, #0
 800be5a:	4606      	mov	r6, r0
 800be5c:	dd7c      	ble.n	800bf58 <_dtoa_r+0x8d8>
 800be5e:	461a      	mov	r2, r3
 800be60:	4601      	mov	r1, r0
 800be62:	4620      	mov	r0, r4
 800be64:	f001 f9a6 	bl	800d1b4 <__pow5mult>
 800be68:	9b05      	ldr	r3, [sp, #20]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	4606      	mov	r6, r0
 800be6e:	dd76      	ble.n	800bf5e <_dtoa_r+0x8de>
 800be70:	2300      	movs	r3, #0
 800be72:	9306      	str	r3, [sp, #24]
 800be74:	6933      	ldr	r3, [r6, #16]
 800be76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800be7a:	6918      	ldr	r0, [r3, #16]
 800be7c:	f001 f88e 	bl	800cf9c <__hi0bits>
 800be80:	f1c0 0020 	rsb	r0, r0, #32
 800be84:	9b04      	ldr	r3, [sp, #16]
 800be86:	4418      	add	r0, r3
 800be88:	f010 001f 	ands.w	r0, r0, #31
 800be8c:	f000 8086 	beq.w	800bf9c <_dtoa_r+0x91c>
 800be90:	f1c0 0320 	rsb	r3, r0, #32
 800be94:	2b04      	cmp	r3, #4
 800be96:	dd7f      	ble.n	800bf98 <_dtoa_r+0x918>
 800be98:	f1c0 001c 	rsb	r0, r0, #28
 800be9c:	9b04      	ldr	r3, [sp, #16]
 800be9e:	4403      	add	r3, r0
 800bea0:	4480      	add	r8, r0
 800bea2:	4405      	add	r5, r0
 800bea4:	9304      	str	r3, [sp, #16]
 800bea6:	f1b8 0f00 	cmp.w	r8, #0
 800beaa:	dd05      	ble.n	800beb8 <_dtoa_r+0x838>
 800beac:	4659      	mov	r1, fp
 800beae:	4642      	mov	r2, r8
 800beb0:	4620      	mov	r0, r4
 800beb2:	f001 f9d9 	bl	800d268 <__lshift>
 800beb6:	4683      	mov	fp, r0
 800beb8:	9b04      	ldr	r3, [sp, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	dd05      	ble.n	800beca <_dtoa_r+0x84a>
 800bebe:	4631      	mov	r1, r6
 800bec0:	461a      	mov	r2, r3
 800bec2:	4620      	mov	r0, r4
 800bec4:	f001 f9d0 	bl	800d268 <__lshift>
 800bec8:	4606      	mov	r6, r0
 800beca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800becc:	2b00      	cmp	r3, #0
 800bece:	d069      	beq.n	800bfa4 <_dtoa_r+0x924>
 800bed0:	4631      	mov	r1, r6
 800bed2:	4658      	mov	r0, fp
 800bed4:	f001 fa34 	bl	800d340 <__mcmp>
 800bed8:	2800      	cmp	r0, #0
 800beda:	da63      	bge.n	800bfa4 <_dtoa_r+0x924>
 800bedc:	2300      	movs	r3, #0
 800bede:	4659      	mov	r1, fp
 800bee0:	220a      	movs	r2, #10
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 ffc6 	bl	800ce74 <__multadd>
 800bee8:	9b08      	ldr	r3, [sp, #32]
 800beea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800beee:	4683      	mov	fp, r0
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f000 818f 	beq.w	800c214 <_dtoa_r+0xb94>
 800bef6:	4639      	mov	r1, r7
 800bef8:	2300      	movs	r3, #0
 800befa:	220a      	movs	r2, #10
 800befc:	4620      	mov	r0, r4
 800befe:	f000 ffb9 	bl	800ce74 <__multadd>
 800bf02:	f1b9 0f00 	cmp.w	r9, #0
 800bf06:	4607      	mov	r7, r0
 800bf08:	f300 808e 	bgt.w	800c028 <_dtoa_r+0x9a8>
 800bf0c:	9b05      	ldr	r3, [sp, #20]
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	dc50      	bgt.n	800bfb4 <_dtoa_r+0x934>
 800bf12:	e089      	b.n	800c028 <_dtoa_r+0x9a8>
 800bf14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf1a:	e75d      	b.n	800bdd8 <_dtoa_r+0x758>
 800bf1c:	9b01      	ldr	r3, [sp, #4]
 800bf1e:	1e5e      	subs	r6, r3, #1
 800bf20:	9b06      	ldr	r3, [sp, #24]
 800bf22:	42b3      	cmp	r3, r6
 800bf24:	bfbf      	itttt	lt
 800bf26:	9b06      	ldrlt	r3, [sp, #24]
 800bf28:	9606      	strlt	r6, [sp, #24]
 800bf2a:	1af2      	sublt	r2, r6, r3
 800bf2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bf2e:	bfb6      	itet	lt
 800bf30:	189b      	addlt	r3, r3, r2
 800bf32:	1b9e      	subge	r6, r3, r6
 800bf34:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bf36:	9b01      	ldr	r3, [sp, #4]
 800bf38:	bfb8      	it	lt
 800bf3a:	2600      	movlt	r6, #0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	bfb5      	itete	lt
 800bf40:	eba8 0503 	sublt.w	r5, r8, r3
 800bf44:	9b01      	ldrge	r3, [sp, #4]
 800bf46:	2300      	movlt	r3, #0
 800bf48:	4645      	movge	r5, r8
 800bf4a:	e747      	b.n	800bddc <_dtoa_r+0x75c>
 800bf4c:	9e06      	ldr	r6, [sp, #24]
 800bf4e:	9f08      	ldr	r7, [sp, #32]
 800bf50:	4645      	mov	r5, r8
 800bf52:	e74c      	b.n	800bdee <_dtoa_r+0x76e>
 800bf54:	9a06      	ldr	r2, [sp, #24]
 800bf56:	e775      	b.n	800be44 <_dtoa_r+0x7c4>
 800bf58:	9b05      	ldr	r3, [sp, #20]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	dc18      	bgt.n	800bf90 <_dtoa_r+0x910>
 800bf5e:	9b02      	ldr	r3, [sp, #8]
 800bf60:	b9b3      	cbnz	r3, 800bf90 <_dtoa_r+0x910>
 800bf62:	9b03      	ldr	r3, [sp, #12]
 800bf64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf68:	b9a3      	cbnz	r3, 800bf94 <_dtoa_r+0x914>
 800bf6a:	9b03      	ldr	r3, [sp, #12]
 800bf6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf70:	0d1b      	lsrs	r3, r3, #20
 800bf72:	051b      	lsls	r3, r3, #20
 800bf74:	b12b      	cbz	r3, 800bf82 <_dtoa_r+0x902>
 800bf76:	9b04      	ldr	r3, [sp, #16]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	f108 0801 	add.w	r8, r8, #1
 800bf80:	2301      	movs	r3, #1
 800bf82:	9306      	str	r3, [sp, #24]
 800bf84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f47f af74 	bne.w	800be74 <_dtoa_r+0x7f4>
 800bf8c:	2001      	movs	r0, #1
 800bf8e:	e779      	b.n	800be84 <_dtoa_r+0x804>
 800bf90:	2300      	movs	r3, #0
 800bf92:	e7f6      	b.n	800bf82 <_dtoa_r+0x902>
 800bf94:	9b02      	ldr	r3, [sp, #8]
 800bf96:	e7f4      	b.n	800bf82 <_dtoa_r+0x902>
 800bf98:	d085      	beq.n	800bea6 <_dtoa_r+0x826>
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	301c      	adds	r0, #28
 800bf9e:	e77d      	b.n	800be9c <_dtoa_r+0x81c>
 800bfa0:	40240000 	.word	0x40240000
 800bfa4:	9b01      	ldr	r3, [sp, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	dc38      	bgt.n	800c01c <_dtoa_r+0x99c>
 800bfaa:	9b05      	ldr	r3, [sp, #20]
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	dd35      	ble.n	800c01c <_dtoa_r+0x99c>
 800bfb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bfb4:	f1b9 0f00 	cmp.w	r9, #0
 800bfb8:	d10d      	bne.n	800bfd6 <_dtoa_r+0x956>
 800bfba:	4631      	mov	r1, r6
 800bfbc:	464b      	mov	r3, r9
 800bfbe:	2205      	movs	r2, #5
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 ff57 	bl	800ce74 <__multadd>
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	4606      	mov	r6, r0
 800bfca:	4658      	mov	r0, fp
 800bfcc:	f001 f9b8 	bl	800d340 <__mcmp>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	f73f adbd 	bgt.w	800bb50 <_dtoa_r+0x4d0>
 800bfd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfd8:	9d00      	ldr	r5, [sp, #0]
 800bfda:	ea6f 0a03 	mvn.w	sl, r3
 800bfde:	f04f 0800 	mov.w	r8, #0
 800bfe2:	4631      	mov	r1, r6
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f000 ff23 	bl	800ce30 <_Bfree>
 800bfea:	2f00      	cmp	r7, #0
 800bfec:	f43f aeb4 	beq.w	800bd58 <_dtoa_r+0x6d8>
 800bff0:	f1b8 0f00 	cmp.w	r8, #0
 800bff4:	d005      	beq.n	800c002 <_dtoa_r+0x982>
 800bff6:	45b8      	cmp	r8, r7
 800bff8:	d003      	beq.n	800c002 <_dtoa_r+0x982>
 800bffa:	4641      	mov	r1, r8
 800bffc:	4620      	mov	r0, r4
 800bffe:	f000 ff17 	bl	800ce30 <_Bfree>
 800c002:	4639      	mov	r1, r7
 800c004:	4620      	mov	r0, r4
 800c006:	f000 ff13 	bl	800ce30 <_Bfree>
 800c00a:	e6a5      	b.n	800bd58 <_dtoa_r+0x6d8>
 800c00c:	2600      	movs	r6, #0
 800c00e:	4637      	mov	r7, r6
 800c010:	e7e1      	b.n	800bfd6 <_dtoa_r+0x956>
 800c012:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c014:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c018:	4637      	mov	r7, r6
 800c01a:	e599      	b.n	800bb50 <_dtoa_r+0x4d0>
 800c01c:	9b08      	ldr	r3, [sp, #32]
 800c01e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	f000 80fd 	beq.w	800c222 <_dtoa_r+0xba2>
 800c028:	2d00      	cmp	r5, #0
 800c02a:	dd05      	ble.n	800c038 <_dtoa_r+0x9b8>
 800c02c:	4639      	mov	r1, r7
 800c02e:	462a      	mov	r2, r5
 800c030:	4620      	mov	r0, r4
 800c032:	f001 f919 	bl	800d268 <__lshift>
 800c036:	4607      	mov	r7, r0
 800c038:	9b06      	ldr	r3, [sp, #24]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d05c      	beq.n	800c0f8 <_dtoa_r+0xa78>
 800c03e:	6879      	ldr	r1, [r7, #4]
 800c040:	4620      	mov	r0, r4
 800c042:	f000 feb5 	bl	800cdb0 <_Balloc>
 800c046:	4605      	mov	r5, r0
 800c048:	b928      	cbnz	r0, 800c056 <_dtoa_r+0x9d6>
 800c04a:	4b80      	ldr	r3, [pc, #512]	; (800c24c <_dtoa_r+0xbcc>)
 800c04c:	4602      	mov	r2, r0
 800c04e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c052:	f7ff bb2e 	b.w	800b6b2 <_dtoa_r+0x32>
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	3202      	adds	r2, #2
 800c05a:	0092      	lsls	r2, r2, #2
 800c05c:	f107 010c 	add.w	r1, r7, #12
 800c060:	300c      	adds	r0, #12
 800c062:	f7fd fbc9 	bl	80097f8 <memcpy>
 800c066:	2201      	movs	r2, #1
 800c068:	4629      	mov	r1, r5
 800c06a:	4620      	mov	r0, r4
 800c06c:	f001 f8fc 	bl	800d268 <__lshift>
 800c070:	9b00      	ldr	r3, [sp, #0]
 800c072:	3301      	adds	r3, #1
 800c074:	9301      	str	r3, [sp, #4]
 800c076:	9b00      	ldr	r3, [sp, #0]
 800c078:	444b      	add	r3, r9
 800c07a:	9307      	str	r3, [sp, #28]
 800c07c:	9b02      	ldr	r3, [sp, #8]
 800c07e:	f003 0301 	and.w	r3, r3, #1
 800c082:	46b8      	mov	r8, r7
 800c084:	9306      	str	r3, [sp, #24]
 800c086:	4607      	mov	r7, r0
 800c088:	9b01      	ldr	r3, [sp, #4]
 800c08a:	4631      	mov	r1, r6
 800c08c:	3b01      	subs	r3, #1
 800c08e:	4658      	mov	r0, fp
 800c090:	9302      	str	r3, [sp, #8]
 800c092:	f7ff fa67 	bl	800b564 <quorem>
 800c096:	4603      	mov	r3, r0
 800c098:	3330      	adds	r3, #48	; 0x30
 800c09a:	9004      	str	r0, [sp, #16]
 800c09c:	4641      	mov	r1, r8
 800c09e:	4658      	mov	r0, fp
 800c0a0:	9308      	str	r3, [sp, #32]
 800c0a2:	f001 f94d 	bl	800d340 <__mcmp>
 800c0a6:	463a      	mov	r2, r7
 800c0a8:	4681      	mov	r9, r0
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	f001 f963 	bl	800d378 <__mdiff>
 800c0b2:	68c2      	ldr	r2, [r0, #12]
 800c0b4:	9b08      	ldr	r3, [sp, #32]
 800c0b6:	4605      	mov	r5, r0
 800c0b8:	bb02      	cbnz	r2, 800c0fc <_dtoa_r+0xa7c>
 800c0ba:	4601      	mov	r1, r0
 800c0bc:	4658      	mov	r0, fp
 800c0be:	f001 f93f 	bl	800d340 <__mcmp>
 800c0c2:	9b08      	ldr	r3, [sp, #32]
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c0ce:	f000 feaf 	bl	800ce30 <_Bfree>
 800c0d2:	9b05      	ldr	r3, [sp, #20]
 800c0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0d6:	9d01      	ldr	r5, [sp, #4]
 800c0d8:	ea43 0102 	orr.w	r1, r3, r2
 800c0dc:	9b06      	ldr	r3, [sp, #24]
 800c0de:	430b      	orrs	r3, r1
 800c0e0:	9b08      	ldr	r3, [sp, #32]
 800c0e2:	d10d      	bne.n	800c100 <_dtoa_r+0xa80>
 800c0e4:	2b39      	cmp	r3, #57	; 0x39
 800c0e6:	d029      	beq.n	800c13c <_dtoa_r+0xabc>
 800c0e8:	f1b9 0f00 	cmp.w	r9, #0
 800c0ec:	dd01      	ble.n	800c0f2 <_dtoa_r+0xa72>
 800c0ee:	9b04      	ldr	r3, [sp, #16]
 800c0f0:	3331      	adds	r3, #49	; 0x31
 800c0f2:	9a02      	ldr	r2, [sp, #8]
 800c0f4:	7013      	strb	r3, [r2, #0]
 800c0f6:	e774      	b.n	800bfe2 <_dtoa_r+0x962>
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	e7b9      	b.n	800c070 <_dtoa_r+0x9f0>
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	e7e2      	b.n	800c0c6 <_dtoa_r+0xa46>
 800c100:	f1b9 0f00 	cmp.w	r9, #0
 800c104:	db06      	blt.n	800c114 <_dtoa_r+0xa94>
 800c106:	9905      	ldr	r1, [sp, #20]
 800c108:	ea41 0909 	orr.w	r9, r1, r9
 800c10c:	9906      	ldr	r1, [sp, #24]
 800c10e:	ea59 0101 	orrs.w	r1, r9, r1
 800c112:	d120      	bne.n	800c156 <_dtoa_r+0xad6>
 800c114:	2a00      	cmp	r2, #0
 800c116:	ddec      	ble.n	800c0f2 <_dtoa_r+0xa72>
 800c118:	4659      	mov	r1, fp
 800c11a:	2201      	movs	r2, #1
 800c11c:	4620      	mov	r0, r4
 800c11e:	9301      	str	r3, [sp, #4]
 800c120:	f001 f8a2 	bl	800d268 <__lshift>
 800c124:	4631      	mov	r1, r6
 800c126:	4683      	mov	fp, r0
 800c128:	f001 f90a 	bl	800d340 <__mcmp>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	9b01      	ldr	r3, [sp, #4]
 800c130:	dc02      	bgt.n	800c138 <_dtoa_r+0xab8>
 800c132:	d1de      	bne.n	800c0f2 <_dtoa_r+0xa72>
 800c134:	07da      	lsls	r2, r3, #31
 800c136:	d5dc      	bpl.n	800c0f2 <_dtoa_r+0xa72>
 800c138:	2b39      	cmp	r3, #57	; 0x39
 800c13a:	d1d8      	bne.n	800c0ee <_dtoa_r+0xa6e>
 800c13c:	9a02      	ldr	r2, [sp, #8]
 800c13e:	2339      	movs	r3, #57	; 0x39
 800c140:	7013      	strb	r3, [r2, #0]
 800c142:	462b      	mov	r3, r5
 800c144:	461d      	mov	r5, r3
 800c146:	3b01      	subs	r3, #1
 800c148:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c14c:	2a39      	cmp	r2, #57	; 0x39
 800c14e:	d050      	beq.n	800c1f2 <_dtoa_r+0xb72>
 800c150:	3201      	adds	r2, #1
 800c152:	701a      	strb	r2, [r3, #0]
 800c154:	e745      	b.n	800bfe2 <_dtoa_r+0x962>
 800c156:	2a00      	cmp	r2, #0
 800c158:	dd03      	ble.n	800c162 <_dtoa_r+0xae2>
 800c15a:	2b39      	cmp	r3, #57	; 0x39
 800c15c:	d0ee      	beq.n	800c13c <_dtoa_r+0xabc>
 800c15e:	3301      	adds	r3, #1
 800c160:	e7c7      	b.n	800c0f2 <_dtoa_r+0xa72>
 800c162:	9a01      	ldr	r2, [sp, #4]
 800c164:	9907      	ldr	r1, [sp, #28]
 800c166:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c16a:	428a      	cmp	r2, r1
 800c16c:	d02a      	beq.n	800c1c4 <_dtoa_r+0xb44>
 800c16e:	4659      	mov	r1, fp
 800c170:	2300      	movs	r3, #0
 800c172:	220a      	movs	r2, #10
 800c174:	4620      	mov	r0, r4
 800c176:	f000 fe7d 	bl	800ce74 <__multadd>
 800c17a:	45b8      	cmp	r8, r7
 800c17c:	4683      	mov	fp, r0
 800c17e:	f04f 0300 	mov.w	r3, #0
 800c182:	f04f 020a 	mov.w	r2, #10
 800c186:	4641      	mov	r1, r8
 800c188:	4620      	mov	r0, r4
 800c18a:	d107      	bne.n	800c19c <_dtoa_r+0xb1c>
 800c18c:	f000 fe72 	bl	800ce74 <__multadd>
 800c190:	4680      	mov	r8, r0
 800c192:	4607      	mov	r7, r0
 800c194:	9b01      	ldr	r3, [sp, #4]
 800c196:	3301      	adds	r3, #1
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	e775      	b.n	800c088 <_dtoa_r+0xa08>
 800c19c:	f000 fe6a 	bl	800ce74 <__multadd>
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	4680      	mov	r8, r0
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	220a      	movs	r2, #10
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f000 fe63 	bl	800ce74 <__multadd>
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	e7f0      	b.n	800c194 <_dtoa_r+0xb14>
 800c1b2:	f1b9 0f00 	cmp.w	r9, #0
 800c1b6:	9a00      	ldr	r2, [sp, #0]
 800c1b8:	bfcc      	ite	gt
 800c1ba:	464d      	movgt	r5, r9
 800c1bc:	2501      	movle	r5, #1
 800c1be:	4415      	add	r5, r2
 800c1c0:	f04f 0800 	mov.w	r8, #0
 800c1c4:	4659      	mov	r1, fp
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	9301      	str	r3, [sp, #4]
 800c1cc:	f001 f84c 	bl	800d268 <__lshift>
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4683      	mov	fp, r0
 800c1d4:	f001 f8b4 	bl	800d340 <__mcmp>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	dcb2      	bgt.n	800c142 <_dtoa_r+0xac2>
 800c1dc:	d102      	bne.n	800c1e4 <_dtoa_r+0xb64>
 800c1de:	9b01      	ldr	r3, [sp, #4]
 800c1e0:	07db      	lsls	r3, r3, #31
 800c1e2:	d4ae      	bmi.n	800c142 <_dtoa_r+0xac2>
 800c1e4:	462b      	mov	r3, r5
 800c1e6:	461d      	mov	r5, r3
 800c1e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1ec:	2a30      	cmp	r2, #48	; 0x30
 800c1ee:	d0fa      	beq.n	800c1e6 <_dtoa_r+0xb66>
 800c1f0:	e6f7      	b.n	800bfe2 <_dtoa_r+0x962>
 800c1f2:	9a00      	ldr	r2, [sp, #0]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d1a5      	bne.n	800c144 <_dtoa_r+0xac4>
 800c1f8:	f10a 0a01 	add.w	sl, sl, #1
 800c1fc:	2331      	movs	r3, #49	; 0x31
 800c1fe:	e779      	b.n	800c0f4 <_dtoa_r+0xa74>
 800c200:	4b13      	ldr	r3, [pc, #76]	; (800c250 <_dtoa_r+0xbd0>)
 800c202:	f7ff baaf 	b.w	800b764 <_dtoa_r+0xe4>
 800c206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f47f aa86 	bne.w	800b71a <_dtoa_r+0x9a>
 800c20e:	4b11      	ldr	r3, [pc, #68]	; (800c254 <_dtoa_r+0xbd4>)
 800c210:	f7ff baa8 	b.w	800b764 <_dtoa_r+0xe4>
 800c214:	f1b9 0f00 	cmp.w	r9, #0
 800c218:	dc03      	bgt.n	800c222 <_dtoa_r+0xba2>
 800c21a:	9b05      	ldr	r3, [sp, #20]
 800c21c:	2b02      	cmp	r3, #2
 800c21e:	f73f aec9 	bgt.w	800bfb4 <_dtoa_r+0x934>
 800c222:	9d00      	ldr	r5, [sp, #0]
 800c224:	4631      	mov	r1, r6
 800c226:	4658      	mov	r0, fp
 800c228:	f7ff f99c 	bl	800b564 <quorem>
 800c22c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c230:	f805 3b01 	strb.w	r3, [r5], #1
 800c234:	9a00      	ldr	r2, [sp, #0]
 800c236:	1aaa      	subs	r2, r5, r2
 800c238:	4591      	cmp	r9, r2
 800c23a:	ddba      	ble.n	800c1b2 <_dtoa_r+0xb32>
 800c23c:	4659      	mov	r1, fp
 800c23e:	2300      	movs	r3, #0
 800c240:	220a      	movs	r2, #10
 800c242:	4620      	mov	r0, r4
 800c244:	f000 fe16 	bl	800ce74 <__multadd>
 800c248:	4683      	mov	fp, r0
 800c24a:	e7eb      	b.n	800c224 <_dtoa_r+0xba4>
 800c24c:	0800ea0c 	.word	0x0800ea0c
 800c250:	0800e808 	.word	0x0800e808
 800c254:	0800e989 	.word	0x0800e989

0800c258 <__sflush_r>:
 800c258:	898a      	ldrh	r2, [r1, #12]
 800c25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c25e:	4605      	mov	r5, r0
 800c260:	0710      	lsls	r0, r2, #28
 800c262:	460c      	mov	r4, r1
 800c264:	d458      	bmi.n	800c318 <__sflush_r+0xc0>
 800c266:	684b      	ldr	r3, [r1, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	dc05      	bgt.n	800c278 <__sflush_r+0x20>
 800c26c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c26e:	2b00      	cmp	r3, #0
 800c270:	dc02      	bgt.n	800c278 <__sflush_r+0x20>
 800c272:	2000      	movs	r0, #0
 800c274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c27a:	2e00      	cmp	r6, #0
 800c27c:	d0f9      	beq.n	800c272 <__sflush_r+0x1a>
 800c27e:	2300      	movs	r3, #0
 800c280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c284:	682f      	ldr	r7, [r5, #0]
 800c286:	602b      	str	r3, [r5, #0]
 800c288:	d032      	beq.n	800c2f0 <__sflush_r+0x98>
 800c28a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c28c:	89a3      	ldrh	r3, [r4, #12]
 800c28e:	075a      	lsls	r2, r3, #29
 800c290:	d505      	bpl.n	800c29e <__sflush_r+0x46>
 800c292:	6863      	ldr	r3, [r4, #4]
 800c294:	1ac0      	subs	r0, r0, r3
 800c296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c298:	b10b      	cbz	r3, 800c29e <__sflush_r+0x46>
 800c29a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c29c:	1ac0      	subs	r0, r0, r3
 800c29e:	2300      	movs	r3, #0
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2a4:	6a21      	ldr	r1, [r4, #32]
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	47b0      	blx	r6
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	89a3      	ldrh	r3, [r4, #12]
 800c2ae:	d106      	bne.n	800c2be <__sflush_r+0x66>
 800c2b0:	6829      	ldr	r1, [r5, #0]
 800c2b2:	291d      	cmp	r1, #29
 800c2b4:	d82c      	bhi.n	800c310 <__sflush_r+0xb8>
 800c2b6:	4a2a      	ldr	r2, [pc, #168]	; (800c360 <__sflush_r+0x108>)
 800c2b8:	40ca      	lsrs	r2, r1
 800c2ba:	07d6      	lsls	r6, r2, #31
 800c2bc:	d528      	bpl.n	800c310 <__sflush_r+0xb8>
 800c2be:	2200      	movs	r2, #0
 800c2c0:	6062      	str	r2, [r4, #4]
 800c2c2:	04d9      	lsls	r1, r3, #19
 800c2c4:	6922      	ldr	r2, [r4, #16]
 800c2c6:	6022      	str	r2, [r4, #0]
 800c2c8:	d504      	bpl.n	800c2d4 <__sflush_r+0x7c>
 800c2ca:	1c42      	adds	r2, r0, #1
 800c2cc:	d101      	bne.n	800c2d2 <__sflush_r+0x7a>
 800c2ce:	682b      	ldr	r3, [r5, #0]
 800c2d0:	b903      	cbnz	r3, 800c2d4 <__sflush_r+0x7c>
 800c2d2:	6560      	str	r0, [r4, #84]	; 0x54
 800c2d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2d6:	602f      	str	r7, [r5, #0]
 800c2d8:	2900      	cmp	r1, #0
 800c2da:	d0ca      	beq.n	800c272 <__sflush_r+0x1a>
 800c2dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2e0:	4299      	cmp	r1, r3
 800c2e2:	d002      	beq.n	800c2ea <__sflush_r+0x92>
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	f001 fa2d 	bl	800d744 <_free_r>
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	6360      	str	r0, [r4, #52]	; 0x34
 800c2ee:	e7c1      	b.n	800c274 <__sflush_r+0x1c>
 800c2f0:	6a21      	ldr	r1, [r4, #32]
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	47b0      	blx	r6
 800c2f8:	1c41      	adds	r1, r0, #1
 800c2fa:	d1c7      	bne.n	800c28c <__sflush_r+0x34>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d0c4      	beq.n	800c28c <__sflush_r+0x34>
 800c302:	2b1d      	cmp	r3, #29
 800c304:	d001      	beq.n	800c30a <__sflush_r+0xb2>
 800c306:	2b16      	cmp	r3, #22
 800c308:	d101      	bne.n	800c30e <__sflush_r+0xb6>
 800c30a:	602f      	str	r7, [r5, #0]
 800c30c:	e7b1      	b.n	800c272 <__sflush_r+0x1a>
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c314:	81a3      	strh	r3, [r4, #12]
 800c316:	e7ad      	b.n	800c274 <__sflush_r+0x1c>
 800c318:	690f      	ldr	r7, [r1, #16]
 800c31a:	2f00      	cmp	r7, #0
 800c31c:	d0a9      	beq.n	800c272 <__sflush_r+0x1a>
 800c31e:	0793      	lsls	r3, r2, #30
 800c320:	680e      	ldr	r6, [r1, #0]
 800c322:	bf08      	it	eq
 800c324:	694b      	ldreq	r3, [r1, #20]
 800c326:	600f      	str	r7, [r1, #0]
 800c328:	bf18      	it	ne
 800c32a:	2300      	movne	r3, #0
 800c32c:	eba6 0807 	sub.w	r8, r6, r7
 800c330:	608b      	str	r3, [r1, #8]
 800c332:	f1b8 0f00 	cmp.w	r8, #0
 800c336:	dd9c      	ble.n	800c272 <__sflush_r+0x1a>
 800c338:	6a21      	ldr	r1, [r4, #32]
 800c33a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c33c:	4643      	mov	r3, r8
 800c33e:	463a      	mov	r2, r7
 800c340:	4628      	mov	r0, r5
 800c342:	47b0      	blx	r6
 800c344:	2800      	cmp	r0, #0
 800c346:	dc06      	bgt.n	800c356 <__sflush_r+0xfe>
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c34e:	81a3      	strh	r3, [r4, #12]
 800c350:	f04f 30ff 	mov.w	r0, #4294967295
 800c354:	e78e      	b.n	800c274 <__sflush_r+0x1c>
 800c356:	4407      	add	r7, r0
 800c358:	eba8 0800 	sub.w	r8, r8, r0
 800c35c:	e7e9      	b.n	800c332 <__sflush_r+0xda>
 800c35e:	bf00      	nop
 800c360:	20400001 	.word	0x20400001

0800c364 <_fflush_r>:
 800c364:	b538      	push	{r3, r4, r5, lr}
 800c366:	690b      	ldr	r3, [r1, #16]
 800c368:	4605      	mov	r5, r0
 800c36a:	460c      	mov	r4, r1
 800c36c:	b913      	cbnz	r3, 800c374 <_fflush_r+0x10>
 800c36e:	2500      	movs	r5, #0
 800c370:	4628      	mov	r0, r5
 800c372:	bd38      	pop	{r3, r4, r5, pc}
 800c374:	b118      	cbz	r0, 800c37e <_fflush_r+0x1a>
 800c376:	6983      	ldr	r3, [r0, #24]
 800c378:	b90b      	cbnz	r3, 800c37e <_fflush_r+0x1a>
 800c37a:	f000 f887 	bl	800c48c <__sinit>
 800c37e:	4b14      	ldr	r3, [pc, #80]	; (800c3d0 <_fflush_r+0x6c>)
 800c380:	429c      	cmp	r4, r3
 800c382:	d11b      	bne.n	800c3bc <_fflush_r+0x58>
 800c384:	686c      	ldr	r4, [r5, #4]
 800c386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d0ef      	beq.n	800c36e <_fflush_r+0xa>
 800c38e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c390:	07d0      	lsls	r0, r2, #31
 800c392:	d404      	bmi.n	800c39e <_fflush_r+0x3a>
 800c394:	0599      	lsls	r1, r3, #22
 800c396:	d402      	bmi.n	800c39e <_fflush_r+0x3a>
 800c398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c39a:	f000 fc88 	bl	800ccae <__retarget_lock_acquire_recursive>
 800c39e:	4628      	mov	r0, r5
 800c3a0:	4621      	mov	r1, r4
 800c3a2:	f7ff ff59 	bl	800c258 <__sflush_r>
 800c3a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3a8:	07da      	lsls	r2, r3, #31
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	d4e0      	bmi.n	800c370 <_fflush_r+0xc>
 800c3ae:	89a3      	ldrh	r3, [r4, #12]
 800c3b0:	059b      	lsls	r3, r3, #22
 800c3b2:	d4dd      	bmi.n	800c370 <_fflush_r+0xc>
 800c3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3b6:	f000 fc7b 	bl	800ccb0 <__retarget_lock_release_recursive>
 800c3ba:	e7d9      	b.n	800c370 <_fflush_r+0xc>
 800c3bc:	4b05      	ldr	r3, [pc, #20]	; (800c3d4 <_fflush_r+0x70>)
 800c3be:	429c      	cmp	r4, r3
 800c3c0:	d101      	bne.n	800c3c6 <_fflush_r+0x62>
 800c3c2:	68ac      	ldr	r4, [r5, #8]
 800c3c4:	e7df      	b.n	800c386 <_fflush_r+0x22>
 800c3c6:	4b04      	ldr	r3, [pc, #16]	; (800c3d8 <_fflush_r+0x74>)
 800c3c8:	429c      	cmp	r4, r3
 800c3ca:	bf08      	it	eq
 800c3cc:	68ec      	ldreq	r4, [r5, #12]
 800c3ce:	e7da      	b.n	800c386 <_fflush_r+0x22>
 800c3d0:	0800ea40 	.word	0x0800ea40
 800c3d4:	0800ea60 	.word	0x0800ea60
 800c3d8:	0800ea20 	.word	0x0800ea20

0800c3dc <std>:
 800c3dc:	2300      	movs	r3, #0
 800c3de:	b510      	push	{r4, lr}
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	e9c0 3300 	strd	r3, r3, [r0]
 800c3e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3ea:	6083      	str	r3, [r0, #8]
 800c3ec:	8181      	strh	r1, [r0, #12]
 800c3ee:	6643      	str	r3, [r0, #100]	; 0x64
 800c3f0:	81c2      	strh	r2, [r0, #14]
 800c3f2:	6183      	str	r3, [r0, #24]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	2208      	movs	r2, #8
 800c3f8:	305c      	adds	r0, #92	; 0x5c
 800c3fa:	f7fd fa0b 	bl	8009814 <memset>
 800c3fe:	4b05      	ldr	r3, [pc, #20]	; (800c414 <std+0x38>)
 800c400:	6263      	str	r3, [r4, #36]	; 0x24
 800c402:	4b05      	ldr	r3, [pc, #20]	; (800c418 <std+0x3c>)
 800c404:	62a3      	str	r3, [r4, #40]	; 0x28
 800c406:	4b05      	ldr	r3, [pc, #20]	; (800c41c <std+0x40>)
 800c408:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c40a:	4b05      	ldr	r3, [pc, #20]	; (800c420 <std+0x44>)
 800c40c:	6224      	str	r4, [r4, #32]
 800c40e:	6323      	str	r3, [r4, #48]	; 0x30
 800c410:	bd10      	pop	{r4, pc}
 800c412:	bf00      	nop
 800c414:	0800de39 	.word	0x0800de39
 800c418:	0800de5b 	.word	0x0800de5b
 800c41c:	0800de93 	.word	0x0800de93
 800c420:	0800deb7 	.word	0x0800deb7

0800c424 <_cleanup_r>:
 800c424:	4901      	ldr	r1, [pc, #4]	; (800c42c <_cleanup_r+0x8>)
 800c426:	f000 b8af 	b.w	800c588 <_fwalk_reent>
 800c42a:	bf00      	nop
 800c42c:	0800c365 	.word	0x0800c365

0800c430 <__sfmoreglue>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	1e4a      	subs	r2, r1, #1
 800c434:	2568      	movs	r5, #104	; 0x68
 800c436:	4355      	muls	r5, r2
 800c438:	460e      	mov	r6, r1
 800c43a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c43e:	f001 f9d1 	bl	800d7e4 <_malloc_r>
 800c442:	4604      	mov	r4, r0
 800c444:	b140      	cbz	r0, 800c458 <__sfmoreglue+0x28>
 800c446:	2100      	movs	r1, #0
 800c448:	e9c0 1600 	strd	r1, r6, [r0]
 800c44c:	300c      	adds	r0, #12
 800c44e:	60a0      	str	r0, [r4, #8]
 800c450:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c454:	f7fd f9de 	bl	8009814 <memset>
 800c458:	4620      	mov	r0, r4
 800c45a:	bd70      	pop	{r4, r5, r6, pc}

0800c45c <__sfp_lock_acquire>:
 800c45c:	4801      	ldr	r0, [pc, #4]	; (800c464 <__sfp_lock_acquire+0x8>)
 800c45e:	f000 bc26 	b.w	800ccae <__retarget_lock_acquire_recursive>
 800c462:	bf00      	nop
 800c464:	2000096c 	.word	0x2000096c

0800c468 <__sfp_lock_release>:
 800c468:	4801      	ldr	r0, [pc, #4]	; (800c470 <__sfp_lock_release+0x8>)
 800c46a:	f000 bc21 	b.w	800ccb0 <__retarget_lock_release_recursive>
 800c46e:	bf00      	nop
 800c470:	2000096c 	.word	0x2000096c

0800c474 <__sinit_lock_acquire>:
 800c474:	4801      	ldr	r0, [pc, #4]	; (800c47c <__sinit_lock_acquire+0x8>)
 800c476:	f000 bc1a 	b.w	800ccae <__retarget_lock_acquire_recursive>
 800c47a:	bf00      	nop
 800c47c:	20000967 	.word	0x20000967

0800c480 <__sinit_lock_release>:
 800c480:	4801      	ldr	r0, [pc, #4]	; (800c488 <__sinit_lock_release+0x8>)
 800c482:	f000 bc15 	b.w	800ccb0 <__retarget_lock_release_recursive>
 800c486:	bf00      	nop
 800c488:	20000967 	.word	0x20000967

0800c48c <__sinit>:
 800c48c:	b510      	push	{r4, lr}
 800c48e:	4604      	mov	r4, r0
 800c490:	f7ff fff0 	bl	800c474 <__sinit_lock_acquire>
 800c494:	69a3      	ldr	r3, [r4, #24]
 800c496:	b11b      	cbz	r3, 800c4a0 <__sinit+0x14>
 800c498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c49c:	f7ff bff0 	b.w	800c480 <__sinit_lock_release>
 800c4a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4a4:	6523      	str	r3, [r4, #80]	; 0x50
 800c4a6:	4b13      	ldr	r3, [pc, #76]	; (800c4f4 <__sinit+0x68>)
 800c4a8:	4a13      	ldr	r2, [pc, #76]	; (800c4f8 <__sinit+0x6c>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4ae:	42a3      	cmp	r3, r4
 800c4b0:	bf04      	itt	eq
 800c4b2:	2301      	moveq	r3, #1
 800c4b4:	61a3      	streq	r3, [r4, #24]
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f000 f820 	bl	800c4fc <__sfp>
 800c4bc:	6060      	str	r0, [r4, #4]
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f000 f81c 	bl	800c4fc <__sfp>
 800c4c4:	60a0      	str	r0, [r4, #8]
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f000 f818 	bl	800c4fc <__sfp>
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	60e0      	str	r0, [r4, #12]
 800c4d0:	2104      	movs	r1, #4
 800c4d2:	6860      	ldr	r0, [r4, #4]
 800c4d4:	f7ff ff82 	bl	800c3dc <std>
 800c4d8:	68a0      	ldr	r0, [r4, #8]
 800c4da:	2201      	movs	r2, #1
 800c4dc:	2109      	movs	r1, #9
 800c4de:	f7ff ff7d 	bl	800c3dc <std>
 800c4e2:	68e0      	ldr	r0, [r4, #12]
 800c4e4:	2202      	movs	r2, #2
 800c4e6:	2112      	movs	r1, #18
 800c4e8:	f7ff ff78 	bl	800c3dc <std>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	61a3      	str	r3, [r4, #24]
 800c4f0:	e7d2      	b.n	800c498 <__sinit+0xc>
 800c4f2:	bf00      	nop
 800c4f4:	0800e7f4 	.word	0x0800e7f4
 800c4f8:	0800c425 	.word	0x0800c425

0800c4fc <__sfp>:
 800c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fe:	4607      	mov	r7, r0
 800c500:	f7ff ffac 	bl	800c45c <__sfp_lock_acquire>
 800c504:	4b1e      	ldr	r3, [pc, #120]	; (800c580 <__sfp+0x84>)
 800c506:	681e      	ldr	r6, [r3, #0]
 800c508:	69b3      	ldr	r3, [r6, #24]
 800c50a:	b913      	cbnz	r3, 800c512 <__sfp+0x16>
 800c50c:	4630      	mov	r0, r6
 800c50e:	f7ff ffbd 	bl	800c48c <__sinit>
 800c512:	3648      	adds	r6, #72	; 0x48
 800c514:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c518:	3b01      	subs	r3, #1
 800c51a:	d503      	bpl.n	800c524 <__sfp+0x28>
 800c51c:	6833      	ldr	r3, [r6, #0]
 800c51e:	b30b      	cbz	r3, 800c564 <__sfp+0x68>
 800c520:	6836      	ldr	r6, [r6, #0]
 800c522:	e7f7      	b.n	800c514 <__sfp+0x18>
 800c524:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c528:	b9d5      	cbnz	r5, 800c560 <__sfp+0x64>
 800c52a:	4b16      	ldr	r3, [pc, #88]	; (800c584 <__sfp+0x88>)
 800c52c:	60e3      	str	r3, [r4, #12]
 800c52e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c532:	6665      	str	r5, [r4, #100]	; 0x64
 800c534:	f000 fbba 	bl	800ccac <__retarget_lock_init_recursive>
 800c538:	f7ff ff96 	bl	800c468 <__sfp_lock_release>
 800c53c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c540:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c544:	6025      	str	r5, [r4, #0]
 800c546:	61a5      	str	r5, [r4, #24]
 800c548:	2208      	movs	r2, #8
 800c54a:	4629      	mov	r1, r5
 800c54c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c550:	f7fd f960 	bl	8009814 <memset>
 800c554:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c558:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c55c:	4620      	mov	r0, r4
 800c55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c560:	3468      	adds	r4, #104	; 0x68
 800c562:	e7d9      	b.n	800c518 <__sfp+0x1c>
 800c564:	2104      	movs	r1, #4
 800c566:	4638      	mov	r0, r7
 800c568:	f7ff ff62 	bl	800c430 <__sfmoreglue>
 800c56c:	4604      	mov	r4, r0
 800c56e:	6030      	str	r0, [r6, #0]
 800c570:	2800      	cmp	r0, #0
 800c572:	d1d5      	bne.n	800c520 <__sfp+0x24>
 800c574:	f7ff ff78 	bl	800c468 <__sfp_lock_release>
 800c578:	230c      	movs	r3, #12
 800c57a:	603b      	str	r3, [r7, #0]
 800c57c:	e7ee      	b.n	800c55c <__sfp+0x60>
 800c57e:	bf00      	nop
 800c580:	0800e7f4 	.word	0x0800e7f4
 800c584:	ffff0001 	.word	0xffff0001

0800c588 <_fwalk_reent>:
 800c588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c58c:	4606      	mov	r6, r0
 800c58e:	4688      	mov	r8, r1
 800c590:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c594:	2700      	movs	r7, #0
 800c596:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c59a:	f1b9 0901 	subs.w	r9, r9, #1
 800c59e:	d505      	bpl.n	800c5ac <_fwalk_reent+0x24>
 800c5a0:	6824      	ldr	r4, [r4, #0]
 800c5a2:	2c00      	cmp	r4, #0
 800c5a4:	d1f7      	bne.n	800c596 <_fwalk_reent+0xe>
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ac:	89ab      	ldrh	r3, [r5, #12]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d907      	bls.n	800c5c2 <_fwalk_reent+0x3a>
 800c5b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	d003      	beq.n	800c5c2 <_fwalk_reent+0x3a>
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	4630      	mov	r0, r6
 800c5be:	47c0      	blx	r8
 800c5c0:	4307      	orrs	r7, r0
 800c5c2:	3568      	adds	r5, #104	; 0x68
 800c5c4:	e7e9      	b.n	800c59a <_fwalk_reent+0x12>

0800c5c6 <rshift>:
 800c5c6:	6903      	ldr	r3, [r0, #16]
 800c5c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c5cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c5d4:	f100 0414 	add.w	r4, r0, #20
 800c5d8:	dd45      	ble.n	800c666 <rshift+0xa0>
 800c5da:	f011 011f 	ands.w	r1, r1, #31
 800c5de:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c5e2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c5e6:	d10c      	bne.n	800c602 <rshift+0x3c>
 800c5e8:	f100 0710 	add.w	r7, r0, #16
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	42b1      	cmp	r1, r6
 800c5f0:	d334      	bcc.n	800c65c <rshift+0x96>
 800c5f2:	1a9b      	subs	r3, r3, r2
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	1eea      	subs	r2, r5, #3
 800c5f8:	4296      	cmp	r6, r2
 800c5fa:	bf38      	it	cc
 800c5fc:	2300      	movcc	r3, #0
 800c5fe:	4423      	add	r3, r4
 800c600:	e015      	b.n	800c62e <rshift+0x68>
 800c602:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c606:	f1c1 0820 	rsb	r8, r1, #32
 800c60a:	40cf      	lsrs	r7, r1
 800c60c:	f105 0e04 	add.w	lr, r5, #4
 800c610:	46a1      	mov	r9, r4
 800c612:	4576      	cmp	r6, lr
 800c614:	46f4      	mov	ip, lr
 800c616:	d815      	bhi.n	800c644 <rshift+0x7e>
 800c618:	1a9b      	subs	r3, r3, r2
 800c61a:	009a      	lsls	r2, r3, #2
 800c61c:	3a04      	subs	r2, #4
 800c61e:	3501      	adds	r5, #1
 800c620:	42ae      	cmp	r6, r5
 800c622:	bf38      	it	cc
 800c624:	2200      	movcc	r2, #0
 800c626:	18a3      	adds	r3, r4, r2
 800c628:	50a7      	str	r7, [r4, r2]
 800c62a:	b107      	cbz	r7, 800c62e <rshift+0x68>
 800c62c:	3304      	adds	r3, #4
 800c62e:	1b1a      	subs	r2, r3, r4
 800c630:	42a3      	cmp	r3, r4
 800c632:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c636:	bf08      	it	eq
 800c638:	2300      	moveq	r3, #0
 800c63a:	6102      	str	r2, [r0, #16]
 800c63c:	bf08      	it	eq
 800c63e:	6143      	streq	r3, [r0, #20]
 800c640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c644:	f8dc c000 	ldr.w	ip, [ip]
 800c648:	fa0c fc08 	lsl.w	ip, ip, r8
 800c64c:	ea4c 0707 	orr.w	r7, ip, r7
 800c650:	f849 7b04 	str.w	r7, [r9], #4
 800c654:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c658:	40cf      	lsrs	r7, r1
 800c65a:	e7da      	b.n	800c612 <rshift+0x4c>
 800c65c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c660:	f847 cf04 	str.w	ip, [r7, #4]!
 800c664:	e7c3      	b.n	800c5ee <rshift+0x28>
 800c666:	4623      	mov	r3, r4
 800c668:	e7e1      	b.n	800c62e <rshift+0x68>

0800c66a <__hexdig_fun>:
 800c66a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c66e:	2b09      	cmp	r3, #9
 800c670:	d802      	bhi.n	800c678 <__hexdig_fun+0xe>
 800c672:	3820      	subs	r0, #32
 800c674:	b2c0      	uxtb	r0, r0
 800c676:	4770      	bx	lr
 800c678:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c67c:	2b05      	cmp	r3, #5
 800c67e:	d801      	bhi.n	800c684 <__hexdig_fun+0x1a>
 800c680:	3847      	subs	r0, #71	; 0x47
 800c682:	e7f7      	b.n	800c674 <__hexdig_fun+0xa>
 800c684:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c688:	2b05      	cmp	r3, #5
 800c68a:	d801      	bhi.n	800c690 <__hexdig_fun+0x26>
 800c68c:	3827      	subs	r0, #39	; 0x27
 800c68e:	e7f1      	b.n	800c674 <__hexdig_fun+0xa>
 800c690:	2000      	movs	r0, #0
 800c692:	4770      	bx	lr

0800c694 <__gethex>:
 800c694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c698:	ed2d 8b02 	vpush	{d8}
 800c69c:	b089      	sub	sp, #36	; 0x24
 800c69e:	ee08 0a10 	vmov	s16, r0
 800c6a2:	9304      	str	r3, [sp, #16]
 800c6a4:	4bbc      	ldr	r3, [pc, #752]	; (800c998 <__gethex+0x304>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	9301      	str	r3, [sp, #4]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	468b      	mov	fp, r1
 800c6ae:	4690      	mov	r8, r2
 800c6b0:	f7f3 fd8e 	bl	80001d0 <strlen>
 800c6b4:	9b01      	ldr	r3, [sp, #4]
 800c6b6:	f8db 2000 	ldr.w	r2, [fp]
 800c6ba:	4403      	add	r3, r0
 800c6bc:	4682      	mov	sl, r0
 800c6be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c6c2:	9305      	str	r3, [sp, #20]
 800c6c4:	1c93      	adds	r3, r2, #2
 800c6c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c6ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c6ce:	32fe      	adds	r2, #254	; 0xfe
 800c6d0:	18d1      	adds	r1, r2, r3
 800c6d2:	461f      	mov	r7, r3
 800c6d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c6d8:	9100      	str	r1, [sp, #0]
 800c6da:	2830      	cmp	r0, #48	; 0x30
 800c6dc:	d0f8      	beq.n	800c6d0 <__gethex+0x3c>
 800c6de:	f7ff ffc4 	bl	800c66a <__hexdig_fun>
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d13a      	bne.n	800c75e <__gethex+0xca>
 800c6e8:	9901      	ldr	r1, [sp, #4]
 800c6ea:	4652      	mov	r2, sl
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	f001 fbe6 	bl	800debe <strncmp>
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d168      	bne.n	800c7ca <__gethex+0x136>
 800c6f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c6fc:	eb07 060a 	add.w	r6, r7, sl
 800c700:	f7ff ffb3 	bl	800c66a <__hexdig_fun>
 800c704:	2800      	cmp	r0, #0
 800c706:	d062      	beq.n	800c7ce <__gethex+0x13a>
 800c708:	4633      	mov	r3, r6
 800c70a:	7818      	ldrb	r0, [r3, #0]
 800c70c:	2830      	cmp	r0, #48	; 0x30
 800c70e:	461f      	mov	r7, r3
 800c710:	f103 0301 	add.w	r3, r3, #1
 800c714:	d0f9      	beq.n	800c70a <__gethex+0x76>
 800c716:	f7ff ffa8 	bl	800c66a <__hexdig_fun>
 800c71a:	2301      	movs	r3, #1
 800c71c:	fab0 f480 	clz	r4, r0
 800c720:	0964      	lsrs	r4, r4, #5
 800c722:	4635      	mov	r5, r6
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	463a      	mov	r2, r7
 800c728:	4616      	mov	r6, r2
 800c72a:	3201      	adds	r2, #1
 800c72c:	7830      	ldrb	r0, [r6, #0]
 800c72e:	f7ff ff9c 	bl	800c66a <__hexdig_fun>
 800c732:	2800      	cmp	r0, #0
 800c734:	d1f8      	bne.n	800c728 <__gethex+0x94>
 800c736:	9901      	ldr	r1, [sp, #4]
 800c738:	4652      	mov	r2, sl
 800c73a:	4630      	mov	r0, r6
 800c73c:	f001 fbbf 	bl	800debe <strncmp>
 800c740:	b980      	cbnz	r0, 800c764 <__gethex+0xd0>
 800c742:	b94d      	cbnz	r5, 800c758 <__gethex+0xc4>
 800c744:	eb06 050a 	add.w	r5, r6, sl
 800c748:	462a      	mov	r2, r5
 800c74a:	4616      	mov	r6, r2
 800c74c:	3201      	adds	r2, #1
 800c74e:	7830      	ldrb	r0, [r6, #0]
 800c750:	f7ff ff8b 	bl	800c66a <__hexdig_fun>
 800c754:	2800      	cmp	r0, #0
 800c756:	d1f8      	bne.n	800c74a <__gethex+0xb6>
 800c758:	1bad      	subs	r5, r5, r6
 800c75a:	00ad      	lsls	r5, r5, #2
 800c75c:	e004      	b.n	800c768 <__gethex+0xd4>
 800c75e:	2400      	movs	r4, #0
 800c760:	4625      	mov	r5, r4
 800c762:	e7e0      	b.n	800c726 <__gethex+0x92>
 800c764:	2d00      	cmp	r5, #0
 800c766:	d1f7      	bne.n	800c758 <__gethex+0xc4>
 800c768:	7833      	ldrb	r3, [r6, #0]
 800c76a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c76e:	2b50      	cmp	r3, #80	; 0x50
 800c770:	d13b      	bne.n	800c7ea <__gethex+0x156>
 800c772:	7873      	ldrb	r3, [r6, #1]
 800c774:	2b2b      	cmp	r3, #43	; 0x2b
 800c776:	d02c      	beq.n	800c7d2 <__gethex+0x13e>
 800c778:	2b2d      	cmp	r3, #45	; 0x2d
 800c77a:	d02e      	beq.n	800c7da <__gethex+0x146>
 800c77c:	1c71      	adds	r1, r6, #1
 800c77e:	f04f 0900 	mov.w	r9, #0
 800c782:	7808      	ldrb	r0, [r1, #0]
 800c784:	f7ff ff71 	bl	800c66a <__hexdig_fun>
 800c788:	1e43      	subs	r3, r0, #1
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	2b18      	cmp	r3, #24
 800c78e:	d82c      	bhi.n	800c7ea <__gethex+0x156>
 800c790:	f1a0 0210 	sub.w	r2, r0, #16
 800c794:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c798:	f7ff ff67 	bl	800c66a <__hexdig_fun>
 800c79c:	1e43      	subs	r3, r0, #1
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	2b18      	cmp	r3, #24
 800c7a2:	d91d      	bls.n	800c7e0 <__gethex+0x14c>
 800c7a4:	f1b9 0f00 	cmp.w	r9, #0
 800c7a8:	d000      	beq.n	800c7ac <__gethex+0x118>
 800c7aa:	4252      	negs	r2, r2
 800c7ac:	4415      	add	r5, r2
 800c7ae:	f8cb 1000 	str.w	r1, [fp]
 800c7b2:	b1e4      	cbz	r4, 800c7ee <__gethex+0x15a>
 800c7b4:	9b00      	ldr	r3, [sp, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	bf14      	ite	ne
 800c7ba:	2700      	movne	r7, #0
 800c7bc:	2706      	moveq	r7, #6
 800c7be:	4638      	mov	r0, r7
 800c7c0:	b009      	add	sp, #36	; 0x24
 800c7c2:	ecbd 8b02 	vpop	{d8}
 800c7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ca:	463e      	mov	r6, r7
 800c7cc:	4625      	mov	r5, r4
 800c7ce:	2401      	movs	r4, #1
 800c7d0:	e7ca      	b.n	800c768 <__gethex+0xd4>
 800c7d2:	f04f 0900 	mov.w	r9, #0
 800c7d6:	1cb1      	adds	r1, r6, #2
 800c7d8:	e7d3      	b.n	800c782 <__gethex+0xee>
 800c7da:	f04f 0901 	mov.w	r9, #1
 800c7de:	e7fa      	b.n	800c7d6 <__gethex+0x142>
 800c7e0:	230a      	movs	r3, #10
 800c7e2:	fb03 0202 	mla	r2, r3, r2, r0
 800c7e6:	3a10      	subs	r2, #16
 800c7e8:	e7d4      	b.n	800c794 <__gethex+0x100>
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	e7df      	b.n	800c7ae <__gethex+0x11a>
 800c7ee:	1bf3      	subs	r3, r6, r7
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	2b07      	cmp	r3, #7
 800c7f6:	dc0b      	bgt.n	800c810 <__gethex+0x17c>
 800c7f8:	ee18 0a10 	vmov	r0, s16
 800c7fc:	f000 fad8 	bl	800cdb0 <_Balloc>
 800c800:	4604      	mov	r4, r0
 800c802:	b940      	cbnz	r0, 800c816 <__gethex+0x182>
 800c804:	4b65      	ldr	r3, [pc, #404]	; (800c99c <__gethex+0x308>)
 800c806:	4602      	mov	r2, r0
 800c808:	21de      	movs	r1, #222	; 0xde
 800c80a:	4865      	ldr	r0, [pc, #404]	; (800c9a0 <__gethex+0x30c>)
 800c80c:	f001 fb88 	bl	800df20 <__assert_func>
 800c810:	3101      	adds	r1, #1
 800c812:	105b      	asrs	r3, r3, #1
 800c814:	e7ee      	b.n	800c7f4 <__gethex+0x160>
 800c816:	f100 0914 	add.w	r9, r0, #20
 800c81a:	f04f 0b00 	mov.w	fp, #0
 800c81e:	f1ca 0301 	rsb	r3, sl, #1
 800c822:	f8cd 9008 	str.w	r9, [sp, #8]
 800c826:	f8cd b000 	str.w	fp, [sp]
 800c82a:	9306      	str	r3, [sp, #24]
 800c82c:	42b7      	cmp	r7, r6
 800c82e:	d340      	bcc.n	800c8b2 <__gethex+0x21e>
 800c830:	9802      	ldr	r0, [sp, #8]
 800c832:	9b00      	ldr	r3, [sp, #0]
 800c834:	f840 3b04 	str.w	r3, [r0], #4
 800c838:	eba0 0009 	sub.w	r0, r0, r9
 800c83c:	1080      	asrs	r0, r0, #2
 800c83e:	0146      	lsls	r6, r0, #5
 800c840:	6120      	str	r0, [r4, #16]
 800c842:	4618      	mov	r0, r3
 800c844:	f000 fbaa 	bl	800cf9c <__hi0bits>
 800c848:	1a30      	subs	r0, r6, r0
 800c84a:	f8d8 6000 	ldr.w	r6, [r8]
 800c84e:	42b0      	cmp	r0, r6
 800c850:	dd63      	ble.n	800c91a <__gethex+0x286>
 800c852:	1b87      	subs	r7, r0, r6
 800c854:	4639      	mov	r1, r7
 800c856:	4620      	mov	r0, r4
 800c858:	f000 ff44 	bl	800d6e4 <__any_on>
 800c85c:	4682      	mov	sl, r0
 800c85e:	b1a8      	cbz	r0, 800c88c <__gethex+0x1f8>
 800c860:	1e7b      	subs	r3, r7, #1
 800c862:	1159      	asrs	r1, r3, #5
 800c864:	f003 021f 	and.w	r2, r3, #31
 800c868:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c86c:	f04f 0a01 	mov.w	sl, #1
 800c870:	fa0a f202 	lsl.w	r2, sl, r2
 800c874:	420a      	tst	r2, r1
 800c876:	d009      	beq.n	800c88c <__gethex+0x1f8>
 800c878:	4553      	cmp	r3, sl
 800c87a:	dd05      	ble.n	800c888 <__gethex+0x1f4>
 800c87c:	1eb9      	subs	r1, r7, #2
 800c87e:	4620      	mov	r0, r4
 800c880:	f000 ff30 	bl	800d6e4 <__any_on>
 800c884:	2800      	cmp	r0, #0
 800c886:	d145      	bne.n	800c914 <__gethex+0x280>
 800c888:	f04f 0a02 	mov.w	sl, #2
 800c88c:	4639      	mov	r1, r7
 800c88e:	4620      	mov	r0, r4
 800c890:	f7ff fe99 	bl	800c5c6 <rshift>
 800c894:	443d      	add	r5, r7
 800c896:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c89a:	42ab      	cmp	r3, r5
 800c89c:	da4c      	bge.n	800c938 <__gethex+0x2a4>
 800c89e:	ee18 0a10 	vmov	r0, s16
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	f000 fac4 	bl	800ce30 <_Bfree>
 800c8a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	6013      	str	r3, [r2, #0]
 800c8ae:	27a3      	movs	r7, #163	; 0xa3
 800c8b0:	e785      	b.n	800c7be <__gethex+0x12a>
 800c8b2:	1e73      	subs	r3, r6, #1
 800c8b4:	9a05      	ldr	r2, [sp, #20]
 800c8b6:	9303      	str	r3, [sp, #12]
 800c8b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d019      	beq.n	800c8f4 <__gethex+0x260>
 800c8c0:	f1bb 0f20 	cmp.w	fp, #32
 800c8c4:	d107      	bne.n	800c8d6 <__gethex+0x242>
 800c8c6:	9b02      	ldr	r3, [sp, #8]
 800c8c8:	9a00      	ldr	r2, [sp, #0]
 800c8ca:	f843 2b04 	str.w	r2, [r3], #4
 800c8ce:	9302      	str	r3, [sp, #8]
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	469b      	mov	fp, r3
 800c8d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c8da:	f7ff fec6 	bl	800c66a <__hexdig_fun>
 800c8de:	9b00      	ldr	r3, [sp, #0]
 800c8e0:	f000 000f 	and.w	r0, r0, #15
 800c8e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800c8e8:	4303      	orrs	r3, r0
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	f10b 0b04 	add.w	fp, fp, #4
 800c8f0:	9b03      	ldr	r3, [sp, #12]
 800c8f2:	e00d      	b.n	800c910 <__gethex+0x27c>
 800c8f4:	9b03      	ldr	r3, [sp, #12]
 800c8f6:	9a06      	ldr	r2, [sp, #24]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	42bb      	cmp	r3, r7
 800c8fc:	d3e0      	bcc.n	800c8c0 <__gethex+0x22c>
 800c8fe:	4618      	mov	r0, r3
 800c900:	9901      	ldr	r1, [sp, #4]
 800c902:	9307      	str	r3, [sp, #28]
 800c904:	4652      	mov	r2, sl
 800c906:	f001 fada 	bl	800debe <strncmp>
 800c90a:	9b07      	ldr	r3, [sp, #28]
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d1d7      	bne.n	800c8c0 <__gethex+0x22c>
 800c910:	461e      	mov	r6, r3
 800c912:	e78b      	b.n	800c82c <__gethex+0x198>
 800c914:	f04f 0a03 	mov.w	sl, #3
 800c918:	e7b8      	b.n	800c88c <__gethex+0x1f8>
 800c91a:	da0a      	bge.n	800c932 <__gethex+0x29e>
 800c91c:	1a37      	subs	r7, r6, r0
 800c91e:	4621      	mov	r1, r4
 800c920:	ee18 0a10 	vmov	r0, s16
 800c924:	463a      	mov	r2, r7
 800c926:	f000 fc9f 	bl	800d268 <__lshift>
 800c92a:	1bed      	subs	r5, r5, r7
 800c92c:	4604      	mov	r4, r0
 800c92e:	f100 0914 	add.w	r9, r0, #20
 800c932:	f04f 0a00 	mov.w	sl, #0
 800c936:	e7ae      	b.n	800c896 <__gethex+0x202>
 800c938:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c93c:	42a8      	cmp	r0, r5
 800c93e:	dd72      	ble.n	800ca26 <__gethex+0x392>
 800c940:	1b45      	subs	r5, r0, r5
 800c942:	42ae      	cmp	r6, r5
 800c944:	dc36      	bgt.n	800c9b4 <__gethex+0x320>
 800c946:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d02a      	beq.n	800c9a4 <__gethex+0x310>
 800c94e:	2b03      	cmp	r3, #3
 800c950:	d02c      	beq.n	800c9ac <__gethex+0x318>
 800c952:	2b01      	cmp	r3, #1
 800c954:	d115      	bne.n	800c982 <__gethex+0x2ee>
 800c956:	42ae      	cmp	r6, r5
 800c958:	d113      	bne.n	800c982 <__gethex+0x2ee>
 800c95a:	2e01      	cmp	r6, #1
 800c95c:	d10b      	bne.n	800c976 <__gethex+0x2e2>
 800c95e:	9a04      	ldr	r2, [sp, #16]
 800c960:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c964:	6013      	str	r3, [r2, #0]
 800c966:	2301      	movs	r3, #1
 800c968:	6123      	str	r3, [r4, #16]
 800c96a:	f8c9 3000 	str.w	r3, [r9]
 800c96e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c970:	2762      	movs	r7, #98	; 0x62
 800c972:	601c      	str	r4, [r3, #0]
 800c974:	e723      	b.n	800c7be <__gethex+0x12a>
 800c976:	1e71      	subs	r1, r6, #1
 800c978:	4620      	mov	r0, r4
 800c97a:	f000 feb3 	bl	800d6e4 <__any_on>
 800c97e:	2800      	cmp	r0, #0
 800c980:	d1ed      	bne.n	800c95e <__gethex+0x2ca>
 800c982:	ee18 0a10 	vmov	r0, s16
 800c986:	4621      	mov	r1, r4
 800c988:	f000 fa52 	bl	800ce30 <_Bfree>
 800c98c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c98e:	2300      	movs	r3, #0
 800c990:	6013      	str	r3, [r2, #0]
 800c992:	2750      	movs	r7, #80	; 0x50
 800c994:	e713      	b.n	800c7be <__gethex+0x12a>
 800c996:	bf00      	nop
 800c998:	0800eaec 	.word	0x0800eaec
 800c99c:	0800ea0c 	.word	0x0800ea0c
 800c9a0:	0800ea80 	.word	0x0800ea80
 800c9a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1eb      	bne.n	800c982 <__gethex+0x2ee>
 800c9aa:	e7d8      	b.n	800c95e <__gethex+0x2ca>
 800c9ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1d5      	bne.n	800c95e <__gethex+0x2ca>
 800c9b2:	e7e6      	b.n	800c982 <__gethex+0x2ee>
 800c9b4:	1e6f      	subs	r7, r5, #1
 800c9b6:	f1ba 0f00 	cmp.w	sl, #0
 800c9ba:	d131      	bne.n	800ca20 <__gethex+0x38c>
 800c9bc:	b127      	cbz	r7, 800c9c8 <__gethex+0x334>
 800c9be:	4639      	mov	r1, r7
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f000 fe8f 	bl	800d6e4 <__any_on>
 800c9c6:	4682      	mov	sl, r0
 800c9c8:	117b      	asrs	r3, r7, #5
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c9d0:	f007 071f 	and.w	r7, r7, #31
 800c9d4:	fa01 f707 	lsl.w	r7, r1, r7
 800c9d8:	421f      	tst	r7, r3
 800c9da:	4629      	mov	r1, r5
 800c9dc:	4620      	mov	r0, r4
 800c9de:	bf18      	it	ne
 800c9e0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c9e4:	1b76      	subs	r6, r6, r5
 800c9e6:	f7ff fdee 	bl	800c5c6 <rshift>
 800c9ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c9ee:	2702      	movs	r7, #2
 800c9f0:	f1ba 0f00 	cmp.w	sl, #0
 800c9f4:	d048      	beq.n	800ca88 <__gethex+0x3f4>
 800c9f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d015      	beq.n	800ca2a <__gethex+0x396>
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	d017      	beq.n	800ca32 <__gethex+0x39e>
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d109      	bne.n	800ca1a <__gethex+0x386>
 800ca06:	f01a 0f02 	tst.w	sl, #2
 800ca0a:	d006      	beq.n	800ca1a <__gethex+0x386>
 800ca0c:	f8d9 0000 	ldr.w	r0, [r9]
 800ca10:	ea4a 0a00 	orr.w	sl, sl, r0
 800ca14:	f01a 0f01 	tst.w	sl, #1
 800ca18:	d10e      	bne.n	800ca38 <__gethex+0x3a4>
 800ca1a:	f047 0710 	orr.w	r7, r7, #16
 800ca1e:	e033      	b.n	800ca88 <__gethex+0x3f4>
 800ca20:	f04f 0a01 	mov.w	sl, #1
 800ca24:	e7d0      	b.n	800c9c8 <__gethex+0x334>
 800ca26:	2701      	movs	r7, #1
 800ca28:	e7e2      	b.n	800c9f0 <__gethex+0x35c>
 800ca2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca2c:	f1c3 0301 	rsb	r3, r3, #1
 800ca30:	9315      	str	r3, [sp, #84]	; 0x54
 800ca32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d0f0      	beq.n	800ca1a <__gethex+0x386>
 800ca38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca3c:	f104 0314 	add.w	r3, r4, #20
 800ca40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca48:	f04f 0c00 	mov.w	ip, #0
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca52:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca56:	d01c      	beq.n	800ca92 <__gethex+0x3fe>
 800ca58:	3201      	adds	r2, #1
 800ca5a:	6002      	str	r2, [r0, #0]
 800ca5c:	2f02      	cmp	r7, #2
 800ca5e:	f104 0314 	add.w	r3, r4, #20
 800ca62:	d13f      	bne.n	800cae4 <__gethex+0x450>
 800ca64:	f8d8 2000 	ldr.w	r2, [r8]
 800ca68:	3a01      	subs	r2, #1
 800ca6a:	42b2      	cmp	r2, r6
 800ca6c:	d10a      	bne.n	800ca84 <__gethex+0x3f0>
 800ca6e:	1171      	asrs	r1, r6, #5
 800ca70:	2201      	movs	r2, #1
 800ca72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca76:	f006 061f 	and.w	r6, r6, #31
 800ca7a:	fa02 f606 	lsl.w	r6, r2, r6
 800ca7e:	421e      	tst	r6, r3
 800ca80:	bf18      	it	ne
 800ca82:	4617      	movne	r7, r2
 800ca84:	f047 0720 	orr.w	r7, r7, #32
 800ca88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca8a:	601c      	str	r4, [r3, #0]
 800ca8c:	9b04      	ldr	r3, [sp, #16]
 800ca8e:	601d      	str	r5, [r3, #0]
 800ca90:	e695      	b.n	800c7be <__gethex+0x12a>
 800ca92:	4299      	cmp	r1, r3
 800ca94:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca98:	d8d8      	bhi.n	800ca4c <__gethex+0x3b8>
 800ca9a:	68a3      	ldr	r3, [r4, #8]
 800ca9c:	459b      	cmp	fp, r3
 800ca9e:	db19      	blt.n	800cad4 <__gethex+0x440>
 800caa0:	6861      	ldr	r1, [r4, #4]
 800caa2:	ee18 0a10 	vmov	r0, s16
 800caa6:	3101      	adds	r1, #1
 800caa8:	f000 f982 	bl	800cdb0 <_Balloc>
 800caac:	4681      	mov	r9, r0
 800caae:	b918      	cbnz	r0, 800cab8 <__gethex+0x424>
 800cab0:	4b1a      	ldr	r3, [pc, #104]	; (800cb1c <__gethex+0x488>)
 800cab2:	4602      	mov	r2, r0
 800cab4:	2184      	movs	r1, #132	; 0x84
 800cab6:	e6a8      	b.n	800c80a <__gethex+0x176>
 800cab8:	6922      	ldr	r2, [r4, #16]
 800caba:	3202      	adds	r2, #2
 800cabc:	f104 010c 	add.w	r1, r4, #12
 800cac0:	0092      	lsls	r2, r2, #2
 800cac2:	300c      	adds	r0, #12
 800cac4:	f7fc fe98 	bl	80097f8 <memcpy>
 800cac8:	4621      	mov	r1, r4
 800caca:	ee18 0a10 	vmov	r0, s16
 800cace:	f000 f9af 	bl	800ce30 <_Bfree>
 800cad2:	464c      	mov	r4, r9
 800cad4:	6923      	ldr	r3, [r4, #16]
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cadc:	6122      	str	r2, [r4, #16]
 800cade:	2201      	movs	r2, #1
 800cae0:	615a      	str	r2, [r3, #20]
 800cae2:	e7bb      	b.n	800ca5c <__gethex+0x3c8>
 800cae4:	6922      	ldr	r2, [r4, #16]
 800cae6:	455a      	cmp	r2, fp
 800cae8:	dd0b      	ble.n	800cb02 <__gethex+0x46e>
 800caea:	2101      	movs	r1, #1
 800caec:	4620      	mov	r0, r4
 800caee:	f7ff fd6a 	bl	800c5c6 <rshift>
 800caf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800caf6:	3501      	adds	r5, #1
 800caf8:	42ab      	cmp	r3, r5
 800cafa:	f6ff aed0 	blt.w	800c89e <__gethex+0x20a>
 800cafe:	2701      	movs	r7, #1
 800cb00:	e7c0      	b.n	800ca84 <__gethex+0x3f0>
 800cb02:	f016 061f 	ands.w	r6, r6, #31
 800cb06:	d0fa      	beq.n	800cafe <__gethex+0x46a>
 800cb08:	449a      	add	sl, r3
 800cb0a:	f1c6 0620 	rsb	r6, r6, #32
 800cb0e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cb12:	f000 fa43 	bl	800cf9c <__hi0bits>
 800cb16:	42b0      	cmp	r0, r6
 800cb18:	dbe7      	blt.n	800caea <__gethex+0x456>
 800cb1a:	e7f0      	b.n	800cafe <__gethex+0x46a>
 800cb1c:	0800ea0c 	.word	0x0800ea0c

0800cb20 <L_shift>:
 800cb20:	f1c2 0208 	rsb	r2, r2, #8
 800cb24:	0092      	lsls	r2, r2, #2
 800cb26:	b570      	push	{r4, r5, r6, lr}
 800cb28:	f1c2 0620 	rsb	r6, r2, #32
 800cb2c:	6843      	ldr	r3, [r0, #4]
 800cb2e:	6804      	ldr	r4, [r0, #0]
 800cb30:	fa03 f506 	lsl.w	r5, r3, r6
 800cb34:	432c      	orrs	r4, r5
 800cb36:	40d3      	lsrs	r3, r2
 800cb38:	6004      	str	r4, [r0, #0]
 800cb3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb3e:	4288      	cmp	r0, r1
 800cb40:	d3f4      	bcc.n	800cb2c <L_shift+0xc>
 800cb42:	bd70      	pop	{r4, r5, r6, pc}

0800cb44 <__match>:
 800cb44:	b530      	push	{r4, r5, lr}
 800cb46:	6803      	ldr	r3, [r0, #0]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb4e:	b914      	cbnz	r4, 800cb56 <__match+0x12>
 800cb50:	6003      	str	r3, [r0, #0]
 800cb52:	2001      	movs	r0, #1
 800cb54:	bd30      	pop	{r4, r5, pc}
 800cb56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cb5e:	2d19      	cmp	r5, #25
 800cb60:	bf98      	it	ls
 800cb62:	3220      	addls	r2, #32
 800cb64:	42a2      	cmp	r2, r4
 800cb66:	d0f0      	beq.n	800cb4a <__match+0x6>
 800cb68:	2000      	movs	r0, #0
 800cb6a:	e7f3      	b.n	800cb54 <__match+0x10>

0800cb6c <__hexnan>:
 800cb6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb70:	680b      	ldr	r3, [r1, #0]
 800cb72:	6801      	ldr	r1, [r0, #0]
 800cb74:	115e      	asrs	r6, r3, #5
 800cb76:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb7a:	f013 031f 	ands.w	r3, r3, #31
 800cb7e:	b087      	sub	sp, #28
 800cb80:	bf18      	it	ne
 800cb82:	3604      	addne	r6, #4
 800cb84:	2500      	movs	r5, #0
 800cb86:	1f37      	subs	r7, r6, #4
 800cb88:	4682      	mov	sl, r0
 800cb8a:	4690      	mov	r8, r2
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb92:	46b9      	mov	r9, r7
 800cb94:	463c      	mov	r4, r7
 800cb96:	9502      	str	r5, [sp, #8]
 800cb98:	46ab      	mov	fp, r5
 800cb9a:	784a      	ldrb	r2, [r1, #1]
 800cb9c:	1c4b      	adds	r3, r1, #1
 800cb9e:	9303      	str	r3, [sp, #12]
 800cba0:	b342      	cbz	r2, 800cbf4 <__hexnan+0x88>
 800cba2:	4610      	mov	r0, r2
 800cba4:	9105      	str	r1, [sp, #20]
 800cba6:	9204      	str	r2, [sp, #16]
 800cba8:	f7ff fd5f 	bl	800c66a <__hexdig_fun>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	d14f      	bne.n	800cc50 <__hexnan+0xe4>
 800cbb0:	9a04      	ldr	r2, [sp, #16]
 800cbb2:	9905      	ldr	r1, [sp, #20]
 800cbb4:	2a20      	cmp	r2, #32
 800cbb6:	d818      	bhi.n	800cbea <__hexnan+0x7e>
 800cbb8:	9b02      	ldr	r3, [sp, #8]
 800cbba:	459b      	cmp	fp, r3
 800cbbc:	dd13      	ble.n	800cbe6 <__hexnan+0x7a>
 800cbbe:	454c      	cmp	r4, r9
 800cbc0:	d206      	bcs.n	800cbd0 <__hexnan+0x64>
 800cbc2:	2d07      	cmp	r5, #7
 800cbc4:	dc04      	bgt.n	800cbd0 <__hexnan+0x64>
 800cbc6:	462a      	mov	r2, r5
 800cbc8:	4649      	mov	r1, r9
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f7ff ffa8 	bl	800cb20 <L_shift>
 800cbd0:	4544      	cmp	r4, r8
 800cbd2:	d950      	bls.n	800cc76 <__hexnan+0x10a>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	f1a4 0904 	sub.w	r9, r4, #4
 800cbda:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbde:	f8cd b008 	str.w	fp, [sp, #8]
 800cbe2:	464c      	mov	r4, r9
 800cbe4:	461d      	mov	r5, r3
 800cbe6:	9903      	ldr	r1, [sp, #12]
 800cbe8:	e7d7      	b.n	800cb9a <__hexnan+0x2e>
 800cbea:	2a29      	cmp	r2, #41	; 0x29
 800cbec:	d156      	bne.n	800cc9c <__hexnan+0x130>
 800cbee:	3102      	adds	r1, #2
 800cbf0:	f8ca 1000 	str.w	r1, [sl]
 800cbf4:	f1bb 0f00 	cmp.w	fp, #0
 800cbf8:	d050      	beq.n	800cc9c <__hexnan+0x130>
 800cbfa:	454c      	cmp	r4, r9
 800cbfc:	d206      	bcs.n	800cc0c <__hexnan+0xa0>
 800cbfe:	2d07      	cmp	r5, #7
 800cc00:	dc04      	bgt.n	800cc0c <__hexnan+0xa0>
 800cc02:	462a      	mov	r2, r5
 800cc04:	4649      	mov	r1, r9
 800cc06:	4620      	mov	r0, r4
 800cc08:	f7ff ff8a 	bl	800cb20 <L_shift>
 800cc0c:	4544      	cmp	r4, r8
 800cc0e:	d934      	bls.n	800cc7a <__hexnan+0x10e>
 800cc10:	f1a8 0204 	sub.w	r2, r8, #4
 800cc14:	4623      	mov	r3, r4
 800cc16:	f853 1b04 	ldr.w	r1, [r3], #4
 800cc1a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cc1e:	429f      	cmp	r7, r3
 800cc20:	d2f9      	bcs.n	800cc16 <__hexnan+0xaa>
 800cc22:	1b3b      	subs	r3, r7, r4
 800cc24:	f023 0303 	bic.w	r3, r3, #3
 800cc28:	3304      	adds	r3, #4
 800cc2a:	3401      	adds	r4, #1
 800cc2c:	3e03      	subs	r6, #3
 800cc2e:	42b4      	cmp	r4, r6
 800cc30:	bf88      	it	hi
 800cc32:	2304      	movhi	r3, #4
 800cc34:	4443      	add	r3, r8
 800cc36:	2200      	movs	r2, #0
 800cc38:	f843 2b04 	str.w	r2, [r3], #4
 800cc3c:	429f      	cmp	r7, r3
 800cc3e:	d2fb      	bcs.n	800cc38 <__hexnan+0xcc>
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	b91b      	cbnz	r3, 800cc4c <__hexnan+0xe0>
 800cc44:	4547      	cmp	r7, r8
 800cc46:	d127      	bne.n	800cc98 <__hexnan+0x12c>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	603b      	str	r3, [r7, #0]
 800cc4c:	2005      	movs	r0, #5
 800cc4e:	e026      	b.n	800cc9e <__hexnan+0x132>
 800cc50:	3501      	adds	r5, #1
 800cc52:	2d08      	cmp	r5, #8
 800cc54:	f10b 0b01 	add.w	fp, fp, #1
 800cc58:	dd06      	ble.n	800cc68 <__hexnan+0xfc>
 800cc5a:	4544      	cmp	r4, r8
 800cc5c:	d9c3      	bls.n	800cbe6 <__hexnan+0x7a>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc64:	2501      	movs	r5, #1
 800cc66:	3c04      	subs	r4, #4
 800cc68:	6822      	ldr	r2, [r4, #0]
 800cc6a:	f000 000f 	and.w	r0, r0, #15
 800cc6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cc72:	6022      	str	r2, [r4, #0]
 800cc74:	e7b7      	b.n	800cbe6 <__hexnan+0x7a>
 800cc76:	2508      	movs	r5, #8
 800cc78:	e7b5      	b.n	800cbe6 <__hexnan+0x7a>
 800cc7a:	9b01      	ldr	r3, [sp, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d0df      	beq.n	800cc40 <__hexnan+0xd4>
 800cc80:	f04f 32ff 	mov.w	r2, #4294967295
 800cc84:	f1c3 0320 	rsb	r3, r3, #32
 800cc88:	fa22 f303 	lsr.w	r3, r2, r3
 800cc8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cc90:	401a      	ands	r2, r3
 800cc92:	f846 2c04 	str.w	r2, [r6, #-4]
 800cc96:	e7d3      	b.n	800cc40 <__hexnan+0xd4>
 800cc98:	3f04      	subs	r7, #4
 800cc9a:	e7d1      	b.n	800cc40 <__hexnan+0xd4>
 800cc9c:	2004      	movs	r0, #4
 800cc9e:	b007      	add	sp, #28
 800cca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cca4 <_localeconv_r>:
 800cca4:	4800      	ldr	r0, [pc, #0]	; (800cca8 <_localeconv_r+0x4>)
 800cca6:	4770      	bx	lr
 800cca8:	20000164 	.word	0x20000164

0800ccac <__retarget_lock_init_recursive>:
 800ccac:	4770      	bx	lr

0800ccae <__retarget_lock_acquire_recursive>:
 800ccae:	4770      	bx	lr

0800ccb0 <__retarget_lock_release_recursive>:
 800ccb0:	4770      	bx	lr

0800ccb2 <__swhatbuf_r>:
 800ccb2:	b570      	push	{r4, r5, r6, lr}
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccba:	2900      	cmp	r1, #0
 800ccbc:	b096      	sub	sp, #88	; 0x58
 800ccbe:	4614      	mov	r4, r2
 800ccc0:	461d      	mov	r5, r3
 800ccc2:	da07      	bge.n	800ccd4 <__swhatbuf_r+0x22>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	602b      	str	r3, [r5, #0]
 800ccc8:	89b3      	ldrh	r3, [r6, #12]
 800ccca:	061a      	lsls	r2, r3, #24
 800cccc:	d410      	bmi.n	800ccf0 <__swhatbuf_r+0x3e>
 800ccce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccd2:	e00e      	b.n	800ccf2 <__swhatbuf_r+0x40>
 800ccd4:	466a      	mov	r2, sp
 800ccd6:	f001 f963 	bl	800dfa0 <_fstat_r>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	dbf2      	blt.n	800ccc4 <__swhatbuf_r+0x12>
 800ccde:	9a01      	ldr	r2, [sp, #4]
 800cce0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cce4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cce8:	425a      	negs	r2, r3
 800ccea:	415a      	adcs	r2, r3
 800ccec:	602a      	str	r2, [r5, #0]
 800ccee:	e7ee      	b.n	800ccce <__swhatbuf_r+0x1c>
 800ccf0:	2340      	movs	r3, #64	; 0x40
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	b016      	add	sp, #88	; 0x58
 800ccf8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ccfc <__smakebuf_r>:
 800ccfc:	898b      	ldrh	r3, [r1, #12]
 800ccfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd00:	079d      	lsls	r5, r3, #30
 800cd02:	4606      	mov	r6, r0
 800cd04:	460c      	mov	r4, r1
 800cd06:	d507      	bpl.n	800cd18 <__smakebuf_r+0x1c>
 800cd08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	6123      	str	r3, [r4, #16]
 800cd10:	2301      	movs	r3, #1
 800cd12:	6163      	str	r3, [r4, #20]
 800cd14:	b002      	add	sp, #8
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	ab01      	add	r3, sp, #4
 800cd1a:	466a      	mov	r2, sp
 800cd1c:	f7ff ffc9 	bl	800ccb2 <__swhatbuf_r>
 800cd20:	9900      	ldr	r1, [sp, #0]
 800cd22:	4605      	mov	r5, r0
 800cd24:	4630      	mov	r0, r6
 800cd26:	f000 fd5d 	bl	800d7e4 <_malloc_r>
 800cd2a:	b948      	cbnz	r0, 800cd40 <__smakebuf_r+0x44>
 800cd2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd30:	059a      	lsls	r2, r3, #22
 800cd32:	d4ef      	bmi.n	800cd14 <__smakebuf_r+0x18>
 800cd34:	f023 0303 	bic.w	r3, r3, #3
 800cd38:	f043 0302 	orr.w	r3, r3, #2
 800cd3c:	81a3      	strh	r3, [r4, #12]
 800cd3e:	e7e3      	b.n	800cd08 <__smakebuf_r+0xc>
 800cd40:	4b0d      	ldr	r3, [pc, #52]	; (800cd78 <__smakebuf_r+0x7c>)
 800cd42:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	6020      	str	r0, [r4, #0]
 800cd48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd4c:	81a3      	strh	r3, [r4, #12]
 800cd4e:	9b00      	ldr	r3, [sp, #0]
 800cd50:	6163      	str	r3, [r4, #20]
 800cd52:	9b01      	ldr	r3, [sp, #4]
 800cd54:	6120      	str	r0, [r4, #16]
 800cd56:	b15b      	cbz	r3, 800cd70 <__smakebuf_r+0x74>
 800cd58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f001 f931 	bl	800dfc4 <_isatty_r>
 800cd62:	b128      	cbz	r0, 800cd70 <__smakebuf_r+0x74>
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	f023 0303 	bic.w	r3, r3, #3
 800cd6a:	f043 0301 	orr.w	r3, r3, #1
 800cd6e:	81a3      	strh	r3, [r4, #12]
 800cd70:	89a0      	ldrh	r0, [r4, #12]
 800cd72:	4305      	orrs	r5, r0
 800cd74:	81a5      	strh	r5, [r4, #12]
 800cd76:	e7cd      	b.n	800cd14 <__smakebuf_r+0x18>
 800cd78:	0800c425 	.word	0x0800c425

0800cd7c <malloc>:
 800cd7c:	4b02      	ldr	r3, [pc, #8]	; (800cd88 <malloc+0xc>)
 800cd7e:	4601      	mov	r1, r0
 800cd80:	6818      	ldr	r0, [r3, #0]
 800cd82:	f000 bd2f 	b.w	800d7e4 <_malloc_r>
 800cd86:	bf00      	nop
 800cd88:	2000000c 	.word	0x2000000c

0800cd8c <__ascii_mbtowc>:
 800cd8c:	b082      	sub	sp, #8
 800cd8e:	b901      	cbnz	r1, 800cd92 <__ascii_mbtowc+0x6>
 800cd90:	a901      	add	r1, sp, #4
 800cd92:	b142      	cbz	r2, 800cda6 <__ascii_mbtowc+0x1a>
 800cd94:	b14b      	cbz	r3, 800cdaa <__ascii_mbtowc+0x1e>
 800cd96:	7813      	ldrb	r3, [r2, #0]
 800cd98:	600b      	str	r3, [r1, #0]
 800cd9a:	7812      	ldrb	r2, [r2, #0]
 800cd9c:	1e10      	subs	r0, r2, #0
 800cd9e:	bf18      	it	ne
 800cda0:	2001      	movne	r0, #1
 800cda2:	b002      	add	sp, #8
 800cda4:	4770      	bx	lr
 800cda6:	4610      	mov	r0, r2
 800cda8:	e7fb      	b.n	800cda2 <__ascii_mbtowc+0x16>
 800cdaa:	f06f 0001 	mvn.w	r0, #1
 800cdae:	e7f8      	b.n	800cda2 <__ascii_mbtowc+0x16>

0800cdb0 <_Balloc>:
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	460d      	mov	r5, r1
 800cdb8:	b976      	cbnz	r6, 800cdd8 <_Balloc+0x28>
 800cdba:	2010      	movs	r0, #16
 800cdbc:	f7ff ffde 	bl	800cd7c <malloc>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	6260      	str	r0, [r4, #36]	; 0x24
 800cdc4:	b920      	cbnz	r0, 800cdd0 <_Balloc+0x20>
 800cdc6:	4b18      	ldr	r3, [pc, #96]	; (800ce28 <_Balloc+0x78>)
 800cdc8:	4818      	ldr	r0, [pc, #96]	; (800ce2c <_Balloc+0x7c>)
 800cdca:	2166      	movs	r1, #102	; 0x66
 800cdcc:	f001 f8a8 	bl	800df20 <__assert_func>
 800cdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cdd4:	6006      	str	r6, [r0, #0]
 800cdd6:	60c6      	str	r6, [r0, #12]
 800cdd8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cdda:	68f3      	ldr	r3, [r6, #12]
 800cddc:	b183      	cbz	r3, 800ce00 <_Balloc+0x50>
 800cdde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cde6:	b9b8      	cbnz	r0, 800ce18 <_Balloc+0x68>
 800cde8:	2101      	movs	r1, #1
 800cdea:	fa01 f605 	lsl.w	r6, r1, r5
 800cdee:	1d72      	adds	r2, r6, #5
 800cdf0:	0092      	lsls	r2, r2, #2
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f000 fc97 	bl	800d726 <_calloc_r>
 800cdf8:	b160      	cbz	r0, 800ce14 <_Balloc+0x64>
 800cdfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cdfe:	e00e      	b.n	800ce1e <_Balloc+0x6e>
 800ce00:	2221      	movs	r2, #33	; 0x21
 800ce02:	2104      	movs	r1, #4
 800ce04:	4620      	mov	r0, r4
 800ce06:	f000 fc8e 	bl	800d726 <_calloc_r>
 800ce0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce0c:	60f0      	str	r0, [r6, #12]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1e4      	bne.n	800cdde <_Balloc+0x2e>
 800ce14:	2000      	movs	r0, #0
 800ce16:	bd70      	pop	{r4, r5, r6, pc}
 800ce18:	6802      	ldr	r2, [r0, #0]
 800ce1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce24:	e7f7      	b.n	800ce16 <_Balloc+0x66>
 800ce26:	bf00      	nop
 800ce28:	0800e996 	.word	0x0800e996
 800ce2c:	0800eb00 	.word	0x0800eb00

0800ce30 <_Bfree>:
 800ce30:	b570      	push	{r4, r5, r6, lr}
 800ce32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce34:	4605      	mov	r5, r0
 800ce36:	460c      	mov	r4, r1
 800ce38:	b976      	cbnz	r6, 800ce58 <_Bfree+0x28>
 800ce3a:	2010      	movs	r0, #16
 800ce3c:	f7ff ff9e 	bl	800cd7c <malloc>
 800ce40:	4602      	mov	r2, r0
 800ce42:	6268      	str	r0, [r5, #36]	; 0x24
 800ce44:	b920      	cbnz	r0, 800ce50 <_Bfree+0x20>
 800ce46:	4b09      	ldr	r3, [pc, #36]	; (800ce6c <_Bfree+0x3c>)
 800ce48:	4809      	ldr	r0, [pc, #36]	; (800ce70 <_Bfree+0x40>)
 800ce4a:	218a      	movs	r1, #138	; 0x8a
 800ce4c:	f001 f868 	bl	800df20 <__assert_func>
 800ce50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce54:	6006      	str	r6, [r0, #0]
 800ce56:	60c6      	str	r6, [r0, #12]
 800ce58:	b13c      	cbz	r4, 800ce6a <_Bfree+0x3a>
 800ce5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce5c:	6862      	ldr	r2, [r4, #4]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce64:	6021      	str	r1, [r4, #0]
 800ce66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce6a:	bd70      	pop	{r4, r5, r6, pc}
 800ce6c:	0800e996 	.word	0x0800e996
 800ce70:	0800eb00 	.word	0x0800eb00

0800ce74 <__multadd>:
 800ce74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce78:	690e      	ldr	r6, [r1, #16]
 800ce7a:	4607      	mov	r7, r0
 800ce7c:	4698      	mov	r8, r3
 800ce7e:	460c      	mov	r4, r1
 800ce80:	f101 0014 	add.w	r0, r1, #20
 800ce84:	2300      	movs	r3, #0
 800ce86:	6805      	ldr	r5, [r0, #0]
 800ce88:	b2a9      	uxth	r1, r5
 800ce8a:	fb02 8101 	mla	r1, r2, r1, r8
 800ce8e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ce92:	0c2d      	lsrs	r5, r5, #16
 800ce94:	fb02 c505 	mla	r5, r2, r5, ip
 800ce98:	b289      	uxth	r1, r1
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cea0:	429e      	cmp	r6, r3
 800cea2:	f840 1b04 	str.w	r1, [r0], #4
 800cea6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ceaa:	dcec      	bgt.n	800ce86 <__multadd+0x12>
 800ceac:	f1b8 0f00 	cmp.w	r8, #0
 800ceb0:	d022      	beq.n	800cef8 <__multadd+0x84>
 800ceb2:	68a3      	ldr	r3, [r4, #8]
 800ceb4:	42b3      	cmp	r3, r6
 800ceb6:	dc19      	bgt.n	800ceec <__multadd+0x78>
 800ceb8:	6861      	ldr	r1, [r4, #4]
 800ceba:	4638      	mov	r0, r7
 800cebc:	3101      	adds	r1, #1
 800cebe:	f7ff ff77 	bl	800cdb0 <_Balloc>
 800cec2:	4605      	mov	r5, r0
 800cec4:	b928      	cbnz	r0, 800ced2 <__multadd+0x5e>
 800cec6:	4602      	mov	r2, r0
 800cec8:	4b0d      	ldr	r3, [pc, #52]	; (800cf00 <__multadd+0x8c>)
 800ceca:	480e      	ldr	r0, [pc, #56]	; (800cf04 <__multadd+0x90>)
 800cecc:	21b5      	movs	r1, #181	; 0xb5
 800cece:	f001 f827 	bl	800df20 <__assert_func>
 800ced2:	6922      	ldr	r2, [r4, #16]
 800ced4:	3202      	adds	r2, #2
 800ced6:	f104 010c 	add.w	r1, r4, #12
 800ceda:	0092      	lsls	r2, r2, #2
 800cedc:	300c      	adds	r0, #12
 800cede:	f7fc fc8b 	bl	80097f8 <memcpy>
 800cee2:	4621      	mov	r1, r4
 800cee4:	4638      	mov	r0, r7
 800cee6:	f7ff ffa3 	bl	800ce30 <_Bfree>
 800ceea:	462c      	mov	r4, r5
 800ceec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cef0:	3601      	adds	r6, #1
 800cef2:	f8c3 8014 	str.w	r8, [r3, #20]
 800cef6:	6126      	str	r6, [r4, #16]
 800cef8:	4620      	mov	r0, r4
 800cefa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cefe:	bf00      	nop
 800cf00:	0800ea0c 	.word	0x0800ea0c
 800cf04:	0800eb00 	.word	0x0800eb00

0800cf08 <__s2b>:
 800cf08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf0c:	460c      	mov	r4, r1
 800cf0e:	4615      	mov	r5, r2
 800cf10:	461f      	mov	r7, r3
 800cf12:	2209      	movs	r2, #9
 800cf14:	3308      	adds	r3, #8
 800cf16:	4606      	mov	r6, r0
 800cf18:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf1c:	2100      	movs	r1, #0
 800cf1e:	2201      	movs	r2, #1
 800cf20:	429a      	cmp	r2, r3
 800cf22:	db09      	blt.n	800cf38 <__s2b+0x30>
 800cf24:	4630      	mov	r0, r6
 800cf26:	f7ff ff43 	bl	800cdb0 <_Balloc>
 800cf2a:	b940      	cbnz	r0, 800cf3e <__s2b+0x36>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	4b19      	ldr	r3, [pc, #100]	; (800cf94 <__s2b+0x8c>)
 800cf30:	4819      	ldr	r0, [pc, #100]	; (800cf98 <__s2b+0x90>)
 800cf32:	21ce      	movs	r1, #206	; 0xce
 800cf34:	f000 fff4 	bl	800df20 <__assert_func>
 800cf38:	0052      	lsls	r2, r2, #1
 800cf3a:	3101      	adds	r1, #1
 800cf3c:	e7f0      	b.n	800cf20 <__s2b+0x18>
 800cf3e:	9b08      	ldr	r3, [sp, #32]
 800cf40:	6143      	str	r3, [r0, #20]
 800cf42:	2d09      	cmp	r5, #9
 800cf44:	f04f 0301 	mov.w	r3, #1
 800cf48:	6103      	str	r3, [r0, #16]
 800cf4a:	dd16      	ble.n	800cf7a <__s2b+0x72>
 800cf4c:	f104 0909 	add.w	r9, r4, #9
 800cf50:	46c8      	mov	r8, r9
 800cf52:	442c      	add	r4, r5
 800cf54:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf58:	4601      	mov	r1, r0
 800cf5a:	3b30      	subs	r3, #48	; 0x30
 800cf5c:	220a      	movs	r2, #10
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f7ff ff88 	bl	800ce74 <__multadd>
 800cf64:	45a0      	cmp	r8, r4
 800cf66:	d1f5      	bne.n	800cf54 <__s2b+0x4c>
 800cf68:	f1a5 0408 	sub.w	r4, r5, #8
 800cf6c:	444c      	add	r4, r9
 800cf6e:	1b2d      	subs	r5, r5, r4
 800cf70:	1963      	adds	r3, r4, r5
 800cf72:	42bb      	cmp	r3, r7
 800cf74:	db04      	blt.n	800cf80 <__s2b+0x78>
 800cf76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf7a:	340a      	adds	r4, #10
 800cf7c:	2509      	movs	r5, #9
 800cf7e:	e7f6      	b.n	800cf6e <__s2b+0x66>
 800cf80:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf84:	4601      	mov	r1, r0
 800cf86:	3b30      	subs	r3, #48	; 0x30
 800cf88:	220a      	movs	r2, #10
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f7ff ff72 	bl	800ce74 <__multadd>
 800cf90:	e7ee      	b.n	800cf70 <__s2b+0x68>
 800cf92:	bf00      	nop
 800cf94:	0800ea0c 	.word	0x0800ea0c
 800cf98:	0800eb00 	.word	0x0800eb00

0800cf9c <__hi0bits>:
 800cf9c:	0c03      	lsrs	r3, r0, #16
 800cf9e:	041b      	lsls	r3, r3, #16
 800cfa0:	b9d3      	cbnz	r3, 800cfd8 <__hi0bits+0x3c>
 800cfa2:	0400      	lsls	r0, r0, #16
 800cfa4:	2310      	movs	r3, #16
 800cfa6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cfaa:	bf04      	itt	eq
 800cfac:	0200      	lsleq	r0, r0, #8
 800cfae:	3308      	addeq	r3, #8
 800cfb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cfb4:	bf04      	itt	eq
 800cfb6:	0100      	lsleq	r0, r0, #4
 800cfb8:	3304      	addeq	r3, #4
 800cfba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cfbe:	bf04      	itt	eq
 800cfc0:	0080      	lsleq	r0, r0, #2
 800cfc2:	3302      	addeq	r3, #2
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	db05      	blt.n	800cfd4 <__hi0bits+0x38>
 800cfc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cfcc:	f103 0301 	add.w	r3, r3, #1
 800cfd0:	bf08      	it	eq
 800cfd2:	2320      	moveq	r3, #32
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	4770      	bx	lr
 800cfd8:	2300      	movs	r3, #0
 800cfda:	e7e4      	b.n	800cfa6 <__hi0bits+0xa>

0800cfdc <__lo0bits>:
 800cfdc:	6803      	ldr	r3, [r0, #0]
 800cfde:	f013 0207 	ands.w	r2, r3, #7
 800cfe2:	4601      	mov	r1, r0
 800cfe4:	d00b      	beq.n	800cffe <__lo0bits+0x22>
 800cfe6:	07da      	lsls	r2, r3, #31
 800cfe8:	d424      	bmi.n	800d034 <__lo0bits+0x58>
 800cfea:	0798      	lsls	r0, r3, #30
 800cfec:	bf49      	itett	mi
 800cfee:	085b      	lsrmi	r3, r3, #1
 800cff0:	089b      	lsrpl	r3, r3, #2
 800cff2:	2001      	movmi	r0, #1
 800cff4:	600b      	strmi	r3, [r1, #0]
 800cff6:	bf5c      	itt	pl
 800cff8:	600b      	strpl	r3, [r1, #0]
 800cffa:	2002      	movpl	r0, #2
 800cffc:	4770      	bx	lr
 800cffe:	b298      	uxth	r0, r3
 800d000:	b9b0      	cbnz	r0, 800d030 <__lo0bits+0x54>
 800d002:	0c1b      	lsrs	r3, r3, #16
 800d004:	2010      	movs	r0, #16
 800d006:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d00a:	bf04      	itt	eq
 800d00c:	0a1b      	lsreq	r3, r3, #8
 800d00e:	3008      	addeq	r0, #8
 800d010:	071a      	lsls	r2, r3, #28
 800d012:	bf04      	itt	eq
 800d014:	091b      	lsreq	r3, r3, #4
 800d016:	3004      	addeq	r0, #4
 800d018:	079a      	lsls	r2, r3, #30
 800d01a:	bf04      	itt	eq
 800d01c:	089b      	lsreq	r3, r3, #2
 800d01e:	3002      	addeq	r0, #2
 800d020:	07da      	lsls	r2, r3, #31
 800d022:	d403      	bmi.n	800d02c <__lo0bits+0x50>
 800d024:	085b      	lsrs	r3, r3, #1
 800d026:	f100 0001 	add.w	r0, r0, #1
 800d02a:	d005      	beq.n	800d038 <__lo0bits+0x5c>
 800d02c:	600b      	str	r3, [r1, #0]
 800d02e:	4770      	bx	lr
 800d030:	4610      	mov	r0, r2
 800d032:	e7e8      	b.n	800d006 <__lo0bits+0x2a>
 800d034:	2000      	movs	r0, #0
 800d036:	4770      	bx	lr
 800d038:	2020      	movs	r0, #32
 800d03a:	4770      	bx	lr

0800d03c <__i2b>:
 800d03c:	b510      	push	{r4, lr}
 800d03e:	460c      	mov	r4, r1
 800d040:	2101      	movs	r1, #1
 800d042:	f7ff feb5 	bl	800cdb0 <_Balloc>
 800d046:	4602      	mov	r2, r0
 800d048:	b928      	cbnz	r0, 800d056 <__i2b+0x1a>
 800d04a:	4b05      	ldr	r3, [pc, #20]	; (800d060 <__i2b+0x24>)
 800d04c:	4805      	ldr	r0, [pc, #20]	; (800d064 <__i2b+0x28>)
 800d04e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d052:	f000 ff65 	bl	800df20 <__assert_func>
 800d056:	2301      	movs	r3, #1
 800d058:	6144      	str	r4, [r0, #20]
 800d05a:	6103      	str	r3, [r0, #16]
 800d05c:	bd10      	pop	{r4, pc}
 800d05e:	bf00      	nop
 800d060:	0800ea0c 	.word	0x0800ea0c
 800d064:	0800eb00 	.word	0x0800eb00

0800d068 <__multiply>:
 800d068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	4614      	mov	r4, r2
 800d06e:	690a      	ldr	r2, [r1, #16]
 800d070:	6923      	ldr	r3, [r4, #16]
 800d072:	429a      	cmp	r2, r3
 800d074:	bfb8      	it	lt
 800d076:	460b      	movlt	r3, r1
 800d078:	460d      	mov	r5, r1
 800d07a:	bfbc      	itt	lt
 800d07c:	4625      	movlt	r5, r4
 800d07e:	461c      	movlt	r4, r3
 800d080:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d084:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d088:	68ab      	ldr	r3, [r5, #8]
 800d08a:	6869      	ldr	r1, [r5, #4]
 800d08c:	eb0a 0709 	add.w	r7, sl, r9
 800d090:	42bb      	cmp	r3, r7
 800d092:	b085      	sub	sp, #20
 800d094:	bfb8      	it	lt
 800d096:	3101      	addlt	r1, #1
 800d098:	f7ff fe8a 	bl	800cdb0 <_Balloc>
 800d09c:	b930      	cbnz	r0, 800d0ac <__multiply+0x44>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	4b42      	ldr	r3, [pc, #264]	; (800d1ac <__multiply+0x144>)
 800d0a2:	4843      	ldr	r0, [pc, #268]	; (800d1b0 <__multiply+0x148>)
 800d0a4:	f240 115d 	movw	r1, #349	; 0x15d
 800d0a8:	f000 ff3a 	bl	800df20 <__assert_func>
 800d0ac:	f100 0614 	add.w	r6, r0, #20
 800d0b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d0b4:	4633      	mov	r3, r6
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	4543      	cmp	r3, r8
 800d0ba:	d31e      	bcc.n	800d0fa <__multiply+0x92>
 800d0bc:	f105 0c14 	add.w	ip, r5, #20
 800d0c0:	f104 0314 	add.w	r3, r4, #20
 800d0c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d0c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d0cc:	9202      	str	r2, [sp, #8]
 800d0ce:	ebac 0205 	sub.w	r2, ip, r5
 800d0d2:	3a15      	subs	r2, #21
 800d0d4:	f022 0203 	bic.w	r2, r2, #3
 800d0d8:	3204      	adds	r2, #4
 800d0da:	f105 0115 	add.w	r1, r5, #21
 800d0de:	458c      	cmp	ip, r1
 800d0e0:	bf38      	it	cc
 800d0e2:	2204      	movcc	r2, #4
 800d0e4:	9201      	str	r2, [sp, #4]
 800d0e6:	9a02      	ldr	r2, [sp, #8]
 800d0e8:	9303      	str	r3, [sp, #12]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d808      	bhi.n	800d100 <__multiply+0x98>
 800d0ee:	2f00      	cmp	r7, #0
 800d0f0:	dc55      	bgt.n	800d19e <__multiply+0x136>
 800d0f2:	6107      	str	r7, [r0, #16]
 800d0f4:	b005      	add	sp, #20
 800d0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fa:	f843 2b04 	str.w	r2, [r3], #4
 800d0fe:	e7db      	b.n	800d0b8 <__multiply+0x50>
 800d100:	f8b3 a000 	ldrh.w	sl, [r3]
 800d104:	f1ba 0f00 	cmp.w	sl, #0
 800d108:	d020      	beq.n	800d14c <__multiply+0xe4>
 800d10a:	f105 0e14 	add.w	lr, r5, #20
 800d10e:	46b1      	mov	r9, r6
 800d110:	2200      	movs	r2, #0
 800d112:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d116:	f8d9 b000 	ldr.w	fp, [r9]
 800d11a:	b2a1      	uxth	r1, r4
 800d11c:	fa1f fb8b 	uxth.w	fp, fp
 800d120:	fb0a b101 	mla	r1, sl, r1, fp
 800d124:	4411      	add	r1, r2
 800d126:	f8d9 2000 	ldr.w	r2, [r9]
 800d12a:	0c24      	lsrs	r4, r4, #16
 800d12c:	0c12      	lsrs	r2, r2, #16
 800d12e:	fb0a 2404 	mla	r4, sl, r4, r2
 800d132:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d136:	b289      	uxth	r1, r1
 800d138:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d13c:	45f4      	cmp	ip, lr
 800d13e:	f849 1b04 	str.w	r1, [r9], #4
 800d142:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d146:	d8e4      	bhi.n	800d112 <__multiply+0xaa>
 800d148:	9901      	ldr	r1, [sp, #4]
 800d14a:	5072      	str	r2, [r6, r1]
 800d14c:	9a03      	ldr	r2, [sp, #12]
 800d14e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d152:	3304      	adds	r3, #4
 800d154:	f1b9 0f00 	cmp.w	r9, #0
 800d158:	d01f      	beq.n	800d19a <__multiply+0x132>
 800d15a:	6834      	ldr	r4, [r6, #0]
 800d15c:	f105 0114 	add.w	r1, r5, #20
 800d160:	46b6      	mov	lr, r6
 800d162:	f04f 0a00 	mov.w	sl, #0
 800d166:	880a      	ldrh	r2, [r1, #0]
 800d168:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d16c:	fb09 b202 	mla	r2, r9, r2, fp
 800d170:	4492      	add	sl, r2
 800d172:	b2a4      	uxth	r4, r4
 800d174:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d178:	f84e 4b04 	str.w	r4, [lr], #4
 800d17c:	f851 4b04 	ldr.w	r4, [r1], #4
 800d180:	f8be 2000 	ldrh.w	r2, [lr]
 800d184:	0c24      	lsrs	r4, r4, #16
 800d186:	fb09 2404 	mla	r4, r9, r4, r2
 800d18a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d18e:	458c      	cmp	ip, r1
 800d190:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d194:	d8e7      	bhi.n	800d166 <__multiply+0xfe>
 800d196:	9a01      	ldr	r2, [sp, #4]
 800d198:	50b4      	str	r4, [r6, r2]
 800d19a:	3604      	adds	r6, #4
 800d19c:	e7a3      	b.n	800d0e6 <__multiply+0x7e>
 800d19e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1a5      	bne.n	800d0f2 <__multiply+0x8a>
 800d1a6:	3f01      	subs	r7, #1
 800d1a8:	e7a1      	b.n	800d0ee <__multiply+0x86>
 800d1aa:	bf00      	nop
 800d1ac:	0800ea0c 	.word	0x0800ea0c
 800d1b0:	0800eb00 	.word	0x0800eb00

0800d1b4 <__pow5mult>:
 800d1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1b8:	4615      	mov	r5, r2
 800d1ba:	f012 0203 	ands.w	r2, r2, #3
 800d1be:	4606      	mov	r6, r0
 800d1c0:	460f      	mov	r7, r1
 800d1c2:	d007      	beq.n	800d1d4 <__pow5mult+0x20>
 800d1c4:	4c25      	ldr	r4, [pc, #148]	; (800d25c <__pow5mult+0xa8>)
 800d1c6:	3a01      	subs	r2, #1
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1ce:	f7ff fe51 	bl	800ce74 <__multadd>
 800d1d2:	4607      	mov	r7, r0
 800d1d4:	10ad      	asrs	r5, r5, #2
 800d1d6:	d03d      	beq.n	800d254 <__pow5mult+0xa0>
 800d1d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d1da:	b97c      	cbnz	r4, 800d1fc <__pow5mult+0x48>
 800d1dc:	2010      	movs	r0, #16
 800d1de:	f7ff fdcd 	bl	800cd7c <malloc>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	6270      	str	r0, [r6, #36]	; 0x24
 800d1e6:	b928      	cbnz	r0, 800d1f4 <__pow5mult+0x40>
 800d1e8:	4b1d      	ldr	r3, [pc, #116]	; (800d260 <__pow5mult+0xac>)
 800d1ea:	481e      	ldr	r0, [pc, #120]	; (800d264 <__pow5mult+0xb0>)
 800d1ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d1f0:	f000 fe96 	bl	800df20 <__assert_func>
 800d1f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1f8:	6004      	str	r4, [r0, #0]
 800d1fa:	60c4      	str	r4, [r0, #12]
 800d1fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d200:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d204:	b94c      	cbnz	r4, 800d21a <__pow5mult+0x66>
 800d206:	f240 2171 	movw	r1, #625	; 0x271
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7ff ff16 	bl	800d03c <__i2b>
 800d210:	2300      	movs	r3, #0
 800d212:	f8c8 0008 	str.w	r0, [r8, #8]
 800d216:	4604      	mov	r4, r0
 800d218:	6003      	str	r3, [r0, #0]
 800d21a:	f04f 0900 	mov.w	r9, #0
 800d21e:	07eb      	lsls	r3, r5, #31
 800d220:	d50a      	bpl.n	800d238 <__pow5mult+0x84>
 800d222:	4639      	mov	r1, r7
 800d224:	4622      	mov	r2, r4
 800d226:	4630      	mov	r0, r6
 800d228:	f7ff ff1e 	bl	800d068 <__multiply>
 800d22c:	4639      	mov	r1, r7
 800d22e:	4680      	mov	r8, r0
 800d230:	4630      	mov	r0, r6
 800d232:	f7ff fdfd 	bl	800ce30 <_Bfree>
 800d236:	4647      	mov	r7, r8
 800d238:	106d      	asrs	r5, r5, #1
 800d23a:	d00b      	beq.n	800d254 <__pow5mult+0xa0>
 800d23c:	6820      	ldr	r0, [r4, #0]
 800d23e:	b938      	cbnz	r0, 800d250 <__pow5mult+0x9c>
 800d240:	4622      	mov	r2, r4
 800d242:	4621      	mov	r1, r4
 800d244:	4630      	mov	r0, r6
 800d246:	f7ff ff0f 	bl	800d068 <__multiply>
 800d24a:	6020      	str	r0, [r4, #0]
 800d24c:	f8c0 9000 	str.w	r9, [r0]
 800d250:	4604      	mov	r4, r0
 800d252:	e7e4      	b.n	800d21e <__pow5mult+0x6a>
 800d254:	4638      	mov	r0, r7
 800d256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d25a:	bf00      	nop
 800d25c:	0800ec50 	.word	0x0800ec50
 800d260:	0800e996 	.word	0x0800e996
 800d264:	0800eb00 	.word	0x0800eb00

0800d268 <__lshift>:
 800d268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d26c:	460c      	mov	r4, r1
 800d26e:	6849      	ldr	r1, [r1, #4]
 800d270:	6923      	ldr	r3, [r4, #16]
 800d272:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d276:	68a3      	ldr	r3, [r4, #8]
 800d278:	4607      	mov	r7, r0
 800d27a:	4691      	mov	r9, r2
 800d27c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d280:	f108 0601 	add.w	r6, r8, #1
 800d284:	42b3      	cmp	r3, r6
 800d286:	db0b      	blt.n	800d2a0 <__lshift+0x38>
 800d288:	4638      	mov	r0, r7
 800d28a:	f7ff fd91 	bl	800cdb0 <_Balloc>
 800d28e:	4605      	mov	r5, r0
 800d290:	b948      	cbnz	r0, 800d2a6 <__lshift+0x3e>
 800d292:	4602      	mov	r2, r0
 800d294:	4b28      	ldr	r3, [pc, #160]	; (800d338 <__lshift+0xd0>)
 800d296:	4829      	ldr	r0, [pc, #164]	; (800d33c <__lshift+0xd4>)
 800d298:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d29c:	f000 fe40 	bl	800df20 <__assert_func>
 800d2a0:	3101      	adds	r1, #1
 800d2a2:	005b      	lsls	r3, r3, #1
 800d2a4:	e7ee      	b.n	800d284 <__lshift+0x1c>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	f100 0114 	add.w	r1, r0, #20
 800d2ac:	f100 0210 	add.w	r2, r0, #16
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	4553      	cmp	r3, sl
 800d2b4:	db33      	blt.n	800d31e <__lshift+0xb6>
 800d2b6:	6920      	ldr	r0, [r4, #16]
 800d2b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2bc:	f104 0314 	add.w	r3, r4, #20
 800d2c0:	f019 091f 	ands.w	r9, r9, #31
 800d2c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2cc:	d02b      	beq.n	800d326 <__lshift+0xbe>
 800d2ce:	f1c9 0e20 	rsb	lr, r9, #32
 800d2d2:	468a      	mov	sl, r1
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	6818      	ldr	r0, [r3, #0]
 800d2d8:	fa00 f009 	lsl.w	r0, r0, r9
 800d2dc:	4302      	orrs	r2, r0
 800d2de:	f84a 2b04 	str.w	r2, [sl], #4
 800d2e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2e6:	459c      	cmp	ip, r3
 800d2e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d2ec:	d8f3      	bhi.n	800d2d6 <__lshift+0x6e>
 800d2ee:	ebac 0304 	sub.w	r3, ip, r4
 800d2f2:	3b15      	subs	r3, #21
 800d2f4:	f023 0303 	bic.w	r3, r3, #3
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	f104 0015 	add.w	r0, r4, #21
 800d2fe:	4584      	cmp	ip, r0
 800d300:	bf38      	it	cc
 800d302:	2304      	movcc	r3, #4
 800d304:	50ca      	str	r2, [r1, r3]
 800d306:	b10a      	cbz	r2, 800d30c <__lshift+0xa4>
 800d308:	f108 0602 	add.w	r6, r8, #2
 800d30c:	3e01      	subs	r6, #1
 800d30e:	4638      	mov	r0, r7
 800d310:	612e      	str	r6, [r5, #16]
 800d312:	4621      	mov	r1, r4
 800d314:	f7ff fd8c 	bl	800ce30 <_Bfree>
 800d318:	4628      	mov	r0, r5
 800d31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d322:	3301      	adds	r3, #1
 800d324:	e7c5      	b.n	800d2b2 <__lshift+0x4a>
 800d326:	3904      	subs	r1, #4
 800d328:	f853 2b04 	ldr.w	r2, [r3], #4
 800d32c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d330:	459c      	cmp	ip, r3
 800d332:	d8f9      	bhi.n	800d328 <__lshift+0xc0>
 800d334:	e7ea      	b.n	800d30c <__lshift+0xa4>
 800d336:	bf00      	nop
 800d338:	0800ea0c 	.word	0x0800ea0c
 800d33c:	0800eb00 	.word	0x0800eb00

0800d340 <__mcmp>:
 800d340:	b530      	push	{r4, r5, lr}
 800d342:	6902      	ldr	r2, [r0, #16]
 800d344:	690c      	ldr	r4, [r1, #16]
 800d346:	1b12      	subs	r2, r2, r4
 800d348:	d10e      	bne.n	800d368 <__mcmp+0x28>
 800d34a:	f100 0314 	add.w	r3, r0, #20
 800d34e:	3114      	adds	r1, #20
 800d350:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d354:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d358:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d35c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d360:	42a5      	cmp	r5, r4
 800d362:	d003      	beq.n	800d36c <__mcmp+0x2c>
 800d364:	d305      	bcc.n	800d372 <__mcmp+0x32>
 800d366:	2201      	movs	r2, #1
 800d368:	4610      	mov	r0, r2
 800d36a:	bd30      	pop	{r4, r5, pc}
 800d36c:	4283      	cmp	r3, r0
 800d36e:	d3f3      	bcc.n	800d358 <__mcmp+0x18>
 800d370:	e7fa      	b.n	800d368 <__mcmp+0x28>
 800d372:	f04f 32ff 	mov.w	r2, #4294967295
 800d376:	e7f7      	b.n	800d368 <__mcmp+0x28>

0800d378 <__mdiff>:
 800d378:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	460c      	mov	r4, r1
 800d37e:	4606      	mov	r6, r0
 800d380:	4611      	mov	r1, r2
 800d382:	4620      	mov	r0, r4
 800d384:	4617      	mov	r7, r2
 800d386:	f7ff ffdb 	bl	800d340 <__mcmp>
 800d38a:	1e05      	subs	r5, r0, #0
 800d38c:	d110      	bne.n	800d3b0 <__mdiff+0x38>
 800d38e:	4629      	mov	r1, r5
 800d390:	4630      	mov	r0, r6
 800d392:	f7ff fd0d 	bl	800cdb0 <_Balloc>
 800d396:	b930      	cbnz	r0, 800d3a6 <__mdiff+0x2e>
 800d398:	4b39      	ldr	r3, [pc, #228]	; (800d480 <__mdiff+0x108>)
 800d39a:	4602      	mov	r2, r0
 800d39c:	f240 2132 	movw	r1, #562	; 0x232
 800d3a0:	4838      	ldr	r0, [pc, #224]	; (800d484 <__mdiff+0x10c>)
 800d3a2:	f000 fdbd 	bl	800df20 <__assert_func>
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b0:	bfa4      	itt	ge
 800d3b2:	463b      	movge	r3, r7
 800d3b4:	4627      	movge	r7, r4
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	6879      	ldr	r1, [r7, #4]
 800d3ba:	bfa6      	itte	ge
 800d3bc:	461c      	movge	r4, r3
 800d3be:	2500      	movge	r5, #0
 800d3c0:	2501      	movlt	r5, #1
 800d3c2:	f7ff fcf5 	bl	800cdb0 <_Balloc>
 800d3c6:	b920      	cbnz	r0, 800d3d2 <__mdiff+0x5a>
 800d3c8:	4b2d      	ldr	r3, [pc, #180]	; (800d480 <__mdiff+0x108>)
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d3d0:	e7e6      	b.n	800d3a0 <__mdiff+0x28>
 800d3d2:	693e      	ldr	r6, [r7, #16]
 800d3d4:	60c5      	str	r5, [r0, #12]
 800d3d6:	6925      	ldr	r5, [r4, #16]
 800d3d8:	f107 0114 	add.w	r1, r7, #20
 800d3dc:	f104 0914 	add.w	r9, r4, #20
 800d3e0:	f100 0e14 	add.w	lr, r0, #20
 800d3e4:	f107 0210 	add.w	r2, r7, #16
 800d3e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d3ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d3f0:	46f2      	mov	sl, lr
 800d3f2:	2700      	movs	r7, #0
 800d3f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3fc:	fa1f f883 	uxth.w	r8, r3
 800d400:	fa17 f78b 	uxtah	r7, r7, fp
 800d404:	0c1b      	lsrs	r3, r3, #16
 800d406:	eba7 0808 	sub.w	r8, r7, r8
 800d40a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d40e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d412:	fa1f f888 	uxth.w	r8, r8
 800d416:	141f      	asrs	r7, r3, #16
 800d418:	454d      	cmp	r5, r9
 800d41a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d41e:	f84a 3b04 	str.w	r3, [sl], #4
 800d422:	d8e7      	bhi.n	800d3f4 <__mdiff+0x7c>
 800d424:	1b2b      	subs	r3, r5, r4
 800d426:	3b15      	subs	r3, #21
 800d428:	f023 0303 	bic.w	r3, r3, #3
 800d42c:	3304      	adds	r3, #4
 800d42e:	3415      	adds	r4, #21
 800d430:	42a5      	cmp	r5, r4
 800d432:	bf38      	it	cc
 800d434:	2304      	movcc	r3, #4
 800d436:	4419      	add	r1, r3
 800d438:	4473      	add	r3, lr
 800d43a:	469e      	mov	lr, r3
 800d43c:	460d      	mov	r5, r1
 800d43e:	4565      	cmp	r5, ip
 800d440:	d30e      	bcc.n	800d460 <__mdiff+0xe8>
 800d442:	f10c 0203 	add.w	r2, ip, #3
 800d446:	1a52      	subs	r2, r2, r1
 800d448:	f022 0203 	bic.w	r2, r2, #3
 800d44c:	3903      	subs	r1, #3
 800d44e:	458c      	cmp	ip, r1
 800d450:	bf38      	it	cc
 800d452:	2200      	movcc	r2, #0
 800d454:	441a      	add	r2, r3
 800d456:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d45a:	b17b      	cbz	r3, 800d47c <__mdiff+0x104>
 800d45c:	6106      	str	r6, [r0, #16]
 800d45e:	e7a5      	b.n	800d3ac <__mdiff+0x34>
 800d460:	f855 8b04 	ldr.w	r8, [r5], #4
 800d464:	fa17 f488 	uxtah	r4, r7, r8
 800d468:	1422      	asrs	r2, r4, #16
 800d46a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d46e:	b2a4      	uxth	r4, r4
 800d470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d474:	f84e 4b04 	str.w	r4, [lr], #4
 800d478:	1417      	asrs	r7, r2, #16
 800d47a:	e7e0      	b.n	800d43e <__mdiff+0xc6>
 800d47c:	3e01      	subs	r6, #1
 800d47e:	e7ea      	b.n	800d456 <__mdiff+0xde>
 800d480:	0800ea0c 	.word	0x0800ea0c
 800d484:	0800eb00 	.word	0x0800eb00

0800d488 <__ulp>:
 800d488:	b082      	sub	sp, #8
 800d48a:	ed8d 0b00 	vstr	d0, [sp]
 800d48e:	9b01      	ldr	r3, [sp, #4]
 800d490:	4912      	ldr	r1, [pc, #72]	; (800d4dc <__ulp+0x54>)
 800d492:	4019      	ands	r1, r3
 800d494:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d498:	2900      	cmp	r1, #0
 800d49a:	dd05      	ble.n	800d4a8 <__ulp+0x20>
 800d49c:	2200      	movs	r2, #0
 800d49e:	460b      	mov	r3, r1
 800d4a0:	ec43 2b10 	vmov	d0, r2, r3
 800d4a4:	b002      	add	sp, #8
 800d4a6:	4770      	bx	lr
 800d4a8:	4249      	negs	r1, r1
 800d4aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d4ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d4b2:	f04f 0200 	mov.w	r2, #0
 800d4b6:	f04f 0300 	mov.w	r3, #0
 800d4ba:	da04      	bge.n	800d4c6 <__ulp+0x3e>
 800d4bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d4c0:	fa41 f300 	asr.w	r3, r1, r0
 800d4c4:	e7ec      	b.n	800d4a0 <__ulp+0x18>
 800d4c6:	f1a0 0114 	sub.w	r1, r0, #20
 800d4ca:	291e      	cmp	r1, #30
 800d4cc:	bfda      	itte	le
 800d4ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d4d2:	fa20 f101 	lsrle.w	r1, r0, r1
 800d4d6:	2101      	movgt	r1, #1
 800d4d8:	460a      	mov	r2, r1
 800d4da:	e7e1      	b.n	800d4a0 <__ulp+0x18>
 800d4dc:	7ff00000 	.word	0x7ff00000

0800d4e0 <__b2d>:
 800d4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e2:	6905      	ldr	r5, [r0, #16]
 800d4e4:	f100 0714 	add.w	r7, r0, #20
 800d4e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d4ec:	1f2e      	subs	r6, r5, #4
 800d4ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f7ff fd52 	bl	800cf9c <__hi0bits>
 800d4f8:	f1c0 0320 	rsb	r3, r0, #32
 800d4fc:	280a      	cmp	r0, #10
 800d4fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d57c <__b2d+0x9c>
 800d502:	600b      	str	r3, [r1, #0]
 800d504:	dc14      	bgt.n	800d530 <__b2d+0x50>
 800d506:	f1c0 0e0b 	rsb	lr, r0, #11
 800d50a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d50e:	42b7      	cmp	r7, r6
 800d510:	ea41 030c 	orr.w	r3, r1, ip
 800d514:	bf34      	ite	cc
 800d516:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d51a:	2100      	movcs	r1, #0
 800d51c:	3015      	adds	r0, #21
 800d51e:	fa04 f000 	lsl.w	r0, r4, r0
 800d522:	fa21 f10e 	lsr.w	r1, r1, lr
 800d526:	ea40 0201 	orr.w	r2, r0, r1
 800d52a:	ec43 2b10 	vmov	d0, r2, r3
 800d52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d530:	42b7      	cmp	r7, r6
 800d532:	bf3a      	itte	cc
 800d534:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d538:	f1a5 0608 	subcc.w	r6, r5, #8
 800d53c:	2100      	movcs	r1, #0
 800d53e:	380b      	subs	r0, #11
 800d540:	d017      	beq.n	800d572 <__b2d+0x92>
 800d542:	f1c0 0c20 	rsb	ip, r0, #32
 800d546:	fa04 f500 	lsl.w	r5, r4, r0
 800d54a:	42be      	cmp	r6, r7
 800d54c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d550:	ea45 0504 	orr.w	r5, r5, r4
 800d554:	bf8c      	ite	hi
 800d556:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d55a:	2400      	movls	r4, #0
 800d55c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d560:	fa01 f000 	lsl.w	r0, r1, r0
 800d564:	fa24 f40c 	lsr.w	r4, r4, ip
 800d568:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d56c:	ea40 0204 	orr.w	r2, r0, r4
 800d570:	e7db      	b.n	800d52a <__b2d+0x4a>
 800d572:	ea44 030c 	orr.w	r3, r4, ip
 800d576:	460a      	mov	r2, r1
 800d578:	e7d7      	b.n	800d52a <__b2d+0x4a>
 800d57a:	bf00      	nop
 800d57c:	3ff00000 	.word	0x3ff00000

0800d580 <__d2b>:
 800d580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d584:	4689      	mov	r9, r1
 800d586:	2101      	movs	r1, #1
 800d588:	ec57 6b10 	vmov	r6, r7, d0
 800d58c:	4690      	mov	r8, r2
 800d58e:	f7ff fc0f 	bl	800cdb0 <_Balloc>
 800d592:	4604      	mov	r4, r0
 800d594:	b930      	cbnz	r0, 800d5a4 <__d2b+0x24>
 800d596:	4602      	mov	r2, r0
 800d598:	4b25      	ldr	r3, [pc, #148]	; (800d630 <__d2b+0xb0>)
 800d59a:	4826      	ldr	r0, [pc, #152]	; (800d634 <__d2b+0xb4>)
 800d59c:	f240 310a 	movw	r1, #778	; 0x30a
 800d5a0:	f000 fcbe 	bl	800df20 <__assert_func>
 800d5a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d5a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d5ac:	bb35      	cbnz	r5, 800d5fc <__d2b+0x7c>
 800d5ae:	2e00      	cmp	r6, #0
 800d5b0:	9301      	str	r3, [sp, #4]
 800d5b2:	d028      	beq.n	800d606 <__d2b+0x86>
 800d5b4:	4668      	mov	r0, sp
 800d5b6:	9600      	str	r6, [sp, #0]
 800d5b8:	f7ff fd10 	bl	800cfdc <__lo0bits>
 800d5bc:	9900      	ldr	r1, [sp, #0]
 800d5be:	b300      	cbz	r0, 800d602 <__d2b+0x82>
 800d5c0:	9a01      	ldr	r2, [sp, #4]
 800d5c2:	f1c0 0320 	rsb	r3, r0, #32
 800d5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5ca:	430b      	orrs	r3, r1
 800d5cc:	40c2      	lsrs	r2, r0
 800d5ce:	6163      	str	r3, [r4, #20]
 800d5d0:	9201      	str	r2, [sp, #4]
 800d5d2:	9b01      	ldr	r3, [sp, #4]
 800d5d4:	61a3      	str	r3, [r4, #24]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	bf14      	ite	ne
 800d5da:	2202      	movne	r2, #2
 800d5dc:	2201      	moveq	r2, #1
 800d5de:	6122      	str	r2, [r4, #16]
 800d5e0:	b1d5      	cbz	r5, 800d618 <__d2b+0x98>
 800d5e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d5e6:	4405      	add	r5, r0
 800d5e8:	f8c9 5000 	str.w	r5, [r9]
 800d5ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d5f0:	f8c8 0000 	str.w	r0, [r8]
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	b003      	add	sp, #12
 800d5f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d600:	e7d5      	b.n	800d5ae <__d2b+0x2e>
 800d602:	6161      	str	r1, [r4, #20]
 800d604:	e7e5      	b.n	800d5d2 <__d2b+0x52>
 800d606:	a801      	add	r0, sp, #4
 800d608:	f7ff fce8 	bl	800cfdc <__lo0bits>
 800d60c:	9b01      	ldr	r3, [sp, #4]
 800d60e:	6163      	str	r3, [r4, #20]
 800d610:	2201      	movs	r2, #1
 800d612:	6122      	str	r2, [r4, #16]
 800d614:	3020      	adds	r0, #32
 800d616:	e7e3      	b.n	800d5e0 <__d2b+0x60>
 800d618:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d61c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d620:	f8c9 0000 	str.w	r0, [r9]
 800d624:	6918      	ldr	r0, [r3, #16]
 800d626:	f7ff fcb9 	bl	800cf9c <__hi0bits>
 800d62a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d62e:	e7df      	b.n	800d5f0 <__d2b+0x70>
 800d630:	0800ea0c 	.word	0x0800ea0c
 800d634:	0800eb00 	.word	0x0800eb00

0800d638 <__ratio>:
 800d638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d63c:	4688      	mov	r8, r1
 800d63e:	4669      	mov	r1, sp
 800d640:	4681      	mov	r9, r0
 800d642:	f7ff ff4d 	bl	800d4e0 <__b2d>
 800d646:	a901      	add	r1, sp, #4
 800d648:	4640      	mov	r0, r8
 800d64a:	ec55 4b10 	vmov	r4, r5, d0
 800d64e:	f7ff ff47 	bl	800d4e0 <__b2d>
 800d652:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d656:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d65a:	eba3 0c02 	sub.w	ip, r3, r2
 800d65e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d662:	1a9b      	subs	r3, r3, r2
 800d664:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d668:	ec51 0b10 	vmov	r0, r1, d0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	bfd6      	itet	le
 800d670:	460a      	movle	r2, r1
 800d672:	462a      	movgt	r2, r5
 800d674:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d678:	468b      	mov	fp, r1
 800d67a:	462f      	mov	r7, r5
 800d67c:	bfd4      	ite	le
 800d67e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d682:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d686:	4620      	mov	r0, r4
 800d688:	ee10 2a10 	vmov	r2, s0
 800d68c:	465b      	mov	r3, fp
 800d68e:	4639      	mov	r1, r7
 800d690:	f7f3 f8dc 	bl	800084c <__aeabi_ddiv>
 800d694:	ec41 0b10 	vmov	d0, r0, r1
 800d698:	b003      	add	sp, #12
 800d69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d69e <__copybits>:
 800d69e:	3901      	subs	r1, #1
 800d6a0:	b570      	push	{r4, r5, r6, lr}
 800d6a2:	1149      	asrs	r1, r1, #5
 800d6a4:	6914      	ldr	r4, [r2, #16]
 800d6a6:	3101      	adds	r1, #1
 800d6a8:	f102 0314 	add.w	r3, r2, #20
 800d6ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d6b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d6b4:	1f05      	subs	r5, r0, #4
 800d6b6:	42a3      	cmp	r3, r4
 800d6b8:	d30c      	bcc.n	800d6d4 <__copybits+0x36>
 800d6ba:	1aa3      	subs	r3, r4, r2
 800d6bc:	3b11      	subs	r3, #17
 800d6be:	f023 0303 	bic.w	r3, r3, #3
 800d6c2:	3211      	adds	r2, #17
 800d6c4:	42a2      	cmp	r2, r4
 800d6c6:	bf88      	it	hi
 800d6c8:	2300      	movhi	r3, #0
 800d6ca:	4418      	add	r0, r3
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	4288      	cmp	r0, r1
 800d6d0:	d305      	bcc.n	800d6de <__copybits+0x40>
 800d6d2:	bd70      	pop	{r4, r5, r6, pc}
 800d6d4:	f853 6b04 	ldr.w	r6, [r3], #4
 800d6d8:	f845 6f04 	str.w	r6, [r5, #4]!
 800d6dc:	e7eb      	b.n	800d6b6 <__copybits+0x18>
 800d6de:	f840 3b04 	str.w	r3, [r0], #4
 800d6e2:	e7f4      	b.n	800d6ce <__copybits+0x30>

0800d6e4 <__any_on>:
 800d6e4:	f100 0214 	add.w	r2, r0, #20
 800d6e8:	6900      	ldr	r0, [r0, #16]
 800d6ea:	114b      	asrs	r3, r1, #5
 800d6ec:	4298      	cmp	r0, r3
 800d6ee:	b510      	push	{r4, lr}
 800d6f0:	db11      	blt.n	800d716 <__any_on+0x32>
 800d6f2:	dd0a      	ble.n	800d70a <__any_on+0x26>
 800d6f4:	f011 011f 	ands.w	r1, r1, #31
 800d6f8:	d007      	beq.n	800d70a <__any_on+0x26>
 800d6fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d6fe:	fa24 f001 	lsr.w	r0, r4, r1
 800d702:	fa00 f101 	lsl.w	r1, r0, r1
 800d706:	428c      	cmp	r4, r1
 800d708:	d10b      	bne.n	800d722 <__any_on+0x3e>
 800d70a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d70e:	4293      	cmp	r3, r2
 800d710:	d803      	bhi.n	800d71a <__any_on+0x36>
 800d712:	2000      	movs	r0, #0
 800d714:	bd10      	pop	{r4, pc}
 800d716:	4603      	mov	r3, r0
 800d718:	e7f7      	b.n	800d70a <__any_on+0x26>
 800d71a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d71e:	2900      	cmp	r1, #0
 800d720:	d0f5      	beq.n	800d70e <__any_on+0x2a>
 800d722:	2001      	movs	r0, #1
 800d724:	e7f6      	b.n	800d714 <__any_on+0x30>

0800d726 <_calloc_r>:
 800d726:	b513      	push	{r0, r1, r4, lr}
 800d728:	434a      	muls	r2, r1
 800d72a:	4611      	mov	r1, r2
 800d72c:	9201      	str	r2, [sp, #4]
 800d72e:	f000 f859 	bl	800d7e4 <_malloc_r>
 800d732:	4604      	mov	r4, r0
 800d734:	b118      	cbz	r0, 800d73e <_calloc_r+0x18>
 800d736:	9a01      	ldr	r2, [sp, #4]
 800d738:	2100      	movs	r1, #0
 800d73a:	f7fc f86b 	bl	8009814 <memset>
 800d73e:	4620      	mov	r0, r4
 800d740:	b002      	add	sp, #8
 800d742:	bd10      	pop	{r4, pc}

0800d744 <_free_r>:
 800d744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d746:	2900      	cmp	r1, #0
 800d748:	d048      	beq.n	800d7dc <_free_r+0x98>
 800d74a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d74e:	9001      	str	r0, [sp, #4]
 800d750:	2b00      	cmp	r3, #0
 800d752:	f1a1 0404 	sub.w	r4, r1, #4
 800d756:	bfb8      	it	lt
 800d758:	18e4      	addlt	r4, r4, r3
 800d75a:	f000 fc6f 	bl	800e03c <__malloc_lock>
 800d75e:	4a20      	ldr	r2, [pc, #128]	; (800d7e0 <_free_r+0x9c>)
 800d760:	9801      	ldr	r0, [sp, #4]
 800d762:	6813      	ldr	r3, [r2, #0]
 800d764:	4615      	mov	r5, r2
 800d766:	b933      	cbnz	r3, 800d776 <_free_r+0x32>
 800d768:	6063      	str	r3, [r4, #4]
 800d76a:	6014      	str	r4, [r2, #0]
 800d76c:	b003      	add	sp, #12
 800d76e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d772:	f000 bc69 	b.w	800e048 <__malloc_unlock>
 800d776:	42a3      	cmp	r3, r4
 800d778:	d90b      	bls.n	800d792 <_free_r+0x4e>
 800d77a:	6821      	ldr	r1, [r4, #0]
 800d77c:	1862      	adds	r2, r4, r1
 800d77e:	4293      	cmp	r3, r2
 800d780:	bf04      	itt	eq
 800d782:	681a      	ldreq	r2, [r3, #0]
 800d784:	685b      	ldreq	r3, [r3, #4]
 800d786:	6063      	str	r3, [r4, #4]
 800d788:	bf04      	itt	eq
 800d78a:	1852      	addeq	r2, r2, r1
 800d78c:	6022      	streq	r2, [r4, #0]
 800d78e:	602c      	str	r4, [r5, #0]
 800d790:	e7ec      	b.n	800d76c <_free_r+0x28>
 800d792:	461a      	mov	r2, r3
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	b10b      	cbz	r3, 800d79c <_free_r+0x58>
 800d798:	42a3      	cmp	r3, r4
 800d79a:	d9fa      	bls.n	800d792 <_free_r+0x4e>
 800d79c:	6811      	ldr	r1, [r2, #0]
 800d79e:	1855      	adds	r5, r2, r1
 800d7a0:	42a5      	cmp	r5, r4
 800d7a2:	d10b      	bne.n	800d7bc <_free_r+0x78>
 800d7a4:	6824      	ldr	r4, [r4, #0]
 800d7a6:	4421      	add	r1, r4
 800d7a8:	1854      	adds	r4, r2, r1
 800d7aa:	42a3      	cmp	r3, r4
 800d7ac:	6011      	str	r1, [r2, #0]
 800d7ae:	d1dd      	bne.n	800d76c <_free_r+0x28>
 800d7b0:	681c      	ldr	r4, [r3, #0]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	6053      	str	r3, [r2, #4]
 800d7b6:	4421      	add	r1, r4
 800d7b8:	6011      	str	r1, [r2, #0]
 800d7ba:	e7d7      	b.n	800d76c <_free_r+0x28>
 800d7bc:	d902      	bls.n	800d7c4 <_free_r+0x80>
 800d7be:	230c      	movs	r3, #12
 800d7c0:	6003      	str	r3, [r0, #0]
 800d7c2:	e7d3      	b.n	800d76c <_free_r+0x28>
 800d7c4:	6825      	ldr	r5, [r4, #0]
 800d7c6:	1961      	adds	r1, r4, r5
 800d7c8:	428b      	cmp	r3, r1
 800d7ca:	bf04      	itt	eq
 800d7cc:	6819      	ldreq	r1, [r3, #0]
 800d7ce:	685b      	ldreq	r3, [r3, #4]
 800d7d0:	6063      	str	r3, [r4, #4]
 800d7d2:	bf04      	itt	eq
 800d7d4:	1949      	addeq	r1, r1, r5
 800d7d6:	6021      	streq	r1, [r4, #0]
 800d7d8:	6054      	str	r4, [r2, #4]
 800d7da:	e7c7      	b.n	800d76c <_free_r+0x28>
 800d7dc:	b003      	add	sp, #12
 800d7de:	bd30      	pop	{r4, r5, pc}
 800d7e0:	20000200 	.word	0x20000200

0800d7e4 <_malloc_r>:
 800d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e6:	1ccd      	adds	r5, r1, #3
 800d7e8:	f025 0503 	bic.w	r5, r5, #3
 800d7ec:	3508      	adds	r5, #8
 800d7ee:	2d0c      	cmp	r5, #12
 800d7f0:	bf38      	it	cc
 800d7f2:	250c      	movcc	r5, #12
 800d7f4:	2d00      	cmp	r5, #0
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	db01      	blt.n	800d7fe <_malloc_r+0x1a>
 800d7fa:	42a9      	cmp	r1, r5
 800d7fc:	d903      	bls.n	800d806 <_malloc_r+0x22>
 800d7fe:	230c      	movs	r3, #12
 800d800:	6033      	str	r3, [r6, #0]
 800d802:	2000      	movs	r0, #0
 800d804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d806:	f000 fc19 	bl	800e03c <__malloc_lock>
 800d80a:	4921      	ldr	r1, [pc, #132]	; (800d890 <_malloc_r+0xac>)
 800d80c:	680a      	ldr	r2, [r1, #0]
 800d80e:	4614      	mov	r4, r2
 800d810:	b99c      	cbnz	r4, 800d83a <_malloc_r+0x56>
 800d812:	4f20      	ldr	r7, [pc, #128]	; (800d894 <_malloc_r+0xb0>)
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	b923      	cbnz	r3, 800d822 <_malloc_r+0x3e>
 800d818:	4621      	mov	r1, r4
 800d81a:	4630      	mov	r0, r6
 800d81c:	f000 fafc 	bl	800de18 <_sbrk_r>
 800d820:	6038      	str	r0, [r7, #0]
 800d822:	4629      	mov	r1, r5
 800d824:	4630      	mov	r0, r6
 800d826:	f000 faf7 	bl	800de18 <_sbrk_r>
 800d82a:	1c43      	adds	r3, r0, #1
 800d82c:	d123      	bne.n	800d876 <_malloc_r+0x92>
 800d82e:	230c      	movs	r3, #12
 800d830:	6033      	str	r3, [r6, #0]
 800d832:	4630      	mov	r0, r6
 800d834:	f000 fc08 	bl	800e048 <__malloc_unlock>
 800d838:	e7e3      	b.n	800d802 <_malloc_r+0x1e>
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	1b5b      	subs	r3, r3, r5
 800d83e:	d417      	bmi.n	800d870 <_malloc_r+0x8c>
 800d840:	2b0b      	cmp	r3, #11
 800d842:	d903      	bls.n	800d84c <_malloc_r+0x68>
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	441c      	add	r4, r3
 800d848:	6025      	str	r5, [r4, #0]
 800d84a:	e004      	b.n	800d856 <_malloc_r+0x72>
 800d84c:	6863      	ldr	r3, [r4, #4]
 800d84e:	42a2      	cmp	r2, r4
 800d850:	bf0c      	ite	eq
 800d852:	600b      	streq	r3, [r1, #0]
 800d854:	6053      	strne	r3, [r2, #4]
 800d856:	4630      	mov	r0, r6
 800d858:	f000 fbf6 	bl	800e048 <__malloc_unlock>
 800d85c:	f104 000b 	add.w	r0, r4, #11
 800d860:	1d23      	adds	r3, r4, #4
 800d862:	f020 0007 	bic.w	r0, r0, #7
 800d866:	1ac2      	subs	r2, r0, r3
 800d868:	d0cc      	beq.n	800d804 <_malloc_r+0x20>
 800d86a:	1a1b      	subs	r3, r3, r0
 800d86c:	50a3      	str	r3, [r4, r2]
 800d86e:	e7c9      	b.n	800d804 <_malloc_r+0x20>
 800d870:	4622      	mov	r2, r4
 800d872:	6864      	ldr	r4, [r4, #4]
 800d874:	e7cc      	b.n	800d810 <_malloc_r+0x2c>
 800d876:	1cc4      	adds	r4, r0, #3
 800d878:	f024 0403 	bic.w	r4, r4, #3
 800d87c:	42a0      	cmp	r0, r4
 800d87e:	d0e3      	beq.n	800d848 <_malloc_r+0x64>
 800d880:	1a21      	subs	r1, r4, r0
 800d882:	4630      	mov	r0, r6
 800d884:	f000 fac8 	bl	800de18 <_sbrk_r>
 800d888:	3001      	adds	r0, #1
 800d88a:	d1dd      	bne.n	800d848 <_malloc_r+0x64>
 800d88c:	e7cf      	b.n	800d82e <_malloc_r+0x4a>
 800d88e:	bf00      	nop
 800d890:	20000200 	.word	0x20000200
 800d894:	20000204 	.word	0x20000204

0800d898 <__ssputs_r>:
 800d898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d89c:	688e      	ldr	r6, [r1, #8]
 800d89e:	429e      	cmp	r6, r3
 800d8a0:	4682      	mov	sl, r0
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	4690      	mov	r8, r2
 800d8a6:	461f      	mov	r7, r3
 800d8a8:	d838      	bhi.n	800d91c <__ssputs_r+0x84>
 800d8aa:	898a      	ldrh	r2, [r1, #12]
 800d8ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8b0:	d032      	beq.n	800d918 <__ssputs_r+0x80>
 800d8b2:	6825      	ldr	r5, [r4, #0]
 800d8b4:	6909      	ldr	r1, [r1, #16]
 800d8b6:	eba5 0901 	sub.w	r9, r5, r1
 800d8ba:	6965      	ldr	r5, [r4, #20]
 800d8bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	444b      	add	r3, r9
 800d8c8:	106d      	asrs	r5, r5, #1
 800d8ca:	429d      	cmp	r5, r3
 800d8cc:	bf38      	it	cc
 800d8ce:	461d      	movcc	r5, r3
 800d8d0:	0553      	lsls	r3, r2, #21
 800d8d2:	d531      	bpl.n	800d938 <__ssputs_r+0xa0>
 800d8d4:	4629      	mov	r1, r5
 800d8d6:	f7ff ff85 	bl	800d7e4 <_malloc_r>
 800d8da:	4606      	mov	r6, r0
 800d8dc:	b950      	cbnz	r0, 800d8f4 <__ssputs_r+0x5c>
 800d8de:	230c      	movs	r3, #12
 800d8e0:	f8ca 3000 	str.w	r3, [sl]
 800d8e4:	89a3      	ldrh	r3, [r4, #12]
 800d8e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ea:	81a3      	strh	r3, [r4, #12]
 800d8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f4:	6921      	ldr	r1, [r4, #16]
 800d8f6:	464a      	mov	r2, r9
 800d8f8:	f7fb ff7e 	bl	80097f8 <memcpy>
 800d8fc:	89a3      	ldrh	r3, [r4, #12]
 800d8fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d906:	81a3      	strh	r3, [r4, #12]
 800d908:	6126      	str	r6, [r4, #16]
 800d90a:	6165      	str	r5, [r4, #20]
 800d90c:	444e      	add	r6, r9
 800d90e:	eba5 0509 	sub.w	r5, r5, r9
 800d912:	6026      	str	r6, [r4, #0]
 800d914:	60a5      	str	r5, [r4, #8]
 800d916:	463e      	mov	r6, r7
 800d918:	42be      	cmp	r6, r7
 800d91a:	d900      	bls.n	800d91e <__ssputs_r+0x86>
 800d91c:	463e      	mov	r6, r7
 800d91e:	4632      	mov	r2, r6
 800d920:	6820      	ldr	r0, [r4, #0]
 800d922:	4641      	mov	r1, r8
 800d924:	f000 fb70 	bl	800e008 <memmove>
 800d928:	68a3      	ldr	r3, [r4, #8]
 800d92a:	6822      	ldr	r2, [r4, #0]
 800d92c:	1b9b      	subs	r3, r3, r6
 800d92e:	4432      	add	r2, r6
 800d930:	60a3      	str	r3, [r4, #8]
 800d932:	6022      	str	r2, [r4, #0]
 800d934:	2000      	movs	r0, #0
 800d936:	e7db      	b.n	800d8f0 <__ssputs_r+0x58>
 800d938:	462a      	mov	r2, r5
 800d93a:	f000 fb8b 	bl	800e054 <_realloc_r>
 800d93e:	4606      	mov	r6, r0
 800d940:	2800      	cmp	r0, #0
 800d942:	d1e1      	bne.n	800d908 <__ssputs_r+0x70>
 800d944:	6921      	ldr	r1, [r4, #16]
 800d946:	4650      	mov	r0, sl
 800d948:	f7ff fefc 	bl	800d744 <_free_r>
 800d94c:	e7c7      	b.n	800d8de <__ssputs_r+0x46>
	...

0800d950 <_svfiprintf_r>:
 800d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d954:	4698      	mov	r8, r3
 800d956:	898b      	ldrh	r3, [r1, #12]
 800d958:	061b      	lsls	r3, r3, #24
 800d95a:	b09d      	sub	sp, #116	; 0x74
 800d95c:	4607      	mov	r7, r0
 800d95e:	460d      	mov	r5, r1
 800d960:	4614      	mov	r4, r2
 800d962:	d50e      	bpl.n	800d982 <_svfiprintf_r+0x32>
 800d964:	690b      	ldr	r3, [r1, #16]
 800d966:	b963      	cbnz	r3, 800d982 <_svfiprintf_r+0x32>
 800d968:	2140      	movs	r1, #64	; 0x40
 800d96a:	f7ff ff3b 	bl	800d7e4 <_malloc_r>
 800d96e:	6028      	str	r0, [r5, #0]
 800d970:	6128      	str	r0, [r5, #16]
 800d972:	b920      	cbnz	r0, 800d97e <_svfiprintf_r+0x2e>
 800d974:	230c      	movs	r3, #12
 800d976:	603b      	str	r3, [r7, #0]
 800d978:	f04f 30ff 	mov.w	r0, #4294967295
 800d97c:	e0d1      	b.n	800db22 <_svfiprintf_r+0x1d2>
 800d97e:	2340      	movs	r3, #64	; 0x40
 800d980:	616b      	str	r3, [r5, #20]
 800d982:	2300      	movs	r3, #0
 800d984:	9309      	str	r3, [sp, #36]	; 0x24
 800d986:	2320      	movs	r3, #32
 800d988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d98c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d990:	2330      	movs	r3, #48	; 0x30
 800d992:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db3c <_svfiprintf_r+0x1ec>
 800d996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d99a:	f04f 0901 	mov.w	r9, #1
 800d99e:	4623      	mov	r3, r4
 800d9a0:	469a      	mov	sl, r3
 800d9a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9a6:	b10a      	cbz	r2, 800d9ac <_svfiprintf_r+0x5c>
 800d9a8:	2a25      	cmp	r2, #37	; 0x25
 800d9aa:	d1f9      	bne.n	800d9a0 <_svfiprintf_r+0x50>
 800d9ac:	ebba 0b04 	subs.w	fp, sl, r4
 800d9b0:	d00b      	beq.n	800d9ca <_svfiprintf_r+0x7a>
 800d9b2:	465b      	mov	r3, fp
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	4629      	mov	r1, r5
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	f7ff ff6d 	bl	800d898 <__ssputs_r>
 800d9be:	3001      	adds	r0, #1
 800d9c0:	f000 80aa 	beq.w	800db18 <_svfiprintf_r+0x1c8>
 800d9c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9c6:	445a      	add	r2, fp
 800d9c8:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f000 80a2 	beq.w	800db18 <_svfiprintf_r+0x1c8>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9de:	f10a 0a01 	add.w	sl, sl, #1
 800d9e2:	9304      	str	r3, [sp, #16]
 800d9e4:	9307      	str	r3, [sp, #28]
 800d9e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9ea:	931a      	str	r3, [sp, #104]	; 0x68
 800d9ec:	4654      	mov	r4, sl
 800d9ee:	2205      	movs	r2, #5
 800d9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f4:	4851      	ldr	r0, [pc, #324]	; (800db3c <_svfiprintf_r+0x1ec>)
 800d9f6:	f7f2 fbf3 	bl	80001e0 <memchr>
 800d9fa:	9a04      	ldr	r2, [sp, #16]
 800d9fc:	b9d8      	cbnz	r0, 800da36 <_svfiprintf_r+0xe6>
 800d9fe:	06d0      	lsls	r0, r2, #27
 800da00:	bf44      	itt	mi
 800da02:	2320      	movmi	r3, #32
 800da04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da08:	0711      	lsls	r1, r2, #28
 800da0a:	bf44      	itt	mi
 800da0c:	232b      	movmi	r3, #43	; 0x2b
 800da0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da12:	f89a 3000 	ldrb.w	r3, [sl]
 800da16:	2b2a      	cmp	r3, #42	; 0x2a
 800da18:	d015      	beq.n	800da46 <_svfiprintf_r+0xf6>
 800da1a:	9a07      	ldr	r2, [sp, #28]
 800da1c:	4654      	mov	r4, sl
 800da1e:	2000      	movs	r0, #0
 800da20:	f04f 0c0a 	mov.w	ip, #10
 800da24:	4621      	mov	r1, r4
 800da26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da2a:	3b30      	subs	r3, #48	; 0x30
 800da2c:	2b09      	cmp	r3, #9
 800da2e:	d94e      	bls.n	800dace <_svfiprintf_r+0x17e>
 800da30:	b1b0      	cbz	r0, 800da60 <_svfiprintf_r+0x110>
 800da32:	9207      	str	r2, [sp, #28]
 800da34:	e014      	b.n	800da60 <_svfiprintf_r+0x110>
 800da36:	eba0 0308 	sub.w	r3, r0, r8
 800da3a:	fa09 f303 	lsl.w	r3, r9, r3
 800da3e:	4313      	orrs	r3, r2
 800da40:	9304      	str	r3, [sp, #16]
 800da42:	46a2      	mov	sl, r4
 800da44:	e7d2      	b.n	800d9ec <_svfiprintf_r+0x9c>
 800da46:	9b03      	ldr	r3, [sp, #12]
 800da48:	1d19      	adds	r1, r3, #4
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	9103      	str	r1, [sp, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	bfbb      	ittet	lt
 800da52:	425b      	neglt	r3, r3
 800da54:	f042 0202 	orrlt.w	r2, r2, #2
 800da58:	9307      	strge	r3, [sp, #28]
 800da5a:	9307      	strlt	r3, [sp, #28]
 800da5c:	bfb8      	it	lt
 800da5e:	9204      	strlt	r2, [sp, #16]
 800da60:	7823      	ldrb	r3, [r4, #0]
 800da62:	2b2e      	cmp	r3, #46	; 0x2e
 800da64:	d10c      	bne.n	800da80 <_svfiprintf_r+0x130>
 800da66:	7863      	ldrb	r3, [r4, #1]
 800da68:	2b2a      	cmp	r3, #42	; 0x2a
 800da6a:	d135      	bne.n	800dad8 <_svfiprintf_r+0x188>
 800da6c:	9b03      	ldr	r3, [sp, #12]
 800da6e:	1d1a      	adds	r2, r3, #4
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	9203      	str	r2, [sp, #12]
 800da74:	2b00      	cmp	r3, #0
 800da76:	bfb8      	it	lt
 800da78:	f04f 33ff 	movlt.w	r3, #4294967295
 800da7c:	3402      	adds	r4, #2
 800da7e:	9305      	str	r3, [sp, #20]
 800da80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db4c <_svfiprintf_r+0x1fc>
 800da84:	7821      	ldrb	r1, [r4, #0]
 800da86:	2203      	movs	r2, #3
 800da88:	4650      	mov	r0, sl
 800da8a:	f7f2 fba9 	bl	80001e0 <memchr>
 800da8e:	b140      	cbz	r0, 800daa2 <_svfiprintf_r+0x152>
 800da90:	2340      	movs	r3, #64	; 0x40
 800da92:	eba0 000a 	sub.w	r0, r0, sl
 800da96:	fa03 f000 	lsl.w	r0, r3, r0
 800da9a:	9b04      	ldr	r3, [sp, #16]
 800da9c:	4303      	orrs	r3, r0
 800da9e:	3401      	adds	r4, #1
 800daa0:	9304      	str	r3, [sp, #16]
 800daa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa6:	4826      	ldr	r0, [pc, #152]	; (800db40 <_svfiprintf_r+0x1f0>)
 800daa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800daac:	2206      	movs	r2, #6
 800daae:	f7f2 fb97 	bl	80001e0 <memchr>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d038      	beq.n	800db28 <_svfiprintf_r+0x1d8>
 800dab6:	4b23      	ldr	r3, [pc, #140]	; (800db44 <_svfiprintf_r+0x1f4>)
 800dab8:	bb1b      	cbnz	r3, 800db02 <_svfiprintf_r+0x1b2>
 800daba:	9b03      	ldr	r3, [sp, #12]
 800dabc:	3307      	adds	r3, #7
 800dabe:	f023 0307 	bic.w	r3, r3, #7
 800dac2:	3308      	adds	r3, #8
 800dac4:	9303      	str	r3, [sp, #12]
 800dac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac8:	4433      	add	r3, r6
 800daca:	9309      	str	r3, [sp, #36]	; 0x24
 800dacc:	e767      	b.n	800d99e <_svfiprintf_r+0x4e>
 800dace:	fb0c 3202 	mla	r2, ip, r2, r3
 800dad2:	460c      	mov	r4, r1
 800dad4:	2001      	movs	r0, #1
 800dad6:	e7a5      	b.n	800da24 <_svfiprintf_r+0xd4>
 800dad8:	2300      	movs	r3, #0
 800dada:	3401      	adds	r4, #1
 800dadc:	9305      	str	r3, [sp, #20]
 800dade:	4619      	mov	r1, r3
 800dae0:	f04f 0c0a 	mov.w	ip, #10
 800dae4:	4620      	mov	r0, r4
 800dae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daea:	3a30      	subs	r2, #48	; 0x30
 800daec:	2a09      	cmp	r2, #9
 800daee:	d903      	bls.n	800daf8 <_svfiprintf_r+0x1a8>
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d0c5      	beq.n	800da80 <_svfiprintf_r+0x130>
 800daf4:	9105      	str	r1, [sp, #20]
 800daf6:	e7c3      	b.n	800da80 <_svfiprintf_r+0x130>
 800daf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dafc:	4604      	mov	r4, r0
 800dafe:	2301      	movs	r3, #1
 800db00:	e7f0      	b.n	800dae4 <_svfiprintf_r+0x194>
 800db02:	ab03      	add	r3, sp, #12
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	462a      	mov	r2, r5
 800db08:	4b0f      	ldr	r3, [pc, #60]	; (800db48 <_svfiprintf_r+0x1f8>)
 800db0a:	a904      	add	r1, sp, #16
 800db0c:	4638      	mov	r0, r7
 800db0e:	f7fb ff29 	bl	8009964 <_printf_float>
 800db12:	1c42      	adds	r2, r0, #1
 800db14:	4606      	mov	r6, r0
 800db16:	d1d6      	bne.n	800dac6 <_svfiprintf_r+0x176>
 800db18:	89ab      	ldrh	r3, [r5, #12]
 800db1a:	065b      	lsls	r3, r3, #25
 800db1c:	f53f af2c 	bmi.w	800d978 <_svfiprintf_r+0x28>
 800db20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db22:	b01d      	add	sp, #116	; 0x74
 800db24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db28:	ab03      	add	r3, sp, #12
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	462a      	mov	r2, r5
 800db2e:	4b06      	ldr	r3, [pc, #24]	; (800db48 <_svfiprintf_r+0x1f8>)
 800db30:	a904      	add	r1, sp, #16
 800db32:	4638      	mov	r0, r7
 800db34:	f7fc f9ba 	bl	8009eac <_printf_i>
 800db38:	e7eb      	b.n	800db12 <_svfiprintf_r+0x1c2>
 800db3a:	bf00      	nop
 800db3c:	0800ec5c 	.word	0x0800ec5c
 800db40:	0800ec66 	.word	0x0800ec66
 800db44:	08009965 	.word	0x08009965
 800db48:	0800d899 	.word	0x0800d899
 800db4c:	0800ec62 	.word	0x0800ec62

0800db50 <__sfputc_r>:
 800db50:	6893      	ldr	r3, [r2, #8]
 800db52:	3b01      	subs	r3, #1
 800db54:	2b00      	cmp	r3, #0
 800db56:	b410      	push	{r4}
 800db58:	6093      	str	r3, [r2, #8]
 800db5a:	da08      	bge.n	800db6e <__sfputc_r+0x1e>
 800db5c:	6994      	ldr	r4, [r2, #24]
 800db5e:	42a3      	cmp	r3, r4
 800db60:	db01      	blt.n	800db66 <__sfputc_r+0x16>
 800db62:	290a      	cmp	r1, #10
 800db64:	d103      	bne.n	800db6e <__sfputc_r+0x1e>
 800db66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db6a:	f7fd bc3b 	b.w	800b3e4 <__swbuf_r>
 800db6e:	6813      	ldr	r3, [r2, #0]
 800db70:	1c58      	adds	r0, r3, #1
 800db72:	6010      	str	r0, [r2, #0]
 800db74:	7019      	strb	r1, [r3, #0]
 800db76:	4608      	mov	r0, r1
 800db78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <__sfputs_r>:
 800db7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db80:	4606      	mov	r6, r0
 800db82:	460f      	mov	r7, r1
 800db84:	4614      	mov	r4, r2
 800db86:	18d5      	adds	r5, r2, r3
 800db88:	42ac      	cmp	r4, r5
 800db8a:	d101      	bne.n	800db90 <__sfputs_r+0x12>
 800db8c:	2000      	movs	r0, #0
 800db8e:	e007      	b.n	800dba0 <__sfputs_r+0x22>
 800db90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db94:	463a      	mov	r2, r7
 800db96:	4630      	mov	r0, r6
 800db98:	f7ff ffda 	bl	800db50 <__sfputc_r>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d1f3      	bne.n	800db88 <__sfputs_r+0xa>
 800dba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dba4 <_vfiprintf_r>:
 800dba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba8:	460d      	mov	r5, r1
 800dbaa:	b09d      	sub	sp, #116	; 0x74
 800dbac:	4614      	mov	r4, r2
 800dbae:	4698      	mov	r8, r3
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	b118      	cbz	r0, 800dbbc <_vfiprintf_r+0x18>
 800dbb4:	6983      	ldr	r3, [r0, #24]
 800dbb6:	b90b      	cbnz	r3, 800dbbc <_vfiprintf_r+0x18>
 800dbb8:	f7fe fc68 	bl	800c48c <__sinit>
 800dbbc:	4b89      	ldr	r3, [pc, #548]	; (800dde4 <_vfiprintf_r+0x240>)
 800dbbe:	429d      	cmp	r5, r3
 800dbc0:	d11b      	bne.n	800dbfa <_vfiprintf_r+0x56>
 800dbc2:	6875      	ldr	r5, [r6, #4]
 800dbc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbc6:	07d9      	lsls	r1, r3, #31
 800dbc8:	d405      	bmi.n	800dbd6 <_vfiprintf_r+0x32>
 800dbca:	89ab      	ldrh	r3, [r5, #12]
 800dbcc:	059a      	lsls	r2, r3, #22
 800dbce:	d402      	bmi.n	800dbd6 <_vfiprintf_r+0x32>
 800dbd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbd2:	f7ff f86c 	bl	800ccae <__retarget_lock_acquire_recursive>
 800dbd6:	89ab      	ldrh	r3, [r5, #12]
 800dbd8:	071b      	lsls	r3, r3, #28
 800dbda:	d501      	bpl.n	800dbe0 <_vfiprintf_r+0x3c>
 800dbdc:	692b      	ldr	r3, [r5, #16]
 800dbde:	b9eb      	cbnz	r3, 800dc1c <_vfiprintf_r+0x78>
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	f7fd fc50 	bl	800b488 <__swsetup_r>
 800dbe8:	b1c0      	cbz	r0, 800dc1c <_vfiprintf_r+0x78>
 800dbea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbec:	07dc      	lsls	r4, r3, #31
 800dbee:	d50e      	bpl.n	800dc0e <_vfiprintf_r+0x6a>
 800dbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf4:	b01d      	add	sp, #116	; 0x74
 800dbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfa:	4b7b      	ldr	r3, [pc, #492]	; (800dde8 <_vfiprintf_r+0x244>)
 800dbfc:	429d      	cmp	r5, r3
 800dbfe:	d101      	bne.n	800dc04 <_vfiprintf_r+0x60>
 800dc00:	68b5      	ldr	r5, [r6, #8]
 800dc02:	e7df      	b.n	800dbc4 <_vfiprintf_r+0x20>
 800dc04:	4b79      	ldr	r3, [pc, #484]	; (800ddec <_vfiprintf_r+0x248>)
 800dc06:	429d      	cmp	r5, r3
 800dc08:	bf08      	it	eq
 800dc0a:	68f5      	ldreq	r5, [r6, #12]
 800dc0c:	e7da      	b.n	800dbc4 <_vfiprintf_r+0x20>
 800dc0e:	89ab      	ldrh	r3, [r5, #12]
 800dc10:	0598      	lsls	r0, r3, #22
 800dc12:	d4ed      	bmi.n	800dbf0 <_vfiprintf_r+0x4c>
 800dc14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc16:	f7ff f84b 	bl	800ccb0 <__retarget_lock_release_recursive>
 800dc1a:	e7e9      	b.n	800dbf0 <_vfiprintf_r+0x4c>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc20:	2320      	movs	r3, #32
 800dc22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc26:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc2a:	2330      	movs	r3, #48	; 0x30
 800dc2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ddf0 <_vfiprintf_r+0x24c>
 800dc30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc34:	f04f 0901 	mov.w	r9, #1
 800dc38:	4623      	mov	r3, r4
 800dc3a:	469a      	mov	sl, r3
 800dc3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc40:	b10a      	cbz	r2, 800dc46 <_vfiprintf_r+0xa2>
 800dc42:	2a25      	cmp	r2, #37	; 0x25
 800dc44:	d1f9      	bne.n	800dc3a <_vfiprintf_r+0x96>
 800dc46:	ebba 0b04 	subs.w	fp, sl, r4
 800dc4a:	d00b      	beq.n	800dc64 <_vfiprintf_r+0xc0>
 800dc4c:	465b      	mov	r3, fp
 800dc4e:	4622      	mov	r2, r4
 800dc50:	4629      	mov	r1, r5
 800dc52:	4630      	mov	r0, r6
 800dc54:	f7ff ff93 	bl	800db7e <__sfputs_r>
 800dc58:	3001      	adds	r0, #1
 800dc5a:	f000 80aa 	beq.w	800ddb2 <_vfiprintf_r+0x20e>
 800dc5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc60:	445a      	add	r2, fp
 800dc62:	9209      	str	r2, [sp, #36]	; 0x24
 800dc64:	f89a 3000 	ldrb.w	r3, [sl]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f000 80a2 	beq.w	800ddb2 <_vfiprintf_r+0x20e>
 800dc6e:	2300      	movs	r3, #0
 800dc70:	f04f 32ff 	mov.w	r2, #4294967295
 800dc74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc78:	f10a 0a01 	add.w	sl, sl, #1
 800dc7c:	9304      	str	r3, [sp, #16]
 800dc7e:	9307      	str	r3, [sp, #28]
 800dc80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc84:	931a      	str	r3, [sp, #104]	; 0x68
 800dc86:	4654      	mov	r4, sl
 800dc88:	2205      	movs	r2, #5
 800dc8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc8e:	4858      	ldr	r0, [pc, #352]	; (800ddf0 <_vfiprintf_r+0x24c>)
 800dc90:	f7f2 faa6 	bl	80001e0 <memchr>
 800dc94:	9a04      	ldr	r2, [sp, #16]
 800dc96:	b9d8      	cbnz	r0, 800dcd0 <_vfiprintf_r+0x12c>
 800dc98:	06d1      	lsls	r1, r2, #27
 800dc9a:	bf44      	itt	mi
 800dc9c:	2320      	movmi	r3, #32
 800dc9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dca2:	0713      	lsls	r3, r2, #28
 800dca4:	bf44      	itt	mi
 800dca6:	232b      	movmi	r3, #43	; 0x2b
 800dca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcac:	f89a 3000 	ldrb.w	r3, [sl]
 800dcb0:	2b2a      	cmp	r3, #42	; 0x2a
 800dcb2:	d015      	beq.n	800dce0 <_vfiprintf_r+0x13c>
 800dcb4:	9a07      	ldr	r2, [sp, #28]
 800dcb6:	4654      	mov	r4, sl
 800dcb8:	2000      	movs	r0, #0
 800dcba:	f04f 0c0a 	mov.w	ip, #10
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcc4:	3b30      	subs	r3, #48	; 0x30
 800dcc6:	2b09      	cmp	r3, #9
 800dcc8:	d94e      	bls.n	800dd68 <_vfiprintf_r+0x1c4>
 800dcca:	b1b0      	cbz	r0, 800dcfa <_vfiprintf_r+0x156>
 800dccc:	9207      	str	r2, [sp, #28]
 800dcce:	e014      	b.n	800dcfa <_vfiprintf_r+0x156>
 800dcd0:	eba0 0308 	sub.w	r3, r0, r8
 800dcd4:	fa09 f303 	lsl.w	r3, r9, r3
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	9304      	str	r3, [sp, #16]
 800dcdc:	46a2      	mov	sl, r4
 800dcde:	e7d2      	b.n	800dc86 <_vfiprintf_r+0xe2>
 800dce0:	9b03      	ldr	r3, [sp, #12]
 800dce2:	1d19      	adds	r1, r3, #4
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	9103      	str	r1, [sp, #12]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	bfbb      	ittet	lt
 800dcec:	425b      	neglt	r3, r3
 800dcee:	f042 0202 	orrlt.w	r2, r2, #2
 800dcf2:	9307      	strge	r3, [sp, #28]
 800dcf4:	9307      	strlt	r3, [sp, #28]
 800dcf6:	bfb8      	it	lt
 800dcf8:	9204      	strlt	r2, [sp, #16]
 800dcfa:	7823      	ldrb	r3, [r4, #0]
 800dcfc:	2b2e      	cmp	r3, #46	; 0x2e
 800dcfe:	d10c      	bne.n	800dd1a <_vfiprintf_r+0x176>
 800dd00:	7863      	ldrb	r3, [r4, #1]
 800dd02:	2b2a      	cmp	r3, #42	; 0x2a
 800dd04:	d135      	bne.n	800dd72 <_vfiprintf_r+0x1ce>
 800dd06:	9b03      	ldr	r3, [sp, #12]
 800dd08:	1d1a      	adds	r2, r3, #4
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	9203      	str	r2, [sp, #12]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	bfb8      	it	lt
 800dd12:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd16:	3402      	adds	r4, #2
 800dd18:	9305      	str	r3, [sp, #20]
 800dd1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800de00 <_vfiprintf_r+0x25c>
 800dd1e:	7821      	ldrb	r1, [r4, #0]
 800dd20:	2203      	movs	r2, #3
 800dd22:	4650      	mov	r0, sl
 800dd24:	f7f2 fa5c 	bl	80001e0 <memchr>
 800dd28:	b140      	cbz	r0, 800dd3c <_vfiprintf_r+0x198>
 800dd2a:	2340      	movs	r3, #64	; 0x40
 800dd2c:	eba0 000a 	sub.w	r0, r0, sl
 800dd30:	fa03 f000 	lsl.w	r0, r3, r0
 800dd34:	9b04      	ldr	r3, [sp, #16]
 800dd36:	4303      	orrs	r3, r0
 800dd38:	3401      	adds	r4, #1
 800dd3a:	9304      	str	r3, [sp, #16]
 800dd3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd40:	482c      	ldr	r0, [pc, #176]	; (800ddf4 <_vfiprintf_r+0x250>)
 800dd42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd46:	2206      	movs	r2, #6
 800dd48:	f7f2 fa4a 	bl	80001e0 <memchr>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d03f      	beq.n	800ddd0 <_vfiprintf_r+0x22c>
 800dd50:	4b29      	ldr	r3, [pc, #164]	; (800ddf8 <_vfiprintf_r+0x254>)
 800dd52:	bb1b      	cbnz	r3, 800dd9c <_vfiprintf_r+0x1f8>
 800dd54:	9b03      	ldr	r3, [sp, #12]
 800dd56:	3307      	adds	r3, #7
 800dd58:	f023 0307 	bic.w	r3, r3, #7
 800dd5c:	3308      	adds	r3, #8
 800dd5e:	9303      	str	r3, [sp, #12]
 800dd60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd62:	443b      	add	r3, r7
 800dd64:	9309      	str	r3, [sp, #36]	; 0x24
 800dd66:	e767      	b.n	800dc38 <_vfiprintf_r+0x94>
 800dd68:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd6c:	460c      	mov	r4, r1
 800dd6e:	2001      	movs	r0, #1
 800dd70:	e7a5      	b.n	800dcbe <_vfiprintf_r+0x11a>
 800dd72:	2300      	movs	r3, #0
 800dd74:	3401      	adds	r4, #1
 800dd76:	9305      	str	r3, [sp, #20]
 800dd78:	4619      	mov	r1, r3
 800dd7a:	f04f 0c0a 	mov.w	ip, #10
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd84:	3a30      	subs	r2, #48	; 0x30
 800dd86:	2a09      	cmp	r2, #9
 800dd88:	d903      	bls.n	800dd92 <_vfiprintf_r+0x1ee>
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d0c5      	beq.n	800dd1a <_vfiprintf_r+0x176>
 800dd8e:	9105      	str	r1, [sp, #20]
 800dd90:	e7c3      	b.n	800dd1a <_vfiprintf_r+0x176>
 800dd92:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd96:	4604      	mov	r4, r0
 800dd98:	2301      	movs	r3, #1
 800dd9a:	e7f0      	b.n	800dd7e <_vfiprintf_r+0x1da>
 800dd9c:	ab03      	add	r3, sp, #12
 800dd9e:	9300      	str	r3, [sp, #0]
 800dda0:	462a      	mov	r2, r5
 800dda2:	4b16      	ldr	r3, [pc, #88]	; (800ddfc <_vfiprintf_r+0x258>)
 800dda4:	a904      	add	r1, sp, #16
 800dda6:	4630      	mov	r0, r6
 800dda8:	f7fb fddc 	bl	8009964 <_printf_float>
 800ddac:	4607      	mov	r7, r0
 800ddae:	1c78      	adds	r0, r7, #1
 800ddb0:	d1d6      	bne.n	800dd60 <_vfiprintf_r+0x1bc>
 800ddb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddb4:	07d9      	lsls	r1, r3, #31
 800ddb6:	d405      	bmi.n	800ddc4 <_vfiprintf_r+0x220>
 800ddb8:	89ab      	ldrh	r3, [r5, #12]
 800ddba:	059a      	lsls	r2, r3, #22
 800ddbc:	d402      	bmi.n	800ddc4 <_vfiprintf_r+0x220>
 800ddbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddc0:	f7fe ff76 	bl	800ccb0 <__retarget_lock_release_recursive>
 800ddc4:	89ab      	ldrh	r3, [r5, #12]
 800ddc6:	065b      	lsls	r3, r3, #25
 800ddc8:	f53f af12 	bmi.w	800dbf0 <_vfiprintf_r+0x4c>
 800ddcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddce:	e711      	b.n	800dbf4 <_vfiprintf_r+0x50>
 800ddd0:	ab03      	add	r3, sp, #12
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	462a      	mov	r2, r5
 800ddd6:	4b09      	ldr	r3, [pc, #36]	; (800ddfc <_vfiprintf_r+0x258>)
 800ddd8:	a904      	add	r1, sp, #16
 800ddda:	4630      	mov	r0, r6
 800dddc:	f7fc f866 	bl	8009eac <_printf_i>
 800dde0:	e7e4      	b.n	800ddac <_vfiprintf_r+0x208>
 800dde2:	bf00      	nop
 800dde4:	0800ea40 	.word	0x0800ea40
 800dde8:	0800ea60 	.word	0x0800ea60
 800ddec:	0800ea20 	.word	0x0800ea20
 800ddf0:	0800ec5c 	.word	0x0800ec5c
 800ddf4:	0800ec66 	.word	0x0800ec66
 800ddf8:	08009965 	.word	0x08009965
 800ddfc:	0800db7f 	.word	0x0800db7f
 800de00:	0800ec62 	.word	0x0800ec62
 800de04:	00000000 	.word	0x00000000

0800de08 <nan>:
 800de08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800de10 <nan+0x8>
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	00000000 	.word	0x00000000
 800de14:	7ff80000 	.word	0x7ff80000

0800de18 <_sbrk_r>:
 800de18:	b538      	push	{r3, r4, r5, lr}
 800de1a:	4d06      	ldr	r5, [pc, #24]	; (800de34 <_sbrk_r+0x1c>)
 800de1c:	2300      	movs	r3, #0
 800de1e:	4604      	mov	r4, r0
 800de20:	4608      	mov	r0, r1
 800de22:	602b      	str	r3, [r5, #0]
 800de24:	f7f5 fe2a 	bl	8003a7c <_sbrk>
 800de28:	1c43      	adds	r3, r0, #1
 800de2a:	d102      	bne.n	800de32 <_sbrk_r+0x1a>
 800de2c:	682b      	ldr	r3, [r5, #0]
 800de2e:	b103      	cbz	r3, 800de32 <_sbrk_r+0x1a>
 800de30:	6023      	str	r3, [r4, #0]
 800de32:	bd38      	pop	{r3, r4, r5, pc}
 800de34:	20000970 	.word	0x20000970

0800de38 <__sread>:
 800de38:	b510      	push	{r4, lr}
 800de3a:	460c      	mov	r4, r1
 800de3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de40:	f000 f92e 	bl	800e0a0 <_read_r>
 800de44:	2800      	cmp	r0, #0
 800de46:	bfab      	itete	ge
 800de48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de4a:	89a3      	ldrhlt	r3, [r4, #12]
 800de4c:	181b      	addge	r3, r3, r0
 800de4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de52:	bfac      	ite	ge
 800de54:	6563      	strge	r3, [r4, #84]	; 0x54
 800de56:	81a3      	strhlt	r3, [r4, #12]
 800de58:	bd10      	pop	{r4, pc}

0800de5a <__swrite>:
 800de5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de5e:	461f      	mov	r7, r3
 800de60:	898b      	ldrh	r3, [r1, #12]
 800de62:	05db      	lsls	r3, r3, #23
 800de64:	4605      	mov	r5, r0
 800de66:	460c      	mov	r4, r1
 800de68:	4616      	mov	r6, r2
 800de6a:	d505      	bpl.n	800de78 <__swrite+0x1e>
 800de6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de70:	2302      	movs	r3, #2
 800de72:	2200      	movs	r2, #0
 800de74:	f000 f8b6 	bl	800dfe4 <_lseek_r>
 800de78:	89a3      	ldrh	r3, [r4, #12]
 800de7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de82:	81a3      	strh	r3, [r4, #12]
 800de84:	4632      	mov	r2, r6
 800de86:	463b      	mov	r3, r7
 800de88:	4628      	mov	r0, r5
 800de8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de8e:	f000 b835 	b.w	800defc <_write_r>

0800de92 <__sseek>:
 800de92:	b510      	push	{r4, lr}
 800de94:	460c      	mov	r4, r1
 800de96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de9a:	f000 f8a3 	bl	800dfe4 <_lseek_r>
 800de9e:	1c43      	adds	r3, r0, #1
 800dea0:	89a3      	ldrh	r3, [r4, #12]
 800dea2:	bf15      	itete	ne
 800dea4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800deaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800deae:	81a3      	strheq	r3, [r4, #12]
 800deb0:	bf18      	it	ne
 800deb2:	81a3      	strhne	r3, [r4, #12]
 800deb4:	bd10      	pop	{r4, pc}

0800deb6 <__sclose>:
 800deb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deba:	f000 b84f 	b.w	800df5c <_close_r>

0800debe <strncmp>:
 800debe:	b510      	push	{r4, lr}
 800dec0:	b16a      	cbz	r2, 800dede <strncmp+0x20>
 800dec2:	3901      	subs	r1, #1
 800dec4:	1884      	adds	r4, r0, r2
 800dec6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800deca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dece:	4293      	cmp	r3, r2
 800ded0:	d103      	bne.n	800deda <strncmp+0x1c>
 800ded2:	42a0      	cmp	r0, r4
 800ded4:	d001      	beq.n	800deda <strncmp+0x1c>
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d1f5      	bne.n	800dec6 <strncmp+0x8>
 800deda:	1a98      	subs	r0, r3, r2
 800dedc:	bd10      	pop	{r4, pc}
 800dede:	4610      	mov	r0, r2
 800dee0:	e7fc      	b.n	800dedc <strncmp+0x1e>

0800dee2 <__ascii_wctomb>:
 800dee2:	b149      	cbz	r1, 800def8 <__ascii_wctomb+0x16>
 800dee4:	2aff      	cmp	r2, #255	; 0xff
 800dee6:	bf85      	ittet	hi
 800dee8:	238a      	movhi	r3, #138	; 0x8a
 800deea:	6003      	strhi	r3, [r0, #0]
 800deec:	700a      	strbls	r2, [r1, #0]
 800deee:	f04f 30ff 	movhi.w	r0, #4294967295
 800def2:	bf98      	it	ls
 800def4:	2001      	movls	r0, #1
 800def6:	4770      	bx	lr
 800def8:	4608      	mov	r0, r1
 800defa:	4770      	bx	lr

0800defc <_write_r>:
 800defc:	b538      	push	{r3, r4, r5, lr}
 800defe:	4d07      	ldr	r5, [pc, #28]	; (800df1c <_write_r+0x20>)
 800df00:	4604      	mov	r4, r0
 800df02:	4608      	mov	r0, r1
 800df04:	4611      	mov	r1, r2
 800df06:	2200      	movs	r2, #0
 800df08:	602a      	str	r2, [r5, #0]
 800df0a:	461a      	mov	r2, r3
 800df0c:	f7f5 fd65 	bl	80039da <_write>
 800df10:	1c43      	adds	r3, r0, #1
 800df12:	d102      	bne.n	800df1a <_write_r+0x1e>
 800df14:	682b      	ldr	r3, [r5, #0]
 800df16:	b103      	cbz	r3, 800df1a <_write_r+0x1e>
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	bd38      	pop	{r3, r4, r5, pc}
 800df1c:	20000970 	.word	0x20000970

0800df20 <__assert_func>:
 800df20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df22:	4614      	mov	r4, r2
 800df24:	461a      	mov	r2, r3
 800df26:	4b09      	ldr	r3, [pc, #36]	; (800df4c <__assert_func+0x2c>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4605      	mov	r5, r0
 800df2c:	68d8      	ldr	r0, [r3, #12]
 800df2e:	b14c      	cbz	r4, 800df44 <__assert_func+0x24>
 800df30:	4b07      	ldr	r3, [pc, #28]	; (800df50 <__assert_func+0x30>)
 800df32:	9100      	str	r1, [sp, #0]
 800df34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df38:	4906      	ldr	r1, [pc, #24]	; (800df54 <__assert_func+0x34>)
 800df3a:	462b      	mov	r3, r5
 800df3c:	f000 f81e 	bl	800df7c <fiprintf>
 800df40:	f000 f8c0 	bl	800e0c4 <abort>
 800df44:	4b04      	ldr	r3, [pc, #16]	; (800df58 <__assert_func+0x38>)
 800df46:	461c      	mov	r4, r3
 800df48:	e7f3      	b.n	800df32 <__assert_func+0x12>
 800df4a:	bf00      	nop
 800df4c:	2000000c 	.word	0x2000000c
 800df50:	0800ec6d 	.word	0x0800ec6d
 800df54:	0800ec7a 	.word	0x0800ec7a
 800df58:	0800eca8 	.word	0x0800eca8

0800df5c <_close_r>:
 800df5c:	b538      	push	{r3, r4, r5, lr}
 800df5e:	4d06      	ldr	r5, [pc, #24]	; (800df78 <_close_r+0x1c>)
 800df60:	2300      	movs	r3, #0
 800df62:	4604      	mov	r4, r0
 800df64:	4608      	mov	r0, r1
 800df66:	602b      	str	r3, [r5, #0]
 800df68:	f7f5 fd53 	bl	8003a12 <_close>
 800df6c:	1c43      	adds	r3, r0, #1
 800df6e:	d102      	bne.n	800df76 <_close_r+0x1a>
 800df70:	682b      	ldr	r3, [r5, #0]
 800df72:	b103      	cbz	r3, 800df76 <_close_r+0x1a>
 800df74:	6023      	str	r3, [r4, #0]
 800df76:	bd38      	pop	{r3, r4, r5, pc}
 800df78:	20000970 	.word	0x20000970

0800df7c <fiprintf>:
 800df7c:	b40e      	push	{r1, r2, r3}
 800df7e:	b503      	push	{r0, r1, lr}
 800df80:	4601      	mov	r1, r0
 800df82:	ab03      	add	r3, sp, #12
 800df84:	4805      	ldr	r0, [pc, #20]	; (800df9c <fiprintf+0x20>)
 800df86:	f853 2b04 	ldr.w	r2, [r3], #4
 800df8a:	6800      	ldr	r0, [r0, #0]
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	f7ff fe09 	bl	800dba4 <_vfiprintf_r>
 800df92:	b002      	add	sp, #8
 800df94:	f85d eb04 	ldr.w	lr, [sp], #4
 800df98:	b003      	add	sp, #12
 800df9a:	4770      	bx	lr
 800df9c:	2000000c 	.word	0x2000000c

0800dfa0 <_fstat_r>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	4d07      	ldr	r5, [pc, #28]	; (800dfc0 <_fstat_r+0x20>)
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	4608      	mov	r0, r1
 800dfaa:	4611      	mov	r1, r2
 800dfac:	602b      	str	r3, [r5, #0]
 800dfae:	f7f5 fd3c 	bl	8003a2a <_fstat>
 800dfb2:	1c43      	adds	r3, r0, #1
 800dfb4:	d102      	bne.n	800dfbc <_fstat_r+0x1c>
 800dfb6:	682b      	ldr	r3, [r5, #0]
 800dfb8:	b103      	cbz	r3, 800dfbc <_fstat_r+0x1c>
 800dfba:	6023      	str	r3, [r4, #0]
 800dfbc:	bd38      	pop	{r3, r4, r5, pc}
 800dfbe:	bf00      	nop
 800dfc0:	20000970 	.word	0x20000970

0800dfc4 <_isatty_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	4d06      	ldr	r5, [pc, #24]	; (800dfe0 <_isatty_r+0x1c>)
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4604      	mov	r4, r0
 800dfcc:	4608      	mov	r0, r1
 800dfce:	602b      	str	r3, [r5, #0]
 800dfd0:	f7f5 fd3b 	bl	8003a4a <_isatty>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	d102      	bne.n	800dfde <_isatty_r+0x1a>
 800dfd8:	682b      	ldr	r3, [r5, #0]
 800dfda:	b103      	cbz	r3, 800dfde <_isatty_r+0x1a>
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	20000970 	.word	0x20000970

0800dfe4 <_lseek_r>:
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	4d07      	ldr	r5, [pc, #28]	; (800e004 <_lseek_r+0x20>)
 800dfe8:	4604      	mov	r4, r0
 800dfea:	4608      	mov	r0, r1
 800dfec:	4611      	mov	r1, r2
 800dfee:	2200      	movs	r2, #0
 800dff0:	602a      	str	r2, [r5, #0]
 800dff2:	461a      	mov	r2, r3
 800dff4:	f7f5 fd34 	bl	8003a60 <_lseek>
 800dff8:	1c43      	adds	r3, r0, #1
 800dffa:	d102      	bne.n	800e002 <_lseek_r+0x1e>
 800dffc:	682b      	ldr	r3, [r5, #0]
 800dffe:	b103      	cbz	r3, 800e002 <_lseek_r+0x1e>
 800e000:	6023      	str	r3, [r4, #0]
 800e002:	bd38      	pop	{r3, r4, r5, pc}
 800e004:	20000970 	.word	0x20000970

0800e008 <memmove>:
 800e008:	4288      	cmp	r0, r1
 800e00a:	b510      	push	{r4, lr}
 800e00c:	eb01 0402 	add.w	r4, r1, r2
 800e010:	d902      	bls.n	800e018 <memmove+0x10>
 800e012:	4284      	cmp	r4, r0
 800e014:	4623      	mov	r3, r4
 800e016:	d807      	bhi.n	800e028 <memmove+0x20>
 800e018:	1e43      	subs	r3, r0, #1
 800e01a:	42a1      	cmp	r1, r4
 800e01c:	d008      	beq.n	800e030 <memmove+0x28>
 800e01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e022:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e026:	e7f8      	b.n	800e01a <memmove+0x12>
 800e028:	4402      	add	r2, r0
 800e02a:	4601      	mov	r1, r0
 800e02c:	428a      	cmp	r2, r1
 800e02e:	d100      	bne.n	800e032 <memmove+0x2a>
 800e030:	bd10      	pop	{r4, pc}
 800e032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e03a:	e7f7      	b.n	800e02c <memmove+0x24>

0800e03c <__malloc_lock>:
 800e03c:	4801      	ldr	r0, [pc, #4]	; (800e044 <__malloc_lock+0x8>)
 800e03e:	f7fe be36 	b.w	800ccae <__retarget_lock_acquire_recursive>
 800e042:	bf00      	nop
 800e044:	20000968 	.word	0x20000968

0800e048 <__malloc_unlock>:
 800e048:	4801      	ldr	r0, [pc, #4]	; (800e050 <__malloc_unlock+0x8>)
 800e04a:	f7fe be31 	b.w	800ccb0 <__retarget_lock_release_recursive>
 800e04e:	bf00      	nop
 800e050:	20000968 	.word	0x20000968

0800e054 <_realloc_r>:
 800e054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e056:	4607      	mov	r7, r0
 800e058:	4614      	mov	r4, r2
 800e05a:	460e      	mov	r6, r1
 800e05c:	b921      	cbnz	r1, 800e068 <_realloc_r+0x14>
 800e05e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e062:	4611      	mov	r1, r2
 800e064:	f7ff bbbe 	b.w	800d7e4 <_malloc_r>
 800e068:	b922      	cbnz	r2, 800e074 <_realloc_r+0x20>
 800e06a:	f7ff fb6b 	bl	800d744 <_free_r>
 800e06e:	4625      	mov	r5, r4
 800e070:	4628      	mov	r0, r5
 800e072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e074:	f000 f82d 	bl	800e0d2 <_malloc_usable_size_r>
 800e078:	42a0      	cmp	r0, r4
 800e07a:	d20f      	bcs.n	800e09c <_realloc_r+0x48>
 800e07c:	4621      	mov	r1, r4
 800e07e:	4638      	mov	r0, r7
 800e080:	f7ff fbb0 	bl	800d7e4 <_malloc_r>
 800e084:	4605      	mov	r5, r0
 800e086:	2800      	cmp	r0, #0
 800e088:	d0f2      	beq.n	800e070 <_realloc_r+0x1c>
 800e08a:	4631      	mov	r1, r6
 800e08c:	4622      	mov	r2, r4
 800e08e:	f7fb fbb3 	bl	80097f8 <memcpy>
 800e092:	4631      	mov	r1, r6
 800e094:	4638      	mov	r0, r7
 800e096:	f7ff fb55 	bl	800d744 <_free_r>
 800e09a:	e7e9      	b.n	800e070 <_realloc_r+0x1c>
 800e09c:	4635      	mov	r5, r6
 800e09e:	e7e7      	b.n	800e070 <_realloc_r+0x1c>

0800e0a0 <_read_r>:
 800e0a0:	b538      	push	{r3, r4, r5, lr}
 800e0a2:	4d07      	ldr	r5, [pc, #28]	; (800e0c0 <_read_r+0x20>)
 800e0a4:	4604      	mov	r4, r0
 800e0a6:	4608      	mov	r0, r1
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	602a      	str	r2, [r5, #0]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	f7f5 fc76 	bl	80039a0 <_read>
 800e0b4:	1c43      	adds	r3, r0, #1
 800e0b6:	d102      	bne.n	800e0be <_read_r+0x1e>
 800e0b8:	682b      	ldr	r3, [r5, #0]
 800e0ba:	b103      	cbz	r3, 800e0be <_read_r+0x1e>
 800e0bc:	6023      	str	r3, [r4, #0]
 800e0be:	bd38      	pop	{r3, r4, r5, pc}
 800e0c0:	20000970 	.word	0x20000970

0800e0c4 <abort>:
 800e0c4:	b508      	push	{r3, lr}
 800e0c6:	2006      	movs	r0, #6
 800e0c8:	f000 f834 	bl	800e134 <raise>
 800e0cc:	2001      	movs	r0, #1
 800e0ce:	f7f5 fc5d 	bl	800398c <_exit>

0800e0d2 <_malloc_usable_size_r>:
 800e0d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0d6:	1f18      	subs	r0, r3, #4
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	bfbc      	itt	lt
 800e0dc:	580b      	ldrlt	r3, [r1, r0]
 800e0de:	18c0      	addlt	r0, r0, r3
 800e0e0:	4770      	bx	lr

0800e0e2 <_raise_r>:
 800e0e2:	291f      	cmp	r1, #31
 800e0e4:	b538      	push	{r3, r4, r5, lr}
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	460d      	mov	r5, r1
 800e0ea:	d904      	bls.n	800e0f6 <_raise_r+0x14>
 800e0ec:	2316      	movs	r3, #22
 800e0ee:	6003      	str	r3, [r0, #0]
 800e0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f4:	bd38      	pop	{r3, r4, r5, pc}
 800e0f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e0f8:	b112      	cbz	r2, 800e100 <_raise_r+0x1e>
 800e0fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0fe:	b94b      	cbnz	r3, 800e114 <_raise_r+0x32>
 800e100:	4620      	mov	r0, r4
 800e102:	f000 f831 	bl	800e168 <_getpid_r>
 800e106:	462a      	mov	r2, r5
 800e108:	4601      	mov	r1, r0
 800e10a:	4620      	mov	r0, r4
 800e10c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e110:	f000 b818 	b.w	800e144 <_kill_r>
 800e114:	2b01      	cmp	r3, #1
 800e116:	d00a      	beq.n	800e12e <_raise_r+0x4c>
 800e118:	1c59      	adds	r1, r3, #1
 800e11a:	d103      	bne.n	800e124 <_raise_r+0x42>
 800e11c:	2316      	movs	r3, #22
 800e11e:	6003      	str	r3, [r0, #0]
 800e120:	2001      	movs	r0, #1
 800e122:	e7e7      	b.n	800e0f4 <_raise_r+0x12>
 800e124:	2400      	movs	r4, #0
 800e126:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e12a:	4628      	mov	r0, r5
 800e12c:	4798      	blx	r3
 800e12e:	2000      	movs	r0, #0
 800e130:	e7e0      	b.n	800e0f4 <_raise_r+0x12>
	...

0800e134 <raise>:
 800e134:	4b02      	ldr	r3, [pc, #8]	; (800e140 <raise+0xc>)
 800e136:	4601      	mov	r1, r0
 800e138:	6818      	ldr	r0, [r3, #0]
 800e13a:	f7ff bfd2 	b.w	800e0e2 <_raise_r>
 800e13e:	bf00      	nop
 800e140:	2000000c 	.word	0x2000000c

0800e144 <_kill_r>:
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	4d07      	ldr	r5, [pc, #28]	; (800e164 <_kill_r+0x20>)
 800e148:	2300      	movs	r3, #0
 800e14a:	4604      	mov	r4, r0
 800e14c:	4608      	mov	r0, r1
 800e14e:	4611      	mov	r1, r2
 800e150:	602b      	str	r3, [r5, #0]
 800e152:	f7f5 fc0b 	bl	800396c <_kill>
 800e156:	1c43      	adds	r3, r0, #1
 800e158:	d102      	bne.n	800e160 <_kill_r+0x1c>
 800e15a:	682b      	ldr	r3, [r5, #0]
 800e15c:	b103      	cbz	r3, 800e160 <_kill_r+0x1c>
 800e15e:	6023      	str	r3, [r4, #0]
 800e160:	bd38      	pop	{r3, r4, r5, pc}
 800e162:	bf00      	nop
 800e164:	20000970 	.word	0x20000970

0800e168 <_getpid_r>:
 800e168:	f7f5 bbf8 	b.w	800395c <_getpid>

0800e16c <_init>:
 800e16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e16e:	bf00      	nop
 800e170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e172:	bc08      	pop	{r3}
 800e174:	469e      	mov	lr, r3
 800e176:	4770      	bx	lr

0800e178 <_fini>:
 800e178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e17a:	bf00      	nop
 800e17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e17e:	bc08      	pop	{r3}
 800e180:	469e      	mov	lr, r3
 800e182:	4770      	bx	lr
