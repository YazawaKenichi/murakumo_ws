
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d24  0800dce8  0800dce8  0001dce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea0c  0800ea0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea0c  0800ea0c  0001ea0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea14  0800ea14  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea14  0800ea14  0001ea14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea18  0800ea18  0001ea18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ea1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200001e0  0800ebfc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  0800ebfc  000208bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031523  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051b2  00000000  00000000  00051733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  000568e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  000581e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c09  00000000  00000000  000598e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f9aa  00000000  00000000  000804e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb9a0  00000000  00000000  0009fe93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016b833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b8c  00000000  00000000  0016b888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dccc 	.word	0x0800dccc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800dccc 	.word	0x0800dccc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <imu_read_byte>:
volatile Inertial inertial_offset;

Coordinate COORDINATE_ZERO;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <imu_read_byte+0x54>)
 8001008:	f005 fa4a 	bl	80064a0 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <imu_read_byte+0x58>)
 8001016:	f006 f86f 	bl	80070f8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <imu_read_byte+0x58>)
 8001024:	f006 f99c 	bl	8007360 <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <imu_read_byte+0x54>)
 8001030:	f005 fa36 	bl	80064a0 <HAL_GPIO_WritePin>
#endif

	return val;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	20000408 	.word	0x20000408

08001048 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <imu_write_byte+0x54>)
 800106a:	f005 fa19 	bl	80064a0 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2201      	movs	r2, #1
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <imu_write_byte+0x58>)
 8001078:	f006 f83e 	bl	80070f8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 800107c:	1db9      	adds	r1, r7, #6
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <imu_write_byte+0x58>)
 8001084:	f006 f838 	bl	80070f8 <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <imu_write_byte+0x54>)
 8001090:	f005 fa06 	bl	80064a0 <HAL_GPIO_WritePin>
#endif
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	20000408 	.word	0x20000408

080010a4 <imu_init>:

void imu_init()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	printf("Starting SPI2 (IMU)\r\n");
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <imu_init+0x40>)
 80010ac:	f009 f86a 	bl	800a184 <puts>
	uint8_t wai, ret;
	ret = imu_initialize(&wai);
 80010b0:	1dbb      	adds	r3, r7, #6
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f820 	bl	80010f8 <imu_initialize>
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
	printf("who_am_i = %d\r\n", wai);
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	4619      	mov	r1, r3
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <imu_init+0x44>)
 80010c2:	f008 ffd9 	bl	800a078 <iprintf>
	if(ret == 1)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d103      	bne.n	80010d4 <imu_init+0x30>
	{
		printf("SPI INIT COLLECT!\r\n");
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <imu_init+0x48>)
 80010ce:	f009 f859 	bl	800a184 <puts>
	}
	else
	{
		printf("SPI INIT FAILURE x_x \r\n");
	}
}
 80010d2:	e002      	b.n	80010da <imu_init+0x36>
		printf("SPI INIT FAILURE x_x \r\n");
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <imu_init+0x4c>)
 80010d6:	f009 f855 	bl	800a184 <puts>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0800dce8 	.word	0x0800dce8
 80010e8:	0800dd00 	.word	0x0800dd00
 80010ec:	0800dd10 	.word	0x0800dd10
 80010f0:	0800dd24 	.word	0x0800dd24
 80010f4:	00000000 	.word	0x00000000

080010f8 <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001106:	4834      	ldr	r0, [pc, #208]	; (80011d8 <imu_initialize+0xe0>)
 8001108:	f005 f9ca 	bl	80064a0 <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	COORDINATE_ZERO.x = 0;
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <imu_initialize+0xe4>)
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]
	COORDINATE_ZERO.y = 0;
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <imu_initialize+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	805a      	strh	r2, [r3, #2]
	COORDINATE_ZERO.z = 0;
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <imu_initialize+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	809a      	strh	r2, [r3, #4]

	RADPERDEG = ((double) M_PI / (double) 180);
 8001122:	492f      	ldr	r1, [pc, #188]	; (80011e0 <imu_initialize+0xe8>)
 8001124:	a32a      	add	r3, pc, #168	; (adr r3, 80011d0 <imu_initialize+0xd8>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	e9c1 2300 	strd	r2, r3, [r1]

#if	INIT_ZERO
	inertial.accel = COORDINATE_ZERO;
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <imu_initialize+0xec>)
 8001130:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <imu_initialize+0xe4>)
 8001132:	6811      	ldr	r1, [r2, #0]
 8001134:	6019      	str	r1, [r3, #0]
 8001136:	8892      	ldrh	r2, [r2, #4]
 8001138:	809a      	strh	r2, [r3, #4]
	inertial.gyro = COORDINATE_ZERO;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <imu_initialize+0xec>)
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <imu_initialize+0xe4>)
 800113e:	3306      	adds	r3, #6
 8001140:	6811      	ldr	r1, [r2, #0]
 8001142:	6019      	str	r1, [r3, #0]
 8001144:	8892      	ldrh	r2, [r2, #4]
 8001146:	809a      	strh	r2, [r3, #4]
	displacement.position = COORDINATE_ZERO;
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <imu_initialize+0xf0>)
 800114a:	4a24      	ldr	r2, [pc, #144]	; (80011dc <imu_initialize+0xe4>)
 800114c:	6811      	ldr	r1, [r2, #0]
 800114e:	6019      	str	r1, [r3, #0]
 8001150:	8892      	ldrh	r2, [r2, #4]
 8001152:	809a      	strh	r2, [r3, #4]
	displacement.theta = COORDINATE_ZERO;
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <imu_initialize+0xf0>)
 8001156:	4a21      	ldr	r2, [pc, #132]	; (80011dc <imu_initialize+0xe4>)
 8001158:	3306      	adds	r3, #6
 800115a:	6811      	ldr	r1, [r2, #0]
 800115c:	6019      	str	r1, [r3, #0]
 800115e:	8892      	ldrh	r2, [r2, #4]
 8001160:	809a      	strh	r2, [r3, #4]
#endif

	who_am_i = imu_read_byte(0x00);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff ff42 	bl	8000fec <imu_read_byte>
 8001168:	4603      	mov	r3, r0
 800116a:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7bba      	ldrb	r2, [r7, #14]
 8001170:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	2be0      	cmp	r3, #224	; 0xe0
 8001176:	d11e      	bne.n	80011b6 <imu_initialize+0xbe>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 800117c:	2101      	movs	r1, #1
 800117e:	2006      	movs	r0, #6
 8001180:	f7ff ff62 	bl	8001048 <imu_write_byte>
		HAL_Delay(100);
 8001184:	2064      	movs	r0, #100	; 0x64
 8001186:	f003 fbb5 	bl	80048f4 <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 800118a:	2110      	movs	r1, #16
 800118c:	2003      	movs	r0, #3
 800118e:	f7ff ff5b 	bl	8001048 <imu_write_byte>
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 8001192:	2120      	movs	r1, #32
 8001194:	207f      	movs	r0, #127	; 0x7f
 8001196:	f7ff ff57 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		imu_write_byte(0x01, 0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 800119a:	2107      	movs	r1, #7
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff ff53 	bl	8001048 <imu_write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		imu_write_byte(0x14, 0x00);	//range±2g
 80011a2:	2100      	movs	r1, #0
 80011a4:	2014      	movs	r0, #20
 80011a6:	f7ff ff4f 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		imu_write_byte(REG_BANK_SEL, 0x00);	//USER_BANK0
 80011aa:	2100      	movs	r1, #0
 80011ac:	207f      	movs	r0, #127	; 0x7f
 80011ae:	f7ff ff4b 	bl	8001048 <imu_write_byte>
		imu_set_offset();
 80011b2:	f000 f81b 	bl	80011ec <imu_set_offset>
	}
#if USE_NCS
	CS_SET;
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <imu_initialize+0xe0>)
 80011be:	f005 f96f 	bl	80064a0 <HAL_GPIO_WritePin>
#endif
	return ret;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	f3af 8000 	nop.w
 80011d0:	a2529d39 	.word	0xa2529d39
 80011d4:	3f91df46 	.word	0x3f91df46
 80011d8:	40020400 	.word	0x40020400
 80011dc:	20000210 	.word	0x20000210
 80011e0:	20000208 	.word	0x20000208
 80011e4:	20000230 	.word	0x20000230
 80011e8:	20000224 	.word	0x20000224

080011ec <imu_set_offset>:
	CS_SET;
#endif
}

void imu_set_offset()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	imu_read();
 80011f0:	f000 f80e 	bl	8001210 <imu_read>
	inertial_offset = inertial;
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <imu_set_offset+0x1c>)
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <imu_set_offset+0x20>)
 80011f8:	6810      	ldr	r0, [r2, #0]
 80011fa:	6851      	ldr	r1, [r2, #4]
 80011fc:	6892      	ldr	r2, [r2, #8]
 80011fe:	6018      	str	r0, [r3, #0]
 8001200:	6059      	str	r1, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000218 	.word	0x20000218
 800120c:	20000230 	.word	0x20000230

08001210 <imu_read>:

void imu_read()
{
 8001210:	b598      	push	{r3, r4, r7, lr}
 8001212:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)imu_read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_XOUT_L));
 8001214:	202d      	movs	r0, #45	; 0x2d
 8001216:	f7ff fee9 	bl	8000fec <imu_read_byte>
 800121a:	4603      	mov	r3, r0
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21c      	sxth	r4, r3
 8001220:	202e      	movs	r0, #46	; 0x2e
 8001222:	f7ff fee3 	bl	8000fec <imu_read_byte>
 8001226:	4603      	mov	r3, r0
 8001228:	b21b      	sxth	r3, r3
 800122a:	4323      	orrs	r3, r4
 800122c:	b21a      	sxth	r2, r3
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <imu_read+0xbc>)
 8001230:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)imu_read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_YOUT_L));
 8001232:	202f      	movs	r0, #47	; 0x2f
 8001234:	f7ff feda 	bl	8000fec <imu_read_byte>
 8001238:	4603      	mov	r3, r0
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21c      	sxth	r4, r3
 800123e:	2030      	movs	r0, #48	; 0x30
 8001240:	f7ff fed4 	bl	8000fec <imu_read_byte>
 8001244:	4603      	mov	r3, r0
 8001246:	b21b      	sxth	r3, r3
 8001248:	4323      	orrs	r3, r4
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <imu_read+0xbc>)
 800124e:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)imu_read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_ZOUT_L));
 8001250:	2031      	movs	r0, #49	; 0x31
 8001252:	f7ff fecb 	bl	8000fec <imu_read_byte>
 8001256:	4603      	mov	r3, r0
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21c      	sxth	r4, r3
 800125c:	2032      	movs	r0, #50	; 0x32
 800125e:	f7ff fec5 	bl	8000fec <imu_read_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	b21b      	sxth	r3, r3
 8001266:	4323      	orrs	r3, r4
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <imu_read+0xbc>)
 800126c:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 800126e:	2033      	movs	r0, #51	; 0x33
 8001270:	f7ff febc 	bl	8000fec <imu_read_byte>
 8001274:	4603      	mov	r3, r0
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21c      	sxth	r4, r3
 800127a:	2034      	movs	r0, #52	; 0x34
 800127c:	f7ff feb6 	bl	8000fec <imu_read_byte>
 8001280:	4603      	mov	r3, r0
 8001282:	b21b      	sxth	r3, r3
 8001284:	4323      	orrs	r3, r4
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <imu_read+0xbc>)
 800128a:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 800128c:	2035      	movs	r0, #53	; 0x35
 800128e:	f7ff fead 	bl	8000fec <imu_read_byte>
 8001292:	4603      	mov	r3, r0
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21c      	sxth	r4, r3
 8001298:	2036      	movs	r0, #54	; 0x36
 800129a:	f7ff fea7 	bl	8000fec <imu_read_byte>
 800129e:	4603      	mov	r3, r0
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4323      	orrs	r3, r4
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <imu_read+0xbc>)
 80012a8:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 80012aa:	2037      	movs	r0, #55	; 0x37
 80012ac:	f7ff fe9e 	bl	8000fec <imu_read_byte>
 80012b0:	4603      	mov	r3, r0
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21c      	sxth	r4, r3
 80012b6:	2038      	movs	r0, #56	; 0x38
 80012b8:	f7ff fe98 	bl	8000fec <imu_read_byte>
 80012bc:	4603      	mov	r3, r0
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4323      	orrs	r3, r4
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	4b01      	ldr	r3, [pc, #4]	; (80012cc <imu_read+0xbc>)
 80012c6:	815a      	strh	r2, [r3, #10]
}
 80012c8:	bf00      	nop
 80012ca:	bd98      	pop	{r3, r4, r7, pc}
 80012cc:	20000230 	.word	0x20000230

080012d0 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 80012d4:	f000 f804 	bl	80012e0 <rotary_set_playmode>
    rotary_set_value();
 80012d8:	f000 f81a 	bl	8001310 <rotary_set_value>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <rotary_set_playmode>:

void rotary_set_playmode()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 80012e4:	f000 f82c 	bl	8001340 <rotary_read>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b01      	ldr	r3, [pc, #4]	; (80012f4 <rotary_set_playmode+0x14>)
 80012ee:	701a      	strb	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000023c 	.word	0x2000023c

080012f8 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    return playmode;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <rotary_read_playmode+0x14>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000023c 	.word	0x2000023c

08001310 <rotary_set_value>:

void rotary_set_value()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    value = rotary_read();
 8001314:	f000 f814 	bl	8001340 <rotary_read>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b01      	ldr	r3, [pc, #4]	; (8001324 <rotary_set_value+0x14>)
 800131e:	701a      	strb	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000023d 	.word	0x2000023d

08001328 <rotary_read_value>:

uint8_t rotary_read_value()
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
    return value;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <rotary_read_value+0x14>)
 800132e:	781b      	ldrb	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000023d 	.word	0x2000023d

08001340 <rotary_read>:

uint8_t rotary_read()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 800134a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <rotary_read+0x8c>)
 8001350:	f005 f88e 	bl	8006470 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf0c      	ite	eq
 800135a:	2301      	moveq	r3, #1
 800135c:	2300      	movne	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4413      	add	r3, r2
 8001366:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136c:	4817      	ldr	r0, [pc, #92]	; (80013cc <rotary_read+0x8c>)
 800136e:	f005 f87f 	bl	8006470 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <rotary_read+0x3c>
 8001378:	2302      	movs	r3, #2
 800137a:	e000      	b.n	800137e <rotary_read+0x3e>
 800137c:	2300      	movs	r3, #0
 800137e:	b2da      	uxtb	r2, r3
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4413      	add	r3, r2
 8001384:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 8001386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <rotary_read+0x90>)
 800138c:	f005 f870 	bl	8006470 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <rotary_read+0x5a>
 8001396:	2304      	movs	r3, #4
 8001398:	e000      	b.n	800139c <rotary_read+0x5c>
 800139a:	2300      	movs	r3, #0
 800139c:	b2da      	uxtb	r2, r3
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4413      	add	r3, r2
 80013a2:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 80013a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <rotary_read+0x8c>)
 80013aa:	f005 f861 	bl	8006470 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <rotary_read+0x78>
 80013b4:	2308      	movs	r3, #8
 80013b6:	e000      	b.n	80013ba <rotary_read+0x7a>
 80013b8:	2300      	movs	r3, #0
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4413      	add	r3, r2
 80013c0:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 80013c2:	79fb      	ldrb	r3, [r7, #7]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020000 	.word	0x40020000

080013d4 <rotary_print_playmode>:

void rotary_print_playmode()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	printf("playmode = ");
 80013d8:	482c      	ldr	r0, [pc, #176]	; (800148c <rotary_print_playmode+0xb8>)
 80013da:	f008 fe4d 	bl	800a078 <iprintf>
	switch(rotary_read_playmode())
 80013de:	f7ff ff8b 	bl	80012f8 <rotary_read_playmode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d847      	bhi.n	8001478 <rotary_print_playmode+0xa4>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <rotary_print_playmode+0x1c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001431 	.word	0x08001431
 80013f4:	08001439 	.word	0x08001439
 80013f8:	08001441 	.word	0x08001441
 80013fc:	08001449 	.word	0x08001449
 8001400:	08001451 	.word	0x08001451
 8001404:	08001459 	.word	0x08001459
 8001408:	08001461 	.word	0x08001461
 800140c:	08001469 	.word	0x08001469
 8001410:	08001479 	.word	0x08001479
 8001414:	08001479 	.word	0x08001479
 8001418:	08001479 	.word	0x08001479
 800141c:	08001479 	.word	0x08001479
 8001420:	08001479 	.word	0x08001479
 8001424:	08001479 	.word	0x08001479
 8001428:	08001479 	.word	0x08001479
 800142c:	08001471 	.word	0x08001471
	{
		case calibration:
			printf("calibration");
 8001430:	4817      	ldr	r0, [pc, #92]	; (8001490 <rotary_print_playmode+0xbc>)
 8001432:	f008 fe21 	bl	800a078 <iprintf>
			break;
 8001436:	e023      	b.n	8001480 <rotary_print_playmode+0xac>
		case search:
			printf("search");
 8001438:	4816      	ldr	r0, [pc, #88]	; (8001494 <rotary_print_playmode+0xc0>)
 800143a:	f008 fe1d 	bl	800a078 <iprintf>
			break;
 800143e:	e01f      	b.n	8001480 <rotary_print_playmode+0xac>
		case accel:
			printf("accel");
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <rotary_print_playmode+0xc4>)
 8001442:	f008 fe19 	bl	800a078 <iprintf>
			break;
 8001446:	e01b      	b.n	8001480 <rotary_print_playmode+0xac>
		case max_enable:
			printf("max_enable");
 8001448:	4814      	ldr	r0, [pc, #80]	; (800149c <rotary_print_playmode+0xc8>)
 800144a:	f008 fe15 	bl	800a078 <iprintf>
			break;
 800144e:	e017      	b.n	8001480 <rotary_print_playmode+0xac>
        case motor_free:
            printf("motor_free");
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <rotary_print_playmode+0xcc>)
 8001452:	f008 fe11 	bl	800a078 <iprintf>
            break;
 8001456:	e013      	b.n	8001480 <rotary_print_playmode+0xac>
		case tracer_tuning:
			printf("tracer_tuning");
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <rotary_print_playmode+0xd0>)
 800145a:	f008 fe0d 	bl	800a078 <iprintf>
			break;
 800145e:	e00f      	b.n	8001480 <rotary_print_playmode+0xac>
		case velotrace_tuning:
			printf("velotrace_tuning");
 8001460:	4811      	ldr	r0, [pc, #68]	; (80014a8 <rotary_print_playmode+0xd4>)
 8001462:	f008 fe09 	bl	800a078 <iprintf>
			break;
 8001466:	e00b      	b.n	8001480 <rotary_print_playmode+0xac>
		case banquet:
			printf("banquet");
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <rotary_print_playmode+0xd8>)
 800146a:	f008 fe05 	bl	800a078 <iprintf>
			break;
 800146e:	e007      	b.n	8001480 <rotary_print_playmode+0xac>
		case flash_print:
			printf("flash_print");
 8001470:	480f      	ldr	r0, [pc, #60]	; (80014b0 <rotary_print_playmode+0xdc>)
 8001472:	f008 fe01 	bl	800a078 <iprintf>
			break;
 8001476:	e003      	b.n	8001480 <rotary_print_playmode+0xac>
		default:
			printf("unknown playmode...");
 8001478:	480e      	ldr	r0, [pc, #56]	; (80014b4 <rotary_print_playmode+0xe0>)
 800147a:	f008 fdfd 	bl	800a078 <iprintf>
			break;
 800147e:	bf00      	nop
	}
	printf("\r\n");
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <rotary_print_playmode+0xe4>)
 8001482:	f008 fe7f 	bl	800a184 <puts>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800dd3c 	.word	0x0800dd3c
 8001490:	0800dd48 	.word	0x0800dd48
 8001494:	0800dd54 	.word	0x0800dd54
 8001498:	0800dd5c 	.word	0x0800dd5c
 800149c:	0800dd64 	.word	0x0800dd64
 80014a0:	0800dd70 	.word	0x0800dd70
 80014a4:	0800dd7c 	.word	0x0800dd7c
 80014a8:	0800dd8c 	.word	0x0800dd8c
 80014ac:	0800dda0 	.word	0x0800dda0
 80014b0:	0800dda8 	.word	0x0800dda8
 80014b4:	0800ddb4 	.word	0x0800ddb4
 80014b8:	0800ddc8 	.word	0x0800ddc8

080014bc <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
    enter = 1;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <switch_set_enter+0x14>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	2000023e 	.word	0x2000023e

080014d4 <switch_reset_enter>:

void switch_reset_enter()
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
    enter = 0;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <switch_reset_enter+0x14>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	2000023e 	.word	0x2000023e

080014ec <switch_init>:

void switch_init()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    switch_reset_enter();
 80014f0:	f7ff fff0 	bl	80014d4 <switch_reset_enter>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <switch_read_enter>:

uint8_t switch_read_enter()
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
    return enter;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <switch_read_enter+0x14>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000023e 	.word	0x2000023e

08001510 <switch1_read>:

uint8_t switch1_read()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 8001514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <switch1_read+0x20>)
 800151a:	f004 ffa9 	bl	8006470 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40020800 	.word	0x40020800

08001534 <switch2_read>:

uint8_t switch2_read()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 8001538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <switch2_read+0x20>)
 800153e:	f004 ff97 	bl	8006470 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020800 	.word	0x40020800

08001558 <switch_read>:

uint8_t switch_read()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 8001562:	f7ff ffd5 	bl	8001510 <switch1_read>
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	4413      	add	r3, r2
 8001570:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 8001572:	f7ff ffdf 	bl	8001534 <switch2_read>
 8001576:	4603      	mov	r3, r0
 8001578:	b2da      	uxtb	r2, r3
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4413      	add	r3, r2
 800157e:	71fb      	strb	r3, [r7, #7]

    return value_;
 8001580:	79fb      	ldrb	r3, [r7, #7]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <switch_enter>:

void switch_enter()
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 800158e:	f7ff ffe3 	bl	8001558 <switch_read>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <switch_enter+0x14>
    {
        switch_reset_enter();
 8001598:	f7ff ff9c 	bl	80014d4 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 800159c:	e006      	b.n	80015ac <switch_enter+0x22>
    else if(switch_read() == 0b10)
 800159e:	f7ff ffdb 	bl	8001558 <switch_read>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d101      	bne.n	80015ac <switch_enter+0x22>
        switch_set_enter();
 80015a8:	f7ff ff88 	bl	80014bc <switch_set_enter>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 80015b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b4:	b08e      	sub	sp, #56	; 0x38
 80015b6:	af0a      	add	r7, sp, #40	; 0x28
 80015b8:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 80015ba:	482d      	ldr	r0, [pc, #180]	; (8001670 <analog_array_print+0xc0>)
 80015bc:	f008 fd5c 	bl	800a078 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3318      	adds	r3, #24
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	331c      	adds	r3, #28
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	331e      	adds	r3, #30
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	331a      	adds	r3, #26
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	4603      	mov	r3, r0
 80015e2:	4824      	ldr	r0, [pc, #144]	; (8001674 <analog_array_print+0xc4>)
 80015e4:	f008 fd48 	bl	800a078 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	469c      	mov	ip, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3304      	adds	r3, #4
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	469e      	mov	lr, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3308      	adds	r3, #8
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	4698      	mov	r8, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	330c      	adds	r3, #12
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3310      	adds	r3, #16
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3314      	adds	r3, #20
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3316      	adds	r3, #22
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	461c      	mov	r4, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3312      	adds	r3, #18
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	461d      	mov	r5, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	330e      	adds	r3, #14
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	461e      	mov	r6, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	330a      	adds	r3, #10
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3306      	adds	r3, #6
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3302      	adds	r3, #2
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	9308      	str	r3, [sp, #32]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	9307      	str	r3, [sp, #28]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	9306      	str	r3, [sp, #24]
 800164e:	9605      	str	r6, [sp, #20]
 8001650:	9504      	str	r5, [sp, #16]
 8001652:	9403      	str	r4, [sp, #12]
 8001654:	9002      	str	r0, [sp, #8]
 8001656:	9101      	str	r1, [sp, #4]
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	4643      	mov	r3, r8
 800165c:	4672      	mov	r2, lr
 800165e:	4661      	mov	r1, ip
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <analog_array_print+0xc8>)
 8001662:	f008 fd09 	bl	800a078 <iprintf>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001670:	0800ddcc 	.word	0x0800ddcc
 8001674:	0800ddd4 	.word	0x0800ddd4
 8001678:	0800ddec 	.word	0x0800ddec

0800167c <analog_print_max>:
	analog_print_analogmode();
	analog_array_print(analog);
}

void analog_print_max()
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <analog_print_max+0x20>)
 8001682:	f008 fcf9 	bl	800a078 <iprintf>
	printf("analog_print_max\r\n");
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <analog_print_max+0x24>)
 8001688:	f008 fd7c 	bl	800a184 <puts>
	analog_array_print(analogmax);
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <analog_print_max+0x28>)
 800168e:	f7ff ff8f 	bl	80015b0 <analog_array_print>
	printf(ESC_DEF);
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <analog_print_max+0x2c>)
 8001694:	f008 fcf0 	bl	800a078 <iprintf>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	0800de8c 	.word	0x0800de8c
 80016a0:	0800de94 	.word	0x0800de94
 80016a4:	200003e8 	.word	0x200003e8
 80016a8:	0800dea8 	.word	0x0800dea8

080016ac <analog_print_min>:

void analog_print_min()
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 80016b0:	4806      	ldr	r0, [pc, #24]	; (80016cc <analog_print_min+0x20>)
 80016b2:	f008 fce1 	bl	800a078 <iprintf>
	printf("analog_print_min\r\n");
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <analog_print_min+0x24>)
 80016b8:	f008 fd64 	bl	800a184 <puts>
	analog_array_print(analogmin);
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <analog_print_min+0x28>)
 80016be:	f7ff ff77 	bl	80015b0 <analog_array_print>
	printf(ESC_DEF);
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <analog_print_min+0x2c>)
 80016c4:	f008 fcd8 	bl	800a078 <iprintf>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	0800deb0 	.word	0x0800deb0
 80016d0:	0800deb8 	.word	0x0800deb8
 80016d4:	20000284 	.word	0x20000284
 80016d8:	0800dea8 	.word	0x0800dea8

080016dc <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	printf("analog_set_to_flash()\r\n");
 80016e6:	482a      	ldr	r0, [pc, #168]	; (8001790 <analog_set_on_flash+0xb4>)
 80016e8:	f008 fd4c 	bl	800a184 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e046      	b.n	8001780 <analog_set_on_flash+0xa4>
	{
		printf(ESC_MAG);
 80016f2:	4828      	ldr	r0, [pc, #160]	; (8001794 <analog_set_on_flash+0xb8>)
 80016f4:	f008 fcc0 	bl	800a078 <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 80016f8:	4a27      	ldr	r2, [pc, #156]	; (8001798 <analog_set_on_flash+0xbc>)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	885b      	ldrh	r3, [r3, #2]
 8001702:	4619      	mov	r1, r3
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <analog_set_on_flash+0xbc>)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3310      	adds	r3, #16
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	885b      	ldrh	r3, [r3, #2]
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	460a      	mov	r2, r1
 8001716:	68f9      	ldr	r1, [r7, #12]
 8001718:	4820      	ldr	r0, [pc, #128]	; (800179c <analog_set_on_flash+0xc0>)
 800171a:	f008 fcad 	bl	800a078 <iprintf>
		printf(ESC_DEF);
 800171e:	4820      	ldr	r0, [pc, #128]	; (80017a0 <analog_set_on_flash+0xc4>)
 8001720:	f008 fcaa 	bl	800a078 <iprintf>
		*(analogmin_ + i) = analogmin[i];
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4413      	add	r3, r2
 800172c:	491d      	ldr	r1, [pc, #116]	; (80017a4 <analog_set_on_flash+0xc8>)
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001734:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	4413      	add	r3, r2
 800173e:	491a      	ldr	r1, [pc, #104]	; (80017a8 <analog_set_on_flash+0xcc>)
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001746:	801a      	strh	r2, [r3, #0]
		printf(ESC_GRE);
 8001748:	4818      	ldr	r0, [pc, #96]	; (80017ac <analog_set_on_flash+0xd0>)
 800174a:	f008 fc95 	bl	800a078 <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <analog_set_on_flash+0xbc>)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	885b      	ldrh	r3, [r3, #2]
 8001758:	4619      	mov	r1, r3
 800175a:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <analog_set_on_flash+0xbc>)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3310      	adds	r3, #16
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	885b      	ldrh	r3, [r3, #2]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	460a      	mov	r2, r1
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <analog_set_on_flash+0xc0>)
 8001770:	f008 fc82 	bl	800a078 <iprintf>
		printf(ESC_DEF);
 8001774:	480a      	ldr	r0, [pc, #40]	; (80017a0 <analog_set_on_flash+0xc4>)
 8001776:	f008 fc7f 	bl	800a078 <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	d9b5      	bls.n	80016f2 <analog_set_on_flash+0x16>
	}
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	0800decc 	.word	0x0800decc
 8001794:	0800dee4 	.word	0x0800dee4
 8001798:	20000778 	.word	0x20000778
 800179c:	0800deec 	.word	0x0800deec
 80017a0:	0800dea8 	.word	0x0800dea8
 80017a4:	20000284 	.word	0x20000284
 80017a8:	200003e8 	.word	0x200003e8
 80017ac:	0800df28 	.word	0x0800df28

080017b0 <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	printf("analog_set_from_flash()\r\n");
 80017ba:	4824      	ldr	r0, [pc, #144]	; (800184c <analog_set_from_flash+0x9c>)
 80017bc:	f008 fce2 	bl	800a184 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e03a      	b.n	800183c <analog_set_from_flash+0x8c>
	{
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 80017c6:	4a22      	ldr	r2, [pc, #136]	; (8001850 <analog_set_from_flash+0xa0>)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	885b      	ldrh	r3, [r3, #2]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <analog_set_from_flash+0xa0>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3310      	adds	r3, #16
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	885b      	ldrh	r3, [r3, #2]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	460a      	mov	r2, r1
 80017e4:	68f9      	ldr	r1, [r7, #12]
 80017e6:	481b      	ldr	r0, [pc, #108]	; (8001854 <analog_set_from_flash+0xa4>)
 80017e8:	f008 fc46 	bl	800a078 <iprintf>
		analogmin[i] = *(analogmin_ + i);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	8819      	ldrh	r1, [r3, #0]
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <analog_set_from_flash+0xa8>)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	8819      	ldrh	r1, [r3, #0]
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <analog_set_from_flash+0xac>)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001810:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <analog_set_from_flash+0xa0>)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	885b      	ldrh	r3, [r3, #2]
 800181a:	4619      	mov	r1, r3
 800181c:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <analog_set_from_flash+0xa0>)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3310      	adds	r3, #16
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	885b      	ldrh	r3, [r3, #2]
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	460a      	mov	r2, r1
 800182e:	68f9      	ldr	r1, [r7, #12]
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <analog_set_from_flash+0xa4>)
 8001832:	f008 fc21 	bl	800a078 <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	3301      	adds	r3, #1
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	d9c1      	bls.n	80017c6 <analog_set_from_flash+0x16>
	}
}
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	0800df30 	.word	0x0800df30
 8001850:	20000778 	.word	0x20000778
 8001854:	0800deec 	.word	0x0800deec
 8001858:	20000284 	.word	0x20000284
 800185c:	200003e8 	.word	0x200003e8

08001860 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 800186a:	4a04      	ldr	r2, [pc, #16]	; (800187c <analog_set_calibrationsize+0x1c>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	7013      	strb	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	200002a5 	.word	0x200002a5

08001880 <analog_read_calibrationsize>:

uint8_t analog_read_calibrationsize()
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
	return calibrationsize;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <analog_read_calibrationsize+0x14>)
 8001886:	781b      	ldrb	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200002a5 	.word	0x200002a5

08001898 <analog_set_analogmode>:

void analog_set_analogmode(AnalogMode analogmode_)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 80018a2:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <analog_set_analogmode+0x1c>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	7013      	strb	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	200002a4 	.word	0x200002a4

080018b8 <analog_calibration_start>:
{
	return analogmode;
}

void analog_calibration_start()
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	analog_set_analogmode(calibrating);
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff ffea 	bl	8001898 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	e00d      	b.n	80018e6 <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <analog_calibration_start+0x48>)
 80018ce:	2100      	movs	r1, #0
 80018d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <analog_calibration_start+0x4c>)
 80018d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 80018e0:	79fb      	ldrb	r3, [r7, #7]
 80018e2:	3301      	adds	r3, #1
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d9ee      	bls.n	80018ca <analog_calibration_start+0x12>
    }
	analog_print_max();
 80018ec:	f7ff fec6 	bl	800167c <analog_print_max>
	analog_print_min();
 80018f0:	f7ff fedc 	bl	80016ac <analog_print_min>
	analog_sensor_start();
 80018f4:	f000 f844 	bl	8001980 <analog_sensor_start>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200003e8 	.word	0x200003e8
 8001904:	20000284 	.word	0x20000284

08001908 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(all);
 800190c:	2010      	movs	r0, #16
 800190e:	f7ff ffc3 	bl	8001898 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001912:	f000 f82f 	bl	8001974 <analog_stop>
	analog_print_max();
 8001916:	f7ff feb1 	bl	800167c <analog_print_max>
	analog_print_min();
 800191a:	f7ff fec7 	bl	80016ac <analog_print_min>
	/* flashbuffer.analogmin/max = analogmin/max */
	analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 800191e:	4904      	ldr	r1, [pc, #16]	; (8001930 <analog_calibration_stop+0x28>)
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <analog_calibration_stop+0x2c>)
 8001922:	f7ff fedb 	bl	80016dc <analog_set_on_flash>
	flash_write();
 8001926:	f000 fa87 	bl	8001e38 <flash_write>
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000079a 	.word	0x2000079a
 8001934:	2000077a 	.word	0x2000077a

08001938 <analog_init>:

void analog_init()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 800193c:	2010      	movs	r0, #16
 800193e:	f7ff ff8f 	bl	8001860 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001942:	4805      	ldr	r0, [pc, #20]	; (8001958 <analog_init+0x20>)
 8001944:	f002 fffa 	bl	800493c <HAL_ADC_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <analog_init+0x1a>
    {
        Error_Handler();
 800194e:	f001 f949 	bl	8002be4 <Error_Handler>
    }
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000574 	.word	0x20000574

0800195c <analog_start>:

void analog_start()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	printf("analog_sensor_start()\r\n");
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <analog_start+0x14>)
 8001962:	f008 fc0f 	bl	800a184 <puts>
	analog_sensor_start();
 8001966:	f000 f80b 	bl	8001980 <analog_sensor_start>
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	0800df4c 	.word	0x0800df4c

08001974 <analog_stop>:

void analog_stop()
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001978:	f000 f822 	bl	80019c0 <analog_sensor_stop>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <analog_sensor_start>:

void analog_sensor_start()
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
 8001984:	480a      	ldr	r0, [pc, #40]	; (80019b0 <analog_sensor_start+0x30>)
 8001986:	f008 fbfd 	bl	800a184 <puts>
    sensgettime = 0;
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <analog_sensor_start+0x34>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001990:	2210      	movs	r2, #16
 8001992:	4909      	ldr	r1, [pc, #36]	; (80019b8 <analog_sensor_start+0x38>)
 8001994:	4809      	ldr	r0, [pc, #36]	; (80019bc <analog_sensor_start+0x3c>)
 8001996:	f003 f815 	bl	80049c4 <HAL_ADC_Start_DMA>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <analog_sensor_start+0x24>
    {
        Error_Handler();
 80019a0:	f001 f920 	bl	8002be4 <Error_Handler>
    }
    HAL_Delay(1000);
 80019a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a8:	f002 ffa4 	bl	80048f4 <HAL_Delay>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	0800df64 	.word	0x0800df64
 80019b4:	20000260 	.word	0x20000260
 80019b8:	20000264 	.word	0x20000264
 80019bc:	20000574 	.word	0x20000574

080019c0 <analog_sensor_stop>:

void analog_sensor_stop()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <analog_sensor_stop+0x10>)
 80019c6:	f003 f8ef 	bl	8004ba8 <HAL_ADC_Stop_DMA>
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000574 	.word	0x20000574

080019d4 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (double) (analogmax[i] - analogmin[i]);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <analog_sensor_get+0x80>)
 80019e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019e6:	4619      	mov	r1, r3
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <analog_sensor_get+0x84>)
 80019ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019f0:	1acb      	subs	r3, r1, r3
 80019f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fd92 	bl	8000524 <__aeabi_i2d>
 8001a00:	4604      	mov	r4, r0
 8001a02:	460d      	mov	r5, r1
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <analog_sensor_get+0x88>)
 8001a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <analog_sensor_get+0x84>)
 8001a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a16:	1acb      	subs	r3, r1, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd83 	bl	8000524 <__aeabi_i2d>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4620      	mov	r0, r4
 8001a24:	4629      	mov	r1, r5
 8001a26:	f7fe ff11 	bl	800084c <__aeabi_ddiv>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	79fc      	ldrb	r4, [r7, #7]
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7ff f8b8 	bl	8000ba8 <__aeabi_d2uiz>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <analog_sensor_get+0x8c>)
 8001a3e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500);
#endif
	return analograte[i];
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <analog_sensor_get+0x8c>)
 8001a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000240 	.word	0x20000240
 8001a58:	20000284 	.word	0x20000284
 8001a5c:	200003e8 	.word	0x200003e8
 8001a60:	200002a8 	.word	0x200002a8

08001a64 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001a6c:	f000 f804 	bl	8001a78 <analog_get_and_sort>
#endif
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001a78:	b490      	push	{r4, r7}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001a7e:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <analog_get_and_sort+0x120>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d968      	bls.n	8001b58 <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001a86:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <analog_get_and_sort+0x120>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	e05f      	b.n	8001b52 <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	71bb      	strb	r3, [r7, #6]
 8001a96:	e02d      	b.n	8001af4 <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001a98:	2300      	movs	r3, #0
 8001a9a:	717b      	strb	r3, [r7, #5]
 8001a9c:	e023      	b.n	8001ae6 <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001a9e:	797b      	ldrb	r3, [r7, #5]
 8001aa0:	1e5a      	subs	r2, r3, #1
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	493d      	ldr	r1, [pc, #244]	; (8001b9c <analog_get_and_sort+0x124>)
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001aae:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001ab0:	7978      	ldrb	r0, [r7, #5]
 8001ab2:	79f9      	ldrb	r1, [r7, #7]
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	1e5a      	subs	r2, r3, #1
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4c38      	ldr	r4, [pc, #224]	; (8001b9c <analog_get_and_sort+0x124>)
 8001abc:	0100      	lsls	r0, r0, #4
 8001abe:	4401      	add	r1, r0
 8001ac0:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001ac4:	4935      	ldr	r1, [pc, #212]	; (8001b9c <analog_get_and_sort+0x124>)
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	4413      	add	r3, r2
 8001aca:	4602      	mov	r2, r0
 8001acc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001ad0:	797a      	ldrb	r2, [r7, #5]
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4931      	ldr	r1, [pc, #196]	; (8001b9c <analog_get_and_sort+0x124>)
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	4413      	add	r3, r2
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001ae0:	797b      	ldrb	r3, [r7, #5]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	717b      	strb	r3, [r7, #5]
 8001ae6:	797a      	ldrb	r2, [r7, #5]
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d8d7      	bhi.n	8001a9e <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	3301      	adds	r3, #1
 8001af2:	71bb      	strb	r3, [r7, #6]
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d9ce      	bls.n	8001a98 <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001afa:	79fa      	ldrb	r2, [r7, #7]
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	4927      	ldr	r1, [pc, #156]	; (8001b9c <analog_get_and_sort+0x124>)
 8001b00:	3240      	adds	r2, #64	; 0x40
 8001b02:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b06:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <analog_get_and_sort+0x128>)
 8001b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4a25      	ldr	r2, [pc, #148]	; (8001ba4 <analog_get_and_sort+0x12c>)
 8001b10:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <analog_get_and_sort+0x128>)
 8001b18:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	bf38      	it	cc
 8001b22:	460a      	movcc	r2, r1
 8001b24:	b291      	uxth	r1, r2
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <analog_get_and_sort+0x12c>)
 8001b28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <analog_get_and_sort+0x130>)
 8001b30:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4a1a      	ldr	r2, [pc, #104]	; (8001ba0 <analog_get_and_sort+0x128>)
 8001b38:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	428a      	cmp	r2, r1
 8001b40:	bf28      	it	cs
 8001b42:	460a      	movcs	r2, r1
 8001b44:	b291      	uxth	r1, r2
 8001b46:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <analog_get_and_sort+0x130>)
 8001b48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	71fb      	strb	r3, [r7, #7]
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b0f      	cmp	r3, #15
 8001b56:	d99c      	bls.n	8001a92 <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	713b      	strb	r3, [r7, #4]
 8001b5c:	e00f      	b.n	8001b7e <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001b5e:	7939      	ldrb	r1, [r7, #4]
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <analog_get_and_sort+0x120>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	793b      	ldrb	r3, [r7, #4]
 8001b66:	4811      	ldr	r0, [pc, #68]	; (8001bac <analog_get_and_sort+0x134>)
 8001b68:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001b6c:	490b      	ldr	r1, [pc, #44]	; (8001b9c <analog_get_and_sort+0x124>)
 8001b6e:	0112      	lsls	r2, r2, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	4602      	mov	r2, r0
 8001b74:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001b78:	793b      	ldrb	r3, [r7, #4]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	713b      	strb	r3, [r7, #4]
 8001b7e:	793b      	ldrb	r3, [r7, #4]
 8001b80:	2b0f      	cmp	r3, #15
 8001b82:	d9ec      	bls.n	8001b5e <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <analog_get_and_sort+0x120>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	4a03      	ldr	r2, [pc, #12]	; (8001b98 <analog_get_and_sort+0x120>)
 8001b8c:	6013      	str	r3, [r2, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc90      	pop	{r4, r7}
 8001b96:	4770      	bx	lr
 8001b98:	20000260 	.word	0x20000260
 8001b9c:	200002c8 	.word	0x200002c8
 8001ba0:	20000240 	.word	0x20000240
 8001ba4:	200003e8 	.word	0x200003e8
 8001ba8:	20000284 	.word	0x20000284
 8001bac:	20000264 	.word	0x20000264

08001bb0 <encoder_length>:
int16_t encoder_left, encoder_right;
double encoder;

/* public */
double encoder_length()
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    return (double) encoder * (double) LENGTHPERPULSE;
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <encoder_length+0x30>)
 8001bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bba:	a307      	add	r3, pc, #28	; (adr r3, 8001bd8 <encoder_length+0x28>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fd1a 	bl	80005f8 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001bd0:	eef0 0a67 	vmov.f32	s1, s15
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	24a478cb 	.word	0x24a478cb
 8001bdc:	40192ab8 	.word	0x40192ab8
 8001be0:	20000768 	.word	0x20000768
 8001be4:	00000000 	.word	0x00000000

08001be8 <encoder_length_left>:

double encoder_length_left()
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    return (double) encoder_left * (double) LENGTHPERPULSE;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <encoder_length_left+0x38>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fc96 	bl	8000524 <__aeabi_i2d>
 8001bf8:	a307      	add	r3, pc, #28	; (adr r3, 8001c18 <encoder_length_left+0x30>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fcfb 	bl	80005f8 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0e:	eef0 0a67 	vmov.f32	s1, s15
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	f3af 8000 	nop.w
 8001c18:	24a478cb 	.word	0x24a478cb
 8001c1c:	40192ab8 	.word	0x40192ab8
 8001c20:	20000760 	.word	0x20000760
 8001c24:	00000000 	.word	0x00000000

08001c28 <encoder_length_right>:

double encoder_length_right()
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    return (double) encoder_right * (double) LENGTHPERPULSE;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <encoder_length_right+0x38>)
 8001c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fc76 	bl	8000524 <__aeabi_i2d>
 8001c38:	a307      	add	r3, pc, #28	; (adr r3, 8001c58 <encoder_length_right+0x30>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fcdb 	bl	80005f8 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c4e:	eef0 0a67 	vmov.f32	s1, s15
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	f3af 8000 	nop.w
 8001c58:	24a478cb 	.word	0x24a478cb
 8001c5c:	40192ab8 	.word	0x40192ab8
 8001c60:	20000770 	.word	0x20000770

08001c64 <encoder_set>:
    #endif
}

/* only read tim10_main */
void encoder_set()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <encoder_set+0x5c>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <encoder_set+0x60>)
 8001c78:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <encoder_set+0x64>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <encoder_set+0x68>)
 8001c8a:	801a      	strh	r2, [r3, #0]
    encoder = (encoder_left + encoder_right) / (double) 2;
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <encoder_set+0x60>)
 8001c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <encoder_set+0x68>)
 8001c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc41 	bl	8000524 <__aeabi_i2d>
 8001ca2:	f04f 0200 	mov.w	r2, #0
 8001ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001caa:	f7fe fdcf 	bl	800084c <__aeabi_ddiv>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4907      	ldr	r1, [pc, #28]	; (8001cd0 <encoder_set+0x6c>)
 8001cb4:	e9c1 2300 	strd	r2, r3, [r1]

    encoder_set_middle();
 8001cb8:	f000 f85a 	bl	8001d70 <encoder_set_middle>
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	20000760 	.word	0x20000760
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	20000770 	.word	0x20000770
 8001cd0:	20000768 	.word	0x20000768
 8001cd4:	00000000 	.word	0x00000000

08001cd8 <encoder_init>:

void encoder_init()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
 8001cdc:	a305      	add	r3, pc, #20	; (adr r3, 8001cf4 <encoder_init+0x1c>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <encoder_init+0x18>)
 8001ce4:	f008 f9c8 	bl	800a078 <iprintf>
    #endif
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	f3af 8000 	nop.w
 8001cf0:	0800dfd4 	.word	0x0800dfd4
 8001cf4:	24a478cb 	.word	0x24a478cb
 8001cf8:	40192ab8 	.word	0x40192ab8

08001cfc <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
    encoder_left = 0;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <encoder_start+0x3c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <encoder_start+0x40>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 8001d0c:	490c      	ldr	r1, [pc, #48]	; (8001d40 <encoder_start+0x44>)
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9c1 2300 	strd	r2, r3, [r1]

    encoder_set_middle();
 8001d1a:	f000 f829 	bl	8001d70 <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001d1e:	213c      	movs	r1, #60	; 0x3c
 8001d20:	4808      	ldr	r0, [pc, #32]	; (8001d44 <encoder_start+0x48>)
 8001d22:	f006 f8a7 	bl	8007e74 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001d26:	213c      	movs	r1, #60	; 0x3c
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <encoder_start+0x4c>)
 8001d2a:	f006 f8a3 	bl	8007e74 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 8001d2e:	4807      	ldr	r0, [pc, #28]	; (8001d4c <encoder_start+0x50>)
 8001d30:	f005 fefd 	bl	8007b2e <HAL_TIM_Base_Start_IT>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000760 	.word	0x20000760
 8001d3c:	20000770 	.word	0x20000770
 8001d40:	20000768 	.word	0x20000768
 8001d44:	2000069c 	.word	0x2000069c
 8001d48:	20000534 	.word	0x20000534
 8001d4c:	200004f4 	.word	0x200004f4

08001d50 <encoder_stop>:

void encoder_stop()
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001d54:	213c      	movs	r1, #60	; 0x3c
 8001d56:	4804      	ldr	r0, [pc, #16]	; (8001d68 <encoder_stop+0x18>)
 8001d58:	f006 f8c4 	bl	8007ee4 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001d5c:	213c      	movs	r1, #60	; 0x3c
 8001d5e:	4803      	ldr	r0, [pc, #12]	; (8001d6c <encoder_stop+0x1c>)
 8001d60:	f006 f8c0 	bl	8007ee4 <HAL_TIM_Encoder_Stop>
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	2000069c 	.word	0x2000069c
 8001d6c:	20000534 	.word	0x20000534

08001d70 <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <encoder_set_middle+0x20>)
 8001d76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <encoder_set_middle+0x24>)
 8001d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40000400 	.word	0x40000400

08001d98 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 8001da2:	230b      	movs	r3, #11
 8001da4:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001daa:	2302      	movs	r3, #2
 8001dac:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 8001db2:	463a      	mov	r2, r7
 8001db4:	1d3b      	adds	r3, r7, #4
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f004 f89b 	bl	8005ef4 <HAL_FLASHEx_Erase>
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 8001dd2:	f003 ff2d 	bl	8005c30 <HAL_FLASH_Unlock>
	flash_erase();
 8001dd6:	f7ff ffdf 	bl	8001d98 <flash_erase>

	for (uint32_t add = address; add < (address + size); add++)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e00e      	b.n	8001dfe <flash_writting+0x38>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	6979      	ldr	r1, [r7, #20]
 8001dec:	2000      	movs	r0, #0
 8001dee:	f003 fecb 	bl	8005b88 <HAL_FLASH_Program>
		data++;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4413      	add	r3, r2
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3ea      	bcc.n	8001de0 <flash_writting+0x1a>
	}

	HAL_FLASH_Lock();
 8001e0a:	f003 ff33 	bl	8005c74 <HAL_FLASH_Lock>
#endif
}
 8001e0e:	bf00      	nop
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4619      	mov	r1, r3
 8001e28:	68b8      	ldr	r0, [r7, #8]
 8001e2a:	f007 fa95 	bl	8009358 <memcpy>
}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <flash_write>:

void flash_write()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	flash_writting(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <flash_write+0x14>)
 8001e3e:	2260      	movs	r2, #96	; 0x60
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <flash_write+0x18>)
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ffbf 	bl	8001dc6 <flash_writting>
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	080e0000 	.word	0x080e0000
 8001e50:	20000778 	.word	0x20000778

08001e54 <flash_read>:

void flash_read()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	flash_reading(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <flash_read+0x14>)
 8001e5a:	2260      	movs	r2, #96	; 0x60
 8001e5c:	4903      	ldr	r1, [pc, #12]	; (8001e6c <flash_read+0x18>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ffd9 	bl	8001e16 <flash_reading>
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	080e0000 	.word	0x080e0000
 8001e6c:	20000778 	.word	0x20000778

08001e70 <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	flash_read();
 8001e74:	f7ff ffee 	bl	8001e54 <flash_read>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_TIM_PeriodElapsedCallback>:
static void MX_I2C1_Init(void);
static void MX_TIM14_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
    #if !D_TIM6_WHILE
    tim6_main();
    #endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
    tim10_main();
 8001e8e:	f001 fd1f 	bl	80038d0 <tim10_main>
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
    tim11_main();
 8001e9c:	f001 fe3e 	bl	8003b1c <tim11_main>
	}
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40014400 	.word	0x40014400
 8001eac:	40014800 	.word	0x40014800

08001eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb4:	f002 fcac 	bl	8004810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb8:	f000 f97c 	bl	80021b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ebc:	f000 fd68 	bl	8002990 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ec0:	f000 fd46 	bl	8002950 <MX_DMA_Init>
  MX_ADC1_Init();
 8001ec4:	f000 f9e0 	bl	8002288 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8001ec8:	f000 fd18 	bl	80028fc <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8001ecc:	f000 fc74 	bl	80027b8 <MX_TIM6_Init>
  MX_TIM4_Init();
 8001ed0:	f000 fc0e 	bl	80026f0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001ed4:	f000 fb60 	bl	8002598 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ed8:	f000 fbb6 	bl	8002648 <MX_TIM3_Init>
  MX_TIM10_Init();
 8001edc:	f000 fca2 	bl	8002824 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001ee0:	f000 fcc4 	bl	800286c <MX_TIM11_Init>
  MX_SPI2_Init();
 8001ee4:	f000 fb22 	bl	800252c <MX_SPI2_Init>
  MX_I2C1_Init();
 8001ee8:	f000 faf2 	bl	80024d0 <MX_I2C1_Init>
  MX_TIM14_Init();
 8001eec:	f000 fce2 	bl	80028b4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8001ef0:	48ae      	ldr	r0, [pc, #696]	; (80021ac <main+0x2fc>)
 8001ef2:	f008 f8c1 	bl	800a078 <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8001ef6:	48ae      	ldr	r0, [pc, #696]	; (80021b0 <main+0x300>)
 8001ef8:	f008 f944 	bl	800a184 <puts>

  main_init();
 8001efc:	f000 fe32 	bl	8002b64 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 8001f00:	f000 fe46 	bl	8002b90 <main_print_while>

		if(switch_read_enter())
 8001f04:	f7ff faf8 	bl	80014f8 <switch_read_enter>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8144 	beq.w	8002198 <main+0x2e8>
		{
			switch(rotary_read())
 8001f10:	f7ff fa16 	bl	8001340 <rotary_read>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f200 8140 	bhi.w	800219c <main+0x2ec>
 8001f1c:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <main+0x74>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	08001f65 	.word	0x08001f65
 8001f28:	08001faf 	.word	0x08001faf
 8001f2c:	08001fcf 	.word	0x08001fcf
 8001f30:	08001fef 	.word	0x08001fef
 8001f34:	0800200f 	.word	0x0800200f
 8001f38:	0800202f 	.word	0x0800202f
 8001f3c:	0800204f 	.word	0x0800204f
 8001f40:	0800206f 	.word	0x0800206f
 8001f44:	0800208f 	.word	0x0800208f
 8001f48:	080020af 	.word	0x080020af
 8001f4c:	080020cf 	.word	0x080020cf
 8001f50:	080020ef 	.word	0x080020ef
 8001f54:	0800210f 	.word	0x0800210f
 8001f58:	0800212f 	.word	0x0800212f
 8001f5c:	0800214f 	.word	0x0800214f
 8001f60:	0800216f 	.word	0x0800216f
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8001f64:	f7ff f9c8 	bl	80012f8 <rotary_read_playmode>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <main+0xde>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 8001f6e:	f7ff fca3 	bl	80018b8 <analog_calibration_start>

            while(switch_read_enter())
 8001f72:	e004      	b.n	8001f7e <main+0xce>
            {

              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_d_print();
 8001f74:	f000 fe1e 	bl	8002bb4 <main_d_print>
              HAL_Delay(100);
 8001f78:	2064      	movs	r0, #100	; 0x64
 8001f7a:	f002 fcbb 	bl	80048f4 <HAL_Delay>
            while(switch_read_enter())
 8001f7e:	f7ff fabb 	bl	80014f8 <switch_read_enter>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f5      	bne.n	8001f74 <main+0xc4>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 8001f88:	f7ff fcbe 	bl	8001908 <analog_calibration_stop>
              HAL_Delay(250);
            }

            running_stop();
          }
          break;	// case 0x00:
 8001f8c:	e109      	b.n	80021a2 <main+0x2f2>
            running_start();
 8001f8e:	f000 fdf7 	bl	8002b80 <running_start>
            while(switch_read_enter())
 8001f92:	e004      	b.n	8001f9e <main+0xee>
              main_d_print();
 8001f94:	f000 fe0e 	bl	8002bb4 <main_d_print>
              HAL_Delay(250);
 8001f98:	20fa      	movs	r0, #250	; 0xfa
 8001f9a:	f002 fcab 	bl	80048f4 <HAL_Delay>
            while(switch_read_enter())
 8001f9e:	f7ff faab 	bl	80014f8 <switch_read_enter>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f5      	bne.n	8001f94 <main+0xe4>
            running_stop();
 8001fa8:	f000 fe14 	bl	8002bd4 <running_stop>
          break;	// case 0x00:
 8001fac:	e0f9      	b.n	80021a2 <main+0x2f2>
        case 0x01:	// 1
          running_start();
 8001fae:	f000 fde7 	bl	8002b80 <running_start>

          while (switch_read_enter())
 8001fb2:	e004      	b.n	8001fbe <main+0x10e>
          {
            main_d_print();
 8001fb4:	f000 fdfe 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 8001fb8:	20fa      	movs	r0, #250	; 0xfa
 8001fba:	f002 fc9b 	bl	80048f4 <HAL_Delay>
          while (switch_read_enter())
 8001fbe:	f7ff fa9b 	bl	80014f8 <switch_read_enter>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1f5      	bne.n	8001fb4 <main+0x104>
          }

          running_stop();
 8001fc8:	f000 fe04 	bl	8002bd4 <running_stop>
          break;
 8001fcc:	e0e9      	b.n	80021a2 <main+0x2f2>
        case 0x02:	// 2
          running_start();
 8001fce:	f000 fdd7 	bl	8002b80 <running_start>

          while(switch_read_enter())
 8001fd2:	e004      	b.n	8001fde <main+0x12e>
          {
            main_d_print();
 8001fd4:	f000 fdee 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 8001fd8:	20fa      	movs	r0, #250	; 0xfa
 8001fda:	f002 fc8b 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 8001fde:	f7ff fa8b 	bl	80014f8 <switch_read_enter>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f5      	bne.n	8001fd4 <main+0x124>
          }

          running_stop();
 8001fe8:	f000 fdf4 	bl	8002bd4 <running_stop>
          break;
 8001fec:	e0d9      	b.n	80021a2 <main+0x2f2>
        case 0x03:	// 3
          running_start();
 8001fee:	f000 fdc7 	bl	8002b80 <running_start>

          while(switch_read_enter())
 8001ff2:	e004      	b.n	8001ffe <main+0x14e>
          {
            main_d_print();
 8001ff4:	f000 fdde 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 8001ff8:	20fa      	movs	r0, #250	; 0xfa
 8001ffa:	f002 fc7b 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 8001ffe:	f7ff fa7b 	bl	80014f8 <switch_read_enter>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f5      	bne.n	8001ff4 <main+0x144>
          }

          running_stop();
 8002008:	f000 fde4 	bl	8002bd4 <running_stop>
          break;
 800200c:	e0c9      	b.n	80021a2 <main+0x2f2>
        case 0x04:	// 4
          running_start();
 800200e:	f000 fdb7 	bl	8002b80 <running_start>

          while(switch_read_enter())
 8002012:	e004      	b.n	800201e <main+0x16e>
          {
            main_d_print();
 8002014:	f000 fdce 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 8002018:	20fa      	movs	r0, #250	; 0xfa
 800201a:	f002 fc6b 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 800201e:	f7ff fa6b 	bl	80014f8 <switch_read_enter>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f5      	bne.n	8002014 <main+0x164>
          }

          running_stop();
 8002028:	f000 fdd4 	bl	8002bd4 <running_stop>
          break;
 800202c:	e0b9      	b.n	80021a2 <main+0x2f2>
        case 0x05:	// 5
          running_start();
 800202e:	f000 fda7 	bl	8002b80 <running_start>

          while(switch_read_enter())
 8002032:	e004      	b.n	800203e <main+0x18e>
          {
            main_d_print();
 8002034:	f000 fdbe 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 8002038:	20fa      	movs	r0, #250	; 0xfa
 800203a:	f002 fc5b 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 800203e:	f7ff fa5b 	bl	80014f8 <switch_read_enter>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f5      	bne.n	8002034 <main+0x184>
          }

          running_stop();
 8002048:	f000 fdc4 	bl	8002bd4 <running_stop>
          break;
 800204c:	e0a9      	b.n	80021a2 <main+0x2f2>
        case 0x06:	// 6
          running_start();
 800204e:	f000 fd97 	bl	8002b80 <running_start>

          while(switch_read_enter())
 8002052:	e004      	b.n	800205e <main+0x1ae>
          {
            #if !D_TIM6_WHILE
            main_d_print();
            #else
            tim6_main();
 8002054:	f001 fde0 	bl	8003c18 <tim6_main>
            #endif
            HAL_Delay(250);
 8002058:	20fa      	movs	r0, #250	; 0xfa
 800205a:	f002 fc4b 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 800205e:	f7ff fa4b 	bl	80014f8 <switch_read_enter>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f5      	bne.n	8002054 <main+0x1a4>
          }

          running_stop();
 8002068:	f000 fdb4 	bl	8002bd4 <running_stop>
          break;
 800206c:	e099      	b.n	80021a2 <main+0x2f2>
        case 0x07:	// 7
          running_start();
 800206e:	f000 fd87 	bl	8002b80 <running_start>

          while(switch_read_enter())
 8002072:	e004      	b.n	800207e <main+0x1ce>
          {
            main_d_print();
 8002074:	f000 fd9e 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 8002078:	20fa      	movs	r0, #250	; 0xfa
 800207a:	f002 fc3b 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 800207e:	f7ff fa3b 	bl	80014f8 <switch_read_enter>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f5      	bne.n	8002074 <main+0x1c4>
          }

          running_stop();
 8002088:	f000 fda4 	bl	8002bd4 <running_stop>
          break;
 800208c:	e089      	b.n	80021a2 <main+0x2f2>
        case 0x08:	// 8
          running_start();
 800208e:	f000 fd77 	bl	8002b80 <running_start>

          while(switch_read_enter())
 8002092:	e004      	b.n	800209e <main+0x1ee>
          {
            main_d_print();
 8002094:	f000 fd8e 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 8002098:	20fa      	movs	r0, #250	; 0xfa
 800209a:	f002 fc2b 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 800209e:	f7ff fa2b 	bl	80014f8 <switch_read_enter>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f5      	bne.n	8002094 <main+0x1e4>
          }

          running_stop();
 80020a8:	f000 fd94 	bl	8002bd4 <running_stop>
          break;
 80020ac:	e079      	b.n	80021a2 <main+0x2f2>
        case 0x09:	// 9
          running_start();
 80020ae:	f000 fd67 	bl	8002b80 <running_start>

          while(switch_read_enter())
 80020b2:	e004      	b.n	80020be <main+0x20e>
          {
            main_d_print();
 80020b4:	f000 fd7e 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 80020b8:	20fa      	movs	r0, #250	; 0xfa
 80020ba:	f002 fc1b 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 80020be:	f7ff fa1b 	bl	80014f8 <switch_read_enter>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f5      	bne.n	80020b4 <main+0x204>
          }

          running_stop();
 80020c8:	f000 fd84 	bl	8002bd4 <running_stop>
          break;
 80020cc:	e069      	b.n	80021a2 <main+0x2f2>
        case 0x0A:	// A
          running_start();
 80020ce:	f000 fd57 	bl	8002b80 <running_start>

          while(switch_read_enter())
 80020d2:	e004      	b.n	80020de <main+0x22e>
          {
            main_d_print();
 80020d4:	f000 fd6e 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 80020d8:	20fa      	movs	r0, #250	; 0xfa
 80020da:	f002 fc0b 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 80020de:	f7ff fa0b 	bl	80014f8 <switch_read_enter>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f5      	bne.n	80020d4 <main+0x224>
          }

          running_stop();
 80020e8:	f000 fd74 	bl	8002bd4 <running_stop>
          break;
 80020ec:	e059      	b.n	80021a2 <main+0x2f2>
        case 0x0B:	// B
          running_start();
 80020ee:	f000 fd47 	bl	8002b80 <running_start>

          while(switch_read_enter())
 80020f2:	e004      	b.n	80020fe <main+0x24e>
          {
            main_d_print();
 80020f4:	f000 fd5e 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 80020f8:	20fa      	movs	r0, #250	; 0xfa
 80020fa:	f002 fbfb 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 80020fe:	f7ff f9fb 	bl	80014f8 <switch_read_enter>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f5      	bne.n	80020f4 <main+0x244>
          }

          running_stop();
 8002108:	f000 fd64 	bl	8002bd4 <running_stop>
          break;
 800210c:	e049      	b.n	80021a2 <main+0x2f2>
        case 0x0C:	// C
          running_start();
 800210e:	f000 fd37 	bl	8002b80 <running_start>

          while(switch_read_enter())
 8002112:	e004      	b.n	800211e <main+0x26e>
          {
            main_d_print();
 8002114:	f000 fd4e 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 8002118:	20fa      	movs	r0, #250	; 0xfa
 800211a:	f002 fbeb 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 800211e:	f7ff f9eb 	bl	80014f8 <switch_read_enter>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f5      	bne.n	8002114 <main+0x264>
          }

          running_stop();
 8002128:	f000 fd54 	bl	8002bd4 <running_stop>
          break;
 800212c:	e039      	b.n	80021a2 <main+0x2f2>
        case 0x0D:	// D
          running_start();
 800212e:	f000 fd27 	bl	8002b80 <running_start>

          while(switch_read_enter())
 8002132:	e004      	b.n	800213e <main+0x28e>
          {
            main_d_print();
 8002134:	f000 fd3e 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 8002138:	20fa      	movs	r0, #250	; 0xfa
 800213a:	f002 fbdb 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 800213e:	f7ff f9db 	bl	80014f8 <switch_read_enter>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f5      	bne.n	8002134 <main+0x284>
          }

          running_stop();
 8002148:	f000 fd44 	bl	8002bd4 <running_stop>
          break;
 800214c:	e029      	b.n	80021a2 <main+0x2f2>
        case 0x0E:	// E
          running_start();
 800214e:	f000 fd17 	bl	8002b80 <running_start>

          while(switch_read_enter())
 8002152:	e004      	b.n	800215e <main+0x2ae>
          {
            main_d_print();
 8002154:	f000 fd2e 	bl	8002bb4 <main_d_print>
            HAL_Delay(250);
 8002158:	20fa      	movs	r0, #250	; 0xfa
 800215a:	f002 fbcb 	bl	80048f4 <HAL_Delay>
          while(switch_read_enter())
 800215e:	f7ff f9cb 	bl	80014f8 <switch_read_enter>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f5      	bne.n	8002154 <main+0x2a4>
          }

          running_stop();
 8002168:	f000 fd34 	bl	8002bd4 <running_stop>
          break;
 800216c:	e019      	b.n	80021a2 <main+0x2f2>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 800216e:	f7ff f8c3 	bl	80012f8 <rotary_read_playmode>
 8002172:	4603      	mov	r3, r0
 8002174:	2b0f      	cmp	r3, #15
 8002176:	d013      	beq.n	80021a0 <main+0x2f0>
          {
          }
          else    // if(!(rotary_read_playmode()== flash_print))
          {
            running_start();
 8002178:	f000 fd02 	bl	8002b80 <running_start>

            while(switch_read_enter())
 800217c:	e004      	b.n	8002188 <main+0x2d8>
            {
              main_d_print();
 800217e:	f000 fd19 	bl	8002bb4 <main_d_print>
              HAL_Delay(250);
 8002182:	20fa      	movs	r0, #250	; 0xfa
 8002184:	f002 fbb6 	bl	80048f4 <HAL_Delay>
            while(switch_read_enter())
 8002188:	f7ff f9b6 	bl	80014f8 <switch_read_enter>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f5      	bne.n	800217e <main+0x2ce>
            }

            running_stop();
 8002192:	f000 fd1f 	bl	8002bd4 <running_stop>
          }
          break;
 8002196:	e003      	b.n	80021a0 <main+0x2f0>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 8002198:	bf00      	nop
 800219a:	e002      	b.n	80021a2 <main+0x2f2>
          break;
 800219c:	bf00      	nop
 800219e:	e000      	b.n	80021a2 <main+0x2f2>
          break;
 80021a0:	bf00      	nop
    HAL_Delay(500);
 80021a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021a6:	f002 fba5 	bl	80048f4 <HAL_Delay>
    main_print_while();
 80021aa:	e6a9      	b.n	8001f00 <main+0x50>
 80021ac:	0800dff0 	.word	0x0800dff0
 80021b0:	0800dff8 	.word	0x0800dff8

080021b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b094      	sub	sp, #80	; 0x50
 80021b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ba:	f107 0320 	add.w	r3, r7, #32
 80021be:	2230      	movs	r2, #48	; 0x30
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f007 f8d6 	bl	8009374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	4b28      	ldr	r3, [pc, #160]	; (8002280 <SystemClock_Config+0xcc>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <SystemClock_Config+0xcc>)
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <SystemClock_Config+0xcc>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021f4:	2300      	movs	r3, #0
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <SystemClock_Config+0xd0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a21      	ldr	r2, [pc, #132]	; (8002284 <SystemClock_Config+0xd0>)
 80021fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <SystemClock_Config+0xd0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002210:	2301      	movs	r3, #1
 8002212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002214:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800221a:	2302      	movs	r3, #2
 800221c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800221e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002224:	2308      	movs	r3, #8
 8002226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002228:	23a8      	movs	r3, #168	; 0xa8
 800222a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800222c:	2302      	movs	r3, #2
 800222e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002230:	2304      	movs	r3, #4
 8002232:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	4618      	mov	r0, r3
 800223a:	f004 fa8f 	bl	800675c <HAL_RCC_OscConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002244:	f000 fcce 	bl	8002be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002248:	230f      	movs	r3, #15
 800224a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224c:	2302      	movs	r3, #2
 800224e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002254:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800225a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	2105      	movs	r1, #5
 8002266:	4618      	mov	r0, r3
 8002268:	f004 fce8 	bl	8006c3c <HAL_RCC_ClockConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002272:	f000 fcb7 	bl	8002be4 <Error_Handler>
  }
}
 8002276:	bf00      	nop
 8002278:	3750      	adds	r7, #80	; 0x50
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000

08002288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800228e:	463b      	mov	r3, r7
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800229a:	4b8a      	ldr	r3, [pc, #552]	; (80024c4 <MX_ADC1_Init+0x23c>)
 800229c:	4a8a      	ldr	r2, [pc, #552]	; (80024c8 <MX_ADC1_Init+0x240>)
 800229e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022a0:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022a8:	4b86      	ldr	r3, [pc, #536]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80022ae:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022b4:	4b83      	ldr	r3, [pc, #524]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ba:	4b82      	ldr	r3, [pc, #520]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022c2:	4b80      	ldr	r3, [pc, #512]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022c8:	4b7e      	ldr	r3, [pc, #504]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022ca:	4a80      	ldr	r2, [pc, #512]	; (80024cc <MX_ADC1_Init+0x244>)
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ce:	4b7d      	ldr	r3, [pc, #500]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 80022d4:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022d6:	2210      	movs	r2, #16
 80022d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022da:	4b7a      	ldr	r3, [pc, #488]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022dc:	2201      	movs	r2, #1
 80022de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022e2:	4b78      	ldr	r3, [pc, #480]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022e8:	4876      	ldr	r0, [pc, #472]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80022ea:	f002 fb27 	bl	800493c <HAL_ADC_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022f4:	f000 fc76 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022f8:	2309      	movs	r3, #9
 80022fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002300:	2303      	movs	r3, #3
 8002302:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002304:	463b      	mov	r3, r7
 8002306:	4619      	mov	r1, r3
 8002308:	486e      	ldr	r0, [pc, #440]	; (80024c4 <MX_ADC1_Init+0x23c>)
 800230a:	f002 fcab 	bl	8004c64 <HAL_ADC_ConfigChannel>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002314:	f000 fc66 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002318:	230a      	movs	r3, #10
 800231a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800231c:	2302      	movs	r3, #2
 800231e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002320:	463b      	mov	r3, r7
 8002322:	4619      	mov	r1, r3
 8002324:	4867      	ldr	r0, [pc, #412]	; (80024c4 <MX_ADC1_Init+0x23c>)
 8002326:	f002 fc9d 	bl	8004c64 <HAL_ADC_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002330:	f000 fc58 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002334:	2308      	movs	r3, #8
 8002336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002338:	2303      	movs	r3, #3
 800233a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233c:	463b      	mov	r3, r7
 800233e:	4619      	mov	r1, r3
 8002340:	4860      	ldr	r0, [pc, #384]	; (80024c4 <MX_ADC1_Init+0x23c>)
 8002342:	f002 fc8f 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800234c:	f000 fc4a 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002350:	230b      	movs	r3, #11
 8002352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002354:	2304      	movs	r3, #4
 8002356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002358:	463b      	mov	r3, r7
 800235a:	4619      	mov	r1, r3
 800235c:	4859      	ldr	r0, [pc, #356]	; (80024c4 <MX_ADC1_Init+0x23c>)
 800235e:	f002 fc81 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002368:	f000 fc3c 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800236c:	230f      	movs	r3, #15
 800236e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002370:	2305      	movs	r3, #5
 8002372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002374:	463b      	mov	r3, r7
 8002376:	4619      	mov	r1, r3
 8002378:	4852      	ldr	r0, [pc, #328]	; (80024c4 <MX_ADC1_Init+0x23c>)
 800237a:	f002 fc73 	bl	8004c64 <HAL_ADC_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002384:	f000 fc2e 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002388:	230c      	movs	r3, #12
 800238a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800238c:	2306      	movs	r3, #6
 800238e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002390:	463b      	mov	r3, r7
 8002392:	4619      	mov	r1, r3
 8002394:	484b      	ldr	r0, [pc, #300]	; (80024c4 <MX_ADC1_Init+0x23c>)
 8002396:	f002 fc65 	bl	8004c64 <HAL_ADC_ConfigChannel>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80023a0:	f000 fc20 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80023a4:	230e      	movs	r3, #14
 80023a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80023a8:	2307      	movs	r3, #7
 80023aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023ac:	463b      	mov	r3, r7
 80023ae:	4619      	mov	r1, r3
 80023b0:	4844      	ldr	r0, [pc, #272]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80023b2:	f002 fc57 	bl	8004c64 <HAL_ADC_ConfigChannel>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80023bc:	f000 fc12 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80023c0:	230d      	movs	r3, #13
 80023c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80023c4:	2308      	movs	r3, #8
 80023c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c8:	463b      	mov	r3, r7
 80023ca:	4619      	mov	r1, r3
 80023cc:	483d      	ldr	r0, [pc, #244]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80023ce:	f002 fc49 	bl	8004c64 <HAL_ADC_ConfigChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80023d8:	f000 fc04 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80023dc:	2307      	movs	r3, #7
 80023de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80023e0:	2309      	movs	r3, #9
 80023e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e4:	463b      	mov	r3, r7
 80023e6:	4619      	mov	r1, r3
 80023e8:	4836      	ldr	r0, [pc, #216]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80023ea:	f002 fc3b 	bl	8004c64 <HAL_ADC_ConfigChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80023f4:	f000 fbf6 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80023fc:	230a      	movs	r3, #10
 80023fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	4619      	mov	r1, r3
 8002404:	482f      	ldr	r0, [pc, #188]	; (80024c4 <MX_ADC1_Init+0x23c>)
 8002406:	f002 fc2d 	bl	8004c64 <HAL_ADC_ConfigChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002410:	f000 fbe8 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002414:	2306      	movs	r3, #6
 8002416:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002418:	230b      	movs	r3, #11
 800241a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800241c:	463b      	mov	r3, r7
 800241e:	4619      	mov	r1, r3
 8002420:	4828      	ldr	r0, [pc, #160]	; (80024c4 <MX_ADC1_Init+0x23c>)
 8002422:	f002 fc1f 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800242c:	f000 fbda 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002430:	2301      	movs	r3, #1
 8002432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002434:	230c      	movs	r3, #12
 8002436:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	4619      	mov	r1, r3
 800243c:	4821      	ldr	r0, [pc, #132]	; (80024c4 <MX_ADC1_Init+0x23c>)
 800243e:	f002 fc11 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002448:	f000 fbcc 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800244c:	2305      	movs	r3, #5
 800244e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002450:	230d      	movs	r3, #13
 8002452:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002454:	463b      	mov	r3, r7
 8002456:	4619      	mov	r1, r3
 8002458:	481a      	ldr	r0, [pc, #104]	; (80024c4 <MX_ADC1_Init+0x23c>)
 800245a:	f002 fc03 	bl	8004c64 <HAL_ADC_ConfigChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8002464:	f000 fbbe 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002468:	2302      	movs	r3, #2
 800246a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 800246c:	230e      	movs	r3, #14
 800246e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002470:	463b      	mov	r3, r7
 8002472:	4619      	mov	r1, r3
 8002474:	4813      	ldr	r0, [pc, #76]	; (80024c4 <MX_ADC1_Init+0x23c>)
 8002476:	f002 fbf5 	bl	8004c64 <HAL_ADC_ConfigChannel>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8002480:	f000 fbb0 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002484:	2304      	movs	r3, #4
 8002486:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002488:	230f      	movs	r3, #15
 800248a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800248c:	463b      	mov	r3, r7
 800248e:	4619      	mov	r1, r3
 8002490:	480c      	ldr	r0, [pc, #48]	; (80024c4 <MX_ADC1_Init+0x23c>)
 8002492:	f002 fbe7 	bl	8004c64 <HAL_ADC_ConfigChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 800249c:	f000 fba2 	bl	8002be4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80024a0:	2303      	movs	r3, #3
 80024a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 80024a4:	2310      	movs	r3, #16
 80024a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a8:	463b      	mov	r3, r7
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_ADC1_Init+0x23c>)
 80024ae:	f002 fbd9 	bl	8004c64 <HAL_ADC_ConfigChannel>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 80024b8:	f000 fb94 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024bc:	bf00      	nop
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000574 	.word	0x20000574
 80024c8:	40012000 	.word	0x40012000
 80024cc:	0f000001 	.word	0x0f000001

080024d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <MX_I2C1_Init+0x50>)
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <MX_I2C1_Init+0x54>)
 80024d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_I2C1_Init+0x50>)
 80024dc:	4a12      	ldr	r2, [pc, #72]	; (8002528 <MX_I2C1_Init+0x58>)
 80024de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <MX_I2C1_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <MX_I2C1_Init+0x50>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <MX_I2C1_Init+0x50>)
 80024ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <MX_I2C1_Init+0x50>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <MX_I2C1_Init+0x50>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <MX_I2C1_Init+0x50>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <MX_I2C1_Init+0x50>)
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_I2C1_Init+0x50>)
 800250e:	f003 ffe1 	bl	80064d4 <HAL_I2C_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002518:	f000 fb64 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200004a0 	.word	0x200004a0
 8002524:	40005400 	.word	0x40005400
 8002528:	000186a0 	.word	0x000186a0

0800252c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <MX_SPI2_Init+0x64>)
 8002532:	4a18      	ldr	r2, [pc, #96]	; (8002594 <MX_SPI2_Init+0x68>)
 8002534:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <MX_SPI2_Init+0x64>)
 8002538:	f44f 7282 	mov.w	r2, #260	; 0x104
 800253c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800253e:	4b14      	ldr	r3, [pc, #80]	; (8002590 <MX_SPI2_Init+0x64>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <MX_SPI2_Init+0x64>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_SPI2_Init+0x64>)
 800254c:	2202      	movs	r2, #2
 800254e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <MX_SPI2_Init+0x64>)
 8002552:	2201      	movs	r2, #1
 8002554:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_SPI2_Init+0x64>)
 8002558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_SPI2_Init+0x64>)
 8002560:	2228      	movs	r2, #40	; 0x28
 8002562:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <MX_SPI2_Init+0x64>)
 8002566:	2200      	movs	r2, #0
 8002568:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_SPI2_Init+0x64>)
 800256c:	2200      	movs	r2, #0
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <MX_SPI2_Init+0x64>)
 8002572:	2200      	movs	r2, #0
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_SPI2_Init+0x64>)
 8002578:	220a      	movs	r2, #10
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800257c:	4804      	ldr	r0, [pc, #16]	; (8002590 <MX_SPI2_Init+0x64>)
 800257e:	f004 fd57 	bl	8007030 <HAL_SPI_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002588:	f000 fb2c 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000408 	.word	0x20000408
 8002594:	40003800 	.word	0x40003800

08002598 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	; 0x30
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800259e:	f107 030c 	add.w	r3, r7, #12
 80025a2:	2224      	movs	r2, #36	; 0x24
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f006 fee4 	bl	8009374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <MX_TIM1_Init+0xa8>)
 80025b6:	4a23      	ldr	r2, [pc, #140]	; (8002644 <MX_TIM1_Init+0xac>)
 80025b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <MX_TIM1_Init+0xa8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <MX_TIM1_Init+0xa8>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <MX_TIM1_Init+0xa8>)
 80025c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <MX_TIM1_Init+0xa8>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_TIM1_Init+0xa8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <MX_TIM1_Init+0xa8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025e0:	2303      	movs	r3, #3
 80025e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025e8:	2301      	movs	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025f8:	2301      	movs	r3, #1
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4619      	mov	r1, r3
 800260a:	480d      	ldr	r0, [pc, #52]	; (8002640 <MX_TIM1_Init+0xa8>)
 800260c:	f005 fba0 	bl	8007d50 <HAL_TIM_Encoder_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002616:	f000 fae5 	bl	8002be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4806      	ldr	r0, [pc, #24]	; (8002640 <MX_TIM1_Init+0xa8>)
 8002628:	f006 f910 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002632:	f000 fad7 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	3730      	adds	r7, #48	; 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000069c 	.word	0x2000069c
 8002644:	40010000 	.word	0x40010000

08002648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	; 0x30
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	2224      	movs	r2, #36	; 0x24
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f006 fe8c 	bl	8009374 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <MX_TIM3_Init+0xa0>)
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <MX_TIM3_Init+0xa4>)
 8002668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800266a:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <MX_TIM3_Init+0xa0>)
 800266c:	2200      	movs	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <MX_TIM3_Init+0xa0>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <MX_TIM3_Init+0xa0>)
 8002678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800267c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <MX_TIM3_Init+0xa0>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <MX_TIM3_Init+0xa0>)
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800268a:	2303      	movs	r3, #3
 800268c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002692:	2301      	movs	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026a2:	2301      	movs	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80026ae:	f107 030c 	add.w	r3, r7, #12
 80026b2:	4619      	mov	r1, r3
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <MX_TIM3_Init+0xa0>)
 80026b6:	f005 fb4b 	bl	8007d50 <HAL_TIM_Encoder_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80026c0:	f000 fa90 	bl	8002be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c4:	2300      	movs	r3, #0
 80026c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	4619      	mov	r1, r3
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_TIM3_Init+0xa0>)
 80026d2:	f006 f8bb 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80026dc:	f000 fa82 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026e0:	bf00      	nop
 80026e2:	3730      	adds	r7, #48	; 0x30
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000534 	.word	0x20000534
 80026ec:	40000400 	.word	0x40000400

080026f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f6:	f107 0320 	add.w	r3, r7, #32
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	615a      	str	r2, [r3, #20]
 8002710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002712:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <MX_TIM4_Init+0xc0>)
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <MX_TIM4_Init+0xc4>)
 8002716:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <MX_TIM4_Init+0xc0>)
 800271a:	2202      	movs	r2, #2
 800271c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271e:	4b24      	ldr	r3, [pc, #144]	; (80027b0 <MX_TIM4_Init+0xc0>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002724:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <MX_TIM4_Init+0xc0>)
 8002726:	f240 32e7 	movw	r2, #999	; 0x3e7
 800272a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <MX_TIM4_Init+0xc0>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002732:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <MX_TIM4_Init+0xc0>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002738:	481d      	ldr	r0, [pc, #116]	; (80027b0 <MX_TIM4_Init+0xc0>)
 800273a:	f005 fa47 	bl	8007bcc <HAL_TIM_PWM_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002744:	f000 fa4e 	bl	8002be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002750:	f107 0320 	add.w	r3, r7, #32
 8002754:	4619      	mov	r1, r3
 8002756:	4816      	ldr	r0, [pc, #88]	; (80027b0 <MX_TIM4_Init+0xc0>)
 8002758:	f006 f878 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002762:	f000 fa3f 	bl	8002be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002766:	2360      	movs	r3, #96	; 0x60
 8002768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2200      	movs	r2, #0
 800277a:	4619      	mov	r1, r3
 800277c:	480c      	ldr	r0, [pc, #48]	; (80027b0 <MX_TIM4_Init+0xc0>)
 800277e:	f005 fd01 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002788:	f000 fa2c 	bl	8002be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	2204      	movs	r2, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4807      	ldr	r0, [pc, #28]	; (80027b0 <MX_TIM4_Init+0xc0>)
 8002794:	f005 fcf6 	bl	8008184 <HAL_TIM_PWM_ConfigChannel>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800279e:	f000 fa21 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80027a2:	4803      	ldr	r0, [pc, #12]	; (80027b0 <MX_TIM4_Init+0xc0>)
 80027a4:	f000 fe98 	bl	80034d8 <HAL_TIM_MspPostInit>

}
 80027a8:	bf00      	nop
 80027aa:	3728      	adds	r7, #40	; 0x28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000460 	.word	0x20000460
 80027b4:	40000800 	.word	0x40000800

080027b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027be:	463b      	mov	r3, r7
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <MX_TIM6_Init+0x64>)
 80027c8:	4a15      	ldr	r2, [pc, #84]	; (8002820 <MX_TIM6_Init+0x68>)
 80027ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <MX_TIM6_Init+0x64>)
 80027ce:	2204      	movs	r2, #4
 80027d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <MX_TIM6_Init+0x64>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16799;
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <MX_TIM6_Init+0x64>)
 80027da:	f244 129f 	movw	r2, #16799	; 0x419f
 80027de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_TIM6_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027e6:	480d      	ldr	r0, [pc, #52]	; (800281c <MX_TIM6_Init+0x64>)
 80027e8:	f005 f976 	bl	8007ad8 <HAL_TIM_Base_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80027f2:	f000 f9f7 	bl	8002be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027fe:	463b      	mov	r3, r7
 8002800:	4619      	mov	r1, r3
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <MX_TIM6_Init+0x64>)
 8002804:	f006 f822 	bl	800884c <HAL_TIMEx_MasterConfigSynchronization>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800280e:	f000 f9e9 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000065c 	.word	0x2000065c
 8002820:	40001000 	.word	0x40001000

08002824 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <MX_TIM10_Init+0x40>)
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <MX_TIM10_Init+0x44>)
 800282c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <MX_TIM10_Init+0x40>)
 8002830:	2204      	movs	r2, #4
 8002832:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <MX_TIM10_Init+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <MX_TIM10_Init+0x40>)
 800283c:	f248 323f 	movw	r2, #33599	; 0x833f
 8002840:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <MX_TIM10_Init+0x40>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <MX_TIM10_Init+0x40>)
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_TIM10_Init+0x40>)
 8002850:	f005 f942 	bl	8007ad8 <HAL_TIM_Base_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800285a:	f000 f9c3 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200004f4 	.word	0x200004f4
 8002868:	40014400 	.word	0x40014400

0800286c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <MX_TIM11_Init+0x40>)
 8002872:	4a0f      	ldr	r2, [pc, #60]	; (80028b0 <MX_TIM11_Init+0x44>)
 8002874:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <MX_TIM11_Init+0x40>)
 8002878:	2204      	movs	r2, #4
 800287a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <MX_TIM11_Init+0x40>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <MX_TIM11_Init+0x40>)
 8002884:	f248 323f 	movw	r2, #33599	; 0x833f
 8002888:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288a:	4b08      	ldr	r3, [pc, #32]	; (80028ac <MX_TIM11_Init+0x40>)
 800288c:	2200      	movs	r2, #0
 800288e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <MX_TIM11_Init+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002896:	4805      	ldr	r0, [pc, #20]	; (80028ac <MX_TIM11_Init+0x40>)
 8002898:	f005 f91e 	bl	8007ad8 <HAL_TIM_Base_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80028a2:	f000 f99f 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200005bc 	.word	0x200005bc
 80028b0:	40014800 	.word	0x40014800

080028b4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80028b8:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <MX_TIM14_Init+0x40>)
 80028ba:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <MX_TIM14_Init+0x44>)
 80028bc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 80028be:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <MX_TIM14_Init+0x40>)
 80028c0:	2204      	movs	r2, #4
 80028c2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <MX_TIM14_Init+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <MX_TIM14_Init+0x40>)
 80028cc:	f248 323f 	movw	r2, #33599	; 0x833f
 80028d0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <MX_TIM14_Init+0x40>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <MX_TIM14_Init+0x40>)
 80028da:	2200      	movs	r2, #0
 80028dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80028de:	4805      	ldr	r0, [pc, #20]	; (80028f4 <MX_TIM14_Init+0x40>)
 80028e0:	f005 f8fa 	bl	8007ad8 <HAL_TIM_Base_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80028ea:	f000 f97b 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000071c 	.word	0x2000071c
 80028f8:	40002000 	.word	0x40002000

080028fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <MX_USART6_UART_Init+0x4c>)
 8002902:	4a12      	ldr	r2, [pc, #72]	; (800294c <MX_USART6_UART_Init+0x50>)
 8002904:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <MX_USART6_UART_Init+0x4c>)
 8002908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800290c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <MX_USART6_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <MX_USART6_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <MX_USART6_UART_Init+0x4c>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <MX_USART6_UART_Init+0x4c>)
 8002922:	220c      	movs	r2, #12
 8002924:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002926:	4b08      	ldr	r3, [pc, #32]	; (8002948 <MX_USART6_UART_Init+0x4c>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <MX_USART6_UART_Init+0x4c>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <MX_USART6_UART_Init+0x4c>)
 8002934:	f006 f81a 	bl	800896c <HAL_UART_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800293e:	f000 f951 	bl	8002be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200006dc 	.word	0x200006dc
 800294c:	40011400 	.word	0x40011400

08002950 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <MX_DMA_Init+0x3c>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a0b      	ldr	r2, [pc, #44]	; (800298c <MX_DMA_Init+0x3c>)
 8002960:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <MX_DMA_Init+0x3c>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	2038      	movs	r0, #56	; 0x38
 8002978:	f002 fcef 	bl	800535a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800297c:	2038      	movs	r0, #56	; 0x38
 800297e:	f002 fd08 	bl	8005392 <HAL_NVIC_EnableIRQ>

}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800

08002990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	4b69      	ldr	r3, [pc, #420]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	4a68      	ldr	r2, [pc, #416]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6313      	str	r3, [r2, #48]	; 0x30
 80029b6:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4b62      	ldr	r3, [pc, #392]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a61      	ldr	r2, [pc, #388]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 80029cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b5f      	ldr	r3, [pc, #380]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	4b5b      	ldr	r3, [pc, #364]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a5a      	ldr	r2, [pc, #360]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b58      	ldr	r3, [pc, #352]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	4b54      	ldr	r3, [pc, #336]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a53      	ldr	r2, [pc, #332]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	603b      	str	r3, [r7, #0]
 8002a1a:	4b4d      	ldr	r3, [pc, #308]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	4a4c      	ldr	r2, [pc, #304]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 8002a20:	f043 0308 	orr.w	r3, r3, #8
 8002a24:	6313      	str	r3, [r2, #48]	; 0x30
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <MX_GPIO_Init+0x1c0>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8002a32:	2200      	movs	r2, #0
 8002a34:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8002a38:	4846      	ldr	r0, [pc, #280]	; (8002b54 <MX_GPIO_Init+0x1c4>)
 8002a3a:	f003 fd31 	bl	80064a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002a44:	4844      	ldr	r0, [pc, #272]	; (8002b58 <MX_GPIO_Init+0x1c8>)
 8002a46:	f003 fd2b 	bl	80064a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002a50:	4842      	ldr	r0, [pc, #264]	; (8002b5c <MX_GPIO_Init+0x1cc>)
 8002a52:	f003 fd25 	bl	80064a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	2104      	movs	r1, #4
 8002a5a:	4841      	ldr	r0, [pc, #260]	; (8002b60 <MX_GPIO_Init+0x1d0>)
 8002a5c:	f003 fd20 	bl	80064a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8002a60:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	4836      	ldr	r0, [pc, #216]	; (8002b54 <MX_GPIO_Init+0x1c4>)
 8002a7a:	f003 fb5d 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8002a7e:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8002a82:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	4619      	mov	r1, r3
 8002a92:	4830      	ldr	r0, [pc, #192]	; (8002b54 <MX_GPIO_Init+0x1c4>)
 8002a94:	f003 fb50 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8002a98:	f640 0304 	movw	r3, #2052	; 0x804
 8002a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	482a      	ldr	r0, [pc, #168]	; (8002b58 <MX_GPIO_Init+0x1c8>)
 8002aae:	f003 fb43 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8002ab2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4823      	ldr	r0, [pc, #140]	; (8002b58 <MX_GPIO_Init+0x1c8>)
 8002acc:	f003 fb34 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8002ad0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	481c      	ldr	r0, [pc, #112]	; (8002b5c <MX_GPIO_Init+0x1cc>)
 8002aea:	f003 fb25 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8002aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4816      	ldr	r0, [pc, #88]	; (8002b5c <MX_GPIO_Init+0x1cc>)
 8002b04:	f003 fb18 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	480d      	ldr	r0, [pc, #52]	; (8002b5c <MX_GPIO_Init+0x1cc>)
 8002b26:	f003 fb07 	bl	8006138 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4807      	ldr	r0, [pc, #28]	; (8002b60 <MX_GPIO_Init+0x1d0>)
 8002b42:	f003 faf9 	bl	8006138 <HAL_GPIO_Init>

}
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020800 	.word	0x40020800
 8002b58:	40020400 	.word	0x40020400
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40020c00 	.word	0x40020c00

08002b64 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  flash_init();
 8002b68:	f7ff f982 	bl	8001e70 <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 8002b6c:	f000 ffc8 	bl	8003b00 <tim11_init>
  /* encoder_init */
  tim10_init();
 8002b70:	f000 fe7c 	bl	800386c <tim10_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8002b74:	f000 ffdc 	bl	8003b30 <tim6_init>
  /* print who am i */
  imu_init();
 8002b78:	f7fe fa94 	bl	80010a4 <imu_init>
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <running_start>:

void running_start()
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 8002b84:	f000 fe82 	bl	800388c <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 8002b88:	f000 ffe6 	bl	8003b58 <tim6_start>
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <main_print_while>:

void main_print_while()
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	printf("///// WHILE /////\n\r");
 8002b94:	4806      	ldr	r0, [pc, #24]	; (8002bb0 <main_print_while+0x20>)
 8002b96:	f007 fa6f 	bl	800a078 <iprintf>
  rotary_print_playmode();
 8002b9a:	f7fe fc1b 	bl	80013d4 <rotary_print_playmode>
	print_rotary_value();
 8002b9e:	f000 f919 	bl	8002dd4 <print_rotary_value>
	/* print Tracer and Velotracer target and gains */
	tracer_print_values();
 8002ba2:	f001 fba3 	bl	80042ec <tracer_print_values>
	velotrace_print_values();
 8002ba6:	f001 fdc1 	bl	800472c <velotrace_print_values>
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	0800e018 	.word	0x0800e018

08002bb4 <main_d_print>:

void main_d_print()
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  printf("main.c > main_d_print > ");
 8002bb8:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <main_d_print+0x1c>)
 8002bba:	f007 fa5d 	bl	800a078 <iprintf>
  tim10_d_print();
 8002bbe:	f000 fefb 	bl	80039b8 <tim10_d_print>
  printf("main.c > main_d_print > ");
 8002bc2:	4803      	ldr	r0, [pc, #12]	; (8002bd0 <main_d_print+0x1c>)
 8002bc4:	f007 fa58 	bl	800a078 <iprintf>
  tim6_d_print();
 8002bc8:	f001 f944 	bl	8003e54 <tim6_d_print>
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	0800e02c 	.word	0x0800e02c

08002bd4 <running_stop>:

void running_stop()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8002bd8:	f001 f810 	bl	8003bfc <tim6_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8002bdc:	f000 fe68 	bl	80038b0 <tim10_stop>
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002be8:	b672      	cpsid	i
}
 8002bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bec:	e7fe      	b.n	8002bec <Error_Handler+0x8>

08002bee <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	af00      	add	r7, sp, #0
    motor_enable(0);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f000 f826 	bl	8002c44 <motor_enable>
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <motor_start>:

void motor_start()
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8002c00:	2100      	movs	r1, #0
 8002c02:	4806      	ldr	r0, [pc, #24]	; (8002c1c <motor_start+0x20>)
 8002c04:	f005 f80e 	bl	8007c24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002c08:	2104      	movs	r1, #4
 8002c0a:	4804      	ldr	r0, [pc, #16]	; (8002c1c <motor_start+0x20>)
 8002c0c:	f005 f80a 	bl	8007c24 <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8002c10:	2001      	movs	r0, #1
 8002c12:	f000 f817 	bl	8002c44 <motor_enable>
#endif
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000460 	.word	0x20000460

08002c20 <motor_stop>:

void motor_stop()
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
    motor_enable(0);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f000 f80d 	bl	8002c44 <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <motor_stop+0x20>)
 8002c2e:	f005 f837 	bl	8007ca0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8002c32:	2100      	movs	r1, #0
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <motor_stop+0x20>)
 8002c36:	f005 f833 	bl	8007ca0 <HAL_TIM_PWM_Stop>
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000460 	.word	0x20000460

08002c44 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4b03      	ldr	r3, [pc, #12]	; (8002c6c <motor_enable+0x28>)
 8002c5e:	701a      	strb	r2, [r3, #0]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	200007d8 	.word	0x200007d8

08002c70 <motor_read_enable>:

char motor_read_enable()
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
    return enable;
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <motor_read_enable+0x14>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	200007d8 	.word	0x200007d8

08002c88 <motor_set>:

void motor_set(double motor_left_, double motor_right_)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002c92:	ed87 1b00 	vstr	d1, [r7]
    if(motor_left_ < 0)
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ca2:	f7fd ff1b 	bl	8000adc <__aeabi_dcmplt>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00b      	beq.n	8002cc4 <motor_set+0x3c>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2104      	movs	r1, #4
 8002cb0:	483a      	ldr	r0, [pc, #232]	; (8002d9c <motor_set+0x114>)
 8002cb2:	f003 fbf5 	bl	80064a0 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e004      	b.n	8002cce <motor_set+0x46>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	2104      	movs	r1, #4
 8002cc8:	4834      	ldr	r0, [pc, #208]	; (8002d9c <motor_set+0x114>)
 8002cca:	f003 fbe9 	bl	80064a0 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cda:	f7fd feff 	bl	8000adc <__aeabi_dcmplt>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00c      	beq.n	8002cfe <motor_set+0x76>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cea:	482d      	ldr	r0, [pc, #180]	; (8002da0 <motor_set+0x118>)
 8002cec:	f003 fbd8 	bl	80064a0 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	e005      	b.n	8002d0a <motor_set+0x82>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d04:	4826      	ldr	r0, [pc, #152]	; (8002da0 <motor_set+0x118>)
 8002d06:	f003 fbcb 	bl	80064a0 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <motor_set+0x11c>)
 8002d10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d14:	f7fd ff00 	bl	8000b18 <__aeabi_dcmpgt>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <motor_set+0x9e>
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <motor_set+0x11c>)
 8002d24:	e001      	b.n	8002d2a <motor_set+0xa2>
 8002d26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d2a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <motor_set+0x11c>)
 8002d34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d38:	f7fd feee 	bl	8000b18 <__aeabi_dcmpgt>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <motor_set+0xc2>
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <motor_set+0x11c>)
 8002d48:	e001      	b.n	8002d4e <motor_set+0xc6>
 8002d4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d4e:	e9c7 2300 	strd	r2, r3, [r7]

    if(!enable)
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <motor_set+0x120>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10b      	bne.n	8002d72 <motor_set+0xea>
    {
        motor_left_ = 0;
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	e9c7 2302 	strd	r2, r3, [r7, #8]
        motor_right_ = 0;
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9c7 2300 	strd	r2, r3, [r7]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <motor_set+0x124>)
 8002d74:	681c      	ldr	r4, [r3, #0]
 8002d76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d7a:	f7fd ff15 	bl	8000ba8 <__aeabi_d2uiz>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <motor_set+0x124>)
 8002d84:	681c      	ldr	r4, [r3, #0]
 8002d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d8a:	f7fd ff0d 	bl	8000ba8 <__aeabi_d2uiz>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002d92:	bf00      	nop
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40020c00 	.word	0x40020c00
 8002da0:	40020800 	.word	0x40020800
 8002da4:	408f4000 	.word	0x408f4000
 8002da8:	200007d8 	.word	0x200007d8
 8002dac:	20000460 	.word	0x20000460

08002db0 <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8002db8:	1d39      	adds	r1, r7, #4
 8002dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <__io_putchar+0x20>)
 8002dc2:	f005 fe20 	bl	8008a06 <HAL_UART_Transmit>
	return ch;
 8002dc6:	687b      	ldr	r3, [r7, #4]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200006dc 	.word	0x200006dc

08002dd4 <print_rotary_value>:

void print_rotary_value()
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8002dd8:	f7fe faa6 	bl	8001328 <rotary_read_value>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4619      	mov	r1, r3
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <print_rotary_value+0x18>)
 8002de2:	f007 f949 	bl	800a078 <iprintf>
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	0800e048 	.word	0x0800e048

08002df0 <sidesensor_read>:

unsigned char subsensbuf, marker, sidedeltacount, markerstate, rightmarkercount;
SideSensorState sidesensorstate;

uint8_t sidesensor_read()
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	4810      	ldr	r0, [pc, #64]	; (8002e40 <sidesensor_read+0x50>)
 8002dfe:	f003 fb37 	bl	8006470 <HAL_GPIO_ReadPin>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	4413      	add	r3, r2
 8002e14:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 8002e16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e1a:	4809      	ldr	r0, [pc, #36]	; (8002e40 <sidesensor_read+0x50>)
 8002e1c:	f003 fb28 	bl	8006470 <HAL_GPIO_ReadPin>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <sidesensor_read+0x3a>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e000      	b.n	8002e2c <sidesensor_read+0x3c>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	4413      	add	r3, r2
 8002e32:	71fb      	strb	r3, [r7, #7]

    return subsens;
 8002e34:	79fb      	ldrb	r3, [r7, #7]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40020400 	.word	0x40020400

08002e44 <sidesensor_start>:

void sidesensor_start()
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
    marker = 0;
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <sidesensor_start+0x2c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <sidesensor_start+0x30>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <sidesensor_start+0x34>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
    markerstate = 0;
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <sidesensor_start+0x38>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <sidesensor_start+0x3c>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	200007dd 	.word	0x200007dd
 8002e74:	200007da 	.word	0x200007da
 8002e78:	200007db 	.word	0x200007db
 8002e7c:	200007dc 	.word	0x200007dc
 8002e80:	200007de 	.word	0x200007de

08002e84 <sidesensor_stop>:

void sidesensor_stop()
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <sidesensor_right>:
{
	sidesensorstate = sidesensorstate_;
}

void sidesensor_right()
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
    markerstate = start_or_stop;
 8002e98:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <sidesensor_right+0x28>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
    if(rightmarkercount == 1 - 1)
 8002e9e:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <sidesensor_right+0x2c>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
    }
    else if(rightmarkercount == 2 - 1)
    {
        // stop
    }
    rightmarkercount++;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <sidesensor_right+0x2c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <sidesensor_right+0x2c>)
 8002eae:	701a      	strb	r2, [r3, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	200007dc 	.word	0x200007dc
 8002ec0:	200007de 	.word	0x200007de

08002ec4 <sidesensor_left>:

void sidesensor_left()
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <sidesensor_left+0x14>)
 8002eca:	2202      	movs	r2, #2
 8002ecc:	701a      	strb	r2, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	200007dc 	.word	0x200007dc

08002edc <sidesensor_cross>:

void sidesensor_cross()
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <sidesensor_cross+0x14>)
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	701a      	strb	r2, [r3, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	200007dc 	.word	0x200007dc

08002ef4 <sidesensor_function>:
	// straight
	markerstate = straight;
}

void sidesensor_function()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 8002efa:	f7ff ff79 	bl	8002df0 <sidesensor_read>
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]

	if(subsens != subsensbuf)
 8002f02:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <sidesensor_function+0xac>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	79fa      	ldrb	r2, [r7, #7]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d044      	beq.n	8002f96 <sidesensor_function+0xa2>
	{
		subsensbuf = subsens;
 8002f0c:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <sidesensor_function+0xac>)
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 8002f12:	79fa      	ldrb	r2, [r7, #7]
 8002f14:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <sidesensor_function+0xb0>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <sidesensor_function+0xb4>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4413      	add	r3, r2
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <sidesensor_function+0xb4>)
 8002f2a:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d12b      	bne.n	8002f8a <sidesensor_function+0x96>
 8002f32:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <sidesensor_function+0xb0>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d027      	beq.n	8002f8a <sidesensor_function+0x96>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <sidesensor_function+0xb4>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <sidesensor_function+0xb4>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	109b      	asrs	r3, r3, #2
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8002f52:	797b      	ldrb	r3, [r7, #5]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10e      	bne.n	8002f76 <sidesensor_function+0x82>
			{
				if (first == 0b01)
 8002f58:	79bb      	ldrb	r3, [r7, #6]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d102      	bne.n	8002f64 <sidesensor_function+0x70>
				{
					// right -> start / stop
                    sidesensor_right();
 8002f5e:	f7ff ff99 	bl	8002e94 <sidesensor_right>
 8002f62:	e00a      	b.n	8002f7a <sidesensor_function+0x86>
				}
				else if (first == 0b10)
 8002f64:	79bb      	ldrb	r3, [r7, #6]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d102      	bne.n	8002f70 <sidesensor_function+0x7c>
				{
					// left -> curve
                    sidesensor_left();
 8002f6a:	f7ff ffab 	bl	8002ec4 <sidesensor_left>
 8002f6e:	e004      	b.n	8002f7a <sidesensor_function+0x86>
				}
				else
				{
					// cross
                    sidesensor_cross();
 8002f70:	f7ff ffb4 	bl	8002edc <sidesensor_cross>
 8002f74:	e001      	b.n	8002f7a <sidesensor_function+0x86>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8002f76:	f7ff ffb1 	bl	8002edc <sidesensor_cross>
			}
			sidedeltacount = 0;
 8002f7a:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <sidesensor_function+0xb0>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <sidesensor_function+0xb4>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
		{
 8002f86:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 8002f88:	e005      	b.n	8002f96 <sidesensor_function+0xa2>
			sidedeltacount++;
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <sidesensor_function+0xb0>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <sidesensor_function+0xb0>)
 8002f94:	701a      	strb	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200007da 	.word	0x200007da
 8002fa4:	200007db 	.word	0x200007db
 8002fa8:	200007dd 	.word	0x200007dd

08002fac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_MspInit+0x54>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	4a11      	ldr	r2, [pc, #68]	; (8003000 <HAL_MspInit+0x54>)
 8002fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <HAL_MspInit+0x54>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_MspInit+0x54>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <HAL_MspInit+0x54>)
 8002fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_MspInit+0x54>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	210f      	movs	r1, #15
 8002fee:	f06f 0003 	mvn.w	r0, #3
 8002ff2:	f002 f9b2 	bl	800535a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800

08003004 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 031c 	add.w	r3, r7, #28
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a49      	ldr	r2, [pc, #292]	; (8003148 <HAL_ADC_MspInit+0x144>)
 8003022:	4293      	cmp	r3, r2
 8003024:	f040 808c 	bne.w	8003140 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_ADC_MspInit+0x148>)
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	4a46      	ldr	r2, [pc, #280]	; (800314c <HAL_ADC_MspInit+0x148>)
 8003032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003036:	6453      	str	r3, [r2, #68]	; 0x44
 8003038:	4b44      	ldr	r3, [pc, #272]	; (800314c <HAL_ADC_MspInit+0x148>)
 800303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <HAL_ADC_MspInit+0x148>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	4a3f      	ldr	r2, [pc, #252]	; (800314c <HAL_ADC_MspInit+0x148>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	6313      	str	r3, [r2, #48]	; 0x30
 8003054:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_ADC_MspInit+0x148>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	4b39      	ldr	r3, [pc, #228]	; (800314c <HAL_ADC_MspInit+0x148>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	4a38      	ldr	r2, [pc, #224]	; (800314c <HAL_ADC_MspInit+0x148>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6313      	str	r3, [r2, #48]	; 0x30
 8003070:	4b36      	ldr	r3, [pc, #216]	; (800314c <HAL_ADC_MspInit+0x148>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	4b32      	ldr	r3, [pc, #200]	; (800314c <HAL_ADC_MspInit+0x148>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	4a31      	ldr	r2, [pc, #196]	; (800314c <HAL_ADC_MspInit+0x148>)
 8003086:	f043 0302 	orr.w	r3, r3, #2
 800308a:	6313      	str	r3, [r2, #48]	; 0x30
 800308c:	4b2f      	ldr	r3, [pc, #188]	; (800314c <HAL_ADC_MspInit+0x148>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003098:	233f      	movs	r3, #63	; 0x3f
 800309a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800309c:	2303      	movs	r3, #3
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a4:	f107 031c 	add.w	r3, r7, #28
 80030a8:	4619      	mov	r1, r3
 80030aa:	4829      	ldr	r0, [pc, #164]	; (8003150 <HAL_ADC_MspInit+0x14c>)
 80030ac:	f003 f844 	bl	8006138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80030b0:	23ff      	movs	r3, #255	; 0xff
 80030b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030b4:	2303      	movs	r3, #3
 80030b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	4619      	mov	r1, r3
 80030c2:	4824      	ldr	r0, [pc, #144]	; (8003154 <HAL_ADC_MspInit+0x150>)
 80030c4:	f003 f838 	bl	8006138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030c8:	2303      	movs	r3, #3
 80030ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030cc:	2303      	movs	r3, #3
 80030ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d4:	f107 031c 	add.w	r3, r7, #28
 80030d8:	4619      	mov	r1, r3
 80030da:	481f      	ldr	r0, [pc, #124]	; (8003158 <HAL_ADC_MspInit+0x154>)
 80030dc:	f003 f82c 	bl	8006138 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80030e0:	4b1e      	ldr	r3, [pc, #120]	; (800315c <HAL_ADC_MspInit+0x158>)
 80030e2:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_ADC_MspInit+0x15c>)
 80030e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_ADC_MspInit+0x158>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_ADC_MspInit+0x158>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_ADC_MspInit+0x158>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <HAL_ADC_MspInit+0x158>)
 80030fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <HAL_ADC_MspInit+0x158>)
 8003102:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003106:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_ADC_MspInit+0x158>)
 800310a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800310e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003110:	4b12      	ldr	r3, [pc, #72]	; (800315c <HAL_ADC_MspInit+0x158>)
 8003112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003116:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <HAL_ADC_MspInit+0x158>)
 800311a:	2200      	movs	r2, #0
 800311c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <HAL_ADC_MspInit+0x158>)
 8003120:	2200      	movs	r2, #0
 8003122:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003124:	480d      	ldr	r0, [pc, #52]	; (800315c <HAL_ADC_MspInit+0x158>)
 8003126:	f002 f94f 	bl	80053c8 <HAL_DMA_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003130:	f7ff fd58 	bl	8002be4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_ADC_MspInit+0x158>)
 8003138:	639a      	str	r2, [r3, #56]	; 0x38
 800313a:	4a08      	ldr	r2, [pc, #32]	; (800315c <HAL_ADC_MspInit+0x158>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003140:	bf00      	nop
 8003142:	3730      	adds	r7, #48	; 0x30
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40012000 	.word	0x40012000
 800314c:	40023800 	.word	0x40023800
 8003150:	40020800 	.word	0x40020800
 8003154:	40020000 	.word	0x40020000
 8003158:	40020400 	.word	0x40020400
 800315c:	200005fc 	.word	0x200005fc
 8003160:	40026410 	.word	0x40026410

08003164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b08a      	sub	sp, #40	; 0x28
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316c:	f107 0314 	add.w	r3, r7, #20
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <HAL_I2C_MspInit+0x84>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d12c      	bne.n	80031e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_I2C_MspInit+0x88>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a17      	ldr	r2, [pc, #92]	; (80031ec <HAL_I2C_MspInit+0x88>)
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <HAL_I2C_MspInit+0x88>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031a8:	2312      	movs	r3, #18
 80031aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031ac:	2301      	movs	r3, #1
 80031ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b0:	2303      	movs	r3, #3
 80031b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031b4:	2304      	movs	r3, #4
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	480c      	ldr	r0, [pc, #48]	; (80031f0 <HAL_I2C_MspInit+0x8c>)
 80031c0:	f002 ffba 	bl	8006138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <HAL_I2C_MspInit+0x88>)
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	4a07      	ldr	r2, [pc, #28]	; (80031ec <HAL_I2C_MspInit+0x88>)
 80031ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031d2:	6413      	str	r3, [r2, #64]	; 0x40
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_I2C_MspInit+0x88>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031e0:	bf00      	nop
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40005400 	.word	0x40005400
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40020400 	.word	0x40020400

080031f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	605a      	str	r2, [r3, #4]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	60da      	str	r2, [r3, #12]
 800320a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a19      	ldr	r2, [pc, #100]	; (8003278 <HAL_SPI_MspInit+0x84>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d12c      	bne.n	8003270 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	4b18      	ldr	r3, [pc, #96]	; (800327c <HAL_SPI_MspInit+0x88>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	4a17      	ldr	r2, [pc, #92]	; (800327c <HAL_SPI_MspInit+0x88>)
 8003220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003224:	6413      	str	r3, [r2, #64]	; 0x40
 8003226:	4b15      	ldr	r3, [pc, #84]	; (800327c <HAL_SPI_MspInit+0x88>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <HAL_SPI_MspInit+0x88>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a10      	ldr	r2, [pc, #64]	; (800327c <HAL_SPI_MspInit+0x88>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b0e      	ldr	r3, [pc, #56]	; (800327c <HAL_SPI_MspInit+0x88>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800324e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003260:	2305      	movs	r3, #5
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4619      	mov	r1, r3
 800326a:	4805      	ldr	r0, [pc, #20]	; (8003280 <HAL_SPI_MspInit+0x8c>)
 800326c:	f002 ff64 	bl	8006138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003270:	bf00      	nop
 8003272:	3728      	adds	r7, #40	; 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40003800 	.word	0x40003800
 800327c:	40023800 	.word	0x40023800
 8003280:	40020400 	.word	0x40020400

08003284 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08c      	sub	sp, #48	; 0x30
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 031c 	add.w	r3, r7, #28
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3a      	ldr	r2, [pc, #232]	; (800338c <HAL_TIM_Encoder_MspInit+0x108>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d13d      	bne.n	8003322 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032a6:	2300      	movs	r3, #0
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	4b39      	ldr	r3, [pc, #228]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	4a38      	ldr	r2, [pc, #224]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6453      	str	r3, [r2, #68]	; 0x44
 80032b6:	4b36      	ldr	r3, [pc, #216]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	4b32      	ldr	r3, [pc, #200]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a31      	ldr	r2, [pc, #196]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 80032de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e4:	2302      	movs	r3, #2
 80032e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032f0:	2301      	movs	r3, #1
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f4:	f107 031c 	add.w	r3, r7, #28
 80032f8:	4619      	mov	r1, r3
 80032fa:	4826      	ldr	r0, [pc, #152]	; (8003394 <HAL_TIM_Encoder_MspInit+0x110>)
 80032fc:	f002 ff1c 	bl	8006138 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003300:	2200      	movs	r2, #0
 8003302:	2100      	movs	r1, #0
 8003304:	2019      	movs	r0, #25
 8003306:	f002 f828 	bl	800535a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800330a:	2019      	movs	r0, #25
 800330c:	f002 f841 	bl	8005392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003310:	2200      	movs	r2, #0
 8003312:	2100      	movs	r1, #0
 8003314:	201a      	movs	r0, #26
 8003316:	f002 f820 	bl	800535a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800331a:	201a      	movs	r0, #26
 800331c:	f002 f839 	bl	8005392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003320:	e030      	b.n	8003384 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <HAL_TIM_Encoder_MspInit+0x114>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d12b      	bne.n	8003384 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	4b17      	ldr	r3, [pc, #92]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	4a16      	ldr	r2, [pc, #88]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003336:	f043 0302 	orr.w	r3, r3, #2
 800333a:	6413      	str	r3, [r2, #64]	; 0x40
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 800333e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003352:	f043 0302 	orr.w	r3, r3, #2
 8003356:	6313      	str	r3, [r2, #48]	; 0x30
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_TIM_Encoder_MspInit+0x10c>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8003364:	2330      	movs	r3, #48	; 0x30
 8003366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003370:	2300      	movs	r3, #0
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003374:	2302      	movs	r3, #2
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	f107 031c 	add.w	r3, r7, #28
 800337c:	4619      	mov	r1, r3
 800337e:	4807      	ldr	r0, [pc, #28]	; (800339c <HAL_TIM_Encoder_MspInit+0x118>)
 8003380:	f002 feda 	bl	8006138 <HAL_GPIO_Init>
}
 8003384:	bf00      	nop
 8003386:	3730      	adds	r7, #48	; 0x30
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40010000 	.word	0x40010000
 8003390:	40023800 	.word	0x40023800
 8003394:	40020000 	.word	0x40020000
 8003398:	40000400 	.word	0x40000400
 800339c:	40020400 	.word	0x40020400

080033a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <HAL_TIM_PWM_MspInit+0x3c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10d      	bne.n	80033ce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_TIM_PWM_MspInit+0x40>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <HAL_TIM_PWM_MspInit+0x40>)
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <HAL_TIM_PWM_MspInit+0x40>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40023800 	.word	0x40023800

080033e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a34      	ldr	r2, [pc, #208]	; (80034c4 <HAL_TIM_Base_MspInit+0xe0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d116      	bne.n	8003424 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a32      	ldr	r2, [pc, #200]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 8003400:	f043 0310 	orr.w	r3, r3, #16
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003412:	2200      	movs	r2, #0
 8003414:	2100      	movs	r1, #0
 8003416:	2036      	movs	r0, #54	; 0x36
 8003418:	f001 ff9f 	bl	800535a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800341c:	2036      	movs	r0, #54	; 0x36
 800341e:	f001 ffb8 	bl	8005392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003422:	e04a      	b.n	80034ba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a28      	ldr	r2, [pc, #160]	; (80034cc <HAL_TIM_Base_MspInit+0xe8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d116      	bne.n	800345c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 8003438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800343c:	6453      	str	r3, [r2, #68]	; 0x44
 800343e:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2100      	movs	r1, #0
 800344e:	2019      	movs	r0, #25
 8003450:	f001 ff83 	bl	800535a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003454:	2019      	movs	r0, #25
 8003456:	f001 ff9c 	bl	8005392 <HAL_NVIC_EnableIRQ>
}
 800345a:	e02e      	b.n	80034ba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM11)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <HAL_TIM_Base_MspInit+0xec>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d116      	bne.n	8003494 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b17      	ldr	r3, [pc, #92]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 8003470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003482:	2200      	movs	r2, #0
 8003484:	2100      	movs	r1, #0
 8003486:	201a      	movs	r0, #26
 8003488:	f001 ff67 	bl	800535a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800348c:	201a      	movs	r0, #26
 800348e:	f001 ff80 	bl	8005392 <HAL_NVIC_EnableIRQ>
}
 8003492:	e012      	b.n	80034ba <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM14)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <HAL_TIM_Base_MspInit+0xf0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10d      	bne.n	80034ba <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ac:	6413      	str	r3, [r2, #64]	; 0x40
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <HAL_TIM_Base_MspInit+0xe4>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68bb      	ldr	r3, [r7, #8]
}
 80034ba:	bf00      	nop
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40001000 	.word	0x40001000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40014400 	.word	0x40014400
 80034d0:	40014800 	.word	0x40014800
 80034d4:	40002000 	.word	0x40002000

080034d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a12      	ldr	r2, [pc, #72]	; (8003540 <HAL_TIM_MspPostInit+0x68>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d11d      	bne.n	8003536 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_TIM_MspPostInit+0x6c>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a10      	ldr	r2, [pc, #64]	; (8003544 <HAL_TIM_MspPostInit+0x6c>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b0e      	ldr	r3, [pc, #56]	; (8003544 <HAL_TIM_MspPostInit+0x6c>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8003516:	23c0      	movs	r3, #192	; 0xc0
 8003518:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003526:	2302      	movs	r3, #2
 8003528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352a:	f107 030c 	add.w	r3, r7, #12
 800352e:	4619      	mov	r1, r3
 8003530:	4805      	ldr	r0, [pc, #20]	; (8003548 <HAL_TIM_MspPostInit+0x70>)
 8003532:	f002 fe01 	bl	8006138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003536:	bf00      	nop
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40000800 	.word	0x40000800
 8003544:	40023800 	.word	0x40023800
 8003548:	40020400 	.word	0x40020400

0800354c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <HAL_UART_MspInit+0x84>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d12b      	bne.n	80035c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_UART_MspInit+0x88>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_UART_MspInit+0x88>)
 8003578:	f043 0320 	orr.w	r3, r3, #32
 800357c:	6453      	str	r3, [r2, #68]	; 0x44
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_UART_MspInit+0x88>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <HAL_UART_MspInit+0x88>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a10      	ldr	r2, [pc, #64]	; (80035d4 <HAL_UART_MspInit+0x88>)
 8003594:	f043 0304 	orr.w	r3, r3, #4
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HAL_UART_MspInit+0x88>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035a6:	23c0      	movs	r3, #192	; 0xc0
 80035a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035aa:	2302      	movs	r3, #2
 80035ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b2:	2303      	movs	r3, #3
 80035b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035b6:	2308      	movs	r3, #8
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	4619      	mov	r1, r3
 80035c0:	4805      	ldr	r0, [pc, #20]	; (80035d8 <HAL_UART_MspInit+0x8c>)
 80035c2:	f002 fdb9 	bl	8006138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035c6:	bf00      	nop
 80035c8:	3728      	adds	r7, #40	; 0x28
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40011400 	.word	0x40011400
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40020800 	.word	0x40020800

080035dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035e0:	e7fe      	b.n	80035e0 <NMI_Handler+0x4>

080035e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035e6:	e7fe      	b.n	80035e6 <HardFault_Handler+0x4>

080035e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035ec:	e7fe      	b.n	80035ec <MemManage_Handler+0x4>

080035ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f2:	e7fe      	b.n	80035f2 <BusFault_Handler+0x4>

080035f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <UsageFault_Handler+0x4>

080035fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003628:	f001 f944 	bl	80048b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800362c:	bf00      	nop
 800362e:	bd80      	pop	{r7, pc}

08003630 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003634:	4803      	ldr	r0, [pc, #12]	; (8003644 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003636:	f004 fc9d 	bl	8007f74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800363a:	4803      	ldr	r0, [pc, #12]	; (8003648 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800363c:	f004 fc9a 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003640:	bf00      	nop
 8003642:	bd80      	pop	{r7, pc}
 8003644:	2000069c 	.word	0x2000069c
 8003648:	200004f4 	.word	0x200004f4

0800364c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003650:	4803      	ldr	r0, [pc, #12]	; (8003660 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003652:	f004 fc8f 	bl	8007f74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8003656:	4803      	ldr	r0, [pc, #12]	; (8003664 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8003658:	f004 fc8c 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}
 8003660:	2000069c 	.word	0x2000069c
 8003664:	200005bc 	.word	0x200005bc

08003668 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800366c:	4802      	ldr	r0, [pc, #8]	; (8003678 <TIM6_DAC_IRQHandler+0x10>)
 800366e:	f004 fc81 	bl	8007f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	2000065c 	.word	0x2000065c

0800367c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003680:	4802      	ldr	r0, [pc, #8]	; (800368c <DMA2_Stream0_IRQHandler+0x10>)
 8003682:	f002 f817 	bl	80056b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	200005fc 	.word	0x200005fc

08003690 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
	return 1;
 8003694:	2301      	movs	r3, #1
}
 8003696:	4618      	mov	r0, r3
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_kill>:

int _kill(int pid, int sig)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036aa:	f005 fe2b 	bl	8009304 <__errno>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2216      	movs	r2, #22
 80036b2:	601a      	str	r2, [r3, #0]
	return -1;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_exit>:

void _exit (int status)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036c8:	f04f 31ff 	mov.w	r1, #4294967295
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ffe7 	bl	80036a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036d2:	e7fe      	b.n	80036d2 <_exit+0x12>

080036d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
 80036e4:	e00a      	b.n	80036fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036e6:	f3af 8000 	nop.w
 80036ea:	4601      	mov	r1, r0
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	60ba      	str	r2, [r7, #8]
 80036f2:	b2ca      	uxtb	r2, r1
 80036f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3301      	adds	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	dbf0      	blt.n	80036e6 <_read+0x12>
	}

return len;
 8003704:	687b      	ldr	r3, [r7, #4]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e009      	b.n	8003734 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	1c5a      	adds	r2, r3, #1
 8003724:	60ba      	str	r2, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fb41 	bl	8002db0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	dbf1      	blt.n	8003720 <_write+0x12>
	}
	return len;
 800373c:	687b      	ldr	r3, [r7, #4]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <_close>:

int _close(int file)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
	return -1;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800376e:	605a      	str	r2, [r3, #4]
	return 0;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <_isatty>:

int _isatty(int file)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
	return 1;
 8003786:	2301      	movs	r3, #1
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
	return 0;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <_sbrk+0x5c>)
 80037ba:	4b15      	ldr	r3, [pc, #84]	; (8003810 <_sbrk+0x60>)
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037c4:	4b13      	ldr	r3, [pc, #76]	; (8003814 <_sbrk+0x64>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <_sbrk+0x64>)
 80037ce:	4a12      	ldr	r2, [pc, #72]	; (8003818 <_sbrk+0x68>)
 80037d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <_sbrk+0x64>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4413      	add	r3, r2
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d207      	bcs.n	80037f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e0:	f005 fd90 	bl	8009304 <__errno>
 80037e4:	4603      	mov	r3, r0
 80037e6:	220c      	movs	r2, #12
 80037e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295
 80037ee:	e009      	b.n	8003804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f0:	4b08      	ldr	r3, [pc, #32]	; (8003814 <_sbrk+0x64>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037f6:	4b07      	ldr	r3, [pc, #28]	; (8003814 <_sbrk+0x64>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	4a05      	ldr	r2, [pc, #20]	; (8003814 <_sbrk+0x64>)
 8003800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003802:	68fb      	ldr	r3, [r7, #12]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20020000 	.word	0x20020000
 8003810:	00000400 	.word	0x00000400
 8003814:	200001fc 	.word	0x200001fc
 8003818:	200008c0 	.word	0x200008c0

0800381c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <SystemInit+0x28>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <SystemInit+0x28>)
 8003828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800382c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <SystemInit+0x28>)
 8003832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003836:	609a      	str	r2, [r3, #8]
#endif
}
 8003838:	bf00      	nop
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <tim10_read_velocity>:
{
  return velocity_right;
}

double tim10_read_velocity()
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return velocity;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <tim10_read_velocity+0x20>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	ec43 2b17 	vmov	d7, r2, r3
}
 8003856:	eeb0 0a47 	vmov.f32	s0, s14
 800385a:	eef0 0a67 	vmov.f32	s1, s15
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	200007f0 	.word	0x200007f0

0800386c <tim10_init>:

/* only use in main.c */
void tim10_init()
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  tim10_length_set_zero();
 8003870:	f000 f902 	bl	8003a78 <tim10_length_set_zero>
  tim10_velocity_set_zero();
 8003874:	f000 f922 	bl	8003abc <tim10_velocity_set_zero>
	encoder_init();
 8003878:	f7fe fa2e 	bl	8001cd8 <encoder_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 800387c:	4802      	ldr	r0, [pc, #8]	; (8003888 <tim10_init+0x1c>)
 800387e:	f004 f97a 	bl	8007b76 <HAL_TIM_Base_Stop_IT>
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	200004f4 	.word	0x200004f4

0800388c <tim10_start>:

void tim10_start()
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* encoder_set_middle, HAL_TIM_Encoder_Start */
  encoder_start();
 8003890:	f7fe fa34 	bl	8001cfc <encoder_start>
  /* marker = subsensbuf = sidedeltacount = markerstate = rightmarkercount = 0 */
  sidesensor_start();
 8003894:	f7ff fad6 	bl	8002e44 <sidesensor_start>
  tim10_length_set_zero();
 8003898:	f000 f8ee 	bl	8003a78 <tim10_length_set_zero>
  tim10_velocity_set_zero();
 800389c:	f000 f90e 	bl	8003abc <tim10_velocity_set_zero>
  HAL_TIM_Base_Start_IT(&htim10);
 80038a0:	4802      	ldr	r0, [pc, #8]	; (80038ac <tim10_start+0x20>)
 80038a2:	f004 f944 	bl	8007b2e <HAL_TIM_Base_Start_IT>
}
 80038a6:	bf00      	nop
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200004f4 	.word	0x200004f4

080038b0 <tim10_stop>:

void tim10_stop()
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 80038b4:	4804      	ldr	r0, [pc, #16]	; (80038c8 <tim10_stop+0x18>)
 80038b6:	f004 f95e 	bl	8007b76 <HAL_TIM_Base_Stop_IT>
  sidesensor_stop();
 80038ba:	f7ff fae3 	bl	8002e84 <sidesensor_stop>
  encoder_stop();
 80038be:	f7fe fa47 	bl	8001d50 <encoder_stop>
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200004f4 	.word	0x200004f4
 80038cc:	00000000 	.word	0x00000000

080038d0 <tim10_main>:

void tim10_main()
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
  double el, er, e;

  /* encoder をセットしてから encoder_length を読み出さないといけない */

  /* set encoder middle and update velocities */
  encoder_set();
 80038d6:	f7fe f9c5 	bl	8001c64 <encoder_set>

  el = encoder_length_left();
 80038da:	f7fe f985 	bl	8001be8 <encoder_length_left>
 80038de:	ed87 0b04 	vstr	d0, [r7, #16]
  er = encoder_length_right();
 80038e2:	f7fe f9a1 	bl	8001c28 <encoder_length_right>
 80038e6:	ed87 0b02 	vstr	d0, [r7, #8]
  e = encoder_length();
 80038ea:	f7fe f961 	bl	8001bb0 <encoder_length>
 80038ee:	ed87 0b00 	vstr	d0, [r7]

  /* update velocity */
  velocity_left = el * (double) TIM10_Hz;
 80038f2:	a329      	add	r3, pc, #164	; (adr r3, 8003998 <tim10_main+0xc8>)
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80038fc:	f7fc fe7c 	bl	80005f8 <__aeabi_dmul>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4926      	ldr	r1, [pc, #152]	; (80039a0 <tim10_main+0xd0>)
 8003906:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = er * (double) TIM10_Hz;
 800390a:	a323      	add	r3, pc, #140	; (adr r3, 8003998 <tim10_main+0xc8>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003914:	f7fc fe70 	bl	80005f8 <__aeabi_dmul>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4921      	ldr	r1, [pc, #132]	; (80039a4 <tim10_main+0xd4>)
 800391e:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = e * (double) TIM10_Hz;
 8003922:	a31d      	add	r3, pc, #116	; (adr r3, 8003998 <tim10_main+0xc8>)
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800392c:	f7fc fe64 	bl	80005f8 <__aeabi_dmul>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	491c      	ldr	r1, [pc, #112]	; (80039a8 <tim10_main+0xd8>)
 8003936:	e9c1 2300 	strd	r2, r3, [r1]

  /* update lengths */
  length_left += velocity_left;
 800393a:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <tim10_main+0xdc>)
 800393c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003940:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <tim10_main+0xd0>)
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	f7fc fca1 	bl	800028c <__adddf3>
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	4917      	ldr	r1, [pc, #92]	; (80039ac <tim10_main+0xdc>)
 8003950:	e9c1 2300 	strd	r2, r3, [r1]
  length_right += velocity_right;
 8003954:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <tim10_main+0xe0>)
 8003956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800395a:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <tim10_main+0xd4>)
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f7fc fc94 	bl	800028c <__adddf3>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4911      	ldr	r1, [pc, #68]	; (80039b0 <tim10_main+0xe0>)
 800396a:	e9c1 2300 	strd	r2, r3, [r1]
  length += velocity;
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <tim10_main+0xe4>)
 8003970:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <tim10_main+0xd8>)
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f7fc fc87 	bl	800028c <__adddf3>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	490c      	ldr	r1, [pc, #48]	; (80039b4 <tim10_main+0xe4>)
 8003984:	e9c1 2300 	strd	r2, r3, [r1]
  {
    course_state_function();
  }
  */

  sidesensor_function();
 8003988:	f7ff fab4 	bl	8002ef4 <sidesensor_function>
}
 800398c:	bf00      	nop
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	f3af 8000 	nop.w
 8003998:	e0000000 	.word	0xe0000000
 800399c:	3f50624d 	.word	0x3f50624d
 80039a0:	20000800 	.word	0x20000800
 80039a4:	200007f8 	.word	0x200007f8
 80039a8:	200007f0 	.word	0x200007f0
 80039ac:	200007e0 	.word	0x200007e0
 80039b0:	20000808 	.word	0x20000808
 80039b4:	200007e8 	.word	0x200007e8

080039b8 <tim10_d_print>:

void tim10_d_print()
{
 80039b8:	b5b0      	push	{r4, r5, r7, lr}
 80039ba:	ed2d 8b02 	vpush	{d8}
 80039be:	b084      	sub	sp, #16
 80039c0:	af04      	add	r7, sp, #16
  #if D_TIM10
  printf("tim10.c > ");
 80039c2:	4823      	ldr	r0, [pc, #140]	; (8003a50 <tim10_d_print+0x98>)
 80039c4:	f006 fb58 	bl	800a078 <iprintf>
  printf("tim10_d_print() > encoder_length_left() = %7.5f, encoder_length_right() = %7.5f, encoder_length() = %7.5f\r\n", encoder_length_left(), encoder_length_right(), encoder_length());
 80039c8:	f7fe f90e 	bl	8001be8 <encoder_length_left>
 80039cc:	ec55 4b10 	vmov	r4, r5, d0
 80039d0:	f7fe f92a 	bl	8001c28 <encoder_length_right>
 80039d4:	eeb0 8a40 	vmov.f32	s16, s0
 80039d8:	eef0 8a60 	vmov.f32	s17, s1
 80039dc:	f7fe f8e8 	bl	8001bb0 <encoder_length>
 80039e0:	eeb0 7a40 	vmov.f32	s14, s0
 80039e4:	eef0 7a60 	vmov.f32	s15, s1
 80039e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80039ec:	ed8d 8b00 	vstr	d8, [sp]
 80039f0:	4622      	mov	r2, r4
 80039f2:	462b      	mov	r3, r5
 80039f4:	4817      	ldr	r0, [pc, #92]	; (8003a54 <tim10_d_print+0x9c>)
 80039f6:	f006 fb3f 	bl	800a078 <iprintf>
  printf("tim10_d_print() > velocity_left = %7.2f, velocity_right = %7.2f, velocity = %7.2f\r\n", velocity_left, velocity_right, velocity);
 80039fa:	4b17      	ldr	r3, [pc, #92]	; (8003a58 <tim10_d_print+0xa0>)
 80039fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a00:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <tim10_d_print+0xa4>)
 8003a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a06:	4916      	ldr	r1, [pc, #88]	; (8003a60 <tim10_d_print+0xa8>)
 8003a08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a10:	e9cd 2300 	strd	r2, r3, [sp]
 8003a14:	4622      	mov	r2, r4
 8003a16:	462b      	mov	r3, r5
 8003a18:	4812      	ldr	r0, [pc, #72]	; (8003a64 <tim10_d_print+0xac>)
 8003a1a:	f006 fb2d 	bl	800a078 <iprintf>
  printf("tim10_d_print() > length_left = %7.2f, length_right = %7.2f, length = %7.2f\r\n", length_left, length_right, length);
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <tim10_d_print+0xb0>)
 8003a20:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <tim10_d_print+0xb4>)
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	4911      	ldr	r1, [pc, #68]	; (8003a70 <tim10_d_print+0xb8>)
 8003a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a34:	e9cd 2300 	strd	r2, r3, [sp]
 8003a38:	4622      	mov	r2, r4
 8003a3a:	462b      	mov	r3, r5
 8003a3c:	480d      	ldr	r0, [pc, #52]	; (8003a74 <tim10_d_print+0xbc>)
 8003a3e:	f006 fb1b 	bl	800a078 <iprintf>
  #endif
  #if D_ENCODER
  tim10_length_set_zero();
 8003a42:	f000 f819 	bl	8003a78 <tim10_length_set_zero>
  #endif
}
 8003a46:	bf00      	nop
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	ecbd 8b02 	vpop	{d8}
 8003a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a50:	0800e0c0 	.word	0x0800e0c0
 8003a54:	0800e0cc 	.word	0x0800e0cc
 8003a58:	20000800 	.word	0x20000800
 8003a5c:	200007f8 	.word	0x200007f8
 8003a60:	200007f0 	.word	0x200007f0
 8003a64:	0800e138 	.word	0x0800e138
 8003a68:	200007e0 	.word	0x200007e0
 8003a6c:	20000808 	.word	0x20000808
 8003a70:	200007e8 	.word	0x200007e8
 8003a74:	0800e18c 	.word	0x0800e18c

08003a78 <tim10_length_set_zero>:

/* private */
void tim10_length_set_zero()
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  length_left = 0;
 8003a7c:	490c      	ldr	r1, [pc, #48]	; (8003ab0 <tim10_length_set_zero+0x38>)
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9c1 2300 	strd	r2, r3, [r1]
  length_right = 0;
 8003a8a:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <tim10_length_set_zero+0x3c>)
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9c1 2300 	strd	r2, r3, [r1]
  length = 0;
 8003a98:	4907      	ldr	r1, [pc, #28]	; (8003ab8 <tim10_length_set_zero+0x40>)
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	200007e0 	.word	0x200007e0
 8003ab4:	20000808 	.word	0x20000808
 8003ab8:	200007e8 	.word	0x200007e8

08003abc <tim10_velocity_set_zero>:

void tim10_velocity_set_zero()
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  velocity_left = 0;
 8003ac0:	490c      	ldr	r1, [pc, #48]	; (8003af4 <tim10_velocity_set_zero+0x38>)
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = 0;
 8003ace:	490a      	ldr	r1, [pc, #40]	; (8003af8 <tim10_velocity_set_zero+0x3c>)
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = 0;
 8003adc:	4907      	ldr	r1, [pc, #28]	; (8003afc <tim10_velocity_set_zero+0x40>)
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003aea:	bf00      	nop
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	20000800 	.word	0x20000800
 8003af8:	200007f8 	.word	0x200007f8
 8003afc:	200007f0 	.word	0x200007f0

08003b00 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
    switch_init();
 8003b04:	f7fd fcf2 	bl	80014ec <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8003b08:	4803      	ldr	r0, [pc, #12]	; (8003b18 <tim11_init+0x18>)
 8003b0a:	f004 f810 	bl	8007b2e <HAL_TIM_Base_Start_IT>
    rotary_init();
 8003b0e:	f7fd fbdf 	bl	80012d0 <rotary_init>
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	200005bc 	.word	0x200005bc

08003b1c <tim11_main>:

void tim11_main()
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
    switch_enter();
 8003b20:	f7fd fd33 	bl	800158a <switch_enter>
    rotary_set_value();
 8003b24:	f7fd fbf4 	bl	8001310 <rotary_set_value>
}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	0000      	movs	r0, r0
	...

08003b30 <tim6_init>:
int direction;
double leftmotor, rightmotor;
#endif

void tim6_init()
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
    motor_init();
 8003b34:	f7ff f85b 	bl	8002bee <motor_init>
    analog_init();
 8003b38:	f7fd fefe 	bl	8001938 <analog_init>
    velotrace_init(1);
 8003b3c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8003b50 <tim6_init+0x20>
 8003b40:	f000 fc50 	bl	80043e4 <velotrace_init>
    tracer_init(1);
 8003b44:	ed9f 0b02 	vldr	d0, [pc, #8]	; 8003b50 <tim6_init+0x20>
 8003b48:	f000 fa16 	bl	8003f78 <tracer_init>
}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	00000000 	.word	0x00000000
 8003b54:	3ff00000 	.word	0x3ff00000

08003b58 <tim6_start>:

void tim6_start()
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
    /* analogmin/max = FlashBuffer.analogmin/max */
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8003b5c:	491b      	ldr	r1, [pc, #108]	; (8003bcc <tim6_start+0x74>)
 8003b5e:	481c      	ldr	r0, [pc, #112]	; (8003bd0 <tim6_start+0x78>)
 8003b60:	f7fd fe26 	bl	80017b0 <analog_set_from_flash>
    HAL_Delay(3000);
 8003b64:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003b68:	f000 fec4 	bl	80048f4 <HAL_Delay>
    /* sensgettime = 0, HAL_ADC_Start_DMA() */
    printf("analog_start()\r\n");
 8003b6c:	4819      	ldr	r0, [pc, #100]	; (8003bd4 <tim6_start+0x7c>)
 8003b6e:	f006 fb09 	bl	800a184 <puts>
    analog_start();
 8003b72:	f7fd fef3 	bl	800195c <analog_start>
    /* samplingtime = 0, s_error = 0, before_error = 0, if search ( p/i/d = [0], target = [0] ) */
    printf("velotrace_start()\r\n");
 8003b76:	4818      	ldr	r0, [pc, #96]	; (8003bd8 <tim6_start+0x80>)
 8003b78:	f006 fb04 	bl	800a184 <puts>
    velotrace_start();
 8003b7c:	f000 fbf4 	bl	8004368 <velotrace_start>
    /* samplingtime = 0, s_error = 0, before_error = 0 */
    printf("tracer_start()\r\n");
 8003b80:	4816      	ldr	r0, [pc, #88]	; (8003bdc <tim6_start+0x84>)
 8003b82:	f006 faff 	bl	800a184 <puts>
    tracer_start();
 8003b86:	f000 f9b3 	bl	8003ef0 <tracer_start>

    printf("motor_start()\r\n");
 8003b8a:	4815      	ldr	r0, [pc, #84]	; (8003be0 <tim6_start+0x88>)
 8003b8c:	f006 fafa 	bl	800a184 <puts>
    #if D_TIM6
    analogl = 0;
 8003b90:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <tim6_start+0x8c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	801a      	strh	r2, [r3, #0]
    analogr = 0;
 8003b96:	4b14      	ldr	r3, [pc, #80]	; (8003be8 <tim6_start+0x90>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	801a      	strh	r2, [r3, #0]
    direction = 0;
 8003b9c:	4b13      	ldr	r3, [pc, #76]	; (8003bec <tim6_start+0x94>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
    leftmotor = 0;
 8003ba2:	4913      	ldr	r1, [pc, #76]	; (8003bf0 <tim6_start+0x98>)
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9c1 2300 	strd	r2, r3, [r1]
    rightmotor = 0;
 8003bb0:	4910      	ldr	r1, [pc, #64]	; (8003bf4 <tim6_start+0x9c>)
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9c1 2300 	strd	r2, r3, [r1]
    #endif
    motor_start();
 8003bbe:	f7ff f81d 	bl	8002bfc <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8003bc2:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <tim6_start+0xa0>)
 8003bc4:	f003 ffb3 	bl	8007b2e <HAL_TIM_Base_Start_IT>
}
 8003bc8:	bf00      	nop
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	2000079a 	.word	0x2000079a
 8003bd0:	2000077a 	.word	0x2000077a
 8003bd4:	0800e1dc 	.word	0x0800e1dc
 8003bd8:	0800e1ec 	.word	0x0800e1ec
 8003bdc:	0800e200 	.word	0x0800e200
 8003be0:	0800e210 	.word	0x0800e210
 8003be4:	20000820 	.word	0x20000820
 8003be8:	20000828 	.word	0x20000828
 8003bec:	20000824 	.word	0x20000824
 8003bf0:	20000818 	.word	0x20000818
 8003bf4:	20000810 	.word	0x20000810
 8003bf8:	2000065c 	.word	0x2000065c

08003bfc <tim6_stop>:

void tim6_stop()
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 8003c00:	4804      	ldr	r0, [pc, #16]	; (8003c14 <tim6_stop+0x18>)
 8003c02:	f003 ffb8 	bl	8007b76 <HAL_TIM_Base_Stop_IT>
    analog_stop();
 8003c06:	f7fd feb5 	bl	8001974 <analog_stop>
    motor_stop();
 8003c0a:	f7ff f809 	bl	8002c20 <motor_stop>
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	2000065c 	.word	0x2000065c

08003c18 <tim6_main>:

void tim6_main()
{
 8003c18:	b5b0      	push	{r4, r5, r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
    #if !D_TIM6
    uint16_t analogl, analogr;
    int direction;
    double leftmotor, rightmotor;
    #endif
    analogl = 0;
 8003c1e:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <tim6_main+0x228>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	801a      	strh	r2, [r3, #0]
    analogr = 0;
 8003c24:	4b87      	ldr	r3, [pc, #540]	; (8003e44 <tim6_main+0x22c>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	801a      	strh	r2, [r3, #0]

    for(unsigned char i = 0; i < analog_read_calibrationsize(); i++)
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	71fb      	strb	r3, [r7, #7]
 8003c2e:	e021      	b.n	8003c74 <tim6_main+0x5c>
    {
        if(i % 2 == 0)
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10c      	bne.n	8003c56 <tim6_main+0x3e>
        {
            analogl += analog_sensor_get(i);
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd fec8 	bl	80019d4 <analog_sensor_get>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b7d      	ldr	r3, [pc, #500]	; (8003e40 <tim6_main+0x228>)
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	4b7b      	ldr	r3, [pc, #492]	; (8003e40 <tim6_main+0x228>)
 8003c52:	801a      	strh	r2, [r3, #0]
 8003c54:	e00b      	b.n	8003c6e <tim6_main+0x56>
        }
        else
        {
            analogr += analog_sensor_get(i);
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fd febb 	bl	80019d4 <analog_sensor_get>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	4b78      	ldr	r3, [pc, #480]	; (8003e44 <tim6_main+0x22c>)
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	4413      	add	r3, r2
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	4b76      	ldr	r3, [pc, #472]	; (8003e44 <tim6_main+0x22c>)
 8003c6c:	801a      	strh	r2, [r3, #0]
    for(unsigned char i = 0; i < analog_read_calibrationsize(); i++)
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	3301      	adds	r3, #1
 8003c72:	71fb      	strb	r3, [r7, #7]
 8003c74:	f7fd fe04 	bl	8001880 <analog_read_calibrationsize>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d3d6      	bcc.n	8003c30 <tim6_main+0x18>
    }
    #endif

    // ( direction > 0 ) is ( analogl > analogr ) i.e. left is black, right is white.
    // When ( direction > 0 ) , must turn right.
    direction = (analogl - analogr);	// difference
 8003c82:	4b6f      	ldr	r3, [pc, #444]	; (8003e40 <tim6_main+0x228>)
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b6e      	ldr	r3, [pc, #440]	; (8003e44 <tim6_main+0x22c>)
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	4a6e      	ldr	r2, [pc, #440]	; (8003e48 <tim6_main+0x230>)
 8003c90:	6013      	str	r3, [r2, #0]

    if(analogl + analogr <= 700 * analog_read_calibrationsize())
 8003c92:	4b6b      	ldr	r3, [pc, #428]	; (8003e40 <tim6_main+0x228>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <tim6_main+0x22c>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	18d4      	adds	r4, r2, r3
 8003c9e:	f7fd fdef 	bl	8001880 <analog_read_calibrationsize>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8003caa:	fb03 f302 	mul.w	r3, r3, r2
 8003cae:	429c      	cmp	r4, r3
 8003cb0:	dc02      	bgt.n	8003cb8 <tim6_main+0xa0>
    {
        direction = 0;
 8003cb2:	4b65      	ldr	r3, [pc, #404]	; (8003e48 <tim6_main+0x230>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
    }

    if(motor_read_enable())
 8003cb8:	f7fe ffda 	bl	8002c70 <motor_read_enable>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8097 	beq.w	8003df2 <tim6_main+0x1da>
    {
        switch(rotary_read_playmode())
 8003cc4:	f7fd fb18 	bl	80012f8 <rotary_read_playmode>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d002      	beq.n	8003cd4 <tim6_main+0xbc>
 8003cce:	2b06      	cmp	r3, #6
 8003cd0:	d025      	beq.n	8003d1e <tim6_main+0x106>
 8003cd2:	e051      	b.n	8003d78 <tim6_main+0x160>
        {
            case tracer_tuning:
                leftmotor   = 0 + tracer_solve(direction);
 8003cd4:	4b5c      	ldr	r3, [pc, #368]	; (8003e48 <tim6_main+0x230>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fa7b 	bl	80041d4 <tracer_solve>
 8003cde:	ec51 0b10 	vmov	r0, r1, d0
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	f7fc facf 	bl	800028c <__adddf3>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4956      	ldr	r1, [pc, #344]	; (8003e4c <tim6_main+0x234>)
 8003cf4:	e9c1 2300 	strd	r2, r3, [r1]
                rightmotor  = 0 - tracer_solve(direction);
 8003cf8:	4b53      	ldr	r3, [pc, #332]	; (8003e48 <tim6_main+0x230>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fa69 	bl	80041d4 <tracer_solve>
 8003d02:	ec53 2b10 	vmov	r2, r3, d0
 8003d06:	f04f 0000 	mov.w	r0, #0
 8003d0a:	f04f 0100 	mov.w	r1, #0
 8003d0e:	f7fc fabb 	bl	8000288 <__aeabi_dsub>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	494e      	ldr	r1, [pc, #312]	; (8003e50 <tim6_main+0x238>)
 8003d18:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 8003d1c:	e06a      	b.n	8003df4 <tim6_main+0x1dc>
            case velotrace_tuning:
                leftmotor   = velotrace_solve(tim10_read_velocity()) + 0;
 8003d1e:	f7ff fd93 	bl	8003848 <tim10_read_velocity>
 8003d22:	eeb0 7a40 	vmov.f32	s14, s0
 8003d26:	eef0 7a60 	vmov.f32	s15, s1
 8003d2a:	eeb0 0a47 	vmov.f32	s0, s14
 8003d2e:	eef0 0a67 	vmov.f32	s1, s15
 8003d32:	f000 fc7d 	bl	8004630 <velotrace_solve>
 8003d36:	ec51 0b10 	vmov	r0, r1, d0
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	f7fc faa3 	bl	800028c <__adddf3>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4940      	ldr	r1, [pc, #256]	; (8003e4c <tim6_main+0x234>)
 8003d4c:	e9c1 2300 	strd	r2, r3, [r1]
                rightmotor  = velotrace_solve(tim10_read_velocity()) - 0;
 8003d50:	f7ff fd7a 	bl	8003848 <tim10_read_velocity>
 8003d54:	eeb0 7a40 	vmov.f32	s14, s0
 8003d58:	eef0 7a60 	vmov.f32	s15, s1
 8003d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8003d60:	eef0 0a67 	vmov.f32	s1, s15
 8003d64:	f000 fc64 	bl	8004630 <velotrace_solve>
 8003d68:	eeb0 7a40 	vmov.f32	s14, s0
 8003d6c:	eef0 7a60 	vmov.f32	s15, s1
 8003d70:	4b37      	ldr	r3, [pc, #220]	; (8003e50 <tim6_main+0x238>)
 8003d72:	ed83 7b00 	vstr	d7, [r3]
                break;
 8003d76:	e03d      	b.n	8003df4 <tim6_main+0x1dc>
            default:
                leftmotor   = velotrace_solve(tim10_read_velocity()) + tracer_solve(direction);
 8003d78:	f7ff fd66 	bl	8003848 <tim10_read_velocity>
 8003d7c:	eeb0 7a40 	vmov.f32	s14, s0
 8003d80:	eef0 7a60 	vmov.f32	s15, s1
 8003d84:	eeb0 0a47 	vmov.f32	s0, s14
 8003d88:	eef0 0a67 	vmov.f32	s1, s15
 8003d8c:	f000 fc50 	bl	8004630 <velotrace_solve>
 8003d90:	ec55 4b10 	vmov	r4, r5, d0
 8003d94:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <tim6_main+0x230>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fa1b 	bl	80041d4 <tracer_solve>
 8003d9e:	ec53 2b10 	vmov	r2, r3, d0
 8003da2:	4620      	mov	r0, r4
 8003da4:	4629      	mov	r1, r5
 8003da6:	f7fc fa71 	bl	800028c <__adddf3>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4927      	ldr	r1, [pc, #156]	; (8003e4c <tim6_main+0x234>)
 8003db0:	e9c1 2300 	strd	r2, r3, [r1]
                rightmotor  = velotrace_solve(tim10_read_velocity()) - tracer_solve(direction);
 8003db4:	f7ff fd48 	bl	8003848 <tim10_read_velocity>
 8003db8:	eeb0 7a40 	vmov.f32	s14, s0
 8003dbc:	eef0 7a60 	vmov.f32	s15, s1
 8003dc0:	eeb0 0a47 	vmov.f32	s0, s14
 8003dc4:	eef0 0a67 	vmov.f32	s1, s15
 8003dc8:	f000 fc32 	bl	8004630 <velotrace_solve>
 8003dcc:	ec55 4b10 	vmov	r4, r5, d0
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <tim6_main+0x230>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 f9fd 	bl	80041d4 <tracer_solve>
 8003dda:	ec53 2b10 	vmov	r2, r3, d0
 8003dde:	4620      	mov	r0, r4
 8003de0:	4629      	mov	r1, r5
 8003de2:	f7fc fa51 	bl	8000288 <__aeabi_dsub>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4919      	ldr	r1, [pc, #100]	; (8003e50 <tim6_main+0x238>)
 8003dec:	e9c1 2300 	strd	r2, r3, [r1]
                break;
 8003df0:	e000      	b.n	8003df4 <tim6_main+0x1dc>
        }
    }
 8003df2:	bf00      	nop
        leftmotor = 0;
        rightmotor = 0;
    }
    #endif

    if(rotary_read_playmode() == motor_free)
 8003df4:	f7fd fa80 	bl	80012f8 <rotary_read_playmode>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d106      	bne.n	8003e0c <tim6_main+0x1f4>
    {
        motor_set(0, 0);
 8003dfe:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8003e38 <tim6_main+0x220>
 8003e02:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8003e38 <tim6_main+0x220>
 8003e06:	f7fe ff3f 	bl	8002c88 <motor_set>
    }
    else
    {
        motor_set(leftmotor, rightmotor);
    }
}
 8003e0a:	e00f      	b.n	8003e2c <tim6_main+0x214>
        motor_set(leftmotor, rightmotor);
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <tim6_main+0x234>)
 8003e0e:	ed93 7b00 	vldr	d7, [r3]
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <tim6_main+0x238>)
 8003e14:	ed93 6b00 	vldr	d6, [r3]
 8003e18:	eeb0 1a46 	vmov.f32	s2, s12
 8003e1c:	eef0 1a66 	vmov.f32	s3, s13
 8003e20:	eeb0 0a47 	vmov.f32	s0, s14
 8003e24:	eef0 0a67 	vmov.f32	s1, s15
 8003e28:	f7fe ff2e 	bl	8002c88 <motor_set>
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bdb0      	pop	{r4, r5, r7, pc}
 8003e34:	f3af 8000 	nop.w
	...
 8003e40:	20000820 	.word	0x20000820
 8003e44:	20000828 	.word	0x20000828
 8003e48:	20000824 	.word	0x20000824
 8003e4c:	20000818 	.word	0x20000818
 8003e50:	20000810 	.word	0x20000810

08003e54 <tim6_d_print>:

void tim6_d_print()
{
 8003e54:	b5b0      	push	{r4, r5, r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af02      	add	r7, sp, #8
    #if D_TIM6
    printf("tim6.c > tim6_d_print() > analogl = %5d, analogr = %5d, direction = %5d\r\n", analogl, analogr, direction);
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <tim6_d_print+0x78>)
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <tim6_d_print+0x7c>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <tim6_d_print+0x80>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	481b      	ldr	r0, [pc, #108]	; (8003ed8 <tim6_d_print+0x84>)
 8003e6c:	f006 f904 	bl	800a078 <iprintf>
    printf("tim6.c > tim6_d_print() > tracer_solve(direction) = %7.2f velotrace_solve(tim10_read_velocity()) = %7.2f\r\n", tracer_solve(direction), velotrace_solve(tim10_read_velocity()));
 8003e70:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <tim6_d_print+0x80>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 f9ad 	bl	80041d4 <tracer_solve>
 8003e7a:	ec55 4b10 	vmov	r4, r5, d0
 8003e7e:	f7ff fce3 	bl	8003848 <tim10_read_velocity>
 8003e82:	eeb0 7a40 	vmov.f32	s14, s0
 8003e86:	eef0 7a60 	vmov.f32	s15, s1
 8003e8a:	eeb0 0a47 	vmov.f32	s0, s14
 8003e8e:	eef0 0a67 	vmov.f32	s1, s15
 8003e92:	f000 fbcd 	bl	8004630 <velotrace_solve>
 8003e96:	eeb0 7a40 	vmov.f32	s14, s0
 8003e9a:	eef0 7a60 	vmov.f32	s15, s1
 8003e9e:	ed8d 7b00 	vstr	d7, [sp]
 8003ea2:	4622      	mov	r2, r4
 8003ea4:	462b      	mov	r3, r5
 8003ea6:	480d      	ldr	r0, [pc, #52]	; (8003edc <tim6_d_print+0x88>)
 8003ea8:	f006 f8e6 	bl	800a078 <iprintf>
    printf("tim6.c > tim6_d_print() > leftmotor = %5.3f, rightmotor = %5.3f\r\n", leftmotor, rightmotor); 
 8003eac:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <tim6_d_print+0x8c>)
 8003eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <tim6_d_print+0x90>)
 8003eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb8:	e9cd 2300 	strd	r2, r3, [sp]
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4809      	ldr	r0, [pc, #36]	; (8003ee8 <tim6_d_print+0x94>)
 8003ec2:	f006 f8d9 	bl	800a078 <iprintf>
    #endif
}
 8003ec6:	bf00      	nop
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bdb0      	pop	{r4, r5, r7, pc}
 8003ecc:	20000820 	.word	0x20000820
 8003ed0:	20000828 	.word	0x20000828
 8003ed4:	20000824 	.word	0x20000824
 8003ed8:	0800e220 	.word	0x0800e220
 8003edc:	0800e26c 	.word	0x0800e26c
 8003ee0:	20000818 	.word	0x20000818
 8003ee4:	20000810 	.word	0x20000810
 8003ee8:	0800e2d8 	.word	0x0800e2d8
 8003eec:	00000000 	.word	0x00000000

08003ef0 <tracer_start>:
double samplingtime;

PID tracer_pid;

void tracer_start()
{
 8003ef0:	b5b0      	push	{r4, r5, r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af04      	add	r7, sp, #16
    tracer_init(1);
 8003ef6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8003f58 <tracer_start+0x68>
 8003efa:	f000 f83d 	bl	8003f78 <tracer_init>
    tracer_set_gain(rotary_read_value());
 8003efe:	f7fd fa13 	bl	8001328 <rotary_read_value>
 8003f02:	4603      	mov	r3, r0
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f8f4 	bl	80040f4 <tracer_set_gain>
    tracer_set_target(0);
 8003f0c:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8003f60 <tracer_start+0x70>
 8003f10:	f000 f93a 	bl	8004188 <tracer_set_target>
    #if D_TRACER
    printf("tracer.c > tracer_start > ");
 8003f14:	4814      	ldr	r0, [pc, #80]	; (8003f68 <tracer_start+0x78>)
 8003f16:	f006 f8af 	bl	800a078 <iprintf>
    printf("target = %5.2f\r\n", tracer_pid.target);
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <tracer_start+0x7c>)
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	4813      	ldr	r0, [pc, #76]	; (8003f70 <tracer_start+0x80>)
 8003f22:	f006 f8a9 	bl	800a078 <iprintf>
    printf("tracer.c > tracer_start > ");
 8003f26:	4810      	ldr	r0, [pc, #64]	; (8003f68 <tracer_start+0x78>)
 8003f28:	f006 f8a6 	bl	800a078 <iprintf>
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <tracer_start+0x7c>)
 8003f2e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <tracer_start+0x7c>)
 8003f34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003f38:	490c      	ldr	r1, [pc, #48]	; (8003f6c <tracer_start+0x7c>)
 8003f3a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8003f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f42:	e9cd 2300 	strd	r2, r3, [sp]
 8003f46:	4622      	mov	r2, r4
 8003f48:	462b      	mov	r3, r5
 8003f4a:	480a      	ldr	r0, [pc, #40]	; (8003f74 <tracer_start+0x84>)
 8003f4c:	f006 f894 	bl	800a078 <iprintf>
    #endif
}
 8003f50:	bf00      	nop
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bdb0      	pop	{r4, r5, r7, pc}
 8003f56:	bf00      	nop
 8003f58:	00000000 	.word	0x00000000
 8003f5c:	3ff00000 	.word	0x3ff00000
	...
 8003f68:	0800e31c 	.word	0x0800e31c
 8003f6c:	20000830 	.word	0x20000830
 8003f70:	0800e338 	.word	0x0800e338
 8003f74:	0800e34c 	.word	0x0800e34c

08003f78 <tracer_init>:

void tracer_init(double samplingtime_)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	ed87 0b00 	vstr	d0, [r7]
    #if D_TRACER
    printf("tracer.c > ");
 8003f82:	480e      	ldr	r0, [pc, #56]	; (8003fbc <tracer_init+0x44>)
 8003f84:	f006 f878 	bl	800a078 <iprintf>
    printf("tracer_init > ");
 8003f88:	480d      	ldr	r0, [pc, #52]	; (8003fc0 <tracer_init+0x48>)
 8003f8a:	f006 f875 	bl	800a078 <iprintf>
    printf("sampling_time = 1, s_error = 0, before_error = 0\r\n");
 8003f8e:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <tracer_init+0x4c>)
 8003f90:	f006 f8f8 	bl	800a184 <puts>
    #endif
    samplingtime = samplingtime_;
 8003f94:	490c      	ldr	r1, [pc, #48]	; (8003fc8 <tracer_init+0x50>)
 8003f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f9a:	e9c1 2300 	strd	r2, r3, [r1]
    s_error = 0;
 8003f9e:	490b      	ldr	r1, [pc, #44]	; (8003fcc <tracer_init+0x54>)
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	e9c1 2300 	strd	r2, r3, [r1]
    before_error = 0;
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <tracer_init+0x58>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	0800e374 	.word	0x0800e374
 8003fc0:	0800e380 	.word	0x0800e380
 8003fc4:	0800e390 	.word	0x0800e390
 8003fc8:	20000858 	.word	0x20000858
 8003fcc:	20000850 	.word	0x20000850
 8003fd0:	20000880 	.word	0x20000880

08003fd4 <tracer_read_gain_kp>:

double tracer_read_gain_kp(unsigned short int i)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KP_MAX - TRACER_KP_MIN) / (double) (TRACER_STEP_SIZE - 1);
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	f1c3 030f 	rsb	r3, r3, #15
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fa9d 	bl	8000524 <__aeabi_i2d>
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	f7fc fb01 	bl	80005f8 <__aeabi_dmul>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	4b0a      	ldr	r3, [pc, #40]	; (800402c <tracer_read_gain_kp+0x58>)
 8004004:	f7fc fc22 	bl	800084c <__aeabi_ddiv>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	f04f 0000 	mov.w	r0, #0
 8004010:	4907      	ldr	r1, [pc, #28]	; (8004030 <tracer_read_gain_kp+0x5c>)
 8004012:	f7fc f939 	bl	8000288 <__aeabi_dsub>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	ec43 2b17 	vmov	d7, r2, r3
}
 800401e:	eeb0 0a47 	vmov.f32	s0, s14
 8004022:	eef0 0a67 	vmov.f32	s1, s15
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	402e0000 	.word	0x402e0000
 8004030:	3fd00000 	.word	0x3fd00000

08004034 <tracer_read_gain_ki>:

double tracer_read_gain_ki(unsigned short int i)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KI_MAX - TRACER_KI_MIN) / (double) (TRACER_STEP_SIZE - 1);
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	f1c3 030f 	rsb	r3, r3, #15
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc fa6d 	bl	8000524 <__aeabi_i2d>
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	f7fc fad1 	bl	80005f8 <__aeabi_dmul>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4610      	mov	r0, r2
 800405c:	4619      	mov	r1, r3
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <tracer_read_gain_ki+0x5c>)
 8004064:	f7fc fbf2 	bl	800084c <__aeabi_ddiv>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	f04f 0000 	mov.w	r0, #0
 8004070:	f04f 0100 	mov.w	r1, #0
 8004074:	f7fc f908 	bl	8000288 <__aeabi_dsub>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	ec43 2b17 	vmov	d7, r2, r3
}
 8004080:	eeb0 0a47 	vmov.f32	s0, s14
 8004084:	eef0 0a67 	vmov.f32	s1, s15
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	402e0000 	.word	0x402e0000

08004094 <tracer_read_gain_kd>:

double tracer_read_gain_kd(unsigned short int i)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KD_MAX - TRACER_KD_MIN) / (double) (TRACER_STEP_SIZE - 1);
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	f1c3 030f 	rsb	r3, r3, #15
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fc fa3d 	bl	8000524 <__aeabi_i2d>
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	f7fc faa1 	bl	80005f8 <__aeabi_dmul>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <tracer_read_gain_kd+0x5c>)
 80040c4:	f7fc fbc2 	bl	800084c <__aeabi_ddiv>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	f04f 0000 	mov.w	r0, #0
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	f7fc f8d8 	bl	8000288 <__aeabi_dsub>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	ec43 2b17 	vmov	d7, r2, r3
}
 80040e0:	eeb0 0a47 	vmov.f32	s0, s14
 80040e4:	eef0 0a67 	vmov.f32	s1, s15
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	402e0000 	.word	0x402e0000

080040f4 <tracer_set_gain>:

void tracer_set_gain(unsigned short int i)
{
 80040f4:	b5b0      	push	{r4, r5, r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af04      	add	r7, sp, #16
 80040fa:	4603      	mov	r3, r0
 80040fc:	80fb      	strh	r3, [r7, #6]
    #if D_TRACER
    printf("tracer.c > ");
 80040fe:	481e      	ldr	r0, [pc, #120]	; (8004178 <tracer_set_gain+0x84>)
 8004100:	f005 ffba 	bl	800a078 <iprintf>
    printf("tracer_set_gain() > ");
 8004104:	481d      	ldr	r0, [pc, #116]	; (800417c <tracer_set_gain+0x88>)
 8004106:	f005 ffb7 	bl	800a078 <iprintf>
    #endif
    tracer_pid.kp = tracer_read_gain_kp(i);
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff ff61 	bl	8003fd4 <tracer_read_gain_kp>
 8004112:	eeb0 7a40 	vmov.f32	s14, s0
 8004116:	eef0 7a60 	vmov.f32	s15, s1
 800411a:	4b19      	ldr	r3, [pc, #100]	; (8004180 <tracer_set_gain+0x8c>)
 800411c:	ed83 7b02 	vstr	d7, [r3, #8]
    tracer_pid.ki = tracer_read_gain_ki(i);
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff ff86 	bl	8004034 <tracer_read_gain_ki>
 8004128:	eeb0 7a40 	vmov.f32	s14, s0
 800412c:	eef0 7a60 	vmov.f32	s15, s1
 8004130:	4b13      	ldr	r3, [pc, #76]	; (8004180 <tracer_set_gain+0x8c>)
 8004132:	ed83 7b04 	vstr	d7, [r3, #16]
    tracer_pid.kd = tracer_read_gain_kd(i);
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ffab 	bl	8004094 <tracer_read_gain_kd>
 800413e:	eeb0 7a40 	vmov.f32	s14, s0
 8004142:	eef0 7a60 	vmov.f32	s15, s1
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <tracer_set_gain+0x8c>)
 8004148:	ed83 7b06 	vstr	d7, [r3, #24]
    #if D_TRACER
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <tracer_set_gain+0x8c>)
 800414e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <tracer_set_gain+0x8c>)
 8004154:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004158:	4909      	ldr	r1, [pc, #36]	; (8004180 <tracer_set_gain+0x8c>)
 800415a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800415e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004162:	e9cd 2300 	strd	r2, r3, [sp]
 8004166:	4622      	mov	r2, r4
 8004168:	462b      	mov	r3, r5
 800416a:	4806      	ldr	r0, [pc, #24]	; (8004184 <tracer_set_gain+0x90>)
 800416c:	f005 ff84 	bl	800a078 <iprintf>
    #endif
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bdb0      	pop	{r4, r5, r7, pc}
 8004178:	0800e374 	.word	0x0800e374
 800417c:	0800e3c4 	.word	0x0800e3c4
 8004180:	20000830 	.word	0x20000830
 8004184:	0800e34c 	.word	0x0800e34c

08004188 <tracer_set_target>:

void tracer_set_target(double target_)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af02      	add	r7, sp, #8
 800418e:	ed87 0b00 	vstr	d0, [r7]
    #if D_TRACER
    printf("tracer.c > ");
 8004192:	480c      	ldr	r0, [pc, #48]	; (80041c4 <tracer_set_target+0x3c>)
 8004194:	f005 ff70 	bl	800a078 <iprintf>
    printf("tracer_set_target() > ");
 8004198:	480b      	ldr	r0, [pc, #44]	; (80041c8 <tracer_set_target+0x40>)
 800419a:	f005 ff6d 	bl	800a078 <iprintf>
    #endif
    tracer_pid.target = target_;
 800419e:	490b      	ldr	r1, [pc, #44]	; (80041cc <tracer_set_target+0x44>)
 80041a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041a4:	e9c1 2300 	strd	r2, r3, [r1]
    #if D_TRACER
    printf("target_ = %5.2f, target = %5.2f\r\n", target_, tracer_pid.target);
 80041a8:	4b08      	ldr	r3, [pc, #32]	; (80041cc <tracer_set_target+0x44>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	e9cd 2300 	strd	r2, r3, [sp]
 80041b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041b6:	4806      	ldr	r0, [pc, #24]	; (80041d0 <tracer_set_target+0x48>)
 80041b8:	f005 ff5e 	bl	800a078 <iprintf>
    #endif
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	0800e374 	.word	0x0800e374
 80041c8:	0800e3dc 	.word	0x0800e3dc
 80041cc:	20000830 	.word	0x20000830
 80041d0:	0800e3f4 	.word	0x0800e3f4

080041d4 <tracer_solve>:

double tracer_solve(int reference_)
{
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
    int error;
    double d_error;
    double result;

    error = reference_ - tracer_pid.target;
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7fc f9a1 	bl	8000524 <__aeabi_i2d>
 80041e2:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <tracer_solve+0x108>)
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f7fc f84e 	bl	8000288 <__aeabi_dsub>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	f7fc fcb0 	bl	8000b58 <__aeabi_d2iz>
 80041f8:	4603      	mov	r3, r0
 80041fa:	61fb      	str	r3, [r7, #28]

    d_error = error - before_error / samplingtime;
 80041fc:	69f8      	ldr	r0, [r7, #28]
 80041fe:	f7fc f991 	bl	8000524 <__aeabi_i2d>
 8004202:	4604      	mov	r4, r0
 8004204:	460d      	mov	r5, r1
 8004206:	4b36      	ldr	r3, [pc, #216]	; (80042e0 <tracer_solve+0x10c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc f98a 	bl	8000524 <__aeabi_i2d>
 8004210:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <tracer_solve+0x110>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f7fc fb19 	bl	800084c <__aeabi_ddiv>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4620      	mov	r0, r4
 8004220:	4629      	mov	r1, r5
 8004222:	f7fc f831 	bl	8000288 <__aeabi_dsub>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_error += error * samplingtime;
 800422e:	69f8      	ldr	r0, [r7, #28]
 8004230:	f7fc f978 	bl	8000524 <__aeabi_i2d>
 8004234:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <tracer_solve+0x110>)
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f7fc f9dd 	bl	80005f8 <__aeabi_dmul>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	4b28      	ldr	r3, [pc, #160]	; (80042e8 <tracer_solve+0x114>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f7fc f81e 	bl	800028c <__adddf3>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4924      	ldr	r1, [pc, #144]	; (80042e8 <tracer_solve+0x114>)
 8004256:	e9c1 2300 	strd	r2, r3, [r1]

    result = tracer_pid.kp * error + tracer_pid.ki * s_error + tracer_pid.kd * d_error;
 800425a:	4b20      	ldr	r3, [pc, #128]	; (80042dc <tracer_solve+0x108>)
 800425c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004260:	69f8      	ldr	r0, [r7, #28]
 8004262:	f7fc f95f 	bl	8000524 <__aeabi_i2d>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4620      	mov	r0, r4
 800426c:	4629      	mov	r1, r5
 800426e:	f7fc f9c3 	bl	80005f8 <__aeabi_dmul>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	4614      	mov	r4, r2
 8004278:	461d      	mov	r5, r3
 800427a:	4b18      	ldr	r3, [pc, #96]	; (80042dc <tracer_solve+0x108>)
 800427c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <tracer_solve+0x114>)
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f7fc f9b7 	bl	80005f8 <__aeabi_dmul>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4620      	mov	r0, r4
 8004290:	4629      	mov	r1, r5
 8004292:	f7fb fffb 	bl	800028c <__adddf3>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4614      	mov	r4, r2
 800429c:	461d      	mov	r5, r3
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <tracer_solve+0x108>)
 80042a0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80042a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042a8:	f7fc f9a6 	bl	80005f8 <__aeabi_dmul>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4620      	mov	r0, r4
 80042b2:	4629      	mov	r1, r5
 80042b4:	f7fb ffea 	bl	800028c <__adddf3>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	e9c7 2302 	strd	r2, r3, [r7, #8]

    before_error = error;
 80042c0:	4a07      	ldr	r2, [pc, #28]	; (80042e0 <tracer_solve+0x10c>)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	6013      	str	r3, [r2, #0]

    return result;
 80042c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ca:	ec43 2b17 	vmov	d7, r2, r3
}
 80042ce:	eeb0 0a47 	vmov.f32	s0, s14
 80042d2:	eef0 0a67 	vmov.f32	s1, s15
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bdb0      	pop	{r4, r5, r7, pc}
 80042dc:	20000830 	.word	0x20000830
 80042e0:	20000880 	.word	0x20000880
 80042e4:	20000858 	.word	0x20000858
 80042e8:	20000850 	.word	0x20000850

080042ec <tracer_print_values>:
    printf("tracer.c > tracer_d_print() > target = %5d, kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", 0, tracer_read_gain_kp(0), tracer_read_gain_ki(0), tracer_read_gain_kd(0));
    printf("tracer.c > tracer_d_print() > before_error = %5d, s_error = %7.2f\r\n", before_error, s_error);
}

void tracer_print_values()
{
 80042ec:	b5b0      	push	{r4, r5, r7, lr}
 80042ee:	ed2d 8b02 	vpush	{d8}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af04      	add	r7, sp, #16
	printf("Tracer\r\n");
 80042f6:	4819      	ldr	r0, [pc, #100]	; (800435c <tracer_print_values+0x70>)
 80042f8:	f005 ff44 	bl	800a184 <puts>
	printf("target = 0\r\n");
 80042fc:	4818      	ldr	r0, [pc, #96]	; (8004360 <tracer_print_values+0x74>)
 80042fe:	f005 ff41 	bl	800a184 <puts>
	printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", tracer_read_gain_kp(rotary_read_value()), tracer_read_gain_ki(rotary_read_value()), tracer_read_gain_kd(rotary_read_value()));
 8004302:	f7fd f811 	bl	8001328 <rotary_read_value>
 8004306:	4603      	mov	r3, r0
 8004308:	b29b      	uxth	r3, r3
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fe62 	bl	8003fd4 <tracer_read_gain_kp>
 8004310:	ec55 4b10 	vmov	r4, r5, d0
 8004314:	f7fd f808 	bl	8001328 <rotary_read_value>
 8004318:	4603      	mov	r3, r0
 800431a:	b29b      	uxth	r3, r3
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fe89 	bl	8004034 <tracer_read_gain_ki>
 8004322:	eeb0 8a40 	vmov.f32	s16, s0
 8004326:	eef0 8a60 	vmov.f32	s17, s1
 800432a:	f7fc fffd 	bl	8001328 <rotary_read_value>
 800432e:	4603      	mov	r3, r0
 8004330:	b29b      	uxth	r3, r3
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff feae 	bl	8004094 <tracer_read_gain_kd>
 8004338:	eeb0 7a40 	vmov.f32	s14, s0
 800433c:	eef0 7a60 	vmov.f32	s15, s1
 8004340:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004344:	ed8d 8b00 	vstr	d8, [sp]
 8004348:	4622      	mov	r2, r4
 800434a:	462b      	mov	r3, r5
 800434c:	4805      	ldr	r0, [pc, #20]	; (8004364 <tracer_print_values+0x78>)
 800434e:	f005 fe93 	bl	800a078 <iprintf>
}
 8004352:	bf00      	nop
 8004354:	46bd      	mov	sp, r7
 8004356:	ecbd 8b02 	vpop	{d8}
 800435a:	bdb0      	pop	{r4, r5, r7, pc}
 800435c:	0800e4b0 	.word	0x0800e4b0
 8004360:	0800e4b8 	.word	0x0800e4b8
 8004364:	0800e4c4 	.word	0x0800e4c4

08004368 <velotrace_start>:
double samplingtime;

PID pid;

void velotrace_start()
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
    velotrace_init(1);
 800436c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80043d8 <velotrace_start+0x70>
 8004370:	f000 f838 	bl	80043e4 <velotrace_init>
    switch(rotary_read_playmode())
 8004374:	f7fc ffc0 	bl	80012f8 <rotary_read_playmode>
 8004378:	4603      	mov	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d002      	beq.n	8004384 <velotrace_start+0x1c>
 800437e:	2b06      	cmp	r3, #6
 8004380:	d007      	beq.n	8004392 <velotrace_start+0x2a>
 8004382:	e015      	b.n	80043b0 <velotrace_start+0x48>
    {
        case search:
            velotrace_set_gain(0);
 8004384:	2000      	movs	r0, #0
 8004386:	f000 f911 	bl	80045ac <velotrace_set_gain>
            velotrace_set_target(0);
 800438a:	2000      	movs	r0, #0
 800438c:	f000 f93a 	bl	8004604 <velotrace_set_target>
            break;
 8004390:	e01d      	b.n	80043ce <velotrace_start+0x66>
        case velotrace_tuning:
            pid.target = 0;
 8004392:	4913      	ldr	r1, [pc, #76]	; (80043e0 <velotrace_start+0x78>)
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	e9c1 2300 	strd	r2, r3, [r1]
            velotrace_set_gain(rotary_read_value());
 80043a0:	f7fc ffc2 	bl	8001328 <rotary_read_value>
 80043a4:	4603      	mov	r3, r0
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f8ff 	bl	80045ac <velotrace_set_gain>
            break;
 80043ae:	e00e      	b.n	80043ce <velotrace_start+0x66>
        default:
            velotrace_set_gain(rotary_read_value());
 80043b0:	f7fc ffba 	bl	8001328 <rotary_read_value>
 80043b4:	4603      	mov	r3, r0
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f8f7 	bl	80045ac <velotrace_set_gain>
            velotrace_set_target(rotary_read_value());
 80043be:	f7fc ffb3 	bl	8001328 <rotary_read_value>
 80043c2:	4603      	mov	r3, r0
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 f91c 	bl	8004604 <velotrace_set_target>
            break;
 80043cc:	bf00      	nop
    }
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	f3af 8000 	nop.w
 80043d8:	00000000 	.word	0x00000000
 80043dc:	3ff00000 	.word	0x3ff00000
 80043e0:	20000860 	.word	0x20000860

080043e4 <velotrace_init>:

void velotrace_init(double samplingtime_)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	ed87 0b00 	vstr	d0, [r7]
    #if D_VELOTRACE
    printf("samplingtime = 1, s_error = 0, before_error = 0\r\n");
    #endif
    samplingtime = samplingtime_;
 80043ee:	490c      	ldr	r1, [pc, #48]	; (8004420 <velotrace_init+0x3c>)
 80043f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043f4:	e9c1 2300 	strd	r2, r3, [r1]
    s_error = 0;
 80043f8:	490a      	ldr	r1, [pc, #40]	; (8004424 <velotrace_init+0x40>)
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	e9c1 2300 	strd	r2, r3, [r1]
    before_error = 0;
 8004406:	4908      	ldr	r1, [pc, #32]	; (8004428 <velotrace_init+0x44>)
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	f04f 0300 	mov.w	r3, #0
 8004410:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	20000858 	.word	0x20000858
 8004424:	20000850 	.word	0x20000850
 8004428:	20000880 	.word	0x20000880

0800442c <velotrace_read_target>:

double velotrace_read_target(unsigned short int i)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	f1c3 030f 	rsb	r3, r3, #15
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc f871 	bl	8000524 <__aeabi_i2d>
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	f7fc f8d5 	bl	80005f8 <__aeabi_dmul>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <velotrace_read_target+0x58>)
 800445c:	f7fc f9f6 	bl	800084c <__aeabi_ddiv>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	f04f 0000 	mov.w	r0, #0
 8004468:	4907      	ldr	r1, [pc, #28]	; (8004488 <velotrace_read_target+0x5c>)
 800446a:	f7fb ff0d 	bl	8000288 <__aeabi_dsub>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	ec43 2b17 	vmov	d7, r2, r3
}
 8004476:	eeb0 0a47 	vmov.f32	s0, s14
 800447a:	eef0 0a67 	vmov.f32	s1, s15
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	402e0000 	.word	0x402e0000
 8004488:	408f4000 	.word	0x408f4000

0800448c <velotrace_read_gain_kp>:

double velotrace_read_gain_kp(unsigned short int i)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	f1c3 030f 	rsb	r3, r3, #15
 800449c:	4618      	mov	r0, r3
 800449e:	f7fc f841 	bl	8000524 <__aeabi_i2d>
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	f7fc f8a5 	bl	80005f8 <__aeabi_dmul>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <velotrace_read_gain_kp+0x58>)
 80044bc:	f7fc f9c6 	bl	800084c <__aeabi_ddiv>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	4907      	ldr	r1, [pc, #28]	; (80044e8 <velotrace_read_gain_kp+0x5c>)
 80044ca:	f7fb fedd 	bl	8000288 <__aeabi_dsub>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	ec43 2b17 	vmov	d7, r2, r3
}
 80044d6:	eeb0 0a47 	vmov.f32	s0, s14
 80044da:	eef0 0a67 	vmov.f32	s1, s15
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	402e0000 	.word	0x402e0000
 80044e8:	40590000 	.word	0x40590000

080044ec <velotrace_read_gain_ki>:

double velotrace_read_gain_ki(unsigned short int i)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	f1c3 030f 	rsb	r3, r3, #15
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fc f811 	bl	8000524 <__aeabi_i2d>
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	f7fc f875 	bl	80005f8 <__aeabi_dmul>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <velotrace_read_gain_ki+0x5c>)
 800451c:	f7fc f996 	bl	800084c <__aeabi_ddiv>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	f04f 0000 	mov.w	r0, #0
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	f7fb feac 	bl	8000288 <__aeabi_dsub>
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	ec43 2b17 	vmov	d7, r2, r3
}
 8004538:	eeb0 0a47 	vmov.f32	s0, s14
 800453c:	eef0 0a67 	vmov.f32	s1, s15
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	402e0000 	.word	0x402e0000

0800454c <velotrace_read_gain_kd>:

double velotrace_read_gain_kd(unsigned short int i)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	f1c3 030f 	rsb	r3, r3, #15
 800455c:	4618      	mov	r0, r3
 800455e:	f7fb ffe1 	bl	8000524 <__aeabi_i2d>
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	f7fc f845 	bl	80005f8 <__aeabi_dmul>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4610      	mov	r0, r2
 8004574:	4619      	mov	r1, r3
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <velotrace_read_gain_kd+0x5c>)
 800457c:	f7fc f966 	bl	800084c <__aeabi_ddiv>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	f04f 0000 	mov.w	r0, #0
 8004588:	f04f 0100 	mov.w	r1, #0
 800458c:	f7fb fe7c 	bl	8000288 <__aeabi_dsub>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	ec43 2b17 	vmov	d7, r2, r3
}
 8004598:	eeb0 0a47 	vmov.f32	s0, s14
 800459c:	eef0 0a67 	vmov.f32	s1, s15
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	402e0000 	.word	0x402e0000

080045ac <velotrace_set_gain>:

void velotrace_set_gain(unsigned short int i)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	4603      	mov	r3, r0
 80045b4:	80fb      	strh	r3, [r7, #6]
    #if D_VELOTRACE
    printf("pid = velotrace_read_gain\r\n");
    #endif
    pid.kp = velotrace_read_gain_kp(i);
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff67 	bl	800448c <velotrace_read_gain_kp>
 80045be:	eeb0 7a40 	vmov.f32	s14, s0
 80045c2:	eef0 7a60 	vmov.f32	s15, s1
 80045c6:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <velotrace_set_gain+0x54>)
 80045c8:	ed83 7b02 	vstr	d7, [r3, #8]
    pid.ki = velotrace_read_gain_ki(i);
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff8c 	bl	80044ec <velotrace_read_gain_ki>
 80045d4:	eeb0 7a40 	vmov.f32	s14, s0
 80045d8:	eef0 7a60 	vmov.f32	s15, s1
 80045dc:	4b08      	ldr	r3, [pc, #32]	; (8004600 <velotrace_set_gain+0x54>)
 80045de:	ed83 7b04 	vstr	d7, [r3, #16]
    pid.kd = velotrace_read_gain_kd(i);
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ffb1 	bl	800454c <velotrace_read_gain_kd>
 80045ea:	eeb0 7a40 	vmov.f32	s14, s0
 80045ee:	eef0 7a60 	vmov.f32	s15, s1
 80045f2:	4b03      	ldr	r3, [pc, #12]	; (8004600 <velotrace_set_gain+0x54>)
 80045f4:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000860 	.word	0x20000860

08004604 <velotrace_set_target>:

void velotrace_set_target(unsigned short int i)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	80fb      	strh	r3, [r7, #6]
    #if D_VELOTRACE
    printf("pid = velotrace_read_target\r\n");
    #endif
    pid.target = velotrace_read_target(i);
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ff0b 	bl	800442c <velotrace_read_target>
 8004616:	eeb0 7a40 	vmov.f32	s14, s0
 800461a:	eef0 7a60 	vmov.f32	s15, s1
 800461e:	4b03      	ldr	r3, [pc, #12]	; (800462c <velotrace_set_target+0x28>)
 8004620:	ed83 7b00 	vstr	d7, [r3]
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000860 	.word	0x20000860

08004630 <velotrace_solve>:

double velotrace_solve(double reference_)
{
 8004630:	b5b0      	push	{r4, r5, r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	ed87 0b00 	vstr	d0, [r7]
    double error;
    double d_error;
    double result;

    error = reference_ - pid.target;
 800463a:	4b38      	ldr	r3, [pc, #224]	; (800471c <velotrace_solve+0xec>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004644:	f7fb fe20 	bl	8000288 <__aeabi_dsub>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    d_error = error - before_error / samplingtime;
 8004650:	4b33      	ldr	r3, [pc, #204]	; (8004720 <velotrace_solve+0xf0>)
 8004652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004656:	4b33      	ldr	r3, [pc, #204]	; (8004724 <velotrace_solve+0xf4>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f7fc f8f6 	bl	800084c <__aeabi_ddiv>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004668:	f7fb fe0e 	bl	8000288 <__aeabi_dsub>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_error += error * samplingtime;
 8004674:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <velotrace_solve+0xf4>)
 8004676:	e9d3 0100 	ldrd	r0, r1, [r3]
 800467a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467e:	f7fb ffbb 	bl	80005f8 <__aeabi_dmul>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	4b27      	ldr	r3, [pc, #156]	; (8004728 <velotrace_solve+0xf8>)
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f7fb fdfc 	bl	800028c <__adddf3>
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4923      	ldr	r1, [pc, #140]	; (8004728 <velotrace_solve+0xf8>)
 800469a:	e9c1 2300 	strd	r2, r3, [r1]

    result = pid.kp * error + pid. ki * s_error + pid.kd * d_error;
 800469e:	4b1f      	ldr	r3, [pc, #124]	; (800471c <velotrace_solve+0xec>)
 80046a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80046a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a8:	f7fb ffa6 	bl	80005f8 <__aeabi_dmul>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4614      	mov	r4, r2
 80046b2:	461d      	mov	r5, r3
 80046b4:	4b19      	ldr	r3, [pc, #100]	; (800471c <velotrace_solve+0xec>)
 80046b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80046ba:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <velotrace_solve+0xf8>)
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	f7fb ff9a 	bl	80005f8 <__aeabi_dmul>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4620      	mov	r0, r4
 80046ca:	4629      	mov	r1, r5
 80046cc:	f7fb fdde 	bl	800028c <__adddf3>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4614      	mov	r4, r2
 80046d6:	461d      	mov	r5, r3
 80046d8:	4b10      	ldr	r3, [pc, #64]	; (800471c <velotrace_solve+0xec>)
 80046da:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80046de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046e2:	f7fb ff89 	bl	80005f8 <__aeabi_dmul>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4620      	mov	r0, r4
 80046ec:	4629      	mov	r1, r5
 80046ee:	f7fb fdcd 	bl	800028c <__adddf3>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    before_error = error;
 80046fa:	4909      	ldr	r1, [pc, #36]	; (8004720 <velotrace_solve+0xf0>)
 80046fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004700:	e9c1 2300 	strd	r2, r3, [r1]

    return result;
 8004704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004708:	ec43 2b17 	vmov	d7, r2, r3
}
 800470c:	eeb0 0a47 	vmov.f32	s0, s14
 8004710:	eef0 0a67 	vmov.f32	s1, s15
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bdb0      	pop	{r4, r5, r7, pc}
 800471a:	bf00      	nop
 800471c:	20000860 	.word	0x20000860
 8004720:	20000880 	.word	0x20000880
 8004724:	20000858 	.word	0x20000858
 8004728:	20000850 	.word	0x20000850

0800472c <velotrace_print_values>:

void velotrace_print_values()
{
 800472c:	b5b0      	push	{r4, r5, r7, lr}
 800472e:	ed2d 8b02 	vpush	{d8}
 8004732:	b084      	sub	sp, #16
 8004734:	af04      	add	r7, sp, #16
	printf("Velotrace\r\n");
 8004736:	481e      	ldr	r0, [pc, #120]	; (80047b0 <velotrace_print_values+0x84>)
 8004738:	f005 fd24 	bl	800a184 <puts>
	printf("target = %5.3f\r\n", velotrace_read_target(rotary_read_value()));
 800473c:	f7fc fdf4 	bl	8001328 <rotary_read_value>
 8004740:	4603      	mov	r3, r0
 8004742:	b29b      	uxth	r3, r3
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fe71 	bl	800442c <velotrace_read_target>
 800474a:	ec53 2b10 	vmov	r2, r3, d0
 800474e:	4819      	ldr	r0, [pc, #100]	; (80047b4 <velotrace_print_values+0x88>)
 8004750:	f005 fc92 	bl	800a078 <iprintf>
	printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_read_gain_kp(rotary_read_value()), velotrace_read_gain_ki(rotary_read_value()), velotrace_read_gain_kd(rotary_read_value()));
 8004754:	f7fc fde8 	bl	8001328 <rotary_read_value>
 8004758:	4603      	mov	r3, r0
 800475a:	b29b      	uxth	r3, r3
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fe95 	bl	800448c <velotrace_read_gain_kp>
 8004762:	ec55 4b10 	vmov	r4, r5, d0
 8004766:	f7fc fddf 	bl	8001328 <rotary_read_value>
 800476a:	4603      	mov	r3, r0
 800476c:	b29b      	uxth	r3, r3
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff febc 	bl	80044ec <velotrace_read_gain_ki>
 8004774:	eeb0 8a40 	vmov.f32	s16, s0
 8004778:	eef0 8a60 	vmov.f32	s17, s1
 800477c:	f7fc fdd4 	bl	8001328 <rotary_read_value>
 8004780:	4603      	mov	r3, r0
 8004782:	b29b      	uxth	r3, r3
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fee1 	bl	800454c <velotrace_read_gain_kd>
 800478a:	eeb0 7a40 	vmov.f32	s14, s0
 800478e:	eef0 7a60 	vmov.f32	s15, s1
 8004792:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004796:	ed8d 8b00 	vstr	d8, [sp]
 800479a:	4622      	mov	r2, r4
 800479c:	462b      	mov	r3, r5
 800479e:	4806      	ldr	r0, [pc, #24]	; (80047b8 <velotrace_print_values+0x8c>)
 80047a0:	f005 fc6a 	bl	800a078 <iprintf>
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	ecbd 8b02 	vpop	{d8}
 80047ac:	bdb0      	pop	{r4, r5, r7, pc}
 80047ae:	bf00      	nop
 80047b0:	0800e4ec 	.word	0x0800e4ec
 80047b4:	0800e4f8 	.word	0x0800e4f8
 80047b8:	0800e50c 	.word	0x0800e50c

080047bc <Reset_Handler>:
 80047bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047f4 <LoopFillZerobss+0x14>
 80047c0:	2100      	movs	r1, #0
 80047c2:	e003      	b.n	80047cc <LoopCopyDataInit>

080047c4 <CopyDataInit>:
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <LoopFillZerobss+0x18>)
 80047c6:	585b      	ldr	r3, [r3, r1]
 80047c8:	5043      	str	r3, [r0, r1]
 80047ca:	3104      	adds	r1, #4

080047cc <LoopCopyDataInit>:
 80047cc:	480b      	ldr	r0, [pc, #44]	; (80047fc <LoopFillZerobss+0x1c>)
 80047ce:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <LoopFillZerobss+0x20>)
 80047d0:	1842      	adds	r2, r0, r1
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3f6      	bcc.n	80047c4 <CopyDataInit>
 80047d6:	4a0b      	ldr	r2, [pc, #44]	; (8004804 <LoopFillZerobss+0x24>)
 80047d8:	e002      	b.n	80047e0 <LoopFillZerobss>

080047da <FillZerobss>:
 80047da:	2300      	movs	r3, #0
 80047dc:	f842 3b04 	str.w	r3, [r2], #4

080047e0 <LoopFillZerobss>:
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <LoopFillZerobss+0x28>)
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d3f9      	bcc.n	80047da <FillZerobss>
 80047e6:	f7ff f819 	bl	800381c <SystemInit>
 80047ea:	f004 fd91 	bl	8009310 <__libc_init_array>
 80047ee:	f7fd fb5f 	bl	8001eb0 <main>
 80047f2:	4770      	bx	lr
 80047f4:	20020000 	.word	0x20020000
 80047f8:	0800ea1c 	.word	0x0800ea1c
 80047fc:	20000000 	.word	0x20000000
 8004800:	200001e0 	.word	0x200001e0
 8004804:	200001e0 	.word	0x200001e0
 8004808:	200008bc 	.word	0x200008bc

0800480c <ADC_IRQHandler>:
 800480c:	e7fe      	b.n	800480c <ADC_IRQHandler>
	...

08004810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004814:	4b0e      	ldr	r3, [pc, #56]	; (8004850 <HAL_Init+0x40>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0d      	ldr	r2, [pc, #52]	; (8004850 <HAL_Init+0x40>)
 800481a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800481e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_Init+0x40>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a0a      	ldr	r2, [pc, #40]	; (8004850 <HAL_Init+0x40>)
 8004826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800482a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <HAL_Init+0x40>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a07      	ldr	r2, [pc, #28]	; (8004850 <HAL_Init+0x40>)
 8004832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004838:	2003      	movs	r0, #3
 800483a:	f000 fd83 	bl	8005344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800483e:	2000      	movs	r0, #0
 8004840:	f000 f808 	bl	8004854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004844:	f7fe fbb2 	bl	8002fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023c00 	.word	0x40023c00

08004854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_InitTick+0x54>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b12      	ldr	r3, [pc, #72]	; (80048ac <HAL_InitTick+0x58>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800486a:	fbb3 f3f1 	udiv	r3, r3, r1
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fd9b 	bl	80053ae <HAL_SYSTICK_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e00e      	b.n	80048a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b0f      	cmp	r3, #15
 8004886:	d80a      	bhi.n	800489e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004888:	2200      	movs	r2, #0
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	f04f 30ff 	mov.w	r0, #4294967295
 8004890:	f000 fd63 	bl	800535a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004894:	4a06      	ldr	r2, [pc, #24]	; (80048b0 <HAL_InitTick+0x5c>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20000000 	.word	0x20000000
 80048ac:	20000008 	.word	0x20000008
 80048b0:	20000004 	.word	0x20000004

080048b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_IncTick+0x20>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_IncTick+0x24>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4413      	add	r3, r2
 80048c4:	4a04      	ldr	r2, [pc, #16]	; (80048d8 <HAL_IncTick+0x24>)
 80048c6:	6013      	str	r3, [r2, #0]
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000008 	.word	0x20000008
 80048d8:	20000888 	.word	0x20000888

080048dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return uwTick;
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <HAL_GetTick+0x14>)
 80048e2:	681b      	ldr	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000888 	.word	0x20000888

080048f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048fc:	f7ff ffee 	bl	80048dc <HAL_GetTick>
 8004900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d005      	beq.n	800491a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_Delay+0x44>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800491a:	bf00      	nop
 800491c:	f7ff ffde 	bl	80048dc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	429a      	cmp	r2, r3
 800492a:	d8f7      	bhi.n	800491c <HAL_Delay+0x28>
  {
  }
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000008 	.word	0x20000008

0800493c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e033      	b.n	80049ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fe fb52 	bl	8003004 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b00      	cmp	r3, #0
 8004978:	d118      	bne.n	80049ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004982:	f023 0302 	bic.w	r3, r3, #2
 8004986:	f043 0202 	orr.w	r2, r3, #2
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa8a 	bl	8004ea8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	f043 0201 	orr.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	641a      	str	r2, [r3, #64]	; 0x40
 80049aa:	e001      	b.n	80049b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_ADC_Start_DMA+0x1e>
 80049de:	2302      	movs	r3, #2
 80049e0:	e0cc      	b.n	8004b7c <HAL_ADC_Start_DMA+0x1b8>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d018      	beq.n	8004a2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a08:	4b5e      	ldr	r3, [pc, #376]	; (8004b84 <HAL_ADC_Start_DMA+0x1c0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a5e      	ldr	r2, [pc, #376]	; (8004b88 <HAL_ADC_Start_DMA+0x1c4>)
 8004a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a12:	0c9a      	lsrs	r2, r3, #18
 8004a14:	4613      	mov	r3, r2
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	4413      	add	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004a1c:	e002      	b.n	8004a24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f9      	bne.n	8004a1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	f040 80a0 	bne.w	8004b7a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a42:	f023 0301 	bic.w	r3, r3, #1
 8004a46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d007      	beq.n	8004a6c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a78:	d106      	bne.n	8004a88 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	f023 0206 	bic.w	r2, r3, #6
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	645a      	str	r2, [r3, #68]	; 0x44
 8004a86:	e002      	b.n	8004a8e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a96:	4b3d      	ldr	r3, [pc, #244]	; (8004b8c <HAL_ADC_Start_DMA+0x1c8>)
 8004a98:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	4a3c      	ldr	r2, [pc, #240]	; (8004b90 <HAL_ADC_Start_DMA+0x1cc>)
 8004aa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	4a3b      	ldr	r2, [pc, #236]	; (8004b94 <HAL_ADC_Start_DMA+0x1d0>)
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aae:	4a3a      	ldr	r2, [pc, #232]	; (8004b98 <HAL_ADC_Start_DMA+0x1d4>)
 8004ab0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004aba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004aca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ada:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	334c      	adds	r3, #76	; 0x4c
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f000 fd1a 	bl	8005524 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d12a      	bne.n	8004b52 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a26      	ldr	r2, [pc, #152]	; (8004b9c <HAL_ADC_Start_DMA+0x1d8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d015      	beq.n	8004b32 <HAL_ADC_Start_DMA+0x16e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a25      	ldr	r2, [pc, #148]	; (8004ba0 <HAL_ADC_Start_DMA+0x1dc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d105      	bne.n	8004b1c <HAL_ADC_Start_DMA+0x158>
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <HAL_ADC_Start_DMA+0x1c8>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a20      	ldr	r2, [pc, #128]	; (8004ba4 <HAL_ADC_Start_DMA+0x1e0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d129      	bne.n	8004b7a <HAL_ADC_Start_DMA+0x1b6>
 8004b26:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_ADC_Start_DMA+0x1c8>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d123      	bne.n	8004b7a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d11c      	bne.n	8004b7a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	e013      	b.n	8004b7a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <HAL_ADC_Start_DMA+0x1d8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d10e      	bne.n	8004b7a <HAL_ADC_Start_DMA+0x1b6>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d107      	bne.n	8004b7a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b78:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000000 	.word	0x20000000
 8004b88:	431bde83 	.word	0x431bde83
 8004b8c:	40012300 	.word	0x40012300
 8004b90:	080050a1 	.word	0x080050a1
 8004b94:	0800515b 	.word	0x0800515b
 8004b98:	08005177 	.word	0x08005177
 8004b9c:	40012000 	.word	0x40012000
 8004ba0:	40012100 	.word	0x40012100
 8004ba4:	40012200 	.word	0x40012200

08004ba8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_ADC_Stop_DMA+0x1a>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e038      	b.n	8004c34 <HAL_ADC_Stop_DMA+0x8c>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d120      	bne.n	8004c2a <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fce9 	bl	80055d4 <HAL_DMA_Abort>
 8004c02:	4603      	mov	r3, r0
 8004c04:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004c14:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x1c>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e105      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x228>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b09      	cmp	r3, #9
 8004c8e:	d925      	bls.n	8004cdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68d9      	ldr	r1, [r3, #12]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3b1e      	subs	r3, #30
 8004ca6:	2207      	movs	r2, #7
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	43da      	mvns	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68d9      	ldr	r1, [r3, #12]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	4603      	mov	r3, r0
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	4403      	add	r3, r0
 8004cce:	3b1e      	subs	r3, #30
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	60da      	str	r2, [r3, #12]
 8004cda:	e022      	b.n	8004d22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6919      	ldr	r1, [r3, #16]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4613      	mov	r3, r2
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	4413      	add	r3, r2
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43da      	mvns	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	400a      	ands	r2, r1
 8004cfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6919      	ldr	r1, [r3, #16]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4618      	mov	r0, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	4403      	add	r3, r0
 8004d18:	409a      	lsls	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d824      	bhi.n	8004d74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	3b05      	subs	r3, #5
 8004d3c:	221f      	movs	r2, #31
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	43da      	mvns	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	400a      	ands	r2, r1
 8004d4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	4618      	mov	r0, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	3b05      	subs	r3, #5
 8004d66:	fa00 f203 	lsl.w	r2, r0, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	635a      	str	r2, [r3, #52]	; 0x34
 8004d72:	e04c      	b.n	8004e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b0c      	cmp	r3, #12
 8004d7a:	d824      	bhi.n	8004dc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3b23      	subs	r3, #35	; 0x23
 8004d8e:	221f      	movs	r2, #31
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43da      	mvns	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	4618      	mov	r0, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	3b23      	subs	r3, #35	; 0x23
 8004db8:	fa00 f203 	lsl.w	r2, r0, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8004dc4:	e023      	b.n	8004e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3b41      	subs	r3, #65	; 0x41
 8004dd8:	221f      	movs	r2, #31
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43da      	mvns	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	400a      	ands	r2, r1
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4618      	mov	r0, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	3b41      	subs	r3, #65	; 0x41
 8004e02:	fa00 f203 	lsl.w	r2, r0, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e0e:	4b22      	ldr	r3, [pc, #136]	; (8004e98 <HAL_ADC_ConfigChannel+0x234>)
 8004e10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a21      	ldr	r2, [pc, #132]	; (8004e9c <HAL_ADC_ConfigChannel+0x238>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d109      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x1cc>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b12      	cmp	r3, #18
 8004e22:	d105      	bne.n	8004e30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a19      	ldr	r2, [pc, #100]	; (8004e9c <HAL_ADC_ConfigChannel+0x238>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d123      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x21e>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d003      	beq.n	8004e4a <HAL_ADC_ConfigChannel+0x1e6>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b11      	cmp	r3, #17
 8004e48:	d11b      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d111      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e5e:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <HAL_ADC_ConfigChannel+0x23c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a10      	ldr	r2, [pc, #64]	; (8004ea4 <HAL_ADC_ConfigChannel+0x240>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	0c9a      	lsrs	r2, r3, #18
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e74:	e002      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f9      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	40012300 	.word	0x40012300
 8004e9c:	40012000 	.word	0x40012000
 8004ea0:	20000000 	.word	0x20000000
 8004ea4:	431bde83 	.word	0x431bde83

08004ea8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004eb0:	4b79      	ldr	r3, [pc, #484]	; (8005098 <ADC_Init+0x1f0>)
 8004eb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6859      	ldr	r1, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	021a      	lsls	r2, r3, #8
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	4a58      	ldr	r2, [pc, #352]	; (800509c <ADC_Init+0x1f4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d022      	beq.n	8004f86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6899      	ldr	r1, [r3, #8]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]
 8004f84:	e00f      	b.n	8004fa6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f022 0202 	bic.w	r2, r2, #2
 8004fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6899      	ldr	r1, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	7e1b      	ldrb	r3, [r3, #24]
 8004fc0:	005a      	lsls	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01b      	beq.n	800500c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ff2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	3b01      	subs	r3, #1
 8005000:	035a      	lsls	r2, r3, #13
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	e007      	b.n	800501c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800502a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	3b01      	subs	r3, #1
 8005038:	051a      	lsls	r2, r3, #20
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6899      	ldr	r1, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800505e:	025a      	lsls	r2, r3, #9
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6899      	ldr	r1, [r3, #8]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	029a      	lsls	r2, r3, #10
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
}
 800508c:	bf00      	nop
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40012300 	.word	0x40012300
 800509c:	0f000001 	.word	0x0f000001

080050a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d13c      	bne.n	8005134 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d12b      	bne.n	800512c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d127      	bne.n	800512c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d119      	bne.n	800512c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0220 	bic.w	r2, r2, #32
 8005106:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d105      	bne.n	800512c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	f043 0201 	orr.w	r2, r3, #1
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f7fc fc99 	bl	8001a64 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005132:	e00e      	b.n	8005152 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff fd85 	bl	8004c50 <HAL_ADC_ErrorCallback>
}
 8005146:	e004      	b.n	8005152 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	4798      	blx	r3
}
 8005152:	bf00      	nop
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f7ff fd67 	bl	8004c3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2240      	movs	r2, #64	; 0x40
 8005188:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518e:	f043 0204 	orr.w	r2, r3, #4
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7ff fd5a 	bl	8004c50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051b4:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <__NVIC_SetPriorityGrouping+0x44>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051c0:	4013      	ands	r3, r2
 80051c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051d6:	4a04      	ldr	r2, [pc, #16]	; (80051e8 <__NVIC_SetPriorityGrouping+0x44>)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	60d3      	str	r3, [r2, #12]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	e000ed00 	.word	0xe000ed00

080051ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <__NVIC_GetPriorityGrouping+0x18>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	f003 0307 	and.w	r3, r3, #7
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	e000ed00 	.word	0xe000ed00

08005208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005216:	2b00      	cmp	r3, #0
 8005218:	db0b      	blt.n	8005232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	f003 021f 	and.w	r2, r3, #31
 8005220:	4907      	ldr	r1, [pc, #28]	; (8005240 <__NVIC_EnableIRQ+0x38>)
 8005222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	2001      	movs	r0, #1
 800522a:	fa00 f202 	lsl.w	r2, r0, r2
 800522e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	e000e100 	.word	0xe000e100

08005244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	6039      	str	r1, [r7, #0]
 800524e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005254:	2b00      	cmp	r3, #0
 8005256:	db0a      	blt.n	800526e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	490c      	ldr	r1, [pc, #48]	; (8005290 <__NVIC_SetPriority+0x4c>)
 800525e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005262:	0112      	lsls	r2, r2, #4
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	440b      	add	r3, r1
 8005268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800526c:	e00a      	b.n	8005284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	b2da      	uxtb	r2, r3
 8005272:	4908      	ldr	r1, [pc, #32]	; (8005294 <__NVIC_SetPriority+0x50>)
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	3b04      	subs	r3, #4
 800527c:	0112      	lsls	r2, r2, #4
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	440b      	add	r3, r1
 8005282:	761a      	strb	r2, [r3, #24]
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	e000e100 	.word	0xe000e100
 8005294:	e000ed00 	.word	0xe000ed00

08005298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005298:	b480      	push	{r7}
 800529a:	b089      	sub	sp, #36	; 0x24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f1c3 0307 	rsb	r3, r3, #7
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	bf28      	it	cs
 80052b6:	2304      	movcs	r3, #4
 80052b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	3304      	adds	r3, #4
 80052be:	2b06      	cmp	r3, #6
 80052c0:	d902      	bls.n	80052c8 <NVIC_EncodePriority+0x30>
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3b03      	subs	r3, #3
 80052c6:	e000      	b.n	80052ca <NVIC_EncodePriority+0x32>
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052cc:	f04f 32ff 	mov.w	r2, #4294967295
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	43da      	mvns	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	401a      	ands	r2, r3
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052e0:	f04f 31ff 	mov.w	r1, #4294967295
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ea:	43d9      	mvns	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f0:	4313      	orrs	r3, r2
         );
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3724      	adds	r7, #36	; 0x24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3b01      	subs	r3, #1
 800530c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005310:	d301      	bcc.n	8005316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005312:	2301      	movs	r3, #1
 8005314:	e00f      	b.n	8005336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005316:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <SysTick_Config+0x40>)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3b01      	subs	r3, #1
 800531c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800531e:	210f      	movs	r1, #15
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	f7ff ff8e 	bl	8005244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005328:	4b05      	ldr	r3, [pc, #20]	; (8005340 <SysTick_Config+0x40>)
 800532a:	2200      	movs	r2, #0
 800532c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800532e:	4b04      	ldr	r3, [pc, #16]	; (8005340 <SysTick_Config+0x40>)
 8005330:	2207      	movs	r2, #7
 8005332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	e000e010 	.word	0xe000e010

08005344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ff29 	bl	80051a4 <__NVIC_SetPriorityGrouping>
}
 8005352:	bf00      	nop
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	4603      	mov	r3, r0
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
 8005366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005368:	2300      	movs	r3, #0
 800536a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800536c:	f7ff ff3e 	bl	80051ec <__NVIC_GetPriorityGrouping>
 8005370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	6978      	ldr	r0, [r7, #20]
 8005378:	f7ff ff8e 	bl	8005298 <NVIC_EncodePriority>
 800537c:	4602      	mov	r2, r0
 800537e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005382:	4611      	mov	r1, r2
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff ff5d 	bl	8005244 <__NVIC_SetPriority>
}
 800538a:	bf00      	nop
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	4603      	mov	r3, r0
 800539a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800539c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff ff31 	bl	8005208 <__NVIC_EnableIRQ>
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7ff ffa2 	bl	8005300 <SysTick_Config>
 80053bc:	4603      	mov	r3, r0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80053d4:	f7ff fa82 	bl	80048dc <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e099      	b.n	8005518 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0201 	bic.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005404:	e00f      	b.n	8005426 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005406:	f7ff fa69 	bl	80048dc <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b05      	cmp	r3, #5
 8005412:	d908      	bls.n	8005426 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2203      	movs	r2, #3
 800541e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e078      	b.n	8005518 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e8      	bne.n	8005406 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4b38      	ldr	r3, [pc, #224]	; (8005520 <HAL_DMA_Init+0x158>)
 8005440:	4013      	ands	r3, r2
 8005442:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005452:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800545e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800546a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	2b04      	cmp	r3, #4
 800547e:	d107      	bne.n	8005490 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	4313      	orrs	r3, r2
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f023 0307 	bic.w	r3, r3, #7
 80054a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d117      	bne.n	80054ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00e      	beq.n	80054ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fadf 	bl	8005a90 <DMA_CheckFifoParam>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2240      	movs	r2, #64	; 0x40
 80054dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80054e6:	2301      	movs	r3, #1
 80054e8:	e016      	b.n	8005518 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa96 	bl	8005a24 <DMA_CalcBaseAndBitshift>
 80054f8:	4603      	mov	r3, r0
 80054fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	223f      	movs	r2, #63	; 0x3f
 8005502:	409a      	lsls	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	f010803f 	.word	0xf010803f

08005524 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_DMA_Start_IT+0x26>
 8005546:	2302      	movs	r3, #2
 8005548:	e040      	b.n	80055cc <HAL_DMA_Start_IT+0xa8>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b01      	cmp	r3, #1
 800555c:	d12f      	bne.n	80055be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	68b9      	ldr	r1, [r7, #8]
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fa28 	bl	80059c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557c:	223f      	movs	r2, #63	; 0x3f
 800557e:	409a      	lsls	r2, r3
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0216 	orr.w	r2, r2, #22
 8005592:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d007      	beq.n	80055ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0208 	orr.w	r2, r2, #8
 80055aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0201 	orr.w	r2, r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	e005      	b.n	80055ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
 80055c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055e2:	f7ff f97b 	bl	80048dc <HAL_GetTick>
 80055e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d008      	beq.n	8005606 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2280      	movs	r2, #128	; 0x80
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e052      	b.n	80056ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0216 	bic.w	r2, r2, #22
 8005614:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005624:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <HAL_DMA_Abort+0x62>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0208 	bic.w	r2, r2, #8
 8005644:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0201 	bic.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005656:	e013      	b.n	8005680 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005658:	f7ff f940 	bl	80048dc <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b05      	cmp	r3, #5
 8005664:	d90c      	bls.n	8005680 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2203      	movs	r2, #3
 8005678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e015      	b.n	80056ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e4      	bne.n	8005658 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005692:	223f      	movs	r2, #63	; 0x3f
 8005694:	409a      	lsls	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056c0:	4b92      	ldr	r3, [pc, #584]	; (800590c <HAL_DMA_IRQHandler+0x258>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a92      	ldr	r2, [pc, #584]	; (8005910 <HAL_DMA_IRQHandler+0x25c>)
 80056c6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ca:	0a9b      	lsrs	r3, r3, #10
 80056cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056de:	2208      	movs	r2, #8
 80056e0:	409a      	lsls	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01a      	beq.n	8005720 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d013      	beq.n	8005720 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0204 	bic.w	r2, r2, #4
 8005706:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570c:	2208      	movs	r2, #8
 800570e:	409a      	lsls	r2, r3
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	f043 0201 	orr.w	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005724:	2201      	movs	r2, #1
 8005726:	409a      	lsls	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d012      	beq.n	8005756 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005742:	2201      	movs	r2, #1
 8005744:	409a      	lsls	r2, r3
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	f043 0202 	orr.w	r2, r3, #2
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575a:	2204      	movs	r2, #4
 800575c:	409a      	lsls	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4013      	ands	r3, r2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d012      	beq.n	800578c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005778:	2204      	movs	r2, #4
 800577a:	409a      	lsls	r2, r3
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005784:	f043 0204 	orr.w	r2, r3, #4
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005790:	2210      	movs	r2, #16
 8005792:	409a      	lsls	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d043      	beq.n	8005824 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0308 	and.w	r3, r3, #8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d03c      	beq.n	8005824 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ae:	2210      	movs	r2, #16
 80057b0:	409a      	lsls	r2, r3
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d018      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d108      	bne.n	80057e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d024      	beq.n	8005824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	4798      	blx	r3
 80057e2:	e01f      	b.n	8005824 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01b      	beq.n	8005824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
 80057f4:	e016      	b.n	8005824 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d107      	bne.n	8005814 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0208 	bic.w	r2, r2, #8
 8005812:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005828:	2220      	movs	r2, #32
 800582a:	409a      	lsls	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4013      	ands	r3, r2
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 808e 	beq.w	8005952 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8086 	beq.w	8005952 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584a:	2220      	movs	r2, #32
 800584c:	409a      	lsls	r2, r3
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b05      	cmp	r3, #5
 800585c:	d136      	bne.n	80058cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0216 	bic.w	r2, r2, #22
 800586c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695a      	ldr	r2, [r3, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800587c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <HAL_DMA_IRQHandler+0x1da>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588a:	2b00      	cmp	r3, #0
 800588c:	d007      	beq.n	800589e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0208 	bic.w	r2, r2, #8
 800589c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a2:	223f      	movs	r2, #63	; 0x3f
 80058a4:	409a      	lsls	r2, r3
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d07d      	beq.n	80059be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
        }
        return;
 80058ca:	e078      	b.n	80059be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01c      	beq.n	8005914 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d108      	bne.n	80058fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d030      	beq.n	8005952 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4798      	blx	r3
 80058f8:	e02b      	b.n	8005952 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d027      	beq.n	8005952 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
 800590a:	e022      	b.n	8005952 <HAL_DMA_IRQHandler+0x29e>
 800590c:	20000000 	.word	0x20000000
 8005910:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10f      	bne.n	8005942 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0210 	bic.w	r2, r2, #16
 8005930:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	2b00      	cmp	r3, #0
 8005958:	d032      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d022      	beq.n	80059ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2205      	movs	r2, #5
 800596a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	3301      	adds	r3, #1
 8005982:	60bb      	str	r3, [r7, #8]
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	429a      	cmp	r2, r3
 8005988:	d307      	bcc.n	800599a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f2      	bne.n	800597e <HAL_DMA_IRQHandler+0x2ca>
 8005998:	e000      	b.n	800599c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800599a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	4798      	blx	r3
 80059bc:	e000      	b.n	80059c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80059be:	bf00      	nop
    }
  }
}
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop

080059c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d108      	bne.n	8005a08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a06:	e007      	b.n	8005a18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	60da      	str	r2, [r3, #12]
}
 8005a18:	bf00      	nop
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	3b10      	subs	r3, #16
 8005a34:	4a14      	ldr	r2, [pc, #80]	; (8005a88 <DMA_CalcBaseAndBitshift+0x64>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	091b      	lsrs	r3, r3, #4
 8005a3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a3e:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <DMA_CalcBaseAndBitshift+0x68>)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	461a      	mov	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d909      	bls.n	8005a66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a5a:	f023 0303 	bic.w	r3, r3, #3
 8005a5e:	1d1a      	adds	r2, r3, #4
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	659a      	str	r2, [r3, #88]	; 0x58
 8005a64:	e007      	b.n	8005a76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	aaaaaaab 	.word	0xaaaaaaab
 8005a8c:	0800e54c 	.word	0x0800e54c

08005a90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d11f      	bne.n	8005aea <DMA_CheckFifoParam+0x5a>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d856      	bhi.n	8005b5e <DMA_CheckFifoParam+0xce>
 8005ab0:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <DMA_CheckFifoParam+0x28>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005ac9 	.word	0x08005ac9
 8005abc:	08005adb 	.word	0x08005adb
 8005ac0:	08005ac9 	.word	0x08005ac9
 8005ac4:	08005b5f 	.word	0x08005b5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d046      	beq.n	8005b62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad8:	e043      	b.n	8005b62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ae2:	d140      	bne.n	8005b66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ae8:	e03d      	b.n	8005b66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af2:	d121      	bne.n	8005b38 <DMA_CheckFifoParam+0xa8>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d837      	bhi.n	8005b6a <DMA_CheckFifoParam+0xda>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <DMA_CheckFifoParam+0x70>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b11 	.word	0x08005b11
 8005b04:	08005b17 	.word	0x08005b17
 8005b08:	08005b11 	.word	0x08005b11
 8005b0c:	08005b29 	.word	0x08005b29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	73fb      	strb	r3, [r7, #15]
      break;
 8005b14:	e030      	b.n	8005b78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d025      	beq.n	8005b6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b26:	e022      	b.n	8005b6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b30:	d11f      	bne.n	8005b72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b36:	e01c      	b.n	8005b72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d903      	bls.n	8005b46 <DMA_CheckFifoParam+0xb6>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d003      	beq.n	8005b4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b44:	e018      	b.n	8005b78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4a:	e015      	b.n	8005b78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00e      	beq.n	8005b76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5c:	e00b      	b.n	8005b76 <DMA_CheckFifoParam+0xe6>
      break;
 8005b5e:	bf00      	nop
 8005b60:	e00a      	b.n	8005b78 <DMA_CheckFifoParam+0xe8>
      break;
 8005b62:	bf00      	nop
 8005b64:	e008      	b.n	8005b78 <DMA_CheckFifoParam+0xe8>
      break;
 8005b66:	bf00      	nop
 8005b68:	e006      	b.n	8005b78 <DMA_CheckFifoParam+0xe8>
      break;
 8005b6a:	bf00      	nop
 8005b6c:	e004      	b.n	8005b78 <DMA_CheckFifoParam+0xe8>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e002      	b.n	8005b78 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <DMA_CheckFifoParam+0xe8>
      break;
 8005b76:	bf00      	nop
    }
  } 
  
  return status; 
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop

08005b88 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b9a:	4b23      	ldr	r3, [pc, #140]	; (8005c28 <HAL_FLASH_Program+0xa0>)
 8005b9c:	7e1b      	ldrb	r3, [r3, #24]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_FLASH_Program+0x1e>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e03b      	b.n	8005c1e <HAL_FLASH_Program+0x96>
 8005ba6:	4b20      	ldr	r3, [pc, #128]	; (8005c28 <HAL_FLASH_Program+0xa0>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005bb0:	f000 f870 	bl	8005c94 <FLASH_WaitForLastOperation>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d12b      	bne.n	8005c16 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005bc4:	783b      	ldrb	r3, [r7, #0]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	68b8      	ldr	r0, [r7, #8]
 8005bca:	f000 f91b 	bl	8005e04 <FLASH_Program_Byte>
 8005bce:	e016      	b.n	8005bfe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d105      	bne.n	8005be2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005bd6:	883b      	ldrh	r3, [r7, #0]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	68b8      	ldr	r0, [r7, #8]
 8005bdc:	f000 f8ee 	bl	8005dbc <FLASH_Program_HalfWord>
 8005be0:	e00d      	b.n	8005bfe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d105      	bne.n	8005bf4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	4619      	mov	r1, r3
 8005bec:	68b8      	ldr	r0, [r7, #8]
 8005bee:	f000 f8c3 	bl	8005d78 <FLASH_Program_Word>
 8005bf2:	e004      	b.n	8005bfe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bf8:	68b8      	ldr	r0, [r7, #8]
 8005bfa:	f000 f88b 	bl	8005d14 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bfe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005c02:	f000 f847 	bl	8005c94 <FLASH_WaitForLastOperation>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005c0a:	4b08      	ldr	r3, [pc, #32]	; (8005c2c <HAL_FLASH_Program+0xa4>)
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	4a07      	ldr	r2, [pc, #28]	; (8005c2c <HAL_FLASH_Program+0xa4>)
 8005c10:	f023 0301 	bic.w	r3, r3, #1
 8005c14:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c16:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <HAL_FLASH_Program+0xa0>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	2000088c 	.word	0x2000088c
 8005c2c:	40023c00 	.word	0x40023c00

08005c30 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <HAL_FLASH_Unlock+0x38>)
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da0b      	bge.n	8005c5a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c42:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <HAL_FLASH_Unlock+0x38>)
 8005c44:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <HAL_FLASH_Unlock+0x3c>)
 8005c46:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <HAL_FLASH_Unlock+0x38>)
 8005c4a:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <HAL_FLASH_Unlock+0x40>)
 8005c4c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c4e:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <HAL_FLASH_Unlock+0x38>)
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	da01      	bge.n	8005c5a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	40023c00 	.word	0x40023c00
 8005c6c:	45670123 	.word	0x45670123
 8005c70:	cdef89ab 	.word	0xcdef89ab

08005c74 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <HAL_FLASH_Lock+0x1c>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <HAL_FLASH_Lock+0x1c>)
 8005c7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40023c00 	.word	0x40023c00

08005c94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ca0:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <FLASH_WaitForLastOperation+0x78>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005ca6:	f7fe fe19 	bl	80048dc <HAL_GetTick>
 8005caa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005cac:	e010      	b.n	8005cd0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d00c      	beq.n	8005cd0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <FLASH_WaitForLastOperation+0x38>
 8005cbc:	f7fe fe0e 	bl	80048dc <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d201      	bcs.n	8005cd0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e019      	b.n	8005d04 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005cd0:	4b0f      	ldr	r3, [pc, #60]	; (8005d10 <FLASH_WaitForLastOperation+0x7c>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1e8      	bne.n	8005cae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <FLASH_WaitForLastOperation+0x7c>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ce8:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <FLASH_WaitForLastOperation+0x7c>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <FLASH_WaitForLastOperation+0x7c>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005cfa:	f000 f8a5 	bl	8005e48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
  
}  
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	2000088c 	.word	0x2000088c
 8005d10:	40023c00 	.word	0x40023c00

08005d14 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d20:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <FLASH_Program_DoubleWord+0x60>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <FLASH_Program_DoubleWord+0x60>)
 8005d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005d2c:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <FLASH_Program_DoubleWord+0x60>)
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <FLASH_Program_DoubleWord+0x60>)
 8005d32:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005d36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d38:	4b0e      	ldr	r3, [pc, #56]	; (8005d74 <FLASH_Program_DoubleWord+0x60>)
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	4a0d      	ldr	r2, [pc, #52]	; (8005d74 <FLASH_Program_DoubleWord+0x60>)
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005d4a:	f3bf 8f6f 	isb	sy
}
 8005d4e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005d50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	000a      	movs	r2, r1
 8005d5e:	2300      	movs	r3, #0
 8005d60:	68f9      	ldr	r1, [r7, #12]
 8005d62:	3104      	adds	r1, #4
 8005d64:	4613      	mov	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	40023c00 	.word	0x40023c00

08005d78 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005d82:	4b0d      	ldr	r3, [pc, #52]	; (8005db8 <FLASH_Program_Word+0x40>)
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <FLASH_Program_Word+0x40>)
 8005d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	; (8005db8 <FLASH_Program_Word+0x40>)
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	4a09      	ldr	r2, [pc, #36]	; (8005db8 <FLASH_Program_Word+0x40>)
 8005d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d9a:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <FLASH_Program_Word+0x40>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	4a06      	ldr	r2, [pc, #24]	; (8005db8 <FLASH_Program_Word+0x40>)
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	601a      	str	r2, [r3, #0]
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40023c00 	.word	0x40023c00

08005dbc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005dc8:	4b0d      	ldr	r3, [pc, #52]	; (8005e00 <FLASH_Program_HalfWord+0x44>)
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	4a0c      	ldr	r2, [pc, #48]	; (8005e00 <FLASH_Program_HalfWord+0x44>)
 8005dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <FLASH_Program_HalfWord+0x44>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	4a09      	ldr	r2, [pc, #36]	; (8005e00 <FLASH_Program_HalfWord+0x44>)
 8005dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <FLASH_Program_HalfWord+0x44>)
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	4a06      	ldr	r2, [pc, #24]	; (8005e00 <FLASH_Program_HalfWord+0x44>)
 8005de6:	f043 0301 	orr.w	r3, r3, #1
 8005dea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	887a      	ldrh	r2, [r7, #2]
 8005df0:	801a      	strh	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40023c00 	.word	0x40023c00

08005e04 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <FLASH_Program_Byte+0x40>)
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	4a0b      	ldr	r2, [pc, #44]	; (8005e44 <FLASH_Program_Byte+0x40>)
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <FLASH_Program_Byte+0x40>)
 8005e1e:	4a09      	ldr	r2, [pc, #36]	; (8005e44 <FLASH_Program_Byte+0x40>)
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e24:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <FLASH_Program_Byte+0x40>)
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	4a06      	ldr	r2, [pc, #24]	; (8005e44 <FLASH_Program_Byte+0x40>)
 8005e2a:	f043 0301 	orr.w	r3, r3, #1
 8005e2e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	78fa      	ldrb	r2, [r7, #3]
 8005e34:	701a      	strb	r2, [r3, #0]
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40023c00 	.word	0x40023c00

08005e48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005e4c:	4b27      	ldr	r3, [pc, #156]	; (8005eec <FLASH_SetErrorCode+0xa4>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005e58:	4b25      	ldr	r3, [pc, #148]	; (8005ef0 <FLASH_SetErrorCode+0xa8>)
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	f043 0310 	orr.w	r3, r3, #16
 8005e60:	4a23      	ldr	r2, [pc, #140]	; (8005ef0 <FLASH_SetErrorCode+0xa8>)
 8005e62:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005e64:	4b21      	ldr	r3, [pc, #132]	; (8005eec <FLASH_SetErrorCode+0xa4>)
 8005e66:	2210      	movs	r2, #16
 8005e68:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005e6a:	4b20      	ldr	r3, [pc, #128]	; (8005eec <FLASH_SetErrorCode+0xa4>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005e76:	4b1e      	ldr	r3, [pc, #120]	; (8005ef0 <FLASH_SetErrorCode+0xa8>)
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f043 0308 	orr.w	r3, r3, #8
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <FLASH_SetErrorCode+0xa8>)
 8005e80:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005e82:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <FLASH_SetErrorCode+0xa4>)
 8005e84:	2220      	movs	r2, #32
 8005e86:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005e88:	4b18      	ldr	r3, [pc, #96]	; (8005eec <FLASH_SetErrorCode+0xa4>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005e94:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <FLASH_SetErrorCode+0xa8>)
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f043 0304 	orr.w	r3, r3, #4
 8005e9c:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <FLASH_SetErrorCode+0xa8>)
 8005e9e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005ea0:	4b12      	ldr	r3, [pc, #72]	; (8005eec <FLASH_SetErrorCode+0xa4>)
 8005ea2:	2240      	movs	r2, #64	; 0x40
 8005ea4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005ea6:	4b11      	ldr	r3, [pc, #68]	; (8005eec <FLASH_SetErrorCode+0xa4>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005eb2:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <FLASH_SetErrorCode+0xa8>)
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	f043 0302 	orr.w	r3, r3, #2
 8005eba:	4a0d      	ldr	r2, [pc, #52]	; (8005ef0 <FLASH_SetErrorCode+0xa8>)
 8005ebc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <FLASH_SetErrorCode+0xa4>)
 8005ec0:	2280      	movs	r2, #128	; 0x80
 8005ec2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005ec4:	4b09      	ldr	r3, [pc, #36]	; (8005eec <FLASH_SetErrorCode+0xa4>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <FLASH_SetErrorCode+0xa8>)
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	f043 0320 	orr.w	r3, r3, #32
 8005ed8:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <FLASH_SetErrorCode+0xa8>)
 8005eda:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005edc:	4b03      	ldr	r3, [pc, #12]	; (8005eec <FLASH_SetErrorCode+0xa4>)
 8005ede:	2202      	movs	r2, #2
 8005ee0:	60da      	str	r2, [r3, #12]
  }
}
 8005ee2:	bf00      	nop
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40023c00 	.word	0x40023c00
 8005ef0:	2000088c 	.word	0x2000088c

08005ef4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f06:	4b31      	ldr	r3, [pc, #196]	; (8005fcc <HAL_FLASHEx_Erase+0xd8>)
 8005f08:	7e1b      	ldrb	r3, [r3, #24]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_FLASHEx_Erase+0x1e>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e058      	b.n	8005fc4 <HAL_FLASHEx_Erase+0xd0>
 8005f12:	4b2e      	ldr	r3, [pc, #184]	; (8005fcc <HAL_FLASHEx_Erase+0xd8>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f1c:	f7ff feba 	bl	8005c94 <FLASH_WaitForLastOperation>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d148      	bne.n	8005fbc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f30:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d115      	bne.n	8005f66 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f000 f844 	bl	8005fd4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f50:	f7ff fea0 	bl	8005c94 <FLASH_WaitForLastOperation>
 8005f54:	4603      	mov	r3, r0
 8005f56:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005f58:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <HAL_FLASHEx_Erase+0xdc>)
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	4a1c      	ldr	r2, [pc, #112]	; (8005fd0 <HAL_FLASHEx_Erase+0xdc>)
 8005f5e:	f023 0304 	bic.w	r3, r3, #4
 8005f62:	6113      	str	r3, [r2, #16]
 8005f64:	e028      	b.n	8005fb8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	e01c      	b.n	8005fa8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	4619      	mov	r1, r3
 8005f76:	68b8      	ldr	r0, [r7, #8]
 8005f78:	f000 f850 	bl	800601c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f80:	f7ff fe88 	bl	8005c94 <FLASH_WaitForLastOperation>
 8005f84:	4603      	mov	r3, r0
 8005f86:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005f88:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <HAL_FLASHEx_Erase+0xdc>)
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <HAL_FLASHEx_Erase+0xdc>)
 8005f8e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005f92:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	601a      	str	r2, [r3, #0]
          break;
 8005fa0:	e00a      	b.n	8005fb8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60bb      	str	r3, [r7, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d3da      	bcc.n	8005f6e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8005fb8:	f000 f878 	bl	80060ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005fbc:	4b03      	ldr	r3, [pc, #12]	; (8005fcc <HAL_FLASHEx_Erase+0xd8>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	761a      	strb	r2, [r3, #24]

  return status;
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	2000088c 	.word	0x2000088c
 8005fd0:	40023c00 	.word	0x40023c00

08005fd4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	6039      	str	r1, [r7, #0]
 8005fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005fe0:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <FLASH_MassErase+0x44>)
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	4a0c      	ldr	r2, [pc, #48]	; (8006018 <FLASH_MassErase+0x44>)
 8005fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005fec:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <FLASH_MassErase+0x44>)
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	4a09      	ldr	r2, [pc, #36]	; (8006018 <FLASH_MassErase+0x44>)
 8005ff2:	f043 0304 	orr.w	r3, r3, #4
 8005ff6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8005ff8:	4b07      	ldr	r3, [pc, #28]	; (8006018 <FLASH_MassErase+0x44>)
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	4313      	orrs	r3, r2
 8006002:	4a05      	ldr	r2, [pc, #20]	; (8006018 <FLASH_MassErase+0x44>)
 8006004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006008:	6113      	str	r3, [r2, #16]
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40023c00 	.word	0x40023c00

0800601c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	460b      	mov	r3, r1
 8006026:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d102      	bne.n	8006038 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	e010      	b.n	800605a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d103      	bne.n	8006046 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800603e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	e009      	b.n	800605a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d103      	bne.n	8006054 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800604c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006050:	60fb      	str	r3, [r7, #12]
 8006052:	e002      	b.n	800605a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006054:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006058:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800605a:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <FLASH_Erase_Sector+0x8c>)
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	4a12      	ldr	r2, [pc, #72]	; (80060a8 <FLASH_Erase_Sector+0x8c>)
 8006060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006064:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006066:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <FLASH_Erase_Sector+0x8c>)
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	490f      	ldr	r1, [pc, #60]	; (80060a8 <FLASH_Erase_Sector+0x8c>)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006072:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <FLASH_Erase_Sector+0x8c>)
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	4a0c      	ldr	r2, [pc, #48]	; (80060a8 <FLASH_Erase_Sector+0x8c>)
 8006078:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800607c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800607e:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <FLASH_Erase_Sector+0x8c>)
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4313      	orrs	r3, r2
 8006088:	4a07      	ldr	r2, [pc, #28]	; (80060a8 <FLASH_Erase_Sector+0x8c>)
 800608a:	f043 0302 	orr.w	r3, r3, #2
 800608e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <FLASH_Erase_Sector+0x8c>)
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	4a04      	ldr	r2, [pc, #16]	; (80060a8 <FLASH_Erase_Sector+0x8c>)
 8006096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800609a:	6113      	str	r3, [r2, #16]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40023c00 	.word	0x40023c00

080060ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80060b0:	4b20      	ldr	r3, [pc, #128]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d017      	beq.n	80060ec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80060bc:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80060c8:	4b1a      	ldr	r3, [pc, #104]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a19      	ldr	r2, [pc, #100]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	4b17      	ldr	r3, [pc, #92]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a16      	ldr	r2, [pc, #88]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060e0:	4b14      	ldr	r3, [pc, #80]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a13      	ldr	r2, [pc, #76]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060ea:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80060ec:	4b11      	ldr	r3, [pc, #68]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d017      	beq.n	8006128 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80060f8:	4b0e      	ldr	r3, [pc, #56]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0d      	ldr	r2, [pc, #52]	; (8006134 <FLASH_FlushCaches+0x88>)
 80060fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006102:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006104:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <FLASH_FlushCaches+0x88>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a0a      	ldr	r2, [pc, #40]	; (8006134 <FLASH_FlushCaches+0x88>)
 800610a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	4b08      	ldr	r3, [pc, #32]	; (8006134 <FLASH_FlushCaches+0x88>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a07      	ldr	r2, [pc, #28]	; (8006134 <FLASH_FlushCaches+0x88>)
 8006116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800611a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800611c:	4b05      	ldr	r3, [pc, #20]	; (8006134 <FLASH_FlushCaches+0x88>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a04      	ldr	r2, [pc, #16]	; (8006134 <FLASH_FlushCaches+0x88>)
 8006122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006126:	6013      	str	r3, [r2, #0]
  }
}
 8006128:	bf00      	nop
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40023c00 	.word	0x40023c00

08006138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006138:	b480      	push	{r7}
 800613a:	b089      	sub	sp, #36	; 0x24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006142:	2300      	movs	r3, #0
 8006144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006146:	2300      	movs	r3, #0
 8006148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800614a:	2300      	movs	r3, #0
 800614c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	e16b      	b.n	800642c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006154:	2201      	movs	r2, #1
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4013      	ands	r3, r2
 8006166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	429a      	cmp	r2, r3
 800616e:	f040 815a 	bne.w	8006426 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d00b      	beq.n	8006192 <HAL_GPIO_Init+0x5a>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d007      	beq.n	8006192 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006186:	2b11      	cmp	r3, #17
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2b12      	cmp	r3, #18
 8006190:	d130      	bne.n	80061f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	2203      	movs	r2, #3
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061c8:	2201      	movs	r2, #1
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	43db      	mvns	r3, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4013      	ands	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	091b      	lsrs	r3, r3, #4
 80061de:	f003 0201 	and.w	r2, r3, #1
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	2203      	movs	r2, #3
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	43db      	mvns	r3, r3
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	4013      	ands	r3, r2
 800620a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4313      	orrs	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d003      	beq.n	8006234 <HAL_GPIO_Init+0xfc>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	2b12      	cmp	r3, #18
 8006232:	d123      	bne.n	800627c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	08da      	lsrs	r2, r3, #3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3208      	adds	r2, #8
 800623c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	220f      	movs	r2, #15
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4013      	ands	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4313      	orrs	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	08da      	lsrs	r2, r3, #3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3208      	adds	r2, #8
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	2203      	movs	r2, #3
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	43db      	mvns	r3, r3
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4013      	ands	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 0203 	and.w	r2, r3, #3
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 80b4 	beq.w	8006426 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
 80062c2:	4b60      	ldr	r3, [pc, #384]	; (8006444 <HAL_GPIO_Init+0x30c>)
 80062c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c6:	4a5f      	ldr	r2, [pc, #380]	; (8006444 <HAL_GPIO_Init+0x30c>)
 80062c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062cc:	6453      	str	r3, [r2, #68]	; 0x44
 80062ce:	4b5d      	ldr	r3, [pc, #372]	; (8006444 <HAL_GPIO_Init+0x30c>)
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062da:	4a5b      	ldr	r2, [pc, #364]	; (8006448 <HAL_GPIO_Init+0x310>)
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	089b      	lsrs	r3, r3, #2
 80062e0:	3302      	adds	r3, #2
 80062e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	220f      	movs	r2, #15
 80062f2:	fa02 f303 	lsl.w	r3, r2, r3
 80062f6:	43db      	mvns	r3, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a52      	ldr	r2, [pc, #328]	; (800644c <HAL_GPIO_Init+0x314>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d02b      	beq.n	800635e <HAL_GPIO_Init+0x226>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a51      	ldr	r2, [pc, #324]	; (8006450 <HAL_GPIO_Init+0x318>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d025      	beq.n	800635a <HAL_GPIO_Init+0x222>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a50      	ldr	r2, [pc, #320]	; (8006454 <HAL_GPIO_Init+0x31c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d01f      	beq.n	8006356 <HAL_GPIO_Init+0x21e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a4f      	ldr	r2, [pc, #316]	; (8006458 <HAL_GPIO_Init+0x320>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d019      	beq.n	8006352 <HAL_GPIO_Init+0x21a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a4e      	ldr	r2, [pc, #312]	; (800645c <HAL_GPIO_Init+0x324>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d013      	beq.n	800634e <HAL_GPIO_Init+0x216>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a4d      	ldr	r2, [pc, #308]	; (8006460 <HAL_GPIO_Init+0x328>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00d      	beq.n	800634a <HAL_GPIO_Init+0x212>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a4c      	ldr	r2, [pc, #304]	; (8006464 <HAL_GPIO_Init+0x32c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d007      	beq.n	8006346 <HAL_GPIO_Init+0x20e>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a4b      	ldr	r2, [pc, #300]	; (8006468 <HAL_GPIO_Init+0x330>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d101      	bne.n	8006342 <HAL_GPIO_Init+0x20a>
 800633e:	2307      	movs	r3, #7
 8006340:	e00e      	b.n	8006360 <HAL_GPIO_Init+0x228>
 8006342:	2308      	movs	r3, #8
 8006344:	e00c      	b.n	8006360 <HAL_GPIO_Init+0x228>
 8006346:	2306      	movs	r3, #6
 8006348:	e00a      	b.n	8006360 <HAL_GPIO_Init+0x228>
 800634a:	2305      	movs	r3, #5
 800634c:	e008      	b.n	8006360 <HAL_GPIO_Init+0x228>
 800634e:	2304      	movs	r3, #4
 8006350:	e006      	b.n	8006360 <HAL_GPIO_Init+0x228>
 8006352:	2303      	movs	r3, #3
 8006354:	e004      	b.n	8006360 <HAL_GPIO_Init+0x228>
 8006356:	2302      	movs	r3, #2
 8006358:	e002      	b.n	8006360 <HAL_GPIO_Init+0x228>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <HAL_GPIO_Init+0x228>
 800635e:	2300      	movs	r3, #0
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	f002 0203 	and.w	r2, r2, #3
 8006366:	0092      	lsls	r2, r2, #2
 8006368:	4093      	lsls	r3, r2
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4313      	orrs	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006370:	4935      	ldr	r1, [pc, #212]	; (8006448 <HAL_GPIO_Init+0x310>)
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	089b      	lsrs	r3, r3, #2
 8006376:	3302      	adds	r3, #2
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800637e:	4b3b      	ldr	r3, [pc, #236]	; (800646c <HAL_GPIO_Init+0x334>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	43db      	mvns	r3, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4013      	ands	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063a2:	4a32      	ldr	r2, [pc, #200]	; (800646c <HAL_GPIO_Init+0x334>)
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063a8:	4b30      	ldr	r3, [pc, #192]	; (800646c <HAL_GPIO_Init+0x334>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	43db      	mvns	r3, r3
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	4013      	ands	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063cc:	4a27      	ldr	r2, [pc, #156]	; (800646c <HAL_GPIO_Init+0x334>)
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80063d2:	4b26      	ldr	r3, [pc, #152]	; (800646c <HAL_GPIO_Init+0x334>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	43db      	mvns	r3, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4013      	ands	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063f6:	4a1d      	ldr	r2, [pc, #116]	; (800646c <HAL_GPIO_Init+0x334>)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063fc:	4b1b      	ldr	r3, [pc, #108]	; (800646c <HAL_GPIO_Init+0x334>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	43db      	mvns	r3, r3
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	4013      	ands	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006420:	4a12      	ldr	r2, [pc, #72]	; (800646c <HAL_GPIO_Init+0x334>)
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3301      	adds	r3, #1
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2b0f      	cmp	r3, #15
 8006430:	f67f ae90 	bls.w	8006154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	3724      	adds	r7, #36	; 0x24
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40023800 	.word	0x40023800
 8006448:	40013800 	.word	0x40013800
 800644c:	40020000 	.word	0x40020000
 8006450:	40020400 	.word	0x40020400
 8006454:	40020800 	.word	0x40020800
 8006458:	40020c00 	.word	0x40020c00
 800645c:	40021000 	.word	0x40021000
 8006460:	40021400 	.word	0x40021400
 8006464:	40021800 	.word	0x40021800
 8006468:	40021c00 	.word	0x40021c00
 800646c:	40013c00 	.word	0x40013c00

08006470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	887b      	ldrh	r3, [r7, #2]
 8006482:	4013      	ands	r3, r2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006488:	2301      	movs	r3, #1
 800648a:	73fb      	strb	r3, [r7, #15]
 800648c:	e001      	b.n	8006492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	807b      	strh	r3, [r7, #2]
 80064ac:	4613      	mov	r3, r2
 80064ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064b0:	787b      	ldrb	r3, [r7, #1]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064b6:	887a      	ldrh	r2, [r7, #2]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064bc:	e003      	b.n	80064c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064be:	887b      	ldrh	r3, [r7, #2]
 80064c0:	041a      	lsls	r2, r3, #16
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	619a      	str	r2, [r3, #24]
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e12b      	b.n	800673e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc fe32 	bl	8003164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2224      	movs	r2, #36	; 0x24
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0201 	bic.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006526:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006536:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006538:	f000 fd52 	bl	8006fe0 <HAL_RCC_GetPCLK1Freq>
 800653c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	4a81      	ldr	r2, [pc, #516]	; (8006748 <HAL_I2C_Init+0x274>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d807      	bhi.n	8006558 <HAL_I2C_Init+0x84>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4a80      	ldr	r2, [pc, #512]	; (800674c <HAL_I2C_Init+0x278>)
 800654c:	4293      	cmp	r3, r2
 800654e:	bf94      	ite	ls
 8006550:	2301      	movls	r3, #1
 8006552:	2300      	movhi	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	e006      	b.n	8006566 <HAL_I2C_Init+0x92>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a7d      	ldr	r2, [pc, #500]	; (8006750 <HAL_I2C_Init+0x27c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	bf94      	ite	ls
 8006560:	2301      	movls	r3, #1
 8006562:	2300      	movhi	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e0e7      	b.n	800673e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4a78      	ldr	r2, [pc, #480]	; (8006754 <HAL_I2C_Init+0x280>)
 8006572:	fba2 2303 	umull	r2, r3, r2, r3
 8006576:	0c9b      	lsrs	r3, r3, #18
 8006578:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	4a6a      	ldr	r2, [pc, #424]	; (8006748 <HAL_I2C_Init+0x274>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d802      	bhi.n	80065a8 <HAL_I2C_Init+0xd4>
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	3301      	adds	r3, #1
 80065a6:	e009      	b.n	80065bc <HAL_I2C_Init+0xe8>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065ae:	fb02 f303 	mul.w	r3, r2, r3
 80065b2:	4a69      	ldr	r2, [pc, #420]	; (8006758 <HAL_I2C_Init+0x284>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	099b      	lsrs	r3, r3, #6
 80065ba:	3301      	adds	r3, #1
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6812      	ldr	r2, [r2, #0]
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80065ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	495c      	ldr	r1, [pc, #368]	; (8006748 <HAL_I2C_Init+0x274>)
 80065d8:	428b      	cmp	r3, r1
 80065da:	d819      	bhi.n	8006610 <HAL_I2C_Init+0x13c>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	1e59      	subs	r1, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80065ea:	1c59      	adds	r1, r3, #1
 80065ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80065f0:	400b      	ands	r3, r1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <HAL_I2C_Init+0x138>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1e59      	subs	r1, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	fbb1 f3f3 	udiv	r3, r1, r3
 8006604:	3301      	adds	r3, #1
 8006606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800660a:	e051      	b.n	80066b0 <HAL_I2C_Init+0x1dc>
 800660c:	2304      	movs	r3, #4
 800660e:	e04f      	b.n	80066b0 <HAL_I2C_Init+0x1dc>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d111      	bne.n	800663c <HAL_I2C_Init+0x168>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	1e58      	subs	r0, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6859      	ldr	r1, [r3, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	440b      	add	r3, r1
 8006626:	fbb0 f3f3 	udiv	r3, r0, r3
 800662a:	3301      	adds	r3, #1
 800662c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf0c      	ite	eq
 8006634:	2301      	moveq	r3, #1
 8006636:	2300      	movne	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	e012      	b.n	8006662 <HAL_I2C_Init+0x18e>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	1e58      	subs	r0, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6859      	ldr	r1, [r3, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	0099      	lsls	r1, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006652:	3301      	adds	r3, #1
 8006654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006658:	2b00      	cmp	r3, #0
 800665a:	bf0c      	ite	eq
 800665c:	2301      	moveq	r3, #1
 800665e:	2300      	movne	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_I2C_Init+0x196>
 8006666:	2301      	movs	r3, #1
 8006668:	e022      	b.n	80066b0 <HAL_I2C_Init+0x1dc>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10e      	bne.n	8006690 <HAL_I2C_Init+0x1bc>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	1e58      	subs	r0, r3, #1
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	440b      	add	r3, r1
 8006680:	fbb0 f3f3 	udiv	r3, r0, r3
 8006684:	3301      	adds	r3, #1
 8006686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800668a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800668e:	e00f      	b.n	80066b0 <HAL_I2C_Init+0x1dc>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	1e58      	subs	r0, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6859      	ldr	r1, [r3, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	0099      	lsls	r1, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066a6:	3301      	adds	r3, #1
 80066a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	6809      	ldr	r1, [r1, #0]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	69da      	ldr	r2, [r3, #28]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80066de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6911      	ldr	r1, [r2, #16]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	68d2      	ldr	r2, [r2, #12]
 80066ea:	4311      	orrs	r1, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	430b      	orrs	r3, r1
 80066f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695a      	ldr	r2, [r3, #20]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0201 	orr.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	000186a0 	.word	0x000186a0
 800674c:	001e847f 	.word	0x001e847f
 8006750:	003d08ff 	.word	0x003d08ff
 8006754:	431bde83 	.word	0x431bde83
 8006758:	10624dd3 	.word	0x10624dd3

0800675c <HAL_RCC_OscConfig>:
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCC_OscConfig+0x12>
 800676a:	2301      	movs	r3, #1
 800676c:	e25b      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d075      	beq.n	8006866 <HAL_RCC_OscConfig+0x10a>
 800677a:	4ba3      	ldr	r3, [pc, #652]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 030c 	and.w	r3, r3, #12
 8006782:	2b04      	cmp	r3, #4
 8006784:	d00c      	beq.n	80067a0 <HAL_RCC_OscConfig+0x44>
 8006786:	4ba0      	ldr	r3, [pc, #640]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 030c 	and.w	r3, r3, #12
 800678e:	2b08      	cmp	r3, #8
 8006790:	d112      	bne.n	80067b8 <HAL_RCC_OscConfig+0x5c>
 8006792:	4b9d      	ldr	r3, [pc, #628]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800679a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800679e:	d10b      	bne.n	80067b8 <HAL_RCC_OscConfig+0x5c>
 80067a0:	4b99      	ldr	r3, [pc, #612]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d05b      	beq.n	8006864 <HAL_RCC_OscConfig+0x108>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d157      	bne.n	8006864 <HAL_RCC_OscConfig+0x108>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e236      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c0:	d106      	bne.n	80067d0 <HAL_RCC_OscConfig+0x74>
 80067c2:	4b91      	ldr	r3, [pc, #580]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a90      	ldr	r2, [pc, #576]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80067c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e01d      	b.n	800680c <HAL_RCC_OscConfig+0xb0>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067d8:	d10c      	bne.n	80067f4 <HAL_RCC_OscConfig+0x98>
 80067da:	4b8b      	ldr	r3, [pc, #556]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a8a      	ldr	r2, [pc, #552]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80067e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067e4:	6013      	str	r3, [r2, #0]
 80067e6:	4b88      	ldr	r3, [pc, #544]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a87      	ldr	r2, [pc, #540]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80067ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f0:	6013      	str	r3, [r2, #0]
 80067f2:	e00b      	b.n	800680c <HAL_RCC_OscConfig+0xb0>
 80067f4:	4b84      	ldr	r3, [pc, #528]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a83      	ldr	r2, [pc, #524]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80067fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	4b81      	ldr	r3, [pc, #516]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a80      	ldr	r2, [pc, #512]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d013      	beq.n	800683c <HAL_RCC_OscConfig+0xe0>
 8006814:	f7fe f862 	bl	80048dc <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0xd2>
 800681c:	f7fe f85e 	bl	80048dc <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b64      	cmp	r3, #100	; 0x64
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0xd2>
 800682a:	2303      	movs	r3, #3
 800682c:	e1fb      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 800682e:	4b76      	ldr	r3, [pc, #472]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0xc0>
 800683a:	e014      	b.n	8006866 <HAL_RCC_OscConfig+0x10a>
 800683c:	f7fe f84e 	bl	80048dc <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0xfa>
 8006844:	f7fe f84a 	bl	80048dc <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b64      	cmp	r3, #100	; 0x64
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0xfa>
 8006852:	2303      	movs	r3, #3
 8006854:	e1e7      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 8006856:	4b6c      	ldr	r3, [pc, #432]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0xe8>
 8006862:	e000      	b.n	8006866 <HAL_RCC_OscConfig+0x10a>
 8006864:	bf00      	nop
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d063      	beq.n	800693a <HAL_RCC_OscConfig+0x1de>
 8006872:	4b65      	ldr	r3, [pc, #404]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 030c 	and.w	r3, r3, #12
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00b      	beq.n	8006896 <HAL_RCC_OscConfig+0x13a>
 800687e:	4b62      	ldr	r3, [pc, #392]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 030c 	and.w	r3, r3, #12
 8006886:	2b08      	cmp	r3, #8
 8006888:	d11c      	bne.n	80068c4 <HAL_RCC_OscConfig+0x168>
 800688a:	4b5f      	ldr	r3, [pc, #380]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d116      	bne.n	80068c4 <HAL_RCC_OscConfig+0x168>
 8006896:	4b5c      	ldr	r3, [pc, #368]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <HAL_RCC_OscConfig+0x152>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d001      	beq.n	80068ae <HAL_RCC_OscConfig+0x152>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e1bb      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 80068ae:	4b56      	ldr	r3, [pc, #344]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	4952      	ldr	r1, [pc, #328]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	600b      	str	r3, [r1, #0]
 80068c2:	e03a      	b.n	800693a <HAL_RCC_OscConfig+0x1de>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d020      	beq.n	800690e <HAL_RCC_OscConfig+0x1b2>
 80068cc:	4b4f      	ldr	r3, [pc, #316]	; (8006a0c <HAL_RCC_OscConfig+0x2b0>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	f7fe f803 	bl	80048dc <HAL_GetTick>
 80068d6:	6138      	str	r0, [r7, #16]
 80068d8:	e008      	b.n	80068ec <HAL_RCC_OscConfig+0x190>
 80068da:	f7fd ffff 	bl	80048dc <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d901      	bls.n	80068ec <HAL_RCC_OscConfig+0x190>
 80068e8:	2303      	movs	r3, #3
 80068ea:	e19c      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 80068ec:	4b46      	ldr	r3, [pc, #280]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d0f0      	beq.n	80068da <HAL_RCC_OscConfig+0x17e>
 80068f8:	4b43      	ldr	r3, [pc, #268]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	4940      	ldr	r1, [pc, #256]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006908:	4313      	orrs	r3, r2
 800690a:	600b      	str	r3, [r1, #0]
 800690c:	e015      	b.n	800693a <HAL_RCC_OscConfig+0x1de>
 800690e:	4b3f      	ldr	r3, [pc, #252]	; (8006a0c <HAL_RCC_OscConfig+0x2b0>)
 8006910:	2200      	movs	r2, #0
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	f7fd ffe2 	bl	80048dc <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0x1d2>
 800691c:	f7fd ffde 	bl	80048dc <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0x1d2>
 800692a:	2303      	movs	r3, #3
 800692c:	e17b      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 800692e:	4b36      	ldr	r3, [pc, #216]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f0      	bne.n	800691c <HAL_RCC_OscConfig+0x1c0>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0308 	and.w	r3, r3, #8
 8006942:	2b00      	cmp	r3, #0
 8006944:	d030      	beq.n	80069a8 <HAL_RCC_OscConfig+0x24c>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d016      	beq.n	800697c <HAL_RCC_OscConfig+0x220>
 800694e:	4b30      	ldr	r3, [pc, #192]	; (8006a10 <HAL_RCC_OscConfig+0x2b4>)
 8006950:	2201      	movs	r2, #1
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	f7fd ffc2 	bl	80048dc <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x212>
 800695c:	f7fd ffbe 	bl	80048dc <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b02      	cmp	r3, #2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x212>
 800696a:	2303      	movs	r3, #3
 800696c:	e15b      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 800696e:	4b26      	ldr	r3, [pc, #152]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 8006970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCC_OscConfig+0x200>
 800697a:	e015      	b.n	80069a8 <HAL_RCC_OscConfig+0x24c>
 800697c:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <HAL_RCC_OscConfig+0x2b4>)
 800697e:	2200      	movs	r2, #0
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	f7fd ffab 	bl	80048dc <HAL_GetTick>
 8006986:	6138      	str	r0, [r7, #16]
 8006988:	e008      	b.n	800699c <HAL_RCC_OscConfig+0x240>
 800698a:	f7fd ffa7 	bl	80048dc <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x240>
 8006998:	2303      	movs	r3, #3
 800699a:	e144      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 800699c:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 800699e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1f0      	bne.n	800698a <HAL_RCC_OscConfig+0x22e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80a0 	beq.w	8006af6 <HAL_RCC_OscConfig+0x39a>
 80069b6:	2300      	movs	r3, #0
 80069b8:	75fb      	strb	r3, [r7, #23]
 80069ba:	4b13      	ldr	r3, [pc, #76]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10f      	bne.n	80069e6 <HAL_RCC_OscConfig+0x28a>
 80069c6:	2300      	movs	r3, #0
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	4a0e      	ldr	r2, [pc, #56]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80069d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d4:	6413      	str	r3, [r2, #64]	; 0x40
 80069d6:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069de:	60bb      	str	r3, [r7, #8]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2301      	movs	r3, #1
 80069e4:	75fb      	strb	r3, [r7, #23]
 80069e6:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <HAL_RCC_OscConfig+0x2b8>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d121      	bne.n	8006a36 <HAL_RCC_OscConfig+0x2da>
 80069f2:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <HAL_RCC_OscConfig+0x2b8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a07      	ldr	r2, [pc, #28]	; (8006a14 <HAL_RCC_OscConfig+0x2b8>)
 80069f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	f7fd ff6d 	bl	80048dc <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]
 8006a04:	e011      	b.n	8006a2a <HAL_RCC_OscConfig+0x2ce>
 8006a06:	bf00      	nop
 8006a08:	40023800 	.word	0x40023800
 8006a0c:	42470000 	.word	0x42470000
 8006a10:	42470e80 	.word	0x42470e80
 8006a14:	40007000 	.word	0x40007000
 8006a18:	f7fd ff60 	bl	80048dc <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x2ce>
 8006a26:	2303      	movs	r3, #3
 8006a28:	e0fd      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 8006a2a:	4b81      	ldr	r3, [pc, #516]	; (8006c30 <HAL_RCC_OscConfig+0x4d4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f0      	beq.n	8006a18 <HAL_RCC_OscConfig+0x2bc>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d106      	bne.n	8006a4c <HAL_RCC_OscConfig+0x2f0>
 8006a3e:	4b7d      	ldr	r3, [pc, #500]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	4a7c      	ldr	r2, [pc, #496]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006a44:	f043 0301 	orr.w	r3, r3, #1
 8006a48:	6713      	str	r3, [r2, #112]	; 0x70
 8006a4a:	e01c      	b.n	8006a86 <HAL_RCC_OscConfig+0x32a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b05      	cmp	r3, #5
 8006a52:	d10c      	bne.n	8006a6e <HAL_RCC_OscConfig+0x312>
 8006a54:	4b77      	ldr	r3, [pc, #476]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a58:	4a76      	ldr	r2, [pc, #472]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006a5a:	f043 0304 	orr.w	r3, r3, #4
 8006a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a60:	4b74      	ldr	r3, [pc, #464]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a64:	4a73      	ldr	r2, [pc, #460]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006a66:	f043 0301 	orr.w	r3, r3, #1
 8006a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a6c:	e00b      	b.n	8006a86 <HAL_RCC_OscConfig+0x32a>
 8006a6e:	4b71      	ldr	r3, [pc, #452]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a72:	4a70      	ldr	r2, [pc, #448]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006a74:	f023 0301 	bic.w	r3, r3, #1
 8006a78:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7a:	4b6e      	ldr	r3, [pc, #440]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7e:	4a6d      	ldr	r2, [pc, #436]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006a80:	f023 0304 	bic.w	r3, r3, #4
 8006a84:	6713      	str	r3, [r2, #112]	; 0x70
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d015      	beq.n	8006aba <HAL_RCC_OscConfig+0x35e>
 8006a8e:	f7fd ff25 	bl	80048dc <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]
 8006a94:	e00a      	b.n	8006aac <HAL_RCC_OscConfig+0x350>
 8006a96:	f7fd ff21 	bl	80048dc <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x350>
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e0bc      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 8006aac:	4b61      	ldr	r3, [pc, #388]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0ee      	beq.n	8006a96 <HAL_RCC_OscConfig+0x33a>
 8006ab8:	e014      	b.n	8006ae4 <HAL_RCC_OscConfig+0x388>
 8006aba:	f7fd ff0f 	bl	80048dc <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]
 8006ac0:	e00a      	b.n	8006ad8 <HAL_RCC_OscConfig+0x37c>
 8006ac2:	f7fd ff0b 	bl	80048dc <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x37c>
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e0a6      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 8006ad8:	4b56      	ldr	r3, [pc, #344]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1ee      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x366>
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d105      	bne.n	8006af6 <HAL_RCC_OscConfig+0x39a>
 8006aea:	4b52      	ldr	r3, [pc, #328]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	4a51      	ldr	r2, [pc, #324]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006af4:	6413      	str	r3, [r2, #64]	; 0x40
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 8092 	beq.w	8006c24 <HAL_RCC_OscConfig+0x4c8>
 8006b00:	4b4c      	ldr	r3, [pc, #304]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 030c 	and.w	r3, r3, #12
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d05c      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x46a>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d141      	bne.n	8006b98 <HAL_RCC_OscConfig+0x43c>
 8006b14:	4b48      	ldr	r3, [pc, #288]	; (8006c38 <HAL_RCC_OscConfig+0x4dc>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	f7fd fedf 	bl	80048dc <HAL_GetTick>
 8006b1e:	6138      	str	r0, [r7, #16]
 8006b20:	e008      	b.n	8006b34 <HAL_RCC_OscConfig+0x3d8>
 8006b22:	f7fd fedb 	bl	80048dc <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d901      	bls.n	8006b34 <HAL_RCC_OscConfig+0x3d8>
 8006b30:	2303      	movs	r3, #3
 8006b32:	e078      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 8006b34:	4b3f      	ldr	r3, [pc, #252]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1f0      	bne.n	8006b22 <HAL_RCC_OscConfig+0x3c6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	019b      	lsls	r3, r3, #6
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	085b      	lsrs	r3, r3, #1
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	041b      	lsls	r3, r3, #16
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	061b      	lsls	r3, r3, #24
 8006b64:	4933      	ldr	r1, [pc, #204]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006b66:	4313      	orrs	r3, r2
 8006b68:	604b      	str	r3, [r1, #4]
 8006b6a:	4b33      	ldr	r3, [pc, #204]	; (8006c38 <HAL_RCC_OscConfig+0x4dc>)
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	f7fd feb4 	bl	80048dc <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0x42e>
 8006b78:	f7fd feb0 	bl	80048dc <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0x42e>
 8006b86:	2303      	movs	r3, #3
 8006b88:	e04d      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 8006b8a:	4b2a      	ldr	r3, [pc, #168]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCC_OscConfig+0x41c>
 8006b96:	e045      	b.n	8006c24 <HAL_RCC_OscConfig+0x4c8>
 8006b98:	4b27      	ldr	r3, [pc, #156]	; (8006c38 <HAL_RCC_OscConfig+0x4dc>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	f7fd fe9d 	bl	80048dc <HAL_GetTick>
 8006ba2:	6138      	str	r0, [r7, #16]
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x45c>
 8006ba6:	f7fd fe99 	bl	80048dc <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x45c>
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e036      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 8006bb8:	4b1e      	ldr	r3, [pc, #120]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f0      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x44a>
 8006bc4:	e02e      	b.n	8006c24 <HAL_RCC_OscConfig+0x4c8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x476>
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e029      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 8006bd2:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <HAL_RCC_OscConfig+0x4d8>)
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d11c      	bne.n	8006c20 <HAL_RCC_OscConfig+0x4c4>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d115      	bne.n	8006c20 <HAL_RCC_OscConfig+0x4c4>
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d10d      	bne.n	8006c20 <HAL_RCC_OscConfig+0x4c4>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d106      	bne.n	8006c20 <HAL_RCC_OscConfig+0x4c4>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d001      	beq.n	8006c24 <HAL_RCC_OscConfig+0x4c8>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <HAL_RCC_OscConfig+0x4ca>
 8006c24:	2300      	movs	r3, #0
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40007000 	.word	0x40007000
 8006c34:	40023800 	.word	0x40023800
 8006c38:	42470060 	.word	0x42470060

08006c3c <HAL_RCC_ClockConfig>:
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_RCC_ClockConfig+0x14>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0cc      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
 8006c50:	4b68      	ldr	r3, [pc, #416]	; (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 030f 	and.w	r3, r3, #15
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d90c      	bls.n	8006c78 <HAL_RCC_ClockConfig+0x3c>
 8006c5e:	4b65      	ldr	r3, [pc, #404]	; (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	4b63      	ldr	r3, [pc, #396]	; (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 030f 	and.w	r3, r3, #15
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d001      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x3c>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e0b8      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d020      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x8a>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x60>
 8006c90:	4b59      	ldr	r3, [pc, #356]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	4a58      	ldr	r2, [pc, #352]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c9a:	6093      	str	r3, [r2, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0308 	and.w	r3, r3, #8
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <HAL_RCC_ClockConfig+0x78>
 8006ca8:	4b53      	ldr	r3, [pc, #332]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	4a52      	ldr	r2, [pc, #328]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cb2:	6093      	str	r3, [r2, #8]
 8006cb4:	4b50      	ldr	r3, [pc, #320]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	494d      	ldr	r1, [pc, #308]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	608b      	str	r3, [r1, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d044      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x120>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d107      	bne.n	8006cea <HAL_RCC_ClockConfig+0xae>
 8006cda:	4b47      	ldr	r3, [pc, #284]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d119      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xde>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e07f      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d003      	beq.n	8006cfa <HAL_RCC_ClockConfig+0xbe>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d107      	bne.n	8006d0a <HAL_RCC_ClockConfig+0xce>
 8006cfa:	4b3f      	ldr	r3, [pc, #252]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xde>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e06f      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
 8006d0a:	4b3b      	ldr	r3, [pc, #236]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_RCC_ClockConfig+0xde>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e067      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
 8006d1a:	4b37      	ldr	r3, [pc, #220]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f023 0203 	bic.w	r2, r3, #3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4934      	ldr	r1, [pc, #208]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	608b      	str	r3, [r1, #8]
 8006d2c:	f7fd fdd6 	bl	80048dc <HAL_GetTick>
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	e00a      	b.n	8006d4a <HAL_RCC_ClockConfig+0x10e>
 8006d34:	f7fd fdd2 	bl	80048dc <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_ClockConfig+0x10e>
 8006d46:	2303      	movs	r3, #3
 8006d48:	e04f      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
 8006d4a:	4b2b      	ldr	r3, [pc, #172]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 020c 	and.w	r2, r3, #12
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d1eb      	bne.n	8006d34 <HAL_RCC_ClockConfig+0xf8>
 8006d5c:	4b25      	ldr	r3, [pc, #148]	; (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 030f 	and.w	r3, r3, #15
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d20c      	bcs.n	8006d84 <HAL_RCC_ClockConfig+0x148>
 8006d6a:	4b22      	ldr	r3, [pc, #136]	; (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	b2d2      	uxtb	r2, r2
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	4b20      	ldr	r3, [pc, #128]	; (8006df4 <HAL_RCC_ClockConfig+0x1b8>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d001      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x148>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e032      	b.n	8006dea <HAL_RCC_ClockConfig+0x1ae>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d008      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x166>
 8006d90:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	4916      	ldr	r1, [pc, #88]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	608b      	str	r3, [r1, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d009      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x186>
 8006dae:	4b12      	ldr	r3, [pc, #72]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	490e      	ldr	r1, [pc, #56]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	608b      	str	r3, [r1, #8]
 8006dc2:	f000 f821 	bl	8006e08 <HAL_RCC_GetSysClockFreq>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	091b      	lsrs	r3, r3, #4
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	490a      	ldr	r1, [pc, #40]	; (8006dfc <HAL_RCC_ClockConfig+0x1c0>)
 8006dd4:	5ccb      	ldrb	r3, [r1, r3]
 8006dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dda:	4a09      	ldr	r2, [pc, #36]	; (8006e00 <HAL_RCC_ClockConfig+0x1c4>)
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <HAL_RCC_ClockConfig+0x1c8>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fd fd36 	bl	8004854 <HAL_InitTick>
 8006de8:	2300      	movs	r3, #0
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	40023c00 	.word	0x40023c00
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	0800e534 	.word	0x0800e534
 8006e00:	20000000 	.word	0x20000000
 8006e04:	20000004 	.word	0x20000004

08006e08 <HAL_RCC_GetSysClockFreq>:
 8006e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	2300      	movs	r3, #0
 8006e12:	607b      	str	r3, [r7, #4]
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	4b67      	ldr	r3, [pc, #412]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 030c 	and.w	r3, r3, #12
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d00d      	beq.n	8006e48 <HAL_RCC_GetSysClockFreq+0x40>
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	f200 80bd 	bhi.w	8006fac <HAL_RCC_GetSysClockFreq+0x1a4>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <HAL_RCC_GetSysClockFreq+0x34>
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d003      	beq.n	8006e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e3a:	e0b7      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x1a4>
 8006e3c:	4b61      	ldr	r3, [pc, #388]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e3e:	60bb      	str	r3, [r7, #8]
 8006e40:	e0b7      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x1aa>
 8006e42:	4b60      	ldr	r3, [pc, #384]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e44:	60bb      	str	r3, [r7, #8]
 8006e46:	e0b4      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x1aa>
 8006e48:	4b5d      	ldr	r3, [pc, #372]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e50:	607b      	str	r3, [r7, #4]
 8006e52:	4b5b      	ldr	r3, [pc, #364]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d04d      	beq.n	8006efa <HAL_RCC_GetSysClockFreq+0xf2>
 8006e5e:	4b58      	ldr	r3, [pc, #352]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	099b      	lsrs	r3, r3, #6
 8006e64:	461a      	mov	r2, r3
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e6e:	f04f 0100 	mov.w	r1, #0
 8006e72:	ea02 0800 	and.w	r8, r2, r0
 8006e76:	ea03 0901 	and.w	r9, r3, r1
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	014b      	lsls	r3, r1, #5
 8006e88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e8c:	0142      	lsls	r2, r0, #5
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4619      	mov	r1, r3
 8006e92:	ebb0 0008 	subs.w	r0, r0, r8
 8006e96:	eb61 0109 	sbc.w	r1, r1, r9
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	018b      	lsls	r3, r1, #6
 8006ea4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ea8:	0182      	lsls	r2, r0, #6
 8006eaa:	1a12      	subs	r2, r2, r0
 8006eac:	eb63 0301 	sbc.w	r3, r3, r1
 8006eb0:	f04f 0000 	mov.w	r0, #0
 8006eb4:	f04f 0100 	mov.w	r1, #0
 8006eb8:	00d9      	lsls	r1, r3, #3
 8006eba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ebe:	00d0      	lsls	r0, r2, #3
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	eb12 0208 	adds.w	r2, r2, r8
 8006ec8:	eb43 0309 	adc.w	r3, r3, r9
 8006ecc:	f04f 0000 	mov.w	r0, #0
 8006ed0:	f04f 0100 	mov.w	r1, #0
 8006ed4:	0299      	lsls	r1, r3, #10
 8006ed6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006eda:	0290      	lsls	r0, r2, #10
 8006edc:	4602      	mov	r2, r0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	f7f9 fecc 	bl	8000c88 <__aeabi_uldivmod>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e04a      	b.n	8006f90 <HAL_RCC_GetSysClockFreq+0x188>
 8006efa:	4b31      	ldr	r3, [pc, #196]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	099b      	lsrs	r3, r3, #6
 8006f00:	461a      	mov	r2, r3
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f0a:	f04f 0100 	mov.w	r1, #0
 8006f0e:	ea02 0400 	and.w	r4, r2, r0
 8006f12:	ea03 0501 	and.w	r5, r3, r1
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	014b      	lsls	r3, r1, #5
 8006f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f28:	0142      	lsls	r2, r0, #5
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	1b00      	subs	r0, r0, r4
 8006f30:	eb61 0105 	sbc.w	r1, r1, r5
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	018b      	lsls	r3, r1, #6
 8006f3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f42:	0182      	lsls	r2, r0, #6
 8006f44:	1a12      	subs	r2, r2, r0
 8006f46:	eb63 0301 	sbc.w	r3, r3, r1
 8006f4a:	f04f 0000 	mov.w	r0, #0
 8006f4e:	f04f 0100 	mov.w	r1, #0
 8006f52:	00d9      	lsls	r1, r3, #3
 8006f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f58:	00d0      	lsls	r0, r2, #3
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	1912      	adds	r2, r2, r4
 8006f60:	eb45 0303 	adc.w	r3, r5, r3
 8006f64:	f04f 0000 	mov.w	r0, #0
 8006f68:	f04f 0100 	mov.w	r1, #0
 8006f6c:	0299      	lsls	r1, r3, #10
 8006f6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006f72:	0290      	lsls	r0, r2, #10
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	f7f9 fe80 	bl	8000c88 <__aeabi_uldivmod>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	0c1b      	lsrs	r3, r3, #16
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	e002      	b.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x1aa>
 8006fac:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fae:	60bb      	str	r3, [r7, #8]
 8006fb0:	bf00      	nop
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006fbe:	bf00      	nop
 8006fc0:	40023800 	.word	0x40023800
 8006fc4:	00f42400 	.word	0x00f42400

08006fc8 <HAL_RCC_GetHCLKFreq>:
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	20000000 	.word	0x20000000

08006fe0 <HAL_RCC_GetPCLK1Freq>:
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	f7ff fff0 	bl	8006fc8 <HAL_RCC_GetHCLKFreq>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	0a9b      	lsrs	r3, r3, #10
 8006ff0:	f003 0307 	and.w	r3, r3, #7
 8006ff4:	4903      	ldr	r1, [pc, #12]	; (8007004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ff6:	5ccb      	ldrb	r3, [r1, r3]
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40023800 	.word	0x40023800
 8007004:	0800e544 	.word	0x0800e544

08007008 <HAL_RCC_GetPCLK2Freq>:
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
 800700c:	f7ff ffdc 	bl	8006fc8 <HAL_RCC_GetHCLKFreq>
 8007010:	4602      	mov	r2, r0
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	0b5b      	lsrs	r3, r3, #13
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	4903      	ldr	r1, [pc, #12]	; (800702c <HAL_RCC_GetPCLK2Freq+0x24>)
 800701e:	5ccb      	ldrb	r3, [r1, r3]
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
 8007024:	4618      	mov	r0, r3
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40023800 	.word	0x40023800
 800702c:	0800e544 	.word	0x0800e544

08007030 <HAL_SPI_Init>:
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_SPI_Init+0x12>
 800703e:	2301      	movs	r3, #1
 8007040:	e056      	b.n	80070f0 <HAL_SPI_Init+0xc0>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	629a      	str	r2, [r3, #40]	; 0x28
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d106      	bne.n	8007062 <HAL_SPI_Init+0x32>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7fc f8c9 	bl	80031f4 <HAL_SPI_MspInit>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	ea42 0103 	orr.w	r1, r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	0c1b      	lsrs	r3, r3, #16
 80070c0:	f003 0104 	and.w	r1, r3, #4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	605a      	str	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	69da      	ldr	r2, [r3, #28]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070de:	61da      	str	r2, [r3, #28]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80070ee:	2300      	movs	r3, #0
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_SPI_Transmit>:
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	4613      	mov	r3, r2
 8007106:	80fb      	strh	r3, [r7, #6]
 8007108:	2300      	movs	r3, #0
 800710a:	77fb      	strb	r3, [r7, #31]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_SPI_Transmit+0x22>
 8007116:	2302      	movs	r3, #2
 8007118:	e11e      	b.n	8007358 <HAL_SPI_Transmit+0x260>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007122:	f7fd fbdb 	bl	80048dc <HAL_GetTick>
 8007126:	61b8      	str	r0, [r7, #24]
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	82fb      	strh	r3, [r7, #22]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b01      	cmp	r3, #1
 8007136:	d002      	beq.n	800713e <HAL_SPI_Transmit+0x46>
 8007138:	2302      	movs	r3, #2
 800713a:	77fb      	strb	r3, [r7, #31]
 800713c:	e103      	b.n	8007346 <HAL_SPI_Transmit+0x24e>
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_SPI_Transmit+0x52>
 8007144:	88fb      	ldrh	r3, [r7, #6]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d102      	bne.n	8007150 <HAL_SPI_Transmit+0x58>
 800714a:	2301      	movs	r3, #1
 800714c:	77fb      	strb	r3, [r7, #31]
 800714e:	e0fa      	b.n	8007346 <HAL_SPI_Transmit+0x24e>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2203      	movs	r2, #3
 8007154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	655a      	str	r2, [r3, #84]	; 0x54
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	88fa      	ldrh	r2, [r7, #6]
 8007168:	869a      	strh	r2, [r3, #52]	; 0x34
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	88fa      	ldrh	r2, [r7, #6]
 800716e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	639a      	str	r2, [r3, #56]	; 0x38
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	645a      	str	r2, [r3, #68]	; 0x44
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	641a      	str	r2, [r3, #64]	; 0x40
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007196:	d107      	bne.n	80071a8 <HAL_SPI_Transmit+0xb0>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b2:	2b40      	cmp	r3, #64	; 0x40
 80071b4:	d007      	beq.n	80071c6 <HAL_SPI_Transmit+0xce>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ce:	d14b      	bne.n	8007268 <HAL_SPI_Transmit+0x170>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_SPI_Transmit+0xe6>
 80071d8:	8afb      	ldrh	r3, [r7, #22]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d13e      	bne.n	800725c <HAL_SPI_Transmit+0x164>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	881a      	ldrh	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60da      	str	r2, [r3, #12]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	1c9a      	adds	r2, r3, #2
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	631a      	str	r2, [r3, #48]	; 0x30
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	86da      	strh	r2, [r3, #54]	; 0x36
 8007202:	e02b      	b.n	800725c <HAL_SPI_Transmit+0x164>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b02      	cmp	r3, #2
 8007210:	d112      	bne.n	8007238 <HAL_SPI_Transmit+0x140>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007216:	881a      	ldrh	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60da      	str	r2, [r3, #12]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	1c9a      	adds	r2, r3, #2
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	631a      	str	r2, [r3, #48]	; 0x30
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800722c:	b29b      	uxth	r3, r3
 800722e:	3b01      	subs	r3, #1
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	86da      	strh	r2, [r3, #54]	; 0x36
 8007236:	e011      	b.n	800725c <HAL_SPI_Transmit+0x164>
 8007238:	f7fd fb50 	bl	80048dc <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d803      	bhi.n	8007250 <HAL_SPI_Transmit+0x158>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724e:	d102      	bne.n	8007256 <HAL_SPI_Transmit+0x15e>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d102      	bne.n	800725c <HAL_SPI_Transmit+0x164>
 8007256:	2303      	movs	r3, #3
 8007258:	77fb      	strb	r3, [r7, #31]
 800725a:	e074      	b.n	8007346 <HAL_SPI_Transmit+0x24e>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1ce      	bne.n	8007204 <HAL_SPI_Transmit+0x10c>
 8007266:	e04c      	b.n	8007302 <HAL_SPI_Transmit+0x20a>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <HAL_SPI_Transmit+0x17e>
 8007270:	8afb      	ldrh	r3, [r7, #22]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d140      	bne.n	80072f8 <HAL_SPI_Transmit+0x200>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	330c      	adds	r3, #12
 8007280:	7812      	ldrb	r2, [r2, #0]
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	631a      	str	r2, [r3, #48]	; 0x30
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007292:	b29b      	uxth	r3, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	86da      	strh	r2, [r3, #54]	; 0x36
 800729c:	e02c      	b.n	80072f8 <HAL_SPI_Transmit+0x200>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d113      	bne.n	80072d4 <HAL_SPI_Transmit+0x1dc>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	330c      	adds	r3, #12
 80072b6:	7812      	ldrb	r2, [r2, #0]
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80072d2:	e011      	b.n	80072f8 <HAL_SPI_Transmit+0x200>
 80072d4:	f7fd fb02 	bl	80048dc <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d803      	bhi.n	80072ec <HAL_SPI_Transmit+0x1f4>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ea:	d102      	bne.n	80072f2 <HAL_SPI_Transmit+0x1fa>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d102      	bne.n	80072f8 <HAL_SPI_Transmit+0x200>
 80072f2:	2303      	movs	r3, #3
 80072f4:	77fb      	strb	r3, [r7, #31]
 80072f6:	e026      	b.n	8007346 <HAL_SPI_Transmit+0x24e>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1cd      	bne.n	800729e <HAL_SPI_Transmit+0x1a6>
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f000 fba4 	bl	8007a54 <SPI_EndRxTxTransaction>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <HAL_SPI_Transmit+0x220>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2220      	movs	r2, #32
 8007316:	655a      	str	r2, [r3, #84]	; 0x54
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <HAL_SPI_Transmit+0x23e>
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	613b      	str	r3, [r7, #16]
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_SPI_Transmit+0x24c>
 800733e:	2301      	movs	r3, #1
 8007340:	77fb      	strb	r3, [r7, #31]
 8007342:	e000      	b.n	8007346 <HAL_SPI_Transmit+0x24e>
 8007344:	bf00      	nop
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007356:	7ffb      	ldrb	r3, [r7, #31]
 8007358:	4618      	mov	r0, r3
 800735a:	3720      	adds	r7, #32
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_SPI_Receive>:
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af02      	add	r7, sp, #8
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	4613      	mov	r3, r2
 800736e:	80fb      	strh	r3, [r7, #6]
 8007370:	2300      	movs	r3, #0
 8007372:	75fb      	strb	r3, [r7, #23]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800737c:	d112      	bne.n	80073a4 <HAL_SPI_Receive+0x44>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10e      	bne.n	80073a4 <HAL_SPI_Receive+0x44>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2204      	movs	r2, #4
 800738a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800738e:	88fa      	ldrh	r2, [r7, #6]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 f8e9 	bl	8007572 <HAL_SPI_TransmitReceive>
 80073a0:	4603      	mov	r3, r0
 80073a2:	e0e2      	b.n	800756a <HAL_SPI_Receive+0x20a>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <HAL_SPI_Receive+0x52>
 80073ae:	2302      	movs	r3, #2
 80073b0:	e0db      	b.n	800756a <HAL_SPI_Receive+0x20a>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80073ba:	f7fd fa8f 	bl	80048dc <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d002      	beq.n	80073d2 <HAL_SPI_Receive+0x72>
 80073cc:	2302      	movs	r3, #2
 80073ce:	75fb      	strb	r3, [r7, #23]
 80073d0:	e0c2      	b.n	8007558 <HAL_SPI_Receive+0x1f8>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <HAL_SPI_Receive+0x7e>
 80073d8:	88fb      	ldrh	r3, [r7, #6]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d102      	bne.n	80073e4 <HAL_SPI_Receive+0x84>
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
 80073e2:	e0b9      	b.n	8007558 <HAL_SPI_Receive+0x1f8>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2204      	movs	r2, #4
 80073e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	655a      	str	r2, [r3, #84]	; 0x54
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	639a      	str	r2, [r3, #56]	; 0x38
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	88fa      	ldrh	r2, [r7, #6]
 80073fc:	879a      	strh	r2, [r3, #60]	; 0x3c
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	88fa      	ldrh	r2, [r7, #6]
 8007402:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	631a      	str	r2, [r3, #48]	; 0x30
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	869a      	strh	r2, [r3, #52]	; 0x34
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	86da      	strh	r2, [r3, #54]	; 0x36
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	641a      	str	r2, [r3, #64]	; 0x40
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	645a      	str	r2, [r3, #68]	; 0x44
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800742a:	d107      	bne.n	800743c <HAL_SPI_Receive+0xdc>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d007      	beq.n	800745a <HAL_SPI_Receive+0xfa>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d162      	bne.n	8007528 <HAL_SPI_Receive+0x1c8>
 8007462:	e02e      	b.n	80074c2 <HAL_SPI_Receive+0x162>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b01      	cmp	r3, #1
 8007470:	d115      	bne.n	800749e <HAL_SPI_Receive+0x13e>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f103 020c 	add.w	r2, r3, #12
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747e:	7812      	ldrb	r2, [r2, #0]
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	639a      	str	r2, [r3, #56]	; 0x38
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800749c:	e011      	b.n	80074c2 <HAL_SPI_Receive+0x162>
 800749e:	f7fd fa1d 	bl	80048dc <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d803      	bhi.n	80074b6 <HAL_SPI_Receive+0x156>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b4:	d102      	bne.n	80074bc <HAL_SPI_Receive+0x15c>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d102      	bne.n	80074c2 <HAL_SPI_Receive+0x162>
 80074bc:	2303      	movs	r3, #3
 80074be:	75fb      	strb	r3, [r7, #23]
 80074c0:	e04a      	b.n	8007558 <HAL_SPI_Receive+0x1f8>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1cb      	bne.n	8007464 <HAL_SPI_Receive+0x104>
 80074cc:	e031      	b.n	8007532 <HAL_SPI_Receive+0x1d2>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d113      	bne.n	8007504 <HAL_SPI_Receive+0x1a4>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68da      	ldr	r2, [r3, #12]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	b292      	uxth	r2, r2
 80074e8:	801a      	strh	r2, [r3, #0]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	1c9a      	adds	r2, r3, #2
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007502:	e011      	b.n	8007528 <HAL_SPI_Receive+0x1c8>
 8007504:	f7fd f9ea 	bl	80048dc <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d803      	bhi.n	800751c <HAL_SPI_Receive+0x1bc>
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d102      	bne.n	8007522 <HAL_SPI_Receive+0x1c2>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <HAL_SPI_Receive+0x1c8>
 8007522:	2303      	movs	r3, #3
 8007524:	75fb      	strb	r3, [r7, #23]
 8007526:	e017      	b.n	8007558 <HAL_SPI_Receive+0x1f8>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800752c:	b29b      	uxth	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1cd      	bne.n	80074ce <HAL_SPI_Receive+0x16e>
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fa27 	bl	800798a <SPI_EndRxTransaction>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <HAL_SPI_Receive+0x1e8>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2220      	movs	r2, #32
 8007546:	655a      	str	r2, [r3, #84]	; 0x54
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754c:	2b00      	cmp	r3, #0
 800754e:	d002      	beq.n	8007556 <HAL_SPI_Receive+0x1f6>
 8007550:	2301      	movs	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
 8007554:	e000      	b.n	8007558 <HAL_SPI_Receive+0x1f8>
 8007556:	bf00      	nop
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_SPI_TransmitReceive>:
 8007572:	b580      	push	{r7, lr}
 8007574:	b08c      	sub	sp, #48	; 0x30
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	807b      	strh	r3, [r7, #2]
 8007580:	2301      	movs	r3, #1
 8007582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007584:	2300      	movs	r3, #0
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007590:	2b01      	cmp	r3, #1
 8007592:	d101      	bne.n	8007598 <HAL_SPI_TransmitReceive+0x26>
 8007594:	2302      	movs	r3, #2
 8007596:	e18a      	b.n	80078ae <HAL_SPI_TransmitReceive+0x33c>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80075a0:	f7fd f99c 	bl	80048dc <HAL_GetTick>
 80075a4:	6278      	str	r0, [r7, #36]	; 0x24
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	61fb      	str	r3, [r7, #28]
 80075b6:	887b      	ldrh	r3, [r7, #2]
 80075b8:	837b      	strh	r3, [r7, #26]
 80075ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d00f      	beq.n	80075e2 <HAL_SPI_TransmitReceive+0x70>
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c8:	d107      	bne.n	80075da <HAL_SPI_TransmitReceive+0x68>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <HAL_SPI_TransmitReceive+0x68>
 80075d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d003      	beq.n	80075e2 <HAL_SPI_TransmitReceive+0x70>
 80075da:	2302      	movs	r3, #2
 80075dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075e0:	e15b      	b.n	800789a <HAL_SPI_TransmitReceive+0x328>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <HAL_SPI_TransmitReceive+0x82>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <HAL_SPI_TransmitReceive+0x82>
 80075ee:	887b      	ldrh	r3, [r7, #2]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d103      	bne.n	80075fc <HAL_SPI_TransmitReceive+0x8a>
 80075f4:	2301      	movs	r3, #1
 80075f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075fa:	e14e      	b.n	800789a <HAL_SPI_TransmitReceive+0x328>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b04      	cmp	r3, #4
 8007606:	d003      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x9e>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2205      	movs	r2, #5
 800760c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	655a      	str	r2, [r3, #84]	; 0x54
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	639a      	str	r2, [r3, #56]	; 0x38
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	887a      	ldrh	r2, [r7, #2]
 8007620:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	887a      	ldrh	r2, [r7, #2]
 8007626:	879a      	strh	r2, [r3, #60]	; 0x3c
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	631a      	str	r2, [r3, #48]	; 0x30
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	887a      	ldrh	r2, [r7, #2]
 8007632:	86da      	strh	r2, [r3, #54]	; 0x36
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	887a      	ldrh	r2, [r7, #2]
 8007638:	869a      	strh	r2, [r3, #52]	; 0x34
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	641a      	str	r2, [r3, #64]	; 0x40
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	645a      	str	r2, [r3, #68]	; 0x44
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007650:	2b40      	cmp	r3, #64	; 0x40
 8007652:	d007      	beq.n	8007664 <HAL_SPI_TransmitReceive+0xf2>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800766c:	d178      	bne.n	8007760 <HAL_SPI_TransmitReceive+0x1ee>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <HAL_SPI_TransmitReceive+0x10a>
 8007676:	8b7b      	ldrh	r3, [r7, #26]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d166      	bne.n	800774a <HAL_SPI_TransmitReceive+0x1d8>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	881a      	ldrh	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60da      	str	r2, [r3, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	631a      	str	r2, [r3, #48]	; 0x30
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	86da      	strh	r2, [r3, #54]	; 0x36
 80076a0:	e053      	b.n	800774a <HAL_SPI_TransmitReceive+0x1d8>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d11b      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x176>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d016      	beq.n	80076e8 <HAL_SPI_TransmitReceive+0x176>
 80076ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d113      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x176>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c4:	881a      	ldrh	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60da      	str	r2, [r3, #12]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	1c9a      	adds	r2, r3, #2
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80076e4:	2300      	movs	r3, #0
 80076e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d119      	bne.n	800772a <HAL_SPI_TransmitReceive+0x1b8>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d014      	beq.n	800772a <HAL_SPI_TransmitReceive+0x1b8>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	b292      	uxth	r2, r2
 800770c:	801a      	strh	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	1c9a      	adds	r2, r3, #2
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	639a      	str	r2, [r3, #56]	; 0x38
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007726:	2301      	movs	r3, #1
 8007728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800772a:	f7fd f8d7 	bl	80048dc <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007736:	429a      	cmp	r2, r3
 8007738:	d807      	bhi.n	800774a <HAL_SPI_TransmitReceive+0x1d8>
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d003      	beq.n	800774a <HAL_SPI_TransmitReceive+0x1d8>
 8007742:	2303      	movs	r3, #3
 8007744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007748:	e0a7      	b.n	800789a <HAL_SPI_TransmitReceive+0x328>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1a6      	bne.n	80076a2 <HAL_SPI_TransmitReceive+0x130>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1a1      	bne.n	80076a2 <HAL_SPI_TransmitReceive+0x130>
 800775e:	e07c      	b.n	800785a <HAL_SPI_TransmitReceive+0x2e8>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <HAL_SPI_TransmitReceive+0x1fc>
 8007768:	8b7b      	ldrh	r3, [r7, #26]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d16b      	bne.n	8007846 <HAL_SPI_TransmitReceive+0x2d4>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	330c      	adds	r3, #12
 8007778:	7812      	ldrb	r2, [r2, #0]
 800777a:	701a      	strb	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	631a      	str	r2, [r3, #48]	; 0x30
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800778a:	b29b      	uxth	r3, r3
 800778c:	3b01      	subs	r3, #1
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	86da      	strh	r2, [r3, #54]	; 0x36
 8007794:	e057      	b.n	8007846 <HAL_SPI_TransmitReceive+0x2d4>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d11c      	bne.n	80077de <HAL_SPI_TransmitReceive+0x26c>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d017      	beq.n	80077de <HAL_SPI_TransmitReceive+0x26c>
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d114      	bne.n	80077de <HAL_SPI_TransmitReceive+0x26c>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	330c      	adds	r3, #12
 80077be:	7812      	ldrb	r2, [r2, #0]
 80077c0:	701a      	strb	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c6:	1c5a      	adds	r2, r3, #1
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80077da:	2300      	movs	r3, #0
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d119      	bne.n	8007820 <HAL_SPI_TransmitReceive+0x2ae>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d014      	beq.n	8007820 <HAL_SPI_TransmitReceive+0x2ae>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	639a      	str	r2, [r3, #56]	; 0x38
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800781c:	2301      	movs	r3, #1
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007820:	f7fd f85c 	bl	80048dc <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800782c:	429a      	cmp	r2, r3
 800782e:	d803      	bhi.n	8007838 <HAL_SPI_TransmitReceive+0x2c6>
 8007830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007836:	d102      	bne.n	800783e <HAL_SPI_TransmitReceive+0x2cc>
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	2b00      	cmp	r3, #0
 800783c:	d103      	bne.n	8007846 <HAL_SPI_TransmitReceive+0x2d4>
 800783e:	2303      	movs	r3, #3
 8007840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007844:	e029      	b.n	800789a <HAL_SPI_TransmitReceive+0x328>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1a2      	bne.n	8007796 <HAL_SPI_TransmitReceive+0x224>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d19d      	bne.n	8007796 <HAL_SPI_TransmitReceive+0x224>
 800785a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 f8f8 	bl	8007a54 <SPI_EndRxTxTransaction>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d006      	beq.n	8007878 <HAL_SPI_TransmitReceive+0x306>
 800786a:	2301      	movs	r3, #1
 800786c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2220      	movs	r2, #32
 8007874:	655a      	str	r2, [r3, #84]	; 0x54
 8007876:	e010      	b.n	800789a <HAL_SPI_TransmitReceive+0x328>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10b      	bne.n	8007898 <HAL_SPI_TransmitReceive+0x326>
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	e000      	b.n	800789a <HAL_SPI_TransmitReceive+0x328>
 8007898:	bf00      	nop
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80078aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078ae:	4618      	mov	r0, r3
 80078b0:	3730      	adds	r7, #48	; 0x30
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <SPI_WaitFlagStateUntilTimeout>:
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	71fb      	strb	r3, [r7, #7]
 80078c6:	e04c      	b.n	8007962 <SPI_WaitFlagStateUntilTimeout+0xac>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ce:	d048      	beq.n	8007962 <SPI_WaitFlagStateUntilTimeout+0xac>
 80078d0:	f7fd f804 	bl	80048dc <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d902      	bls.n	80078e6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d13d      	bne.n	8007962 <SPI_WaitFlagStateUntilTimeout+0xac>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078f4:	605a      	str	r2, [r3, #4]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078fe:	d111      	bne.n	8007924 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007908:	d004      	beq.n	8007914 <SPI_WaitFlagStateUntilTimeout+0x5e>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007912:	d107      	bne.n	8007924 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800792c:	d10f      	bne.n	800794e <SPI_WaitFlagStateUntilTimeout+0x98>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800795e:	2303      	movs	r3, #3
 8007960:	e00f      	b.n	8007982 <SPI_WaitFlagStateUntilTimeout+0xcc>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	4013      	ands	r3, r2
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	429a      	cmp	r2, r3
 8007970:	bf0c      	ite	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	2300      	movne	r3, #0
 8007976:	b2db      	uxtb	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	429a      	cmp	r2, r3
 800797e:	d1a3      	bne.n	80078c8 <SPI_WaitFlagStateUntilTimeout+0x12>
 8007980:	2300      	movs	r3, #0
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <SPI_EndRxTransaction>:
 800798a:	b580      	push	{r7, lr}
 800798c:	b086      	sub	sp, #24
 800798e:	af02      	add	r7, sp, #8
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	607a      	str	r2, [r7, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800799e:	d111      	bne.n	80079c4 <SPI_EndRxTransaction+0x3a>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a8:	d004      	beq.n	80079b4 <SPI_EndRxTransaction+0x2a>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b2:	d107      	bne.n	80079c4 <SPI_EndRxTransaction+0x3a>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079cc:	d12a      	bne.n	8007a24 <SPI_EndRxTransaction+0x9a>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079d6:	d012      	beq.n	80079fe <SPI_EndRxTransaction+0x74>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2200      	movs	r2, #0
 80079e0:	2180      	movs	r1, #128	; 0x80
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f7ff ff67 	bl	80078b6 <SPI_WaitFlagStateUntilTimeout>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d02d      	beq.n	8007a4a <SPI_EndRxTransaction+0xc0>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	f043 0220 	orr.w	r2, r3, #32
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	655a      	str	r2, [r3, #84]	; 0x54
 80079fa:	2303      	movs	r3, #3
 80079fc:	e026      	b.n	8007a4c <SPI_EndRxTransaction+0xc2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2200      	movs	r2, #0
 8007a06:	2101      	movs	r1, #1
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f7ff ff54 	bl	80078b6 <SPI_WaitFlagStateUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d01a      	beq.n	8007a4a <SPI_EndRxTransaction+0xc0>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a18:	f043 0220 	orr.w	r2, r3, #32
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	655a      	str	r2, [r3, #84]	; 0x54
 8007a20:	2303      	movs	r3, #3
 8007a22:	e013      	b.n	8007a4c <SPI_EndRxTransaction+0xc2>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2101      	movs	r1, #1
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff ff41 	bl	80078b6 <SPI_WaitFlagStateUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <SPI_EndRxTransaction+0xc0>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f043 0220 	orr.w	r2, r3, #32
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	655a      	str	r2, [r3, #84]	; 0x54
 8007a46:	2303      	movs	r3, #3
 8007a48:	e000      	b.n	8007a4c <SPI_EndRxTransaction+0xc2>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <SPI_EndRxTxTransaction>:
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <SPI_EndRxTxTransaction+0x7c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1b      	ldr	r2, [pc, #108]	; (8007ad4 <SPI_EndRxTxTransaction+0x80>)
 8007a66:	fba2 2303 	umull	r2, r3, r2, r3
 8007a6a:	0d5b      	lsrs	r3, r3, #21
 8007a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a70:	fb02 f303 	mul.w	r3, r2, r3
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a7e:	d112      	bne.n	8007aa6 <SPI_EndRxTxTransaction+0x52>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2200      	movs	r2, #0
 8007a88:	2180      	movs	r1, #128	; 0x80
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7ff ff13 	bl	80078b6 <SPI_WaitFlagStateUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d016      	beq.n	8007ac4 <SPI_EndRxTxTransaction+0x70>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9a:	f043 0220 	orr.w	r2, r3, #32
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	655a      	str	r2, [r3, #84]	; 0x54
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e00f      	b.n	8007ac6 <SPI_EndRxTxTransaction+0x72>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <SPI_EndRxTxTransaction+0x6e>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007abc:	2b80      	cmp	r3, #128	; 0x80
 8007abe:	d0f2      	beq.n	8007aa6 <SPI_EndRxTxTransaction+0x52>
 8007ac0:	e000      	b.n	8007ac4 <SPI_EndRxTxTransaction+0x70>
 8007ac2:	bf00      	nop
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000000 	.word	0x20000000
 8007ad4:	165e9f81 	.word	0x165e9f81

08007ad8 <HAL_TIM_Base_Init>:
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <HAL_TIM_Base_Init+0x12>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e01d      	b.n	8007b26 <HAL_TIM_Base_Init+0x4e>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d106      	bne.n	8007b04 <HAL_TIM_Base_Init+0x2c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7fb fc70 	bl	80033e4 <HAL_TIM_Base_MspInit>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3304      	adds	r3, #4
 8007b14:	4619      	mov	r1, r3
 8007b16:	4610      	mov	r0, r2
 8007b18:	f000 fc22 	bl	8008360 <TIM_Base_SetConfig>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b24:	2300      	movs	r3, #0
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_TIM_Base_Start_IT>:
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0201 	orr.w	r2, r2, #1
 8007b44:	60da      	str	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b06      	cmp	r3, #6
 8007b56:	d007      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0x3a>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0201 	orr.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]
 8007b68:	2300      	movs	r3, #0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <HAL_TIM_Base_Stop_IT>:
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f022 0201 	bic.w	r2, r2, #1
 8007b8c:	60da      	str	r2, [r3, #12]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6a1a      	ldr	r2, [r3, #32]
 8007b94:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b98:	4013      	ands	r3, r2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10f      	bne.n	8007bbe <HAL_TIM_Base_Stop_IT+0x48>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6a1a      	ldr	r2, [r3, #32]
 8007ba4:	f240 4344 	movw	r3, #1092	; 0x444
 8007ba8:	4013      	ands	r3, r2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d107      	bne.n	8007bbe <HAL_TIM_Base_Stop_IT+0x48>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 0201 	bic.w	r2, r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_TIM_PWM_Init>:
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <HAL_TIM_PWM_Init+0x12>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e01d      	b.n	8007c1a <HAL_TIM_PWM_Init+0x4e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d106      	bne.n	8007bf8 <HAL_TIM_PWM_Init+0x2c>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f7fb fbd4 	bl	80033a0 <HAL_TIM_PWM_MspInit>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3304      	adds	r3, #4
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	f000 fba8 	bl	8008360 <TIM_Base_SetConfig>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c18:	2300      	movs	r3, #0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
	...

08007c24 <HAL_TIM_PWM_Start>:
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2201      	movs	r2, #1
 8007c34:	6839      	ldr	r1, [r7, #0]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fde2 	bl	8008800 <TIM_CCxChannelCmd>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a15      	ldr	r2, [pc, #84]	; (8007c98 <HAL_TIM_PWM_Start+0x74>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d004      	beq.n	8007c50 <HAL_TIM_PWM_Start+0x2c>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a14      	ldr	r2, [pc, #80]	; (8007c9c <HAL_TIM_PWM_Start+0x78>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d101      	bne.n	8007c54 <HAL_TIM_PWM_Start+0x30>
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <HAL_TIM_PWM_Start+0x32>
 8007c54:	2300      	movs	r3, #0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <HAL_TIM_PWM_Start+0x46>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c68:	645a      	str	r2, [r3, #68]	; 0x44
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b06      	cmp	r3, #6
 8007c7a:	d007      	beq.n	8007c8c <HAL_TIM_PWM_Start+0x68>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40010000 	.word	0x40010000
 8007c9c:	40010400 	.word	0x40010400

08007ca0 <HAL_TIM_PWM_Stop>:
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fda4 	bl	8008800 <TIM_CCxChannelCmd>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a22      	ldr	r2, [pc, #136]	; (8007d48 <HAL_TIM_PWM_Stop+0xa8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <HAL_TIM_PWM_Stop+0x2c>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a21      	ldr	r2, [pc, #132]	; (8007d4c <HAL_TIM_PWM_Stop+0xac>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d101      	bne.n	8007cd0 <HAL_TIM_PWM_Stop+0x30>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <HAL_TIM_PWM_Stop+0x32>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d017      	beq.n	8007d06 <HAL_TIM_PWM_Stop+0x66>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6a1a      	ldr	r2, [r3, #32]
 8007cdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10f      	bne.n	8007d06 <HAL_TIM_PWM_Stop+0x66>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6a1a      	ldr	r2, [r3, #32]
 8007cec:	f240 4344 	movw	r3, #1092	; 0x444
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d107      	bne.n	8007d06 <HAL_TIM_PWM_Stop+0x66>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d04:	645a      	str	r2, [r3, #68]	; 0x44
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	6a1a      	ldr	r2, [r3, #32]
 8007d0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10f      	bne.n	8007d36 <HAL_TIM_PWM_Stop+0x96>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6a1a      	ldr	r2, [r3, #32]
 8007d1c:	f240 4344 	movw	r3, #1092	; 0x444
 8007d20:	4013      	ands	r3, r2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d107      	bne.n	8007d36 <HAL_TIM_PWM_Stop+0x96>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 0201 	bic.w	r2, r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d3e:	2300      	movs	r3, #0
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40010000 	.word	0x40010000
 8007d4c:	40010400 	.word	0x40010400

08007d50 <HAL_TIM_Encoder_Init>:
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <HAL_TIM_Encoder_Init+0x14>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e083      	b.n	8007e6c <HAL_TIM_Encoder_Init+0x11c>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <HAL_TIM_Encoder_Init+0x2e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7fb fa83 	bl	8003284 <HAL_TIM_Encoder_MspInit>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6812      	ldr	r2, [r2, #0]
 8007d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d94:	f023 0307 	bic.w	r3, r3, #7
 8007d98:	6093      	str	r3, [r2, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f000 fadb 	bl	8008360 <TIM_Base_SetConfig>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	617b      	str	r3, [r7, #20]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	613b      	str	r3, [r7, #16]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	60fb      	str	r3, [r7, #12]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd2:	f023 0303 	bic.w	r3, r3, #3
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	021b      	lsls	r3, r3, #8
 8007de2:	4313      	orrs	r3, r2
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007df0:	f023 030c 	bic.w	r3, r3, #12
 8007df4:	613b      	str	r3, [r7, #16]
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e00:	613b      	str	r3, [r7, #16]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	011a      	lsls	r2, r3, #4
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	031b      	lsls	r3, r3, #12
 8007e20:	4313      	orrs	r3, r2
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	011b      	lsls	r3, r3, #4
 8007e42:	4313      	orrs	r3, r2
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	609a      	str	r2, [r3, #8]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	619a      	str	r2, [r3, #24]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	621a      	str	r2, [r3, #32]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_TIM_Encoder_Start>:
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <HAL_TIM_Encoder_Start+0x18>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d008      	beq.n	8007e9c <HAL_TIM_Encoder_Start+0x28>
 8007e8a:	e00f      	b.n	8007eac <HAL_TIM_Encoder_Start+0x38>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2201      	movs	r2, #1
 8007e92:	2100      	movs	r1, #0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fcb3 	bl	8008800 <TIM_CCxChannelCmd>
 8007e9a:	e016      	b.n	8007eca <HAL_TIM_Encoder_Start+0x56>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	2104      	movs	r1, #4
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f000 fcab 	bl	8008800 <TIM_CCxChannelCmd>
 8007eaa:	e00e      	b.n	8007eca <HAL_TIM_Encoder_Start+0x56>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fca3 	bl	8008800 <TIM_CCxChannelCmd>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	2104      	movs	r1, #4
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 fc9c 	bl	8008800 <TIM_CCxChannelCmd>
 8007ec8:	bf00      	nop
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	2300      	movs	r3, #0
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_TIM_Encoder_Stop>:
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <HAL_TIM_Encoder_Stop+0x18>
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d008      	beq.n	8007f0c <HAL_TIM_Encoder_Stop+0x28>
 8007efa:	e00f      	b.n	8007f1c <HAL_TIM_Encoder_Stop+0x38>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2200      	movs	r2, #0
 8007f02:	2100      	movs	r1, #0
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fc7b 	bl	8008800 <TIM_CCxChannelCmd>
 8007f0a:	e016      	b.n	8007f3a <HAL_TIM_Encoder_Stop+0x56>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2104      	movs	r1, #4
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fc73 	bl	8008800 <TIM_CCxChannelCmd>
 8007f1a:	e00e      	b.n	8007f3a <HAL_TIM_Encoder_Stop+0x56>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2200      	movs	r2, #0
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fc6b 	bl	8008800 <TIM_CCxChannelCmd>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2104      	movs	r1, #4
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fc64 	bl	8008800 <TIM_CCxChannelCmd>
 8007f38:	bf00      	nop
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6a1a      	ldr	r2, [r3, #32]
 8007f40:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f44:	4013      	ands	r3, r2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10f      	bne.n	8007f6a <HAL_TIM_Encoder_Stop+0x86>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6a1a      	ldr	r2, [r3, #32]
 8007f50:	f240 4344 	movw	r3, #1092	; 0x444
 8007f54:	4013      	ands	r3, r2
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d107      	bne.n	8007f6a <HAL_TIM_Encoder_Stop+0x86>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_TIM_IRQHandler>:
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d122      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x5c>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d11b      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0x5c>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0202 	mvn.w	r2, #2
 8007fa0:	611a      	str	r2, [r3, #16]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	771a      	strb	r2, [r3, #28]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_TIM_IRQHandler+0x4a>
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f9b4 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 8007fbc:	e005      	b.n	8007fca <HAL_TIM_IRQHandler+0x56>
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f9a6 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f9b7 	bl	8008338 <HAL_TIM_PWM_PulseFinishedCallback>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	771a      	strb	r2, [r3, #28]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d122      	bne.n	8008024 <HAL_TIM_IRQHandler+0xb0>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0304 	and.w	r3, r3, #4
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d11b      	bne.n	8008024 <HAL_TIM_IRQHandler+0xb0>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0204 	mvn.w	r2, #4
 8007ff4:	611a      	str	r2, [r3, #16]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	771a      	strb	r2, [r3, #28]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0x9e>
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f98a 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0xaa>
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f97c 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f98d 	bl	8008338 <HAL_TIM_PWM_PulseFinishedCallback>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 0308 	and.w	r3, r3, #8
 800802e:	2b08      	cmp	r3, #8
 8008030:	d122      	bne.n	8008078 <HAL_TIM_IRQHandler+0x104>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b08      	cmp	r3, #8
 800803e:	d11b      	bne.n	8008078 <HAL_TIM_IRQHandler+0x104>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0208 	mvn.w	r2, #8
 8008048:	611a      	str	r2, [r3, #16]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2204      	movs	r2, #4
 800804e:	771a      	strb	r2, [r3, #28]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	f003 0303 	and.w	r3, r3, #3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_TIM_IRQHandler+0xf2>
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f960 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 8008064:	e005      	b.n	8008072 <HAL_TIM_IRQHandler+0xfe>
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f952 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f963 	bl	8008338 <HAL_TIM_PWM_PulseFinishedCallback>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	771a      	strb	r2, [r3, #28]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0310 	and.w	r3, r3, #16
 8008082:	2b10      	cmp	r3, #16
 8008084:	d122      	bne.n	80080cc <HAL_TIM_IRQHandler+0x158>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f003 0310 	and.w	r3, r3, #16
 8008090:	2b10      	cmp	r3, #16
 8008092:	d11b      	bne.n	80080cc <HAL_TIM_IRQHandler+0x158>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0210 	mvn.w	r2, #16
 800809c:	611a      	str	r2, [r3, #16]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2208      	movs	r2, #8
 80080a2:	771a      	strb	r2, [r3, #28]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0x146>
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f936 	bl	8008324 <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0x152>
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f928 	bl	8008310 <HAL_TIM_OC_DelayElapsedCallback>
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f939 	bl	8008338 <HAL_TIM_PWM_PulseFinishedCallback>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d10e      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x184>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d107      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x184>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0201 	mvn.w	r2, #1
 80080f0:	611a      	str	r2, [r3, #16]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7f9 fec2 	bl	8001e7c <HAL_TIM_PeriodElapsedCallback>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	d10e      	bne.n	8008124 <HAL_TIM_IRQHandler+0x1b0>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008110:	2b80      	cmp	r3, #128	; 0x80
 8008112:	d107      	bne.n	8008124 <HAL_TIM_IRQHandler+0x1b0>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800811c:	611a      	str	r2, [r3, #16]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fc1a 	bl	8008958 <HAL_TIMEx_BreakCallback>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812e:	2b40      	cmp	r3, #64	; 0x40
 8008130:	d10e      	bne.n	8008150 <HAL_TIM_IRQHandler+0x1dc>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813c:	2b40      	cmp	r3, #64	; 0x40
 800813e:	d107      	bne.n	8008150 <HAL_TIM_IRQHandler+0x1dc>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008148:	611a      	str	r2, [r3, #16]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f8fe 	bl	800834c <HAL_TIM_TriggerCallback>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b20      	cmp	r3, #32
 800815c:	d10e      	bne.n	800817c <HAL_TIM_IRQHandler+0x208>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b20      	cmp	r3, #32
 800816a:	d107      	bne.n	800817c <HAL_TIM_IRQHandler+0x208>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f06f 0220 	mvn.w	r2, #32
 8008174:	611a      	str	r2, [r3, #16]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fbe4 	bl	8008944 <HAL_TIMEx_CommutCallback>
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_TIM_PWM_ConfigChannel>:
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800819a:	2302      	movs	r3, #2
 800819c:	e0b4      	b.n	8008308 <HAL_TIM_PWM_ConfigChannel+0x184>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b0c      	cmp	r3, #12
 80081b2:	f200 809f 	bhi.w	80082f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80081b6:	a201      	add	r2, pc, #4	; (adr r2, 80081bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	080081f1 	.word	0x080081f1
 80081c0:	080082f5 	.word	0x080082f5
 80081c4:	080082f5 	.word	0x080082f5
 80081c8:	080082f5 	.word	0x080082f5
 80081cc:	08008231 	.word	0x08008231
 80081d0:	080082f5 	.word	0x080082f5
 80081d4:	080082f5 	.word	0x080082f5
 80081d8:	080082f5 	.word	0x080082f5
 80081dc:	08008273 	.word	0x08008273
 80081e0:	080082f5 	.word	0x080082f5
 80081e4:	080082f5 	.word	0x080082f5
 80081e8:	080082f5 	.word	0x080082f5
 80081ec:	080082b3 	.word	0x080082b3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68b9      	ldr	r1, [r7, #8]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 f952 	bl	80084a0 <TIM_OC1_SetConfig>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699a      	ldr	r2, [r3, #24]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 0208 	orr.w	r2, r2, #8
 800820a:	619a      	str	r2, [r3, #24]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0204 	bic.w	r2, r2, #4
 800821a:	619a      	str	r2, [r3, #24]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6999      	ldr	r1, [r3, #24]
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	691a      	ldr	r2, [r3, #16]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	619a      	str	r2, [r3, #24]
 800822e:	e062      	b.n	80082f6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	4618      	mov	r0, r3
 8008238:	f000 f9a2 	bl	8008580 <TIM_OC2_SetConfig>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800824a:	619a      	str	r2, [r3, #24]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699a      	ldr	r2, [r3, #24]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800825a:	619a      	str	r2, [r3, #24]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6999      	ldr	r1, [r3, #24]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	021a      	lsls	r2, r3, #8
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	430a      	orrs	r2, r1
 800826e:	619a      	str	r2, [r3, #24]
 8008270:	e041      	b.n	80082f6 <HAL_TIM_PWM_ConfigChannel+0x172>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	4618      	mov	r0, r3
 800827a:	f000 f9f7 	bl	800866c <TIM_OC3_SetConfig>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69da      	ldr	r2, [r3, #28]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f042 0208 	orr.w	r2, r2, #8
 800828c:	61da      	str	r2, [r3, #28]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69da      	ldr	r2, [r3, #28]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0204 	bic.w	r2, r2, #4
 800829c:	61da      	str	r2, [r3, #28]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69d9      	ldr	r1, [r3, #28]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	691a      	ldr	r2, [r3, #16]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	61da      	str	r2, [r3, #28]
 80082b0:	e021      	b.n	80082f6 <HAL_TIM_PWM_ConfigChannel+0x172>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68b9      	ldr	r1, [r7, #8]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 fa4b 	bl	8008754 <TIM_OC4_SetConfig>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082cc:	61da      	str	r2, [r3, #28]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69da      	ldr	r2, [r3, #28]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082dc:	61da      	str	r2, [r3, #28]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69d9      	ldr	r1, [r3, #28]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	021a      	lsls	r2, r3, #8
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	61da      	str	r2, [r3, #28]
 80082f2:	e000      	b.n	80082f6 <HAL_TIM_PWM_ConfigChannel+0x172>
 80082f4:	bf00      	nop
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008306:	2300      	movs	r3, #0
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_TIM_OC_DelayElapsedCallback>:
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_TIM_IC_CaptureCallback>:
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_TIM_TriggerCallback>:
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <TIM_Base_SetConfig>:
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	60fb      	str	r3, [r7, #12]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a40      	ldr	r2, [pc, #256]	; (8008474 <TIM_Base_SetConfig+0x114>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d013      	beq.n	80083a0 <TIM_Base_SetConfig+0x40>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800837e:	d00f      	beq.n	80083a0 <TIM_Base_SetConfig+0x40>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a3d      	ldr	r2, [pc, #244]	; (8008478 <TIM_Base_SetConfig+0x118>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00b      	beq.n	80083a0 <TIM_Base_SetConfig+0x40>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a3c      	ldr	r2, [pc, #240]	; (800847c <TIM_Base_SetConfig+0x11c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d007      	beq.n	80083a0 <TIM_Base_SetConfig+0x40>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a3b      	ldr	r2, [pc, #236]	; (8008480 <TIM_Base_SetConfig+0x120>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_Base_SetConfig+0x40>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a3a      	ldr	r2, [pc, #232]	; (8008484 <TIM_Base_SetConfig+0x124>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d108      	bne.n	80083b2 <TIM_Base_SetConfig+0x52>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a2f      	ldr	r2, [pc, #188]	; (8008474 <TIM_Base_SetConfig+0x114>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d02b      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c0:	d027      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a2c      	ldr	r2, [pc, #176]	; (8008478 <TIM_Base_SetConfig+0x118>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d023      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a2b      	ldr	r2, [pc, #172]	; (800847c <TIM_Base_SetConfig+0x11c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01f      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a2a      	ldr	r2, [pc, #168]	; (8008480 <TIM_Base_SetConfig+0x120>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d01b      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a29      	ldr	r2, [pc, #164]	; (8008484 <TIM_Base_SetConfig+0x124>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d017      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a28      	ldr	r2, [pc, #160]	; (8008488 <TIM_Base_SetConfig+0x128>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d013      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a27      	ldr	r2, [pc, #156]	; (800848c <TIM_Base_SetConfig+0x12c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00f      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a26      	ldr	r2, [pc, #152]	; (8008490 <TIM_Base_SetConfig+0x130>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00b      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a25      	ldr	r2, [pc, #148]	; (8008494 <TIM_Base_SetConfig+0x134>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d007      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a24      	ldr	r2, [pc, #144]	; (8008498 <TIM_Base_SetConfig+0x138>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d003      	beq.n	8008412 <TIM_Base_SetConfig+0xb2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a23      	ldr	r2, [pc, #140]	; (800849c <TIM_Base_SetConfig+0x13c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d108      	bne.n	8008424 <TIM_Base_SetConfig+0xc4>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	4313      	orrs	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	4313      	orrs	r3, r2
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	629a      	str	r2, [r3, #40]	; 0x28
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a0a      	ldr	r2, [pc, #40]	; (8008474 <TIM_Base_SetConfig+0x114>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d003      	beq.n	8008458 <TIM_Base_SetConfig+0xf8>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a0c      	ldr	r2, [pc, #48]	; (8008484 <TIM_Base_SetConfig+0x124>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d103      	bne.n	8008460 <TIM_Base_SetConfig+0x100>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	691a      	ldr	r2, [r3, #16]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	631a      	str	r2, [r3, #48]	; 0x30
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	615a      	str	r2, [r3, #20]
 8008466:	bf00      	nop
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	40010000 	.word	0x40010000
 8008478:	40000400 	.word	0x40000400
 800847c:	40000800 	.word	0x40000800
 8008480:	40000c00 	.word	0x40000c00
 8008484:	40010400 	.word	0x40010400
 8008488:	40014000 	.word	0x40014000
 800848c:	40014400 	.word	0x40014400
 8008490:	40014800 	.word	0x40014800
 8008494:	40001800 	.word	0x40001800
 8008498:	40001c00 	.word	0x40001c00
 800849c:	40002000 	.word	0x40002000

080084a0 <TIM_OC1_SetConfig>:
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	f023 0201 	bic.w	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	621a      	str	r2, [r3, #32]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	60fb      	str	r3, [r7, #12]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f023 0303 	bic.w	r3, r3, #3
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f023 0302 	bic.w	r3, r3, #2
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a20      	ldr	r2, [pc, #128]	; (8008578 <TIM_OC1_SetConfig+0xd8>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d003      	beq.n	8008504 <TIM_OC1_SetConfig+0x64>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a1f      	ldr	r2, [pc, #124]	; (800857c <TIM_OC1_SetConfig+0xdc>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d10c      	bne.n	800851e <TIM_OC1_SetConfig+0x7e>
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f023 0308 	bic.w	r3, r3, #8
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	4313      	orrs	r3, r2
 8008514:	617b      	str	r3, [r7, #20]
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 0304 	bic.w	r3, r3, #4
 800851c:	617b      	str	r3, [r7, #20]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a15      	ldr	r2, [pc, #84]	; (8008578 <TIM_OC1_SetConfig+0xd8>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d003      	beq.n	800852e <TIM_OC1_SetConfig+0x8e>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a14      	ldr	r2, [pc, #80]	; (800857c <TIM_OC1_SetConfig+0xdc>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d111      	bne.n	8008552 <TIM_OC1_SetConfig+0xb2>
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800853c:	613b      	str	r3, [r7, #16]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	4313      	orrs	r3, r2
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	605a      	str	r2, [r3, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	619a      	str	r2, [r3, #24]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	635a      	str	r2, [r3, #52]	; 0x34
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	621a      	str	r2, [r3, #32]
 800856c:	bf00      	nop
 800856e:	371c      	adds	r7, #28
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	40010000 	.word	0x40010000
 800857c:	40010400 	.word	0x40010400

08008580 <TIM_OC2_SetConfig>:
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	f023 0210 	bic.w	r2, r3, #16
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	621a      	str	r2, [r3, #32]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	617b      	str	r3, [r7, #20]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	613b      	str	r3, [r7, #16]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	021b      	lsls	r3, r3, #8
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f023 0320 	bic.w	r3, r3, #32
 80085ca:	617b      	str	r3, [r7, #20]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a22      	ldr	r2, [pc, #136]	; (8008664 <TIM_OC2_SetConfig+0xe4>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d003      	beq.n	80085e8 <TIM_OC2_SetConfig+0x68>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a21      	ldr	r2, [pc, #132]	; (8008668 <TIM_OC2_SetConfig+0xe8>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d10d      	bne.n	8008604 <TIM_OC2_SetConfig+0x84>
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	011b      	lsls	r3, r3, #4
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008602:	617b      	str	r3, [r7, #20]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a17      	ldr	r2, [pc, #92]	; (8008664 <TIM_OC2_SetConfig+0xe4>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d003      	beq.n	8008614 <TIM_OC2_SetConfig+0x94>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a16      	ldr	r2, [pc, #88]	; (8008668 <TIM_OC2_SetConfig+0xe8>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d113      	bne.n	800863c <TIM_OC2_SetConfig+0xbc>
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008622:	613b      	str	r3, [r7, #16]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4313      	orrs	r3, r2
 800862e:	613b      	str	r3, [r7, #16]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	4313      	orrs	r3, r2
 800863a:	613b      	str	r3, [r7, #16]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	605a      	str	r2, [r3, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	619a      	str	r2, [r3, #24]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	639a      	str	r2, [r3, #56]	; 0x38
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	621a      	str	r2, [r3, #32]
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	40010000 	.word	0x40010000
 8008668:	40010400 	.word	0x40010400

0800866c <TIM_OC3_SetConfig>:
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6a1b      	ldr	r3, [r3, #32]
 800867a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	621a      	str	r2, [r3, #32]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	613b      	str	r3, [r7, #16]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 0303 	bic.w	r3, r3, #3
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086b4:	617b      	str	r3, [r7, #20]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	021b      	lsls	r3, r3, #8
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	4313      	orrs	r3, r2
 80086c0:	617b      	str	r3, [r7, #20]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a21      	ldr	r2, [pc, #132]	; (800874c <TIM_OC3_SetConfig+0xe0>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d003      	beq.n	80086d2 <TIM_OC3_SetConfig+0x66>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a20      	ldr	r2, [pc, #128]	; (8008750 <TIM_OC3_SetConfig+0xe4>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d10d      	bne.n	80086ee <TIM_OC3_SetConfig+0x82>
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086d8:	617b      	str	r3, [r7, #20]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	021b      	lsls	r3, r3, #8
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086ec:	617b      	str	r3, [r7, #20]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	4a16      	ldr	r2, [pc, #88]	; (800874c <TIM_OC3_SetConfig+0xe0>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d003      	beq.n	80086fe <TIM_OC3_SetConfig+0x92>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	4a15      	ldr	r2, [pc, #84]	; (8008750 <TIM_OC3_SetConfig+0xe4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d113      	bne.n	8008726 <TIM_OC3_SetConfig+0xba>
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008704:	613b      	str	r3, [r7, #16]
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800870c:	613b      	str	r3, [r7, #16]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	011b      	lsls	r3, r3, #4
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	4313      	orrs	r3, r2
 8008724:	613b      	str	r3, [r7, #16]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	605a      	str	r2, [r3, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	61da      	str	r2, [r3, #28]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	63da      	str	r2, [r3, #60]	; 0x3c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	621a      	str	r2, [r3, #32]
 8008740:	bf00      	nop
 8008742:	371c      	adds	r7, #28
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	40010000 	.word	0x40010000
 8008750:	40010400 	.word	0x40010400

08008754 <TIM_OC4_SetConfig>:
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a1b      	ldr	r3, [r3, #32]
 8008762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	621a      	str	r2, [r3, #32]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	021b      	lsls	r3, r3, #8
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4313      	orrs	r3, r2
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800879e:	613b      	str	r3, [r7, #16]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	031b      	lsls	r3, r3, #12
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a12      	ldr	r2, [pc, #72]	; (80087f8 <TIM_OC4_SetConfig+0xa4>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d003      	beq.n	80087bc <TIM_OC4_SetConfig+0x68>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a11      	ldr	r2, [pc, #68]	; (80087fc <TIM_OC4_SetConfig+0xa8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d109      	bne.n	80087d0 <TIM_OC4_SetConfig+0x7c>
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	019b      	lsls	r3, r3, #6
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	617b      	str	r3, [r7, #20]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	605a      	str	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	61da      	str	r2, [r3, #28]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	641a      	str	r2, [r3, #64]	; 0x40
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	621a      	str	r2, [r3, #32]
 80087ea:	bf00      	nop
 80087ec:	371c      	adds	r7, #28
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	40010000 	.word	0x40010000
 80087fc:	40010400 	.word	0x40010400

08008800 <TIM_CCxChannelCmd>:
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	2201      	movs	r2, #1
 8008814:	fa02 f303 	lsl.w	r3, r2, r3
 8008818:	617b      	str	r3, [r7, #20]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6a1a      	ldr	r2, [r3, #32]
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	43db      	mvns	r3, r3
 8008822:	401a      	ands	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	621a      	str	r2, [r3, #32]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6a1a      	ldr	r2, [r3, #32]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	f003 031f 	and.w	r3, r3, #31
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	fa01 f303 	lsl.w	r3, r1, r3
 8008838:	431a      	orrs	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	621a      	str	r2, [r3, #32]
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <HAL_TIMEx_MasterConfigSynchronization>:
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800885c:	2b01      	cmp	r3, #1
 800885e:	d101      	bne.n	8008864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008860:	2302      	movs	r3, #2
 8008862:	e05a      	b.n	800891a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	60bb      	str	r3, [r7, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	605a      	str	r2, [r3, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a21      	ldr	r2, [pc, #132]	; (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d022      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b0:	d01d      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a1d      	ldr	r2, [pc, #116]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d018      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1b      	ldr	r2, [pc, #108]	; (8008930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d013      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a1a      	ldr	r2, [pc, #104]	; (8008934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00e      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a18      	ldr	r2, [pc, #96]	; (8008938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d009      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a17      	ldr	r2, [pc, #92]	; (800893c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d004      	beq.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a15      	ldr	r2, [pc, #84]	; (8008940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d10c      	bne.n	8008908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f4:	60bb      	str	r3, [r7, #8]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60bb      	str	r3, [r7, #8]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	609a      	str	r2, [r3, #8]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008918:	2300      	movs	r3, #0
 800891a:	4618      	mov	r0, r3
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	40010000 	.word	0x40010000
 800892c:	40000400 	.word	0x40000400
 8008930:	40000800 	.word	0x40000800
 8008934:	40000c00 	.word	0x40000c00
 8008938:	40010400 	.word	0x40010400
 800893c:	40014000 	.word	0x40014000
 8008940:	40001800 	.word	0x40001800

08008944 <HAL_TIMEx_CommutCallback>:
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_TIMEx_BreakCallback>:
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_UART_Init>:
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_UART_Init+0x12>
 800897a:	2301      	movs	r3, #1
 800897c:	e03f      	b.n	80089fe <HAL_UART_Init+0x92>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_UART_Init+0x2c>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fa fdda 	bl	800354c <HAL_UART_MspInit>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2224      	movs	r2, #36	; 0x24
 800899c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68da      	ldr	r2, [r3, #12]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089ae:	60da      	str	r2, [r3, #12]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f90b 	bl	8008bcc <UART_SetConfig>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089c4:	611a      	str	r2, [r3, #16]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	695a      	ldr	r2, [r3, #20]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089d4:	615a      	str	r2, [r3, #20]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089e4:	60da      	str	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2220      	movs	r2, #32
 80089f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80089fc:	2300      	movs	r3, #0
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <HAL_UART_Transmit>:
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b088      	sub	sp, #32
 8008a0a:	af02      	add	r7, sp, #8
 8008a0c:	60f8      	str	r0, [r7, #12]
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	603b      	str	r3, [r7, #0]
 8008a12:	4613      	mov	r3, r2
 8008a14:	80fb      	strh	r3, [r7, #6]
 8008a16:	2300      	movs	r3, #0
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b20      	cmp	r3, #32
 8008a24:	f040 8083 	bne.w	8008b2e <HAL_UART_Transmit+0x128>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <HAL_UART_Transmit+0x2e>
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <HAL_UART_Transmit+0x32>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e07b      	b.n	8008b30 <HAL_UART_Transmit+0x12a>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d101      	bne.n	8008a46 <HAL_UART_Transmit+0x40>
 8008a42:	2302      	movs	r3, #2
 8008a44:	e074      	b.n	8008b30 <HAL_UART_Transmit+0x12a>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	63da      	str	r2, [r3, #60]	; 0x3c
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2221      	movs	r2, #33	; 0x21
 8008a58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008a5c:	f7fb ff3e 	bl	80048dc <HAL_GetTick>
 8008a60:	6178      	str	r0, [r7, #20]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	88fa      	ldrh	r2, [r7, #6]
 8008a66:	849a      	strh	r2, [r3, #36]	; 0x24
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	88fa      	ldrh	r2, [r7, #6]
 8008a6c:	84da      	strh	r2, [r3, #38]	; 0x26
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008a76:	e042      	b.n	8008afe <HAL_UART_Transmit+0xf8>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	84da      	strh	r2, [r3, #38]	; 0x26
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8e:	d122      	bne.n	8008ad6 <HAL_UART_Transmit+0xd0>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2200      	movs	r2, #0
 8008a98:	2180      	movs	r1, #128	; 0x80
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 f84c 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <HAL_UART_Transmit+0xa4>
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e042      	b.n	8008b30 <HAL_UART_Transmit+0x12a>
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	613b      	str	r3, [r7, #16]
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008abc:	605a      	str	r2, [r3, #4]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d103      	bne.n	8008ace <HAL_UART_Transmit+0xc8>
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	3302      	adds	r3, #2
 8008aca:	60bb      	str	r3, [r7, #8]
 8008acc:	e017      	b.n	8008afe <HAL_UART_Transmit+0xf8>
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	60bb      	str	r3, [r7, #8]
 8008ad4:	e013      	b.n	8008afe <HAL_UART_Transmit+0xf8>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2200      	movs	r2, #0
 8008ade:	2180      	movs	r1, #128	; 0x80
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 f829 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <HAL_UART_Transmit+0xea>
 8008aec:	2303      	movs	r3, #3
 8008aee:	e01f      	b.n	8008b30 <HAL_UART_Transmit+0x12a>
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	60ba      	str	r2, [r7, #8]
 8008af6:	781a      	ldrb	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	605a      	str	r2, [r3, #4]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1b7      	bne.n	8008a78 <HAL_UART_Transmit+0x72>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2140      	movs	r1, #64	; 0x40
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 f810 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <HAL_UART_Transmit+0x11c>
 8008b1e:	2303      	movs	r3, #3
 8008b20:	e006      	b.n	8008b30 <HAL_UART_Transmit+0x12a>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2220      	movs	r2, #32
 8008b26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e000      	b.n	8008b30 <HAL_UART_Transmit+0x12a>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <UART_WaitOnFlagUntilTimeout>:
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	4613      	mov	r3, r2
 8008b46:	71fb      	strb	r3, [r7, #7]
 8008b48:	e02c      	b.n	8008ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b50:	d028      	beq.n	8008ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d007      	beq.n	8008b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b58:	f7fb fec0 	bl	80048dc <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d21d      	bcs.n	8008ba4 <UART_WaitOnFlagUntilTimeout+0x6c>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b76:	60da      	str	r2, [r3, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	695a      	ldr	r2, [r3, #20]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f022 0201 	bic.w	r2, r2, #1
 8008b86:	615a      	str	r2, [r3, #20]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2220      	movs	r2, #32
 8008b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e00f      	b.n	8008bc4 <UART_WaitOnFlagUntilTimeout+0x8c>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	4013      	ands	r3, r2
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	bf0c      	ite	eq
 8008bb4:	2301      	moveq	r3, #1
 8008bb6:	2300      	movne	r3, #0
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	461a      	mov	r2, r3
 8008bbc:	79fb      	ldrb	r3, [r7, #7]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d0c3      	beq.n	8008b4a <UART_WaitOnFlagUntilTimeout+0x12>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <UART_SetConfig>:
 8008bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd0:	b0bd      	sub	sp, #244	; 0xf4
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8008bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be8:	68d9      	ldr	r1, [r3, #12]
 8008bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	ea40 0301 	orr.w	r3, r0, r1
 8008bf4:	6113      	str	r3, [r2, #16]
 8008bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	431a      	orrs	r2, r3
 8008c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c24:	f021 010c 	bic.w	r1, r1, #12
 8008c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008c32:	430b      	orrs	r3, r1
 8008c34:	60d3      	str	r3, [r2, #12]
 8008c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c46:	6999      	ldr	r1, [r3, #24]
 8008c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	ea40 0301 	orr.w	r3, r0, r1
 8008c52:	6153      	str	r3, [r2, #20]
 8008c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c5e:	f040 81a5 	bne.w	8008fac <UART_SetConfig+0x3e0>
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	4bcd      	ldr	r3, [pc, #820]	; (8008fa0 <UART_SetConfig+0x3d4>)
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d006      	beq.n	8008c7c <UART_SetConfig+0xb0>
 8008c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	4bcb      	ldr	r3, [pc, #812]	; (8008fa4 <UART_SetConfig+0x3d8>)
 8008c76:	429a      	cmp	r2, r3
 8008c78:	f040 80cb 	bne.w	8008e12 <UART_SetConfig+0x246>
 8008c7c:	f7fe f9c4 	bl	8007008 <HAL_RCC_GetPCLK2Freq>
 8008c80:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8008c84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c88:	461c      	mov	r4, r3
 8008c8a:	f04f 0500 	mov.w	r5, #0
 8008c8e:	4622      	mov	r2, r4
 8008c90:	462b      	mov	r3, r5
 8008c92:	1891      	adds	r1, r2, r2
 8008c94:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008c98:	415b      	adcs	r3, r3
 8008c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c9e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008ca2:	1912      	adds	r2, r2, r4
 8008ca4:	eb45 0303 	adc.w	r3, r5, r3
 8008ca8:	f04f 0000 	mov.w	r0, #0
 8008cac:	f04f 0100 	mov.w	r1, #0
 8008cb0:	00d9      	lsls	r1, r3, #3
 8008cb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cb6:	00d0      	lsls	r0, r2, #3
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	1911      	adds	r1, r2, r4
 8008cbe:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008cc2:	416b      	adcs	r3, r5
 8008cc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f04f 0300 	mov.w	r3, #0
 8008cd4:	1891      	adds	r1, r2, r2
 8008cd6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008cda:	415b      	adcs	r3, r3
 8008cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ce0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008ce4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008ce8:	f7f7 ffce 	bl	8000c88 <__aeabi_uldivmod>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4bad      	ldr	r3, [pc, #692]	; (8008fa8 <UART_SetConfig+0x3dc>)
 8008cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	011e      	lsls	r6, r3, #4
 8008cfa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008cfe:	461c      	mov	r4, r3
 8008d00:	f04f 0500 	mov.w	r5, #0
 8008d04:	4622      	mov	r2, r4
 8008d06:	462b      	mov	r3, r5
 8008d08:	1891      	adds	r1, r2, r2
 8008d0a:	67b9      	str	r1, [r7, #120]	; 0x78
 8008d0c:	415b      	adcs	r3, r3
 8008d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d10:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008d14:	1912      	adds	r2, r2, r4
 8008d16:	eb45 0303 	adc.w	r3, r5, r3
 8008d1a:	f04f 0000 	mov.w	r0, #0
 8008d1e:	f04f 0100 	mov.w	r1, #0
 8008d22:	00d9      	lsls	r1, r3, #3
 8008d24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d28:	00d0      	lsls	r0, r2, #3
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	1911      	adds	r1, r2, r4
 8008d30:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008d34:	416b      	adcs	r3, r5
 8008d36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	461a      	mov	r2, r3
 8008d42:	f04f 0300 	mov.w	r3, #0
 8008d46:	1891      	adds	r1, r2, r2
 8008d48:	6739      	str	r1, [r7, #112]	; 0x70
 8008d4a:	415b      	adcs	r3, r3
 8008d4c:	677b      	str	r3, [r7, #116]	; 0x74
 8008d4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008d52:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008d56:	f7f7 ff97 	bl	8000c88 <__aeabi_uldivmod>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4b92      	ldr	r3, [pc, #584]	; (8008fa8 <UART_SetConfig+0x3dc>)
 8008d60:	fba3 1302 	umull	r1, r3, r3, r2
 8008d64:	095b      	lsrs	r3, r3, #5
 8008d66:	2164      	movs	r1, #100	; 0x64
 8008d68:	fb01 f303 	mul.w	r3, r1, r3
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	3332      	adds	r3, #50	; 0x32
 8008d72:	4a8d      	ldr	r2, [pc, #564]	; (8008fa8 <UART_SetConfig+0x3dc>)
 8008d74:	fba2 2303 	umull	r2, r3, r2, r3
 8008d78:	095b      	lsrs	r3, r3, #5
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d80:	441e      	add	r6, r3
 8008d82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d86:	4618      	mov	r0, r3
 8008d88:	f04f 0100 	mov.w	r1, #0
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	1894      	adds	r4, r2, r2
 8008d92:	66bc      	str	r4, [r7, #104]	; 0x68
 8008d94:	415b      	adcs	r3, r3
 8008d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d98:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008d9c:	1812      	adds	r2, r2, r0
 8008d9e:	eb41 0303 	adc.w	r3, r1, r3
 8008da2:	f04f 0400 	mov.w	r4, #0
 8008da6:	f04f 0500 	mov.w	r5, #0
 8008daa:	00dd      	lsls	r5, r3, #3
 8008dac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008db0:	00d4      	lsls	r4, r2, #3
 8008db2:	4622      	mov	r2, r4
 8008db4:	462b      	mov	r3, r5
 8008db6:	1814      	adds	r4, r2, r0
 8008db8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008dbc:	414b      	adcs	r3, r1
 8008dbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	1891      	adds	r1, r2, r2
 8008dd0:	6639      	str	r1, [r7, #96]	; 0x60
 8008dd2:	415b      	adcs	r3, r3
 8008dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8008dd6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008dde:	f7f7 ff53 	bl	8000c88 <__aeabi_uldivmod>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4b70      	ldr	r3, [pc, #448]	; (8008fa8 <UART_SetConfig+0x3dc>)
 8008de8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dec:	095b      	lsrs	r3, r3, #5
 8008dee:	2164      	movs	r1, #100	; 0x64
 8008df0:	fb01 f303 	mul.w	r3, r1, r3
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	3332      	adds	r3, #50	; 0x32
 8008dfa:	4a6b      	ldr	r2, [pc, #428]	; (8008fa8 <UART_SetConfig+0x3dc>)
 8008dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008e00:	095b      	lsrs	r3, r3, #5
 8008e02:	f003 0207 	and.w	r2, r3, #7
 8008e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4432      	add	r2, r6
 8008e0e:	609a      	str	r2, [r3, #8]
 8008e10:	e26d      	b.n	80092ee <UART_SetConfig+0x722>
 8008e12:	f7fe f8e5 	bl	8006fe0 <HAL_RCC_GetPCLK1Freq>
 8008e16:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8008e1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e1e:	461c      	mov	r4, r3
 8008e20:	f04f 0500 	mov.w	r5, #0
 8008e24:	4622      	mov	r2, r4
 8008e26:	462b      	mov	r3, r5
 8008e28:	1891      	adds	r1, r2, r2
 8008e2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e2c:	415b      	adcs	r3, r3
 8008e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e30:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e34:	1912      	adds	r2, r2, r4
 8008e36:	eb45 0303 	adc.w	r3, r5, r3
 8008e3a:	f04f 0000 	mov.w	r0, #0
 8008e3e:	f04f 0100 	mov.w	r1, #0
 8008e42:	00d9      	lsls	r1, r3, #3
 8008e44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e48:	00d0      	lsls	r0, r2, #3
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	1911      	adds	r1, r2, r4
 8008e50:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008e54:	416b      	adcs	r3, r5
 8008e56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	461a      	mov	r2, r3
 8008e62:	f04f 0300 	mov.w	r3, #0
 8008e66:	1891      	adds	r1, r2, r2
 8008e68:	6539      	str	r1, [r7, #80]	; 0x50
 8008e6a:	415b      	adcs	r3, r3
 8008e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8008e6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e72:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008e76:	f7f7 ff07 	bl	8000c88 <__aeabi_uldivmod>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4b4a      	ldr	r3, [pc, #296]	; (8008fa8 <UART_SetConfig+0x3dc>)
 8008e80:	fba3 2302 	umull	r2, r3, r3, r2
 8008e84:	095b      	lsrs	r3, r3, #5
 8008e86:	011e      	lsls	r6, r3, #4
 8008e88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e8c:	461c      	mov	r4, r3
 8008e8e:	f04f 0500 	mov.w	r5, #0
 8008e92:	4622      	mov	r2, r4
 8008e94:	462b      	mov	r3, r5
 8008e96:	1891      	adds	r1, r2, r2
 8008e98:	64b9      	str	r1, [r7, #72]	; 0x48
 8008e9a:	415b      	adcs	r3, r3
 8008e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e9e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ea2:	1912      	adds	r2, r2, r4
 8008ea4:	eb45 0303 	adc.w	r3, r5, r3
 8008ea8:	f04f 0000 	mov.w	r0, #0
 8008eac:	f04f 0100 	mov.w	r1, #0
 8008eb0:	00d9      	lsls	r1, r3, #3
 8008eb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008eb6:	00d0      	lsls	r0, r2, #3
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	1911      	adds	r1, r2, r4
 8008ebe:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008ec2:	416b      	adcs	r3, r5
 8008ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f04f 0300 	mov.w	r3, #0
 8008ed4:	1891      	adds	r1, r2, r2
 8008ed6:	6439      	str	r1, [r7, #64]	; 0x40
 8008ed8:	415b      	adcs	r3, r3
 8008eda:	647b      	str	r3, [r7, #68]	; 0x44
 8008edc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ee0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008ee4:	f7f7 fed0 	bl	8000c88 <__aeabi_uldivmod>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	460b      	mov	r3, r1
 8008eec:	4b2e      	ldr	r3, [pc, #184]	; (8008fa8 <UART_SetConfig+0x3dc>)
 8008eee:	fba3 1302 	umull	r1, r3, r3, r2
 8008ef2:	095b      	lsrs	r3, r3, #5
 8008ef4:	2164      	movs	r1, #100	; 0x64
 8008ef6:	fb01 f303 	mul.w	r3, r1, r3
 8008efa:	1ad3      	subs	r3, r2, r3
 8008efc:	00db      	lsls	r3, r3, #3
 8008efe:	3332      	adds	r3, #50	; 0x32
 8008f00:	4a29      	ldr	r2, [pc, #164]	; (8008fa8 <UART_SetConfig+0x3dc>)
 8008f02:	fba2 2303 	umull	r2, r3, r2, r3
 8008f06:	095b      	lsrs	r3, r3, #5
 8008f08:	005b      	lsls	r3, r3, #1
 8008f0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f0e:	441e      	add	r6, r3
 8008f10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f14:	4618      	mov	r0, r3
 8008f16:	f04f 0100 	mov.w	r1, #0
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	1894      	adds	r4, r2, r2
 8008f20:	63bc      	str	r4, [r7, #56]	; 0x38
 8008f22:	415b      	adcs	r3, r3
 8008f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f26:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f2a:	1812      	adds	r2, r2, r0
 8008f2c:	eb41 0303 	adc.w	r3, r1, r3
 8008f30:	f04f 0400 	mov.w	r4, #0
 8008f34:	f04f 0500 	mov.w	r5, #0
 8008f38:	00dd      	lsls	r5, r3, #3
 8008f3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f3e:	00d4      	lsls	r4, r2, #3
 8008f40:	4622      	mov	r2, r4
 8008f42:	462b      	mov	r3, r5
 8008f44:	1814      	adds	r4, r2, r0
 8008f46:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008f4a:	414b      	adcs	r3, r1
 8008f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	461a      	mov	r2, r3
 8008f58:	f04f 0300 	mov.w	r3, #0
 8008f5c:	1891      	adds	r1, r2, r2
 8008f5e:	6339      	str	r1, [r7, #48]	; 0x30
 8008f60:	415b      	adcs	r3, r3
 8008f62:	637b      	str	r3, [r7, #52]	; 0x34
 8008f64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008f68:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008f6c:	f7f7 fe8c 	bl	8000c88 <__aeabi_uldivmod>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4b0c      	ldr	r3, [pc, #48]	; (8008fa8 <UART_SetConfig+0x3dc>)
 8008f76:	fba3 1302 	umull	r1, r3, r3, r2
 8008f7a:	095b      	lsrs	r3, r3, #5
 8008f7c:	2164      	movs	r1, #100	; 0x64
 8008f7e:	fb01 f303 	mul.w	r3, r1, r3
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	00db      	lsls	r3, r3, #3
 8008f86:	3332      	adds	r3, #50	; 0x32
 8008f88:	4a07      	ldr	r2, [pc, #28]	; (8008fa8 <UART_SetConfig+0x3dc>)
 8008f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f8e:	095b      	lsrs	r3, r3, #5
 8008f90:	f003 0207 	and.w	r2, r3, #7
 8008f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4432      	add	r2, r6
 8008f9c:	609a      	str	r2, [r3, #8]
 8008f9e:	e1a6      	b.n	80092ee <UART_SetConfig+0x722>
 8008fa0:	40011000 	.word	0x40011000
 8008fa4:	40011400 	.word	0x40011400
 8008fa8:	51eb851f 	.word	0x51eb851f
 8008fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4bd1      	ldr	r3, [pc, #836]	; (80092f8 <UART_SetConfig+0x72c>)
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d006      	beq.n	8008fc6 <UART_SetConfig+0x3fa>
 8008fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	4bcf      	ldr	r3, [pc, #828]	; (80092fc <UART_SetConfig+0x730>)
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	f040 80ca 	bne.w	800915a <UART_SetConfig+0x58e>
 8008fc6:	f7fe f81f 	bl	8007008 <HAL_RCC_GetPCLK2Freq>
 8008fca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8008fce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fd2:	461c      	mov	r4, r3
 8008fd4:	f04f 0500 	mov.w	r5, #0
 8008fd8:	4622      	mov	r2, r4
 8008fda:	462b      	mov	r3, r5
 8008fdc:	1891      	adds	r1, r2, r2
 8008fde:	62b9      	str	r1, [r7, #40]	; 0x28
 8008fe0:	415b      	adcs	r3, r3
 8008fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fe4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fe8:	1912      	adds	r2, r2, r4
 8008fea:	eb45 0303 	adc.w	r3, r5, r3
 8008fee:	f04f 0000 	mov.w	r0, #0
 8008ff2:	f04f 0100 	mov.w	r1, #0
 8008ff6:	00d9      	lsls	r1, r3, #3
 8008ff8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ffc:	00d0      	lsls	r0, r2, #3
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	eb12 0a04 	adds.w	sl, r2, r4
 8009006:	eb43 0b05 	adc.w	fp, r3, r5
 800900a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	4618      	mov	r0, r3
 8009012:	f04f 0100 	mov.w	r1, #0
 8009016:	f04f 0200 	mov.w	r2, #0
 800901a:	f04f 0300 	mov.w	r3, #0
 800901e:	008b      	lsls	r3, r1, #2
 8009020:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009024:	0082      	lsls	r2, r0, #2
 8009026:	4650      	mov	r0, sl
 8009028:	4659      	mov	r1, fp
 800902a:	f7f7 fe2d 	bl	8000c88 <__aeabi_uldivmod>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4bb3      	ldr	r3, [pc, #716]	; (8009300 <UART_SetConfig+0x734>)
 8009034:	fba3 2302 	umull	r2, r3, r3, r2
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	011e      	lsls	r6, r3, #4
 800903c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009040:	4618      	mov	r0, r3
 8009042:	f04f 0100 	mov.w	r1, #0
 8009046:	4602      	mov	r2, r0
 8009048:	460b      	mov	r3, r1
 800904a:	1894      	adds	r4, r2, r2
 800904c:	623c      	str	r4, [r7, #32]
 800904e:	415b      	adcs	r3, r3
 8009050:	627b      	str	r3, [r7, #36]	; 0x24
 8009052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009056:	1812      	adds	r2, r2, r0
 8009058:	eb41 0303 	adc.w	r3, r1, r3
 800905c:	f04f 0400 	mov.w	r4, #0
 8009060:	f04f 0500 	mov.w	r5, #0
 8009064:	00dd      	lsls	r5, r3, #3
 8009066:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800906a:	00d4      	lsls	r4, r2, #3
 800906c:	4622      	mov	r2, r4
 800906e:	462b      	mov	r3, r5
 8009070:	1814      	adds	r4, r2, r0
 8009072:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009076:	414b      	adcs	r3, r1
 8009078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800907c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	4618      	mov	r0, r3
 8009084:	f04f 0100 	mov.w	r1, #0
 8009088:	f04f 0200 	mov.w	r2, #0
 800908c:	f04f 0300 	mov.w	r3, #0
 8009090:	008b      	lsls	r3, r1, #2
 8009092:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009096:	0082      	lsls	r2, r0, #2
 8009098:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800909c:	f7f7 fdf4 	bl	8000c88 <__aeabi_uldivmod>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4b96      	ldr	r3, [pc, #600]	; (8009300 <UART_SetConfig+0x734>)
 80090a6:	fba3 1302 	umull	r1, r3, r3, r2
 80090aa:	095b      	lsrs	r3, r3, #5
 80090ac:	2164      	movs	r1, #100	; 0x64
 80090ae:	fb01 f303 	mul.w	r3, r1, r3
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	3332      	adds	r3, #50	; 0x32
 80090b8:	4a91      	ldr	r2, [pc, #580]	; (8009300 <UART_SetConfig+0x734>)
 80090ba:	fba2 2303 	umull	r2, r3, r2, r3
 80090be:	095b      	lsrs	r3, r3, #5
 80090c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090c4:	441e      	add	r6, r3
 80090c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090ca:	4618      	mov	r0, r3
 80090cc:	f04f 0100 	mov.w	r1, #0
 80090d0:	4602      	mov	r2, r0
 80090d2:	460b      	mov	r3, r1
 80090d4:	1894      	adds	r4, r2, r2
 80090d6:	61bc      	str	r4, [r7, #24]
 80090d8:	415b      	adcs	r3, r3
 80090da:	61fb      	str	r3, [r7, #28]
 80090dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090e0:	1812      	adds	r2, r2, r0
 80090e2:	eb41 0303 	adc.w	r3, r1, r3
 80090e6:	f04f 0400 	mov.w	r4, #0
 80090ea:	f04f 0500 	mov.w	r5, #0
 80090ee:	00dd      	lsls	r5, r3, #3
 80090f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80090f4:	00d4      	lsls	r4, r2, #3
 80090f6:	4622      	mov	r2, r4
 80090f8:	462b      	mov	r3, r5
 80090fa:	1814      	adds	r4, r2, r0
 80090fc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009100:	414b      	adcs	r3, r1
 8009102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4618      	mov	r0, r3
 800910e:	f04f 0100 	mov.w	r1, #0
 8009112:	f04f 0200 	mov.w	r2, #0
 8009116:	f04f 0300 	mov.w	r3, #0
 800911a:	008b      	lsls	r3, r1, #2
 800911c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009120:	0082      	lsls	r2, r0, #2
 8009122:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009126:	f7f7 fdaf 	bl	8000c88 <__aeabi_uldivmod>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4b74      	ldr	r3, [pc, #464]	; (8009300 <UART_SetConfig+0x734>)
 8009130:	fba3 1302 	umull	r1, r3, r3, r2
 8009134:	095b      	lsrs	r3, r3, #5
 8009136:	2164      	movs	r1, #100	; 0x64
 8009138:	fb01 f303 	mul.w	r3, r1, r3
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	3332      	adds	r3, #50	; 0x32
 8009142:	4a6f      	ldr	r2, [pc, #444]	; (8009300 <UART_SetConfig+0x734>)
 8009144:	fba2 2303 	umull	r2, r3, r2, r3
 8009148:	095b      	lsrs	r3, r3, #5
 800914a:	f003 020f 	and.w	r2, r3, #15
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4432      	add	r2, r6
 8009156:	609a      	str	r2, [r3, #8]
 8009158:	e0c9      	b.n	80092ee <UART_SetConfig+0x722>
 800915a:	f7fd ff41 	bl	8006fe0 <HAL_RCC_GetPCLK1Freq>
 800915e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8009162:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009166:	461c      	mov	r4, r3
 8009168:	f04f 0500 	mov.w	r5, #0
 800916c:	4622      	mov	r2, r4
 800916e:	462b      	mov	r3, r5
 8009170:	1891      	adds	r1, r2, r2
 8009172:	6139      	str	r1, [r7, #16]
 8009174:	415b      	adcs	r3, r3
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800917c:	1912      	adds	r2, r2, r4
 800917e:	eb45 0303 	adc.w	r3, r5, r3
 8009182:	f04f 0000 	mov.w	r0, #0
 8009186:	f04f 0100 	mov.w	r1, #0
 800918a:	00d9      	lsls	r1, r3, #3
 800918c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009190:	00d0      	lsls	r0, r2, #3
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	eb12 0804 	adds.w	r8, r2, r4
 800919a:	eb43 0905 	adc.w	r9, r3, r5
 800919e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f04f 0100 	mov.w	r1, #0
 80091aa:	f04f 0200 	mov.w	r2, #0
 80091ae:	f04f 0300 	mov.w	r3, #0
 80091b2:	008b      	lsls	r3, r1, #2
 80091b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80091b8:	0082      	lsls	r2, r0, #2
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	f7f7 fd63 	bl	8000c88 <__aeabi_uldivmod>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4b4e      	ldr	r3, [pc, #312]	; (8009300 <UART_SetConfig+0x734>)
 80091c8:	fba3 2302 	umull	r2, r3, r3, r2
 80091cc:	095b      	lsrs	r3, r3, #5
 80091ce:	011e      	lsls	r6, r3, #4
 80091d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091d4:	4618      	mov	r0, r3
 80091d6:	f04f 0100 	mov.w	r1, #0
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	1894      	adds	r4, r2, r2
 80091e0:	60bc      	str	r4, [r7, #8]
 80091e2:	415b      	adcs	r3, r3
 80091e4:	60fb      	str	r3, [r7, #12]
 80091e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091ea:	1812      	adds	r2, r2, r0
 80091ec:	eb41 0303 	adc.w	r3, r1, r3
 80091f0:	f04f 0400 	mov.w	r4, #0
 80091f4:	f04f 0500 	mov.w	r5, #0
 80091f8:	00dd      	lsls	r5, r3, #3
 80091fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091fe:	00d4      	lsls	r4, r2, #3
 8009200:	4622      	mov	r2, r4
 8009202:	462b      	mov	r3, r5
 8009204:	1814      	adds	r4, r2, r0
 8009206:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800920a:	414b      	adcs	r3, r1
 800920c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	4618      	mov	r0, r3
 8009218:	f04f 0100 	mov.w	r1, #0
 800921c:	f04f 0200 	mov.w	r2, #0
 8009220:	f04f 0300 	mov.w	r3, #0
 8009224:	008b      	lsls	r3, r1, #2
 8009226:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800922a:	0082      	lsls	r2, r0, #2
 800922c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009230:	f7f7 fd2a 	bl	8000c88 <__aeabi_uldivmod>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4b31      	ldr	r3, [pc, #196]	; (8009300 <UART_SetConfig+0x734>)
 800923a:	fba3 1302 	umull	r1, r3, r3, r2
 800923e:	095b      	lsrs	r3, r3, #5
 8009240:	2164      	movs	r1, #100	; 0x64
 8009242:	fb01 f303 	mul.w	r3, r1, r3
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	3332      	adds	r3, #50	; 0x32
 800924c:	4a2c      	ldr	r2, [pc, #176]	; (8009300 <UART_SetConfig+0x734>)
 800924e:	fba2 2303 	umull	r2, r3, r2, r3
 8009252:	095b      	lsrs	r3, r3, #5
 8009254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009258:	441e      	add	r6, r3
 800925a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800925e:	4618      	mov	r0, r3
 8009260:	f04f 0100 	mov.w	r1, #0
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	1894      	adds	r4, r2, r2
 800926a:	603c      	str	r4, [r7, #0]
 800926c:	415b      	adcs	r3, r3
 800926e:	607b      	str	r3, [r7, #4]
 8009270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009274:	1812      	adds	r2, r2, r0
 8009276:	eb41 0303 	adc.w	r3, r1, r3
 800927a:	f04f 0400 	mov.w	r4, #0
 800927e:	f04f 0500 	mov.w	r5, #0
 8009282:	00dd      	lsls	r5, r3, #3
 8009284:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009288:	00d4      	lsls	r4, r2, #3
 800928a:	4622      	mov	r2, r4
 800928c:	462b      	mov	r3, r5
 800928e:	1814      	adds	r4, r2, r0
 8009290:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009294:	414b      	adcs	r3, r1
 8009296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800929a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f04f 0100 	mov.w	r1, #0
 80092a6:	f04f 0200 	mov.w	r2, #0
 80092aa:	f04f 0300 	mov.w	r3, #0
 80092ae:	008b      	lsls	r3, r1, #2
 80092b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80092b4:	0082      	lsls	r2, r0, #2
 80092b6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80092ba:	f7f7 fce5 	bl	8000c88 <__aeabi_uldivmod>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <UART_SetConfig+0x734>)
 80092c4:	fba3 1302 	umull	r1, r3, r3, r2
 80092c8:	095b      	lsrs	r3, r3, #5
 80092ca:	2164      	movs	r1, #100	; 0x64
 80092cc:	fb01 f303 	mul.w	r3, r1, r3
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	011b      	lsls	r3, r3, #4
 80092d4:	3332      	adds	r3, #50	; 0x32
 80092d6:	4a0a      	ldr	r2, [pc, #40]	; (8009300 <UART_SetConfig+0x734>)
 80092d8:	fba2 2303 	umull	r2, r3, r2, r3
 80092dc:	095b      	lsrs	r3, r3, #5
 80092de:	f003 020f 	and.w	r2, r3, #15
 80092e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4432      	add	r2, r6
 80092ea:	609a      	str	r2, [r3, #8]
 80092ec:	e7ff      	b.n	80092ee <UART_SetConfig+0x722>
 80092ee:	bf00      	nop
 80092f0:	37f4      	adds	r7, #244	; 0xf4
 80092f2:	46bd      	mov	sp, r7
 80092f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f8:	40011000 	.word	0x40011000
 80092fc:	40011400 	.word	0x40011400
 8009300:	51eb851f 	.word	0x51eb851f

08009304 <__errno>:
 8009304:	4b01      	ldr	r3, [pc, #4]	; (800930c <__errno+0x8>)
 8009306:	6818      	ldr	r0, [r3, #0]
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	2000000c 	.word	0x2000000c

08009310 <__libc_init_array>:
 8009310:	b570      	push	{r4, r5, r6, lr}
 8009312:	4d0d      	ldr	r5, [pc, #52]	; (8009348 <__libc_init_array+0x38>)
 8009314:	4c0d      	ldr	r4, [pc, #52]	; (800934c <__libc_init_array+0x3c>)
 8009316:	1b64      	subs	r4, r4, r5
 8009318:	10a4      	asrs	r4, r4, #2
 800931a:	2600      	movs	r6, #0
 800931c:	42a6      	cmp	r6, r4
 800931e:	d109      	bne.n	8009334 <__libc_init_array+0x24>
 8009320:	4d0b      	ldr	r5, [pc, #44]	; (8009350 <__libc_init_array+0x40>)
 8009322:	4c0c      	ldr	r4, [pc, #48]	; (8009354 <__libc_init_array+0x44>)
 8009324:	f004 fcd2 	bl	800dccc <_init>
 8009328:	1b64      	subs	r4, r4, r5
 800932a:	10a4      	asrs	r4, r4, #2
 800932c:	2600      	movs	r6, #0
 800932e:	42a6      	cmp	r6, r4
 8009330:	d105      	bne.n	800933e <__libc_init_array+0x2e>
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	f855 3b04 	ldr.w	r3, [r5], #4
 8009338:	4798      	blx	r3
 800933a:	3601      	adds	r6, #1
 800933c:	e7ee      	b.n	800931c <__libc_init_array+0xc>
 800933e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009342:	4798      	blx	r3
 8009344:	3601      	adds	r6, #1
 8009346:	e7f2      	b.n	800932e <__libc_init_array+0x1e>
 8009348:	0800ea14 	.word	0x0800ea14
 800934c:	0800ea14 	.word	0x0800ea14
 8009350:	0800ea14 	.word	0x0800ea14
 8009354:	0800ea18 	.word	0x0800ea18

08009358 <memcpy>:
 8009358:	440a      	add	r2, r1
 800935a:	4291      	cmp	r1, r2
 800935c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009360:	d100      	bne.n	8009364 <memcpy+0xc>
 8009362:	4770      	bx	lr
 8009364:	b510      	push	{r4, lr}
 8009366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800936a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800936e:	4291      	cmp	r1, r2
 8009370:	d1f9      	bne.n	8009366 <memcpy+0xe>
 8009372:	bd10      	pop	{r4, pc}

08009374 <memset>:
 8009374:	4402      	add	r2, r0
 8009376:	4603      	mov	r3, r0
 8009378:	4293      	cmp	r3, r2
 800937a:	d100      	bne.n	800937e <memset+0xa>
 800937c:	4770      	bx	lr
 800937e:	f803 1b01 	strb.w	r1, [r3], #1
 8009382:	e7f9      	b.n	8009378 <memset+0x4>

08009384 <__cvt>:
 8009384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	ec55 4b10 	vmov	r4, r5, d0
 800938c:	2d00      	cmp	r5, #0
 800938e:	460e      	mov	r6, r1
 8009390:	4619      	mov	r1, r3
 8009392:	462b      	mov	r3, r5
 8009394:	bfbb      	ittet	lt
 8009396:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800939a:	461d      	movlt	r5, r3
 800939c:	2300      	movge	r3, #0
 800939e:	232d      	movlt	r3, #45	; 0x2d
 80093a0:	700b      	strb	r3, [r1, #0]
 80093a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093a8:	4691      	mov	r9, r2
 80093aa:	f023 0820 	bic.w	r8, r3, #32
 80093ae:	bfbc      	itt	lt
 80093b0:	4622      	movlt	r2, r4
 80093b2:	4614      	movlt	r4, r2
 80093b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093b8:	d005      	beq.n	80093c6 <__cvt+0x42>
 80093ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80093be:	d100      	bne.n	80093c2 <__cvt+0x3e>
 80093c0:	3601      	adds	r6, #1
 80093c2:	2102      	movs	r1, #2
 80093c4:	e000      	b.n	80093c8 <__cvt+0x44>
 80093c6:	2103      	movs	r1, #3
 80093c8:	ab03      	add	r3, sp, #12
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	ab02      	add	r3, sp, #8
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	ec45 4b10 	vmov	d0, r4, r5
 80093d4:	4653      	mov	r3, sl
 80093d6:	4632      	mov	r2, r6
 80093d8:	f001 ff02 	bl	800b1e0 <_dtoa_r>
 80093dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80093e0:	4607      	mov	r7, r0
 80093e2:	d102      	bne.n	80093ea <__cvt+0x66>
 80093e4:	f019 0f01 	tst.w	r9, #1
 80093e8:	d022      	beq.n	8009430 <__cvt+0xac>
 80093ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093ee:	eb07 0906 	add.w	r9, r7, r6
 80093f2:	d110      	bne.n	8009416 <__cvt+0x92>
 80093f4:	783b      	ldrb	r3, [r7, #0]
 80093f6:	2b30      	cmp	r3, #48	; 0x30
 80093f8:	d10a      	bne.n	8009410 <__cvt+0x8c>
 80093fa:	2200      	movs	r2, #0
 80093fc:	2300      	movs	r3, #0
 80093fe:	4620      	mov	r0, r4
 8009400:	4629      	mov	r1, r5
 8009402:	f7f7 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8009406:	b918      	cbnz	r0, 8009410 <__cvt+0x8c>
 8009408:	f1c6 0601 	rsb	r6, r6, #1
 800940c:	f8ca 6000 	str.w	r6, [sl]
 8009410:	f8da 3000 	ldr.w	r3, [sl]
 8009414:	4499      	add	r9, r3
 8009416:	2200      	movs	r2, #0
 8009418:	2300      	movs	r3, #0
 800941a:	4620      	mov	r0, r4
 800941c:	4629      	mov	r1, r5
 800941e:	f7f7 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 8009422:	b108      	cbz	r0, 8009428 <__cvt+0xa4>
 8009424:	f8cd 900c 	str.w	r9, [sp, #12]
 8009428:	2230      	movs	r2, #48	; 0x30
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	454b      	cmp	r3, r9
 800942e:	d307      	bcc.n	8009440 <__cvt+0xbc>
 8009430:	9b03      	ldr	r3, [sp, #12]
 8009432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009434:	1bdb      	subs	r3, r3, r7
 8009436:	4638      	mov	r0, r7
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	b004      	add	sp, #16
 800943c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009440:	1c59      	adds	r1, r3, #1
 8009442:	9103      	str	r1, [sp, #12]
 8009444:	701a      	strb	r2, [r3, #0]
 8009446:	e7f0      	b.n	800942a <__cvt+0xa6>

08009448 <__exponent>:
 8009448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800944a:	4603      	mov	r3, r0
 800944c:	2900      	cmp	r1, #0
 800944e:	bfb8      	it	lt
 8009450:	4249      	neglt	r1, r1
 8009452:	f803 2b02 	strb.w	r2, [r3], #2
 8009456:	bfb4      	ite	lt
 8009458:	222d      	movlt	r2, #45	; 0x2d
 800945a:	222b      	movge	r2, #43	; 0x2b
 800945c:	2909      	cmp	r1, #9
 800945e:	7042      	strb	r2, [r0, #1]
 8009460:	dd2a      	ble.n	80094b8 <__exponent+0x70>
 8009462:	f10d 0407 	add.w	r4, sp, #7
 8009466:	46a4      	mov	ip, r4
 8009468:	270a      	movs	r7, #10
 800946a:	46a6      	mov	lr, r4
 800946c:	460a      	mov	r2, r1
 800946e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009472:	fb07 1516 	mls	r5, r7, r6, r1
 8009476:	3530      	adds	r5, #48	; 0x30
 8009478:	2a63      	cmp	r2, #99	; 0x63
 800947a:	f104 34ff 	add.w	r4, r4, #4294967295
 800947e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009482:	4631      	mov	r1, r6
 8009484:	dcf1      	bgt.n	800946a <__exponent+0x22>
 8009486:	3130      	adds	r1, #48	; 0x30
 8009488:	f1ae 0502 	sub.w	r5, lr, #2
 800948c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009490:	1c44      	adds	r4, r0, #1
 8009492:	4629      	mov	r1, r5
 8009494:	4561      	cmp	r1, ip
 8009496:	d30a      	bcc.n	80094ae <__exponent+0x66>
 8009498:	f10d 0209 	add.w	r2, sp, #9
 800949c:	eba2 020e 	sub.w	r2, r2, lr
 80094a0:	4565      	cmp	r5, ip
 80094a2:	bf88      	it	hi
 80094a4:	2200      	movhi	r2, #0
 80094a6:	4413      	add	r3, r2
 80094a8:	1a18      	subs	r0, r3, r0
 80094aa:	b003      	add	sp, #12
 80094ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80094b6:	e7ed      	b.n	8009494 <__exponent+0x4c>
 80094b8:	2330      	movs	r3, #48	; 0x30
 80094ba:	3130      	adds	r1, #48	; 0x30
 80094bc:	7083      	strb	r3, [r0, #2]
 80094be:	70c1      	strb	r1, [r0, #3]
 80094c0:	1d03      	adds	r3, r0, #4
 80094c2:	e7f1      	b.n	80094a8 <__exponent+0x60>

080094c4 <_printf_float>:
 80094c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c8:	ed2d 8b02 	vpush	{d8}
 80094cc:	b08d      	sub	sp, #52	; 0x34
 80094ce:	460c      	mov	r4, r1
 80094d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80094d4:	4616      	mov	r6, r2
 80094d6:	461f      	mov	r7, r3
 80094d8:	4605      	mov	r5, r0
 80094da:	f003 f993 	bl	800c804 <_localeconv_r>
 80094de:	f8d0 a000 	ldr.w	sl, [r0]
 80094e2:	4650      	mov	r0, sl
 80094e4:	f7f6 fe74 	bl	80001d0 <strlen>
 80094e8:	2300      	movs	r3, #0
 80094ea:	930a      	str	r3, [sp, #40]	; 0x28
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	9305      	str	r3, [sp, #20]
 80094f0:	f8d8 3000 	ldr.w	r3, [r8]
 80094f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80094f8:	3307      	adds	r3, #7
 80094fa:	f023 0307 	bic.w	r3, r3, #7
 80094fe:	f103 0208 	add.w	r2, r3, #8
 8009502:	f8c8 2000 	str.w	r2, [r8]
 8009506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800950e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009512:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009516:	9307      	str	r3, [sp, #28]
 8009518:	f8cd 8018 	str.w	r8, [sp, #24]
 800951c:	ee08 0a10 	vmov	s16, r0
 8009520:	4b9f      	ldr	r3, [pc, #636]	; (80097a0 <_printf_float+0x2dc>)
 8009522:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009526:	f04f 32ff 	mov.w	r2, #4294967295
 800952a:	f7f7 faff 	bl	8000b2c <__aeabi_dcmpun>
 800952e:	bb88      	cbnz	r0, 8009594 <_printf_float+0xd0>
 8009530:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009534:	4b9a      	ldr	r3, [pc, #616]	; (80097a0 <_printf_float+0x2dc>)
 8009536:	f04f 32ff 	mov.w	r2, #4294967295
 800953a:	f7f7 fad9 	bl	8000af0 <__aeabi_dcmple>
 800953e:	bb48      	cbnz	r0, 8009594 <_printf_float+0xd0>
 8009540:	2200      	movs	r2, #0
 8009542:	2300      	movs	r3, #0
 8009544:	4640      	mov	r0, r8
 8009546:	4649      	mov	r1, r9
 8009548:	f7f7 fac8 	bl	8000adc <__aeabi_dcmplt>
 800954c:	b110      	cbz	r0, 8009554 <_printf_float+0x90>
 800954e:	232d      	movs	r3, #45	; 0x2d
 8009550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009554:	4b93      	ldr	r3, [pc, #588]	; (80097a4 <_printf_float+0x2e0>)
 8009556:	4894      	ldr	r0, [pc, #592]	; (80097a8 <_printf_float+0x2e4>)
 8009558:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800955c:	bf94      	ite	ls
 800955e:	4698      	movls	r8, r3
 8009560:	4680      	movhi	r8, r0
 8009562:	2303      	movs	r3, #3
 8009564:	6123      	str	r3, [r4, #16]
 8009566:	9b05      	ldr	r3, [sp, #20]
 8009568:	f023 0204 	bic.w	r2, r3, #4
 800956c:	6022      	str	r2, [r4, #0]
 800956e:	f04f 0900 	mov.w	r9, #0
 8009572:	9700      	str	r7, [sp, #0]
 8009574:	4633      	mov	r3, r6
 8009576:	aa0b      	add	r2, sp, #44	; 0x2c
 8009578:	4621      	mov	r1, r4
 800957a:	4628      	mov	r0, r5
 800957c:	f000 f9d8 	bl	8009930 <_printf_common>
 8009580:	3001      	adds	r0, #1
 8009582:	f040 8090 	bne.w	80096a6 <_printf_float+0x1e2>
 8009586:	f04f 30ff 	mov.w	r0, #4294967295
 800958a:	b00d      	add	sp, #52	; 0x34
 800958c:	ecbd 8b02 	vpop	{d8}
 8009590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009594:	4642      	mov	r2, r8
 8009596:	464b      	mov	r3, r9
 8009598:	4640      	mov	r0, r8
 800959a:	4649      	mov	r1, r9
 800959c:	f7f7 fac6 	bl	8000b2c <__aeabi_dcmpun>
 80095a0:	b140      	cbz	r0, 80095b4 <_printf_float+0xf0>
 80095a2:	464b      	mov	r3, r9
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bfbc      	itt	lt
 80095a8:	232d      	movlt	r3, #45	; 0x2d
 80095aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80095ae:	487f      	ldr	r0, [pc, #508]	; (80097ac <_printf_float+0x2e8>)
 80095b0:	4b7f      	ldr	r3, [pc, #508]	; (80097b0 <_printf_float+0x2ec>)
 80095b2:	e7d1      	b.n	8009558 <_printf_float+0x94>
 80095b4:	6863      	ldr	r3, [r4, #4]
 80095b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80095ba:	9206      	str	r2, [sp, #24]
 80095bc:	1c5a      	adds	r2, r3, #1
 80095be:	d13f      	bne.n	8009640 <_printf_float+0x17c>
 80095c0:	2306      	movs	r3, #6
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	9b05      	ldr	r3, [sp, #20]
 80095c6:	6861      	ldr	r1, [r4, #4]
 80095c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80095cc:	2300      	movs	r3, #0
 80095ce:	9303      	str	r3, [sp, #12]
 80095d0:	ab0a      	add	r3, sp, #40	; 0x28
 80095d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80095d6:	ab09      	add	r3, sp, #36	; 0x24
 80095d8:	ec49 8b10 	vmov	d0, r8, r9
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	6022      	str	r2, [r4, #0]
 80095e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095e4:	4628      	mov	r0, r5
 80095e6:	f7ff fecd 	bl	8009384 <__cvt>
 80095ea:	9b06      	ldr	r3, [sp, #24]
 80095ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095ee:	2b47      	cmp	r3, #71	; 0x47
 80095f0:	4680      	mov	r8, r0
 80095f2:	d108      	bne.n	8009606 <_printf_float+0x142>
 80095f4:	1cc8      	adds	r0, r1, #3
 80095f6:	db02      	blt.n	80095fe <_printf_float+0x13a>
 80095f8:	6863      	ldr	r3, [r4, #4]
 80095fa:	4299      	cmp	r1, r3
 80095fc:	dd41      	ble.n	8009682 <_printf_float+0x1be>
 80095fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8009602:	fa5f fb8b 	uxtb.w	fp, fp
 8009606:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800960a:	d820      	bhi.n	800964e <_printf_float+0x18a>
 800960c:	3901      	subs	r1, #1
 800960e:	465a      	mov	r2, fp
 8009610:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009614:	9109      	str	r1, [sp, #36]	; 0x24
 8009616:	f7ff ff17 	bl	8009448 <__exponent>
 800961a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800961c:	1813      	adds	r3, r2, r0
 800961e:	2a01      	cmp	r2, #1
 8009620:	4681      	mov	r9, r0
 8009622:	6123      	str	r3, [r4, #16]
 8009624:	dc02      	bgt.n	800962c <_printf_float+0x168>
 8009626:	6822      	ldr	r2, [r4, #0]
 8009628:	07d2      	lsls	r2, r2, #31
 800962a:	d501      	bpl.n	8009630 <_printf_float+0x16c>
 800962c:	3301      	adds	r3, #1
 800962e:	6123      	str	r3, [r4, #16]
 8009630:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009634:	2b00      	cmp	r3, #0
 8009636:	d09c      	beq.n	8009572 <_printf_float+0xae>
 8009638:	232d      	movs	r3, #45	; 0x2d
 800963a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800963e:	e798      	b.n	8009572 <_printf_float+0xae>
 8009640:	9a06      	ldr	r2, [sp, #24]
 8009642:	2a47      	cmp	r2, #71	; 0x47
 8009644:	d1be      	bne.n	80095c4 <_printf_float+0x100>
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1bc      	bne.n	80095c4 <_printf_float+0x100>
 800964a:	2301      	movs	r3, #1
 800964c:	e7b9      	b.n	80095c2 <_printf_float+0xfe>
 800964e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009652:	d118      	bne.n	8009686 <_printf_float+0x1c2>
 8009654:	2900      	cmp	r1, #0
 8009656:	6863      	ldr	r3, [r4, #4]
 8009658:	dd0b      	ble.n	8009672 <_printf_float+0x1ae>
 800965a:	6121      	str	r1, [r4, #16]
 800965c:	b913      	cbnz	r3, 8009664 <_printf_float+0x1a0>
 800965e:	6822      	ldr	r2, [r4, #0]
 8009660:	07d0      	lsls	r0, r2, #31
 8009662:	d502      	bpl.n	800966a <_printf_float+0x1a6>
 8009664:	3301      	adds	r3, #1
 8009666:	440b      	add	r3, r1
 8009668:	6123      	str	r3, [r4, #16]
 800966a:	65a1      	str	r1, [r4, #88]	; 0x58
 800966c:	f04f 0900 	mov.w	r9, #0
 8009670:	e7de      	b.n	8009630 <_printf_float+0x16c>
 8009672:	b913      	cbnz	r3, 800967a <_printf_float+0x1b6>
 8009674:	6822      	ldr	r2, [r4, #0]
 8009676:	07d2      	lsls	r2, r2, #31
 8009678:	d501      	bpl.n	800967e <_printf_float+0x1ba>
 800967a:	3302      	adds	r3, #2
 800967c:	e7f4      	b.n	8009668 <_printf_float+0x1a4>
 800967e:	2301      	movs	r3, #1
 8009680:	e7f2      	b.n	8009668 <_printf_float+0x1a4>
 8009682:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009688:	4299      	cmp	r1, r3
 800968a:	db05      	blt.n	8009698 <_printf_float+0x1d4>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	6121      	str	r1, [r4, #16]
 8009690:	07d8      	lsls	r0, r3, #31
 8009692:	d5ea      	bpl.n	800966a <_printf_float+0x1a6>
 8009694:	1c4b      	adds	r3, r1, #1
 8009696:	e7e7      	b.n	8009668 <_printf_float+0x1a4>
 8009698:	2900      	cmp	r1, #0
 800969a:	bfd4      	ite	le
 800969c:	f1c1 0202 	rsble	r2, r1, #2
 80096a0:	2201      	movgt	r2, #1
 80096a2:	4413      	add	r3, r2
 80096a4:	e7e0      	b.n	8009668 <_printf_float+0x1a4>
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	055a      	lsls	r2, r3, #21
 80096aa:	d407      	bmi.n	80096bc <_printf_float+0x1f8>
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	4642      	mov	r2, r8
 80096b0:	4631      	mov	r1, r6
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b8      	blx	r7
 80096b6:	3001      	adds	r0, #1
 80096b8:	d12c      	bne.n	8009714 <_printf_float+0x250>
 80096ba:	e764      	b.n	8009586 <_printf_float+0xc2>
 80096bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096c0:	f240 80e0 	bls.w	8009884 <_printf_float+0x3c0>
 80096c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096c8:	2200      	movs	r2, #0
 80096ca:	2300      	movs	r3, #0
 80096cc:	f7f7 f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d034      	beq.n	800973e <_printf_float+0x27a>
 80096d4:	4a37      	ldr	r2, [pc, #220]	; (80097b4 <_printf_float+0x2f0>)
 80096d6:	2301      	movs	r3, #1
 80096d8:	4631      	mov	r1, r6
 80096da:	4628      	mov	r0, r5
 80096dc:	47b8      	blx	r7
 80096de:	3001      	adds	r0, #1
 80096e0:	f43f af51 	beq.w	8009586 <_printf_float+0xc2>
 80096e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096e8:	429a      	cmp	r2, r3
 80096ea:	db02      	blt.n	80096f2 <_printf_float+0x22e>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	07d8      	lsls	r0, r3, #31
 80096f0:	d510      	bpl.n	8009714 <_printf_float+0x250>
 80096f2:	ee18 3a10 	vmov	r3, s16
 80096f6:	4652      	mov	r2, sl
 80096f8:	4631      	mov	r1, r6
 80096fa:	4628      	mov	r0, r5
 80096fc:	47b8      	blx	r7
 80096fe:	3001      	adds	r0, #1
 8009700:	f43f af41 	beq.w	8009586 <_printf_float+0xc2>
 8009704:	f04f 0800 	mov.w	r8, #0
 8009708:	f104 091a 	add.w	r9, r4, #26
 800970c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970e:	3b01      	subs	r3, #1
 8009710:	4543      	cmp	r3, r8
 8009712:	dc09      	bgt.n	8009728 <_printf_float+0x264>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	079b      	lsls	r3, r3, #30
 8009718:	f100 8105 	bmi.w	8009926 <_printf_float+0x462>
 800971c:	68e0      	ldr	r0, [r4, #12]
 800971e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009720:	4298      	cmp	r0, r3
 8009722:	bfb8      	it	lt
 8009724:	4618      	movlt	r0, r3
 8009726:	e730      	b.n	800958a <_printf_float+0xc6>
 8009728:	2301      	movs	r3, #1
 800972a:	464a      	mov	r2, r9
 800972c:	4631      	mov	r1, r6
 800972e:	4628      	mov	r0, r5
 8009730:	47b8      	blx	r7
 8009732:	3001      	adds	r0, #1
 8009734:	f43f af27 	beq.w	8009586 <_printf_float+0xc2>
 8009738:	f108 0801 	add.w	r8, r8, #1
 800973c:	e7e6      	b.n	800970c <_printf_float+0x248>
 800973e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009740:	2b00      	cmp	r3, #0
 8009742:	dc39      	bgt.n	80097b8 <_printf_float+0x2f4>
 8009744:	4a1b      	ldr	r2, [pc, #108]	; (80097b4 <_printf_float+0x2f0>)
 8009746:	2301      	movs	r3, #1
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	f43f af19 	beq.w	8009586 <_printf_float+0xc2>
 8009754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009758:	4313      	orrs	r3, r2
 800975a:	d102      	bne.n	8009762 <_printf_float+0x29e>
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	07d9      	lsls	r1, r3, #31
 8009760:	d5d8      	bpl.n	8009714 <_printf_float+0x250>
 8009762:	ee18 3a10 	vmov	r3, s16
 8009766:	4652      	mov	r2, sl
 8009768:	4631      	mov	r1, r6
 800976a:	4628      	mov	r0, r5
 800976c:	47b8      	blx	r7
 800976e:	3001      	adds	r0, #1
 8009770:	f43f af09 	beq.w	8009586 <_printf_float+0xc2>
 8009774:	f04f 0900 	mov.w	r9, #0
 8009778:	f104 0a1a 	add.w	sl, r4, #26
 800977c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977e:	425b      	negs	r3, r3
 8009780:	454b      	cmp	r3, r9
 8009782:	dc01      	bgt.n	8009788 <_printf_float+0x2c4>
 8009784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009786:	e792      	b.n	80096ae <_printf_float+0x1ea>
 8009788:	2301      	movs	r3, #1
 800978a:	4652      	mov	r2, sl
 800978c:	4631      	mov	r1, r6
 800978e:	4628      	mov	r0, r5
 8009790:	47b8      	blx	r7
 8009792:	3001      	adds	r0, #1
 8009794:	f43f aef7 	beq.w	8009586 <_printf_float+0xc2>
 8009798:	f109 0901 	add.w	r9, r9, #1
 800979c:	e7ee      	b.n	800977c <_printf_float+0x2b8>
 800979e:	bf00      	nop
 80097a0:	7fefffff 	.word	0x7fefffff
 80097a4:	0800e558 	.word	0x0800e558
 80097a8:	0800e55c 	.word	0x0800e55c
 80097ac:	0800e564 	.word	0x0800e564
 80097b0:	0800e560 	.word	0x0800e560
 80097b4:	0800e568 	.word	0x0800e568
 80097b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097bc:	429a      	cmp	r2, r3
 80097be:	bfa8      	it	ge
 80097c0:	461a      	movge	r2, r3
 80097c2:	2a00      	cmp	r2, #0
 80097c4:	4691      	mov	r9, r2
 80097c6:	dc37      	bgt.n	8009838 <_printf_float+0x374>
 80097c8:	f04f 0b00 	mov.w	fp, #0
 80097cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097d0:	f104 021a 	add.w	r2, r4, #26
 80097d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097d6:	9305      	str	r3, [sp, #20]
 80097d8:	eba3 0309 	sub.w	r3, r3, r9
 80097dc:	455b      	cmp	r3, fp
 80097de:	dc33      	bgt.n	8009848 <_printf_float+0x384>
 80097e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097e4:	429a      	cmp	r2, r3
 80097e6:	db3b      	blt.n	8009860 <_printf_float+0x39c>
 80097e8:	6823      	ldr	r3, [r4, #0]
 80097ea:	07da      	lsls	r2, r3, #31
 80097ec:	d438      	bmi.n	8009860 <_printf_float+0x39c>
 80097ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097f0:	9b05      	ldr	r3, [sp, #20]
 80097f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	eba2 0901 	sub.w	r9, r2, r1
 80097fa:	4599      	cmp	r9, r3
 80097fc:	bfa8      	it	ge
 80097fe:	4699      	movge	r9, r3
 8009800:	f1b9 0f00 	cmp.w	r9, #0
 8009804:	dc35      	bgt.n	8009872 <_printf_float+0x3ae>
 8009806:	f04f 0800 	mov.w	r8, #0
 800980a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800980e:	f104 0a1a 	add.w	sl, r4, #26
 8009812:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009816:	1a9b      	subs	r3, r3, r2
 8009818:	eba3 0309 	sub.w	r3, r3, r9
 800981c:	4543      	cmp	r3, r8
 800981e:	f77f af79 	ble.w	8009714 <_printf_float+0x250>
 8009822:	2301      	movs	r3, #1
 8009824:	4652      	mov	r2, sl
 8009826:	4631      	mov	r1, r6
 8009828:	4628      	mov	r0, r5
 800982a:	47b8      	blx	r7
 800982c:	3001      	adds	r0, #1
 800982e:	f43f aeaa 	beq.w	8009586 <_printf_float+0xc2>
 8009832:	f108 0801 	add.w	r8, r8, #1
 8009836:	e7ec      	b.n	8009812 <_printf_float+0x34e>
 8009838:	4613      	mov	r3, r2
 800983a:	4631      	mov	r1, r6
 800983c:	4642      	mov	r2, r8
 800983e:	4628      	mov	r0, r5
 8009840:	47b8      	blx	r7
 8009842:	3001      	adds	r0, #1
 8009844:	d1c0      	bne.n	80097c8 <_printf_float+0x304>
 8009846:	e69e      	b.n	8009586 <_printf_float+0xc2>
 8009848:	2301      	movs	r3, #1
 800984a:	4631      	mov	r1, r6
 800984c:	4628      	mov	r0, r5
 800984e:	9205      	str	r2, [sp, #20]
 8009850:	47b8      	blx	r7
 8009852:	3001      	adds	r0, #1
 8009854:	f43f ae97 	beq.w	8009586 <_printf_float+0xc2>
 8009858:	9a05      	ldr	r2, [sp, #20]
 800985a:	f10b 0b01 	add.w	fp, fp, #1
 800985e:	e7b9      	b.n	80097d4 <_printf_float+0x310>
 8009860:	ee18 3a10 	vmov	r3, s16
 8009864:	4652      	mov	r2, sl
 8009866:	4631      	mov	r1, r6
 8009868:	4628      	mov	r0, r5
 800986a:	47b8      	blx	r7
 800986c:	3001      	adds	r0, #1
 800986e:	d1be      	bne.n	80097ee <_printf_float+0x32a>
 8009870:	e689      	b.n	8009586 <_printf_float+0xc2>
 8009872:	9a05      	ldr	r2, [sp, #20]
 8009874:	464b      	mov	r3, r9
 8009876:	4442      	add	r2, r8
 8009878:	4631      	mov	r1, r6
 800987a:	4628      	mov	r0, r5
 800987c:	47b8      	blx	r7
 800987e:	3001      	adds	r0, #1
 8009880:	d1c1      	bne.n	8009806 <_printf_float+0x342>
 8009882:	e680      	b.n	8009586 <_printf_float+0xc2>
 8009884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009886:	2a01      	cmp	r2, #1
 8009888:	dc01      	bgt.n	800988e <_printf_float+0x3ca>
 800988a:	07db      	lsls	r3, r3, #31
 800988c:	d538      	bpl.n	8009900 <_printf_float+0x43c>
 800988e:	2301      	movs	r3, #1
 8009890:	4642      	mov	r2, r8
 8009892:	4631      	mov	r1, r6
 8009894:	4628      	mov	r0, r5
 8009896:	47b8      	blx	r7
 8009898:	3001      	adds	r0, #1
 800989a:	f43f ae74 	beq.w	8009586 <_printf_float+0xc2>
 800989e:	ee18 3a10 	vmov	r3, s16
 80098a2:	4652      	mov	r2, sl
 80098a4:	4631      	mov	r1, r6
 80098a6:	4628      	mov	r0, r5
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	f43f ae6b 	beq.w	8009586 <_printf_float+0xc2>
 80098b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098b4:	2200      	movs	r2, #0
 80098b6:	2300      	movs	r3, #0
 80098b8:	f7f7 f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80098bc:	b9d8      	cbnz	r0, 80098f6 <_printf_float+0x432>
 80098be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c0:	f108 0201 	add.w	r2, r8, #1
 80098c4:	3b01      	subs	r3, #1
 80098c6:	4631      	mov	r1, r6
 80098c8:	4628      	mov	r0, r5
 80098ca:	47b8      	blx	r7
 80098cc:	3001      	adds	r0, #1
 80098ce:	d10e      	bne.n	80098ee <_printf_float+0x42a>
 80098d0:	e659      	b.n	8009586 <_printf_float+0xc2>
 80098d2:	2301      	movs	r3, #1
 80098d4:	4652      	mov	r2, sl
 80098d6:	4631      	mov	r1, r6
 80098d8:	4628      	mov	r0, r5
 80098da:	47b8      	blx	r7
 80098dc:	3001      	adds	r0, #1
 80098de:	f43f ae52 	beq.w	8009586 <_printf_float+0xc2>
 80098e2:	f108 0801 	add.w	r8, r8, #1
 80098e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e8:	3b01      	subs	r3, #1
 80098ea:	4543      	cmp	r3, r8
 80098ec:	dcf1      	bgt.n	80098d2 <_printf_float+0x40e>
 80098ee:	464b      	mov	r3, r9
 80098f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80098f4:	e6dc      	b.n	80096b0 <_printf_float+0x1ec>
 80098f6:	f04f 0800 	mov.w	r8, #0
 80098fa:	f104 0a1a 	add.w	sl, r4, #26
 80098fe:	e7f2      	b.n	80098e6 <_printf_float+0x422>
 8009900:	2301      	movs	r3, #1
 8009902:	4642      	mov	r2, r8
 8009904:	e7df      	b.n	80098c6 <_printf_float+0x402>
 8009906:	2301      	movs	r3, #1
 8009908:	464a      	mov	r2, r9
 800990a:	4631      	mov	r1, r6
 800990c:	4628      	mov	r0, r5
 800990e:	47b8      	blx	r7
 8009910:	3001      	adds	r0, #1
 8009912:	f43f ae38 	beq.w	8009586 <_printf_float+0xc2>
 8009916:	f108 0801 	add.w	r8, r8, #1
 800991a:	68e3      	ldr	r3, [r4, #12]
 800991c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800991e:	1a5b      	subs	r3, r3, r1
 8009920:	4543      	cmp	r3, r8
 8009922:	dcf0      	bgt.n	8009906 <_printf_float+0x442>
 8009924:	e6fa      	b.n	800971c <_printf_float+0x258>
 8009926:	f04f 0800 	mov.w	r8, #0
 800992a:	f104 0919 	add.w	r9, r4, #25
 800992e:	e7f4      	b.n	800991a <_printf_float+0x456>

08009930 <_printf_common>:
 8009930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009934:	4616      	mov	r6, r2
 8009936:	4699      	mov	r9, r3
 8009938:	688a      	ldr	r2, [r1, #8]
 800993a:	690b      	ldr	r3, [r1, #16]
 800993c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009940:	4293      	cmp	r3, r2
 8009942:	bfb8      	it	lt
 8009944:	4613      	movlt	r3, r2
 8009946:	6033      	str	r3, [r6, #0]
 8009948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800994c:	4607      	mov	r7, r0
 800994e:	460c      	mov	r4, r1
 8009950:	b10a      	cbz	r2, 8009956 <_printf_common+0x26>
 8009952:	3301      	adds	r3, #1
 8009954:	6033      	str	r3, [r6, #0]
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	0699      	lsls	r1, r3, #26
 800995a:	bf42      	ittt	mi
 800995c:	6833      	ldrmi	r3, [r6, #0]
 800995e:	3302      	addmi	r3, #2
 8009960:	6033      	strmi	r3, [r6, #0]
 8009962:	6825      	ldr	r5, [r4, #0]
 8009964:	f015 0506 	ands.w	r5, r5, #6
 8009968:	d106      	bne.n	8009978 <_printf_common+0x48>
 800996a:	f104 0a19 	add.w	sl, r4, #25
 800996e:	68e3      	ldr	r3, [r4, #12]
 8009970:	6832      	ldr	r2, [r6, #0]
 8009972:	1a9b      	subs	r3, r3, r2
 8009974:	42ab      	cmp	r3, r5
 8009976:	dc26      	bgt.n	80099c6 <_printf_common+0x96>
 8009978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800997c:	1e13      	subs	r3, r2, #0
 800997e:	6822      	ldr	r2, [r4, #0]
 8009980:	bf18      	it	ne
 8009982:	2301      	movne	r3, #1
 8009984:	0692      	lsls	r2, r2, #26
 8009986:	d42b      	bmi.n	80099e0 <_printf_common+0xb0>
 8009988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800998c:	4649      	mov	r1, r9
 800998e:	4638      	mov	r0, r7
 8009990:	47c0      	blx	r8
 8009992:	3001      	adds	r0, #1
 8009994:	d01e      	beq.n	80099d4 <_printf_common+0xa4>
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	68e5      	ldr	r5, [r4, #12]
 800999a:	6832      	ldr	r2, [r6, #0]
 800999c:	f003 0306 	and.w	r3, r3, #6
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	bf08      	it	eq
 80099a4:	1aad      	subeq	r5, r5, r2
 80099a6:	68a3      	ldr	r3, [r4, #8]
 80099a8:	6922      	ldr	r2, [r4, #16]
 80099aa:	bf0c      	ite	eq
 80099ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099b0:	2500      	movne	r5, #0
 80099b2:	4293      	cmp	r3, r2
 80099b4:	bfc4      	itt	gt
 80099b6:	1a9b      	subgt	r3, r3, r2
 80099b8:	18ed      	addgt	r5, r5, r3
 80099ba:	2600      	movs	r6, #0
 80099bc:	341a      	adds	r4, #26
 80099be:	42b5      	cmp	r5, r6
 80099c0:	d11a      	bne.n	80099f8 <_printf_common+0xc8>
 80099c2:	2000      	movs	r0, #0
 80099c4:	e008      	b.n	80099d8 <_printf_common+0xa8>
 80099c6:	2301      	movs	r3, #1
 80099c8:	4652      	mov	r2, sl
 80099ca:	4649      	mov	r1, r9
 80099cc:	4638      	mov	r0, r7
 80099ce:	47c0      	blx	r8
 80099d0:	3001      	adds	r0, #1
 80099d2:	d103      	bne.n	80099dc <_printf_common+0xac>
 80099d4:	f04f 30ff 	mov.w	r0, #4294967295
 80099d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099dc:	3501      	adds	r5, #1
 80099de:	e7c6      	b.n	800996e <_printf_common+0x3e>
 80099e0:	18e1      	adds	r1, r4, r3
 80099e2:	1c5a      	adds	r2, r3, #1
 80099e4:	2030      	movs	r0, #48	; 0x30
 80099e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099ea:	4422      	add	r2, r4
 80099ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099f4:	3302      	adds	r3, #2
 80099f6:	e7c7      	b.n	8009988 <_printf_common+0x58>
 80099f8:	2301      	movs	r3, #1
 80099fa:	4622      	mov	r2, r4
 80099fc:	4649      	mov	r1, r9
 80099fe:	4638      	mov	r0, r7
 8009a00:	47c0      	blx	r8
 8009a02:	3001      	adds	r0, #1
 8009a04:	d0e6      	beq.n	80099d4 <_printf_common+0xa4>
 8009a06:	3601      	adds	r6, #1
 8009a08:	e7d9      	b.n	80099be <_printf_common+0x8e>
	...

08009a0c <_printf_i>:
 8009a0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a10:	460c      	mov	r4, r1
 8009a12:	4691      	mov	r9, r2
 8009a14:	7e27      	ldrb	r7, [r4, #24]
 8009a16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a18:	2f78      	cmp	r7, #120	; 0x78
 8009a1a:	4680      	mov	r8, r0
 8009a1c:	469a      	mov	sl, r3
 8009a1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a22:	d807      	bhi.n	8009a34 <_printf_i+0x28>
 8009a24:	2f62      	cmp	r7, #98	; 0x62
 8009a26:	d80a      	bhi.n	8009a3e <_printf_i+0x32>
 8009a28:	2f00      	cmp	r7, #0
 8009a2a:	f000 80d8 	beq.w	8009bde <_printf_i+0x1d2>
 8009a2e:	2f58      	cmp	r7, #88	; 0x58
 8009a30:	f000 80a3 	beq.w	8009b7a <_printf_i+0x16e>
 8009a34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a3c:	e03a      	b.n	8009ab4 <_printf_i+0xa8>
 8009a3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a42:	2b15      	cmp	r3, #21
 8009a44:	d8f6      	bhi.n	8009a34 <_printf_i+0x28>
 8009a46:	a001      	add	r0, pc, #4	; (adr r0, 8009a4c <_printf_i+0x40>)
 8009a48:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a4c:	08009aa5 	.word	0x08009aa5
 8009a50:	08009ab9 	.word	0x08009ab9
 8009a54:	08009a35 	.word	0x08009a35
 8009a58:	08009a35 	.word	0x08009a35
 8009a5c:	08009a35 	.word	0x08009a35
 8009a60:	08009a35 	.word	0x08009a35
 8009a64:	08009ab9 	.word	0x08009ab9
 8009a68:	08009a35 	.word	0x08009a35
 8009a6c:	08009a35 	.word	0x08009a35
 8009a70:	08009a35 	.word	0x08009a35
 8009a74:	08009a35 	.word	0x08009a35
 8009a78:	08009bc5 	.word	0x08009bc5
 8009a7c:	08009ae9 	.word	0x08009ae9
 8009a80:	08009ba7 	.word	0x08009ba7
 8009a84:	08009a35 	.word	0x08009a35
 8009a88:	08009a35 	.word	0x08009a35
 8009a8c:	08009be7 	.word	0x08009be7
 8009a90:	08009a35 	.word	0x08009a35
 8009a94:	08009ae9 	.word	0x08009ae9
 8009a98:	08009a35 	.word	0x08009a35
 8009a9c:	08009a35 	.word	0x08009a35
 8009aa0:	08009baf 	.word	0x08009baf
 8009aa4:	680b      	ldr	r3, [r1, #0]
 8009aa6:	1d1a      	adds	r2, r3, #4
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	600a      	str	r2, [r1, #0]
 8009aac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e0a3      	b.n	8009c00 <_printf_i+0x1f4>
 8009ab8:	6825      	ldr	r5, [r4, #0]
 8009aba:	6808      	ldr	r0, [r1, #0]
 8009abc:	062e      	lsls	r6, r5, #24
 8009abe:	f100 0304 	add.w	r3, r0, #4
 8009ac2:	d50a      	bpl.n	8009ada <_printf_i+0xce>
 8009ac4:	6805      	ldr	r5, [r0, #0]
 8009ac6:	600b      	str	r3, [r1, #0]
 8009ac8:	2d00      	cmp	r5, #0
 8009aca:	da03      	bge.n	8009ad4 <_printf_i+0xc8>
 8009acc:	232d      	movs	r3, #45	; 0x2d
 8009ace:	426d      	negs	r5, r5
 8009ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ad4:	485e      	ldr	r0, [pc, #376]	; (8009c50 <_printf_i+0x244>)
 8009ad6:	230a      	movs	r3, #10
 8009ad8:	e019      	b.n	8009b0e <_printf_i+0x102>
 8009ada:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ade:	6805      	ldr	r5, [r0, #0]
 8009ae0:	600b      	str	r3, [r1, #0]
 8009ae2:	bf18      	it	ne
 8009ae4:	b22d      	sxthne	r5, r5
 8009ae6:	e7ef      	b.n	8009ac8 <_printf_i+0xbc>
 8009ae8:	680b      	ldr	r3, [r1, #0]
 8009aea:	6825      	ldr	r5, [r4, #0]
 8009aec:	1d18      	adds	r0, r3, #4
 8009aee:	6008      	str	r0, [r1, #0]
 8009af0:	0628      	lsls	r0, r5, #24
 8009af2:	d501      	bpl.n	8009af8 <_printf_i+0xec>
 8009af4:	681d      	ldr	r5, [r3, #0]
 8009af6:	e002      	b.n	8009afe <_printf_i+0xf2>
 8009af8:	0669      	lsls	r1, r5, #25
 8009afa:	d5fb      	bpl.n	8009af4 <_printf_i+0xe8>
 8009afc:	881d      	ldrh	r5, [r3, #0]
 8009afe:	4854      	ldr	r0, [pc, #336]	; (8009c50 <_printf_i+0x244>)
 8009b00:	2f6f      	cmp	r7, #111	; 0x6f
 8009b02:	bf0c      	ite	eq
 8009b04:	2308      	moveq	r3, #8
 8009b06:	230a      	movne	r3, #10
 8009b08:	2100      	movs	r1, #0
 8009b0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b0e:	6866      	ldr	r6, [r4, #4]
 8009b10:	60a6      	str	r6, [r4, #8]
 8009b12:	2e00      	cmp	r6, #0
 8009b14:	bfa2      	ittt	ge
 8009b16:	6821      	ldrge	r1, [r4, #0]
 8009b18:	f021 0104 	bicge.w	r1, r1, #4
 8009b1c:	6021      	strge	r1, [r4, #0]
 8009b1e:	b90d      	cbnz	r5, 8009b24 <_printf_i+0x118>
 8009b20:	2e00      	cmp	r6, #0
 8009b22:	d04d      	beq.n	8009bc0 <_printf_i+0x1b4>
 8009b24:	4616      	mov	r6, r2
 8009b26:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b2a:	fb03 5711 	mls	r7, r3, r1, r5
 8009b2e:	5dc7      	ldrb	r7, [r0, r7]
 8009b30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b34:	462f      	mov	r7, r5
 8009b36:	42bb      	cmp	r3, r7
 8009b38:	460d      	mov	r5, r1
 8009b3a:	d9f4      	bls.n	8009b26 <_printf_i+0x11a>
 8009b3c:	2b08      	cmp	r3, #8
 8009b3e:	d10b      	bne.n	8009b58 <_printf_i+0x14c>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	07df      	lsls	r7, r3, #31
 8009b44:	d508      	bpl.n	8009b58 <_printf_i+0x14c>
 8009b46:	6923      	ldr	r3, [r4, #16]
 8009b48:	6861      	ldr	r1, [r4, #4]
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	bfde      	ittt	le
 8009b4e:	2330      	movle	r3, #48	; 0x30
 8009b50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b58:	1b92      	subs	r2, r2, r6
 8009b5a:	6122      	str	r2, [r4, #16]
 8009b5c:	f8cd a000 	str.w	sl, [sp]
 8009b60:	464b      	mov	r3, r9
 8009b62:	aa03      	add	r2, sp, #12
 8009b64:	4621      	mov	r1, r4
 8009b66:	4640      	mov	r0, r8
 8009b68:	f7ff fee2 	bl	8009930 <_printf_common>
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	d14c      	bne.n	8009c0a <_printf_i+0x1fe>
 8009b70:	f04f 30ff 	mov.w	r0, #4294967295
 8009b74:	b004      	add	sp, #16
 8009b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b7a:	4835      	ldr	r0, [pc, #212]	; (8009c50 <_printf_i+0x244>)
 8009b7c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b80:	6823      	ldr	r3, [r4, #0]
 8009b82:	680e      	ldr	r6, [r1, #0]
 8009b84:	061f      	lsls	r7, r3, #24
 8009b86:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b8a:	600e      	str	r6, [r1, #0]
 8009b8c:	d514      	bpl.n	8009bb8 <_printf_i+0x1ac>
 8009b8e:	07d9      	lsls	r1, r3, #31
 8009b90:	bf44      	itt	mi
 8009b92:	f043 0320 	orrmi.w	r3, r3, #32
 8009b96:	6023      	strmi	r3, [r4, #0]
 8009b98:	b91d      	cbnz	r5, 8009ba2 <_printf_i+0x196>
 8009b9a:	6823      	ldr	r3, [r4, #0]
 8009b9c:	f023 0320 	bic.w	r3, r3, #32
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	2310      	movs	r3, #16
 8009ba4:	e7b0      	b.n	8009b08 <_printf_i+0xfc>
 8009ba6:	6823      	ldr	r3, [r4, #0]
 8009ba8:	f043 0320 	orr.w	r3, r3, #32
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	2378      	movs	r3, #120	; 0x78
 8009bb0:	4828      	ldr	r0, [pc, #160]	; (8009c54 <_printf_i+0x248>)
 8009bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bb6:	e7e3      	b.n	8009b80 <_printf_i+0x174>
 8009bb8:	065e      	lsls	r6, r3, #25
 8009bba:	bf48      	it	mi
 8009bbc:	b2ad      	uxthmi	r5, r5
 8009bbe:	e7e6      	b.n	8009b8e <_printf_i+0x182>
 8009bc0:	4616      	mov	r6, r2
 8009bc2:	e7bb      	b.n	8009b3c <_printf_i+0x130>
 8009bc4:	680b      	ldr	r3, [r1, #0]
 8009bc6:	6826      	ldr	r6, [r4, #0]
 8009bc8:	6960      	ldr	r0, [r4, #20]
 8009bca:	1d1d      	adds	r5, r3, #4
 8009bcc:	600d      	str	r5, [r1, #0]
 8009bce:	0635      	lsls	r5, r6, #24
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	d501      	bpl.n	8009bd8 <_printf_i+0x1cc>
 8009bd4:	6018      	str	r0, [r3, #0]
 8009bd6:	e002      	b.n	8009bde <_printf_i+0x1d2>
 8009bd8:	0671      	lsls	r1, r6, #25
 8009bda:	d5fb      	bpl.n	8009bd4 <_printf_i+0x1c8>
 8009bdc:	8018      	strh	r0, [r3, #0]
 8009bde:	2300      	movs	r3, #0
 8009be0:	6123      	str	r3, [r4, #16]
 8009be2:	4616      	mov	r6, r2
 8009be4:	e7ba      	b.n	8009b5c <_printf_i+0x150>
 8009be6:	680b      	ldr	r3, [r1, #0]
 8009be8:	1d1a      	adds	r2, r3, #4
 8009bea:	600a      	str	r2, [r1, #0]
 8009bec:	681e      	ldr	r6, [r3, #0]
 8009bee:	6862      	ldr	r2, [r4, #4]
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7f6 faf4 	bl	80001e0 <memchr>
 8009bf8:	b108      	cbz	r0, 8009bfe <_printf_i+0x1f2>
 8009bfa:	1b80      	subs	r0, r0, r6
 8009bfc:	6060      	str	r0, [r4, #4]
 8009bfe:	6863      	ldr	r3, [r4, #4]
 8009c00:	6123      	str	r3, [r4, #16]
 8009c02:	2300      	movs	r3, #0
 8009c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c08:	e7a8      	b.n	8009b5c <_printf_i+0x150>
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	4649      	mov	r1, r9
 8009c10:	4640      	mov	r0, r8
 8009c12:	47d0      	blx	sl
 8009c14:	3001      	adds	r0, #1
 8009c16:	d0ab      	beq.n	8009b70 <_printf_i+0x164>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	079b      	lsls	r3, r3, #30
 8009c1c:	d413      	bmi.n	8009c46 <_printf_i+0x23a>
 8009c1e:	68e0      	ldr	r0, [r4, #12]
 8009c20:	9b03      	ldr	r3, [sp, #12]
 8009c22:	4298      	cmp	r0, r3
 8009c24:	bfb8      	it	lt
 8009c26:	4618      	movlt	r0, r3
 8009c28:	e7a4      	b.n	8009b74 <_printf_i+0x168>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4632      	mov	r2, r6
 8009c2e:	4649      	mov	r1, r9
 8009c30:	4640      	mov	r0, r8
 8009c32:	47d0      	blx	sl
 8009c34:	3001      	adds	r0, #1
 8009c36:	d09b      	beq.n	8009b70 <_printf_i+0x164>
 8009c38:	3501      	adds	r5, #1
 8009c3a:	68e3      	ldr	r3, [r4, #12]
 8009c3c:	9903      	ldr	r1, [sp, #12]
 8009c3e:	1a5b      	subs	r3, r3, r1
 8009c40:	42ab      	cmp	r3, r5
 8009c42:	dcf2      	bgt.n	8009c2a <_printf_i+0x21e>
 8009c44:	e7eb      	b.n	8009c1e <_printf_i+0x212>
 8009c46:	2500      	movs	r5, #0
 8009c48:	f104 0619 	add.w	r6, r4, #25
 8009c4c:	e7f5      	b.n	8009c3a <_printf_i+0x22e>
 8009c4e:	bf00      	nop
 8009c50:	0800e56a 	.word	0x0800e56a
 8009c54:	0800e57b 	.word	0x0800e57b

08009c58 <_scanf_float>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	b087      	sub	sp, #28
 8009c5e:	4617      	mov	r7, r2
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	688b      	ldr	r3, [r1, #8]
 8009c64:	1e5a      	subs	r2, r3, #1
 8009c66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009c6a:	bf83      	ittte	hi
 8009c6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009c70:	195b      	addhi	r3, r3, r5
 8009c72:	9302      	strhi	r3, [sp, #8]
 8009c74:	2300      	movls	r3, #0
 8009c76:	bf86      	itte	hi
 8009c78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009c7c:	608b      	strhi	r3, [r1, #8]
 8009c7e:	9302      	strls	r3, [sp, #8]
 8009c80:	680b      	ldr	r3, [r1, #0]
 8009c82:	468b      	mov	fp, r1
 8009c84:	2500      	movs	r5, #0
 8009c86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009c8a:	f84b 3b1c 	str.w	r3, [fp], #28
 8009c8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009c92:	4680      	mov	r8, r0
 8009c94:	460c      	mov	r4, r1
 8009c96:	465e      	mov	r6, fp
 8009c98:	46aa      	mov	sl, r5
 8009c9a:	46a9      	mov	r9, r5
 8009c9c:	9501      	str	r5, [sp, #4]
 8009c9e:	68a2      	ldr	r2, [r4, #8]
 8009ca0:	b152      	cbz	r2, 8009cb8 <_scanf_float+0x60>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b4e      	cmp	r3, #78	; 0x4e
 8009ca8:	d864      	bhi.n	8009d74 <_scanf_float+0x11c>
 8009caa:	2b40      	cmp	r3, #64	; 0x40
 8009cac:	d83c      	bhi.n	8009d28 <_scanf_float+0xd0>
 8009cae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009cb2:	b2c8      	uxtb	r0, r1
 8009cb4:	280e      	cmp	r0, #14
 8009cb6:	d93a      	bls.n	8009d2e <_scanf_float+0xd6>
 8009cb8:	f1b9 0f00 	cmp.w	r9, #0
 8009cbc:	d003      	beq.n	8009cc6 <_scanf_float+0x6e>
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cca:	f1ba 0f01 	cmp.w	sl, #1
 8009cce:	f200 8113 	bhi.w	8009ef8 <_scanf_float+0x2a0>
 8009cd2:	455e      	cmp	r6, fp
 8009cd4:	f200 8105 	bhi.w	8009ee2 <_scanf_float+0x28a>
 8009cd8:	2501      	movs	r5, #1
 8009cda:	4628      	mov	r0, r5
 8009cdc:	b007      	add	sp, #28
 8009cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009ce6:	2a0d      	cmp	r2, #13
 8009ce8:	d8e6      	bhi.n	8009cb8 <_scanf_float+0x60>
 8009cea:	a101      	add	r1, pc, #4	; (adr r1, 8009cf0 <_scanf_float+0x98>)
 8009cec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009cf0:	08009e2f 	.word	0x08009e2f
 8009cf4:	08009cb9 	.word	0x08009cb9
 8009cf8:	08009cb9 	.word	0x08009cb9
 8009cfc:	08009cb9 	.word	0x08009cb9
 8009d00:	08009e8f 	.word	0x08009e8f
 8009d04:	08009e67 	.word	0x08009e67
 8009d08:	08009cb9 	.word	0x08009cb9
 8009d0c:	08009cb9 	.word	0x08009cb9
 8009d10:	08009e3d 	.word	0x08009e3d
 8009d14:	08009cb9 	.word	0x08009cb9
 8009d18:	08009cb9 	.word	0x08009cb9
 8009d1c:	08009cb9 	.word	0x08009cb9
 8009d20:	08009cb9 	.word	0x08009cb9
 8009d24:	08009df5 	.word	0x08009df5
 8009d28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009d2c:	e7db      	b.n	8009ce6 <_scanf_float+0x8e>
 8009d2e:	290e      	cmp	r1, #14
 8009d30:	d8c2      	bhi.n	8009cb8 <_scanf_float+0x60>
 8009d32:	a001      	add	r0, pc, #4	; (adr r0, 8009d38 <_scanf_float+0xe0>)
 8009d34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009d38:	08009de7 	.word	0x08009de7
 8009d3c:	08009cb9 	.word	0x08009cb9
 8009d40:	08009de7 	.word	0x08009de7
 8009d44:	08009e7b 	.word	0x08009e7b
 8009d48:	08009cb9 	.word	0x08009cb9
 8009d4c:	08009d95 	.word	0x08009d95
 8009d50:	08009dd1 	.word	0x08009dd1
 8009d54:	08009dd1 	.word	0x08009dd1
 8009d58:	08009dd1 	.word	0x08009dd1
 8009d5c:	08009dd1 	.word	0x08009dd1
 8009d60:	08009dd1 	.word	0x08009dd1
 8009d64:	08009dd1 	.word	0x08009dd1
 8009d68:	08009dd1 	.word	0x08009dd1
 8009d6c:	08009dd1 	.word	0x08009dd1
 8009d70:	08009dd1 	.word	0x08009dd1
 8009d74:	2b6e      	cmp	r3, #110	; 0x6e
 8009d76:	d809      	bhi.n	8009d8c <_scanf_float+0x134>
 8009d78:	2b60      	cmp	r3, #96	; 0x60
 8009d7a:	d8b2      	bhi.n	8009ce2 <_scanf_float+0x8a>
 8009d7c:	2b54      	cmp	r3, #84	; 0x54
 8009d7e:	d077      	beq.n	8009e70 <_scanf_float+0x218>
 8009d80:	2b59      	cmp	r3, #89	; 0x59
 8009d82:	d199      	bne.n	8009cb8 <_scanf_float+0x60>
 8009d84:	2d07      	cmp	r5, #7
 8009d86:	d197      	bne.n	8009cb8 <_scanf_float+0x60>
 8009d88:	2508      	movs	r5, #8
 8009d8a:	e029      	b.n	8009de0 <_scanf_float+0x188>
 8009d8c:	2b74      	cmp	r3, #116	; 0x74
 8009d8e:	d06f      	beq.n	8009e70 <_scanf_float+0x218>
 8009d90:	2b79      	cmp	r3, #121	; 0x79
 8009d92:	e7f6      	b.n	8009d82 <_scanf_float+0x12a>
 8009d94:	6821      	ldr	r1, [r4, #0]
 8009d96:	05c8      	lsls	r0, r1, #23
 8009d98:	d51a      	bpl.n	8009dd0 <_scanf_float+0x178>
 8009d9a:	9b02      	ldr	r3, [sp, #8]
 8009d9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009da0:	6021      	str	r1, [r4, #0]
 8009da2:	f109 0901 	add.w	r9, r9, #1
 8009da6:	b11b      	cbz	r3, 8009db0 <_scanf_float+0x158>
 8009da8:	3b01      	subs	r3, #1
 8009daa:	3201      	adds	r2, #1
 8009dac:	9302      	str	r3, [sp, #8]
 8009dae:	60a2      	str	r2, [r4, #8]
 8009db0:	68a3      	ldr	r3, [r4, #8]
 8009db2:	3b01      	subs	r3, #1
 8009db4:	60a3      	str	r3, [r4, #8]
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	3301      	adds	r3, #1
 8009dba:	6123      	str	r3, [r4, #16]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	607b      	str	r3, [r7, #4]
 8009dc4:	f340 8084 	ble.w	8009ed0 <_scanf_float+0x278>
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	603b      	str	r3, [r7, #0]
 8009dce:	e766      	b.n	8009c9e <_scanf_float+0x46>
 8009dd0:	eb1a 0f05 	cmn.w	sl, r5
 8009dd4:	f47f af70 	bne.w	8009cb8 <_scanf_float+0x60>
 8009dd8:	6822      	ldr	r2, [r4, #0]
 8009dda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009dde:	6022      	str	r2, [r4, #0]
 8009de0:	f806 3b01 	strb.w	r3, [r6], #1
 8009de4:	e7e4      	b.n	8009db0 <_scanf_float+0x158>
 8009de6:	6822      	ldr	r2, [r4, #0]
 8009de8:	0610      	lsls	r0, r2, #24
 8009dea:	f57f af65 	bpl.w	8009cb8 <_scanf_float+0x60>
 8009dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009df2:	e7f4      	b.n	8009dde <_scanf_float+0x186>
 8009df4:	f1ba 0f00 	cmp.w	sl, #0
 8009df8:	d10e      	bne.n	8009e18 <_scanf_float+0x1c0>
 8009dfa:	f1b9 0f00 	cmp.w	r9, #0
 8009dfe:	d10e      	bne.n	8009e1e <_scanf_float+0x1c6>
 8009e00:	6822      	ldr	r2, [r4, #0]
 8009e02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e0a:	d108      	bne.n	8009e1e <_scanf_float+0x1c6>
 8009e0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e10:	6022      	str	r2, [r4, #0]
 8009e12:	f04f 0a01 	mov.w	sl, #1
 8009e16:	e7e3      	b.n	8009de0 <_scanf_float+0x188>
 8009e18:	f1ba 0f02 	cmp.w	sl, #2
 8009e1c:	d055      	beq.n	8009eca <_scanf_float+0x272>
 8009e1e:	2d01      	cmp	r5, #1
 8009e20:	d002      	beq.n	8009e28 <_scanf_float+0x1d0>
 8009e22:	2d04      	cmp	r5, #4
 8009e24:	f47f af48 	bne.w	8009cb8 <_scanf_float+0x60>
 8009e28:	3501      	adds	r5, #1
 8009e2a:	b2ed      	uxtb	r5, r5
 8009e2c:	e7d8      	b.n	8009de0 <_scanf_float+0x188>
 8009e2e:	f1ba 0f01 	cmp.w	sl, #1
 8009e32:	f47f af41 	bne.w	8009cb8 <_scanf_float+0x60>
 8009e36:	f04f 0a02 	mov.w	sl, #2
 8009e3a:	e7d1      	b.n	8009de0 <_scanf_float+0x188>
 8009e3c:	b97d      	cbnz	r5, 8009e5e <_scanf_float+0x206>
 8009e3e:	f1b9 0f00 	cmp.w	r9, #0
 8009e42:	f47f af3c 	bne.w	8009cbe <_scanf_float+0x66>
 8009e46:	6822      	ldr	r2, [r4, #0]
 8009e48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e50:	f47f af39 	bne.w	8009cc6 <_scanf_float+0x6e>
 8009e54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e58:	6022      	str	r2, [r4, #0]
 8009e5a:	2501      	movs	r5, #1
 8009e5c:	e7c0      	b.n	8009de0 <_scanf_float+0x188>
 8009e5e:	2d03      	cmp	r5, #3
 8009e60:	d0e2      	beq.n	8009e28 <_scanf_float+0x1d0>
 8009e62:	2d05      	cmp	r5, #5
 8009e64:	e7de      	b.n	8009e24 <_scanf_float+0x1cc>
 8009e66:	2d02      	cmp	r5, #2
 8009e68:	f47f af26 	bne.w	8009cb8 <_scanf_float+0x60>
 8009e6c:	2503      	movs	r5, #3
 8009e6e:	e7b7      	b.n	8009de0 <_scanf_float+0x188>
 8009e70:	2d06      	cmp	r5, #6
 8009e72:	f47f af21 	bne.w	8009cb8 <_scanf_float+0x60>
 8009e76:	2507      	movs	r5, #7
 8009e78:	e7b2      	b.n	8009de0 <_scanf_float+0x188>
 8009e7a:	6822      	ldr	r2, [r4, #0]
 8009e7c:	0591      	lsls	r1, r2, #22
 8009e7e:	f57f af1b 	bpl.w	8009cb8 <_scanf_float+0x60>
 8009e82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009e86:	6022      	str	r2, [r4, #0]
 8009e88:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e8c:	e7a8      	b.n	8009de0 <_scanf_float+0x188>
 8009e8e:	6822      	ldr	r2, [r4, #0]
 8009e90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009e94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009e98:	d006      	beq.n	8009ea8 <_scanf_float+0x250>
 8009e9a:	0550      	lsls	r0, r2, #21
 8009e9c:	f57f af0c 	bpl.w	8009cb8 <_scanf_float+0x60>
 8009ea0:	f1b9 0f00 	cmp.w	r9, #0
 8009ea4:	f43f af0f 	beq.w	8009cc6 <_scanf_float+0x6e>
 8009ea8:	0591      	lsls	r1, r2, #22
 8009eaa:	bf58      	it	pl
 8009eac:	9901      	ldrpl	r1, [sp, #4]
 8009eae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009eb2:	bf58      	it	pl
 8009eb4:	eba9 0101 	subpl.w	r1, r9, r1
 8009eb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009ebc:	bf58      	it	pl
 8009ebe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ec2:	6022      	str	r2, [r4, #0]
 8009ec4:	f04f 0900 	mov.w	r9, #0
 8009ec8:	e78a      	b.n	8009de0 <_scanf_float+0x188>
 8009eca:	f04f 0a03 	mov.w	sl, #3
 8009ece:	e787      	b.n	8009de0 <_scanf_float+0x188>
 8009ed0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	4798      	blx	r3
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f43f aedf 	beq.w	8009c9e <_scanf_float+0x46>
 8009ee0:	e6ea      	b.n	8009cb8 <_scanf_float+0x60>
 8009ee2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ee6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009eea:	463a      	mov	r2, r7
 8009eec:	4640      	mov	r0, r8
 8009eee:	4798      	blx	r3
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	6123      	str	r3, [r4, #16]
 8009ef6:	e6ec      	b.n	8009cd2 <_scanf_float+0x7a>
 8009ef8:	1e6b      	subs	r3, r5, #1
 8009efa:	2b06      	cmp	r3, #6
 8009efc:	d825      	bhi.n	8009f4a <_scanf_float+0x2f2>
 8009efe:	2d02      	cmp	r5, #2
 8009f00:	d836      	bhi.n	8009f70 <_scanf_float+0x318>
 8009f02:	455e      	cmp	r6, fp
 8009f04:	f67f aee8 	bls.w	8009cd8 <_scanf_float+0x80>
 8009f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f10:	463a      	mov	r2, r7
 8009f12:	4640      	mov	r0, r8
 8009f14:	4798      	blx	r3
 8009f16:	6923      	ldr	r3, [r4, #16]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	6123      	str	r3, [r4, #16]
 8009f1c:	e7f1      	b.n	8009f02 <_scanf_float+0x2aa>
 8009f1e:	9802      	ldr	r0, [sp, #8]
 8009f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009f28:	9002      	str	r0, [sp, #8]
 8009f2a:	463a      	mov	r2, r7
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4798      	blx	r3
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	6123      	str	r3, [r4, #16]
 8009f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f3a:	fa5f fa8a 	uxtb.w	sl, sl
 8009f3e:	f1ba 0f02 	cmp.w	sl, #2
 8009f42:	d1ec      	bne.n	8009f1e <_scanf_float+0x2c6>
 8009f44:	3d03      	subs	r5, #3
 8009f46:	b2ed      	uxtb	r5, r5
 8009f48:	1b76      	subs	r6, r6, r5
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	05da      	lsls	r2, r3, #23
 8009f4e:	d52f      	bpl.n	8009fb0 <_scanf_float+0x358>
 8009f50:	055b      	lsls	r3, r3, #21
 8009f52:	d510      	bpl.n	8009f76 <_scanf_float+0x31e>
 8009f54:	455e      	cmp	r6, fp
 8009f56:	f67f aebf 	bls.w	8009cd8 <_scanf_float+0x80>
 8009f5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f62:	463a      	mov	r2, r7
 8009f64:	4640      	mov	r0, r8
 8009f66:	4798      	blx	r3
 8009f68:	6923      	ldr	r3, [r4, #16]
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	6123      	str	r3, [r4, #16]
 8009f6e:	e7f1      	b.n	8009f54 <_scanf_float+0x2fc>
 8009f70:	46aa      	mov	sl, r5
 8009f72:	9602      	str	r6, [sp, #8]
 8009f74:	e7df      	b.n	8009f36 <_scanf_float+0x2de>
 8009f76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009f7a:	6923      	ldr	r3, [r4, #16]
 8009f7c:	2965      	cmp	r1, #101	; 0x65
 8009f7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f82:	f106 35ff 	add.w	r5, r6, #4294967295
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	d00c      	beq.n	8009fa4 <_scanf_float+0x34c>
 8009f8a:	2945      	cmp	r1, #69	; 0x45
 8009f8c:	d00a      	beq.n	8009fa4 <_scanf_float+0x34c>
 8009f8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f92:	463a      	mov	r2, r7
 8009f94:	4640      	mov	r0, r8
 8009f96:	4798      	blx	r3
 8009f98:	6923      	ldr	r3, [r4, #16]
 8009f9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	1eb5      	subs	r5, r6, #2
 8009fa2:	6123      	str	r3, [r4, #16]
 8009fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fa8:	463a      	mov	r2, r7
 8009faa:	4640      	mov	r0, r8
 8009fac:	4798      	blx	r3
 8009fae:	462e      	mov	r6, r5
 8009fb0:	6825      	ldr	r5, [r4, #0]
 8009fb2:	f015 0510 	ands.w	r5, r5, #16
 8009fb6:	d158      	bne.n	800a06a <_scanf_float+0x412>
 8009fb8:	7035      	strb	r5, [r6, #0]
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fc4:	d11c      	bne.n	800a000 <_scanf_float+0x3a8>
 8009fc6:	9b01      	ldr	r3, [sp, #4]
 8009fc8:	454b      	cmp	r3, r9
 8009fca:	eba3 0209 	sub.w	r2, r3, r9
 8009fce:	d124      	bne.n	800a01a <_scanf_float+0x3c2>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	4659      	mov	r1, fp
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	f000 ff29 	bl	800ae2c <_strtod_r>
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	6821      	ldr	r1, [r4, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f011 0f02 	tst.w	r1, #2
 8009fe4:	ec57 6b10 	vmov	r6, r7, d0
 8009fe8:	f103 0204 	add.w	r2, r3, #4
 8009fec:	d020      	beq.n	800a030 <_scanf_float+0x3d8>
 8009fee:	9903      	ldr	r1, [sp, #12]
 8009ff0:	600a      	str	r2, [r1, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	e9c3 6700 	strd	r6, r7, [r3]
 8009ff8:	68e3      	ldr	r3, [r4, #12]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	60e3      	str	r3, [r4, #12]
 8009ffe:	e66c      	b.n	8009cda <_scanf_float+0x82>
 800a000:	9b04      	ldr	r3, [sp, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0e4      	beq.n	8009fd0 <_scanf_float+0x378>
 800a006:	9905      	ldr	r1, [sp, #20]
 800a008:	230a      	movs	r3, #10
 800a00a:	462a      	mov	r2, r5
 800a00c:	3101      	adds	r1, #1
 800a00e:	4640      	mov	r0, r8
 800a010:	f000 ff96 	bl	800af40 <_strtol_r>
 800a014:	9b04      	ldr	r3, [sp, #16]
 800a016:	9e05      	ldr	r6, [sp, #20]
 800a018:	1ac2      	subs	r2, r0, r3
 800a01a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a01e:	429e      	cmp	r6, r3
 800a020:	bf28      	it	cs
 800a022:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a026:	4912      	ldr	r1, [pc, #72]	; (800a070 <_scanf_float+0x418>)
 800a028:	4630      	mov	r0, r6
 800a02a:	f000 f8b9 	bl	800a1a0 <siprintf>
 800a02e:	e7cf      	b.n	8009fd0 <_scanf_float+0x378>
 800a030:	f011 0f04 	tst.w	r1, #4
 800a034:	9903      	ldr	r1, [sp, #12]
 800a036:	600a      	str	r2, [r1, #0]
 800a038:	d1db      	bne.n	8009ff2 <_scanf_float+0x39a>
 800a03a:	f8d3 8000 	ldr.w	r8, [r3]
 800a03e:	ee10 2a10 	vmov	r2, s0
 800a042:	ee10 0a10 	vmov	r0, s0
 800a046:	463b      	mov	r3, r7
 800a048:	4639      	mov	r1, r7
 800a04a:	f7f6 fd6f 	bl	8000b2c <__aeabi_dcmpun>
 800a04e:	b128      	cbz	r0, 800a05c <_scanf_float+0x404>
 800a050:	4808      	ldr	r0, [pc, #32]	; (800a074 <_scanf_float+0x41c>)
 800a052:	f000 f89f 	bl	800a194 <nanf>
 800a056:	ed88 0a00 	vstr	s0, [r8]
 800a05a:	e7cd      	b.n	8009ff8 <_scanf_float+0x3a0>
 800a05c:	4630      	mov	r0, r6
 800a05e:	4639      	mov	r1, r7
 800a060:	f7f6 fdc2 	bl	8000be8 <__aeabi_d2f>
 800a064:	f8c8 0000 	str.w	r0, [r8]
 800a068:	e7c6      	b.n	8009ff8 <_scanf_float+0x3a0>
 800a06a:	2500      	movs	r5, #0
 800a06c:	e635      	b.n	8009cda <_scanf_float+0x82>
 800a06e:	bf00      	nop
 800a070:	0800e58c 	.word	0x0800e58c
 800a074:	0800ea08 	.word	0x0800ea08

0800a078 <iprintf>:
 800a078:	b40f      	push	{r0, r1, r2, r3}
 800a07a:	4b0a      	ldr	r3, [pc, #40]	; (800a0a4 <iprintf+0x2c>)
 800a07c:	b513      	push	{r0, r1, r4, lr}
 800a07e:	681c      	ldr	r4, [r3, #0]
 800a080:	b124      	cbz	r4, 800a08c <iprintf+0x14>
 800a082:	69a3      	ldr	r3, [r4, #24]
 800a084:	b913      	cbnz	r3, 800a08c <iprintf+0x14>
 800a086:	4620      	mov	r0, r4
 800a088:	f001 ffb0 	bl	800bfec <__sinit>
 800a08c:	ab05      	add	r3, sp, #20
 800a08e:	9a04      	ldr	r2, [sp, #16]
 800a090:	68a1      	ldr	r1, [r4, #8]
 800a092:	9301      	str	r3, [sp, #4]
 800a094:	4620      	mov	r0, r4
 800a096:	f003 fb35 	bl	800d704 <_vfiprintf_r>
 800a09a:	b002      	add	sp, #8
 800a09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a0:	b004      	add	sp, #16
 800a0a2:	4770      	bx	lr
 800a0a4:	2000000c 	.word	0x2000000c

0800a0a8 <_puts_r>:
 800a0a8:	b570      	push	{r4, r5, r6, lr}
 800a0aa:	460e      	mov	r6, r1
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	b118      	cbz	r0, 800a0b8 <_puts_r+0x10>
 800a0b0:	6983      	ldr	r3, [r0, #24]
 800a0b2:	b90b      	cbnz	r3, 800a0b8 <_puts_r+0x10>
 800a0b4:	f001 ff9a 	bl	800bfec <__sinit>
 800a0b8:	69ab      	ldr	r3, [r5, #24]
 800a0ba:	68ac      	ldr	r4, [r5, #8]
 800a0bc:	b913      	cbnz	r3, 800a0c4 <_puts_r+0x1c>
 800a0be:	4628      	mov	r0, r5
 800a0c0:	f001 ff94 	bl	800bfec <__sinit>
 800a0c4:	4b2c      	ldr	r3, [pc, #176]	; (800a178 <_puts_r+0xd0>)
 800a0c6:	429c      	cmp	r4, r3
 800a0c8:	d120      	bne.n	800a10c <_puts_r+0x64>
 800a0ca:	686c      	ldr	r4, [r5, #4]
 800a0cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0ce:	07db      	lsls	r3, r3, #31
 800a0d0:	d405      	bmi.n	800a0de <_puts_r+0x36>
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	0598      	lsls	r0, r3, #22
 800a0d6:	d402      	bmi.n	800a0de <_puts_r+0x36>
 800a0d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0da:	f002 fb98 	bl	800c80e <__retarget_lock_acquire_recursive>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	0719      	lsls	r1, r3, #28
 800a0e2:	d51d      	bpl.n	800a120 <_puts_r+0x78>
 800a0e4:	6923      	ldr	r3, [r4, #16]
 800a0e6:	b1db      	cbz	r3, 800a120 <_puts_r+0x78>
 800a0e8:	3e01      	subs	r6, #1
 800a0ea:	68a3      	ldr	r3, [r4, #8]
 800a0ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	60a3      	str	r3, [r4, #8]
 800a0f4:	bb39      	cbnz	r1, 800a146 <_puts_r+0x9e>
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	da38      	bge.n	800a16c <_puts_r+0xc4>
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	210a      	movs	r1, #10
 800a0fe:	4628      	mov	r0, r5
 800a100:	f000 ff20 	bl	800af44 <__swbuf_r>
 800a104:	3001      	adds	r0, #1
 800a106:	d011      	beq.n	800a12c <_puts_r+0x84>
 800a108:	250a      	movs	r5, #10
 800a10a:	e011      	b.n	800a130 <_puts_r+0x88>
 800a10c:	4b1b      	ldr	r3, [pc, #108]	; (800a17c <_puts_r+0xd4>)
 800a10e:	429c      	cmp	r4, r3
 800a110:	d101      	bne.n	800a116 <_puts_r+0x6e>
 800a112:	68ac      	ldr	r4, [r5, #8]
 800a114:	e7da      	b.n	800a0cc <_puts_r+0x24>
 800a116:	4b1a      	ldr	r3, [pc, #104]	; (800a180 <_puts_r+0xd8>)
 800a118:	429c      	cmp	r4, r3
 800a11a:	bf08      	it	eq
 800a11c:	68ec      	ldreq	r4, [r5, #12]
 800a11e:	e7d5      	b.n	800a0cc <_puts_r+0x24>
 800a120:	4621      	mov	r1, r4
 800a122:	4628      	mov	r0, r5
 800a124:	f000 ff60 	bl	800afe8 <__swsetup_r>
 800a128:	2800      	cmp	r0, #0
 800a12a:	d0dd      	beq.n	800a0e8 <_puts_r+0x40>
 800a12c:	f04f 35ff 	mov.w	r5, #4294967295
 800a130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a132:	07da      	lsls	r2, r3, #31
 800a134:	d405      	bmi.n	800a142 <_puts_r+0x9a>
 800a136:	89a3      	ldrh	r3, [r4, #12]
 800a138:	059b      	lsls	r3, r3, #22
 800a13a:	d402      	bmi.n	800a142 <_puts_r+0x9a>
 800a13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a13e:	f002 fb67 	bl	800c810 <__retarget_lock_release_recursive>
 800a142:	4628      	mov	r0, r5
 800a144:	bd70      	pop	{r4, r5, r6, pc}
 800a146:	2b00      	cmp	r3, #0
 800a148:	da04      	bge.n	800a154 <_puts_r+0xac>
 800a14a:	69a2      	ldr	r2, [r4, #24]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	dc06      	bgt.n	800a15e <_puts_r+0xb6>
 800a150:	290a      	cmp	r1, #10
 800a152:	d004      	beq.n	800a15e <_puts_r+0xb6>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	6022      	str	r2, [r4, #0]
 800a15a:	7019      	strb	r1, [r3, #0]
 800a15c:	e7c5      	b.n	800a0ea <_puts_r+0x42>
 800a15e:	4622      	mov	r2, r4
 800a160:	4628      	mov	r0, r5
 800a162:	f000 feef 	bl	800af44 <__swbuf_r>
 800a166:	3001      	adds	r0, #1
 800a168:	d1bf      	bne.n	800a0ea <_puts_r+0x42>
 800a16a:	e7df      	b.n	800a12c <_puts_r+0x84>
 800a16c:	6823      	ldr	r3, [r4, #0]
 800a16e:	250a      	movs	r5, #10
 800a170:	1c5a      	adds	r2, r3, #1
 800a172:	6022      	str	r2, [r4, #0]
 800a174:	701d      	strb	r5, [r3, #0]
 800a176:	e7db      	b.n	800a130 <_puts_r+0x88>
 800a178:	0800e7a0 	.word	0x0800e7a0
 800a17c:	0800e7c0 	.word	0x0800e7c0
 800a180:	0800e780 	.word	0x0800e780

0800a184 <puts>:
 800a184:	4b02      	ldr	r3, [pc, #8]	; (800a190 <puts+0xc>)
 800a186:	4601      	mov	r1, r0
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	f7ff bf8d 	b.w	800a0a8 <_puts_r>
 800a18e:	bf00      	nop
 800a190:	2000000c 	.word	0x2000000c

0800a194 <nanf>:
 800a194:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a19c <nanf+0x8>
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	7fc00000 	.word	0x7fc00000

0800a1a0 <siprintf>:
 800a1a0:	b40e      	push	{r1, r2, r3}
 800a1a2:	b500      	push	{lr}
 800a1a4:	b09c      	sub	sp, #112	; 0x70
 800a1a6:	ab1d      	add	r3, sp, #116	; 0x74
 800a1a8:	9002      	str	r0, [sp, #8]
 800a1aa:	9006      	str	r0, [sp, #24]
 800a1ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1b0:	4809      	ldr	r0, [pc, #36]	; (800a1d8 <siprintf+0x38>)
 800a1b2:	9107      	str	r1, [sp, #28]
 800a1b4:	9104      	str	r1, [sp, #16]
 800a1b6:	4909      	ldr	r1, [pc, #36]	; (800a1dc <siprintf+0x3c>)
 800a1b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1bc:	9105      	str	r1, [sp, #20]
 800a1be:	6800      	ldr	r0, [r0, #0]
 800a1c0:	9301      	str	r3, [sp, #4]
 800a1c2:	a902      	add	r1, sp, #8
 800a1c4:	f003 f974 	bl	800d4b0 <_svfiprintf_r>
 800a1c8:	9b02      	ldr	r3, [sp, #8]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	701a      	strb	r2, [r3, #0]
 800a1ce:	b01c      	add	sp, #112	; 0x70
 800a1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d4:	b003      	add	sp, #12
 800a1d6:	4770      	bx	lr
 800a1d8:	2000000c 	.word	0x2000000c
 800a1dc:	ffff0208 	.word	0xffff0208

0800a1e0 <sulp>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	460d      	mov	r5, r1
 800a1e6:	ec45 4b10 	vmov	d0, r4, r5
 800a1ea:	4616      	mov	r6, r2
 800a1ec:	f002 fefc 	bl	800cfe8 <__ulp>
 800a1f0:	ec51 0b10 	vmov	r0, r1, d0
 800a1f4:	b17e      	cbz	r6, 800a216 <sulp+0x36>
 800a1f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a1fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	dd09      	ble.n	800a216 <sulp+0x36>
 800a202:	051b      	lsls	r3, r3, #20
 800a204:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a208:	2400      	movs	r4, #0
 800a20a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a20e:	4622      	mov	r2, r4
 800a210:	462b      	mov	r3, r5
 800a212:	f7f6 f9f1 	bl	80005f8 <__aeabi_dmul>
 800a216:	bd70      	pop	{r4, r5, r6, pc}

0800a218 <_strtod_l>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	b0a3      	sub	sp, #140	; 0x8c
 800a21e:	461f      	mov	r7, r3
 800a220:	2300      	movs	r3, #0
 800a222:	931e      	str	r3, [sp, #120]	; 0x78
 800a224:	4ba4      	ldr	r3, [pc, #656]	; (800a4b8 <_strtod_l+0x2a0>)
 800a226:	9219      	str	r2, [sp, #100]	; 0x64
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	9307      	str	r3, [sp, #28]
 800a22c:	4604      	mov	r4, r0
 800a22e:	4618      	mov	r0, r3
 800a230:	4688      	mov	r8, r1
 800a232:	f7f5 ffcd 	bl	80001d0 <strlen>
 800a236:	f04f 0a00 	mov.w	sl, #0
 800a23a:	4605      	mov	r5, r0
 800a23c:	f04f 0b00 	mov.w	fp, #0
 800a240:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a246:	781a      	ldrb	r2, [r3, #0]
 800a248:	2a2b      	cmp	r2, #43	; 0x2b
 800a24a:	d04c      	beq.n	800a2e6 <_strtod_l+0xce>
 800a24c:	d839      	bhi.n	800a2c2 <_strtod_l+0xaa>
 800a24e:	2a0d      	cmp	r2, #13
 800a250:	d832      	bhi.n	800a2b8 <_strtod_l+0xa0>
 800a252:	2a08      	cmp	r2, #8
 800a254:	d832      	bhi.n	800a2bc <_strtod_l+0xa4>
 800a256:	2a00      	cmp	r2, #0
 800a258:	d03c      	beq.n	800a2d4 <_strtod_l+0xbc>
 800a25a:	2300      	movs	r3, #0
 800a25c:	930e      	str	r3, [sp, #56]	; 0x38
 800a25e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a260:	7833      	ldrb	r3, [r6, #0]
 800a262:	2b30      	cmp	r3, #48	; 0x30
 800a264:	f040 80b4 	bne.w	800a3d0 <_strtod_l+0x1b8>
 800a268:	7873      	ldrb	r3, [r6, #1]
 800a26a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a26e:	2b58      	cmp	r3, #88	; 0x58
 800a270:	d16c      	bne.n	800a34c <_strtod_l+0x134>
 800a272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	ab1e      	add	r3, sp, #120	; 0x78
 800a278:	9702      	str	r7, [sp, #8]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	4a8f      	ldr	r2, [pc, #572]	; (800a4bc <_strtod_l+0x2a4>)
 800a27e:	ab1f      	add	r3, sp, #124	; 0x7c
 800a280:	a91d      	add	r1, sp, #116	; 0x74
 800a282:	4620      	mov	r0, r4
 800a284:	f001 ffb6 	bl	800c1f4 <__gethex>
 800a288:	f010 0707 	ands.w	r7, r0, #7
 800a28c:	4605      	mov	r5, r0
 800a28e:	d005      	beq.n	800a29c <_strtod_l+0x84>
 800a290:	2f06      	cmp	r7, #6
 800a292:	d12a      	bne.n	800a2ea <_strtod_l+0xd2>
 800a294:	3601      	adds	r6, #1
 800a296:	2300      	movs	r3, #0
 800a298:	961d      	str	r6, [sp, #116]	; 0x74
 800a29a:	930e      	str	r3, [sp, #56]	; 0x38
 800a29c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f040 8596 	bne.w	800add0 <_strtod_l+0xbb8>
 800a2a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a6:	b1db      	cbz	r3, 800a2e0 <_strtod_l+0xc8>
 800a2a8:	4652      	mov	r2, sl
 800a2aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a2ae:	ec43 2b10 	vmov	d0, r2, r3
 800a2b2:	b023      	add	sp, #140	; 0x8c
 800a2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b8:	2a20      	cmp	r2, #32
 800a2ba:	d1ce      	bne.n	800a25a <_strtod_l+0x42>
 800a2bc:	3301      	adds	r3, #1
 800a2be:	931d      	str	r3, [sp, #116]	; 0x74
 800a2c0:	e7c0      	b.n	800a244 <_strtod_l+0x2c>
 800a2c2:	2a2d      	cmp	r2, #45	; 0x2d
 800a2c4:	d1c9      	bne.n	800a25a <_strtod_l+0x42>
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	920e      	str	r2, [sp, #56]	; 0x38
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	921d      	str	r2, [sp, #116]	; 0x74
 800a2ce:	785b      	ldrb	r3, [r3, #1]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d1c4      	bne.n	800a25e <_strtod_l+0x46>
 800a2d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2d6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f040 8576 	bne.w	800adcc <_strtod_l+0xbb4>
 800a2e0:	4652      	mov	r2, sl
 800a2e2:	465b      	mov	r3, fp
 800a2e4:	e7e3      	b.n	800a2ae <_strtod_l+0x96>
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	e7ee      	b.n	800a2c8 <_strtod_l+0xb0>
 800a2ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a2ec:	b13a      	cbz	r2, 800a2fe <_strtod_l+0xe6>
 800a2ee:	2135      	movs	r1, #53	; 0x35
 800a2f0:	a820      	add	r0, sp, #128	; 0x80
 800a2f2:	f002 ff84 	bl	800d1fe <__copybits>
 800a2f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f002 fb49 	bl	800c990 <_Bfree>
 800a2fe:	3f01      	subs	r7, #1
 800a300:	2f05      	cmp	r7, #5
 800a302:	d807      	bhi.n	800a314 <_strtod_l+0xfc>
 800a304:	e8df f007 	tbb	[pc, r7]
 800a308:	1d180b0e 	.word	0x1d180b0e
 800a30c:	030e      	.short	0x030e
 800a30e:	f04f 0b00 	mov.w	fp, #0
 800a312:	46da      	mov	sl, fp
 800a314:	0728      	lsls	r0, r5, #28
 800a316:	d5c1      	bpl.n	800a29c <_strtod_l+0x84>
 800a318:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a31c:	e7be      	b.n	800a29c <_strtod_l+0x84>
 800a31e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a322:	e7f7      	b.n	800a314 <_strtod_l+0xfc>
 800a324:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a328:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a32a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a32e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a332:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a336:	e7ed      	b.n	800a314 <_strtod_l+0xfc>
 800a338:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a4c0 <_strtod_l+0x2a8>
 800a33c:	f04f 0a00 	mov.w	sl, #0
 800a340:	e7e8      	b.n	800a314 <_strtod_l+0xfc>
 800a342:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a346:	f04f 3aff 	mov.w	sl, #4294967295
 800a34a:	e7e3      	b.n	800a314 <_strtod_l+0xfc>
 800a34c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	921d      	str	r2, [sp, #116]	; 0x74
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	2b30      	cmp	r3, #48	; 0x30
 800a356:	d0f9      	beq.n	800a34c <_strtod_l+0x134>
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d09f      	beq.n	800a29c <_strtod_l+0x84>
 800a35c:	2301      	movs	r3, #1
 800a35e:	f04f 0900 	mov.w	r9, #0
 800a362:	9304      	str	r3, [sp, #16]
 800a364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a366:	930a      	str	r3, [sp, #40]	; 0x28
 800a368:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a36c:	464f      	mov	r7, r9
 800a36e:	220a      	movs	r2, #10
 800a370:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a372:	7806      	ldrb	r6, [r0, #0]
 800a374:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a378:	b2d9      	uxtb	r1, r3
 800a37a:	2909      	cmp	r1, #9
 800a37c:	d92a      	bls.n	800a3d4 <_strtod_l+0x1bc>
 800a37e:	9907      	ldr	r1, [sp, #28]
 800a380:	462a      	mov	r2, r5
 800a382:	f003 fb4c 	bl	800da1e <strncmp>
 800a386:	b398      	cbz	r0, 800a3f0 <_strtod_l+0x1d8>
 800a388:	2000      	movs	r0, #0
 800a38a:	4633      	mov	r3, r6
 800a38c:	463d      	mov	r5, r7
 800a38e:	9007      	str	r0, [sp, #28]
 800a390:	4602      	mov	r2, r0
 800a392:	2b65      	cmp	r3, #101	; 0x65
 800a394:	d001      	beq.n	800a39a <_strtod_l+0x182>
 800a396:	2b45      	cmp	r3, #69	; 0x45
 800a398:	d118      	bne.n	800a3cc <_strtod_l+0x1b4>
 800a39a:	b91d      	cbnz	r5, 800a3a4 <_strtod_l+0x18c>
 800a39c:	9b04      	ldr	r3, [sp, #16]
 800a39e:	4303      	orrs	r3, r0
 800a3a0:	d098      	beq.n	800a2d4 <_strtod_l+0xbc>
 800a3a2:	2500      	movs	r5, #0
 800a3a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a3a8:	f108 0301 	add.w	r3, r8, #1
 800a3ac:	931d      	str	r3, [sp, #116]	; 0x74
 800a3ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a3b2:	2b2b      	cmp	r3, #43	; 0x2b
 800a3b4:	d075      	beq.n	800a4a2 <_strtod_l+0x28a>
 800a3b6:	2b2d      	cmp	r3, #45	; 0x2d
 800a3b8:	d07b      	beq.n	800a4b2 <_strtod_l+0x29a>
 800a3ba:	f04f 0c00 	mov.w	ip, #0
 800a3be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a3c2:	2909      	cmp	r1, #9
 800a3c4:	f240 8082 	bls.w	800a4cc <_strtod_l+0x2b4>
 800a3c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a3cc:	2600      	movs	r6, #0
 800a3ce:	e09d      	b.n	800a50c <_strtod_l+0x2f4>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	e7c4      	b.n	800a35e <_strtod_l+0x146>
 800a3d4:	2f08      	cmp	r7, #8
 800a3d6:	bfd8      	it	le
 800a3d8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a3da:	f100 0001 	add.w	r0, r0, #1
 800a3de:	bfda      	itte	le
 800a3e0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a3e4:	9309      	strle	r3, [sp, #36]	; 0x24
 800a3e6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a3ea:	3701      	adds	r7, #1
 800a3ec:	901d      	str	r0, [sp, #116]	; 0x74
 800a3ee:	e7bf      	b.n	800a370 <_strtod_l+0x158>
 800a3f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a3f2:	195a      	adds	r2, r3, r5
 800a3f4:	921d      	str	r2, [sp, #116]	; 0x74
 800a3f6:	5d5b      	ldrb	r3, [r3, r5]
 800a3f8:	2f00      	cmp	r7, #0
 800a3fa:	d037      	beq.n	800a46c <_strtod_l+0x254>
 800a3fc:	9007      	str	r0, [sp, #28]
 800a3fe:	463d      	mov	r5, r7
 800a400:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a404:	2a09      	cmp	r2, #9
 800a406:	d912      	bls.n	800a42e <_strtod_l+0x216>
 800a408:	2201      	movs	r2, #1
 800a40a:	e7c2      	b.n	800a392 <_strtod_l+0x17a>
 800a40c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a40e:	1c5a      	adds	r2, r3, #1
 800a410:	921d      	str	r2, [sp, #116]	; 0x74
 800a412:	785b      	ldrb	r3, [r3, #1]
 800a414:	3001      	adds	r0, #1
 800a416:	2b30      	cmp	r3, #48	; 0x30
 800a418:	d0f8      	beq.n	800a40c <_strtod_l+0x1f4>
 800a41a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a41e:	2a08      	cmp	r2, #8
 800a420:	f200 84db 	bhi.w	800adda <_strtod_l+0xbc2>
 800a424:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a426:	9007      	str	r0, [sp, #28]
 800a428:	2000      	movs	r0, #0
 800a42a:	920a      	str	r2, [sp, #40]	; 0x28
 800a42c:	4605      	mov	r5, r0
 800a42e:	3b30      	subs	r3, #48	; 0x30
 800a430:	f100 0201 	add.w	r2, r0, #1
 800a434:	d014      	beq.n	800a460 <_strtod_l+0x248>
 800a436:	9907      	ldr	r1, [sp, #28]
 800a438:	4411      	add	r1, r2
 800a43a:	9107      	str	r1, [sp, #28]
 800a43c:	462a      	mov	r2, r5
 800a43e:	eb00 0e05 	add.w	lr, r0, r5
 800a442:	210a      	movs	r1, #10
 800a444:	4572      	cmp	r2, lr
 800a446:	d113      	bne.n	800a470 <_strtod_l+0x258>
 800a448:	182a      	adds	r2, r5, r0
 800a44a:	2a08      	cmp	r2, #8
 800a44c:	f105 0501 	add.w	r5, r5, #1
 800a450:	4405      	add	r5, r0
 800a452:	dc1c      	bgt.n	800a48e <_strtod_l+0x276>
 800a454:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a456:	220a      	movs	r2, #10
 800a458:	fb02 3301 	mla	r3, r2, r1, r3
 800a45c:	9309      	str	r3, [sp, #36]	; 0x24
 800a45e:	2200      	movs	r2, #0
 800a460:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a462:	1c59      	adds	r1, r3, #1
 800a464:	911d      	str	r1, [sp, #116]	; 0x74
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	4610      	mov	r0, r2
 800a46a:	e7c9      	b.n	800a400 <_strtod_l+0x1e8>
 800a46c:	4638      	mov	r0, r7
 800a46e:	e7d2      	b.n	800a416 <_strtod_l+0x1fe>
 800a470:	2a08      	cmp	r2, #8
 800a472:	dc04      	bgt.n	800a47e <_strtod_l+0x266>
 800a474:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a476:	434e      	muls	r6, r1
 800a478:	9609      	str	r6, [sp, #36]	; 0x24
 800a47a:	3201      	adds	r2, #1
 800a47c:	e7e2      	b.n	800a444 <_strtod_l+0x22c>
 800a47e:	f102 0c01 	add.w	ip, r2, #1
 800a482:	f1bc 0f10 	cmp.w	ip, #16
 800a486:	bfd8      	it	le
 800a488:	fb01 f909 	mulle.w	r9, r1, r9
 800a48c:	e7f5      	b.n	800a47a <_strtod_l+0x262>
 800a48e:	2d10      	cmp	r5, #16
 800a490:	bfdc      	itt	le
 800a492:	220a      	movle	r2, #10
 800a494:	fb02 3909 	mlale	r9, r2, r9, r3
 800a498:	e7e1      	b.n	800a45e <_strtod_l+0x246>
 800a49a:	2300      	movs	r3, #0
 800a49c:	9307      	str	r3, [sp, #28]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	e77c      	b.n	800a39c <_strtod_l+0x184>
 800a4a2:	f04f 0c00 	mov.w	ip, #0
 800a4a6:	f108 0302 	add.w	r3, r8, #2
 800a4aa:	931d      	str	r3, [sp, #116]	; 0x74
 800a4ac:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a4b0:	e785      	b.n	800a3be <_strtod_l+0x1a6>
 800a4b2:	f04f 0c01 	mov.w	ip, #1
 800a4b6:	e7f6      	b.n	800a4a6 <_strtod_l+0x28e>
 800a4b8:	0800e84c 	.word	0x0800e84c
 800a4bc:	0800e594 	.word	0x0800e594
 800a4c0:	7ff00000 	.word	0x7ff00000
 800a4c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4c6:	1c59      	adds	r1, r3, #1
 800a4c8:	911d      	str	r1, [sp, #116]	; 0x74
 800a4ca:	785b      	ldrb	r3, [r3, #1]
 800a4cc:	2b30      	cmp	r3, #48	; 0x30
 800a4ce:	d0f9      	beq.n	800a4c4 <_strtod_l+0x2ac>
 800a4d0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a4d4:	2908      	cmp	r1, #8
 800a4d6:	f63f af79 	bhi.w	800a3cc <_strtod_l+0x1b4>
 800a4da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a4de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4e0:	9308      	str	r3, [sp, #32]
 800a4e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4e4:	1c59      	adds	r1, r3, #1
 800a4e6:	911d      	str	r1, [sp, #116]	; 0x74
 800a4e8:	785b      	ldrb	r3, [r3, #1]
 800a4ea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a4ee:	2e09      	cmp	r6, #9
 800a4f0:	d937      	bls.n	800a562 <_strtod_l+0x34a>
 800a4f2:	9e08      	ldr	r6, [sp, #32]
 800a4f4:	1b89      	subs	r1, r1, r6
 800a4f6:	2908      	cmp	r1, #8
 800a4f8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a4fc:	dc02      	bgt.n	800a504 <_strtod_l+0x2ec>
 800a4fe:	4576      	cmp	r6, lr
 800a500:	bfa8      	it	ge
 800a502:	4676      	movge	r6, lr
 800a504:	f1bc 0f00 	cmp.w	ip, #0
 800a508:	d000      	beq.n	800a50c <_strtod_l+0x2f4>
 800a50a:	4276      	negs	r6, r6
 800a50c:	2d00      	cmp	r5, #0
 800a50e:	d14f      	bne.n	800a5b0 <_strtod_l+0x398>
 800a510:	9904      	ldr	r1, [sp, #16]
 800a512:	4301      	orrs	r1, r0
 800a514:	f47f aec2 	bne.w	800a29c <_strtod_l+0x84>
 800a518:	2a00      	cmp	r2, #0
 800a51a:	f47f aedb 	bne.w	800a2d4 <_strtod_l+0xbc>
 800a51e:	2b69      	cmp	r3, #105	; 0x69
 800a520:	d027      	beq.n	800a572 <_strtod_l+0x35a>
 800a522:	dc24      	bgt.n	800a56e <_strtod_l+0x356>
 800a524:	2b49      	cmp	r3, #73	; 0x49
 800a526:	d024      	beq.n	800a572 <_strtod_l+0x35a>
 800a528:	2b4e      	cmp	r3, #78	; 0x4e
 800a52a:	f47f aed3 	bne.w	800a2d4 <_strtod_l+0xbc>
 800a52e:	499e      	ldr	r1, [pc, #632]	; (800a7a8 <_strtod_l+0x590>)
 800a530:	a81d      	add	r0, sp, #116	; 0x74
 800a532:	f002 f8b7 	bl	800c6a4 <__match>
 800a536:	2800      	cmp	r0, #0
 800a538:	f43f aecc 	beq.w	800a2d4 <_strtod_l+0xbc>
 800a53c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b28      	cmp	r3, #40	; 0x28
 800a542:	d12d      	bne.n	800a5a0 <_strtod_l+0x388>
 800a544:	4999      	ldr	r1, [pc, #612]	; (800a7ac <_strtod_l+0x594>)
 800a546:	aa20      	add	r2, sp, #128	; 0x80
 800a548:	a81d      	add	r0, sp, #116	; 0x74
 800a54a:	f002 f8bf 	bl	800c6cc <__hexnan>
 800a54e:	2805      	cmp	r0, #5
 800a550:	d126      	bne.n	800a5a0 <_strtod_l+0x388>
 800a552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a554:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a558:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a55c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a560:	e69c      	b.n	800a29c <_strtod_l+0x84>
 800a562:	210a      	movs	r1, #10
 800a564:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a568:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a56c:	e7b9      	b.n	800a4e2 <_strtod_l+0x2ca>
 800a56e:	2b6e      	cmp	r3, #110	; 0x6e
 800a570:	e7db      	b.n	800a52a <_strtod_l+0x312>
 800a572:	498f      	ldr	r1, [pc, #572]	; (800a7b0 <_strtod_l+0x598>)
 800a574:	a81d      	add	r0, sp, #116	; 0x74
 800a576:	f002 f895 	bl	800c6a4 <__match>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	f43f aeaa 	beq.w	800a2d4 <_strtod_l+0xbc>
 800a580:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a582:	498c      	ldr	r1, [pc, #560]	; (800a7b4 <_strtod_l+0x59c>)
 800a584:	3b01      	subs	r3, #1
 800a586:	a81d      	add	r0, sp, #116	; 0x74
 800a588:	931d      	str	r3, [sp, #116]	; 0x74
 800a58a:	f002 f88b 	bl	800c6a4 <__match>
 800a58e:	b910      	cbnz	r0, 800a596 <_strtod_l+0x37e>
 800a590:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a592:	3301      	adds	r3, #1
 800a594:	931d      	str	r3, [sp, #116]	; 0x74
 800a596:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a7c4 <_strtod_l+0x5ac>
 800a59a:	f04f 0a00 	mov.w	sl, #0
 800a59e:	e67d      	b.n	800a29c <_strtod_l+0x84>
 800a5a0:	4885      	ldr	r0, [pc, #532]	; (800a7b8 <_strtod_l+0x5a0>)
 800a5a2:	f003 f9e1 	bl	800d968 <nan>
 800a5a6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a5aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a5ae:	e675      	b.n	800a29c <_strtod_l+0x84>
 800a5b0:	9b07      	ldr	r3, [sp, #28]
 800a5b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5b4:	1af3      	subs	r3, r6, r3
 800a5b6:	2f00      	cmp	r7, #0
 800a5b8:	bf08      	it	eq
 800a5ba:	462f      	moveq	r7, r5
 800a5bc:	2d10      	cmp	r5, #16
 800a5be:	9308      	str	r3, [sp, #32]
 800a5c0:	46a8      	mov	r8, r5
 800a5c2:	bfa8      	it	ge
 800a5c4:	f04f 0810 	movge.w	r8, #16
 800a5c8:	f7f5 ff9c 	bl	8000504 <__aeabi_ui2d>
 800a5cc:	2d09      	cmp	r5, #9
 800a5ce:	4682      	mov	sl, r0
 800a5d0:	468b      	mov	fp, r1
 800a5d2:	dd13      	ble.n	800a5fc <_strtod_l+0x3e4>
 800a5d4:	4b79      	ldr	r3, [pc, #484]	; (800a7bc <_strtod_l+0x5a4>)
 800a5d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a5da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a5de:	f7f6 f80b 	bl	80005f8 <__aeabi_dmul>
 800a5e2:	4682      	mov	sl, r0
 800a5e4:	4648      	mov	r0, r9
 800a5e6:	468b      	mov	fp, r1
 800a5e8:	f7f5 ff8c 	bl	8000504 <__aeabi_ui2d>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	4659      	mov	r1, fp
 800a5f4:	f7f5 fe4a 	bl	800028c <__adddf3>
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	468b      	mov	fp, r1
 800a5fc:	2d0f      	cmp	r5, #15
 800a5fe:	dc38      	bgt.n	800a672 <_strtod_l+0x45a>
 800a600:	9b08      	ldr	r3, [sp, #32]
 800a602:	2b00      	cmp	r3, #0
 800a604:	f43f ae4a 	beq.w	800a29c <_strtod_l+0x84>
 800a608:	dd24      	ble.n	800a654 <_strtod_l+0x43c>
 800a60a:	2b16      	cmp	r3, #22
 800a60c:	dc0b      	bgt.n	800a626 <_strtod_l+0x40e>
 800a60e:	4d6b      	ldr	r5, [pc, #428]	; (800a7bc <_strtod_l+0x5a4>)
 800a610:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a614:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a618:	4652      	mov	r2, sl
 800a61a:	465b      	mov	r3, fp
 800a61c:	f7f5 ffec 	bl	80005f8 <__aeabi_dmul>
 800a620:	4682      	mov	sl, r0
 800a622:	468b      	mov	fp, r1
 800a624:	e63a      	b.n	800a29c <_strtod_l+0x84>
 800a626:	9a08      	ldr	r2, [sp, #32]
 800a628:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a62c:	4293      	cmp	r3, r2
 800a62e:	db20      	blt.n	800a672 <_strtod_l+0x45a>
 800a630:	4c62      	ldr	r4, [pc, #392]	; (800a7bc <_strtod_l+0x5a4>)
 800a632:	f1c5 050f 	rsb	r5, r5, #15
 800a636:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a63a:	4652      	mov	r2, sl
 800a63c:	465b      	mov	r3, fp
 800a63e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a642:	f7f5 ffd9 	bl	80005f8 <__aeabi_dmul>
 800a646:	9b08      	ldr	r3, [sp, #32]
 800a648:	1b5d      	subs	r5, r3, r5
 800a64a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a64e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a652:	e7e3      	b.n	800a61c <_strtod_l+0x404>
 800a654:	9b08      	ldr	r3, [sp, #32]
 800a656:	3316      	adds	r3, #22
 800a658:	db0b      	blt.n	800a672 <_strtod_l+0x45a>
 800a65a:	9b07      	ldr	r3, [sp, #28]
 800a65c:	4a57      	ldr	r2, [pc, #348]	; (800a7bc <_strtod_l+0x5a4>)
 800a65e:	1b9e      	subs	r6, r3, r6
 800a660:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a664:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a668:	4650      	mov	r0, sl
 800a66a:	4659      	mov	r1, fp
 800a66c:	f7f6 f8ee 	bl	800084c <__aeabi_ddiv>
 800a670:	e7d6      	b.n	800a620 <_strtod_l+0x408>
 800a672:	9b08      	ldr	r3, [sp, #32]
 800a674:	eba5 0808 	sub.w	r8, r5, r8
 800a678:	4498      	add	r8, r3
 800a67a:	f1b8 0f00 	cmp.w	r8, #0
 800a67e:	dd71      	ble.n	800a764 <_strtod_l+0x54c>
 800a680:	f018 030f 	ands.w	r3, r8, #15
 800a684:	d00a      	beq.n	800a69c <_strtod_l+0x484>
 800a686:	494d      	ldr	r1, [pc, #308]	; (800a7bc <_strtod_l+0x5a4>)
 800a688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a68c:	4652      	mov	r2, sl
 800a68e:	465b      	mov	r3, fp
 800a690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a694:	f7f5 ffb0 	bl	80005f8 <__aeabi_dmul>
 800a698:	4682      	mov	sl, r0
 800a69a:	468b      	mov	fp, r1
 800a69c:	f038 080f 	bics.w	r8, r8, #15
 800a6a0:	d04d      	beq.n	800a73e <_strtod_l+0x526>
 800a6a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a6a6:	dd22      	ble.n	800a6ee <_strtod_l+0x4d6>
 800a6a8:	2500      	movs	r5, #0
 800a6aa:	462e      	mov	r6, r5
 800a6ac:	9509      	str	r5, [sp, #36]	; 0x24
 800a6ae:	9507      	str	r5, [sp, #28]
 800a6b0:	2322      	movs	r3, #34	; 0x22
 800a6b2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a7c4 <_strtod_l+0x5ac>
 800a6b6:	6023      	str	r3, [r4, #0]
 800a6b8:	f04f 0a00 	mov.w	sl, #0
 800a6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f43f adec 	beq.w	800a29c <_strtod_l+0x84>
 800a6c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f002 f962 	bl	800c990 <_Bfree>
 800a6cc:	9907      	ldr	r1, [sp, #28]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f002 f95e 	bl	800c990 <_Bfree>
 800a6d4:	4631      	mov	r1, r6
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f002 f95a 	bl	800c990 <_Bfree>
 800a6dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f002 f956 	bl	800c990 <_Bfree>
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f002 f952 	bl	800c990 <_Bfree>
 800a6ec:	e5d6      	b.n	800a29c <_strtod_l+0x84>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	4659      	mov	r1, fp
 800a6f8:	4699      	mov	r9, r3
 800a6fa:	f1b8 0f01 	cmp.w	r8, #1
 800a6fe:	dc21      	bgt.n	800a744 <_strtod_l+0x52c>
 800a700:	b10b      	cbz	r3, 800a706 <_strtod_l+0x4ee>
 800a702:	4682      	mov	sl, r0
 800a704:	468b      	mov	fp, r1
 800a706:	4b2e      	ldr	r3, [pc, #184]	; (800a7c0 <_strtod_l+0x5a8>)
 800a708:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a70c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a710:	4652      	mov	r2, sl
 800a712:	465b      	mov	r3, fp
 800a714:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a718:	f7f5 ff6e 	bl	80005f8 <__aeabi_dmul>
 800a71c:	4b29      	ldr	r3, [pc, #164]	; (800a7c4 <_strtod_l+0x5ac>)
 800a71e:	460a      	mov	r2, r1
 800a720:	400b      	ands	r3, r1
 800a722:	4929      	ldr	r1, [pc, #164]	; (800a7c8 <_strtod_l+0x5b0>)
 800a724:	428b      	cmp	r3, r1
 800a726:	4682      	mov	sl, r0
 800a728:	d8be      	bhi.n	800a6a8 <_strtod_l+0x490>
 800a72a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a72e:	428b      	cmp	r3, r1
 800a730:	bf86      	itte	hi
 800a732:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a7cc <_strtod_l+0x5b4>
 800a736:	f04f 3aff 	movhi.w	sl, #4294967295
 800a73a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a73e:	2300      	movs	r3, #0
 800a740:	9304      	str	r3, [sp, #16]
 800a742:	e081      	b.n	800a848 <_strtod_l+0x630>
 800a744:	f018 0f01 	tst.w	r8, #1
 800a748:	d007      	beq.n	800a75a <_strtod_l+0x542>
 800a74a:	4b1d      	ldr	r3, [pc, #116]	; (800a7c0 <_strtod_l+0x5a8>)
 800a74c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	f7f5 ff50 	bl	80005f8 <__aeabi_dmul>
 800a758:	2301      	movs	r3, #1
 800a75a:	f109 0901 	add.w	r9, r9, #1
 800a75e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a762:	e7ca      	b.n	800a6fa <_strtod_l+0x4e2>
 800a764:	d0eb      	beq.n	800a73e <_strtod_l+0x526>
 800a766:	f1c8 0800 	rsb	r8, r8, #0
 800a76a:	f018 020f 	ands.w	r2, r8, #15
 800a76e:	d00a      	beq.n	800a786 <_strtod_l+0x56e>
 800a770:	4b12      	ldr	r3, [pc, #72]	; (800a7bc <_strtod_l+0x5a4>)
 800a772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a776:	4650      	mov	r0, sl
 800a778:	4659      	mov	r1, fp
 800a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77e:	f7f6 f865 	bl	800084c <__aeabi_ddiv>
 800a782:	4682      	mov	sl, r0
 800a784:	468b      	mov	fp, r1
 800a786:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a78a:	d0d8      	beq.n	800a73e <_strtod_l+0x526>
 800a78c:	f1b8 0f1f 	cmp.w	r8, #31
 800a790:	dd1e      	ble.n	800a7d0 <_strtod_l+0x5b8>
 800a792:	2500      	movs	r5, #0
 800a794:	462e      	mov	r6, r5
 800a796:	9509      	str	r5, [sp, #36]	; 0x24
 800a798:	9507      	str	r5, [sp, #28]
 800a79a:	2322      	movs	r3, #34	; 0x22
 800a79c:	f04f 0a00 	mov.w	sl, #0
 800a7a0:	f04f 0b00 	mov.w	fp, #0
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	e789      	b.n	800a6bc <_strtod_l+0x4a4>
 800a7a8:	0800e565 	.word	0x0800e565
 800a7ac:	0800e5a8 	.word	0x0800e5a8
 800a7b0:	0800e55d 	.word	0x0800e55d
 800a7b4:	0800e6ec 	.word	0x0800e6ec
 800a7b8:	0800ea08 	.word	0x0800ea08
 800a7bc:	0800e8e8 	.word	0x0800e8e8
 800a7c0:	0800e8c0 	.word	0x0800e8c0
 800a7c4:	7ff00000 	.word	0x7ff00000
 800a7c8:	7ca00000 	.word	0x7ca00000
 800a7cc:	7fefffff 	.word	0x7fefffff
 800a7d0:	f018 0310 	ands.w	r3, r8, #16
 800a7d4:	bf18      	it	ne
 800a7d6:	236a      	movne	r3, #106	; 0x6a
 800a7d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ab90 <_strtod_l+0x978>
 800a7dc:	9304      	str	r3, [sp, #16]
 800a7de:	4650      	mov	r0, sl
 800a7e0:	4659      	mov	r1, fp
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f018 0f01 	tst.w	r8, #1
 800a7e8:	d004      	beq.n	800a7f4 <_strtod_l+0x5dc>
 800a7ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a7ee:	f7f5 ff03 	bl	80005f8 <__aeabi_dmul>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a7f8:	f109 0908 	add.w	r9, r9, #8
 800a7fc:	d1f2      	bne.n	800a7e4 <_strtod_l+0x5cc>
 800a7fe:	b10b      	cbz	r3, 800a804 <_strtod_l+0x5ec>
 800a800:	4682      	mov	sl, r0
 800a802:	468b      	mov	fp, r1
 800a804:	9b04      	ldr	r3, [sp, #16]
 800a806:	b1bb      	cbz	r3, 800a838 <_strtod_l+0x620>
 800a808:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a80c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a810:	2b00      	cmp	r3, #0
 800a812:	4659      	mov	r1, fp
 800a814:	dd10      	ble.n	800a838 <_strtod_l+0x620>
 800a816:	2b1f      	cmp	r3, #31
 800a818:	f340 8128 	ble.w	800aa6c <_strtod_l+0x854>
 800a81c:	2b34      	cmp	r3, #52	; 0x34
 800a81e:	bfde      	ittt	le
 800a820:	3b20      	suble	r3, #32
 800a822:	f04f 32ff 	movle.w	r2, #4294967295
 800a826:	fa02 f303 	lslle.w	r3, r2, r3
 800a82a:	f04f 0a00 	mov.w	sl, #0
 800a82e:	bfcc      	ite	gt
 800a830:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a834:	ea03 0b01 	andle.w	fp, r3, r1
 800a838:	2200      	movs	r2, #0
 800a83a:	2300      	movs	r3, #0
 800a83c:	4650      	mov	r0, sl
 800a83e:	4659      	mov	r1, fp
 800a840:	f7f6 f942 	bl	8000ac8 <__aeabi_dcmpeq>
 800a844:	2800      	cmp	r0, #0
 800a846:	d1a4      	bne.n	800a792 <_strtod_l+0x57a>
 800a848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a84e:	462b      	mov	r3, r5
 800a850:	463a      	mov	r2, r7
 800a852:	4620      	mov	r0, r4
 800a854:	f002 f908 	bl	800ca68 <__s2b>
 800a858:	9009      	str	r0, [sp, #36]	; 0x24
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f43f af24 	beq.w	800a6a8 <_strtod_l+0x490>
 800a860:	9b07      	ldr	r3, [sp, #28]
 800a862:	1b9e      	subs	r6, r3, r6
 800a864:	9b08      	ldr	r3, [sp, #32]
 800a866:	2b00      	cmp	r3, #0
 800a868:	bfb4      	ite	lt
 800a86a:	4633      	movlt	r3, r6
 800a86c:	2300      	movge	r3, #0
 800a86e:	9310      	str	r3, [sp, #64]	; 0x40
 800a870:	9b08      	ldr	r3, [sp, #32]
 800a872:	2500      	movs	r5, #0
 800a874:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a878:	9318      	str	r3, [sp, #96]	; 0x60
 800a87a:	462e      	mov	r6, r5
 800a87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87e:	4620      	mov	r0, r4
 800a880:	6859      	ldr	r1, [r3, #4]
 800a882:	f002 f845 	bl	800c910 <_Balloc>
 800a886:	9007      	str	r0, [sp, #28]
 800a888:	2800      	cmp	r0, #0
 800a88a:	f43f af11 	beq.w	800a6b0 <_strtod_l+0x498>
 800a88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a890:	691a      	ldr	r2, [r3, #16]
 800a892:	3202      	adds	r2, #2
 800a894:	f103 010c 	add.w	r1, r3, #12
 800a898:	0092      	lsls	r2, r2, #2
 800a89a:	300c      	adds	r0, #12
 800a89c:	f7fe fd5c 	bl	8009358 <memcpy>
 800a8a0:	ec4b ab10 	vmov	d0, sl, fp
 800a8a4:	aa20      	add	r2, sp, #128	; 0x80
 800a8a6:	a91f      	add	r1, sp, #124	; 0x7c
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a8ae:	f002 fc17 	bl	800d0e0 <__d2b>
 800a8b2:	901e      	str	r0, [sp, #120]	; 0x78
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	f43f aefb 	beq.w	800a6b0 <_strtod_l+0x498>
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f002 f96d 	bl	800cb9c <__i2b>
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	f43f aef3 	beq.w	800a6b0 <_strtod_l+0x498>
 800a8ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a8cc:	9904      	ldr	r1, [sp, #16]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	bfab      	itete	ge
 800a8d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800a8d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800a8d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800a8d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800a8dc:	bfac      	ite	ge
 800a8de:	eb03 0902 	addge.w	r9, r3, r2
 800a8e2:	1ad7      	sublt	r7, r2, r3
 800a8e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a8e6:	eba3 0801 	sub.w	r8, r3, r1
 800a8ea:	4490      	add	r8, r2
 800a8ec:	4ba3      	ldr	r3, [pc, #652]	; (800ab7c <_strtod_l+0x964>)
 800a8ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800a8f2:	4598      	cmp	r8, r3
 800a8f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a8f8:	f280 80cc 	bge.w	800aa94 <_strtod_l+0x87c>
 800a8fc:	eba3 0308 	sub.w	r3, r3, r8
 800a900:	2b1f      	cmp	r3, #31
 800a902:	eba2 0203 	sub.w	r2, r2, r3
 800a906:	f04f 0101 	mov.w	r1, #1
 800a90a:	f300 80b6 	bgt.w	800aa7a <_strtod_l+0x862>
 800a90e:	fa01 f303 	lsl.w	r3, r1, r3
 800a912:	9311      	str	r3, [sp, #68]	; 0x44
 800a914:	2300      	movs	r3, #0
 800a916:	930c      	str	r3, [sp, #48]	; 0x30
 800a918:	eb09 0802 	add.w	r8, r9, r2
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	45c1      	cmp	r9, r8
 800a920:	4417      	add	r7, r2
 800a922:	441f      	add	r7, r3
 800a924:	464b      	mov	r3, r9
 800a926:	bfa8      	it	ge
 800a928:	4643      	movge	r3, r8
 800a92a:	42bb      	cmp	r3, r7
 800a92c:	bfa8      	it	ge
 800a92e:	463b      	movge	r3, r7
 800a930:	2b00      	cmp	r3, #0
 800a932:	bfc2      	ittt	gt
 800a934:	eba8 0803 	subgt.w	r8, r8, r3
 800a938:	1aff      	subgt	r7, r7, r3
 800a93a:	eba9 0903 	subgt.w	r9, r9, r3
 800a93e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a940:	2b00      	cmp	r3, #0
 800a942:	dd17      	ble.n	800a974 <_strtod_l+0x75c>
 800a944:	4631      	mov	r1, r6
 800a946:	461a      	mov	r2, r3
 800a948:	4620      	mov	r0, r4
 800a94a:	f002 f9e3 	bl	800cd14 <__pow5mult>
 800a94e:	4606      	mov	r6, r0
 800a950:	2800      	cmp	r0, #0
 800a952:	f43f aead 	beq.w	800a6b0 <_strtod_l+0x498>
 800a956:	4601      	mov	r1, r0
 800a958:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a95a:	4620      	mov	r0, r4
 800a95c:	f002 f934 	bl	800cbc8 <__multiply>
 800a960:	900f      	str	r0, [sp, #60]	; 0x3c
 800a962:	2800      	cmp	r0, #0
 800a964:	f43f aea4 	beq.w	800a6b0 <_strtod_l+0x498>
 800a968:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a96a:	4620      	mov	r0, r4
 800a96c:	f002 f810 	bl	800c990 <_Bfree>
 800a970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a972:	931e      	str	r3, [sp, #120]	; 0x78
 800a974:	f1b8 0f00 	cmp.w	r8, #0
 800a978:	f300 8091 	bgt.w	800aa9e <_strtod_l+0x886>
 800a97c:	9b08      	ldr	r3, [sp, #32]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	dd08      	ble.n	800a994 <_strtod_l+0x77c>
 800a982:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a984:	9907      	ldr	r1, [sp, #28]
 800a986:	4620      	mov	r0, r4
 800a988:	f002 f9c4 	bl	800cd14 <__pow5mult>
 800a98c:	9007      	str	r0, [sp, #28]
 800a98e:	2800      	cmp	r0, #0
 800a990:	f43f ae8e 	beq.w	800a6b0 <_strtod_l+0x498>
 800a994:	2f00      	cmp	r7, #0
 800a996:	dd08      	ble.n	800a9aa <_strtod_l+0x792>
 800a998:	9907      	ldr	r1, [sp, #28]
 800a99a:	463a      	mov	r2, r7
 800a99c:	4620      	mov	r0, r4
 800a99e:	f002 fa13 	bl	800cdc8 <__lshift>
 800a9a2:	9007      	str	r0, [sp, #28]
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	f43f ae83 	beq.w	800a6b0 <_strtod_l+0x498>
 800a9aa:	f1b9 0f00 	cmp.w	r9, #0
 800a9ae:	dd08      	ble.n	800a9c2 <_strtod_l+0x7aa>
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	464a      	mov	r2, r9
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f002 fa07 	bl	800cdc8 <__lshift>
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	f43f ae77 	beq.w	800a6b0 <_strtod_l+0x498>
 800a9c2:	9a07      	ldr	r2, [sp, #28]
 800a9c4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f002 fa86 	bl	800ced8 <__mdiff>
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	f43f ae6e 	beq.w	800a6b0 <_strtod_l+0x498>
 800a9d4:	68c3      	ldr	r3, [r0, #12]
 800a9d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60c3      	str	r3, [r0, #12]
 800a9dc:	4631      	mov	r1, r6
 800a9de:	f002 fa5f 	bl	800cea0 <__mcmp>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	da65      	bge.n	800aab2 <_strtod_l+0x89a>
 800a9e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9e8:	ea53 030a 	orrs.w	r3, r3, sl
 800a9ec:	f040 8087 	bne.w	800aafe <_strtod_l+0x8e6>
 800a9f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f040 8082 	bne.w	800aafe <_strtod_l+0x8e6>
 800a9fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a9fe:	0d1b      	lsrs	r3, r3, #20
 800aa00:	051b      	lsls	r3, r3, #20
 800aa02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa06:	d97a      	bls.n	800aafe <_strtod_l+0x8e6>
 800aa08:	696b      	ldr	r3, [r5, #20]
 800aa0a:	b913      	cbnz	r3, 800aa12 <_strtod_l+0x7fa>
 800aa0c:	692b      	ldr	r3, [r5, #16]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	dd75      	ble.n	800aafe <_strtod_l+0x8e6>
 800aa12:	4629      	mov	r1, r5
 800aa14:	2201      	movs	r2, #1
 800aa16:	4620      	mov	r0, r4
 800aa18:	f002 f9d6 	bl	800cdc8 <__lshift>
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	4605      	mov	r5, r0
 800aa20:	f002 fa3e 	bl	800cea0 <__mcmp>
 800aa24:	2800      	cmp	r0, #0
 800aa26:	dd6a      	ble.n	800aafe <_strtod_l+0x8e6>
 800aa28:	9904      	ldr	r1, [sp, #16]
 800aa2a:	4a55      	ldr	r2, [pc, #340]	; (800ab80 <_strtod_l+0x968>)
 800aa2c:	465b      	mov	r3, fp
 800aa2e:	2900      	cmp	r1, #0
 800aa30:	f000 8085 	beq.w	800ab3e <_strtod_l+0x926>
 800aa34:	ea02 010b 	and.w	r1, r2, fp
 800aa38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa3c:	dc7f      	bgt.n	800ab3e <_strtod_l+0x926>
 800aa3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa42:	f77f aeaa 	ble.w	800a79a <_strtod_l+0x582>
 800aa46:	4a4f      	ldr	r2, [pc, #316]	; (800ab84 <_strtod_l+0x96c>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800aa4e:	4650      	mov	r0, sl
 800aa50:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800aa54:	4659      	mov	r1, fp
 800aa56:	f7f5 fdcf 	bl	80005f8 <__aeabi_dmul>
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4303      	orrs	r3, r0
 800aa5e:	bf08      	it	eq
 800aa60:	2322      	moveq	r3, #34	; 0x22
 800aa62:	4682      	mov	sl, r0
 800aa64:	468b      	mov	fp, r1
 800aa66:	bf08      	it	eq
 800aa68:	6023      	streq	r3, [r4, #0]
 800aa6a:	e62b      	b.n	800a6c4 <_strtod_l+0x4ac>
 800aa6c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa70:	fa02 f303 	lsl.w	r3, r2, r3
 800aa74:	ea03 0a0a 	and.w	sl, r3, sl
 800aa78:	e6de      	b.n	800a838 <_strtod_l+0x620>
 800aa7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aa7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aa82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aa86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aa8a:	fa01 f308 	lsl.w	r3, r1, r8
 800aa8e:	930c      	str	r3, [sp, #48]	; 0x30
 800aa90:	9111      	str	r1, [sp, #68]	; 0x44
 800aa92:	e741      	b.n	800a918 <_strtod_l+0x700>
 800aa94:	2300      	movs	r3, #0
 800aa96:	930c      	str	r3, [sp, #48]	; 0x30
 800aa98:	2301      	movs	r3, #1
 800aa9a:	9311      	str	r3, [sp, #68]	; 0x44
 800aa9c:	e73c      	b.n	800a918 <_strtod_l+0x700>
 800aa9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aaa0:	4642      	mov	r2, r8
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f002 f990 	bl	800cdc8 <__lshift>
 800aaa8:	901e      	str	r0, [sp, #120]	; 0x78
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	f47f af66 	bne.w	800a97c <_strtod_l+0x764>
 800aab0:	e5fe      	b.n	800a6b0 <_strtod_l+0x498>
 800aab2:	465f      	mov	r7, fp
 800aab4:	d16e      	bne.n	800ab94 <_strtod_l+0x97c>
 800aab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aab8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aabc:	b342      	cbz	r2, 800ab10 <_strtod_l+0x8f8>
 800aabe:	4a32      	ldr	r2, [pc, #200]	; (800ab88 <_strtod_l+0x970>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d128      	bne.n	800ab16 <_strtod_l+0x8fe>
 800aac4:	9b04      	ldr	r3, [sp, #16]
 800aac6:	4650      	mov	r0, sl
 800aac8:	b1eb      	cbz	r3, 800ab06 <_strtod_l+0x8ee>
 800aaca:	4a2d      	ldr	r2, [pc, #180]	; (800ab80 <_strtod_l+0x968>)
 800aacc:	403a      	ands	r2, r7
 800aace:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800aad2:	f04f 31ff 	mov.w	r1, #4294967295
 800aad6:	d819      	bhi.n	800ab0c <_strtod_l+0x8f4>
 800aad8:	0d12      	lsrs	r2, r2, #20
 800aada:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aade:	fa01 f303 	lsl.w	r3, r1, r3
 800aae2:	4298      	cmp	r0, r3
 800aae4:	d117      	bne.n	800ab16 <_strtod_l+0x8fe>
 800aae6:	4b29      	ldr	r3, [pc, #164]	; (800ab8c <_strtod_l+0x974>)
 800aae8:	429f      	cmp	r7, r3
 800aaea:	d102      	bne.n	800aaf2 <_strtod_l+0x8da>
 800aaec:	3001      	adds	r0, #1
 800aaee:	f43f addf 	beq.w	800a6b0 <_strtod_l+0x498>
 800aaf2:	4b23      	ldr	r3, [pc, #140]	; (800ab80 <_strtod_l+0x968>)
 800aaf4:	403b      	ands	r3, r7
 800aaf6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800aafa:	f04f 0a00 	mov.w	sl, #0
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1a0      	bne.n	800aa46 <_strtod_l+0x82e>
 800ab04:	e5de      	b.n	800a6c4 <_strtod_l+0x4ac>
 800ab06:	f04f 33ff 	mov.w	r3, #4294967295
 800ab0a:	e7ea      	b.n	800aae2 <_strtod_l+0x8ca>
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	e7e8      	b.n	800aae2 <_strtod_l+0x8ca>
 800ab10:	ea53 030a 	orrs.w	r3, r3, sl
 800ab14:	d088      	beq.n	800aa28 <_strtod_l+0x810>
 800ab16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab18:	b1db      	cbz	r3, 800ab52 <_strtod_l+0x93a>
 800ab1a:	423b      	tst	r3, r7
 800ab1c:	d0ef      	beq.n	800aafe <_strtod_l+0x8e6>
 800ab1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab20:	9a04      	ldr	r2, [sp, #16]
 800ab22:	4650      	mov	r0, sl
 800ab24:	4659      	mov	r1, fp
 800ab26:	b1c3      	cbz	r3, 800ab5a <_strtod_l+0x942>
 800ab28:	f7ff fb5a 	bl	800a1e0 <sulp>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab34:	f7f5 fbaa 	bl	800028c <__adddf3>
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	e7df      	b.n	800aafe <_strtod_l+0x8e6>
 800ab3e:	4013      	ands	r3, r2
 800ab40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ab44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ab48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ab4c:	f04f 3aff 	mov.w	sl, #4294967295
 800ab50:	e7d5      	b.n	800aafe <_strtod_l+0x8e6>
 800ab52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab54:	ea13 0f0a 	tst.w	r3, sl
 800ab58:	e7e0      	b.n	800ab1c <_strtod_l+0x904>
 800ab5a:	f7ff fb41 	bl	800a1e0 <sulp>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab66:	f7f5 fb8f 	bl	8000288 <__aeabi_dsub>
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	4682      	mov	sl, r0
 800ab70:	468b      	mov	fp, r1
 800ab72:	f7f5 ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d0c1      	beq.n	800aafe <_strtod_l+0x8e6>
 800ab7a:	e60e      	b.n	800a79a <_strtod_l+0x582>
 800ab7c:	fffffc02 	.word	0xfffffc02
 800ab80:	7ff00000 	.word	0x7ff00000
 800ab84:	39500000 	.word	0x39500000
 800ab88:	000fffff 	.word	0x000fffff
 800ab8c:	7fefffff 	.word	0x7fefffff
 800ab90:	0800e5c0 	.word	0x0800e5c0
 800ab94:	4631      	mov	r1, r6
 800ab96:	4628      	mov	r0, r5
 800ab98:	f002 fafe 	bl	800d198 <__ratio>
 800ab9c:	ec59 8b10 	vmov	r8, r9, d0
 800aba0:	ee10 0a10 	vmov	r0, s0
 800aba4:	2200      	movs	r2, #0
 800aba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800abaa:	4649      	mov	r1, r9
 800abac:	f7f5 ffa0 	bl	8000af0 <__aeabi_dcmple>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d07c      	beq.n	800acae <_strtod_l+0xa96>
 800abb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d04c      	beq.n	800ac54 <_strtod_l+0xa3c>
 800abba:	4b95      	ldr	r3, [pc, #596]	; (800ae10 <_strtod_l+0xbf8>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800abc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ae10 <_strtod_l+0xbf8>
 800abc6:	f04f 0800 	mov.w	r8, #0
 800abca:	4b92      	ldr	r3, [pc, #584]	; (800ae14 <_strtod_l+0xbfc>)
 800abcc:	403b      	ands	r3, r7
 800abce:	9311      	str	r3, [sp, #68]	; 0x44
 800abd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800abd2:	4b91      	ldr	r3, [pc, #580]	; (800ae18 <_strtod_l+0xc00>)
 800abd4:	429a      	cmp	r2, r3
 800abd6:	f040 80b2 	bne.w	800ad3e <_strtod_l+0xb26>
 800abda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800abde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abe2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800abe6:	ec4b ab10 	vmov	d0, sl, fp
 800abea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800abee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800abf2:	f002 f9f9 	bl	800cfe8 <__ulp>
 800abf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abfa:	ec53 2b10 	vmov	r2, r3, d0
 800abfe:	f7f5 fcfb 	bl	80005f8 <__aeabi_dmul>
 800ac02:	4652      	mov	r2, sl
 800ac04:	465b      	mov	r3, fp
 800ac06:	f7f5 fb41 	bl	800028c <__adddf3>
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4981      	ldr	r1, [pc, #516]	; (800ae14 <_strtod_l+0xbfc>)
 800ac0e:	4a83      	ldr	r2, [pc, #524]	; (800ae1c <_strtod_l+0xc04>)
 800ac10:	4019      	ands	r1, r3
 800ac12:	4291      	cmp	r1, r2
 800ac14:	4682      	mov	sl, r0
 800ac16:	d95e      	bls.n	800acd6 <_strtod_l+0xabe>
 800ac18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac1a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d103      	bne.n	800ac2a <_strtod_l+0xa12>
 800ac22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac24:	3301      	adds	r3, #1
 800ac26:	f43f ad43 	beq.w	800a6b0 <_strtod_l+0x498>
 800ac2a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800ae28 <_strtod_l+0xc10>
 800ac2e:	f04f 3aff 	mov.w	sl, #4294967295
 800ac32:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ac34:	4620      	mov	r0, r4
 800ac36:	f001 feab 	bl	800c990 <_Bfree>
 800ac3a:	9907      	ldr	r1, [sp, #28]
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f001 fea7 	bl	800c990 <_Bfree>
 800ac42:	4631      	mov	r1, r6
 800ac44:	4620      	mov	r0, r4
 800ac46:	f001 fea3 	bl	800c990 <_Bfree>
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f001 fe9f 	bl	800c990 <_Bfree>
 800ac52:	e613      	b.n	800a87c <_strtod_l+0x664>
 800ac54:	f1ba 0f00 	cmp.w	sl, #0
 800ac58:	d11b      	bne.n	800ac92 <_strtod_l+0xa7a>
 800ac5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac5e:	b9f3      	cbnz	r3, 800ac9e <_strtod_l+0xa86>
 800ac60:	4b6b      	ldr	r3, [pc, #428]	; (800ae10 <_strtod_l+0xbf8>)
 800ac62:	2200      	movs	r2, #0
 800ac64:	4640      	mov	r0, r8
 800ac66:	4649      	mov	r1, r9
 800ac68:	f7f5 ff38 	bl	8000adc <__aeabi_dcmplt>
 800ac6c:	b9d0      	cbnz	r0, 800aca4 <_strtod_l+0xa8c>
 800ac6e:	4640      	mov	r0, r8
 800ac70:	4649      	mov	r1, r9
 800ac72:	4b6b      	ldr	r3, [pc, #428]	; (800ae20 <_strtod_l+0xc08>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	f7f5 fcbf 	bl	80005f8 <__aeabi_dmul>
 800ac7a:	4680      	mov	r8, r0
 800ac7c:	4689      	mov	r9, r1
 800ac7e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ac82:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ac86:	931b      	str	r3, [sp, #108]	; 0x6c
 800ac88:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ac8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ac90:	e79b      	b.n	800abca <_strtod_l+0x9b2>
 800ac92:	f1ba 0f01 	cmp.w	sl, #1
 800ac96:	d102      	bne.n	800ac9e <_strtod_l+0xa86>
 800ac98:	2f00      	cmp	r7, #0
 800ac9a:	f43f ad7e 	beq.w	800a79a <_strtod_l+0x582>
 800ac9e:	4b61      	ldr	r3, [pc, #388]	; (800ae24 <_strtod_l+0xc0c>)
 800aca0:	2200      	movs	r2, #0
 800aca2:	e78c      	b.n	800abbe <_strtod_l+0x9a6>
 800aca4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ae20 <_strtod_l+0xc08>
 800aca8:	f04f 0800 	mov.w	r8, #0
 800acac:	e7e7      	b.n	800ac7e <_strtod_l+0xa66>
 800acae:	4b5c      	ldr	r3, [pc, #368]	; (800ae20 <_strtod_l+0xc08>)
 800acb0:	4640      	mov	r0, r8
 800acb2:	4649      	mov	r1, r9
 800acb4:	2200      	movs	r2, #0
 800acb6:	f7f5 fc9f 	bl	80005f8 <__aeabi_dmul>
 800acba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acbc:	4680      	mov	r8, r0
 800acbe:	4689      	mov	r9, r1
 800acc0:	b933      	cbnz	r3, 800acd0 <_strtod_l+0xab8>
 800acc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acc6:	9012      	str	r0, [sp, #72]	; 0x48
 800acc8:	9313      	str	r3, [sp, #76]	; 0x4c
 800acca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800acce:	e7dd      	b.n	800ac8c <_strtod_l+0xa74>
 800acd0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800acd4:	e7f9      	b.n	800acca <_strtod_l+0xab2>
 800acd6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800acda:	9b04      	ldr	r3, [sp, #16]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1a8      	bne.n	800ac32 <_strtod_l+0xa1a>
 800ace0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ace4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ace6:	0d1b      	lsrs	r3, r3, #20
 800ace8:	051b      	lsls	r3, r3, #20
 800acea:	429a      	cmp	r2, r3
 800acec:	d1a1      	bne.n	800ac32 <_strtod_l+0xa1a>
 800acee:	4640      	mov	r0, r8
 800acf0:	4649      	mov	r1, r9
 800acf2:	f7f5 ffe1 	bl	8000cb8 <__aeabi_d2lz>
 800acf6:	f7f5 fc51 	bl	800059c <__aeabi_l2d>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	4640      	mov	r0, r8
 800ad00:	4649      	mov	r1, r9
 800ad02:	f7f5 fac1 	bl	8000288 <__aeabi_dsub>
 800ad06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad0c:	ea43 030a 	orr.w	r3, r3, sl
 800ad10:	4313      	orrs	r3, r2
 800ad12:	4680      	mov	r8, r0
 800ad14:	4689      	mov	r9, r1
 800ad16:	d053      	beq.n	800adc0 <_strtod_l+0xba8>
 800ad18:	a335      	add	r3, pc, #212	; (adr r3, 800adf0 <_strtod_l+0xbd8>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	f7f5 fedd 	bl	8000adc <__aeabi_dcmplt>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	f47f acce 	bne.w	800a6c4 <_strtod_l+0x4ac>
 800ad28:	a333      	add	r3, pc, #204	; (adr r3, 800adf8 <_strtod_l+0xbe0>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4649      	mov	r1, r9
 800ad32:	f7f5 fef1 	bl	8000b18 <__aeabi_dcmpgt>
 800ad36:	2800      	cmp	r0, #0
 800ad38:	f43f af7b 	beq.w	800ac32 <_strtod_l+0xa1a>
 800ad3c:	e4c2      	b.n	800a6c4 <_strtod_l+0x4ac>
 800ad3e:	9b04      	ldr	r3, [sp, #16]
 800ad40:	b333      	cbz	r3, 800ad90 <_strtod_l+0xb78>
 800ad42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad48:	d822      	bhi.n	800ad90 <_strtod_l+0xb78>
 800ad4a:	a32d      	add	r3, pc, #180	; (adr r3, 800ae00 <_strtod_l+0xbe8>)
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	4640      	mov	r0, r8
 800ad52:	4649      	mov	r1, r9
 800ad54:	f7f5 fecc 	bl	8000af0 <__aeabi_dcmple>
 800ad58:	b1a0      	cbz	r0, 800ad84 <_strtod_l+0xb6c>
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	f7f5 ff23 	bl	8000ba8 <__aeabi_d2uiz>
 800ad62:	2801      	cmp	r0, #1
 800ad64:	bf38      	it	cc
 800ad66:	2001      	movcc	r0, #1
 800ad68:	f7f5 fbcc 	bl	8000504 <__aeabi_ui2d>
 800ad6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad6e:	4680      	mov	r8, r0
 800ad70:	4689      	mov	r9, r1
 800ad72:	bb13      	cbnz	r3, 800adba <_strtod_l+0xba2>
 800ad74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad78:	9014      	str	r0, [sp, #80]	; 0x50
 800ad7a:	9315      	str	r3, [sp, #84]	; 0x54
 800ad7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ad80:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ad84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ad8c:	1a9b      	subs	r3, r3, r2
 800ad8e:	930d      	str	r3, [sp, #52]	; 0x34
 800ad90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad94:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ad98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ad9c:	f002 f924 	bl	800cfe8 <__ulp>
 800ada0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ada4:	ec53 2b10 	vmov	r2, r3, d0
 800ada8:	f7f5 fc26 	bl	80005f8 <__aeabi_dmul>
 800adac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800adb0:	f7f5 fa6c 	bl	800028c <__adddf3>
 800adb4:	4682      	mov	sl, r0
 800adb6:	468b      	mov	fp, r1
 800adb8:	e78f      	b.n	800acda <_strtod_l+0xac2>
 800adba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800adbe:	e7dd      	b.n	800ad7c <_strtod_l+0xb64>
 800adc0:	a311      	add	r3, pc, #68	; (adr r3, 800ae08 <_strtod_l+0xbf0>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	f7f5 fe89 	bl	8000adc <__aeabi_dcmplt>
 800adca:	e7b4      	b.n	800ad36 <_strtod_l+0xb1e>
 800adcc:	2300      	movs	r3, #0
 800adce:	930e      	str	r3, [sp, #56]	; 0x38
 800add0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800add2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800add4:	6013      	str	r3, [r2, #0]
 800add6:	f7ff ba65 	b.w	800a2a4 <_strtod_l+0x8c>
 800adda:	2b65      	cmp	r3, #101	; 0x65
 800addc:	f43f ab5d 	beq.w	800a49a <_strtod_l+0x282>
 800ade0:	2b45      	cmp	r3, #69	; 0x45
 800ade2:	f43f ab5a 	beq.w	800a49a <_strtod_l+0x282>
 800ade6:	2201      	movs	r2, #1
 800ade8:	f7ff bb92 	b.w	800a510 <_strtod_l+0x2f8>
 800adec:	f3af 8000 	nop.w
 800adf0:	94a03595 	.word	0x94a03595
 800adf4:	3fdfffff 	.word	0x3fdfffff
 800adf8:	35afe535 	.word	0x35afe535
 800adfc:	3fe00000 	.word	0x3fe00000
 800ae00:	ffc00000 	.word	0xffc00000
 800ae04:	41dfffff 	.word	0x41dfffff
 800ae08:	94a03595 	.word	0x94a03595
 800ae0c:	3fcfffff 	.word	0x3fcfffff
 800ae10:	3ff00000 	.word	0x3ff00000
 800ae14:	7ff00000 	.word	0x7ff00000
 800ae18:	7fe00000 	.word	0x7fe00000
 800ae1c:	7c9fffff 	.word	0x7c9fffff
 800ae20:	3fe00000 	.word	0x3fe00000
 800ae24:	bff00000 	.word	0xbff00000
 800ae28:	7fefffff 	.word	0x7fefffff

0800ae2c <_strtod_r>:
 800ae2c:	4b01      	ldr	r3, [pc, #4]	; (800ae34 <_strtod_r+0x8>)
 800ae2e:	f7ff b9f3 	b.w	800a218 <_strtod_l>
 800ae32:	bf00      	nop
 800ae34:	20000074 	.word	0x20000074

0800ae38 <_strtol_l.isra.0>:
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae3e:	d001      	beq.n	800ae44 <_strtol_l.isra.0+0xc>
 800ae40:	2b24      	cmp	r3, #36	; 0x24
 800ae42:	d906      	bls.n	800ae52 <_strtol_l.isra.0+0x1a>
 800ae44:	f7fe fa5e 	bl	8009304 <__errno>
 800ae48:	2316      	movs	r3, #22
 800ae4a:	6003      	str	r3, [r0, #0]
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae52:	4f3a      	ldr	r7, [pc, #232]	; (800af3c <_strtol_l.isra.0+0x104>)
 800ae54:	468e      	mov	lr, r1
 800ae56:	4676      	mov	r6, lr
 800ae58:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ae5c:	5de5      	ldrb	r5, [r4, r7]
 800ae5e:	f015 0508 	ands.w	r5, r5, #8
 800ae62:	d1f8      	bne.n	800ae56 <_strtol_l.isra.0+0x1e>
 800ae64:	2c2d      	cmp	r4, #45	; 0x2d
 800ae66:	d134      	bne.n	800aed2 <_strtol_l.isra.0+0x9a>
 800ae68:	f89e 4000 	ldrb.w	r4, [lr]
 800ae6c:	f04f 0801 	mov.w	r8, #1
 800ae70:	f106 0e02 	add.w	lr, r6, #2
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d05c      	beq.n	800af32 <_strtol_l.isra.0+0xfa>
 800ae78:	2b10      	cmp	r3, #16
 800ae7a:	d10c      	bne.n	800ae96 <_strtol_l.isra.0+0x5e>
 800ae7c:	2c30      	cmp	r4, #48	; 0x30
 800ae7e:	d10a      	bne.n	800ae96 <_strtol_l.isra.0+0x5e>
 800ae80:	f89e 4000 	ldrb.w	r4, [lr]
 800ae84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ae88:	2c58      	cmp	r4, #88	; 0x58
 800ae8a:	d14d      	bne.n	800af28 <_strtol_l.isra.0+0xf0>
 800ae8c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ae90:	2310      	movs	r3, #16
 800ae92:	f10e 0e02 	add.w	lr, lr, #2
 800ae96:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ae9a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ae9e:	2600      	movs	r6, #0
 800aea0:	fbbc f9f3 	udiv	r9, ip, r3
 800aea4:	4635      	mov	r5, r6
 800aea6:	fb03 ca19 	mls	sl, r3, r9, ip
 800aeaa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800aeae:	2f09      	cmp	r7, #9
 800aeb0:	d818      	bhi.n	800aee4 <_strtol_l.isra.0+0xac>
 800aeb2:	463c      	mov	r4, r7
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	dd24      	ble.n	800af02 <_strtol_l.isra.0+0xca>
 800aeb8:	2e00      	cmp	r6, #0
 800aeba:	db1f      	blt.n	800aefc <_strtol_l.isra.0+0xc4>
 800aebc:	45a9      	cmp	r9, r5
 800aebe:	d31d      	bcc.n	800aefc <_strtol_l.isra.0+0xc4>
 800aec0:	d101      	bne.n	800aec6 <_strtol_l.isra.0+0x8e>
 800aec2:	45a2      	cmp	sl, r4
 800aec4:	db1a      	blt.n	800aefc <_strtol_l.isra.0+0xc4>
 800aec6:	fb05 4503 	mla	r5, r5, r3, r4
 800aeca:	2601      	movs	r6, #1
 800aecc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800aed0:	e7eb      	b.n	800aeaa <_strtol_l.isra.0+0x72>
 800aed2:	2c2b      	cmp	r4, #43	; 0x2b
 800aed4:	bf08      	it	eq
 800aed6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800aeda:	46a8      	mov	r8, r5
 800aedc:	bf08      	it	eq
 800aede:	f106 0e02 	addeq.w	lr, r6, #2
 800aee2:	e7c7      	b.n	800ae74 <_strtol_l.isra.0+0x3c>
 800aee4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800aee8:	2f19      	cmp	r7, #25
 800aeea:	d801      	bhi.n	800aef0 <_strtol_l.isra.0+0xb8>
 800aeec:	3c37      	subs	r4, #55	; 0x37
 800aeee:	e7e1      	b.n	800aeb4 <_strtol_l.isra.0+0x7c>
 800aef0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800aef4:	2f19      	cmp	r7, #25
 800aef6:	d804      	bhi.n	800af02 <_strtol_l.isra.0+0xca>
 800aef8:	3c57      	subs	r4, #87	; 0x57
 800aefa:	e7db      	b.n	800aeb4 <_strtol_l.isra.0+0x7c>
 800aefc:	f04f 36ff 	mov.w	r6, #4294967295
 800af00:	e7e4      	b.n	800aecc <_strtol_l.isra.0+0x94>
 800af02:	2e00      	cmp	r6, #0
 800af04:	da05      	bge.n	800af12 <_strtol_l.isra.0+0xda>
 800af06:	2322      	movs	r3, #34	; 0x22
 800af08:	6003      	str	r3, [r0, #0]
 800af0a:	4665      	mov	r5, ip
 800af0c:	b942      	cbnz	r2, 800af20 <_strtol_l.isra.0+0xe8>
 800af0e:	4628      	mov	r0, r5
 800af10:	e79d      	b.n	800ae4e <_strtol_l.isra.0+0x16>
 800af12:	f1b8 0f00 	cmp.w	r8, #0
 800af16:	d000      	beq.n	800af1a <_strtol_l.isra.0+0xe2>
 800af18:	426d      	negs	r5, r5
 800af1a:	2a00      	cmp	r2, #0
 800af1c:	d0f7      	beq.n	800af0e <_strtol_l.isra.0+0xd6>
 800af1e:	b10e      	cbz	r6, 800af24 <_strtol_l.isra.0+0xec>
 800af20:	f10e 31ff 	add.w	r1, lr, #4294967295
 800af24:	6011      	str	r1, [r2, #0]
 800af26:	e7f2      	b.n	800af0e <_strtol_l.isra.0+0xd6>
 800af28:	2430      	movs	r4, #48	; 0x30
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1b3      	bne.n	800ae96 <_strtol_l.isra.0+0x5e>
 800af2e:	2308      	movs	r3, #8
 800af30:	e7b1      	b.n	800ae96 <_strtol_l.isra.0+0x5e>
 800af32:	2c30      	cmp	r4, #48	; 0x30
 800af34:	d0a4      	beq.n	800ae80 <_strtol_l.isra.0+0x48>
 800af36:	230a      	movs	r3, #10
 800af38:	e7ad      	b.n	800ae96 <_strtol_l.isra.0+0x5e>
 800af3a:	bf00      	nop
 800af3c:	0800e5e9 	.word	0x0800e5e9

0800af40 <_strtol_r>:
 800af40:	f7ff bf7a 	b.w	800ae38 <_strtol_l.isra.0>

0800af44 <__swbuf_r>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	460e      	mov	r6, r1
 800af48:	4614      	mov	r4, r2
 800af4a:	4605      	mov	r5, r0
 800af4c:	b118      	cbz	r0, 800af56 <__swbuf_r+0x12>
 800af4e:	6983      	ldr	r3, [r0, #24]
 800af50:	b90b      	cbnz	r3, 800af56 <__swbuf_r+0x12>
 800af52:	f001 f84b 	bl	800bfec <__sinit>
 800af56:	4b21      	ldr	r3, [pc, #132]	; (800afdc <__swbuf_r+0x98>)
 800af58:	429c      	cmp	r4, r3
 800af5a:	d12b      	bne.n	800afb4 <__swbuf_r+0x70>
 800af5c:	686c      	ldr	r4, [r5, #4]
 800af5e:	69a3      	ldr	r3, [r4, #24]
 800af60:	60a3      	str	r3, [r4, #8]
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	071a      	lsls	r2, r3, #28
 800af66:	d52f      	bpl.n	800afc8 <__swbuf_r+0x84>
 800af68:	6923      	ldr	r3, [r4, #16]
 800af6a:	b36b      	cbz	r3, 800afc8 <__swbuf_r+0x84>
 800af6c:	6923      	ldr	r3, [r4, #16]
 800af6e:	6820      	ldr	r0, [r4, #0]
 800af70:	1ac0      	subs	r0, r0, r3
 800af72:	6963      	ldr	r3, [r4, #20]
 800af74:	b2f6      	uxtb	r6, r6
 800af76:	4283      	cmp	r3, r0
 800af78:	4637      	mov	r7, r6
 800af7a:	dc04      	bgt.n	800af86 <__swbuf_r+0x42>
 800af7c:	4621      	mov	r1, r4
 800af7e:	4628      	mov	r0, r5
 800af80:	f000 ffa0 	bl	800bec4 <_fflush_r>
 800af84:	bb30      	cbnz	r0, 800afd4 <__swbuf_r+0x90>
 800af86:	68a3      	ldr	r3, [r4, #8]
 800af88:	3b01      	subs	r3, #1
 800af8a:	60a3      	str	r3, [r4, #8]
 800af8c:	6823      	ldr	r3, [r4, #0]
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	6022      	str	r2, [r4, #0]
 800af92:	701e      	strb	r6, [r3, #0]
 800af94:	6963      	ldr	r3, [r4, #20]
 800af96:	3001      	adds	r0, #1
 800af98:	4283      	cmp	r3, r0
 800af9a:	d004      	beq.n	800afa6 <__swbuf_r+0x62>
 800af9c:	89a3      	ldrh	r3, [r4, #12]
 800af9e:	07db      	lsls	r3, r3, #31
 800afa0:	d506      	bpl.n	800afb0 <__swbuf_r+0x6c>
 800afa2:	2e0a      	cmp	r6, #10
 800afa4:	d104      	bne.n	800afb0 <__swbuf_r+0x6c>
 800afa6:	4621      	mov	r1, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	f000 ff8b 	bl	800bec4 <_fflush_r>
 800afae:	b988      	cbnz	r0, 800afd4 <__swbuf_r+0x90>
 800afb0:	4638      	mov	r0, r7
 800afb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb4:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <__swbuf_r+0x9c>)
 800afb6:	429c      	cmp	r4, r3
 800afb8:	d101      	bne.n	800afbe <__swbuf_r+0x7a>
 800afba:	68ac      	ldr	r4, [r5, #8]
 800afbc:	e7cf      	b.n	800af5e <__swbuf_r+0x1a>
 800afbe:	4b09      	ldr	r3, [pc, #36]	; (800afe4 <__swbuf_r+0xa0>)
 800afc0:	429c      	cmp	r4, r3
 800afc2:	bf08      	it	eq
 800afc4:	68ec      	ldreq	r4, [r5, #12]
 800afc6:	e7ca      	b.n	800af5e <__swbuf_r+0x1a>
 800afc8:	4621      	mov	r1, r4
 800afca:	4628      	mov	r0, r5
 800afcc:	f000 f80c 	bl	800afe8 <__swsetup_r>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d0cb      	beq.n	800af6c <__swbuf_r+0x28>
 800afd4:	f04f 37ff 	mov.w	r7, #4294967295
 800afd8:	e7ea      	b.n	800afb0 <__swbuf_r+0x6c>
 800afda:	bf00      	nop
 800afdc:	0800e7a0 	.word	0x0800e7a0
 800afe0:	0800e7c0 	.word	0x0800e7c0
 800afe4:	0800e780 	.word	0x0800e780

0800afe8 <__swsetup_r>:
 800afe8:	4b32      	ldr	r3, [pc, #200]	; (800b0b4 <__swsetup_r+0xcc>)
 800afea:	b570      	push	{r4, r5, r6, lr}
 800afec:	681d      	ldr	r5, [r3, #0]
 800afee:	4606      	mov	r6, r0
 800aff0:	460c      	mov	r4, r1
 800aff2:	b125      	cbz	r5, 800affe <__swsetup_r+0x16>
 800aff4:	69ab      	ldr	r3, [r5, #24]
 800aff6:	b913      	cbnz	r3, 800affe <__swsetup_r+0x16>
 800aff8:	4628      	mov	r0, r5
 800affa:	f000 fff7 	bl	800bfec <__sinit>
 800affe:	4b2e      	ldr	r3, [pc, #184]	; (800b0b8 <__swsetup_r+0xd0>)
 800b000:	429c      	cmp	r4, r3
 800b002:	d10f      	bne.n	800b024 <__swsetup_r+0x3c>
 800b004:	686c      	ldr	r4, [r5, #4]
 800b006:	89a3      	ldrh	r3, [r4, #12]
 800b008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b00c:	0719      	lsls	r1, r3, #28
 800b00e:	d42c      	bmi.n	800b06a <__swsetup_r+0x82>
 800b010:	06dd      	lsls	r5, r3, #27
 800b012:	d411      	bmi.n	800b038 <__swsetup_r+0x50>
 800b014:	2309      	movs	r3, #9
 800b016:	6033      	str	r3, [r6, #0]
 800b018:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b01c:	81a3      	strh	r3, [r4, #12]
 800b01e:	f04f 30ff 	mov.w	r0, #4294967295
 800b022:	e03e      	b.n	800b0a2 <__swsetup_r+0xba>
 800b024:	4b25      	ldr	r3, [pc, #148]	; (800b0bc <__swsetup_r+0xd4>)
 800b026:	429c      	cmp	r4, r3
 800b028:	d101      	bne.n	800b02e <__swsetup_r+0x46>
 800b02a:	68ac      	ldr	r4, [r5, #8]
 800b02c:	e7eb      	b.n	800b006 <__swsetup_r+0x1e>
 800b02e:	4b24      	ldr	r3, [pc, #144]	; (800b0c0 <__swsetup_r+0xd8>)
 800b030:	429c      	cmp	r4, r3
 800b032:	bf08      	it	eq
 800b034:	68ec      	ldreq	r4, [r5, #12]
 800b036:	e7e6      	b.n	800b006 <__swsetup_r+0x1e>
 800b038:	0758      	lsls	r0, r3, #29
 800b03a:	d512      	bpl.n	800b062 <__swsetup_r+0x7a>
 800b03c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b03e:	b141      	cbz	r1, 800b052 <__swsetup_r+0x6a>
 800b040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b044:	4299      	cmp	r1, r3
 800b046:	d002      	beq.n	800b04e <__swsetup_r+0x66>
 800b048:	4630      	mov	r0, r6
 800b04a:	f002 f92b 	bl	800d2a4 <_free_r>
 800b04e:	2300      	movs	r3, #0
 800b050:	6363      	str	r3, [r4, #52]	; 0x34
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b058:	81a3      	strh	r3, [r4, #12]
 800b05a:	2300      	movs	r3, #0
 800b05c:	6063      	str	r3, [r4, #4]
 800b05e:	6923      	ldr	r3, [r4, #16]
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	89a3      	ldrh	r3, [r4, #12]
 800b064:	f043 0308 	orr.w	r3, r3, #8
 800b068:	81a3      	strh	r3, [r4, #12]
 800b06a:	6923      	ldr	r3, [r4, #16]
 800b06c:	b94b      	cbnz	r3, 800b082 <__swsetup_r+0x9a>
 800b06e:	89a3      	ldrh	r3, [r4, #12]
 800b070:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b078:	d003      	beq.n	800b082 <__swsetup_r+0x9a>
 800b07a:	4621      	mov	r1, r4
 800b07c:	4630      	mov	r0, r6
 800b07e:	f001 fbed 	bl	800c85c <__smakebuf_r>
 800b082:	89a0      	ldrh	r0, [r4, #12]
 800b084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b088:	f010 0301 	ands.w	r3, r0, #1
 800b08c:	d00a      	beq.n	800b0a4 <__swsetup_r+0xbc>
 800b08e:	2300      	movs	r3, #0
 800b090:	60a3      	str	r3, [r4, #8]
 800b092:	6963      	ldr	r3, [r4, #20]
 800b094:	425b      	negs	r3, r3
 800b096:	61a3      	str	r3, [r4, #24]
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	b943      	cbnz	r3, 800b0ae <__swsetup_r+0xc6>
 800b09c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0a0:	d1ba      	bne.n	800b018 <__swsetup_r+0x30>
 800b0a2:	bd70      	pop	{r4, r5, r6, pc}
 800b0a4:	0781      	lsls	r1, r0, #30
 800b0a6:	bf58      	it	pl
 800b0a8:	6963      	ldrpl	r3, [r4, #20]
 800b0aa:	60a3      	str	r3, [r4, #8]
 800b0ac:	e7f4      	b.n	800b098 <__swsetup_r+0xb0>
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	e7f7      	b.n	800b0a2 <__swsetup_r+0xba>
 800b0b2:	bf00      	nop
 800b0b4:	2000000c 	.word	0x2000000c
 800b0b8:	0800e7a0 	.word	0x0800e7a0
 800b0bc:	0800e7c0 	.word	0x0800e7c0
 800b0c0:	0800e780 	.word	0x0800e780

0800b0c4 <quorem>:
 800b0c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c8:	6903      	ldr	r3, [r0, #16]
 800b0ca:	690c      	ldr	r4, [r1, #16]
 800b0cc:	42a3      	cmp	r3, r4
 800b0ce:	4607      	mov	r7, r0
 800b0d0:	f2c0 8081 	blt.w	800b1d6 <quorem+0x112>
 800b0d4:	3c01      	subs	r4, #1
 800b0d6:	f101 0814 	add.w	r8, r1, #20
 800b0da:	f100 0514 	add.w	r5, r0, #20
 800b0de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0e2:	9301      	str	r3, [sp, #4]
 800b0e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b0f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0fc:	d331      	bcc.n	800b162 <quorem+0x9e>
 800b0fe:	f04f 0e00 	mov.w	lr, #0
 800b102:	4640      	mov	r0, r8
 800b104:	46ac      	mov	ip, r5
 800b106:	46f2      	mov	sl, lr
 800b108:	f850 2b04 	ldr.w	r2, [r0], #4
 800b10c:	b293      	uxth	r3, r2
 800b10e:	fb06 e303 	mla	r3, r6, r3, lr
 800b112:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b116:	b29b      	uxth	r3, r3
 800b118:	ebaa 0303 	sub.w	r3, sl, r3
 800b11c:	0c12      	lsrs	r2, r2, #16
 800b11e:	f8dc a000 	ldr.w	sl, [ip]
 800b122:	fb06 e202 	mla	r2, r6, r2, lr
 800b126:	fa13 f38a 	uxtah	r3, r3, sl
 800b12a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b12e:	fa1f fa82 	uxth.w	sl, r2
 800b132:	f8dc 2000 	ldr.w	r2, [ip]
 800b136:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b13a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b13e:	b29b      	uxth	r3, r3
 800b140:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b144:	4581      	cmp	r9, r0
 800b146:	f84c 3b04 	str.w	r3, [ip], #4
 800b14a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b14e:	d2db      	bcs.n	800b108 <quorem+0x44>
 800b150:	f855 300b 	ldr.w	r3, [r5, fp]
 800b154:	b92b      	cbnz	r3, 800b162 <quorem+0x9e>
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	3b04      	subs	r3, #4
 800b15a:	429d      	cmp	r5, r3
 800b15c:	461a      	mov	r2, r3
 800b15e:	d32e      	bcc.n	800b1be <quorem+0xfa>
 800b160:	613c      	str	r4, [r7, #16]
 800b162:	4638      	mov	r0, r7
 800b164:	f001 fe9c 	bl	800cea0 <__mcmp>
 800b168:	2800      	cmp	r0, #0
 800b16a:	db24      	blt.n	800b1b6 <quorem+0xf2>
 800b16c:	3601      	adds	r6, #1
 800b16e:	4628      	mov	r0, r5
 800b170:	f04f 0c00 	mov.w	ip, #0
 800b174:	f858 2b04 	ldr.w	r2, [r8], #4
 800b178:	f8d0 e000 	ldr.w	lr, [r0]
 800b17c:	b293      	uxth	r3, r2
 800b17e:	ebac 0303 	sub.w	r3, ip, r3
 800b182:	0c12      	lsrs	r2, r2, #16
 800b184:	fa13 f38e 	uxtah	r3, r3, lr
 800b188:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b18c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b190:	b29b      	uxth	r3, r3
 800b192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b196:	45c1      	cmp	r9, r8
 800b198:	f840 3b04 	str.w	r3, [r0], #4
 800b19c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b1a0:	d2e8      	bcs.n	800b174 <quorem+0xb0>
 800b1a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1aa:	b922      	cbnz	r2, 800b1b6 <quorem+0xf2>
 800b1ac:	3b04      	subs	r3, #4
 800b1ae:	429d      	cmp	r5, r3
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	d30a      	bcc.n	800b1ca <quorem+0x106>
 800b1b4:	613c      	str	r4, [r7, #16]
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	b003      	add	sp, #12
 800b1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1be:	6812      	ldr	r2, [r2, #0]
 800b1c0:	3b04      	subs	r3, #4
 800b1c2:	2a00      	cmp	r2, #0
 800b1c4:	d1cc      	bne.n	800b160 <quorem+0x9c>
 800b1c6:	3c01      	subs	r4, #1
 800b1c8:	e7c7      	b.n	800b15a <quorem+0x96>
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	3b04      	subs	r3, #4
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	d1f0      	bne.n	800b1b4 <quorem+0xf0>
 800b1d2:	3c01      	subs	r4, #1
 800b1d4:	e7eb      	b.n	800b1ae <quorem+0xea>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e7ee      	b.n	800b1b8 <quorem+0xf4>
 800b1da:	0000      	movs	r0, r0
 800b1dc:	0000      	movs	r0, r0
	...

0800b1e0 <_dtoa_r>:
 800b1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e4:	ed2d 8b02 	vpush	{d8}
 800b1e8:	ec57 6b10 	vmov	r6, r7, d0
 800b1ec:	b095      	sub	sp, #84	; 0x54
 800b1ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b1f4:	9105      	str	r1, [sp, #20]
 800b1f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b1fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800b200:	b975      	cbnz	r5, 800b220 <_dtoa_r+0x40>
 800b202:	2010      	movs	r0, #16
 800b204:	f001 fb6a 	bl	800c8dc <malloc>
 800b208:	4602      	mov	r2, r0
 800b20a:	6260      	str	r0, [r4, #36]	; 0x24
 800b20c:	b920      	cbnz	r0, 800b218 <_dtoa_r+0x38>
 800b20e:	4bb2      	ldr	r3, [pc, #712]	; (800b4d8 <_dtoa_r+0x2f8>)
 800b210:	21ea      	movs	r1, #234	; 0xea
 800b212:	48b2      	ldr	r0, [pc, #712]	; (800b4dc <_dtoa_r+0x2fc>)
 800b214:	f002 fc34 	bl	800da80 <__assert_func>
 800b218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b21c:	6005      	str	r5, [r0, #0]
 800b21e:	60c5      	str	r5, [r0, #12]
 800b220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b222:	6819      	ldr	r1, [r3, #0]
 800b224:	b151      	cbz	r1, 800b23c <_dtoa_r+0x5c>
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	604a      	str	r2, [r1, #4]
 800b22a:	2301      	movs	r3, #1
 800b22c:	4093      	lsls	r3, r2
 800b22e:	608b      	str	r3, [r1, #8]
 800b230:	4620      	mov	r0, r4
 800b232:	f001 fbad 	bl	800c990 <_Bfree>
 800b236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b238:	2200      	movs	r2, #0
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	1e3b      	subs	r3, r7, #0
 800b23e:	bfb9      	ittee	lt
 800b240:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b244:	9303      	strlt	r3, [sp, #12]
 800b246:	2300      	movge	r3, #0
 800b248:	f8c8 3000 	strge.w	r3, [r8]
 800b24c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b250:	4ba3      	ldr	r3, [pc, #652]	; (800b4e0 <_dtoa_r+0x300>)
 800b252:	bfbc      	itt	lt
 800b254:	2201      	movlt	r2, #1
 800b256:	f8c8 2000 	strlt.w	r2, [r8]
 800b25a:	ea33 0309 	bics.w	r3, r3, r9
 800b25e:	d11b      	bne.n	800b298 <_dtoa_r+0xb8>
 800b260:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b262:	f242 730f 	movw	r3, #9999	; 0x270f
 800b266:	6013      	str	r3, [r2, #0]
 800b268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b26c:	4333      	orrs	r3, r6
 800b26e:	f000 857a 	beq.w	800bd66 <_dtoa_r+0xb86>
 800b272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b274:	b963      	cbnz	r3, 800b290 <_dtoa_r+0xb0>
 800b276:	4b9b      	ldr	r3, [pc, #620]	; (800b4e4 <_dtoa_r+0x304>)
 800b278:	e024      	b.n	800b2c4 <_dtoa_r+0xe4>
 800b27a:	4b9b      	ldr	r3, [pc, #620]	; (800b4e8 <_dtoa_r+0x308>)
 800b27c:	9300      	str	r3, [sp, #0]
 800b27e:	3308      	adds	r3, #8
 800b280:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b282:	6013      	str	r3, [r2, #0]
 800b284:	9800      	ldr	r0, [sp, #0]
 800b286:	b015      	add	sp, #84	; 0x54
 800b288:	ecbd 8b02 	vpop	{d8}
 800b28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b290:	4b94      	ldr	r3, [pc, #592]	; (800b4e4 <_dtoa_r+0x304>)
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	3303      	adds	r3, #3
 800b296:	e7f3      	b.n	800b280 <_dtoa_r+0xa0>
 800b298:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b29c:	2200      	movs	r2, #0
 800b29e:	ec51 0b17 	vmov	r0, r1, d7
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b2a8:	f7f5 fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2ac:	4680      	mov	r8, r0
 800b2ae:	b158      	cbz	r0, 800b2c8 <_dtoa_r+0xe8>
 800b2b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	6013      	str	r3, [r2, #0]
 800b2b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	f000 8551 	beq.w	800bd60 <_dtoa_r+0xb80>
 800b2be:	488b      	ldr	r0, [pc, #556]	; (800b4ec <_dtoa_r+0x30c>)
 800b2c0:	6018      	str	r0, [r3, #0]
 800b2c2:	1e43      	subs	r3, r0, #1
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	e7dd      	b.n	800b284 <_dtoa_r+0xa4>
 800b2c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b2cc:	aa12      	add	r2, sp, #72	; 0x48
 800b2ce:	a913      	add	r1, sp, #76	; 0x4c
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f001 ff05 	bl	800d0e0 <__d2b>
 800b2d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2da:	4683      	mov	fp, r0
 800b2dc:	2d00      	cmp	r5, #0
 800b2de:	d07c      	beq.n	800b3da <_dtoa_r+0x1fa>
 800b2e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b2e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b2ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b2f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b2f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b2fa:	4b7d      	ldr	r3, [pc, #500]	; (800b4f0 <_dtoa_r+0x310>)
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	4630      	mov	r0, r6
 800b300:	4639      	mov	r1, r7
 800b302:	f7f4 ffc1 	bl	8000288 <__aeabi_dsub>
 800b306:	a36e      	add	r3, pc, #440	; (adr r3, 800b4c0 <_dtoa_r+0x2e0>)
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	f7f5 f974 	bl	80005f8 <__aeabi_dmul>
 800b310:	a36d      	add	r3, pc, #436	; (adr r3, 800b4c8 <_dtoa_r+0x2e8>)
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	f7f4 ffb9 	bl	800028c <__adddf3>
 800b31a:	4606      	mov	r6, r0
 800b31c:	4628      	mov	r0, r5
 800b31e:	460f      	mov	r7, r1
 800b320:	f7f5 f900 	bl	8000524 <__aeabi_i2d>
 800b324:	a36a      	add	r3, pc, #424	; (adr r3, 800b4d0 <_dtoa_r+0x2f0>)
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	f7f5 f965 	bl	80005f8 <__aeabi_dmul>
 800b32e:	4602      	mov	r2, r0
 800b330:	460b      	mov	r3, r1
 800b332:	4630      	mov	r0, r6
 800b334:	4639      	mov	r1, r7
 800b336:	f7f4 ffa9 	bl	800028c <__adddf3>
 800b33a:	4606      	mov	r6, r0
 800b33c:	460f      	mov	r7, r1
 800b33e:	f7f5 fc0b 	bl	8000b58 <__aeabi_d2iz>
 800b342:	2200      	movs	r2, #0
 800b344:	4682      	mov	sl, r0
 800b346:	2300      	movs	r3, #0
 800b348:	4630      	mov	r0, r6
 800b34a:	4639      	mov	r1, r7
 800b34c:	f7f5 fbc6 	bl	8000adc <__aeabi_dcmplt>
 800b350:	b148      	cbz	r0, 800b366 <_dtoa_r+0x186>
 800b352:	4650      	mov	r0, sl
 800b354:	f7f5 f8e6 	bl	8000524 <__aeabi_i2d>
 800b358:	4632      	mov	r2, r6
 800b35a:	463b      	mov	r3, r7
 800b35c:	f7f5 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b360:	b908      	cbnz	r0, 800b366 <_dtoa_r+0x186>
 800b362:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b366:	f1ba 0f16 	cmp.w	sl, #22
 800b36a:	d854      	bhi.n	800b416 <_dtoa_r+0x236>
 800b36c:	4b61      	ldr	r3, [pc, #388]	; (800b4f4 <_dtoa_r+0x314>)
 800b36e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b37a:	f7f5 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d04b      	beq.n	800b41a <_dtoa_r+0x23a>
 800b382:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b386:	2300      	movs	r3, #0
 800b388:	930e      	str	r3, [sp, #56]	; 0x38
 800b38a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b38c:	1b5d      	subs	r5, r3, r5
 800b38e:	1e6b      	subs	r3, r5, #1
 800b390:	9304      	str	r3, [sp, #16]
 800b392:	bf43      	ittte	mi
 800b394:	2300      	movmi	r3, #0
 800b396:	f1c5 0801 	rsbmi	r8, r5, #1
 800b39a:	9304      	strmi	r3, [sp, #16]
 800b39c:	f04f 0800 	movpl.w	r8, #0
 800b3a0:	f1ba 0f00 	cmp.w	sl, #0
 800b3a4:	db3b      	blt.n	800b41e <_dtoa_r+0x23e>
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b3ac:	4453      	add	r3, sl
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	9306      	str	r3, [sp, #24]
 800b3b4:	9b05      	ldr	r3, [sp, #20]
 800b3b6:	2b09      	cmp	r3, #9
 800b3b8:	d869      	bhi.n	800b48e <_dtoa_r+0x2ae>
 800b3ba:	2b05      	cmp	r3, #5
 800b3bc:	bfc4      	itt	gt
 800b3be:	3b04      	subgt	r3, #4
 800b3c0:	9305      	strgt	r3, [sp, #20]
 800b3c2:	9b05      	ldr	r3, [sp, #20]
 800b3c4:	f1a3 0302 	sub.w	r3, r3, #2
 800b3c8:	bfcc      	ite	gt
 800b3ca:	2500      	movgt	r5, #0
 800b3cc:	2501      	movle	r5, #1
 800b3ce:	2b03      	cmp	r3, #3
 800b3d0:	d869      	bhi.n	800b4a6 <_dtoa_r+0x2c6>
 800b3d2:	e8df f003 	tbb	[pc, r3]
 800b3d6:	4e2c      	.short	0x4e2c
 800b3d8:	5a4c      	.short	0x5a4c
 800b3da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b3de:	441d      	add	r5, r3
 800b3e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b3e4:	2b20      	cmp	r3, #32
 800b3e6:	bfc1      	itttt	gt
 800b3e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b3ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b3f0:	fa09 f303 	lslgt.w	r3, r9, r3
 800b3f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b3f8:	bfda      	itte	le
 800b3fa:	f1c3 0320 	rsble	r3, r3, #32
 800b3fe:	fa06 f003 	lslle.w	r0, r6, r3
 800b402:	4318      	orrgt	r0, r3
 800b404:	f7f5 f87e 	bl	8000504 <__aeabi_ui2d>
 800b408:	2301      	movs	r3, #1
 800b40a:	4606      	mov	r6, r0
 800b40c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b410:	3d01      	subs	r5, #1
 800b412:	9310      	str	r3, [sp, #64]	; 0x40
 800b414:	e771      	b.n	800b2fa <_dtoa_r+0x11a>
 800b416:	2301      	movs	r3, #1
 800b418:	e7b6      	b.n	800b388 <_dtoa_r+0x1a8>
 800b41a:	900e      	str	r0, [sp, #56]	; 0x38
 800b41c:	e7b5      	b.n	800b38a <_dtoa_r+0x1aa>
 800b41e:	f1ca 0300 	rsb	r3, sl, #0
 800b422:	9306      	str	r3, [sp, #24]
 800b424:	2300      	movs	r3, #0
 800b426:	eba8 080a 	sub.w	r8, r8, sl
 800b42a:	930d      	str	r3, [sp, #52]	; 0x34
 800b42c:	e7c2      	b.n	800b3b4 <_dtoa_r+0x1d4>
 800b42e:	2300      	movs	r3, #0
 800b430:	9308      	str	r3, [sp, #32]
 800b432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b434:	2b00      	cmp	r3, #0
 800b436:	dc39      	bgt.n	800b4ac <_dtoa_r+0x2cc>
 800b438:	f04f 0901 	mov.w	r9, #1
 800b43c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b440:	464b      	mov	r3, r9
 800b442:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b446:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b448:	2200      	movs	r2, #0
 800b44a:	6042      	str	r2, [r0, #4]
 800b44c:	2204      	movs	r2, #4
 800b44e:	f102 0614 	add.w	r6, r2, #20
 800b452:	429e      	cmp	r6, r3
 800b454:	6841      	ldr	r1, [r0, #4]
 800b456:	d92f      	bls.n	800b4b8 <_dtoa_r+0x2d8>
 800b458:	4620      	mov	r0, r4
 800b45a:	f001 fa59 	bl	800c910 <_Balloc>
 800b45e:	9000      	str	r0, [sp, #0]
 800b460:	2800      	cmp	r0, #0
 800b462:	d14b      	bne.n	800b4fc <_dtoa_r+0x31c>
 800b464:	4b24      	ldr	r3, [pc, #144]	; (800b4f8 <_dtoa_r+0x318>)
 800b466:	4602      	mov	r2, r0
 800b468:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b46c:	e6d1      	b.n	800b212 <_dtoa_r+0x32>
 800b46e:	2301      	movs	r3, #1
 800b470:	e7de      	b.n	800b430 <_dtoa_r+0x250>
 800b472:	2300      	movs	r3, #0
 800b474:	9308      	str	r3, [sp, #32]
 800b476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b478:	eb0a 0903 	add.w	r9, sl, r3
 800b47c:	f109 0301 	add.w	r3, r9, #1
 800b480:	2b01      	cmp	r3, #1
 800b482:	9301      	str	r3, [sp, #4]
 800b484:	bfb8      	it	lt
 800b486:	2301      	movlt	r3, #1
 800b488:	e7dd      	b.n	800b446 <_dtoa_r+0x266>
 800b48a:	2301      	movs	r3, #1
 800b48c:	e7f2      	b.n	800b474 <_dtoa_r+0x294>
 800b48e:	2501      	movs	r5, #1
 800b490:	2300      	movs	r3, #0
 800b492:	9305      	str	r3, [sp, #20]
 800b494:	9508      	str	r5, [sp, #32]
 800b496:	f04f 39ff 	mov.w	r9, #4294967295
 800b49a:	2200      	movs	r2, #0
 800b49c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4a0:	2312      	movs	r3, #18
 800b4a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b4a4:	e7cf      	b.n	800b446 <_dtoa_r+0x266>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	9308      	str	r3, [sp, #32]
 800b4aa:	e7f4      	b.n	800b496 <_dtoa_r+0x2b6>
 800b4ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b4b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800b4b4:	464b      	mov	r3, r9
 800b4b6:	e7c6      	b.n	800b446 <_dtoa_r+0x266>
 800b4b8:	3101      	adds	r1, #1
 800b4ba:	6041      	str	r1, [r0, #4]
 800b4bc:	0052      	lsls	r2, r2, #1
 800b4be:	e7c6      	b.n	800b44e <_dtoa_r+0x26e>
 800b4c0:	636f4361 	.word	0x636f4361
 800b4c4:	3fd287a7 	.word	0x3fd287a7
 800b4c8:	8b60c8b3 	.word	0x8b60c8b3
 800b4cc:	3fc68a28 	.word	0x3fc68a28
 800b4d0:	509f79fb 	.word	0x509f79fb
 800b4d4:	3fd34413 	.word	0x3fd34413
 800b4d8:	0800e6f6 	.word	0x0800e6f6
 800b4dc:	0800e70d 	.word	0x0800e70d
 800b4e0:	7ff00000 	.word	0x7ff00000
 800b4e4:	0800e6f2 	.word	0x0800e6f2
 800b4e8:	0800e6e9 	.word	0x0800e6e9
 800b4ec:	0800e569 	.word	0x0800e569
 800b4f0:	3ff80000 	.word	0x3ff80000
 800b4f4:	0800e8e8 	.word	0x0800e8e8
 800b4f8:	0800e76c 	.word	0x0800e76c
 800b4fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4fe:	9a00      	ldr	r2, [sp, #0]
 800b500:	601a      	str	r2, [r3, #0]
 800b502:	9b01      	ldr	r3, [sp, #4]
 800b504:	2b0e      	cmp	r3, #14
 800b506:	f200 80ad 	bhi.w	800b664 <_dtoa_r+0x484>
 800b50a:	2d00      	cmp	r5, #0
 800b50c:	f000 80aa 	beq.w	800b664 <_dtoa_r+0x484>
 800b510:	f1ba 0f00 	cmp.w	sl, #0
 800b514:	dd36      	ble.n	800b584 <_dtoa_r+0x3a4>
 800b516:	4ac3      	ldr	r2, [pc, #780]	; (800b824 <_dtoa_r+0x644>)
 800b518:	f00a 030f 	and.w	r3, sl, #15
 800b51c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b520:	ed93 7b00 	vldr	d7, [r3]
 800b524:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b528:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b52c:	eeb0 8a47 	vmov.f32	s16, s14
 800b530:	eef0 8a67 	vmov.f32	s17, s15
 800b534:	d016      	beq.n	800b564 <_dtoa_r+0x384>
 800b536:	4bbc      	ldr	r3, [pc, #752]	; (800b828 <_dtoa_r+0x648>)
 800b538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b53c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b540:	f7f5 f984 	bl	800084c <__aeabi_ddiv>
 800b544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b548:	f007 070f 	and.w	r7, r7, #15
 800b54c:	2503      	movs	r5, #3
 800b54e:	4eb6      	ldr	r6, [pc, #728]	; (800b828 <_dtoa_r+0x648>)
 800b550:	b957      	cbnz	r7, 800b568 <_dtoa_r+0x388>
 800b552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b556:	ec53 2b18 	vmov	r2, r3, d8
 800b55a:	f7f5 f977 	bl	800084c <__aeabi_ddiv>
 800b55e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b562:	e029      	b.n	800b5b8 <_dtoa_r+0x3d8>
 800b564:	2502      	movs	r5, #2
 800b566:	e7f2      	b.n	800b54e <_dtoa_r+0x36e>
 800b568:	07f9      	lsls	r1, r7, #31
 800b56a:	d508      	bpl.n	800b57e <_dtoa_r+0x39e>
 800b56c:	ec51 0b18 	vmov	r0, r1, d8
 800b570:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b574:	f7f5 f840 	bl	80005f8 <__aeabi_dmul>
 800b578:	ec41 0b18 	vmov	d8, r0, r1
 800b57c:	3501      	adds	r5, #1
 800b57e:	107f      	asrs	r7, r7, #1
 800b580:	3608      	adds	r6, #8
 800b582:	e7e5      	b.n	800b550 <_dtoa_r+0x370>
 800b584:	f000 80a6 	beq.w	800b6d4 <_dtoa_r+0x4f4>
 800b588:	f1ca 0600 	rsb	r6, sl, #0
 800b58c:	4ba5      	ldr	r3, [pc, #660]	; (800b824 <_dtoa_r+0x644>)
 800b58e:	4fa6      	ldr	r7, [pc, #664]	; (800b828 <_dtoa_r+0x648>)
 800b590:	f006 020f 	and.w	r2, r6, #15
 800b594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b5a0:	f7f5 f82a 	bl	80005f8 <__aeabi_dmul>
 800b5a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5a8:	1136      	asrs	r6, r6, #4
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	2502      	movs	r5, #2
 800b5ae:	2e00      	cmp	r6, #0
 800b5b0:	f040 8085 	bne.w	800b6be <_dtoa_r+0x4de>
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1d2      	bne.n	800b55e <_dtoa_r+0x37e>
 800b5b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 808c 	beq.w	800b6d8 <_dtoa_r+0x4f8>
 800b5c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b5c4:	4b99      	ldr	r3, [pc, #612]	; (800b82c <_dtoa_r+0x64c>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	f7f5 fa86 	bl	8000adc <__aeabi_dcmplt>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	f000 8081 	beq.w	800b6d8 <_dtoa_r+0x4f8>
 800b5d6:	9b01      	ldr	r3, [sp, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d07d      	beq.n	800b6d8 <_dtoa_r+0x4f8>
 800b5dc:	f1b9 0f00 	cmp.w	r9, #0
 800b5e0:	dd3c      	ble.n	800b65c <_dtoa_r+0x47c>
 800b5e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b5e6:	9307      	str	r3, [sp, #28]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	4b91      	ldr	r3, [pc, #580]	; (800b830 <_dtoa_r+0x650>)
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	4639      	mov	r1, r7
 800b5f0:	f7f5 f802 	bl	80005f8 <__aeabi_dmul>
 800b5f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5f8:	3501      	adds	r5, #1
 800b5fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b5fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b602:	4628      	mov	r0, r5
 800b604:	f7f4 ff8e 	bl	8000524 <__aeabi_i2d>
 800b608:	4632      	mov	r2, r6
 800b60a:	463b      	mov	r3, r7
 800b60c:	f7f4 fff4 	bl	80005f8 <__aeabi_dmul>
 800b610:	4b88      	ldr	r3, [pc, #544]	; (800b834 <_dtoa_r+0x654>)
 800b612:	2200      	movs	r2, #0
 800b614:	f7f4 fe3a 	bl	800028c <__adddf3>
 800b618:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b61c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b620:	9303      	str	r3, [sp, #12]
 800b622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b624:	2b00      	cmp	r3, #0
 800b626:	d15c      	bne.n	800b6e2 <_dtoa_r+0x502>
 800b628:	4b83      	ldr	r3, [pc, #524]	; (800b838 <_dtoa_r+0x658>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	4630      	mov	r0, r6
 800b62e:	4639      	mov	r1, r7
 800b630:	f7f4 fe2a 	bl	8000288 <__aeabi_dsub>
 800b634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b638:	4606      	mov	r6, r0
 800b63a:	460f      	mov	r7, r1
 800b63c:	f7f5 fa6c 	bl	8000b18 <__aeabi_dcmpgt>
 800b640:	2800      	cmp	r0, #0
 800b642:	f040 8296 	bne.w	800bb72 <_dtoa_r+0x992>
 800b646:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b64a:	4630      	mov	r0, r6
 800b64c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b650:	4639      	mov	r1, r7
 800b652:	f7f5 fa43 	bl	8000adc <__aeabi_dcmplt>
 800b656:	2800      	cmp	r0, #0
 800b658:	f040 8288 	bne.w	800bb6c <_dtoa_r+0x98c>
 800b65c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b660:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b666:	2b00      	cmp	r3, #0
 800b668:	f2c0 8158 	blt.w	800b91c <_dtoa_r+0x73c>
 800b66c:	f1ba 0f0e 	cmp.w	sl, #14
 800b670:	f300 8154 	bgt.w	800b91c <_dtoa_r+0x73c>
 800b674:	4b6b      	ldr	r3, [pc, #428]	; (800b824 <_dtoa_r+0x644>)
 800b676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b67a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b680:	2b00      	cmp	r3, #0
 800b682:	f280 80e3 	bge.w	800b84c <_dtoa_r+0x66c>
 800b686:	9b01      	ldr	r3, [sp, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f300 80df 	bgt.w	800b84c <_dtoa_r+0x66c>
 800b68e:	f040 826d 	bne.w	800bb6c <_dtoa_r+0x98c>
 800b692:	4b69      	ldr	r3, [pc, #420]	; (800b838 <_dtoa_r+0x658>)
 800b694:	2200      	movs	r2, #0
 800b696:	4640      	mov	r0, r8
 800b698:	4649      	mov	r1, r9
 800b69a:	f7f4 ffad 	bl	80005f8 <__aeabi_dmul>
 800b69e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6a2:	f7f5 fa2f 	bl	8000b04 <__aeabi_dcmpge>
 800b6a6:	9e01      	ldr	r6, [sp, #4]
 800b6a8:	4637      	mov	r7, r6
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	f040 8243 	bne.w	800bb36 <_dtoa_r+0x956>
 800b6b0:	9d00      	ldr	r5, [sp, #0]
 800b6b2:	2331      	movs	r3, #49	; 0x31
 800b6b4:	f805 3b01 	strb.w	r3, [r5], #1
 800b6b8:	f10a 0a01 	add.w	sl, sl, #1
 800b6bc:	e23f      	b.n	800bb3e <_dtoa_r+0x95e>
 800b6be:	07f2      	lsls	r2, r6, #31
 800b6c0:	d505      	bpl.n	800b6ce <_dtoa_r+0x4ee>
 800b6c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6c6:	f7f4 ff97 	bl	80005f8 <__aeabi_dmul>
 800b6ca:	3501      	adds	r5, #1
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	1076      	asrs	r6, r6, #1
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	e76c      	b.n	800b5ae <_dtoa_r+0x3ce>
 800b6d4:	2502      	movs	r5, #2
 800b6d6:	e76f      	b.n	800b5b8 <_dtoa_r+0x3d8>
 800b6d8:	9b01      	ldr	r3, [sp, #4]
 800b6da:	f8cd a01c 	str.w	sl, [sp, #28]
 800b6de:	930c      	str	r3, [sp, #48]	; 0x30
 800b6e0:	e78d      	b.n	800b5fe <_dtoa_r+0x41e>
 800b6e2:	9900      	ldr	r1, [sp, #0]
 800b6e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6e8:	4b4e      	ldr	r3, [pc, #312]	; (800b824 <_dtoa_r+0x644>)
 800b6ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6ee:	4401      	add	r1, r0
 800b6f0:	9102      	str	r1, [sp, #8]
 800b6f2:	9908      	ldr	r1, [sp, #32]
 800b6f4:	eeb0 8a47 	vmov.f32	s16, s14
 800b6f8:	eef0 8a67 	vmov.f32	s17, s15
 800b6fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b700:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b704:	2900      	cmp	r1, #0
 800b706:	d045      	beq.n	800b794 <_dtoa_r+0x5b4>
 800b708:	494c      	ldr	r1, [pc, #304]	; (800b83c <_dtoa_r+0x65c>)
 800b70a:	2000      	movs	r0, #0
 800b70c:	f7f5 f89e 	bl	800084c <__aeabi_ddiv>
 800b710:	ec53 2b18 	vmov	r2, r3, d8
 800b714:	f7f4 fdb8 	bl	8000288 <__aeabi_dsub>
 800b718:	9d00      	ldr	r5, [sp, #0]
 800b71a:	ec41 0b18 	vmov	d8, r0, r1
 800b71e:	4639      	mov	r1, r7
 800b720:	4630      	mov	r0, r6
 800b722:	f7f5 fa19 	bl	8000b58 <__aeabi_d2iz>
 800b726:	900c      	str	r0, [sp, #48]	; 0x30
 800b728:	f7f4 fefc 	bl	8000524 <__aeabi_i2d>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	4630      	mov	r0, r6
 800b732:	4639      	mov	r1, r7
 800b734:	f7f4 fda8 	bl	8000288 <__aeabi_dsub>
 800b738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b73a:	3330      	adds	r3, #48	; 0x30
 800b73c:	f805 3b01 	strb.w	r3, [r5], #1
 800b740:	ec53 2b18 	vmov	r2, r3, d8
 800b744:	4606      	mov	r6, r0
 800b746:	460f      	mov	r7, r1
 800b748:	f7f5 f9c8 	bl	8000adc <__aeabi_dcmplt>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	d165      	bne.n	800b81c <_dtoa_r+0x63c>
 800b750:	4632      	mov	r2, r6
 800b752:	463b      	mov	r3, r7
 800b754:	4935      	ldr	r1, [pc, #212]	; (800b82c <_dtoa_r+0x64c>)
 800b756:	2000      	movs	r0, #0
 800b758:	f7f4 fd96 	bl	8000288 <__aeabi_dsub>
 800b75c:	ec53 2b18 	vmov	r2, r3, d8
 800b760:	f7f5 f9bc 	bl	8000adc <__aeabi_dcmplt>
 800b764:	2800      	cmp	r0, #0
 800b766:	f040 80b9 	bne.w	800b8dc <_dtoa_r+0x6fc>
 800b76a:	9b02      	ldr	r3, [sp, #8]
 800b76c:	429d      	cmp	r5, r3
 800b76e:	f43f af75 	beq.w	800b65c <_dtoa_r+0x47c>
 800b772:	4b2f      	ldr	r3, [pc, #188]	; (800b830 <_dtoa_r+0x650>)
 800b774:	ec51 0b18 	vmov	r0, r1, d8
 800b778:	2200      	movs	r2, #0
 800b77a:	f7f4 ff3d 	bl	80005f8 <__aeabi_dmul>
 800b77e:	4b2c      	ldr	r3, [pc, #176]	; (800b830 <_dtoa_r+0x650>)
 800b780:	ec41 0b18 	vmov	d8, r0, r1
 800b784:	2200      	movs	r2, #0
 800b786:	4630      	mov	r0, r6
 800b788:	4639      	mov	r1, r7
 800b78a:	f7f4 ff35 	bl	80005f8 <__aeabi_dmul>
 800b78e:	4606      	mov	r6, r0
 800b790:	460f      	mov	r7, r1
 800b792:	e7c4      	b.n	800b71e <_dtoa_r+0x53e>
 800b794:	ec51 0b17 	vmov	r0, r1, d7
 800b798:	f7f4 ff2e 	bl	80005f8 <__aeabi_dmul>
 800b79c:	9b02      	ldr	r3, [sp, #8]
 800b79e:	9d00      	ldr	r5, [sp, #0]
 800b7a0:	930c      	str	r3, [sp, #48]	; 0x30
 800b7a2:	ec41 0b18 	vmov	d8, r0, r1
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f7f5 f9d5 	bl	8000b58 <__aeabi_d2iz>
 800b7ae:	9011      	str	r0, [sp, #68]	; 0x44
 800b7b0:	f7f4 feb8 	bl	8000524 <__aeabi_i2d>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	4639      	mov	r1, r7
 800b7bc:	f7f4 fd64 	bl	8000288 <__aeabi_dsub>
 800b7c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b7c2:	3330      	adds	r3, #48	; 0x30
 800b7c4:	f805 3b01 	strb.w	r3, [r5], #1
 800b7c8:	9b02      	ldr	r3, [sp, #8]
 800b7ca:	429d      	cmp	r5, r3
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	460f      	mov	r7, r1
 800b7d0:	f04f 0200 	mov.w	r2, #0
 800b7d4:	d134      	bne.n	800b840 <_dtoa_r+0x660>
 800b7d6:	4b19      	ldr	r3, [pc, #100]	; (800b83c <_dtoa_r+0x65c>)
 800b7d8:	ec51 0b18 	vmov	r0, r1, d8
 800b7dc:	f7f4 fd56 	bl	800028c <__adddf3>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	f7f5 f996 	bl	8000b18 <__aeabi_dcmpgt>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d175      	bne.n	800b8dc <_dtoa_r+0x6fc>
 800b7f0:	ec53 2b18 	vmov	r2, r3, d8
 800b7f4:	4911      	ldr	r1, [pc, #68]	; (800b83c <_dtoa_r+0x65c>)
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	f7f4 fd46 	bl	8000288 <__aeabi_dsub>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4630      	mov	r0, r6
 800b802:	4639      	mov	r1, r7
 800b804:	f7f5 f96a 	bl	8000adc <__aeabi_dcmplt>
 800b808:	2800      	cmp	r0, #0
 800b80a:	f43f af27 	beq.w	800b65c <_dtoa_r+0x47c>
 800b80e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b810:	1e6b      	subs	r3, r5, #1
 800b812:	930c      	str	r3, [sp, #48]	; 0x30
 800b814:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b818:	2b30      	cmp	r3, #48	; 0x30
 800b81a:	d0f8      	beq.n	800b80e <_dtoa_r+0x62e>
 800b81c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b820:	e04a      	b.n	800b8b8 <_dtoa_r+0x6d8>
 800b822:	bf00      	nop
 800b824:	0800e8e8 	.word	0x0800e8e8
 800b828:	0800e8c0 	.word	0x0800e8c0
 800b82c:	3ff00000 	.word	0x3ff00000
 800b830:	40240000 	.word	0x40240000
 800b834:	401c0000 	.word	0x401c0000
 800b838:	40140000 	.word	0x40140000
 800b83c:	3fe00000 	.word	0x3fe00000
 800b840:	4baf      	ldr	r3, [pc, #700]	; (800bb00 <_dtoa_r+0x920>)
 800b842:	f7f4 fed9 	bl	80005f8 <__aeabi_dmul>
 800b846:	4606      	mov	r6, r0
 800b848:	460f      	mov	r7, r1
 800b84a:	e7ac      	b.n	800b7a6 <_dtoa_r+0x5c6>
 800b84c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b850:	9d00      	ldr	r5, [sp, #0]
 800b852:	4642      	mov	r2, r8
 800b854:	464b      	mov	r3, r9
 800b856:	4630      	mov	r0, r6
 800b858:	4639      	mov	r1, r7
 800b85a:	f7f4 fff7 	bl	800084c <__aeabi_ddiv>
 800b85e:	f7f5 f97b 	bl	8000b58 <__aeabi_d2iz>
 800b862:	9002      	str	r0, [sp, #8]
 800b864:	f7f4 fe5e 	bl	8000524 <__aeabi_i2d>
 800b868:	4642      	mov	r2, r8
 800b86a:	464b      	mov	r3, r9
 800b86c:	f7f4 fec4 	bl	80005f8 <__aeabi_dmul>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4630      	mov	r0, r6
 800b876:	4639      	mov	r1, r7
 800b878:	f7f4 fd06 	bl	8000288 <__aeabi_dsub>
 800b87c:	9e02      	ldr	r6, [sp, #8]
 800b87e:	9f01      	ldr	r7, [sp, #4]
 800b880:	3630      	adds	r6, #48	; 0x30
 800b882:	f805 6b01 	strb.w	r6, [r5], #1
 800b886:	9e00      	ldr	r6, [sp, #0]
 800b888:	1bae      	subs	r6, r5, r6
 800b88a:	42b7      	cmp	r7, r6
 800b88c:	4602      	mov	r2, r0
 800b88e:	460b      	mov	r3, r1
 800b890:	d137      	bne.n	800b902 <_dtoa_r+0x722>
 800b892:	f7f4 fcfb 	bl	800028c <__adddf3>
 800b896:	4642      	mov	r2, r8
 800b898:	464b      	mov	r3, r9
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	f7f5 f93b 	bl	8000b18 <__aeabi_dcmpgt>
 800b8a2:	b9c8      	cbnz	r0, 800b8d8 <_dtoa_r+0x6f8>
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	4639      	mov	r1, r7
 800b8ac:	f7f5 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8b0:	b110      	cbz	r0, 800b8b8 <_dtoa_r+0x6d8>
 800b8b2:	9b02      	ldr	r3, [sp, #8]
 800b8b4:	07d9      	lsls	r1, r3, #31
 800b8b6:	d40f      	bmi.n	800b8d8 <_dtoa_r+0x6f8>
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	4659      	mov	r1, fp
 800b8bc:	f001 f868 	bl	800c990 <_Bfree>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	702b      	strb	r3, [r5, #0]
 800b8c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8c6:	f10a 0001 	add.w	r0, sl, #1
 800b8ca:	6018      	str	r0, [r3, #0]
 800b8cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f43f acd8 	beq.w	800b284 <_dtoa_r+0xa4>
 800b8d4:	601d      	str	r5, [r3, #0]
 800b8d6:	e4d5      	b.n	800b284 <_dtoa_r+0xa4>
 800b8d8:	f8cd a01c 	str.w	sl, [sp, #28]
 800b8dc:	462b      	mov	r3, r5
 800b8de:	461d      	mov	r5, r3
 800b8e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8e4:	2a39      	cmp	r2, #57	; 0x39
 800b8e6:	d108      	bne.n	800b8fa <_dtoa_r+0x71a>
 800b8e8:	9a00      	ldr	r2, [sp, #0]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d1f7      	bne.n	800b8de <_dtoa_r+0x6fe>
 800b8ee:	9a07      	ldr	r2, [sp, #28]
 800b8f0:	9900      	ldr	r1, [sp, #0]
 800b8f2:	3201      	adds	r2, #1
 800b8f4:	9207      	str	r2, [sp, #28]
 800b8f6:	2230      	movs	r2, #48	; 0x30
 800b8f8:	700a      	strb	r2, [r1, #0]
 800b8fa:	781a      	ldrb	r2, [r3, #0]
 800b8fc:	3201      	adds	r2, #1
 800b8fe:	701a      	strb	r2, [r3, #0]
 800b900:	e78c      	b.n	800b81c <_dtoa_r+0x63c>
 800b902:	4b7f      	ldr	r3, [pc, #508]	; (800bb00 <_dtoa_r+0x920>)
 800b904:	2200      	movs	r2, #0
 800b906:	f7f4 fe77 	bl	80005f8 <__aeabi_dmul>
 800b90a:	2200      	movs	r2, #0
 800b90c:	2300      	movs	r3, #0
 800b90e:	4606      	mov	r6, r0
 800b910:	460f      	mov	r7, r1
 800b912:	f7f5 f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b916:	2800      	cmp	r0, #0
 800b918:	d09b      	beq.n	800b852 <_dtoa_r+0x672>
 800b91a:	e7cd      	b.n	800b8b8 <_dtoa_r+0x6d8>
 800b91c:	9a08      	ldr	r2, [sp, #32]
 800b91e:	2a00      	cmp	r2, #0
 800b920:	f000 80c4 	beq.w	800baac <_dtoa_r+0x8cc>
 800b924:	9a05      	ldr	r2, [sp, #20]
 800b926:	2a01      	cmp	r2, #1
 800b928:	f300 80a8 	bgt.w	800ba7c <_dtoa_r+0x89c>
 800b92c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b92e:	2a00      	cmp	r2, #0
 800b930:	f000 80a0 	beq.w	800ba74 <_dtoa_r+0x894>
 800b934:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b938:	9e06      	ldr	r6, [sp, #24]
 800b93a:	4645      	mov	r5, r8
 800b93c:	9a04      	ldr	r2, [sp, #16]
 800b93e:	2101      	movs	r1, #1
 800b940:	441a      	add	r2, r3
 800b942:	4620      	mov	r0, r4
 800b944:	4498      	add	r8, r3
 800b946:	9204      	str	r2, [sp, #16]
 800b948:	f001 f928 	bl	800cb9c <__i2b>
 800b94c:	4607      	mov	r7, r0
 800b94e:	2d00      	cmp	r5, #0
 800b950:	dd0b      	ble.n	800b96a <_dtoa_r+0x78a>
 800b952:	9b04      	ldr	r3, [sp, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	dd08      	ble.n	800b96a <_dtoa_r+0x78a>
 800b958:	42ab      	cmp	r3, r5
 800b95a:	9a04      	ldr	r2, [sp, #16]
 800b95c:	bfa8      	it	ge
 800b95e:	462b      	movge	r3, r5
 800b960:	eba8 0803 	sub.w	r8, r8, r3
 800b964:	1aed      	subs	r5, r5, r3
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	9304      	str	r3, [sp, #16]
 800b96a:	9b06      	ldr	r3, [sp, #24]
 800b96c:	b1fb      	cbz	r3, 800b9ae <_dtoa_r+0x7ce>
 800b96e:	9b08      	ldr	r3, [sp, #32]
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 809f 	beq.w	800bab4 <_dtoa_r+0x8d4>
 800b976:	2e00      	cmp	r6, #0
 800b978:	dd11      	ble.n	800b99e <_dtoa_r+0x7be>
 800b97a:	4639      	mov	r1, r7
 800b97c:	4632      	mov	r2, r6
 800b97e:	4620      	mov	r0, r4
 800b980:	f001 f9c8 	bl	800cd14 <__pow5mult>
 800b984:	465a      	mov	r2, fp
 800b986:	4601      	mov	r1, r0
 800b988:	4607      	mov	r7, r0
 800b98a:	4620      	mov	r0, r4
 800b98c:	f001 f91c 	bl	800cbc8 <__multiply>
 800b990:	4659      	mov	r1, fp
 800b992:	9007      	str	r0, [sp, #28]
 800b994:	4620      	mov	r0, r4
 800b996:	f000 fffb 	bl	800c990 <_Bfree>
 800b99a:	9b07      	ldr	r3, [sp, #28]
 800b99c:	469b      	mov	fp, r3
 800b99e:	9b06      	ldr	r3, [sp, #24]
 800b9a0:	1b9a      	subs	r2, r3, r6
 800b9a2:	d004      	beq.n	800b9ae <_dtoa_r+0x7ce>
 800b9a4:	4659      	mov	r1, fp
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f001 f9b4 	bl	800cd14 <__pow5mult>
 800b9ac:	4683      	mov	fp, r0
 800b9ae:	2101      	movs	r1, #1
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	f001 f8f3 	bl	800cb9c <__i2b>
 800b9b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	4606      	mov	r6, r0
 800b9bc:	dd7c      	ble.n	800bab8 <_dtoa_r+0x8d8>
 800b9be:	461a      	mov	r2, r3
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	4620      	mov	r0, r4
 800b9c4:	f001 f9a6 	bl	800cd14 <__pow5mult>
 800b9c8:	9b05      	ldr	r3, [sp, #20]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	4606      	mov	r6, r0
 800b9ce:	dd76      	ble.n	800babe <_dtoa_r+0x8de>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	9306      	str	r3, [sp, #24]
 800b9d4:	6933      	ldr	r3, [r6, #16]
 800b9d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b9da:	6918      	ldr	r0, [r3, #16]
 800b9dc:	f001 f88e 	bl	800cafc <__hi0bits>
 800b9e0:	f1c0 0020 	rsb	r0, r0, #32
 800b9e4:	9b04      	ldr	r3, [sp, #16]
 800b9e6:	4418      	add	r0, r3
 800b9e8:	f010 001f 	ands.w	r0, r0, #31
 800b9ec:	f000 8086 	beq.w	800bafc <_dtoa_r+0x91c>
 800b9f0:	f1c0 0320 	rsb	r3, r0, #32
 800b9f4:	2b04      	cmp	r3, #4
 800b9f6:	dd7f      	ble.n	800baf8 <_dtoa_r+0x918>
 800b9f8:	f1c0 001c 	rsb	r0, r0, #28
 800b9fc:	9b04      	ldr	r3, [sp, #16]
 800b9fe:	4403      	add	r3, r0
 800ba00:	4480      	add	r8, r0
 800ba02:	4405      	add	r5, r0
 800ba04:	9304      	str	r3, [sp, #16]
 800ba06:	f1b8 0f00 	cmp.w	r8, #0
 800ba0a:	dd05      	ble.n	800ba18 <_dtoa_r+0x838>
 800ba0c:	4659      	mov	r1, fp
 800ba0e:	4642      	mov	r2, r8
 800ba10:	4620      	mov	r0, r4
 800ba12:	f001 f9d9 	bl	800cdc8 <__lshift>
 800ba16:	4683      	mov	fp, r0
 800ba18:	9b04      	ldr	r3, [sp, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	dd05      	ble.n	800ba2a <_dtoa_r+0x84a>
 800ba1e:	4631      	mov	r1, r6
 800ba20:	461a      	mov	r2, r3
 800ba22:	4620      	mov	r0, r4
 800ba24:	f001 f9d0 	bl	800cdc8 <__lshift>
 800ba28:	4606      	mov	r6, r0
 800ba2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d069      	beq.n	800bb04 <_dtoa_r+0x924>
 800ba30:	4631      	mov	r1, r6
 800ba32:	4658      	mov	r0, fp
 800ba34:	f001 fa34 	bl	800cea0 <__mcmp>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	da63      	bge.n	800bb04 <_dtoa_r+0x924>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4659      	mov	r1, fp
 800ba40:	220a      	movs	r2, #10
 800ba42:	4620      	mov	r0, r4
 800ba44:	f000 ffc6 	bl	800c9d4 <__multadd>
 800ba48:	9b08      	ldr	r3, [sp, #32]
 800ba4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba4e:	4683      	mov	fp, r0
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f000 818f 	beq.w	800bd74 <_dtoa_r+0xb94>
 800ba56:	4639      	mov	r1, r7
 800ba58:	2300      	movs	r3, #0
 800ba5a:	220a      	movs	r2, #10
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	f000 ffb9 	bl	800c9d4 <__multadd>
 800ba62:	f1b9 0f00 	cmp.w	r9, #0
 800ba66:	4607      	mov	r7, r0
 800ba68:	f300 808e 	bgt.w	800bb88 <_dtoa_r+0x9a8>
 800ba6c:	9b05      	ldr	r3, [sp, #20]
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	dc50      	bgt.n	800bb14 <_dtoa_r+0x934>
 800ba72:	e089      	b.n	800bb88 <_dtoa_r+0x9a8>
 800ba74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ba76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba7a:	e75d      	b.n	800b938 <_dtoa_r+0x758>
 800ba7c:	9b01      	ldr	r3, [sp, #4]
 800ba7e:	1e5e      	subs	r6, r3, #1
 800ba80:	9b06      	ldr	r3, [sp, #24]
 800ba82:	42b3      	cmp	r3, r6
 800ba84:	bfbf      	itttt	lt
 800ba86:	9b06      	ldrlt	r3, [sp, #24]
 800ba88:	9606      	strlt	r6, [sp, #24]
 800ba8a:	1af2      	sublt	r2, r6, r3
 800ba8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ba8e:	bfb6      	itet	lt
 800ba90:	189b      	addlt	r3, r3, r2
 800ba92:	1b9e      	subge	r6, r3, r6
 800ba94:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	bfb8      	it	lt
 800ba9a:	2600      	movlt	r6, #0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	bfb5      	itete	lt
 800baa0:	eba8 0503 	sublt.w	r5, r8, r3
 800baa4:	9b01      	ldrge	r3, [sp, #4]
 800baa6:	2300      	movlt	r3, #0
 800baa8:	4645      	movge	r5, r8
 800baaa:	e747      	b.n	800b93c <_dtoa_r+0x75c>
 800baac:	9e06      	ldr	r6, [sp, #24]
 800baae:	9f08      	ldr	r7, [sp, #32]
 800bab0:	4645      	mov	r5, r8
 800bab2:	e74c      	b.n	800b94e <_dtoa_r+0x76e>
 800bab4:	9a06      	ldr	r2, [sp, #24]
 800bab6:	e775      	b.n	800b9a4 <_dtoa_r+0x7c4>
 800bab8:	9b05      	ldr	r3, [sp, #20]
 800baba:	2b01      	cmp	r3, #1
 800babc:	dc18      	bgt.n	800baf0 <_dtoa_r+0x910>
 800babe:	9b02      	ldr	r3, [sp, #8]
 800bac0:	b9b3      	cbnz	r3, 800baf0 <_dtoa_r+0x910>
 800bac2:	9b03      	ldr	r3, [sp, #12]
 800bac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bac8:	b9a3      	cbnz	r3, 800baf4 <_dtoa_r+0x914>
 800baca:	9b03      	ldr	r3, [sp, #12]
 800bacc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bad0:	0d1b      	lsrs	r3, r3, #20
 800bad2:	051b      	lsls	r3, r3, #20
 800bad4:	b12b      	cbz	r3, 800bae2 <_dtoa_r+0x902>
 800bad6:	9b04      	ldr	r3, [sp, #16]
 800bad8:	3301      	adds	r3, #1
 800bada:	9304      	str	r3, [sp, #16]
 800badc:	f108 0801 	add.w	r8, r8, #1
 800bae0:	2301      	movs	r3, #1
 800bae2:	9306      	str	r3, [sp, #24]
 800bae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f47f af74 	bne.w	800b9d4 <_dtoa_r+0x7f4>
 800baec:	2001      	movs	r0, #1
 800baee:	e779      	b.n	800b9e4 <_dtoa_r+0x804>
 800baf0:	2300      	movs	r3, #0
 800baf2:	e7f6      	b.n	800bae2 <_dtoa_r+0x902>
 800baf4:	9b02      	ldr	r3, [sp, #8]
 800baf6:	e7f4      	b.n	800bae2 <_dtoa_r+0x902>
 800baf8:	d085      	beq.n	800ba06 <_dtoa_r+0x826>
 800bafa:	4618      	mov	r0, r3
 800bafc:	301c      	adds	r0, #28
 800bafe:	e77d      	b.n	800b9fc <_dtoa_r+0x81c>
 800bb00:	40240000 	.word	0x40240000
 800bb04:	9b01      	ldr	r3, [sp, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	dc38      	bgt.n	800bb7c <_dtoa_r+0x99c>
 800bb0a:	9b05      	ldr	r3, [sp, #20]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	dd35      	ble.n	800bb7c <_dtoa_r+0x99c>
 800bb10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bb14:	f1b9 0f00 	cmp.w	r9, #0
 800bb18:	d10d      	bne.n	800bb36 <_dtoa_r+0x956>
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	464b      	mov	r3, r9
 800bb1e:	2205      	movs	r2, #5
 800bb20:	4620      	mov	r0, r4
 800bb22:	f000 ff57 	bl	800c9d4 <__multadd>
 800bb26:	4601      	mov	r1, r0
 800bb28:	4606      	mov	r6, r0
 800bb2a:	4658      	mov	r0, fp
 800bb2c:	f001 f9b8 	bl	800cea0 <__mcmp>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	f73f adbd 	bgt.w	800b6b0 <_dtoa_r+0x4d0>
 800bb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb38:	9d00      	ldr	r5, [sp, #0]
 800bb3a:	ea6f 0a03 	mvn.w	sl, r3
 800bb3e:	f04f 0800 	mov.w	r8, #0
 800bb42:	4631      	mov	r1, r6
 800bb44:	4620      	mov	r0, r4
 800bb46:	f000 ff23 	bl	800c990 <_Bfree>
 800bb4a:	2f00      	cmp	r7, #0
 800bb4c:	f43f aeb4 	beq.w	800b8b8 <_dtoa_r+0x6d8>
 800bb50:	f1b8 0f00 	cmp.w	r8, #0
 800bb54:	d005      	beq.n	800bb62 <_dtoa_r+0x982>
 800bb56:	45b8      	cmp	r8, r7
 800bb58:	d003      	beq.n	800bb62 <_dtoa_r+0x982>
 800bb5a:	4641      	mov	r1, r8
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 ff17 	bl	800c990 <_Bfree>
 800bb62:	4639      	mov	r1, r7
 800bb64:	4620      	mov	r0, r4
 800bb66:	f000 ff13 	bl	800c990 <_Bfree>
 800bb6a:	e6a5      	b.n	800b8b8 <_dtoa_r+0x6d8>
 800bb6c:	2600      	movs	r6, #0
 800bb6e:	4637      	mov	r7, r6
 800bb70:	e7e1      	b.n	800bb36 <_dtoa_r+0x956>
 800bb72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bb74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bb78:	4637      	mov	r7, r6
 800bb7a:	e599      	b.n	800b6b0 <_dtoa_r+0x4d0>
 800bb7c:	9b08      	ldr	r3, [sp, #32]
 800bb7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 80fd 	beq.w	800bd82 <_dtoa_r+0xba2>
 800bb88:	2d00      	cmp	r5, #0
 800bb8a:	dd05      	ble.n	800bb98 <_dtoa_r+0x9b8>
 800bb8c:	4639      	mov	r1, r7
 800bb8e:	462a      	mov	r2, r5
 800bb90:	4620      	mov	r0, r4
 800bb92:	f001 f919 	bl	800cdc8 <__lshift>
 800bb96:	4607      	mov	r7, r0
 800bb98:	9b06      	ldr	r3, [sp, #24]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d05c      	beq.n	800bc58 <_dtoa_r+0xa78>
 800bb9e:	6879      	ldr	r1, [r7, #4]
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 feb5 	bl	800c910 <_Balloc>
 800bba6:	4605      	mov	r5, r0
 800bba8:	b928      	cbnz	r0, 800bbb6 <_dtoa_r+0x9d6>
 800bbaa:	4b80      	ldr	r3, [pc, #512]	; (800bdac <_dtoa_r+0xbcc>)
 800bbac:	4602      	mov	r2, r0
 800bbae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bbb2:	f7ff bb2e 	b.w	800b212 <_dtoa_r+0x32>
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	3202      	adds	r2, #2
 800bbba:	0092      	lsls	r2, r2, #2
 800bbbc:	f107 010c 	add.w	r1, r7, #12
 800bbc0:	300c      	adds	r0, #12
 800bbc2:	f7fd fbc9 	bl	8009358 <memcpy>
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	4629      	mov	r1, r5
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f001 f8fc 	bl	800cdc8 <__lshift>
 800bbd0:	9b00      	ldr	r3, [sp, #0]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	9301      	str	r3, [sp, #4]
 800bbd6:	9b00      	ldr	r3, [sp, #0]
 800bbd8:	444b      	add	r3, r9
 800bbda:	9307      	str	r3, [sp, #28]
 800bbdc:	9b02      	ldr	r3, [sp, #8]
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	46b8      	mov	r8, r7
 800bbe4:	9306      	str	r3, [sp, #24]
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	9b01      	ldr	r3, [sp, #4]
 800bbea:	4631      	mov	r1, r6
 800bbec:	3b01      	subs	r3, #1
 800bbee:	4658      	mov	r0, fp
 800bbf0:	9302      	str	r3, [sp, #8]
 800bbf2:	f7ff fa67 	bl	800b0c4 <quorem>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	3330      	adds	r3, #48	; 0x30
 800bbfa:	9004      	str	r0, [sp, #16]
 800bbfc:	4641      	mov	r1, r8
 800bbfe:	4658      	mov	r0, fp
 800bc00:	9308      	str	r3, [sp, #32]
 800bc02:	f001 f94d 	bl	800cea0 <__mcmp>
 800bc06:	463a      	mov	r2, r7
 800bc08:	4681      	mov	r9, r0
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f001 f963 	bl	800ced8 <__mdiff>
 800bc12:	68c2      	ldr	r2, [r0, #12]
 800bc14:	9b08      	ldr	r3, [sp, #32]
 800bc16:	4605      	mov	r5, r0
 800bc18:	bb02      	cbnz	r2, 800bc5c <_dtoa_r+0xa7c>
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	4658      	mov	r0, fp
 800bc1e:	f001 f93f 	bl	800cea0 <__mcmp>
 800bc22:	9b08      	ldr	r3, [sp, #32]
 800bc24:	4602      	mov	r2, r0
 800bc26:	4629      	mov	r1, r5
 800bc28:	4620      	mov	r0, r4
 800bc2a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800bc2e:	f000 feaf 	bl	800c990 <_Bfree>
 800bc32:	9b05      	ldr	r3, [sp, #20]
 800bc34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc36:	9d01      	ldr	r5, [sp, #4]
 800bc38:	ea43 0102 	orr.w	r1, r3, r2
 800bc3c:	9b06      	ldr	r3, [sp, #24]
 800bc3e:	430b      	orrs	r3, r1
 800bc40:	9b08      	ldr	r3, [sp, #32]
 800bc42:	d10d      	bne.n	800bc60 <_dtoa_r+0xa80>
 800bc44:	2b39      	cmp	r3, #57	; 0x39
 800bc46:	d029      	beq.n	800bc9c <_dtoa_r+0xabc>
 800bc48:	f1b9 0f00 	cmp.w	r9, #0
 800bc4c:	dd01      	ble.n	800bc52 <_dtoa_r+0xa72>
 800bc4e:	9b04      	ldr	r3, [sp, #16]
 800bc50:	3331      	adds	r3, #49	; 0x31
 800bc52:	9a02      	ldr	r2, [sp, #8]
 800bc54:	7013      	strb	r3, [r2, #0]
 800bc56:	e774      	b.n	800bb42 <_dtoa_r+0x962>
 800bc58:	4638      	mov	r0, r7
 800bc5a:	e7b9      	b.n	800bbd0 <_dtoa_r+0x9f0>
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	e7e2      	b.n	800bc26 <_dtoa_r+0xa46>
 800bc60:	f1b9 0f00 	cmp.w	r9, #0
 800bc64:	db06      	blt.n	800bc74 <_dtoa_r+0xa94>
 800bc66:	9905      	ldr	r1, [sp, #20]
 800bc68:	ea41 0909 	orr.w	r9, r1, r9
 800bc6c:	9906      	ldr	r1, [sp, #24]
 800bc6e:	ea59 0101 	orrs.w	r1, r9, r1
 800bc72:	d120      	bne.n	800bcb6 <_dtoa_r+0xad6>
 800bc74:	2a00      	cmp	r2, #0
 800bc76:	ddec      	ble.n	800bc52 <_dtoa_r+0xa72>
 800bc78:	4659      	mov	r1, fp
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	f001 f8a2 	bl	800cdc8 <__lshift>
 800bc84:	4631      	mov	r1, r6
 800bc86:	4683      	mov	fp, r0
 800bc88:	f001 f90a 	bl	800cea0 <__mcmp>
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	dc02      	bgt.n	800bc98 <_dtoa_r+0xab8>
 800bc92:	d1de      	bne.n	800bc52 <_dtoa_r+0xa72>
 800bc94:	07da      	lsls	r2, r3, #31
 800bc96:	d5dc      	bpl.n	800bc52 <_dtoa_r+0xa72>
 800bc98:	2b39      	cmp	r3, #57	; 0x39
 800bc9a:	d1d8      	bne.n	800bc4e <_dtoa_r+0xa6e>
 800bc9c:	9a02      	ldr	r2, [sp, #8]
 800bc9e:	2339      	movs	r3, #57	; 0x39
 800bca0:	7013      	strb	r3, [r2, #0]
 800bca2:	462b      	mov	r3, r5
 800bca4:	461d      	mov	r5, r3
 800bca6:	3b01      	subs	r3, #1
 800bca8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bcac:	2a39      	cmp	r2, #57	; 0x39
 800bcae:	d050      	beq.n	800bd52 <_dtoa_r+0xb72>
 800bcb0:	3201      	adds	r2, #1
 800bcb2:	701a      	strb	r2, [r3, #0]
 800bcb4:	e745      	b.n	800bb42 <_dtoa_r+0x962>
 800bcb6:	2a00      	cmp	r2, #0
 800bcb8:	dd03      	ble.n	800bcc2 <_dtoa_r+0xae2>
 800bcba:	2b39      	cmp	r3, #57	; 0x39
 800bcbc:	d0ee      	beq.n	800bc9c <_dtoa_r+0xabc>
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	e7c7      	b.n	800bc52 <_dtoa_r+0xa72>
 800bcc2:	9a01      	ldr	r2, [sp, #4]
 800bcc4:	9907      	ldr	r1, [sp, #28]
 800bcc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bcca:	428a      	cmp	r2, r1
 800bccc:	d02a      	beq.n	800bd24 <_dtoa_r+0xb44>
 800bcce:	4659      	mov	r1, fp
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	220a      	movs	r2, #10
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f000 fe7d 	bl	800c9d4 <__multadd>
 800bcda:	45b8      	cmp	r8, r7
 800bcdc:	4683      	mov	fp, r0
 800bcde:	f04f 0300 	mov.w	r3, #0
 800bce2:	f04f 020a 	mov.w	r2, #10
 800bce6:	4641      	mov	r1, r8
 800bce8:	4620      	mov	r0, r4
 800bcea:	d107      	bne.n	800bcfc <_dtoa_r+0xb1c>
 800bcec:	f000 fe72 	bl	800c9d4 <__multadd>
 800bcf0:	4680      	mov	r8, r0
 800bcf2:	4607      	mov	r7, r0
 800bcf4:	9b01      	ldr	r3, [sp, #4]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	9301      	str	r3, [sp, #4]
 800bcfa:	e775      	b.n	800bbe8 <_dtoa_r+0xa08>
 800bcfc:	f000 fe6a 	bl	800c9d4 <__multadd>
 800bd00:	4639      	mov	r1, r7
 800bd02:	4680      	mov	r8, r0
 800bd04:	2300      	movs	r3, #0
 800bd06:	220a      	movs	r2, #10
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f000 fe63 	bl	800c9d4 <__multadd>
 800bd0e:	4607      	mov	r7, r0
 800bd10:	e7f0      	b.n	800bcf4 <_dtoa_r+0xb14>
 800bd12:	f1b9 0f00 	cmp.w	r9, #0
 800bd16:	9a00      	ldr	r2, [sp, #0]
 800bd18:	bfcc      	ite	gt
 800bd1a:	464d      	movgt	r5, r9
 800bd1c:	2501      	movle	r5, #1
 800bd1e:	4415      	add	r5, r2
 800bd20:	f04f 0800 	mov.w	r8, #0
 800bd24:	4659      	mov	r1, fp
 800bd26:	2201      	movs	r2, #1
 800bd28:	4620      	mov	r0, r4
 800bd2a:	9301      	str	r3, [sp, #4]
 800bd2c:	f001 f84c 	bl	800cdc8 <__lshift>
 800bd30:	4631      	mov	r1, r6
 800bd32:	4683      	mov	fp, r0
 800bd34:	f001 f8b4 	bl	800cea0 <__mcmp>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	dcb2      	bgt.n	800bca2 <_dtoa_r+0xac2>
 800bd3c:	d102      	bne.n	800bd44 <_dtoa_r+0xb64>
 800bd3e:	9b01      	ldr	r3, [sp, #4]
 800bd40:	07db      	lsls	r3, r3, #31
 800bd42:	d4ae      	bmi.n	800bca2 <_dtoa_r+0xac2>
 800bd44:	462b      	mov	r3, r5
 800bd46:	461d      	mov	r5, r3
 800bd48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd4c:	2a30      	cmp	r2, #48	; 0x30
 800bd4e:	d0fa      	beq.n	800bd46 <_dtoa_r+0xb66>
 800bd50:	e6f7      	b.n	800bb42 <_dtoa_r+0x962>
 800bd52:	9a00      	ldr	r2, [sp, #0]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d1a5      	bne.n	800bca4 <_dtoa_r+0xac4>
 800bd58:	f10a 0a01 	add.w	sl, sl, #1
 800bd5c:	2331      	movs	r3, #49	; 0x31
 800bd5e:	e779      	b.n	800bc54 <_dtoa_r+0xa74>
 800bd60:	4b13      	ldr	r3, [pc, #76]	; (800bdb0 <_dtoa_r+0xbd0>)
 800bd62:	f7ff baaf 	b.w	800b2c4 <_dtoa_r+0xe4>
 800bd66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f47f aa86 	bne.w	800b27a <_dtoa_r+0x9a>
 800bd6e:	4b11      	ldr	r3, [pc, #68]	; (800bdb4 <_dtoa_r+0xbd4>)
 800bd70:	f7ff baa8 	b.w	800b2c4 <_dtoa_r+0xe4>
 800bd74:	f1b9 0f00 	cmp.w	r9, #0
 800bd78:	dc03      	bgt.n	800bd82 <_dtoa_r+0xba2>
 800bd7a:	9b05      	ldr	r3, [sp, #20]
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	f73f aec9 	bgt.w	800bb14 <_dtoa_r+0x934>
 800bd82:	9d00      	ldr	r5, [sp, #0]
 800bd84:	4631      	mov	r1, r6
 800bd86:	4658      	mov	r0, fp
 800bd88:	f7ff f99c 	bl	800b0c4 <quorem>
 800bd8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bd90:	f805 3b01 	strb.w	r3, [r5], #1
 800bd94:	9a00      	ldr	r2, [sp, #0]
 800bd96:	1aaa      	subs	r2, r5, r2
 800bd98:	4591      	cmp	r9, r2
 800bd9a:	ddba      	ble.n	800bd12 <_dtoa_r+0xb32>
 800bd9c:	4659      	mov	r1, fp
 800bd9e:	2300      	movs	r3, #0
 800bda0:	220a      	movs	r2, #10
 800bda2:	4620      	mov	r0, r4
 800bda4:	f000 fe16 	bl	800c9d4 <__multadd>
 800bda8:	4683      	mov	fp, r0
 800bdaa:	e7eb      	b.n	800bd84 <_dtoa_r+0xba4>
 800bdac:	0800e76c 	.word	0x0800e76c
 800bdb0:	0800e568 	.word	0x0800e568
 800bdb4:	0800e6e9 	.word	0x0800e6e9

0800bdb8 <__sflush_r>:
 800bdb8:	898a      	ldrh	r2, [r1, #12]
 800bdba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	0710      	lsls	r0, r2, #28
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	d458      	bmi.n	800be78 <__sflush_r+0xc0>
 800bdc6:	684b      	ldr	r3, [r1, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	dc05      	bgt.n	800bdd8 <__sflush_r+0x20>
 800bdcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	dc02      	bgt.n	800bdd8 <__sflush_r+0x20>
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdda:	2e00      	cmp	r6, #0
 800bddc:	d0f9      	beq.n	800bdd2 <__sflush_r+0x1a>
 800bdde:	2300      	movs	r3, #0
 800bde0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bde4:	682f      	ldr	r7, [r5, #0]
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	d032      	beq.n	800be50 <__sflush_r+0x98>
 800bdea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdec:	89a3      	ldrh	r3, [r4, #12]
 800bdee:	075a      	lsls	r2, r3, #29
 800bdf0:	d505      	bpl.n	800bdfe <__sflush_r+0x46>
 800bdf2:	6863      	ldr	r3, [r4, #4]
 800bdf4:	1ac0      	subs	r0, r0, r3
 800bdf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bdf8:	b10b      	cbz	r3, 800bdfe <__sflush_r+0x46>
 800bdfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bdfc:	1ac0      	subs	r0, r0, r3
 800bdfe:	2300      	movs	r3, #0
 800be00:	4602      	mov	r2, r0
 800be02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be04:	6a21      	ldr	r1, [r4, #32]
 800be06:	4628      	mov	r0, r5
 800be08:	47b0      	blx	r6
 800be0a:	1c43      	adds	r3, r0, #1
 800be0c:	89a3      	ldrh	r3, [r4, #12]
 800be0e:	d106      	bne.n	800be1e <__sflush_r+0x66>
 800be10:	6829      	ldr	r1, [r5, #0]
 800be12:	291d      	cmp	r1, #29
 800be14:	d82c      	bhi.n	800be70 <__sflush_r+0xb8>
 800be16:	4a2a      	ldr	r2, [pc, #168]	; (800bec0 <__sflush_r+0x108>)
 800be18:	40ca      	lsrs	r2, r1
 800be1a:	07d6      	lsls	r6, r2, #31
 800be1c:	d528      	bpl.n	800be70 <__sflush_r+0xb8>
 800be1e:	2200      	movs	r2, #0
 800be20:	6062      	str	r2, [r4, #4]
 800be22:	04d9      	lsls	r1, r3, #19
 800be24:	6922      	ldr	r2, [r4, #16]
 800be26:	6022      	str	r2, [r4, #0]
 800be28:	d504      	bpl.n	800be34 <__sflush_r+0x7c>
 800be2a:	1c42      	adds	r2, r0, #1
 800be2c:	d101      	bne.n	800be32 <__sflush_r+0x7a>
 800be2e:	682b      	ldr	r3, [r5, #0]
 800be30:	b903      	cbnz	r3, 800be34 <__sflush_r+0x7c>
 800be32:	6560      	str	r0, [r4, #84]	; 0x54
 800be34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be36:	602f      	str	r7, [r5, #0]
 800be38:	2900      	cmp	r1, #0
 800be3a:	d0ca      	beq.n	800bdd2 <__sflush_r+0x1a>
 800be3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be40:	4299      	cmp	r1, r3
 800be42:	d002      	beq.n	800be4a <__sflush_r+0x92>
 800be44:	4628      	mov	r0, r5
 800be46:	f001 fa2d 	bl	800d2a4 <_free_r>
 800be4a:	2000      	movs	r0, #0
 800be4c:	6360      	str	r0, [r4, #52]	; 0x34
 800be4e:	e7c1      	b.n	800bdd4 <__sflush_r+0x1c>
 800be50:	6a21      	ldr	r1, [r4, #32]
 800be52:	2301      	movs	r3, #1
 800be54:	4628      	mov	r0, r5
 800be56:	47b0      	blx	r6
 800be58:	1c41      	adds	r1, r0, #1
 800be5a:	d1c7      	bne.n	800bdec <__sflush_r+0x34>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d0c4      	beq.n	800bdec <__sflush_r+0x34>
 800be62:	2b1d      	cmp	r3, #29
 800be64:	d001      	beq.n	800be6a <__sflush_r+0xb2>
 800be66:	2b16      	cmp	r3, #22
 800be68:	d101      	bne.n	800be6e <__sflush_r+0xb6>
 800be6a:	602f      	str	r7, [r5, #0]
 800be6c:	e7b1      	b.n	800bdd2 <__sflush_r+0x1a>
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be74:	81a3      	strh	r3, [r4, #12]
 800be76:	e7ad      	b.n	800bdd4 <__sflush_r+0x1c>
 800be78:	690f      	ldr	r7, [r1, #16]
 800be7a:	2f00      	cmp	r7, #0
 800be7c:	d0a9      	beq.n	800bdd2 <__sflush_r+0x1a>
 800be7e:	0793      	lsls	r3, r2, #30
 800be80:	680e      	ldr	r6, [r1, #0]
 800be82:	bf08      	it	eq
 800be84:	694b      	ldreq	r3, [r1, #20]
 800be86:	600f      	str	r7, [r1, #0]
 800be88:	bf18      	it	ne
 800be8a:	2300      	movne	r3, #0
 800be8c:	eba6 0807 	sub.w	r8, r6, r7
 800be90:	608b      	str	r3, [r1, #8]
 800be92:	f1b8 0f00 	cmp.w	r8, #0
 800be96:	dd9c      	ble.n	800bdd2 <__sflush_r+0x1a>
 800be98:	6a21      	ldr	r1, [r4, #32]
 800be9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be9c:	4643      	mov	r3, r8
 800be9e:	463a      	mov	r2, r7
 800bea0:	4628      	mov	r0, r5
 800bea2:	47b0      	blx	r6
 800bea4:	2800      	cmp	r0, #0
 800bea6:	dc06      	bgt.n	800beb6 <__sflush_r+0xfe>
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beae:	81a3      	strh	r3, [r4, #12]
 800beb0:	f04f 30ff 	mov.w	r0, #4294967295
 800beb4:	e78e      	b.n	800bdd4 <__sflush_r+0x1c>
 800beb6:	4407      	add	r7, r0
 800beb8:	eba8 0800 	sub.w	r8, r8, r0
 800bebc:	e7e9      	b.n	800be92 <__sflush_r+0xda>
 800bebe:	bf00      	nop
 800bec0:	20400001 	.word	0x20400001

0800bec4 <_fflush_r>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	690b      	ldr	r3, [r1, #16]
 800bec8:	4605      	mov	r5, r0
 800beca:	460c      	mov	r4, r1
 800becc:	b913      	cbnz	r3, 800bed4 <_fflush_r+0x10>
 800bece:	2500      	movs	r5, #0
 800bed0:	4628      	mov	r0, r5
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	b118      	cbz	r0, 800bede <_fflush_r+0x1a>
 800bed6:	6983      	ldr	r3, [r0, #24]
 800bed8:	b90b      	cbnz	r3, 800bede <_fflush_r+0x1a>
 800beda:	f000 f887 	bl	800bfec <__sinit>
 800bede:	4b14      	ldr	r3, [pc, #80]	; (800bf30 <_fflush_r+0x6c>)
 800bee0:	429c      	cmp	r4, r3
 800bee2:	d11b      	bne.n	800bf1c <_fflush_r+0x58>
 800bee4:	686c      	ldr	r4, [r5, #4]
 800bee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d0ef      	beq.n	800bece <_fflush_r+0xa>
 800beee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bef0:	07d0      	lsls	r0, r2, #31
 800bef2:	d404      	bmi.n	800befe <_fflush_r+0x3a>
 800bef4:	0599      	lsls	r1, r3, #22
 800bef6:	d402      	bmi.n	800befe <_fflush_r+0x3a>
 800bef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800befa:	f000 fc88 	bl	800c80e <__retarget_lock_acquire_recursive>
 800befe:	4628      	mov	r0, r5
 800bf00:	4621      	mov	r1, r4
 800bf02:	f7ff ff59 	bl	800bdb8 <__sflush_r>
 800bf06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf08:	07da      	lsls	r2, r3, #31
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	d4e0      	bmi.n	800bed0 <_fflush_r+0xc>
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	059b      	lsls	r3, r3, #22
 800bf12:	d4dd      	bmi.n	800bed0 <_fflush_r+0xc>
 800bf14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf16:	f000 fc7b 	bl	800c810 <__retarget_lock_release_recursive>
 800bf1a:	e7d9      	b.n	800bed0 <_fflush_r+0xc>
 800bf1c:	4b05      	ldr	r3, [pc, #20]	; (800bf34 <_fflush_r+0x70>)
 800bf1e:	429c      	cmp	r4, r3
 800bf20:	d101      	bne.n	800bf26 <_fflush_r+0x62>
 800bf22:	68ac      	ldr	r4, [r5, #8]
 800bf24:	e7df      	b.n	800bee6 <_fflush_r+0x22>
 800bf26:	4b04      	ldr	r3, [pc, #16]	; (800bf38 <_fflush_r+0x74>)
 800bf28:	429c      	cmp	r4, r3
 800bf2a:	bf08      	it	eq
 800bf2c:	68ec      	ldreq	r4, [r5, #12]
 800bf2e:	e7da      	b.n	800bee6 <_fflush_r+0x22>
 800bf30:	0800e7a0 	.word	0x0800e7a0
 800bf34:	0800e7c0 	.word	0x0800e7c0
 800bf38:	0800e780 	.word	0x0800e780

0800bf3c <std>:
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	b510      	push	{r4, lr}
 800bf40:	4604      	mov	r4, r0
 800bf42:	e9c0 3300 	strd	r3, r3, [r0]
 800bf46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf4a:	6083      	str	r3, [r0, #8]
 800bf4c:	8181      	strh	r1, [r0, #12]
 800bf4e:	6643      	str	r3, [r0, #100]	; 0x64
 800bf50:	81c2      	strh	r2, [r0, #14]
 800bf52:	6183      	str	r3, [r0, #24]
 800bf54:	4619      	mov	r1, r3
 800bf56:	2208      	movs	r2, #8
 800bf58:	305c      	adds	r0, #92	; 0x5c
 800bf5a:	f7fd fa0b 	bl	8009374 <memset>
 800bf5e:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <std+0x38>)
 800bf60:	6263      	str	r3, [r4, #36]	; 0x24
 800bf62:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <std+0x3c>)
 800bf64:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf66:	4b05      	ldr	r3, [pc, #20]	; (800bf7c <std+0x40>)
 800bf68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf6a:	4b05      	ldr	r3, [pc, #20]	; (800bf80 <std+0x44>)
 800bf6c:	6224      	str	r4, [r4, #32]
 800bf6e:	6323      	str	r3, [r4, #48]	; 0x30
 800bf70:	bd10      	pop	{r4, pc}
 800bf72:	bf00      	nop
 800bf74:	0800d999 	.word	0x0800d999
 800bf78:	0800d9bb 	.word	0x0800d9bb
 800bf7c:	0800d9f3 	.word	0x0800d9f3
 800bf80:	0800da17 	.word	0x0800da17

0800bf84 <_cleanup_r>:
 800bf84:	4901      	ldr	r1, [pc, #4]	; (800bf8c <_cleanup_r+0x8>)
 800bf86:	f000 b8af 	b.w	800c0e8 <_fwalk_reent>
 800bf8a:	bf00      	nop
 800bf8c:	0800bec5 	.word	0x0800bec5

0800bf90 <__sfmoreglue>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	1e4a      	subs	r2, r1, #1
 800bf94:	2568      	movs	r5, #104	; 0x68
 800bf96:	4355      	muls	r5, r2
 800bf98:	460e      	mov	r6, r1
 800bf9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf9e:	f001 f9d1 	bl	800d344 <_malloc_r>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	b140      	cbz	r0, 800bfb8 <__sfmoreglue+0x28>
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	e9c0 1600 	strd	r1, r6, [r0]
 800bfac:	300c      	adds	r0, #12
 800bfae:	60a0      	str	r0, [r4, #8]
 800bfb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfb4:	f7fd f9de 	bl	8009374 <memset>
 800bfb8:	4620      	mov	r0, r4
 800bfba:	bd70      	pop	{r4, r5, r6, pc}

0800bfbc <__sfp_lock_acquire>:
 800bfbc:	4801      	ldr	r0, [pc, #4]	; (800bfc4 <__sfp_lock_acquire+0x8>)
 800bfbe:	f000 bc26 	b.w	800c80e <__retarget_lock_acquire_recursive>
 800bfc2:	bf00      	nop
 800bfc4:	200008b4 	.word	0x200008b4

0800bfc8 <__sfp_lock_release>:
 800bfc8:	4801      	ldr	r0, [pc, #4]	; (800bfd0 <__sfp_lock_release+0x8>)
 800bfca:	f000 bc21 	b.w	800c810 <__retarget_lock_release_recursive>
 800bfce:	bf00      	nop
 800bfd0:	200008b4 	.word	0x200008b4

0800bfd4 <__sinit_lock_acquire>:
 800bfd4:	4801      	ldr	r0, [pc, #4]	; (800bfdc <__sinit_lock_acquire+0x8>)
 800bfd6:	f000 bc1a 	b.w	800c80e <__retarget_lock_acquire_recursive>
 800bfda:	bf00      	nop
 800bfdc:	200008af 	.word	0x200008af

0800bfe0 <__sinit_lock_release>:
 800bfe0:	4801      	ldr	r0, [pc, #4]	; (800bfe8 <__sinit_lock_release+0x8>)
 800bfe2:	f000 bc15 	b.w	800c810 <__retarget_lock_release_recursive>
 800bfe6:	bf00      	nop
 800bfe8:	200008af 	.word	0x200008af

0800bfec <__sinit>:
 800bfec:	b510      	push	{r4, lr}
 800bfee:	4604      	mov	r4, r0
 800bff0:	f7ff fff0 	bl	800bfd4 <__sinit_lock_acquire>
 800bff4:	69a3      	ldr	r3, [r4, #24]
 800bff6:	b11b      	cbz	r3, 800c000 <__sinit+0x14>
 800bff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bffc:	f7ff bff0 	b.w	800bfe0 <__sinit_lock_release>
 800c000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c004:	6523      	str	r3, [r4, #80]	; 0x50
 800c006:	4b13      	ldr	r3, [pc, #76]	; (800c054 <__sinit+0x68>)
 800c008:	4a13      	ldr	r2, [pc, #76]	; (800c058 <__sinit+0x6c>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c00e:	42a3      	cmp	r3, r4
 800c010:	bf04      	itt	eq
 800c012:	2301      	moveq	r3, #1
 800c014:	61a3      	streq	r3, [r4, #24]
 800c016:	4620      	mov	r0, r4
 800c018:	f000 f820 	bl	800c05c <__sfp>
 800c01c:	6060      	str	r0, [r4, #4]
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 f81c 	bl	800c05c <__sfp>
 800c024:	60a0      	str	r0, [r4, #8]
 800c026:	4620      	mov	r0, r4
 800c028:	f000 f818 	bl	800c05c <__sfp>
 800c02c:	2200      	movs	r2, #0
 800c02e:	60e0      	str	r0, [r4, #12]
 800c030:	2104      	movs	r1, #4
 800c032:	6860      	ldr	r0, [r4, #4]
 800c034:	f7ff ff82 	bl	800bf3c <std>
 800c038:	68a0      	ldr	r0, [r4, #8]
 800c03a:	2201      	movs	r2, #1
 800c03c:	2109      	movs	r1, #9
 800c03e:	f7ff ff7d 	bl	800bf3c <std>
 800c042:	68e0      	ldr	r0, [r4, #12]
 800c044:	2202      	movs	r2, #2
 800c046:	2112      	movs	r1, #18
 800c048:	f7ff ff78 	bl	800bf3c <std>
 800c04c:	2301      	movs	r3, #1
 800c04e:	61a3      	str	r3, [r4, #24]
 800c050:	e7d2      	b.n	800bff8 <__sinit+0xc>
 800c052:	bf00      	nop
 800c054:	0800e554 	.word	0x0800e554
 800c058:	0800bf85 	.word	0x0800bf85

0800c05c <__sfp>:
 800c05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c05e:	4607      	mov	r7, r0
 800c060:	f7ff ffac 	bl	800bfbc <__sfp_lock_acquire>
 800c064:	4b1e      	ldr	r3, [pc, #120]	; (800c0e0 <__sfp+0x84>)
 800c066:	681e      	ldr	r6, [r3, #0]
 800c068:	69b3      	ldr	r3, [r6, #24]
 800c06a:	b913      	cbnz	r3, 800c072 <__sfp+0x16>
 800c06c:	4630      	mov	r0, r6
 800c06e:	f7ff ffbd 	bl	800bfec <__sinit>
 800c072:	3648      	adds	r6, #72	; 0x48
 800c074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c078:	3b01      	subs	r3, #1
 800c07a:	d503      	bpl.n	800c084 <__sfp+0x28>
 800c07c:	6833      	ldr	r3, [r6, #0]
 800c07e:	b30b      	cbz	r3, 800c0c4 <__sfp+0x68>
 800c080:	6836      	ldr	r6, [r6, #0]
 800c082:	e7f7      	b.n	800c074 <__sfp+0x18>
 800c084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c088:	b9d5      	cbnz	r5, 800c0c0 <__sfp+0x64>
 800c08a:	4b16      	ldr	r3, [pc, #88]	; (800c0e4 <__sfp+0x88>)
 800c08c:	60e3      	str	r3, [r4, #12]
 800c08e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c092:	6665      	str	r5, [r4, #100]	; 0x64
 800c094:	f000 fbba 	bl	800c80c <__retarget_lock_init_recursive>
 800c098:	f7ff ff96 	bl	800bfc8 <__sfp_lock_release>
 800c09c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0a4:	6025      	str	r5, [r4, #0]
 800c0a6:	61a5      	str	r5, [r4, #24]
 800c0a8:	2208      	movs	r2, #8
 800c0aa:	4629      	mov	r1, r5
 800c0ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0b0:	f7fd f960 	bl	8009374 <memset>
 800c0b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0bc:	4620      	mov	r0, r4
 800c0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0c0:	3468      	adds	r4, #104	; 0x68
 800c0c2:	e7d9      	b.n	800c078 <__sfp+0x1c>
 800c0c4:	2104      	movs	r1, #4
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	f7ff ff62 	bl	800bf90 <__sfmoreglue>
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	6030      	str	r0, [r6, #0]
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d1d5      	bne.n	800c080 <__sfp+0x24>
 800c0d4:	f7ff ff78 	bl	800bfc8 <__sfp_lock_release>
 800c0d8:	230c      	movs	r3, #12
 800c0da:	603b      	str	r3, [r7, #0]
 800c0dc:	e7ee      	b.n	800c0bc <__sfp+0x60>
 800c0de:	bf00      	nop
 800c0e0:	0800e554 	.word	0x0800e554
 800c0e4:	ffff0001 	.word	0xffff0001

0800c0e8 <_fwalk_reent>:
 800c0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	4688      	mov	r8, r1
 800c0f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0f4:	2700      	movs	r7, #0
 800c0f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0fa:	f1b9 0901 	subs.w	r9, r9, #1
 800c0fe:	d505      	bpl.n	800c10c <_fwalk_reent+0x24>
 800c100:	6824      	ldr	r4, [r4, #0]
 800c102:	2c00      	cmp	r4, #0
 800c104:	d1f7      	bne.n	800c0f6 <_fwalk_reent+0xe>
 800c106:	4638      	mov	r0, r7
 800c108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c10c:	89ab      	ldrh	r3, [r5, #12]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d907      	bls.n	800c122 <_fwalk_reent+0x3a>
 800c112:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c116:	3301      	adds	r3, #1
 800c118:	d003      	beq.n	800c122 <_fwalk_reent+0x3a>
 800c11a:	4629      	mov	r1, r5
 800c11c:	4630      	mov	r0, r6
 800c11e:	47c0      	blx	r8
 800c120:	4307      	orrs	r7, r0
 800c122:	3568      	adds	r5, #104	; 0x68
 800c124:	e7e9      	b.n	800c0fa <_fwalk_reent+0x12>

0800c126 <rshift>:
 800c126:	6903      	ldr	r3, [r0, #16]
 800c128:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c12c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c130:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c134:	f100 0414 	add.w	r4, r0, #20
 800c138:	dd45      	ble.n	800c1c6 <rshift+0xa0>
 800c13a:	f011 011f 	ands.w	r1, r1, #31
 800c13e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c142:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c146:	d10c      	bne.n	800c162 <rshift+0x3c>
 800c148:	f100 0710 	add.w	r7, r0, #16
 800c14c:	4629      	mov	r1, r5
 800c14e:	42b1      	cmp	r1, r6
 800c150:	d334      	bcc.n	800c1bc <rshift+0x96>
 800c152:	1a9b      	subs	r3, r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	1eea      	subs	r2, r5, #3
 800c158:	4296      	cmp	r6, r2
 800c15a:	bf38      	it	cc
 800c15c:	2300      	movcc	r3, #0
 800c15e:	4423      	add	r3, r4
 800c160:	e015      	b.n	800c18e <rshift+0x68>
 800c162:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c166:	f1c1 0820 	rsb	r8, r1, #32
 800c16a:	40cf      	lsrs	r7, r1
 800c16c:	f105 0e04 	add.w	lr, r5, #4
 800c170:	46a1      	mov	r9, r4
 800c172:	4576      	cmp	r6, lr
 800c174:	46f4      	mov	ip, lr
 800c176:	d815      	bhi.n	800c1a4 <rshift+0x7e>
 800c178:	1a9b      	subs	r3, r3, r2
 800c17a:	009a      	lsls	r2, r3, #2
 800c17c:	3a04      	subs	r2, #4
 800c17e:	3501      	adds	r5, #1
 800c180:	42ae      	cmp	r6, r5
 800c182:	bf38      	it	cc
 800c184:	2200      	movcc	r2, #0
 800c186:	18a3      	adds	r3, r4, r2
 800c188:	50a7      	str	r7, [r4, r2]
 800c18a:	b107      	cbz	r7, 800c18e <rshift+0x68>
 800c18c:	3304      	adds	r3, #4
 800c18e:	1b1a      	subs	r2, r3, r4
 800c190:	42a3      	cmp	r3, r4
 800c192:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c196:	bf08      	it	eq
 800c198:	2300      	moveq	r3, #0
 800c19a:	6102      	str	r2, [r0, #16]
 800c19c:	bf08      	it	eq
 800c19e:	6143      	streq	r3, [r0, #20]
 800c1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1a4:	f8dc c000 	ldr.w	ip, [ip]
 800c1a8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c1ac:	ea4c 0707 	orr.w	r7, ip, r7
 800c1b0:	f849 7b04 	str.w	r7, [r9], #4
 800c1b4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1b8:	40cf      	lsrs	r7, r1
 800c1ba:	e7da      	b.n	800c172 <rshift+0x4c>
 800c1bc:	f851 cb04 	ldr.w	ip, [r1], #4
 800c1c0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c1c4:	e7c3      	b.n	800c14e <rshift+0x28>
 800c1c6:	4623      	mov	r3, r4
 800c1c8:	e7e1      	b.n	800c18e <rshift+0x68>

0800c1ca <__hexdig_fun>:
 800c1ca:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c1ce:	2b09      	cmp	r3, #9
 800c1d0:	d802      	bhi.n	800c1d8 <__hexdig_fun+0xe>
 800c1d2:	3820      	subs	r0, #32
 800c1d4:	b2c0      	uxtb	r0, r0
 800c1d6:	4770      	bx	lr
 800c1d8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c1dc:	2b05      	cmp	r3, #5
 800c1de:	d801      	bhi.n	800c1e4 <__hexdig_fun+0x1a>
 800c1e0:	3847      	subs	r0, #71	; 0x47
 800c1e2:	e7f7      	b.n	800c1d4 <__hexdig_fun+0xa>
 800c1e4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c1e8:	2b05      	cmp	r3, #5
 800c1ea:	d801      	bhi.n	800c1f0 <__hexdig_fun+0x26>
 800c1ec:	3827      	subs	r0, #39	; 0x27
 800c1ee:	e7f1      	b.n	800c1d4 <__hexdig_fun+0xa>
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	4770      	bx	lr

0800c1f4 <__gethex>:
 800c1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f8:	ed2d 8b02 	vpush	{d8}
 800c1fc:	b089      	sub	sp, #36	; 0x24
 800c1fe:	ee08 0a10 	vmov	s16, r0
 800c202:	9304      	str	r3, [sp, #16]
 800c204:	4bbc      	ldr	r3, [pc, #752]	; (800c4f8 <__gethex+0x304>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	9301      	str	r3, [sp, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	468b      	mov	fp, r1
 800c20e:	4690      	mov	r8, r2
 800c210:	f7f3 ffde 	bl	80001d0 <strlen>
 800c214:	9b01      	ldr	r3, [sp, #4]
 800c216:	f8db 2000 	ldr.w	r2, [fp]
 800c21a:	4403      	add	r3, r0
 800c21c:	4682      	mov	sl, r0
 800c21e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c222:	9305      	str	r3, [sp, #20]
 800c224:	1c93      	adds	r3, r2, #2
 800c226:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c22a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c22e:	32fe      	adds	r2, #254	; 0xfe
 800c230:	18d1      	adds	r1, r2, r3
 800c232:	461f      	mov	r7, r3
 800c234:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c238:	9100      	str	r1, [sp, #0]
 800c23a:	2830      	cmp	r0, #48	; 0x30
 800c23c:	d0f8      	beq.n	800c230 <__gethex+0x3c>
 800c23e:	f7ff ffc4 	bl	800c1ca <__hexdig_fun>
 800c242:	4604      	mov	r4, r0
 800c244:	2800      	cmp	r0, #0
 800c246:	d13a      	bne.n	800c2be <__gethex+0xca>
 800c248:	9901      	ldr	r1, [sp, #4]
 800c24a:	4652      	mov	r2, sl
 800c24c:	4638      	mov	r0, r7
 800c24e:	f001 fbe6 	bl	800da1e <strncmp>
 800c252:	4605      	mov	r5, r0
 800c254:	2800      	cmp	r0, #0
 800c256:	d168      	bne.n	800c32a <__gethex+0x136>
 800c258:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c25c:	eb07 060a 	add.w	r6, r7, sl
 800c260:	f7ff ffb3 	bl	800c1ca <__hexdig_fun>
 800c264:	2800      	cmp	r0, #0
 800c266:	d062      	beq.n	800c32e <__gethex+0x13a>
 800c268:	4633      	mov	r3, r6
 800c26a:	7818      	ldrb	r0, [r3, #0]
 800c26c:	2830      	cmp	r0, #48	; 0x30
 800c26e:	461f      	mov	r7, r3
 800c270:	f103 0301 	add.w	r3, r3, #1
 800c274:	d0f9      	beq.n	800c26a <__gethex+0x76>
 800c276:	f7ff ffa8 	bl	800c1ca <__hexdig_fun>
 800c27a:	2301      	movs	r3, #1
 800c27c:	fab0 f480 	clz	r4, r0
 800c280:	0964      	lsrs	r4, r4, #5
 800c282:	4635      	mov	r5, r6
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	463a      	mov	r2, r7
 800c288:	4616      	mov	r6, r2
 800c28a:	3201      	adds	r2, #1
 800c28c:	7830      	ldrb	r0, [r6, #0]
 800c28e:	f7ff ff9c 	bl	800c1ca <__hexdig_fun>
 800c292:	2800      	cmp	r0, #0
 800c294:	d1f8      	bne.n	800c288 <__gethex+0x94>
 800c296:	9901      	ldr	r1, [sp, #4]
 800c298:	4652      	mov	r2, sl
 800c29a:	4630      	mov	r0, r6
 800c29c:	f001 fbbf 	bl	800da1e <strncmp>
 800c2a0:	b980      	cbnz	r0, 800c2c4 <__gethex+0xd0>
 800c2a2:	b94d      	cbnz	r5, 800c2b8 <__gethex+0xc4>
 800c2a4:	eb06 050a 	add.w	r5, r6, sl
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	4616      	mov	r6, r2
 800c2ac:	3201      	adds	r2, #1
 800c2ae:	7830      	ldrb	r0, [r6, #0]
 800c2b0:	f7ff ff8b 	bl	800c1ca <__hexdig_fun>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d1f8      	bne.n	800c2aa <__gethex+0xb6>
 800c2b8:	1bad      	subs	r5, r5, r6
 800c2ba:	00ad      	lsls	r5, r5, #2
 800c2bc:	e004      	b.n	800c2c8 <__gethex+0xd4>
 800c2be:	2400      	movs	r4, #0
 800c2c0:	4625      	mov	r5, r4
 800c2c2:	e7e0      	b.n	800c286 <__gethex+0x92>
 800c2c4:	2d00      	cmp	r5, #0
 800c2c6:	d1f7      	bne.n	800c2b8 <__gethex+0xc4>
 800c2c8:	7833      	ldrb	r3, [r6, #0]
 800c2ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c2ce:	2b50      	cmp	r3, #80	; 0x50
 800c2d0:	d13b      	bne.n	800c34a <__gethex+0x156>
 800c2d2:	7873      	ldrb	r3, [r6, #1]
 800c2d4:	2b2b      	cmp	r3, #43	; 0x2b
 800c2d6:	d02c      	beq.n	800c332 <__gethex+0x13e>
 800c2d8:	2b2d      	cmp	r3, #45	; 0x2d
 800c2da:	d02e      	beq.n	800c33a <__gethex+0x146>
 800c2dc:	1c71      	adds	r1, r6, #1
 800c2de:	f04f 0900 	mov.w	r9, #0
 800c2e2:	7808      	ldrb	r0, [r1, #0]
 800c2e4:	f7ff ff71 	bl	800c1ca <__hexdig_fun>
 800c2e8:	1e43      	subs	r3, r0, #1
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	2b18      	cmp	r3, #24
 800c2ee:	d82c      	bhi.n	800c34a <__gethex+0x156>
 800c2f0:	f1a0 0210 	sub.w	r2, r0, #16
 800c2f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c2f8:	f7ff ff67 	bl	800c1ca <__hexdig_fun>
 800c2fc:	1e43      	subs	r3, r0, #1
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b18      	cmp	r3, #24
 800c302:	d91d      	bls.n	800c340 <__gethex+0x14c>
 800c304:	f1b9 0f00 	cmp.w	r9, #0
 800c308:	d000      	beq.n	800c30c <__gethex+0x118>
 800c30a:	4252      	negs	r2, r2
 800c30c:	4415      	add	r5, r2
 800c30e:	f8cb 1000 	str.w	r1, [fp]
 800c312:	b1e4      	cbz	r4, 800c34e <__gethex+0x15a>
 800c314:	9b00      	ldr	r3, [sp, #0]
 800c316:	2b00      	cmp	r3, #0
 800c318:	bf14      	ite	ne
 800c31a:	2700      	movne	r7, #0
 800c31c:	2706      	moveq	r7, #6
 800c31e:	4638      	mov	r0, r7
 800c320:	b009      	add	sp, #36	; 0x24
 800c322:	ecbd 8b02 	vpop	{d8}
 800c326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c32a:	463e      	mov	r6, r7
 800c32c:	4625      	mov	r5, r4
 800c32e:	2401      	movs	r4, #1
 800c330:	e7ca      	b.n	800c2c8 <__gethex+0xd4>
 800c332:	f04f 0900 	mov.w	r9, #0
 800c336:	1cb1      	adds	r1, r6, #2
 800c338:	e7d3      	b.n	800c2e2 <__gethex+0xee>
 800c33a:	f04f 0901 	mov.w	r9, #1
 800c33e:	e7fa      	b.n	800c336 <__gethex+0x142>
 800c340:	230a      	movs	r3, #10
 800c342:	fb03 0202 	mla	r2, r3, r2, r0
 800c346:	3a10      	subs	r2, #16
 800c348:	e7d4      	b.n	800c2f4 <__gethex+0x100>
 800c34a:	4631      	mov	r1, r6
 800c34c:	e7df      	b.n	800c30e <__gethex+0x11a>
 800c34e:	1bf3      	subs	r3, r6, r7
 800c350:	3b01      	subs	r3, #1
 800c352:	4621      	mov	r1, r4
 800c354:	2b07      	cmp	r3, #7
 800c356:	dc0b      	bgt.n	800c370 <__gethex+0x17c>
 800c358:	ee18 0a10 	vmov	r0, s16
 800c35c:	f000 fad8 	bl	800c910 <_Balloc>
 800c360:	4604      	mov	r4, r0
 800c362:	b940      	cbnz	r0, 800c376 <__gethex+0x182>
 800c364:	4b65      	ldr	r3, [pc, #404]	; (800c4fc <__gethex+0x308>)
 800c366:	4602      	mov	r2, r0
 800c368:	21de      	movs	r1, #222	; 0xde
 800c36a:	4865      	ldr	r0, [pc, #404]	; (800c500 <__gethex+0x30c>)
 800c36c:	f001 fb88 	bl	800da80 <__assert_func>
 800c370:	3101      	adds	r1, #1
 800c372:	105b      	asrs	r3, r3, #1
 800c374:	e7ee      	b.n	800c354 <__gethex+0x160>
 800c376:	f100 0914 	add.w	r9, r0, #20
 800c37a:	f04f 0b00 	mov.w	fp, #0
 800c37e:	f1ca 0301 	rsb	r3, sl, #1
 800c382:	f8cd 9008 	str.w	r9, [sp, #8]
 800c386:	f8cd b000 	str.w	fp, [sp]
 800c38a:	9306      	str	r3, [sp, #24]
 800c38c:	42b7      	cmp	r7, r6
 800c38e:	d340      	bcc.n	800c412 <__gethex+0x21e>
 800c390:	9802      	ldr	r0, [sp, #8]
 800c392:	9b00      	ldr	r3, [sp, #0]
 800c394:	f840 3b04 	str.w	r3, [r0], #4
 800c398:	eba0 0009 	sub.w	r0, r0, r9
 800c39c:	1080      	asrs	r0, r0, #2
 800c39e:	0146      	lsls	r6, r0, #5
 800c3a0:	6120      	str	r0, [r4, #16]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 fbaa 	bl	800cafc <__hi0bits>
 800c3a8:	1a30      	subs	r0, r6, r0
 800c3aa:	f8d8 6000 	ldr.w	r6, [r8]
 800c3ae:	42b0      	cmp	r0, r6
 800c3b0:	dd63      	ble.n	800c47a <__gethex+0x286>
 800c3b2:	1b87      	subs	r7, r0, r6
 800c3b4:	4639      	mov	r1, r7
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f000 ff44 	bl	800d244 <__any_on>
 800c3bc:	4682      	mov	sl, r0
 800c3be:	b1a8      	cbz	r0, 800c3ec <__gethex+0x1f8>
 800c3c0:	1e7b      	subs	r3, r7, #1
 800c3c2:	1159      	asrs	r1, r3, #5
 800c3c4:	f003 021f 	and.w	r2, r3, #31
 800c3c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c3cc:	f04f 0a01 	mov.w	sl, #1
 800c3d0:	fa0a f202 	lsl.w	r2, sl, r2
 800c3d4:	420a      	tst	r2, r1
 800c3d6:	d009      	beq.n	800c3ec <__gethex+0x1f8>
 800c3d8:	4553      	cmp	r3, sl
 800c3da:	dd05      	ble.n	800c3e8 <__gethex+0x1f4>
 800c3dc:	1eb9      	subs	r1, r7, #2
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f000 ff30 	bl	800d244 <__any_on>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d145      	bne.n	800c474 <__gethex+0x280>
 800c3e8:	f04f 0a02 	mov.w	sl, #2
 800c3ec:	4639      	mov	r1, r7
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f7ff fe99 	bl	800c126 <rshift>
 800c3f4:	443d      	add	r5, r7
 800c3f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c3fa:	42ab      	cmp	r3, r5
 800c3fc:	da4c      	bge.n	800c498 <__gethex+0x2a4>
 800c3fe:	ee18 0a10 	vmov	r0, s16
 800c402:	4621      	mov	r1, r4
 800c404:	f000 fac4 	bl	800c990 <_Bfree>
 800c408:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c40a:	2300      	movs	r3, #0
 800c40c:	6013      	str	r3, [r2, #0]
 800c40e:	27a3      	movs	r7, #163	; 0xa3
 800c410:	e785      	b.n	800c31e <__gethex+0x12a>
 800c412:	1e73      	subs	r3, r6, #1
 800c414:	9a05      	ldr	r2, [sp, #20]
 800c416:	9303      	str	r3, [sp, #12]
 800c418:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d019      	beq.n	800c454 <__gethex+0x260>
 800c420:	f1bb 0f20 	cmp.w	fp, #32
 800c424:	d107      	bne.n	800c436 <__gethex+0x242>
 800c426:	9b02      	ldr	r3, [sp, #8]
 800c428:	9a00      	ldr	r2, [sp, #0]
 800c42a:	f843 2b04 	str.w	r2, [r3], #4
 800c42e:	9302      	str	r3, [sp, #8]
 800c430:	2300      	movs	r3, #0
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	469b      	mov	fp, r3
 800c436:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c43a:	f7ff fec6 	bl	800c1ca <__hexdig_fun>
 800c43e:	9b00      	ldr	r3, [sp, #0]
 800c440:	f000 000f 	and.w	r0, r0, #15
 800c444:	fa00 f00b 	lsl.w	r0, r0, fp
 800c448:	4303      	orrs	r3, r0
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	f10b 0b04 	add.w	fp, fp, #4
 800c450:	9b03      	ldr	r3, [sp, #12]
 800c452:	e00d      	b.n	800c470 <__gethex+0x27c>
 800c454:	9b03      	ldr	r3, [sp, #12]
 800c456:	9a06      	ldr	r2, [sp, #24]
 800c458:	4413      	add	r3, r2
 800c45a:	42bb      	cmp	r3, r7
 800c45c:	d3e0      	bcc.n	800c420 <__gethex+0x22c>
 800c45e:	4618      	mov	r0, r3
 800c460:	9901      	ldr	r1, [sp, #4]
 800c462:	9307      	str	r3, [sp, #28]
 800c464:	4652      	mov	r2, sl
 800c466:	f001 fada 	bl	800da1e <strncmp>
 800c46a:	9b07      	ldr	r3, [sp, #28]
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d1d7      	bne.n	800c420 <__gethex+0x22c>
 800c470:	461e      	mov	r6, r3
 800c472:	e78b      	b.n	800c38c <__gethex+0x198>
 800c474:	f04f 0a03 	mov.w	sl, #3
 800c478:	e7b8      	b.n	800c3ec <__gethex+0x1f8>
 800c47a:	da0a      	bge.n	800c492 <__gethex+0x29e>
 800c47c:	1a37      	subs	r7, r6, r0
 800c47e:	4621      	mov	r1, r4
 800c480:	ee18 0a10 	vmov	r0, s16
 800c484:	463a      	mov	r2, r7
 800c486:	f000 fc9f 	bl	800cdc8 <__lshift>
 800c48a:	1bed      	subs	r5, r5, r7
 800c48c:	4604      	mov	r4, r0
 800c48e:	f100 0914 	add.w	r9, r0, #20
 800c492:	f04f 0a00 	mov.w	sl, #0
 800c496:	e7ae      	b.n	800c3f6 <__gethex+0x202>
 800c498:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c49c:	42a8      	cmp	r0, r5
 800c49e:	dd72      	ble.n	800c586 <__gethex+0x392>
 800c4a0:	1b45      	subs	r5, r0, r5
 800c4a2:	42ae      	cmp	r6, r5
 800c4a4:	dc36      	bgt.n	800c514 <__gethex+0x320>
 800c4a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	d02a      	beq.n	800c504 <__gethex+0x310>
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d02c      	beq.n	800c50c <__gethex+0x318>
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d115      	bne.n	800c4e2 <__gethex+0x2ee>
 800c4b6:	42ae      	cmp	r6, r5
 800c4b8:	d113      	bne.n	800c4e2 <__gethex+0x2ee>
 800c4ba:	2e01      	cmp	r6, #1
 800c4bc:	d10b      	bne.n	800c4d6 <__gethex+0x2e2>
 800c4be:	9a04      	ldr	r2, [sp, #16]
 800c4c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c4c4:	6013      	str	r3, [r2, #0]
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	6123      	str	r3, [r4, #16]
 800c4ca:	f8c9 3000 	str.w	r3, [r9]
 800c4ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4d0:	2762      	movs	r7, #98	; 0x62
 800c4d2:	601c      	str	r4, [r3, #0]
 800c4d4:	e723      	b.n	800c31e <__gethex+0x12a>
 800c4d6:	1e71      	subs	r1, r6, #1
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f000 feb3 	bl	800d244 <__any_on>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d1ed      	bne.n	800c4be <__gethex+0x2ca>
 800c4e2:	ee18 0a10 	vmov	r0, s16
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	f000 fa52 	bl	800c990 <_Bfree>
 800c4ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	6013      	str	r3, [r2, #0]
 800c4f2:	2750      	movs	r7, #80	; 0x50
 800c4f4:	e713      	b.n	800c31e <__gethex+0x12a>
 800c4f6:	bf00      	nop
 800c4f8:	0800e84c 	.word	0x0800e84c
 800c4fc:	0800e76c 	.word	0x0800e76c
 800c500:	0800e7e0 	.word	0x0800e7e0
 800c504:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1eb      	bne.n	800c4e2 <__gethex+0x2ee>
 800c50a:	e7d8      	b.n	800c4be <__gethex+0x2ca>
 800c50c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1d5      	bne.n	800c4be <__gethex+0x2ca>
 800c512:	e7e6      	b.n	800c4e2 <__gethex+0x2ee>
 800c514:	1e6f      	subs	r7, r5, #1
 800c516:	f1ba 0f00 	cmp.w	sl, #0
 800c51a:	d131      	bne.n	800c580 <__gethex+0x38c>
 800c51c:	b127      	cbz	r7, 800c528 <__gethex+0x334>
 800c51e:	4639      	mov	r1, r7
 800c520:	4620      	mov	r0, r4
 800c522:	f000 fe8f 	bl	800d244 <__any_on>
 800c526:	4682      	mov	sl, r0
 800c528:	117b      	asrs	r3, r7, #5
 800c52a:	2101      	movs	r1, #1
 800c52c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c530:	f007 071f 	and.w	r7, r7, #31
 800c534:	fa01 f707 	lsl.w	r7, r1, r7
 800c538:	421f      	tst	r7, r3
 800c53a:	4629      	mov	r1, r5
 800c53c:	4620      	mov	r0, r4
 800c53e:	bf18      	it	ne
 800c540:	f04a 0a02 	orrne.w	sl, sl, #2
 800c544:	1b76      	subs	r6, r6, r5
 800c546:	f7ff fdee 	bl	800c126 <rshift>
 800c54a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c54e:	2702      	movs	r7, #2
 800c550:	f1ba 0f00 	cmp.w	sl, #0
 800c554:	d048      	beq.n	800c5e8 <__gethex+0x3f4>
 800c556:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d015      	beq.n	800c58a <__gethex+0x396>
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d017      	beq.n	800c592 <__gethex+0x39e>
 800c562:	2b01      	cmp	r3, #1
 800c564:	d109      	bne.n	800c57a <__gethex+0x386>
 800c566:	f01a 0f02 	tst.w	sl, #2
 800c56a:	d006      	beq.n	800c57a <__gethex+0x386>
 800c56c:	f8d9 0000 	ldr.w	r0, [r9]
 800c570:	ea4a 0a00 	orr.w	sl, sl, r0
 800c574:	f01a 0f01 	tst.w	sl, #1
 800c578:	d10e      	bne.n	800c598 <__gethex+0x3a4>
 800c57a:	f047 0710 	orr.w	r7, r7, #16
 800c57e:	e033      	b.n	800c5e8 <__gethex+0x3f4>
 800c580:	f04f 0a01 	mov.w	sl, #1
 800c584:	e7d0      	b.n	800c528 <__gethex+0x334>
 800c586:	2701      	movs	r7, #1
 800c588:	e7e2      	b.n	800c550 <__gethex+0x35c>
 800c58a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c58c:	f1c3 0301 	rsb	r3, r3, #1
 800c590:	9315      	str	r3, [sp, #84]	; 0x54
 800c592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c594:	2b00      	cmp	r3, #0
 800c596:	d0f0      	beq.n	800c57a <__gethex+0x386>
 800c598:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c59c:	f104 0314 	add.w	r3, r4, #20
 800c5a0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c5a4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c5a8:	f04f 0c00 	mov.w	ip, #0
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c5b6:	d01c      	beq.n	800c5f2 <__gethex+0x3fe>
 800c5b8:	3201      	adds	r2, #1
 800c5ba:	6002      	str	r2, [r0, #0]
 800c5bc:	2f02      	cmp	r7, #2
 800c5be:	f104 0314 	add.w	r3, r4, #20
 800c5c2:	d13f      	bne.n	800c644 <__gethex+0x450>
 800c5c4:	f8d8 2000 	ldr.w	r2, [r8]
 800c5c8:	3a01      	subs	r2, #1
 800c5ca:	42b2      	cmp	r2, r6
 800c5cc:	d10a      	bne.n	800c5e4 <__gethex+0x3f0>
 800c5ce:	1171      	asrs	r1, r6, #5
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c5d6:	f006 061f 	and.w	r6, r6, #31
 800c5da:	fa02 f606 	lsl.w	r6, r2, r6
 800c5de:	421e      	tst	r6, r3
 800c5e0:	bf18      	it	ne
 800c5e2:	4617      	movne	r7, r2
 800c5e4:	f047 0720 	orr.w	r7, r7, #32
 800c5e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5ea:	601c      	str	r4, [r3, #0]
 800c5ec:	9b04      	ldr	r3, [sp, #16]
 800c5ee:	601d      	str	r5, [r3, #0]
 800c5f0:	e695      	b.n	800c31e <__gethex+0x12a>
 800c5f2:	4299      	cmp	r1, r3
 800c5f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c5f8:	d8d8      	bhi.n	800c5ac <__gethex+0x3b8>
 800c5fa:	68a3      	ldr	r3, [r4, #8]
 800c5fc:	459b      	cmp	fp, r3
 800c5fe:	db19      	blt.n	800c634 <__gethex+0x440>
 800c600:	6861      	ldr	r1, [r4, #4]
 800c602:	ee18 0a10 	vmov	r0, s16
 800c606:	3101      	adds	r1, #1
 800c608:	f000 f982 	bl	800c910 <_Balloc>
 800c60c:	4681      	mov	r9, r0
 800c60e:	b918      	cbnz	r0, 800c618 <__gethex+0x424>
 800c610:	4b1a      	ldr	r3, [pc, #104]	; (800c67c <__gethex+0x488>)
 800c612:	4602      	mov	r2, r0
 800c614:	2184      	movs	r1, #132	; 0x84
 800c616:	e6a8      	b.n	800c36a <__gethex+0x176>
 800c618:	6922      	ldr	r2, [r4, #16]
 800c61a:	3202      	adds	r2, #2
 800c61c:	f104 010c 	add.w	r1, r4, #12
 800c620:	0092      	lsls	r2, r2, #2
 800c622:	300c      	adds	r0, #12
 800c624:	f7fc fe98 	bl	8009358 <memcpy>
 800c628:	4621      	mov	r1, r4
 800c62a:	ee18 0a10 	vmov	r0, s16
 800c62e:	f000 f9af 	bl	800c990 <_Bfree>
 800c632:	464c      	mov	r4, r9
 800c634:	6923      	ldr	r3, [r4, #16]
 800c636:	1c5a      	adds	r2, r3, #1
 800c638:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c63c:	6122      	str	r2, [r4, #16]
 800c63e:	2201      	movs	r2, #1
 800c640:	615a      	str	r2, [r3, #20]
 800c642:	e7bb      	b.n	800c5bc <__gethex+0x3c8>
 800c644:	6922      	ldr	r2, [r4, #16]
 800c646:	455a      	cmp	r2, fp
 800c648:	dd0b      	ble.n	800c662 <__gethex+0x46e>
 800c64a:	2101      	movs	r1, #1
 800c64c:	4620      	mov	r0, r4
 800c64e:	f7ff fd6a 	bl	800c126 <rshift>
 800c652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c656:	3501      	adds	r5, #1
 800c658:	42ab      	cmp	r3, r5
 800c65a:	f6ff aed0 	blt.w	800c3fe <__gethex+0x20a>
 800c65e:	2701      	movs	r7, #1
 800c660:	e7c0      	b.n	800c5e4 <__gethex+0x3f0>
 800c662:	f016 061f 	ands.w	r6, r6, #31
 800c666:	d0fa      	beq.n	800c65e <__gethex+0x46a>
 800c668:	449a      	add	sl, r3
 800c66a:	f1c6 0620 	rsb	r6, r6, #32
 800c66e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c672:	f000 fa43 	bl	800cafc <__hi0bits>
 800c676:	42b0      	cmp	r0, r6
 800c678:	dbe7      	blt.n	800c64a <__gethex+0x456>
 800c67a:	e7f0      	b.n	800c65e <__gethex+0x46a>
 800c67c:	0800e76c 	.word	0x0800e76c

0800c680 <L_shift>:
 800c680:	f1c2 0208 	rsb	r2, r2, #8
 800c684:	0092      	lsls	r2, r2, #2
 800c686:	b570      	push	{r4, r5, r6, lr}
 800c688:	f1c2 0620 	rsb	r6, r2, #32
 800c68c:	6843      	ldr	r3, [r0, #4]
 800c68e:	6804      	ldr	r4, [r0, #0]
 800c690:	fa03 f506 	lsl.w	r5, r3, r6
 800c694:	432c      	orrs	r4, r5
 800c696:	40d3      	lsrs	r3, r2
 800c698:	6004      	str	r4, [r0, #0]
 800c69a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c69e:	4288      	cmp	r0, r1
 800c6a0:	d3f4      	bcc.n	800c68c <L_shift+0xc>
 800c6a2:	bd70      	pop	{r4, r5, r6, pc}

0800c6a4 <__match>:
 800c6a4:	b530      	push	{r4, r5, lr}
 800c6a6:	6803      	ldr	r3, [r0, #0]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6ae:	b914      	cbnz	r4, 800c6b6 <__match+0x12>
 800c6b0:	6003      	str	r3, [r0, #0]
 800c6b2:	2001      	movs	r0, #1
 800c6b4:	bd30      	pop	{r4, r5, pc}
 800c6b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6ba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c6be:	2d19      	cmp	r5, #25
 800c6c0:	bf98      	it	ls
 800c6c2:	3220      	addls	r2, #32
 800c6c4:	42a2      	cmp	r2, r4
 800c6c6:	d0f0      	beq.n	800c6aa <__match+0x6>
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	e7f3      	b.n	800c6b4 <__match+0x10>

0800c6cc <__hexnan>:
 800c6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d0:	680b      	ldr	r3, [r1, #0]
 800c6d2:	6801      	ldr	r1, [r0, #0]
 800c6d4:	115e      	asrs	r6, r3, #5
 800c6d6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c6da:	f013 031f 	ands.w	r3, r3, #31
 800c6de:	b087      	sub	sp, #28
 800c6e0:	bf18      	it	ne
 800c6e2:	3604      	addne	r6, #4
 800c6e4:	2500      	movs	r5, #0
 800c6e6:	1f37      	subs	r7, r6, #4
 800c6e8:	4682      	mov	sl, r0
 800c6ea:	4690      	mov	r8, r2
 800c6ec:	9301      	str	r3, [sp, #4]
 800c6ee:	f846 5c04 	str.w	r5, [r6, #-4]
 800c6f2:	46b9      	mov	r9, r7
 800c6f4:	463c      	mov	r4, r7
 800c6f6:	9502      	str	r5, [sp, #8]
 800c6f8:	46ab      	mov	fp, r5
 800c6fa:	784a      	ldrb	r2, [r1, #1]
 800c6fc:	1c4b      	adds	r3, r1, #1
 800c6fe:	9303      	str	r3, [sp, #12]
 800c700:	b342      	cbz	r2, 800c754 <__hexnan+0x88>
 800c702:	4610      	mov	r0, r2
 800c704:	9105      	str	r1, [sp, #20]
 800c706:	9204      	str	r2, [sp, #16]
 800c708:	f7ff fd5f 	bl	800c1ca <__hexdig_fun>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	d14f      	bne.n	800c7b0 <__hexnan+0xe4>
 800c710:	9a04      	ldr	r2, [sp, #16]
 800c712:	9905      	ldr	r1, [sp, #20]
 800c714:	2a20      	cmp	r2, #32
 800c716:	d818      	bhi.n	800c74a <__hexnan+0x7e>
 800c718:	9b02      	ldr	r3, [sp, #8]
 800c71a:	459b      	cmp	fp, r3
 800c71c:	dd13      	ble.n	800c746 <__hexnan+0x7a>
 800c71e:	454c      	cmp	r4, r9
 800c720:	d206      	bcs.n	800c730 <__hexnan+0x64>
 800c722:	2d07      	cmp	r5, #7
 800c724:	dc04      	bgt.n	800c730 <__hexnan+0x64>
 800c726:	462a      	mov	r2, r5
 800c728:	4649      	mov	r1, r9
 800c72a:	4620      	mov	r0, r4
 800c72c:	f7ff ffa8 	bl	800c680 <L_shift>
 800c730:	4544      	cmp	r4, r8
 800c732:	d950      	bls.n	800c7d6 <__hexnan+0x10a>
 800c734:	2300      	movs	r3, #0
 800c736:	f1a4 0904 	sub.w	r9, r4, #4
 800c73a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c73e:	f8cd b008 	str.w	fp, [sp, #8]
 800c742:	464c      	mov	r4, r9
 800c744:	461d      	mov	r5, r3
 800c746:	9903      	ldr	r1, [sp, #12]
 800c748:	e7d7      	b.n	800c6fa <__hexnan+0x2e>
 800c74a:	2a29      	cmp	r2, #41	; 0x29
 800c74c:	d156      	bne.n	800c7fc <__hexnan+0x130>
 800c74e:	3102      	adds	r1, #2
 800c750:	f8ca 1000 	str.w	r1, [sl]
 800c754:	f1bb 0f00 	cmp.w	fp, #0
 800c758:	d050      	beq.n	800c7fc <__hexnan+0x130>
 800c75a:	454c      	cmp	r4, r9
 800c75c:	d206      	bcs.n	800c76c <__hexnan+0xa0>
 800c75e:	2d07      	cmp	r5, #7
 800c760:	dc04      	bgt.n	800c76c <__hexnan+0xa0>
 800c762:	462a      	mov	r2, r5
 800c764:	4649      	mov	r1, r9
 800c766:	4620      	mov	r0, r4
 800c768:	f7ff ff8a 	bl	800c680 <L_shift>
 800c76c:	4544      	cmp	r4, r8
 800c76e:	d934      	bls.n	800c7da <__hexnan+0x10e>
 800c770:	f1a8 0204 	sub.w	r2, r8, #4
 800c774:	4623      	mov	r3, r4
 800c776:	f853 1b04 	ldr.w	r1, [r3], #4
 800c77a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c77e:	429f      	cmp	r7, r3
 800c780:	d2f9      	bcs.n	800c776 <__hexnan+0xaa>
 800c782:	1b3b      	subs	r3, r7, r4
 800c784:	f023 0303 	bic.w	r3, r3, #3
 800c788:	3304      	adds	r3, #4
 800c78a:	3401      	adds	r4, #1
 800c78c:	3e03      	subs	r6, #3
 800c78e:	42b4      	cmp	r4, r6
 800c790:	bf88      	it	hi
 800c792:	2304      	movhi	r3, #4
 800c794:	4443      	add	r3, r8
 800c796:	2200      	movs	r2, #0
 800c798:	f843 2b04 	str.w	r2, [r3], #4
 800c79c:	429f      	cmp	r7, r3
 800c79e:	d2fb      	bcs.n	800c798 <__hexnan+0xcc>
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	b91b      	cbnz	r3, 800c7ac <__hexnan+0xe0>
 800c7a4:	4547      	cmp	r7, r8
 800c7a6:	d127      	bne.n	800c7f8 <__hexnan+0x12c>
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	603b      	str	r3, [r7, #0]
 800c7ac:	2005      	movs	r0, #5
 800c7ae:	e026      	b.n	800c7fe <__hexnan+0x132>
 800c7b0:	3501      	adds	r5, #1
 800c7b2:	2d08      	cmp	r5, #8
 800c7b4:	f10b 0b01 	add.w	fp, fp, #1
 800c7b8:	dd06      	ble.n	800c7c8 <__hexnan+0xfc>
 800c7ba:	4544      	cmp	r4, r8
 800c7bc:	d9c3      	bls.n	800c746 <__hexnan+0x7a>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7c4:	2501      	movs	r5, #1
 800c7c6:	3c04      	subs	r4, #4
 800c7c8:	6822      	ldr	r2, [r4, #0]
 800c7ca:	f000 000f 	and.w	r0, r0, #15
 800c7ce:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c7d2:	6022      	str	r2, [r4, #0]
 800c7d4:	e7b7      	b.n	800c746 <__hexnan+0x7a>
 800c7d6:	2508      	movs	r5, #8
 800c7d8:	e7b5      	b.n	800c746 <__hexnan+0x7a>
 800c7da:	9b01      	ldr	r3, [sp, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d0df      	beq.n	800c7a0 <__hexnan+0xd4>
 800c7e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e4:	f1c3 0320 	rsb	r3, r3, #32
 800c7e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c7ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7f0:	401a      	ands	r2, r3
 800c7f2:	f846 2c04 	str.w	r2, [r6, #-4]
 800c7f6:	e7d3      	b.n	800c7a0 <__hexnan+0xd4>
 800c7f8:	3f04      	subs	r7, #4
 800c7fa:	e7d1      	b.n	800c7a0 <__hexnan+0xd4>
 800c7fc:	2004      	movs	r0, #4
 800c7fe:	b007      	add	sp, #28
 800c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c804 <_localeconv_r>:
 800c804:	4800      	ldr	r0, [pc, #0]	; (800c808 <_localeconv_r+0x4>)
 800c806:	4770      	bx	lr
 800c808:	20000164 	.word	0x20000164

0800c80c <__retarget_lock_init_recursive>:
 800c80c:	4770      	bx	lr

0800c80e <__retarget_lock_acquire_recursive>:
 800c80e:	4770      	bx	lr

0800c810 <__retarget_lock_release_recursive>:
 800c810:	4770      	bx	lr

0800c812 <__swhatbuf_r>:
 800c812:	b570      	push	{r4, r5, r6, lr}
 800c814:	460e      	mov	r6, r1
 800c816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c81a:	2900      	cmp	r1, #0
 800c81c:	b096      	sub	sp, #88	; 0x58
 800c81e:	4614      	mov	r4, r2
 800c820:	461d      	mov	r5, r3
 800c822:	da07      	bge.n	800c834 <__swhatbuf_r+0x22>
 800c824:	2300      	movs	r3, #0
 800c826:	602b      	str	r3, [r5, #0]
 800c828:	89b3      	ldrh	r3, [r6, #12]
 800c82a:	061a      	lsls	r2, r3, #24
 800c82c:	d410      	bmi.n	800c850 <__swhatbuf_r+0x3e>
 800c82e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c832:	e00e      	b.n	800c852 <__swhatbuf_r+0x40>
 800c834:	466a      	mov	r2, sp
 800c836:	f001 f963 	bl	800db00 <_fstat_r>
 800c83a:	2800      	cmp	r0, #0
 800c83c:	dbf2      	blt.n	800c824 <__swhatbuf_r+0x12>
 800c83e:	9a01      	ldr	r2, [sp, #4]
 800c840:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c844:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c848:	425a      	negs	r2, r3
 800c84a:	415a      	adcs	r2, r3
 800c84c:	602a      	str	r2, [r5, #0]
 800c84e:	e7ee      	b.n	800c82e <__swhatbuf_r+0x1c>
 800c850:	2340      	movs	r3, #64	; 0x40
 800c852:	2000      	movs	r0, #0
 800c854:	6023      	str	r3, [r4, #0]
 800c856:	b016      	add	sp, #88	; 0x58
 800c858:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c85c <__smakebuf_r>:
 800c85c:	898b      	ldrh	r3, [r1, #12]
 800c85e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c860:	079d      	lsls	r5, r3, #30
 800c862:	4606      	mov	r6, r0
 800c864:	460c      	mov	r4, r1
 800c866:	d507      	bpl.n	800c878 <__smakebuf_r+0x1c>
 800c868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c86c:	6023      	str	r3, [r4, #0]
 800c86e:	6123      	str	r3, [r4, #16]
 800c870:	2301      	movs	r3, #1
 800c872:	6163      	str	r3, [r4, #20]
 800c874:	b002      	add	sp, #8
 800c876:	bd70      	pop	{r4, r5, r6, pc}
 800c878:	ab01      	add	r3, sp, #4
 800c87a:	466a      	mov	r2, sp
 800c87c:	f7ff ffc9 	bl	800c812 <__swhatbuf_r>
 800c880:	9900      	ldr	r1, [sp, #0]
 800c882:	4605      	mov	r5, r0
 800c884:	4630      	mov	r0, r6
 800c886:	f000 fd5d 	bl	800d344 <_malloc_r>
 800c88a:	b948      	cbnz	r0, 800c8a0 <__smakebuf_r+0x44>
 800c88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c890:	059a      	lsls	r2, r3, #22
 800c892:	d4ef      	bmi.n	800c874 <__smakebuf_r+0x18>
 800c894:	f023 0303 	bic.w	r3, r3, #3
 800c898:	f043 0302 	orr.w	r3, r3, #2
 800c89c:	81a3      	strh	r3, [r4, #12]
 800c89e:	e7e3      	b.n	800c868 <__smakebuf_r+0xc>
 800c8a0:	4b0d      	ldr	r3, [pc, #52]	; (800c8d8 <__smakebuf_r+0x7c>)
 800c8a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c8a4:	89a3      	ldrh	r3, [r4, #12]
 800c8a6:	6020      	str	r0, [r4, #0]
 800c8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8ac:	81a3      	strh	r3, [r4, #12]
 800c8ae:	9b00      	ldr	r3, [sp, #0]
 800c8b0:	6163      	str	r3, [r4, #20]
 800c8b2:	9b01      	ldr	r3, [sp, #4]
 800c8b4:	6120      	str	r0, [r4, #16]
 800c8b6:	b15b      	cbz	r3, 800c8d0 <__smakebuf_r+0x74>
 800c8b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f001 f931 	bl	800db24 <_isatty_r>
 800c8c2:	b128      	cbz	r0, 800c8d0 <__smakebuf_r+0x74>
 800c8c4:	89a3      	ldrh	r3, [r4, #12]
 800c8c6:	f023 0303 	bic.w	r3, r3, #3
 800c8ca:	f043 0301 	orr.w	r3, r3, #1
 800c8ce:	81a3      	strh	r3, [r4, #12]
 800c8d0:	89a0      	ldrh	r0, [r4, #12]
 800c8d2:	4305      	orrs	r5, r0
 800c8d4:	81a5      	strh	r5, [r4, #12]
 800c8d6:	e7cd      	b.n	800c874 <__smakebuf_r+0x18>
 800c8d8:	0800bf85 	.word	0x0800bf85

0800c8dc <malloc>:
 800c8dc:	4b02      	ldr	r3, [pc, #8]	; (800c8e8 <malloc+0xc>)
 800c8de:	4601      	mov	r1, r0
 800c8e0:	6818      	ldr	r0, [r3, #0]
 800c8e2:	f000 bd2f 	b.w	800d344 <_malloc_r>
 800c8e6:	bf00      	nop
 800c8e8:	2000000c 	.word	0x2000000c

0800c8ec <__ascii_mbtowc>:
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	b901      	cbnz	r1, 800c8f2 <__ascii_mbtowc+0x6>
 800c8f0:	a901      	add	r1, sp, #4
 800c8f2:	b142      	cbz	r2, 800c906 <__ascii_mbtowc+0x1a>
 800c8f4:	b14b      	cbz	r3, 800c90a <__ascii_mbtowc+0x1e>
 800c8f6:	7813      	ldrb	r3, [r2, #0]
 800c8f8:	600b      	str	r3, [r1, #0]
 800c8fa:	7812      	ldrb	r2, [r2, #0]
 800c8fc:	1e10      	subs	r0, r2, #0
 800c8fe:	bf18      	it	ne
 800c900:	2001      	movne	r0, #1
 800c902:	b002      	add	sp, #8
 800c904:	4770      	bx	lr
 800c906:	4610      	mov	r0, r2
 800c908:	e7fb      	b.n	800c902 <__ascii_mbtowc+0x16>
 800c90a:	f06f 0001 	mvn.w	r0, #1
 800c90e:	e7f8      	b.n	800c902 <__ascii_mbtowc+0x16>

0800c910 <_Balloc>:
 800c910:	b570      	push	{r4, r5, r6, lr}
 800c912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c914:	4604      	mov	r4, r0
 800c916:	460d      	mov	r5, r1
 800c918:	b976      	cbnz	r6, 800c938 <_Balloc+0x28>
 800c91a:	2010      	movs	r0, #16
 800c91c:	f7ff ffde 	bl	800c8dc <malloc>
 800c920:	4602      	mov	r2, r0
 800c922:	6260      	str	r0, [r4, #36]	; 0x24
 800c924:	b920      	cbnz	r0, 800c930 <_Balloc+0x20>
 800c926:	4b18      	ldr	r3, [pc, #96]	; (800c988 <_Balloc+0x78>)
 800c928:	4818      	ldr	r0, [pc, #96]	; (800c98c <_Balloc+0x7c>)
 800c92a:	2166      	movs	r1, #102	; 0x66
 800c92c:	f001 f8a8 	bl	800da80 <__assert_func>
 800c930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c934:	6006      	str	r6, [r0, #0]
 800c936:	60c6      	str	r6, [r0, #12]
 800c938:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c93a:	68f3      	ldr	r3, [r6, #12]
 800c93c:	b183      	cbz	r3, 800c960 <_Balloc+0x50>
 800c93e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c946:	b9b8      	cbnz	r0, 800c978 <_Balloc+0x68>
 800c948:	2101      	movs	r1, #1
 800c94a:	fa01 f605 	lsl.w	r6, r1, r5
 800c94e:	1d72      	adds	r2, r6, #5
 800c950:	0092      	lsls	r2, r2, #2
 800c952:	4620      	mov	r0, r4
 800c954:	f000 fc97 	bl	800d286 <_calloc_r>
 800c958:	b160      	cbz	r0, 800c974 <_Balloc+0x64>
 800c95a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c95e:	e00e      	b.n	800c97e <_Balloc+0x6e>
 800c960:	2221      	movs	r2, #33	; 0x21
 800c962:	2104      	movs	r1, #4
 800c964:	4620      	mov	r0, r4
 800c966:	f000 fc8e 	bl	800d286 <_calloc_r>
 800c96a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c96c:	60f0      	str	r0, [r6, #12]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1e4      	bne.n	800c93e <_Balloc+0x2e>
 800c974:	2000      	movs	r0, #0
 800c976:	bd70      	pop	{r4, r5, r6, pc}
 800c978:	6802      	ldr	r2, [r0, #0]
 800c97a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c97e:	2300      	movs	r3, #0
 800c980:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c984:	e7f7      	b.n	800c976 <_Balloc+0x66>
 800c986:	bf00      	nop
 800c988:	0800e6f6 	.word	0x0800e6f6
 800c98c:	0800e860 	.word	0x0800e860

0800c990 <_Bfree>:
 800c990:	b570      	push	{r4, r5, r6, lr}
 800c992:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c994:	4605      	mov	r5, r0
 800c996:	460c      	mov	r4, r1
 800c998:	b976      	cbnz	r6, 800c9b8 <_Bfree+0x28>
 800c99a:	2010      	movs	r0, #16
 800c99c:	f7ff ff9e 	bl	800c8dc <malloc>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	6268      	str	r0, [r5, #36]	; 0x24
 800c9a4:	b920      	cbnz	r0, 800c9b0 <_Bfree+0x20>
 800c9a6:	4b09      	ldr	r3, [pc, #36]	; (800c9cc <_Bfree+0x3c>)
 800c9a8:	4809      	ldr	r0, [pc, #36]	; (800c9d0 <_Bfree+0x40>)
 800c9aa:	218a      	movs	r1, #138	; 0x8a
 800c9ac:	f001 f868 	bl	800da80 <__assert_func>
 800c9b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9b4:	6006      	str	r6, [r0, #0]
 800c9b6:	60c6      	str	r6, [r0, #12]
 800c9b8:	b13c      	cbz	r4, 800c9ca <_Bfree+0x3a>
 800c9ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c9bc:	6862      	ldr	r2, [r4, #4]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9c4:	6021      	str	r1, [r4, #0]
 800c9c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c9ca:	bd70      	pop	{r4, r5, r6, pc}
 800c9cc:	0800e6f6 	.word	0x0800e6f6
 800c9d0:	0800e860 	.word	0x0800e860

0800c9d4 <__multadd>:
 800c9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d8:	690e      	ldr	r6, [r1, #16]
 800c9da:	4607      	mov	r7, r0
 800c9dc:	4698      	mov	r8, r3
 800c9de:	460c      	mov	r4, r1
 800c9e0:	f101 0014 	add.w	r0, r1, #20
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	6805      	ldr	r5, [r0, #0]
 800c9e8:	b2a9      	uxth	r1, r5
 800c9ea:	fb02 8101 	mla	r1, r2, r1, r8
 800c9ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c9f2:	0c2d      	lsrs	r5, r5, #16
 800c9f4:	fb02 c505 	mla	r5, r2, r5, ip
 800c9f8:	b289      	uxth	r1, r1
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ca00:	429e      	cmp	r6, r3
 800ca02:	f840 1b04 	str.w	r1, [r0], #4
 800ca06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ca0a:	dcec      	bgt.n	800c9e6 <__multadd+0x12>
 800ca0c:	f1b8 0f00 	cmp.w	r8, #0
 800ca10:	d022      	beq.n	800ca58 <__multadd+0x84>
 800ca12:	68a3      	ldr	r3, [r4, #8]
 800ca14:	42b3      	cmp	r3, r6
 800ca16:	dc19      	bgt.n	800ca4c <__multadd+0x78>
 800ca18:	6861      	ldr	r1, [r4, #4]
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	3101      	adds	r1, #1
 800ca1e:	f7ff ff77 	bl	800c910 <_Balloc>
 800ca22:	4605      	mov	r5, r0
 800ca24:	b928      	cbnz	r0, 800ca32 <__multadd+0x5e>
 800ca26:	4602      	mov	r2, r0
 800ca28:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <__multadd+0x8c>)
 800ca2a:	480e      	ldr	r0, [pc, #56]	; (800ca64 <__multadd+0x90>)
 800ca2c:	21b5      	movs	r1, #181	; 0xb5
 800ca2e:	f001 f827 	bl	800da80 <__assert_func>
 800ca32:	6922      	ldr	r2, [r4, #16]
 800ca34:	3202      	adds	r2, #2
 800ca36:	f104 010c 	add.w	r1, r4, #12
 800ca3a:	0092      	lsls	r2, r2, #2
 800ca3c:	300c      	adds	r0, #12
 800ca3e:	f7fc fc8b 	bl	8009358 <memcpy>
 800ca42:	4621      	mov	r1, r4
 800ca44:	4638      	mov	r0, r7
 800ca46:	f7ff ffa3 	bl	800c990 <_Bfree>
 800ca4a:	462c      	mov	r4, r5
 800ca4c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ca50:	3601      	adds	r6, #1
 800ca52:	f8c3 8014 	str.w	r8, [r3, #20]
 800ca56:	6126      	str	r6, [r4, #16]
 800ca58:	4620      	mov	r0, r4
 800ca5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5e:	bf00      	nop
 800ca60:	0800e76c 	.word	0x0800e76c
 800ca64:	0800e860 	.word	0x0800e860

0800ca68 <__s2b>:
 800ca68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	4615      	mov	r5, r2
 800ca70:	461f      	mov	r7, r3
 800ca72:	2209      	movs	r2, #9
 800ca74:	3308      	adds	r3, #8
 800ca76:	4606      	mov	r6, r0
 800ca78:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	2201      	movs	r2, #1
 800ca80:	429a      	cmp	r2, r3
 800ca82:	db09      	blt.n	800ca98 <__s2b+0x30>
 800ca84:	4630      	mov	r0, r6
 800ca86:	f7ff ff43 	bl	800c910 <_Balloc>
 800ca8a:	b940      	cbnz	r0, 800ca9e <__s2b+0x36>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	4b19      	ldr	r3, [pc, #100]	; (800caf4 <__s2b+0x8c>)
 800ca90:	4819      	ldr	r0, [pc, #100]	; (800caf8 <__s2b+0x90>)
 800ca92:	21ce      	movs	r1, #206	; 0xce
 800ca94:	f000 fff4 	bl	800da80 <__assert_func>
 800ca98:	0052      	lsls	r2, r2, #1
 800ca9a:	3101      	adds	r1, #1
 800ca9c:	e7f0      	b.n	800ca80 <__s2b+0x18>
 800ca9e:	9b08      	ldr	r3, [sp, #32]
 800caa0:	6143      	str	r3, [r0, #20]
 800caa2:	2d09      	cmp	r5, #9
 800caa4:	f04f 0301 	mov.w	r3, #1
 800caa8:	6103      	str	r3, [r0, #16]
 800caaa:	dd16      	ble.n	800cada <__s2b+0x72>
 800caac:	f104 0909 	add.w	r9, r4, #9
 800cab0:	46c8      	mov	r8, r9
 800cab2:	442c      	add	r4, r5
 800cab4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cab8:	4601      	mov	r1, r0
 800caba:	3b30      	subs	r3, #48	; 0x30
 800cabc:	220a      	movs	r2, #10
 800cabe:	4630      	mov	r0, r6
 800cac0:	f7ff ff88 	bl	800c9d4 <__multadd>
 800cac4:	45a0      	cmp	r8, r4
 800cac6:	d1f5      	bne.n	800cab4 <__s2b+0x4c>
 800cac8:	f1a5 0408 	sub.w	r4, r5, #8
 800cacc:	444c      	add	r4, r9
 800cace:	1b2d      	subs	r5, r5, r4
 800cad0:	1963      	adds	r3, r4, r5
 800cad2:	42bb      	cmp	r3, r7
 800cad4:	db04      	blt.n	800cae0 <__s2b+0x78>
 800cad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cada:	340a      	adds	r4, #10
 800cadc:	2509      	movs	r5, #9
 800cade:	e7f6      	b.n	800cace <__s2b+0x66>
 800cae0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cae4:	4601      	mov	r1, r0
 800cae6:	3b30      	subs	r3, #48	; 0x30
 800cae8:	220a      	movs	r2, #10
 800caea:	4630      	mov	r0, r6
 800caec:	f7ff ff72 	bl	800c9d4 <__multadd>
 800caf0:	e7ee      	b.n	800cad0 <__s2b+0x68>
 800caf2:	bf00      	nop
 800caf4:	0800e76c 	.word	0x0800e76c
 800caf8:	0800e860 	.word	0x0800e860

0800cafc <__hi0bits>:
 800cafc:	0c03      	lsrs	r3, r0, #16
 800cafe:	041b      	lsls	r3, r3, #16
 800cb00:	b9d3      	cbnz	r3, 800cb38 <__hi0bits+0x3c>
 800cb02:	0400      	lsls	r0, r0, #16
 800cb04:	2310      	movs	r3, #16
 800cb06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb0a:	bf04      	itt	eq
 800cb0c:	0200      	lsleq	r0, r0, #8
 800cb0e:	3308      	addeq	r3, #8
 800cb10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb14:	bf04      	itt	eq
 800cb16:	0100      	lsleq	r0, r0, #4
 800cb18:	3304      	addeq	r3, #4
 800cb1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb1e:	bf04      	itt	eq
 800cb20:	0080      	lsleq	r0, r0, #2
 800cb22:	3302      	addeq	r3, #2
 800cb24:	2800      	cmp	r0, #0
 800cb26:	db05      	blt.n	800cb34 <__hi0bits+0x38>
 800cb28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb2c:	f103 0301 	add.w	r3, r3, #1
 800cb30:	bf08      	it	eq
 800cb32:	2320      	moveq	r3, #32
 800cb34:	4618      	mov	r0, r3
 800cb36:	4770      	bx	lr
 800cb38:	2300      	movs	r3, #0
 800cb3a:	e7e4      	b.n	800cb06 <__hi0bits+0xa>

0800cb3c <__lo0bits>:
 800cb3c:	6803      	ldr	r3, [r0, #0]
 800cb3e:	f013 0207 	ands.w	r2, r3, #7
 800cb42:	4601      	mov	r1, r0
 800cb44:	d00b      	beq.n	800cb5e <__lo0bits+0x22>
 800cb46:	07da      	lsls	r2, r3, #31
 800cb48:	d424      	bmi.n	800cb94 <__lo0bits+0x58>
 800cb4a:	0798      	lsls	r0, r3, #30
 800cb4c:	bf49      	itett	mi
 800cb4e:	085b      	lsrmi	r3, r3, #1
 800cb50:	089b      	lsrpl	r3, r3, #2
 800cb52:	2001      	movmi	r0, #1
 800cb54:	600b      	strmi	r3, [r1, #0]
 800cb56:	bf5c      	itt	pl
 800cb58:	600b      	strpl	r3, [r1, #0]
 800cb5a:	2002      	movpl	r0, #2
 800cb5c:	4770      	bx	lr
 800cb5e:	b298      	uxth	r0, r3
 800cb60:	b9b0      	cbnz	r0, 800cb90 <__lo0bits+0x54>
 800cb62:	0c1b      	lsrs	r3, r3, #16
 800cb64:	2010      	movs	r0, #16
 800cb66:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cb6a:	bf04      	itt	eq
 800cb6c:	0a1b      	lsreq	r3, r3, #8
 800cb6e:	3008      	addeq	r0, #8
 800cb70:	071a      	lsls	r2, r3, #28
 800cb72:	bf04      	itt	eq
 800cb74:	091b      	lsreq	r3, r3, #4
 800cb76:	3004      	addeq	r0, #4
 800cb78:	079a      	lsls	r2, r3, #30
 800cb7a:	bf04      	itt	eq
 800cb7c:	089b      	lsreq	r3, r3, #2
 800cb7e:	3002      	addeq	r0, #2
 800cb80:	07da      	lsls	r2, r3, #31
 800cb82:	d403      	bmi.n	800cb8c <__lo0bits+0x50>
 800cb84:	085b      	lsrs	r3, r3, #1
 800cb86:	f100 0001 	add.w	r0, r0, #1
 800cb8a:	d005      	beq.n	800cb98 <__lo0bits+0x5c>
 800cb8c:	600b      	str	r3, [r1, #0]
 800cb8e:	4770      	bx	lr
 800cb90:	4610      	mov	r0, r2
 800cb92:	e7e8      	b.n	800cb66 <__lo0bits+0x2a>
 800cb94:	2000      	movs	r0, #0
 800cb96:	4770      	bx	lr
 800cb98:	2020      	movs	r0, #32
 800cb9a:	4770      	bx	lr

0800cb9c <__i2b>:
 800cb9c:	b510      	push	{r4, lr}
 800cb9e:	460c      	mov	r4, r1
 800cba0:	2101      	movs	r1, #1
 800cba2:	f7ff feb5 	bl	800c910 <_Balloc>
 800cba6:	4602      	mov	r2, r0
 800cba8:	b928      	cbnz	r0, 800cbb6 <__i2b+0x1a>
 800cbaa:	4b05      	ldr	r3, [pc, #20]	; (800cbc0 <__i2b+0x24>)
 800cbac:	4805      	ldr	r0, [pc, #20]	; (800cbc4 <__i2b+0x28>)
 800cbae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cbb2:	f000 ff65 	bl	800da80 <__assert_func>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	6144      	str	r4, [r0, #20]
 800cbba:	6103      	str	r3, [r0, #16]
 800cbbc:	bd10      	pop	{r4, pc}
 800cbbe:	bf00      	nop
 800cbc0:	0800e76c 	.word	0x0800e76c
 800cbc4:	0800e860 	.word	0x0800e860

0800cbc8 <__multiply>:
 800cbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbcc:	4614      	mov	r4, r2
 800cbce:	690a      	ldr	r2, [r1, #16]
 800cbd0:	6923      	ldr	r3, [r4, #16]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	bfb8      	it	lt
 800cbd6:	460b      	movlt	r3, r1
 800cbd8:	460d      	mov	r5, r1
 800cbda:	bfbc      	itt	lt
 800cbdc:	4625      	movlt	r5, r4
 800cbde:	461c      	movlt	r4, r3
 800cbe0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800cbe4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800cbe8:	68ab      	ldr	r3, [r5, #8]
 800cbea:	6869      	ldr	r1, [r5, #4]
 800cbec:	eb0a 0709 	add.w	r7, sl, r9
 800cbf0:	42bb      	cmp	r3, r7
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	bfb8      	it	lt
 800cbf6:	3101      	addlt	r1, #1
 800cbf8:	f7ff fe8a 	bl	800c910 <_Balloc>
 800cbfc:	b930      	cbnz	r0, 800cc0c <__multiply+0x44>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	4b42      	ldr	r3, [pc, #264]	; (800cd0c <__multiply+0x144>)
 800cc02:	4843      	ldr	r0, [pc, #268]	; (800cd10 <__multiply+0x148>)
 800cc04:	f240 115d 	movw	r1, #349	; 0x15d
 800cc08:	f000 ff3a 	bl	800da80 <__assert_func>
 800cc0c:	f100 0614 	add.w	r6, r0, #20
 800cc10:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800cc14:	4633      	mov	r3, r6
 800cc16:	2200      	movs	r2, #0
 800cc18:	4543      	cmp	r3, r8
 800cc1a:	d31e      	bcc.n	800cc5a <__multiply+0x92>
 800cc1c:	f105 0c14 	add.w	ip, r5, #20
 800cc20:	f104 0314 	add.w	r3, r4, #20
 800cc24:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800cc28:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800cc2c:	9202      	str	r2, [sp, #8]
 800cc2e:	ebac 0205 	sub.w	r2, ip, r5
 800cc32:	3a15      	subs	r2, #21
 800cc34:	f022 0203 	bic.w	r2, r2, #3
 800cc38:	3204      	adds	r2, #4
 800cc3a:	f105 0115 	add.w	r1, r5, #21
 800cc3e:	458c      	cmp	ip, r1
 800cc40:	bf38      	it	cc
 800cc42:	2204      	movcc	r2, #4
 800cc44:	9201      	str	r2, [sp, #4]
 800cc46:	9a02      	ldr	r2, [sp, #8]
 800cc48:	9303      	str	r3, [sp, #12]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d808      	bhi.n	800cc60 <__multiply+0x98>
 800cc4e:	2f00      	cmp	r7, #0
 800cc50:	dc55      	bgt.n	800ccfe <__multiply+0x136>
 800cc52:	6107      	str	r7, [r0, #16]
 800cc54:	b005      	add	sp, #20
 800cc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5a:	f843 2b04 	str.w	r2, [r3], #4
 800cc5e:	e7db      	b.n	800cc18 <__multiply+0x50>
 800cc60:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc64:	f1ba 0f00 	cmp.w	sl, #0
 800cc68:	d020      	beq.n	800ccac <__multiply+0xe4>
 800cc6a:	f105 0e14 	add.w	lr, r5, #20
 800cc6e:	46b1      	mov	r9, r6
 800cc70:	2200      	movs	r2, #0
 800cc72:	f85e 4b04 	ldr.w	r4, [lr], #4
 800cc76:	f8d9 b000 	ldr.w	fp, [r9]
 800cc7a:	b2a1      	uxth	r1, r4
 800cc7c:	fa1f fb8b 	uxth.w	fp, fp
 800cc80:	fb0a b101 	mla	r1, sl, r1, fp
 800cc84:	4411      	add	r1, r2
 800cc86:	f8d9 2000 	ldr.w	r2, [r9]
 800cc8a:	0c24      	lsrs	r4, r4, #16
 800cc8c:	0c12      	lsrs	r2, r2, #16
 800cc8e:	fb0a 2404 	mla	r4, sl, r4, r2
 800cc92:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800cc96:	b289      	uxth	r1, r1
 800cc98:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cc9c:	45f4      	cmp	ip, lr
 800cc9e:	f849 1b04 	str.w	r1, [r9], #4
 800cca2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800cca6:	d8e4      	bhi.n	800cc72 <__multiply+0xaa>
 800cca8:	9901      	ldr	r1, [sp, #4]
 800ccaa:	5072      	str	r2, [r6, r1]
 800ccac:	9a03      	ldr	r2, [sp, #12]
 800ccae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ccb2:	3304      	adds	r3, #4
 800ccb4:	f1b9 0f00 	cmp.w	r9, #0
 800ccb8:	d01f      	beq.n	800ccfa <__multiply+0x132>
 800ccba:	6834      	ldr	r4, [r6, #0]
 800ccbc:	f105 0114 	add.w	r1, r5, #20
 800ccc0:	46b6      	mov	lr, r6
 800ccc2:	f04f 0a00 	mov.w	sl, #0
 800ccc6:	880a      	ldrh	r2, [r1, #0]
 800ccc8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800cccc:	fb09 b202 	mla	r2, r9, r2, fp
 800ccd0:	4492      	add	sl, r2
 800ccd2:	b2a4      	uxth	r4, r4
 800ccd4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ccd8:	f84e 4b04 	str.w	r4, [lr], #4
 800ccdc:	f851 4b04 	ldr.w	r4, [r1], #4
 800cce0:	f8be 2000 	ldrh.w	r2, [lr]
 800cce4:	0c24      	lsrs	r4, r4, #16
 800cce6:	fb09 2404 	mla	r4, r9, r4, r2
 800ccea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ccee:	458c      	cmp	ip, r1
 800ccf0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ccf4:	d8e7      	bhi.n	800ccc6 <__multiply+0xfe>
 800ccf6:	9a01      	ldr	r2, [sp, #4]
 800ccf8:	50b4      	str	r4, [r6, r2]
 800ccfa:	3604      	adds	r6, #4
 800ccfc:	e7a3      	b.n	800cc46 <__multiply+0x7e>
 800ccfe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1a5      	bne.n	800cc52 <__multiply+0x8a>
 800cd06:	3f01      	subs	r7, #1
 800cd08:	e7a1      	b.n	800cc4e <__multiply+0x86>
 800cd0a:	bf00      	nop
 800cd0c:	0800e76c 	.word	0x0800e76c
 800cd10:	0800e860 	.word	0x0800e860

0800cd14 <__pow5mult>:
 800cd14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd18:	4615      	mov	r5, r2
 800cd1a:	f012 0203 	ands.w	r2, r2, #3
 800cd1e:	4606      	mov	r6, r0
 800cd20:	460f      	mov	r7, r1
 800cd22:	d007      	beq.n	800cd34 <__pow5mult+0x20>
 800cd24:	4c25      	ldr	r4, [pc, #148]	; (800cdbc <__pow5mult+0xa8>)
 800cd26:	3a01      	subs	r2, #1
 800cd28:	2300      	movs	r3, #0
 800cd2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd2e:	f7ff fe51 	bl	800c9d4 <__multadd>
 800cd32:	4607      	mov	r7, r0
 800cd34:	10ad      	asrs	r5, r5, #2
 800cd36:	d03d      	beq.n	800cdb4 <__pow5mult+0xa0>
 800cd38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd3a:	b97c      	cbnz	r4, 800cd5c <__pow5mult+0x48>
 800cd3c:	2010      	movs	r0, #16
 800cd3e:	f7ff fdcd 	bl	800c8dc <malloc>
 800cd42:	4602      	mov	r2, r0
 800cd44:	6270      	str	r0, [r6, #36]	; 0x24
 800cd46:	b928      	cbnz	r0, 800cd54 <__pow5mult+0x40>
 800cd48:	4b1d      	ldr	r3, [pc, #116]	; (800cdc0 <__pow5mult+0xac>)
 800cd4a:	481e      	ldr	r0, [pc, #120]	; (800cdc4 <__pow5mult+0xb0>)
 800cd4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cd50:	f000 fe96 	bl	800da80 <__assert_func>
 800cd54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd58:	6004      	str	r4, [r0, #0]
 800cd5a:	60c4      	str	r4, [r0, #12]
 800cd5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cd60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd64:	b94c      	cbnz	r4, 800cd7a <__pow5mult+0x66>
 800cd66:	f240 2171 	movw	r1, #625	; 0x271
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	f7ff ff16 	bl	800cb9c <__i2b>
 800cd70:	2300      	movs	r3, #0
 800cd72:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd76:	4604      	mov	r4, r0
 800cd78:	6003      	str	r3, [r0, #0]
 800cd7a:	f04f 0900 	mov.w	r9, #0
 800cd7e:	07eb      	lsls	r3, r5, #31
 800cd80:	d50a      	bpl.n	800cd98 <__pow5mult+0x84>
 800cd82:	4639      	mov	r1, r7
 800cd84:	4622      	mov	r2, r4
 800cd86:	4630      	mov	r0, r6
 800cd88:	f7ff ff1e 	bl	800cbc8 <__multiply>
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	4680      	mov	r8, r0
 800cd90:	4630      	mov	r0, r6
 800cd92:	f7ff fdfd 	bl	800c990 <_Bfree>
 800cd96:	4647      	mov	r7, r8
 800cd98:	106d      	asrs	r5, r5, #1
 800cd9a:	d00b      	beq.n	800cdb4 <__pow5mult+0xa0>
 800cd9c:	6820      	ldr	r0, [r4, #0]
 800cd9e:	b938      	cbnz	r0, 800cdb0 <__pow5mult+0x9c>
 800cda0:	4622      	mov	r2, r4
 800cda2:	4621      	mov	r1, r4
 800cda4:	4630      	mov	r0, r6
 800cda6:	f7ff ff0f 	bl	800cbc8 <__multiply>
 800cdaa:	6020      	str	r0, [r4, #0]
 800cdac:	f8c0 9000 	str.w	r9, [r0]
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	e7e4      	b.n	800cd7e <__pow5mult+0x6a>
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdba:	bf00      	nop
 800cdbc:	0800e9b0 	.word	0x0800e9b0
 800cdc0:	0800e6f6 	.word	0x0800e6f6
 800cdc4:	0800e860 	.word	0x0800e860

0800cdc8 <__lshift>:
 800cdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdcc:	460c      	mov	r4, r1
 800cdce:	6849      	ldr	r1, [r1, #4]
 800cdd0:	6923      	ldr	r3, [r4, #16]
 800cdd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdd6:	68a3      	ldr	r3, [r4, #8]
 800cdd8:	4607      	mov	r7, r0
 800cdda:	4691      	mov	r9, r2
 800cddc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cde0:	f108 0601 	add.w	r6, r8, #1
 800cde4:	42b3      	cmp	r3, r6
 800cde6:	db0b      	blt.n	800ce00 <__lshift+0x38>
 800cde8:	4638      	mov	r0, r7
 800cdea:	f7ff fd91 	bl	800c910 <_Balloc>
 800cdee:	4605      	mov	r5, r0
 800cdf0:	b948      	cbnz	r0, 800ce06 <__lshift+0x3e>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	4b28      	ldr	r3, [pc, #160]	; (800ce98 <__lshift+0xd0>)
 800cdf6:	4829      	ldr	r0, [pc, #164]	; (800ce9c <__lshift+0xd4>)
 800cdf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cdfc:	f000 fe40 	bl	800da80 <__assert_func>
 800ce00:	3101      	adds	r1, #1
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	e7ee      	b.n	800cde4 <__lshift+0x1c>
 800ce06:	2300      	movs	r3, #0
 800ce08:	f100 0114 	add.w	r1, r0, #20
 800ce0c:	f100 0210 	add.w	r2, r0, #16
 800ce10:	4618      	mov	r0, r3
 800ce12:	4553      	cmp	r3, sl
 800ce14:	db33      	blt.n	800ce7e <__lshift+0xb6>
 800ce16:	6920      	ldr	r0, [r4, #16]
 800ce18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce1c:	f104 0314 	add.w	r3, r4, #20
 800ce20:	f019 091f 	ands.w	r9, r9, #31
 800ce24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce2c:	d02b      	beq.n	800ce86 <__lshift+0xbe>
 800ce2e:	f1c9 0e20 	rsb	lr, r9, #32
 800ce32:	468a      	mov	sl, r1
 800ce34:	2200      	movs	r2, #0
 800ce36:	6818      	ldr	r0, [r3, #0]
 800ce38:	fa00 f009 	lsl.w	r0, r0, r9
 800ce3c:	4302      	orrs	r2, r0
 800ce3e:	f84a 2b04 	str.w	r2, [sl], #4
 800ce42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce46:	459c      	cmp	ip, r3
 800ce48:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce4c:	d8f3      	bhi.n	800ce36 <__lshift+0x6e>
 800ce4e:	ebac 0304 	sub.w	r3, ip, r4
 800ce52:	3b15      	subs	r3, #21
 800ce54:	f023 0303 	bic.w	r3, r3, #3
 800ce58:	3304      	adds	r3, #4
 800ce5a:	f104 0015 	add.w	r0, r4, #21
 800ce5e:	4584      	cmp	ip, r0
 800ce60:	bf38      	it	cc
 800ce62:	2304      	movcc	r3, #4
 800ce64:	50ca      	str	r2, [r1, r3]
 800ce66:	b10a      	cbz	r2, 800ce6c <__lshift+0xa4>
 800ce68:	f108 0602 	add.w	r6, r8, #2
 800ce6c:	3e01      	subs	r6, #1
 800ce6e:	4638      	mov	r0, r7
 800ce70:	612e      	str	r6, [r5, #16]
 800ce72:	4621      	mov	r1, r4
 800ce74:	f7ff fd8c 	bl	800c990 <_Bfree>
 800ce78:	4628      	mov	r0, r5
 800ce7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce82:	3301      	adds	r3, #1
 800ce84:	e7c5      	b.n	800ce12 <__lshift+0x4a>
 800ce86:	3904      	subs	r1, #4
 800ce88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce90:	459c      	cmp	ip, r3
 800ce92:	d8f9      	bhi.n	800ce88 <__lshift+0xc0>
 800ce94:	e7ea      	b.n	800ce6c <__lshift+0xa4>
 800ce96:	bf00      	nop
 800ce98:	0800e76c 	.word	0x0800e76c
 800ce9c:	0800e860 	.word	0x0800e860

0800cea0 <__mcmp>:
 800cea0:	b530      	push	{r4, r5, lr}
 800cea2:	6902      	ldr	r2, [r0, #16]
 800cea4:	690c      	ldr	r4, [r1, #16]
 800cea6:	1b12      	subs	r2, r2, r4
 800cea8:	d10e      	bne.n	800cec8 <__mcmp+0x28>
 800ceaa:	f100 0314 	add.w	r3, r0, #20
 800ceae:	3114      	adds	r1, #20
 800ceb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ceb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ceb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cebc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cec0:	42a5      	cmp	r5, r4
 800cec2:	d003      	beq.n	800cecc <__mcmp+0x2c>
 800cec4:	d305      	bcc.n	800ced2 <__mcmp+0x32>
 800cec6:	2201      	movs	r2, #1
 800cec8:	4610      	mov	r0, r2
 800ceca:	bd30      	pop	{r4, r5, pc}
 800cecc:	4283      	cmp	r3, r0
 800cece:	d3f3      	bcc.n	800ceb8 <__mcmp+0x18>
 800ced0:	e7fa      	b.n	800cec8 <__mcmp+0x28>
 800ced2:	f04f 32ff 	mov.w	r2, #4294967295
 800ced6:	e7f7      	b.n	800cec8 <__mcmp+0x28>

0800ced8 <__mdiff>:
 800ced8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	460c      	mov	r4, r1
 800cede:	4606      	mov	r6, r0
 800cee0:	4611      	mov	r1, r2
 800cee2:	4620      	mov	r0, r4
 800cee4:	4617      	mov	r7, r2
 800cee6:	f7ff ffdb 	bl	800cea0 <__mcmp>
 800ceea:	1e05      	subs	r5, r0, #0
 800ceec:	d110      	bne.n	800cf10 <__mdiff+0x38>
 800ceee:	4629      	mov	r1, r5
 800cef0:	4630      	mov	r0, r6
 800cef2:	f7ff fd0d 	bl	800c910 <_Balloc>
 800cef6:	b930      	cbnz	r0, 800cf06 <__mdiff+0x2e>
 800cef8:	4b39      	ldr	r3, [pc, #228]	; (800cfe0 <__mdiff+0x108>)
 800cefa:	4602      	mov	r2, r0
 800cefc:	f240 2132 	movw	r1, #562	; 0x232
 800cf00:	4838      	ldr	r0, [pc, #224]	; (800cfe4 <__mdiff+0x10c>)
 800cf02:	f000 fdbd 	bl	800da80 <__assert_func>
 800cf06:	2301      	movs	r3, #1
 800cf08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf10:	bfa4      	itt	ge
 800cf12:	463b      	movge	r3, r7
 800cf14:	4627      	movge	r7, r4
 800cf16:	4630      	mov	r0, r6
 800cf18:	6879      	ldr	r1, [r7, #4]
 800cf1a:	bfa6      	itte	ge
 800cf1c:	461c      	movge	r4, r3
 800cf1e:	2500      	movge	r5, #0
 800cf20:	2501      	movlt	r5, #1
 800cf22:	f7ff fcf5 	bl	800c910 <_Balloc>
 800cf26:	b920      	cbnz	r0, 800cf32 <__mdiff+0x5a>
 800cf28:	4b2d      	ldr	r3, [pc, #180]	; (800cfe0 <__mdiff+0x108>)
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf30:	e7e6      	b.n	800cf00 <__mdiff+0x28>
 800cf32:	693e      	ldr	r6, [r7, #16]
 800cf34:	60c5      	str	r5, [r0, #12]
 800cf36:	6925      	ldr	r5, [r4, #16]
 800cf38:	f107 0114 	add.w	r1, r7, #20
 800cf3c:	f104 0914 	add.w	r9, r4, #20
 800cf40:	f100 0e14 	add.w	lr, r0, #20
 800cf44:	f107 0210 	add.w	r2, r7, #16
 800cf48:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cf4c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cf50:	46f2      	mov	sl, lr
 800cf52:	2700      	movs	r7, #0
 800cf54:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf5c:	fa1f f883 	uxth.w	r8, r3
 800cf60:	fa17 f78b 	uxtah	r7, r7, fp
 800cf64:	0c1b      	lsrs	r3, r3, #16
 800cf66:	eba7 0808 	sub.w	r8, r7, r8
 800cf6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf72:	fa1f f888 	uxth.w	r8, r8
 800cf76:	141f      	asrs	r7, r3, #16
 800cf78:	454d      	cmp	r5, r9
 800cf7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf7e:	f84a 3b04 	str.w	r3, [sl], #4
 800cf82:	d8e7      	bhi.n	800cf54 <__mdiff+0x7c>
 800cf84:	1b2b      	subs	r3, r5, r4
 800cf86:	3b15      	subs	r3, #21
 800cf88:	f023 0303 	bic.w	r3, r3, #3
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	3415      	adds	r4, #21
 800cf90:	42a5      	cmp	r5, r4
 800cf92:	bf38      	it	cc
 800cf94:	2304      	movcc	r3, #4
 800cf96:	4419      	add	r1, r3
 800cf98:	4473      	add	r3, lr
 800cf9a:	469e      	mov	lr, r3
 800cf9c:	460d      	mov	r5, r1
 800cf9e:	4565      	cmp	r5, ip
 800cfa0:	d30e      	bcc.n	800cfc0 <__mdiff+0xe8>
 800cfa2:	f10c 0203 	add.w	r2, ip, #3
 800cfa6:	1a52      	subs	r2, r2, r1
 800cfa8:	f022 0203 	bic.w	r2, r2, #3
 800cfac:	3903      	subs	r1, #3
 800cfae:	458c      	cmp	ip, r1
 800cfb0:	bf38      	it	cc
 800cfb2:	2200      	movcc	r2, #0
 800cfb4:	441a      	add	r2, r3
 800cfb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cfba:	b17b      	cbz	r3, 800cfdc <__mdiff+0x104>
 800cfbc:	6106      	str	r6, [r0, #16]
 800cfbe:	e7a5      	b.n	800cf0c <__mdiff+0x34>
 800cfc0:	f855 8b04 	ldr.w	r8, [r5], #4
 800cfc4:	fa17 f488 	uxtah	r4, r7, r8
 800cfc8:	1422      	asrs	r2, r4, #16
 800cfca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cfce:	b2a4      	uxth	r4, r4
 800cfd0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cfd4:	f84e 4b04 	str.w	r4, [lr], #4
 800cfd8:	1417      	asrs	r7, r2, #16
 800cfda:	e7e0      	b.n	800cf9e <__mdiff+0xc6>
 800cfdc:	3e01      	subs	r6, #1
 800cfde:	e7ea      	b.n	800cfb6 <__mdiff+0xde>
 800cfe0:	0800e76c 	.word	0x0800e76c
 800cfe4:	0800e860 	.word	0x0800e860

0800cfe8 <__ulp>:
 800cfe8:	b082      	sub	sp, #8
 800cfea:	ed8d 0b00 	vstr	d0, [sp]
 800cfee:	9b01      	ldr	r3, [sp, #4]
 800cff0:	4912      	ldr	r1, [pc, #72]	; (800d03c <__ulp+0x54>)
 800cff2:	4019      	ands	r1, r3
 800cff4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cff8:	2900      	cmp	r1, #0
 800cffa:	dd05      	ble.n	800d008 <__ulp+0x20>
 800cffc:	2200      	movs	r2, #0
 800cffe:	460b      	mov	r3, r1
 800d000:	ec43 2b10 	vmov	d0, r2, r3
 800d004:	b002      	add	sp, #8
 800d006:	4770      	bx	lr
 800d008:	4249      	negs	r1, r1
 800d00a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d00e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d012:	f04f 0200 	mov.w	r2, #0
 800d016:	f04f 0300 	mov.w	r3, #0
 800d01a:	da04      	bge.n	800d026 <__ulp+0x3e>
 800d01c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d020:	fa41 f300 	asr.w	r3, r1, r0
 800d024:	e7ec      	b.n	800d000 <__ulp+0x18>
 800d026:	f1a0 0114 	sub.w	r1, r0, #20
 800d02a:	291e      	cmp	r1, #30
 800d02c:	bfda      	itte	le
 800d02e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d032:	fa20 f101 	lsrle.w	r1, r0, r1
 800d036:	2101      	movgt	r1, #1
 800d038:	460a      	mov	r2, r1
 800d03a:	e7e1      	b.n	800d000 <__ulp+0x18>
 800d03c:	7ff00000 	.word	0x7ff00000

0800d040 <__b2d>:
 800d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d042:	6905      	ldr	r5, [r0, #16]
 800d044:	f100 0714 	add.w	r7, r0, #20
 800d048:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d04c:	1f2e      	subs	r6, r5, #4
 800d04e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d052:	4620      	mov	r0, r4
 800d054:	f7ff fd52 	bl	800cafc <__hi0bits>
 800d058:	f1c0 0320 	rsb	r3, r0, #32
 800d05c:	280a      	cmp	r0, #10
 800d05e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d0dc <__b2d+0x9c>
 800d062:	600b      	str	r3, [r1, #0]
 800d064:	dc14      	bgt.n	800d090 <__b2d+0x50>
 800d066:	f1c0 0e0b 	rsb	lr, r0, #11
 800d06a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d06e:	42b7      	cmp	r7, r6
 800d070:	ea41 030c 	orr.w	r3, r1, ip
 800d074:	bf34      	ite	cc
 800d076:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d07a:	2100      	movcs	r1, #0
 800d07c:	3015      	adds	r0, #21
 800d07e:	fa04 f000 	lsl.w	r0, r4, r0
 800d082:	fa21 f10e 	lsr.w	r1, r1, lr
 800d086:	ea40 0201 	orr.w	r2, r0, r1
 800d08a:	ec43 2b10 	vmov	d0, r2, r3
 800d08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d090:	42b7      	cmp	r7, r6
 800d092:	bf3a      	itte	cc
 800d094:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d098:	f1a5 0608 	subcc.w	r6, r5, #8
 800d09c:	2100      	movcs	r1, #0
 800d09e:	380b      	subs	r0, #11
 800d0a0:	d017      	beq.n	800d0d2 <__b2d+0x92>
 800d0a2:	f1c0 0c20 	rsb	ip, r0, #32
 800d0a6:	fa04 f500 	lsl.w	r5, r4, r0
 800d0aa:	42be      	cmp	r6, r7
 800d0ac:	fa21 f40c 	lsr.w	r4, r1, ip
 800d0b0:	ea45 0504 	orr.w	r5, r5, r4
 800d0b4:	bf8c      	ite	hi
 800d0b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d0ba:	2400      	movls	r4, #0
 800d0bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d0c0:	fa01 f000 	lsl.w	r0, r1, r0
 800d0c4:	fa24 f40c 	lsr.w	r4, r4, ip
 800d0c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d0cc:	ea40 0204 	orr.w	r2, r0, r4
 800d0d0:	e7db      	b.n	800d08a <__b2d+0x4a>
 800d0d2:	ea44 030c 	orr.w	r3, r4, ip
 800d0d6:	460a      	mov	r2, r1
 800d0d8:	e7d7      	b.n	800d08a <__b2d+0x4a>
 800d0da:	bf00      	nop
 800d0dc:	3ff00000 	.word	0x3ff00000

0800d0e0 <__d2b>:
 800d0e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d0e4:	4689      	mov	r9, r1
 800d0e6:	2101      	movs	r1, #1
 800d0e8:	ec57 6b10 	vmov	r6, r7, d0
 800d0ec:	4690      	mov	r8, r2
 800d0ee:	f7ff fc0f 	bl	800c910 <_Balloc>
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	b930      	cbnz	r0, 800d104 <__d2b+0x24>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	4b25      	ldr	r3, [pc, #148]	; (800d190 <__d2b+0xb0>)
 800d0fa:	4826      	ldr	r0, [pc, #152]	; (800d194 <__d2b+0xb4>)
 800d0fc:	f240 310a 	movw	r1, #778	; 0x30a
 800d100:	f000 fcbe 	bl	800da80 <__assert_func>
 800d104:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d10c:	bb35      	cbnz	r5, 800d15c <__d2b+0x7c>
 800d10e:	2e00      	cmp	r6, #0
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	d028      	beq.n	800d166 <__d2b+0x86>
 800d114:	4668      	mov	r0, sp
 800d116:	9600      	str	r6, [sp, #0]
 800d118:	f7ff fd10 	bl	800cb3c <__lo0bits>
 800d11c:	9900      	ldr	r1, [sp, #0]
 800d11e:	b300      	cbz	r0, 800d162 <__d2b+0x82>
 800d120:	9a01      	ldr	r2, [sp, #4]
 800d122:	f1c0 0320 	rsb	r3, r0, #32
 800d126:	fa02 f303 	lsl.w	r3, r2, r3
 800d12a:	430b      	orrs	r3, r1
 800d12c:	40c2      	lsrs	r2, r0
 800d12e:	6163      	str	r3, [r4, #20]
 800d130:	9201      	str	r2, [sp, #4]
 800d132:	9b01      	ldr	r3, [sp, #4]
 800d134:	61a3      	str	r3, [r4, #24]
 800d136:	2b00      	cmp	r3, #0
 800d138:	bf14      	ite	ne
 800d13a:	2202      	movne	r2, #2
 800d13c:	2201      	moveq	r2, #1
 800d13e:	6122      	str	r2, [r4, #16]
 800d140:	b1d5      	cbz	r5, 800d178 <__d2b+0x98>
 800d142:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d146:	4405      	add	r5, r0
 800d148:	f8c9 5000 	str.w	r5, [r9]
 800d14c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d150:	f8c8 0000 	str.w	r0, [r8]
 800d154:	4620      	mov	r0, r4
 800d156:	b003      	add	sp, #12
 800d158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d15c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d160:	e7d5      	b.n	800d10e <__d2b+0x2e>
 800d162:	6161      	str	r1, [r4, #20]
 800d164:	e7e5      	b.n	800d132 <__d2b+0x52>
 800d166:	a801      	add	r0, sp, #4
 800d168:	f7ff fce8 	bl	800cb3c <__lo0bits>
 800d16c:	9b01      	ldr	r3, [sp, #4]
 800d16e:	6163      	str	r3, [r4, #20]
 800d170:	2201      	movs	r2, #1
 800d172:	6122      	str	r2, [r4, #16]
 800d174:	3020      	adds	r0, #32
 800d176:	e7e3      	b.n	800d140 <__d2b+0x60>
 800d178:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d17c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d180:	f8c9 0000 	str.w	r0, [r9]
 800d184:	6918      	ldr	r0, [r3, #16]
 800d186:	f7ff fcb9 	bl	800cafc <__hi0bits>
 800d18a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d18e:	e7df      	b.n	800d150 <__d2b+0x70>
 800d190:	0800e76c 	.word	0x0800e76c
 800d194:	0800e860 	.word	0x0800e860

0800d198 <__ratio>:
 800d198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d19c:	4688      	mov	r8, r1
 800d19e:	4669      	mov	r1, sp
 800d1a0:	4681      	mov	r9, r0
 800d1a2:	f7ff ff4d 	bl	800d040 <__b2d>
 800d1a6:	a901      	add	r1, sp, #4
 800d1a8:	4640      	mov	r0, r8
 800d1aa:	ec55 4b10 	vmov	r4, r5, d0
 800d1ae:	f7ff ff47 	bl	800d040 <__b2d>
 800d1b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d1b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d1ba:	eba3 0c02 	sub.w	ip, r3, r2
 800d1be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d1c2:	1a9b      	subs	r3, r3, r2
 800d1c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d1c8:	ec51 0b10 	vmov	r0, r1, d0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	bfd6      	itet	le
 800d1d0:	460a      	movle	r2, r1
 800d1d2:	462a      	movgt	r2, r5
 800d1d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d1d8:	468b      	mov	fp, r1
 800d1da:	462f      	mov	r7, r5
 800d1dc:	bfd4      	ite	le
 800d1de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d1e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d1e6:	4620      	mov	r0, r4
 800d1e8:	ee10 2a10 	vmov	r2, s0
 800d1ec:	465b      	mov	r3, fp
 800d1ee:	4639      	mov	r1, r7
 800d1f0:	f7f3 fb2c 	bl	800084c <__aeabi_ddiv>
 800d1f4:	ec41 0b10 	vmov	d0, r0, r1
 800d1f8:	b003      	add	sp, #12
 800d1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1fe <__copybits>:
 800d1fe:	3901      	subs	r1, #1
 800d200:	b570      	push	{r4, r5, r6, lr}
 800d202:	1149      	asrs	r1, r1, #5
 800d204:	6914      	ldr	r4, [r2, #16]
 800d206:	3101      	adds	r1, #1
 800d208:	f102 0314 	add.w	r3, r2, #20
 800d20c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d210:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d214:	1f05      	subs	r5, r0, #4
 800d216:	42a3      	cmp	r3, r4
 800d218:	d30c      	bcc.n	800d234 <__copybits+0x36>
 800d21a:	1aa3      	subs	r3, r4, r2
 800d21c:	3b11      	subs	r3, #17
 800d21e:	f023 0303 	bic.w	r3, r3, #3
 800d222:	3211      	adds	r2, #17
 800d224:	42a2      	cmp	r2, r4
 800d226:	bf88      	it	hi
 800d228:	2300      	movhi	r3, #0
 800d22a:	4418      	add	r0, r3
 800d22c:	2300      	movs	r3, #0
 800d22e:	4288      	cmp	r0, r1
 800d230:	d305      	bcc.n	800d23e <__copybits+0x40>
 800d232:	bd70      	pop	{r4, r5, r6, pc}
 800d234:	f853 6b04 	ldr.w	r6, [r3], #4
 800d238:	f845 6f04 	str.w	r6, [r5, #4]!
 800d23c:	e7eb      	b.n	800d216 <__copybits+0x18>
 800d23e:	f840 3b04 	str.w	r3, [r0], #4
 800d242:	e7f4      	b.n	800d22e <__copybits+0x30>

0800d244 <__any_on>:
 800d244:	f100 0214 	add.w	r2, r0, #20
 800d248:	6900      	ldr	r0, [r0, #16]
 800d24a:	114b      	asrs	r3, r1, #5
 800d24c:	4298      	cmp	r0, r3
 800d24e:	b510      	push	{r4, lr}
 800d250:	db11      	blt.n	800d276 <__any_on+0x32>
 800d252:	dd0a      	ble.n	800d26a <__any_on+0x26>
 800d254:	f011 011f 	ands.w	r1, r1, #31
 800d258:	d007      	beq.n	800d26a <__any_on+0x26>
 800d25a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d25e:	fa24 f001 	lsr.w	r0, r4, r1
 800d262:	fa00 f101 	lsl.w	r1, r0, r1
 800d266:	428c      	cmp	r4, r1
 800d268:	d10b      	bne.n	800d282 <__any_on+0x3e>
 800d26a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d26e:	4293      	cmp	r3, r2
 800d270:	d803      	bhi.n	800d27a <__any_on+0x36>
 800d272:	2000      	movs	r0, #0
 800d274:	bd10      	pop	{r4, pc}
 800d276:	4603      	mov	r3, r0
 800d278:	e7f7      	b.n	800d26a <__any_on+0x26>
 800d27a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d27e:	2900      	cmp	r1, #0
 800d280:	d0f5      	beq.n	800d26e <__any_on+0x2a>
 800d282:	2001      	movs	r0, #1
 800d284:	e7f6      	b.n	800d274 <__any_on+0x30>

0800d286 <_calloc_r>:
 800d286:	b513      	push	{r0, r1, r4, lr}
 800d288:	434a      	muls	r2, r1
 800d28a:	4611      	mov	r1, r2
 800d28c:	9201      	str	r2, [sp, #4]
 800d28e:	f000 f859 	bl	800d344 <_malloc_r>
 800d292:	4604      	mov	r4, r0
 800d294:	b118      	cbz	r0, 800d29e <_calloc_r+0x18>
 800d296:	9a01      	ldr	r2, [sp, #4]
 800d298:	2100      	movs	r1, #0
 800d29a:	f7fc f86b 	bl	8009374 <memset>
 800d29e:	4620      	mov	r0, r4
 800d2a0:	b002      	add	sp, #8
 800d2a2:	bd10      	pop	{r4, pc}

0800d2a4 <_free_r>:
 800d2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2a6:	2900      	cmp	r1, #0
 800d2a8:	d048      	beq.n	800d33c <_free_r+0x98>
 800d2aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2ae:	9001      	str	r0, [sp, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f1a1 0404 	sub.w	r4, r1, #4
 800d2b6:	bfb8      	it	lt
 800d2b8:	18e4      	addlt	r4, r4, r3
 800d2ba:	f000 fc6f 	bl	800db9c <__malloc_lock>
 800d2be:	4a20      	ldr	r2, [pc, #128]	; (800d340 <_free_r+0x9c>)
 800d2c0:	9801      	ldr	r0, [sp, #4]
 800d2c2:	6813      	ldr	r3, [r2, #0]
 800d2c4:	4615      	mov	r5, r2
 800d2c6:	b933      	cbnz	r3, 800d2d6 <_free_r+0x32>
 800d2c8:	6063      	str	r3, [r4, #4]
 800d2ca:	6014      	str	r4, [r2, #0]
 800d2cc:	b003      	add	sp, #12
 800d2ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2d2:	f000 bc69 	b.w	800dba8 <__malloc_unlock>
 800d2d6:	42a3      	cmp	r3, r4
 800d2d8:	d90b      	bls.n	800d2f2 <_free_r+0x4e>
 800d2da:	6821      	ldr	r1, [r4, #0]
 800d2dc:	1862      	adds	r2, r4, r1
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	bf04      	itt	eq
 800d2e2:	681a      	ldreq	r2, [r3, #0]
 800d2e4:	685b      	ldreq	r3, [r3, #4]
 800d2e6:	6063      	str	r3, [r4, #4]
 800d2e8:	bf04      	itt	eq
 800d2ea:	1852      	addeq	r2, r2, r1
 800d2ec:	6022      	streq	r2, [r4, #0]
 800d2ee:	602c      	str	r4, [r5, #0]
 800d2f0:	e7ec      	b.n	800d2cc <_free_r+0x28>
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	b10b      	cbz	r3, 800d2fc <_free_r+0x58>
 800d2f8:	42a3      	cmp	r3, r4
 800d2fa:	d9fa      	bls.n	800d2f2 <_free_r+0x4e>
 800d2fc:	6811      	ldr	r1, [r2, #0]
 800d2fe:	1855      	adds	r5, r2, r1
 800d300:	42a5      	cmp	r5, r4
 800d302:	d10b      	bne.n	800d31c <_free_r+0x78>
 800d304:	6824      	ldr	r4, [r4, #0]
 800d306:	4421      	add	r1, r4
 800d308:	1854      	adds	r4, r2, r1
 800d30a:	42a3      	cmp	r3, r4
 800d30c:	6011      	str	r1, [r2, #0]
 800d30e:	d1dd      	bne.n	800d2cc <_free_r+0x28>
 800d310:	681c      	ldr	r4, [r3, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	6053      	str	r3, [r2, #4]
 800d316:	4421      	add	r1, r4
 800d318:	6011      	str	r1, [r2, #0]
 800d31a:	e7d7      	b.n	800d2cc <_free_r+0x28>
 800d31c:	d902      	bls.n	800d324 <_free_r+0x80>
 800d31e:	230c      	movs	r3, #12
 800d320:	6003      	str	r3, [r0, #0]
 800d322:	e7d3      	b.n	800d2cc <_free_r+0x28>
 800d324:	6825      	ldr	r5, [r4, #0]
 800d326:	1961      	adds	r1, r4, r5
 800d328:	428b      	cmp	r3, r1
 800d32a:	bf04      	itt	eq
 800d32c:	6819      	ldreq	r1, [r3, #0]
 800d32e:	685b      	ldreq	r3, [r3, #4]
 800d330:	6063      	str	r3, [r4, #4]
 800d332:	bf04      	itt	eq
 800d334:	1949      	addeq	r1, r1, r5
 800d336:	6021      	streq	r1, [r4, #0]
 800d338:	6054      	str	r4, [r2, #4]
 800d33a:	e7c7      	b.n	800d2cc <_free_r+0x28>
 800d33c:	b003      	add	sp, #12
 800d33e:	bd30      	pop	{r4, r5, pc}
 800d340:	20000200 	.word	0x20000200

0800d344 <_malloc_r>:
 800d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d346:	1ccd      	adds	r5, r1, #3
 800d348:	f025 0503 	bic.w	r5, r5, #3
 800d34c:	3508      	adds	r5, #8
 800d34e:	2d0c      	cmp	r5, #12
 800d350:	bf38      	it	cc
 800d352:	250c      	movcc	r5, #12
 800d354:	2d00      	cmp	r5, #0
 800d356:	4606      	mov	r6, r0
 800d358:	db01      	blt.n	800d35e <_malloc_r+0x1a>
 800d35a:	42a9      	cmp	r1, r5
 800d35c:	d903      	bls.n	800d366 <_malloc_r+0x22>
 800d35e:	230c      	movs	r3, #12
 800d360:	6033      	str	r3, [r6, #0]
 800d362:	2000      	movs	r0, #0
 800d364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d366:	f000 fc19 	bl	800db9c <__malloc_lock>
 800d36a:	4921      	ldr	r1, [pc, #132]	; (800d3f0 <_malloc_r+0xac>)
 800d36c:	680a      	ldr	r2, [r1, #0]
 800d36e:	4614      	mov	r4, r2
 800d370:	b99c      	cbnz	r4, 800d39a <_malloc_r+0x56>
 800d372:	4f20      	ldr	r7, [pc, #128]	; (800d3f4 <_malloc_r+0xb0>)
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	b923      	cbnz	r3, 800d382 <_malloc_r+0x3e>
 800d378:	4621      	mov	r1, r4
 800d37a:	4630      	mov	r0, r6
 800d37c:	f000 fafc 	bl	800d978 <_sbrk_r>
 800d380:	6038      	str	r0, [r7, #0]
 800d382:	4629      	mov	r1, r5
 800d384:	4630      	mov	r0, r6
 800d386:	f000 faf7 	bl	800d978 <_sbrk_r>
 800d38a:	1c43      	adds	r3, r0, #1
 800d38c:	d123      	bne.n	800d3d6 <_malloc_r+0x92>
 800d38e:	230c      	movs	r3, #12
 800d390:	6033      	str	r3, [r6, #0]
 800d392:	4630      	mov	r0, r6
 800d394:	f000 fc08 	bl	800dba8 <__malloc_unlock>
 800d398:	e7e3      	b.n	800d362 <_malloc_r+0x1e>
 800d39a:	6823      	ldr	r3, [r4, #0]
 800d39c:	1b5b      	subs	r3, r3, r5
 800d39e:	d417      	bmi.n	800d3d0 <_malloc_r+0x8c>
 800d3a0:	2b0b      	cmp	r3, #11
 800d3a2:	d903      	bls.n	800d3ac <_malloc_r+0x68>
 800d3a4:	6023      	str	r3, [r4, #0]
 800d3a6:	441c      	add	r4, r3
 800d3a8:	6025      	str	r5, [r4, #0]
 800d3aa:	e004      	b.n	800d3b6 <_malloc_r+0x72>
 800d3ac:	6863      	ldr	r3, [r4, #4]
 800d3ae:	42a2      	cmp	r2, r4
 800d3b0:	bf0c      	ite	eq
 800d3b2:	600b      	streq	r3, [r1, #0]
 800d3b4:	6053      	strne	r3, [r2, #4]
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f000 fbf6 	bl	800dba8 <__malloc_unlock>
 800d3bc:	f104 000b 	add.w	r0, r4, #11
 800d3c0:	1d23      	adds	r3, r4, #4
 800d3c2:	f020 0007 	bic.w	r0, r0, #7
 800d3c6:	1ac2      	subs	r2, r0, r3
 800d3c8:	d0cc      	beq.n	800d364 <_malloc_r+0x20>
 800d3ca:	1a1b      	subs	r3, r3, r0
 800d3cc:	50a3      	str	r3, [r4, r2]
 800d3ce:	e7c9      	b.n	800d364 <_malloc_r+0x20>
 800d3d0:	4622      	mov	r2, r4
 800d3d2:	6864      	ldr	r4, [r4, #4]
 800d3d4:	e7cc      	b.n	800d370 <_malloc_r+0x2c>
 800d3d6:	1cc4      	adds	r4, r0, #3
 800d3d8:	f024 0403 	bic.w	r4, r4, #3
 800d3dc:	42a0      	cmp	r0, r4
 800d3de:	d0e3      	beq.n	800d3a8 <_malloc_r+0x64>
 800d3e0:	1a21      	subs	r1, r4, r0
 800d3e2:	4630      	mov	r0, r6
 800d3e4:	f000 fac8 	bl	800d978 <_sbrk_r>
 800d3e8:	3001      	adds	r0, #1
 800d3ea:	d1dd      	bne.n	800d3a8 <_malloc_r+0x64>
 800d3ec:	e7cf      	b.n	800d38e <_malloc_r+0x4a>
 800d3ee:	bf00      	nop
 800d3f0:	20000200 	.word	0x20000200
 800d3f4:	20000204 	.word	0x20000204

0800d3f8 <__ssputs_r>:
 800d3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3fc:	688e      	ldr	r6, [r1, #8]
 800d3fe:	429e      	cmp	r6, r3
 800d400:	4682      	mov	sl, r0
 800d402:	460c      	mov	r4, r1
 800d404:	4690      	mov	r8, r2
 800d406:	461f      	mov	r7, r3
 800d408:	d838      	bhi.n	800d47c <__ssputs_r+0x84>
 800d40a:	898a      	ldrh	r2, [r1, #12]
 800d40c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d410:	d032      	beq.n	800d478 <__ssputs_r+0x80>
 800d412:	6825      	ldr	r5, [r4, #0]
 800d414:	6909      	ldr	r1, [r1, #16]
 800d416:	eba5 0901 	sub.w	r9, r5, r1
 800d41a:	6965      	ldr	r5, [r4, #20]
 800d41c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d420:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d424:	3301      	adds	r3, #1
 800d426:	444b      	add	r3, r9
 800d428:	106d      	asrs	r5, r5, #1
 800d42a:	429d      	cmp	r5, r3
 800d42c:	bf38      	it	cc
 800d42e:	461d      	movcc	r5, r3
 800d430:	0553      	lsls	r3, r2, #21
 800d432:	d531      	bpl.n	800d498 <__ssputs_r+0xa0>
 800d434:	4629      	mov	r1, r5
 800d436:	f7ff ff85 	bl	800d344 <_malloc_r>
 800d43a:	4606      	mov	r6, r0
 800d43c:	b950      	cbnz	r0, 800d454 <__ssputs_r+0x5c>
 800d43e:	230c      	movs	r3, #12
 800d440:	f8ca 3000 	str.w	r3, [sl]
 800d444:	89a3      	ldrh	r3, [r4, #12]
 800d446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d44a:	81a3      	strh	r3, [r4, #12]
 800d44c:	f04f 30ff 	mov.w	r0, #4294967295
 800d450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d454:	6921      	ldr	r1, [r4, #16]
 800d456:	464a      	mov	r2, r9
 800d458:	f7fb ff7e 	bl	8009358 <memcpy>
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d466:	81a3      	strh	r3, [r4, #12]
 800d468:	6126      	str	r6, [r4, #16]
 800d46a:	6165      	str	r5, [r4, #20]
 800d46c:	444e      	add	r6, r9
 800d46e:	eba5 0509 	sub.w	r5, r5, r9
 800d472:	6026      	str	r6, [r4, #0]
 800d474:	60a5      	str	r5, [r4, #8]
 800d476:	463e      	mov	r6, r7
 800d478:	42be      	cmp	r6, r7
 800d47a:	d900      	bls.n	800d47e <__ssputs_r+0x86>
 800d47c:	463e      	mov	r6, r7
 800d47e:	4632      	mov	r2, r6
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	4641      	mov	r1, r8
 800d484:	f000 fb70 	bl	800db68 <memmove>
 800d488:	68a3      	ldr	r3, [r4, #8]
 800d48a:	6822      	ldr	r2, [r4, #0]
 800d48c:	1b9b      	subs	r3, r3, r6
 800d48e:	4432      	add	r2, r6
 800d490:	60a3      	str	r3, [r4, #8]
 800d492:	6022      	str	r2, [r4, #0]
 800d494:	2000      	movs	r0, #0
 800d496:	e7db      	b.n	800d450 <__ssputs_r+0x58>
 800d498:	462a      	mov	r2, r5
 800d49a:	f000 fb8b 	bl	800dbb4 <_realloc_r>
 800d49e:	4606      	mov	r6, r0
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d1e1      	bne.n	800d468 <__ssputs_r+0x70>
 800d4a4:	6921      	ldr	r1, [r4, #16]
 800d4a6:	4650      	mov	r0, sl
 800d4a8:	f7ff fefc 	bl	800d2a4 <_free_r>
 800d4ac:	e7c7      	b.n	800d43e <__ssputs_r+0x46>
	...

0800d4b0 <_svfiprintf_r>:
 800d4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b4:	4698      	mov	r8, r3
 800d4b6:	898b      	ldrh	r3, [r1, #12]
 800d4b8:	061b      	lsls	r3, r3, #24
 800d4ba:	b09d      	sub	sp, #116	; 0x74
 800d4bc:	4607      	mov	r7, r0
 800d4be:	460d      	mov	r5, r1
 800d4c0:	4614      	mov	r4, r2
 800d4c2:	d50e      	bpl.n	800d4e2 <_svfiprintf_r+0x32>
 800d4c4:	690b      	ldr	r3, [r1, #16]
 800d4c6:	b963      	cbnz	r3, 800d4e2 <_svfiprintf_r+0x32>
 800d4c8:	2140      	movs	r1, #64	; 0x40
 800d4ca:	f7ff ff3b 	bl	800d344 <_malloc_r>
 800d4ce:	6028      	str	r0, [r5, #0]
 800d4d0:	6128      	str	r0, [r5, #16]
 800d4d2:	b920      	cbnz	r0, 800d4de <_svfiprintf_r+0x2e>
 800d4d4:	230c      	movs	r3, #12
 800d4d6:	603b      	str	r3, [r7, #0]
 800d4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4dc:	e0d1      	b.n	800d682 <_svfiprintf_r+0x1d2>
 800d4de:	2340      	movs	r3, #64	; 0x40
 800d4e0:	616b      	str	r3, [r5, #20]
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4e6:	2320      	movs	r3, #32
 800d4e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4f0:	2330      	movs	r3, #48	; 0x30
 800d4f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d69c <_svfiprintf_r+0x1ec>
 800d4f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4fa:	f04f 0901 	mov.w	r9, #1
 800d4fe:	4623      	mov	r3, r4
 800d500:	469a      	mov	sl, r3
 800d502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d506:	b10a      	cbz	r2, 800d50c <_svfiprintf_r+0x5c>
 800d508:	2a25      	cmp	r2, #37	; 0x25
 800d50a:	d1f9      	bne.n	800d500 <_svfiprintf_r+0x50>
 800d50c:	ebba 0b04 	subs.w	fp, sl, r4
 800d510:	d00b      	beq.n	800d52a <_svfiprintf_r+0x7a>
 800d512:	465b      	mov	r3, fp
 800d514:	4622      	mov	r2, r4
 800d516:	4629      	mov	r1, r5
 800d518:	4638      	mov	r0, r7
 800d51a:	f7ff ff6d 	bl	800d3f8 <__ssputs_r>
 800d51e:	3001      	adds	r0, #1
 800d520:	f000 80aa 	beq.w	800d678 <_svfiprintf_r+0x1c8>
 800d524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d526:	445a      	add	r2, fp
 800d528:	9209      	str	r2, [sp, #36]	; 0x24
 800d52a:	f89a 3000 	ldrb.w	r3, [sl]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f000 80a2 	beq.w	800d678 <_svfiprintf_r+0x1c8>
 800d534:	2300      	movs	r3, #0
 800d536:	f04f 32ff 	mov.w	r2, #4294967295
 800d53a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d53e:	f10a 0a01 	add.w	sl, sl, #1
 800d542:	9304      	str	r3, [sp, #16]
 800d544:	9307      	str	r3, [sp, #28]
 800d546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d54a:	931a      	str	r3, [sp, #104]	; 0x68
 800d54c:	4654      	mov	r4, sl
 800d54e:	2205      	movs	r2, #5
 800d550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d554:	4851      	ldr	r0, [pc, #324]	; (800d69c <_svfiprintf_r+0x1ec>)
 800d556:	f7f2 fe43 	bl	80001e0 <memchr>
 800d55a:	9a04      	ldr	r2, [sp, #16]
 800d55c:	b9d8      	cbnz	r0, 800d596 <_svfiprintf_r+0xe6>
 800d55e:	06d0      	lsls	r0, r2, #27
 800d560:	bf44      	itt	mi
 800d562:	2320      	movmi	r3, #32
 800d564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d568:	0711      	lsls	r1, r2, #28
 800d56a:	bf44      	itt	mi
 800d56c:	232b      	movmi	r3, #43	; 0x2b
 800d56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d572:	f89a 3000 	ldrb.w	r3, [sl]
 800d576:	2b2a      	cmp	r3, #42	; 0x2a
 800d578:	d015      	beq.n	800d5a6 <_svfiprintf_r+0xf6>
 800d57a:	9a07      	ldr	r2, [sp, #28]
 800d57c:	4654      	mov	r4, sl
 800d57e:	2000      	movs	r0, #0
 800d580:	f04f 0c0a 	mov.w	ip, #10
 800d584:	4621      	mov	r1, r4
 800d586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d58a:	3b30      	subs	r3, #48	; 0x30
 800d58c:	2b09      	cmp	r3, #9
 800d58e:	d94e      	bls.n	800d62e <_svfiprintf_r+0x17e>
 800d590:	b1b0      	cbz	r0, 800d5c0 <_svfiprintf_r+0x110>
 800d592:	9207      	str	r2, [sp, #28]
 800d594:	e014      	b.n	800d5c0 <_svfiprintf_r+0x110>
 800d596:	eba0 0308 	sub.w	r3, r0, r8
 800d59a:	fa09 f303 	lsl.w	r3, r9, r3
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	9304      	str	r3, [sp, #16]
 800d5a2:	46a2      	mov	sl, r4
 800d5a4:	e7d2      	b.n	800d54c <_svfiprintf_r+0x9c>
 800d5a6:	9b03      	ldr	r3, [sp, #12]
 800d5a8:	1d19      	adds	r1, r3, #4
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	9103      	str	r1, [sp, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	bfbb      	ittet	lt
 800d5b2:	425b      	neglt	r3, r3
 800d5b4:	f042 0202 	orrlt.w	r2, r2, #2
 800d5b8:	9307      	strge	r3, [sp, #28]
 800d5ba:	9307      	strlt	r3, [sp, #28]
 800d5bc:	bfb8      	it	lt
 800d5be:	9204      	strlt	r2, [sp, #16]
 800d5c0:	7823      	ldrb	r3, [r4, #0]
 800d5c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d5c4:	d10c      	bne.n	800d5e0 <_svfiprintf_r+0x130>
 800d5c6:	7863      	ldrb	r3, [r4, #1]
 800d5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ca:	d135      	bne.n	800d638 <_svfiprintf_r+0x188>
 800d5cc:	9b03      	ldr	r3, [sp, #12]
 800d5ce:	1d1a      	adds	r2, r3, #4
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	9203      	str	r2, [sp, #12]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	bfb8      	it	lt
 800d5d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5dc:	3402      	adds	r4, #2
 800d5de:	9305      	str	r3, [sp, #20]
 800d5e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d6ac <_svfiprintf_r+0x1fc>
 800d5e4:	7821      	ldrb	r1, [r4, #0]
 800d5e6:	2203      	movs	r2, #3
 800d5e8:	4650      	mov	r0, sl
 800d5ea:	f7f2 fdf9 	bl	80001e0 <memchr>
 800d5ee:	b140      	cbz	r0, 800d602 <_svfiprintf_r+0x152>
 800d5f0:	2340      	movs	r3, #64	; 0x40
 800d5f2:	eba0 000a 	sub.w	r0, r0, sl
 800d5f6:	fa03 f000 	lsl.w	r0, r3, r0
 800d5fa:	9b04      	ldr	r3, [sp, #16]
 800d5fc:	4303      	orrs	r3, r0
 800d5fe:	3401      	adds	r4, #1
 800d600:	9304      	str	r3, [sp, #16]
 800d602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d606:	4826      	ldr	r0, [pc, #152]	; (800d6a0 <_svfiprintf_r+0x1f0>)
 800d608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d60c:	2206      	movs	r2, #6
 800d60e:	f7f2 fde7 	bl	80001e0 <memchr>
 800d612:	2800      	cmp	r0, #0
 800d614:	d038      	beq.n	800d688 <_svfiprintf_r+0x1d8>
 800d616:	4b23      	ldr	r3, [pc, #140]	; (800d6a4 <_svfiprintf_r+0x1f4>)
 800d618:	bb1b      	cbnz	r3, 800d662 <_svfiprintf_r+0x1b2>
 800d61a:	9b03      	ldr	r3, [sp, #12]
 800d61c:	3307      	adds	r3, #7
 800d61e:	f023 0307 	bic.w	r3, r3, #7
 800d622:	3308      	adds	r3, #8
 800d624:	9303      	str	r3, [sp, #12]
 800d626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d628:	4433      	add	r3, r6
 800d62a:	9309      	str	r3, [sp, #36]	; 0x24
 800d62c:	e767      	b.n	800d4fe <_svfiprintf_r+0x4e>
 800d62e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d632:	460c      	mov	r4, r1
 800d634:	2001      	movs	r0, #1
 800d636:	e7a5      	b.n	800d584 <_svfiprintf_r+0xd4>
 800d638:	2300      	movs	r3, #0
 800d63a:	3401      	adds	r4, #1
 800d63c:	9305      	str	r3, [sp, #20]
 800d63e:	4619      	mov	r1, r3
 800d640:	f04f 0c0a 	mov.w	ip, #10
 800d644:	4620      	mov	r0, r4
 800d646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d64a:	3a30      	subs	r2, #48	; 0x30
 800d64c:	2a09      	cmp	r2, #9
 800d64e:	d903      	bls.n	800d658 <_svfiprintf_r+0x1a8>
 800d650:	2b00      	cmp	r3, #0
 800d652:	d0c5      	beq.n	800d5e0 <_svfiprintf_r+0x130>
 800d654:	9105      	str	r1, [sp, #20]
 800d656:	e7c3      	b.n	800d5e0 <_svfiprintf_r+0x130>
 800d658:	fb0c 2101 	mla	r1, ip, r1, r2
 800d65c:	4604      	mov	r4, r0
 800d65e:	2301      	movs	r3, #1
 800d660:	e7f0      	b.n	800d644 <_svfiprintf_r+0x194>
 800d662:	ab03      	add	r3, sp, #12
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	462a      	mov	r2, r5
 800d668:	4b0f      	ldr	r3, [pc, #60]	; (800d6a8 <_svfiprintf_r+0x1f8>)
 800d66a:	a904      	add	r1, sp, #16
 800d66c:	4638      	mov	r0, r7
 800d66e:	f7fb ff29 	bl	80094c4 <_printf_float>
 800d672:	1c42      	adds	r2, r0, #1
 800d674:	4606      	mov	r6, r0
 800d676:	d1d6      	bne.n	800d626 <_svfiprintf_r+0x176>
 800d678:	89ab      	ldrh	r3, [r5, #12]
 800d67a:	065b      	lsls	r3, r3, #25
 800d67c:	f53f af2c 	bmi.w	800d4d8 <_svfiprintf_r+0x28>
 800d680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d682:	b01d      	add	sp, #116	; 0x74
 800d684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d688:	ab03      	add	r3, sp, #12
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	462a      	mov	r2, r5
 800d68e:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <_svfiprintf_r+0x1f8>)
 800d690:	a904      	add	r1, sp, #16
 800d692:	4638      	mov	r0, r7
 800d694:	f7fc f9ba 	bl	8009a0c <_printf_i>
 800d698:	e7eb      	b.n	800d672 <_svfiprintf_r+0x1c2>
 800d69a:	bf00      	nop
 800d69c:	0800e9bc 	.word	0x0800e9bc
 800d6a0:	0800e9c6 	.word	0x0800e9c6
 800d6a4:	080094c5 	.word	0x080094c5
 800d6a8:	0800d3f9 	.word	0x0800d3f9
 800d6ac:	0800e9c2 	.word	0x0800e9c2

0800d6b0 <__sfputc_r>:
 800d6b0:	6893      	ldr	r3, [r2, #8]
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	b410      	push	{r4}
 800d6b8:	6093      	str	r3, [r2, #8]
 800d6ba:	da08      	bge.n	800d6ce <__sfputc_r+0x1e>
 800d6bc:	6994      	ldr	r4, [r2, #24]
 800d6be:	42a3      	cmp	r3, r4
 800d6c0:	db01      	blt.n	800d6c6 <__sfputc_r+0x16>
 800d6c2:	290a      	cmp	r1, #10
 800d6c4:	d103      	bne.n	800d6ce <__sfputc_r+0x1e>
 800d6c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6ca:	f7fd bc3b 	b.w	800af44 <__swbuf_r>
 800d6ce:	6813      	ldr	r3, [r2, #0]
 800d6d0:	1c58      	adds	r0, r3, #1
 800d6d2:	6010      	str	r0, [r2, #0]
 800d6d4:	7019      	strb	r1, [r3, #0]
 800d6d6:	4608      	mov	r0, r1
 800d6d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <__sfputs_r>:
 800d6de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e0:	4606      	mov	r6, r0
 800d6e2:	460f      	mov	r7, r1
 800d6e4:	4614      	mov	r4, r2
 800d6e6:	18d5      	adds	r5, r2, r3
 800d6e8:	42ac      	cmp	r4, r5
 800d6ea:	d101      	bne.n	800d6f0 <__sfputs_r+0x12>
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	e007      	b.n	800d700 <__sfputs_r+0x22>
 800d6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f4:	463a      	mov	r2, r7
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f7ff ffda 	bl	800d6b0 <__sfputc_r>
 800d6fc:	1c43      	adds	r3, r0, #1
 800d6fe:	d1f3      	bne.n	800d6e8 <__sfputs_r+0xa>
 800d700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d704 <_vfiprintf_r>:
 800d704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d708:	460d      	mov	r5, r1
 800d70a:	b09d      	sub	sp, #116	; 0x74
 800d70c:	4614      	mov	r4, r2
 800d70e:	4698      	mov	r8, r3
 800d710:	4606      	mov	r6, r0
 800d712:	b118      	cbz	r0, 800d71c <_vfiprintf_r+0x18>
 800d714:	6983      	ldr	r3, [r0, #24]
 800d716:	b90b      	cbnz	r3, 800d71c <_vfiprintf_r+0x18>
 800d718:	f7fe fc68 	bl	800bfec <__sinit>
 800d71c:	4b89      	ldr	r3, [pc, #548]	; (800d944 <_vfiprintf_r+0x240>)
 800d71e:	429d      	cmp	r5, r3
 800d720:	d11b      	bne.n	800d75a <_vfiprintf_r+0x56>
 800d722:	6875      	ldr	r5, [r6, #4]
 800d724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d726:	07d9      	lsls	r1, r3, #31
 800d728:	d405      	bmi.n	800d736 <_vfiprintf_r+0x32>
 800d72a:	89ab      	ldrh	r3, [r5, #12]
 800d72c:	059a      	lsls	r2, r3, #22
 800d72e:	d402      	bmi.n	800d736 <_vfiprintf_r+0x32>
 800d730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d732:	f7ff f86c 	bl	800c80e <__retarget_lock_acquire_recursive>
 800d736:	89ab      	ldrh	r3, [r5, #12]
 800d738:	071b      	lsls	r3, r3, #28
 800d73a:	d501      	bpl.n	800d740 <_vfiprintf_r+0x3c>
 800d73c:	692b      	ldr	r3, [r5, #16]
 800d73e:	b9eb      	cbnz	r3, 800d77c <_vfiprintf_r+0x78>
 800d740:	4629      	mov	r1, r5
 800d742:	4630      	mov	r0, r6
 800d744:	f7fd fc50 	bl	800afe8 <__swsetup_r>
 800d748:	b1c0      	cbz	r0, 800d77c <_vfiprintf_r+0x78>
 800d74a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d74c:	07dc      	lsls	r4, r3, #31
 800d74e:	d50e      	bpl.n	800d76e <_vfiprintf_r+0x6a>
 800d750:	f04f 30ff 	mov.w	r0, #4294967295
 800d754:	b01d      	add	sp, #116	; 0x74
 800d756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d75a:	4b7b      	ldr	r3, [pc, #492]	; (800d948 <_vfiprintf_r+0x244>)
 800d75c:	429d      	cmp	r5, r3
 800d75e:	d101      	bne.n	800d764 <_vfiprintf_r+0x60>
 800d760:	68b5      	ldr	r5, [r6, #8]
 800d762:	e7df      	b.n	800d724 <_vfiprintf_r+0x20>
 800d764:	4b79      	ldr	r3, [pc, #484]	; (800d94c <_vfiprintf_r+0x248>)
 800d766:	429d      	cmp	r5, r3
 800d768:	bf08      	it	eq
 800d76a:	68f5      	ldreq	r5, [r6, #12]
 800d76c:	e7da      	b.n	800d724 <_vfiprintf_r+0x20>
 800d76e:	89ab      	ldrh	r3, [r5, #12]
 800d770:	0598      	lsls	r0, r3, #22
 800d772:	d4ed      	bmi.n	800d750 <_vfiprintf_r+0x4c>
 800d774:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d776:	f7ff f84b 	bl	800c810 <__retarget_lock_release_recursive>
 800d77a:	e7e9      	b.n	800d750 <_vfiprintf_r+0x4c>
 800d77c:	2300      	movs	r3, #0
 800d77e:	9309      	str	r3, [sp, #36]	; 0x24
 800d780:	2320      	movs	r3, #32
 800d782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d786:	f8cd 800c 	str.w	r8, [sp, #12]
 800d78a:	2330      	movs	r3, #48	; 0x30
 800d78c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d950 <_vfiprintf_r+0x24c>
 800d790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d794:	f04f 0901 	mov.w	r9, #1
 800d798:	4623      	mov	r3, r4
 800d79a:	469a      	mov	sl, r3
 800d79c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7a0:	b10a      	cbz	r2, 800d7a6 <_vfiprintf_r+0xa2>
 800d7a2:	2a25      	cmp	r2, #37	; 0x25
 800d7a4:	d1f9      	bne.n	800d79a <_vfiprintf_r+0x96>
 800d7a6:	ebba 0b04 	subs.w	fp, sl, r4
 800d7aa:	d00b      	beq.n	800d7c4 <_vfiprintf_r+0xc0>
 800d7ac:	465b      	mov	r3, fp
 800d7ae:	4622      	mov	r2, r4
 800d7b0:	4629      	mov	r1, r5
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	f7ff ff93 	bl	800d6de <__sfputs_r>
 800d7b8:	3001      	adds	r0, #1
 800d7ba:	f000 80aa 	beq.w	800d912 <_vfiprintf_r+0x20e>
 800d7be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7c0:	445a      	add	r2, fp
 800d7c2:	9209      	str	r2, [sp, #36]	; 0x24
 800d7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 80a2 	beq.w	800d912 <_vfiprintf_r+0x20e>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7d8:	f10a 0a01 	add.w	sl, sl, #1
 800d7dc:	9304      	str	r3, [sp, #16]
 800d7de:	9307      	str	r3, [sp, #28]
 800d7e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7e4:	931a      	str	r3, [sp, #104]	; 0x68
 800d7e6:	4654      	mov	r4, sl
 800d7e8:	2205      	movs	r2, #5
 800d7ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ee:	4858      	ldr	r0, [pc, #352]	; (800d950 <_vfiprintf_r+0x24c>)
 800d7f0:	f7f2 fcf6 	bl	80001e0 <memchr>
 800d7f4:	9a04      	ldr	r2, [sp, #16]
 800d7f6:	b9d8      	cbnz	r0, 800d830 <_vfiprintf_r+0x12c>
 800d7f8:	06d1      	lsls	r1, r2, #27
 800d7fa:	bf44      	itt	mi
 800d7fc:	2320      	movmi	r3, #32
 800d7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d802:	0713      	lsls	r3, r2, #28
 800d804:	bf44      	itt	mi
 800d806:	232b      	movmi	r3, #43	; 0x2b
 800d808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d80c:	f89a 3000 	ldrb.w	r3, [sl]
 800d810:	2b2a      	cmp	r3, #42	; 0x2a
 800d812:	d015      	beq.n	800d840 <_vfiprintf_r+0x13c>
 800d814:	9a07      	ldr	r2, [sp, #28]
 800d816:	4654      	mov	r4, sl
 800d818:	2000      	movs	r0, #0
 800d81a:	f04f 0c0a 	mov.w	ip, #10
 800d81e:	4621      	mov	r1, r4
 800d820:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d824:	3b30      	subs	r3, #48	; 0x30
 800d826:	2b09      	cmp	r3, #9
 800d828:	d94e      	bls.n	800d8c8 <_vfiprintf_r+0x1c4>
 800d82a:	b1b0      	cbz	r0, 800d85a <_vfiprintf_r+0x156>
 800d82c:	9207      	str	r2, [sp, #28]
 800d82e:	e014      	b.n	800d85a <_vfiprintf_r+0x156>
 800d830:	eba0 0308 	sub.w	r3, r0, r8
 800d834:	fa09 f303 	lsl.w	r3, r9, r3
 800d838:	4313      	orrs	r3, r2
 800d83a:	9304      	str	r3, [sp, #16]
 800d83c:	46a2      	mov	sl, r4
 800d83e:	e7d2      	b.n	800d7e6 <_vfiprintf_r+0xe2>
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	1d19      	adds	r1, r3, #4
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	9103      	str	r1, [sp, #12]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	bfbb      	ittet	lt
 800d84c:	425b      	neglt	r3, r3
 800d84e:	f042 0202 	orrlt.w	r2, r2, #2
 800d852:	9307      	strge	r3, [sp, #28]
 800d854:	9307      	strlt	r3, [sp, #28]
 800d856:	bfb8      	it	lt
 800d858:	9204      	strlt	r2, [sp, #16]
 800d85a:	7823      	ldrb	r3, [r4, #0]
 800d85c:	2b2e      	cmp	r3, #46	; 0x2e
 800d85e:	d10c      	bne.n	800d87a <_vfiprintf_r+0x176>
 800d860:	7863      	ldrb	r3, [r4, #1]
 800d862:	2b2a      	cmp	r3, #42	; 0x2a
 800d864:	d135      	bne.n	800d8d2 <_vfiprintf_r+0x1ce>
 800d866:	9b03      	ldr	r3, [sp, #12]
 800d868:	1d1a      	adds	r2, r3, #4
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	9203      	str	r2, [sp, #12]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	bfb8      	it	lt
 800d872:	f04f 33ff 	movlt.w	r3, #4294967295
 800d876:	3402      	adds	r4, #2
 800d878:	9305      	str	r3, [sp, #20]
 800d87a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d960 <_vfiprintf_r+0x25c>
 800d87e:	7821      	ldrb	r1, [r4, #0]
 800d880:	2203      	movs	r2, #3
 800d882:	4650      	mov	r0, sl
 800d884:	f7f2 fcac 	bl	80001e0 <memchr>
 800d888:	b140      	cbz	r0, 800d89c <_vfiprintf_r+0x198>
 800d88a:	2340      	movs	r3, #64	; 0x40
 800d88c:	eba0 000a 	sub.w	r0, r0, sl
 800d890:	fa03 f000 	lsl.w	r0, r3, r0
 800d894:	9b04      	ldr	r3, [sp, #16]
 800d896:	4303      	orrs	r3, r0
 800d898:	3401      	adds	r4, #1
 800d89a:	9304      	str	r3, [sp, #16]
 800d89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a0:	482c      	ldr	r0, [pc, #176]	; (800d954 <_vfiprintf_r+0x250>)
 800d8a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8a6:	2206      	movs	r2, #6
 800d8a8:	f7f2 fc9a 	bl	80001e0 <memchr>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	d03f      	beq.n	800d930 <_vfiprintf_r+0x22c>
 800d8b0:	4b29      	ldr	r3, [pc, #164]	; (800d958 <_vfiprintf_r+0x254>)
 800d8b2:	bb1b      	cbnz	r3, 800d8fc <_vfiprintf_r+0x1f8>
 800d8b4:	9b03      	ldr	r3, [sp, #12]
 800d8b6:	3307      	adds	r3, #7
 800d8b8:	f023 0307 	bic.w	r3, r3, #7
 800d8bc:	3308      	adds	r3, #8
 800d8be:	9303      	str	r3, [sp, #12]
 800d8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c2:	443b      	add	r3, r7
 800d8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c6:	e767      	b.n	800d798 <_vfiprintf_r+0x94>
 800d8c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8cc:	460c      	mov	r4, r1
 800d8ce:	2001      	movs	r0, #1
 800d8d0:	e7a5      	b.n	800d81e <_vfiprintf_r+0x11a>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	3401      	adds	r4, #1
 800d8d6:	9305      	str	r3, [sp, #20]
 800d8d8:	4619      	mov	r1, r3
 800d8da:	f04f 0c0a 	mov.w	ip, #10
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8e4:	3a30      	subs	r2, #48	; 0x30
 800d8e6:	2a09      	cmp	r2, #9
 800d8e8:	d903      	bls.n	800d8f2 <_vfiprintf_r+0x1ee>
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d0c5      	beq.n	800d87a <_vfiprintf_r+0x176>
 800d8ee:	9105      	str	r1, [sp, #20]
 800d8f0:	e7c3      	b.n	800d87a <_vfiprintf_r+0x176>
 800d8f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e7f0      	b.n	800d8de <_vfiprintf_r+0x1da>
 800d8fc:	ab03      	add	r3, sp, #12
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	462a      	mov	r2, r5
 800d902:	4b16      	ldr	r3, [pc, #88]	; (800d95c <_vfiprintf_r+0x258>)
 800d904:	a904      	add	r1, sp, #16
 800d906:	4630      	mov	r0, r6
 800d908:	f7fb fddc 	bl	80094c4 <_printf_float>
 800d90c:	4607      	mov	r7, r0
 800d90e:	1c78      	adds	r0, r7, #1
 800d910:	d1d6      	bne.n	800d8c0 <_vfiprintf_r+0x1bc>
 800d912:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d914:	07d9      	lsls	r1, r3, #31
 800d916:	d405      	bmi.n	800d924 <_vfiprintf_r+0x220>
 800d918:	89ab      	ldrh	r3, [r5, #12]
 800d91a:	059a      	lsls	r2, r3, #22
 800d91c:	d402      	bmi.n	800d924 <_vfiprintf_r+0x220>
 800d91e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d920:	f7fe ff76 	bl	800c810 <__retarget_lock_release_recursive>
 800d924:	89ab      	ldrh	r3, [r5, #12]
 800d926:	065b      	lsls	r3, r3, #25
 800d928:	f53f af12 	bmi.w	800d750 <_vfiprintf_r+0x4c>
 800d92c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d92e:	e711      	b.n	800d754 <_vfiprintf_r+0x50>
 800d930:	ab03      	add	r3, sp, #12
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	462a      	mov	r2, r5
 800d936:	4b09      	ldr	r3, [pc, #36]	; (800d95c <_vfiprintf_r+0x258>)
 800d938:	a904      	add	r1, sp, #16
 800d93a:	4630      	mov	r0, r6
 800d93c:	f7fc f866 	bl	8009a0c <_printf_i>
 800d940:	e7e4      	b.n	800d90c <_vfiprintf_r+0x208>
 800d942:	bf00      	nop
 800d944:	0800e7a0 	.word	0x0800e7a0
 800d948:	0800e7c0 	.word	0x0800e7c0
 800d94c:	0800e780 	.word	0x0800e780
 800d950:	0800e9bc 	.word	0x0800e9bc
 800d954:	0800e9c6 	.word	0x0800e9c6
 800d958:	080094c5 	.word	0x080094c5
 800d95c:	0800d6df 	.word	0x0800d6df
 800d960:	0800e9c2 	.word	0x0800e9c2
 800d964:	00000000 	.word	0x00000000

0800d968 <nan>:
 800d968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d970 <nan+0x8>
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	00000000 	.word	0x00000000
 800d974:	7ff80000 	.word	0x7ff80000

0800d978 <_sbrk_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4d06      	ldr	r5, [pc, #24]	; (800d994 <_sbrk_r+0x1c>)
 800d97c:	2300      	movs	r3, #0
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	602b      	str	r3, [r5, #0]
 800d984:	f7f5 ff14 	bl	80037b0 <_sbrk>
 800d988:	1c43      	adds	r3, r0, #1
 800d98a:	d102      	bne.n	800d992 <_sbrk_r+0x1a>
 800d98c:	682b      	ldr	r3, [r5, #0]
 800d98e:	b103      	cbz	r3, 800d992 <_sbrk_r+0x1a>
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	200008b8 	.word	0x200008b8

0800d998 <__sread>:
 800d998:	b510      	push	{r4, lr}
 800d99a:	460c      	mov	r4, r1
 800d99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9a0:	f000 f92e 	bl	800dc00 <_read_r>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	bfab      	itete	ge
 800d9a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800d9ac:	181b      	addge	r3, r3, r0
 800d9ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9b2:	bfac      	ite	ge
 800d9b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9b6:	81a3      	strhlt	r3, [r4, #12]
 800d9b8:	bd10      	pop	{r4, pc}

0800d9ba <__swrite>:
 800d9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9be:	461f      	mov	r7, r3
 800d9c0:	898b      	ldrh	r3, [r1, #12]
 800d9c2:	05db      	lsls	r3, r3, #23
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	4616      	mov	r6, r2
 800d9ca:	d505      	bpl.n	800d9d8 <__swrite+0x1e>
 800d9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f000 f8b6 	bl	800db44 <_lseek_r>
 800d9d8:	89a3      	ldrh	r3, [r4, #12]
 800d9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9e2:	81a3      	strh	r3, [r4, #12]
 800d9e4:	4632      	mov	r2, r6
 800d9e6:	463b      	mov	r3, r7
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ee:	f000 b835 	b.w	800da5c <_write_r>

0800d9f2 <__sseek>:
 800d9f2:	b510      	push	{r4, lr}
 800d9f4:	460c      	mov	r4, r1
 800d9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9fa:	f000 f8a3 	bl	800db44 <_lseek_r>
 800d9fe:	1c43      	adds	r3, r0, #1
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	bf15      	itete	ne
 800da04:	6560      	strne	r0, [r4, #84]	; 0x54
 800da06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da0e:	81a3      	strheq	r3, [r4, #12]
 800da10:	bf18      	it	ne
 800da12:	81a3      	strhne	r3, [r4, #12]
 800da14:	bd10      	pop	{r4, pc}

0800da16 <__sclose>:
 800da16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da1a:	f000 b84f 	b.w	800dabc <_close_r>

0800da1e <strncmp>:
 800da1e:	b510      	push	{r4, lr}
 800da20:	b16a      	cbz	r2, 800da3e <strncmp+0x20>
 800da22:	3901      	subs	r1, #1
 800da24:	1884      	adds	r4, r0, r2
 800da26:	f810 3b01 	ldrb.w	r3, [r0], #1
 800da2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da2e:	4293      	cmp	r3, r2
 800da30:	d103      	bne.n	800da3a <strncmp+0x1c>
 800da32:	42a0      	cmp	r0, r4
 800da34:	d001      	beq.n	800da3a <strncmp+0x1c>
 800da36:	2b00      	cmp	r3, #0
 800da38:	d1f5      	bne.n	800da26 <strncmp+0x8>
 800da3a:	1a98      	subs	r0, r3, r2
 800da3c:	bd10      	pop	{r4, pc}
 800da3e:	4610      	mov	r0, r2
 800da40:	e7fc      	b.n	800da3c <strncmp+0x1e>

0800da42 <__ascii_wctomb>:
 800da42:	b149      	cbz	r1, 800da58 <__ascii_wctomb+0x16>
 800da44:	2aff      	cmp	r2, #255	; 0xff
 800da46:	bf85      	ittet	hi
 800da48:	238a      	movhi	r3, #138	; 0x8a
 800da4a:	6003      	strhi	r3, [r0, #0]
 800da4c:	700a      	strbls	r2, [r1, #0]
 800da4e:	f04f 30ff 	movhi.w	r0, #4294967295
 800da52:	bf98      	it	ls
 800da54:	2001      	movls	r0, #1
 800da56:	4770      	bx	lr
 800da58:	4608      	mov	r0, r1
 800da5a:	4770      	bx	lr

0800da5c <_write_r>:
 800da5c:	b538      	push	{r3, r4, r5, lr}
 800da5e:	4d07      	ldr	r5, [pc, #28]	; (800da7c <_write_r+0x20>)
 800da60:	4604      	mov	r4, r0
 800da62:	4608      	mov	r0, r1
 800da64:	4611      	mov	r1, r2
 800da66:	2200      	movs	r2, #0
 800da68:	602a      	str	r2, [r5, #0]
 800da6a:	461a      	mov	r2, r3
 800da6c:	f7f5 fe4f 	bl	800370e <_write>
 800da70:	1c43      	adds	r3, r0, #1
 800da72:	d102      	bne.n	800da7a <_write_r+0x1e>
 800da74:	682b      	ldr	r3, [r5, #0]
 800da76:	b103      	cbz	r3, 800da7a <_write_r+0x1e>
 800da78:	6023      	str	r3, [r4, #0]
 800da7a:	bd38      	pop	{r3, r4, r5, pc}
 800da7c:	200008b8 	.word	0x200008b8

0800da80 <__assert_func>:
 800da80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da82:	4614      	mov	r4, r2
 800da84:	461a      	mov	r2, r3
 800da86:	4b09      	ldr	r3, [pc, #36]	; (800daac <__assert_func+0x2c>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4605      	mov	r5, r0
 800da8c:	68d8      	ldr	r0, [r3, #12]
 800da8e:	b14c      	cbz	r4, 800daa4 <__assert_func+0x24>
 800da90:	4b07      	ldr	r3, [pc, #28]	; (800dab0 <__assert_func+0x30>)
 800da92:	9100      	str	r1, [sp, #0]
 800da94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da98:	4906      	ldr	r1, [pc, #24]	; (800dab4 <__assert_func+0x34>)
 800da9a:	462b      	mov	r3, r5
 800da9c:	f000 f81e 	bl	800dadc <fiprintf>
 800daa0:	f000 f8c0 	bl	800dc24 <abort>
 800daa4:	4b04      	ldr	r3, [pc, #16]	; (800dab8 <__assert_func+0x38>)
 800daa6:	461c      	mov	r4, r3
 800daa8:	e7f3      	b.n	800da92 <__assert_func+0x12>
 800daaa:	bf00      	nop
 800daac:	2000000c 	.word	0x2000000c
 800dab0:	0800e9cd 	.word	0x0800e9cd
 800dab4:	0800e9da 	.word	0x0800e9da
 800dab8:	0800ea08 	.word	0x0800ea08

0800dabc <_close_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	4d06      	ldr	r5, [pc, #24]	; (800dad8 <_close_r+0x1c>)
 800dac0:	2300      	movs	r3, #0
 800dac2:	4604      	mov	r4, r0
 800dac4:	4608      	mov	r0, r1
 800dac6:	602b      	str	r3, [r5, #0]
 800dac8:	f7f5 fe3d 	bl	8003746 <_close>
 800dacc:	1c43      	adds	r3, r0, #1
 800dace:	d102      	bne.n	800dad6 <_close_r+0x1a>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	b103      	cbz	r3, 800dad6 <_close_r+0x1a>
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	200008b8 	.word	0x200008b8

0800dadc <fiprintf>:
 800dadc:	b40e      	push	{r1, r2, r3}
 800dade:	b503      	push	{r0, r1, lr}
 800dae0:	4601      	mov	r1, r0
 800dae2:	ab03      	add	r3, sp, #12
 800dae4:	4805      	ldr	r0, [pc, #20]	; (800dafc <fiprintf+0x20>)
 800dae6:	f853 2b04 	ldr.w	r2, [r3], #4
 800daea:	6800      	ldr	r0, [r0, #0]
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	f7ff fe09 	bl	800d704 <_vfiprintf_r>
 800daf2:	b002      	add	sp, #8
 800daf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800daf8:	b003      	add	sp, #12
 800dafa:	4770      	bx	lr
 800dafc:	2000000c 	.word	0x2000000c

0800db00 <_fstat_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	4d07      	ldr	r5, [pc, #28]	; (800db20 <_fstat_r+0x20>)
 800db04:	2300      	movs	r3, #0
 800db06:	4604      	mov	r4, r0
 800db08:	4608      	mov	r0, r1
 800db0a:	4611      	mov	r1, r2
 800db0c:	602b      	str	r3, [r5, #0]
 800db0e:	f7f5 fe26 	bl	800375e <_fstat>
 800db12:	1c43      	adds	r3, r0, #1
 800db14:	d102      	bne.n	800db1c <_fstat_r+0x1c>
 800db16:	682b      	ldr	r3, [r5, #0]
 800db18:	b103      	cbz	r3, 800db1c <_fstat_r+0x1c>
 800db1a:	6023      	str	r3, [r4, #0]
 800db1c:	bd38      	pop	{r3, r4, r5, pc}
 800db1e:	bf00      	nop
 800db20:	200008b8 	.word	0x200008b8

0800db24 <_isatty_r>:
 800db24:	b538      	push	{r3, r4, r5, lr}
 800db26:	4d06      	ldr	r5, [pc, #24]	; (800db40 <_isatty_r+0x1c>)
 800db28:	2300      	movs	r3, #0
 800db2a:	4604      	mov	r4, r0
 800db2c:	4608      	mov	r0, r1
 800db2e:	602b      	str	r3, [r5, #0]
 800db30:	f7f5 fe25 	bl	800377e <_isatty>
 800db34:	1c43      	adds	r3, r0, #1
 800db36:	d102      	bne.n	800db3e <_isatty_r+0x1a>
 800db38:	682b      	ldr	r3, [r5, #0]
 800db3a:	b103      	cbz	r3, 800db3e <_isatty_r+0x1a>
 800db3c:	6023      	str	r3, [r4, #0]
 800db3e:	bd38      	pop	{r3, r4, r5, pc}
 800db40:	200008b8 	.word	0x200008b8

0800db44 <_lseek_r>:
 800db44:	b538      	push	{r3, r4, r5, lr}
 800db46:	4d07      	ldr	r5, [pc, #28]	; (800db64 <_lseek_r+0x20>)
 800db48:	4604      	mov	r4, r0
 800db4a:	4608      	mov	r0, r1
 800db4c:	4611      	mov	r1, r2
 800db4e:	2200      	movs	r2, #0
 800db50:	602a      	str	r2, [r5, #0]
 800db52:	461a      	mov	r2, r3
 800db54:	f7f5 fe1e 	bl	8003794 <_lseek>
 800db58:	1c43      	adds	r3, r0, #1
 800db5a:	d102      	bne.n	800db62 <_lseek_r+0x1e>
 800db5c:	682b      	ldr	r3, [r5, #0]
 800db5e:	b103      	cbz	r3, 800db62 <_lseek_r+0x1e>
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	bd38      	pop	{r3, r4, r5, pc}
 800db64:	200008b8 	.word	0x200008b8

0800db68 <memmove>:
 800db68:	4288      	cmp	r0, r1
 800db6a:	b510      	push	{r4, lr}
 800db6c:	eb01 0402 	add.w	r4, r1, r2
 800db70:	d902      	bls.n	800db78 <memmove+0x10>
 800db72:	4284      	cmp	r4, r0
 800db74:	4623      	mov	r3, r4
 800db76:	d807      	bhi.n	800db88 <memmove+0x20>
 800db78:	1e43      	subs	r3, r0, #1
 800db7a:	42a1      	cmp	r1, r4
 800db7c:	d008      	beq.n	800db90 <memmove+0x28>
 800db7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db86:	e7f8      	b.n	800db7a <memmove+0x12>
 800db88:	4402      	add	r2, r0
 800db8a:	4601      	mov	r1, r0
 800db8c:	428a      	cmp	r2, r1
 800db8e:	d100      	bne.n	800db92 <memmove+0x2a>
 800db90:	bd10      	pop	{r4, pc}
 800db92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db9a:	e7f7      	b.n	800db8c <memmove+0x24>

0800db9c <__malloc_lock>:
 800db9c:	4801      	ldr	r0, [pc, #4]	; (800dba4 <__malloc_lock+0x8>)
 800db9e:	f7fe be36 	b.w	800c80e <__retarget_lock_acquire_recursive>
 800dba2:	bf00      	nop
 800dba4:	200008b0 	.word	0x200008b0

0800dba8 <__malloc_unlock>:
 800dba8:	4801      	ldr	r0, [pc, #4]	; (800dbb0 <__malloc_unlock+0x8>)
 800dbaa:	f7fe be31 	b.w	800c810 <__retarget_lock_release_recursive>
 800dbae:	bf00      	nop
 800dbb0:	200008b0 	.word	0x200008b0

0800dbb4 <_realloc_r>:
 800dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb6:	4607      	mov	r7, r0
 800dbb8:	4614      	mov	r4, r2
 800dbba:	460e      	mov	r6, r1
 800dbbc:	b921      	cbnz	r1, 800dbc8 <_realloc_r+0x14>
 800dbbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dbc2:	4611      	mov	r1, r2
 800dbc4:	f7ff bbbe 	b.w	800d344 <_malloc_r>
 800dbc8:	b922      	cbnz	r2, 800dbd4 <_realloc_r+0x20>
 800dbca:	f7ff fb6b 	bl	800d2a4 <_free_r>
 800dbce:	4625      	mov	r5, r4
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbd4:	f000 f82d 	bl	800dc32 <_malloc_usable_size_r>
 800dbd8:	42a0      	cmp	r0, r4
 800dbda:	d20f      	bcs.n	800dbfc <_realloc_r+0x48>
 800dbdc:	4621      	mov	r1, r4
 800dbde:	4638      	mov	r0, r7
 800dbe0:	f7ff fbb0 	bl	800d344 <_malloc_r>
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	d0f2      	beq.n	800dbd0 <_realloc_r+0x1c>
 800dbea:	4631      	mov	r1, r6
 800dbec:	4622      	mov	r2, r4
 800dbee:	f7fb fbb3 	bl	8009358 <memcpy>
 800dbf2:	4631      	mov	r1, r6
 800dbf4:	4638      	mov	r0, r7
 800dbf6:	f7ff fb55 	bl	800d2a4 <_free_r>
 800dbfa:	e7e9      	b.n	800dbd0 <_realloc_r+0x1c>
 800dbfc:	4635      	mov	r5, r6
 800dbfe:	e7e7      	b.n	800dbd0 <_realloc_r+0x1c>

0800dc00 <_read_r>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	4d07      	ldr	r5, [pc, #28]	; (800dc20 <_read_r+0x20>)
 800dc04:	4604      	mov	r4, r0
 800dc06:	4608      	mov	r0, r1
 800dc08:	4611      	mov	r1, r2
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	602a      	str	r2, [r5, #0]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f7f5 fd60 	bl	80036d4 <_read>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	d102      	bne.n	800dc1e <_read_r+0x1e>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	b103      	cbz	r3, 800dc1e <_read_r+0x1e>
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	200008b8 	.word	0x200008b8

0800dc24 <abort>:
 800dc24:	b508      	push	{r3, lr}
 800dc26:	2006      	movs	r0, #6
 800dc28:	f000 f834 	bl	800dc94 <raise>
 800dc2c:	2001      	movs	r0, #1
 800dc2e:	f7f5 fd47 	bl	80036c0 <_exit>

0800dc32 <_malloc_usable_size_r>:
 800dc32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc36:	1f18      	subs	r0, r3, #4
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	bfbc      	itt	lt
 800dc3c:	580b      	ldrlt	r3, [r1, r0]
 800dc3e:	18c0      	addlt	r0, r0, r3
 800dc40:	4770      	bx	lr

0800dc42 <_raise_r>:
 800dc42:	291f      	cmp	r1, #31
 800dc44:	b538      	push	{r3, r4, r5, lr}
 800dc46:	4604      	mov	r4, r0
 800dc48:	460d      	mov	r5, r1
 800dc4a:	d904      	bls.n	800dc56 <_raise_r+0x14>
 800dc4c:	2316      	movs	r3, #22
 800dc4e:	6003      	str	r3, [r0, #0]
 800dc50:	f04f 30ff 	mov.w	r0, #4294967295
 800dc54:	bd38      	pop	{r3, r4, r5, pc}
 800dc56:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc58:	b112      	cbz	r2, 800dc60 <_raise_r+0x1e>
 800dc5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc5e:	b94b      	cbnz	r3, 800dc74 <_raise_r+0x32>
 800dc60:	4620      	mov	r0, r4
 800dc62:	f000 f831 	bl	800dcc8 <_getpid_r>
 800dc66:	462a      	mov	r2, r5
 800dc68:	4601      	mov	r1, r0
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc70:	f000 b818 	b.w	800dca4 <_kill_r>
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d00a      	beq.n	800dc8e <_raise_r+0x4c>
 800dc78:	1c59      	adds	r1, r3, #1
 800dc7a:	d103      	bne.n	800dc84 <_raise_r+0x42>
 800dc7c:	2316      	movs	r3, #22
 800dc7e:	6003      	str	r3, [r0, #0]
 800dc80:	2001      	movs	r0, #1
 800dc82:	e7e7      	b.n	800dc54 <_raise_r+0x12>
 800dc84:	2400      	movs	r4, #0
 800dc86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	4798      	blx	r3
 800dc8e:	2000      	movs	r0, #0
 800dc90:	e7e0      	b.n	800dc54 <_raise_r+0x12>
	...

0800dc94 <raise>:
 800dc94:	4b02      	ldr	r3, [pc, #8]	; (800dca0 <raise+0xc>)
 800dc96:	4601      	mov	r1, r0
 800dc98:	6818      	ldr	r0, [r3, #0]
 800dc9a:	f7ff bfd2 	b.w	800dc42 <_raise_r>
 800dc9e:	bf00      	nop
 800dca0:	2000000c 	.word	0x2000000c

0800dca4 <_kill_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4d07      	ldr	r5, [pc, #28]	; (800dcc4 <_kill_r+0x20>)
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	4611      	mov	r1, r2
 800dcb0:	602b      	str	r3, [r5, #0]
 800dcb2:	f7f5 fcf5 	bl	80036a0 <_kill>
 800dcb6:	1c43      	adds	r3, r0, #1
 800dcb8:	d102      	bne.n	800dcc0 <_kill_r+0x1c>
 800dcba:	682b      	ldr	r3, [r5, #0]
 800dcbc:	b103      	cbz	r3, 800dcc0 <_kill_r+0x1c>
 800dcbe:	6023      	str	r3, [r4, #0]
 800dcc0:	bd38      	pop	{r3, r4, r5, pc}
 800dcc2:	bf00      	nop
 800dcc4:	200008b8 	.word	0x200008b8

0800dcc8 <_getpid_r>:
 800dcc8:	f7f5 bce2 	b.w	8003690 <_getpid>

0800dccc <_init>:
 800dccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcce:	bf00      	nop
 800dcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcd2:	bc08      	pop	{r3}
 800dcd4:	469e      	mov	lr, r3
 800dcd6:	4770      	bx	lr

0800dcd8 <_fini>:
 800dcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcda:	bf00      	nop
 800dcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcde:	bc08      	pop	{r3}
 800dce0:	469e      	mov	lr, r3
 800dce2:	4770      	bx	lr
