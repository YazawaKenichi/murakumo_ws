
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800ff90  0800ff90  0001ff90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010698  08010698  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08010698  08010698  00020698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106a0  080106a0  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106a0  080106a0  000206a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106a4  080106a4  000206a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080106a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017ea0  200001e0  08010888  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018080  08010888  00038080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f84c  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000066b2  00000000  00000000  0006fa5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f18  00000000  00000000  00076110  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c80  00000000  00000000  00078028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029e5f  00000000  00000000  00079ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002105c  00000000  00000000  000a3b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5c6a  00000000  00000000  000c4b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019a7cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000905c  00000000  00000000  0019a848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ff74 	.word	0x0800ff74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ff74 	.word	0x0800ff74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <imu_read_byte>:

uint8_t initialized = 0;
Inertial inertial;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <imu_read_byte+0x54>)
 8000fa4:	f006 fd00 	bl	80079a8 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 8000fa8:	f107 010f 	add.w	r1, r7, #15
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	2201      	movs	r2, #1
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <imu_read_byte+0x58>)
 8000fb2:	f007 fb3c 	bl	800862e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 8000fb6:	f107 010e 	add.w	r1, r7, #14
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <imu_read_byte+0x58>)
 8000fc0:	f007 fc71 	bl	80088a6 <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <imu_read_byte+0x54>)
 8000fcc:	f006 fcec 	bl	80079a8 <HAL_GPIO_WritePin>
#endif
	return val;
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	200061ec 	.word	0x200061ec

08000fe4 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <imu_write_byte+0x54>)
 8001006:	f006 fccf 	bl	80079a8 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100a:	f107 010f 	add.w	r1, r7, #15
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	2201      	movs	r2, #1
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <imu_write_byte+0x58>)
 8001014:	f007 fb0b 	bl	800862e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 8001018:	1db9      	adds	r1, r7, #6
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	2201      	movs	r2, #1
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <imu_write_byte+0x58>)
 8001020:	f007 fb05 	bl	800862e <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <imu_write_byte+0x54>)
 800102c:	f006 fcbc 	bl	80079a8 <HAL_GPIO_WritePin>
#endif
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40020400 	.word	0x40020400
 800103c:	200061ec 	.word	0x200061ec

08001040 <imu_init>:
 * @fn imu_init()
 * @brief 
 * 
 */
void imu_init()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	if(initialized == 0)
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <imu_init+0x54>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d11d      	bne.n	800108a <imu_init+0x4a>
	{
		printf("Starting SPI2 (IMU)\r\n");
 800104e:	4812      	ldr	r0, [pc, #72]	; (8001098 <imu_init+0x58>)
 8001050:	f00a fb5e 	bl	800b710 <puts>
		uint8_t wai, ret;
		ret = imu_initialize(&wai);
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f826 	bl	80010a8 <imu_initialize>
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
		printf("who_am_i = %d\r\n", wai);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	4619      	mov	r1, r3
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <imu_init+0x5c>)
 8001066:	f00a fadf 	bl	800b628 <iprintf>
		if(ret == 1)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d103      	bne.n	8001078 <imu_init+0x38>
		{
			printf("SPI INIT COLLECT!\r\n");
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <imu_init+0x60>)
 8001072:	f00a fb4d 	bl	800b710 <puts>
 8001076:	e002      	b.n	800107e <imu_init+0x3e>
		}
		else
		{
			printf("SPI INIT FAILURE x_x \r\n");
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <imu_init+0x64>)
 800107a:	f00a fb49 	bl	800b710 <puts>
		}
		initialized = initialized + 1;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <imu_init+0x54>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b03      	ldr	r3, [pc, #12]	; (8001094 <imu_init+0x54>)
 8001088:	701a      	strb	r2, [r3, #0]
	}
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001fc 	.word	0x200001fc
 8001098:	0800ff90 	.word	0x0800ff90
 800109c:	0800ffa8 	.word	0x0800ffa8
 80010a0:	0800ffb8 	.word	0x0800ffb8
 80010a4:	0800ffcc 	.word	0x0800ffcc

080010a8 <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	CS_RESET;
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	4833      	ldr	r0, [pc, #204]	; (8001184 <imu_initialize+0xdc>)
 80010b8:	f006 fc76 	bl	80079a8 <HAL_GPIO_WritePin>
	uint8_t who_am_i, ret;
	ret = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

#if	INIT_ZERO
	inertial.linear = vector3_creation(0, 0, 0);
 80010c0:	4c31      	ldr	r4, [pc, #196]	; (8001188 <imu_initialize+0xe0>)
 80010c2:	ed9f 1a32 	vldr	s2, [pc, #200]	; 800118c <imu_initialize+0xe4>
 80010c6:	eddf 0a31 	vldr	s1, [pc, #196]	; 800118c <imu_initialize+0xe4>
 80010ca:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800118c <imu_initialize+0xe4>
 80010ce:	f001 fd37 	bl	8002b40 <vector3_creation>
 80010d2:	eef0 6a40 	vmov.f32	s13, s0
 80010d6:	eeb0 7a60 	vmov.f32	s14, s1
 80010da:	eef0 7a41 	vmov.f32	s15, s2
 80010de:	edc4 6a00 	vstr	s13, [r4]
 80010e2:	ed84 7a01 	vstr	s14, [r4, #4]
 80010e6:	edc4 7a02 	vstr	s15, [r4, #8]
	inertial.angular = vector3_creation(0, 0, 0);
 80010ea:	4c27      	ldr	r4, [pc, #156]	; (8001188 <imu_initialize+0xe0>)
 80010ec:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800118c <imu_initialize+0xe4>
 80010f0:	eddf 0a26 	vldr	s1, [pc, #152]	; 800118c <imu_initialize+0xe4>
 80010f4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800118c <imu_initialize+0xe4>
 80010f8:	f001 fd22 	bl	8002b40 <vector3_creation>
 80010fc:	eef0 6a40 	vmov.f32	s13, s0
 8001100:	eeb0 7a60 	vmov.f32	s14, s1
 8001104:	eef0 7a41 	vmov.f32	s15, s2
 8001108:	edc4 6a03 	vstr	s13, [r4, #12]
 800110c:	ed84 7a04 	vstr	s14, [r4, #16]
 8001110:	edc4 7a05 	vstr	s15, [r4, #20]
#endif

	//! User Bank 0 を選択
	imu_write_byte(REG_BANK_SEL, 0x00);
 8001114:	2100      	movs	r1, #0
 8001116:	207f      	movs	r0, #127	; 0x7f
 8001118:	f7ff ff64 	bl	8000fe4 <imu_write_byte>
	who_am_i = imu_read_byte(0x00);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff ff33 	bl	8000f88 <imu_read_byte>
 8001122:	4603      	mov	r3, r0
 8001124:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7bba      	ldrb	r2, [r7, #14]
 800112a:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	2be0      	cmp	r3, #224	; 0xe0
 8001130:	d11c      	bne.n	800116c <imu_initialize+0xc4>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
		//! PWR_MGMT_1 推奨値 1
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 8001136:	2101      	movs	r1, #1
 8001138:	2006      	movs	r0, #6
 800113a:	f7ff ff53 	bl	8000fe4 <imu_write_byte>
		//! PWR_MGMt_2 推奨値 0
		// imu_write_byte(PWR_MGMT_2, 0x00);
		HAL_Delay(100);
 800113e:	2064      	movs	r0, #100	; 0x64
 8001140:	f004 fe36 	bl	8005db0 <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 8001144:	2110      	movs	r1, #16
 8001146:	2003      	movs	r0, #3
 8001148:	f7ff ff4c 	bl	8000fe4 <imu_write_byte>
		 * 	10 : User Bank 2 : 加速度と角速度の値の設定ができる
		 * 	11 : User Bank 3 : I2C の設定が行える
		 * 
		 */
		//! User Bank 2 を選択
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 800114c:	2120      	movs	r1, #32
 800114e:	207f      	movs	r0, #127	; 0x7f
 8001150:	f7ff ff48 	bl	8000fe4 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 9     [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2000 [dps] & bypass ) -> 0b 0000 0110 -> 0x06
		imu_write_byte(0x01, 0x06);
 8001154:	2106      	movs	r1, #6
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff ff44 	bl	8000fe4 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 4.5   [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2 [dps] & bypass ) -> 0b 0000 0000 -> 0x06
		imu_write_byte(0x14, 0x00);
 800115c:	2100      	movs	r1, #0
 800115e:	2014      	movs	r0, #20
 8001160:	f7ff ff40 	bl	8000fe4 <imu_write_byte>

		//! User Bank 0 に戻す
		imu_write_byte(REG_BANK_SEL, 0x00);
 8001164:	2100      	movs	r1, #0
 8001166:	207f      	movs	r0, #127	; 0x7f
 8001168:	f7ff ff3c 	bl	8000fe4 <imu_write_byte>
	}
#if USE_NCS
	CS_SET;
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <imu_initialize+0xdc>)
 8001174:	f006 fc18 	bl	80079a8 <HAL_GPIO_WritePin>
#endif
	return ret;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	40020400 	.word	0x40020400
 8001188:	20000210 	.word	0x20000210
 800118c:	00000000 	.word	0x00000000

08001190 <imu_start>:

void imu_start()
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	/* imu_start */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <imu_stop>:

void imu_stop()
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
#if !USE_NCS
	CS_SET;
#endif
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <imu_update_gyro>:
 * --- --- --- --- --- --- --- --- --- ---
 * @attention 値を代入したら外部参照変数を呼び出して値を取得することになる
 *
*/
void imu_update_gyro()
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
	float k_gyro;
	int16_t byte_data;
	float tmp;

	k_gyro = (GYRO_RANGE / (float) MAXDATA_RANGE);
 80011b6:	4b56      	ldr	r3, [pc, #344]	; (8001310 <imu_update_gyro+0x160>)
 80011b8:	60fb      	str	r3, [r7, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 80011ba:	2033      	movs	r0, #51	; 0x33
 80011bc:	f7ff fee4 	bl	8000f88 <imu_read_byte>
 80011c0:	4603      	mov	r3, r0
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21c      	sxth	r4, r3
 80011c6:	2034      	movs	r0, #52	; 0x34
 80011c8:	f7ff fede 	bl	8000f88 <imu_read_byte>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4323      	orrs	r3, r4
 80011d2:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 80011d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.x = low_pass_filter(tmp, inertial.angular.x, LPF_RATE);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff f9ab 	bl	8000548 <__aeabi_f2d>
 80011f2:	4604      	mov	r4, r0
 80011f4:	460d      	mov	r5, r1
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <imu_update_gyro+0x164>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9a4 	bl	8000548 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	ed9f 2b40 	vldr	d2, [pc, #256]	; 8001308 <imu_update_gyro+0x158>
 8001208:	ec43 2b11 	vmov	d1, r2, r3
 800120c:	ec45 4b10 	vmov	d0, r4, r5
 8001210:	f001 fc60 	bl	8002ad4 <low_pass_filter>
 8001214:	ec54 3b10 	vmov	r3, r4, d0
 8001218:	4618      	mov	r0, r3
 800121a:	4621      	mov	r1, r4
 800121c:	f7ff fce4 	bl	8000be8 <__aeabi_d2f>
 8001220:	4602      	mov	r2, r0
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <imu_update_gyro+0x164>)
 8001224:	60da      	str	r2, [r3, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 8001226:	2035      	movs	r0, #53	; 0x35
 8001228:	f7ff feae 	bl	8000f88 <imu_read_byte>
 800122c:	4603      	mov	r3, r0
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21c      	sxth	r4, r3
 8001232:	2036      	movs	r0, #54	; 0x36
 8001234:	f7ff fea8 	bl	8000f88 <imu_read_byte>
 8001238:	4603      	mov	r3, r0
 800123a:	b21b      	sxth	r3, r3
 800123c:	4323      	orrs	r3, r4
 800123e:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 8001240:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001254:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.y = low_pass_filter(tmp, inertial.angular.y, LPF_RATE);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff f975 	bl	8000548 <__aeabi_f2d>
 800125e:	4604      	mov	r4, r0
 8001260:	460d      	mov	r5, r1
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <imu_update_gyro+0x164>)
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f96e 	bl	8000548 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8001308 <imu_update_gyro+0x158>
 8001274:	ec43 2b11 	vmov	d1, r2, r3
 8001278:	ec45 4b10 	vmov	d0, r4, r5
 800127c:	f001 fc2a 	bl	8002ad4 <low_pass_filter>
 8001280:	ec54 3b10 	vmov	r3, r4, d0
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fcae 	bl	8000be8 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <imu_update_gyro+0x164>)
 8001290:	611a      	str	r2, [r3, #16]

	byte_data = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 8001292:	2037      	movs	r0, #55	; 0x37
 8001294:	f7ff fe78 	bl	8000f88 <imu_read_byte>
 8001298:	4603      	mov	r3, r0
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b21c      	sxth	r4, r3
 800129e:	2038      	movs	r0, #56	; 0x38
 80012a0:	f7ff fe72 	bl	8000f88 <imu_read_byte>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4323      	orrs	r3, r4
 80012aa:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 80012ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c0:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.z = low_pass_filter(tmp, inertial.angular.z, LPF_RATE);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_f2d>
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <imu_update_gyro+0x164>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f938 	bl	8000548 <__aeabi_f2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001308 <imu_update_gyro+0x158>
 80012e0:	ec43 2b11 	vmov	d1, r2, r3
 80012e4:	ec45 4b10 	vmov	d0, r4, r5
 80012e8:	f001 fbf4 	bl	8002ad4 <low_pass_filter>
 80012ec:	ec54 3b10 	vmov	r3, r4, d0
 80012f0:	4618      	mov	r0, r3
 80012f2:	4621      	mov	r1, r4
 80012f4:	f7ff fc78 	bl	8000be8 <__aeabi_d2f>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <imu_update_gyro+0x164>)
 80012fc:	615a      	str	r2, [r3, #20]
	 * 		float y;
	 * 		float z;
	 * } Vector3;
	 * 
	 */
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bdb0      	pop	{r4, r5, r7, pc}
 8001306:	bf00      	nop
 8001308:	40000000 	.word	0x40000000
 800130c:	3fd33333 	.word	0x3fd33333
 8001310:	3d7a0000 	.word	0x3d7a0000
 8001314:	20000210 	.word	0x20000210

08001318 <imu_read_yaw>:
 * @return float 
 * @attention [ degree ]
 * 
 */
float imu_read_yaw()
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	//! バイアス補正を加味した返り値（ inertial.angular.z はすでに LPF を通されている ）
	return inertial.angular.z - (BIAS_AVERAGE - TRUE_VALUE);
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <imu_read_yaw+0x20>)
 800131e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001322:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800133c <imu_read_yaw+0x24>
 8001326:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000210 	.word	0x20000210
 800133c:	3e0a704c 	.word	0x3e0a704c

08001340 <led_init>:

uint8_t current_value;
uint8_t current_rgb_value;

void led_init()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    current_value = 0b11;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <led_init+0x24>)
 8001346:	2203      	movs	r2, #3
 8001348:	701a      	strb	r2, [r3, #0]
    current_rgb_value = 0b111;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <led_init+0x28>)
 800134c:	2207      	movs	r2, #7
 800134e:	701a      	strb	r2, [r3, #0]
    led_write_led(0b11, 0b11);
 8001350:	2103      	movs	r1, #3
 8001352:	2003      	movs	r0, #3
 8001354:	f000 f8ae 	bl	80014b4 <led_write_led>
    led_write_rgb(0b111);
 8001358:	2007      	movs	r0, #7
 800135a:	f000 f86b 	bl	8001434 <led_write_rgb>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000228 	.word	0x20000228
 8001368:	20000229 	.word	0x20000229

0800136c <led_start>:

void led_start()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 8001370:	2100      	movs	r1, #0
 8001372:	2003      	movs	r0, #3
 8001374:	f000 f89e 	bl	80014b4 <led_write_led>
    led_write_rgb(0b000);
 8001378:	2000      	movs	r0, #0
 800137a:	f000 f85b 	bl	8001434 <led_write_rgb>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}

08001382 <led_stop>:

void led_stop()
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 8001386:	2100      	movs	r1, #0
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f893 	bl	80014b4 <led_write_led>
    led_write_rgb(0b100);
 800138e:	2004      	movs	r0, #4
 8001390:	f000 f850 	bl	8001434 <led_write_rgb>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <led_write_led1>:
{
    return current_rgb_value;
}

void led_write_led1(uint8_t value_)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = value_ << 1;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
    led2_value = current_value & 0b01;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <led_write_led1+0x48>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <led_write_led1+0x4c>)
 80013c6:	f006 faef 	bl	80079a8 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <led_write_led1+0x48>)
 80013d4:	701a      	strb	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000228 	.word	0x20000228
 80013e4:	40020800 	.word	0x40020800

080013e8 <led_write_led2>:

void led_write_led2(uint8_t value_)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = current_value & 0b10;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <led_write_led2+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	73fb      	strb	r3, [r7, #15]
    led2_value = value_ << 0;
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf0c      	ite	eq
 8001406:	2301      	moveq	r3, #1
 8001408:	2300      	movne	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <led_write_led2+0x48>)
 8001414:	f006 fac8 	bl	80079a8 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	4313      	orrs	r3, r2
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <led_write_led2+0x44>)
 8001422:	701a      	strb	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000228 	.word	0x20000228
 8001430:	40020400 	.word	0x40020400

08001434 <led_write_rgb>:

void led_write_rgb(uint8_t rgb_)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (rgb_ & 0b100) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <led_write_rgb+0x74>)
 8001456:	f006 faa7 	bl	80079a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (rgb_ & 0b010) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <led_write_rgb+0x74>)
 8001472:	f006 fa99 	bl	80079a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (rgb_ & 0b001) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800148c:	4807      	ldr	r0, [pc, #28]	; (80014ac <led_write_rgb+0x78>)
 800148e:	f006 fa8b 	bl	80079a8 <HAL_GPIO_WritePin>
    current_rgb_value = rgb_ & 0b0111;
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <led_write_rgb+0x7c>)
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020800 	.word	0x40020800
 80014b0:	20000229 	.word	0x20000229

080014b4 <led_write_led>:

void led_write_led(uint8_t mask_, uint8_t value_)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
    if(mask_ & 0b10)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <led_write_led+0x2c>
    {
        led_write_led1((0b10 & value_) >> 1);
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff5c 	bl	8001398 <led_write_led1>
    }
    if(mask_ & 0b01)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <led_write_led+0x44>
    {
        led_write_led2((0b01 & value_) >> 0);
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff78 	bl	80013e8 <led_write_led2>
    }
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 8001504:	f000 f804 	bl	8001510 <rotary_set_playmode>
    rotary_set_value();
 8001508:	f000 f81a 	bl	8001540 <rotary_set_value>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <rotary_set_playmode>:

void rotary_set_playmode()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 8001514:	f000 f82c 	bl	8001570 <rotary_read>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b01      	ldr	r3, [pc, #4]	; (8001524 <rotary_set_playmode+0x14>)
 800151e:	701a      	strb	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000022a 	.word	0x2000022a

08001528 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
    return playmode;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <rotary_read_playmode+0x14>)
 800152e:	781b      	ldrb	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	2000022a 	.word	0x2000022a

08001540 <rotary_set_value>:

void rotary_set_value()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    value = rotary_read();
 8001544:	f000 f814 	bl	8001570 <rotary_read>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b01      	ldr	r3, [pc, #4]	; (8001554 <rotary_set_value+0x14>)
 800154e:	701a      	strb	r2, [r3, #0]
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000022b 	.word	0x2000022b

08001558 <rotary_read_value>:

uint8_t rotary_read_value()
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
    return value;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <rotary_read_value+0x14>)
 800155e:	781b      	ldrb	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2000022b 	.word	0x2000022b

08001570 <rotary_read>:

uint8_t rotary_read()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 800157a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157e:	481f      	ldr	r0, [pc, #124]	; (80015fc <rotary_read+0x8c>)
 8001580:	f006 f9fa 	bl	8007978 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	b2da      	uxtb	r2, r3
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4413      	add	r3, r2
 8001596:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159c:	4817      	ldr	r0, [pc, #92]	; (80015fc <rotary_read+0x8c>)
 800159e:	f006 f9eb 	bl	8007978 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <rotary_read+0x3c>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e000      	b.n	80015ae <rotary_read+0x3e>
 80015ac:	2300      	movs	r3, #0
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	4413      	add	r3, r2
 80015b4:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 80015b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <rotary_read+0x90>)
 80015bc:	f006 f9dc 	bl	8007978 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <rotary_read+0x5a>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e000      	b.n	80015cc <rotary_read+0x5c>
 80015ca:	2300      	movs	r3, #0
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4413      	add	r3, r2
 80015d2:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 80015d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <rotary_read+0x8c>)
 80015da:	f006 f9cd 	bl	8007978 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <rotary_read+0x78>
 80015e4:	2308      	movs	r3, #8
 80015e6:	e000      	b.n	80015ea <rotary_read+0x7a>
 80015e8:	2300      	movs	r3, #0
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4413      	add	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020000 	.word	0x40020000

08001604 <rotary_print_playmode>:

void rotary_print_playmode()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	printf("playmode = ");
 8001608:	482e      	ldr	r0, [pc, #184]	; (80016c4 <rotary_print_playmode+0xc0>)
 800160a:	f00a f80d 	bl	800b628 <iprintf>
	switch(rotary_read_playmode())
 800160e:	f7ff ff8b 	bl	8001528 <rotary_read_playmode>
 8001612:	4603      	mov	r3, r0
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d84b      	bhi.n	80016b0 <rotary_print_playmode+0xac>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <rotary_print_playmode+0x1c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001661 	.word	0x08001661
 8001624:	08001669 	.word	0x08001669
 8001628:	08001671 	.word	0x08001671
 800162c:	08001679 	.word	0x08001679
 8001630:	08001681 	.word	0x08001681
 8001634:	08001689 	.word	0x08001689
 8001638:	08001691 	.word	0x08001691
 800163c:	08001699 	.word	0x08001699
 8001640:	080016a1 	.word	0x080016a1
 8001644:	080016b1 	.word	0x080016b1
 8001648:	080016b1 	.word	0x080016b1
 800164c:	080016b1 	.word	0x080016b1
 8001650:	080016b1 	.word	0x080016b1
 8001654:	080016b1 	.word	0x080016b1
 8001658:	080016b1 	.word	0x080016b1
 800165c:	080016a9 	.word	0x080016a9
	{
		case calibration:
			printf("calibration");
 8001660:	4819      	ldr	r0, [pc, #100]	; (80016c8 <rotary_print_playmode+0xc4>)
 8001662:	f009 ffe1 	bl	800b628 <iprintf>
			break;
 8001666:	e027      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case search:
			printf("search");
 8001668:	4818      	ldr	r0, [pc, #96]	; (80016cc <rotary_print_playmode+0xc8>)
 800166a:	f009 ffdd 	bl	800b628 <iprintf>
			break;
 800166e:	e023      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case accel:
			printf("accel");
 8001670:	4817      	ldr	r0, [pc, #92]	; (80016d0 <rotary_print_playmode+0xcc>)
 8001672:	f009 ffd9 	bl	800b628 <iprintf>
			break;
 8001676:	e01f      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case max_enable:
			printf("max_enable");
 8001678:	4816      	ldr	r0, [pc, #88]	; (80016d4 <rotary_print_playmode+0xd0>)
 800167a:	f009 ffd5 	bl	800b628 <iprintf>
			break;
 800167e:	e01b      	b.n	80016b8 <rotary_print_playmode+0xb4>
        case motor_free:
            printf("motor_free");
 8001680:	4815      	ldr	r0, [pc, #84]	; (80016d8 <rotary_print_playmode+0xd4>)
 8001682:	f009 ffd1 	bl	800b628 <iprintf>
            break;
 8001686:	e017      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case tracer_tuning:
			printf("tracer_tuning");
 8001688:	4814      	ldr	r0, [pc, #80]	; (80016dc <rotary_print_playmode+0xd8>)
 800168a:	f009 ffcd 	bl	800b628 <iprintf>
			break;
 800168e:	e013      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case velotrace_tuning:
			printf("velotrace_tuning");
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <rotary_print_playmode+0xdc>)
 8001692:	f009 ffc9 	bl	800b628 <iprintf>
			break;
 8001696:	e00f      	b.n	80016b8 <rotary_print_playmode+0xb4>
        case velotrace_tuning_2:
            printf("velotrace_tuning_2");
 8001698:	4812      	ldr	r0, [pc, #72]	; (80016e4 <rotary_print_playmode+0xe0>)
 800169a:	f009 ffc5 	bl	800b628 <iprintf>
            break;
 800169e:	e00b      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case banquet:
			printf("banquet");
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <rotary_print_playmode+0xe4>)
 80016a2:	f009 ffc1 	bl	800b628 <iprintf>
			break;
 80016a6:	e007      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case flash_print:
			printf("flash_print");
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <rotary_print_playmode+0xe8>)
 80016aa:	f009 ffbd 	bl	800b628 <iprintf>
			break;
 80016ae:	e003      	b.n	80016b8 <rotary_print_playmode+0xb4>
		default:
			printf("unknown playmode...");
 80016b0:	480f      	ldr	r0, [pc, #60]	; (80016f0 <rotary_print_playmode+0xec>)
 80016b2:	f009 ffb9 	bl	800b628 <iprintf>
			break;
 80016b6:	bf00      	nop
	}
	printf("\r\n");
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <rotary_print_playmode+0xf0>)
 80016ba:	f00a f829 	bl	800b710 <puts>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	0800ffe4 	.word	0x0800ffe4
 80016c8:	0800fff0 	.word	0x0800fff0
 80016cc:	0800fffc 	.word	0x0800fffc
 80016d0:	08010004 	.word	0x08010004
 80016d4:	0801000c 	.word	0x0801000c
 80016d8:	08010018 	.word	0x08010018
 80016dc:	08010024 	.word	0x08010024
 80016e0:	08010034 	.word	0x08010034
 80016e4:	08010048 	.word	0x08010048
 80016e8:	0801005c 	.word	0x0801005c
 80016ec:	08010064 	.word	0x08010064
 80016f0:	08010070 	.word	0x08010070
 80016f4:	08010084 	.word	0x08010084

080016f8 <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
    enter = 1;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <switch_set_enter+0x14>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	2000022c 	.word	0x2000022c

08001710 <switch_reset_enter>:

void switch_reset_enter()
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
    enter = 0;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <switch_reset_enter+0x14>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	2000022c 	.word	0x2000022c

08001728 <switch_init>:
{
    switch_reset_enter();
}

void switch_init()
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
    switch_reset_enter();
 800172c:	f7ff fff0 	bl	8001710 <switch_reset_enter>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <switch_read_enter>:

uint8_t switch_read_enter()
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
    return enter;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <switch_read_enter+0x14>)
 800173a:	781b      	ldrb	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000022c 	.word	0x2000022c

0800174c <switch1_read>:

uint8_t switch1_read()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 8001750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <switch1_read+0x20>)
 8001756:	f006 f90f 	bl	8007978 <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40020800 	.word	0x40020800

08001770 <switch2_read>:

uint8_t switch2_read()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 8001774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <switch2_read+0x20>)
 800177a:	f006 f8fd 	bl	8007978 <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40020800 	.word	0x40020800

08001794 <switch_read>:

uint8_t switch_read()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 800179e:	f7ff ffd5 	bl	800174c <switch1_read>
 80017a2:	4603      	mov	r3, r0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	4413      	add	r3, r2
 80017ac:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 80017ae:	f7ff ffdf 	bl	8001770 <switch2_read>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4413      	add	r3, r2
 80017ba:	71fb      	strb	r3, [r7, #7]

    return value_;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <switch_enter>:

void switch_enter()
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 80017ca:	f7ff ffe3 	bl	8001794 <switch_read>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d102      	bne.n	80017da <switch_enter+0x14>
    {
        switch_reset_enter();
 80017d4:	f7ff ff9c 	bl	8001710 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 80017d8:	e006      	b.n	80017e8 <switch_enter+0x22>
    else if(switch_read() == 0b10)
 80017da:	f7ff ffdb 	bl	8001794 <switch_read>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d101      	bne.n	80017e8 <switch_enter+0x22>
        switch_set_enter();
 80017e4:	f7ff ff88 	bl	80016f8 <switch_set_enter>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 80017ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f0:	b08e      	sub	sp, #56	; 0x38
 80017f2:	af0a      	add	r7, sp, #40	; 0x28
 80017f4:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 80017f6:	482d      	ldr	r0, [pc, #180]	; (80018ac <analog_array_print+0xc0>)
 80017f8:	f009 ff16 	bl	800b628 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3318      	adds	r3, #24
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4619      	mov	r1, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	331c      	adds	r3, #28
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	331e      	adds	r3, #30
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	331a      	adds	r3, #26
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4603      	mov	r3, r0
 800181e:	4824      	ldr	r0, [pc, #144]	; (80018b0 <analog_array_print+0xc4>)
 8001820:	f009 ff02 	bl	800b628 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	469c      	mov	ip, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3304      	adds	r3, #4
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	469e      	mov	lr, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3308      	adds	r3, #8
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	4698      	mov	r8, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	330c      	adds	r3, #12
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3310      	adds	r3, #16
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3314      	adds	r3, #20
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3316      	adds	r3, #22
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	461c      	mov	r4, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3312      	adds	r3, #18
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	461d      	mov	r5, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	330e      	adds	r3, #14
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	461e      	mov	r6, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	330a      	adds	r3, #10
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3306      	adds	r3, #6
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3302      	adds	r3, #2
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	9308      	str	r3, [sp, #32]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	9307      	str	r3, [sp, #28]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	9306      	str	r3, [sp, #24]
 800188a:	9605      	str	r6, [sp, #20]
 800188c:	9504      	str	r5, [sp, #16]
 800188e:	9403      	str	r4, [sp, #12]
 8001890:	9002      	str	r0, [sp, #8]
 8001892:	9101      	str	r1, [sp, #4]
 8001894:	9200      	str	r2, [sp, #0]
 8001896:	4643      	mov	r3, r8
 8001898:	4672      	mov	r2, lr
 800189a:	4661      	mov	r1, ip
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <analog_array_print+0xc8>)
 800189e:	f009 fec3 	bl	800b628 <iprintf>
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018ac:	08010088 	.word	0x08010088
 80018b0:	08010090 	.word	0x08010090
 80018b4:	080100a8 	.word	0x080100a8

080018b8 <analog_d_print>:

	printf("average = %4.2f\r\n\r\n", sum_ / (float) size_);
}

void analog_d_print()
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
#if D_ANALOG
	analog_print_analogmode();
	analog_rate_array_print();
	// analog_array_print(analog);
#endif
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <analog_print_max>:
	analog_print_analogmode();
	analog_array_print(analog);
}

void analog_print_max()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 80018cc:	4806      	ldr	r0, [pc, #24]	; (80018e8 <analog_print_max+0x20>)
 80018ce:	f009 feab 	bl	800b628 <iprintf>
	printf("analog_print_max\r\n");
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <analog_print_max+0x24>)
 80018d4:	f009 ff1c 	bl	800b710 <puts>
	analog_array_print(analogmax);
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <analog_print_max+0x28>)
 80018da:	f7ff ff87 	bl	80017ec <analog_array_print>
	printf(ESC_DEF);
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <analog_print_max+0x2c>)
 80018e0:	f009 fea2 	bl	800b628 <iprintf>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	080101a0 	.word	0x080101a0
 80018ec:	080101a8 	.word	0x080101a8
 80018f0:	200003f8 	.word	0x200003f8
 80018f4:	080101bc 	.word	0x080101bc

080018f8 <analog_print_min>:

void analog_print_min()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <analog_print_min+0x20>)
 80018fe:	f009 fe93 	bl	800b628 <iprintf>
	printf("analog_print_min\r\n");
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <analog_print_min+0x24>)
 8001904:	f009 ff04 	bl	800b710 <puts>
	analog_array_print(analogmin);
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <analog_print_min+0x28>)
 800190a:	f7ff ff6f 	bl	80017ec <analog_array_print>
	printf(ESC_DEF);
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <analog_print_min+0x2c>)
 8001910:	f009 fe8a 	bl	800b628 <iprintf>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	080101c4 	.word	0x080101c4
 800191c:	080101cc 	.word	0x080101cc
 8001920:	20000274 	.word	0x20000274
 8001924:	080101bc 	.word	0x080101bc

08001928 <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_to_flash()\r\n");
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e014      	b.n	8001962 <analog_set_on_flash+0x3a>
		#if D_ANALOG
		printf(ESC_MAG);
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		printf(ESC_DEF);
		#endif
		*(analogmin_ + i) = analogmin[i];
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <analog_set_on_flash+0x4c>)
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001948:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	4909      	ldr	r1, [pc, #36]	; (8001978 <analog_set_on_flash+0x50>)
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800195a:	801a      	strh	r2, [r3, #0]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d9e7      	bls.n	8001938 <analog_set_on_flash+0x10>
		printf(ESC_GRE);
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		printf(ESC_DEF);
		#endif
	}
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20000274 	.word	0x20000274
 8001978:	200003f8 	.word	0x200003f8

0800197c <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_from_flash()\r\n");
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e014      	b.n	80019b6 <analog_set_from_flash+0x3a>
	{
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		#endif
		analogmin[i] = *(analogmin_ + i);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	8819      	ldrh	r1, [r3, #0]
 8001996:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <analog_set_from_flash+0x4c>)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	8819      	ldrh	r1, [r3, #0]
 80019a8:	4a08      	ldr	r2, [pc, #32]	; (80019cc <analog_set_from_flash+0x50>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d9e7      	bls.n	800198c <analog_set_from_flash+0x10>
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		#endif
	}
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	20000274 	.word	0x20000274
 80019cc:	200003f8 	.word	0x200003f8

080019d0 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <analog_set_calibrationsize+0x1c>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	7013      	strb	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20000295 	.word	0x20000295

080019f0 <analog_set_analogmode>:
{
	return calibrationsize;
}

void analog_set_analogmode(AnalogMode analogmode_)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <analog_set_analogmode+0x1c>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	7013      	strb	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	20000294 	.word	0x20000294

08001a10 <analog_read_analogmode>:

AnalogMode analog_read_analogmode()
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return analogmode;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <analog_read_analogmode+0x14>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000294 	.word	0x20000294

08001a28 <analog_calibration_start>:

void analog_calibration_start()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	analog_set_analogmode(analogmode_all);
 8001a2e:	2010      	movs	r0, #16
 8001a30:	f7ff ffde 	bl	80019f0 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	e00d      	b.n	8001a56 <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <analog_calibration_start+0x48>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <analog_calibration_start+0x4c>)
 8001a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	3301      	adds	r3, #1
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d9ee      	bls.n	8001a3a <analog_calibration_start+0x12>
    }
	analog_print_max();
 8001a5c:	f7ff ff34 	bl	80018c8 <analog_print_max>
	analog_print_min();
 8001a60:	f7ff ff4a 	bl	80018f8 <analog_print_min>
	analog_sensor_start();
 8001a64:	f000 f83e 	bl	8001ae4 <analog_sensor_start>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200003f8 	.word	0x200003f8
 8001a74:	20000274 	.word	0x20000274

08001a78 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(analogmode_all);
 8001a7c:	2010      	movs	r0, #16
 8001a7e:	f7ff ffb7 	bl	80019f0 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001a82:	f000 f829 	bl	8001ad8 <analog_stop>
	analog_print_max();
 8001a86:	f7ff ff1f 	bl	80018c8 <analog_print_max>
	analog_print_min();
 8001a8a:	f7ff ff35 	bl	80018f8 <analog_print_min>
	/* flashbuffer.analogmin/max = analogmin/max */
	analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8001a8e:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <analog_calibration_stop+0x28>)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <analog_calibration_stop+0x2c>)
 8001a92:	f7ff ff49 	bl	8001928 <analog_set_on_flash>
	flash_write();
 8001a96:	f000 fff7 	bl	8002a88 <flash_write>
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200065f6 	.word	0x200065f6
 8001aa4:	200065d6 	.word	0x200065d6

08001aa8 <analog_init>:

void analog_init()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 8001aac:	2010      	movs	r0, #16
 8001aae:	f7ff ff8f 	bl	80019d0 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <analog_init+0x20>)
 8001ab4:	f004 f99e 	bl	8005df4 <HAL_ADC_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <analog_init+0x1a>
    {
        Error_Handler();
 8001abe:	f002 f8cb 	bl	8003c58 <Error_Handler>
    }
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20006370 	.word	0x20006370

08001acc <analog_start>:

void analog_start()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("analog_sensor_start()\r\n");
	#endif
	analog_sensor_start();
 8001ad0:	f000 f808 	bl	8001ae4 <analog_sensor_start>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <analog_stop>:

void analog_stop()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001adc:	f000 f81a 	bl	8001b14 <analog_sensor_stop>
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <analog_sensor_start>:

void analog_sensor_start()
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
	#endif
    sensgettime = 0;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <analog_sensor_start+0x24>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001aee:	2210      	movs	r2, #16
 8001af0:	4906      	ldr	r1, [pc, #24]	; (8001b0c <analog_sensor_start+0x28>)
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <analog_sensor_start+0x2c>)
 8001af4:	f004 f9c2 	bl	8005e7c <HAL_ADC_Start_DMA>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <analog_sensor_start+0x1e>
    {
        Error_Handler();
 8001afe:	f002 f8ab 	bl	8003c58 <Error_Handler>
    }
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000250 	.word	0x20000250
 8001b0c:	20000254 	.word	0x20000254
 8001b10:	20006370 	.word	0x20006370

08001b14 <analog_sensor_stop>:

void analog_sensor_stop()
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <analog_sensor_stop+0x10>)
 8001b1a:	f004 fabf 	bl	800609c <HAL_ADC_Stop_DMA>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20006370 	.word	0x20006370

08001b28 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
	uint16_t analog_before;
	//! 前の値を保存しておく
	analog_before = analograte[i];
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4a2e      	ldr	r2, [pc, #184]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b3a:	81fb      	strh	r3, [r7, #14]
	//! 割合を取得する
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (float) (analogmax[i] - analogmin[i]);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <analog_sensor_get+0xcc>)
 8001b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b44:	4619      	mov	r1, r3
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <analog_sensor_get+0xd0>)
 8001b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b4e:	1acb      	subs	r3, r1, r3
 8001b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <analog_sensor_get+0xd4>)
 8001b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <analog_sensor_get+0xd0>)
 8001b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b72:	1acb      	subs	r3, r1, r3
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b86:	ee17 2a90 	vmov	r2, s15
 8001b8a:	b291      	uxth	r1, r2
 8001b8c:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(float)800, 500);
#endif
	//! ローパスフィルタに通す
	analograte[i] = low_pass_filter(analograte[i], analog_before, ANALOG_LPF_GAMMA);
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcb2 	bl	8000504 <__aeabi_ui2d>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	460d      	mov	r5, r1
 8001ba4:	89fb      	ldrh	r3, [r7, #14]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcac 	bl	8000504 <__aeabi_ui2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001be8 <analog_sensor_get+0xc0>
 8001bb4:	ec43 2b11 	vmov	d1, r2, r3
 8001bb8:	ec45 4b10 	vmov	d0, r4, r5
 8001bbc:	f000 ff8a 	bl	8002ad4 <low_pass_filter>
 8001bc0:	ec53 2b10 	vmov	r2, r3, d0
 8001bc4:	79fc      	ldrb	r4, [r7, #7]
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ffed 	bl	8000ba8 <__aeabi_d2uiz>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001bd4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	return analograte[i];
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8001bf0:	20000298 	.word	0x20000298
 8001bf4:	20000230 	.word	0x20000230
 8001bf8:	20000274 	.word	0x20000274
 8001bfc:	200003f8 	.word	0x200003f8

08001c00 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001c08:	f000 f804 	bl	8001c14 <analog_get_and_sort>
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001c14:	b490      	push	{r4, r7}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <analog_get_and_sort+0x120>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d968      	bls.n	8001cf4 <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <analog_get_and_sort+0x120>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	e05f      	b.n	8001cee <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71bb      	strb	r3, [r7, #6]
 8001c32:	e02d      	b.n	8001c90 <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001c34:	2300      	movs	r3, #0
 8001c36:	717b      	strb	r3, [r7, #5]
 8001c38:	e023      	b.n	8001c82 <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001c3a:	797b      	ldrb	r3, [r7, #5]
 8001c3c:	1e5a      	subs	r2, r3, #1
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	493d      	ldr	r1, [pc, #244]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c4a:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001c4c:	7978      	ldrb	r0, [r7, #5]
 8001c4e:	79f9      	ldrb	r1, [r7, #7]
 8001c50:	797b      	ldrb	r3, [r7, #5]
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4c38      	ldr	r4, [pc, #224]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c58:	0100      	lsls	r0, r0, #4
 8001c5a:	4401      	add	r1, r0
 8001c5c:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001c60:	4935      	ldr	r1, [pc, #212]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	4413      	add	r3, r2
 8001c66:	4602      	mov	r2, r0
 8001c68:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001c6c:	797a      	ldrb	r2, [r7, #5]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	4931      	ldr	r1, [pc, #196]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001c7c:	797b      	ldrb	r3, [r7, #5]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	717b      	strb	r3, [r7, #5]
 8001c82:	797a      	ldrb	r2, [r7, #5]
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d8d7      	bhi.n	8001c3a <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001c8a:	79bb      	ldrb	r3, [r7, #6]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	71bb      	strb	r3, [r7, #6]
 8001c90:	79bb      	ldrb	r3, [r7, #6]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d9ce      	bls.n	8001c34 <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001c96:	79fa      	ldrb	r2, [r7, #7]
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4927      	ldr	r1, [pc, #156]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c9c:	3240      	adds	r2, #64	; 0x40
 8001c9e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001ca2:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <analog_get_and_sort+0x128>)
 8001ca4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4a25      	ldr	r2, [pc, #148]	; (8001d40 <analog_get_and_sort+0x12c>)
 8001cac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <analog_get_and_sort+0x128>)
 8001cb4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	428a      	cmp	r2, r1
 8001cbc:	bf38      	it	cc
 8001cbe:	460a      	movcc	r2, r1
 8001cc0:	b291      	uxth	r1, r2
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <analog_get_and_sort+0x12c>)
 8001cc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <analog_get_and_sort+0x130>)
 8001ccc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <analog_get_and_sort+0x128>)
 8001cd4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	428a      	cmp	r2, r1
 8001cdc:	bf28      	it	cs
 8001cde:	460a      	movcs	r2, r1
 8001ce0:	b291      	uxth	r1, r2
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <analog_get_and_sort+0x130>)
 8001ce4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	3301      	adds	r3, #1
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d99c      	bls.n	8001c2e <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	713b      	strb	r3, [r7, #4]
 8001cf8:	e00f      	b.n	8001d1a <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001cfa:	7939      	ldrb	r1, [r7, #4]
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <analog_get_and_sort+0x120>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	793b      	ldrb	r3, [r7, #4]
 8001d02:	4811      	ldr	r0, [pc, #68]	; (8001d48 <analog_get_and_sort+0x134>)
 8001d04:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001d08:	490b      	ldr	r1, [pc, #44]	; (8001d38 <analog_get_and_sort+0x124>)
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d14:	793b      	ldrb	r3, [r7, #4]
 8001d16:	3301      	adds	r3, #1
 8001d18:	713b      	strb	r3, [r7, #4]
 8001d1a:	793b      	ldrb	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d9ec      	bls.n	8001cfa <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <analog_get_and_sort+0x120>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <analog_get_and_sort+0x120>)
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc90      	pop	{r4, r7}
 8001d32:	4770      	bx	lr
 8001d34:	20000250 	.word	0x20000250
 8001d38:	200002b8 	.word	0x200002b8
 8001d3c:	20000230 	.word	0x20000230
 8001d40:	200003f8 	.word	0x200003f8
 8001d44:	20000274 	.word	0x20000274
 8001d48:	20000254 	.word	0x20000254

08001d4c <course_init>:
float course_update_section_sampling_time_s;
float __course_debug_target_speed__;
float course_radius[COURSE_STATE_SIZE];

void course_init(unsigned short int samplingtime_ms)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
	imu_init();
 8001d56:	f7ff f973 	bl	8001040 <imu_init>
	course_state_count = 0;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <course_init+0x24>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
	course_set_update_section_freq_ms(samplingtime_ms);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f8a2 	bl	8001eac <course_set_update_section_freq_ms>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	200061e2 	.word	0x200061e2

08001d74 <course_start>:

void course_start()
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	/* course_start */
	course_state_count = 0;
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <course_start+0x24>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	801a      	strh	r2, [r3, #0]
	course_reset_section_degree();
 8001d7e:	f000 f8bf 	bl	8001f00 <course_reset_section_degree>
	if(rotary_read_playmode() == search)
 8001d82:	f7ff fbd1 	bl	8001528 <rotary_read_playmode>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <course_start+0x1c>
	{
		course_reset_flash();
 8001d8c:	f000 fd1a 	bl	80027c4 <course_reset_flash>
	}
	imu_start();
 8001d90:	f7ff f9fe 	bl	8001190 <imu_start>
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	200061e2 	.word	0x200061e2

08001d9c <course_stop>:

void course_stop()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
	uint16_t imax;
	imax = flashbuffer.course_state_count_max;
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <course_stop+0x78>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	80bb      	strh	r3, [r7, #4]
	if(rotary_read_playmode() == accel)
 8001da8:	f7ff fbbe 	bl	8001528 <rotary_read_playmode>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d11c      	bne.n	8001dec <course_stop+0x50>
	{
		for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8001db2:	88bb      	ldrh	r3, [r7, #4]
 8001db4:	80fb      	strh	r3, [r7, #6]
 8001db6:	e016      	b.n	8001de6 <course_stop+0x4a>
		{
			uint16_t index;
			uint16_t imax;
			imax = flashbuffer.course_state_count_max;
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <course_stop+0x78>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	807b      	strh	r3, [r7, #2]
			index = imax - course_state_size;
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	803b      	strh	r3, [r7, #0]
			//! ストップするときに半径を格納
			flashbuffer.radius[index] = course_radius[index];
 8001dc6:	883a      	ldrh	r2, [r7, #0]
 8001dc8:	883b      	ldrh	r3, [r7, #0]
 8001dca:	4913      	ldr	r1, [pc, #76]	; (8001e18 <course_stop+0x7c>)
 8001dcc:	0092      	lsls	r2, r2, #2
 8001dce:	440a      	add	r2, r1
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	4910      	ldr	r1, [pc, #64]	; (8001e14 <course_stop+0x78>)
 8001dd4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	3304      	adds	r3, #4
 8001dde:	601a      	str	r2, [r3, #0]
		for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	80fb      	strh	r3, [r7, #6]
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e5      	bne.n	8001db8 <course_stop+0x1c>
		}
	}
	course_fixing_radius2speed();
 8001dec:	f000 f9e0 	bl	80021b0 <course_fixing_radius2speed>
	if(rotary_read_playmode() == search || rotary_read_playmode() == motor_free)
 8001df0:	f7ff fb9a 	bl	8001528 <rotary_read_playmode>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d004      	beq.n	8001e04 <course_stop+0x68>
 8001dfa:	f7ff fb95 	bl	8001528 <rotary_read_playmode>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d101      	bne.n	8001e08 <course_stop+0x6c>
	{
		flash_write();
 8001e04:	f000 fe40 	bl	8002a88 <flash_write>
	}
	imu_stop();
 8001e08:	f7ff f9c9 	bl	800119e <imu_stop>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200065d4 	.word	0x200065d4
 8001e18:	2000041c 	.word	0x2000041c
 8001e1c:	00000000 	.word	0x00000000

08001e20 <course_update_section_degree>:
 * 好きな時に course_section_degree をリセットする
 * course_update_section_degree() は course_update_section_sampling_time_s の周期で常に実行され続ける
 * 
 */
void course_update_section_degree()
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	float tmp;
	imu_update_gyro();
 8001e26:	f7ff f9c3 	bl	80011b0 <imu_update_gyro>
	#if D_COURSE_WHILE
	printf("imu_read_yaw() = %7.2lf, course_section_degree = %7.2lf\r\n", imu_read_yaw(), course_section_degree);
	#endif
	course_sampling_count = course_sampling_count + 1;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <course_update_section_degree+0x80>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <course_update_section_degree+0x80>)
 8001e34:	801a      	strh	r2, [r3, #0]
	tmp = course_section_degree + imu_read_yaw() * course_update_section_sampling_time_s;
 8001e36:	f7ff fa6f 	bl	8001318 <imu_read_yaw>
 8001e3a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <course_update_section_degree+0x84>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <course_update_section_degree+0x88>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e52:	edc7 7a01 	vstr	s15, [r7, #4]
	course_section_degree = low_pass_filter(tmp, course_section_degree, 0);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fb76 	bl	8000548 <__aeabi_f2d>
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	460d      	mov	r5, r1
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <course_update_section_degree+0x88>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb6f 	bl	8000548 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001e98 <course_update_section_degree+0x78>
 8001e72:	ec43 2b11 	vmov	d1, r2, r3
 8001e76:	ec45 4b10 	vmov	d0, r4, r5
 8001e7a:	f000 fe2b 	bl	8002ad4 <low_pass_filter>
 8001e7e:	ec54 3b10 	vmov	r3, r4, d0
 8001e82:	4618      	mov	r0, r3
 8001e84:	4621      	mov	r1, r4
 8001e86:	f7fe feaf 	bl	8000be8 <__aeabi_d2f>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <course_update_section_degree+0x88>)
 8001e8e:	601a      	str	r2, [r3, #0]
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8001ea0:	200061e0 	.word	0x200061e0
 8001ea4:	200061dc 	.word	0x200061dc
 8001ea8:	200061e8 	.word	0x200061e8

08001eac <course_set_update_section_freq_ms>:

void course_set_update_section_freq_ms(unsigned short int samplingtime_ms)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
	course_update_section_sampling_time_s = samplingtime_ms / (float) 1000;
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec0:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001edc <course_set_update_section_freq_ms+0x30>
 8001ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <course_set_update_section_freq_ms+0x34>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	447a0000 	.word	0x447a0000
 8001ee0:	200061dc 	.word	0x200061dc

08001ee4 <course_read_section_degree>:

float course_read_section_degree()
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	return course_section_degree;
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <course_read_section_degree+0x18>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	ee07 3a90 	vmov	s15, r3
}
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	200061e8 	.word	0x200061e8

08001f00 <course_reset_section_degree>:

void course_reset_section_degree()
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
	course_sampling_count = 0;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <course_reset_section_degree+0x1c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	801a      	strh	r2, [r3, #0]
	course_section_degree = 0;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <course_reset_section_degree+0x20>)
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	200061e0 	.word	0x200061e0
 8001f20:	200061e8 	.word	0x200061e8

08001f24 <course_reset>:

void course_reset()
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	course_reset_section_degree();
 8001f28:	f7ff ffea 	bl	8001f00 <course_reset_section_degree>
	section_length_reset();
 8001f2c:	f001 ffe6 	bl	8003efc <section_length_reset>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <course_read_curvature_radius>:

float course_read_curvature_radius()
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	return course_section_radius;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <course_read_curvature_radius+0x18>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	ee07 3a90 	vmov	s15, r3
}
 8001f40:	eeb0 0a67 	vmov.f32	s0, s15
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	200061e4 	.word	0x200061e4

08001f50 <course_read_state_count>:

uint16_t course_read_state_count()
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
    return course_state_count;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <course_read_state_count+0x14>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	200061e2 	.word	0x200061e2

08001f68 <course_increment_state_count>:
{
	return course_sampling_count;
}

void course_increment_state_count()
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
    course_state_count++;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <course_increment_state_count+0x1c>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <course_increment_state_count+0x1c>)
 8001f76:	801a      	strh	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	200061e2 	.word	0x200061e2

08001f88 <course_calclate_radius>:
 * course_reset()					// 角度と長さ情報をリセットする
 * の順に呼び出す必要がある
 * 
 */
void course_calclate_radius()
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
    float curvature_radius;
	float section_degree, section_length;
	float section_radian;

    //! 現在の区間長を取得する */
	section_length = section_length_read();
 8001f8e:	f001 ffdd 	bl	8003f4c <section_length_read>
 8001f92:	ed87 0a03 	vstr	s0, [r7, #12]
	//! 現在点を次の区間開始点に設定する
	section_length_set_buffer();
 8001f96:	f002 f80f 	bl	8003fb8 <section_length_set_buffer>
	//! 角度を取得する
	section_degree = course_read_section_degree();
 8001f9a:	f7ff ffa3 	bl	8001ee4 <course_read_section_degree>
 8001f9e:	ed87 0a02 	vstr	s0, [r7, #8]

#if MODE_IMU_CALCLATE
	course_section_length = // course_section_length_from_imu
#endif

	section_radian = section_degree * M_PI / (float) 180;
 8001fa2:	68b8      	ldr	r0, [r7, #8]
 8001fa4:	f7fe fad0 	bl	8000548 <__aeabi_f2d>
 8001fa8:	a315      	add	r3, pc, #84	; (adr r3, 8002000 <course_calclate_radius+0x78>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fb23 	bl	80005f8 <__aeabi_dmul>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4621      	mov	r1, r4
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <course_calclate_radius+0x70>)
 8001fc0:	f7fe fc44 	bl	800084c <__aeabi_ddiv>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	4618      	mov	r0, r3
 8001fca:	4621      	mov	r1, r4
 8001fcc:	f7fe fe0c 	bl	8000be8 <__aeabi_d2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	607b      	str	r3, [r7, #4]
	curvature_radius = section_length / (float) section_radian;
 8001fd4:	edd7 6a03 	vldr	s13, [r7, #12]
 8001fd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe0:	edc7 7a00 	vstr	s15, [r7]
	course_section_radius = curvature_radius;
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <course_calclate_radius+0x74>)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6013      	str	r3, [r2, #0]
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	40668000 	.word	0x40668000
 8001ffc:	200061e4 	.word	0x200061e4
 8002000:	54442d18 	.word	0x54442d18
 8002004:	400921fb 	.word	0x400921fb

08002008 <course_state_function>:
 * 左センサを読んだら、あるいは、一定区間進んだら course_state_function() を実行するようにプログラムする
 * 探索か二次走行かは course_state_function() 関数内で判断する必要がある
 * 
 */
void course_state_function()
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
	PlayMode pm;
	pm = rotary_read_playmode();
 800200e:	f7ff fa8b 	bl	8001528 <rotary_read_playmode>
 8002012:	4603      	mov	r3, r0
 8002014:	73fb      	strb	r3, [r7, #15]
	if(pm == search || pm == motor_free )
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d002      	beq.n	8002022 <course_state_function+0x1a>
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2b04      	cmp	r3, #4
 8002020:	d124      	bne.n	800206c <course_state_function+0x64>
	{
		float radius;
		flashbuffer.course_state_count_max = course_read_state_count();
 8002022:	f7ff ff95 	bl	8001f50 <course_read_state_count>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <course_state_function+0x9c>)
 800202c:	801a      	strh	r2, [r3, #0]
		course_calclate_radius();
 800202e:	f7ff ffab 	bl	8001f88 <course_calclate_radius>
		radius = course_read_curvature_radius();
 8002032:	f7ff ff7f 	bl	8001f34 <course_read_curvature_radius>
 8002036:	ed87 0a02 	vstr	s0, [r7, #8]
		course_radius[course_state_count] = radius;
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <course_state_function+0xa0>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <course_state_function+0xa4>)
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	601a      	str	r2, [r3, #0]
		course_reset();
 8002048:	f7ff ff6c 	bl	8001f24 <course_reset>
		//! マーカを読んだ場所の記録
		flashbuffer.marker[course_state_count] = length_read();
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <course_state_function+0xa0>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	461c      	mov	r4, r3
 8002052:	f000 fe01 	bl	8002c58 <length_read>
 8002056:	eef0 7a40 	vmov.f32	s15, s0
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <course_state_function+0x9c>)
 800205c:	f504 533b 	add.w	r3, r4, #11968	; 0x2ec0
 8002060:	3330      	adds	r3, #48	; 0x30
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3304      	adds	r3, #4
 8002068:	edc3 7a00 	vstr	s15, [r3]
	}
	if(pm == accel)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d111      	bne.n	8002096 <course_state_function+0x8e>
	{
		float fixed_velocity_target;
		// course_calclate_radius() を呼び出していないのでリセットする必要がある
		section_length_set_buffer();
 8002072:	f001 ffa1 	bl	8003fb8 <section_length_set_buffer>
		fixed_velocity_target = flashbuffer.speed[course_state_count];
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <course_state_function+0xa0>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <course_state_function+0x9c>)
 800207c:	3310      	adds	r3, #16
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	607b      	str	r3, [r7, #4]
		__course_debug_target_speed__ = fixed_velocity_target;
 8002088:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <course_state_function+0xa8>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
		velotrace_set_target_direct(fixed_velocity_target);
 800208e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002092:	f003 fc21 	bl	80058d8 <velotrace_set_target_direct>
	}
	course_increment_state_count();
 8002096:	f7ff ff67 	bl	8001f68 <course_increment_state_count>
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200065d4 	.word	0x200065d4
 80020a8:	200061e2 	.word	0x200061e2
 80020ac:	2000041c 	.word	0x2000041c
 80020b0:	20000418 	.word	0x20000418

080020b4 <course_d_print>:

void course_d_print()
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	// printf("length = %7.2lf, degree = %7.2lf, radius = %7.2lf\r\n", section_length_read(), course_read_section_degree(), radius);
	// printf("radius = %3.3f, speed = %3.3f\r\n", radius, course_radius2speed(radius));
	//! printf("course_state_function の実行回数 = %d\r\n", __debug_eradiusecute_count__);
	printf("__course_debug_target_speed__ = %2.5f\r\n", __course_debug_target_speed__);
#endif
	encoder_d_print();
 80020b8:	f000 fbd8 	bl	800286c <encoder_d_print>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <course_radius2speed>:

float course_radius2speed(float radius)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed;
	radius = fabs(radius);
 80020ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ce:	eef0 7ae7 	vabs.f32	s15, s15
 80020d2:	edc7 7a01 	vstr	s15, [r7, #4]
	if(radius < 0.1f) speed = 1.000f;
 80020d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020da:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80021a0 <course_radius2speed+0xe0>
 80020de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	d503      	bpl.n	80020f0 <course_radius2speed+0x30>
 80020e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e04d      	b.n	800218c <course_radius2speed+0xcc>
    else if(radius < 0.25f) speed = 1.200f;
 80020f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80020f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d502      	bpl.n	8002108 <course_radius2speed+0x48>
 8002102:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <course_radius2speed+0xe4>)
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	e041      	b.n	800218c <course_radius2speed+0xcc>
    else if(radius < 0.5f) speed = 1.250f;
 8002108:	edd7 7a01 	vldr	s15, [r7, #4]
 800210c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	d502      	bpl.n	8002120 <course_radius2speed+0x60>
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <course_radius2speed+0xe8>)
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e035      	b.n	800218c <course_radius2speed+0xcc>
    else if(radius < 0.75f) speed = 1.50f;
 8002120:	edd7 7a01 	vldr	s15, [r7, #4]
 8002124:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002130:	d503      	bpl.n	800213a <course_radius2speed+0x7a>
 8002132:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e028      	b.n	800218c <course_radius2speed+0xcc>
    else if(radius < 1.0f) speed = 1.500f;
 800213a:	edd7 7a01 	vldr	s15, [r7, #4]
 800213e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002142:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	d503      	bpl.n	8002154 <course_radius2speed+0x94>
 800214c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e01b      	b.n	800218c <course_radius2speed+0xcc>
    else if(radius < 1.5f) speed = 2.000f;
 8002154:	edd7 7a01 	vldr	s15, [r7, #4]
 8002158:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800215c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	d503      	bpl.n	800216e <course_radius2speed+0xae>
 8002166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e00e      	b.n	800218c <course_radius2speed+0xcc>
    else if(radius < 2.0f) speed = 2.000f;
 800216e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002172:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d503      	bpl.n	8002188 <course_radius2speed+0xc8>
 8002180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e001      	b.n	800218c <course_radius2speed+0xcc>
    else speed = 3.00f;
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <course_radius2speed+0xec>)
 800218a:	60fb      	str	r3, [r7, #12]
	// speed = - (4238566523291511 * pow(radius, 5)) / (double) 633825300114114700748351602688 + (8582934509267735 * pow(radius, 4)) / (double) 77371252455336267181195264 - (1459060547913519 * pow(radius, 3)) / (double) 2361183241434822606848 + (2682365349594497 * pow(radius, 2)) / (double) 2305843009213693952 + (1737420468106149 * radius) / (double) 4503599627370496 + 7057670738269725 / (double) 8796093022208;
	return speed;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	ee07 3a90 	vmov	s15, r3
}
 8002192:	eeb0 0a67 	vmov.f32	s0, s15
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	3dcccccd 	.word	0x3dcccccd
 80021a4:	3f99999a 	.word	0x3f99999a
 80021a8:	3fa00000 	.word	0x3fa00000
 80021ac:	40400000 	.word	0x40400000

080021b0 <course_fixing_radius2speed>:

void course_fixing_radius2speed()
{
 80021b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021b2:	f5ad 4d3b 	sub.w	sp, sp, #47872	; 0xbb00
 80021b6:	b0af      	sub	sp, #188	; 0xbc
 80021b8:	af00      	add	r7, sp, #0
	float accel_length;
	uint16_t imax;
	imax = flashbuffer.course_state_count_max;
 80021ba:	4baf      	ldr	r3, [pc, #700]	; (8002478 <course_fixing_radius2speed+0x2c8>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80021c2:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 80021c6:	8013      	strh	r3, [r2, #0]
	/* まず矩形グラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80021c8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80021cc:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80021d6:	f102 02b6 	add.w	r2, r2, #182	; 0xb6
 80021da:	8013      	strh	r3, [r2, #0]
 80021dc:	e037      	b.n	800224e <course_fixing_radius2speed+0x9e>
	{
		uint16_t index;
		index = imax - course_state_size;
 80021de:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80021e2:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80021e6:	881a      	ldrh	r2, [r3, #0]
 80021e8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80021ec:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80021f8:	f102 0286 	add.w	r2, r2, #134	; 0x86
 80021fc:	8013      	strh	r3, [r2, #0]
		flashbuffer.speed[index] = course_radius2speed(course_radius[index]);
 80021fe:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002202:	f103 0386 	add.w	r3, r3, #134	; 0x86
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	4a9c      	ldr	r2, [pc, #624]	; (800247c <course_fixing_radius2speed+0x2cc>)
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002216:	f103 0386 	add.w	r3, r3, #134	; 0x86
 800221a:	881c      	ldrh	r4, [r3, #0]
 800221c:	eeb0 0a67 	vmov.f32	s0, s15
 8002220:	f7ff ff4e 	bl	80020c0 <course_radius2speed>
 8002224:	eef0 7a40 	vmov.f32	s15, s0
 8002228:	4a93      	ldr	r2, [pc, #588]	; (8002478 <course_fixing_radius2speed+0x2c8>)
 800222a:	f104 0310 	add.w	r3, r4, #16
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	3304      	adds	r3, #4
 8002234:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002238:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800223c:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	3b01      	subs	r3, #1
 8002244:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002248:	f102 02b6 	add.w	r2, r2, #182	; 0xb6
 800224c:	8013      	strh	r3, [r2, #0]
 800224e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002252:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 8002256:	881b      	ldrh	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1c0      	bne.n	80021de <course_fixing_radius2speed+0x2e>
	}

	float accel_glaph[COURSE_STATE_SIZE];
	float decel_glaph[COURSE_STATE_SIZE];

	accel_glaph[0] = 1;
 800225c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8002260:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002264:	3b74      	subs	r3, #116	; 0x74
 8002266:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800226a:	601a      	str	r2, [r3, #0]
	decel_glaph[imax] = 1;
 800226c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002270:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800227a:	3bb4      	subs	r3, #180	; 0xb4
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4413      	add	r3, r2
 8002280:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002284:	601a      	str	r2, [r3, #0]

	accel_length = COURSE_SAMPLING_LENGTH * (float) (ACCEL_MAX_MAX + ACCEL_MAX_MIN) / (float) 2;
 8002286:	4b7e      	ldr	r3, [pc, #504]	; (8002480 <course_fixing_radius2speed+0x2d0>)
 8002288:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800228c:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 8002290:	6013      	str	r3, [r2, #0]

	/* 加速方向でのこぎりグラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002292:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002296:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80022a0:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80022a4:	8013      	strh	r3, [r2, #0]
 80022a6:	e0cd      	b.n	8002444 <course_fixing_radius2speed+0x294>
	{
		uint16_t index;
		float v1, v2, vref;
		index = imax - course_state_size;
 80022a8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022ac:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80022b0:	881a      	ldrh	r2, [r3, #0]
 80022b2:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022b6:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80022c2:	f102 0292 	add.w	r2, r2, #146	; 0x92
 80022c6:	8013      	strh	r3, [r2, #0]
		v1 = accel_glaph[index];
 80022c8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022cc:	f103 0392 	add.w	r3, r3, #146	; 0x92
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80022d6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80022da:	3b74      	subs	r3, #116	; 0x74
 80022dc:	0092      	lsls	r2, r2, #2
 80022de:	4413      	add	r3, r2
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80022e6:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 80022ea:	6013      	str	r3, [r2, #0]
		v2 = flashbuffer.speed[index + 1];
 80022ec:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022f0:	f103 0392 	add.w	r3, r3, #146	; 0x92
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	4a5f      	ldr	r2, [pc, #380]	; (8002478 <course_fixing_radius2speed+0x2c8>)
 80022fa:	3310      	adds	r3, #16
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	3304      	adds	r3, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002308:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800230c:	6013      	str	r3, [r2, #0]
		if(v2 > v1)
 800230e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002312:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8002316:	ed93 7a00 	vldr	s14, [r3]
 800231a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800231e:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800232a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232e:	dd61      	ble.n	80023f4 <course_fixing_radius2speed+0x244>
		{
			if(accel_length >= pow(v2 - v1, 2))
 8002330:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002334:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	f7fe f905 	bl	8000548 <__aeabi_f2d>
 800233e:	4604      	mov	r4, r0
 8002340:	460d      	mov	r5, r1
 8002342:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002346:	f103 0388 	add.w	r3, r3, #136	; 0x88
 800234a:	ed93 7a00 	vldr	s14, [r3]
 800234e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002352:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235e:	ee17 0a90 	vmov	r0, s15
 8002362:	f7fe f8f1 	bl	8000548 <__aeabi_f2d>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	ed9f 1b41 	vldr	d1, [pc, #260]	; 8002470 <course_fixing_radius2speed+0x2c0>
 800236e:	ec43 2b10 	vmov	d0, r2, r3
 8002372:	f00c fd4f 	bl	800ee14 <pow>
 8002376:	ec53 2b10 	vmov	r2, r3, d0
 800237a:	4620      	mov	r0, r4
 800237c:	4629      	mov	r1, r5
 800237e:	f7fe fbc1 	bl	8000b04 <__aeabi_dcmpge>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00a      	beq.n	800239e <course_fixing_radius2speed+0x1ee>
			{
				vref = v2;
 8002388:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800238c:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002396:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	e034      	b.n	8002408 <course_fixing_radius2speed+0x258>
			}
			else
			{
				vref = sqrt(accel_length) + v1;
 800239e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80023a2:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	f7fe f8ce 	bl	8000548 <__aeabi_f2d>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	ec44 3b10 	vmov	d0, r3, r4
 80023b4:	f00c fe9e 	bl	800f0f4 <sqrt>
 80023b8:	ec56 5b10 	vmov	r5, r6, d0
 80023bc:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80023c0:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	f7fe f8bf 	bl	8000548 <__aeabi_f2d>
 80023ca:	4603      	mov	r3, r0
 80023cc:	460c      	mov	r4, r1
 80023ce:	461a      	mov	r2, r3
 80023d0:	4623      	mov	r3, r4
 80023d2:	4628      	mov	r0, r5
 80023d4:	4631      	mov	r1, r6
 80023d6:	f7fd ff59 	bl	800028c <__adddf3>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	4618      	mov	r0, r3
 80023e0:	4621      	mov	r1, r4
 80023e2:	f7fe fc01 	bl	8000be8 <__aeabi_d2f>
 80023e6:	4603      	mov	r3, r0
 80023e8:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80023ec:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e009      	b.n	8002408 <course_fixing_radius2speed+0x258>
			}
		}
		else
		{
			vref = v2;
 80023f4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80023f8:	f103 0388 	add.w	r3, r3, #136	; 0x88
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002402:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8002406:	6013      	str	r3, [r2, #0]
		}
		accel_glaph[index + 1] = vref;
 8002408:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800240c:	f103 0392 	add.w	r3, r3, #146	; 0x92
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8002418:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800241c:	3b74      	subs	r3, #116	; 0x74
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	4413      	add	r3, r2
 8002422:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002426:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800242e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002432:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	3b01      	subs	r3, #1
 800243a:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800243e:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8002442:	8013      	strh	r3, [r2, #0]
 8002444:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002448:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	f47f af2a 	bne.w	80022a8 <course_fixing_radius2speed+0xf8>
		printf("course_fixing_radius2speed() > accel 加速グラフ\r\n");
		#endif
	}

	/* 減速方向でのこぎりグラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002454:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002458:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002462:	f102 02ae 	add.w	r2, r2, #174	; 0xae
 8002466:	8013      	strh	r3, [r2, #0]
 8002468:	e0d0      	b.n	800260c <course_fixing_radius2speed+0x45c>
 800246a:	bf00      	nop
 800246c:	f3af 8000 	nop.w
 8002470:	00000000 	.word	0x00000000
 8002474:	40000000 	.word	0x40000000
 8002478:	200065d4 	.word	0x200065d4
 800247c:	2000041c 	.word	0x2000041c
 8002480:	3bf5c28f 	.word	0x3bf5c28f
	{
		uint16_t index;
		float v2, v3, vref;
		index = course_state_size;
 8002484:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002488:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002492:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8002496:	8013      	strh	r3, [r2, #0]
		v3 = decel_glaph[index];
 8002498:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800249c:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024a6:	3bb4      	subs	r3, #180	; 0xb4
 80024a8:	0092      	lsls	r2, r2, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80024b2:	f102 0298 	add.w	r2, r2, #152	; 0x98
 80024b6:	6013      	str	r3, [r2, #0]
		v2 = flashbuffer.speed[index - 1];
 80024b8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024bc:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	4a92      	ldr	r2, [pc, #584]	; (8002710 <course_fixing_radius2speed+0x560>)
 80024c6:	3310      	adds	r3, #16
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	3304      	adds	r3, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80024d4:	f102 0294 	add.w	r2, r2, #148	; 0x94
 80024d8:	6013      	str	r3, [r2, #0]
		if(v2 > v3)
 80024da:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024de:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80024e2:	ed93 7a00 	vldr	s14, [r3]
 80024e6:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024ea:	f103 0398 	add.w	r3, r3, #152	; 0x98
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fa:	dd61      	ble.n	80025c0 <course_fixing_radius2speed+0x410>
		{
			if(accel_length >= pow(v3 - v2, 2))
 80024fc:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002500:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	f7fe f81f 	bl	8000548 <__aeabi_f2d>
 800250a:	4604      	mov	r4, r0
 800250c:	460d      	mov	r5, r1
 800250e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002512:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8002516:	ed93 7a00 	vldr	s14, [r3]
 800251a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800251e:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252a:	ee17 0a90 	vmov	r0, s15
 800252e:	f7fe f80b 	bl	8000548 <__aeabi_f2d>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002708 <course_fixing_radius2speed+0x558>
 800253a:	ec43 2b10 	vmov	d0, r2, r3
 800253e:	f00c fc69 	bl	800ee14 <pow>
 8002542:	ec53 2b10 	vmov	r2, r3, d0
 8002546:	4620      	mov	r0, r4
 8002548:	4629      	mov	r1, r5
 800254a:	f7fe fadb 	bl	8000b04 <__aeabi_dcmpge>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <course_fixing_radius2speed+0x3ba>
			{
				vref = v2;
 8002554:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002558:	f103 0394 	add.w	r3, r3, #148	; 0x94
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002562:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e034      	b.n	80025d4 <course_fixing_radius2speed+0x424>
			}
			else
			{
				vref = sqrt(accel_length) + v3;
 800256a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800256e:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	f7fd ffe8 	bl	8000548 <__aeabi_f2d>
 8002578:	4603      	mov	r3, r0
 800257a:	460c      	mov	r4, r1
 800257c:	ec44 3b10 	vmov	d0, r3, r4
 8002580:	f00c fdb8 	bl	800f0f4 <sqrt>
 8002584:	ec56 5b10 	vmov	r5, r6, d0
 8002588:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800258c:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	f7fd ffd9 	bl	8000548 <__aeabi_f2d>
 8002596:	4603      	mov	r3, r0
 8002598:	460c      	mov	r4, r1
 800259a:	461a      	mov	r2, r3
 800259c:	4623      	mov	r3, r4
 800259e:	4628      	mov	r0, r5
 80025a0:	4631      	mov	r1, r6
 80025a2:	f7fd fe73 	bl	800028c <__adddf3>
 80025a6:	4603      	mov	r3, r0
 80025a8:	460c      	mov	r4, r1
 80025aa:	4618      	mov	r0, r3
 80025ac:	4621      	mov	r1, r4
 80025ae:	f7fe fb1b 	bl	8000be8 <__aeabi_d2f>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80025b8:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e009      	b.n	80025d4 <course_fixing_radius2speed+0x424>
			}
		}
		else
		{
			vref = v2;
 80025c0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025c4:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80025ce:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80025d2:	6013      	str	r3, [r2, #0]
		}
		decel_glaph[index - 1] = vref;
 80025d4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025d8:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	1e5a      	subs	r2, r3, #1
 80025e0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025e4:	3bb4      	subs	r3, #180	; 0xb4
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80025ee:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80025f6:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025fa:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	3b01      	subs	r3, #1
 8002602:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002606:	f102 02ae 	add.w	r2, r2, #174	; 0xae
 800260a:	8013      	strh	r3, [r2, #0]
 800260c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002610:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f47f af34 	bne.w	8002484 <course_fixing_radius2speed+0x2d4>
		printf("course_fixing_radius2speed() > decel 減速グラフ\r\n");
		#endif
	}

	/* 加速方向と減速方向で遅い方の速度を速度値として記憶させる */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800261c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002620:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800262a:	f102 02a6 	add.w	r2, r2, #166	; 0xa6
 800262e:	8013      	strh	r3, [r2, #0]
 8002630:	e05d      	b.n	80026ee <course_fixing_radius2speed+0x53e>
	{
		uint16_t index;
		index = imax - course_state_size;
 8002632:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002636:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800263a:	881a      	ldrh	r2, [r3, #0]
 800263c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002640:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800264c:	f102 029e 	add.w	r2, r2, #158	; 0x9e
 8002650:	8013      	strh	r3, [r2, #0]
		flashbuffer.speed[index] = (accel_glaph[index] > decel_glaph[index]) ? decel_glaph[index] : accel_glaph[index];
 8002652:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002656:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 800265a:	881a      	ldrh	r2, [r3, #0]
 800265c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8002660:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002664:	3b74      	subs	r3, #116	; 0x74
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	4413      	add	r3, r2
 800266a:	ed93 7a00 	vldr	s14, [r3]
 800266e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002672:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 8002676:	881a      	ldrh	r2, [r3, #0]
 8002678:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800267c:	3bb4      	subs	r3, #180	; 0xb4
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	4413      	add	r3, r2
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	dd0b      	ble.n	80026a8 <course_fixing_radius2speed+0x4f8>
 8002690:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002694:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800269e:	3bb4      	subs	r3, #180	; 0xb4
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	e00c      	b.n	80026c2 <course_fixing_radius2speed+0x512>
 80026a8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026ac:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80026b6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80026ba:	3b74      	subs	r3, #116	; 0x74
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4413      	add	r3, r2
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80026c6:	f102 029e 	add.w	r2, r2, #158	; 0x9e
 80026ca:	8812      	ldrh	r2, [r2, #0]
 80026cc:	4910      	ldr	r1, [pc, #64]	; (8002710 <course_fixing_radius2speed+0x560>)
 80026ce:	3210      	adds	r2, #16
 80026d0:	0092      	lsls	r2, r2, #2
 80026d2:	440a      	add	r2, r1
 80026d4:	3204      	adds	r2, #4
 80026d6:	6013      	str	r3, [r2, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80026d8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026dc:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80026e8:	f102 02a6 	add.w	r2, r2, #166	; 0xa6
 80026ec:	8013      	strh	r3, [r2, #0]
 80026ee:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026f2:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d19a      	bne.n	8002632 <course_fixing_radius2speed+0x482>
		#if D_COURSE
		printf("course_fixing_radius2speed() > speed 速度グラフ\r\n");
		printf("%4d, %7.3f, %7.3f\r\n", index, accel_glaph[index], decel_glaph[index]);
		#endif
	}
}
 80026fc:	bf00      	nop
 80026fe:	f507 473b 	add.w	r7, r7, #47872	; 0xbb00
 8002702:	37bc      	adds	r7, #188	; 0xbc
 8002704:	46bd      	mov	sp, r7
 8002706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002708:	00000000 	.word	0x00000000
 800270c:	40000000 	.word	0x40000000
 8002710:	200065d4 	.word	0x200065d4

08002714 <course_print_flash>:

void course_print_flash()
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
	uint16_t course_state_size;
	course_state_size = COURSE_STATE_SIZE;
 800271a:	f241 7370 	movw	r3, #6000	; 0x1770
 800271e:	81fb      	strh	r3, [r7, #14]
	//! print flash contents
	while(switch_read_enter())
 8002720:	e043      	b.n	80027aa <course_print_flash+0x96>
	{
		if(course_state_size > 0)
 8002722:	89fb      	ldrh	r3, [r7, #14]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d03c      	beq.n	80027a2 <course_print_flash+0x8e>
		{
			uint16_t index;
			float print_data;
			index = COURSE_STATE_SIZE - course_state_size;
 8002728:	89fb      	ldrh	r3, [r7, #14]
 800272a:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 800272e:	3310      	adds	r3, #16
 8002730:	80fb      	strh	r3, [r7, #6]
			switch(rotary_read_value())
 8002732:	f7fe ff11 	bl	8001558 <rotary_read_value>
 8002736:	4603      	mov	r3, r0
 8002738:	2b0e      	cmp	r3, #14
 800273a:	d00d      	beq.n	8002758 <course_print_flash+0x44>
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d002      	beq.n	8002746 <course_print_flash+0x32>
 8002740:	2b0d      	cmp	r3, #13
 8002742:	d014      	beq.n	800276e <course_print_flash+0x5a>
					break;
				case 13:
					print_data = flashbuffer.course_state_count_max;
					break;
				default :
					break;
 8002744:	e01c      	b.n	8002780 <course_print_flash+0x6c>
					print_data = flashbuffer.speed[index];
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <course_print_flash+0xa8>)
 800274a:	3310      	adds	r3, #16
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	3304      	adds	r3, #4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60bb      	str	r3, [r7, #8]
					break;
 8002756:	e013      	b.n	8002780 <course_print_flash+0x6c>
					print_data = flashbuffer.marker[index];
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <course_print_flash+0xa8>)
 800275c:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002760:	3330      	adds	r3, #48	; 0x30
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	3304      	adds	r3, #4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60bb      	str	r3, [r7, #8]
					break;
 800276c:	e008      	b.n	8002780 <course_print_flash+0x6c>
					print_data = flashbuffer.course_state_count_max;
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <course_print_flash+0xa8>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277a:	edc7 7a02 	vstr	s15, [r7, #8]
					break;
 800277e:	bf00      	nop
			}
			printf("%6d, %8lf\r\n", index, print_data);
 8002780:	88fc      	ldrh	r4, [r7, #6]
 8002782:	68b8      	ldr	r0, [r7, #8]
 8002784:	f7fd fee0 	bl	8000548 <__aeabi_f2d>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4621      	mov	r1, r4
 800278e:	480c      	ldr	r0, [pc, #48]	; (80027c0 <course_print_flash+0xac>)
 8002790:	f008 ff4a 	bl	800b628 <iprintf>
			course_state_size = course_state_size - 1;
 8002794:	89fb      	ldrh	r3, [r7, #14]
 8002796:	3b01      	subs	r3, #1
 8002798:	81fb      	strh	r3, [r7, #14]
			HAL_Delay(100);
 800279a:	2064      	movs	r0, #100	; 0x64
 800279c:	f003 fb08 	bl	8005db0 <HAL_Delay>
 80027a0:	e003      	b.n	80027aa <course_print_flash+0x96>
		}
		else
		{
			HAL_Delay(1000);
 80027a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027a6:	f003 fb03 	bl	8005db0 <HAL_Delay>
	while(switch_read_enter())
 80027aa:	f7fe ffc3 	bl	8001734 <switch_read_enter>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1b6      	bne.n	8002722 <course_print_flash+0xe>
		}
	}
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}
 80027bc:	200065d4 	.word	0x200065d4
 80027c0:	080101e0 	.word	0x080101e0

080027c4 <course_reset_flash>:

void course_reset_flash()
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 80027ca:	f241 7370 	movw	r3, #6000	; 0x1770
 80027ce:	80fb      	strh	r3, [r7, #6]
 80027d0:	e00f      	b.n	80027f2 <course_reset_flash+0x2e>
	{
		uint16_t index;
		index = COURSE_STATE_SIZE - course_state_size;
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 80027d8:	3310      	adds	r3, #16
 80027da:	80bb      	strh	r3, [r7, #4]
		flashbuffer.speed[index] = COURSE_SPEED_DEFAULT;
 80027dc:	88bb      	ldrh	r3, [r7, #4]
 80027de:	4a09      	ldr	r2, [pc, #36]	; (8002804 <course_reset_flash+0x40>)
 80027e0:	3310      	adds	r3, #16
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	3304      	adds	r3, #4
 80027e8:	4a07      	ldr	r2, [pc, #28]	; (8002808 <course_reset_flash+0x44>)
 80027ea:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	80fb      	strh	r3, [r7, #6]
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1ec      	bne.n	80027d2 <course_reset_flash+0xe>
	}
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	200065d4 	.word	0x200065d4
 8002808:	3f7fbe77 	.word	0x3f7fbe77

0800280c <encoder_length_left>:
    //! 単位は [ um ]
    return (float) encoder * (float) LENGTHPERPULSE;
}

float encoder_length_left()
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_left() > ");
    printf("encoder_left * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_left, LENGTHPERPULSE, encoder_left * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_left * (float) LENGTHPERPULSE;
 8002810:	4b08      	ldr	r3, [pc, #32]	; (8002834 <encoder_length_left+0x28>)
 8002812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800281e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002838 <encoder_length_left+0x2c>
 8002822:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002826:	eeb0 0a67 	vmov.f32	s0, s15
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	200065c4 	.word	0x200065c4
 8002838:	41076bf7 	.word	0x41076bf7

0800283c <encoder_length_right>:

float encoder_length_right()
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_right() > ");
    printf("encoder_right * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_right, LENGTHPERPULSE, encoder_right * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_right * (float) LENGTHPERPULSE;
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <encoder_length_right+0x28>)
 8002842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800284e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002868 <encoder_length_right+0x2c>
 8002852:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002856:	eeb0 0a67 	vmov.f32	s0, s15
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	200065cc 	.word	0x200065cc
 8002868:	41076bf7 	.word	0x41076bf7

0800286c <encoder_d_print>:

void encoder_d_print()
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("encoder.c > encoder_left = %5d, encoder_left = %5d, encoder = %f\r\n", encoder_left, encoder_right, encoder);
    #endif
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <encoder_set>:

/* only read tim10_update_values */
void encoder_set()
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <encoder_set+0x58>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	b29b      	uxth	r3, r3
 8002886:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800288a:	b29b      	uxth	r3, r3
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <encoder_set+0x5c>)
 8002890:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <encoder_set+0x60>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	b29b      	uxth	r3, r3
 8002898:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800289c:	b29b      	uxth	r3, r3
 800289e:	b21a      	sxth	r2, r3
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <encoder_set+0x64>)
 80028a2:	801a      	strh	r2, [r3, #0]
    //! 単位 [ cnt / sampling_time_s ]
    encoder = (encoder_left + encoder_right) / (float) 2;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <encoder_set+0x5c>)
 80028a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <encoder_set+0x64>)
 80028ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b2:	4413      	add	r3, r2
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80028c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <encoder_set+0x68>)
 80028c6:	edc3 7a00 	vstr	s15, [r3]
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set() > ");
    printf("encoder_left = %6d, encoder_right = %6d, encoder = %6.1f\r\n", encoder_left, encoder_right, encoder);
    #endif

    encoder_set_middle();
 80028ca:	f000 f84d 	bl	8002968 <encoder_set_middle>
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40010000 	.word	0x40010000
 80028d8:	200065c4 	.word	0x200065c4
 80028dc:	40000400 	.word	0x40000400
 80028e0:	200065cc 	.word	0x200065cc
 80028e4:	200065c8 	.word	0x200065c8

080028e8 <encoder_init>:

void encoder_init()
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
    #endif
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
    encoder_left = 0;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <encoder_start+0x38>)
 80028fe:	2200      	movs	r2, #0
 8002900:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <encoder_start+0x3c>)
 8002904:	2200      	movs	r2, #0
 8002906:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <encoder_start+0x40>)
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

    encoder_set_middle();
 8002910:	f000 f82a 	bl	8002968 <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002914:	213c      	movs	r1, #60	; 0x3c
 8002916:	4809      	ldr	r0, [pc, #36]	; (800293c <encoder_start+0x44>)
 8002918:	f006 fec4 	bl	80096a4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800291c:	213c      	movs	r1, #60	; 0x3c
 800291e:	4808      	ldr	r0, [pc, #32]	; (8002940 <encoder_start+0x48>)
 8002920:	f006 fec0 	bl	80096a4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 8002924:	4807      	ldr	r0, [pc, #28]	; (8002944 <encoder_start+0x4c>)
 8002926:	f006 fbf1 	bl	800910c <HAL_TIM_Base_Start_IT>
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200065c4 	.word	0x200065c4
 8002934:	200065cc 	.word	0x200065cc
 8002938:	200065c8 	.word	0x200065c8
 800293c:	200064a8 	.word	0x200064a8
 8002940:	20006328 	.word	0x20006328
 8002944:	200062e0 	.word	0x200062e0

08002948 <encoder_stop>:

void encoder_stop()
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 800294c:	213c      	movs	r1, #60	; 0x3c
 800294e:	4804      	ldr	r0, [pc, #16]	; (8002960 <encoder_stop+0x18>)
 8002950:	f006 ff35 	bl	80097be <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8002954:	213c      	movs	r1, #60	; 0x3c
 8002956:	4803      	ldr	r0, [pc, #12]	; (8002964 <encoder_stop+0x1c>)
 8002958:	f006 ff31 	bl	80097be <HAL_TIM_Encoder_Stop>
}
 800295c:	bf00      	nop
 800295e:	bd80      	pop	{r7, pc}
 8002960:	200064a8 	.word	0x200064a8
 8002964:	20006328 	.word	0x20006328

08002968 <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <encoder_set_middle+0x20>)
 800296e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <encoder_set_middle+0x24>)
 8002976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set_middle() > ");
    printf("TIM1 -> CNT = %6lu, TIM3 -> CNT = %6lu\r\n", TIM1->CNT, TIM3->CNT);
    #endif
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40010000 	.word	0x40010000
 800298c:	40000400 	.word	0x40000400

08002990 <fixed_section_start>:
#include "fixed_section.h"

float fixed_section_speed_now;

void fixed_section_start()
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
    fixed_section_speed_now = flashbuffer.speed[0];
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <fixed_section_start+0x18>)
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	4a04      	ldr	r2, [pc, #16]	; (80029ac <fixed_section_start+0x1c>)
 800299a:	6013      	str	r3, [r2, #0]
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	200065d4 	.word	0x200065d4
 80029ac:	200065d0 	.word	0x200065d0

080029b0 <fixed_section_main>:
 * @brief 一定距離ごとに course_state_function() を呼び出す関数
 * @attention
 * 
 */
void fixed_section_main()
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
    float fixed_length;
    //! 現在点の区間長を取得
    fixed_length = section_length_read();
 80029b6:	f001 fac9 	bl	8003f4c <section_length_read>
 80029ba:	ed87 0a01 	vstr	s0, [r7, #4]
    if(fixed_length >= COURSE_SAMPLING_LENGTH)
 80029be:	edd7 7a01 	vldr	s15, [r7, #4]
 80029c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80029e0 <fixed_section_main+0x30>
 80029c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	da00      	bge.n	80029d2 <fixed_section_main+0x22>
    {
        //! 現在点の区間長が閾値を超えた時
        course_state_function();
    }
}
 80029d0:	e001      	b.n	80029d6 <fixed_section_main+0x26>
        course_state_function();
 80029d2:	f7ff fb19 	bl	8002008 <course_state_function>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	3c23d70a 	.word	0x3c23d70a

080029e4 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 80029ea:	2300      	movs	r3, #0
 80029ec:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 80029ee:	230b      	movs	r3, #11
 80029f0:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80029f6:	2302      	movs	r3, #2
 80029f8:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 80029fe:	463a      	mov	r2, r7
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f004 fcfb 	bl	8007400 <HAL_FLASHEx_Erase>
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 8002a12:	b590      	push	{r4, r7, lr}
 8002a14:	b087      	sub	sp, #28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 8002a1e:	f004 fb8f 	bl	8007140 <HAL_FLASH_Unlock>
	flash_erase();
 8002a22:	f7ff ffdf 	bl	80029e4 <flash_erase>

	for (uint32_t add = address; add < (address + size); add++)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e010      	b.n	8002a4e <flash_writting+0x3c>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f04f 0400 	mov.w	r4, #0
 8002a36:	461a      	mov	r2, r3
 8002a38:	4623      	mov	r3, r4
 8002a3a:	6979      	ldr	r1, [r7, #20]
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f004 fb2b 	bl	8007098 <HAL_FLASH_Program>
		data++;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d3e8      	bcc.n	8002a2c <flash_writting+0x1a>
	}

	HAL_FLASH_Lock();
 8002a5a:	f004 fb93 	bl	8007184 <HAL_FLASH_Lock>
#endif
}
 8002a5e:	bf00      	nop
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd90      	pop	{r4, r7, pc}

08002a66 <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4619      	mov	r1, r3
 8002a78:	68b8      	ldr	r0, [r7, #8]
 8002a7a:	f007 ff83 	bl	800a984 <memcpy>
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <flash_write>:

void flash_write()
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	flash_writting(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <flash_write+0x14>)
 8002a8e:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <flash_write+0x18>)
 8002a90:	4904      	ldr	r1, [pc, #16]	; (8002aa4 <flash_write+0x1c>)
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ffbd 	bl	8002a12 <flash_writting>
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	080e0000 	.word	0x080e0000
 8002aa0:	00011984 	.word	0x00011984
 8002aa4:	200065d4 	.word	0x200065d4

08002aa8 <flash_read>:

void flash_read()
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
	flash_reading(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <flash_read+0x14>)
 8002aae:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <flash_read+0x18>)
 8002ab0:	4904      	ldr	r1, [pc, #16]	; (8002ac4 <flash_read+0x1c>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff ffd7 	bl	8002a66 <flash_reading>
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	080e0000 	.word	0x080e0000
 8002ac0:	00011984 	.word	0x00011984
 8002ac4:	200065d4 	.word	0x200065d4

08002ac8 <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	flash_read();
 8002acc:	f7ff ffec 	bl	8002aa8 <flash_read>
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <low_pass_filter>:
#include "function.h"

double low_pass_filter(double val, double pre_val, double gamma)
{
 8002ad4:	b5b0      	push	{r4, r5, r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	ed87 0b04 	vstr	d0, [r7, #16]
 8002ade:	ed87 1b02 	vstr	d1, [r7, #8]
 8002ae2:	ed87 2b00 	vstr	d2, [r7]
	return (double) (gamma * (double) pre_val
 8002ae6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002aee:	f7fd fd83 	bl	80005f8 <__aeabi_dmul>
 8002af2:	4603      	mov	r3, r0
 8002af4:	460c      	mov	r4, r1
 8002af6:	4625      	mov	r5, r4
 8002af8:	461c      	mov	r4, r3
			+ (double) (1 - gamma) * (double) val);
 8002afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002afe:	f04f 0000 	mov.w	r0, #0
 8002b02:	490e      	ldr	r1, [pc, #56]	; (8002b3c <low_pass_filter+0x68>)
 8002b04:	f7fd fbc0 	bl	8000288 <__aeabi_dsub>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b14:	f7fd fd70 	bl	80005f8 <__aeabi_dmul>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
	return (double) (gamma * (double) pre_val
 8002b1c:	4620      	mov	r0, r4
 8002b1e:	4629      	mov	r1, r5
 8002b20:	f7fd fbb4 	bl	800028c <__adddf3>
 8002b24:	4603      	mov	r3, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	ec44 3b17 	vmov	d7, r3, r4
}
 8002b2c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b30:	eef0 0a67 	vmov.f32	s1, s15
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	3ff00000 	.word	0x3ff00000

08002b40 <vector3_creation>:

    return vector_sum;
}

Vector3 vector3_creation(float x, float y, float z)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b08f      	sub	sp, #60	; 0x3c
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	ed87 0a07 	vstr	s0, [r7, #28]
 8002b4a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002b4e:	ed87 1a05 	vstr	s2, [r7, #20]
    Vector3 new;
    new.x = x;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	623b      	str	r3, [r7, #32]
    new.y = y;
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
    new.z = z;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    return new;
 8002b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b62:	f107 0220 	add.w	r2, r7, #32
 8002b66:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	ee06 1a90 	vmov	s13, r1
 8002b76:	ee07 2a10 	vmov	s14, r2
 8002b7a:	ee07 3a90 	vmov	s15, r3
}
 8002b7e:	eeb0 0a66 	vmov.f32	s0, s13
 8002b82:	eef0 0a47 	vmov.f32	s1, s14
 8002b86:	eeb0 1a67 	vmov.f32	s2, s15
 8002b8a:	373c      	adds	r7, #60	; 0x3c
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <length_set_sampling_time_ms>:
float velocity_left, velocity_right;
float length_update_sampling_time_s;
uint8_t length_started;

void length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
    length_update_sampling_time_s = samplingtime_ms / (float) 1000;
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	ee07 3a90 	vmov	s15, r3
 8002ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba8:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002bc4 <length_set_sampling_time_ms+0x30>
 8002bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <length_set_sampling_time_ms+0x34>)
 8002bb2:	edc3 7a00 	vstr	s15, [r3]
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	447a0000 	.word	0x447a0000
 8002bc8:	20017f58 	.word	0x20017f58

08002bcc <length_init>:

void length_init(unsigned short int samplingtime_ms)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	80fb      	strh	r3, [r7, #6]
    length_started = 0;
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <length_init+0x24>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
    length_set_sampling_time_ms(samplingtime_ms);
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ffd8 	bl	8002b94 <length_set_sampling_time_ms>
    encoder_init();
 8002be4:	f7ff fe80 	bl	80028e8 <encoder_init>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20017f60 	.word	0x20017f60

08002bf4 <length_start>:

void length_start()
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
    if(0 >= length_started)
 8002bf8:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <length_start+0x20>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d103      	bne.n	8002c08 <length_start+0x14>
    {
        length_reset();
 8002c00:	f000 f816 	bl	8002c30 <length_reset>
        encoder_start();
 8002c04:	f7ff fe78 	bl	80028f8 <encoder_start>
    }
    length_started = 1;
 8002c08:	4b02      	ldr	r3, [pc, #8]	; (8002c14 <length_start+0x20>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20017f60 	.word	0x20017f60

08002c18 <length_stop>:

void length_stop()
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
    encoder_stop();
 8002c1c:	f7ff fe94 	bl	8002948 <encoder_stop>
    length_started = 0;
 8002c20:	4b02      	ldr	r3, [pc, #8]	; (8002c2c <length_stop+0x14>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20017f60 	.word	0x20017f60

08002c30 <length_reset>:
{
    encoder_fin();
}

void length_reset()
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
    length_left = 0;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <length_reset+0x20>)
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
    length_right = 0;
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <length_reset+0x24>)
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20017f5c 	.word	0x20017f5c
 8002c54:	20017f6c 	.word	0x20017f6c

08002c58 <length_read>:

float length_read()
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	ed2d 8b02 	vpush	{d8}
 8002c5e:	af00      	add	r7, sp, #0
    return (length_read_left() + length_read_right()) / 2;
 8002c60:	f000 f814 	bl	8002c8c <length_read_left>
 8002c64:	eeb0 8a40 	vmov.f32	s16, s0
 8002c68:	f000 f81e 	bl	8002ca8 <length_read_right>
 8002c6c:	eef0 7a40 	vmov.f32	s15, s0
 8002c70:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002c74:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002c78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c7c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002c80:	eeb0 0a67 	vmov.f32	s0, s15
 8002c84:	46bd      	mov	sp, r7
 8002c86:	ecbd 8b02 	vpop	{d8}
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <length_read_left>:

float length_read_left()
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
    return length_left;
 8002c90:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <length_read_left+0x18>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	ee07 3a90 	vmov	s15, r3
}
 8002c98:	eeb0 0a67 	vmov.f32	s0, s15
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	20017f5c 	.word	0x20017f5c

08002ca8 <length_read_right>:

float length_read_right()
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
    return length_right;
 8002cac:	4b04      	ldr	r3, [pc, #16]	; (8002cc0 <length_read_right+0x18>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	ee07 3a90 	vmov	s15, r3
}
 8002cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	20017f6c 	.word	0x20017f6c

08002cc4 <velocity_read>:

float velocity_read()
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	ed2d 8b02 	vpush	{d8}
 8002cca:	af00      	add	r7, sp, #0
    return (velocity_read_left() + velocity_read_right()) / 2;
 8002ccc:	f000 f814 	bl	8002cf8 <velocity_read_left>
 8002cd0:	eeb0 8a40 	vmov.f32	s16, s0
 8002cd4:	f000 f81e 	bl	8002d14 <velocity_read_right>
 8002cd8:	eef0 7a40 	vmov.f32	s15, s0
 8002cdc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002ce0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002ce4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ce8:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cec:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	ecbd 8b02 	vpop	{d8}
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <velocity_read_left>:

float velocity_read_left()
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
    return velocity_left;
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <velocity_read_left+0x18>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	ee07 3a90 	vmov	s15, r3
}
 8002d04:	eeb0 0a67 	vmov.f32	s0, s15
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	20017f68 	.word	0x20017f68

08002d14 <velocity_read_right>:

float velocity_read_right()
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
    return velocity_right;
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <velocity_read_right+0x18>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	ee07 3a90 	vmov	s15, r3
}
 8002d20:	eeb0 0a67 	vmov.f32	s0, s15
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	20017f64 	.word	0x20017f64

08002d30 <length_update>:

//! エンコーダの値を読み、速度と距離を計算する
void length_update()
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
    float encoder_left, encoder_right;
    float sampling_time_s;
    sampling_time_s = length_update_sampling_time_s;
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <length_update+0x88>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	60fb      	str	r3, [r7, #12]
    //! エンコーダの値を読み、中央値に戻す
    encoder_set();
 8002d3c:	f7ff fd9e 	bl	800287c <encoder_set>
    encoder_left = encoder_length_left();
 8002d40:	f7ff fd64 	bl	800280c <encoder_length_left>
 8002d44:	ed87 0a02 	vstr	s0, [r7, #8]
    encoder_right = encoder_length_right();
 8002d48:	f7ff fd78 	bl	800283c <encoder_length_right>
 8002d4c:	ed87 0a01 	vstr	s0, [r7, #4]
    velocity_left = encoder_left * sampling_time_s;
 8002d50:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5c:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <length_update+0x8c>)
 8002d5e:	edc3 7a00 	vstr	s15, [r3]
    velocity_right = encoder_right * sampling_time_s;
 8002d62:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d66:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <length_update+0x90>)
 8002d70:	edc3 7a00 	vstr	s15, [r3]
    length_left += velocity_left * sampling_time_s;
 8002d74:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <length_update+0x8c>)
 8002d76:	ed93 7a00 	vldr	s14, [r3]
 8002d7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <length_update+0x94>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <length_update+0x94>)
 8002d8e:	edc3 7a00 	vstr	s15, [r3]
    length_right += velocity_right * sampling_time_s;
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <length_update+0x90>)
 8002d94:	ed93 7a00 	vldr	s14, [r3]
 8002d98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <length_update+0x98>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <length_update+0x98>)
 8002dac:	edc3 7a00 	vstr	s15, [r3]
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20017f58 	.word	0x20017f58
 8002dbc:	20017f68 	.word	0x20017f68
 8002dc0:	20017f64 	.word	0x20017f64
 8002dc4:	20017f5c 	.word	0x20017f5c
 8002dc8:	20017f6c 	.word	0x20017f6c

08002dcc <length_d_print>:

void length_d_print()
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
    #if D_LENGTH
    printf("length = %10.2f, sampling_time_s = %8.6f\r\n", length_read(), length_update_sampling_time_s);
    //! printf("velocity = %10.2f\r\n", velocity_read());
    #endif
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0e      	ldr	r2, [pc, #56]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		#if !D_TIM6_WHILE
		tim6_main();
 8002dee:	f002 f851 	bl	8004e94 <tim6_main>
		#endif
	}

	if(htim->Instance == TIM10)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d101      	bne.n	8002e00 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		#if !D_TIM7_WHILE
		tim7_main();
 8002dfc:	f002 f94e 	bl	800509c <tim7_main>
		#endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    #if !D_TIM10_WHILE
		tim10_main();
 8002e0a:	f001 ff7d 	bl	8004d08 <tim10_main>
    #endif
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a06      	ldr	r2, [pc, #24]	; (8002e2c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim11_main();
 8002e18:	f001 ffee 	bl	8004df8 <tim11_main>
	}
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40001000 	.word	0x40001000
 8002e28:	40014400 	.word	0x40014400
 8002e2c:	40014800 	.word	0x40014800

08002e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e34:	f002 ff4a 	bl	8005ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e38:	f000 f95c 	bl	80030f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e3c:	f000 fd7e 	bl	800393c <MX_GPIO_Init>
  MX_DMA_Init();
 8002e40:	f000 fd5c 	bl	80038fc <MX_DMA_Init>
  MX_ADC1_Init();
 8002e44:	f000 f9c0 	bl	80031c8 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8002e48:	f000 fd2e 	bl	80038a8 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8002e4c:	f000 fc54 	bl	80036f8 <MX_TIM6_Init>
  MX_TIM4_Init();
 8002e50:	f000 fbee 	bl	8003630 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002e54:	f000 fb40 	bl	80034d8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002e58:	f000 fb96 	bl	8003588 <MX_TIM3_Init>
  MX_TIM10_Init();
 8002e5c:	f000 fcb8 	bl	80037d0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002e60:	f000 fcda 	bl	8003818 <MX_TIM11_Init>
  MX_SPI2_Init();
 8002e64:	f000 fb02 	bl	800346c <MX_SPI2_Init>
  MX_I2C1_Init();
 8002e68:	f000 fad2 	bl	8003410 <MX_I2C1_Init>
  MX_TIM14_Init();
 8002e6c:	f000 fcf8 	bl	8003860 <MX_TIM14_Init>
  MX_TIM7_Init();
 8002e70:	f000 fc78 	bl	8003764 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8002e74:	489d      	ldr	r0, [pc, #628]	; (80030ec <main+0x2bc>)
 8002e76:	f008 fbd7 	bl	800b628 <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8002e7a:	489d      	ldr	r0, [pc, #628]	; (80030f0 <main+0x2c0>)
 8002e7c:	f008 fc48 	bl	800b710 <puts>

  main_init();
 8002e80:	f000 fe46 	bl	8003b10 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 8002e84:	f000 fea6 	bl	8003bd4 <main_print_while>

		if(switch_read_enter())
 8002e88:	f7fe fc54 	bl	8001734 <switch_read_enter>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 8124 	beq.w	80030dc <main+0x2ac>
		{
			switch(rotary_read())
 8002e94:	f7fe fb6c 	bl	8001570 <rotary_read>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	f200 8120 	bhi.w	80030e0 <main+0x2b0>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <main+0x78>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002ee9 	.word	0x08002ee9
 8002eac:	08002f27 	.word	0x08002f27
 8002eb0:	08002f41 	.word	0x08002f41
 8002eb4:	08002f5b 	.word	0x08002f5b
 8002eb8:	08002f75 	.word	0x08002f75
 8002ebc:	08002f8f 	.word	0x08002f8f
 8002ec0:	08002fa9 	.word	0x08002fa9
 8002ec4:	08002fc3 	.word	0x08002fc3
 8002ec8:	08002fdd 	.word	0x08002fdd
 8002ecc:	08002ff7 	.word	0x08002ff7
 8002ed0:	08003011 	.word	0x08003011
 8002ed4:	0800302b 	.word	0x0800302b
 8002ed8:	08003045 	.word	0x08003045
 8002edc:	0800305f 	.word	0x0800305f
 8002ee0:	08003089 	.word	0x08003089
 8002ee4:	080030b3 	.word	0x080030b3
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8002ee8:	f7fe fb1e 	bl	8001528 <rotary_read_playmode>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10c      	bne.n	8002f0c <main+0xdc>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 8002ef2:	f7fe fd99 	bl	8001a28 <analog_calibration_start>

            while(switch_read_enter())
 8002ef6:	e001      	b.n	8002efc <main+0xcc>
            {
              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_main();
 8002ef8:	f000 fe9c 	bl	8003c34 <main_main>
            while(switch_read_enter())
 8002efc:	f7fe fc1a 	bl	8001734 <switch_read_enter>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f8      	bne.n	8002ef8 <main+0xc8>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 8002f06:	f7fe fdb7 	bl	8001a78 <analog_calibration_stop>
              main_main();
            }

            running_stop();
          }
          break;	// case 0x00:
 8002f0a:	e0ea      	b.n	80030e2 <main+0x2b2>
            running_start();
 8002f0c:	f000 fe17 	bl	8003b3e <running_start>
            while(switch_read_enter())
 8002f10:	e001      	b.n	8002f16 <main+0xe6>
              main_main();
 8002f12:	f000 fe8f 	bl	8003c34 <main_main>
            while(switch_read_enter())
 8002f16:	f7fe fc0d 	bl	8001734 <switch_read_enter>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1f8      	bne.n	8002f12 <main+0xe2>
            running_stop();
 8002f20:	f000 fe42 	bl	8003ba8 <running_stop>
          break;	// case 0x00:
 8002f24:	e0dd      	b.n	80030e2 <main+0x2b2>
        case 0x01:	// 1
          running_start();
 8002f26:	f000 fe0a 	bl	8003b3e <running_start>

          while (switch_read_enter())
 8002f2a:	e001      	b.n	8002f30 <main+0x100>
          {
            main_main();
 8002f2c:	f000 fe82 	bl	8003c34 <main_main>
          while (switch_read_enter())
 8002f30:	f7fe fc00 	bl	8001734 <switch_read_enter>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f8      	bne.n	8002f2c <main+0xfc>
          }

          running_stop();
 8002f3a:	f000 fe35 	bl	8003ba8 <running_stop>
          break;
 8002f3e:	e0d0      	b.n	80030e2 <main+0x2b2>
        case 0x02:	// 2
          running_start();
 8002f40:	f000 fdfd 	bl	8003b3e <running_start>

          while(switch_read_enter())
 8002f44:	e001      	b.n	8002f4a <main+0x11a>
          {
            main_main();
 8002f46:	f000 fe75 	bl	8003c34 <main_main>
          while(switch_read_enter())
 8002f4a:	f7fe fbf3 	bl	8001734 <switch_read_enter>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f8      	bne.n	8002f46 <main+0x116>
          }

          running_stop();
 8002f54:	f000 fe28 	bl	8003ba8 <running_stop>
          break;
 8002f58:	e0c3      	b.n	80030e2 <main+0x2b2>
        case 0x03:	// 3
          running_start();
 8002f5a:	f000 fdf0 	bl	8003b3e <running_start>

          while(switch_read_enter())
 8002f5e:	e001      	b.n	8002f64 <main+0x134>
          {
            main_main();
 8002f60:	f000 fe68 	bl	8003c34 <main_main>
          while(switch_read_enter())
 8002f64:	f7fe fbe6 	bl	8001734 <switch_read_enter>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f8      	bne.n	8002f60 <main+0x130>
          }

          running_stop();
 8002f6e:	f000 fe1b 	bl	8003ba8 <running_stop>
          break;
 8002f72:	e0b6      	b.n	80030e2 <main+0x2b2>
        case 0x04:	// 4
          running_start();
 8002f74:	f000 fde3 	bl	8003b3e <running_start>

          while(switch_read_enter())
 8002f78:	e001      	b.n	8002f7e <main+0x14e>
          {
            main_main();
 8002f7a:	f000 fe5b 	bl	8003c34 <main_main>
          while(switch_read_enter())
 8002f7e:	f7fe fbd9 	bl	8001734 <switch_read_enter>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f8      	bne.n	8002f7a <main+0x14a>
          }

          running_stop();
 8002f88:	f000 fe0e 	bl	8003ba8 <running_stop>
          break;
 8002f8c:	e0a9      	b.n	80030e2 <main+0x2b2>
        case 0x05:	// 5
          running_start();
 8002f8e:	f000 fdd6 	bl	8003b3e <running_start>

          while(switch_read_enter())
 8002f92:	e001      	b.n	8002f98 <main+0x168>
          {
            main_main();
 8002f94:	f000 fe4e 	bl	8003c34 <main_main>
          while(switch_read_enter())
 8002f98:	f7fe fbcc 	bl	8001734 <switch_read_enter>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f8      	bne.n	8002f94 <main+0x164>
          }

          running_stop();
 8002fa2:	f000 fe01 	bl	8003ba8 <running_stop>
          break;
 8002fa6:	e09c      	b.n	80030e2 <main+0x2b2>
        case 0x06:	// 6
          running_start();
 8002fa8:	f000 fdc9 	bl	8003b3e <running_start>

          while(switch_read_enter())
 8002fac:	e001      	b.n	8002fb2 <main+0x182>
          {
            main_main();
 8002fae:	f000 fe41 	bl	8003c34 <main_main>
          while(switch_read_enter())
 8002fb2:	f7fe fbbf 	bl	8001734 <switch_read_enter>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f8      	bne.n	8002fae <main+0x17e>
          }

          running_stop();
 8002fbc:	f000 fdf4 	bl	8003ba8 <running_stop>
          break;
 8002fc0:	e08f      	b.n	80030e2 <main+0x2b2>
        case 0x07:	// 7
          running_start();
 8002fc2:	f000 fdbc 	bl	8003b3e <running_start>

          while(switch_read_enter())
 8002fc6:	e001      	b.n	8002fcc <main+0x19c>
          {
            main_main();
 8002fc8:	f000 fe34 	bl	8003c34 <main_main>
          while(switch_read_enter())
 8002fcc:	f7fe fbb2 	bl	8001734 <switch_read_enter>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f8      	bne.n	8002fc8 <main+0x198>
          }

          running_stop();
 8002fd6:	f000 fde7 	bl	8003ba8 <running_stop>
          break;
 8002fda:	e082      	b.n	80030e2 <main+0x2b2>
        case 0x08:	// 8
          running_start();
 8002fdc:	f000 fdaf 	bl	8003b3e <running_start>

          while(switch_read_enter())
 8002fe0:	e001      	b.n	8002fe6 <main+0x1b6>
          {
            main_main();
 8002fe2:	f000 fe27 	bl	8003c34 <main_main>
          while(switch_read_enter())
 8002fe6:	f7fe fba5 	bl	8001734 <switch_read_enter>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f8      	bne.n	8002fe2 <main+0x1b2>
          }

          running_stop();
 8002ff0:	f000 fdda 	bl	8003ba8 <running_stop>
          break;
 8002ff4:	e075      	b.n	80030e2 <main+0x2b2>
        case 0x09:	// 9
          running_start();
 8002ff6:	f000 fda2 	bl	8003b3e <running_start>

          while(switch_read_enter())
 8002ffa:	e001      	b.n	8003000 <main+0x1d0>
          {
            main_main();
 8002ffc:	f000 fe1a 	bl	8003c34 <main_main>
          while(switch_read_enter())
 8003000:	f7fe fb98 	bl	8001734 <switch_read_enter>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f8      	bne.n	8002ffc <main+0x1cc>
          }

          running_stop();
 800300a:	f000 fdcd 	bl	8003ba8 <running_stop>
          break;
 800300e:	e068      	b.n	80030e2 <main+0x2b2>
        case 0x0A:	// A
          running_start();
 8003010:	f000 fd95 	bl	8003b3e <running_start>

          while(switch_read_enter())
 8003014:	e001      	b.n	800301a <main+0x1ea>
          {
            main_main();
 8003016:	f000 fe0d 	bl	8003c34 <main_main>
          while(switch_read_enter())
 800301a:	f7fe fb8b 	bl	8001734 <switch_read_enter>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f8      	bne.n	8003016 <main+0x1e6>
          }

          running_stop();
 8003024:	f000 fdc0 	bl	8003ba8 <running_stop>
          break;
 8003028:	e05b      	b.n	80030e2 <main+0x2b2>
        case 0x0B:	// B
          running_start();
 800302a:	f000 fd88 	bl	8003b3e <running_start>

          while(switch_read_enter())
 800302e:	e001      	b.n	8003034 <main+0x204>
          {
            main_main();
 8003030:	f000 fe00 	bl	8003c34 <main_main>
          while(switch_read_enter())
 8003034:	f7fe fb7e 	bl	8001734 <switch_read_enter>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f8      	bne.n	8003030 <main+0x200>
          }

          running_stop();
 800303e:	f000 fdb3 	bl	8003ba8 <running_stop>
          break;
 8003042:	e04e      	b.n	80030e2 <main+0x2b2>
        case 0x0C:	// C
          running_start();
 8003044:	f000 fd7b 	bl	8003b3e <running_start>

          while(switch_read_enter())
 8003048:	e001      	b.n	800304e <main+0x21e>
          {
            main_main();
 800304a:	f000 fdf3 	bl	8003c34 <main_main>
          while(switch_read_enter())
 800304e:	f7fe fb71 	bl	8001734 <switch_read_enter>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f8      	bne.n	800304a <main+0x21a>
          }

          running_stop();
 8003058:	f000 fda6 	bl	8003ba8 <running_stop>
          break;
 800305c:	e041      	b.n	80030e2 <main+0x2b2>
        case 0x0D:	// D
          if(rotary_read_playmode() == flash_print)
 800305e:	f7fe fa63 	bl	8001528 <rotary_read_playmode>
 8003062:	4603      	mov	r3, r0
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d102      	bne.n	800306e <main+0x23e>
          {
            course_print_flash();
 8003068:	f7ff fb54 	bl	8002714 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 800306c:	e039      	b.n	80030e2 <main+0x2b2>
            running_start();
 800306e:	f000 fd66 	bl	8003b3e <running_start>
            while(switch_read_enter())
 8003072:	e001      	b.n	8003078 <main+0x248>
              main_main();
 8003074:	f000 fdde 	bl	8003c34 <main_main>
            while(switch_read_enter())
 8003078:	f7fe fb5c 	bl	8001734 <switch_read_enter>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f8      	bne.n	8003074 <main+0x244>
            running_stop();
 8003082:	f000 fd91 	bl	8003ba8 <running_stop>
          break;
 8003086:	e02c      	b.n	80030e2 <main+0x2b2>
        case 0x0E:	// E
          if(rotary_read_playmode() == flash_print)
 8003088:	f7fe fa4e 	bl	8001528 <rotary_read_playmode>
 800308c:	4603      	mov	r3, r0
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d102      	bne.n	8003098 <main+0x268>
          {
            course_print_flash();
 8003092:	f7ff fb3f 	bl	8002714 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8003096:	e024      	b.n	80030e2 <main+0x2b2>
            running_start();
 8003098:	f000 fd51 	bl	8003b3e <running_start>
            while(switch_read_enter())
 800309c:	e001      	b.n	80030a2 <main+0x272>
              main_main();
 800309e:	f000 fdc9 	bl	8003c34 <main_main>
            while(switch_read_enter())
 80030a2:	f7fe fb47 	bl	8001734 <switch_read_enter>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1f8      	bne.n	800309e <main+0x26e>
            running_stop();
 80030ac:	f000 fd7c 	bl	8003ba8 <running_stop>
          break;
 80030b0:	e017      	b.n	80030e2 <main+0x2b2>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 80030b2:	f7fe fa39 	bl	8001528 <rotary_read_playmode>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b0f      	cmp	r3, #15
 80030ba:	d102      	bne.n	80030c2 <main+0x292>
          {
            course_print_flash();
 80030bc:	f7ff fb2a 	bl	8002714 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 80030c0:	e00f      	b.n	80030e2 <main+0x2b2>
            running_start();
 80030c2:	f000 fd3c 	bl	8003b3e <running_start>
            while(switch_read_enter())
 80030c6:	e001      	b.n	80030cc <main+0x29c>
              main_main();
 80030c8:	f000 fdb4 	bl	8003c34 <main_main>
            while(switch_read_enter())
 80030cc:	f7fe fb32 	bl	8001734 <switch_read_enter>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f8      	bne.n	80030c8 <main+0x298>
            running_stop();
 80030d6:	f000 fd67 	bl	8003ba8 <running_stop>
          break;
 80030da:	e002      	b.n	80030e2 <main+0x2b2>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 80030dc:	bf00      	nop
 80030de:	e000      	b.n	80030e2 <main+0x2b2>
          break;
 80030e0:	bf00      	nop
    HAL_Delay(500);
 80030e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030e6:	f002 fe63 	bl	8005db0 <HAL_Delay>
    main_print_while();
 80030ea:	e6cb      	b.n	8002e84 <main+0x54>
 80030ec:	080101ec 	.word	0x080101ec
 80030f0:	080101f4 	.word	0x080101f4

080030f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b094      	sub	sp, #80	; 0x50
 80030f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030fa:	f107 0320 	add.w	r3, r7, #32
 80030fe:	2230      	movs	r2, #48	; 0x30
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f007 fc49 	bl	800a99a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003118:	2300      	movs	r3, #0
 800311a:	60bb      	str	r3, [r7, #8]
 800311c:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <SystemClock_Config+0xcc>)
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <SystemClock_Config+0xcc>)
 8003122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003126:	6413      	str	r3, [r2, #64]	; 0x40
 8003128:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <SystemClock_Config+0xcc>)
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003134:	2300      	movs	r3, #0
 8003136:	607b      	str	r3, [r7, #4]
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <SystemClock_Config+0xd0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <SystemClock_Config+0xd0>)
 800313e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <SystemClock_Config+0xd0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003150:	2301      	movs	r3, #1
 8003152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003154:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800315a:	2302      	movs	r3, #2
 800315c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800315e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003164:	2308      	movs	r3, #8
 8003166:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003168:	23a8      	movs	r3, #168	; 0xa8
 800316a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800316c:	2302      	movs	r3, #2
 800316e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003170:	2304      	movs	r3, #4
 8003172:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003174:	f107 0320 	add.w	r3, r7, #32
 8003178:	4618      	mov	r0, r3
 800317a:	f004 fd67 	bl	8007c4c <HAL_RCC_OscConfig>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003184:	f000 fd68 	bl	8003c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003188:	230f      	movs	r3, #15
 800318a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800318c:	2302      	movs	r3, #2
 800318e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003194:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003198:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800319a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800319e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	2105      	movs	r1, #5
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 ffc8 	bl	800813c <HAL_RCC_ClockConfig>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80031b2:	f000 fd51 	bl	8003c58 <Error_Handler>
  }
}
 80031b6:	bf00      	nop
 80031b8:	3750      	adds	r7, #80	; 0x50
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40007000 	.word	0x40007000

080031c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80031ce:	463b      	mov	r3, r7
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80031da:	4b8a      	ldr	r3, [pc, #552]	; (8003404 <MX_ADC1_Init+0x23c>)
 80031dc:	4a8a      	ldr	r2, [pc, #552]	; (8003408 <MX_ADC1_Init+0x240>)
 80031de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031e0:	4b88      	ldr	r3, [pc, #544]	; (8003404 <MX_ADC1_Init+0x23c>)
 80031e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031e8:	4b86      	ldr	r3, [pc, #536]	; (8003404 <MX_ADC1_Init+0x23c>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80031ee:	4b85      	ldr	r3, [pc, #532]	; (8003404 <MX_ADC1_Init+0x23c>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80031f4:	4b83      	ldr	r3, [pc, #524]	; (8003404 <MX_ADC1_Init+0x23c>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031fa:	4b82      	ldr	r3, [pc, #520]	; (8003404 <MX_ADC1_Init+0x23c>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003202:	4b80      	ldr	r3, [pc, #512]	; (8003404 <MX_ADC1_Init+0x23c>)
 8003204:	2200      	movs	r2, #0
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003208:	4b7e      	ldr	r3, [pc, #504]	; (8003404 <MX_ADC1_Init+0x23c>)
 800320a:	4a80      	ldr	r2, [pc, #512]	; (800340c <MX_ADC1_Init+0x244>)
 800320c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800320e:	4b7d      	ldr	r3, [pc, #500]	; (8003404 <MX_ADC1_Init+0x23c>)
 8003210:	2200      	movs	r2, #0
 8003212:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8003214:	4b7b      	ldr	r3, [pc, #492]	; (8003404 <MX_ADC1_Init+0x23c>)
 8003216:	2210      	movs	r2, #16
 8003218:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800321a:	4b7a      	ldr	r3, [pc, #488]	; (8003404 <MX_ADC1_Init+0x23c>)
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003222:	4b78      	ldr	r3, [pc, #480]	; (8003404 <MX_ADC1_Init+0x23c>)
 8003224:	2201      	movs	r2, #1
 8003226:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003228:	4876      	ldr	r0, [pc, #472]	; (8003404 <MX_ADC1_Init+0x23c>)
 800322a:	f002 fde3 	bl	8005df4 <HAL_ADC_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003234:	f000 fd10 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003238:	2309      	movs	r3, #9
 800323a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800323c:	2301      	movs	r3, #1
 800323e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003240:	2303      	movs	r3, #3
 8003242:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003244:	463b      	mov	r3, r7
 8003246:	4619      	mov	r1, r3
 8003248:	486e      	ldr	r0, [pc, #440]	; (8003404 <MX_ADC1_Init+0x23c>)
 800324a:	f002 ff95 	bl	8006178 <HAL_ADC_ConfigChannel>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003254:	f000 fd00 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003258:	230a      	movs	r3, #10
 800325a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800325c:	2302      	movs	r3, #2
 800325e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003260:	463b      	mov	r3, r7
 8003262:	4619      	mov	r1, r3
 8003264:	4867      	ldr	r0, [pc, #412]	; (8003404 <MX_ADC1_Init+0x23c>)
 8003266:	f002 ff87 	bl	8006178 <HAL_ADC_ConfigChannel>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003270:	f000 fcf2 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003274:	2308      	movs	r3, #8
 8003276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003278:	2303      	movs	r3, #3
 800327a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800327c:	463b      	mov	r3, r7
 800327e:	4619      	mov	r1, r3
 8003280:	4860      	ldr	r0, [pc, #384]	; (8003404 <MX_ADC1_Init+0x23c>)
 8003282:	f002 ff79 	bl	8006178 <HAL_ADC_ConfigChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800328c:	f000 fce4 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003290:	230b      	movs	r3, #11
 8003292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003294:	2304      	movs	r3, #4
 8003296:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003298:	463b      	mov	r3, r7
 800329a:	4619      	mov	r1, r3
 800329c:	4859      	ldr	r0, [pc, #356]	; (8003404 <MX_ADC1_Init+0x23c>)
 800329e:	f002 ff6b 	bl	8006178 <HAL_ADC_ConfigChannel>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80032a8:	f000 fcd6 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80032ac:	230f      	movs	r3, #15
 80032ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80032b0:	2305      	movs	r3, #5
 80032b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032b4:	463b      	mov	r3, r7
 80032b6:	4619      	mov	r1, r3
 80032b8:	4852      	ldr	r0, [pc, #328]	; (8003404 <MX_ADC1_Init+0x23c>)
 80032ba:	f002 ff5d 	bl	8006178 <HAL_ADC_ConfigChannel>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80032c4:	f000 fcc8 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80032c8:	230c      	movs	r3, #12
 80032ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80032cc:	2306      	movs	r3, #6
 80032ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032d0:	463b      	mov	r3, r7
 80032d2:	4619      	mov	r1, r3
 80032d4:	484b      	ldr	r0, [pc, #300]	; (8003404 <MX_ADC1_Init+0x23c>)
 80032d6:	f002 ff4f 	bl	8006178 <HAL_ADC_ConfigChannel>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80032e0:	f000 fcba 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80032e4:	230e      	movs	r3, #14
 80032e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80032e8:	2307      	movs	r3, #7
 80032ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032ec:	463b      	mov	r3, r7
 80032ee:	4619      	mov	r1, r3
 80032f0:	4844      	ldr	r0, [pc, #272]	; (8003404 <MX_ADC1_Init+0x23c>)
 80032f2:	f002 ff41 	bl	8006178 <HAL_ADC_ConfigChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80032fc:	f000 fcac 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003300:	230d      	movs	r3, #13
 8003302:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003304:	2308      	movs	r3, #8
 8003306:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003308:	463b      	mov	r3, r7
 800330a:	4619      	mov	r1, r3
 800330c:	483d      	ldr	r0, [pc, #244]	; (8003404 <MX_ADC1_Init+0x23c>)
 800330e:	f002 ff33 	bl	8006178 <HAL_ADC_ConfigChannel>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8003318:	f000 fc9e 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800331c:	2307      	movs	r3, #7
 800331e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003320:	2309      	movs	r3, #9
 8003322:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003324:	463b      	mov	r3, r7
 8003326:	4619      	mov	r1, r3
 8003328:	4836      	ldr	r0, [pc, #216]	; (8003404 <MX_ADC1_Init+0x23c>)
 800332a:	f002 ff25 	bl	8006178 <HAL_ADC_ConfigChannel>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8003334:	f000 fc90 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003338:	2300      	movs	r3, #0
 800333a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800333c:	230a      	movs	r3, #10
 800333e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003340:	463b      	mov	r3, r7
 8003342:	4619      	mov	r1, r3
 8003344:	482f      	ldr	r0, [pc, #188]	; (8003404 <MX_ADC1_Init+0x23c>)
 8003346:	f002 ff17 	bl	8006178 <HAL_ADC_ConfigChannel>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8003350:	f000 fc82 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003354:	2306      	movs	r3, #6
 8003356:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003358:	230b      	movs	r3, #11
 800335a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800335c:	463b      	mov	r3, r7
 800335e:	4619      	mov	r1, r3
 8003360:	4828      	ldr	r0, [pc, #160]	; (8003404 <MX_ADC1_Init+0x23c>)
 8003362:	f002 ff09 	bl	8006178 <HAL_ADC_ConfigChannel>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 800336c:	f000 fc74 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003370:	2301      	movs	r3, #1
 8003372:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003374:	230c      	movs	r3, #12
 8003376:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003378:	463b      	mov	r3, r7
 800337a:	4619      	mov	r1, r3
 800337c:	4821      	ldr	r0, [pc, #132]	; (8003404 <MX_ADC1_Init+0x23c>)
 800337e:	f002 fefb 	bl	8006178 <HAL_ADC_ConfigChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8003388:	f000 fc66 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800338c:	2305      	movs	r3, #5
 800338e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003390:	230d      	movs	r3, #13
 8003392:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003394:	463b      	mov	r3, r7
 8003396:	4619      	mov	r1, r3
 8003398:	481a      	ldr	r0, [pc, #104]	; (8003404 <MX_ADC1_Init+0x23c>)
 800339a:	f002 feed 	bl	8006178 <HAL_ADC_ConfigChannel>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80033a4:	f000 fc58 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80033a8:	2302      	movs	r3, #2
 80033aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80033ac:	230e      	movs	r3, #14
 80033ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033b0:	463b      	mov	r3, r7
 80033b2:	4619      	mov	r1, r3
 80033b4:	4813      	ldr	r0, [pc, #76]	; (8003404 <MX_ADC1_Init+0x23c>)
 80033b6:	f002 fedf 	bl	8006178 <HAL_ADC_ConfigChannel>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80033c0:	f000 fc4a 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80033c4:	2304      	movs	r3, #4
 80033c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80033c8:	230f      	movs	r3, #15
 80033ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033cc:	463b      	mov	r3, r7
 80033ce:	4619      	mov	r1, r3
 80033d0:	480c      	ldr	r0, [pc, #48]	; (8003404 <MX_ADC1_Init+0x23c>)
 80033d2:	f002 fed1 	bl	8006178 <HAL_ADC_ConfigChannel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 80033dc:	f000 fc3c 	bl	8003c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80033e0:	2303      	movs	r3, #3
 80033e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 80033e4:	2310      	movs	r3, #16
 80033e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033e8:	463b      	mov	r3, r7
 80033ea:	4619      	mov	r1, r3
 80033ec:	4805      	ldr	r0, [pc, #20]	; (8003404 <MX_ADC1_Init+0x23c>)
 80033ee:	f002 fec3 	bl	8006178 <HAL_ADC_ConfigChannel>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 80033f8:	f000 fc2e 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	20006370 	.word	0x20006370
 8003408:	40012000 	.word	0x40012000
 800340c:	0f000001 	.word	0x0f000001

08003410 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <MX_I2C1_Init+0x50>)
 8003416:	4a13      	ldr	r2, [pc, #76]	; (8003464 <MX_I2C1_Init+0x54>)
 8003418:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <MX_I2C1_Init+0x50>)
 800341c:	4a12      	ldr	r2, [pc, #72]	; (8003468 <MX_I2C1_Init+0x58>)
 800341e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003420:	4b0f      	ldr	r3, [pc, #60]	; (8003460 <MX_I2C1_Init+0x50>)
 8003422:	2200      	movs	r2, #0
 8003424:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <MX_I2C1_Init+0x50>)
 8003428:	2200      	movs	r2, #0
 800342a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <MX_I2C1_Init+0x50>)
 800342e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003432:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <MX_I2C1_Init+0x50>)
 8003436:	2200      	movs	r2, #0
 8003438:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <MX_I2C1_Init+0x50>)
 800343c:	2200      	movs	r2, #0
 800343e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003440:	4b07      	ldr	r3, [pc, #28]	; (8003460 <MX_I2C1_Init+0x50>)
 8003442:	2200      	movs	r2, #0
 8003444:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <MX_I2C1_Init+0x50>)
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800344c:	4804      	ldr	r0, [pc, #16]	; (8003460 <MX_I2C1_Init+0x50>)
 800344e:	f004 fac5 	bl	80079dc <HAL_I2C_Init>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003458:	f000 fbfe 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800345c:	bf00      	nop
 800345e:	bd80      	pop	{r7, pc}
 8003460:	2000628c 	.word	0x2000628c
 8003464:	40005400 	.word	0x40005400
 8003468:	000186a0 	.word	0x000186a0

0800346c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <MX_SPI2_Init+0x64>)
 8003472:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <MX_SPI2_Init+0x68>)
 8003474:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003476:	4b16      	ldr	r3, [pc, #88]	; (80034d0 <MX_SPI2_Init+0x64>)
 8003478:	f44f 7282 	mov.w	r2, #260	; 0x104
 800347c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <MX_SPI2_Init+0x64>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <MX_SPI2_Init+0x64>)
 8003486:	2200      	movs	r2, #0
 8003488:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <MX_SPI2_Init+0x64>)
 800348c:	2202      	movs	r2, #2
 800348e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003490:	4b0f      	ldr	r3, [pc, #60]	; (80034d0 <MX_SPI2_Init+0x64>)
 8003492:	2201      	movs	r2, #1
 8003494:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <MX_SPI2_Init+0x64>)
 8003498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <MX_SPI2_Init+0x64>)
 80034a0:	2228      	movs	r2, #40	; 0x28
 80034a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034a4:	4b0a      	ldr	r3, [pc, #40]	; (80034d0 <MX_SPI2_Init+0x64>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <MX_SPI2_Init+0x64>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <MX_SPI2_Init+0x64>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80034b6:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <MX_SPI2_Init+0x64>)
 80034b8:	220a      	movs	r2, #10
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034bc:	4804      	ldr	r0, [pc, #16]	; (80034d0 <MX_SPI2_Init+0x64>)
 80034be:	f005 f82d 	bl	800851c <HAL_SPI_Init>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80034c8:	f000 fbc6 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	200061ec 	.word	0x200061ec
 80034d4:	40003800 	.word	0x40003800

080034d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	; 0x30
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80034de:	f107 030c 	add.w	r3, r7, #12
 80034e2:	2224      	movs	r2, #36	; 0x24
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f007 fa57 	bl	800a99a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034f4:	4b22      	ldr	r3, [pc, #136]	; (8003580 <MX_TIM1_Init+0xa8>)
 80034f6:	4a23      	ldr	r2, [pc, #140]	; (8003584 <MX_TIM1_Init+0xac>)
 80034f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80034fa:	4b21      	ldr	r3, [pc, #132]	; (8003580 <MX_TIM1_Init+0xa8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003500:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <MX_TIM1_Init+0xa8>)
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8003506:	4b1e      	ldr	r3, [pc, #120]	; (8003580 <MX_TIM1_Init+0xa8>)
 8003508:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800350c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <MX_TIM1_Init+0xa8>)
 8003510:	2200      	movs	r2, #0
 8003512:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <MX_TIM1_Init+0xa8>)
 8003516:	2200      	movs	r2, #0
 8003518:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <MX_TIM1_Init+0xa8>)
 800351c:	2200      	movs	r2, #0
 800351e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003520:	2303      	movs	r3, #3
 8003522:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003528:	2301      	movs	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003534:	2300      	movs	r3, #0
 8003536:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003538:	2301      	movs	r3, #1
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800353c:	2300      	movs	r3, #0
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	4619      	mov	r1, r3
 800354a:	480d      	ldr	r0, [pc, #52]	; (8003580 <MX_TIM1_Init+0xa8>)
 800354c:	f006 f804 	bl	8009558 <HAL_TIM_Encoder_Init>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003556:	f000 fb7f 	bl	8003c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003562:	1d3b      	adds	r3, r7, #4
 8003564:	4619      	mov	r1, r3
 8003566:	4806      	ldr	r0, [pc, #24]	; (8003580 <MX_TIM1_Init+0xa8>)
 8003568:	f006 fe28 	bl	800a1bc <HAL_TIMEx_MasterConfigSynchronization>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003572:	f000 fb71 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003576:	bf00      	nop
 8003578:	3730      	adds	r7, #48	; 0x30
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200064a8 	.word	0x200064a8
 8003584:	40010000 	.word	0x40010000

08003588 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08c      	sub	sp, #48	; 0x30
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800358e:	f107 030c 	add.w	r3, r7, #12
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f007 f9ff 	bl	800a99a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800359c:	1d3b      	adds	r3, r7, #4
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035a4:	4b20      	ldr	r3, [pc, #128]	; (8003628 <MX_TIM3_Init+0xa0>)
 80035a6:	4a21      	ldr	r2, [pc, #132]	; (800362c <MX_TIM3_Init+0xa4>)
 80035a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035aa:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <MX_TIM3_Init+0xa0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b0:	4b1d      	ldr	r3, [pc, #116]	; (8003628 <MX_TIM3_Init+0xa0>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 80035b6:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <MX_TIM3_Init+0xa0>)
 80035b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035be:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <MX_TIM3_Init+0xa0>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <MX_TIM3_Init+0xa0>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035ca:	2303      	movs	r3, #3
 80035cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035d2:	2301      	movs	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035e2:	2301      	movs	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035e6:	2300      	movs	r3, #0
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035ee:	f107 030c 	add.w	r3, r7, #12
 80035f2:	4619      	mov	r1, r3
 80035f4:	480c      	ldr	r0, [pc, #48]	; (8003628 <MX_TIM3_Init+0xa0>)
 80035f6:	f005 ffaf 	bl	8009558 <HAL_TIM_Encoder_Init>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003600:	f000 fb2a 	bl	8003c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003604:	2300      	movs	r3, #0
 8003606:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003608:	2300      	movs	r3, #0
 800360a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4805      	ldr	r0, [pc, #20]	; (8003628 <MX_TIM3_Init+0xa0>)
 8003612:	f006 fdd3 	bl	800a1bc <HAL_TIMEx_MasterConfigSynchronization>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800361c:	f000 fb1c 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003620:	bf00      	nop
 8003622:	3730      	adds	r7, #48	; 0x30
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20006328 	.word	0x20006328
 800362c:	40000400 	.word	0x40000400

08003630 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003636:	f107 0320 	add.w	r3, r7, #32
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	611a      	str	r2, [r3, #16]
 800364e:	615a      	str	r2, [r3, #20]
 8003650:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003652:	4b27      	ldr	r3, [pc, #156]	; (80036f0 <MX_TIM4_Init+0xc0>)
 8003654:	4a27      	ldr	r2, [pc, #156]	; (80036f4 <MX_TIM4_Init+0xc4>)
 8003656:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8003658:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <MX_TIM4_Init+0xc0>)
 800365a:	2202      	movs	r2, #2
 800365c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <MX_TIM4_Init+0xc0>)
 8003660:	2200      	movs	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003664:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <MX_TIM4_Init+0xc0>)
 8003666:	f240 32e7 	movw	r2, #999	; 0x3e7
 800366a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800366c:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <MX_TIM4_Init+0xc0>)
 800366e:	2200      	movs	r2, #0
 8003670:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003672:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <MX_TIM4_Init+0xc0>)
 8003674:	2200      	movs	r2, #0
 8003676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003678:	481d      	ldr	r0, [pc, #116]	; (80036f0 <MX_TIM4_Init+0xc0>)
 800367a:	f005 fde6 	bl	800924a <HAL_TIM_PWM_Init>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003684:	f000 fae8 	bl	8003c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003688:	2300      	movs	r3, #0
 800368a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003690:	f107 0320 	add.w	r3, r7, #32
 8003694:	4619      	mov	r1, r3
 8003696:	4816      	ldr	r0, [pc, #88]	; (80036f0 <MX_TIM4_Init+0xc0>)
 8003698:	f006 fd90 	bl	800a1bc <HAL_TIMEx_MasterConfigSynchronization>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80036a2:	f000 fad9 	bl	8003c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036a6:	2360      	movs	r3, #96	; 0x60
 80036a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	2200      	movs	r2, #0
 80036ba:	4619      	mov	r1, r3
 80036bc:	480c      	ldr	r0, [pc, #48]	; (80036f0 <MX_TIM4_Init+0xc0>)
 80036be:	f006 fa1d 	bl	8009afc <HAL_TIM_PWM_ConfigChannel>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80036c8:	f000 fac6 	bl	8003c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	2204      	movs	r2, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4807      	ldr	r0, [pc, #28]	; (80036f0 <MX_TIM4_Init+0xc0>)
 80036d4:	f006 fa12 	bl	8009afc <HAL_TIM_PWM_ConfigChannel>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80036de:	f000 fabb 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80036e2:	4803      	ldr	r0, [pc, #12]	; (80036f0 <MX_TIM4_Init+0xc0>)
 80036e4:	f001 f8f2 	bl	80048cc <HAL_TIM_MspPostInit>

}
 80036e8:	bf00      	nop
 80036ea:	3728      	adds	r7, #40	; 0x28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20006244 	.word	0x20006244
 80036f4:	40000800 	.word	0x40000800

080036f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036fe:	463b      	mov	r3, r7
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <MX_TIM6_Init+0x64>)
 8003708:	4a15      	ldr	r2, [pc, #84]	; (8003760 <MX_TIM6_Init+0x68>)
 800370a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <MX_TIM6_Init+0x64>)
 800370e:	2204      	movs	r2, #4
 8003710:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <MX_TIM6_Init+0x64>)
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 33599;
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <MX_TIM6_Init+0x64>)
 800371a:	f248 323f 	movw	r2, #33599	; 0x833f
 800371e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <MX_TIM6_Init+0x64>)
 8003722:	2200      	movs	r2, #0
 8003724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003726:	480d      	ldr	r0, [pc, #52]	; (800375c <MX_TIM6_Init+0x64>)
 8003728:	f005 fca0 	bl	800906c <HAL_TIM_Base_Init>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003732:	f000 fa91 	bl	8003c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800373e:	463b      	mov	r3, r7
 8003740:	4619      	mov	r1, r3
 8003742:	4806      	ldr	r0, [pc, #24]	; (800375c <MX_TIM6_Init+0x64>)
 8003744:	f006 fd3a 	bl	800a1bc <HAL_TIMEx_MasterConfigSynchronization>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800374e:	f000 fa83 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20006460 	.word	0x20006460
 8003760:	40001000 	.word	0x40001000

08003764 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800376a:	463b      	mov	r3, r7
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <MX_TIM7_Init+0x64>)
 8003774:	4a15      	ldr	r2, [pc, #84]	; (80037cc <MX_TIM7_Init+0x68>)
 8003776:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <MX_TIM7_Init+0x64>)
 800377a:	2204      	movs	r2, #4
 800377c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <MX_TIM7_Init+0x64>)
 8003780:	2200      	movs	r2, #0
 8003782:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33599;
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <MX_TIM7_Init+0x64>)
 8003786:	f248 323f 	movw	r2, #33599	; 0x833f
 800378a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <MX_TIM7_Init+0x64>)
 800378e:	2200      	movs	r2, #0
 8003790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003792:	480d      	ldr	r0, [pc, #52]	; (80037c8 <MX_TIM7_Init+0x64>)
 8003794:	f005 fc6a 	bl	800906c <HAL_TIM_Base_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800379e:	f000 fa5b 	bl	8003c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80037aa:	463b      	mov	r3, r7
 80037ac:	4619      	mov	r1, r3
 80037ae:	4806      	ldr	r0, [pc, #24]	; (80037c8 <MX_TIM7_Init+0x64>)
 80037b0:	f006 fd04 	bl	800a1bc <HAL_TIMEx_MasterConfigSynchronization>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80037ba:	f000 fa4d 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	2000657c 	.word	0x2000657c
 80037cc:	40001400 	.word	0x40001400

080037d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80037d4:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <MX_TIM10_Init+0x40>)
 80037d6:	4a0f      	ldr	r2, [pc, #60]	; (8003814 <MX_TIM10_Init+0x44>)
 80037d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 80037da:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <MX_TIM10_Init+0x40>)
 80037dc:	2204      	movs	r2, #4
 80037de:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e0:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <MX_TIM10_Init+0x40>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <MX_TIM10_Init+0x40>)
 80037e8:	f248 323f 	movw	r2, #33599	; 0x833f
 80037ec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <MX_TIM10_Init+0x40>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <MX_TIM10_Init+0x40>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80037fa:	4805      	ldr	r0, [pc, #20]	; (8003810 <MX_TIM10_Init+0x40>)
 80037fc:	f005 fc36 	bl	800906c <HAL_TIM_Base_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003806:	f000 fa27 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200062e0 	.word	0x200062e0
 8003814:	40014400 	.word	0x40014400

08003818 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <MX_TIM11_Init+0x40>)
 800381e:	4a0f      	ldr	r2, [pc, #60]	; (800385c <MX_TIM11_Init+0x44>)
 8003820:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <MX_TIM11_Init+0x40>)
 8003824:	2204      	movs	r2, #4
 8003826:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003828:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <MX_TIM11_Init+0x40>)
 800382a:	2200      	movs	r2, #0
 800382c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <MX_TIM11_Init+0x40>)
 8003830:	f248 323f 	movw	r2, #33599	; 0x833f
 8003834:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <MX_TIM11_Init+0x40>)
 8003838:	2200      	movs	r2, #0
 800383a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <MX_TIM11_Init+0x40>)
 800383e:	2200      	movs	r2, #0
 8003840:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003842:	4805      	ldr	r0, [pc, #20]	; (8003858 <MX_TIM11_Init+0x40>)
 8003844:	f005 fc12 	bl	800906c <HAL_TIM_Base_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800384e:	f000 fa03 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200063b8 	.word	0x200063b8
 800385c:	40014800 	.word	0x40014800

08003860 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <MX_TIM14_Init+0x40>)
 8003866:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <MX_TIM14_Init+0x44>)
 8003868:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <MX_TIM14_Init+0x40>)
 800386c:	2204      	movs	r2, #4
 800386e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <MX_TIM14_Init+0x40>)
 8003872:	2200      	movs	r2, #0
 8003874:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <MX_TIM14_Init+0x40>)
 8003878:	f248 323f 	movw	r2, #33599	; 0x833f
 800387c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <MX_TIM14_Init+0x40>)
 8003880:	2200      	movs	r2, #0
 8003882:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <MX_TIM14_Init+0x40>)
 8003886:	2200      	movs	r2, #0
 8003888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800388a:	4805      	ldr	r0, [pc, #20]	; (80038a0 <MX_TIM14_Init+0x40>)
 800388c:	f005 fbee 	bl	800906c <HAL_TIM_Base_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003896:	f000 f9df 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20006534 	.word	0x20006534
 80038a4:	40002000 	.word	0x40002000

080038a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <MX_USART6_UART_Init+0x4c>)
 80038ae:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <MX_USART6_UART_Init+0x50>)
 80038b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <MX_USART6_UART_Init+0x4c>)
 80038b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80038b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <MX_USART6_UART_Init+0x4c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <MX_USART6_UART_Init+0x4c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80038c6:	4b0b      	ldr	r3, [pc, #44]	; (80038f4 <MX_USART6_UART_Init+0x4c>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80038cc:	4b09      	ldr	r3, [pc, #36]	; (80038f4 <MX_USART6_UART_Init+0x4c>)
 80038ce:	220c      	movs	r2, #12
 80038d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <MX_USART6_UART_Init+0x4c>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <MX_USART6_UART_Init+0x4c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80038de:	4805      	ldr	r0, [pc, #20]	; (80038f4 <MX_USART6_UART_Init+0x4c>)
 80038e0:	f006 fcfc 	bl	800a2dc <HAL_UART_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80038ea:	f000 f9b5 	bl	8003c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80038ee:	bf00      	nop
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	200064f0 	.word	0x200064f0
 80038f8:	40011400 	.word	0x40011400

080038fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <MX_DMA_Init+0x3c>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <MX_DMA_Init+0x3c>)
 800390c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <MX_DMA_Init+0x3c>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800391e:	2200      	movs	r2, #0
 8003920:	2100      	movs	r1, #0
 8003922:	2038      	movs	r0, #56	; 0x38
 8003924:	f002 ffa3 	bl	800686e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003928:	2038      	movs	r0, #56	; 0x38
 800392a:	f002 ffbc 	bl	80068a6 <HAL_NVIC_EnableIRQ>

}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800

0800393c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003942:	f107 0314 	add.w	r3, r7, #20
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	4b69      	ldr	r3, [pc, #420]	; (8003afc <MX_GPIO_Init+0x1c0>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a68      	ldr	r2, [pc, #416]	; (8003afc <MX_GPIO_Init+0x1c0>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b66      	ldr	r3, [pc, #408]	; (8003afc <MX_GPIO_Init+0x1c0>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b62      	ldr	r3, [pc, #392]	; (8003afc <MX_GPIO_Init+0x1c0>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a61      	ldr	r2, [pc, #388]	; (8003afc <MX_GPIO_Init+0x1c0>)
 8003978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b5f      	ldr	r3, [pc, #380]	; (8003afc <MX_GPIO_Init+0x1c0>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <MX_GPIO_Init+0x1c0>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a5a      	ldr	r2, [pc, #360]	; (8003afc <MX_GPIO_Init+0x1c0>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b58      	ldr	r3, [pc, #352]	; (8003afc <MX_GPIO_Init+0x1c0>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	4b54      	ldr	r3, [pc, #336]	; (8003afc <MX_GPIO_Init+0x1c0>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	4a53      	ldr	r2, [pc, #332]	; (8003afc <MX_GPIO_Init+0x1c0>)
 80039b0:	f043 0302 	orr.w	r3, r3, #2
 80039b4:	6313      	str	r3, [r2, #48]	; 0x30
 80039b6:	4b51      	ldr	r3, [pc, #324]	; (8003afc <MX_GPIO_Init+0x1c0>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	603b      	str	r3, [r7, #0]
 80039c6:	4b4d      	ldr	r3, [pc, #308]	; (8003afc <MX_GPIO_Init+0x1c0>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	4a4c      	ldr	r2, [pc, #304]	; (8003afc <MX_GPIO_Init+0x1c0>)
 80039cc:	f043 0308 	orr.w	r3, r3, #8
 80039d0:	6313      	str	r3, [r2, #48]	; 0x30
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <MX_GPIO_Init+0x1c0>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 80039de:	2200      	movs	r2, #0
 80039e0:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 80039e4:	4846      	ldr	r0, [pc, #280]	; (8003b00 <MX_GPIO_Init+0x1c4>)
 80039e6:	f003 ffdf 	bl	80079a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 80039ea:	2200      	movs	r2, #0
 80039ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80039f0:	4844      	ldr	r0, [pc, #272]	; (8003b04 <MX_GPIO_Init+0x1c8>)
 80039f2:	f003 ffd9 	bl	80079a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80039fc:	4842      	ldr	r0, [pc, #264]	; (8003b08 <MX_GPIO_Init+0x1cc>)
 80039fe:	f003 ffd3 	bl	80079a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8003a02:	2200      	movs	r2, #0
 8003a04:	2104      	movs	r1, #4
 8003a06:	4841      	ldr	r0, [pc, #260]	; (8003b0c <MX_GPIO_Init+0x1d0>)
 8003a08:	f003 ffce 	bl	80079a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8003a0c:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a12:	2301      	movs	r3, #1
 8003a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a1e:	f107 0314 	add.w	r3, r7, #20
 8003a22:	4619      	mov	r1, r3
 8003a24:	4836      	ldr	r0, [pc, #216]	; (8003b00 <MX_GPIO_Init+0x1c4>)
 8003a26:	f003 fe0d 	bl	8007644 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8003a2a:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8003a2e:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4830      	ldr	r0, [pc, #192]	; (8003b00 <MX_GPIO_Init+0x1c4>)
 8003a40:	f003 fe00 	bl	8007644 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8003a44:	f640 0304 	movw	r3, #2052	; 0x804
 8003a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a52:	f107 0314 	add.w	r3, r7, #20
 8003a56:	4619      	mov	r1, r3
 8003a58:	482a      	ldr	r0, [pc, #168]	; (8003b04 <MX_GPIO_Init+0x1c8>)
 8003a5a:	f003 fdf3 	bl	8007644 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8003a5e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a64:	2301      	movs	r3, #1
 8003a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	4619      	mov	r1, r3
 8003a76:	4823      	ldr	r0, [pc, #140]	; (8003b04 <MX_GPIO_Init+0x1c8>)
 8003a78:	f003 fde4 	bl	8007644 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8003a7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a8e:	f107 0314 	add.w	r3, r7, #20
 8003a92:	4619      	mov	r1, r3
 8003a94:	481c      	ldr	r0, [pc, #112]	; (8003b08 <MX_GPIO_Init+0x1cc>)
 8003a96:	f003 fdd5 	bl	8007644 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8003a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	4619      	mov	r1, r3
 8003aae:	4816      	ldr	r0, [pc, #88]	; (8003b08 <MX_GPIO_Init+0x1cc>)
 8003ab0:	f003 fdc8 	bl	8007644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aba:	2302      	movs	r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aca:	f107 0314 	add.w	r3, r7, #20
 8003ace:	4619      	mov	r1, r3
 8003ad0:	480d      	ldr	r0, [pc, #52]	; (8003b08 <MX_GPIO_Init+0x1cc>)
 8003ad2:	f003 fdb7 	bl	8007644 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ada:	2301      	movs	r3, #1
 8003adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	4619      	mov	r1, r3
 8003aec:	4807      	ldr	r0, [pc, #28]	; (8003b0c <MX_GPIO_Init+0x1d0>)
 8003aee:	f003 fda9 	bl	8007644 <HAL_GPIO_Init>

}
 8003af2:	bf00      	nop
 8003af4:	3728      	adds	r7, #40	; 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40020800 	.word	0x40020800
 8003b04:	40020400 	.word	0x40020400
 8003b08:	40020000 	.word	0x40020000
 8003b0c:	40020c00 	.word	0x40020c00

08003b10 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  #if USE_LED
  led_init();
 8003b14:	f7fd fc14 	bl	8001340 <led_init>
  #endif
  flash_init();
 8003b18:	f7fe ffd6 	bl	8002ac8 <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 8003b1c:	f001 f95e 	bl	8004ddc <tim11_init>
  /* encoder_init */
  tim10_init();
 8003b20:	f001 f888 	bl	8004c34 <tim10_init>
  /* tim7 */
  tim7_init();
 8003b24:	f001 fa74 	bl	8005010 <tim7_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8003b28:	f001 f972 	bl	8004e10 <tim6_init>
  /* imu のバイアス補正のための初期�? */
  if(rotary_read_playmode() == motor_free)
 8003b2c:	f7fd fcfc 	bl	8001528 <rotary_read_playmode>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d101      	bne.n	8003b3a <main_init+0x2a>
    imu_revision_init();
 8003b36:	f000 f981 	bl	8003e3c <imu_revision_init>
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <running_start>:

void running_start()
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	af00      	add	r7, sp, #0
  #if USE_LED
  led_start();
 8003b42:	f7fd fc13 	bl	800136c <led_start>
  #endif
  HAL_Delay(1000);
 8003b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b4a:	f002 f931 	bl	8005db0 <HAL_Delay>
  led_write_rgb(0b100);
 8003b4e:	2004      	movs	r0, #4
 8003b50:	f7fd fc70 	bl	8001434 <led_write_rgb>
  HAL_Delay(1000);
 8003b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b58:	f002 f92a 	bl	8005db0 <HAL_Delay>
  led_write_led(0b01, 0b01);
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	2001      	movs	r0, #1
 8003b60:	f7fd fca8 	bl	80014b4 <led_write_led>
  HAL_Delay(1000);
 8003b64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b68:	f002 f922 	bl	8005db0 <HAL_Delay>
  led_write_led(0b10, 0b10);
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	2002      	movs	r0, #2
 8003b70:	f7fd fca0 	bl	80014b4 <led_write_led>
  HAL_Delay(1000);
 8003b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b78:	f002 f91a 	bl	8005db0 <HAL_Delay>
  led_write_led(0b11, 0b00);
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	2003      	movs	r0, #3
 8003b80:	f7fd fc98 	bl	80014b4 <led_write_led>
  led_write_rgb(0b010);
 8003b84:	2002      	movs	r0, #2
 8003b86:	f7fd fc55 	bl	8001434 <led_write_rgb>
  #if D_TIM7
  printf("main.c > running_start() > ");
  #endif
  tim7_start();
 8003b8a:	f001 fa51 	bl	8005030 <tim7_start>
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 8003b8e:	f001 f87b 	bl	8004c88 <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 8003b92:	f001 f94f 	bl	8004e34 <tim6_start>
  /* imu のバイアス補正のための準備 */
  if(rotary_read_playmode() == motor_free)
 8003b96:	f7fd fcc7 	bl	8001528 <rotary_read_playmode>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d101      	bne.n	8003ba4 <running_start+0x66>
    imu_revision_start();
 8003ba0:	f000 f954 	bl	8003e4c <imu_revision_start>
}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <running_stop>:

void running_stop()
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  #if USE_LED
  led_stop();
 8003bac:	f7fd fbe9 	bl	8001382 <led_stop>
  #endif
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8003bb0:	f001 f958 	bl	8004e64 <tim6_stop>
  /* tim7 */
  tim7_stop();
 8003bb4:	f001 fa64 	bl	8005080 <tim7_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8003bb8:	f001 f894 	bl	8004ce4 <tim10_stop>
  /* imu バイアス補正のための終�? */
  if(rotary_read_playmode() == motor_free)
 8003bbc:	f7fd fcb4 	bl	8001528 <rotary_read_playmode>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d101      	bne.n	8003bca <running_stop+0x22>
    imu_revision_stop();
 8003bc6:	f000 f951 	bl	8003e6c <imu_revision_stop>
  led_write_rgb(0b001);
 8003bca:	2001      	movs	r0, #1
 8003bcc:	f7fd fc32 	bl	8001434 <led_write_rgb>
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <main_print_while>:

void main_print_while()
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
	printf("////////////////////////////// WHILE //////////////////////////////\n\r");
 8003bd8:	4815      	ldr	r0, [pc, #84]	; (8003c30 <main_print_while+0x5c>)
 8003bda:	f007 fd25 	bl	800b628 <iprintf>
  rotary_print_playmode();
 8003bde:	f7fd fd11 	bl	8001604 <rotary_print_playmode>
	print_rotary_value();
 8003be2:	f000 f91d 	bl	8003e20 <print_rotary_value>
  if(rotary_read() < 4)
 8003be6:	f7fd fcc3 	bl	8001570 <rotary_read>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d804      	bhi.n	8003bfa <main_print_while+0x26>
  {
    led_write_led(0b11, 0b10);
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	2003      	movs	r0, #3
 8003bf4:	f7fd fc5e 	bl	80014b4 <led_write_led>
  }
  else
  {
    led_write_led(0b11, 0b00);
  }
}
 8003bf8:	e017      	b.n	8003c2a <main_print_while+0x56>
  else if(rotary_read() < 8)
 8003bfa:	f7fd fcb9 	bl	8001570 <rotary_read>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b07      	cmp	r3, #7
 8003c02:	d804      	bhi.n	8003c0e <main_print_while+0x3a>
    led_write_led(0b11, 0b01);
 8003c04:	2101      	movs	r1, #1
 8003c06:	2003      	movs	r0, #3
 8003c08:	f7fd fc54 	bl	80014b4 <led_write_led>
}
 8003c0c:	e00d      	b.n	8003c2a <main_print_while+0x56>
  else if(rotary_read() == 15)
 8003c0e:	f7fd fcaf 	bl	8001570 <rotary_read>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b0f      	cmp	r3, #15
 8003c16:	d104      	bne.n	8003c22 <main_print_while+0x4e>
    led_write_led(0b11, 0b11);
 8003c18:	2103      	movs	r1, #3
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	f7fd fc4a 	bl	80014b4 <led_write_led>
}
 8003c20:	e003      	b.n	8003c2a <main_print_while+0x56>
    led_write_led(0b11, 0b00);
 8003c22:	2100      	movs	r1, #0
 8003c24:	2003      	movs	r0, #3
 8003c26:	f7fd fc45 	bl	80014b4 <led_write_led>
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	08010214 	.word	0x08010214

08003c34 <main_main>:

void main_main()
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  main_d_print();
 8003c38:	f000 f802 	bl	8003c40 <main_d_print>
	tim7_main();
	#endif
	#if D_TIM6_WHILE
	tim6_main();
	#endif
}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <main_d_print>:

void main_d_print()
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  revision_print();
 8003c44:	f000 f918 	bl	8003e78 <revision_print>
  tim10_d_print();
 8003c48:	f001 f8ba 	bl	8004dc0 <tim10_d_print>
  tim7_d_print();
 8003c4c:	f001 fb16 	bl	800527c <tim7_d_print>
  tim6_d_print();
 8003c50:	f001 f9d8 	bl	8005004 <tim6_d_print>
}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c5c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003c5e:	e7fe      	b.n	8003c5e <Error_Handler+0x6>

08003c60 <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003c64:	2000      	movs	r0, #0
 8003c66:	f000 f827 	bl	8003cb8 <motor_enable>
}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <motor_start>:

void motor_start()
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8003c74:	2100      	movs	r1, #0
 8003c76:	4806      	ldr	r0, [pc, #24]	; (8003c90 <motor_start+0x20>)
 8003c78:	f005 fb36 	bl	80092e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	4804      	ldr	r0, [pc, #16]	; (8003c90 <motor_start+0x20>)
 8003c80:	f005 fb32 	bl	80092e8 <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8003c84:	2001      	movs	r0, #1
 8003c86:	f000 f817 	bl	8003cb8 <motor_enable>
#endif
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20006244 	.word	0x20006244

08003c94 <motor_stop>:

void motor_stop()
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f000 f80d 	bl	8003cb8 <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8003c9e:	2104      	movs	r1, #4
 8003ca0:	4804      	ldr	r0, [pc, #16]	; (8003cb4 <motor_stop+0x20>)
 8003ca2:	f005 fbe9 	bl	8009478 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4802      	ldr	r0, [pc, #8]	; (8003cb4 <motor_stop+0x20>)
 8003caa:	f005 fbe5 	bl	8009478 <HAL_TIM_PWM_Stop>
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20006244 	.word	0x20006244

08003cb8 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf14      	ite	ne
 8003cc8:	2301      	movne	r3, #1
 8003cca:	2300      	moveq	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <motor_enable+0x28>)
 8003cd2:	701a      	strb	r2, [r3, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	20017f70 	.word	0x20017f70

08003ce4 <motor_read_enable>:

char motor_read_enable()
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
    return enable;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <motor_read_enable+0x14>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20017f70 	.word	0x20017f70

08003cfc <motor_set>:

void motor_set(float motor_left_, float motor_right_)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d06:	edc7 0a00 	vstr	s1, [r7]
    if(motor_left_ < 0)
 8003d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d16:	d50b      	bpl.n	8003d30 <motor_set+0x34>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2104      	movs	r1, #4
 8003d1c:	4831      	ldr	r0, [pc, #196]	; (8003de4 <motor_set+0xe8>)
 8003d1e:	f003 fe43 	bl	80079a8 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8003d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d26:	eef1 7a67 	vneg.f32	s15, s15
 8003d2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d2e:	e004      	b.n	8003d3a <motor_set+0x3e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8003d30:	2201      	movs	r2, #1
 8003d32:	2104      	movs	r1, #4
 8003d34:	482b      	ldr	r0, [pc, #172]	; (8003de4 <motor_set+0xe8>)
 8003d36:	f003 fe37 	bl	80079a8 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8003d3a:	edd7 7a00 	vldr	s15, [r7]
 8003d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d46:	d50c      	bpl.n	8003d62 <motor_set+0x66>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d4e:	4826      	ldr	r0, [pc, #152]	; (8003de8 <motor_set+0xec>)
 8003d50:	f003 fe2a 	bl	80079a8 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8003d54:	edd7 7a00 	vldr	s15, [r7]
 8003d58:	eef1 7a67 	vneg.f32	s15, s15
 8003d5c:	edc7 7a00 	vstr	s15, [r7]
 8003d60:	e005      	b.n	8003d6e <motor_set+0x72>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003d62:	2200      	movs	r2, #0
 8003d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d68:	481f      	ldr	r0, [pc, #124]	; (8003de8 <motor_set+0xec>)
 8003d6a:	f003 fe1d 	bl	80079a8 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 8003d6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d72:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003dec <motor_set+0xf0>
 8003d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7e:	dd01      	ble.n	8003d84 <motor_set+0x88>
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <motor_set+0xf4>)
 8003d82:	e000      	b.n	8003d86 <motor_set+0x8a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	607b      	str	r3, [r7, #4]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 8003d88:	edd7 7a00 	vldr	s15, [r7]
 8003d8c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003dec <motor_set+0xf0>
 8003d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d98:	dd01      	ble.n	8003d9e <motor_set+0xa2>
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <motor_set+0xf4>)
 8003d9c:	e000      	b.n	8003da0 <motor_set+0xa4>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	603b      	str	r3, [r7, #0]

    if(!enable)
 8003da2:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <motor_set+0xf8>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d105      	bne.n	8003db6 <motor_set+0xba>
    {
        motor_left_ = 0;
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	607b      	str	r3, [r7, #4]
        motor_right_ = 0;
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	603b      	str	r3, [r7, #0]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <motor_set+0xfc>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dc2:	ee17 2a90 	vmov	r2, s15
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <motor_set+0xfc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	edd7 7a00 	vldr	s15, [r7]
 8003dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd4:	ee17 2a90 	vmov	r2, s15
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40020c00 	.word	0x40020c00
 8003de8:	40020800 	.word	0x40020800
 8003dec:	447a0000 	.word	0x447a0000
 8003df0:	447a0000 	.word	0x447a0000
 8003df4:	20017f70 	.word	0x20017f70
 8003df8:	20006244 	.word	0x20006244

08003dfc <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8003e04:	1d39      	adds	r1, r7, #4
 8003e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <__io_putchar+0x20>)
 8003e0e:	f006 fab2 	bl	800a376 <HAL_UART_Transmit>
	return ch;
 8003e12:	687b      	ldr	r3, [r7, #4]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	200064f0 	.word	0x200064f0

08003e20 <print_rotary_value>:

void print_rotary_value()
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8003e24:	f7fd fb98 	bl	8001558 <rotary_read_value>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <print_rotary_value+0x18>)
 8003e2e:	f007 fbfb 	bl	800b628 <iprintf>
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	0801025c 	.word	0x0801025c

08003e3c <imu_revision_init>:
unsigned int imu_revision_count;
float imu_revision_sum;
float imu_revision_average;

void imu_revision_init()
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
    //! course_init() されていることが前提で空関数
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
	...

08003e4c <imu_revision_start>:

void imu_revision_start()
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
    imu_revision_count = 1;
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <imu_revision_start+0x1c>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	601a      	str	r2, [r3, #0]
    course_start();
 8003e56:	f7fd ff8d 	bl	8001d74 <course_start>
    HAL_Delay(5000);
 8003e5a:	f241 3088 	movw	r0, #5000	; 0x1388
 8003e5e:	f001 ffa7 	bl	8005db0 <HAL_Delay>
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20017f7c 	.word	0x20017f7c

08003e6c <imu_revision_stop>:

void imu_revision_stop()
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
    course_stop();
 8003e70:	f7fd ff94 	bl	8001d9c <course_stop>
}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <revision_print>:
        imu_revision_count = imu_revision_count + 1;
	}
}

void revision_print()
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
    #if IMU_REVISION
    imu_revision_print();
    #endif
}
 8003e7c:	bf00      	nop
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <section_length_set_sampling_time_ms>:
//! update 周期
float samplingtime_s;

//! update 周期を設定する
void section_length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	80fb      	strh	r3, [r7, #6]
    samplingtime_s = samplingtime_ms / (float) 1000;
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e9c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003eb8 <section_length_set_sampling_time_ms+0x30>
 8003ea0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <section_length_set_sampling_time_ms+0x34>)
 8003ea6:	edc3 7a00 	vstr	s15, [r3]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	447a0000 	.word	0x447a0000
 8003ebc:	20017f84 	.word	0x20017f84

08003ec0 <section_length_init>:

void section_length_init(unsigned short int samplingtime_ms)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
    section_length_set_sampling_time_ms(samplingtime_ms);
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ffdb 	bl	8003e88 <section_length_set_sampling_time_ms>
}
 8003ed2:	bf00      	nop
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <section_length_start>:

void section_length_start()
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	af00      	add	r7, sp, #0
    section_length_reset();
 8003ede:	f000 f80d 	bl	8003efc <section_length_reset>
    section_length_buffer_reset();
 8003ee2:	f000 f81f 	bl	8003f24 <section_length_buffer_reset>
    length_start();
 8003ee6:	f7fe fe85 	bl	8002bf4 <length_start>
}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}

08003eee <section_length_stop>:

void section_length_stop()
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	af00      	add	r7, sp, #0
    length_stop();
 8003ef2:	f7fe fe91 	bl	8002c18 <length_stop>
}
 8003ef6:	bf00      	nop
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <section_length_reset>:
{
    length_fin();
}

void section_length_reset()
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
    section_length_right = 0;
 8003f00:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <section_length_reset+0x20>)
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
    section_length_left = 0;
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <section_length_reset+0x24>)
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20017f80 	.word	0x20017f80
 8003f20:	20017f88 	.word	0x20017f88

08003f24 <section_length_buffer_reset>:

void section_length_buffer_reset()
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = 0;
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <section_length_buffer_reset+0x20>)
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
    section_length_buffer_global_right = 0;
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <section_length_buffer_reset+0x24>)
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20017f90 	.word	0x20017f90
 8003f48:	20017f8c 	.word	0x20017f8c

08003f4c <section_length_read>:

//! 現在点区間長を返す
float section_length_read()
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	ed2d 8b02 	vpush	{d8}
 8003f52:	af00      	add	r7, sp, #0
    return (section_length_read_left() + section_length_read_right()) / 2;
 8003f54:	f000 f814 	bl	8003f80 <section_length_read_left>
 8003f58:	eeb0 8a40 	vmov.f32	s16, s0
 8003f5c:	f000 f81e 	bl	8003f9c <section_length_read_right>
 8003f60:	eef0 7a40 	vmov.f32	s15, s0
 8003f64:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003f68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f70:	eef0 7a66 	vmov.f32	s15, s13
}
 8003f74:	eeb0 0a67 	vmov.f32	s0, s15
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	ecbd 8b02 	vpop	{d8}
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <section_length_read_left>:

float section_length_read_left()
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
    return section_length_left;
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <section_length_read_left+0x18>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	ee07 3a90 	vmov	s15, r3
}
 8003f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	20017f88 	.word	0x20017f88

08003f9c <section_length_read_right>:

float section_length_read_right()
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
    return section_length_right;
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <section_length_read_right+0x18>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	ee07 3a90 	vmov	s15, r3
}
 8003fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	20017f80 	.word	0x20017f80

08003fb8 <section_length_set_buffer>:
 * }
 * 
 */
//! 区間開始点を現在点の世界長にする
void section_length_set_buffer()
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = length_read_left();
 8003fbc:	f7fe fe66 	bl	8002c8c <length_read_left>
 8003fc0:	eef0 7a40 	vmov.f32	s15, s0
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <section_length_set_buffer+0x34>)
 8003fc6:	edc3 7a00 	vstr	s15, [r3]
    section_length_buffer_global_right = length_read_right();
 8003fca:	f7fe fe6d 	bl	8002ca8 <length_read_right>
 8003fce:	eef0 7a40 	vmov.f32	s15, s0
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <section_length_set_buffer+0x38>)
 8003fd4:	edc3 7a00 	vstr	s15, [r3]
    section_length_left = 0;
 8003fd8:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <section_length_set_buffer+0x3c>)
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
    section_length_right = 0;
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <section_length_set_buffer+0x40>)
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20017f90 	.word	0x20017f90
 8003ff0:	20017f8c 	.word	0x20017f8c
 8003ff4:	20017f88 	.word	0x20017f88
 8003ff8:	20017f80 	.word	0x20017f80

08003ffc <section_length_update>:

void section_length_update()
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
    //! 区間開始点から現在点の区間長を計算
    section_length_left = length_read_left() - section_length_buffer_global_left;
 8004000:	f7fe fe44 	bl	8002c8c <length_read_left>
 8004004:	eeb0 7a40 	vmov.f32	s14, s0
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <section_length_update+0x38>)
 800400a:	edd3 7a00 	vldr	s15, [r3]
 800400e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004012:	4b09      	ldr	r3, [pc, #36]	; (8004038 <section_length_update+0x3c>)
 8004014:	edc3 7a00 	vstr	s15, [r3]
    section_length_right = length_read_right() - section_length_buffer_global_right;
 8004018:	f7fe fe46 	bl	8002ca8 <length_read_right>
 800401c:	eeb0 7a40 	vmov.f32	s14, s0
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <section_length_update+0x40>)
 8004022:	edd3 7a00 	vldr	s15, [r3]
 8004026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <section_length_update+0x44>)
 800402c:	edc3 7a00 	vstr	s15, [r3]
}
 8004030:	bf00      	nop
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20017f90 	.word	0x20017f90
 8004038:	20017f88 	.word	0x20017f88
 800403c:	20017f8c 	.word	0x20017f8c
 8004040:	20017f80 	.word	0x20017f80

08004044 <section_length_d_print>:

void section_length_d_print()
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
    #if D_SECTION_LENGTH
    printf("section_length = %10.2f\r\n", section_length_read());
    #endif
}
 8004048:	bf00      	nop
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <sidesensor_read>:
unsigned char subsensbuf, marker, sidedeltacount, rightmarkercount;
SideSensorState markerstate, markerstate_volatile;
char sidesensor_start_or_stop;

uint8_t sidesensor_read()
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 800405e:	2104      	movs	r1, #4
 8004060:	4810      	ldr	r0, [pc, #64]	; (80040a4 <sidesensor_read+0x50>)
 8004062:	f003 fc89 	bl	8007978 <HAL_GPIO_ReadPin>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	b2da      	uxtb	r2, r3
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	4413      	add	r3, r2
 8004078:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 800407a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800407e:	4809      	ldr	r0, [pc, #36]	; (80040a4 <sidesensor_read+0x50>)
 8004080:	f003 fc7a 	bl	8007978 <HAL_GPIO_ReadPin>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <sidesensor_read+0x3a>
 800408a:	2302      	movs	r3, #2
 800408c:	e000      	b.n	8004090 <sidesensor_read+0x3c>
 800408e:	2300      	movs	r3, #0
 8004090:	b2da      	uxtb	r2, r3
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	4413      	add	r3, r2
 8004096:	71fb      	strb	r3, [r7, #7]

    return subsens;
 8004098:	79fb      	ldrb	r3, [r7, #7]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40020400 	.word	0x40020400

080040a8 <sidesensor_init>:

void sidesensor_init()
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
	/* sidesensor_init */
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <sidesensor_start>:

void sidesensor_start()
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
    marker = 0;
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <sidesensor_start+0x34>)
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <sidesensor_start+0x38>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <sidesensor_start+0x3c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <sidesensor_start+0x40>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]
	markerstate = none;
 80040d4:	4b09      	ldr	r3, [pc, #36]	; (80040fc <sidesensor_start+0x44>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = none;
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <sidesensor_start+0x48>)
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 80040e0:	bf00      	nop
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20017f97 	.word	0x20017f97
 80040f0:	20017f94 	.word	0x20017f94
 80040f4:	20017f95 	.word	0x20017f95
 80040f8:	20017f9a 	.word	0x20017f9a
 80040fc:	20017f96 	.word	0x20017f96
 8004100:	20017f98 	.word	0x20017f98

08004104 <sidesensor_stop>:

void sidesensor_stop()
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <sidesensor_read_markerstate>:

SideSensorState sidesensor_read_markerstate()
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
	return markerstate;
 8004118:	4b03      	ldr	r3, [pc, #12]	; (8004128 <sidesensor_read_markerstate+0x14>)
 800411a:	781b      	ldrb	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	20017f96 	.word	0x20017f96

0800412c <sidesensor_read_markerstate_volatile>:

SideSensorState sidesensor_read_markerstate_volatile()
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
	return markerstate_volatile;
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <sidesensor_read_markerstate_volatile+0x14>)
 8004132:	781b      	ldrb	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20017f98 	.word	0x20017f98

08004144 <sidesensor_right>:

void sidesensor_right()
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
    if(rightmarkercount == 1 - 1)
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <sidesensor_right+0x44>)
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <sidesensor_right+0x1a>
    {
        // start
		markerstate_volatile = straight;
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <sidesensor_right+0x48>)
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
		markerstate = straight;
 8004156:	4b0e      	ldr	r3, [pc, #56]	; (8004190 <sidesensor_right+0x4c>)
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e009      	b.n	8004172 <sidesensor_right+0x2e>
    }
    else if(rightmarkercount == 2 - 1)
 800415e:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <sidesensor_right+0x44>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d105      	bne.n	8004172 <sidesensor_right+0x2e>
    {
        // stop
		markerstate_volatile = stop;
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <sidesensor_right+0x48>)
 8004168:	2203      	movs	r2, #3
 800416a:	701a      	strb	r2, [r3, #0]
		markerstate = stop;
 800416c:	4b08      	ldr	r3, [pc, #32]	; (8004190 <sidesensor_right+0x4c>)
 800416e:	2203      	movs	r2, #3
 8004170:	701a      	strb	r2, [r3, #0]
    }
    rightmarkercount++;
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <sidesensor_right+0x44>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	3301      	adds	r3, #1
 8004178:	b2da      	uxtb	r2, r3
 800417a:	4b03      	ldr	r3, [pc, #12]	; (8004188 <sidesensor_right+0x44>)
 800417c:	701a      	strb	r2, [r3, #0]
}
 800417e:	bf00      	nop
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	20017f9a 	.word	0x20017f9a
 800418c:	20017f98 	.word	0x20017f98
 8004190:	20017f96 	.word	0x20017f96

08004194 <sidesensor_left>:

void sidesensor_left()
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <sidesensor_left+0x1c>)
 800419a:	2204      	movs	r2, #4
 800419c:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = curve;
 800419e:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <sidesensor_left+0x20>)
 80041a0:	2204      	movs	r2, #4
 80041a2:	701a      	strb	r2, [r3, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20017f96 	.word	0x20017f96
 80041b4:	20017f98 	.word	0x20017f98

080041b8 <sidesensor_cross>:

void sidesensor_cross()
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <sidesensor_cross+0x1c>)
 80041be:	2205      	movs	r2, #5
 80041c0:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = cross;
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <sidesensor_cross+0x20>)
 80041c4:	2205      	movs	r2, #5
 80041c6:	701a      	strb	r2, [r3, #0]
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20017f96 	.word	0x20017f96
 80041d8:	20017f98 	.word	0x20017f98

080041dc <sidesensor_main>:
	markerstate = straight;
	markerstate_volatile = straight;
}

void sidesensor_main()
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 80041e2:	f7ff ff37 	bl	8004054 <sidesensor_read>
 80041e6:	4603      	mov	r3, r0
 80041e8:	71fb      	strb	r3, [r7, #7]
	markerstate_volatile = none;
 80041ea:	4b28      	ldr	r3, [pc, #160]	; (800428c <sidesensor_main+0xb0>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]

	if(subsens != subsensbuf)
 80041f0:	4b27      	ldr	r3, [pc, #156]	; (8004290 <sidesensor_main+0xb4>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	79fa      	ldrb	r2, [r7, #7]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d044      	beq.n	8004284 <sidesensor_main+0xa8>
	{
		subsensbuf = subsens;
 80041fa:	4a25      	ldr	r2, [pc, #148]	; (8004290 <sidesensor_main+0xb4>)
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 8004200:	79fa      	ldrb	r2, [r7, #7]
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <sidesensor_main+0xb8>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4b22      	ldr	r3, [pc, #136]	; (8004298 <sidesensor_main+0xbc>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	4413      	add	r3, r2
 8004214:	b2da      	uxtb	r2, r3
 8004216:	4b20      	ldr	r3, [pc, #128]	; (8004298 <sidesensor_main+0xbc>)
 8004218:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d12b      	bne.n	8004278 <sidesensor_main+0x9c>
 8004220:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <sidesensor_main+0xb8>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d027      	beq.n	8004278 <sidesensor_main+0x9c>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 8004228:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <sidesensor_main+0xbc>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 8004232:	4b19      	ldr	r3, [pc, #100]	; (8004298 <sidesensor_main+0xbc>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	109b      	asrs	r3, r3, #2
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8004240:	797b      	ldrb	r3, [r7, #5]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10e      	bne.n	8004264 <sidesensor_main+0x88>
			{
				if (first == 0b01)
 8004246:	79bb      	ldrb	r3, [r7, #6]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d102      	bne.n	8004252 <sidesensor_main+0x76>
				{
					// right -> start / stop
                    sidesensor_right();
 800424c:	f7ff ff7a 	bl	8004144 <sidesensor_right>
 8004250:	e00a      	b.n	8004268 <sidesensor_main+0x8c>
				}
				else if (first == 0b10)
 8004252:	79bb      	ldrb	r3, [r7, #6]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d102      	bne.n	800425e <sidesensor_main+0x82>
				{
					// left -> curve
                    sidesensor_left();
 8004258:	f7ff ff9c 	bl	8004194 <sidesensor_left>
 800425c:	e004      	b.n	8004268 <sidesensor_main+0x8c>
				}
				else
				{
					// cross
                    sidesensor_cross();
 800425e:	f7ff ffab 	bl	80041b8 <sidesensor_cross>
 8004262:	e001      	b.n	8004268 <sidesensor_main+0x8c>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8004264:	f7ff ffa8 	bl	80041b8 <sidesensor_cross>
			}
			sidedeltacount = 0;
 8004268:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <sidesensor_main+0xb8>)
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
			marker = 0;
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <sidesensor_main+0xbc>)
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
		{
 8004274:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 8004276:	e005      	b.n	8004284 <sidesensor_main+0xa8>
			sidedeltacount++;
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <sidesensor_main+0xb8>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	b2da      	uxtb	r2, r3
 8004280:	4b04      	ldr	r3, [pc, #16]	; (8004294 <sidesensor_main+0xb8>)
 8004282:	701a      	strb	r2, [r3, #0]
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20017f98 	.word	0x20017f98
 8004290:	20017f94 	.word	0x20017f94
 8004294:	20017f95 	.word	0x20017f95
 8004298:	20017f97 	.word	0x20017f97

0800429c <slow_start>:
    /* slow_init */
    slow_started = 0;
}

void slow_start()
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
    /* slow_start */

    /* 初期設定されている値を一旦保存する */
    PID *slow_default_pid_pointer;
    slow_default_pid_pointer = velotrace_read_values();
 80042a2:	f001 fbf9 	bl	8005a98 <velotrace_read_values>
 80042a6:	6078      	str	r0, [r7, #4]
    slow_default_pid.target = slow_default_pid_pointer -> target;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1b      	ldr	r2, [pc, #108]	; (800431c <slow_start+0x80>)
 80042ae:	6013      	str	r3, [r2, #0]
    slow_default_pid_pointer = tracer_read_values();
 80042b0:	f001 f9c4 	bl	800563c <tracer_read_values>
 80042b4:	6078      	str	r0, [r7, #4]
    slow_default_pid.kp = slow_default_pid_pointer->kp;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4a18      	ldr	r2, [pc, #96]	; (800431c <slow_start+0x80>)
 80042bc:	6053      	str	r3, [r2, #4]
    slow_default_pid.ki = slow_default_pid_pointer->ki;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	4a16      	ldr	r2, [pc, #88]	; (800431c <slow_start+0x80>)
 80042c4:	6093      	str	r3, [r2, #8]
    slow_default_pid.kd = slow_default_pid_pointer->kd;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	4a14      	ldr	r2, [pc, #80]	; (800431c <slow_start+0x80>)
 80042cc:	60d3      	str	r3, [r2, #12]

    /* slow 実行時の PID パラメータ */
    slow_pid.target = SLOW_VELOTRACE_TARGET;
 80042ce:	4b14      	ldr	r3, [pc, #80]	; (8004320 <slow_start+0x84>)
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <slow_start+0x88>)
 80042d2:	601a      	str	r2, [r3, #0]
    slow_pid.kp = SLOW_TRACE_KP;
 80042d4:	4b12      	ldr	r3, [pc, #72]	; (8004320 <slow_start+0x84>)
 80042d6:	4a14      	ldr	r2, [pc, #80]	; (8004328 <slow_start+0x8c>)
 80042d8:	605a      	str	r2, [r3, #4]
    slow_pid.ki = SLOW_TRACE_KI;
 80042da:	4b11      	ldr	r3, [pc, #68]	; (8004320 <slow_start+0x84>)
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	609a      	str	r2, [r3, #8]
    slow_pid.kd = SLOW_TRACE_KD;
 80042e2:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <slow_start+0x84>)
 80042e4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80042e8:	60da      	str	r2, [r3, #12]

    /* 初期化 */
    length_start();
 80042ea:	f7fe fc83 	bl	8002bf4 <length_start>
    tracer_start();
 80042ee:	f001 f84d 	bl	800538c <tracer_start>
    velotrace_start();
 80042f2:	f001 fa43 	bl	800577c <velotrace_start>
    slowinglength = 0;
 80042f6:	4b0d      	ldr	r3, [pc, #52]	; (800432c <slow_start+0x90>)
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    slow_enable = 1;
 80042fe:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <slow_start+0x94>)
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]
    //! スロースタートを始めたタイミングでの世界長を取り出す
    slow_start_point_global_length = length_read();
 8004304:	f7fe fca8 	bl	8002c58 <length_read>
 8004308:	eef0 7a40 	vmov.f32	s15, s0
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <slow_start+0x98>)
 800430e:	edc3 7a00 	vstr	s15, [r3]
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20017fb8 	.word	0x20017fb8
 8004320:	20017fa4 	.word	0x20017fa4
 8004324:	3e99999a 	.word	0x3e99999a
 8004328:	40400000 	.word	0x40400000
 800432c:	20017fc8 	.word	0x20017fc8
 8004330:	20017fa1 	.word	0x20017fa1
 8004334:	20017f9c 	.word	0x20017f9c

08004338 <slow_print_default_pid>:
{
    return sigmoid(x, SLOW_SIGMOID_A, SLOW_LENGTH / 2);
}

void slow_print_default_pid()
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
#if D_SLOW
    // printf("slow > kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", slow_default_pid.kp, slow_default_pid.ki, slow_default_pid.kd);
    printf("slow > target = %7.2f\r\n", slow_default_pid.target);
#endif
}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_MspInit+0x54>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	4a11      	ldr	r2, [pc, #68]	; (800439c <HAL_MspInit+0x54>)
 8004358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800435c:	6453      	str	r3, [r2, #68]	; 0x44
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <HAL_MspInit+0x54>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_MspInit+0x54>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <HAL_MspInit+0x54>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_MspInit+0x54>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8004386:	2200      	movs	r2, #0
 8004388:	210f      	movs	r1, #15
 800438a:	f06f 0003 	mvn.w	r0, #3
 800438e:	f002 fa6e 	bl	800686e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800

080043a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a8:	f107 031c 	add.w	r3, r7, #28
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	609a      	str	r2, [r3, #8]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a49      	ldr	r2, [pc, #292]	; (80044e4 <HAL_ADC_MspInit+0x144>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	f040 808c 	bne.w	80044dc <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	4a46      	ldr	r2, [pc, #280]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 80043ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d2:	6453      	str	r3, [r2, #68]	; 0x44
 80043d4:	4b44      	ldr	r3, [pc, #272]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	4b40      	ldr	r3, [pc, #256]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	4a3f      	ldr	r2, [pc, #252]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 80043ea:	f043 0304 	orr.w	r3, r3, #4
 80043ee:	6313      	str	r3, [r2, #48]	; 0x30
 80043f0:	4b3d      	ldr	r3, [pc, #244]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 80043f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	4b39      	ldr	r3, [pc, #228]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 8004402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004404:	4a38      	ldr	r2, [pc, #224]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	6313      	str	r3, [r2, #48]	; 0x30
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	4b32      	ldr	r3, [pc, #200]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	4a31      	ldr	r2, [pc, #196]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 8004422:	f043 0302 	orr.w	r3, r3, #2
 8004426:	6313      	str	r3, [r2, #48]	; 0x30
 8004428:	4b2f      	ldr	r3, [pc, #188]	; (80044e8 <HAL_ADC_MspInit+0x148>)
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004434:	233f      	movs	r3, #63	; 0x3f
 8004436:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004438:	2303      	movs	r3, #3
 800443a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443c:	2300      	movs	r3, #0
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004440:	f107 031c 	add.w	r3, r7, #28
 8004444:	4619      	mov	r1, r3
 8004446:	4829      	ldr	r0, [pc, #164]	; (80044ec <HAL_ADC_MspInit+0x14c>)
 8004448:	f003 f8fc 	bl	8007644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800444c:	23ff      	movs	r3, #255	; 0xff
 800444e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004450:	2303      	movs	r3, #3
 8004452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004454:	2300      	movs	r3, #0
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004458:	f107 031c 	add.w	r3, r7, #28
 800445c:	4619      	mov	r1, r3
 800445e:	4824      	ldr	r0, [pc, #144]	; (80044f0 <HAL_ADC_MspInit+0x150>)
 8004460:	f003 f8f0 	bl	8007644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004464:	2303      	movs	r3, #3
 8004466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004468:	2303      	movs	r3, #3
 800446a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446c:	2300      	movs	r3, #0
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004470:	f107 031c 	add.w	r3, r7, #28
 8004474:	4619      	mov	r1, r3
 8004476:	481f      	ldr	r0, [pc, #124]	; (80044f4 <HAL_ADC_MspInit+0x154>)
 8004478:	f003 f8e4 	bl	8007644 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800447c:	4b1e      	ldr	r3, [pc, #120]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 800447e:	4a1f      	ldr	r2, [pc, #124]	; (80044fc <HAL_ADC_MspInit+0x15c>)
 8004480:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 8004484:	2200      	movs	r2, #0
 8004486:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 800448a:	2200      	movs	r2, #0
 800448c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800448e:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 8004490:	2200      	movs	r2, #0
 8004492:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004494:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 8004496:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800449a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800449c:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 800449e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80044a4:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 80044a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044ac:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 80044ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80044b4:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 80044bc:	2200      	movs	r2, #0
 80044be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044c0:	480d      	ldr	r0, [pc, #52]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 80044c2:	f002 fa0b 	bl	80068dc <HAL_DMA_Init>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80044cc:	f7ff fbc4 	bl	8003c58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a09      	ldr	r2, [pc, #36]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
 80044d6:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <HAL_ADC_MspInit+0x158>)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80044dc:	bf00      	nop
 80044de:	3730      	adds	r7, #48	; 0x30
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	40012000 	.word	0x40012000
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40020800 	.word	0x40020800
 80044f0:	40020000 	.word	0x40020000
 80044f4:	40020400 	.word	0x40020400
 80044f8:	20006400 	.word	0x20006400
 80044fc:	40026410 	.word	0x40026410

08004500 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b08a      	sub	sp, #40	; 0x28
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a19      	ldr	r2, [pc, #100]	; (8004584 <HAL_I2C_MspInit+0x84>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d12c      	bne.n	800457c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	4b18      	ldr	r3, [pc, #96]	; (8004588 <HAL_I2C_MspInit+0x88>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	4a17      	ldr	r2, [pc, #92]	; (8004588 <HAL_I2C_MspInit+0x88>)
 800452c:	f043 0302 	orr.w	r3, r3, #2
 8004530:	6313      	str	r3, [r2, #48]	; 0x30
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <HAL_I2C_MspInit+0x88>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800453e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004544:	2312      	movs	r3, #18
 8004546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004548:	2301      	movs	r3, #1
 800454a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800454c:	2303      	movs	r3, #3
 800454e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004550:	2304      	movs	r3, #4
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	4619      	mov	r1, r3
 800455a:	480c      	ldr	r0, [pc, #48]	; (800458c <HAL_I2C_MspInit+0x8c>)
 800455c:	f003 f872 	bl	8007644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	4b08      	ldr	r3, [pc, #32]	; (8004588 <HAL_I2C_MspInit+0x88>)
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	4a07      	ldr	r2, [pc, #28]	; (8004588 <HAL_I2C_MspInit+0x88>)
 800456a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800456e:	6413      	str	r3, [r2, #64]	; 0x40
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_I2C_MspInit+0x88>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800457c:	bf00      	nop
 800457e:	3728      	adds	r7, #40	; 0x28
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40005400 	.word	0x40005400
 8004588:	40023800 	.word	0x40023800
 800458c:	40020400 	.word	0x40020400

08004590 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	; 0x28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a19      	ldr	r2, [pc, #100]	; (8004614 <HAL_SPI_MspInit+0x84>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d12c      	bne.n	800460c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	4b18      	ldr	r3, [pc, #96]	; (8004618 <HAL_SPI_MspInit+0x88>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	4a17      	ldr	r2, [pc, #92]	; (8004618 <HAL_SPI_MspInit+0x88>)
 80045bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045c0:	6413      	str	r3, [r2, #64]	; 0x40
 80045c2:	4b15      	ldr	r3, [pc, #84]	; (8004618 <HAL_SPI_MspInit+0x88>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_SPI_MspInit+0x88>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	4a10      	ldr	r2, [pc, #64]	; (8004618 <HAL_SPI_MspInit+0x88>)
 80045d8:	f043 0302 	orr.w	r3, r3, #2
 80045dc:	6313      	str	r3, [r2, #48]	; 0x30
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <HAL_SPI_MspInit+0x88>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80045ea:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80045ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f0:	2302      	movs	r3, #2
 80045f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f8:	2303      	movs	r3, #3
 80045fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045fc:	2305      	movs	r3, #5
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004600:	f107 0314 	add.w	r3, r7, #20
 8004604:	4619      	mov	r1, r3
 8004606:	4805      	ldr	r0, [pc, #20]	; (800461c <HAL_SPI_MspInit+0x8c>)
 8004608:	f003 f81c 	bl	8007644 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800460c:	bf00      	nop
 800460e:	3728      	adds	r7, #40	; 0x28
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40003800 	.word	0x40003800
 8004618:	40023800 	.word	0x40023800
 800461c:	40020400 	.word	0x40020400

08004620 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08c      	sub	sp, #48	; 0x30
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004628:	f107 031c 	add.w	r3, r7, #28
 800462c:	2200      	movs	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	605a      	str	r2, [r3, #4]
 8004632:	609a      	str	r2, [r3, #8]
 8004634:	60da      	str	r2, [r3, #12]
 8004636:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a3e      	ldr	r2, [pc, #248]	; (8004738 <HAL_TIM_Encoder_MspInit+0x118>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d13d      	bne.n	80046be <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	4b3d      	ldr	r3, [pc, #244]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	4a3c      	ldr	r2, [pc, #240]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	6453      	str	r3, [r2, #68]	; 0x44
 8004652:	4b3a      	ldr	r3, [pc, #232]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	4a35      	ldr	r2, [pc, #212]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6313      	str	r3, [r2, #48]	; 0x30
 800466e:	4b33      	ldr	r3, [pc, #204]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 800467a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800467e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004680:	2302      	movs	r3, #2
 8004682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	2300      	movs	r3, #0
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004688:	2300      	movs	r3, #0
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800468c:	2301      	movs	r3, #1
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004690:	f107 031c 	add.w	r3, r7, #28
 8004694:	4619      	mov	r1, r3
 8004696:	482a      	ldr	r0, [pc, #168]	; (8004740 <HAL_TIM_Encoder_MspInit+0x120>)
 8004698:	f002 ffd4 	bl	8007644 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800469c:	2200      	movs	r2, #0
 800469e:	2101      	movs	r1, #1
 80046a0:	2019      	movs	r0, #25
 80046a2:	f002 f8e4 	bl	800686e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80046a6:	2019      	movs	r0, #25
 80046a8:	f002 f8fd 	bl	80068a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2101      	movs	r1, #1
 80046b0:	201a      	movs	r0, #26
 80046b2:	f002 f8dc 	bl	800686e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80046b6:	201a      	movs	r0, #26
 80046b8:	f002 f8f5 	bl	80068a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80046bc:	e038      	b.n	8004730 <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM3)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a20      	ldr	r2, [pc, #128]	; (8004744 <HAL_TIM_Encoder_MspInit+0x124>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d133      	bne.n	8004730 <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	4b1b      	ldr	r3, [pc, #108]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	4a1a      	ldr	r2, [pc, #104]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 80046d2:	f043 0302 	orr.w	r3, r3, #2
 80046d6:	6413      	str	r3, [r2, #64]	; 0x40
 80046d8:	4b18      	ldr	r3, [pc, #96]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	4a13      	ldr	r2, [pc, #76]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 80046ee:	f043 0302 	orr.w	r3, r3, #2
 80046f2:	6313      	str	r3, [r2, #48]	; 0x30
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <HAL_TIM_Encoder_MspInit+0x11c>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8004700:	2330      	movs	r3, #48	; 0x30
 8004702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004704:	2302      	movs	r3, #2
 8004706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470c:	2300      	movs	r3, #0
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004710:	2302      	movs	r3, #2
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004714:	f107 031c 	add.w	r3, r7, #28
 8004718:	4619      	mov	r1, r3
 800471a:	480b      	ldr	r0, [pc, #44]	; (8004748 <HAL_TIM_Encoder_MspInit+0x128>)
 800471c:	f002 ff92 	bl	8007644 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004720:	2200      	movs	r2, #0
 8004722:	2101      	movs	r1, #1
 8004724:	201d      	movs	r0, #29
 8004726:	f002 f8a2 	bl	800686e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800472a:	201d      	movs	r0, #29
 800472c:	f002 f8bb 	bl	80068a6 <HAL_NVIC_EnableIRQ>
}
 8004730:	bf00      	nop
 8004732:	3730      	adds	r7, #48	; 0x30
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40010000 	.word	0x40010000
 800473c:	40023800 	.word	0x40023800
 8004740:	40020000 	.word	0x40020000
 8004744:	40000400 	.word	0x40000400
 8004748:	40020400 	.word	0x40020400

0800474c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <HAL_TIM_PWM_MspInit+0x48>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d115      	bne.n	800478a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <HAL_TIM_PWM_MspInit+0x4c>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <HAL_TIM_PWM_MspInit+0x4c>)
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
 800476e:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <HAL_TIM_PWM_MspInit+0x4c>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800477a:	2200      	movs	r2, #0
 800477c:	2101      	movs	r1, #1
 800477e:	201e      	movs	r0, #30
 8004780:	f002 f875 	bl	800686e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004784:	201e      	movs	r0, #30
 8004786:	f002 f88e 	bl	80068a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800478a:	bf00      	nop
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40000800 	.word	0x40000800
 8004798:	40023800 	.word	0x40023800

0800479c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a42      	ldr	r2, [pc, #264]	; (80048b4 <HAL_TIM_Base_MspInit+0x118>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d116      	bne.n	80047dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	4a40      	ldr	r2, [pc, #256]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 80047b8:	f043 0310 	orr.w	r3, r3, #16
 80047bc:	6413      	str	r3, [r2, #64]	; 0x40
 80047be:	4b3e      	ldr	r3, [pc, #248]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f003 0310 	and.w	r3, r3, #16
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2101      	movs	r1, #1
 80047ce:	2036      	movs	r0, #54	; 0x36
 80047d0:	f002 f84d 	bl	800686e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80047d4:	2036      	movs	r0, #54	; 0x36
 80047d6:	f002 f866 	bl	80068a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80047da:	e066      	b.n	80048aa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a36      	ldr	r2, [pc, #216]	; (80048bc <HAL_TIM_Base_MspInit+0x120>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d116      	bne.n	8004814 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	4b33      	ldr	r3, [pc, #204]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	4a32      	ldr	r2, [pc, #200]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 80047f0:	f043 0320 	orr.w	r3, r3, #32
 80047f4:	6413      	str	r3, [r2, #64]	; 0x40
 80047f6:	4b30      	ldr	r3, [pc, #192]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8004802:	2200      	movs	r2, #0
 8004804:	2101      	movs	r1, #1
 8004806:	2037      	movs	r0, #55	; 0x37
 8004808:	f002 f831 	bl	800686e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800480c:	2037      	movs	r0, #55	; 0x37
 800480e:	f002 f84a 	bl	80068a6 <HAL_NVIC_EnableIRQ>
}
 8004812:	e04a      	b.n	80048aa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a29      	ldr	r2, [pc, #164]	; (80048c0 <HAL_TIM_Base_MspInit+0x124>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d116      	bne.n	800484c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	4a24      	ldr	r2, [pc, #144]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 8004828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482c:	6453      	str	r3, [r2, #68]	; 0x44
 800482e:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800483a:	2200      	movs	r2, #0
 800483c:	2101      	movs	r1, #1
 800483e:	2019      	movs	r0, #25
 8004840:	f002 f815 	bl	800686e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004844:	2019      	movs	r0, #25
 8004846:	f002 f82e 	bl	80068a6 <HAL_NVIC_EnableIRQ>
}
 800484a:	e02e      	b.n	80048aa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1c      	ldr	r2, [pc, #112]	; (80048c4 <HAL_TIM_Base_MspInit+0x128>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d116      	bne.n	8004884 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 8004860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004864:	6453      	str	r3, [r2, #68]	; 0x44
 8004866:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8004872:	2200      	movs	r2, #0
 8004874:	2101      	movs	r1, #1
 8004876:	201a      	movs	r0, #26
 8004878:	f001 fff9 	bl	800686e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800487c:	201a      	movs	r0, #26
 800487e:	f002 f812 	bl	80068a6 <HAL_NVIC_EnableIRQ>
}
 8004882:	e012      	b.n	80048aa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <HAL_TIM_Base_MspInit+0x12c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d10d      	bne.n	80048aa <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	4a08      	ldr	r2, [pc, #32]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 8004898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489c:	6413      	str	r3, [r2, #64]	; 0x40
 800489e:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <HAL_TIM_Base_MspInit+0x11c>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
}
 80048aa:	bf00      	nop
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40001000 	.word	0x40001000
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40001400 	.word	0x40001400
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800
 80048c8:	40002000 	.word	0x40002000

080048cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d4:	f107 030c 	add.w	r3, r7, #12
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	605a      	str	r2, [r3, #4]
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a12      	ldr	r2, [pc, #72]	; (8004934 <HAL_TIM_MspPostInit+0x68>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d11d      	bne.n	800492a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <HAL_TIM_MspPostInit+0x6c>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	4a10      	ldr	r2, [pc, #64]	; (8004938 <HAL_TIM_MspPostInit+0x6c>)
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	6313      	str	r3, [r2, #48]	; 0x30
 80048fe:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <HAL_TIM_MspPostInit+0x6c>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 800490a:	23c0      	movs	r3, #192	; 0xc0
 800490c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490e:	2302      	movs	r3, #2
 8004910:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004916:	2300      	movs	r3, #0
 8004918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800491a:	2302      	movs	r3, #2
 800491c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491e:	f107 030c 	add.w	r3, r7, #12
 8004922:	4619      	mov	r1, r3
 8004924:	4805      	ldr	r0, [pc, #20]	; (800493c <HAL_TIM_MspPostInit+0x70>)
 8004926:	f002 fe8d 	bl	8007644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800492a:	bf00      	nop
 800492c:	3720      	adds	r7, #32
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40000800 	.word	0x40000800
 8004938:	40023800 	.word	0x40023800
 800493c:	40020400 	.word	0x40020400

08004940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	60da      	str	r2, [r3, #12]
 8004956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <HAL_UART_MspInit+0x84>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d12b      	bne.n	80049ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <HAL_UART_MspInit+0x88>)
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <HAL_UART_MspInit+0x88>)
 800496c:	f043 0320 	orr.w	r3, r3, #32
 8004970:	6453      	str	r3, [r2, #68]	; 0x44
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <HAL_UART_MspInit+0x88>)
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_UART_MspInit+0x88>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	4a10      	ldr	r2, [pc, #64]	; (80049c8 <HAL_UART_MspInit+0x88>)
 8004988:	f043 0304 	orr.w	r3, r3, #4
 800498c:	6313      	str	r3, [r2, #48]	; 0x30
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <HAL_UART_MspInit+0x88>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800499a:	23c0      	movs	r3, #192	; 0xc0
 800499c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499e:	2302      	movs	r3, #2
 80049a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a6:	2303      	movs	r3, #3
 80049a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80049aa:	2308      	movs	r3, #8
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ae:	f107 0314 	add.w	r3, r7, #20
 80049b2:	4619      	mov	r1, r3
 80049b4:	4805      	ldr	r0, [pc, #20]	; (80049cc <HAL_UART_MspInit+0x8c>)
 80049b6:	f002 fe45 	bl	8007644 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80049ba:	bf00      	nop
 80049bc:	3728      	adds	r7, #40	; 0x28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40011400 	.word	0x40011400
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40020800 	.word	0x40020800

080049d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049d4:	e7fe      	b.n	80049d4 <NMI_Handler+0x4>

080049d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d6:	b480      	push	{r7}
 80049d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049da:	e7fe      	b.n	80049da <HardFault_Handler+0x4>

080049dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049e0:	e7fe      	b.n	80049e0 <MemManage_Handler+0x4>

080049e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049e2:	b480      	push	{r7}
 80049e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049e6:	e7fe      	b.n	80049e6 <BusFault_Handler+0x4>

080049e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049ec:	e7fe      	b.n	80049ec <UsageFault_Handler+0x4>

080049ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049ee:	b480      	push	{r7}
 80049f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a1c:	f001 f9a8 	bl	8005d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a20:	bf00      	nop
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a28:	4803      	ldr	r0, [pc, #12]	; (8004a38 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004a2a:	f004 ff5e 	bl	80098ea <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004a2e:	4803      	ldr	r0, [pc, #12]	; (8004a3c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004a30:	f004 ff5b 	bl	80098ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a34:	bf00      	nop
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	200064a8 	.word	0x200064a8
 8004a3c:	200062e0 	.word	0x200062e0

08004a40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a44:	4803      	ldr	r0, [pc, #12]	; (8004a54 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004a46:	f004 ff50 	bl	80098ea <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004a4a:	4803      	ldr	r0, [pc, #12]	; (8004a58 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004a4c:	f004 ff4d 	bl	80098ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004a50:	bf00      	nop
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200064a8 	.word	0x200064a8
 8004a58:	200063b8 	.word	0x200063b8

08004a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <TIM3_IRQHandler+0x10>)
 8004a62:	f004 ff42 	bl	80098ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20006328 	.word	0x20006328

08004a70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004a74:	4802      	ldr	r0, [pc, #8]	; (8004a80 <TIM4_IRQHandler+0x10>)
 8004a76:	f004 ff38 	bl	80098ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20006244 	.word	0x20006244

08004a84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a88:	4802      	ldr	r0, [pc, #8]	; (8004a94 <TIM6_DAC_IRQHandler+0x10>)
 8004a8a:	f004 ff2e 	bl	80098ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20006460 	.word	0x20006460

08004a98 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <TIM7_IRQHandler+0x10>)
 8004a9e:	f004 ff24 	bl	80098ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2000657c 	.word	0x2000657c

08004aac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ab0:	4802      	ldr	r0, [pc, #8]	; (8004abc <DMA2_Stream0_IRQHandler+0x10>)
 8004ab2:	f002 f889 	bl	8006bc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20006400 	.word	0x20006400

08004ac0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	e00a      	b.n	8004ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ad2:	f3af 8000 	nop.w
 8004ad6:	4601      	mov	r1, r0
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	60ba      	str	r2, [r7, #8]
 8004ade:	b2ca      	uxtb	r2, r1
 8004ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	dbf0      	blt.n	8004ad2 <_read+0x12>
	}

return len;
 8004af0:	687b      	ldr	r3, [r7, #4]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	60b9      	str	r1, [r7, #8]
 8004b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
 8004b0a:	e009      	b.n	8004b20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	60ba      	str	r2, [r7, #8]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff f971 	bl	8003dfc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	dbf1      	blt.n	8004b0c <_write+0x12>
	}
	return len;
 8004b28:	687b      	ldr	r3, [r7, #4]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <_close>:

int _close(int file)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
	return -1;
 8004b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <_isatty>:

int _isatty(int file)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
	return 1;
 8004b72:	2301      	movs	r3, #1
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <_sbrk+0x5c>)
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <_sbrk+0x60>)
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bb0:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <_sbrk+0x64>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <_sbrk+0x64>)
 8004bba:	4a12      	ldr	r2, [pc, #72]	; (8004c04 <_sbrk+0x68>)
 8004bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bbe:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <_sbrk+0x64>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d207      	bcs.n	8004bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bcc:	f005 feb0 	bl	800a930 <__errno>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bda:	e009      	b.n	8004bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <_sbrk+0x64>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <_sbrk+0x64>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4413      	add	r3, r2
 8004bea:	4a05      	ldr	r2, [pc, #20]	; (8004c00 <_sbrk+0x64>)
 8004bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bee:	68fb      	ldr	r3, [r7, #12]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3718      	adds	r7, #24
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20020000 	.word	0x20020000
 8004bfc:	00000400 	.word	0x00000400
 8004c00:	20000200 	.word	0x20000200
 8004c04:	20018080 	.word	0x20018080

08004c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c0c:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <SystemInit+0x28>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	4a07      	ldr	r2, [pc, #28]	; (8004c30 <SystemInit+0x28>)
 8004c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <SystemInit+0x28>)
 8004c1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c22:	609a      	str	r2, [r3, #8]
#endif
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <tim10_init>:
float samplingtime_s;
uint32_t __debug_tim10_count__, __debug_tim10_count_2__;

/* only use in main.c */
void tim10_init()
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
	samplingtime_s = TIM10_TIME_MS / (float) 1000;
 8004c38:	4b0f      	ldr	r3, [pc, #60]	; (8004c78 <tim10_init+0x44>)
 8004c3a:	4a10      	ldr	r2, [pc, #64]	; (8004c7c <tim10_init+0x48>)
 8004c3c:	601a      	str	r2, [r3, #0]
	samplingtime_ms = TIM10_TIME_MS;
 8004c3e:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <tim10_init+0x4c>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	601a      	str	r2, [r3, #0]
	length_init(samplingtime_ms);
 8004c44:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <tim10_init+0x4c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fd ffbe 	bl	8002bcc <length_init>
	section_length_init(samplingtime_ms);
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <tim10_init+0x4c>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff f932 	bl	8003ec0 <section_length_init>
	course_init(samplingtime_ms);
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <tim10_init+0x4c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fd f872 	bl	8001d4c <course_init>
	velotrace_init(1);
 8004c68:	2001      	movs	r0, #1
 8004c6a:	f000 fd71 	bl	8005750 <velotrace_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8004c6e:	4805      	ldr	r0, [pc, #20]	; (8004c84 <tim10_init+0x50>)
 8004c70:	f004 fabc 	bl	80091ec <HAL_TIM_Base_Stop_IT>
}
 8004c74:	bf00      	nop
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20017f84 	.word	0x20017f84
 8004c7c:	3a83126f 	.word	0x3a83126f
 8004c80:	20017fe0 	.word	0x20017fe0
 8004c84:	200062e0 	.word	0x200062e0

08004c88 <tim10_start>:

void tim10_start()
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
	tim10_left = 0;
 8004c8c:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <tim10_start+0x48>)
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
	tim10_right = 0;
 8004c94:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <tim10_start+0x4c>)
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
	__debug_tim10_count__ = 0;
 8004c9c:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <tim10_start+0x50>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
	__debug_tim10_count_2__ = 0;
 8004ca2:	4b0e      	ldr	r3, [pc, #56]	; (8004cdc <tim10_start+0x54>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
	course_start();
 8004ca8:	f7fd f864 	bl	8001d74 <course_start>
	length_start();
 8004cac:	f7fd ffa2 	bl	8002bf4 <length_start>
	section_length_start();
 8004cb0:	f7ff f913 	bl	8003eda <section_length_start>
	velotrace_start();
 8004cb4:	f000 fd62 	bl	800577c <velotrace_start>
	slow_start(velotrace_read_values());
 8004cb8:	f000 feee 	bl	8005a98 <velotrace_read_values>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff faec 	bl	800429c <slow_start>
	HAL_TIM_Base_Start_IT(&htim10);
 8004cc4:	4806      	ldr	r0, [pc, #24]	; (8004ce0 <tim10_start+0x58>)
 8004cc6:	f004 fa21 	bl	800910c <HAL_TIM_Base_Start_IT>
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20017fd8 	.word	0x20017fd8
 8004cd4:	20017fe4 	.word	0x20017fe4
 8004cd8:	20017fcc 	.word	0x20017fcc
 8004cdc:	20017fd4 	.word	0x20017fd4
 8004ce0:	200062e0 	.word	0x200062e0

08004ce4 <tim10_stop>:

void tim10_stop()
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 8004ce8:	4806      	ldr	r0, [pc, #24]	; (8004d04 <tim10_stop+0x20>)
 8004cea:	f004 fa7f 	bl	80091ec <HAL_TIM_Base_Stop_IT>
	velotrace_stop();
 8004cee:	f000 fde5 	bl	80058bc <velotrace_stop>
	section_length_stop();
 8004cf2:	f7ff f8fc 	bl	8003eee <section_length_stop>
	length_stop();
 8004cf6:	f7fd ff8f 	bl	8002c18 <length_stop>
	course_stop();
 8004cfa:	f7fd f84f 	bl	8001d9c <course_stop>
}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	200062e0 	.word	0x200062e0

08004d08 <tim10_main>:
	section_length_fin();
	HAL_TIM_Base_Stop_IT(&htim10);
}

void tim10_main()
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	PlayMode rrpm;
	//! 角度をアップデートし続ける
	course_update_section_degree();
 8004d0e:	f7fd f887 	bl	8001e20 <course_update_section_degree>
	//! 長さをアップデートし続ける
	length_update();
 8004d12:	f7fe f80d 	bl	8002d30 <length_update>
	//! 区間長をアップデートし続ける
	section_length_update();
 8004d16:	f7ff f971 	bl	8003ffc <section_length_update>
	//! 速度制御の指令値をアップデートし続ける
	tim10_update_values();
 8004d1a:	f000 f81b 	bl	8004d54 <tim10_update_values>
	rrpm = rotary_read_playmode();
 8004d1e:	f7fc fc03 	bl	8001528 <rotary_read_playmode>
 8004d22:	4603      	mov	r3, r0
 8004d24:	71fb      	strb	r3, [r7, #7]
	__debug_tim10_count_2__ = __debug_tim10_count_2__ + 1;
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <tim10_main+0x48>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	4a08      	ldr	r2, [pc, #32]	; (8004d50 <tim10_main+0x48>)
 8004d2e:	6013      	str	r3, [r2, #0]
			course_state_function();
			__debug_tim10_count__ = __debug_tim10_count__ + 1;
		}
	}
#endif
	if(rotary_read_playmode() == velotrace_tuning_2)
 8004d30:	f7fc fbfa 	bl	8001528 <rotary_read_playmode>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b07      	cmp	r3, #7
 8004d38:	d106      	bne.n	8004d48 <tim10_main+0x40>
	{
		if(virtual_marker_read_markerstate() == straight)
 8004d3a:	f000 ff7d 	bl	8005c38 <virtual_marker_read_markerstate>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <tim10_main+0x40>
		{
			velotrace_gain_tuning();
 8004d44:	f000 ff28 	bl	8005b98 <velotrace_gain_tuning>
		}
	}
}
 8004d48:	bf00      	nop
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20017fd4 	.word	0x20017fd4

08004d54 <tim10_update_values>:

//! tim10_main でのみ呼び出されるべき関数
//! 速度制御の指令値を更新する
void tim10_update_values()
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
	{
		slow_main();
	}
#endif

	tim10_left  = velotrace_solve(velocity_read());
 8004d58:	f7fd ffb4 	bl	8002cc4 <velocity_read>
 8004d5c:	eef0 7a40 	vmov.f32	s15, s0
 8004d60:	eeb0 0a67 	vmov.f32	s0, s15
 8004d64:	f000 fea2 	bl	8005aac <velotrace_solve>
 8004d68:	eef0 7a40 	vmov.f32	s15, s0
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <tim10_update_values+0x2c>)
 8004d6e:	edc3 7a00 	vstr	s15, [r3]
	tim10_right = tim10_left;
 8004d72:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <tim10_update_values+0x2c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a03      	ldr	r2, [pc, #12]	; (8004d84 <tim10_update_values+0x30>)
 8004d78:	6013      	str	r3, [r2, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20017fd8 	.word	0x20017fd8
 8004d84:	20017fe4 	.word	0x20017fe4

08004d88 <tim10_read_left>:

float tim10_read_left()
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
	return tim10_left;
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <tim10_read_left+0x18>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	ee07 3a90 	vmov	s15, r3
}
 8004d94:	eeb0 0a67 	vmov.f32	s0, s15
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	20017fd8 	.word	0x20017fd8

08004da4 <tim10_read_right>:

float tim10_read_right()
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
	return tim10_right;
 8004da8:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <tim10_read_right+0x18>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	ee07 3a90 	vmov	s15, r3
}
 8004db0:	eeb0 0a67 	vmov.f32	s0, s15
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	20017fe4 	.word	0x20017fe4

08004dc0 <tim10_d_print>:

void tim10_d_print()
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
#if D_TIM10
	// printf("tim10_left = %f, tim10_right = %f\r\n", tim10_left, tim10_right);
	printf("__debug_tim10_count  __ = %16ld\r\n__debug_tim10_count_2__ = %16ld\r\n", __debug_tim10_count__, __debug_tim10_count_2__);
#endif
	length_d_print();
 8004dc4:	f7fe f802 	bl	8002dcc <length_d_print>
	course_d_print();
 8004dc8:	f7fd f974 	bl	80020b4 <course_d_print>
	velotrace_print_values();
 8004dcc:	f000 fedc 	bl	8005b88 <velotrace_print_values>
	section_length_d_print();
 8004dd0:	f7ff f938 	bl	8004044 <section_length_d_print>
	slow_print_default_pid();
 8004dd4:	f7ff fab0 	bl	8004338 <slow_print_default_pid>
}
 8004dd8:	bf00      	nop
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
    switch_init();
 8004de0:	f7fc fca2 	bl	8001728 <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8004de4:	4803      	ldr	r0, [pc, #12]	; (8004df4 <tim11_init+0x18>)
 8004de6:	f004 f991 	bl	800910c <HAL_TIM_Base_Start_IT>
    rotary_init();
 8004dea:	f7fc fb89 	bl	8001500 <rotary_init>
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	200063b8 	.word	0x200063b8

08004df8 <tim11_main>:

void tim11_main()
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
    //! 1ms
    time_update_ms(1);
 8004dfc:	2001      	movs	r0, #1
 8004dfe:	f000 fa65 	bl	80052cc <time_update_ms>
    switch_enter();
 8004e02:	f7fc fce0 	bl	80017c6 <switch_enter>
    rotary_set_value();
 8004e06:	f7fc fb9b 	bl	8001540 <rotary_set_value>
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <tim6_init>:

SideSensorState tim6_markerstate_before;
uint8_t debug_num;

void tim6_init()
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
    motor_init();
 8004e14:	f7fe ff24 	bl	8003c60 <motor_init>
    virtual_marker_init();
 8004e18:	f000 fede 	bl	8005bd8 <virtual_marker_init>
    HAL_TIM_Base_Stop_IT(&htim6);
 8004e1c:	4803      	ldr	r0, [pc, #12]	; (8004e2c <tim6_init+0x1c>)
 8004e1e:	f004 f9e5 	bl	80091ec <HAL_TIM_Base_Stop_IT>
    debug_num = 0;
 8004e22:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <tim6_init+0x20>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20006460 	.word	0x20006460
 8004e30:	20017fe9 	.word	0x20017fe9

08004e34 <tim6_start>:

void tim6_start()
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
#if D_TIM6
    leftmotor = 0;
    rightmotor = 0;
#endif
    virtual_marker_start();
 8004e38:	f000 fed4 	bl	8005be4 <virtual_marker_start>
    fixed_section_start();
 8004e3c:	f7fd fda8 	bl	8002990 <fixed_section_start>
    motor_start();
 8004e40:	f7fe ff16 	bl	8003c70 <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8004e44:	4805      	ldr	r0, [pc, #20]	; (8004e5c <tim6_start+0x28>)
 8004e46:	f004 f961 	bl	800910c <HAL_TIM_Base_Start_IT>
    debug_num += 0b1;
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <tim6_start+0x2c>)
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <tim6_start+0x2c>)
 8004e54:	701a      	strb	r2, [r3, #0]
}
 8004e56:	bf00      	nop
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20006460 	.word	0x20006460
 8004e60:	20017fe9 	.word	0x20017fe9

08004e64 <tim6_stop>:

void tim6_stop()
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
    motor_stop();
 8004e68:	f7fe ff14 	bl	8003c94 <motor_stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 8004e6c:	4807      	ldr	r0, [pc, #28]	; (8004e8c <tim6_stop+0x28>)
 8004e6e:	f004 f9bd 	bl	80091ec <HAL_TIM_Base_Stop_IT>
    course_stop();
 8004e72:	f7fc ff93 	bl	8001d9c <course_stop>
    virtual_marker_stop();
 8004e76:	f000 fec5 	bl	8005c04 <virtual_marker_stop>
    debug_num += 0b10;
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <tim6_stop+0x2c>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	3302      	adds	r3, #2
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	4b03      	ldr	r3, [pc, #12]	; (8004e90 <tim6_stop+0x2c>)
 8004e84:	701a      	strb	r2, [r3, #0]
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20006460 	.word	0x20006460
 8004e90:	20017fe9 	.word	0x20017fe9

08004e94 <tim6_main>:

void tim6_main()
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	ed2d 8b02 	vpush	{d8}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
    #endif
    SideSensorState markerstate;
    SideSensorState markerstate_volatile;
    PlayMode playmode;

    playmode = rotary_read_playmode();
 8004e9e:	f7fc fb43 	bl	8001528 <rotary_read_playmode>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	71fb      	strb	r3, [r7, #7]

    //! コース状態の把握
    //! ここ以降 virtual_marker_read_markerstate() / virtual_marker_read_markerstate_volatile() で読みだせる
    virtual_marker_main();
 8004ea6:	f000 fea5 	bl	8005bf4 <virtual_marker_main>
    //! 格納されるのは直前のマーカの状態であり、区間中はリセットされないことに注意すべし！
    markerstate = virtual_marker_read_markerstate();
 8004eaa:	f000 fec5 	bl	8005c38 <virtual_marker_read_markerstate>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	71bb      	strb	r3, [r7, #6]
    //! 格納されるのは現在マーカを読んだか読んでないか、次に virtual_marker_main() が来た時に変化することに注意
    markerstate_volatile = virtual_marker_read_markerstate_volatile();
 8004eb2:	f000 fecd 	bl	8005c50 <virtual_marker_read_markerstate_volatile>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	717b      	strb	r3, [r7, #5]

    debug_num = 0;
 8004eba:	4b4f      	ldr	r3, [pc, #316]	; (8004ff8 <tim6_main+0x164>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
    debug_num += 0b100;
 8004ec0:	4b4d      	ldr	r3, [pc, #308]	; (8004ff8 <tim6_main+0x164>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	4b4b      	ldr	r3, [pc, #300]	; (8004ff8 <tim6_main+0x164>)
 8004eca:	701a      	strb	r2, [r3, #0]
    if(motor_read_enable() && playmode != motor_free)
 8004ecc:	f7fe ff0a 	bl	8003ce4 <motor_read_enable>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d05e      	beq.n	8004f94 <tim6_main+0x100>
 8004ed6:	79fb      	ldrb	r3, [r7, #7]
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d05b      	beq.n	8004f94 <tim6_main+0x100>
    {
        #if !(TRACER_TUNING || VELOTRACE_TUNING)
        switch(playmode)
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d002      	beq.n	8004ee8 <tim6_main+0x54>
 8004ee2:	2b06      	cmp	r3, #6
 8004ee4:	d01b      	beq.n	8004f1e <tim6_main+0x8a>
 8004ee6:	e035      	b.n	8004f54 <tim6_main+0xc0>
        {
            case tracer_tuning:
                leftmotor   = 0 + tim7_read_left();
 8004ee8:	f000 f9ac 	bl	8005244 <tim7_read_left>
 8004eec:	eeb0 7a40 	vmov.f32	s14, s0
 8004ef0:	eddf 7a42 	vldr	s15, [pc, #264]	; 8004ffc <tim6_main+0x168>
 8004ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef8:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = 0 + tim7_read_right();
 8004efc:	f000 f9b0 	bl	8005260 <tim7_read_right>
 8004f00:	eeb0 7a40 	vmov.f32	s14, s0
 8004f04:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8004ffc <tim6_main+0x168>
 8004f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f0c:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b1000;
 8004f10:	4b39      	ldr	r3, [pc, #228]	; (8004ff8 <tim6_main+0x164>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	3308      	adds	r3, #8
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	4b37      	ldr	r3, [pc, #220]	; (8004ff8 <tim6_main+0x164>)
 8004f1a:	701a      	strb	r2, [r3, #0]
                break;
 8004f1c:	e039      	b.n	8004f92 <tim6_main+0xfe>
            case velotrace_tuning:
                leftmotor   = tim10_read_left() + 0;
 8004f1e:	f7ff ff33 	bl	8004d88 <tim10_read_left>
 8004f22:	eeb0 7a40 	vmov.f32	s14, s0
 8004f26:	eddf 7a35 	vldr	s15, [pc, #212]	; 8004ffc <tim6_main+0x168>
 8004f2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f2e:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + 0;
 8004f32:	f7ff ff37 	bl	8004da4 <tim10_read_right>
 8004f36:	eeb0 7a40 	vmov.f32	s14, s0
 8004f3a:	eddf 7a30 	vldr	s15, [pc, #192]	; 8004ffc <tim6_main+0x168>
 8004f3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f42:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b10000;
 8004f46:	4b2c      	ldr	r3, [pc, #176]	; (8004ff8 <tim6_main+0x164>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	3310      	adds	r3, #16
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	4b2a      	ldr	r3, [pc, #168]	; (8004ff8 <tim6_main+0x164>)
 8004f50:	701a      	strb	r2, [r3, #0]
                break;
 8004f52:	e01e      	b.n	8004f92 <tim6_main+0xfe>
            default:
                leftmotor   = tim10_read_left() + tim7_read_left();
 8004f54:	f7ff ff18 	bl	8004d88 <tim10_read_left>
 8004f58:	eeb0 8a40 	vmov.f32	s16, s0
 8004f5c:	f000 f972 	bl	8005244 <tim7_read_left>
 8004f60:	eef0 7a40 	vmov.f32	s15, s0
 8004f64:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004f68:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + tim7_read_right();
 8004f6c:	f7ff ff1a 	bl	8004da4 <tim10_read_right>
 8004f70:	eeb0 8a40 	vmov.f32	s16, s0
 8004f74:	f000 f974 	bl	8005260 <tim7_read_right>
 8004f78:	eef0 7a40 	vmov.f32	s15, s0
 8004f7c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004f80:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b100000;
 8004f84:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <tim6_main+0x164>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	3320      	adds	r3, #32
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <tim6_main+0x164>)
 8004f8e:	701a      	strb	r2, [r3, #0]
                break;
 8004f90:	bf00      	nop
        #if VELOTRACE_TUNING && TRACER_TUNING
        leftmotor  =  tim10_read_left() +  tim7_read_left();
        rightmotor = tim10_read_right() + tim7_read_right();
        #endif
		#endif	/* !(TRACER_TUNING || VELOTRACE_TUNING) */
    }
 8004f92:	e00b      	b.n	8004fac <tim6_main+0x118>
    else
    {
        leftmotor = 0;
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]
        rightmotor = 0;
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	60bb      	str	r3, [r7, #8]
        debug_num += 0b1000000;
 8004fa0:	4b15      	ldr	r3, [pc, #84]	; (8004ff8 <tim6_main+0x164>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	3340      	adds	r3, #64	; 0x40
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <tim6_main+0x164>)
 8004faa:	701a      	strb	r2, [r3, #0]
            }
        }
    }
#else
    //! 距離が COURSE_SAMPLING_LENGTH になっていたら course_state_function() を実行する関数
    fixed_section_main();
 8004fac:	f7fd fd00 	bl	80029b0 <fixed_section_main>
#endif

    switch(markerstate)
 8004fb0:	79bb      	ldrb	r3, [r7, #6]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d10a      	bne.n	8004fcc <tim6_main+0x138>
    {
        case stop:
            switch_reset_enter();
 8004fb6:	f7fc fbab 	bl	8001710 <switch_reset_enter>
            tim6_stop();
 8004fba:	f7ff ff53 	bl	8004e64 <tim6_stop>
            motor_set(0, 0);
 8004fbe:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004ffc <tim6_main+0x168>
 8004fc2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8004ffc <tim6_main+0x168>
 8004fc6:	f7fe fe99 	bl	8003cfc <motor_set>
            break;
 8004fca:	e00c      	b.n	8004fe6 <tim6_main+0x152>
        default:
            debug_num += 0b10000000;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <tim6_main+0x164>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	3b80      	subs	r3, #128	; 0x80
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <tim6_main+0x164>)
 8004fd6:	701a      	strb	r2, [r3, #0]
            motor_set(leftmotor, rightmotor);
 8004fd8:	edd7 0a02 	vldr	s1, [r7, #8]
 8004fdc:	ed97 0a03 	vldr	s0, [r7, #12]
 8004fe0:	f7fe fe8c 	bl	8003cfc <motor_set>
            break;
 8004fe4:	bf00      	nop
    }

    tim6_markerstate_before = markerstate;
 8004fe6:	4a06      	ldr	r2, [pc, #24]	; (8005000 <tim6_main+0x16c>)
 8004fe8:	79bb      	ldrb	r3, [r7, #6]
 8004fea:	7013      	strb	r3, [r2, #0]
}
 8004fec:	bf00      	nop
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	ecbd 8b02 	vpop	{d8}
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20017fe9 	.word	0x20017fe9
 8004ffc:	00000000 	.word	0x00000000
 8005000:	20017fe8 	.word	0x20017fe8

08005004 <tim6_d_print>:

void tim6_d_print()
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
    printf("tim6.c > debug_num = ");
    print_bin(debug_num);
    printf("\r\n");
    printf("tim6.c > tim6_d_print() > motor_enable = %1d, leftmotor = %5.3f, rightmotor = %5.3f\r\n", motor_read_enable(), leftmotor, rightmotor); 
    #endif
    virtual_marker_d_print();
 8005008:	f000 fe2e 	bl	8005c68 <virtual_marker_d_print>
}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}

08005010 <tim7_init>:
#if D_TIM7
unsigned char i_count, i_start;
#endif

void tim7_init()
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
    /* init */
    #if D_TIM7
    printf("tim7.c > tim7_init() > ");
    #endif
    analog_init();
 8005014:	f7fc fd48 	bl	8001aa8 <analog_init>
    tracer_init(TIM7_TIME_MS);
 8005018:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800501c:	f000 f99a 	bl	8005354 <tracer_init>
    HAL_TIM_Base_Stop_IT(&htim7);
 8005020:	4802      	ldr	r0, [pc, #8]	; (800502c <tim7_init+0x1c>)
 8005022:	f004 f8e3 	bl	80091ec <HAL_TIM_Base_Stop_IT>
}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	2000657c 	.word	0x2000657c

08005030 <tim7_start>:

void tim7_start()
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
    /* start */
    #if D_TIM7
    printf("tim7.c > tim7_start() > ");
    #endif
    tim7_set_emergency(0);
 8005034:	2000      	movs	r0, #0
 8005036:	f000 f8f5 	bl	8005224 <tim7_set_emergency>
    tim7_left = 0;
 800503a:	4b0c      	ldr	r3, [pc, #48]	; (800506c <tim7_start+0x3c>)
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
    tim7_right = 0;
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <tim7_start+0x40>)
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	601a      	str	r2, [r3, #0]
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 800504a:	490a      	ldr	r1, [pc, #40]	; (8005074 <tim7_start+0x44>)
 800504c:	480a      	ldr	r0, [pc, #40]	; (8005078 <tim7_start+0x48>)
 800504e:	f7fc fc95 	bl	800197c <analog_set_from_flash>
    analog_set_analogmode(analogmode_short);
 8005052:	200c      	movs	r0, #12
 8005054:	f7fc fccc 	bl	80019f0 <analog_set_analogmode>

    analog_start();
 8005058:	f7fc fd38 	bl	8001acc <analog_start>
    tracer_start();
 800505c:	f000 f996 	bl	800538c <tracer_start>
    HAL_TIM_Base_Start_IT(&htim7);
 8005060:	4806      	ldr	r0, [pc, #24]	; (800507c <tim7_start+0x4c>)
 8005062:	f004 f853 	bl	800910c <HAL_TIM_Base_Start_IT>
}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20017ff4 	.word	0x20017ff4
 8005070:	20017fec 	.word	0x20017fec
 8005074:	200065f6 	.word	0x200065f6
 8005078:	200065d6 	.word	0x200065d6
 800507c:	2000657c 	.word	0x2000657c

08005080 <tim7_stop>:

void tim7_stop()
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
    /* stop */
    #if D_TIM7
    printf("tim7.c > tim7_stop() > ");
    #endif
    HAL_TIM_Base_Stop_IT(&htim7);
 8005084:	4804      	ldr	r0, [pc, #16]	; (8005098 <tim7_stop+0x18>)
 8005086:	f004 f8b1 	bl	80091ec <HAL_TIM_Base_Stop_IT>
    tracer_stop();
 800508a:	f000 f9c7 	bl	800541c <tracer_stop>
    analog_stop();
 800508e:	f7fc fd23 	bl	8001ad8 <analog_stop>
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	2000657c 	.word	0x2000657c

0800509c <tim7_main>:

void tim7_main()
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
    /* main */
    int direction;

    direction = tim7_read_direction();
 80050a2:	f000 f819 	bl	80050d8 <tim7_read_direction>
 80050a6:	6078      	str	r0, [r7, #4]
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("direction = %5d\r\n", direction);
    #endif

    tim7_left   =   tracer_solve(direction);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fad1 	bl	8005650 <tracer_solve>
 80050ae:	eef0 7a40 	vmov.f32	s15, s0
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <tim7_main+0x34>)
 80050b4:	edc3 7a00 	vstr	s15, [r3]
    tim7_right  = - tim7_left;
 80050b8:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <tim7_main+0x34>)
 80050ba:	edd3 7a00 	vldr	s15, [r3]
 80050be:	eef1 7a67 	vneg.f32	s15, s15
 80050c2:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <tim7_main+0x38>)
 80050c4:	edc3 7a00 	vstr	s15, [r3]

    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("tim7_left = %7.2f, tim7_right = %7.2f\r\n", tim7_left, tim7_right);
    #endif
}
 80050c8:	bf00      	nop
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20017ff4 	.word	0x20017ff4
 80050d4:	20017fec 	.word	0x20017fec

080050d8 <tim7_read_direction>:

/* this method is private */
int tim7_read_direction()
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
    uint16_t short_middle;
	#if !D_TIM7
    unsigned char i_count, i_start;
	#endif

    analogl = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	81fb      	strh	r3, [r7, #14]
    analogr = 0;
 80050e2:	2300      	movs	r3, #0
 80050e4:	81bb      	strh	r3, [r7, #12]

    switch(analog_read_analogmode())
 80050e6:	f7fc fc93 	bl	8001a10 <analog_read_analogmode>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b10      	cmp	r3, #16
 80050ee:	d834      	bhi.n	800515a <tim7_read_direction+0x82>
 80050f0:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <tim7_read_direction+0x20>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	0800515b 	.word	0x0800515b
 80050fc:	0800515b 	.word	0x0800515b
 8005100:	0800515b 	.word	0x0800515b
 8005104:	0800515b 	.word	0x0800515b
 8005108:	08005147 	.word	0x08005147
 800510c:	0800515b 	.word	0x0800515b
 8005110:	0800515b 	.word	0x0800515b
 8005114:	0800515b 	.word	0x0800515b
 8005118:	0800515b 	.word	0x0800515b
 800511c:	0800515b 	.word	0x0800515b
 8005120:	0800515b 	.word	0x0800515b
 8005124:	0800515b 	.word	0x0800515b
 8005128:	0800513d 	.word	0x0800513d
 800512c:	0800515b 	.word	0x0800515b
 8005130:	0800515b 	.word	0x0800515b
 8005134:	0800515b 	.word	0x0800515b
 8005138:	08005151 	.word	0x08005151
    {
        case analogmode_calibrating:
            break;
        case analogmode_short:
            i_count = 12;
 800513c:	230c      	movs	r3, #12
 800513e:	727b      	strb	r3, [r7, #9]
            i_start = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	723b      	strb	r3, [r7, #8]
            break;
 8005144:	e00a      	b.n	800515c <tim7_read_direction+0x84>
        case analogmode_long:
            i_count = 4;
 8005146:	2304      	movs	r3, #4
 8005148:	727b      	strb	r3, [r7, #9]
            i_start = 12;
 800514a:	230c      	movs	r3, #12
 800514c:	723b      	strb	r3, [r7, #8]
            break;
 800514e:	e005      	b.n	800515c <tim7_read_direction+0x84>
        case analogmode_all:
            i_count = 16;
 8005150:	2310      	movs	r3, #16
 8005152:	727b      	strb	r3, [r7, #9]
            i_start = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	723b      	strb	r3, [r7, #8]
            break;
 8005158:	e000      	b.n	800515c <tim7_read_direction+0x84>
        default:
            /* unknown analogmode ... x_x */
            break;
 800515a:	bf00      	nop
    }

    for(unsigned char i = i_start; i < (i_count + i_start); i++)
 800515c:	7a3b      	ldrb	r3, [r7, #8]
 800515e:	71fb      	strb	r3, [r7, #7]
 8005160:	e022      	b.n	80051a8 <tim7_read_direction+0xd0>
    {
        #if D_TIM7_WHILE
        printf("tim7.c > tim7_main() > for() > ");
        printf("i = %2d", i);
        #endif
        if(i % 2 == 0)
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <tim7_read_direction+0xaa>
        {
            #if D_TIM7_WHILE
            printf("  odd\r\n");
            #endif
            analogl += analog_sensor_get(i);
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fc fcd9 	bl	8001b28 <analog_sensor_get>
 8005176:	4603      	mov	r3, r0
 8005178:	461a      	mov	r2, r3
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	4413      	add	r3, r2
 800517e:	81fb      	strh	r3, [r7, #14]
 8005180:	e008      	b.n	8005194 <tim7_read_direction+0xbc>
        else
        {
            #if D_TIM7_WHILE
            printf(" even\r\n");
            #endif
            analogr += analog_sensor_get(i);
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	4618      	mov	r0, r3
 8005186:	f7fc fccf 	bl	8001b28 <analog_sensor_get>
 800518a:	4603      	mov	r3, r0
 800518c:	461a      	mov	r2, r3
 800518e:	89bb      	ldrh	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	81bb      	strh	r3, [r7, #12]
        }
        if(i < SHORT_MIDDLE_SENSOR)
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	2b05      	cmp	r3, #5
 8005198:	d803      	bhi.n	80051a2 <tim7_read_direction+0xca>
        {
            short_middle = analogl + analogr;
 800519a:	89fa      	ldrh	r2, [r7, #14]
 800519c:	89bb      	ldrh	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	817b      	strh	r3, [r7, #10]
    for(unsigned char i = i_start; i < (i_count + i_start); i++)
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	3301      	adds	r3, #1
 80051a6:	71fb      	strb	r3, [r7, #7]
 80051a8:	79fa      	ldrb	r2, [r7, #7]
 80051aa:	7a79      	ldrb	r1, [r7, #9]
 80051ac:	7a3b      	ldrb	r3, [r7, #8]
 80051ae:	440b      	add	r3, r1
 80051b0:	429a      	cmp	r2, r3
 80051b2:	dbd6      	blt.n	8005162 <tim7_read_direction+0x8a>
    {
    	// tim7_main_emergency();
    }

    //if(short_middle <= CLOSS_IGNORE_THRESHOLD * SHORT_MIDDLE_SENSOR && virtual_marker_read_markerstate() == cross)
    if(short_middle <= CLOSS_IGNORE_THRESHOLD * SHORT_MIDDLE_SENSOR)
 80051b4:	897b      	ldrh	r3, [r7, #10]
 80051b6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d824      	bhi.n	8005208 <tim7_read_direction+0x130>
    {
        /* 交差判定 */
        analogl = 3 * (analog_sensor_get(12) + analog_sensor_get(14));
 80051be:	200c      	movs	r0, #12
 80051c0:	f7fc fcb2 	bl	8001b28 <analog_sensor_get>
 80051c4:	4603      	mov	r3, r0
 80051c6:	461c      	mov	r4, r3
 80051c8:	200e      	movs	r0, #14
 80051ca:	f7fc fcad 	bl	8001b28 <analog_sensor_get>
 80051ce:	4603      	mov	r3, r0
 80051d0:	4423      	add	r3, r4
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	461a      	mov	r2, r3
 80051d6:	0052      	lsls	r2, r2, #1
 80051d8:	4413      	add	r3, r2
 80051da:	81fb      	strh	r3, [r7, #14]
        analogr = 3 * (analog_sensor_get(13) + analog_sensor_get(15));
 80051dc:	200d      	movs	r0, #13
 80051de:	f7fc fca3 	bl	8001b28 <analog_sensor_get>
 80051e2:	4603      	mov	r3, r0
 80051e4:	461c      	mov	r4, r3
 80051e6:	200f      	movs	r0, #15
 80051e8:	f7fc fc9e 	bl	8001b28 <analog_sensor_get>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4423      	add	r3, r4
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	0052      	lsls	r2, r2, #1
 80051f6:	4413      	add	r3, r2
 80051f8:	81bb      	strh	r3, [r7, #12]
        /* 長い方のゲイン値にする */
        tim7_tracer_set_gain_long();
 80051fa:	f000 f84d 	bl	8005298 <tim7_tracer_set_gain_long>
        led_write_led(0b11, 0b10);
 80051fe:	2102      	movs	r1, #2
 8005200:	2003      	movs	r0, #3
 8005202:	f7fc f957 	bl	80014b4 <led_write_led>
 8005206:	e005      	b.n	8005214 <tim7_read_direction+0x13c>
    }
    else
    {
        /* その他判定 */
        /* 短い方のゲイン値にする（戻すって言った方が正しいかも） */
        tim7_tracer_set_gain_short();
 8005208:	f000 f840 	bl	800528c <tim7_tracer_set_gain_short>
        led_write_led(0b11, 0b01);
 800520c:	2101      	movs	r1, #1
 800520e:	2003      	movs	r0, #3
 8005210:	f7fc f950 	bl	80014b4 <led_write_led>
#if D_TIM7_WHILE
	printf("tim7.c > tim7_main() > ");
	printf("analogl = %5d, analogr = %5d\r\n", analogl, analogr);
#endif

    return analogl - analogr;
 8005214:	89fa      	ldrh	r2, [r7, #14]
 8005216:	89bb      	ldrh	r3, [r7, #12]
 8005218:	1ad3      	subs	r3, r2, r3
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	bd90      	pop	{r4, r7, pc}
 8005222:	bf00      	nop

08005224 <tim7_set_emergency>:
{
	switch_reset_enter();
}

void tim7_set_emergency(char emergency_)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	71fb      	strb	r3, [r7, #7]
    tim7_emergency = emergency_;
 800522e:	4a04      	ldr	r2, [pc, #16]	; (8005240 <tim7_set_emergency+0x1c>)
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	7013      	strb	r3, [r2, #0]
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	20017ff0 	.word	0x20017ff0

08005244 <tim7_read_left>:
{
    return tim7_emergency;
}

float tim7_read_left()
{
 8005244:	b480      	push	{r7}
 8005246:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c >  tim7_read_left() >  tim7_left = %7.2f\r\n", tim7_left);
    #endif
    return tim7_left;
 8005248:	4b04      	ldr	r3, [pc, #16]	; (800525c <tim7_read_left+0x18>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	ee07 3a90 	vmov	s15, r3
}
 8005250:	eeb0 0a67 	vmov.f32	s0, s15
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	20017ff4 	.word	0x20017ff4

08005260 <tim7_read_right>:

float tim7_read_right()
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_read_right() > tim7_right = %7.2f\r\n", tim7_right);
    #endif
    return tim7_right;
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <tim7_read_right+0x18>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	ee07 3a90 	vmov	s15, r3
}
 800526c:	eeb0 0a67 	vmov.f32	s0, s15
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr
 8005278:	20017fec 	.word	0x20017fec

0800527c <tim7_d_print>:

void tim7_d_print()
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
#if D_TIM7
    printf("tim7_left = %f, tim7_right = %f\r\n", tim7_left, tim7_right);
#endif
    analog_d_print();
 8005280:	f7fc fb1a 	bl	80018b8 <analog_d_print>
    tracer_print_values();
 8005284:	f000 fa5c 	bl	8005740 <tracer_print_values>
}
 8005288:	bf00      	nop
 800528a:	bd80      	pop	{r7, pc}

0800528c <tim7_tracer_set_gain_short>:

void tim7_tracer_set_gain_short()
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
    tracer_set_gain_default();
 8005290:	f000 f9a6 	bl	80055e0 <tracer_set_gain_default>
}
 8005294:	bf00      	nop
 8005296:	bd80      	pop	{r7, pc}

08005298 <tim7_tracer_set_gain_long>:

void tim7_tracer_set_gain_long()
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
    float kp, ki, kd;
    kp = TIM7_LONG_KP;
 800529e:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <tim7_tracer_set_gain_long+0x2c>)
 80052a0:	60fb      	str	r3, [r7, #12]
    ki = TIM7_LONG_KI;
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	60bb      	str	r3, [r7, #8]
    kd = TIM7_LONG_KD;
 80052a8:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <tim7_tracer_set_gain_long+0x30>)
 80052aa:	607b      	str	r3, [r7, #4]
    tracer_set_gain_direct(kp, ki, kd);
 80052ac:	ed97 1a01 	vldr	s2, [r7, #4]
 80052b0:	edd7 0a02 	vldr	s1, [r7, #8]
 80052b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80052b8:	f000 f8ec 	bl	8005494 <tracer_set_gain_direct>
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	3e4ccccd 	.word	0x3e4ccccd
 80052c8:	3b9374bc 	.word	0x3b9374bc

080052cc <time_update_ms>:
 * @fn time_update_ms()
 * @brief 1 ms 周期で呼び出される割り込み内で実行する必要がある
 * 
 */
void time_update_ms(unsigned short int step)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	80fb      	strh	r3, [r7, #6]
    /**
     * @brief time_ms が 1 時間（ 3600,000 ミリ秒 ）を超えた時にゼロに戻す
     * 
     */
    time_countup(&time_ms, step, 6300000);
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	4a08      	ldr	r2, [pc, #32]	; (80052fc <time_update_ms+0x30>)
 80052da:	4619      	mov	r1, r3
 80052dc:	4808      	ldr	r0, [pc, #32]	; (8005300 <time_update_ms+0x34>)
 80052de:	f000 f813 	bl	8005308 <time_countup>
    time_origin = time_ms * 1000;
 80052e2:	4b07      	ldr	r3, [pc, #28]	; (8005300 <time_update_ms+0x34>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	4a05      	ldr	r2, [pc, #20]	; (8005304 <time_update_ms+0x38>)
 80052f0:	6013      	str	r3, [r2, #0]
}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	00602160 	.word	0x00602160
 8005300:	20018000 	.word	0x20018000
 8005304:	20017ffc 	.word	0x20017ffc

08005308 <time_countup>:
    time_ms = 0;
    time_origin = 0;
}

void time_countup(unsigned int *_time, unsigned short int step, unsigned int _time_max)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	460b      	mov	r3, r1
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	817b      	strh	r3, [r7, #10]
    if(*_time + step >= _time_max)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	897b      	ldrh	r3, [r7, #10]
 800531c:	4413      	add	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d809      	bhi.n	8005338 <time_countup+0x30>
    {
        *_time = 0;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
        time_reset_count = time_reset_count + 1;
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <time_countup+0x48>)
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	4b07      	ldr	r3, [pc, #28]	; (8005350 <time_countup+0x48>)
 8005334:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        *_time = *_time + step;
    }
}
 8005336:	e005      	b.n	8005344 <time_countup+0x3c>
        *_time = *_time + step;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	897b      	ldrh	r3, [r7, #10]
 800533e:	441a      	add	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	20017ff8 	.word	0x20017ff8

08005354 <tracer_init>:
PID tracer_pid;
PID tracer_default;
uint8_t tracer_started;

void tracer_init(float samplingtime_ms)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_started = 0;
 800535e:	4b09      	ldr	r3, [pc, #36]	; (8005384 <tracer_init+0x30>)
 8005360:	2200      	movs	r2, #0
 8005362:	701a      	strb	r2, [r3, #0]
    tracer_sampling_time_ms = samplingtime_ms;
 8005364:	edd7 7a01 	vldr	s15, [r7, #4]
 8005368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800536c:	ee17 3a90 	vmov	r3, s15
 8005370:	b29a      	uxth	r2, r3
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <tracer_init+0x34>)
 8005374:	801a      	strh	r2, [r3, #0]
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20018014 	.word	0x20018014
 8005388:	20018020 	.word	0x20018020

0800538c <tracer_start>:

void tracer_start()
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
    if(tracer_started <= 0)
 8005392:	4b1f      	ldr	r3, [pc, #124]	; (8005410 <tracer_start+0x84>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d133      	bne.n	8005402 <tracer_start+0x76>
    {
        float kp, ki, kd;
        tracer_s_error = 0;
 800539a:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <tracer_start+0x88>)
 800539c:	f04f 0200 	mov.w	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
        tracer_before_error = 0;
 80053a2:	4b1d      	ldr	r3, [pc, #116]	; (8005418 <tracer_start+0x8c>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]
        kp = tracer_calc_gain_kp(rotary_read_value());
 80053a8:	f7fc f8d6 	bl	8001558 <rotary_read_value>
 80053ac:	4603      	mov	r3, r0
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 f8ad 	bl	8005510 <tracer_calc_gain_kp>
 80053b6:	ed87 0a03 	vstr	s0, [r7, #12]
        ki = tracer_calc_gain_ki(rotary_read_value());
 80053ba:	f7fc f8cd 	bl	8001558 <rotary_read_value>
 80053be:	4603      	mov	r3, r0
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 f8c6 	bl	8005554 <tracer_calc_gain_ki>
 80053c8:	ed87 0a02 	vstr	s0, [r7, #8]
        kd = tracer_calc_gain_kd(rotary_read_value());
 80053cc:	f7fc f8c4 	bl	8001558 <rotary_read_value>
 80053d0:	4603      	mov	r3, r0
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 f8df 	bl	8005598 <tracer_calc_gain_kd>
 80053da:	ed87 0a01 	vstr	s0, [r7, #4]
        tracer_set_default_now_gain(kp, ki, kd);
 80053de:	ed97 1a01 	vldr	s2, [r7, #4]
 80053e2:	edd7 0a02 	vldr	s1, [r7, #8]
 80053e6:	ed97 0a03 	vldr	s0, [r7, #12]
 80053ea:	f000 f909 	bl	8005600 <tracer_set_default_now_gain>
        tracer_set_target_zero();
 80053ee:	f000 f86b 	bl	80054c8 <tracer_set_target_zero>
        tracer_set_gain_direct(kp, ki, kd);
 80053f2:	ed97 1a01 	vldr	s2, [r7, #4]
 80053f6:	edd7 0a02 	vldr	s1, [r7, #8]
 80053fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80053fe:	f000 f849 	bl	8005494 <tracer_set_gain_direct>
    #if D_TRACER
        printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", kp, ki, kd);
        print_pid(&tracer_pid);
    #endif
    }
    tracer_started = 1;
 8005402:	4b03      	ldr	r3, [pc, #12]	; (8005410 <tracer_start+0x84>)
 8005404:	2201      	movs	r2, #1
 8005406:	701a      	strb	r2, [r3, #0]
}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20018014 	.word	0x20018014
 8005414:	2001801c 	.word	0x2001801c
 8005418:	20018018 	.word	0x20018018

0800541c <tracer_stop>:

void tracer_stop()
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
    tracer_set_gain_zero();
 8005420:	f000 f860 	bl	80054e4 <tracer_set_gain_zero>
    tracer_started = 0;
 8005424:	4b02      	ldr	r3, [pc, #8]	; (8005430 <tracer_stop+0x14>)
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
}
 800542a:	bf00      	nop
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20018014 	.word	0x20018014

08005434 <tracer_set_gain_kp_direct>:
{
    tracer_set_gain_kd_direct(tracer_calc_gain_kd(i));
}

void tracer_set_gain_kp_direct(float kp)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.kp = kp;
 800543e:	4a04      	ldr	r2, [pc, #16]	; (8005450 <tracer_set_gain_kp_direct+0x1c>)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6053      	str	r3, [r2, #4]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	20018004 	.word	0x20018004

08005454 <tracer_set_gain_ki_direct>:

void tracer_set_gain_ki_direct(float ki)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.ki = ki;
 800545e:	4a04      	ldr	r2, [pc, #16]	; (8005470 <tracer_set_gain_ki_direct+0x1c>)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6093      	str	r3, [r2, #8]
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20018004 	.word	0x20018004

08005474 <tracer_set_gain_kd_direct>:

void tracer_set_gain_kd_direct(float kd)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.kd = kd;
 800547e:	4a04      	ldr	r2, [pc, #16]	; (8005490 <tracer_set_gain_kd_direct+0x1c>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	60d3      	str	r3, [r2, #12]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20018004 	.word	0x20018004

08005494 <tracer_set_gain_direct>:

void tracer_set_gain_direct(float kp, float ki, float kd)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	ed87 0a03 	vstr	s0, [r7, #12]
 800549e:	edc7 0a02 	vstr	s1, [r7, #8]
 80054a2:	ed87 1a01 	vstr	s2, [r7, #4]
    tracer_set_gain_kp_direct(kp);
 80054a6:	ed97 0a03 	vldr	s0, [r7, #12]
 80054aa:	f7ff ffc3 	bl	8005434 <tracer_set_gain_kp_direct>
    tracer_set_gain_ki_direct(ki);
 80054ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80054b2:	f7ff ffcf 	bl	8005454 <tracer_set_gain_ki_direct>
    tracer_set_gain_kd_direct(kd);
 80054b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80054ba:	f7ff ffdb 	bl	8005474 <tracer_set_gain_kd_direct>
}
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <tracer_set_target_zero>:

/* kp ki kd set zero */
void tracer_set_target_zero()
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
    tracer_pid.target = 0;
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <tracer_set_target_zero+0x18>)
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20018004 	.word	0x20018004

080054e4 <tracer_set_gain_zero>:

void tracer_set_gain_zero()
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
    tracer_pid.kp = 0;
 80054e8:	4b08      	ldr	r3, [pc, #32]	; (800550c <tracer_set_gain_zero+0x28>)
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	605a      	str	r2, [r3, #4]
    tracer_pid.ki = 0;
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <tracer_set_gain_zero+0x28>)
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	609a      	str	r2, [r3, #8]
    tracer_pid.kd = 0;
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <tracer_set_gain_zero+0x28>)
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	60da      	str	r2, [r3, #12]
}
 8005500:	bf00      	nop
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20018004 	.word	0x20018004

08005510 <tracer_calc_gain_kp>:

/* calclate pid values from rotary value */
float tracer_calc_gain_kp(unsigned short int i)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KP_MAX - TRACER_KP_MIN) / (float) (TRACER_STEP_SIZE - 1);
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	f1c3 030f 	rsb	r3, r3, #15
 8005520:	ee07 3a90 	vmov	s15, r3
 8005524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005528:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005550 <tracer_calc_gain_kp+0x40>
 800552c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005530:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005534:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800553c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005540:	eeb0 0a67 	vmov.f32	s0, s15
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	00000000 	.word	0x00000000

08005554 <tracer_calc_gain_ki>:

float tracer_calc_gain_ki(unsigned short int i)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	4603      	mov	r3, r0
 800555c:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KI_MAX - TRACER_KI_MIN) / (float) (TRACER_STEP_SIZE - 1);
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	f1c3 030f 	rsb	r3, r3, #15
 8005564:	ee07 3a90 	vmov	s15, r3
 8005568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800556c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005594 <tracer_calc_gain_ki+0x40>
 8005570:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005574:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800557c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005594 <tracer_calc_gain_ki+0x40>
 8005580:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005584:	eeb0 0a67 	vmov.f32	s0, s15
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	00000000 	.word	0x00000000

08005598 <tracer_calc_gain_kd>:

float tracer_calc_gain_kd(unsigned short int i)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	4603      	mov	r3, r0
 80055a0:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KD_MAX - TRACER_KD_MIN) / (float) (TRACER_STEP_SIZE - 1);
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	f1c3 030f 	rsb	r3, r3, #15
 80055a8:	ee07 3a90 	vmov	s15, r3
 80055ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80055d8 <tracer_calc_gain_kd+0x40>
 80055b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055b8:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80055bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055c0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80055dc <tracer_calc_gain_kd+0x44>
 80055c4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80055c8:	eeb0 0a67 	vmov.f32	s0, s15
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	00000000 	.word	0x00000000
 80055dc:	3c656042 	.word	0x3c656042

080055e0 <tracer_set_gain_default>:

/* set default */
void tracer_set_gain_default()
{
 80055e0:	b490      	push	{r4, r7}
 80055e2:	af00      	add	r7, sp, #0
    tracer_pid = tracer_default;
 80055e4:	4a04      	ldr	r2, [pc, #16]	; (80055f8 <tracer_set_gain_default+0x18>)
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <tracer_set_gain_default+0x1c>)
 80055e8:	4614      	mov	r4, r2
 80055ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80055f0:	bf00      	nop
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc90      	pop	{r4, r7}
 80055f6:	4770      	bx	lr
 80055f8:	20018004 	.word	0x20018004
 80055fc:	20018024 	.word	0x20018024

08005600 <tracer_set_default_now_gain>:

void tracer_set_default_now_gain(float kp, float ki, float kd)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	ed87 0a03 	vstr	s0, [r7, #12]
 800560a:	edc7 0a02 	vstr	s1, [r7, #8]
 800560e:	ed87 1a01 	vstr	s2, [r7, #4]
    tracer_default.target = 0;
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <tracer_set_default_now_gain+0x38>)
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
    tracer_default.kp = kp;
 800561a:	4a07      	ldr	r2, [pc, #28]	; (8005638 <tracer_set_default_now_gain+0x38>)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6053      	str	r3, [r2, #4]
    tracer_default.ki = ki;
 8005620:	4a05      	ldr	r2, [pc, #20]	; (8005638 <tracer_set_default_now_gain+0x38>)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	6093      	str	r3, [r2, #8]
    tracer_default.kd = kd;
 8005626:	4a04      	ldr	r2, [pc, #16]	; (8005638 <tracer_set_default_now_gain+0x38>)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60d3      	str	r3, [r2, #12]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	20018024 	.word	0x20018024

0800563c <tracer_read_values>:
    tracer_pid.ki = _pid->ki;
    tracer_pid.kd = _pid->kd;
}

PID* tracer_read_values()
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
    return &tracer_pid;
 8005640:	4b02      	ldr	r3, [pc, #8]	; (800564c <tracer_read_values+0x10>)
}
 8005642:	4618      	mov	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	20018004 	.word	0x20018004

08005650 <tracer_solve>:

float tracer_solve(int reference_)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("reference_ = %5d\r\n", reference_);
    #endif

    error = reference_ - tracer_pid.target;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005662:	4b32      	ldr	r3, [pc, #200]	; (800572c <tracer_solve+0xdc>)
 8005664:	edd3 7a00 	vldr	s15, [r3]
 8005668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800566c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005670:	ee17 3a90 	vmov	r3, s15
 8005674:	617b      	str	r3, [r7, #20]

    d_error = (error - tracer_before_error) / (float) (tracer_sampling_time_ms / (float) 1000);
 8005676:	4b2e      	ldr	r3, [pc, #184]	; (8005730 <tracer_solve+0xe0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005686:	4b2b      	ldr	r3, [pc, #172]	; (8005734 <tracer_solve+0xe4>)
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005692:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8005738 <tracer_solve+0xe8>
 8005696:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800569a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800569e:	edc7 7a04 	vstr	s15, [r7, #16]
    tracer_s_error += error * (float) (tracer_sampling_time_ms / (float) 1000);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056ac:	4b21      	ldr	r3, [pc, #132]	; (8005734 <tracer_solve+0xe4>)
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80056b8:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8005738 <tracer_solve+0xe8>
 80056bc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80056c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056c4:	4b1d      	ldr	r3, [pc, #116]	; (800573c <tracer_solve+0xec>)
 80056c6:	edd3 7a00 	vldr	s15, [r3]
 80056ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ce:	4b1b      	ldr	r3, [pc, #108]	; (800573c <tracer_solve+0xec>)
 80056d0:	edc3 7a00 	vstr	s15, [r3]

    result = tracer_pid.kp * error + tracer_pid.ki * tracer_s_error + tracer_pid.kd * d_error;
 80056d4:	4b15      	ldr	r3, [pc, #84]	; (800572c <tracer_solve+0xdc>)
 80056d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056e8:	4b10      	ldr	r3, [pc, #64]	; (800572c <tracer_solve+0xdc>)
 80056ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <tracer_solve+0xec>)
 80056f0:	edd3 7a00 	vldr	s15, [r3]
 80056f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056fc:	4b0b      	ldr	r3, [pc, #44]	; (800572c <tracer_solve+0xdc>)
 80056fe:	edd3 6a03 	vldr	s13, [r3, #12]
 8005702:	edd7 7a04 	vldr	s15, [r7, #16]
 8005706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800570a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800570e:	edc7 7a03 	vstr	s15, [r7, #12]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("%7.2f = %7.2f * %5d + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, tracer_pid.kp, error, tracer_pid.ki, tracer_s_error, tracer_pid.kd, d_error);
    #endif

    tracer_before_error = error;
 8005712:	4a07      	ldr	r2, [pc, #28]	; (8005730 <tracer_solve+0xe0>)
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	6013      	str	r3, [r2, #0]

    return result;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	ee07 3a90 	vmov	s15, r3
}
 800571e:	eeb0 0a67 	vmov.f32	s0, s15
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	20018004 	.word	0x20018004
 8005730:	20018018 	.word	0x20018018
 8005734:	20018020 	.word	0x20018020
 8005738:	447a0000 	.word	0x447a0000
 800573c:	2001801c 	.word	0x2001801c

08005740 <tracer_print_values>:

void tracer_print_values()
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
#if D_TRACER
    printf("trac > kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
#endif
}
 8005744:	bf00      	nop
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <velotrace_init>:
PID velotrace_pid;
uint8_t velotrace_started;

/* pre setting */
void velotrace_init(uint16_t samplingtime_ms)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	80fb      	strh	r3, [r7, #6]
    velotrace_started = 0;
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <velotrace_init+0x24>)
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
    velotrace_sampling_time_ms = samplingtime_ms;
 8005760:	4a05      	ldr	r2, [pc, #20]	; (8005778 <velotrace_init+0x28>)
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	8013      	strh	r3, [r2, #0]
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	2001803e 	.word	0x2001803e
 8005778:	20018034 	.word	0x20018034

0800577c <velotrace_start>:

void velotrace_start()
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
    if(velotrace_started <= 0)
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <velotrace_start+0x124>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	f040 8082 	bne.w	8005890 <velotrace_start+0x114>
    {
        float target, kp, ki, kd;
        #if D_VELOTRACE
        printf("velotrace_sampling_time_ms = 1, velotrace_s_error = 0, velotrace_before_error = 0\r\n");
        #endif
        velotrace_s_error = 0;
 800578c:	4b45      	ldr	r3, [pc, #276]	; (80058a4 <velotrace_start+0x128>)
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	601a      	str	r2, [r3, #0]
        velotrace_before_error = 0;
 8005794:	4b44      	ldr	r3, [pc, #272]	; (80058a8 <velotrace_start+0x12c>)
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
        velotrace_gain_tuning_time_ms = 0;
 800579c:	4b43      	ldr	r3, [pc, #268]	; (80058ac <velotrace_start+0x130>)
 800579e:	2200      	movs	r2, #0
 80057a0:	801a      	strh	r2, [r3, #0]
        switch(rotary_read_playmode())
 80057a2:	f7fb fec1 	bl	8001528 <rotary_read_playmode>
 80057a6:	4603      	mov	r3, r0
 80057a8:	3b01      	subs	r3, #1
 80057aa:	2b06      	cmp	r3, #6
 80057ac:	d857      	bhi.n	800585e <velotrace_start+0xe2>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <velotrace_start+0x38>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057d1 	.word	0x080057d1
 80057b8:	080057d1 	.word	0x080057d1
 80057bc:	0800585f 	.word	0x0800585f
 80057c0:	0800585f 	.word	0x0800585f
 80057c4:	0800585f 	.word	0x0800585f
 80057c8:	080057e5 	.word	0x080057e5
 80057cc:	08005823 	.word	0x08005823
        {
            case search:
            case accel:
                target = VELOCITY_TARGET_MIN;
 80057d0:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <velotrace_start+0x134>)
 80057d2:	60fb      	str	r3, [r7, #12]
                kp = 1000;
 80057d4:	4b37      	ldr	r3, [pc, #220]	; (80058b4 <velotrace_start+0x138>)
 80057d6:	60bb      	str	r3, [r7, #8]
                ki = 100;
 80057d8:	4b37      	ldr	r3, [pc, #220]	; (80058b8 <velotrace_start+0x13c>)
 80057da:	607b      	str	r3, [r7, #4]
                kd = 0;
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	603b      	str	r3, [r7, #0]
                break;
 80057e2:	e049      	b.n	8005878 <velotrace_start+0xfc>
            case velotrace_tuning:
                target = 0;
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
                kp = velotrace_calc_gain_kp(rotary_read_value());
 80057ea:	f7fb feb5 	bl	8001558 <rotary_read_value>
 80057ee:	4603      	mov	r3, r0
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 f8e6 	bl	80059c4 <velotrace_calc_gain_kp>
 80057f8:	ed87 0a02 	vstr	s0, [r7, #8]
                ki = velotrace_calc_gain_ki(rotary_read_value());
 80057fc:	f7fb feac 	bl	8001558 <rotary_read_value>
 8005800:	4603      	mov	r3, r0
 8005802:	b29b      	uxth	r3, r3
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f901 	bl	8005a0c <velotrace_calc_gain_ki>
 800580a:	ed87 0a01 	vstr	s0, [r7, #4]
                kd = velotrace_calc_gain_kd(rotary_read_value());
 800580e:	f7fb fea3 	bl	8001558 <rotary_read_value>
 8005812:	4603      	mov	r3, r0
 8005814:	b29b      	uxth	r3, r3
 8005816:	4618      	mov	r0, r3
 8005818:	f000 f91c 	bl	8005a54 <velotrace_calc_gain_kd>
 800581c:	ed87 0a00 	vstr	s0, [r7]
                break;
 8005820:	e02a      	b.n	8005878 <velotrace_start+0xfc>
            case velotrace_tuning_2:
                target = VELOCITY_TARGET_MIN;
 8005822:	4b23      	ldr	r3, [pc, #140]	; (80058b0 <velotrace_start+0x134>)
 8005824:	60fb      	str	r3, [r7, #12]
                kp = velotrace_calc_gain_kp(rotary_read_value());
 8005826:	f7fb fe97 	bl	8001558 <rotary_read_value>
 800582a:	4603      	mov	r3, r0
 800582c:	b29b      	uxth	r3, r3
 800582e:	4618      	mov	r0, r3
 8005830:	f000 f8c8 	bl	80059c4 <velotrace_calc_gain_kp>
 8005834:	ed87 0a02 	vstr	s0, [r7, #8]
                ki = velotrace_calc_gain_ki(rotary_read_value());
 8005838:	f7fb fe8e 	bl	8001558 <rotary_read_value>
 800583c:	4603      	mov	r3, r0
 800583e:	b29b      	uxth	r3, r3
 8005840:	4618      	mov	r0, r3
 8005842:	f000 f8e3 	bl	8005a0c <velotrace_calc_gain_ki>
 8005846:	ed87 0a01 	vstr	s0, [r7, #4]
                kd = velotrace_calc_gain_kd(rotary_read_value());
 800584a:	f7fb fe85 	bl	8001558 <rotary_read_value>
 800584e:	4603      	mov	r3, r0
 8005850:	b29b      	uxth	r3, r3
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f8fe 	bl	8005a54 <velotrace_calc_gain_kd>
 8005858:	ed87 0a00 	vstr	s0, [r7]
                break;
 800585c:	e00c      	b.n	8005878 <velotrace_start+0xfc>
            case tracer_tuning:
            default:
                target = 0;
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
                kp = 0;
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	60bb      	str	r3, [r7, #8]
                ki = 0;
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	607b      	str	r3, [r7, #4]
                kd = 0;
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	603b      	str	r3, [r7, #0]
                break;
 8005876:	bf00      	nop
        }
        velotrace_set_target_direct(target);
 8005878:	ed97 0a03 	vldr	s0, [r7, #12]
 800587c:	f000 f82c 	bl	80058d8 <velotrace_set_target_direct>
        velotrace_set_gain_direct(kp, ki, kd);
 8005880:	ed97 1a00 	vldr	s2, [r7]
 8005884:	edd7 0a01 	vldr	s1, [r7, #4]
 8005888:	ed97 0a02 	vldr	s0, [r7, #8]
 800588c:	f000 f864 	bl	8005958 <velotrace_set_gain_direct>
    }
    velotrace_started = 1;
 8005890:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <velotrace_start+0x124>)
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
}
 8005896:	bf00      	nop
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	2001803e 	.word	0x2001803e
 80058a4:	20018040 	.word	0x20018040
 80058a8:	20018038 	.word	0x20018038
 80058ac:	2001803c 	.word	0x2001803c
 80058b0:	3fa00000 	.word	0x3fa00000
 80058b4:	447a0000 	.word	0x447a0000
 80058b8:	42c80000 	.word	0x42c80000

080058bc <velotrace_stop>:

void velotrace_stop()
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
    velotrace_set_target_zero();
 80058c0:	f000 f864 	bl	800598c <velotrace_set_target_zero>
    velotrace_set_gain_zero();
 80058c4:	f000 f86c 	bl	80059a0 <velotrace_set_gain_zero>
    velotrace_started = 0;
 80058c8:	4b02      	ldr	r3, [pc, #8]	; (80058d4 <velotrace_stop+0x18>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
}
 80058ce:	bf00      	nop
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	2001803e 	.word	0x2001803e

080058d8 <velotrace_set_target_direct>:
{
    velotrace_pid.target = velotrace_calc_target(i);
}

void velotrace_set_target_direct(float target)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.target = target;
 80058e2:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <velotrace_set_target_direct+0x1c>)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6013      	str	r3, [r2, #0]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	20018044 	.word	0x20018044

080058f8 <velotrace_set_gain_kp_direct>:
{
    velotrace_set_gain_kd_direct(velotrace_calc_gain_kd(i));
}

void velotrace_set_gain_kp_direct(float kp)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kp = kp;
 8005902:	4a04      	ldr	r2, [pc, #16]	; (8005914 <velotrace_set_gain_kp_direct+0x1c>)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6053      	str	r3, [r2, #4]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	20018044 	.word	0x20018044

08005918 <velotrace_set_gain_ki_direct>:

void velotrace_set_gain_ki_direct(float ki)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.ki = ki;
 8005922:	4a04      	ldr	r2, [pc, #16]	; (8005934 <velotrace_set_gain_ki_direct+0x1c>)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6093      	str	r3, [r2, #8]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	20018044 	.word	0x20018044

08005938 <velotrace_set_gain_kd_direct>:

void velotrace_set_gain_kd_direct(float kd)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kd = kd;
 8005942:	4a04      	ldr	r2, [pc, #16]	; (8005954 <velotrace_set_gain_kd_direct+0x1c>)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60d3      	str	r3, [r2, #12]
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	20018044 	.word	0x20018044

08005958 <velotrace_set_gain_direct>:

void velotrace_set_gain_direct(float kp, float ki, float kd)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005962:	edc7 0a02 	vstr	s1, [r7, #8]
 8005966:	ed87 1a01 	vstr	s2, [r7, #4]
    velotrace_set_gain_kp_direct(kp);
 800596a:	ed97 0a03 	vldr	s0, [r7, #12]
 800596e:	f7ff ffc3 	bl	80058f8 <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(ki);
 8005972:	ed97 0a02 	vldr	s0, [r7, #8]
 8005976:	f7ff ffcf 	bl	8005918 <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(kd);
 800597a:	ed97 0a01 	vldr	s0, [r7, #4]
 800597e:	f7ff ffdb 	bl	8005938 <velotrace_set_gain_kd_direct>
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <velotrace_set_target_zero>:

/* target kp ki kd set zero */
void velotrace_set_target_zero()
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
    velotrace_set_target_direct(0);
 8005990:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800599c <velotrace_set_target_zero+0x10>
 8005994:	f7ff ffa0 	bl	80058d8 <velotrace_set_target_direct>
}
 8005998:	bf00      	nop
 800599a:	bd80      	pop	{r7, pc}
 800599c:	00000000 	.word	0x00000000

080059a0 <velotrace_set_gain_zero>:

void velotrace_set_gain_zero()
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
    velotrace_set_gain_kp_direct(0);
 80059a4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80059c0 <velotrace_set_gain_zero+0x20>
 80059a8:	f7ff ffa6 	bl	80058f8 <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(0);
 80059ac:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80059c0 <velotrace_set_gain_zero+0x20>
 80059b0:	f7ff ffb2 	bl	8005918 <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(0);
 80059b4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80059c0 <velotrace_set_gain_zero+0x20>
 80059b8:	f7ff ffbe 	bl	8005938 <velotrace_set_gain_kd_direct>
}
 80059bc:	bf00      	nop
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	00000000 	.word	0x00000000

080059c4 <velotrace_calc_gain_kp>:
{
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
}

float velotrace_calc_gain_kp(unsigned short int i)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	f1c3 030f 	rsb	r3, r3, #15
 80059d4:	ee07 3a90 	vmov	s15, r3
 80059d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059dc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005a04 <velotrace_calc_gain_kp+0x40>
 80059e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059e4:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80059e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059ec:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005a08 <velotrace_calc_gain_kp+0x44>
 80059f0:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80059f4:	eeb0 0a67 	vmov.f32	s0, s15
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	00000000 	.word	0x00000000
 8005a08:	44110000 	.word	0x44110000

08005a0c <velotrace_calc_gain_ki>:

float velotrace_calc_gain_ki(unsigned short int i)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	f1c3 030f 	rsb	r3, r3, #15
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a24:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005a4c <velotrace_calc_gain_ki+0x40>
 8005a28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a2c:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005a30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a34:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005a50 <velotrace_calc_gain_ki+0x44>
 8005a38:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	00000000 	.word	0x00000000
 8005a50:	47c35000 	.word	0x47c35000

08005a54 <velotrace_calc_gain_kd>:

float velotrace_calc_gain_kd(unsigned short int i)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	f1c3 030f 	rsb	r3, r3, #15
 8005a64:	ee07 3a90 	vmov	s15, r3
 8005a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005a94 <velotrace_calc_gain_kd+0x40>
 8005a70:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a74:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a7c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005a94 <velotrace_calc_gain_kd+0x40>
 8005a80:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005a84:	eeb0 0a67 	vmov.f32	s0, s15
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	00000000 	.word	0x00000000

08005a98 <velotrace_read_values>:
    velotrace_pid.ki = _pid->ki;
    velotrace_pid.kd = _pid->kd;
}

PID* velotrace_read_values()
{
 8005a98:	b480      	push	{r7}
 8005a9a:	af00      	add	r7, sp, #0
    return &velotrace_pid;
 8005a9c:	4b02      	ldr	r3, [pc, #8]	; (8005aa8 <velotrace_read_values+0x10>)
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	20018044 	.word	0x20018044

08005aac <velotrace_solve>:

float velotrace_solve(float reference_)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	ed87 0a01 	vstr	s0, [r7, #4]
    float error;
    float d_error;
    float result;

    error = reference_ - velotrace_pid.target;
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <velotrace_solve+0xc8>)
 8005ab8:	edd3 7a00 	vldr	s15, [r3]
 8005abc:	ed97 7a01 	vldr	s14, [r7, #4]
 8005ac0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ac4:	edc7 7a05 	vstr	s15, [r7, #20]

    d_error = (error - velotrace_before_error) / (float) (velotrace_sampling_time_ms / (float) 1000);
 8005ac8:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <velotrace_solve+0xcc>)
 8005aca:	edd3 7a00 	vldr	s15, [r3]
 8005ace:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ad2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <velotrace_solve+0xd0>)
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	ee07 3a90 	vmov	s15, r3
 8005ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae2:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8005b80 <velotrace_solve+0xd4>
 8005ae6:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005aea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aee:	edc7 7a04 	vstr	s15, [r7, #16]
    velotrace_s_error += error * (float) (velotrace_sampling_time_ms / (float) 1000);
 8005af2:	4b22      	ldr	r3, [pc, #136]	; (8005b7c <velotrace_solve+0xd0>)
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	ee07 3a90 	vmov	s15, r3
 8005afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005afe:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005b80 <velotrace_solve+0xd4>
 8005b02:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005b06:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b0e:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <velotrace_solve+0xd8>)
 8005b10:	edd3 7a00 	vldr	s15, [r3]
 8005b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b18:	4b1a      	ldr	r3, [pc, #104]	; (8005b84 <velotrace_solve+0xd8>)
 8005b1a:	edc3 7a00 	vstr	s15, [r3]

    result = - (velotrace_pid.kp * error + velotrace_pid.ki * velotrace_s_error + velotrace_pid.kd * d_error);
 8005b1e:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <velotrace_solve+0xc8>)
 8005b20:	ed93 7a01 	vldr	s14, [r3, #4]
 8005b24:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b2c:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <velotrace_solve+0xc8>)
 8005b2e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b32:	4b14      	ldr	r3, [pc, #80]	; (8005b84 <velotrace_solve+0xd8>)
 8005b34:	edd3 7a00 	vldr	s15, [r3]
 8005b38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b40:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <velotrace_solve+0xc8>)
 8005b42:	edd3 6a03 	vldr	s13, [r3, #12]
 8005b46:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b52:	eef1 7a67 	vneg.f32	s15, s15
 8005b56:	edc7 7a03 	vstr	s15, [r7, #12]
    printf("velotrace_solve()\r\n");
    printf("reference_ - velotrace_pid.target = %7.2f - %7.2f = %7.2f\r\n", reference_, velotrace_pid.target, reference_ - velotrace_pid.target);
    printf("%7.2f = %7.2f * %7.2f + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, velotrace_pid.kp, error, velotrace_pid.ki, velotrace_s_error, velotrace_pid.kd, d_error);
    #endif

    velotrace_before_error = error;
 8005b5a:	4a07      	ldr	r2, [pc, #28]	; (8005b78 <velotrace_solve+0xcc>)
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	6013      	str	r3, [r2, #0]

    return result;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	ee07 3a90 	vmov	s15, r3
}
 8005b66:	eeb0 0a67 	vmov.f32	s0, s15
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	20018044 	.word	0x20018044
 8005b78:	20018038 	.word	0x20018038
 8005b7c:	20018034 	.word	0x20018034
 8005b80:	447a0000 	.word	0x447a0000
 8005b84:	20018040 	.word	0x20018040

08005b88 <velotrace_print_values>:

void velotrace_print_values()
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
#if D_VELOTRACE
	printf("velo > target = %5.3f\r\n", velotrace_read_target());
	//! printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_calc_gain_kp(rotary_read_value()), velotrace_calc_gain_ki(rotary_read_value()), velotrace_calc_gain_kd(rotary_read_value()));
#endif
}
 8005b8c:	bf00      	nop
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
	...

08005b98 <velotrace_gain_tuning>:

void velotrace_gain_tuning()
{
 8005b98:	b480      	push	{r7}
 8005b9a:	af00      	add	r7, sp, #0
    //! 右センサを読んでからの時間を格納する
    velotrace_gain_tuning_time_ms += velotrace_sampling_time_ms;
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <velotrace_gain_tuning+0x34>)
 8005b9e:	881a      	ldrh	r2, [r3, #0]
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <velotrace_gain_tuning+0x38>)
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <velotrace_gain_tuning+0x34>)
 8005baa:	801a      	strh	r2, [r3, #0]
    //! 停止時間になったら
    if(velotrace_gain_tuning_time_ms >= VELOTRACE_GAIN_TUNING_STOP_TIME_MS)
 8005bac:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <velotrace_gain_tuning+0x34>)
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d903      	bls.n	8005bc0 <velotrace_gain_tuning+0x28>
    {
        //! 速度の目標値をゼロにする
        velotrace_pid.target = 0;
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <velotrace_gain_tuning+0x3c>)
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
    }
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	2001803c 	.word	0x2001803c
 8005bd0:	20018034 	.word	0x20018034
 8005bd4:	20018044 	.word	0x20018044

08005bd8 <virtual_marker_init>:
#include "virtual_marker.h"

SideSensorState virtual_marker_state, virtual_marker_state_volatile;

void virtual_marker_init()
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
    sidesensor_init();
 8005bdc:	f7fe fa64 	bl	80040a8 <sidesensor_init>
}
 8005be0:	bf00      	nop
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <virtual_marker_start>:

void virtual_marker_start()
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
    sidesensor_start();
 8005be8:	f7fe fa66 	bl	80040b8 <sidesensor_start>
    virtual_marker_set();
 8005bec:	f000 f810 	bl	8005c10 <virtual_marker_set>
}
 8005bf0:	bf00      	nop
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <virtual_marker_main>:

void virtual_marker_main()
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
    /* virtual_main */
    sidesensor_main();
 8005bf8:	f7fe faf0 	bl	80041dc <sidesensor_main>
    virtual_marker_set();
 8005bfc:	f000 f808 	bl	8005c10 <virtual_marker_set>
}
 8005c00:	bf00      	nop
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <virtual_marker_stop>:

void virtual_marker_stop()
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
    sidesensor_stop();
 8005c08:	f7fe fa7c 	bl	8004104 <sidesensor_stop>
}
 8005c0c:	bf00      	nop
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <virtual_marker_set>:

void virtual_marker_set()
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
    virtual_marker_state = sidesensor_read_markerstate();
 8005c14:	f7fe fa7e 	bl	8004114 <sidesensor_read_markerstate>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <virtual_marker_set+0x20>)
 8005c1e:	701a      	strb	r2, [r3, #0]
    virtual_marker_state_volatile = sidesensor_read_markerstate_volatile();
 8005c20:	f7fe fa84 	bl	800412c <sidesensor_read_markerstate_volatile>
 8005c24:	4603      	mov	r3, r0
 8005c26:	461a      	mov	r2, r3
 8005c28:	4b02      	ldr	r3, [pc, #8]	; (8005c34 <virtual_marker_set+0x24>)
 8005c2a:	701a      	strb	r2, [r3, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20018055 	.word	0x20018055
 8005c34:	20018054 	.word	0x20018054

08005c38 <virtual_marker_read_markerstate>:

SideSensorState virtual_marker_read_markerstate()
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
    return virtual_marker_state;
 8005c3c:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <virtual_marker_read_markerstate+0x14>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	20018055 	.word	0x20018055

08005c50 <virtual_marker_read_markerstate_volatile>:

SideSensorState virtual_marker_read_markerstate_volatile()
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
    if(course_read_section_degree() / course_read_sampling_count() >= THRESHOLD_YAW_CURVE_OR_STRAIGHT)
    {
        virtual_marker_state_volatile = curve;
    }
    */
    return virtual_marker_state_volatile;
 8005c54:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <virtual_marker_read_markerstate_volatile+0x14>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20018054 	.word	0x20018054

08005c68 <virtual_marker_d_print>:

void virtual_marker_d_print()
{
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0

}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005cb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005c7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005c7e:	e003      	b.n	8005c88 <LoopCopyDataInit>

08005c80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005c80:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005c82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005c84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005c86:	3104      	adds	r1, #4

08005c88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005c88:	480b      	ldr	r0, [pc, #44]	; (8005cb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005c8a:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005c8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005c8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005c90:	d3f6      	bcc.n	8005c80 <CopyDataInit>
  ldr  r2, =_sbss
 8005c92:	4a0b      	ldr	r2, [pc, #44]	; (8005cc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005c94:	e002      	b.n	8005c9c <LoopFillZerobss>

08005c96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005c96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005c98:	f842 3b04 	str.w	r3, [r2], #4

08005c9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005c9c:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005c9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ca0:	d3f9      	bcc.n	8005c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005ca2:	f7fe ffb1 	bl	8004c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ca6:	f004 fe49 	bl	800a93c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005caa:	f7fd f8c1 	bl	8002e30 <main>
  bx  lr    
 8005cae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005cb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005cb4:	080106a8 	.word	0x080106a8
  ldr  r0, =_sdata
 8005cb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005cbc:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8005cc0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005cc4:	20018080 	.word	0x20018080

08005cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005cc8:	e7fe      	b.n	8005cc8 <ADC_IRQHandler>
	...

08005ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cd0:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <HAL_Init+0x40>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a0d      	ldr	r2, [pc, #52]	; (8005d0c <HAL_Init+0x40>)
 8005cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <HAL_Init+0x40>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0a      	ldr	r2, [pc, #40]	; (8005d0c <HAL_Init+0x40>)
 8005ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ce8:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <HAL_Init+0x40>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a07      	ldr	r2, [pc, #28]	; (8005d0c <HAL_Init+0x40>)
 8005cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cf4:	2003      	movs	r0, #3
 8005cf6:	f000 fdaf 	bl	8006858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	f000 f808 	bl	8005d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d00:	f7fe fb22 	bl	8004348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40023c00 	.word	0x40023c00

08005d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d18:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <HAL_InitTick+0x54>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <HAL_InitTick+0x58>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	4619      	mov	r1, r3
 8005d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fdc7 	bl	80068c2 <HAL_SYSTICK_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e00e      	b.n	8005d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b0f      	cmp	r3, #15
 8005d42:	d80a      	bhi.n	8005d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d44:	2200      	movs	r2, #0
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4c:	f000 fd8f 	bl	800686e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d50:	4a06      	ldr	r2, [pc, #24]	; (8005d6c <HAL_InitTick+0x5c>)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e000      	b.n	8005d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20000000 	.word	0x20000000
 8005d68:	20000008 	.word	0x20000008
 8005d6c:	20000004 	.word	0x20000004

08005d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d74:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <HAL_IncTick+0x20>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <HAL_IncTick+0x24>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4413      	add	r3, r2
 8005d80:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <HAL_IncTick+0x24>)
 8005d82:	6013      	str	r3, [r2, #0]
}
 8005d84:	bf00      	nop
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000008 	.word	0x20000008
 8005d94:	20018058 	.word	0x20018058

08005d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8005d9c:	4b03      	ldr	r3, [pc, #12]	; (8005dac <HAL_GetTick+0x14>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	20018058 	.word	0x20018058

08005db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005db8:	f7ff ffee 	bl	8005d98 <HAL_GetTick>
 8005dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d005      	beq.n	8005dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005dca:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <HAL_Delay+0x40>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005dd6:	bf00      	nop
 8005dd8:	f7ff ffde 	bl	8005d98 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d8f7      	bhi.n	8005dd8 <HAL_Delay+0x28>
  {
  }
}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20000008 	.word	0x20000008

08005df4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e033      	b.n	8005e72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fe fac4 	bl	80043a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d118      	bne.n	8005e64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e3a:	f023 0302 	bic.w	r3, r3, #2
 8005e3e:	f043 0202 	orr.w	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fab8 	bl	80063bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	f043 0201 	orr.w	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	641a      	str	r2, [r3, #64]	; 0x40
 8005e62:	e001      	b.n	8005e68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_ADC_Start_DMA+0x1e>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e0e9      	b.n	800606e <HAL_ADC_Start_DMA+0x1f2>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d018      	beq.n	8005ee2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ec0:	4b6d      	ldr	r3, [pc, #436]	; (8006078 <HAL_ADC_Start_DMA+0x1fc>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a6d      	ldr	r2, [pc, #436]	; (800607c <HAL_ADC_Start_DMA+0x200>)
 8005ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eca:	0c9a      	lsrs	r2, r3, #18
 8005ecc:	4613      	mov	r3, r2
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	4413      	add	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005ed4:	e002      	b.n	8005edc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f9      	bne.n	8005ed6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ef0:	d107      	bne.n	8005f02 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f00:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	f040 80a1 	bne.w	8006054 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f1a:	f023 0301 	bic.w	r3, r3, #1
 8005f1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f50:	d106      	bne.n	8005f60 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	f023 0206 	bic.w	r2, r3, #6
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44
 8005f5e:	e002      	b.n	8005f66 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f6e:	4b44      	ldr	r3, [pc, #272]	; (8006080 <HAL_ADC_Start_DMA+0x204>)
 8005f70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f76:	4a43      	ldr	r2, [pc, #268]	; (8006084 <HAL_ADC_Start_DMA+0x208>)
 8005f78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	4a42      	ldr	r2, [pc, #264]	; (8006088 <HAL_ADC_Start_DMA+0x20c>)
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	4a41      	ldr	r2, [pc, #260]	; (800608c <HAL_ADC_Start_DMA+0x210>)
 8005f88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005f92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005fa2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	334c      	adds	r3, #76	; 0x4c
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f000 fd38 	bl	8006a38 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f003 031f 	and.w	r3, r3, #31
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d12a      	bne.n	800602a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2d      	ldr	r2, [pc, #180]	; (8006090 <HAL_ADC_Start_DMA+0x214>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d015      	beq.n	800600a <HAL_ADC_Start_DMA+0x18e>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2c      	ldr	r2, [pc, #176]	; (8006094 <HAL_ADC_Start_DMA+0x218>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d105      	bne.n	8005ff4 <HAL_ADC_Start_DMA+0x178>
 8005fe8:	4b25      	ldr	r3, [pc, #148]	; (8006080 <HAL_ADC_Start_DMA+0x204>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a27      	ldr	r2, [pc, #156]	; (8006098 <HAL_ADC_Start_DMA+0x21c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d136      	bne.n	800606c <HAL_ADC_Start_DMA+0x1f0>
 8005ffe:	4b20      	ldr	r3, [pc, #128]	; (8006080 <HAL_ADC_Start_DMA+0x204>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	2b0f      	cmp	r3, #15
 8006008:	d830      	bhi.n	800606c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d129      	bne.n	800606c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006026:	609a      	str	r2, [r3, #8]
 8006028:	e020      	b.n	800606c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a18      	ldr	r2, [pc, #96]	; (8006090 <HAL_ADC_Start_DMA+0x214>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d11b      	bne.n	800606c <HAL_ADC_Start_DMA+0x1f0>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d114      	bne.n	800606c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006050:	609a      	str	r2, [r3, #8]
 8006052:	e00b      	b.n	800606c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	f043 0210 	orr.w	r2, r3, #16
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006064:	f043 0201 	orr.w	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000000 	.word	0x20000000
 800607c:	431bde83 	.word	0x431bde83
 8006080:	40012300 	.word	0x40012300
 8006084:	080065b5 	.word	0x080065b5
 8006088:	0800666f 	.word	0x0800666f
 800608c:	0800668b 	.word	0x0800668b
 8006090:	40012000 	.word	0x40012000
 8006094:	40012100 	.word	0x40012100
 8006098:	40012200 	.word	0x40012200

0800609c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_ADC_Stop_DMA+0x1a>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e048      	b.n	8006148 <HAL_ADC_Stop_DMA+0xac>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0201 	bic.w	r2, r2, #1
 80060cc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d130      	bne.n	800613e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060ea:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d10f      	bne.n	800611a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fcf2 	bl	8006ae8 <HAL_DMA_Abort>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006128:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006132:	f023 0301 	bic.w	r3, r3, #1
 8006136:	f043 0201 	orr.w	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x1c>
 8006190:	2302      	movs	r3, #2
 8006192:	e105      	b.n	80063a0 <HAL_ADC_ConfigChannel+0x228>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b09      	cmp	r3, #9
 80061a2:	d925      	bls.n	80061f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68d9      	ldr	r1, [r3, #12]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	461a      	mov	r2, r3
 80061b2:	4613      	mov	r3, r2
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4413      	add	r3, r2
 80061b8:	3b1e      	subs	r3, #30
 80061ba:	2207      	movs	r2, #7
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	43da      	mvns	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	400a      	ands	r2, r1
 80061c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68d9      	ldr	r1, [r3, #12]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	4618      	mov	r0, r3
 80061dc:	4603      	mov	r3, r0
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	4403      	add	r3, r0
 80061e2:	3b1e      	subs	r3, #30
 80061e4:	409a      	lsls	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	60da      	str	r2, [r3, #12]
 80061ee:	e022      	b.n	8006236 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6919      	ldr	r1, [r3, #16]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	4613      	mov	r3, r2
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	4413      	add	r3, r2
 8006204:	2207      	movs	r2, #7
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43da      	mvns	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	400a      	ands	r2, r1
 8006212:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6919      	ldr	r1, [r3, #16]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	4618      	mov	r0, r3
 8006226:	4603      	mov	r3, r0
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	4403      	add	r3, r0
 800622c:	409a      	lsls	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b06      	cmp	r3, #6
 800623c:	d824      	bhi.n	8006288 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	3b05      	subs	r3, #5
 8006250:	221f      	movs	r2, #31
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	43da      	mvns	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	400a      	ands	r2, r1
 800625e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	4618      	mov	r0, r3
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	3b05      	subs	r3, #5
 800627a:	fa00 f203 	lsl.w	r2, r0, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	430a      	orrs	r2, r1
 8006284:	635a      	str	r2, [r3, #52]	; 0x34
 8006286:	e04c      	b.n	8006322 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b0c      	cmp	r3, #12
 800628e:	d824      	bhi.n	80062da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	3b23      	subs	r3, #35	; 0x23
 80062a2:	221f      	movs	r2, #31
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	43da      	mvns	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	400a      	ands	r2, r1
 80062b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4618      	mov	r0, r3
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	3b23      	subs	r3, #35	; 0x23
 80062cc:	fa00 f203 	lsl.w	r2, r0, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
 80062d8:	e023      	b.n	8006322 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	4413      	add	r3, r2
 80062ea:	3b41      	subs	r3, #65	; 0x41
 80062ec:	221f      	movs	r2, #31
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	43da      	mvns	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	400a      	ands	r2, r1
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	b29b      	uxth	r3, r3
 8006308:	4618      	mov	r0, r3
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	3b41      	subs	r3, #65	; 0x41
 8006316:	fa00 f203 	lsl.w	r2, r0, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006322:	4b22      	ldr	r3, [pc, #136]	; (80063ac <HAL_ADC_ConfigChannel+0x234>)
 8006324:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a21      	ldr	r2, [pc, #132]	; (80063b0 <HAL_ADC_ConfigChannel+0x238>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d109      	bne.n	8006344 <HAL_ADC_ConfigChannel+0x1cc>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b12      	cmp	r3, #18
 8006336:	d105      	bne.n	8006344 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a19      	ldr	r2, [pc, #100]	; (80063b0 <HAL_ADC_ConfigChannel+0x238>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d123      	bne.n	8006396 <HAL_ADC_ConfigChannel+0x21e>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b10      	cmp	r3, #16
 8006354:	d003      	beq.n	800635e <HAL_ADC_ConfigChannel+0x1e6>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b11      	cmp	r3, #17
 800635c:	d11b      	bne.n	8006396 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b10      	cmp	r3, #16
 8006370:	d111      	bne.n	8006396 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006372:	4b10      	ldr	r3, [pc, #64]	; (80063b4 <HAL_ADC_ConfigChannel+0x23c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a10      	ldr	r2, [pc, #64]	; (80063b8 <HAL_ADC_ConfigChannel+0x240>)
 8006378:	fba2 2303 	umull	r2, r3, r2, r3
 800637c:	0c9a      	lsrs	r2, r3, #18
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006388:	e002      	b.n	8006390 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	3b01      	subs	r3, #1
 800638e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1f9      	bne.n	800638a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	40012300 	.word	0x40012300
 80063b0:	40012000 	.word	0x40012000
 80063b4:	20000000 	.word	0x20000000
 80063b8:	431bde83 	.word	0x431bde83

080063bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063c4:	4b79      	ldr	r3, [pc, #484]	; (80065ac <ADC_Init+0x1f0>)
 80063c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	431a      	orrs	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6859      	ldr	r1, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	021a      	lsls	r2, r3, #8
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006414:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6859      	ldr	r1, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006436:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6899      	ldr	r1, [r3, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	4a58      	ldr	r2, [pc, #352]	; (80065b0 <ADC_Init+0x1f4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d022      	beq.n	800649a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006462:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6899      	ldr	r1, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6899      	ldr	r1, [r3, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	609a      	str	r2, [r3, #8]
 8006498:	e00f      	b.n	80064ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80064b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0202 	bic.w	r2, r2, #2
 80064c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6899      	ldr	r1, [r3, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	7e1b      	ldrb	r3, [r3, #24]
 80064d4:	005a      	lsls	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01b      	beq.n	8006520 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006506:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6859      	ldr	r1, [r3, #4]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	3b01      	subs	r3, #1
 8006514:	035a      	lsls	r2, r3, #13
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
 800651e:	e007      	b.n	8006530 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800652e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800653e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	3b01      	subs	r3, #1
 800654c:	051a      	lsls	r2, r3, #20
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006564:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6899      	ldr	r1, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006572:	025a      	lsls	r2, r3, #9
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800658a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6899      	ldr	r1, [r3, #8]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	029a      	lsls	r2, r3, #10
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	609a      	str	r2, [r3, #8]
}
 80065a0:	bf00      	nop
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	40012300 	.word	0x40012300
 80065b0:	0f000001 	.word	0x0f000001

080065b4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d13c      	bne.n	8006648 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d12b      	bne.n	8006640 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d127      	bne.n	8006640 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d006      	beq.n	800660c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006608:	2b00      	cmp	r3, #0
 800660a:	d119      	bne.n	8006640 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0220 	bic.w	r2, r2, #32
 800661a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	f043 0201 	orr.w	r2, r3, #1
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7fb fadd 	bl	8001c00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006646:	e00e      	b.n	8006666 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7ff fd85 	bl	8006164 <HAL_ADC_ErrorCallback>
}
 800665a:	e004      	b.n	8006666 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
}
 8006666:	bf00      	nop
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7ff fd67 	bl	8006150 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006682:	bf00      	nop
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2240      	movs	r2, #64	; 0x40
 800669c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a2:	f043 0204 	orr.w	r2, r3, #4
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f7ff fd5a 	bl	8006164 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066b0:	bf00      	nop
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066c8:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <__NVIC_SetPriorityGrouping+0x44>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066d4:	4013      	ands	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066ea:	4a04      	ldr	r2, [pc, #16]	; (80066fc <__NVIC_SetPriorityGrouping+0x44>)
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	60d3      	str	r3, [r2, #12]
}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	e000ed00 	.word	0xe000ed00

08006700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <__NVIC_GetPriorityGrouping+0x18>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	0a1b      	lsrs	r3, r3, #8
 800670a:	f003 0307 	and.w	r3, r3, #7
}
 800670e:	4618      	mov	r0, r3
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	e000ed00 	.word	0xe000ed00

0800671c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800672a:	2b00      	cmp	r3, #0
 800672c:	db0b      	blt.n	8006746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	f003 021f 	and.w	r2, r3, #31
 8006734:	4907      	ldr	r1, [pc, #28]	; (8006754 <__NVIC_EnableIRQ+0x38>)
 8006736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	2001      	movs	r0, #1
 800673e:	fa00 f202 	lsl.w	r2, r0, r2
 8006742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	e000e100 	.word	0xe000e100

08006758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	6039      	str	r1, [r7, #0]
 8006762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006768:	2b00      	cmp	r3, #0
 800676a:	db0a      	blt.n	8006782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	490c      	ldr	r1, [pc, #48]	; (80067a4 <__NVIC_SetPriority+0x4c>)
 8006772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006776:	0112      	lsls	r2, r2, #4
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	440b      	add	r3, r1
 800677c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006780:	e00a      	b.n	8006798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	4908      	ldr	r1, [pc, #32]	; (80067a8 <__NVIC_SetPriority+0x50>)
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	3b04      	subs	r3, #4
 8006790:	0112      	lsls	r2, r2, #4
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	440b      	add	r3, r1
 8006796:	761a      	strb	r2, [r3, #24]
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	e000e100 	.word	0xe000e100
 80067a8:	e000ed00 	.word	0xe000ed00

080067ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b089      	sub	sp, #36	; 0x24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f1c3 0307 	rsb	r3, r3, #7
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	bf28      	it	cs
 80067ca:	2304      	movcs	r3, #4
 80067cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3304      	adds	r3, #4
 80067d2:	2b06      	cmp	r3, #6
 80067d4:	d902      	bls.n	80067dc <NVIC_EncodePriority+0x30>
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	3b03      	subs	r3, #3
 80067da:	e000      	b.n	80067de <NVIC_EncodePriority+0x32>
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067e0:	f04f 32ff 	mov.w	r2, #4294967295
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ea:	43da      	mvns	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	401a      	ands	r2, r3
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067f4:	f04f 31ff 	mov.w	r1, #4294967295
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	fa01 f303 	lsl.w	r3, r1, r3
 80067fe:	43d9      	mvns	r1, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006804:	4313      	orrs	r3, r2
         );
}
 8006806:	4618      	mov	r0, r3
 8006808:	3724      	adds	r7, #36	; 0x24
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
	...

08006814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3b01      	subs	r3, #1
 8006820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006824:	d301      	bcc.n	800682a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006826:	2301      	movs	r3, #1
 8006828:	e00f      	b.n	800684a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800682a:	4a0a      	ldr	r2, [pc, #40]	; (8006854 <SysTick_Config+0x40>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3b01      	subs	r3, #1
 8006830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006832:	210f      	movs	r1, #15
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	f7ff ff8e 	bl	8006758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <SysTick_Config+0x40>)
 800683e:	2200      	movs	r2, #0
 8006840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006842:	4b04      	ldr	r3, [pc, #16]	; (8006854 <SysTick_Config+0x40>)
 8006844:	2207      	movs	r2, #7
 8006846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	e000e010 	.word	0xe000e010

08006858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff ff29 	bl	80066b8 <__NVIC_SetPriorityGrouping>
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800686e:	b580      	push	{r7, lr}
 8006870:	b086      	sub	sp, #24
 8006872:	af00      	add	r7, sp, #0
 8006874:	4603      	mov	r3, r0
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800687c:	2300      	movs	r3, #0
 800687e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006880:	f7ff ff3e 	bl	8006700 <__NVIC_GetPriorityGrouping>
 8006884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	6978      	ldr	r0, [r7, #20]
 800688c:	f7ff ff8e 	bl	80067ac <NVIC_EncodePriority>
 8006890:	4602      	mov	r2, r0
 8006892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff ff5d 	bl	8006758 <__NVIC_SetPriority>
}
 800689e:	bf00      	nop
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	4603      	mov	r3, r0
 80068ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff ff31 	bl	800671c <__NVIC_EnableIRQ>
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ffa2 	bl	8006814 <SysTick_Config>
 80068d0:	4603      	mov	r3, r0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80068e8:	f7ff fa56 	bl	8005d98 <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e099      	b.n	8006a2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0201 	bic.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006918:	e00f      	b.n	800693a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800691a:	f7ff fa3d 	bl	8005d98 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b05      	cmp	r3, #5
 8006926:	d908      	bls.n	800693a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2203      	movs	r2, #3
 8006932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e078      	b.n	8006a2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e8      	bne.n	800691a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4b38      	ldr	r3, [pc, #224]	; (8006a34 <HAL_DMA_Init+0x158>)
 8006954:	4013      	ands	r3, r2
 8006956:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006966:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006972:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800697e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	2b04      	cmp	r3, #4
 8006992:	d107      	bne.n	80069a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699c:	4313      	orrs	r3, r2
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f023 0307 	bic.w	r3, r3, #7
 80069ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d117      	bne.n	80069fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fadf 	bl	8006fa4 <DMA_CheckFifoParam>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d008      	beq.n	80069fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2240      	movs	r2, #64	; 0x40
 80069f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80069fa:	2301      	movs	r3, #1
 80069fc:	e016      	b.n	8006a2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa96 	bl	8006f38 <DMA_CalcBaseAndBitshift>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a14:	223f      	movs	r2, #63	; 0x3f
 8006a16:	409a      	lsls	r2, r3
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	f010803f 	.word	0xf010803f

08006a38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_DMA_Start_IT+0x26>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e040      	b.n	8006ae0 <HAL_DMA_Start_IT+0xa8>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d12f      	bne.n	8006ad2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2202      	movs	r2, #2
 8006a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f000 fa28 	bl	8006edc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a90:	223f      	movs	r2, #63	; 0x3f
 8006a92:	409a      	lsls	r2, r3
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0216 	orr.w	r2, r2, #22
 8006aa6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d007      	beq.n	8006ac0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0208 	orr.w	r2, r2, #8
 8006abe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	e005      	b.n	8006ade <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ada:	2302      	movs	r3, #2
 8006adc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006af6:	f7ff f94f 	bl	8005d98 <HAL_GetTick>
 8006afa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d008      	beq.n	8006b1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2280      	movs	r2, #128	; 0x80
 8006b0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e052      	b.n	8006bc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0216 	bic.w	r2, r2, #22
 8006b28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695a      	ldr	r2, [r3, #20]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d103      	bne.n	8006b4a <HAL_DMA_Abort+0x62>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0208 	bic.w	r2, r2, #8
 8006b58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0201 	bic.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b6a:	e013      	b.n	8006b94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b6c:	f7ff f914 	bl	8005d98 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b05      	cmp	r3, #5
 8006b78:	d90c      	bls.n	8006b94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2203      	movs	r2, #3
 8006b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e015      	b.n	8006bc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e4      	bne.n	8006b6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba6:	223f      	movs	r2, #63	; 0x3f
 8006ba8:	409a      	lsls	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006bd4:	4b92      	ldr	r3, [pc, #584]	; (8006e20 <HAL_DMA_IRQHandler+0x258>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a92      	ldr	r2, [pc, #584]	; (8006e24 <HAL_DMA_IRQHandler+0x25c>)
 8006bda:	fba2 2303 	umull	r2, r3, r2, r3
 8006bde:	0a9b      	lsrs	r3, r3, #10
 8006be0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf2:	2208      	movs	r2, #8
 8006bf4:	409a      	lsls	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01a      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d013      	beq.n	8006c34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f022 0204 	bic.w	r2, r2, #4
 8006c1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c20:	2208      	movs	r2, #8
 8006c22:	409a      	lsls	r2, r3
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2c:	f043 0201 	orr.w	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c38:	2201      	movs	r2, #1
 8006c3a:	409a      	lsls	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d012      	beq.n	8006c6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c56:	2201      	movs	r2, #1
 8006c58:	409a      	lsls	r2, r3
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	f043 0202 	orr.w	r2, r3, #2
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c6e:	2204      	movs	r2, #4
 8006c70:	409a      	lsls	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4013      	ands	r3, r2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d012      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	2204      	movs	r2, #4
 8006c8e:	409a      	lsls	r2, r3
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c98:	f043 0204 	orr.w	r2, r3, #4
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4013      	ands	r3, r2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d043      	beq.n	8006d38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d03c      	beq.n	8006d38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	409a      	lsls	r2, r3
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d018      	beq.n	8006d0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d108      	bne.n	8006cf8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d024      	beq.n	8006d38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	e01f      	b.n	8006d38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01b      	beq.n	8006d38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
 8006d08:	e016      	b.n	8006d38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d107      	bne.n	8006d28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 0208 	bic.w	r2, r2, #8
 8006d26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	409a      	lsls	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4013      	ands	r3, r2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 808e 	beq.w	8006e66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0310 	and.w	r3, r3, #16
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8086 	beq.w	8006e66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5e:	2220      	movs	r2, #32
 8006d60:	409a      	lsls	r2, r3
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b05      	cmp	r3, #5
 8006d70:	d136      	bne.n	8006de0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0216 	bic.w	r2, r2, #22
 8006d80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695a      	ldr	r2, [r3, #20]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <HAL_DMA_IRQHandler+0x1da>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0208 	bic.w	r2, r2, #8
 8006db0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db6:	223f      	movs	r2, #63	; 0x3f
 8006db8:	409a      	lsls	r2, r3
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d07d      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	4798      	blx	r3
        }
        return;
 8006dde:	e078      	b.n	8006ed2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d01c      	beq.n	8006e28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d108      	bne.n	8006e0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d030      	beq.n	8006e66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	4798      	blx	r3
 8006e0c:	e02b      	b.n	8006e66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d027      	beq.n	8006e66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	4798      	blx	r3
 8006e1e:	e022      	b.n	8006e66 <HAL_DMA_IRQHandler+0x29e>
 8006e20:	20000000 	.word	0x20000000
 8006e24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10f      	bne.n	8006e56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0210 	bic.w	r2, r2, #16
 8006e44:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d032      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d022      	beq.n	8006ec0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2205      	movs	r2, #5
 8006e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0201 	bic.w	r2, r2, #1
 8006e90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	3301      	adds	r3, #1
 8006e96:	60bb      	str	r3, [r7, #8]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d307      	bcc.n	8006eae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0301 	and.w	r3, r3, #1
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f2      	bne.n	8006e92 <HAL_DMA_IRQHandler+0x2ca>
 8006eac:	e000      	b.n	8006eb0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006eae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	4798      	blx	r3
 8006ed0:	e000      	b.n	8006ed4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006ed2:	bf00      	nop
    }
  }
}
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop

08006edc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ef8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	2b40      	cmp	r3, #64	; 0x40
 8006f08:	d108      	bne.n	8006f1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f1a:	e007      	b.n	8006f2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	60da      	str	r2, [r3, #12]
}
 8006f2c:	bf00      	nop
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	3b10      	subs	r3, #16
 8006f48:	4a14      	ldr	r2, [pc, #80]	; (8006f9c <DMA_CalcBaseAndBitshift+0x64>)
 8006f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f4e:	091b      	lsrs	r3, r3, #4
 8006f50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006f52:	4a13      	ldr	r2, [pc, #76]	; (8006fa0 <DMA_CalcBaseAndBitshift+0x68>)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d909      	bls.n	8006f7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f6e:	f023 0303 	bic.w	r3, r3, #3
 8006f72:	1d1a      	adds	r2, r3, #4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	659a      	str	r2, [r3, #88]	; 0x58
 8006f78:	e007      	b.n	8006f8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f82:	f023 0303 	bic.w	r3, r3, #3
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	aaaaaaab 	.word	0xaaaaaaab
 8006fa0:	08010328 	.word	0x08010328

08006fa4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d11f      	bne.n	8006ffe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d855      	bhi.n	8007070 <DMA_CheckFifoParam+0xcc>
 8006fc4:	a201      	add	r2, pc, #4	; (adr r2, 8006fcc <DMA_CheckFifoParam+0x28>)
 8006fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fca:	bf00      	nop
 8006fcc:	08006fdd 	.word	0x08006fdd
 8006fd0:	08006fef 	.word	0x08006fef
 8006fd4:	08006fdd 	.word	0x08006fdd
 8006fd8:	08007071 	.word	0x08007071
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d045      	beq.n	8007074 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fec:	e042      	b.n	8007074 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ff6:	d13f      	bne.n	8007078 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ffc:	e03c      	b.n	8007078 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007006:	d121      	bne.n	800704c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b03      	cmp	r3, #3
 800700c:	d836      	bhi.n	800707c <DMA_CheckFifoParam+0xd8>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <DMA_CheckFifoParam+0x70>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007025 	.word	0x08007025
 8007018:	0800702b 	.word	0x0800702b
 800701c:	08007025 	.word	0x08007025
 8007020:	0800703d 	.word	0x0800703d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
      break;
 8007028:	e02f      	b.n	800708a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d024      	beq.n	8007080 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800703a:	e021      	b.n	8007080 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007044:	d11e      	bne.n	8007084 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800704a:	e01b      	b.n	8007084 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d902      	bls.n	8007058 <DMA_CheckFifoParam+0xb4>
 8007052:	2b03      	cmp	r3, #3
 8007054:	d003      	beq.n	800705e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007056:	e018      	b.n	800708a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	73fb      	strb	r3, [r7, #15]
      break;
 800705c:	e015      	b.n	800708a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00e      	beq.n	8007088 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	73fb      	strb	r3, [r7, #15]
      break;
 800706e:	e00b      	b.n	8007088 <DMA_CheckFifoParam+0xe4>
      break;
 8007070:	bf00      	nop
 8007072:	e00a      	b.n	800708a <DMA_CheckFifoParam+0xe6>
      break;
 8007074:	bf00      	nop
 8007076:	e008      	b.n	800708a <DMA_CheckFifoParam+0xe6>
      break;
 8007078:	bf00      	nop
 800707a:	e006      	b.n	800708a <DMA_CheckFifoParam+0xe6>
      break;
 800707c:	bf00      	nop
 800707e:	e004      	b.n	800708a <DMA_CheckFifoParam+0xe6>
      break;
 8007080:	bf00      	nop
 8007082:	e002      	b.n	800708a <DMA_CheckFifoParam+0xe6>
      break;   
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <DMA_CheckFifoParam+0xe6>
      break;
 8007088:	bf00      	nop
    }
  } 
  
  return status; 
 800708a:	7bfb      	ldrb	r3, [r7, #15]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80070aa:	4b23      	ldr	r3, [pc, #140]	; (8007138 <HAL_FLASH_Program+0xa0>)
 80070ac:	7e1b      	ldrb	r3, [r3, #24]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_FLASH_Program+0x1e>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e03b      	b.n	800712e <HAL_FLASH_Program+0x96>
 80070b6:	4b20      	ldr	r3, [pc, #128]	; (8007138 <HAL_FLASH_Program+0xa0>)
 80070b8:	2201      	movs	r2, #1
 80070ba:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80070bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80070c0:	f000 f870 	bl	80071a4 <FLASH_WaitForLastOperation>
 80070c4:	4603      	mov	r3, r0
 80070c6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d12b      	bne.n	8007126 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d105      	bne.n	80070e0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80070d4:	783b      	ldrb	r3, [r7, #0]
 80070d6:	4619      	mov	r1, r3
 80070d8:	68b8      	ldr	r0, [r7, #8]
 80070da:	f000 f919 	bl	8007310 <FLASH_Program_Byte>
 80070de:	e016      	b.n	800710e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d105      	bne.n	80070f2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80070e6:	883b      	ldrh	r3, [r7, #0]
 80070e8:	4619      	mov	r1, r3
 80070ea:	68b8      	ldr	r0, [r7, #8]
 80070ec:	f000 f8ec 	bl	80072c8 <FLASH_Program_HalfWord>
 80070f0:	e00d      	b.n	800710e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d105      	bne.n	8007104 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	4619      	mov	r1, r3
 80070fc:	68b8      	ldr	r0, [r7, #8]
 80070fe:	f000 f8c1 	bl	8007284 <FLASH_Program_Word>
 8007102:	e004      	b.n	800710e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007108:	68b8      	ldr	r0, [r7, #8]
 800710a:	f000 f88b 	bl	8007224 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800710e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007112:	f000 f847 	bl	80071a4 <FLASH_WaitForLastOperation>
 8007116:	4603      	mov	r3, r0
 8007118:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800711a:	4b08      	ldr	r3, [pc, #32]	; (800713c <HAL_FLASH_Program+0xa4>)
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	4a07      	ldr	r2, [pc, #28]	; (800713c <HAL_FLASH_Program+0xa4>)
 8007120:	f023 0301 	bic.w	r3, r3, #1
 8007124:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <HAL_FLASH_Program+0xa0>)
 8007128:	2200      	movs	r2, #0
 800712a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800712c:	7dfb      	ldrb	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	2001805c 	.word	0x2001805c
 800713c:	40023c00 	.word	0x40023c00

08007140 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800714a:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <HAL_FLASH_Unlock+0x38>)
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	da0b      	bge.n	800716a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <HAL_FLASH_Unlock+0x38>)
 8007154:	4a09      	ldr	r2, [pc, #36]	; (800717c <HAL_FLASH_Unlock+0x3c>)
 8007156:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007158:	4b07      	ldr	r3, [pc, #28]	; (8007178 <HAL_FLASH_Unlock+0x38>)
 800715a:	4a09      	ldr	r2, [pc, #36]	; (8007180 <HAL_FLASH_Unlock+0x40>)
 800715c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <HAL_FLASH_Unlock+0x38>)
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	da01      	bge.n	800716a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800716a:	79fb      	ldrb	r3, [r7, #7]
}
 800716c:	4618      	mov	r0, r3
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	40023c00 	.word	0x40023c00
 800717c:	45670123 	.word	0x45670123
 8007180:	cdef89ab 	.word	0xcdef89ab

08007184 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <HAL_FLASH_Lock+0x1c>)
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	4a04      	ldr	r2, [pc, #16]	; (80071a0 <HAL_FLASH_Lock+0x1c>)
 800718e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007192:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	40023c00 	.word	0x40023c00

080071a4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80071b0:	4b1a      	ldr	r3, [pc, #104]	; (800721c <FLASH_WaitForLastOperation+0x78>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80071b6:	f7fe fdef 	bl	8005d98 <HAL_GetTick>
 80071ba:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80071bc:	e010      	b.n	80071e0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c4:	d00c      	beq.n	80071e0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <FLASH_WaitForLastOperation+0x38>
 80071cc:	f7fe fde4 	bl	8005d98 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d201      	bcs.n	80071e0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e019      	b.n	8007214 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80071e0:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <FLASH_WaitForLastOperation+0x7c>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e8      	bne.n	80071be <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <FLASH_WaitForLastOperation+0x7c>)
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80071f8:	4b09      	ldr	r3, [pc, #36]	; (8007220 <FLASH_WaitForLastOperation+0x7c>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80071fe:	4b08      	ldr	r3, [pc, #32]	; (8007220 <FLASH_WaitForLastOperation+0x7c>)
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800720a:	f000 f8a3 	bl	8007354 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007212:	2300      	movs	r3, #0
  
}  
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	2001805c 	.word	0x2001805c
 8007220:	40023c00 	.word	0x40023c00

08007224 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007224:	b490      	push	{r4, r7}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007230:	4b13      	ldr	r3, [pc, #76]	; (8007280 <FLASH_Program_DoubleWord+0x5c>)
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	4a12      	ldr	r2, [pc, #72]	; (8007280 <FLASH_Program_DoubleWord+0x5c>)
 8007236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800723c:	4b10      	ldr	r3, [pc, #64]	; (8007280 <FLASH_Program_DoubleWord+0x5c>)
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	4a0f      	ldr	r2, [pc, #60]	; (8007280 <FLASH_Program_DoubleWord+0x5c>)
 8007242:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007246:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007248:	4b0d      	ldr	r3, [pc, #52]	; (8007280 <FLASH_Program_DoubleWord+0x5c>)
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	4a0c      	ldr	r2, [pc, #48]	; (8007280 <FLASH_Program_DoubleWord+0x5c>)
 800724e:	f043 0301 	orr.w	r3, r3, #1
 8007252:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800725a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800725e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	f04f 0400 	mov.w	r4, #0
 800726a:	0013      	movs	r3, r2
 800726c:	2400      	movs	r4, #0
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	3204      	adds	r2, #4
 8007272:	6013      	str	r3, [r2, #0]
}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bc90      	pop	{r4, r7}
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	40023c00 	.word	0x40023c00

08007284 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800728e:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <FLASH_Program_Word+0x40>)
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	4a0c      	ldr	r2, [pc, #48]	; (80072c4 <FLASH_Program_Word+0x40>)
 8007294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007298:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800729a:	4b0a      	ldr	r3, [pc, #40]	; (80072c4 <FLASH_Program_Word+0x40>)
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <FLASH_Program_Word+0x40>)
 80072a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80072a6:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <FLASH_Program_Word+0x40>)
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	4a06      	ldr	r2, [pc, #24]	; (80072c4 <FLASH_Program_Word+0x40>)
 80072ac:	f043 0301 	orr.w	r3, r3, #1
 80072b0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	683a      	ldr	r2, [r7, #0]
 80072b6:	601a      	str	r2, [r3, #0]
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	40023c00 	.word	0x40023c00

080072c8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80072d4:	4b0d      	ldr	r3, [pc, #52]	; (800730c <FLASH_Program_HalfWord+0x44>)
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	4a0c      	ldr	r2, [pc, #48]	; (800730c <FLASH_Program_HalfWord+0x44>)
 80072da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80072e0:	4b0a      	ldr	r3, [pc, #40]	; (800730c <FLASH_Program_HalfWord+0x44>)
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	4a09      	ldr	r2, [pc, #36]	; (800730c <FLASH_Program_HalfWord+0x44>)
 80072e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80072ec:	4b07      	ldr	r3, [pc, #28]	; (800730c <FLASH_Program_HalfWord+0x44>)
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	4a06      	ldr	r2, [pc, #24]	; (800730c <FLASH_Program_HalfWord+0x44>)
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	887a      	ldrh	r2, [r7, #2]
 80072fc:	801a      	strh	r2, [r3, #0]
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	40023c00 	.word	0x40023c00

08007310 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800731c:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <FLASH_Program_Byte+0x40>)
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	4a0b      	ldr	r2, [pc, #44]	; (8007350 <FLASH_Program_Byte+0x40>)
 8007322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007326:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007328:	4b09      	ldr	r3, [pc, #36]	; (8007350 <FLASH_Program_Byte+0x40>)
 800732a:	4a09      	ldr	r2, [pc, #36]	; (8007350 <FLASH_Program_Byte+0x40>)
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <FLASH_Program_Byte+0x40>)
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	4a06      	ldr	r2, [pc, #24]	; (8007350 <FLASH_Program_Byte+0x40>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	701a      	strb	r2, [r3, #0]
}
 8007342:	bf00      	nop
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40023c00 	.word	0x40023c00

08007354 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007358:	4b27      	ldr	r3, [pc, #156]	; (80073f8 <FLASH_SetErrorCode+0xa4>)
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007364:	4b25      	ldr	r3, [pc, #148]	; (80073fc <FLASH_SetErrorCode+0xa8>)
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f043 0310 	orr.w	r3, r3, #16
 800736c:	4a23      	ldr	r2, [pc, #140]	; (80073fc <FLASH_SetErrorCode+0xa8>)
 800736e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007370:	4b21      	ldr	r3, [pc, #132]	; (80073f8 <FLASH_SetErrorCode+0xa4>)
 8007372:	2210      	movs	r2, #16
 8007374:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007376:	4b20      	ldr	r3, [pc, #128]	; (80073f8 <FLASH_SetErrorCode+0xa4>)
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d008      	beq.n	8007394 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007382:	4b1e      	ldr	r3, [pc, #120]	; (80073fc <FLASH_SetErrorCode+0xa8>)
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f043 0308 	orr.w	r3, r3, #8
 800738a:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <FLASH_SetErrorCode+0xa8>)
 800738c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800738e:	4b1a      	ldr	r3, [pc, #104]	; (80073f8 <FLASH_SetErrorCode+0xa4>)
 8007390:	2220      	movs	r2, #32
 8007392:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007394:	4b18      	ldr	r3, [pc, #96]	; (80073f8 <FLASH_SetErrorCode+0xa4>)
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d008      	beq.n	80073b2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80073a0:	4b16      	ldr	r3, [pc, #88]	; (80073fc <FLASH_SetErrorCode+0xa8>)
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	f043 0304 	orr.w	r3, r3, #4
 80073a8:	4a14      	ldr	r2, [pc, #80]	; (80073fc <FLASH_SetErrorCode+0xa8>)
 80073aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80073ac:	4b12      	ldr	r3, [pc, #72]	; (80073f8 <FLASH_SetErrorCode+0xa4>)
 80073ae:	2240      	movs	r2, #64	; 0x40
 80073b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80073b2:	4b11      	ldr	r3, [pc, #68]	; (80073f8 <FLASH_SetErrorCode+0xa4>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d008      	beq.n	80073d0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80073be:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <FLASH_SetErrorCode+0xa8>)
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f043 0302 	orr.w	r3, r3, #2
 80073c6:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <FLASH_SetErrorCode+0xa8>)
 80073c8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80073ca:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <FLASH_SetErrorCode+0xa4>)
 80073cc:	2280      	movs	r2, #128	; 0x80
 80073ce:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80073d0:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <FLASH_SetErrorCode+0xa4>)
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d008      	beq.n	80073ee <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80073dc:	4b07      	ldr	r3, [pc, #28]	; (80073fc <FLASH_SetErrorCode+0xa8>)
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	f043 0320 	orr.w	r3, r3, #32
 80073e4:	4a05      	ldr	r2, [pc, #20]	; (80073fc <FLASH_SetErrorCode+0xa8>)
 80073e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80073e8:	4b03      	ldr	r3, [pc, #12]	; (80073f8 <FLASH_SetErrorCode+0xa4>)
 80073ea:	2202      	movs	r2, #2
 80073ec:	60da      	str	r2, [r3, #12]
  }
}
 80073ee:	bf00      	nop
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	40023c00 	.word	0x40023c00
 80073fc:	2001805c 	.word	0x2001805c

08007400 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007412:	4b31      	ldr	r3, [pc, #196]	; (80074d8 <HAL_FLASHEx_Erase+0xd8>)
 8007414:	7e1b      	ldrb	r3, [r3, #24]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_FLASHEx_Erase+0x1e>
 800741a:	2302      	movs	r3, #2
 800741c:	e058      	b.n	80074d0 <HAL_FLASHEx_Erase+0xd0>
 800741e:	4b2e      	ldr	r3, [pc, #184]	; (80074d8 <HAL_FLASHEx_Erase+0xd8>)
 8007420:	2201      	movs	r2, #1
 8007422:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007424:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007428:	f7ff febc 	bl	80071a4 <FLASH_WaitForLastOperation>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d148      	bne.n	80074c8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	f04f 32ff 	mov.w	r2, #4294967295
 800743c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d115      	bne.n	8007472 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	b2da      	uxtb	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f000 f844 	bl	80074e0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007458:	f24c 3050 	movw	r0, #50000	; 0xc350
 800745c:	f7ff fea2 	bl	80071a4 <FLASH_WaitForLastOperation>
 8007460:	4603      	mov	r3, r0
 8007462:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007464:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <HAL_FLASHEx_Erase+0xdc>)
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	4a1c      	ldr	r2, [pc, #112]	; (80074dc <HAL_FLASHEx_Erase+0xdc>)
 800746a:	f023 0304 	bic.w	r3, r3, #4
 800746e:	6113      	str	r3, [r2, #16]
 8007470:	e028      	b.n	80074c4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	60bb      	str	r3, [r7, #8]
 8007478:	e01c      	b.n	80074b4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	4619      	mov	r1, r3
 8007482:	68b8      	ldr	r0, [r7, #8]
 8007484:	f000 f850 	bl	8007528 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007488:	f24c 3050 	movw	r0, #50000	; 0xc350
 800748c:	f7ff fe8a 	bl	80071a4 <FLASH_WaitForLastOperation>
 8007490:	4603      	mov	r3, r0
 8007492:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007494:	4b11      	ldr	r3, [pc, #68]	; (80074dc <HAL_FLASHEx_Erase+0xdc>)
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	4a10      	ldr	r2, [pc, #64]	; (80074dc <HAL_FLASHEx_Erase+0xdc>)
 800749a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800749e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	601a      	str	r2, [r3, #0]
          break;
 80074ac:	e00a      	b.n	80074c4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	3301      	adds	r3, #1
 80074b2:	60bb      	str	r3, [r7, #8]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d3da      	bcc.n	800747a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80074c4:	f000 f878 	bl	80075b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80074c8:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <HAL_FLASHEx_Erase+0xd8>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	761a      	strb	r2, [r3, #24]

  return status;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	2001805c 	.word	0x2001805c
 80074dc:	40023c00 	.word	0x40023c00

080074e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	6039      	str	r1, [r7, #0]
 80074ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074ec:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <FLASH_MassErase+0x44>)
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <FLASH_MassErase+0x44>)
 80074f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80074f8:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <FLASH_MassErase+0x44>)
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	4a09      	ldr	r2, [pc, #36]	; (8007524 <FLASH_MassErase+0x44>)
 80074fe:	f043 0304 	orr.w	r3, r3, #4
 8007502:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007504:	4b07      	ldr	r3, [pc, #28]	; (8007524 <FLASH_MassErase+0x44>)
 8007506:	691a      	ldr	r2, [r3, #16]
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	4313      	orrs	r3, r2
 800750e:	4a05      	ldr	r2, [pc, #20]	; (8007524 <FLASH_MassErase+0x44>)
 8007510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007514:	6113      	str	r3, [r2, #16]
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	40023c00 	.word	0x40023c00

08007528 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d102      	bne.n	8007544 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	e010      	b.n	8007566 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d103      	bne.n	8007552 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800754a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	e009      	b.n	8007566 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d103      	bne.n	8007560 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	e002      	b.n	8007566 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007560:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007564:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007566:	4b13      	ldr	r3, [pc, #76]	; (80075b4 <FLASH_Erase_Sector+0x8c>)
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <FLASH_Erase_Sector+0x8c>)
 800756c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007570:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007572:	4b10      	ldr	r3, [pc, #64]	; (80075b4 <FLASH_Erase_Sector+0x8c>)
 8007574:	691a      	ldr	r2, [r3, #16]
 8007576:	490f      	ldr	r1, [pc, #60]	; (80075b4 <FLASH_Erase_Sector+0x8c>)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800757e:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <FLASH_Erase_Sector+0x8c>)
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	4a0c      	ldr	r2, [pc, #48]	; (80075b4 <FLASH_Erase_Sector+0x8c>)
 8007584:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007588:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800758a:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <FLASH_Erase_Sector+0x8c>)
 800758c:	691a      	ldr	r2, [r3, #16]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	00db      	lsls	r3, r3, #3
 8007592:	4313      	orrs	r3, r2
 8007594:	4a07      	ldr	r2, [pc, #28]	; (80075b4 <FLASH_Erase_Sector+0x8c>)
 8007596:	f043 0302 	orr.w	r3, r3, #2
 800759a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <FLASH_Erase_Sector+0x8c>)
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	4a04      	ldr	r2, [pc, #16]	; (80075b4 <FLASH_Erase_Sector+0x8c>)
 80075a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a6:	6113      	str	r3, [r2, #16]
}
 80075a8:	bf00      	nop
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	40023c00 	.word	0x40023c00

080075b8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80075bc:	4b20      	ldr	r3, [pc, #128]	; (8007640 <FLASH_FlushCaches+0x88>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d017      	beq.n	80075f8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80075c8:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <FLASH_FlushCaches+0x88>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a1c      	ldr	r2, [pc, #112]	; (8007640 <FLASH_FlushCaches+0x88>)
 80075ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075d2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80075d4:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <FLASH_FlushCaches+0x88>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a19      	ldr	r2, [pc, #100]	; (8007640 <FLASH_FlushCaches+0x88>)
 80075da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	4b17      	ldr	r3, [pc, #92]	; (8007640 <FLASH_FlushCaches+0x88>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a16      	ldr	r2, [pc, #88]	; (8007640 <FLASH_FlushCaches+0x88>)
 80075e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075ea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80075ec:	4b14      	ldr	r3, [pc, #80]	; (8007640 <FLASH_FlushCaches+0x88>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a13      	ldr	r2, [pc, #76]	; (8007640 <FLASH_FlushCaches+0x88>)
 80075f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80075f6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80075f8:	4b11      	ldr	r3, [pc, #68]	; (8007640 <FLASH_FlushCaches+0x88>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007600:	2b00      	cmp	r3, #0
 8007602:	d017      	beq.n	8007634 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007604:	4b0e      	ldr	r3, [pc, #56]	; (8007640 <FLASH_FlushCaches+0x88>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a0d      	ldr	r2, [pc, #52]	; (8007640 <FLASH_FlushCaches+0x88>)
 800760a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800760e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <FLASH_FlushCaches+0x88>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <FLASH_FlushCaches+0x88>)
 8007616:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	4b08      	ldr	r3, [pc, #32]	; (8007640 <FLASH_FlushCaches+0x88>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a07      	ldr	r2, [pc, #28]	; (8007640 <FLASH_FlushCaches+0x88>)
 8007622:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007626:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <FLASH_FlushCaches+0x88>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a04      	ldr	r2, [pc, #16]	; (8007640 <FLASH_FlushCaches+0x88>)
 800762e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007632:	6013      	str	r3, [r2, #0]
  }
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40023c00 	.word	0x40023c00

08007644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007644:	b480      	push	{r7}
 8007646:	b089      	sub	sp, #36	; 0x24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800764e:	2300      	movs	r3, #0
 8007650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007652:	2300      	movs	r3, #0
 8007654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007656:	2300      	movs	r3, #0
 8007658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800765a:	2300      	movs	r3, #0
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	e16b      	b.n	8007938 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007660:	2201      	movs	r2, #1
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	fa02 f303 	lsl.w	r3, r2, r3
 8007668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4013      	ands	r3, r2
 8007672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	429a      	cmp	r2, r3
 800767a:	f040 815a 	bne.w	8007932 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	2b01      	cmp	r3, #1
 8007688:	d005      	beq.n	8007696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007692:	2b02      	cmp	r3, #2
 8007694:	d130      	bne.n	80076f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	2203      	movs	r2, #3
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43db      	mvns	r3, r3
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	4013      	ands	r3, r2
 80076ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68da      	ldr	r2, [r3, #12]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	4313      	orrs	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076cc:	2201      	movs	r2, #1
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	43db      	mvns	r3, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4013      	ands	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	091b      	lsrs	r3, r3, #4
 80076e2:	f003 0201 	and.w	r2, r3, #1
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f003 0303 	and.w	r3, r3, #3
 8007700:	2b03      	cmp	r3, #3
 8007702:	d017      	beq.n	8007734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	2203      	movs	r2, #3
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	43db      	mvns	r3, r3
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	4013      	ands	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	4313      	orrs	r3, r2
 800772c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d123      	bne.n	8007788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	08da      	lsrs	r2, r3, #3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3208      	adds	r2, #8
 8007748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	220f      	movs	r2, #15
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	43db      	mvns	r3, r3
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	4013      	ands	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f003 0307 	and.w	r3, r3, #7
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	fa02 f303 	lsl.w	r3, r2, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4313      	orrs	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	08da      	lsrs	r2, r3, #3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	3208      	adds	r2, #8
 8007782:	69b9      	ldr	r1, [r7, #24]
 8007784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	005b      	lsls	r3, r3, #1
 8007792:	2203      	movs	r2, #3
 8007794:	fa02 f303 	lsl.w	r3, r2, r3
 8007798:	43db      	mvns	r3, r3
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	4013      	ands	r3, r2
 800779e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f003 0203 	and.w	r2, r3, #3
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	fa02 f303 	lsl.w	r3, r2, r3
 80077b0:	69ba      	ldr	r2, [r7, #24]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80b4 	beq.w	8007932 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	4b5f      	ldr	r3, [pc, #380]	; (800794c <HAL_GPIO_Init+0x308>)
 80077d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d2:	4a5e      	ldr	r2, [pc, #376]	; (800794c <HAL_GPIO_Init+0x308>)
 80077d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077d8:	6453      	str	r3, [r2, #68]	; 0x44
 80077da:	4b5c      	ldr	r3, [pc, #368]	; (800794c <HAL_GPIO_Init+0x308>)
 80077dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077e6:	4a5a      	ldr	r2, [pc, #360]	; (8007950 <HAL_GPIO_Init+0x30c>)
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	089b      	lsrs	r3, r3, #2
 80077ec:	3302      	adds	r3, #2
 80077ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	220f      	movs	r2, #15
 80077fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007802:	43db      	mvns	r3, r3
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	4013      	ands	r3, r2
 8007808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a51      	ldr	r2, [pc, #324]	; (8007954 <HAL_GPIO_Init+0x310>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d02b      	beq.n	800786a <HAL_GPIO_Init+0x226>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a50      	ldr	r2, [pc, #320]	; (8007958 <HAL_GPIO_Init+0x314>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d025      	beq.n	8007866 <HAL_GPIO_Init+0x222>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a4f      	ldr	r2, [pc, #316]	; (800795c <HAL_GPIO_Init+0x318>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d01f      	beq.n	8007862 <HAL_GPIO_Init+0x21e>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a4e      	ldr	r2, [pc, #312]	; (8007960 <HAL_GPIO_Init+0x31c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d019      	beq.n	800785e <HAL_GPIO_Init+0x21a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a4d      	ldr	r2, [pc, #308]	; (8007964 <HAL_GPIO_Init+0x320>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d013      	beq.n	800785a <HAL_GPIO_Init+0x216>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a4c      	ldr	r2, [pc, #304]	; (8007968 <HAL_GPIO_Init+0x324>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d00d      	beq.n	8007856 <HAL_GPIO_Init+0x212>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a4b      	ldr	r2, [pc, #300]	; (800796c <HAL_GPIO_Init+0x328>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d007      	beq.n	8007852 <HAL_GPIO_Init+0x20e>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a4a      	ldr	r2, [pc, #296]	; (8007970 <HAL_GPIO_Init+0x32c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d101      	bne.n	800784e <HAL_GPIO_Init+0x20a>
 800784a:	2307      	movs	r3, #7
 800784c:	e00e      	b.n	800786c <HAL_GPIO_Init+0x228>
 800784e:	2308      	movs	r3, #8
 8007850:	e00c      	b.n	800786c <HAL_GPIO_Init+0x228>
 8007852:	2306      	movs	r3, #6
 8007854:	e00a      	b.n	800786c <HAL_GPIO_Init+0x228>
 8007856:	2305      	movs	r3, #5
 8007858:	e008      	b.n	800786c <HAL_GPIO_Init+0x228>
 800785a:	2304      	movs	r3, #4
 800785c:	e006      	b.n	800786c <HAL_GPIO_Init+0x228>
 800785e:	2303      	movs	r3, #3
 8007860:	e004      	b.n	800786c <HAL_GPIO_Init+0x228>
 8007862:	2302      	movs	r3, #2
 8007864:	e002      	b.n	800786c <HAL_GPIO_Init+0x228>
 8007866:	2301      	movs	r3, #1
 8007868:	e000      	b.n	800786c <HAL_GPIO_Init+0x228>
 800786a:	2300      	movs	r3, #0
 800786c:	69fa      	ldr	r2, [r7, #28]
 800786e:	f002 0203 	and.w	r2, r2, #3
 8007872:	0092      	lsls	r2, r2, #2
 8007874:	4093      	lsls	r3, r2
 8007876:	69ba      	ldr	r2, [r7, #24]
 8007878:	4313      	orrs	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800787c:	4934      	ldr	r1, [pc, #208]	; (8007950 <HAL_GPIO_Init+0x30c>)
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	089b      	lsrs	r3, r3, #2
 8007882:	3302      	adds	r3, #2
 8007884:	69ba      	ldr	r2, [r7, #24]
 8007886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800788a:	4b3a      	ldr	r3, [pc, #232]	; (8007974 <HAL_GPIO_Init+0x330>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	43db      	mvns	r3, r3
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	4013      	ands	r3, r2
 8007898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80078a6:	69ba      	ldr	r2, [r7, #24]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80078ae:	4a31      	ldr	r2, [pc, #196]	; (8007974 <HAL_GPIO_Init+0x330>)
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80078b4:	4b2f      	ldr	r3, [pc, #188]	; (8007974 <HAL_GPIO_Init+0x330>)
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	43db      	mvns	r3, r3
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	4013      	ands	r3, r2
 80078c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80078d8:	4a26      	ldr	r2, [pc, #152]	; (8007974 <HAL_GPIO_Init+0x330>)
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078de:	4b25      	ldr	r3, [pc, #148]	; (8007974 <HAL_GPIO_Init+0x330>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	43db      	mvns	r3, r3
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	4013      	ands	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007902:	4a1c      	ldr	r2, [pc, #112]	; (8007974 <HAL_GPIO_Init+0x330>)
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007908:	4b1a      	ldr	r3, [pc, #104]	; (8007974 <HAL_GPIO_Init+0x330>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	43db      	mvns	r3, r3
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	4013      	ands	r3, r2
 8007916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	4313      	orrs	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800792c:	4a11      	ldr	r2, [pc, #68]	; (8007974 <HAL_GPIO_Init+0x330>)
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	3301      	adds	r3, #1
 8007936:	61fb      	str	r3, [r7, #28]
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b0f      	cmp	r3, #15
 800793c:	f67f ae90 	bls.w	8007660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007940:	bf00      	nop
 8007942:	3724      	adds	r7, #36	; 0x24
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	40023800 	.word	0x40023800
 8007950:	40013800 	.word	0x40013800
 8007954:	40020000 	.word	0x40020000
 8007958:	40020400 	.word	0x40020400
 800795c:	40020800 	.word	0x40020800
 8007960:	40020c00 	.word	0x40020c00
 8007964:	40021000 	.word	0x40021000
 8007968:	40021400 	.word	0x40021400
 800796c:	40021800 	.word	0x40021800
 8007970:	40021c00 	.word	0x40021c00
 8007974:	40013c00 	.word	0x40013c00

08007978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	887b      	ldrh	r3, [r7, #2]
 800798a:	4013      	ands	r3, r2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007990:	2301      	movs	r3, #1
 8007992:	73fb      	strb	r3, [r7, #15]
 8007994:	e001      	b.n	800799a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007996:	2300      	movs	r3, #0
 8007998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800799a:	7bfb      	ldrb	r3, [r7, #15]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	807b      	strh	r3, [r7, #2]
 80079b4:	4613      	mov	r3, r2
 80079b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079b8:	787b      	ldrb	r3, [r7, #1]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079be:	887a      	ldrh	r2, [r7, #2]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80079c4:	e003      	b.n	80079ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80079c6:	887b      	ldrh	r3, [r7, #2]
 80079c8:	041a      	lsls	r2, r3, #16
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	619a      	str	r2, [r3, #24]
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e11f      	b.n	8007c2e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d106      	bne.n	8007a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7fc fd7c 	bl	8004500 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2224      	movs	r2, #36	; 0x24
 8007a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0201 	bic.w	r2, r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007a40:	f000 fd44 	bl	80084cc <HAL_RCC_GetPCLK1Freq>
 8007a44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	4a7b      	ldr	r2, [pc, #492]	; (8007c38 <HAL_I2C_Init+0x25c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d807      	bhi.n	8007a60 <HAL_I2C_Init+0x84>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4a7a      	ldr	r2, [pc, #488]	; (8007c3c <HAL_I2C_Init+0x260>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	bf94      	ite	ls
 8007a58:	2301      	movls	r3, #1
 8007a5a:	2300      	movhi	r3, #0
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	e006      	b.n	8007a6e <HAL_I2C_Init+0x92>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4a77      	ldr	r2, [pc, #476]	; (8007c40 <HAL_I2C_Init+0x264>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	bf94      	ite	ls
 8007a68:	2301      	movls	r3, #1
 8007a6a:	2300      	movhi	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e0db      	b.n	8007c2e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4a72      	ldr	r2, [pc, #456]	; (8007c44 <HAL_I2C_Init+0x268>)
 8007a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7e:	0c9b      	lsrs	r3, r3, #18
 8007a80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	4a64      	ldr	r2, [pc, #400]	; (8007c38 <HAL_I2C_Init+0x25c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d802      	bhi.n	8007ab0 <HAL_I2C_Init+0xd4>
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	3301      	adds	r3, #1
 8007aae:	e009      	b.n	8007ac4 <HAL_I2C_Init+0xe8>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007ab6:	fb02 f303 	mul.w	r3, r2, r3
 8007aba:	4a63      	ldr	r2, [pc, #396]	; (8007c48 <HAL_I2C_Init+0x26c>)
 8007abc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac0:	099b      	lsrs	r3, r3, #6
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007ad6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	4956      	ldr	r1, [pc, #344]	; (8007c38 <HAL_I2C_Init+0x25c>)
 8007ae0:	428b      	cmp	r3, r1
 8007ae2:	d80d      	bhi.n	8007b00 <HAL_I2C_Init+0x124>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	1e59      	subs	r1, r3, #1
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8007af2:	3301      	adds	r3, #1
 8007af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	bf38      	it	cc
 8007afc:	2304      	movcc	r3, #4
 8007afe:	e04f      	b.n	8007ba0 <HAL_I2C_Init+0x1c4>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d111      	bne.n	8007b2c <HAL_I2C_Init+0x150>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	1e58      	subs	r0, r3, #1
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6859      	ldr	r1, [r3, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	005b      	lsls	r3, r3, #1
 8007b14:	440b      	add	r3, r1
 8007b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bf0c      	ite	eq
 8007b24:	2301      	moveq	r3, #1
 8007b26:	2300      	movne	r3, #0
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	e012      	b.n	8007b52 <HAL_I2C_Init+0x176>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	1e58      	subs	r0, r3, #1
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6859      	ldr	r1, [r3, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	440b      	add	r3, r1
 8007b3a:	0099      	lsls	r1, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b42:	3301      	adds	r3, #1
 8007b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bf0c      	ite	eq
 8007b4c:	2301      	moveq	r3, #1
 8007b4e:	2300      	movne	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_I2C_Init+0x17e>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e022      	b.n	8007ba0 <HAL_I2C_Init+0x1c4>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10e      	bne.n	8007b80 <HAL_I2C_Init+0x1a4>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1e58      	subs	r0, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6859      	ldr	r1, [r3, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	440b      	add	r3, r1
 8007b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b74:	3301      	adds	r3, #1
 8007b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b7e:	e00f      	b.n	8007ba0 <HAL_I2C_Init+0x1c4>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	1e58      	subs	r0, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6859      	ldr	r1, [r3, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	440b      	add	r3, r1
 8007b8e:	0099      	lsls	r1, r3, #2
 8007b90:	440b      	add	r3, r1
 8007b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b96:	3301      	adds	r3, #1
 8007b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ba0:	6879      	ldr	r1, [r7, #4]
 8007ba2:	6809      	ldr	r1, [r1, #0]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69da      	ldr	r2, [r3, #28]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007bce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6911      	ldr	r1, [r2, #16]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	68d2      	ldr	r2, [r2, #12]
 8007bda:	4311      	orrs	r1, r2
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	430b      	orrs	r3, r1
 8007be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	695a      	ldr	r2, [r3, #20]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	000186a0 	.word	0x000186a0
 8007c3c:	001e847f 	.word	0x001e847f
 8007c40:	003d08ff 	.word	0x003d08ff
 8007c44:	431bde83 	.word	0x431bde83
 8007c48:	10624dd3 	.word	0x10624dd3

08007c4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e264      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d075      	beq.n	8007d56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c6a:	4ba3      	ldr	r3, [pc, #652]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 030c 	and.w	r3, r3, #12
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d00c      	beq.n	8007c90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c76:	4ba0      	ldr	r3, [pc, #640]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c7e:	2b08      	cmp	r3, #8
 8007c80:	d112      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c82:	4b9d      	ldr	r3, [pc, #628]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c8e:	d10b      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c90:	4b99      	ldr	r3, [pc, #612]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d05b      	beq.n	8007d54 <HAL_RCC_OscConfig+0x108>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d157      	bne.n	8007d54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e23f      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb0:	d106      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x74>
 8007cb2:	4b91      	ldr	r3, [pc, #580]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a90      	ldr	r2, [pc, #576]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	e01d      	b.n	8007cfc <HAL_RCC_OscConfig+0xb0>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cc8:	d10c      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x98>
 8007cca:	4b8b      	ldr	r3, [pc, #556]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a8a      	ldr	r2, [pc, #552]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007cd4:	6013      	str	r3, [r2, #0]
 8007cd6:	4b88      	ldr	r3, [pc, #544]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a87      	ldr	r2, [pc, #540]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	e00b      	b.n	8007cfc <HAL_RCC_OscConfig+0xb0>
 8007ce4:	4b84      	ldr	r3, [pc, #528]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a83      	ldr	r2, [pc, #524]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cee:	6013      	str	r3, [r2, #0]
 8007cf0:	4b81      	ldr	r3, [pc, #516]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a80      	ldr	r2, [pc, #512]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d013      	beq.n	8007d2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d04:	f7fe f848 	bl	8005d98 <HAL_GetTick>
 8007d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d0a:	e008      	b.n	8007d1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d0c:	f7fe f844 	bl	8005d98 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	2b64      	cmp	r3, #100	; 0x64
 8007d18:	d901      	bls.n	8007d1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e204      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d1e:	4b76      	ldr	r3, [pc, #472]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0f0      	beq.n	8007d0c <HAL_RCC_OscConfig+0xc0>
 8007d2a:	e014      	b.n	8007d56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d2c:	f7fe f834 	bl	8005d98 <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d34:	f7fe f830 	bl	8005d98 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b64      	cmp	r3, #100	; 0x64
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e1f0      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d46:	4b6c      	ldr	r3, [pc, #432]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f0      	bne.n	8007d34 <HAL_RCC_OscConfig+0xe8>
 8007d52:	e000      	b.n	8007d56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d063      	beq.n	8007e2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d62:	4b65      	ldr	r3, [pc, #404]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f003 030c 	and.w	r3, r3, #12
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d6e:	4b62      	ldr	r3, [pc, #392]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d76:	2b08      	cmp	r3, #8
 8007d78:	d11c      	bne.n	8007db4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d7a:	4b5f      	ldr	r3, [pc, #380]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d116      	bne.n	8007db4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d86:	4b5c      	ldr	r3, [pc, #368]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <HAL_RCC_OscConfig+0x152>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d001      	beq.n	8007d9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e1c4      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d9e:	4b56      	ldr	r3, [pc, #344]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	4952      	ldr	r1, [pc, #328]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007db2:	e03a      	b.n	8007e2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d020      	beq.n	8007dfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dbc:	4b4f      	ldr	r3, [pc, #316]	; (8007efc <HAL_RCC_OscConfig+0x2b0>)
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc2:	f7fd ffe9 	bl	8005d98 <HAL_GetTick>
 8007dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dc8:	e008      	b.n	8007ddc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dca:	f7fd ffe5 	bl	8005d98 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d901      	bls.n	8007ddc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e1a5      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ddc:	4b46      	ldr	r3, [pc, #280]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d0f0      	beq.n	8007dca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de8:	4b43      	ldr	r3, [pc, #268]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	00db      	lsls	r3, r3, #3
 8007df6:	4940      	ldr	r1, [pc, #256]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	600b      	str	r3, [r1, #0]
 8007dfc:	e015      	b.n	8007e2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dfe:	4b3f      	ldr	r3, [pc, #252]	; (8007efc <HAL_RCC_OscConfig+0x2b0>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e04:	f7fd ffc8 	bl	8005d98 <HAL_GetTick>
 8007e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e0a:	e008      	b.n	8007e1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e0c:	f7fd ffc4 	bl	8005d98 <HAL_GetTick>
 8007e10:	4602      	mov	r2, r0
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d901      	bls.n	8007e1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e184      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e1e:	4b36      	ldr	r3, [pc, #216]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0302 	and.w	r3, r3, #2
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1f0      	bne.n	8007e0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0308 	and.w	r3, r3, #8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d030      	beq.n	8007e98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d016      	beq.n	8007e6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e3e:	4b30      	ldr	r3, [pc, #192]	; (8007f00 <HAL_RCC_OscConfig+0x2b4>)
 8007e40:	2201      	movs	r2, #1
 8007e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e44:	f7fd ffa8 	bl	8005d98 <HAL_GetTick>
 8007e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e4a:	e008      	b.n	8007e5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e4c:	f7fd ffa4 	bl	8005d98 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d901      	bls.n	8007e5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e164      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e5e:	4b26      	ldr	r3, [pc, #152]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0f0      	beq.n	8007e4c <HAL_RCC_OscConfig+0x200>
 8007e6a:	e015      	b.n	8007e98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e6c:	4b24      	ldr	r3, [pc, #144]	; (8007f00 <HAL_RCC_OscConfig+0x2b4>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e72:	f7fd ff91 	bl	8005d98 <HAL_GetTick>
 8007e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e78:	e008      	b.n	8007e8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e7a:	f7fd ff8d 	bl	8005d98 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d901      	bls.n	8007e8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e14d      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1f0      	bne.n	8007e7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0304 	and.w	r3, r3, #4
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80a0 	beq.w	8007fe6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eaa:	4b13      	ldr	r3, [pc, #76]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10f      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60bb      	str	r3, [r7, #8]
 8007eba:	4b0f      	ldr	r3, [pc, #60]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	4a0e      	ldr	r2, [pc, #56]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <HAL_RCC_OscConfig+0x2ac>)
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ece:	60bb      	str	r3, [r7, #8]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d121      	bne.n	8007f26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ee2:	4b08      	ldr	r3, [pc, #32]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a07      	ldr	r2, [pc, #28]	; (8007f04 <HAL_RCC_OscConfig+0x2b8>)
 8007ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eee:	f7fd ff53 	bl	8005d98 <HAL_GetTick>
 8007ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ef4:	e011      	b.n	8007f1a <HAL_RCC_OscConfig+0x2ce>
 8007ef6:	bf00      	nop
 8007ef8:	40023800 	.word	0x40023800
 8007efc:	42470000 	.word	0x42470000
 8007f00:	42470e80 	.word	0x42470e80
 8007f04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f08:	f7fd ff46 	bl	8005d98 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e106      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f1a:	4b85      	ldr	r3, [pc, #532]	; (8008130 <HAL_RCC_OscConfig+0x4e4>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0f0      	beq.n	8007f08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d106      	bne.n	8007f3c <HAL_RCC_OscConfig+0x2f0>
 8007f2e:	4b81      	ldr	r3, [pc, #516]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f32:	4a80      	ldr	r2, [pc, #512]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	6713      	str	r3, [r2, #112]	; 0x70
 8007f3a:	e01c      	b.n	8007f76 <HAL_RCC_OscConfig+0x32a>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b05      	cmp	r3, #5
 8007f42:	d10c      	bne.n	8007f5e <HAL_RCC_OscConfig+0x312>
 8007f44:	4b7b      	ldr	r3, [pc, #492]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f48:	4a7a      	ldr	r2, [pc, #488]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f4a:	f043 0304 	orr.w	r3, r3, #4
 8007f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007f50:	4b78      	ldr	r3, [pc, #480]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f54:	4a77      	ldr	r2, [pc, #476]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f5c:	e00b      	b.n	8007f76 <HAL_RCC_OscConfig+0x32a>
 8007f5e:	4b75      	ldr	r3, [pc, #468]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	4a74      	ldr	r2, [pc, #464]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f64:	f023 0301 	bic.w	r3, r3, #1
 8007f68:	6713      	str	r3, [r2, #112]	; 0x70
 8007f6a:	4b72      	ldr	r3, [pc, #456]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6e:	4a71      	ldr	r2, [pc, #452]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f70:	f023 0304 	bic.w	r3, r3, #4
 8007f74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d015      	beq.n	8007faa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f7e:	f7fd ff0b 	bl	8005d98 <HAL_GetTick>
 8007f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f84:	e00a      	b.n	8007f9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f86:	f7fd ff07 	bl	8005d98 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d901      	bls.n	8007f9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e0c5      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f9c:	4b65      	ldr	r3, [pc, #404]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa0:	f003 0302 	and.w	r3, r3, #2
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0ee      	beq.n	8007f86 <HAL_RCC_OscConfig+0x33a>
 8007fa8:	e014      	b.n	8007fd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007faa:	f7fd fef5 	bl	8005d98 <HAL_GetTick>
 8007fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fb0:	e00a      	b.n	8007fc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fb2:	f7fd fef1 	bl	8005d98 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e0af      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fc8:	4b5a      	ldr	r3, [pc, #360]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fcc:	f003 0302 	and.w	r3, r3, #2
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1ee      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d105      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fda:	4b56      	ldr	r3, [pc, #344]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	4a55      	ldr	r2, [pc, #340]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fe4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f000 809b 	beq.w	8008126 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ff0:	4b50      	ldr	r3, [pc, #320]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f003 030c 	and.w	r3, r3, #12
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d05c      	beq.n	80080b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	2b02      	cmp	r3, #2
 8008002:	d141      	bne.n	8008088 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008004:	4b4c      	ldr	r3, [pc, #304]	; (8008138 <HAL_RCC_OscConfig+0x4ec>)
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800800a:	f7fd fec5 	bl	8005d98 <HAL_GetTick>
 800800e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008010:	e008      	b.n	8008024 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008012:	f7fd fec1 	bl	8005d98 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d901      	bls.n	8008024 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e081      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008024:	4b43      	ldr	r3, [pc, #268]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1f0      	bne.n	8008012 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	69da      	ldr	r2, [r3, #28]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	019b      	lsls	r3, r3, #6
 8008040:	431a      	orrs	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008046:	085b      	lsrs	r3, r3, #1
 8008048:	3b01      	subs	r3, #1
 800804a:	041b      	lsls	r3, r3, #16
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008052:	061b      	lsls	r3, r3, #24
 8008054:	4937      	ldr	r1, [pc, #220]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 8008056:	4313      	orrs	r3, r2
 8008058:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800805a:	4b37      	ldr	r3, [pc, #220]	; (8008138 <HAL_RCC_OscConfig+0x4ec>)
 800805c:	2201      	movs	r2, #1
 800805e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008060:	f7fd fe9a 	bl	8005d98 <HAL_GetTick>
 8008064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008066:	e008      	b.n	800807a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008068:	f7fd fe96 	bl	8005d98 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e056      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800807a:	4b2e      	ldr	r3, [pc, #184]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0f0      	beq.n	8008068 <HAL_RCC_OscConfig+0x41c>
 8008086:	e04e      	b.n	8008126 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008088:	4b2b      	ldr	r3, [pc, #172]	; (8008138 <HAL_RCC_OscConfig+0x4ec>)
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800808e:	f7fd fe83 	bl	8005d98 <HAL_GetTick>
 8008092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008094:	e008      	b.n	80080a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008096:	f7fd fe7f 	bl	8005d98 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d901      	bls.n	80080a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e03f      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080a8:	4b22      	ldr	r3, [pc, #136]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1f0      	bne.n	8008096 <HAL_RCC_OscConfig+0x44a>
 80080b4:	e037      	b.n	8008126 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e032      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080c2:	4b1c      	ldr	r3, [pc, #112]	; (8008134 <HAL_RCC_OscConfig+0x4e8>)
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d028      	beq.n	8008122 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080da:	429a      	cmp	r2, r3
 80080dc:	d121      	bne.n	8008122 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d11a      	bne.n	8008122 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80080f2:	4013      	ands	r3, r2
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080f8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d111      	bne.n	8008122 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008108:	085b      	lsrs	r3, r3, #1
 800810a:	3b01      	subs	r3, #1
 800810c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800810e:	429a      	cmp	r2, r3
 8008110:	d107      	bne.n	8008122 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800811e:	429a      	cmp	r2, r3
 8008120:	d001      	beq.n	8008126 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e000      	b.n	8008128 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40007000 	.word	0x40007000
 8008134:	40023800 	.word	0x40023800
 8008138:	42470060 	.word	0x42470060

0800813c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e0cc      	b.n	80082ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008150:	4b68      	ldr	r3, [pc, #416]	; (80082f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d90c      	bls.n	8008178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800815e:	4b65      	ldr	r3, [pc, #404]	; (80082f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008166:	4b63      	ldr	r3, [pc, #396]	; (80082f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0307 	and.w	r3, r3, #7
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d001      	beq.n	8008178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e0b8      	b.n	80082ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	2b00      	cmp	r3, #0
 8008182:	d020      	beq.n	80081c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0304 	and.w	r3, r3, #4
 800818c:	2b00      	cmp	r3, #0
 800818e:	d005      	beq.n	800819c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008190:	4b59      	ldr	r3, [pc, #356]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	4a58      	ldr	r2, [pc, #352]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800819a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0308 	and.w	r3, r3, #8
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d005      	beq.n	80081b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081a8:	4b53      	ldr	r3, [pc, #332]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	4a52      	ldr	r2, [pc, #328]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 80081ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081b4:	4b50      	ldr	r3, [pc, #320]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	494d      	ldr	r1, [pc, #308]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d044      	beq.n	800825c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d107      	bne.n	80081ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081da:	4b47      	ldr	r3, [pc, #284]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d119      	bne.n	800821a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e07f      	b.n	80082ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d003      	beq.n	80081fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d107      	bne.n	800820a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081fa:	4b3f      	ldr	r3, [pc, #252]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d109      	bne.n	800821a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e06f      	b.n	80082ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800820a:	4b3b      	ldr	r3, [pc, #236]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0302 	and.w	r3, r3, #2
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e067      	b.n	80082ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800821a:	4b37      	ldr	r3, [pc, #220]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f023 0203 	bic.w	r2, r3, #3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	4934      	ldr	r1, [pc, #208]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008228:	4313      	orrs	r3, r2
 800822a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800822c:	f7fd fdb4 	bl	8005d98 <HAL_GetTick>
 8008230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008232:	e00a      	b.n	800824a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008234:	f7fd fdb0 	bl	8005d98 <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008242:	4293      	cmp	r3, r2
 8008244:	d901      	bls.n	800824a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e04f      	b.n	80082ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800824a:	4b2b      	ldr	r3, [pc, #172]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	f003 020c 	and.w	r2, r3, #12
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	429a      	cmp	r2, r3
 800825a:	d1eb      	bne.n	8008234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800825c:	4b25      	ldr	r3, [pc, #148]	; (80082f4 <HAL_RCC_ClockConfig+0x1b8>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0307 	and.w	r3, r3, #7
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d20c      	bcs.n	8008284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800826a:	4b22      	ldr	r3, [pc, #136]	; (80082f4 <HAL_RCC_ClockConfig+0x1b8>)
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008272:	4b20      	ldr	r3, [pc, #128]	; (80082f4 <HAL_RCC_ClockConfig+0x1b8>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d001      	beq.n	8008284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e032      	b.n	80082ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b00      	cmp	r3, #0
 800828e:	d008      	beq.n	80082a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008290:	4b19      	ldr	r3, [pc, #100]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	4916      	ldr	r1, [pc, #88]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0308 	and.w	r3, r3, #8
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082ae:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	490e      	ldr	r1, [pc, #56]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082c2:	f000 f821 	bl	8008308 <HAL_RCC_GetSysClockFreq>
 80082c6:	4601      	mov	r1, r0
 80082c8:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <HAL_RCC_ClockConfig+0x1bc>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	091b      	lsrs	r3, r3, #4
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	4a0a      	ldr	r2, [pc, #40]	; (80082fc <HAL_RCC_ClockConfig+0x1c0>)
 80082d4:	5cd3      	ldrb	r3, [r2, r3]
 80082d6:	fa21 f303 	lsr.w	r3, r1, r3
 80082da:	4a09      	ldr	r2, [pc, #36]	; (8008300 <HAL_RCC_ClockConfig+0x1c4>)
 80082dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80082de:	4b09      	ldr	r3, [pc, #36]	; (8008304 <HAL_RCC_ClockConfig+0x1c8>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fd fd14 	bl	8005d10 <HAL_InitTick>

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	40023c00 	.word	0x40023c00
 80082f8:	40023800 	.word	0x40023800
 80082fc:	08010310 	.word	0x08010310
 8008300:	20000000 	.word	0x20000000
 8008304:	20000004 	.word	0x20000004

08008308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	607b      	str	r3, [r7, #4]
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	2300      	movs	r3, #0
 8008318:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800831a:	2300      	movs	r3, #0
 800831c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800831e:	4b63      	ldr	r3, [pc, #396]	; (80084ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 030c 	and.w	r3, r3, #12
 8008326:	2b04      	cmp	r3, #4
 8008328:	d007      	beq.n	800833a <HAL_RCC_GetSysClockFreq+0x32>
 800832a:	2b08      	cmp	r3, #8
 800832c:	d008      	beq.n	8008340 <HAL_RCC_GetSysClockFreq+0x38>
 800832e:	2b00      	cmp	r3, #0
 8008330:	f040 80b4 	bne.w	800849c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008334:	4b5e      	ldr	r3, [pc, #376]	; (80084b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008336:	60bb      	str	r3, [r7, #8]
       break;
 8008338:	e0b3      	b.n	80084a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800833a:	4b5d      	ldr	r3, [pc, #372]	; (80084b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800833c:	60bb      	str	r3, [r7, #8]
      break;
 800833e:	e0b0      	b.n	80084a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008340:	4b5a      	ldr	r3, [pc, #360]	; (80084ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008348:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800834a:	4b58      	ldr	r3, [pc, #352]	; (80084ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d04a      	beq.n	80083ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008356:	4b55      	ldr	r3, [pc, #340]	; (80084ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	099b      	lsrs	r3, r3, #6
 800835c:	f04f 0400 	mov.w	r4, #0
 8008360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	ea03 0501 	and.w	r5, r3, r1
 800836c:	ea04 0602 	and.w	r6, r4, r2
 8008370:	4629      	mov	r1, r5
 8008372:	4632      	mov	r2, r6
 8008374:	f04f 0300 	mov.w	r3, #0
 8008378:	f04f 0400 	mov.w	r4, #0
 800837c:	0154      	lsls	r4, r2, #5
 800837e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008382:	014b      	lsls	r3, r1, #5
 8008384:	4619      	mov	r1, r3
 8008386:	4622      	mov	r2, r4
 8008388:	1b49      	subs	r1, r1, r5
 800838a:	eb62 0206 	sbc.w	r2, r2, r6
 800838e:	f04f 0300 	mov.w	r3, #0
 8008392:	f04f 0400 	mov.w	r4, #0
 8008396:	0194      	lsls	r4, r2, #6
 8008398:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800839c:	018b      	lsls	r3, r1, #6
 800839e:	1a5b      	subs	r3, r3, r1
 80083a0:	eb64 0402 	sbc.w	r4, r4, r2
 80083a4:	f04f 0100 	mov.w	r1, #0
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	00e2      	lsls	r2, r4, #3
 80083ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80083b2:	00d9      	lsls	r1, r3, #3
 80083b4:	460b      	mov	r3, r1
 80083b6:	4614      	mov	r4, r2
 80083b8:	195b      	adds	r3, r3, r5
 80083ba:	eb44 0406 	adc.w	r4, r4, r6
 80083be:	f04f 0100 	mov.w	r1, #0
 80083c2:	f04f 0200 	mov.w	r2, #0
 80083c6:	02a2      	lsls	r2, r4, #10
 80083c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80083cc:	0299      	lsls	r1, r3, #10
 80083ce:	460b      	mov	r3, r1
 80083d0:	4614      	mov	r4, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	4621      	mov	r1, r4
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f04f 0400 	mov.w	r4, #0
 80083dc:	461a      	mov	r2, r3
 80083de:	4623      	mov	r3, r4
 80083e0:	f7f8 fc52 	bl	8000c88 <__aeabi_uldivmod>
 80083e4:	4603      	mov	r3, r0
 80083e6:	460c      	mov	r4, r1
 80083e8:	60fb      	str	r3, [r7, #12]
 80083ea:	e049      	b.n	8008480 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083ec:	4b2f      	ldr	r3, [pc, #188]	; (80084ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	099b      	lsrs	r3, r3, #6
 80083f2:	f04f 0400 	mov.w	r4, #0
 80083f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	ea03 0501 	and.w	r5, r3, r1
 8008402:	ea04 0602 	and.w	r6, r4, r2
 8008406:	4629      	mov	r1, r5
 8008408:	4632      	mov	r2, r6
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	f04f 0400 	mov.w	r4, #0
 8008412:	0154      	lsls	r4, r2, #5
 8008414:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008418:	014b      	lsls	r3, r1, #5
 800841a:	4619      	mov	r1, r3
 800841c:	4622      	mov	r2, r4
 800841e:	1b49      	subs	r1, r1, r5
 8008420:	eb62 0206 	sbc.w	r2, r2, r6
 8008424:	f04f 0300 	mov.w	r3, #0
 8008428:	f04f 0400 	mov.w	r4, #0
 800842c:	0194      	lsls	r4, r2, #6
 800842e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008432:	018b      	lsls	r3, r1, #6
 8008434:	1a5b      	subs	r3, r3, r1
 8008436:	eb64 0402 	sbc.w	r4, r4, r2
 800843a:	f04f 0100 	mov.w	r1, #0
 800843e:	f04f 0200 	mov.w	r2, #0
 8008442:	00e2      	lsls	r2, r4, #3
 8008444:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008448:	00d9      	lsls	r1, r3, #3
 800844a:	460b      	mov	r3, r1
 800844c:	4614      	mov	r4, r2
 800844e:	195b      	adds	r3, r3, r5
 8008450:	eb44 0406 	adc.w	r4, r4, r6
 8008454:	f04f 0100 	mov.w	r1, #0
 8008458:	f04f 0200 	mov.w	r2, #0
 800845c:	02a2      	lsls	r2, r4, #10
 800845e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008462:	0299      	lsls	r1, r3, #10
 8008464:	460b      	mov	r3, r1
 8008466:	4614      	mov	r4, r2
 8008468:	4618      	mov	r0, r3
 800846a:	4621      	mov	r1, r4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f04f 0400 	mov.w	r4, #0
 8008472:	461a      	mov	r2, r3
 8008474:	4623      	mov	r3, r4
 8008476:	f7f8 fc07 	bl	8000c88 <__aeabi_uldivmod>
 800847a:	4603      	mov	r3, r0
 800847c:	460c      	mov	r4, r1
 800847e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	0c1b      	lsrs	r3, r3, #16
 8008486:	f003 0303 	and.w	r3, r3, #3
 800848a:	3301      	adds	r3, #1
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	fbb2 f3f3 	udiv	r3, r2, r3
 8008498:	60bb      	str	r3, [r7, #8]
      break;
 800849a:	e002      	b.n	80084a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800849c:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800849e:	60bb      	str	r3, [r7, #8]
      break;
 80084a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084a2:	68bb      	ldr	r3, [r7, #8]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ac:	40023800 	.word	0x40023800
 80084b0:	00f42400 	.word	0x00f42400

080084b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084b8:	4b03      	ldr	r3, [pc, #12]	; (80084c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80084ba:	681b      	ldr	r3, [r3, #0]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	20000000 	.word	0x20000000

080084cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80084d0:	f7ff fff0 	bl	80084b4 <HAL_RCC_GetHCLKFreq>
 80084d4:	4601      	mov	r1, r0
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	0a9b      	lsrs	r3, r3, #10
 80084dc:	f003 0307 	and.w	r3, r3, #7
 80084e0:	4a03      	ldr	r2, [pc, #12]	; (80084f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084e2:	5cd3      	ldrb	r3, [r2, r3]
 80084e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	40023800 	.word	0x40023800
 80084f0:	08010320 	.word	0x08010320

080084f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80084f8:	f7ff ffdc 	bl	80084b4 <HAL_RCC_GetHCLKFreq>
 80084fc:	4601      	mov	r1, r0
 80084fe:	4b05      	ldr	r3, [pc, #20]	; (8008514 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	0b5b      	lsrs	r3, r3, #13
 8008504:	f003 0307 	and.w	r3, r3, #7
 8008508:	4a03      	ldr	r2, [pc, #12]	; (8008518 <HAL_RCC_GetPCLK2Freq+0x24>)
 800850a:	5cd3      	ldrb	r3, [r2, r3]
 800850c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008510:	4618      	mov	r0, r3
 8008512:	bd80      	pop	{r7, pc}
 8008514:	40023800 	.word	0x40023800
 8008518:	08010320 	.word	0x08010320

0800851c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e07b      	b.n	8008626 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d108      	bne.n	8008548 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800853e:	d009      	beq.n	8008554 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	61da      	str	r2, [r3, #28]
 8008546:	e005      	b.n	8008554 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d106      	bne.n	8008574 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fc f80e 	bl	8004590 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800858a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800859c:	431a      	orrs	r2, r3
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a6:	431a      	orrs	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	431a      	orrs	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085c4:	431a      	orrs	r2, r3
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085ce:	431a      	orrs	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a1b      	ldr	r3, [r3, #32]
 80085d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d8:	ea42 0103 	orr.w	r1, r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	430a      	orrs	r2, r1
 80085ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	0c1b      	lsrs	r3, r3, #16
 80085f2:	f003 0104 	and.w	r1, r3, #4
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	f003 0210 	and.w	r2, r3, #16
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b088      	sub	sp, #32
 8008632:	af00      	add	r7, sp, #0
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	603b      	str	r3, [r7, #0]
 800863a:	4613      	mov	r3, r2
 800863c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008648:	2b01      	cmp	r3, #1
 800864a:	d101      	bne.n	8008650 <HAL_SPI_Transmit+0x22>
 800864c:	2302      	movs	r3, #2
 800864e:	e126      	b.n	800889e <HAL_SPI_Transmit+0x270>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008658:	f7fd fb9e 	bl	8005d98 <HAL_GetTick>
 800865c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800865e:	88fb      	ldrh	r3, [r7, #6]
 8008660:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b01      	cmp	r3, #1
 800866c:	d002      	beq.n	8008674 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800866e:	2302      	movs	r3, #2
 8008670:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008672:	e10b      	b.n	800888c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d002      	beq.n	8008680 <HAL_SPI_Transmit+0x52>
 800867a:	88fb      	ldrh	r3, [r7, #6]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008684:	e102      	b.n	800888c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2203      	movs	r2, #3
 800868a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	88fa      	ldrh	r2, [r7, #6]
 800869e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086cc:	d10f      	bne.n	80086ee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f8:	2b40      	cmp	r3, #64	; 0x40
 80086fa:	d007      	beq.n	800870c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800870a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008714:	d14b      	bne.n	80087ae <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <HAL_SPI_Transmit+0xf6>
 800871e:	8afb      	ldrh	r3, [r7, #22]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d13e      	bne.n	80087a2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008728:	881a      	ldrh	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008734:	1c9a      	adds	r2, r3, #2
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800873e:	b29b      	uxth	r3, r3
 8008740:	3b01      	subs	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008748:	e02b      	b.n	80087a2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b02      	cmp	r3, #2
 8008756:	d112      	bne.n	800877e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	881a      	ldrh	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	1c9a      	adds	r2, r3, #2
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008772:	b29b      	uxth	r3, r3
 8008774:	3b01      	subs	r3, #1
 8008776:	b29a      	uxth	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	86da      	strh	r2, [r3, #54]	; 0x36
 800877c:	e011      	b.n	80087a2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800877e:	f7fd fb0b 	bl	8005d98 <HAL_GetTick>
 8008782:	4602      	mov	r2, r0
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	1ad3      	subs	r3, r2, r3
 8008788:	683a      	ldr	r2, [r7, #0]
 800878a:	429a      	cmp	r2, r3
 800878c:	d803      	bhi.n	8008796 <HAL_SPI_Transmit+0x168>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008794:	d102      	bne.n	800879c <HAL_SPI_Transmit+0x16e>
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d102      	bne.n	80087a2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80087a0:	e074      	b.n	800888c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1ce      	bne.n	800874a <HAL_SPI_Transmit+0x11c>
 80087ac:	e04c      	b.n	8008848 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <HAL_SPI_Transmit+0x18e>
 80087b6:	8afb      	ldrh	r3, [r7, #22]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d140      	bne.n	800883e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	330c      	adds	r3, #12
 80087c6:	7812      	ldrb	r2, [r2, #0]
 80087c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087d8:	b29b      	uxth	r3, r3
 80087da:	3b01      	subs	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80087e2:	e02c      	b.n	800883e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f003 0302 	and.w	r3, r3, #2
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d113      	bne.n	800881a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	330c      	adds	r3, #12
 80087fc:	7812      	ldrb	r2, [r2, #0]
 80087fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800880e:	b29b      	uxth	r3, r3
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	86da      	strh	r2, [r3, #54]	; 0x36
 8008818:	e011      	b.n	800883e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800881a:	f7fd fabd 	bl	8005d98 <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d803      	bhi.n	8008832 <HAL_SPI_Transmit+0x204>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008830:	d102      	bne.n	8008838 <HAL_SPI_Transmit+0x20a>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d102      	bne.n	800883e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800883c:	e026      	b.n	800888c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008842:	b29b      	uxth	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1cd      	bne.n	80087e4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 fbcb 	bl	8008fe8 <SPI_EndRxTxTransaction>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2220      	movs	r2, #32
 800885c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10a      	bne.n	800887c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008866:	2300      	movs	r3, #0
 8008868:	613b      	str	r3, [r7, #16]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	613b      	str	r3, [r7, #16]
 800887a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	77fb      	strb	r3, [r7, #31]
 8008888:	e000      	b.n	800888c <HAL_SPI_Transmit+0x25e>
  }

error:
 800888a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800889c:	7ffb      	ldrb	r3, [r7, #31]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3720      	adds	r7, #32
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b088      	sub	sp, #32
 80088aa:	af02      	add	r7, sp, #8
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	603b      	str	r3, [r7, #0]
 80088b2:	4613      	mov	r3, r2
 80088b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088c2:	d112      	bne.n	80088ea <HAL_SPI_Receive+0x44>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10e      	bne.n	80088ea <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2204      	movs	r2, #4
 80088d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80088d4:	88fa      	ldrh	r2, [r7, #6]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	4613      	mov	r3, r2
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f8f1 	bl	8008ac8 <HAL_SPI_TransmitReceive>
 80088e6:	4603      	mov	r3, r0
 80088e8:	e0ea      	b.n	8008ac0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_SPI_Receive+0x52>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e0e3      	b.n	8008ac0 <HAL_SPI_Receive+0x21a>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008900:	f7fd fa4a 	bl	8005d98 <HAL_GetTick>
 8008904:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b01      	cmp	r3, #1
 8008910:	d002      	beq.n	8008918 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008912:	2302      	movs	r3, #2
 8008914:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008916:	e0ca      	b.n	8008aae <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <HAL_SPI_Receive+0x7e>
 800891e:	88fb      	ldrh	r3, [r7, #6]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d102      	bne.n	800892a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008928:	e0c1      	b.n	8008aae <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2204      	movs	r2, #4
 800892e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	88fa      	ldrh	r2, [r7, #6]
 8008942:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	88fa      	ldrh	r2, [r7, #6]
 8008948:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008970:	d10f      	bne.n	8008992 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008980:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008990:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d007      	beq.n	80089b0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d162      	bne.n	8008a7e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80089b8:	e02e      	b.n	8008a18 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d115      	bne.n	80089f4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f103 020c 	add.w	r2, r3, #12
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	7812      	ldrb	r2, [r2, #0]
 80089d6:	b2d2      	uxtb	r2, r2
 80089d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b01      	subs	r3, #1
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089f2:	e011      	b.n	8008a18 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089f4:	f7fd f9d0 	bl	8005d98 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d803      	bhi.n	8008a0c <HAL_SPI_Receive+0x166>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0a:	d102      	bne.n	8008a12 <HAL_SPI_Receive+0x16c>
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d102      	bne.n	8008a18 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a16:	e04a      	b.n	8008aae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1cb      	bne.n	80089ba <HAL_SPI_Receive+0x114>
 8008a22:	e031      	b.n	8008a88 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d113      	bne.n	8008a5a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68da      	ldr	r2, [r3, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3c:	b292      	uxth	r2, r2
 8008a3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	1c9a      	adds	r2, r3, #2
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	3b01      	subs	r3, #1
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a58:	e011      	b.n	8008a7e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a5a:	f7fd f99d 	bl	8005d98 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d803      	bhi.n	8008a72 <HAL_SPI_Receive+0x1cc>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a70:	d102      	bne.n	8008a78 <HAL_SPI_Receive+0x1d2>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d102      	bne.n	8008a7e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a7c:	e017      	b.n	8008aae <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1cd      	bne.n	8008a24 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 fa45 	bl	8008f1c <SPI_EndRxTransaction>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	75fb      	strb	r3, [r7, #23]
 8008aaa:	e000      	b.n	8008aae <HAL_SPI_Receive+0x208>
  }

error :
 8008aac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08c      	sub	sp, #48	; 0x30
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d101      	bne.n	8008aee <HAL_SPI_TransmitReceive+0x26>
 8008aea:	2302      	movs	r3, #2
 8008aec:	e18a      	b.n	8008e04 <HAL_SPI_TransmitReceive+0x33c>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008af6:	f7fd f94f 	bl	8005d98 <HAL_GetTick>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008b0c:	887b      	ldrh	r3, [r7, #2]
 8008b0e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d00f      	beq.n	8008b38 <HAL_SPI_TransmitReceive+0x70>
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b1e:	d107      	bne.n	8008b30 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d103      	bne.n	8008b30 <HAL_SPI_TransmitReceive+0x68>
 8008b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b2c:	2b04      	cmp	r3, #4
 8008b2e:	d003      	beq.n	8008b38 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b30:	2302      	movs	r3, #2
 8008b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b36:	e15b      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d005      	beq.n	8008b4a <HAL_SPI_TransmitReceive+0x82>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <HAL_SPI_TransmitReceive+0x82>
 8008b44:	887b      	ldrh	r3, [r7, #2]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d103      	bne.n	8008b52 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b50:	e14e      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d003      	beq.n	8008b66 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2205      	movs	r2, #5
 8008b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	887a      	ldrh	r2, [r7, #2]
 8008b76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	887a      	ldrh	r2, [r7, #2]
 8008b7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	887a      	ldrh	r2, [r7, #2]
 8008b88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	887a      	ldrh	r2, [r7, #2]
 8008b8e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	d007      	beq.n	8008bba <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc2:	d178      	bne.n	8008cb6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <HAL_SPI_TransmitReceive+0x10a>
 8008bcc:	8b7b      	ldrh	r3, [r7, #26]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d166      	bne.n	8008ca0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	881a      	ldrh	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	1c9a      	adds	r2, r3, #2
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bf6:	e053      	b.n	8008ca0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d11b      	bne.n	8008c3e <HAL_SPI_TransmitReceive+0x176>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d016      	beq.n	8008c3e <HAL_SPI_TransmitReceive+0x176>
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d113      	bne.n	8008c3e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	881a      	ldrh	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c26:	1c9a      	adds	r2, r3, #2
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	3b01      	subs	r3, #1
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d119      	bne.n	8008c80 <HAL_SPI_TransmitReceive+0x1b8>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d014      	beq.n	8008c80 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	b292      	uxth	r2, r2
 8008c62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c68:	1c9a      	adds	r2, r3, #2
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	3b01      	subs	r3, #1
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c80:	f7fd f88a 	bl	8005d98 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d807      	bhi.n	8008ca0 <HAL_SPI_TransmitReceive+0x1d8>
 8008c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c96:	d003      	beq.n	8008ca0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c9e:	e0a7      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1a6      	bne.n	8008bf8 <HAL_SPI_TransmitReceive+0x130>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1a1      	bne.n	8008bf8 <HAL_SPI_TransmitReceive+0x130>
 8008cb4:	e07c      	b.n	8008db0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d002      	beq.n	8008cc4 <HAL_SPI_TransmitReceive+0x1fc>
 8008cbe:	8b7b      	ldrh	r3, [r7, #26]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d16b      	bne.n	8008d9c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	330c      	adds	r3, #12
 8008cce:	7812      	ldrb	r2, [r2, #0]
 8008cd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008cea:	e057      	b.n	8008d9c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d11c      	bne.n	8008d34 <HAL_SPI_TransmitReceive+0x26c>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d017      	beq.n	8008d34 <HAL_SPI_TransmitReceive+0x26c>
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d114      	bne.n	8008d34 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	330c      	adds	r3, #12
 8008d14:	7812      	ldrb	r2, [r2, #0]
 8008d16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d119      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x2ae>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d014      	beq.n	8008d76 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d72:	2301      	movs	r3, #1
 8008d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d76:	f7fd f80f 	bl	8005d98 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d803      	bhi.n	8008d8e <HAL_SPI_TransmitReceive+0x2c6>
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8c:	d102      	bne.n	8008d94 <HAL_SPI_TransmitReceive+0x2cc>
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d103      	bne.n	8008d9c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d9a:	e029      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1a2      	bne.n	8008cec <HAL_SPI_TransmitReceive+0x224>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d19d      	bne.n	8008cec <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 f917 	bl	8008fe8 <SPI_EndRxTxTransaction>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008dcc:	e010      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10b      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	e000      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3730      	adds	r7, #48	; 0x30
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e1c:	f7fc ffbc 	bl	8005d98 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	1a9b      	subs	r3, r3, r2
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	4413      	add	r3, r2
 8008e2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e2c:	f7fc ffb4 	bl	8005d98 <HAL_GetTick>
 8008e30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e32:	4b39      	ldr	r3, [pc, #228]	; (8008f18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	015b      	lsls	r3, r3, #5
 8008e38:	0d1b      	lsrs	r3, r3, #20
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	fb02 f303 	mul.w	r3, r2, r3
 8008e40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e42:	e054      	b.n	8008eee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4a:	d050      	beq.n	8008eee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e4c:	f7fc ffa4 	bl	8005d98 <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d902      	bls.n	8008e62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d13d      	bne.n	8008ede <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e7a:	d111      	bne.n	8008ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e84:	d004      	beq.n	8008e90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e8e:	d107      	bne.n	8008ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ea8:	d10f      	bne.n	8008eca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ec8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e017      	b.n	8008f0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	3b01      	subs	r3, #1
 8008eec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689a      	ldr	r2, [r3, #8]
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	bf0c      	ite	eq
 8008efe:	2301      	moveq	r3, #1
 8008f00:	2300      	movne	r3, #0
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	461a      	mov	r2, r3
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d19b      	bne.n	8008e44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3720      	adds	r7, #32
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20000000 	.word	0x20000000

08008f1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af02      	add	r7, sp, #8
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f30:	d111      	bne.n	8008f56 <SPI_EndRxTransaction+0x3a>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f3a:	d004      	beq.n	8008f46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f44:	d107      	bne.n	8008f56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f5e:	d12a      	bne.n	8008fb6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f68:	d012      	beq.n	8008f90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2200      	movs	r2, #0
 8008f72:	2180      	movs	r1, #128	; 0x80
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff ff49 	bl	8008e0c <SPI_WaitFlagStateUntilTimeout>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d02d      	beq.n	8008fdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f84:	f043 0220 	orr.w	r2, r3, #32
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e026      	b.n	8008fde <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	2200      	movs	r2, #0
 8008f98:	2101      	movs	r1, #1
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff ff36 	bl	8008e0c <SPI_WaitFlagStateUntilTimeout>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01a      	beq.n	8008fdc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008faa:	f043 0220 	orr.w	r2, r3, #32
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e013      	b.n	8008fde <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f7ff ff23 	bl	8008e0c <SPI_WaitFlagStateUntilTimeout>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d007      	beq.n	8008fdc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd0:	f043 0220 	orr.w	r2, r3, #32
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e000      	b.n	8008fde <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b088      	sub	sp, #32
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ff4:	4b1b      	ldr	r3, [pc, #108]	; (8009064 <SPI_EndRxTxTransaction+0x7c>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a1b      	ldr	r2, [pc, #108]	; (8009068 <SPI_EndRxTxTransaction+0x80>)
 8008ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffe:	0d5b      	lsrs	r3, r3, #21
 8009000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009004:	fb02 f303 	mul.w	r3, r2, r3
 8009008:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009012:	d112      	bne.n	800903a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2200      	movs	r2, #0
 800901c:	2180      	movs	r1, #128	; 0x80
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f7ff fef4 	bl	8008e0c <SPI_WaitFlagStateUntilTimeout>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d016      	beq.n	8009058 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902e:	f043 0220 	orr.w	r2, r3, #32
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e00f      	b.n	800905a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00a      	beq.n	8009056 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	3b01      	subs	r3, #1
 8009044:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009050:	2b80      	cmp	r3, #128	; 0x80
 8009052:	d0f2      	beq.n	800903a <SPI_EndRxTxTransaction+0x52>
 8009054:	e000      	b.n	8009058 <SPI_EndRxTxTransaction+0x70>
        break;
 8009056:	bf00      	nop
  }

  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20000000 	.word	0x20000000
 8009068:	165e9f81 	.word	0x165e9f81

0800906c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e041      	b.n	8009102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d106      	bne.n	8009098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7fb fb82 	bl	800479c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3304      	adds	r3, #4
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f000 fe10 	bl	8009cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b01      	cmp	r3, #1
 800911e:	d001      	beq.n	8009124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e04e      	b.n	80091c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2202      	movs	r2, #2
 8009128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68da      	ldr	r2, [r3, #12]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f042 0201 	orr.w	r2, r2, #1
 800913a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a23      	ldr	r2, [pc, #140]	; (80091d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d022      	beq.n	800918c <HAL_TIM_Base_Start_IT+0x80>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800914e:	d01d      	beq.n	800918c <HAL_TIM_Base_Start_IT+0x80>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a1f      	ldr	r2, [pc, #124]	; (80091d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d018      	beq.n	800918c <HAL_TIM_Base_Start_IT+0x80>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a1e      	ldr	r2, [pc, #120]	; (80091d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d013      	beq.n	800918c <HAL_TIM_Base_Start_IT+0x80>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a1c      	ldr	r2, [pc, #112]	; (80091dc <HAL_TIM_Base_Start_IT+0xd0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d00e      	beq.n	800918c <HAL_TIM_Base_Start_IT+0x80>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a1b      	ldr	r2, [pc, #108]	; (80091e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d009      	beq.n	800918c <HAL_TIM_Base_Start_IT+0x80>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a19      	ldr	r2, [pc, #100]	; (80091e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d004      	beq.n	800918c <HAL_TIM_Base_Start_IT+0x80>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a18      	ldr	r2, [pc, #96]	; (80091e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d111      	bne.n	80091b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b06      	cmp	r3, #6
 800919c:	d010      	beq.n	80091c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f042 0201 	orr.w	r2, r2, #1
 80091ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ae:	e007      	b.n	80091c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0201 	orr.w	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3714      	adds	r7, #20
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	40010000 	.word	0x40010000
 80091d4:	40000400 	.word	0x40000400
 80091d8:	40000800 	.word	0x40000800
 80091dc:	40000c00 	.word	0x40000c00
 80091e0:	40010400 	.word	0x40010400
 80091e4:	40014000 	.word	0x40014000
 80091e8:	40001800 	.word	0x40001800

080091ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68da      	ldr	r2, [r3, #12]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f022 0201 	bic.w	r2, r2, #1
 8009202:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6a1a      	ldr	r2, [r3, #32]
 800920a:	f241 1311 	movw	r3, #4369	; 0x1111
 800920e:	4013      	ands	r3, r2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10f      	bne.n	8009234 <HAL_TIM_Base_Stop_IT+0x48>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6a1a      	ldr	r2, [r3, #32]
 800921a:	f240 4344 	movw	r3, #1092	; 0x444
 800921e:	4013      	ands	r3, r2
 8009220:	2b00      	cmp	r3, #0
 8009222:	d107      	bne.n	8009234 <HAL_TIM_Base_Stop_IT+0x48>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f022 0201 	bic.w	r2, r2, #1
 8009232:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2201      	movs	r2, #1
 8009238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	370c      	adds	r7, #12
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e041      	b.n	80092e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b00      	cmp	r3, #0
 8009266:	d106      	bne.n	8009276 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7fb fa6b 	bl	800474c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2202      	movs	r2, #2
 800927a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3304      	adds	r3, #4
 8009286:	4619      	mov	r1, r3
 8009288:	4610      	mov	r0, r2
 800928a:	f000 fd21 	bl	8009cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d109      	bne.n	800930c <HAL_TIM_PWM_Start+0x24>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	2b01      	cmp	r3, #1
 8009302:	bf14      	ite	ne
 8009304:	2301      	movne	r3, #1
 8009306:	2300      	moveq	r3, #0
 8009308:	b2db      	uxtb	r3, r3
 800930a:	e022      	b.n	8009352 <HAL_TIM_PWM_Start+0x6a>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b04      	cmp	r3, #4
 8009310:	d109      	bne.n	8009326 <HAL_TIM_PWM_Start+0x3e>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b01      	cmp	r3, #1
 800931c:	bf14      	ite	ne
 800931e:	2301      	movne	r3, #1
 8009320:	2300      	moveq	r3, #0
 8009322:	b2db      	uxtb	r3, r3
 8009324:	e015      	b.n	8009352 <HAL_TIM_PWM_Start+0x6a>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b08      	cmp	r3, #8
 800932a:	d109      	bne.n	8009340 <HAL_TIM_PWM_Start+0x58>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b01      	cmp	r3, #1
 8009336:	bf14      	ite	ne
 8009338:	2301      	movne	r3, #1
 800933a:	2300      	moveq	r3, #0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	e008      	b.n	8009352 <HAL_TIM_PWM_Start+0x6a>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b01      	cmp	r3, #1
 800934a:	bf14      	ite	ne
 800934c:	2301      	movne	r3, #1
 800934e:	2300      	moveq	r3, #0
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e07c      	b.n	8009454 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d104      	bne.n	800936a <HAL_TIM_PWM_Start+0x82>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009368:	e013      	b.n	8009392 <HAL_TIM_PWM_Start+0xaa>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b04      	cmp	r3, #4
 800936e:	d104      	bne.n	800937a <HAL_TIM_PWM_Start+0x92>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009378:	e00b      	b.n	8009392 <HAL_TIM_PWM_Start+0xaa>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b08      	cmp	r3, #8
 800937e:	d104      	bne.n	800938a <HAL_TIM_PWM_Start+0xa2>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2202      	movs	r2, #2
 8009384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009388:	e003      	b.n	8009392 <HAL_TIM_PWM_Start+0xaa>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2202      	movs	r2, #2
 800938e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2201      	movs	r2, #1
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fee8 	bl	800a170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a2d      	ldr	r2, [pc, #180]	; (800945c <HAL_TIM_PWM_Start+0x174>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d004      	beq.n	80093b4 <HAL_TIM_PWM_Start+0xcc>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a2c      	ldr	r2, [pc, #176]	; (8009460 <HAL_TIM_PWM_Start+0x178>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d101      	bne.n	80093b8 <HAL_TIM_PWM_Start+0xd0>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e000      	b.n	80093ba <HAL_TIM_PWM_Start+0xd2>
 80093b8:	2300      	movs	r3, #0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a22      	ldr	r2, [pc, #136]	; (800945c <HAL_TIM_PWM_Start+0x174>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d022      	beq.n	800941e <HAL_TIM_PWM_Start+0x136>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e0:	d01d      	beq.n	800941e <HAL_TIM_PWM_Start+0x136>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a1f      	ldr	r2, [pc, #124]	; (8009464 <HAL_TIM_PWM_Start+0x17c>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d018      	beq.n	800941e <HAL_TIM_PWM_Start+0x136>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a1d      	ldr	r2, [pc, #116]	; (8009468 <HAL_TIM_PWM_Start+0x180>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d013      	beq.n	800941e <HAL_TIM_PWM_Start+0x136>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a1c      	ldr	r2, [pc, #112]	; (800946c <HAL_TIM_PWM_Start+0x184>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00e      	beq.n	800941e <HAL_TIM_PWM_Start+0x136>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a16      	ldr	r2, [pc, #88]	; (8009460 <HAL_TIM_PWM_Start+0x178>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d009      	beq.n	800941e <HAL_TIM_PWM_Start+0x136>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a18      	ldr	r2, [pc, #96]	; (8009470 <HAL_TIM_PWM_Start+0x188>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d004      	beq.n	800941e <HAL_TIM_PWM_Start+0x136>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a16      	ldr	r2, [pc, #88]	; (8009474 <HAL_TIM_PWM_Start+0x18c>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d111      	bne.n	8009442 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2b06      	cmp	r3, #6
 800942e:	d010      	beq.n	8009452 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f042 0201 	orr.w	r2, r2, #1
 800943e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009440:	e007      	b.n	8009452 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0201 	orr.w	r2, r2, #1
 8009450:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40010000 	.word	0x40010000
 8009460:	40010400 	.word	0x40010400
 8009464:	40000400 	.word	0x40000400
 8009468:	40000800 	.word	0x40000800
 800946c:	40000c00 	.word	0x40000c00
 8009470:	40014000 	.word	0x40014000
 8009474:	40001800 	.word	0x40001800

08009478 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2200      	movs	r2, #0
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fe70 	bl	800a170 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a2e      	ldr	r2, [pc, #184]	; (8009550 <HAL_TIM_PWM_Stop+0xd8>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d004      	beq.n	80094a4 <HAL_TIM_PWM_Stop+0x2c>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a2d      	ldr	r2, [pc, #180]	; (8009554 <HAL_TIM_PWM_Stop+0xdc>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d101      	bne.n	80094a8 <HAL_TIM_PWM_Stop+0x30>
 80094a4:	2301      	movs	r3, #1
 80094a6:	e000      	b.n	80094aa <HAL_TIM_PWM_Stop+0x32>
 80094a8:	2300      	movs	r3, #0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d017      	beq.n	80094de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6a1a      	ldr	r2, [r3, #32]
 80094b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80094b8:	4013      	ands	r3, r2
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10f      	bne.n	80094de <HAL_TIM_PWM_Stop+0x66>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6a1a      	ldr	r2, [r3, #32]
 80094c4:	f240 4344 	movw	r3, #1092	; 0x444
 80094c8:	4013      	ands	r3, r2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d107      	bne.n	80094de <HAL_TIM_PWM_Stop+0x66>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6a1a      	ldr	r2, [r3, #32]
 80094e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80094e8:	4013      	ands	r3, r2
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10f      	bne.n	800950e <HAL_TIM_PWM_Stop+0x96>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6a1a      	ldr	r2, [r3, #32]
 80094f4:	f240 4344 	movw	r3, #1092	; 0x444
 80094f8:	4013      	ands	r3, r2
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d107      	bne.n	800950e <HAL_TIM_PWM_Stop+0x96>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 0201 	bic.w	r2, r2, #1
 800950c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d104      	bne.n	800951e <HAL_TIM_PWM_Stop+0xa6>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800951c:	e013      	b.n	8009546 <HAL_TIM_PWM_Stop+0xce>
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2b04      	cmp	r3, #4
 8009522:	d104      	bne.n	800952e <HAL_TIM_PWM_Stop+0xb6>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800952c:	e00b      	b.n	8009546 <HAL_TIM_PWM_Stop+0xce>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b08      	cmp	r3, #8
 8009532:	d104      	bne.n	800953e <HAL_TIM_PWM_Stop+0xc6>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800953c:	e003      	b.n	8009546 <HAL_TIM_PWM_Stop+0xce>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	40010000 	.word	0x40010000
 8009554:	40010400 	.word	0x40010400

08009558 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e097      	b.n	800969c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d106      	bne.n	8009586 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7fb f84d 	bl	8004620 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2202      	movs	r2, #2
 800958a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800959c:	f023 0307 	bic.w	r3, r3, #7
 80095a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	3304      	adds	r3, #4
 80095aa:	4619      	mov	r1, r3
 80095ac:	4610      	mov	r0, r2
 80095ae:	f000 fb8f 	bl	8009cd0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
 80095c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095da:	f023 0303 	bic.w	r3, r3, #3
 80095de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	021b      	lsls	r3, r3, #8
 80095ea:	4313      	orrs	r3, r2
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80095f8:	f023 030c 	bic.w	r3, r3, #12
 80095fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009608:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	68da      	ldr	r2, [r3, #12]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	021b      	lsls	r3, r3, #8
 8009614:	4313      	orrs	r3, r2
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	4313      	orrs	r3, r2
 800961a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	011a      	lsls	r2, r3, #4
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	031b      	lsls	r3, r3, #12
 8009628:	4313      	orrs	r3, r2
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009636:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800963e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	685a      	ldr	r2, [r3, #4]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	4313      	orrs	r3, r2
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80096bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80096cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d110      	bne.n	80096f6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d102      	bne.n	80096e0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80096da:	7b7b      	ldrb	r3, [r7, #13]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d001      	beq.n	80096e4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e068      	b.n	80097b6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2202      	movs	r2, #2
 80096f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096f4:	e031      	b.n	800975a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d110      	bne.n	800971e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d102      	bne.n	8009708 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009702:	7b3b      	ldrb	r3, [r7, #12]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d001      	beq.n	800970c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e054      	b.n	80097b6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800971c:	e01d      	b.n	800975a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d108      	bne.n	8009736 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d105      	bne.n	8009736 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800972a:	7b7b      	ldrb	r3, [r7, #13]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d102      	bne.n	8009736 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009730:	7b3b      	ldrb	r3, [r7, #12]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d001      	beq.n	800973a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e03d      	b.n	80097b6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2202      	movs	r2, #2
 800973e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2202      	movs	r2, #2
 8009746:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2202      	movs	r2, #2
 800974e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2202      	movs	r2, #2
 8009756:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d002      	beq.n	8009766 <HAL_TIM_Encoder_Start+0xc2>
 8009760:	2b04      	cmp	r3, #4
 8009762:	d008      	beq.n	8009776 <HAL_TIM_Encoder_Start+0xd2>
 8009764:	e00f      	b.n	8009786 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2201      	movs	r2, #1
 800976c:	2100      	movs	r1, #0
 800976e:	4618      	mov	r0, r3
 8009770:	f000 fcfe 	bl	800a170 <TIM_CCxChannelCmd>
      break;
 8009774:	e016      	b.n	80097a4 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2201      	movs	r2, #1
 800977c:	2104      	movs	r1, #4
 800977e:	4618      	mov	r0, r3
 8009780:	f000 fcf6 	bl	800a170 <TIM_CCxChannelCmd>
      break;
 8009784:	e00e      	b.n	80097a4 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2201      	movs	r2, #1
 800978c:	2100      	movs	r1, #0
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fcee 	bl	800a170 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2201      	movs	r2, #1
 800979a:	2104      	movs	r1, #4
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fce7 	bl	800a170 <TIM_CCxChannelCmd>
      break;
 80097a2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f042 0201 	orr.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <HAL_TIM_Encoder_Stop+0x16>
 80097ce:	2b04      	cmp	r3, #4
 80097d0:	d008      	beq.n	80097e4 <HAL_TIM_Encoder_Stop+0x26>
 80097d2:	e00f      	b.n	80097f4 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2200      	movs	r2, #0
 80097da:	2100      	movs	r1, #0
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fcc7 	bl	800a170 <TIM_CCxChannelCmd>
      break;
 80097e2:	e016      	b.n	8009812 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2200      	movs	r2, #0
 80097ea:	2104      	movs	r1, #4
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fcbf 	bl	800a170 <TIM_CCxChannelCmd>
      break;
 80097f2:	e00e      	b.n	8009812 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2200      	movs	r2, #0
 80097fa:	2100      	movs	r1, #0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f000 fcb7 	bl	800a170 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2200      	movs	r2, #0
 8009808:	2104      	movs	r1, #4
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fcb0 	bl	800a170 <TIM_CCxChannelCmd>
      break;
 8009810:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6a1a      	ldr	r2, [r3, #32]
 8009818:	f241 1311 	movw	r3, #4369	; 0x1111
 800981c:	4013      	ands	r3, r2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10f      	bne.n	8009842 <HAL_TIM_Encoder_Stop+0x84>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6a1a      	ldr	r2, [r3, #32]
 8009828:	f240 4344 	movw	r3, #1092	; 0x444
 800982c:	4013      	ands	r3, r2
 800982e:	2b00      	cmp	r3, #0
 8009830:	d107      	bne.n	8009842 <HAL_TIM_Encoder_Stop+0x84>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f022 0201 	bic.w	r2, r2, #1
 8009840:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <HAL_TIM_Encoder_Stop+0x90>
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2b04      	cmp	r3, #4
 800984c:	d138      	bne.n	80098c0 <HAL_TIM_Encoder_Stop+0x102>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d104      	bne.n	800985e <HAL_TIM_Encoder_Stop+0xa0>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800985c:	e013      	b.n	8009886 <HAL_TIM_Encoder_Stop+0xc8>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b04      	cmp	r3, #4
 8009862:	d104      	bne.n	800986e <HAL_TIM_Encoder_Stop+0xb0>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800986c:	e00b      	b.n	8009886 <HAL_TIM_Encoder_Stop+0xc8>
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	2b08      	cmp	r3, #8
 8009872:	d104      	bne.n	800987e <HAL_TIM_Encoder_Stop+0xc0>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800987c:	e003      	b.n	8009886 <HAL_TIM_Encoder_Stop+0xc8>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <HAL_TIM_Encoder_Stop+0xd8>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009894:	e024      	b.n	80098e0 <HAL_TIM_Encoder_Stop+0x122>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b04      	cmp	r3, #4
 800989a:	d104      	bne.n	80098a6 <HAL_TIM_Encoder_Stop+0xe8>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098a4:	e01c      	b.n	80098e0 <HAL_TIM_Encoder_Stop+0x122>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b08      	cmp	r3, #8
 80098aa:	d104      	bne.n	80098b6 <HAL_TIM_Encoder_Stop+0xf8>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098b4:	e014      	b.n	80098e0 <HAL_TIM_Encoder_Stop+0x122>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098be:	e00f      	b.n	80098e0 <HAL_TIM_Encoder_Stop+0x122>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	691b      	ldr	r3, [r3, #16]
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d122      	bne.n	8009946 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f003 0302 	and.w	r3, r3, #2
 800990a:	2b02      	cmp	r3, #2
 800990c:	d11b      	bne.n	8009946 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f06f 0202 	mvn.w	r2, #2
 8009916:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	f003 0303 	and.w	r3, r3, #3
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f9b1 	bl	8009c94 <HAL_TIM_IC_CaptureCallback>
 8009932:	e005      	b.n	8009940 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f9a3 	bl	8009c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f9b4 	bl	8009ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	f003 0304 	and.w	r3, r3, #4
 8009950:	2b04      	cmp	r3, #4
 8009952:	d122      	bne.n	800999a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	f003 0304 	and.w	r3, r3, #4
 800995e:	2b04      	cmp	r3, #4
 8009960:	d11b      	bne.n	800999a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f06f 0204 	mvn.w	r2, #4
 800996a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800997c:	2b00      	cmp	r3, #0
 800997e:	d003      	beq.n	8009988 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f987 	bl	8009c94 <HAL_TIM_IC_CaptureCallback>
 8009986:	e005      	b.n	8009994 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f979 	bl	8009c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f98a 	bl	8009ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	f003 0308 	and.w	r3, r3, #8
 80099a4:	2b08      	cmp	r3, #8
 80099a6:	d122      	bne.n	80099ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f003 0308 	and.w	r3, r3, #8
 80099b2:	2b08      	cmp	r3, #8
 80099b4:	d11b      	bne.n	80099ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f06f 0208 	mvn.w	r2, #8
 80099be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2204      	movs	r2, #4
 80099c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	f003 0303 	and.w	r3, r3, #3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 f95d 	bl	8009c94 <HAL_TIM_IC_CaptureCallback>
 80099da:	e005      	b.n	80099e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f94f 	bl	8009c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f960 	bl	8009ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	f003 0310 	and.w	r3, r3, #16
 80099f8:	2b10      	cmp	r3, #16
 80099fa:	d122      	bne.n	8009a42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	f003 0310 	and.w	r3, r3, #16
 8009a06:	2b10      	cmp	r3, #16
 8009a08:	d11b      	bne.n	8009a42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f06f 0210 	mvn.w	r2, #16
 8009a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2208      	movs	r2, #8
 8009a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	69db      	ldr	r3, [r3, #28]
 8009a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d003      	beq.n	8009a30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f933 	bl	8009c94 <HAL_TIM_IC_CaptureCallback>
 8009a2e:	e005      	b.n	8009a3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f925 	bl	8009c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f936 	bl	8009ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d10e      	bne.n	8009a6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f003 0301 	and.w	r3, r3, #1
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d107      	bne.n	8009a6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f06f 0201 	mvn.w	r2, #1
 8009a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f7f9 f9b7 	bl	8002ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a78:	2b80      	cmp	r3, #128	; 0x80
 8009a7a:	d10e      	bne.n	8009a9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a86:	2b80      	cmp	r3, #128	; 0x80
 8009a88:	d107      	bne.n	8009a9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fc17 	bl	800a2c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa4:	2b40      	cmp	r3, #64	; 0x40
 8009aa6:	d10e      	bne.n	8009ac6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab2:	2b40      	cmp	r3, #64	; 0x40
 8009ab4:	d107      	bne.n	8009ac6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f8fb 	bl	8009cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b20      	cmp	r3, #32
 8009ad2:	d10e      	bne.n	8009af2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	f003 0320 	and.w	r3, r3, #32
 8009ade:	2b20      	cmp	r3, #32
 8009ae0:	d107      	bne.n	8009af2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f06f 0220 	mvn.w	r2, #32
 8009aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fbe1 	bl	800a2b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009af2:	bf00      	nop
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d101      	bne.n	8009b1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b16:	2302      	movs	r3, #2
 8009b18:	e0ae      	b.n	8009c78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b0c      	cmp	r3, #12
 8009b26:	f200 809f 	bhi.w	8009c68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009b2a:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009b65 	.word	0x08009b65
 8009b34:	08009c69 	.word	0x08009c69
 8009b38:	08009c69 	.word	0x08009c69
 8009b3c:	08009c69 	.word	0x08009c69
 8009b40:	08009ba5 	.word	0x08009ba5
 8009b44:	08009c69 	.word	0x08009c69
 8009b48:	08009c69 	.word	0x08009c69
 8009b4c:	08009c69 	.word	0x08009c69
 8009b50:	08009be7 	.word	0x08009be7
 8009b54:	08009c69 	.word	0x08009c69
 8009b58:	08009c69 	.word	0x08009c69
 8009b5c:	08009c69 	.word	0x08009c69
 8009b60:	08009c27 	.word	0x08009c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68b9      	ldr	r1, [r7, #8]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 f950 	bl	8009e10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	699a      	ldr	r2, [r3, #24]
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 0208 	orr.w	r2, r2, #8
 8009b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 0204 	bic.w	r2, r2, #4
 8009b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6999      	ldr	r1, [r3, #24]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	691a      	ldr	r2, [r3, #16]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	619a      	str	r2, [r3, #24]
      break;
 8009ba2:	e064      	b.n	8009c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68b9      	ldr	r1, [r7, #8]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 f9a0 	bl	8009ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	699a      	ldr	r2, [r3, #24]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	699a      	ldr	r2, [r3, #24]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6999      	ldr	r1, [r3, #24]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	021a      	lsls	r2, r3, #8
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	619a      	str	r2, [r3, #24]
      break;
 8009be4:	e043      	b.n	8009c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68b9      	ldr	r1, [r7, #8]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 f9f5 	bl	8009fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	69da      	ldr	r2, [r3, #28]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f042 0208 	orr.w	r2, r2, #8
 8009c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69da      	ldr	r2, [r3, #28]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0204 	bic.w	r2, r2, #4
 8009c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	69d9      	ldr	r1, [r3, #28]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	691a      	ldr	r2, [r3, #16]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	61da      	str	r2, [r3, #28]
      break;
 8009c24:	e023      	b.n	8009c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68b9      	ldr	r1, [r7, #8]
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 fa49 	bl	800a0c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69da      	ldr	r2, [r3, #28]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	69da      	ldr	r2, [r3, #28]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69d9      	ldr	r1, [r3, #28]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	021a      	lsls	r2, r3, #8
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	61da      	str	r2, [r3, #28]
      break;
 8009c66:	e002      	b.n	8009c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a40      	ldr	r2, [pc, #256]	; (8009de4 <TIM_Base_SetConfig+0x114>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d013      	beq.n	8009d10 <TIM_Base_SetConfig+0x40>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cee:	d00f      	beq.n	8009d10 <TIM_Base_SetConfig+0x40>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a3d      	ldr	r2, [pc, #244]	; (8009de8 <TIM_Base_SetConfig+0x118>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d00b      	beq.n	8009d10 <TIM_Base_SetConfig+0x40>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a3c      	ldr	r2, [pc, #240]	; (8009dec <TIM_Base_SetConfig+0x11c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d007      	beq.n	8009d10 <TIM_Base_SetConfig+0x40>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a3b      	ldr	r2, [pc, #236]	; (8009df0 <TIM_Base_SetConfig+0x120>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d003      	beq.n	8009d10 <TIM_Base_SetConfig+0x40>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a3a      	ldr	r2, [pc, #232]	; (8009df4 <TIM_Base_SetConfig+0x124>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d108      	bne.n	8009d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a2f      	ldr	r2, [pc, #188]	; (8009de4 <TIM_Base_SetConfig+0x114>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d02b      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d30:	d027      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a2c      	ldr	r2, [pc, #176]	; (8009de8 <TIM_Base_SetConfig+0x118>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d023      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a2b      	ldr	r2, [pc, #172]	; (8009dec <TIM_Base_SetConfig+0x11c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d01f      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a2a      	ldr	r2, [pc, #168]	; (8009df0 <TIM_Base_SetConfig+0x120>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d01b      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a29      	ldr	r2, [pc, #164]	; (8009df4 <TIM_Base_SetConfig+0x124>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d017      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a28      	ldr	r2, [pc, #160]	; (8009df8 <TIM_Base_SetConfig+0x128>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d013      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a27      	ldr	r2, [pc, #156]	; (8009dfc <TIM_Base_SetConfig+0x12c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d00f      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a26      	ldr	r2, [pc, #152]	; (8009e00 <TIM_Base_SetConfig+0x130>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d00b      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a25      	ldr	r2, [pc, #148]	; (8009e04 <TIM_Base_SetConfig+0x134>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d007      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a24      	ldr	r2, [pc, #144]	; (8009e08 <TIM_Base_SetConfig+0x138>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d003      	beq.n	8009d82 <TIM_Base_SetConfig+0xb2>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a23      	ldr	r2, [pc, #140]	; (8009e0c <TIM_Base_SetConfig+0x13c>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d108      	bne.n	8009d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	4313      	orrs	r3, r2
 8009d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a0a      	ldr	r2, [pc, #40]	; (8009de4 <TIM_Base_SetConfig+0x114>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d003      	beq.n	8009dc8 <TIM_Base_SetConfig+0xf8>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a0c      	ldr	r2, [pc, #48]	; (8009df4 <TIM_Base_SetConfig+0x124>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d103      	bne.n	8009dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	691a      	ldr	r2, [r3, #16]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	615a      	str	r2, [r3, #20]
}
 8009dd6:	bf00      	nop
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	40010000 	.word	0x40010000
 8009de8:	40000400 	.word	0x40000400
 8009dec:	40000800 	.word	0x40000800
 8009df0:	40000c00 	.word	0x40000c00
 8009df4:	40010400 	.word	0x40010400
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	40014400 	.word	0x40014400
 8009e00:	40014800 	.word	0x40014800
 8009e04:	40001800 	.word	0x40001800
 8009e08:	40001c00 	.word	0x40001c00
 8009e0c:	40002000 	.word	0x40002000

08009e10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	f023 0201 	bic.w	r2, r3, #1
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a1b      	ldr	r3, [r3, #32]
 8009e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f023 0303 	bic.w	r3, r3, #3
 8009e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f023 0302 	bic.w	r3, r3, #2
 8009e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a20      	ldr	r2, [pc, #128]	; (8009ee8 <TIM_OC1_SetConfig+0xd8>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d003      	beq.n	8009e74 <TIM_OC1_SetConfig+0x64>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a1f      	ldr	r2, [pc, #124]	; (8009eec <TIM_OC1_SetConfig+0xdc>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d10c      	bne.n	8009e8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f023 0308 	bic.w	r3, r3, #8
 8009e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	f023 0304 	bic.w	r3, r3, #4
 8009e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a15      	ldr	r2, [pc, #84]	; (8009ee8 <TIM_OC1_SetConfig+0xd8>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d003      	beq.n	8009e9e <TIM_OC1_SetConfig+0x8e>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a14      	ldr	r2, [pc, #80]	; (8009eec <TIM_OC1_SetConfig+0xdc>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d111      	bne.n	8009ec2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	695b      	ldr	r3, [r3, #20]
 8009eb2:	693a      	ldr	r2, [r7, #16]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	621a      	str	r2, [r3, #32]
}
 8009edc:	bf00      	nop
 8009ede:	371c      	adds	r7, #28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	40010000 	.word	0x40010000
 8009eec:	40010400 	.word	0x40010400

08009ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	f023 0210 	bic.w	r2, r3, #16
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	f023 0320 	bic.w	r3, r3, #32
 8009f3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	011b      	lsls	r3, r3, #4
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	4313      	orrs	r3, r2
 8009f46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a22      	ldr	r2, [pc, #136]	; (8009fd4 <TIM_OC2_SetConfig+0xe4>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d003      	beq.n	8009f58 <TIM_OC2_SetConfig+0x68>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a21      	ldr	r2, [pc, #132]	; (8009fd8 <TIM_OC2_SetConfig+0xe8>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d10d      	bne.n	8009f74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	011b      	lsls	r3, r3, #4
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a17      	ldr	r2, [pc, #92]	; (8009fd4 <TIM_OC2_SetConfig+0xe4>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d003      	beq.n	8009f84 <TIM_OC2_SetConfig+0x94>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a16      	ldr	r2, [pc, #88]	; (8009fd8 <TIM_OC2_SetConfig+0xe8>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d113      	bne.n	8009fac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	693a      	ldr	r2, [r7, #16]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	697a      	ldr	r2, [r7, #20]
 8009fc4:	621a      	str	r2, [r3, #32]
}
 8009fc6:	bf00      	nop
 8009fc8:	371c      	adds	r7, #28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
 8009fd2:	bf00      	nop
 8009fd4:	40010000 	.word	0x40010000
 8009fd8:	40010400 	.word	0x40010400

08009fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 0303 	bic.w	r3, r3, #3
 800a012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	021b      	lsls	r3, r3, #8
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	4313      	orrs	r3, r2
 800a030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a21      	ldr	r2, [pc, #132]	; (800a0bc <TIM_OC3_SetConfig+0xe0>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d003      	beq.n	800a042 <TIM_OC3_SetConfig+0x66>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a20      	ldr	r2, [pc, #128]	; (800a0c0 <TIM_OC3_SetConfig+0xe4>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d10d      	bne.n	800a05e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	021b      	lsls	r3, r3, #8
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	4313      	orrs	r3, r2
 800a054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a05c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a16      	ldr	r2, [pc, #88]	; (800a0bc <TIM_OC3_SetConfig+0xe0>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d003      	beq.n	800a06e <TIM_OC3_SetConfig+0x92>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a15      	ldr	r2, [pc, #84]	; (800a0c0 <TIM_OC3_SetConfig+0xe4>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d113      	bne.n	800a096 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a07c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	011b      	lsls	r3, r3, #4
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	4313      	orrs	r3, r2
 800a088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	621a      	str	r2, [r3, #32]
}
 800a0b0:	bf00      	nop
 800a0b2:	371c      	adds	r7, #28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	40010000 	.word	0x40010000
 800a0c0:	40010400 	.word	0x40010400

0800a0c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	021b      	lsls	r3, r3, #8
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	4313      	orrs	r3, r2
 800a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a10e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	031b      	lsls	r3, r3, #12
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	4313      	orrs	r3, r2
 800a11a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a12      	ldr	r2, [pc, #72]	; (800a168 <TIM_OC4_SetConfig+0xa4>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d003      	beq.n	800a12c <TIM_OC4_SetConfig+0x68>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4a11      	ldr	r2, [pc, #68]	; (800a16c <TIM_OC4_SetConfig+0xa8>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d109      	bne.n	800a140 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a132:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	695b      	ldr	r3, [r3, #20]
 800a138:	019b      	lsls	r3, r3, #6
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	621a      	str	r2, [r3, #32]
}
 800a15a:	bf00      	nop
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40010000 	.word	0x40010000
 800a16c:	40010400 	.word	0x40010400

0800a170 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f003 031f 	and.w	r3, r3, #31
 800a182:	2201      	movs	r2, #1
 800a184:	fa02 f303 	lsl.w	r3, r2, r3
 800a188:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6a1a      	ldr	r2, [r3, #32]
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	43db      	mvns	r3, r3
 800a192:	401a      	ands	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6a1a      	ldr	r2, [r3, #32]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	f003 031f 	and.w	r3, r3, #31
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	621a      	str	r2, [r3, #32]
}
 800a1ae:	bf00      	nop
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
	...

0800a1bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d101      	bne.n	800a1d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e05a      	b.n	800a28a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a21      	ldr	r2, [pc, #132]	; (800a298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d022      	beq.n	800a25e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a220:	d01d      	beq.n	800a25e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a1d      	ldr	r2, [pc, #116]	; (800a29c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d018      	beq.n	800a25e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a1b      	ldr	r2, [pc, #108]	; (800a2a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d013      	beq.n	800a25e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a1a      	ldr	r2, [pc, #104]	; (800a2a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d00e      	beq.n	800a25e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a18      	ldr	r2, [pc, #96]	; (800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d009      	beq.n	800a25e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a17      	ldr	r2, [pc, #92]	; (800a2ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d004      	beq.n	800a25e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a15      	ldr	r2, [pc, #84]	; (800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d10c      	bne.n	800a278 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	4313      	orrs	r3, r2
 800a26e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	40010000 	.word	0x40010000
 800a29c:	40000400 	.word	0x40000400
 800a2a0:	40000800 	.word	0x40000800
 800a2a4:	40000c00 	.word	0x40000c00
 800a2a8:	40010400 	.word	0x40010400
 800a2ac:	40014000 	.word	0x40014000
 800a2b0:	40001800 	.word	0x40001800

0800a2b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e03f      	b.n	800a36e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d106      	bne.n	800a308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7fa fb1c 	bl	8004940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2224      	movs	r2, #36	; 0x24
 800a30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68da      	ldr	r2, [r3, #12]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a31e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f929 	bl	800a578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	695a      	ldr	r2, [r3, #20]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2220      	movs	r2, #32
 800a360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2220      	movs	r2, #32
 800a368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b08a      	sub	sp, #40	; 0x28
 800a37a:	af02      	add	r7, sp, #8
 800a37c:	60f8      	str	r0, [r7, #12]
 800a37e:	60b9      	str	r1, [r7, #8]
 800a380:	603b      	str	r3, [r7, #0]
 800a382:	4613      	mov	r3, r2
 800a384:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a386:	2300      	movs	r3, #0
 800a388:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a390:	b2db      	uxtb	r3, r3
 800a392:	2b20      	cmp	r3, #32
 800a394:	d17c      	bne.n	800a490 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d002      	beq.n	800a3a2 <HAL_UART_Transmit+0x2c>
 800a39c:	88fb      	ldrh	r3, [r7, #6]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e075      	b.n	800a492 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d101      	bne.n	800a3b4 <HAL_UART_Transmit+0x3e>
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	e06e      	b.n	800a492 <HAL_UART_Transmit+0x11c>
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2221      	movs	r2, #33	; 0x21
 800a3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a3ca:	f7fb fce5 	bl	8005d98 <HAL_GetTick>
 800a3ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	88fa      	ldrh	r2, [r7, #6]
 800a3d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	88fa      	ldrh	r2, [r7, #6]
 800a3da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3e4:	d108      	bne.n	800a3f8 <HAL_UART_Transmit+0x82>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d104      	bne.n	800a3f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	61bb      	str	r3, [r7, #24]
 800a3f6:	e003      	b.n	800a400 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a408:	e02a      	b.n	800a460 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2200      	movs	r2, #0
 800a412:	2180      	movs	r1, #128	; 0x80
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 f840 	bl	800a49a <UART_WaitOnFlagUntilTimeout>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	e036      	b.n	800a492 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10b      	bne.n	800a442 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a438:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	3302      	adds	r3, #2
 800a43e:	61bb      	str	r3, [r7, #24]
 800a440:	e007      	b.n	800a452 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	781a      	ldrb	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	3301      	adds	r3, #1
 800a450:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a456:	b29b      	uxth	r3, r3
 800a458:	3b01      	subs	r3, #1
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a464:	b29b      	uxth	r3, r3
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1cf      	bne.n	800a40a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2200      	movs	r2, #0
 800a472:	2140      	movs	r1, #64	; 0x40
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f000 f810 	bl	800a49a <UART_WaitOnFlagUntilTimeout>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d001      	beq.n	800a484 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e006      	b.n	800a492 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2220      	movs	r2, #32
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	e000      	b.n	800a492 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a490:	2302      	movs	r3, #2
  }
}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b090      	sub	sp, #64	; 0x40
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	603b      	str	r3, [r7, #0]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4aa:	e050      	b.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b2:	d04c      	beq.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d007      	beq.n	800a4ca <UART_WaitOnFlagUntilTimeout+0x30>
 800a4ba:	f7fb fc6d 	bl	8005d98 <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d241      	bcs.n	800a54e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	330c      	adds	r3, #12
 800a4d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d4:	e853 3f00 	ldrex	r3, [r3]
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	330c      	adds	r3, #12
 800a4e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4ea:	637a      	str	r2, [r7, #52]	; 0x34
 800a4ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4f2:	e841 2300 	strex	r3, r2, [r1]
 800a4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e5      	bne.n	800a4ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3314      	adds	r3, #20
 800a504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	e853 3f00 	ldrex	r3, [r3]
 800a50c:	613b      	str	r3, [r7, #16]
   return(result);
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	f023 0301 	bic.w	r3, r3, #1
 800a514:	63bb      	str	r3, [r7, #56]	; 0x38
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3314      	adds	r3, #20
 800a51c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a51e:	623a      	str	r2, [r7, #32]
 800a520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a522:	69f9      	ldr	r1, [r7, #28]
 800a524:	6a3a      	ldr	r2, [r7, #32]
 800a526:	e841 2300 	strex	r3, r2, [r1]
 800a52a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1e5      	bne.n	800a4fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2220      	movs	r2, #32
 800a536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2220      	movs	r2, #32
 800a53e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e00f      	b.n	800a56e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4013      	ands	r3, r2
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	bf0c      	ite	eq
 800a55e:	2301      	moveq	r3, #1
 800a560:	2300      	movne	r3, #0
 800a562:	b2db      	uxtb	r3, r3
 800a564:	461a      	mov	r2, r3
 800a566:	79fb      	ldrb	r3, [r7, #7]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d09f      	beq.n	800a4ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3740      	adds	r7, #64	; 0x40
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	b085      	sub	sp, #20
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68da      	ldr	r2, [r3, #12]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689a      	ldr	r2, [r3, #8]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	431a      	orrs	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	431a      	orrs	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	69db      	ldr	r3, [r3, #28]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a5ba:	f023 030c 	bic.w	r3, r3, #12
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	6812      	ldr	r2, [r2, #0]
 800a5c2:	68b9      	ldr	r1, [r7, #8]
 800a5c4:	430b      	orrs	r3, r1
 800a5c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	699a      	ldr	r2, [r3, #24]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4ad0      	ldr	r2, [pc, #832]	; (800a924 <UART_SetConfig+0x3ac>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d004      	beq.n	800a5f2 <UART_SetConfig+0x7a>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4ace      	ldr	r2, [pc, #824]	; (800a928 <UART_SetConfig+0x3b0>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d103      	bne.n	800a5fa <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5f2:	f7fd ff7f 	bl	80084f4 <HAL_RCC_GetPCLK2Freq>
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	e002      	b.n	800a600 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5fa:	f7fd ff67 	bl	80084cc <HAL_RCC_GetPCLK1Freq>
 800a5fe:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a608:	f040 80ba 	bne.w	800a780 <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	461d      	mov	r5, r3
 800a610:	f04f 0600 	mov.w	r6, #0
 800a614:	46a8      	mov	r8, r5
 800a616:	46b1      	mov	r9, r6
 800a618:	eb18 0308 	adds.w	r3, r8, r8
 800a61c:	eb49 0409 	adc.w	r4, r9, r9
 800a620:	4698      	mov	r8, r3
 800a622:	46a1      	mov	r9, r4
 800a624:	eb18 0805 	adds.w	r8, r8, r5
 800a628:	eb49 0906 	adc.w	r9, r9, r6
 800a62c:	f04f 0100 	mov.w	r1, #0
 800a630:	f04f 0200 	mov.w	r2, #0
 800a634:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a638:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a63c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a640:	4688      	mov	r8, r1
 800a642:	4691      	mov	r9, r2
 800a644:	eb18 0005 	adds.w	r0, r8, r5
 800a648:	eb49 0106 	adc.w	r1, r9, r6
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	461d      	mov	r5, r3
 800a652:	f04f 0600 	mov.w	r6, #0
 800a656:	196b      	adds	r3, r5, r5
 800a658:	eb46 0406 	adc.w	r4, r6, r6
 800a65c:	461a      	mov	r2, r3
 800a65e:	4623      	mov	r3, r4
 800a660:	f7f6 fb12 	bl	8000c88 <__aeabi_uldivmod>
 800a664:	4603      	mov	r3, r0
 800a666:	460c      	mov	r4, r1
 800a668:	461a      	mov	r2, r3
 800a66a:	4bb0      	ldr	r3, [pc, #704]	; (800a92c <UART_SetConfig+0x3b4>)
 800a66c:	fba3 2302 	umull	r2, r3, r3, r2
 800a670:	095b      	lsrs	r3, r3, #5
 800a672:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	461d      	mov	r5, r3
 800a67a:	f04f 0600 	mov.w	r6, #0
 800a67e:	46a9      	mov	r9, r5
 800a680:	46b2      	mov	sl, r6
 800a682:	eb19 0309 	adds.w	r3, r9, r9
 800a686:	eb4a 040a 	adc.w	r4, sl, sl
 800a68a:	4699      	mov	r9, r3
 800a68c:	46a2      	mov	sl, r4
 800a68e:	eb19 0905 	adds.w	r9, r9, r5
 800a692:	eb4a 0a06 	adc.w	sl, sl, r6
 800a696:	f04f 0100 	mov.w	r1, #0
 800a69a:	f04f 0200 	mov.w	r2, #0
 800a69e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a6a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a6aa:	4689      	mov	r9, r1
 800a6ac:	4692      	mov	sl, r2
 800a6ae:	eb19 0005 	adds.w	r0, r9, r5
 800a6b2:	eb4a 0106 	adc.w	r1, sl, r6
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	461d      	mov	r5, r3
 800a6bc:	f04f 0600 	mov.w	r6, #0
 800a6c0:	196b      	adds	r3, r5, r5
 800a6c2:	eb46 0406 	adc.w	r4, r6, r6
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	4623      	mov	r3, r4
 800a6ca:	f7f6 fadd 	bl	8000c88 <__aeabi_uldivmod>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	4b95      	ldr	r3, [pc, #596]	; (800a92c <UART_SetConfig+0x3b4>)
 800a6d6:	fba3 1302 	umull	r1, r3, r3, r2
 800a6da:	095b      	lsrs	r3, r3, #5
 800a6dc:	2164      	movs	r1, #100	; 0x64
 800a6de:	fb01 f303 	mul.w	r3, r1, r3
 800a6e2:	1ad3      	subs	r3, r2, r3
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	3332      	adds	r3, #50	; 0x32
 800a6e8:	4a90      	ldr	r2, [pc, #576]	; (800a92c <UART_SetConfig+0x3b4>)
 800a6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ee:	095b      	lsrs	r3, r3, #5
 800a6f0:	005b      	lsls	r3, r3, #1
 800a6f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6f6:	4498      	add	r8, r3
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	461d      	mov	r5, r3
 800a6fc:	f04f 0600 	mov.w	r6, #0
 800a700:	46a9      	mov	r9, r5
 800a702:	46b2      	mov	sl, r6
 800a704:	eb19 0309 	adds.w	r3, r9, r9
 800a708:	eb4a 040a 	adc.w	r4, sl, sl
 800a70c:	4699      	mov	r9, r3
 800a70e:	46a2      	mov	sl, r4
 800a710:	eb19 0905 	adds.w	r9, r9, r5
 800a714:	eb4a 0a06 	adc.w	sl, sl, r6
 800a718:	f04f 0100 	mov.w	r1, #0
 800a71c:	f04f 0200 	mov.w	r2, #0
 800a720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a724:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a728:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a72c:	4689      	mov	r9, r1
 800a72e:	4692      	mov	sl, r2
 800a730:	eb19 0005 	adds.w	r0, r9, r5
 800a734:	eb4a 0106 	adc.w	r1, sl, r6
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	461d      	mov	r5, r3
 800a73e:	f04f 0600 	mov.w	r6, #0
 800a742:	196b      	adds	r3, r5, r5
 800a744:	eb46 0406 	adc.w	r4, r6, r6
 800a748:	461a      	mov	r2, r3
 800a74a:	4623      	mov	r3, r4
 800a74c:	f7f6 fa9c 	bl	8000c88 <__aeabi_uldivmod>
 800a750:	4603      	mov	r3, r0
 800a752:	460c      	mov	r4, r1
 800a754:	461a      	mov	r2, r3
 800a756:	4b75      	ldr	r3, [pc, #468]	; (800a92c <UART_SetConfig+0x3b4>)
 800a758:	fba3 1302 	umull	r1, r3, r3, r2
 800a75c:	095b      	lsrs	r3, r3, #5
 800a75e:	2164      	movs	r1, #100	; 0x64
 800a760:	fb01 f303 	mul.w	r3, r1, r3
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	00db      	lsls	r3, r3, #3
 800a768:	3332      	adds	r3, #50	; 0x32
 800a76a:	4a70      	ldr	r2, [pc, #448]	; (800a92c <UART_SetConfig+0x3b4>)
 800a76c:	fba2 2303 	umull	r2, r3, r2, r3
 800a770:	095b      	lsrs	r3, r3, #5
 800a772:	f003 0207 	and.w	r2, r3, #7
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4442      	add	r2, r8
 800a77c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a77e:	e0cc      	b.n	800a91a <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	469a      	mov	sl, r3
 800a784:	f04f 0b00 	mov.w	fp, #0
 800a788:	46d0      	mov	r8, sl
 800a78a:	46d9      	mov	r9, fp
 800a78c:	eb18 0308 	adds.w	r3, r8, r8
 800a790:	eb49 0409 	adc.w	r4, r9, r9
 800a794:	4698      	mov	r8, r3
 800a796:	46a1      	mov	r9, r4
 800a798:	eb18 080a 	adds.w	r8, r8, sl
 800a79c:	eb49 090b 	adc.w	r9, r9, fp
 800a7a0:	f04f 0100 	mov.w	r1, #0
 800a7a4:	f04f 0200 	mov.w	r2, #0
 800a7a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a7ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a7b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a7b4:	4688      	mov	r8, r1
 800a7b6:	4691      	mov	r9, r2
 800a7b8:	eb1a 0508 	adds.w	r5, sl, r8
 800a7bc:	eb4b 0609 	adc.w	r6, fp, r9
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	f04f 0200 	mov.w	r2, #0
 800a7ca:	f04f 0300 	mov.w	r3, #0
 800a7ce:	f04f 0400 	mov.w	r4, #0
 800a7d2:	0094      	lsls	r4, r2, #2
 800a7d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a7d8:	008b      	lsls	r3, r1, #2
 800a7da:	461a      	mov	r2, r3
 800a7dc:	4623      	mov	r3, r4
 800a7de:	4628      	mov	r0, r5
 800a7e0:	4631      	mov	r1, r6
 800a7e2:	f7f6 fa51 	bl	8000c88 <__aeabi_uldivmod>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	4b4f      	ldr	r3, [pc, #316]	; (800a92c <UART_SetConfig+0x3b4>)
 800a7ee:	fba3 2302 	umull	r2, r3, r3, r2
 800a7f2:	095b      	lsrs	r3, r3, #5
 800a7f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	469b      	mov	fp, r3
 800a7fc:	f04f 0c00 	mov.w	ip, #0
 800a800:	46d9      	mov	r9, fp
 800a802:	46e2      	mov	sl, ip
 800a804:	eb19 0309 	adds.w	r3, r9, r9
 800a808:	eb4a 040a 	adc.w	r4, sl, sl
 800a80c:	4699      	mov	r9, r3
 800a80e:	46a2      	mov	sl, r4
 800a810:	eb19 090b 	adds.w	r9, r9, fp
 800a814:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a818:	f04f 0100 	mov.w	r1, #0
 800a81c:	f04f 0200 	mov.w	r2, #0
 800a820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a824:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a828:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a82c:	4689      	mov	r9, r1
 800a82e:	4692      	mov	sl, r2
 800a830:	eb1b 0509 	adds.w	r5, fp, r9
 800a834:	eb4c 060a 	adc.w	r6, ip, sl
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	4619      	mov	r1, r3
 800a83e:	f04f 0200 	mov.w	r2, #0
 800a842:	f04f 0300 	mov.w	r3, #0
 800a846:	f04f 0400 	mov.w	r4, #0
 800a84a:	0094      	lsls	r4, r2, #2
 800a84c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a850:	008b      	lsls	r3, r1, #2
 800a852:	461a      	mov	r2, r3
 800a854:	4623      	mov	r3, r4
 800a856:	4628      	mov	r0, r5
 800a858:	4631      	mov	r1, r6
 800a85a:	f7f6 fa15 	bl	8000c88 <__aeabi_uldivmod>
 800a85e:	4603      	mov	r3, r0
 800a860:	460c      	mov	r4, r1
 800a862:	461a      	mov	r2, r3
 800a864:	4b31      	ldr	r3, [pc, #196]	; (800a92c <UART_SetConfig+0x3b4>)
 800a866:	fba3 1302 	umull	r1, r3, r3, r2
 800a86a:	095b      	lsrs	r3, r3, #5
 800a86c:	2164      	movs	r1, #100	; 0x64
 800a86e:	fb01 f303 	mul.w	r3, r1, r3
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	011b      	lsls	r3, r3, #4
 800a876:	3332      	adds	r3, #50	; 0x32
 800a878:	4a2c      	ldr	r2, [pc, #176]	; (800a92c <UART_SetConfig+0x3b4>)
 800a87a:	fba2 2303 	umull	r2, r3, r2, r3
 800a87e:	095b      	lsrs	r3, r3, #5
 800a880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a884:	4498      	add	r8, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	469b      	mov	fp, r3
 800a88a:	f04f 0c00 	mov.w	ip, #0
 800a88e:	46d9      	mov	r9, fp
 800a890:	46e2      	mov	sl, ip
 800a892:	eb19 0309 	adds.w	r3, r9, r9
 800a896:	eb4a 040a 	adc.w	r4, sl, sl
 800a89a:	4699      	mov	r9, r3
 800a89c:	46a2      	mov	sl, r4
 800a89e:	eb19 090b 	adds.w	r9, r9, fp
 800a8a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a8a6:	f04f 0100 	mov.w	r1, #0
 800a8aa:	f04f 0200 	mov.w	r2, #0
 800a8ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8ba:	4689      	mov	r9, r1
 800a8bc:	4692      	mov	sl, r2
 800a8be:	eb1b 0509 	adds.w	r5, fp, r9
 800a8c2:	eb4c 060a 	adc.w	r6, ip, sl
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	f04f 0200 	mov.w	r2, #0
 800a8d0:	f04f 0300 	mov.w	r3, #0
 800a8d4:	f04f 0400 	mov.w	r4, #0
 800a8d8:	0094      	lsls	r4, r2, #2
 800a8da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a8de:	008b      	lsls	r3, r1, #2
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	4623      	mov	r3, r4
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	f7f6 f9ce 	bl	8000c88 <__aeabi_uldivmod>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	4b0e      	ldr	r3, [pc, #56]	; (800a92c <UART_SetConfig+0x3b4>)
 800a8f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8f8:	095b      	lsrs	r3, r3, #5
 800a8fa:	2164      	movs	r1, #100	; 0x64
 800a8fc:	fb01 f303 	mul.w	r3, r1, r3
 800a900:	1ad3      	subs	r3, r2, r3
 800a902:	011b      	lsls	r3, r3, #4
 800a904:	3332      	adds	r3, #50	; 0x32
 800a906:	4a09      	ldr	r2, [pc, #36]	; (800a92c <UART_SetConfig+0x3b4>)
 800a908:	fba2 2303 	umull	r2, r3, r2, r3
 800a90c:	095b      	lsrs	r3, r3, #5
 800a90e:	f003 020f 	and.w	r2, r3, #15
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4442      	add	r2, r8
 800a918:	609a      	str	r2, [r3, #8]
}
 800a91a:	bf00      	nop
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a924:	40011000 	.word	0x40011000
 800a928:	40011400 	.word	0x40011400
 800a92c:	51eb851f 	.word	0x51eb851f

0800a930 <__errno>:
 800a930:	4b01      	ldr	r3, [pc, #4]	; (800a938 <__errno+0x8>)
 800a932:	6818      	ldr	r0, [r3, #0]
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	2000000c 	.word	0x2000000c

0800a93c <__libc_init_array>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	4e0d      	ldr	r6, [pc, #52]	; (800a974 <__libc_init_array+0x38>)
 800a940:	4c0d      	ldr	r4, [pc, #52]	; (800a978 <__libc_init_array+0x3c>)
 800a942:	1ba4      	subs	r4, r4, r6
 800a944:	10a4      	asrs	r4, r4, #2
 800a946:	2500      	movs	r5, #0
 800a948:	42a5      	cmp	r5, r4
 800a94a:	d109      	bne.n	800a960 <__libc_init_array+0x24>
 800a94c:	4e0b      	ldr	r6, [pc, #44]	; (800a97c <__libc_init_array+0x40>)
 800a94e:	4c0c      	ldr	r4, [pc, #48]	; (800a980 <__libc_init_array+0x44>)
 800a950:	f005 fb10 	bl	800ff74 <_init>
 800a954:	1ba4      	subs	r4, r4, r6
 800a956:	10a4      	asrs	r4, r4, #2
 800a958:	2500      	movs	r5, #0
 800a95a:	42a5      	cmp	r5, r4
 800a95c:	d105      	bne.n	800a96a <__libc_init_array+0x2e>
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
 800a960:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a964:	4798      	blx	r3
 800a966:	3501      	adds	r5, #1
 800a968:	e7ee      	b.n	800a948 <__libc_init_array+0xc>
 800a96a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a96e:	4798      	blx	r3
 800a970:	3501      	adds	r5, #1
 800a972:	e7f2      	b.n	800a95a <__libc_init_array+0x1e>
 800a974:	080106a0 	.word	0x080106a0
 800a978:	080106a0 	.word	0x080106a0
 800a97c:	080106a0 	.word	0x080106a0
 800a980:	080106a4 	.word	0x080106a4

0800a984 <memcpy>:
 800a984:	b510      	push	{r4, lr}
 800a986:	1e43      	subs	r3, r0, #1
 800a988:	440a      	add	r2, r1
 800a98a:	4291      	cmp	r1, r2
 800a98c:	d100      	bne.n	800a990 <memcpy+0xc>
 800a98e:	bd10      	pop	{r4, pc}
 800a990:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a994:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a998:	e7f7      	b.n	800a98a <memcpy+0x6>

0800a99a <memset>:
 800a99a:	4402      	add	r2, r0
 800a99c:	4603      	mov	r3, r0
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d100      	bne.n	800a9a4 <memset+0xa>
 800a9a2:	4770      	bx	lr
 800a9a4:	f803 1b01 	strb.w	r1, [r3], #1
 800a9a8:	e7f9      	b.n	800a99e <memset+0x4>

0800a9aa <__cvt>:
 800a9aa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ae:	ec55 4b10 	vmov	r4, r5, d0
 800a9b2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a9b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a9b8:	2d00      	cmp	r5, #0
 800a9ba:	460e      	mov	r6, r1
 800a9bc:	4691      	mov	r9, r2
 800a9be:	4619      	mov	r1, r3
 800a9c0:	bfb8      	it	lt
 800a9c2:	4622      	movlt	r2, r4
 800a9c4:	462b      	mov	r3, r5
 800a9c6:	f027 0720 	bic.w	r7, r7, #32
 800a9ca:	bfbb      	ittet	lt
 800a9cc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a9d0:	461d      	movlt	r5, r3
 800a9d2:	2300      	movge	r3, #0
 800a9d4:	232d      	movlt	r3, #45	; 0x2d
 800a9d6:	bfb8      	it	lt
 800a9d8:	4614      	movlt	r4, r2
 800a9da:	2f46      	cmp	r7, #70	; 0x46
 800a9dc:	700b      	strb	r3, [r1, #0]
 800a9de:	d004      	beq.n	800a9ea <__cvt+0x40>
 800a9e0:	2f45      	cmp	r7, #69	; 0x45
 800a9e2:	d100      	bne.n	800a9e6 <__cvt+0x3c>
 800a9e4:	3601      	adds	r6, #1
 800a9e6:	2102      	movs	r1, #2
 800a9e8:	e000      	b.n	800a9ec <__cvt+0x42>
 800a9ea:	2103      	movs	r1, #3
 800a9ec:	ab03      	add	r3, sp, #12
 800a9ee:	9301      	str	r3, [sp, #4]
 800a9f0:	ab02      	add	r3, sp, #8
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	4653      	mov	r3, sl
 800a9f8:	ec45 4b10 	vmov	d0, r4, r5
 800a9fc:	f001 feb4 	bl	800c768 <_dtoa_r>
 800aa00:	2f47      	cmp	r7, #71	; 0x47
 800aa02:	4680      	mov	r8, r0
 800aa04:	d102      	bne.n	800aa0c <__cvt+0x62>
 800aa06:	f019 0f01 	tst.w	r9, #1
 800aa0a:	d026      	beq.n	800aa5a <__cvt+0xb0>
 800aa0c:	2f46      	cmp	r7, #70	; 0x46
 800aa0e:	eb08 0906 	add.w	r9, r8, r6
 800aa12:	d111      	bne.n	800aa38 <__cvt+0x8e>
 800aa14:	f898 3000 	ldrb.w	r3, [r8]
 800aa18:	2b30      	cmp	r3, #48	; 0x30
 800aa1a:	d10a      	bne.n	800aa32 <__cvt+0x88>
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4620      	mov	r0, r4
 800aa22:	4629      	mov	r1, r5
 800aa24:	f7f6 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa28:	b918      	cbnz	r0, 800aa32 <__cvt+0x88>
 800aa2a:	f1c6 0601 	rsb	r6, r6, #1
 800aa2e:	f8ca 6000 	str.w	r6, [sl]
 800aa32:	f8da 3000 	ldr.w	r3, [sl]
 800aa36:	4499      	add	r9, r3
 800aa38:	2200      	movs	r2, #0
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	4629      	mov	r1, r5
 800aa40:	f7f6 f842 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa44:	b938      	cbnz	r0, 800aa56 <__cvt+0xac>
 800aa46:	2230      	movs	r2, #48	; 0x30
 800aa48:	9b03      	ldr	r3, [sp, #12]
 800aa4a:	454b      	cmp	r3, r9
 800aa4c:	d205      	bcs.n	800aa5a <__cvt+0xb0>
 800aa4e:	1c59      	adds	r1, r3, #1
 800aa50:	9103      	str	r1, [sp, #12]
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	e7f8      	b.n	800aa48 <__cvt+0x9e>
 800aa56:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa5a:	9b03      	ldr	r3, [sp, #12]
 800aa5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa5e:	eba3 0308 	sub.w	r3, r3, r8
 800aa62:	4640      	mov	r0, r8
 800aa64:	6013      	str	r3, [r2, #0]
 800aa66:	b004      	add	sp, #16
 800aa68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aa6c <__exponent>:
 800aa6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa6e:	2900      	cmp	r1, #0
 800aa70:	4604      	mov	r4, r0
 800aa72:	bfba      	itte	lt
 800aa74:	4249      	neglt	r1, r1
 800aa76:	232d      	movlt	r3, #45	; 0x2d
 800aa78:	232b      	movge	r3, #43	; 0x2b
 800aa7a:	2909      	cmp	r1, #9
 800aa7c:	f804 2b02 	strb.w	r2, [r4], #2
 800aa80:	7043      	strb	r3, [r0, #1]
 800aa82:	dd20      	ble.n	800aac6 <__exponent+0x5a>
 800aa84:	f10d 0307 	add.w	r3, sp, #7
 800aa88:	461f      	mov	r7, r3
 800aa8a:	260a      	movs	r6, #10
 800aa8c:	fb91 f5f6 	sdiv	r5, r1, r6
 800aa90:	fb06 1115 	mls	r1, r6, r5, r1
 800aa94:	3130      	adds	r1, #48	; 0x30
 800aa96:	2d09      	cmp	r5, #9
 800aa98:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa9c:	f103 32ff 	add.w	r2, r3, #4294967295
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	dc09      	bgt.n	800aab8 <__exponent+0x4c>
 800aaa4:	3130      	adds	r1, #48	; 0x30
 800aaa6:	3b02      	subs	r3, #2
 800aaa8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aaac:	42bb      	cmp	r3, r7
 800aaae:	4622      	mov	r2, r4
 800aab0:	d304      	bcc.n	800aabc <__exponent+0x50>
 800aab2:	1a10      	subs	r0, r2, r0
 800aab4:	b003      	add	sp, #12
 800aab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aab8:	4613      	mov	r3, r2
 800aaba:	e7e7      	b.n	800aa8c <__exponent+0x20>
 800aabc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aac0:	f804 2b01 	strb.w	r2, [r4], #1
 800aac4:	e7f2      	b.n	800aaac <__exponent+0x40>
 800aac6:	2330      	movs	r3, #48	; 0x30
 800aac8:	4419      	add	r1, r3
 800aaca:	7083      	strb	r3, [r0, #2]
 800aacc:	1d02      	adds	r2, r0, #4
 800aace:	70c1      	strb	r1, [r0, #3]
 800aad0:	e7ef      	b.n	800aab2 <__exponent+0x46>
	...

0800aad4 <_printf_float>:
 800aad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad8:	b08d      	sub	sp, #52	; 0x34
 800aada:	460c      	mov	r4, r1
 800aadc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800aae0:	4616      	mov	r6, r2
 800aae2:	461f      	mov	r7, r3
 800aae4:	4605      	mov	r5, r0
 800aae6:	f003 f89d 	bl	800dc24 <_localeconv_r>
 800aaea:	6803      	ldr	r3, [r0, #0]
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7f5 fb6e 	bl	80001d0 <strlen>
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	930a      	str	r3, [sp, #40]	; 0x28
 800aaf8:	f8d8 3000 	ldr.w	r3, [r8]
 800aafc:	9005      	str	r0, [sp, #20]
 800aafe:	3307      	adds	r3, #7
 800ab00:	f023 0307 	bic.w	r3, r3, #7
 800ab04:	f103 0208 	add.w	r2, r3, #8
 800ab08:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab0c:	f8d4 b000 	ldr.w	fp, [r4]
 800ab10:	f8c8 2000 	str.w	r2, [r8]
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ab1c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ab20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab24:	9307      	str	r3, [sp, #28]
 800ab26:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab2e:	4ba7      	ldr	r3, [pc, #668]	; (800adcc <_printf_float+0x2f8>)
 800ab30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab34:	f7f5 fffa 	bl	8000b2c <__aeabi_dcmpun>
 800ab38:	bb70      	cbnz	r0, 800ab98 <_printf_float+0xc4>
 800ab3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3e:	4ba3      	ldr	r3, [pc, #652]	; (800adcc <_printf_float+0x2f8>)
 800ab40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab44:	f7f5 ffd4 	bl	8000af0 <__aeabi_dcmple>
 800ab48:	bb30      	cbnz	r0, 800ab98 <_printf_float+0xc4>
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	4640      	mov	r0, r8
 800ab50:	4649      	mov	r1, r9
 800ab52:	f7f5 ffc3 	bl	8000adc <__aeabi_dcmplt>
 800ab56:	b110      	cbz	r0, 800ab5e <_printf_float+0x8a>
 800ab58:	232d      	movs	r3, #45	; 0x2d
 800ab5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab5e:	4a9c      	ldr	r2, [pc, #624]	; (800add0 <_printf_float+0x2fc>)
 800ab60:	4b9c      	ldr	r3, [pc, #624]	; (800add4 <_printf_float+0x300>)
 800ab62:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ab66:	bf8c      	ite	hi
 800ab68:	4690      	movhi	r8, r2
 800ab6a:	4698      	movls	r8, r3
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	f02b 0204 	bic.w	r2, fp, #4
 800ab72:	6123      	str	r3, [r4, #16]
 800ab74:	6022      	str	r2, [r4, #0]
 800ab76:	f04f 0900 	mov.w	r9, #0
 800ab7a:	9700      	str	r7, [sp, #0]
 800ab7c:	4633      	mov	r3, r6
 800ab7e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab80:	4621      	mov	r1, r4
 800ab82:	4628      	mov	r0, r5
 800ab84:	f000 f9e6 	bl	800af54 <_printf_common>
 800ab88:	3001      	adds	r0, #1
 800ab8a:	f040 808d 	bne.w	800aca8 <_printf_float+0x1d4>
 800ab8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab92:	b00d      	add	sp, #52	; 0x34
 800ab94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab98:	4642      	mov	r2, r8
 800ab9a:	464b      	mov	r3, r9
 800ab9c:	4640      	mov	r0, r8
 800ab9e:	4649      	mov	r1, r9
 800aba0:	f7f5 ffc4 	bl	8000b2c <__aeabi_dcmpun>
 800aba4:	b110      	cbz	r0, 800abac <_printf_float+0xd8>
 800aba6:	4a8c      	ldr	r2, [pc, #560]	; (800add8 <_printf_float+0x304>)
 800aba8:	4b8c      	ldr	r3, [pc, #560]	; (800addc <_printf_float+0x308>)
 800abaa:	e7da      	b.n	800ab62 <_printf_float+0x8e>
 800abac:	6861      	ldr	r1, [r4, #4]
 800abae:	1c4b      	adds	r3, r1, #1
 800abb0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800abb4:	a80a      	add	r0, sp, #40	; 0x28
 800abb6:	d13e      	bne.n	800ac36 <_printf_float+0x162>
 800abb8:	2306      	movs	r3, #6
 800abba:	6063      	str	r3, [r4, #4]
 800abbc:	2300      	movs	r3, #0
 800abbe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800abc2:	ab09      	add	r3, sp, #36	; 0x24
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	ec49 8b10 	vmov	d0, r8, r9
 800abca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800abce:	6022      	str	r2, [r4, #0]
 800abd0:	f8cd a004 	str.w	sl, [sp, #4]
 800abd4:	6861      	ldr	r1, [r4, #4]
 800abd6:	4628      	mov	r0, r5
 800abd8:	f7ff fee7 	bl	800a9aa <__cvt>
 800abdc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800abe0:	2b47      	cmp	r3, #71	; 0x47
 800abe2:	4680      	mov	r8, r0
 800abe4:	d109      	bne.n	800abfa <_printf_float+0x126>
 800abe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe8:	1cd8      	adds	r0, r3, #3
 800abea:	db02      	blt.n	800abf2 <_printf_float+0x11e>
 800abec:	6862      	ldr	r2, [r4, #4]
 800abee:	4293      	cmp	r3, r2
 800abf0:	dd47      	ble.n	800ac82 <_printf_float+0x1ae>
 800abf2:	f1aa 0a02 	sub.w	sl, sl, #2
 800abf6:	fa5f fa8a 	uxtb.w	sl, sl
 800abfa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800abfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac00:	d824      	bhi.n	800ac4c <_printf_float+0x178>
 800ac02:	3901      	subs	r1, #1
 800ac04:	4652      	mov	r2, sl
 800ac06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac0a:	9109      	str	r1, [sp, #36]	; 0x24
 800ac0c:	f7ff ff2e 	bl	800aa6c <__exponent>
 800ac10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac12:	1813      	adds	r3, r2, r0
 800ac14:	2a01      	cmp	r2, #1
 800ac16:	4681      	mov	r9, r0
 800ac18:	6123      	str	r3, [r4, #16]
 800ac1a:	dc02      	bgt.n	800ac22 <_printf_float+0x14e>
 800ac1c:	6822      	ldr	r2, [r4, #0]
 800ac1e:	07d1      	lsls	r1, r2, #31
 800ac20:	d501      	bpl.n	800ac26 <_printf_float+0x152>
 800ac22:	3301      	adds	r3, #1
 800ac24:	6123      	str	r3, [r4, #16]
 800ac26:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d0a5      	beq.n	800ab7a <_printf_float+0xa6>
 800ac2e:	232d      	movs	r3, #45	; 0x2d
 800ac30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac34:	e7a1      	b.n	800ab7a <_printf_float+0xa6>
 800ac36:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ac3a:	f000 8177 	beq.w	800af2c <_printf_float+0x458>
 800ac3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ac42:	d1bb      	bne.n	800abbc <_printf_float+0xe8>
 800ac44:	2900      	cmp	r1, #0
 800ac46:	d1b9      	bne.n	800abbc <_printf_float+0xe8>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e7b6      	b.n	800abba <_printf_float+0xe6>
 800ac4c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ac50:	d119      	bne.n	800ac86 <_printf_float+0x1b2>
 800ac52:	2900      	cmp	r1, #0
 800ac54:	6863      	ldr	r3, [r4, #4]
 800ac56:	dd0c      	ble.n	800ac72 <_printf_float+0x19e>
 800ac58:	6121      	str	r1, [r4, #16]
 800ac5a:	b913      	cbnz	r3, 800ac62 <_printf_float+0x18e>
 800ac5c:	6822      	ldr	r2, [r4, #0]
 800ac5e:	07d2      	lsls	r2, r2, #31
 800ac60:	d502      	bpl.n	800ac68 <_printf_float+0x194>
 800ac62:	3301      	adds	r3, #1
 800ac64:	440b      	add	r3, r1
 800ac66:	6123      	str	r3, [r4, #16]
 800ac68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac6a:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac6c:	f04f 0900 	mov.w	r9, #0
 800ac70:	e7d9      	b.n	800ac26 <_printf_float+0x152>
 800ac72:	b913      	cbnz	r3, 800ac7a <_printf_float+0x1a6>
 800ac74:	6822      	ldr	r2, [r4, #0]
 800ac76:	07d0      	lsls	r0, r2, #31
 800ac78:	d501      	bpl.n	800ac7e <_printf_float+0x1aa>
 800ac7a:	3302      	adds	r3, #2
 800ac7c:	e7f3      	b.n	800ac66 <_printf_float+0x192>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e7f1      	b.n	800ac66 <_printf_float+0x192>
 800ac82:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ac86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	db05      	blt.n	800ac9a <_printf_float+0x1c6>
 800ac8e:	6822      	ldr	r2, [r4, #0]
 800ac90:	6123      	str	r3, [r4, #16]
 800ac92:	07d1      	lsls	r1, r2, #31
 800ac94:	d5e8      	bpl.n	800ac68 <_printf_float+0x194>
 800ac96:	3301      	adds	r3, #1
 800ac98:	e7e5      	b.n	800ac66 <_printf_float+0x192>
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	bfd4      	ite	le
 800ac9e:	f1c3 0302 	rsble	r3, r3, #2
 800aca2:	2301      	movgt	r3, #1
 800aca4:	4413      	add	r3, r2
 800aca6:	e7de      	b.n	800ac66 <_printf_float+0x192>
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	055a      	lsls	r2, r3, #21
 800acac:	d407      	bmi.n	800acbe <_printf_float+0x1ea>
 800acae:	6923      	ldr	r3, [r4, #16]
 800acb0:	4642      	mov	r2, r8
 800acb2:	4631      	mov	r1, r6
 800acb4:	4628      	mov	r0, r5
 800acb6:	47b8      	blx	r7
 800acb8:	3001      	adds	r0, #1
 800acba:	d12b      	bne.n	800ad14 <_printf_float+0x240>
 800acbc:	e767      	b.n	800ab8e <_printf_float+0xba>
 800acbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800acc2:	f240 80dc 	bls.w	800ae7e <_printf_float+0x3aa>
 800acc6:	2200      	movs	r2, #0
 800acc8:	2300      	movs	r3, #0
 800acca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800acce:	f7f5 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d033      	beq.n	800ad3e <_printf_float+0x26a>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4a41      	ldr	r2, [pc, #260]	; (800ade0 <_printf_float+0x30c>)
 800acda:	4631      	mov	r1, r6
 800acdc:	4628      	mov	r0, r5
 800acde:	47b8      	blx	r7
 800ace0:	3001      	adds	r0, #1
 800ace2:	f43f af54 	beq.w	800ab8e <_printf_float+0xba>
 800ace6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acea:	429a      	cmp	r2, r3
 800acec:	db02      	blt.n	800acf4 <_printf_float+0x220>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	07d8      	lsls	r0, r3, #31
 800acf2:	d50f      	bpl.n	800ad14 <_printf_float+0x240>
 800acf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acf8:	4631      	mov	r1, r6
 800acfa:	4628      	mov	r0, r5
 800acfc:	47b8      	blx	r7
 800acfe:	3001      	adds	r0, #1
 800ad00:	f43f af45 	beq.w	800ab8e <_printf_float+0xba>
 800ad04:	f04f 0800 	mov.w	r8, #0
 800ad08:	f104 091a 	add.w	r9, r4, #26
 800ad0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	4543      	cmp	r3, r8
 800ad12:	dc09      	bgt.n	800ad28 <_printf_float+0x254>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	079b      	lsls	r3, r3, #30
 800ad18:	f100 8103 	bmi.w	800af22 <_printf_float+0x44e>
 800ad1c:	68e0      	ldr	r0, [r4, #12]
 800ad1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad20:	4298      	cmp	r0, r3
 800ad22:	bfb8      	it	lt
 800ad24:	4618      	movlt	r0, r3
 800ad26:	e734      	b.n	800ab92 <_printf_float+0xbe>
 800ad28:	2301      	movs	r3, #1
 800ad2a:	464a      	mov	r2, r9
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4628      	mov	r0, r5
 800ad30:	47b8      	blx	r7
 800ad32:	3001      	adds	r0, #1
 800ad34:	f43f af2b 	beq.w	800ab8e <_printf_float+0xba>
 800ad38:	f108 0801 	add.w	r8, r8, #1
 800ad3c:	e7e6      	b.n	800ad0c <_printf_float+0x238>
 800ad3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dc2b      	bgt.n	800ad9c <_printf_float+0x2c8>
 800ad44:	2301      	movs	r3, #1
 800ad46:	4a26      	ldr	r2, [pc, #152]	; (800ade0 <_printf_float+0x30c>)
 800ad48:	4631      	mov	r1, r6
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	47b8      	blx	r7
 800ad4e:	3001      	adds	r0, #1
 800ad50:	f43f af1d 	beq.w	800ab8e <_printf_float+0xba>
 800ad54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad56:	b923      	cbnz	r3, 800ad62 <_printf_float+0x28e>
 800ad58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad5a:	b913      	cbnz	r3, 800ad62 <_printf_float+0x28e>
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	07d9      	lsls	r1, r3, #31
 800ad60:	d5d8      	bpl.n	800ad14 <_printf_float+0x240>
 800ad62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad66:	4631      	mov	r1, r6
 800ad68:	4628      	mov	r0, r5
 800ad6a:	47b8      	blx	r7
 800ad6c:	3001      	adds	r0, #1
 800ad6e:	f43f af0e 	beq.w	800ab8e <_printf_float+0xba>
 800ad72:	f04f 0900 	mov.w	r9, #0
 800ad76:	f104 0a1a 	add.w	sl, r4, #26
 800ad7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7c:	425b      	negs	r3, r3
 800ad7e:	454b      	cmp	r3, r9
 800ad80:	dc01      	bgt.n	800ad86 <_printf_float+0x2b2>
 800ad82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad84:	e794      	b.n	800acb0 <_printf_float+0x1dc>
 800ad86:	2301      	movs	r3, #1
 800ad88:	4652      	mov	r2, sl
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b8      	blx	r7
 800ad90:	3001      	adds	r0, #1
 800ad92:	f43f aefc 	beq.w	800ab8e <_printf_float+0xba>
 800ad96:	f109 0901 	add.w	r9, r9, #1
 800ad9a:	e7ee      	b.n	800ad7a <_printf_float+0x2a6>
 800ad9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ada0:	429a      	cmp	r2, r3
 800ada2:	bfa8      	it	ge
 800ada4:	461a      	movge	r2, r3
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	4691      	mov	r9, r2
 800adaa:	dd07      	ble.n	800adbc <_printf_float+0x2e8>
 800adac:	4613      	mov	r3, r2
 800adae:	4631      	mov	r1, r6
 800adb0:	4642      	mov	r2, r8
 800adb2:	4628      	mov	r0, r5
 800adb4:	47b8      	blx	r7
 800adb6:	3001      	adds	r0, #1
 800adb8:	f43f aee9 	beq.w	800ab8e <_printf_float+0xba>
 800adbc:	f104 031a 	add.w	r3, r4, #26
 800adc0:	f04f 0b00 	mov.w	fp, #0
 800adc4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adc8:	9306      	str	r3, [sp, #24]
 800adca:	e015      	b.n	800adf8 <_printf_float+0x324>
 800adcc:	7fefffff 	.word	0x7fefffff
 800add0:	08010338 	.word	0x08010338
 800add4:	08010334 	.word	0x08010334
 800add8:	08010340 	.word	0x08010340
 800addc:	0801033c 	.word	0x0801033c
 800ade0:	08010344 	.word	0x08010344
 800ade4:	2301      	movs	r3, #1
 800ade6:	9a06      	ldr	r2, [sp, #24]
 800ade8:	4631      	mov	r1, r6
 800adea:	4628      	mov	r0, r5
 800adec:	47b8      	blx	r7
 800adee:	3001      	adds	r0, #1
 800adf0:	f43f aecd 	beq.w	800ab8e <_printf_float+0xba>
 800adf4:	f10b 0b01 	add.w	fp, fp, #1
 800adf8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800adfc:	ebaa 0309 	sub.w	r3, sl, r9
 800ae00:	455b      	cmp	r3, fp
 800ae02:	dcef      	bgt.n	800ade4 <_printf_float+0x310>
 800ae04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	44d0      	add	r8, sl
 800ae0c:	db15      	blt.n	800ae3a <_printf_float+0x366>
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	07da      	lsls	r2, r3, #31
 800ae12:	d412      	bmi.n	800ae3a <_printf_float+0x366>
 800ae14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae16:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae18:	eba3 020a 	sub.w	r2, r3, sl
 800ae1c:	eba3 0a01 	sub.w	sl, r3, r1
 800ae20:	4592      	cmp	sl, r2
 800ae22:	bfa8      	it	ge
 800ae24:	4692      	movge	sl, r2
 800ae26:	f1ba 0f00 	cmp.w	sl, #0
 800ae2a:	dc0e      	bgt.n	800ae4a <_printf_float+0x376>
 800ae2c:	f04f 0800 	mov.w	r8, #0
 800ae30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae34:	f104 091a 	add.w	r9, r4, #26
 800ae38:	e019      	b.n	800ae6e <_printf_float+0x39a>
 800ae3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
 800ae42:	47b8      	blx	r7
 800ae44:	3001      	adds	r0, #1
 800ae46:	d1e5      	bne.n	800ae14 <_printf_float+0x340>
 800ae48:	e6a1      	b.n	800ab8e <_printf_float+0xba>
 800ae4a:	4653      	mov	r3, sl
 800ae4c:	4642      	mov	r2, r8
 800ae4e:	4631      	mov	r1, r6
 800ae50:	4628      	mov	r0, r5
 800ae52:	47b8      	blx	r7
 800ae54:	3001      	adds	r0, #1
 800ae56:	d1e9      	bne.n	800ae2c <_printf_float+0x358>
 800ae58:	e699      	b.n	800ab8e <_printf_float+0xba>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	464a      	mov	r2, r9
 800ae5e:	4631      	mov	r1, r6
 800ae60:	4628      	mov	r0, r5
 800ae62:	47b8      	blx	r7
 800ae64:	3001      	adds	r0, #1
 800ae66:	f43f ae92 	beq.w	800ab8e <_printf_float+0xba>
 800ae6a:	f108 0801 	add.w	r8, r8, #1
 800ae6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae72:	1a9b      	subs	r3, r3, r2
 800ae74:	eba3 030a 	sub.w	r3, r3, sl
 800ae78:	4543      	cmp	r3, r8
 800ae7a:	dcee      	bgt.n	800ae5a <_printf_float+0x386>
 800ae7c:	e74a      	b.n	800ad14 <_printf_float+0x240>
 800ae7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae80:	2a01      	cmp	r2, #1
 800ae82:	dc01      	bgt.n	800ae88 <_printf_float+0x3b4>
 800ae84:	07db      	lsls	r3, r3, #31
 800ae86:	d53a      	bpl.n	800aefe <_printf_float+0x42a>
 800ae88:	2301      	movs	r3, #1
 800ae8a:	4642      	mov	r2, r8
 800ae8c:	4631      	mov	r1, r6
 800ae8e:	4628      	mov	r0, r5
 800ae90:	47b8      	blx	r7
 800ae92:	3001      	adds	r0, #1
 800ae94:	f43f ae7b 	beq.w	800ab8e <_printf_float+0xba>
 800ae98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	f108 0801 	add.w	r8, r8, #1
 800aea8:	f43f ae71 	beq.w	800ab8e <_printf_float+0xba>
 800aeac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f103 3aff 	add.w	sl, r3, #4294967295
 800aeb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f7f5 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 800aebe:	b9c8      	cbnz	r0, 800aef4 <_printf_float+0x420>
 800aec0:	4653      	mov	r3, sl
 800aec2:	4642      	mov	r2, r8
 800aec4:	4631      	mov	r1, r6
 800aec6:	4628      	mov	r0, r5
 800aec8:	47b8      	blx	r7
 800aeca:	3001      	adds	r0, #1
 800aecc:	d10e      	bne.n	800aeec <_printf_float+0x418>
 800aece:	e65e      	b.n	800ab8e <_printf_float+0xba>
 800aed0:	2301      	movs	r3, #1
 800aed2:	4652      	mov	r2, sl
 800aed4:	4631      	mov	r1, r6
 800aed6:	4628      	mov	r0, r5
 800aed8:	47b8      	blx	r7
 800aeda:	3001      	adds	r0, #1
 800aedc:	f43f ae57 	beq.w	800ab8e <_printf_float+0xba>
 800aee0:	f108 0801 	add.w	r8, r8, #1
 800aee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee6:	3b01      	subs	r3, #1
 800aee8:	4543      	cmp	r3, r8
 800aeea:	dcf1      	bgt.n	800aed0 <_printf_float+0x3fc>
 800aeec:	464b      	mov	r3, r9
 800aeee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aef2:	e6de      	b.n	800acb2 <_printf_float+0x1de>
 800aef4:	f04f 0800 	mov.w	r8, #0
 800aef8:	f104 0a1a 	add.w	sl, r4, #26
 800aefc:	e7f2      	b.n	800aee4 <_printf_float+0x410>
 800aefe:	2301      	movs	r3, #1
 800af00:	e7df      	b.n	800aec2 <_printf_float+0x3ee>
 800af02:	2301      	movs	r3, #1
 800af04:	464a      	mov	r2, r9
 800af06:	4631      	mov	r1, r6
 800af08:	4628      	mov	r0, r5
 800af0a:	47b8      	blx	r7
 800af0c:	3001      	adds	r0, #1
 800af0e:	f43f ae3e 	beq.w	800ab8e <_printf_float+0xba>
 800af12:	f108 0801 	add.w	r8, r8, #1
 800af16:	68e3      	ldr	r3, [r4, #12]
 800af18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af1a:	1a9b      	subs	r3, r3, r2
 800af1c:	4543      	cmp	r3, r8
 800af1e:	dcf0      	bgt.n	800af02 <_printf_float+0x42e>
 800af20:	e6fc      	b.n	800ad1c <_printf_float+0x248>
 800af22:	f04f 0800 	mov.w	r8, #0
 800af26:	f104 0919 	add.w	r9, r4, #25
 800af2a:	e7f4      	b.n	800af16 <_printf_float+0x442>
 800af2c:	2900      	cmp	r1, #0
 800af2e:	f43f ae8b 	beq.w	800ac48 <_printf_float+0x174>
 800af32:	2300      	movs	r3, #0
 800af34:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800af38:	ab09      	add	r3, sp, #36	; 0x24
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	ec49 8b10 	vmov	d0, r8, r9
 800af40:	6022      	str	r2, [r4, #0]
 800af42:	f8cd a004 	str.w	sl, [sp, #4]
 800af46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af4a:	4628      	mov	r0, r5
 800af4c:	f7ff fd2d 	bl	800a9aa <__cvt>
 800af50:	4680      	mov	r8, r0
 800af52:	e648      	b.n	800abe6 <_printf_float+0x112>

0800af54 <_printf_common>:
 800af54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	4691      	mov	r9, r2
 800af5a:	461f      	mov	r7, r3
 800af5c:	688a      	ldr	r2, [r1, #8]
 800af5e:	690b      	ldr	r3, [r1, #16]
 800af60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af64:	4293      	cmp	r3, r2
 800af66:	bfb8      	it	lt
 800af68:	4613      	movlt	r3, r2
 800af6a:	f8c9 3000 	str.w	r3, [r9]
 800af6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af72:	4606      	mov	r6, r0
 800af74:	460c      	mov	r4, r1
 800af76:	b112      	cbz	r2, 800af7e <_printf_common+0x2a>
 800af78:	3301      	adds	r3, #1
 800af7a:	f8c9 3000 	str.w	r3, [r9]
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	0699      	lsls	r1, r3, #26
 800af82:	bf42      	ittt	mi
 800af84:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af88:	3302      	addmi	r3, #2
 800af8a:	f8c9 3000 	strmi.w	r3, [r9]
 800af8e:	6825      	ldr	r5, [r4, #0]
 800af90:	f015 0506 	ands.w	r5, r5, #6
 800af94:	d107      	bne.n	800afa6 <_printf_common+0x52>
 800af96:	f104 0a19 	add.w	sl, r4, #25
 800af9a:	68e3      	ldr	r3, [r4, #12]
 800af9c:	f8d9 2000 	ldr.w	r2, [r9]
 800afa0:	1a9b      	subs	r3, r3, r2
 800afa2:	42ab      	cmp	r3, r5
 800afa4:	dc28      	bgt.n	800aff8 <_printf_common+0xa4>
 800afa6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800afaa:	6822      	ldr	r2, [r4, #0]
 800afac:	3300      	adds	r3, #0
 800afae:	bf18      	it	ne
 800afb0:	2301      	movne	r3, #1
 800afb2:	0692      	lsls	r2, r2, #26
 800afb4:	d42d      	bmi.n	800b012 <_printf_common+0xbe>
 800afb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afba:	4639      	mov	r1, r7
 800afbc:	4630      	mov	r0, r6
 800afbe:	47c0      	blx	r8
 800afc0:	3001      	adds	r0, #1
 800afc2:	d020      	beq.n	800b006 <_printf_common+0xb2>
 800afc4:	6823      	ldr	r3, [r4, #0]
 800afc6:	68e5      	ldr	r5, [r4, #12]
 800afc8:	f8d9 2000 	ldr.w	r2, [r9]
 800afcc:	f003 0306 	and.w	r3, r3, #6
 800afd0:	2b04      	cmp	r3, #4
 800afd2:	bf08      	it	eq
 800afd4:	1aad      	subeq	r5, r5, r2
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	6922      	ldr	r2, [r4, #16]
 800afda:	bf0c      	ite	eq
 800afdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afe0:	2500      	movne	r5, #0
 800afe2:	4293      	cmp	r3, r2
 800afe4:	bfc4      	itt	gt
 800afe6:	1a9b      	subgt	r3, r3, r2
 800afe8:	18ed      	addgt	r5, r5, r3
 800afea:	f04f 0900 	mov.w	r9, #0
 800afee:	341a      	adds	r4, #26
 800aff0:	454d      	cmp	r5, r9
 800aff2:	d11a      	bne.n	800b02a <_printf_common+0xd6>
 800aff4:	2000      	movs	r0, #0
 800aff6:	e008      	b.n	800b00a <_printf_common+0xb6>
 800aff8:	2301      	movs	r3, #1
 800affa:	4652      	mov	r2, sl
 800affc:	4639      	mov	r1, r7
 800affe:	4630      	mov	r0, r6
 800b000:	47c0      	blx	r8
 800b002:	3001      	adds	r0, #1
 800b004:	d103      	bne.n	800b00e <_printf_common+0xba>
 800b006:	f04f 30ff 	mov.w	r0, #4294967295
 800b00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00e:	3501      	adds	r5, #1
 800b010:	e7c3      	b.n	800af9a <_printf_common+0x46>
 800b012:	18e1      	adds	r1, r4, r3
 800b014:	1c5a      	adds	r2, r3, #1
 800b016:	2030      	movs	r0, #48	; 0x30
 800b018:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b01c:	4422      	add	r2, r4
 800b01e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b022:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b026:	3302      	adds	r3, #2
 800b028:	e7c5      	b.n	800afb6 <_printf_common+0x62>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4622      	mov	r2, r4
 800b02e:	4639      	mov	r1, r7
 800b030:	4630      	mov	r0, r6
 800b032:	47c0      	blx	r8
 800b034:	3001      	adds	r0, #1
 800b036:	d0e6      	beq.n	800b006 <_printf_common+0xb2>
 800b038:	f109 0901 	add.w	r9, r9, #1
 800b03c:	e7d8      	b.n	800aff0 <_printf_common+0x9c>
	...

0800b040 <_printf_i>:
 800b040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b044:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b048:	460c      	mov	r4, r1
 800b04a:	7e09      	ldrb	r1, [r1, #24]
 800b04c:	b085      	sub	sp, #20
 800b04e:	296e      	cmp	r1, #110	; 0x6e
 800b050:	4617      	mov	r7, r2
 800b052:	4606      	mov	r6, r0
 800b054:	4698      	mov	r8, r3
 800b056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b058:	f000 80b3 	beq.w	800b1c2 <_printf_i+0x182>
 800b05c:	d822      	bhi.n	800b0a4 <_printf_i+0x64>
 800b05e:	2963      	cmp	r1, #99	; 0x63
 800b060:	d036      	beq.n	800b0d0 <_printf_i+0x90>
 800b062:	d80a      	bhi.n	800b07a <_printf_i+0x3a>
 800b064:	2900      	cmp	r1, #0
 800b066:	f000 80b9 	beq.w	800b1dc <_printf_i+0x19c>
 800b06a:	2958      	cmp	r1, #88	; 0x58
 800b06c:	f000 8083 	beq.w	800b176 <_printf_i+0x136>
 800b070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b074:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b078:	e032      	b.n	800b0e0 <_printf_i+0xa0>
 800b07a:	2964      	cmp	r1, #100	; 0x64
 800b07c:	d001      	beq.n	800b082 <_printf_i+0x42>
 800b07e:	2969      	cmp	r1, #105	; 0x69
 800b080:	d1f6      	bne.n	800b070 <_printf_i+0x30>
 800b082:	6820      	ldr	r0, [r4, #0]
 800b084:	6813      	ldr	r3, [r2, #0]
 800b086:	0605      	lsls	r5, r0, #24
 800b088:	f103 0104 	add.w	r1, r3, #4
 800b08c:	d52a      	bpl.n	800b0e4 <_printf_i+0xa4>
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6011      	str	r1, [r2, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	da03      	bge.n	800b09e <_printf_i+0x5e>
 800b096:	222d      	movs	r2, #45	; 0x2d
 800b098:	425b      	negs	r3, r3
 800b09a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b09e:	486f      	ldr	r0, [pc, #444]	; (800b25c <_printf_i+0x21c>)
 800b0a0:	220a      	movs	r2, #10
 800b0a2:	e039      	b.n	800b118 <_printf_i+0xd8>
 800b0a4:	2973      	cmp	r1, #115	; 0x73
 800b0a6:	f000 809d 	beq.w	800b1e4 <_printf_i+0x1a4>
 800b0aa:	d808      	bhi.n	800b0be <_printf_i+0x7e>
 800b0ac:	296f      	cmp	r1, #111	; 0x6f
 800b0ae:	d020      	beq.n	800b0f2 <_printf_i+0xb2>
 800b0b0:	2970      	cmp	r1, #112	; 0x70
 800b0b2:	d1dd      	bne.n	800b070 <_printf_i+0x30>
 800b0b4:	6823      	ldr	r3, [r4, #0]
 800b0b6:	f043 0320 	orr.w	r3, r3, #32
 800b0ba:	6023      	str	r3, [r4, #0]
 800b0bc:	e003      	b.n	800b0c6 <_printf_i+0x86>
 800b0be:	2975      	cmp	r1, #117	; 0x75
 800b0c0:	d017      	beq.n	800b0f2 <_printf_i+0xb2>
 800b0c2:	2978      	cmp	r1, #120	; 0x78
 800b0c4:	d1d4      	bne.n	800b070 <_printf_i+0x30>
 800b0c6:	2378      	movs	r3, #120	; 0x78
 800b0c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0cc:	4864      	ldr	r0, [pc, #400]	; (800b260 <_printf_i+0x220>)
 800b0ce:	e055      	b.n	800b17c <_printf_i+0x13c>
 800b0d0:	6813      	ldr	r3, [r2, #0]
 800b0d2:	1d19      	adds	r1, r3, #4
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6011      	str	r1, [r2, #0]
 800b0d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e08c      	b.n	800b1fe <_printf_i+0x1be>
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	6011      	str	r1, [r2, #0]
 800b0e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0ec:	bf18      	it	ne
 800b0ee:	b21b      	sxthne	r3, r3
 800b0f0:	e7cf      	b.n	800b092 <_printf_i+0x52>
 800b0f2:	6813      	ldr	r3, [r2, #0]
 800b0f4:	6825      	ldr	r5, [r4, #0]
 800b0f6:	1d18      	adds	r0, r3, #4
 800b0f8:	6010      	str	r0, [r2, #0]
 800b0fa:	0628      	lsls	r0, r5, #24
 800b0fc:	d501      	bpl.n	800b102 <_printf_i+0xc2>
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	e002      	b.n	800b108 <_printf_i+0xc8>
 800b102:	0668      	lsls	r0, r5, #25
 800b104:	d5fb      	bpl.n	800b0fe <_printf_i+0xbe>
 800b106:	881b      	ldrh	r3, [r3, #0]
 800b108:	4854      	ldr	r0, [pc, #336]	; (800b25c <_printf_i+0x21c>)
 800b10a:	296f      	cmp	r1, #111	; 0x6f
 800b10c:	bf14      	ite	ne
 800b10e:	220a      	movne	r2, #10
 800b110:	2208      	moveq	r2, #8
 800b112:	2100      	movs	r1, #0
 800b114:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b118:	6865      	ldr	r5, [r4, #4]
 800b11a:	60a5      	str	r5, [r4, #8]
 800b11c:	2d00      	cmp	r5, #0
 800b11e:	f2c0 8095 	blt.w	800b24c <_printf_i+0x20c>
 800b122:	6821      	ldr	r1, [r4, #0]
 800b124:	f021 0104 	bic.w	r1, r1, #4
 800b128:	6021      	str	r1, [r4, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d13d      	bne.n	800b1aa <_printf_i+0x16a>
 800b12e:	2d00      	cmp	r5, #0
 800b130:	f040 808e 	bne.w	800b250 <_printf_i+0x210>
 800b134:	4665      	mov	r5, ip
 800b136:	2a08      	cmp	r2, #8
 800b138:	d10b      	bne.n	800b152 <_printf_i+0x112>
 800b13a:	6823      	ldr	r3, [r4, #0]
 800b13c:	07db      	lsls	r3, r3, #31
 800b13e:	d508      	bpl.n	800b152 <_printf_i+0x112>
 800b140:	6923      	ldr	r3, [r4, #16]
 800b142:	6862      	ldr	r2, [r4, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	bfde      	ittt	le
 800b148:	2330      	movle	r3, #48	; 0x30
 800b14a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b14e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b152:	ebac 0305 	sub.w	r3, ip, r5
 800b156:	6123      	str	r3, [r4, #16]
 800b158:	f8cd 8000 	str.w	r8, [sp]
 800b15c:	463b      	mov	r3, r7
 800b15e:	aa03      	add	r2, sp, #12
 800b160:	4621      	mov	r1, r4
 800b162:	4630      	mov	r0, r6
 800b164:	f7ff fef6 	bl	800af54 <_printf_common>
 800b168:	3001      	adds	r0, #1
 800b16a:	d14d      	bne.n	800b208 <_printf_i+0x1c8>
 800b16c:	f04f 30ff 	mov.w	r0, #4294967295
 800b170:	b005      	add	sp, #20
 800b172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b176:	4839      	ldr	r0, [pc, #228]	; (800b25c <_printf_i+0x21c>)
 800b178:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b17c:	6813      	ldr	r3, [r2, #0]
 800b17e:	6821      	ldr	r1, [r4, #0]
 800b180:	1d1d      	adds	r5, r3, #4
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	6015      	str	r5, [r2, #0]
 800b186:	060a      	lsls	r2, r1, #24
 800b188:	d50b      	bpl.n	800b1a2 <_printf_i+0x162>
 800b18a:	07ca      	lsls	r2, r1, #31
 800b18c:	bf44      	itt	mi
 800b18e:	f041 0120 	orrmi.w	r1, r1, #32
 800b192:	6021      	strmi	r1, [r4, #0]
 800b194:	b91b      	cbnz	r3, 800b19e <_printf_i+0x15e>
 800b196:	6822      	ldr	r2, [r4, #0]
 800b198:	f022 0220 	bic.w	r2, r2, #32
 800b19c:	6022      	str	r2, [r4, #0]
 800b19e:	2210      	movs	r2, #16
 800b1a0:	e7b7      	b.n	800b112 <_printf_i+0xd2>
 800b1a2:	064d      	lsls	r5, r1, #25
 800b1a4:	bf48      	it	mi
 800b1a6:	b29b      	uxthmi	r3, r3
 800b1a8:	e7ef      	b.n	800b18a <_printf_i+0x14a>
 800b1aa:	4665      	mov	r5, ip
 800b1ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1b0:	fb02 3311 	mls	r3, r2, r1, r3
 800b1b4:	5cc3      	ldrb	r3, [r0, r3]
 800b1b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	2900      	cmp	r1, #0
 800b1be:	d1f5      	bne.n	800b1ac <_printf_i+0x16c>
 800b1c0:	e7b9      	b.n	800b136 <_printf_i+0xf6>
 800b1c2:	6813      	ldr	r3, [r2, #0]
 800b1c4:	6825      	ldr	r5, [r4, #0]
 800b1c6:	6961      	ldr	r1, [r4, #20]
 800b1c8:	1d18      	adds	r0, r3, #4
 800b1ca:	6010      	str	r0, [r2, #0]
 800b1cc:	0628      	lsls	r0, r5, #24
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	d501      	bpl.n	800b1d6 <_printf_i+0x196>
 800b1d2:	6019      	str	r1, [r3, #0]
 800b1d4:	e002      	b.n	800b1dc <_printf_i+0x19c>
 800b1d6:	066a      	lsls	r2, r5, #25
 800b1d8:	d5fb      	bpl.n	800b1d2 <_printf_i+0x192>
 800b1da:	8019      	strh	r1, [r3, #0]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	6123      	str	r3, [r4, #16]
 800b1e0:	4665      	mov	r5, ip
 800b1e2:	e7b9      	b.n	800b158 <_printf_i+0x118>
 800b1e4:	6813      	ldr	r3, [r2, #0]
 800b1e6:	1d19      	adds	r1, r3, #4
 800b1e8:	6011      	str	r1, [r2, #0]
 800b1ea:	681d      	ldr	r5, [r3, #0]
 800b1ec:	6862      	ldr	r2, [r4, #4]
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	f7f4 fff5 	bl	80001e0 <memchr>
 800b1f6:	b108      	cbz	r0, 800b1fc <_printf_i+0x1bc>
 800b1f8:	1b40      	subs	r0, r0, r5
 800b1fa:	6060      	str	r0, [r4, #4]
 800b1fc:	6863      	ldr	r3, [r4, #4]
 800b1fe:	6123      	str	r3, [r4, #16]
 800b200:	2300      	movs	r3, #0
 800b202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b206:	e7a7      	b.n	800b158 <_printf_i+0x118>
 800b208:	6923      	ldr	r3, [r4, #16]
 800b20a:	462a      	mov	r2, r5
 800b20c:	4639      	mov	r1, r7
 800b20e:	4630      	mov	r0, r6
 800b210:	47c0      	blx	r8
 800b212:	3001      	adds	r0, #1
 800b214:	d0aa      	beq.n	800b16c <_printf_i+0x12c>
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	079b      	lsls	r3, r3, #30
 800b21a:	d413      	bmi.n	800b244 <_printf_i+0x204>
 800b21c:	68e0      	ldr	r0, [r4, #12]
 800b21e:	9b03      	ldr	r3, [sp, #12]
 800b220:	4298      	cmp	r0, r3
 800b222:	bfb8      	it	lt
 800b224:	4618      	movlt	r0, r3
 800b226:	e7a3      	b.n	800b170 <_printf_i+0x130>
 800b228:	2301      	movs	r3, #1
 800b22a:	464a      	mov	r2, r9
 800b22c:	4639      	mov	r1, r7
 800b22e:	4630      	mov	r0, r6
 800b230:	47c0      	blx	r8
 800b232:	3001      	adds	r0, #1
 800b234:	d09a      	beq.n	800b16c <_printf_i+0x12c>
 800b236:	3501      	adds	r5, #1
 800b238:	68e3      	ldr	r3, [r4, #12]
 800b23a:	9a03      	ldr	r2, [sp, #12]
 800b23c:	1a9b      	subs	r3, r3, r2
 800b23e:	42ab      	cmp	r3, r5
 800b240:	dcf2      	bgt.n	800b228 <_printf_i+0x1e8>
 800b242:	e7eb      	b.n	800b21c <_printf_i+0x1dc>
 800b244:	2500      	movs	r5, #0
 800b246:	f104 0919 	add.w	r9, r4, #25
 800b24a:	e7f5      	b.n	800b238 <_printf_i+0x1f8>
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1ac      	bne.n	800b1aa <_printf_i+0x16a>
 800b250:	7803      	ldrb	r3, [r0, #0]
 800b252:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b256:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b25a:	e76c      	b.n	800b136 <_printf_i+0xf6>
 800b25c:	08010346 	.word	0x08010346
 800b260:	08010357 	.word	0x08010357

0800b264 <_scanf_float>:
 800b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	469a      	mov	sl, r3
 800b26a:	688b      	ldr	r3, [r1, #8]
 800b26c:	4616      	mov	r6, r2
 800b26e:	1e5a      	subs	r2, r3, #1
 800b270:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b274:	b087      	sub	sp, #28
 800b276:	bf83      	ittte	hi
 800b278:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b27c:	189b      	addhi	r3, r3, r2
 800b27e:	9301      	strhi	r3, [sp, #4]
 800b280:	2300      	movls	r3, #0
 800b282:	bf86      	itte	hi
 800b284:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b288:	608b      	strhi	r3, [r1, #8]
 800b28a:	9301      	strls	r3, [sp, #4]
 800b28c:	680b      	ldr	r3, [r1, #0]
 800b28e:	4688      	mov	r8, r1
 800b290:	f04f 0b00 	mov.w	fp, #0
 800b294:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b298:	f848 3b1c 	str.w	r3, [r8], #28
 800b29c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	4645      	mov	r5, r8
 800b2a6:	465a      	mov	r2, fp
 800b2a8:	46d9      	mov	r9, fp
 800b2aa:	f8cd b008 	str.w	fp, [sp, #8]
 800b2ae:	68a1      	ldr	r1, [r4, #8]
 800b2b0:	b181      	cbz	r1, 800b2d4 <_scanf_float+0x70>
 800b2b2:	6833      	ldr	r3, [r6, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	2b49      	cmp	r3, #73	; 0x49
 800b2b8:	d071      	beq.n	800b39e <_scanf_float+0x13a>
 800b2ba:	d84d      	bhi.n	800b358 <_scanf_float+0xf4>
 800b2bc:	2b39      	cmp	r3, #57	; 0x39
 800b2be:	d840      	bhi.n	800b342 <_scanf_float+0xde>
 800b2c0:	2b31      	cmp	r3, #49	; 0x31
 800b2c2:	f080 8088 	bcs.w	800b3d6 <_scanf_float+0x172>
 800b2c6:	2b2d      	cmp	r3, #45	; 0x2d
 800b2c8:	f000 8090 	beq.w	800b3ec <_scanf_float+0x188>
 800b2cc:	d815      	bhi.n	800b2fa <_scanf_float+0x96>
 800b2ce:	2b2b      	cmp	r3, #43	; 0x2b
 800b2d0:	f000 808c 	beq.w	800b3ec <_scanf_float+0x188>
 800b2d4:	f1b9 0f00 	cmp.w	r9, #0
 800b2d8:	d003      	beq.n	800b2e2 <_scanf_float+0x7e>
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	3a01      	subs	r2, #1
 800b2e4:	2a01      	cmp	r2, #1
 800b2e6:	f200 80ea 	bhi.w	800b4be <_scanf_float+0x25a>
 800b2ea:	4545      	cmp	r5, r8
 800b2ec:	f200 80dc 	bhi.w	800b4a8 <_scanf_float+0x244>
 800b2f0:	2601      	movs	r6, #1
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	b007      	add	sp, #28
 800b2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2fa:	2b2e      	cmp	r3, #46	; 0x2e
 800b2fc:	f000 809f 	beq.w	800b43e <_scanf_float+0x1da>
 800b300:	2b30      	cmp	r3, #48	; 0x30
 800b302:	d1e7      	bne.n	800b2d4 <_scanf_float+0x70>
 800b304:	6820      	ldr	r0, [r4, #0]
 800b306:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b30a:	d064      	beq.n	800b3d6 <_scanf_float+0x172>
 800b30c:	9b01      	ldr	r3, [sp, #4]
 800b30e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b312:	6020      	str	r0, [r4, #0]
 800b314:	f109 0901 	add.w	r9, r9, #1
 800b318:	b11b      	cbz	r3, 800b322 <_scanf_float+0xbe>
 800b31a:	3b01      	subs	r3, #1
 800b31c:	3101      	adds	r1, #1
 800b31e:	9301      	str	r3, [sp, #4]
 800b320:	60a1      	str	r1, [r4, #8]
 800b322:	68a3      	ldr	r3, [r4, #8]
 800b324:	3b01      	subs	r3, #1
 800b326:	60a3      	str	r3, [r4, #8]
 800b328:	6923      	ldr	r3, [r4, #16]
 800b32a:	3301      	adds	r3, #1
 800b32c:	6123      	str	r3, [r4, #16]
 800b32e:	6873      	ldr	r3, [r6, #4]
 800b330:	3b01      	subs	r3, #1
 800b332:	2b00      	cmp	r3, #0
 800b334:	6073      	str	r3, [r6, #4]
 800b336:	f340 80ac 	ble.w	800b492 <_scanf_float+0x22e>
 800b33a:	6833      	ldr	r3, [r6, #0]
 800b33c:	3301      	adds	r3, #1
 800b33e:	6033      	str	r3, [r6, #0]
 800b340:	e7b5      	b.n	800b2ae <_scanf_float+0x4a>
 800b342:	2b45      	cmp	r3, #69	; 0x45
 800b344:	f000 8085 	beq.w	800b452 <_scanf_float+0x1ee>
 800b348:	2b46      	cmp	r3, #70	; 0x46
 800b34a:	d06a      	beq.n	800b422 <_scanf_float+0x1be>
 800b34c:	2b41      	cmp	r3, #65	; 0x41
 800b34e:	d1c1      	bne.n	800b2d4 <_scanf_float+0x70>
 800b350:	2a01      	cmp	r2, #1
 800b352:	d1bf      	bne.n	800b2d4 <_scanf_float+0x70>
 800b354:	2202      	movs	r2, #2
 800b356:	e046      	b.n	800b3e6 <_scanf_float+0x182>
 800b358:	2b65      	cmp	r3, #101	; 0x65
 800b35a:	d07a      	beq.n	800b452 <_scanf_float+0x1ee>
 800b35c:	d818      	bhi.n	800b390 <_scanf_float+0x12c>
 800b35e:	2b54      	cmp	r3, #84	; 0x54
 800b360:	d066      	beq.n	800b430 <_scanf_float+0x1cc>
 800b362:	d811      	bhi.n	800b388 <_scanf_float+0x124>
 800b364:	2b4e      	cmp	r3, #78	; 0x4e
 800b366:	d1b5      	bne.n	800b2d4 <_scanf_float+0x70>
 800b368:	2a00      	cmp	r2, #0
 800b36a:	d146      	bne.n	800b3fa <_scanf_float+0x196>
 800b36c:	f1b9 0f00 	cmp.w	r9, #0
 800b370:	d145      	bne.n	800b3fe <_scanf_float+0x19a>
 800b372:	6821      	ldr	r1, [r4, #0]
 800b374:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b378:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b37c:	d13f      	bne.n	800b3fe <_scanf_float+0x19a>
 800b37e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b382:	6021      	str	r1, [r4, #0]
 800b384:	2201      	movs	r2, #1
 800b386:	e02e      	b.n	800b3e6 <_scanf_float+0x182>
 800b388:	2b59      	cmp	r3, #89	; 0x59
 800b38a:	d01e      	beq.n	800b3ca <_scanf_float+0x166>
 800b38c:	2b61      	cmp	r3, #97	; 0x61
 800b38e:	e7de      	b.n	800b34e <_scanf_float+0xea>
 800b390:	2b6e      	cmp	r3, #110	; 0x6e
 800b392:	d0e9      	beq.n	800b368 <_scanf_float+0x104>
 800b394:	d815      	bhi.n	800b3c2 <_scanf_float+0x15e>
 800b396:	2b66      	cmp	r3, #102	; 0x66
 800b398:	d043      	beq.n	800b422 <_scanf_float+0x1be>
 800b39a:	2b69      	cmp	r3, #105	; 0x69
 800b39c:	d19a      	bne.n	800b2d4 <_scanf_float+0x70>
 800b39e:	f1bb 0f00 	cmp.w	fp, #0
 800b3a2:	d138      	bne.n	800b416 <_scanf_float+0x1b2>
 800b3a4:	f1b9 0f00 	cmp.w	r9, #0
 800b3a8:	d197      	bne.n	800b2da <_scanf_float+0x76>
 800b3aa:	6821      	ldr	r1, [r4, #0]
 800b3ac:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b3b0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b3b4:	d195      	bne.n	800b2e2 <_scanf_float+0x7e>
 800b3b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b3ba:	6021      	str	r1, [r4, #0]
 800b3bc:	f04f 0b01 	mov.w	fp, #1
 800b3c0:	e011      	b.n	800b3e6 <_scanf_float+0x182>
 800b3c2:	2b74      	cmp	r3, #116	; 0x74
 800b3c4:	d034      	beq.n	800b430 <_scanf_float+0x1cc>
 800b3c6:	2b79      	cmp	r3, #121	; 0x79
 800b3c8:	d184      	bne.n	800b2d4 <_scanf_float+0x70>
 800b3ca:	f1bb 0f07 	cmp.w	fp, #7
 800b3ce:	d181      	bne.n	800b2d4 <_scanf_float+0x70>
 800b3d0:	f04f 0b08 	mov.w	fp, #8
 800b3d4:	e007      	b.n	800b3e6 <_scanf_float+0x182>
 800b3d6:	eb12 0f0b 	cmn.w	r2, fp
 800b3da:	f47f af7b 	bne.w	800b2d4 <_scanf_float+0x70>
 800b3de:	6821      	ldr	r1, [r4, #0]
 800b3e0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b3e4:	6021      	str	r1, [r4, #0]
 800b3e6:	702b      	strb	r3, [r5, #0]
 800b3e8:	3501      	adds	r5, #1
 800b3ea:	e79a      	b.n	800b322 <_scanf_float+0xbe>
 800b3ec:	6821      	ldr	r1, [r4, #0]
 800b3ee:	0608      	lsls	r0, r1, #24
 800b3f0:	f57f af70 	bpl.w	800b2d4 <_scanf_float+0x70>
 800b3f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b3f8:	e7f4      	b.n	800b3e4 <_scanf_float+0x180>
 800b3fa:	2a02      	cmp	r2, #2
 800b3fc:	d047      	beq.n	800b48e <_scanf_float+0x22a>
 800b3fe:	f1bb 0f01 	cmp.w	fp, #1
 800b402:	d003      	beq.n	800b40c <_scanf_float+0x1a8>
 800b404:	f1bb 0f04 	cmp.w	fp, #4
 800b408:	f47f af64 	bne.w	800b2d4 <_scanf_float+0x70>
 800b40c:	f10b 0b01 	add.w	fp, fp, #1
 800b410:	fa5f fb8b 	uxtb.w	fp, fp
 800b414:	e7e7      	b.n	800b3e6 <_scanf_float+0x182>
 800b416:	f1bb 0f03 	cmp.w	fp, #3
 800b41a:	d0f7      	beq.n	800b40c <_scanf_float+0x1a8>
 800b41c:	f1bb 0f05 	cmp.w	fp, #5
 800b420:	e7f2      	b.n	800b408 <_scanf_float+0x1a4>
 800b422:	f1bb 0f02 	cmp.w	fp, #2
 800b426:	f47f af55 	bne.w	800b2d4 <_scanf_float+0x70>
 800b42a:	f04f 0b03 	mov.w	fp, #3
 800b42e:	e7da      	b.n	800b3e6 <_scanf_float+0x182>
 800b430:	f1bb 0f06 	cmp.w	fp, #6
 800b434:	f47f af4e 	bne.w	800b2d4 <_scanf_float+0x70>
 800b438:	f04f 0b07 	mov.w	fp, #7
 800b43c:	e7d3      	b.n	800b3e6 <_scanf_float+0x182>
 800b43e:	6821      	ldr	r1, [r4, #0]
 800b440:	0588      	lsls	r0, r1, #22
 800b442:	f57f af47 	bpl.w	800b2d4 <_scanf_float+0x70>
 800b446:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b44a:	6021      	str	r1, [r4, #0]
 800b44c:	f8cd 9008 	str.w	r9, [sp, #8]
 800b450:	e7c9      	b.n	800b3e6 <_scanf_float+0x182>
 800b452:	6821      	ldr	r1, [r4, #0]
 800b454:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b458:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b45c:	d006      	beq.n	800b46c <_scanf_float+0x208>
 800b45e:	0548      	lsls	r0, r1, #21
 800b460:	f57f af38 	bpl.w	800b2d4 <_scanf_float+0x70>
 800b464:	f1b9 0f00 	cmp.w	r9, #0
 800b468:	f43f af3b 	beq.w	800b2e2 <_scanf_float+0x7e>
 800b46c:	0588      	lsls	r0, r1, #22
 800b46e:	bf58      	it	pl
 800b470:	9802      	ldrpl	r0, [sp, #8]
 800b472:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b476:	bf58      	it	pl
 800b478:	eba9 0000 	subpl.w	r0, r9, r0
 800b47c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b480:	bf58      	it	pl
 800b482:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b486:	6021      	str	r1, [r4, #0]
 800b488:	f04f 0900 	mov.w	r9, #0
 800b48c:	e7ab      	b.n	800b3e6 <_scanf_float+0x182>
 800b48e:	2203      	movs	r2, #3
 800b490:	e7a9      	b.n	800b3e6 <_scanf_float+0x182>
 800b492:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b496:	9205      	str	r2, [sp, #20]
 800b498:	4631      	mov	r1, r6
 800b49a:	4638      	mov	r0, r7
 800b49c:	4798      	blx	r3
 800b49e:	9a05      	ldr	r2, [sp, #20]
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	f43f af04 	beq.w	800b2ae <_scanf_float+0x4a>
 800b4a6:	e715      	b.n	800b2d4 <_scanf_float+0x70>
 800b4a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b4b0:	4632      	mov	r2, r6
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	4798      	blx	r3
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	6123      	str	r3, [r4, #16]
 800b4bc:	e715      	b.n	800b2ea <_scanf_float+0x86>
 800b4be:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b4c2:	2b06      	cmp	r3, #6
 800b4c4:	d80a      	bhi.n	800b4dc <_scanf_float+0x278>
 800b4c6:	f1bb 0f02 	cmp.w	fp, #2
 800b4ca:	d968      	bls.n	800b59e <_scanf_float+0x33a>
 800b4cc:	f1ab 0b03 	sub.w	fp, fp, #3
 800b4d0:	fa5f fb8b 	uxtb.w	fp, fp
 800b4d4:	eba5 0b0b 	sub.w	fp, r5, fp
 800b4d8:	455d      	cmp	r5, fp
 800b4da:	d14b      	bne.n	800b574 <_scanf_float+0x310>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	05da      	lsls	r2, r3, #23
 800b4e0:	d51f      	bpl.n	800b522 <_scanf_float+0x2be>
 800b4e2:	055b      	lsls	r3, r3, #21
 800b4e4:	d468      	bmi.n	800b5b8 <_scanf_float+0x354>
 800b4e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b4ea:	6923      	ldr	r3, [r4, #16]
 800b4ec:	2965      	cmp	r1, #101	; 0x65
 800b4ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800b4f2:	f105 3bff 	add.w	fp, r5, #4294967295
 800b4f6:	6123      	str	r3, [r4, #16]
 800b4f8:	d00d      	beq.n	800b516 <_scanf_float+0x2b2>
 800b4fa:	2945      	cmp	r1, #69	; 0x45
 800b4fc:	d00b      	beq.n	800b516 <_scanf_float+0x2b2>
 800b4fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b502:	4632      	mov	r2, r6
 800b504:	4638      	mov	r0, r7
 800b506:	4798      	blx	r3
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b50e:	3b01      	subs	r3, #1
 800b510:	f1a5 0b02 	sub.w	fp, r5, #2
 800b514:	6123      	str	r3, [r4, #16]
 800b516:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b51a:	4632      	mov	r2, r6
 800b51c:	4638      	mov	r0, r7
 800b51e:	4798      	blx	r3
 800b520:	465d      	mov	r5, fp
 800b522:	6826      	ldr	r6, [r4, #0]
 800b524:	f016 0610 	ands.w	r6, r6, #16
 800b528:	d17a      	bne.n	800b620 <_scanf_float+0x3bc>
 800b52a:	702e      	strb	r6, [r5, #0]
 800b52c:	6823      	ldr	r3, [r4, #0]
 800b52e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b536:	d142      	bne.n	800b5be <_scanf_float+0x35a>
 800b538:	9b02      	ldr	r3, [sp, #8]
 800b53a:	eba9 0303 	sub.w	r3, r9, r3
 800b53e:	425a      	negs	r2, r3
 800b540:	2b00      	cmp	r3, #0
 800b542:	d149      	bne.n	800b5d8 <_scanf_float+0x374>
 800b544:	2200      	movs	r2, #0
 800b546:	4641      	mov	r1, r8
 800b548:	4638      	mov	r0, r7
 800b54a:	f000 ff21 	bl	800c390 <_strtod_r>
 800b54e:	6825      	ldr	r5, [r4, #0]
 800b550:	f8da 3000 	ldr.w	r3, [sl]
 800b554:	f015 0f02 	tst.w	r5, #2
 800b558:	f103 0204 	add.w	r2, r3, #4
 800b55c:	ec59 8b10 	vmov	r8, r9, d0
 800b560:	f8ca 2000 	str.w	r2, [sl]
 800b564:	d043      	beq.n	800b5ee <_scanf_float+0x38a>
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	e9c3 8900 	strd	r8, r9, [r3]
 800b56c:	68e3      	ldr	r3, [r4, #12]
 800b56e:	3301      	adds	r3, #1
 800b570:	60e3      	str	r3, [r4, #12]
 800b572:	e6be      	b.n	800b2f2 <_scanf_float+0x8e>
 800b574:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b578:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b57c:	4632      	mov	r2, r6
 800b57e:	4638      	mov	r0, r7
 800b580:	4798      	blx	r3
 800b582:	6923      	ldr	r3, [r4, #16]
 800b584:	3b01      	subs	r3, #1
 800b586:	6123      	str	r3, [r4, #16]
 800b588:	e7a6      	b.n	800b4d8 <_scanf_float+0x274>
 800b58a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b58e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b592:	4632      	mov	r2, r6
 800b594:	4638      	mov	r0, r7
 800b596:	4798      	blx	r3
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	6123      	str	r3, [r4, #16]
 800b59e:	4545      	cmp	r5, r8
 800b5a0:	d8f3      	bhi.n	800b58a <_scanf_float+0x326>
 800b5a2:	e6a5      	b.n	800b2f0 <_scanf_float+0x8c>
 800b5a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b5ac:	4632      	mov	r2, r6
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	4798      	blx	r3
 800b5b2:	6923      	ldr	r3, [r4, #16]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	6123      	str	r3, [r4, #16]
 800b5b8:	4545      	cmp	r5, r8
 800b5ba:	d8f3      	bhi.n	800b5a4 <_scanf_float+0x340>
 800b5bc:	e698      	b.n	800b2f0 <_scanf_float+0x8c>
 800b5be:	9b03      	ldr	r3, [sp, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0bf      	beq.n	800b544 <_scanf_float+0x2e0>
 800b5c4:	9904      	ldr	r1, [sp, #16]
 800b5c6:	230a      	movs	r3, #10
 800b5c8:	4632      	mov	r2, r6
 800b5ca:	3101      	adds	r1, #1
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	f000 ff6b 	bl	800c4a8 <_strtol_r>
 800b5d2:	9b03      	ldr	r3, [sp, #12]
 800b5d4:	9d04      	ldr	r5, [sp, #16]
 800b5d6:	1ac2      	subs	r2, r0, r3
 800b5d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b5dc:	429d      	cmp	r5, r3
 800b5de:	bf28      	it	cs
 800b5e0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b5e4:	490f      	ldr	r1, [pc, #60]	; (800b624 <_scanf_float+0x3c0>)
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f000 f8a0 	bl	800b72c <siprintf>
 800b5ec:	e7aa      	b.n	800b544 <_scanf_float+0x2e0>
 800b5ee:	f015 0504 	ands.w	r5, r5, #4
 800b5f2:	d1b8      	bne.n	800b566 <_scanf_float+0x302>
 800b5f4:	681f      	ldr	r7, [r3, #0]
 800b5f6:	ee10 2a10 	vmov	r2, s0
 800b5fa:	464b      	mov	r3, r9
 800b5fc:	ee10 0a10 	vmov	r0, s0
 800b600:	4649      	mov	r1, r9
 800b602:	f7f5 fa93 	bl	8000b2c <__aeabi_dcmpun>
 800b606:	b128      	cbz	r0, 800b614 <_scanf_float+0x3b0>
 800b608:	4628      	mov	r0, r5
 800b60a:	f000 f889 	bl	800b720 <nanf>
 800b60e:	ed87 0a00 	vstr	s0, [r7]
 800b612:	e7ab      	b.n	800b56c <_scanf_float+0x308>
 800b614:	4640      	mov	r0, r8
 800b616:	4649      	mov	r1, r9
 800b618:	f7f5 fae6 	bl	8000be8 <__aeabi_d2f>
 800b61c:	6038      	str	r0, [r7, #0]
 800b61e:	e7a5      	b.n	800b56c <_scanf_float+0x308>
 800b620:	2600      	movs	r6, #0
 800b622:	e666      	b.n	800b2f2 <_scanf_float+0x8e>
 800b624:	08010368 	.word	0x08010368

0800b628 <iprintf>:
 800b628:	b40f      	push	{r0, r1, r2, r3}
 800b62a:	4b0a      	ldr	r3, [pc, #40]	; (800b654 <iprintf+0x2c>)
 800b62c:	b513      	push	{r0, r1, r4, lr}
 800b62e:	681c      	ldr	r4, [r3, #0]
 800b630:	b124      	cbz	r4, 800b63c <iprintf+0x14>
 800b632:	69a3      	ldr	r3, [r4, #24]
 800b634:	b913      	cbnz	r3, 800b63c <iprintf+0x14>
 800b636:	4620      	mov	r0, r4
 800b638:	f001 ff3e 	bl	800d4b8 <__sinit>
 800b63c:	ab05      	add	r3, sp, #20
 800b63e:	9a04      	ldr	r2, [sp, #16]
 800b640:	68a1      	ldr	r1, [r4, #8]
 800b642:	9301      	str	r3, [sp, #4]
 800b644:	4620      	mov	r0, r4
 800b646:	f003 f9ab 	bl	800e9a0 <_vfiprintf_r>
 800b64a:	b002      	add	sp, #8
 800b64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b650:	b004      	add	sp, #16
 800b652:	4770      	bx	lr
 800b654:	2000000c 	.word	0x2000000c

0800b658 <_puts_r>:
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	460e      	mov	r6, r1
 800b65c:	4605      	mov	r5, r0
 800b65e:	b118      	cbz	r0, 800b668 <_puts_r+0x10>
 800b660:	6983      	ldr	r3, [r0, #24]
 800b662:	b90b      	cbnz	r3, 800b668 <_puts_r+0x10>
 800b664:	f001 ff28 	bl	800d4b8 <__sinit>
 800b668:	69ab      	ldr	r3, [r5, #24]
 800b66a:	68ac      	ldr	r4, [r5, #8]
 800b66c:	b913      	cbnz	r3, 800b674 <_puts_r+0x1c>
 800b66e:	4628      	mov	r0, r5
 800b670:	f001 ff22 	bl	800d4b8 <__sinit>
 800b674:	4b23      	ldr	r3, [pc, #140]	; (800b704 <_puts_r+0xac>)
 800b676:	429c      	cmp	r4, r3
 800b678:	d117      	bne.n	800b6aa <_puts_r+0x52>
 800b67a:	686c      	ldr	r4, [r5, #4]
 800b67c:	89a3      	ldrh	r3, [r4, #12]
 800b67e:	071b      	lsls	r3, r3, #28
 800b680:	d51d      	bpl.n	800b6be <_puts_r+0x66>
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	b1db      	cbz	r3, 800b6be <_puts_r+0x66>
 800b686:	3e01      	subs	r6, #1
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b68e:	3b01      	subs	r3, #1
 800b690:	60a3      	str	r3, [r4, #8]
 800b692:	b9e9      	cbnz	r1, 800b6d0 <_puts_r+0x78>
 800b694:	2b00      	cmp	r3, #0
 800b696:	da2e      	bge.n	800b6f6 <_puts_r+0x9e>
 800b698:	4622      	mov	r2, r4
 800b69a:	210a      	movs	r1, #10
 800b69c:	4628      	mov	r0, r5
 800b69e:	f000 ff15 	bl	800c4cc <__swbuf_r>
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	d011      	beq.n	800b6ca <_puts_r+0x72>
 800b6a6:	200a      	movs	r0, #10
 800b6a8:	e011      	b.n	800b6ce <_puts_r+0x76>
 800b6aa:	4b17      	ldr	r3, [pc, #92]	; (800b708 <_puts_r+0xb0>)
 800b6ac:	429c      	cmp	r4, r3
 800b6ae:	d101      	bne.n	800b6b4 <_puts_r+0x5c>
 800b6b0:	68ac      	ldr	r4, [r5, #8]
 800b6b2:	e7e3      	b.n	800b67c <_puts_r+0x24>
 800b6b4:	4b15      	ldr	r3, [pc, #84]	; (800b70c <_puts_r+0xb4>)
 800b6b6:	429c      	cmp	r4, r3
 800b6b8:	bf08      	it	eq
 800b6ba:	68ec      	ldreq	r4, [r5, #12]
 800b6bc:	e7de      	b.n	800b67c <_puts_r+0x24>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f000 ff55 	bl	800c570 <__swsetup_r>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d0dd      	beq.n	800b686 <_puts_r+0x2e>
 800b6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ce:	bd70      	pop	{r4, r5, r6, pc}
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	da04      	bge.n	800b6de <_puts_r+0x86>
 800b6d4:	69a2      	ldr	r2, [r4, #24]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	dc06      	bgt.n	800b6e8 <_puts_r+0x90>
 800b6da:	290a      	cmp	r1, #10
 800b6dc:	d004      	beq.n	800b6e8 <_puts_r+0x90>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	6022      	str	r2, [r4, #0]
 800b6e4:	7019      	strb	r1, [r3, #0]
 800b6e6:	e7cf      	b.n	800b688 <_puts_r+0x30>
 800b6e8:	4622      	mov	r2, r4
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	f000 feee 	bl	800c4cc <__swbuf_r>
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	d1c9      	bne.n	800b688 <_puts_r+0x30>
 800b6f4:	e7e9      	b.n	800b6ca <_puts_r+0x72>
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	200a      	movs	r0, #10
 800b6fa:	1c5a      	adds	r2, r3, #1
 800b6fc:	6022      	str	r2, [r4, #0]
 800b6fe:	7018      	strb	r0, [r3, #0]
 800b700:	e7e5      	b.n	800b6ce <_puts_r+0x76>
 800b702:	bf00      	nop
 800b704:	080103f0 	.word	0x080103f0
 800b708:	08010410 	.word	0x08010410
 800b70c:	080103d0 	.word	0x080103d0

0800b710 <puts>:
 800b710:	4b02      	ldr	r3, [pc, #8]	; (800b71c <puts+0xc>)
 800b712:	4601      	mov	r1, r0
 800b714:	6818      	ldr	r0, [r3, #0]
 800b716:	f7ff bf9f 	b.w	800b658 <_puts_r>
 800b71a:	bf00      	nop
 800b71c:	2000000c 	.word	0x2000000c

0800b720 <nanf>:
 800b720:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b728 <nanf+0x8>
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	7fc00000 	.word	0x7fc00000

0800b72c <siprintf>:
 800b72c:	b40e      	push	{r1, r2, r3}
 800b72e:	b500      	push	{lr}
 800b730:	b09c      	sub	sp, #112	; 0x70
 800b732:	ab1d      	add	r3, sp, #116	; 0x74
 800b734:	9002      	str	r0, [sp, #8]
 800b736:	9006      	str	r0, [sp, #24]
 800b738:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b73c:	4809      	ldr	r0, [pc, #36]	; (800b764 <siprintf+0x38>)
 800b73e:	9107      	str	r1, [sp, #28]
 800b740:	9104      	str	r1, [sp, #16]
 800b742:	4909      	ldr	r1, [pc, #36]	; (800b768 <siprintf+0x3c>)
 800b744:	f853 2b04 	ldr.w	r2, [r3], #4
 800b748:	9105      	str	r1, [sp, #20]
 800b74a:	6800      	ldr	r0, [r0, #0]
 800b74c:	9301      	str	r3, [sp, #4]
 800b74e:	a902      	add	r1, sp, #8
 800b750:	f003 f804 	bl	800e75c <_svfiprintf_r>
 800b754:	9b02      	ldr	r3, [sp, #8]
 800b756:	2200      	movs	r2, #0
 800b758:	701a      	strb	r2, [r3, #0]
 800b75a:	b01c      	add	sp, #112	; 0x70
 800b75c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b760:	b003      	add	sp, #12
 800b762:	4770      	bx	lr
 800b764:	2000000c 	.word	0x2000000c
 800b768:	ffff0208 	.word	0xffff0208

0800b76c <sulp>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	4604      	mov	r4, r0
 800b770:	460d      	mov	r5, r1
 800b772:	ec45 4b10 	vmov	d0, r4, r5
 800b776:	4616      	mov	r6, r2
 800b778:	f002 fdac 	bl	800e2d4 <__ulp>
 800b77c:	ec51 0b10 	vmov	r0, r1, d0
 800b780:	b17e      	cbz	r6, 800b7a2 <sulp+0x36>
 800b782:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b786:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	dd09      	ble.n	800b7a2 <sulp+0x36>
 800b78e:	051b      	lsls	r3, r3, #20
 800b790:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b794:	2400      	movs	r4, #0
 800b796:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b79a:	4622      	mov	r2, r4
 800b79c:	462b      	mov	r3, r5
 800b79e:	f7f4 ff2b 	bl	80005f8 <__aeabi_dmul>
 800b7a2:	bd70      	pop	{r4, r5, r6, pc}
 800b7a4:	0000      	movs	r0, r0
	...

0800b7a8 <_strtod_l>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	461f      	mov	r7, r3
 800b7ae:	b0a1      	sub	sp, #132	; 0x84
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4681      	mov	r9, r0
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	460e      	mov	r6, r1
 800b7b8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7ba:	931c      	str	r3, [sp, #112]	; 0x70
 800b7bc:	f002 fa2f 	bl	800dc1e <__localeconv_l>
 800b7c0:	4680      	mov	r8, r0
 800b7c2:	6800      	ldr	r0, [r0, #0]
 800b7c4:	f7f4 fd04 	bl	80001d0 <strlen>
 800b7c8:	f04f 0a00 	mov.w	sl, #0
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	f04f 0b00 	mov.w	fp, #0
 800b7d2:	961b      	str	r6, [sp, #108]	; 0x6c
 800b7d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b7d6:	781a      	ldrb	r2, [r3, #0]
 800b7d8:	2a0d      	cmp	r2, #13
 800b7da:	d832      	bhi.n	800b842 <_strtod_l+0x9a>
 800b7dc:	2a09      	cmp	r2, #9
 800b7de:	d236      	bcs.n	800b84e <_strtod_l+0xa6>
 800b7e0:	2a00      	cmp	r2, #0
 800b7e2:	d03e      	beq.n	800b862 <_strtod_l+0xba>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	930d      	str	r3, [sp, #52]	; 0x34
 800b7e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b7ea:	782b      	ldrb	r3, [r5, #0]
 800b7ec:	2b30      	cmp	r3, #48	; 0x30
 800b7ee:	f040 80ac 	bne.w	800b94a <_strtod_l+0x1a2>
 800b7f2:	786b      	ldrb	r3, [r5, #1]
 800b7f4:	2b58      	cmp	r3, #88	; 0x58
 800b7f6:	d001      	beq.n	800b7fc <_strtod_l+0x54>
 800b7f8:	2b78      	cmp	r3, #120	; 0x78
 800b7fa:	d167      	bne.n	800b8cc <_strtod_l+0x124>
 800b7fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7fe:	9301      	str	r3, [sp, #4]
 800b800:	ab1c      	add	r3, sp, #112	; 0x70
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	9702      	str	r7, [sp, #8]
 800b806:	ab1d      	add	r3, sp, #116	; 0x74
 800b808:	4a88      	ldr	r2, [pc, #544]	; (800ba2c <_strtod_l+0x284>)
 800b80a:	a91b      	add	r1, sp, #108	; 0x6c
 800b80c:	4648      	mov	r0, r9
 800b80e:	f001 ff2c 	bl	800d66a <__gethex>
 800b812:	f010 0407 	ands.w	r4, r0, #7
 800b816:	4606      	mov	r6, r0
 800b818:	d005      	beq.n	800b826 <_strtod_l+0x7e>
 800b81a:	2c06      	cmp	r4, #6
 800b81c:	d12b      	bne.n	800b876 <_strtod_l+0xce>
 800b81e:	3501      	adds	r5, #1
 800b820:	2300      	movs	r3, #0
 800b822:	951b      	str	r5, [sp, #108]	; 0x6c
 800b824:	930d      	str	r3, [sp, #52]	; 0x34
 800b826:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f040 859a 	bne.w	800c362 <_strtod_l+0xbba>
 800b82e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b830:	b1e3      	cbz	r3, 800b86c <_strtod_l+0xc4>
 800b832:	4652      	mov	r2, sl
 800b834:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b838:	ec43 2b10 	vmov	d0, r2, r3
 800b83c:	b021      	add	sp, #132	; 0x84
 800b83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b842:	2a2b      	cmp	r2, #43	; 0x2b
 800b844:	d015      	beq.n	800b872 <_strtod_l+0xca>
 800b846:	2a2d      	cmp	r2, #45	; 0x2d
 800b848:	d004      	beq.n	800b854 <_strtod_l+0xac>
 800b84a:	2a20      	cmp	r2, #32
 800b84c:	d1ca      	bne.n	800b7e4 <_strtod_l+0x3c>
 800b84e:	3301      	adds	r3, #1
 800b850:	931b      	str	r3, [sp, #108]	; 0x6c
 800b852:	e7bf      	b.n	800b7d4 <_strtod_l+0x2c>
 800b854:	2201      	movs	r2, #1
 800b856:	920d      	str	r2, [sp, #52]	; 0x34
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b85c:	785b      	ldrb	r3, [r3, #1]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1c2      	bne.n	800b7e8 <_strtod_l+0x40>
 800b862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b864:	961b      	str	r6, [sp, #108]	; 0x6c
 800b866:	2b00      	cmp	r3, #0
 800b868:	f040 8579 	bne.w	800c35e <_strtod_l+0xbb6>
 800b86c:	4652      	mov	r2, sl
 800b86e:	465b      	mov	r3, fp
 800b870:	e7e2      	b.n	800b838 <_strtod_l+0x90>
 800b872:	2200      	movs	r2, #0
 800b874:	e7ef      	b.n	800b856 <_strtod_l+0xae>
 800b876:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b878:	b13a      	cbz	r2, 800b88a <_strtod_l+0xe2>
 800b87a:	2135      	movs	r1, #53	; 0x35
 800b87c:	a81e      	add	r0, sp, #120	; 0x78
 800b87e:	f002 fe21 	bl	800e4c4 <__copybits>
 800b882:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b884:	4648      	mov	r0, r9
 800b886:	f002 fa8d 	bl	800dda4 <_Bfree>
 800b88a:	3c01      	subs	r4, #1
 800b88c:	2c04      	cmp	r4, #4
 800b88e:	d806      	bhi.n	800b89e <_strtod_l+0xf6>
 800b890:	e8df f004 	tbb	[pc, r4]
 800b894:	1714030a 	.word	0x1714030a
 800b898:	0a          	.byte	0x0a
 800b899:	00          	.byte	0x00
 800b89a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800b89e:	0730      	lsls	r0, r6, #28
 800b8a0:	d5c1      	bpl.n	800b826 <_strtod_l+0x7e>
 800b8a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b8a6:	e7be      	b.n	800b826 <_strtod_l+0x7e>
 800b8a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800b8ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b8ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b8b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b8b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b8ba:	e7f0      	b.n	800b89e <_strtod_l+0xf6>
 800b8bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ba30 <_strtod_l+0x288>
 800b8c0:	e7ed      	b.n	800b89e <_strtod_l+0xf6>
 800b8c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b8c6:	f04f 3aff 	mov.w	sl, #4294967295
 800b8ca:	e7e8      	b.n	800b89e <_strtod_l+0xf6>
 800b8cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8ce:	1c5a      	adds	r2, r3, #1
 800b8d0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b8d2:	785b      	ldrb	r3, [r3, #1]
 800b8d4:	2b30      	cmp	r3, #48	; 0x30
 800b8d6:	d0f9      	beq.n	800b8cc <_strtod_l+0x124>
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d0a4      	beq.n	800b826 <_strtod_l+0x7e>
 800b8dc:	2301      	movs	r3, #1
 800b8de:	2500      	movs	r5, #0
 800b8e0:	9306      	str	r3, [sp, #24]
 800b8e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b8e4:	9308      	str	r3, [sp, #32]
 800b8e6:	9507      	str	r5, [sp, #28]
 800b8e8:	9505      	str	r5, [sp, #20]
 800b8ea:	220a      	movs	r2, #10
 800b8ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b8ee:	7807      	ldrb	r7, [r0, #0]
 800b8f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b8f4:	b2d9      	uxtb	r1, r3
 800b8f6:	2909      	cmp	r1, #9
 800b8f8:	d929      	bls.n	800b94e <_strtod_l+0x1a6>
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	f8d8 1000 	ldr.w	r1, [r8]
 800b900:	f003 f9b7 	bl	800ec72 <strncmp>
 800b904:	2800      	cmp	r0, #0
 800b906:	d031      	beq.n	800b96c <_strtod_l+0x1c4>
 800b908:	2000      	movs	r0, #0
 800b90a:	9c05      	ldr	r4, [sp, #20]
 800b90c:	9004      	str	r0, [sp, #16]
 800b90e:	463b      	mov	r3, r7
 800b910:	4602      	mov	r2, r0
 800b912:	2b65      	cmp	r3, #101	; 0x65
 800b914:	d001      	beq.n	800b91a <_strtod_l+0x172>
 800b916:	2b45      	cmp	r3, #69	; 0x45
 800b918:	d114      	bne.n	800b944 <_strtod_l+0x19c>
 800b91a:	b924      	cbnz	r4, 800b926 <_strtod_l+0x17e>
 800b91c:	b910      	cbnz	r0, 800b924 <_strtod_l+0x17c>
 800b91e:	9b06      	ldr	r3, [sp, #24]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d09e      	beq.n	800b862 <_strtod_l+0xba>
 800b924:	2400      	movs	r4, #0
 800b926:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b928:	1c73      	adds	r3, r6, #1
 800b92a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b92c:	7873      	ldrb	r3, [r6, #1]
 800b92e:	2b2b      	cmp	r3, #43	; 0x2b
 800b930:	d078      	beq.n	800ba24 <_strtod_l+0x27c>
 800b932:	2b2d      	cmp	r3, #45	; 0x2d
 800b934:	d070      	beq.n	800ba18 <_strtod_l+0x270>
 800b936:	f04f 0c00 	mov.w	ip, #0
 800b93a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b93e:	2f09      	cmp	r7, #9
 800b940:	d97c      	bls.n	800ba3c <_strtod_l+0x294>
 800b942:	961b      	str	r6, [sp, #108]	; 0x6c
 800b944:	f04f 0e00 	mov.w	lr, #0
 800b948:	e09a      	b.n	800ba80 <_strtod_l+0x2d8>
 800b94a:	2300      	movs	r3, #0
 800b94c:	e7c7      	b.n	800b8de <_strtod_l+0x136>
 800b94e:	9905      	ldr	r1, [sp, #20]
 800b950:	2908      	cmp	r1, #8
 800b952:	bfdd      	ittte	le
 800b954:	9907      	ldrle	r1, [sp, #28]
 800b956:	fb02 3301 	mlale	r3, r2, r1, r3
 800b95a:	9307      	strle	r3, [sp, #28]
 800b95c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b960:	9b05      	ldr	r3, [sp, #20]
 800b962:	3001      	adds	r0, #1
 800b964:	3301      	adds	r3, #1
 800b966:	9305      	str	r3, [sp, #20]
 800b968:	901b      	str	r0, [sp, #108]	; 0x6c
 800b96a:	e7bf      	b.n	800b8ec <_strtod_l+0x144>
 800b96c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b96e:	191a      	adds	r2, r3, r4
 800b970:	921b      	str	r2, [sp, #108]	; 0x6c
 800b972:	9a05      	ldr	r2, [sp, #20]
 800b974:	5d1b      	ldrb	r3, [r3, r4]
 800b976:	2a00      	cmp	r2, #0
 800b978:	d037      	beq.n	800b9ea <_strtod_l+0x242>
 800b97a:	9c05      	ldr	r4, [sp, #20]
 800b97c:	4602      	mov	r2, r0
 800b97e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b982:	2909      	cmp	r1, #9
 800b984:	d913      	bls.n	800b9ae <_strtod_l+0x206>
 800b986:	2101      	movs	r1, #1
 800b988:	9104      	str	r1, [sp, #16]
 800b98a:	e7c2      	b.n	800b912 <_strtod_l+0x16a>
 800b98c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b98e:	1c5a      	adds	r2, r3, #1
 800b990:	921b      	str	r2, [sp, #108]	; 0x6c
 800b992:	785b      	ldrb	r3, [r3, #1]
 800b994:	3001      	adds	r0, #1
 800b996:	2b30      	cmp	r3, #48	; 0x30
 800b998:	d0f8      	beq.n	800b98c <_strtod_l+0x1e4>
 800b99a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b99e:	2a08      	cmp	r2, #8
 800b9a0:	f200 84e4 	bhi.w	800c36c <_strtod_l+0xbc4>
 800b9a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b9a6:	9208      	str	r2, [sp, #32]
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b9b2:	f100 0101 	add.w	r1, r0, #1
 800b9b6:	d012      	beq.n	800b9de <_strtod_l+0x236>
 800b9b8:	440a      	add	r2, r1
 800b9ba:	eb00 0c04 	add.w	ip, r0, r4
 800b9be:	4621      	mov	r1, r4
 800b9c0:	270a      	movs	r7, #10
 800b9c2:	458c      	cmp	ip, r1
 800b9c4:	d113      	bne.n	800b9ee <_strtod_l+0x246>
 800b9c6:	1821      	adds	r1, r4, r0
 800b9c8:	2908      	cmp	r1, #8
 800b9ca:	f104 0401 	add.w	r4, r4, #1
 800b9ce:	4404      	add	r4, r0
 800b9d0:	dc19      	bgt.n	800ba06 <_strtod_l+0x25e>
 800b9d2:	9b07      	ldr	r3, [sp, #28]
 800b9d4:	210a      	movs	r1, #10
 800b9d6:	fb01 e303 	mla	r3, r1, r3, lr
 800b9da:	9307      	str	r3, [sp, #28]
 800b9dc:	2100      	movs	r1, #0
 800b9de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9e0:	1c58      	adds	r0, r3, #1
 800b9e2:	901b      	str	r0, [sp, #108]	; 0x6c
 800b9e4:	785b      	ldrb	r3, [r3, #1]
 800b9e6:	4608      	mov	r0, r1
 800b9e8:	e7c9      	b.n	800b97e <_strtod_l+0x1d6>
 800b9ea:	9805      	ldr	r0, [sp, #20]
 800b9ec:	e7d3      	b.n	800b996 <_strtod_l+0x1ee>
 800b9ee:	2908      	cmp	r1, #8
 800b9f0:	f101 0101 	add.w	r1, r1, #1
 800b9f4:	dc03      	bgt.n	800b9fe <_strtod_l+0x256>
 800b9f6:	9b07      	ldr	r3, [sp, #28]
 800b9f8:	437b      	muls	r3, r7
 800b9fa:	9307      	str	r3, [sp, #28]
 800b9fc:	e7e1      	b.n	800b9c2 <_strtod_l+0x21a>
 800b9fe:	2910      	cmp	r1, #16
 800ba00:	bfd8      	it	le
 800ba02:	437d      	mulle	r5, r7
 800ba04:	e7dd      	b.n	800b9c2 <_strtod_l+0x21a>
 800ba06:	2c10      	cmp	r4, #16
 800ba08:	bfdc      	itt	le
 800ba0a:	210a      	movle	r1, #10
 800ba0c:	fb01 e505 	mlale	r5, r1, r5, lr
 800ba10:	e7e4      	b.n	800b9dc <_strtod_l+0x234>
 800ba12:	2301      	movs	r3, #1
 800ba14:	9304      	str	r3, [sp, #16]
 800ba16:	e781      	b.n	800b91c <_strtod_l+0x174>
 800ba18:	f04f 0c01 	mov.w	ip, #1
 800ba1c:	1cb3      	adds	r3, r6, #2
 800ba1e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba20:	78b3      	ldrb	r3, [r6, #2]
 800ba22:	e78a      	b.n	800b93a <_strtod_l+0x192>
 800ba24:	f04f 0c00 	mov.w	ip, #0
 800ba28:	e7f8      	b.n	800ba1c <_strtod_l+0x274>
 800ba2a:	bf00      	nop
 800ba2c:	08010370 	.word	0x08010370
 800ba30:	7ff00000 	.word	0x7ff00000
 800ba34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba36:	1c5f      	adds	r7, r3, #1
 800ba38:	971b      	str	r7, [sp, #108]	; 0x6c
 800ba3a:	785b      	ldrb	r3, [r3, #1]
 800ba3c:	2b30      	cmp	r3, #48	; 0x30
 800ba3e:	d0f9      	beq.n	800ba34 <_strtod_l+0x28c>
 800ba40:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800ba44:	2f08      	cmp	r7, #8
 800ba46:	f63f af7d 	bhi.w	800b944 <_strtod_l+0x19c>
 800ba4a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ba4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba50:	930a      	str	r3, [sp, #40]	; 0x28
 800ba52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba54:	1c5f      	adds	r7, r3, #1
 800ba56:	971b      	str	r7, [sp, #108]	; 0x6c
 800ba58:	785b      	ldrb	r3, [r3, #1]
 800ba5a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800ba5e:	f1b8 0f09 	cmp.w	r8, #9
 800ba62:	d937      	bls.n	800bad4 <_strtod_l+0x32c>
 800ba64:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ba66:	1a7f      	subs	r7, r7, r1
 800ba68:	2f08      	cmp	r7, #8
 800ba6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ba6e:	dc37      	bgt.n	800bae0 <_strtod_l+0x338>
 800ba70:	45be      	cmp	lr, r7
 800ba72:	bfa8      	it	ge
 800ba74:	46be      	movge	lr, r7
 800ba76:	f1bc 0f00 	cmp.w	ip, #0
 800ba7a:	d001      	beq.n	800ba80 <_strtod_l+0x2d8>
 800ba7c:	f1ce 0e00 	rsb	lr, lr, #0
 800ba80:	2c00      	cmp	r4, #0
 800ba82:	d151      	bne.n	800bb28 <_strtod_l+0x380>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	f47f aece 	bne.w	800b826 <_strtod_l+0x7e>
 800ba8a:	9a06      	ldr	r2, [sp, #24]
 800ba8c:	2a00      	cmp	r2, #0
 800ba8e:	f47f aeca 	bne.w	800b826 <_strtod_l+0x7e>
 800ba92:	9a04      	ldr	r2, [sp, #16]
 800ba94:	2a00      	cmp	r2, #0
 800ba96:	f47f aee4 	bne.w	800b862 <_strtod_l+0xba>
 800ba9a:	2b4e      	cmp	r3, #78	; 0x4e
 800ba9c:	d027      	beq.n	800baee <_strtod_l+0x346>
 800ba9e:	dc21      	bgt.n	800bae4 <_strtod_l+0x33c>
 800baa0:	2b49      	cmp	r3, #73	; 0x49
 800baa2:	f47f aede 	bne.w	800b862 <_strtod_l+0xba>
 800baa6:	49a0      	ldr	r1, [pc, #640]	; (800bd28 <_strtod_l+0x580>)
 800baa8:	a81b      	add	r0, sp, #108	; 0x6c
 800baaa:	f002 f811 	bl	800dad0 <__match>
 800baae:	2800      	cmp	r0, #0
 800bab0:	f43f aed7 	beq.w	800b862 <_strtod_l+0xba>
 800bab4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bab6:	499d      	ldr	r1, [pc, #628]	; (800bd2c <_strtod_l+0x584>)
 800bab8:	3b01      	subs	r3, #1
 800baba:	a81b      	add	r0, sp, #108	; 0x6c
 800babc:	931b      	str	r3, [sp, #108]	; 0x6c
 800babe:	f002 f807 	bl	800dad0 <__match>
 800bac2:	b910      	cbnz	r0, 800baca <_strtod_l+0x322>
 800bac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bac6:	3301      	adds	r3, #1
 800bac8:	931b      	str	r3, [sp, #108]	; 0x6c
 800baca:	f8df b274 	ldr.w	fp, [pc, #628]	; 800bd40 <_strtod_l+0x598>
 800bace:	f04f 0a00 	mov.w	sl, #0
 800bad2:	e6a8      	b.n	800b826 <_strtod_l+0x7e>
 800bad4:	210a      	movs	r1, #10
 800bad6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bada:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bade:	e7b8      	b.n	800ba52 <_strtod_l+0x2aa>
 800bae0:	46be      	mov	lr, r7
 800bae2:	e7c8      	b.n	800ba76 <_strtod_l+0x2ce>
 800bae4:	2b69      	cmp	r3, #105	; 0x69
 800bae6:	d0de      	beq.n	800baa6 <_strtod_l+0x2fe>
 800bae8:	2b6e      	cmp	r3, #110	; 0x6e
 800baea:	f47f aeba 	bne.w	800b862 <_strtod_l+0xba>
 800baee:	4990      	ldr	r1, [pc, #576]	; (800bd30 <_strtod_l+0x588>)
 800baf0:	a81b      	add	r0, sp, #108	; 0x6c
 800baf2:	f001 ffed 	bl	800dad0 <__match>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	f43f aeb3 	beq.w	800b862 <_strtod_l+0xba>
 800bafc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	2b28      	cmp	r3, #40	; 0x28
 800bb02:	d10e      	bne.n	800bb22 <_strtod_l+0x37a>
 800bb04:	aa1e      	add	r2, sp, #120	; 0x78
 800bb06:	498b      	ldr	r1, [pc, #556]	; (800bd34 <_strtod_l+0x58c>)
 800bb08:	a81b      	add	r0, sp, #108	; 0x6c
 800bb0a:	f001 fff5 	bl	800daf8 <__hexnan>
 800bb0e:	2805      	cmp	r0, #5
 800bb10:	d107      	bne.n	800bb22 <_strtod_l+0x37a>
 800bb12:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb14:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800bb18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bb1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bb20:	e681      	b.n	800b826 <_strtod_l+0x7e>
 800bb22:	f8df b224 	ldr.w	fp, [pc, #548]	; 800bd48 <_strtod_l+0x5a0>
 800bb26:	e7d2      	b.n	800bace <_strtod_l+0x326>
 800bb28:	ebae 0302 	sub.w	r3, lr, r2
 800bb2c:	9306      	str	r3, [sp, #24]
 800bb2e:	9b05      	ldr	r3, [sp, #20]
 800bb30:	9807      	ldr	r0, [sp, #28]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bf08      	it	eq
 800bb36:	4623      	moveq	r3, r4
 800bb38:	2c10      	cmp	r4, #16
 800bb3a:	9305      	str	r3, [sp, #20]
 800bb3c:	46a0      	mov	r8, r4
 800bb3e:	bfa8      	it	ge
 800bb40:	f04f 0810 	movge.w	r8, #16
 800bb44:	f7f4 fcde 	bl	8000504 <__aeabi_ui2d>
 800bb48:	2c09      	cmp	r4, #9
 800bb4a:	4682      	mov	sl, r0
 800bb4c:	468b      	mov	fp, r1
 800bb4e:	dc13      	bgt.n	800bb78 <_strtod_l+0x3d0>
 800bb50:	9b06      	ldr	r3, [sp, #24]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f43f ae67 	beq.w	800b826 <_strtod_l+0x7e>
 800bb58:	9b06      	ldr	r3, [sp, #24]
 800bb5a:	dd7a      	ble.n	800bc52 <_strtod_l+0x4aa>
 800bb5c:	2b16      	cmp	r3, #22
 800bb5e:	dc61      	bgt.n	800bc24 <_strtod_l+0x47c>
 800bb60:	4a75      	ldr	r2, [pc, #468]	; (800bd38 <_strtod_l+0x590>)
 800bb62:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bb66:	e9de 0100 	ldrd	r0, r1, [lr]
 800bb6a:	4652      	mov	r2, sl
 800bb6c:	465b      	mov	r3, fp
 800bb6e:	f7f4 fd43 	bl	80005f8 <__aeabi_dmul>
 800bb72:	4682      	mov	sl, r0
 800bb74:	468b      	mov	fp, r1
 800bb76:	e656      	b.n	800b826 <_strtod_l+0x7e>
 800bb78:	4b6f      	ldr	r3, [pc, #444]	; (800bd38 <_strtod_l+0x590>)
 800bb7a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bb7e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bb82:	f7f4 fd39 	bl	80005f8 <__aeabi_dmul>
 800bb86:	4606      	mov	r6, r0
 800bb88:	4628      	mov	r0, r5
 800bb8a:	460f      	mov	r7, r1
 800bb8c:	f7f4 fcba 	bl	8000504 <__aeabi_ui2d>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4630      	mov	r0, r6
 800bb96:	4639      	mov	r1, r7
 800bb98:	f7f4 fb78 	bl	800028c <__adddf3>
 800bb9c:	2c0f      	cmp	r4, #15
 800bb9e:	4682      	mov	sl, r0
 800bba0:	468b      	mov	fp, r1
 800bba2:	ddd5      	ble.n	800bb50 <_strtod_l+0x3a8>
 800bba4:	9b06      	ldr	r3, [sp, #24]
 800bba6:	eba4 0808 	sub.w	r8, r4, r8
 800bbaa:	4498      	add	r8, r3
 800bbac:	f1b8 0f00 	cmp.w	r8, #0
 800bbb0:	f340 8096 	ble.w	800bce0 <_strtod_l+0x538>
 800bbb4:	f018 030f 	ands.w	r3, r8, #15
 800bbb8:	d00a      	beq.n	800bbd0 <_strtod_l+0x428>
 800bbba:	495f      	ldr	r1, [pc, #380]	; (800bd38 <_strtod_l+0x590>)
 800bbbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbc0:	4652      	mov	r2, sl
 800bbc2:	465b      	mov	r3, fp
 800bbc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbc8:	f7f4 fd16 	bl	80005f8 <__aeabi_dmul>
 800bbcc:	4682      	mov	sl, r0
 800bbce:	468b      	mov	fp, r1
 800bbd0:	f038 080f 	bics.w	r8, r8, #15
 800bbd4:	d073      	beq.n	800bcbe <_strtod_l+0x516>
 800bbd6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bbda:	dd47      	ble.n	800bc6c <_strtod_l+0x4c4>
 800bbdc:	2400      	movs	r4, #0
 800bbde:	46a0      	mov	r8, r4
 800bbe0:	9407      	str	r4, [sp, #28]
 800bbe2:	9405      	str	r4, [sp, #20]
 800bbe4:	2322      	movs	r3, #34	; 0x22
 800bbe6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800bd40 <_strtod_l+0x598>
 800bbea:	f8c9 3000 	str.w	r3, [r9]
 800bbee:	f04f 0a00 	mov.w	sl, #0
 800bbf2:	9b07      	ldr	r3, [sp, #28]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f43f ae16 	beq.w	800b826 <_strtod_l+0x7e>
 800bbfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bbfc:	4648      	mov	r0, r9
 800bbfe:	f002 f8d1 	bl	800dda4 <_Bfree>
 800bc02:	9905      	ldr	r1, [sp, #20]
 800bc04:	4648      	mov	r0, r9
 800bc06:	f002 f8cd 	bl	800dda4 <_Bfree>
 800bc0a:	4641      	mov	r1, r8
 800bc0c:	4648      	mov	r0, r9
 800bc0e:	f002 f8c9 	bl	800dda4 <_Bfree>
 800bc12:	9907      	ldr	r1, [sp, #28]
 800bc14:	4648      	mov	r0, r9
 800bc16:	f002 f8c5 	bl	800dda4 <_Bfree>
 800bc1a:	4621      	mov	r1, r4
 800bc1c:	4648      	mov	r0, r9
 800bc1e:	f002 f8c1 	bl	800dda4 <_Bfree>
 800bc22:	e600      	b.n	800b826 <_strtod_l+0x7e>
 800bc24:	9a06      	ldr	r2, [sp, #24]
 800bc26:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	dbba      	blt.n	800bba4 <_strtod_l+0x3fc>
 800bc2e:	4d42      	ldr	r5, [pc, #264]	; (800bd38 <_strtod_l+0x590>)
 800bc30:	f1c4 040f 	rsb	r4, r4, #15
 800bc34:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bc38:	4652      	mov	r2, sl
 800bc3a:	465b      	mov	r3, fp
 800bc3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc40:	f7f4 fcda 	bl	80005f8 <__aeabi_dmul>
 800bc44:	9b06      	ldr	r3, [sp, #24]
 800bc46:	1b1c      	subs	r4, r3, r4
 800bc48:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bc4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc50:	e78d      	b.n	800bb6e <_strtod_l+0x3c6>
 800bc52:	f113 0f16 	cmn.w	r3, #22
 800bc56:	dba5      	blt.n	800bba4 <_strtod_l+0x3fc>
 800bc58:	4a37      	ldr	r2, [pc, #220]	; (800bd38 <_strtod_l+0x590>)
 800bc5a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800bc5e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bc62:	4650      	mov	r0, sl
 800bc64:	4659      	mov	r1, fp
 800bc66:	f7f4 fdf1 	bl	800084c <__aeabi_ddiv>
 800bc6a:	e782      	b.n	800bb72 <_strtod_l+0x3ca>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4e33      	ldr	r6, [pc, #204]	; (800bd3c <_strtod_l+0x594>)
 800bc70:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bc74:	4650      	mov	r0, sl
 800bc76:	4659      	mov	r1, fp
 800bc78:	461d      	mov	r5, r3
 800bc7a:	f1b8 0f01 	cmp.w	r8, #1
 800bc7e:	dc21      	bgt.n	800bcc4 <_strtod_l+0x51c>
 800bc80:	b10b      	cbz	r3, 800bc86 <_strtod_l+0x4de>
 800bc82:	4682      	mov	sl, r0
 800bc84:	468b      	mov	fp, r1
 800bc86:	4b2d      	ldr	r3, [pc, #180]	; (800bd3c <_strtod_l+0x594>)
 800bc88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bc8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bc90:	4652      	mov	r2, sl
 800bc92:	465b      	mov	r3, fp
 800bc94:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bc98:	f7f4 fcae 	bl	80005f8 <__aeabi_dmul>
 800bc9c:	4b28      	ldr	r3, [pc, #160]	; (800bd40 <_strtod_l+0x598>)
 800bc9e:	460a      	mov	r2, r1
 800bca0:	400b      	ands	r3, r1
 800bca2:	4928      	ldr	r1, [pc, #160]	; (800bd44 <_strtod_l+0x59c>)
 800bca4:	428b      	cmp	r3, r1
 800bca6:	4682      	mov	sl, r0
 800bca8:	d898      	bhi.n	800bbdc <_strtod_l+0x434>
 800bcaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bcae:	428b      	cmp	r3, r1
 800bcb0:	bf86      	itte	hi
 800bcb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bd4c <_strtod_l+0x5a4>
 800bcb6:	f04f 3aff 	movhi.w	sl, #4294967295
 800bcba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9304      	str	r3, [sp, #16]
 800bcc2:	e077      	b.n	800bdb4 <_strtod_l+0x60c>
 800bcc4:	f018 0f01 	tst.w	r8, #1
 800bcc8:	d006      	beq.n	800bcd8 <_strtod_l+0x530>
 800bcca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd2:	f7f4 fc91 	bl	80005f8 <__aeabi_dmul>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	3501      	adds	r5, #1
 800bcda:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bcde:	e7cc      	b.n	800bc7a <_strtod_l+0x4d2>
 800bce0:	d0ed      	beq.n	800bcbe <_strtod_l+0x516>
 800bce2:	f1c8 0800 	rsb	r8, r8, #0
 800bce6:	f018 020f 	ands.w	r2, r8, #15
 800bcea:	d00a      	beq.n	800bd02 <_strtod_l+0x55a>
 800bcec:	4b12      	ldr	r3, [pc, #72]	; (800bd38 <_strtod_l+0x590>)
 800bcee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcf2:	4650      	mov	r0, sl
 800bcf4:	4659      	mov	r1, fp
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	f7f4 fda7 	bl	800084c <__aeabi_ddiv>
 800bcfe:	4682      	mov	sl, r0
 800bd00:	468b      	mov	fp, r1
 800bd02:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bd06:	d0da      	beq.n	800bcbe <_strtod_l+0x516>
 800bd08:	f1b8 0f1f 	cmp.w	r8, #31
 800bd0c:	dd20      	ble.n	800bd50 <_strtod_l+0x5a8>
 800bd0e:	2400      	movs	r4, #0
 800bd10:	46a0      	mov	r8, r4
 800bd12:	9407      	str	r4, [sp, #28]
 800bd14:	9405      	str	r4, [sp, #20]
 800bd16:	2322      	movs	r3, #34	; 0x22
 800bd18:	f04f 0a00 	mov.w	sl, #0
 800bd1c:	f04f 0b00 	mov.w	fp, #0
 800bd20:	f8c9 3000 	str.w	r3, [r9]
 800bd24:	e765      	b.n	800bbf2 <_strtod_l+0x44a>
 800bd26:	bf00      	nop
 800bd28:	08010339 	.word	0x08010339
 800bd2c:	080103c3 	.word	0x080103c3
 800bd30:	08010341 	.word	0x08010341
 800bd34:	08010384 	.word	0x08010384
 800bd38:	08010468 	.word	0x08010468
 800bd3c:	08010440 	.word	0x08010440
 800bd40:	7ff00000 	.word	0x7ff00000
 800bd44:	7ca00000 	.word	0x7ca00000
 800bd48:	fff80000 	.word	0xfff80000
 800bd4c:	7fefffff 	.word	0x7fefffff
 800bd50:	f018 0310 	ands.w	r3, r8, #16
 800bd54:	bf18      	it	ne
 800bd56:	236a      	movne	r3, #106	; 0x6a
 800bd58:	4da0      	ldr	r5, [pc, #640]	; (800bfdc <_strtod_l+0x834>)
 800bd5a:	9304      	str	r3, [sp, #16]
 800bd5c:	4650      	mov	r0, sl
 800bd5e:	4659      	mov	r1, fp
 800bd60:	2300      	movs	r3, #0
 800bd62:	f1b8 0f00 	cmp.w	r8, #0
 800bd66:	f300 810a 	bgt.w	800bf7e <_strtod_l+0x7d6>
 800bd6a:	b10b      	cbz	r3, 800bd70 <_strtod_l+0x5c8>
 800bd6c:	4682      	mov	sl, r0
 800bd6e:	468b      	mov	fp, r1
 800bd70:	9b04      	ldr	r3, [sp, #16]
 800bd72:	b1bb      	cbz	r3, 800bda4 <_strtod_l+0x5fc>
 800bd74:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bd78:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	4659      	mov	r1, fp
 800bd80:	dd10      	ble.n	800bda4 <_strtod_l+0x5fc>
 800bd82:	2b1f      	cmp	r3, #31
 800bd84:	f340 8107 	ble.w	800bf96 <_strtod_l+0x7ee>
 800bd88:	2b34      	cmp	r3, #52	; 0x34
 800bd8a:	bfde      	ittt	le
 800bd8c:	3b20      	suble	r3, #32
 800bd8e:	f04f 32ff 	movle.w	r2, #4294967295
 800bd92:	fa02 f303 	lslle.w	r3, r2, r3
 800bd96:	f04f 0a00 	mov.w	sl, #0
 800bd9a:	bfcc      	ite	gt
 800bd9c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bda0:	ea03 0b01 	andle.w	fp, r3, r1
 800bda4:	2200      	movs	r2, #0
 800bda6:	2300      	movs	r3, #0
 800bda8:	4650      	mov	r0, sl
 800bdaa:	4659      	mov	r1, fp
 800bdac:	f7f4 fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d1ac      	bne.n	800bd0e <_strtod_l+0x566>
 800bdb4:	9b07      	ldr	r3, [sp, #28]
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	9a05      	ldr	r2, [sp, #20]
 800bdba:	9908      	ldr	r1, [sp, #32]
 800bdbc:	4623      	mov	r3, r4
 800bdbe:	4648      	mov	r0, r9
 800bdc0:	f002 f842 	bl	800de48 <__s2b>
 800bdc4:	9007      	str	r0, [sp, #28]
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f43f af08 	beq.w	800bbdc <_strtod_l+0x434>
 800bdcc:	9a06      	ldr	r2, [sp, #24]
 800bdce:	9b06      	ldr	r3, [sp, #24]
 800bdd0:	2a00      	cmp	r2, #0
 800bdd2:	f1c3 0300 	rsb	r3, r3, #0
 800bdd6:	bfa8      	it	ge
 800bdd8:	2300      	movge	r3, #0
 800bdda:	930e      	str	r3, [sp, #56]	; 0x38
 800bddc:	2400      	movs	r4, #0
 800bdde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bde2:	9316      	str	r3, [sp, #88]	; 0x58
 800bde4:	46a0      	mov	r8, r4
 800bde6:	9b07      	ldr	r3, [sp, #28]
 800bde8:	4648      	mov	r0, r9
 800bdea:	6859      	ldr	r1, [r3, #4]
 800bdec:	f001 ffa6 	bl	800dd3c <_Balloc>
 800bdf0:	9005      	str	r0, [sp, #20]
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	f43f aef6 	beq.w	800bbe4 <_strtod_l+0x43c>
 800bdf8:	9b07      	ldr	r3, [sp, #28]
 800bdfa:	691a      	ldr	r2, [r3, #16]
 800bdfc:	3202      	adds	r2, #2
 800bdfe:	f103 010c 	add.w	r1, r3, #12
 800be02:	0092      	lsls	r2, r2, #2
 800be04:	300c      	adds	r0, #12
 800be06:	f7fe fdbd 	bl	800a984 <memcpy>
 800be0a:	aa1e      	add	r2, sp, #120	; 0x78
 800be0c:	a91d      	add	r1, sp, #116	; 0x74
 800be0e:	ec4b ab10 	vmov	d0, sl, fp
 800be12:	4648      	mov	r0, r9
 800be14:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800be18:	f002 fad2 	bl	800e3c0 <__d2b>
 800be1c:	901c      	str	r0, [sp, #112]	; 0x70
 800be1e:	2800      	cmp	r0, #0
 800be20:	f43f aee0 	beq.w	800bbe4 <_strtod_l+0x43c>
 800be24:	2101      	movs	r1, #1
 800be26:	4648      	mov	r0, r9
 800be28:	f002 f89a 	bl	800df60 <__i2b>
 800be2c:	4680      	mov	r8, r0
 800be2e:	2800      	cmp	r0, #0
 800be30:	f43f aed8 	beq.w	800bbe4 <_strtod_l+0x43c>
 800be34:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800be36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800be38:	2e00      	cmp	r6, #0
 800be3a:	bfab      	itete	ge
 800be3c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800be3e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800be40:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800be42:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800be44:	bfac      	ite	ge
 800be46:	18f7      	addge	r7, r6, r3
 800be48:	1b9d      	sublt	r5, r3, r6
 800be4a:	9b04      	ldr	r3, [sp, #16]
 800be4c:	1af6      	subs	r6, r6, r3
 800be4e:	4416      	add	r6, r2
 800be50:	4b63      	ldr	r3, [pc, #396]	; (800bfe0 <_strtod_l+0x838>)
 800be52:	3e01      	subs	r6, #1
 800be54:	429e      	cmp	r6, r3
 800be56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be5a:	f280 80af 	bge.w	800bfbc <_strtod_l+0x814>
 800be5e:	1b9b      	subs	r3, r3, r6
 800be60:	2b1f      	cmp	r3, #31
 800be62:	eba2 0203 	sub.w	r2, r2, r3
 800be66:	f04f 0101 	mov.w	r1, #1
 800be6a:	f300 809b 	bgt.w	800bfa4 <_strtod_l+0x7fc>
 800be6e:	fa01 f303 	lsl.w	r3, r1, r3
 800be72:	930f      	str	r3, [sp, #60]	; 0x3c
 800be74:	2300      	movs	r3, #0
 800be76:	930a      	str	r3, [sp, #40]	; 0x28
 800be78:	18be      	adds	r6, r7, r2
 800be7a:	9b04      	ldr	r3, [sp, #16]
 800be7c:	42b7      	cmp	r7, r6
 800be7e:	4415      	add	r5, r2
 800be80:	441d      	add	r5, r3
 800be82:	463b      	mov	r3, r7
 800be84:	bfa8      	it	ge
 800be86:	4633      	movge	r3, r6
 800be88:	42ab      	cmp	r3, r5
 800be8a:	bfa8      	it	ge
 800be8c:	462b      	movge	r3, r5
 800be8e:	2b00      	cmp	r3, #0
 800be90:	bfc2      	ittt	gt
 800be92:	1af6      	subgt	r6, r6, r3
 800be94:	1aed      	subgt	r5, r5, r3
 800be96:	1aff      	subgt	r7, r7, r3
 800be98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be9a:	b1bb      	cbz	r3, 800becc <_strtod_l+0x724>
 800be9c:	4641      	mov	r1, r8
 800be9e:	461a      	mov	r2, r3
 800bea0:	4648      	mov	r0, r9
 800bea2:	f002 f8fd 	bl	800e0a0 <__pow5mult>
 800bea6:	4680      	mov	r8, r0
 800bea8:	2800      	cmp	r0, #0
 800beaa:	f43f ae9b 	beq.w	800bbe4 <_strtod_l+0x43c>
 800beae:	4601      	mov	r1, r0
 800beb0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800beb2:	4648      	mov	r0, r9
 800beb4:	f002 f85d 	bl	800df72 <__multiply>
 800beb8:	900c      	str	r0, [sp, #48]	; 0x30
 800beba:	2800      	cmp	r0, #0
 800bebc:	f43f ae92 	beq.w	800bbe4 <_strtod_l+0x43c>
 800bec0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bec2:	4648      	mov	r0, r9
 800bec4:	f001 ff6e 	bl	800dda4 <_Bfree>
 800bec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800beca:	931c      	str	r3, [sp, #112]	; 0x70
 800becc:	2e00      	cmp	r6, #0
 800bece:	dc7a      	bgt.n	800bfc6 <_strtod_l+0x81e>
 800bed0:	9b06      	ldr	r3, [sp, #24]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	dd08      	ble.n	800bee8 <_strtod_l+0x740>
 800bed6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bed8:	9905      	ldr	r1, [sp, #20]
 800beda:	4648      	mov	r0, r9
 800bedc:	f002 f8e0 	bl	800e0a0 <__pow5mult>
 800bee0:	9005      	str	r0, [sp, #20]
 800bee2:	2800      	cmp	r0, #0
 800bee4:	f43f ae7e 	beq.w	800bbe4 <_strtod_l+0x43c>
 800bee8:	2d00      	cmp	r5, #0
 800beea:	dd08      	ble.n	800befe <_strtod_l+0x756>
 800beec:	462a      	mov	r2, r5
 800beee:	9905      	ldr	r1, [sp, #20]
 800bef0:	4648      	mov	r0, r9
 800bef2:	f002 f923 	bl	800e13c <__lshift>
 800bef6:	9005      	str	r0, [sp, #20]
 800bef8:	2800      	cmp	r0, #0
 800befa:	f43f ae73 	beq.w	800bbe4 <_strtod_l+0x43c>
 800befe:	2f00      	cmp	r7, #0
 800bf00:	dd08      	ble.n	800bf14 <_strtod_l+0x76c>
 800bf02:	4641      	mov	r1, r8
 800bf04:	463a      	mov	r2, r7
 800bf06:	4648      	mov	r0, r9
 800bf08:	f002 f918 	bl	800e13c <__lshift>
 800bf0c:	4680      	mov	r8, r0
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	f43f ae68 	beq.w	800bbe4 <_strtod_l+0x43c>
 800bf14:	9a05      	ldr	r2, [sp, #20]
 800bf16:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf18:	4648      	mov	r0, r9
 800bf1a:	f002 f97d 	bl	800e218 <__mdiff>
 800bf1e:	4604      	mov	r4, r0
 800bf20:	2800      	cmp	r0, #0
 800bf22:	f43f ae5f 	beq.w	800bbe4 <_strtod_l+0x43c>
 800bf26:	68c3      	ldr	r3, [r0, #12]
 800bf28:	930c      	str	r3, [sp, #48]	; 0x30
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60c3      	str	r3, [r0, #12]
 800bf2e:	4641      	mov	r1, r8
 800bf30:	f002 f958 	bl	800e1e4 <__mcmp>
 800bf34:	2800      	cmp	r0, #0
 800bf36:	da55      	bge.n	800bfe4 <_strtod_l+0x83c>
 800bf38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf3a:	b9e3      	cbnz	r3, 800bf76 <_strtod_l+0x7ce>
 800bf3c:	f1ba 0f00 	cmp.w	sl, #0
 800bf40:	d119      	bne.n	800bf76 <_strtod_l+0x7ce>
 800bf42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf46:	b9b3      	cbnz	r3, 800bf76 <_strtod_l+0x7ce>
 800bf48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf4c:	0d1b      	lsrs	r3, r3, #20
 800bf4e:	051b      	lsls	r3, r3, #20
 800bf50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf54:	d90f      	bls.n	800bf76 <_strtod_l+0x7ce>
 800bf56:	6963      	ldr	r3, [r4, #20]
 800bf58:	b913      	cbnz	r3, 800bf60 <_strtod_l+0x7b8>
 800bf5a:	6923      	ldr	r3, [r4, #16]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	dd0a      	ble.n	800bf76 <_strtod_l+0x7ce>
 800bf60:	4621      	mov	r1, r4
 800bf62:	2201      	movs	r2, #1
 800bf64:	4648      	mov	r0, r9
 800bf66:	f002 f8e9 	bl	800e13c <__lshift>
 800bf6a:	4641      	mov	r1, r8
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	f002 f939 	bl	800e1e4 <__mcmp>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	dc67      	bgt.n	800c046 <_strtod_l+0x89e>
 800bf76:	9b04      	ldr	r3, [sp, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d171      	bne.n	800c060 <_strtod_l+0x8b8>
 800bf7c:	e63d      	b.n	800bbfa <_strtod_l+0x452>
 800bf7e:	f018 0f01 	tst.w	r8, #1
 800bf82:	d004      	beq.n	800bf8e <_strtod_l+0x7e6>
 800bf84:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf88:	f7f4 fb36 	bl	80005f8 <__aeabi_dmul>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf92:	3508      	adds	r5, #8
 800bf94:	e6e5      	b.n	800bd62 <_strtod_l+0x5ba>
 800bf96:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9e:	ea03 0a0a 	and.w	sl, r3, sl
 800bfa2:	e6ff      	b.n	800bda4 <_strtod_l+0x5fc>
 800bfa4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bfa8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bfac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bfb0:	36e2      	adds	r6, #226	; 0xe2
 800bfb2:	fa01 f306 	lsl.w	r3, r1, r6
 800bfb6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfb8:	910f      	str	r1, [sp, #60]	; 0x3c
 800bfba:	e75d      	b.n	800be78 <_strtod_l+0x6d0>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	930a      	str	r3, [sp, #40]	; 0x28
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfc4:	e758      	b.n	800be78 <_strtod_l+0x6d0>
 800bfc6:	4632      	mov	r2, r6
 800bfc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bfca:	4648      	mov	r0, r9
 800bfcc:	f002 f8b6 	bl	800e13c <__lshift>
 800bfd0:	901c      	str	r0, [sp, #112]	; 0x70
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	f47f af7c 	bne.w	800bed0 <_strtod_l+0x728>
 800bfd8:	e604      	b.n	800bbe4 <_strtod_l+0x43c>
 800bfda:	bf00      	nop
 800bfdc:	08010398 	.word	0x08010398
 800bfe0:	fffffc02 	.word	0xfffffc02
 800bfe4:	465d      	mov	r5, fp
 800bfe6:	f040 8086 	bne.w	800c0f6 <_strtod_l+0x94e>
 800bfea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bff0:	b32a      	cbz	r2, 800c03e <_strtod_l+0x896>
 800bff2:	4aaf      	ldr	r2, [pc, #700]	; (800c2b0 <_strtod_l+0xb08>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d153      	bne.n	800c0a0 <_strtod_l+0x8f8>
 800bff8:	9b04      	ldr	r3, [sp, #16]
 800bffa:	4650      	mov	r0, sl
 800bffc:	b1d3      	cbz	r3, 800c034 <_strtod_l+0x88c>
 800bffe:	4aad      	ldr	r2, [pc, #692]	; (800c2b4 <_strtod_l+0xb0c>)
 800c000:	402a      	ands	r2, r5
 800c002:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c006:	f04f 31ff 	mov.w	r1, #4294967295
 800c00a:	d816      	bhi.n	800c03a <_strtod_l+0x892>
 800c00c:	0d12      	lsrs	r2, r2, #20
 800c00e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c012:	fa01 f303 	lsl.w	r3, r1, r3
 800c016:	4298      	cmp	r0, r3
 800c018:	d142      	bne.n	800c0a0 <_strtod_l+0x8f8>
 800c01a:	4ba7      	ldr	r3, [pc, #668]	; (800c2b8 <_strtod_l+0xb10>)
 800c01c:	429d      	cmp	r5, r3
 800c01e:	d102      	bne.n	800c026 <_strtod_l+0x87e>
 800c020:	3001      	adds	r0, #1
 800c022:	f43f addf 	beq.w	800bbe4 <_strtod_l+0x43c>
 800c026:	4ba3      	ldr	r3, [pc, #652]	; (800c2b4 <_strtod_l+0xb0c>)
 800c028:	402b      	ands	r3, r5
 800c02a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c02e:	f04f 0a00 	mov.w	sl, #0
 800c032:	e7a0      	b.n	800bf76 <_strtod_l+0x7ce>
 800c034:	f04f 33ff 	mov.w	r3, #4294967295
 800c038:	e7ed      	b.n	800c016 <_strtod_l+0x86e>
 800c03a:	460b      	mov	r3, r1
 800c03c:	e7eb      	b.n	800c016 <_strtod_l+0x86e>
 800c03e:	bb7b      	cbnz	r3, 800c0a0 <_strtod_l+0x8f8>
 800c040:	f1ba 0f00 	cmp.w	sl, #0
 800c044:	d12c      	bne.n	800c0a0 <_strtod_l+0x8f8>
 800c046:	9904      	ldr	r1, [sp, #16]
 800c048:	4a9a      	ldr	r2, [pc, #616]	; (800c2b4 <_strtod_l+0xb0c>)
 800c04a:	465b      	mov	r3, fp
 800c04c:	b1f1      	cbz	r1, 800c08c <_strtod_l+0x8e4>
 800c04e:	ea02 010b 	and.w	r1, r2, fp
 800c052:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c056:	dc19      	bgt.n	800c08c <_strtod_l+0x8e4>
 800c058:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c05c:	f77f ae5b 	ble.w	800bd16 <_strtod_l+0x56e>
 800c060:	4a96      	ldr	r2, [pc, #600]	; (800c2bc <_strtod_l+0xb14>)
 800c062:	2300      	movs	r3, #0
 800c064:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c068:	4650      	mov	r0, sl
 800c06a:	4659      	mov	r1, fp
 800c06c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c070:	f7f4 fac2 	bl	80005f8 <__aeabi_dmul>
 800c074:	4682      	mov	sl, r0
 800c076:	468b      	mov	fp, r1
 800c078:	2900      	cmp	r1, #0
 800c07a:	f47f adbe 	bne.w	800bbfa <_strtod_l+0x452>
 800c07e:	2800      	cmp	r0, #0
 800c080:	f47f adbb 	bne.w	800bbfa <_strtod_l+0x452>
 800c084:	2322      	movs	r3, #34	; 0x22
 800c086:	f8c9 3000 	str.w	r3, [r9]
 800c08a:	e5b6      	b.n	800bbfa <_strtod_l+0x452>
 800c08c:	4013      	ands	r3, r2
 800c08e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c092:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c096:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c09a:	f04f 3aff 	mov.w	sl, #4294967295
 800c09e:	e76a      	b.n	800bf76 <_strtod_l+0x7ce>
 800c0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0a2:	b193      	cbz	r3, 800c0ca <_strtod_l+0x922>
 800c0a4:	422b      	tst	r3, r5
 800c0a6:	f43f af66 	beq.w	800bf76 <_strtod_l+0x7ce>
 800c0aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0ac:	9a04      	ldr	r2, [sp, #16]
 800c0ae:	4650      	mov	r0, sl
 800c0b0:	4659      	mov	r1, fp
 800c0b2:	b173      	cbz	r3, 800c0d2 <_strtod_l+0x92a>
 800c0b4:	f7ff fb5a 	bl	800b76c <sulp>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c0c0:	f7f4 f8e4 	bl	800028c <__adddf3>
 800c0c4:	4682      	mov	sl, r0
 800c0c6:	468b      	mov	fp, r1
 800c0c8:	e755      	b.n	800bf76 <_strtod_l+0x7ce>
 800c0ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0cc:	ea13 0f0a 	tst.w	r3, sl
 800c0d0:	e7e9      	b.n	800c0a6 <_strtod_l+0x8fe>
 800c0d2:	f7ff fb4b 	bl	800b76c <sulp>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c0de:	f7f4 f8d3 	bl	8000288 <__aeabi_dsub>
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4682      	mov	sl, r0
 800c0e8:	468b      	mov	fp, r1
 800c0ea:	f7f4 fced 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f47f ae11 	bne.w	800bd16 <_strtod_l+0x56e>
 800c0f4:	e73f      	b.n	800bf76 <_strtod_l+0x7ce>
 800c0f6:	4641      	mov	r1, r8
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f002 f9b0 	bl	800e45e <__ratio>
 800c0fe:	ec57 6b10 	vmov	r6, r7, d0
 800c102:	2200      	movs	r2, #0
 800c104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c108:	ee10 0a10 	vmov	r0, s0
 800c10c:	4639      	mov	r1, r7
 800c10e:	f7f4 fcef 	bl	8000af0 <__aeabi_dcmple>
 800c112:	2800      	cmp	r0, #0
 800c114:	d077      	beq.n	800c206 <_strtod_l+0xa5e>
 800c116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d04a      	beq.n	800c1b2 <_strtod_l+0xa0a>
 800c11c:	4b68      	ldr	r3, [pc, #416]	; (800c2c0 <_strtod_l+0xb18>)
 800c11e:	2200      	movs	r2, #0
 800c120:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c124:	4f66      	ldr	r7, [pc, #408]	; (800c2c0 <_strtod_l+0xb18>)
 800c126:	2600      	movs	r6, #0
 800c128:	4b62      	ldr	r3, [pc, #392]	; (800c2b4 <_strtod_l+0xb0c>)
 800c12a:	402b      	ands	r3, r5
 800c12c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c12e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c130:	4b64      	ldr	r3, [pc, #400]	; (800c2c4 <_strtod_l+0xb1c>)
 800c132:	429a      	cmp	r2, r3
 800c134:	f040 80ce 	bne.w	800c2d4 <_strtod_l+0xb2c>
 800c138:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c13c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c140:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c144:	ec4b ab10 	vmov	d0, sl, fp
 800c148:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c14c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c150:	f002 f8c0 	bl	800e2d4 <__ulp>
 800c154:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c158:	ec53 2b10 	vmov	r2, r3, d0
 800c15c:	f7f4 fa4c 	bl	80005f8 <__aeabi_dmul>
 800c160:	4652      	mov	r2, sl
 800c162:	465b      	mov	r3, fp
 800c164:	f7f4 f892 	bl	800028c <__adddf3>
 800c168:	460b      	mov	r3, r1
 800c16a:	4952      	ldr	r1, [pc, #328]	; (800c2b4 <_strtod_l+0xb0c>)
 800c16c:	4a56      	ldr	r2, [pc, #344]	; (800c2c8 <_strtod_l+0xb20>)
 800c16e:	4019      	ands	r1, r3
 800c170:	4291      	cmp	r1, r2
 800c172:	4682      	mov	sl, r0
 800c174:	d95b      	bls.n	800c22e <_strtod_l+0xa86>
 800c176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c178:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d103      	bne.n	800c188 <_strtod_l+0x9e0>
 800c180:	9b08      	ldr	r3, [sp, #32]
 800c182:	3301      	adds	r3, #1
 800c184:	f43f ad2e 	beq.w	800bbe4 <_strtod_l+0x43c>
 800c188:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c2b8 <_strtod_l+0xb10>
 800c18c:	f04f 3aff 	mov.w	sl, #4294967295
 800c190:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c192:	4648      	mov	r0, r9
 800c194:	f001 fe06 	bl	800dda4 <_Bfree>
 800c198:	9905      	ldr	r1, [sp, #20]
 800c19a:	4648      	mov	r0, r9
 800c19c:	f001 fe02 	bl	800dda4 <_Bfree>
 800c1a0:	4641      	mov	r1, r8
 800c1a2:	4648      	mov	r0, r9
 800c1a4:	f001 fdfe 	bl	800dda4 <_Bfree>
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	4648      	mov	r0, r9
 800c1ac:	f001 fdfa 	bl	800dda4 <_Bfree>
 800c1b0:	e619      	b.n	800bde6 <_strtod_l+0x63e>
 800c1b2:	f1ba 0f00 	cmp.w	sl, #0
 800c1b6:	d11a      	bne.n	800c1ee <_strtod_l+0xa46>
 800c1b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1bc:	b9eb      	cbnz	r3, 800c1fa <_strtod_l+0xa52>
 800c1be:	2200      	movs	r2, #0
 800c1c0:	4b3f      	ldr	r3, [pc, #252]	; (800c2c0 <_strtod_l+0xb18>)
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	f7f4 fc89 	bl	8000adc <__aeabi_dcmplt>
 800c1ca:	b9c8      	cbnz	r0, 800c200 <_strtod_l+0xa58>
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	4b3e      	ldr	r3, [pc, #248]	; (800c2cc <_strtod_l+0xb24>)
 800c1d4:	f7f4 fa10 	bl	80005f8 <__aeabi_dmul>
 800c1d8:	4606      	mov	r6, r0
 800c1da:	460f      	mov	r7, r1
 800c1dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c1e0:	9618      	str	r6, [sp, #96]	; 0x60
 800c1e2:	9319      	str	r3, [sp, #100]	; 0x64
 800c1e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c1e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c1ec:	e79c      	b.n	800c128 <_strtod_l+0x980>
 800c1ee:	f1ba 0f01 	cmp.w	sl, #1
 800c1f2:	d102      	bne.n	800c1fa <_strtod_l+0xa52>
 800c1f4:	2d00      	cmp	r5, #0
 800c1f6:	f43f ad8e 	beq.w	800bd16 <_strtod_l+0x56e>
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	4b34      	ldr	r3, [pc, #208]	; (800c2d0 <_strtod_l+0xb28>)
 800c1fe:	e78f      	b.n	800c120 <_strtod_l+0x978>
 800c200:	2600      	movs	r6, #0
 800c202:	4f32      	ldr	r7, [pc, #200]	; (800c2cc <_strtod_l+0xb24>)
 800c204:	e7ea      	b.n	800c1dc <_strtod_l+0xa34>
 800c206:	4b31      	ldr	r3, [pc, #196]	; (800c2cc <_strtod_l+0xb24>)
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	2200      	movs	r2, #0
 800c20e:	f7f4 f9f3 	bl	80005f8 <__aeabi_dmul>
 800c212:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c214:	4606      	mov	r6, r0
 800c216:	460f      	mov	r7, r1
 800c218:	b933      	cbnz	r3, 800c228 <_strtod_l+0xa80>
 800c21a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c21e:	9010      	str	r0, [sp, #64]	; 0x40
 800c220:	9311      	str	r3, [sp, #68]	; 0x44
 800c222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c226:	e7df      	b.n	800c1e8 <_strtod_l+0xa40>
 800c228:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c22c:	e7f9      	b.n	800c222 <_strtod_l+0xa7a>
 800c22e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c232:	9b04      	ldr	r3, [sp, #16]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1ab      	bne.n	800c190 <_strtod_l+0x9e8>
 800c238:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c23c:	0d1b      	lsrs	r3, r3, #20
 800c23e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c240:	051b      	lsls	r3, r3, #20
 800c242:	429a      	cmp	r2, r3
 800c244:	465d      	mov	r5, fp
 800c246:	d1a3      	bne.n	800c190 <_strtod_l+0x9e8>
 800c248:	4639      	mov	r1, r7
 800c24a:	4630      	mov	r0, r6
 800c24c:	f7f4 fc84 	bl	8000b58 <__aeabi_d2iz>
 800c250:	f7f4 f968 	bl	8000524 <__aeabi_i2d>
 800c254:	460b      	mov	r3, r1
 800c256:	4602      	mov	r2, r0
 800c258:	4639      	mov	r1, r7
 800c25a:	4630      	mov	r0, r6
 800c25c:	f7f4 f814 	bl	8000288 <__aeabi_dsub>
 800c260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c262:	4606      	mov	r6, r0
 800c264:	460f      	mov	r7, r1
 800c266:	b933      	cbnz	r3, 800c276 <_strtod_l+0xace>
 800c268:	f1ba 0f00 	cmp.w	sl, #0
 800c26c:	d103      	bne.n	800c276 <_strtod_l+0xace>
 800c26e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c272:	2d00      	cmp	r5, #0
 800c274:	d06d      	beq.n	800c352 <_strtod_l+0xbaa>
 800c276:	a30a      	add	r3, pc, #40	; (adr r3, 800c2a0 <_strtod_l+0xaf8>)
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	4630      	mov	r0, r6
 800c27e:	4639      	mov	r1, r7
 800c280:	f7f4 fc2c 	bl	8000adc <__aeabi_dcmplt>
 800c284:	2800      	cmp	r0, #0
 800c286:	f47f acb8 	bne.w	800bbfa <_strtod_l+0x452>
 800c28a:	a307      	add	r3, pc, #28	; (adr r3, 800c2a8 <_strtod_l+0xb00>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	4630      	mov	r0, r6
 800c292:	4639      	mov	r1, r7
 800c294:	f7f4 fc40 	bl	8000b18 <__aeabi_dcmpgt>
 800c298:	2800      	cmp	r0, #0
 800c29a:	f43f af79 	beq.w	800c190 <_strtod_l+0x9e8>
 800c29e:	e4ac      	b.n	800bbfa <_strtod_l+0x452>
 800c2a0:	94a03595 	.word	0x94a03595
 800c2a4:	3fdfffff 	.word	0x3fdfffff
 800c2a8:	35afe535 	.word	0x35afe535
 800c2ac:	3fe00000 	.word	0x3fe00000
 800c2b0:	000fffff 	.word	0x000fffff
 800c2b4:	7ff00000 	.word	0x7ff00000
 800c2b8:	7fefffff 	.word	0x7fefffff
 800c2bc:	39500000 	.word	0x39500000
 800c2c0:	3ff00000 	.word	0x3ff00000
 800c2c4:	7fe00000 	.word	0x7fe00000
 800c2c8:	7c9fffff 	.word	0x7c9fffff
 800c2cc:	3fe00000 	.word	0x3fe00000
 800c2d0:	bff00000 	.word	0xbff00000
 800c2d4:	9b04      	ldr	r3, [sp, #16]
 800c2d6:	b333      	cbz	r3, 800c326 <_strtod_l+0xb7e>
 800c2d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c2de:	d822      	bhi.n	800c326 <_strtod_l+0xb7e>
 800c2e0:	a327      	add	r3, pc, #156	; (adr r3, 800c380 <_strtod_l+0xbd8>)
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	4639      	mov	r1, r7
 800c2ea:	f7f4 fc01 	bl	8000af0 <__aeabi_dcmple>
 800c2ee:	b1a0      	cbz	r0, 800c31a <_strtod_l+0xb72>
 800c2f0:	4639      	mov	r1, r7
 800c2f2:	4630      	mov	r0, r6
 800c2f4:	f7f4 fc58 	bl	8000ba8 <__aeabi_d2uiz>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	bf08      	it	eq
 800c2fc:	2001      	moveq	r0, #1
 800c2fe:	f7f4 f901 	bl	8000504 <__aeabi_ui2d>
 800c302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c304:	4606      	mov	r6, r0
 800c306:	460f      	mov	r7, r1
 800c308:	bb03      	cbnz	r3, 800c34c <_strtod_l+0xba4>
 800c30a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c30e:	9012      	str	r0, [sp, #72]	; 0x48
 800c310:	9313      	str	r3, [sp, #76]	; 0x4c
 800c312:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c316:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c31a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c31c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c31e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c322:	1a9b      	subs	r3, r3, r2
 800c324:	930b      	str	r3, [sp, #44]	; 0x2c
 800c326:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c32a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c32e:	f001 ffd1 	bl	800e2d4 <__ulp>
 800c332:	4650      	mov	r0, sl
 800c334:	ec53 2b10 	vmov	r2, r3, d0
 800c338:	4659      	mov	r1, fp
 800c33a:	f7f4 f95d 	bl	80005f8 <__aeabi_dmul>
 800c33e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c342:	f7f3 ffa3 	bl	800028c <__adddf3>
 800c346:	4682      	mov	sl, r0
 800c348:	468b      	mov	fp, r1
 800c34a:	e772      	b.n	800c232 <_strtod_l+0xa8a>
 800c34c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c350:	e7df      	b.n	800c312 <_strtod_l+0xb6a>
 800c352:	a30d      	add	r3, pc, #52	; (adr r3, 800c388 <_strtod_l+0xbe0>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f4 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800c35c:	e79c      	b.n	800c298 <_strtod_l+0xaf0>
 800c35e:	2300      	movs	r3, #0
 800c360:	930d      	str	r3, [sp, #52]	; 0x34
 800c362:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c366:	6013      	str	r3, [r2, #0]
 800c368:	f7ff ba61 	b.w	800b82e <_strtod_l+0x86>
 800c36c:	2b65      	cmp	r3, #101	; 0x65
 800c36e:	f04f 0200 	mov.w	r2, #0
 800c372:	f43f ab4e 	beq.w	800ba12 <_strtod_l+0x26a>
 800c376:	2101      	movs	r1, #1
 800c378:	4614      	mov	r4, r2
 800c37a:	9104      	str	r1, [sp, #16]
 800c37c:	f7ff bacb 	b.w	800b916 <_strtod_l+0x16e>
 800c380:	ffc00000 	.word	0xffc00000
 800c384:	41dfffff 	.word	0x41dfffff
 800c388:	94a03595 	.word	0x94a03595
 800c38c:	3fcfffff 	.word	0x3fcfffff

0800c390 <_strtod_r>:
 800c390:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <_strtod_r+0x18>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	b410      	push	{r4}
 800c396:	6a1b      	ldr	r3, [r3, #32]
 800c398:	4c04      	ldr	r4, [pc, #16]	; (800c3ac <_strtod_r+0x1c>)
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	bf08      	it	eq
 800c39e:	4623      	moveq	r3, r4
 800c3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3a4:	f7ff ba00 	b.w	800b7a8 <_strtod_l>
 800c3a8:	2000000c 	.word	0x2000000c
 800c3ac:	20000070 	.word	0x20000070

0800c3b0 <_strtol_l.isra.0>:
 800c3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b4:	4680      	mov	r8, r0
 800c3b6:	4689      	mov	r9, r1
 800c3b8:	4692      	mov	sl, r2
 800c3ba:	461e      	mov	r6, r3
 800c3bc:	460f      	mov	r7, r1
 800c3be:	463d      	mov	r5, r7
 800c3c0:	9808      	ldr	r0, [sp, #32]
 800c3c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3c6:	f001 fc27 	bl	800dc18 <__locale_ctype_ptr_l>
 800c3ca:	4420      	add	r0, r4
 800c3cc:	7843      	ldrb	r3, [r0, #1]
 800c3ce:	f013 0308 	ands.w	r3, r3, #8
 800c3d2:	d132      	bne.n	800c43a <_strtol_l.isra.0+0x8a>
 800c3d4:	2c2d      	cmp	r4, #45	; 0x2d
 800c3d6:	d132      	bne.n	800c43e <_strtol_l.isra.0+0x8e>
 800c3d8:	787c      	ldrb	r4, [r7, #1]
 800c3da:	1cbd      	adds	r5, r7, #2
 800c3dc:	2201      	movs	r2, #1
 800c3de:	2e00      	cmp	r6, #0
 800c3e0:	d05d      	beq.n	800c49e <_strtol_l.isra.0+0xee>
 800c3e2:	2e10      	cmp	r6, #16
 800c3e4:	d109      	bne.n	800c3fa <_strtol_l.isra.0+0x4a>
 800c3e6:	2c30      	cmp	r4, #48	; 0x30
 800c3e8:	d107      	bne.n	800c3fa <_strtol_l.isra.0+0x4a>
 800c3ea:	782b      	ldrb	r3, [r5, #0]
 800c3ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c3f0:	2b58      	cmp	r3, #88	; 0x58
 800c3f2:	d14f      	bne.n	800c494 <_strtol_l.isra.0+0xe4>
 800c3f4:	786c      	ldrb	r4, [r5, #1]
 800c3f6:	2610      	movs	r6, #16
 800c3f8:	3502      	adds	r5, #2
 800c3fa:	2a00      	cmp	r2, #0
 800c3fc:	bf14      	ite	ne
 800c3fe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c402:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c406:	2700      	movs	r7, #0
 800c408:	fbb1 fcf6 	udiv	ip, r1, r6
 800c40c:	4638      	mov	r0, r7
 800c40e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c412:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c416:	2b09      	cmp	r3, #9
 800c418:	d817      	bhi.n	800c44a <_strtol_l.isra.0+0x9a>
 800c41a:	461c      	mov	r4, r3
 800c41c:	42a6      	cmp	r6, r4
 800c41e:	dd23      	ble.n	800c468 <_strtol_l.isra.0+0xb8>
 800c420:	1c7b      	adds	r3, r7, #1
 800c422:	d007      	beq.n	800c434 <_strtol_l.isra.0+0x84>
 800c424:	4584      	cmp	ip, r0
 800c426:	d31c      	bcc.n	800c462 <_strtol_l.isra.0+0xb2>
 800c428:	d101      	bne.n	800c42e <_strtol_l.isra.0+0x7e>
 800c42a:	45a6      	cmp	lr, r4
 800c42c:	db19      	blt.n	800c462 <_strtol_l.isra.0+0xb2>
 800c42e:	fb00 4006 	mla	r0, r0, r6, r4
 800c432:	2701      	movs	r7, #1
 800c434:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c438:	e7eb      	b.n	800c412 <_strtol_l.isra.0+0x62>
 800c43a:	462f      	mov	r7, r5
 800c43c:	e7bf      	b.n	800c3be <_strtol_l.isra.0+0xe>
 800c43e:	2c2b      	cmp	r4, #43	; 0x2b
 800c440:	bf04      	itt	eq
 800c442:	1cbd      	addeq	r5, r7, #2
 800c444:	787c      	ldrbeq	r4, [r7, #1]
 800c446:	461a      	mov	r2, r3
 800c448:	e7c9      	b.n	800c3de <_strtol_l.isra.0+0x2e>
 800c44a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c44e:	2b19      	cmp	r3, #25
 800c450:	d801      	bhi.n	800c456 <_strtol_l.isra.0+0xa6>
 800c452:	3c37      	subs	r4, #55	; 0x37
 800c454:	e7e2      	b.n	800c41c <_strtol_l.isra.0+0x6c>
 800c456:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c45a:	2b19      	cmp	r3, #25
 800c45c:	d804      	bhi.n	800c468 <_strtol_l.isra.0+0xb8>
 800c45e:	3c57      	subs	r4, #87	; 0x57
 800c460:	e7dc      	b.n	800c41c <_strtol_l.isra.0+0x6c>
 800c462:	f04f 37ff 	mov.w	r7, #4294967295
 800c466:	e7e5      	b.n	800c434 <_strtol_l.isra.0+0x84>
 800c468:	1c7b      	adds	r3, r7, #1
 800c46a:	d108      	bne.n	800c47e <_strtol_l.isra.0+0xce>
 800c46c:	2322      	movs	r3, #34	; 0x22
 800c46e:	f8c8 3000 	str.w	r3, [r8]
 800c472:	4608      	mov	r0, r1
 800c474:	f1ba 0f00 	cmp.w	sl, #0
 800c478:	d107      	bne.n	800c48a <_strtol_l.isra.0+0xda>
 800c47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c47e:	b102      	cbz	r2, 800c482 <_strtol_l.isra.0+0xd2>
 800c480:	4240      	negs	r0, r0
 800c482:	f1ba 0f00 	cmp.w	sl, #0
 800c486:	d0f8      	beq.n	800c47a <_strtol_l.isra.0+0xca>
 800c488:	b10f      	cbz	r7, 800c48e <_strtol_l.isra.0+0xde>
 800c48a:	f105 39ff 	add.w	r9, r5, #4294967295
 800c48e:	f8ca 9000 	str.w	r9, [sl]
 800c492:	e7f2      	b.n	800c47a <_strtol_l.isra.0+0xca>
 800c494:	2430      	movs	r4, #48	; 0x30
 800c496:	2e00      	cmp	r6, #0
 800c498:	d1af      	bne.n	800c3fa <_strtol_l.isra.0+0x4a>
 800c49a:	2608      	movs	r6, #8
 800c49c:	e7ad      	b.n	800c3fa <_strtol_l.isra.0+0x4a>
 800c49e:	2c30      	cmp	r4, #48	; 0x30
 800c4a0:	d0a3      	beq.n	800c3ea <_strtol_l.isra.0+0x3a>
 800c4a2:	260a      	movs	r6, #10
 800c4a4:	e7a9      	b.n	800c3fa <_strtol_l.isra.0+0x4a>
	...

0800c4a8 <_strtol_r>:
 800c4a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4aa:	4c06      	ldr	r4, [pc, #24]	; (800c4c4 <_strtol_r+0x1c>)
 800c4ac:	4d06      	ldr	r5, [pc, #24]	; (800c4c8 <_strtol_r+0x20>)
 800c4ae:	6824      	ldr	r4, [r4, #0]
 800c4b0:	6a24      	ldr	r4, [r4, #32]
 800c4b2:	2c00      	cmp	r4, #0
 800c4b4:	bf08      	it	eq
 800c4b6:	462c      	moveq	r4, r5
 800c4b8:	9400      	str	r4, [sp, #0]
 800c4ba:	f7ff ff79 	bl	800c3b0 <_strtol_l.isra.0>
 800c4be:	b003      	add	sp, #12
 800c4c0:	bd30      	pop	{r4, r5, pc}
 800c4c2:	bf00      	nop
 800c4c4:	2000000c 	.word	0x2000000c
 800c4c8:	20000070 	.word	0x20000070

0800c4cc <__swbuf_r>:
 800c4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ce:	460e      	mov	r6, r1
 800c4d0:	4614      	mov	r4, r2
 800c4d2:	4605      	mov	r5, r0
 800c4d4:	b118      	cbz	r0, 800c4de <__swbuf_r+0x12>
 800c4d6:	6983      	ldr	r3, [r0, #24]
 800c4d8:	b90b      	cbnz	r3, 800c4de <__swbuf_r+0x12>
 800c4da:	f000 ffed 	bl	800d4b8 <__sinit>
 800c4de:	4b21      	ldr	r3, [pc, #132]	; (800c564 <__swbuf_r+0x98>)
 800c4e0:	429c      	cmp	r4, r3
 800c4e2:	d12a      	bne.n	800c53a <__swbuf_r+0x6e>
 800c4e4:	686c      	ldr	r4, [r5, #4]
 800c4e6:	69a3      	ldr	r3, [r4, #24]
 800c4e8:	60a3      	str	r3, [r4, #8]
 800c4ea:	89a3      	ldrh	r3, [r4, #12]
 800c4ec:	071a      	lsls	r2, r3, #28
 800c4ee:	d52e      	bpl.n	800c54e <__swbuf_r+0x82>
 800c4f0:	6923      	ldr	r3, [r4, #16]
 800c4f2:	b363      	cbz	r3, 800c54e <__swbuf_r+0x82>
 800c4f4:	6923      	ldr	r3, [r4, #16]
 800c4f6:	6820      	ldr	r0, [r4, #0]
 800c4f8:	1ac0      	subs	r0, r0, r3
 800c4fa:	6963      	ldr	r3, [r4, #20]
 800c4fc:	b2f6      	uxtb	r6, r6
 800c4fe:	4283      	cmp	r3, r0
 800c500:	4637      	mov	r7, r6
 800c502:	dc04      	bgt.n	800c50e <__swbuf_r+0x42>
 800c504:	4621      	mov	r1, r4
 800c506:	4628      	mov	r0, r5
 800c508:	f000 ff6c 	bl	800d3e4 <_fflush_r>
 800c50c:	bb28      	cbnz	r0, 800c55a <__swbuf_r+0x8e>
 800c50e:	68a3      	ldr	r3, [r4, #8]
 800c510:	3b01      	subs	r3, #1
 800c512:	60a3      	str	r3, [r4, #8]
 800c514:	6823      	ldr	r3, [r4, #0]
 800c516:	1c5a      	adds	r2, r3, #1
 800c518:	6022      	str	r2, [r4, #0]
 800c51a:	701e      	strb	r6, [r3, #0]
 800c51c:	6963      	ldr	r3, [r4, #20]
 800c51e:	3001      	adds	r0, #1
 800c520:	4283      	cmp	r3, r0
 800c522:	d004      	beq.n	800c52e <__swbuf_r+0x62>
 800c524:	89a3      	ldrh	r3, [r4, #12]
 800c526:	07db      	lsls	r3, r3, #31
 800c528:	d519      	bpl.n	800c55e <__swbuf_r+0x92>
 800c52a:	2e0a      	cmp	r6, #10
 800c52c:	d117      	bne.n	800c55e <__swbuf_r+0x92>
 800c52e:	4621      	mov	r1, r4
 800c530:	4628      	mov	r0, r5
 800c532:	f000 ff57 	bl	800d3e4 <_fflush_r>
 800c536:	b190      	cbz	r0, 800c55e <__swbuf_r+0x92>
 800c538:	e00f      	b.n	800c55a <__swbuf_r+0x8e>
 800c53a:	4b0b      	ldr	r3, [pc, #44]	; (800c568 <__swbuf_r+0x9c>)
 800c53c:	429c      	cmp	r4, r3
 800c53e:	d101      	bne.n	800c544 <__swbuf_r+0x78>
 800c540:	68ac      	ldr	r4, [r5, #8]
 800c542:	e7d0      	b.n	800c4e6 <__swbuf_r+0x1a>
 800c544:	4b09      	ldr	r3, [pc, #36]	; (800c56c <__swbuf_r+0xa0>)
 800c546:	429c      	cmp	r4, r3
 800c548:	bf08      	it	eq
 800c54a:	68ec      	ldreq	r4, [r5, #12]
 800c54c:	e7cb      	b.n	800c4e6 <__swbuf_r+0x1a>
 800c54e:	4621      	mov	r1, r4
 800c550:	4628      	mov	r0, r5
 800c552:	f000 f80d 	bl	800c570 <__swsetup_r>
 800c556:	2800      	cmp	r0, #0
 800c558:	d0cc      	beq.n	800c4f4 <__swbuf_r+0x28>
 800c55a:	f04f 37ff 	mov.w	r7, #4294967295
 800c55e:	4638      	mov	r0, r7
 800c560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c562:	bf00      	nop
 800c564:	080103f0 	.word	0x080103f0
 800c568:	08010410 	.word	0x08010410
 800c56c:	080103d0 	.word	0x080103d0

0800c570 <__swsetup_r>:
 800c570:	4b32      	ldr	r3, [pc, #200]	; (800c63c <__swsetup_r+0xcc>)
 800c572:	b570      	push	{r4, r5, r6, lr}
 800c574:	681d      	ldr	r5, [r3, #0]
 800c576:	4606      	mov	r6, r0
 800c578:	460c      	mov	r4, r1
 800c57a:	b125      	cbz	r5, 800c586 <__swsetup_r+0x16>
 800c57c:	69ab      	ldr	r3, [r5, #24]
 800c57e:	b913      	cbnz	r3, 800c586 <__swsetup_r+0x16>
 800c580:	4628      	mov	r0, r5
 800c582:	f000 ff99 	bl	800d4b8 <__sinit>
 800c586:	4b2e      	ldr	r3, [pc, #184]	; (800c640 <__swsetup_r+0xd0>)
 800c588:	429c      	cmp	r4, r3
 800c58a:	d10f      	bne.n	800c5ac <__swsetup_r+0x3c>
 800c58c:	686c      	ldr	r4, [r5, #4]
 800c58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c592:	b29a      	uxth	r2, r3
 800c594:	0715      	lsls	r5, r2, #28
 800c596:	d42c      	bmi.n	800c5f2 <__swsetup_r+0x82>
 800c598:	06d0      	lsls	r0, r2, #27
 800c59a:	d411      	bmi.n	800c5c0 <__swsetup_r+0x50>
 800c59c:	2209      	movs	r2, #9
 800c59e:	6032      	str	r2, [r6, #0]
 800c5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5a4:	81a3      	strh	r3, [r4, #12]
 800c5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5aa:	e03e      	b.n	800c62a <__swsetup_r+0xba>
 800c5ac:	4b25      	ldr	r3, [pc, #148]	; (800c644 <__swsetup_r+0xd4>)
 800c5ae:	429c      	cmp	r4, r3
 800c5b0:	d101      	bne.n	800c5b6 <__swsetup_r+0x46>
 800c5b2:	68ac      	ldr	r4, [r5, #8]
 800c5b4:	e7eb      	b.n	800c58e <__swsetup_r+0x1e>
 800c5b6:	4b24      	ldr	r3, [pc, #144]	; (800c648 <__swsetup_r+0xd8>)
 800c5b8:	429c      	cmp	r4, r3
 800c5ba:	bf08      	it	eq
 800c5bc:	68ec      	ldreq	r4, [r5, #12]
 800c5be:	e7e6      	b.n	800c58e <__swsetup_r+0x1e>
 800c5c0:	0751      	lsls	r1, r2, #29
 800c5c2:	d512      	bpl.n	800c5ea <__swsetup_r+0x7a>
 800c5c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5c6:	b141      	cbz	r1, 800c5da <__swsetup_r+0x6a>
 800c5c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5cc:	4299      	cmp	r1, r3
 800c5ce:	d002      	beq.n	800c5d6 <__swsetup_r+0x66>
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f001 ffc1 	bl	800e558 <_free_r>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	6363      	str	r3, [r4, #52]	; 0x34
 800c5da:	89a3      	ldrh	r3, [r4, #12]
 800c5dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5e0:	81a3      	strh	r3, [r4, #12]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	6063      	str	r3, [r4, #4]
 800c5e6:	6923      	ldr	r3, [r4, #16]
 800c5e8:	6023      	str	r3, [r4, #0]
 800c5ea:	89a3      	ldrh	r3, [r4, #12]
 800c5ec:	f043 0308 	orr.w	r3, r3, #8
 800c5f0:	81a3      	strh	r3, [r4, #12]
 800c5f2:	6923      	ldr	r3, [r4, #16]
 800c5f4:	b94b      	cbnz	r3, 800c60a <__swsetup_r+0x9a>
 800c5f6:	89a3      	ldrh	r3, [r4, #12]
 800c5f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c600:	d003      	beq.n	800c60a <__swsetup_r+0x9a>
 800c602:	4621      	mov	r1, r4
 800c604:	4630      	mov	r0, r6
 800c606:	f001 fb3f 	bl	800dc88 <__smakebuf_r>
 800c60a:	89a2      	ldrh	r2, [r4, #12]
 800c60c:	f012 0301 	ands.w	r3, r2, #1
 800c610:	d00c      	beq.n	800c62c <__swsetup_r+0xbc>
 800c612:	2300      	movs	r3, #0
 800c614:	60a3      	str	r3, [r4, #8]
 800c616:	6963      	ldr	r3, [r4, #20]
 800c618:	425b      	negs	r3, r3
 800c61a:	61a3      	str	r3, [r4, #24]
 800c61c:	6923      	ldr	r3, [r4, #16]
 800c61e:	b953      	cbnz	r3, 800c636 <__swsetup_r+0xc6>
 800c620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c624:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c628:	d1ba      	bne.n	800c5a0 <__swsetup_r+0x30>
 800c62a:	bd70      	pop	{r4, r5, r6, pc}
 800c62c:	0792      	lsls	r2, r2, #30
 800c62e:	bf58      	it	pl
 800c630:	6963      	ldrpl	r3, [r4, #20]
 800c632:	60a3      	str	r3, [r4, #8]
 800c634:	e7f2      	b.n	800c61c <__swsetup_r+0xac>
 800c636:	2000      	movs	r0, #0
 800c638:	e7f7      	b.n	800c62a <__swsetup_r+0xba>
 800c63a:	bf00      	nop
 800c63c:	2000000c 	.word	0x2000000c
 800c640:	080103f0 	.word	0x080103f0
 800c644:	08010410 	.word	0x08010410
 800c648:	080103d0 	.word	0x080103d0

0800c64c <quorem>:
 800c64c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c650:	6903      	ldr	r3, [r0, #16]
 800c652:	690c      	ldr	r4, [r1, #16]
 800c654:	42a3      	cmp	r3, r4
 800c656:	4680      	mov	r8, r0
 800c658:	f2c0 8082 	blt.w	800c760 <quorem+0x114>
 800c65c:	3c01      	subs	r4, #1
 800c65e:	f101 0714 	add.w	r7, r1, #20
 800c662:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c666:	f100 0614 	add.w	r6, r0, #20
 800c66a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c66e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c672:	eb06 030c 	add.w	r3, r6, ip
 800c676:	3501      	adds	r5, #1
 800c678:	eb07 090c 	add.w	r9, r7, ip
 800c67c:	9301      	str	r3, [sp, #4]
 800c67e:	fbb0 f5f5 	udiv	r5, r0, r5
 800c682:	b395      	cbz	r5, 800c6ea <quorem+0x9e>
 800c684:	f04f 0a00 	mov.w	sl, #0
 800c688:	4638      	mov	r0, r7
 800c68a:	46b6      	mov	lr, r6
 800c68c:	46d3      	mov	fp, sl
 800c68e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c692:	b293      	uxth	r3, r2
 800c694:	fb05 a303 	mla	r3, r5, r3, sl
 800c698:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	ebab 0303 	sub.w	r3, fp, r3
 800c6a2:	0c12      	lsrs	r2, r2, #16
 800c6a4:	f8de b000 	ldr.w	fp, [lr]
 800c6a8:	fb05 a202 	mla	r2, r5, r2, sl
 800c6ac:	fa13 f38b 	uxtah	r3, r3, fp
 800c6b0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c6b4:	fa1f fb82 	uxth.w	fp, r2
 800c6b8:	f8de 2000 	ldr.w	r2, [lr]
 800c6bc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c6c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6ca:	4581      	cmp	r9, r0
 800c6cc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c6d0:	f84e 3b04 	str.w	r3, [lr], #4
 800c6d4:	d2db      	bcs.n	800c68e <quorem+0x42>
 800c6d6:	f856 300c 	ldr.w	r3, [r6, ip]
 800c6da:	b933      	cbnz	r3, 800c6ea <quorem+0x9e>
 800c6dc:	9b01      	ldr	r3, [sp, #4]
 800c6de:	3b04      	subs	r3, #4
 800c6e0:	429e      	cmp	r6, r3
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	d330      	bcc.n	800c748 <quorem+0xfc>
 800c6e6:	f8c8 4010 	str.w	r4, [r8, #16]
 800c6ea:	4640      	mov	r0, r8
 800c6ec:	f001 fd7a 	bl	800e1e4 <__mcmp>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	db25      	blt.n	800c740 <quorem+0xf4>
 800c6f4:	3501      	adds	r5, #1
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f04f 0c00 	mov.w	ip, #0
 800c6fc:	f857 2b04 	ldr.w	r2, [r7], #4
 800c700:	f8d0 e000 	ldr.w	lr, [r0]
 800c704:	b293      	uxth	r3, r2
 800c706:	ebac 0303 	sub.w	r3, ip, r3
 800c70a:	0c12      	lsrs	r2, r2, #16
 800c70c:	fa13 f38e 	uxtah	r3, r3, lr
 800c710:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c718:	b29b      	uxth	r3, r3
 800c71a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c71e:	45b9      	cmp	r9, r7
 800c720:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c724:	f840 3b04 	str.w	r3, [r0], #4
 800c728:	d2e8      	bcs.n	800c6fc <quorem+0xb0>
 800c72a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c72e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c732:	b92a      	cbnz	r2, 800c740 <quorem+0xf4>
 800c734:	3b04      	subs	r3, #4
 800c736:	429e      	cmp	r6, r3
 800c738:	461a      	mov	r2, r3
 800c73a:	d30b      	bcc.n	800c754 <quorem+0x108>
 800c73c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c740:	4628      	mov	r0, r5
 800c742:	b003      	add	sp, #12
 800c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c748:	6812      	ldr	r2, [r2, #0]
 800c74a:	3b04      	subs	r3, #4
 800c74c:	2a00      	cmp	r2, #0
 800c74e:	d1ca      	bne.n	800c6e6 <quorem+0x9a>
 800c750:	3c01      	subs	r4, #1
 800c752:	e7c5      	b.n	800c6e0 <quorem+0x94>
 800c754:	6812      	ldr	r2, [r2, #0]
 800c756:	3b04      	subs	r3, #4
 800c758:	2a00      	cmp	r2, #0
 800c75a:	d1ef      	bne.n	800c73c <quorem+0xf0>
 800c75c:	3c01      	subs	r4, #1
 800c75e:	e7ea      	b.n	800c736 <quorem+0xea>
 800c760:	2000      	movs	r0, #0
 800c762:	e7ee      	b.n	800c742 <quorem+0xf6>
 800c764:	0000      	movs	r0, r0
	...

0800c768 <_dtoa_r>:
 800c768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76c:	ec57 6b10 	vmov	r6, r7, d0
 800c770:	b097      	sub	sp, #92	; 0x5c
 800c772:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c774:	9106      	str	r1, [sp, #24]
 800c776:	4604      	mov	r4, r0
 800c778:	920b      	str	r2, [sp, #44]	; 0x2c
 800c77a:	9312      	str	r3, [sp, #72]	; 0x48
 800c77c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c780:	e9cd 6700 	strd	r6, r7, [sp]
 800c784:	b93d      	cbnz	r5, 800c796 <_dtoa_r+0x2e>
 800c786:	2010      	movs	r0, #16
 800c788:	f001 fabe 	bl	800dd08 <malloc>
 800c78c:	6260      	str	r0, [r4, #36]	; 0x24
 800c78e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c792:	6005      	str	r5, [r0, #0]
 800c794:	60c5      	str	r5, [r0, #12]
 800c796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c798:	6819      	ldr	r1, [r3, #0]
 800c79a:	b151      	cbz	r1, 800c7b2 <_dtoa_r+0x4a>
 800c79c:	685a      	ldr	r2, [r3, #4]
 800c79e:	604a      	str	r2, [r1, #4]
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	4093      	lsls	r3, r2
 800c7a4:	608b      	str	r3, [r1, #8]
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f001 fafc 	bl	800dda4 <_Bfree>
 800c7ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	1e3b      	subs	r3, r7, #0
 800c7b4:	bfbb      	ittet	lt
 800c7b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7ba:	9301      	strlt	r3, [sp, #4]
 800c7bc:	2300      	movge	r3, #0
 800c7be:	2201      	movlt	r2, #1
 800c7c0:	bfac      	ite	ge
 800c7c2:	f8c8 3000 	strge.w	r3, [r8]
 800c7c6:	f8c8 2000 	strlt.w	r2, [r8]
 800c7ca:	4baf      	ldr	r3, [pc, #700]	; (800ca88 <_dtoa_r+0x320>)
 800c7cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c7d0:	ea33 0308 	bics.w	r3, r3, r8
 800c7d4:	d114      	bne.n	800c800 <_dtoa_r+0x98>
 800c7d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c7d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c7dc:	6013      	str	r3, [r2, #0]
 800c7de:	9b00      	ldr	r3, [sp, #0]
 800c7e0:	b923      	cbnz	r3, 800c7ec <_dtoa_r+0x84>
 800c7e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f000 8542 	beq.w	800d270 <_dtoa_r+0xb08>
 800c7ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ca9c <_dtoa_r+0x334>
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 8544 	beq.w	800d280 <_dtoa_r+0xb18>
 800c7f8:	f10b 0303 	add.w	r3, fp, #3
 800c7fc:	f000 bd3e 	b.w	800d27c <_dtoa_r+0xb14>
 800c800:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c804:	2200      	movs	r2, #0
 800c806:	2300      	movs	r3, #0
 800c808:	4630      	mov	r0, r6
 800c80a:	4639      	mov	r1, r7
 800c80c:	f7f4 f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c810:	4681      	mov	r9, r0
 800c812:	b168      	cbz	r0, 800c830 <_dtoa_r+0xc8>
 800c814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c816:	2301      	movs	r3, #1
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f000 8524 	beq.w	800d26a <_dtoa_r+0xb02>
 800c822:	4b9a      	ldr	r3, [pc, #616]	; (800ca8c <_dtoa_r+0x324>)
 800c824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c826:	f103 3bff 	add.w	fp, r3, #4294967295
 800c82a:	6013      	str	r3, [r2, #0]
 800c82c:	f000 bd28 	b.w	800d280 <_dtoa_r+0xb18>
 800c830:	aa14      	add	r2, sp, #80	; 0x50
 800c832:	a915      	add	r1, sp, #84	; 0x54
 800c834:	ec47 6b10 	vmov	d0, r6, r7
 800c838:	4620      	mov	r0, r4
 800c83a:	f001 fdc1 	bl	800e3c0 <__d2b>
 800c83e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c842:	9004      	str	r0, [sp, #16]
 800c844:	2d00      	cmp	r5, #0
 800c846:	d07c      	beq.n	800c942 <_dtoa_r+0x1da>
 800c848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c84c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c850:	46b2      	mov	sl, r6
 800c852:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c85a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c85e:	2200      	movs	r2, #0
 800c860:	4b8b      	ldr	r3, [pc, #556]	; (800ca90 <_dtoa_r+0x328>)
 800c862:	4650      	mov	r0, sl
 800c864:	4659      	mov	r1, fp
 800c866:	f7f3 fd0f 	bl	8000288 <__aeabi_dsub>
 800c86a:	a381      	add	r3, pc, #516	; (adr r3, 800ca70 <_dtoa_r+0x308>)
 800c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c870:	f7f3 fec2 	bl	80005f8 <__aeabi_dmul>
 800c874:	a380      	add	r3, pc, #512	; (adr r3, 800ca78 <_dtoa_r+0x310>)
 800c876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87a:	f7f3 fd07 	bl	800028c <__adddf3>
 800c87e:	4606      	mov	r6, r0
 800c880:	4628      	mov	r0, r5
 800c882:	460f      	mov	r7, r1
 800c884:	f7f3 fe4e 	bl	8000524 <__aeabi_i2d>
 800c888:	a37d      	add	r3, pc, #500	; (adr r3, 800ca80 <_dtoa_r+0x318>)
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	f7f3 feb3 	bl	80005f8 <__aeabi_dmul>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4630      	mov	r0, r6
 800c898:	4639      	mov	r1, r7
 800c89a:	f7f3 fcf7 	bl	800028c <__adddf3>
 800c89e:	4606      	mov	r6, r0
 800c8a0:	460f      	mov	r7, r1
 800c8a2:	f7f4 f959 	bl	8000b58 <__aeabi_d2iz>
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	4682      	mov	sl, r0
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	f7f4 f914 	bl	8000adc <__aeabi_dcmplt>
 800c8b4:	b148      	cbz	r0, 800c8ca <_dtoa_r+0x162>
 800c8b6:	4650      	mov	r0, sl
 800c8b8:	f7f3 fe34 	bl	8000524 <__aeabi_i2d>
 800c8bc:	4632      	mov	r2, r6
 800c8be:	463b      	mov	r3, r7
 800c8c0:	f7f4 f902 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8c4:	b908      	cbnz	r0, 800c8ca <_dtoa_r+0x162>
 800c8c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8ca:	f1ba 0f16 	cmp.w	sl, #22
 800c8ce:	d859      	bhi.n	800c984 <_dtoa_r+0x21c>
 800c8d0:	4970      	ldr	r1, [pc, #448]	; (800ca94 <_dtoa_r+0x32c>)
 800c8d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c8d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8de:	f7f4 f91b 	bl	8000b18 <__aeabi_dcmpgt>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	d050      	beq.n	800c988 <_dtoa_r+0x220>
 800c8e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c8f0:	1b5d      	subs	r5, r3, r5
 800c8f2:	f1b5 0801 	subs.w	r8, r5, #1
 800c8f6:	bf49      	itett	mi
 800c8f8:	f1c5 0301 	rsbmi	r3, r5, #1
 800c8fc:	2300      	movpl	r3, #0
 800c8fe:	9305      	strmi	r3, [sp, #20]
 800c900:	f04f 0800 	movmi.w	r8, #0
 800c904:	bf58      	it	pl
 800c906:	9305      	strpl	r3, [sp, #20]
 800c908:	f1ba 0f00 	cmp.w	sl, #0
 800c90c:	db3e      	blt.n	800c98c <_dtoa_r+0x224>
 800c90e:	2300      	movs	r3, #0
 800c910:	44d0      	add	r8, sl
 800c912:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c916:	9307      	str	r3, [sp, #28]
 800c918:	9b06      	ldr	r3, [sp, #24]
 800c91a:	2b09      	cmp	r3, #9
 800c91c:	f200 8090 	bhi.w	800ca40 <_dtoa_r+0x2d8>
 800c920:	2b05      	cmp	r3, #5
 800c922:	bfc4      	itt	gt
 800c924:	3b04      	subgt	r3, #4
 800c926:	9306      	strgt	r3, [sp, #24]
 800c928:	9b06      	ldr	r3, [sp, #24]
 800c92a:	f1a3 0302 	sub.w	r3, r3, #2
 800c92e:	bfcc      	ite	gt
 800c930:	2500      	movgt	r5, #0
 800c932:	2501      	movle	r5, #1
 800c934:	2b03      	cmp	r3, #3
 800c936:	f200 808f 	bhi.w	800ca58 <_dtoa_r+0x2f0>
 800c93a:	e8df f003 	tbb	[pc, r3]
 800c93e:	7f7d      	.short	0x7f7d
 800c940:	7131      	.short	0x7131
 800c942:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c946:	441d      	add	r5, r3
 800c948:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c94c:	2820      	cmp	r0, #32
 800c94e:	dd13      	ble.n	800c978 <_dtoa_r+0x210>
 800c950:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c954:	9b00      	ldr	r3, [sp, #0]
 800c956:	fa08 f800 	lsl.w	r8, r8, r0
 800c95a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c95e:	fa23 f000 	lsr.w	r0, r3, r0
 800c962:	ea48 0000 	orr.w	r0, r8, r0
 800c966:	f7f3 fdcd 	bl	8000504 <__aeabi_ui2d>
 800c96a:	2301      	movs	r3, #1
 800c96c:	4682      	mov	sl, r0
 800c96e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c972:	3d01      	subs	r5, #1
 800c974:	9313      	str	r3, [sp, #76]	; 0x4c
 800c976:	e772      	b.n	800c85e <_dtoa_r+0xf6>
 800c978:	9b00      	ldr	r3, [sp, #0]
 800c97a:	f1c0 0020 	rsb	r0, r0, #32
 800c97e:	fa03 f000 	lsl.w	r0, r3, r0
 800c982:	e7f0      	b.n	800c966 <_dtoa_r+0x1fe>
 800c984:	2301      	movs	r3, #1
 800c986:	e7b1      	b.n	800c8ec <_dtoa_r+0x184>
 800c988:	900f      	str	r0, [sp, #60]	; 0x3c
 800c98a:	e7b0      	b.n	800c8ee <_dtoa_r+0x186>
 800c98c:	9b05      	ldr	r3, [sp, #20]
 800c98e:	eba3 030a 	sub.w	r3, r3, sl
 800c992:	9305      	str	r3, [sp, #20]
 800c994:	f1ca 0300 	rsb	r3, sl, #0
 800c998:	9307      	str	r3, [sp, #28]
 800c99a:	2300      	movs	r3, #0
 800c99c:	930e      	str	r3, [sp, #56]	; 0x38
 800c99e:	e7bb      	b.n	800c918 <_dtoa_r+0x1b0>
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c9a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	dd59      	ble.n	800ca5e <_dtoa_r+0x2f6>
 800c9aa:	9302      	str	r3, [sp, #8]
 800c9ac:	4699      	mov	r9, r3
 800c9ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	6072      	str	r2, [r6, #4]
 800c9b4:	2204      	movs	r2, #4
 800c9b6:	f102 0014 	add.w	r0, r2, #20
 800c9ba:	4298      	cmp	r0, r3
 800c9bc:	6871      	ldr	r1, [r6, #4]
 800c9be:	d953      	bls.n	800ca68 <_dtoa_r+0x300>
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f001 f9bb 	bl	800dd3c <_Balloc>
 800c9c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9c8:	6030      	str	r0, [r6, #0]
 800c9ca:	f1b9 0f0e 	cmp.w	r9, #14
 800c9ce:	f8d3 b000 	ldr.w	fp, [r3]
 800c9d2:	f200 80e6 	bhi.w	800cba2 <_dtoa_r+0x43a>
 800c9d6:	2d00      	cmp	r5, #0
 800c9d8:	f000 80e3 	beq.w	800cba2 <_dtoa_r+0x43a>
 800c9dc:	ed9d 7b00 	vldr	d7, [sp]
 800c9e0:	f1ba 0f00 	cmp.w	sl, #0
 800c9e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c9e8:	dd74      	ble.n	800cad4 <_dtoa_r+0x36c>
 800c9ea:	4a2a      	ldr	r2, [pc, #168]	; (800ca94 <_dtoa_r+0x32c>)
 800c9ec:	f00a 030f 	and.w	r3, sl, #15
 800c9f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c9f4:	ed93 7b00 	vldr	d7, [r3]
 800c9f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c9fc:	06f0      	lsls	r0, r6, #27
 800c9fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ca02:	d565      	bpl.n	800cad0 <_dtoa_r+0x368>
 800ca04:	4b24      	ldr	r3, [pc, #144]	; (800ca98 <_dtoa_r+0x330>)
 800ca06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca0e:	f7f3 ff1d 	bl	800084c <__aeabi_ddiv>
 800ca12:	e9cd 0100 	strd	r0, r1, [sp]
 800ca16:	f006 060f 	and.w	r6, r6, #15
 800ca1a:	2503      	movs	r5, #3
 800ca1c:	4f1e      	ldr	r7, [pc, #120]	; (800ca98 <_dtoa_r+0x330>)
 800ca1e:	e04c      	b.n	800caba <_dtoa_r+0x352>
 800ca20:	2301      	movs	r3, #1
 800ca22:	930a      	str	r3, [sp, #40]	; 0x28
 800ca24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca26:	4453      	add	r3, sl
 800ca28:	f103 0901 	add.w	r9, r3, #1
 800ca2c:	9302      	str	r3, [sp, #8]
 800ca2e:	464b      	mov	r3, r9
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	bfb8      	it	lt
 800ca34:	2301      	movlt	r3, #1
 800ca36:	e7ba      	b.n	800c9ae <_dtoa_r+0x246>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	e7b2      	b.n	800c9a2 <_dtoa_r+0x23a>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	e7f0      	b.n	800ca22 <_dtoa_r+0x2ba>
 800ca40:	2501      	movs	r5, #1
 800ca42:	2300      	movs	r3, #0
 800ca44:	9306      	str	r3, [sp, #24]
 800ca46:	950a      	str	r5, [sp, #40]	; 0x28
 800ca48:	f04f 33ff 	mov.w	r3, #4294967295
 800ca4c:	9302      	str	r3, [sp, #8]
 800ca4e:	4699      	mov	r9, r3
 800ca50:	2200      	movs	r2, #0
 800ca52:	2312      	movs	r3, #18
 800ca54:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca56:	e7aa      	b.n	800c9ae <_dtoa_r+0x246>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca5c:	e7f4      	b.n	800ca48 <_dtoa_r+0x2e0>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	9302      	str	r3, [sp, #8]
 800ca62:	4699      	mov	r9, r3
 800ca64:	461a      	mov	r2, r3
 800ca66:	e7f5      	b.n	800ca54 <_dtoa_r+0x2ec>
 800ca68:	3101      	adds	r1, #1
 800ca6a:	6071      	str	r1, [r6, #4]
 800ca6c:	0052      	lsls	r2, r2, #1
 800ca6e:	e7a2      	b.n	800c9b6 <_dtoa_r+0x24e>
 800ca70:	636f4361 	.word	0x636f4361
 800ca74:	3fd287a7 	.word	0x3fd287a7
 800ca78:	8b60c8b3 	.word	0x8b60c8b3
 800ca7c:	3fc68a28 	.word	0x3fc68a28
 800ca80:	509f79fb 	.word	0x509f79fb
 800ca84:	3fd34413 	.word	0x3fd34413
 800ca88:	7ff00000 	.word	0x7ff00000
 800ca8c:	08010345 	.word	0x08010345
 800ca90:	3ff80000 	.word	0x3ff80000
 800ca94:	08010468 	.word	0x08010468
 800ca98:	08010440 	.word	0x08010440
 800ca9c:	080103c9 	.word	0x080103c9
 800caa0:	07f1      	lsls	r1, r6, #31
 800caa2:	d508      	bpl.n	800cab6 <_dtoa_r+0x34e>
 800caa4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800caa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caac:	f7f3 fda4 	bl	80005f8 <__aeabi_dmul>
 800cab0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cab4:	3501      	adds	r5, #1
 800cab6:	1076      	asrs	r6, r6, #1
 800cab8:	3708      	adds	r7, #8
 800caba:	2e00      	cmp	r6, #0
 800cabc:	d1f0      	bne.n	800caa0 <_dtoa_r+0x338>
 800cabe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cac6:	f7f3 fec1 	bl	800084c <__aeabi_ddiv>
 800caca:	e9cd 0100 	strd	r0, r1, [sp]
 800cace:	e01a      	b.n	800cb06 <_dtoa_r+0x39e>
 800cad0:	2502      	movs	r5, #2
 800cad2:	e7a3      	b.n	800ca1c <_dtoa_r+0x2b4>
 800cad4:	f000 80a0 	beq.w	800cc18 <_dtoa_r+0x4b0>
 800cad8:	f1ca 0600 	rsb	r6, sl, #0
 800cadc:	4b9f      	ldr	r3, [pc, #636]	; (800cd5c <_dtoa_r+0x5f4>)
 800cade:	4fa0      	ldr	r7, [pc, #640]	; (800cd60 <_dtoa_r+0x5f8>)
 800cae0:	f006 020f 	and.w	r2, r6, #15
 800cae4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800caf0:	f7f3 fd82 	bl	80005f8 <__aeabi_dmul>
 800caf4:	e9cd 0100 	strd	r0, r1, [sp]
 800caf8:	1136      	asrs	r6, r6, #4
 800cafa:	2300      	movs	r3, #0
 800cafc:	2502      	movs	r5, #2
 800cafe:	2e00      	cmp	r6, #0
 800cb00:	d17f      	bne.n	800cc02 <_dtoa_r+0x49a>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d1e1      	bne.n	800caca <_dtoa_r+0x362>
 800cb06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f000 8087 	beq.w	800cc1c <_dtoa_r+0x4b4>
 800cb0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb12:	2200      	movs	r2, #0
 800cb14:	4b93      	ldr	r3, [pc, #588]	; (800cd64 <_dtoa_r+0x5fc>)
 800cb16:	4630      	mov	r0, r6
 800cb18:	4639      	mov	r1, r7
 800cb1a:	f7f3 ffdf 	bl	8000adc <__aeabi_dcmplt>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d07c      	beq.n	800cc1c <_dtoa_r+0x4b4>
 800cb22:	f1b9 0f00 	cmp.w	r9, #0
 800cb26:	d079      	beq.n	800cc1c <_dtoa_r+0x4b4>
 800cb28:	9b02      	ldr	r3, [sp, #8]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	dd35      	ble.n	800cb9a <_dtoa_r+0x432>
 800cb2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cb32:	9308      	str	r3, [sp, #32]
 800cb34:	4639      	mov	r1, r7
 800cb36:	2200      	movs	r2, #0
 800cb38:	4b8b      	ldr	r3, [pc, #556]	; (800cd68 <_dtoa_r+0x600>)
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	f7f3 fd5c 	bl	80005f8 <__aeabi_dmul>
 800cb40:	e9cd 0100 	strd	r0, r1, [sp]
 800cb44:	9f02      	ldr	r7, [sp, #8]
 800cb46:	3501      	adds	r5, #1
 800cb48:	4628      	mov	r0, r5
 800cb4a:	f7f3 fceb 	bl	8000524 <__aeabi_i2d>
 800cb4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb52:	f7f3 fd51 	bl	80005f8 <__aeabi_dmul>
 800cb56:	2200      	movs	r2, #0
 800cb58:	4b84      	ldr	r3, [pc, #528]	; (800cd6c <_dtoa_r+0x604>)
 800cb5a:	f7f3 fb97 	bl	800028c <__adddf3>
 800cb5e:	4605      	mov	r5, r0
 800cb60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cb64:	2f00      	cmp	r7, #0
 800cb66:	d15d      	bne.n	800cc24 <_dtoa_r+0x4bc>
 800cb68:	2200      	movs	r2, #0
 800cb6a:	4b81      	ldr	r3, [pc, #516]	; (800cd70 <_dtoa_r+0x608>)
 800cb6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb70:	f7f3 fb8a 	bl	8000288 <__aeabi_dsub>
 800cb74:	462a      	mov	r2, r5
 800cb76:	4633      	mov	r3, r6
 800cb78:	e9cd 0100 	strd	r0, r1, [sp]
 800cb7c:	f7f3 ffcc 	bl	8000b18 <__aeabi_dcmpgt>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	f040 8288 	bne.w	800d096 <_dtoa_r+0x92e>
 800cb86:	462a      	mov	r2, r5
 800cb88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cb8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb90:	f7f3 ffa4 	bl	8000adc <__aeabi_dcmplt>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	f040 827c 	bne.w	800d092 <_dtoa_r+0x92a>
 800cb9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cb9e:	e9cd 2300 	strd	r2, r3, [sp]
 800cba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f2c0 8150 	blt.w	800ce4a <_dtoa_r+0x6e2>
 800cbaa:	f1ba 0f0e 	cmp.w	sl, #14
 800cbae:	f300 814c 	bgt.w	800ce4a <_dtoa_r+0x6e2>
 800cbb2:	4b6a      	ldr	r3, [pc, #424]	; (800cd5c <_dtoa_r+0x5f4>)
 800cbb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cbb8:	ed93 7b00 	vldr	d7, [r3]
 800cbbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cbc4:	f280 80d8 	bge.w	800cd78 <_dtoa_r+0x610>
 800cbc8:	f1b9 0f00 	cmp.w	r9, #0
 800cbcc:	f300 80d4 	bgt.w	800cd78 <_dtoa_r+0x610>
 800cbd0:	f040 825e 	bne.w	800d090 <_dtoa_r+0x928>
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	4b66      	ldr	r3, [pc, #408]	; (800cd70 <_dtoa_r+0x608>)
 800cbd8:	ec51 0b17 	vmov	r0, r1, d7
 800cbdc:	f7f3 fd0c 	bl	80005f8 <__aeabi_dmul>
 800cbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbe4:	f7f3 ff8e 	bl	8000b04 <__aeabi_dcmpge>
 800cbe8:	464f      	mov	r7, r9
 800cbea:	464e      	mov	r6, r9
 800cbec:	2800      	cmp	r0, #0
 800cbee:	f040 8234 	bne.w	800d05a <_dtoa_r+0x8f2>
 800cbf2:	2331      	movs	r3, #49	; 0x31
 800cbf4:	f10b 0501 	add.w	r5, fp, #1
 800cbf8:	f88b 3000 	strb.w	r3, [fp]
 800cbfc:	f10a 0a01 	add.w	sl, sl, #1
 800cc00:	e22f      	b.n	800d062 <_dtoa_r+0x8fa>
 800cc02:	07f2      	lsls	r2, r6, #31
 800cc04:	d505      	bpl.n	800cc12 <_dtoa_r+0x4aa>
 800cc06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc0a:	f7f3 fcf5 	bl	80005f8 <__aeabi_dmul>
 800cc0e:	3501      	adds	r5, #1
 800cc10:	2301      	movs	r3, #1
 800cc12:	1076      	asrs	r6, r6, #1
 800cc14:	3708      	adds	r7, #8
 800cc16:	e772      	b.n	800cafe <_dtoa_r+0x396>
 800cc18:	2502      	movs	r5, #2
 800cc1a:	e774      	b.n	800cb06 <_dtoa_r+0x39e>
 800cc1c:	f8cd a020 	str.w	sl, [sp, #32]
 800cc20:	464f      	mov	r7, r9
 800cc22:	e791      	b.n	800cb48 <_dtoa_r+0x3e0>
 800cc24:	4b4d      	ldr	r3, [pc, #308]	; (800cd5c <_dtoa_r+0x5f4>)
 800cc26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc2a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d047      	beq.n	800ccc4 <_dtoa_r+0x55c>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	2000      	movs	r0, #0
 800cc3a:	494e      	ldr	r1, [pc, #312]	; (800cd74 <_dtoa_r+0x60c>)
 800cc3c:	f7f3 fe06 	bl	800084c <__aeabi_ddiv>
 800cc40:	462a      	mov	r2, r5
 800cc42:	4633      	mov	r3, r6
 800cc44:	f7f3 fb20 	bl	8000288 <__aeabi_dsub>
 800cc48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc4c:	465d      	mov	r5, fp
 800cc4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc52:	f7f3 ff81 	bl	8000b58 <__aeabi_d2iz>
 800cc56:	4606      	mov	r6, r0
 800cc58:	f7f3 fc64 	bl	8000524 <__aeabi_i2d>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc64:	f7f3 fb10 	bl	8000288 <__aeabi_dsub>
 800cc68:	3630      	adds	r6, #48	; 0x30
 800cc6a:	f805 6b01 	strb.w	r6, [r5], #1
 800cc6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc72:	e9cd 0100 	strd	r0, r1, [sp]
 800cc76:	f7f3 ff31 	bl	8000adc <__aeabi_dcmplt>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d163      	bne.n	800cd46 <_dtoa_r+0x5de>
 800cc7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc82:	2000      	movs	r0, #0
 800cc84:	4937      	ldr	r1, [pc, #220]	; (800cd64 <_dtoa_r+0x5fc>)
 800cc86:	f7f3 faff 	bl	8000288 <__aeabi_dsub>
 800cc8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cc8e:	f7f3 ff25 	bl	8000adc <__aeabi_dcmplt>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	f040 80b7 	bne.w	800ce06 <_dtoa_r+0x69e>
 800cc98:	eba5 030b 	sub.w	r3, r5, fp
 800cc9c:	429f      	cmp	r7, r3
 800cc9e:	f77f af7c 	ble.w	800cb9a <_dtoa_r+0x432>
 800cca2:	2200      	movs	r2, #0
 800cca4:	4b30      	ldr	r3, [pc, #192]	; (800cd68 <_dtoa_r+0x600>)
 800cca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ccaa:	f7f3 fca5 	bl	80005f8 <__aeabi_dmul>
 800ccae:	2200      	movs	r2, #0
 800ccb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ccb4:	4b2c      	ldr	r3, [pc, #176]	; (800cd68 <_dtoa_r+0x600>)
 800ccb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccba:	f7f3 fc9d 	bl	80005f8 <__aeabi_dmul>
 800ccbe:	e9cd 0100 	strd	r0, r1, [sp]
 800ccc2:	e7c4      	b.n	800cc4e <_dtoa_r+0x4e6>
 800ccc4:	462a      	mov	r2, r5
 800ccc6:	4633      	mov	r3, r6
 800ccc8:	f7f3 fc96 	bl	80005f8 <__aeabi_dmul>
 800cccc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ccd0:	eb0b 0507 	add.w	r5, fp, r7
 800ccd4:	465e      	mov	r6, fp
 800ccd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccda:	f7f3 ff3d 	bl	8000b58 <__aeabi_d2iz>
 800ccde:	4607      	mov	r7, r0
 800cce0:	f7f3 fc20 	bl	8000524 <__aeabi_i2d>
 800cce4:	3730      	adds	r7, #48	; 0x30
 800cce6:	4602      	mov	r2, r0
 800cce8:	460b      	mov	r3, r1
 800ccea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccee:	f7f3 facb 	bl	8000288 <__aeabi_dsub>
 800ccf2:	f806 7b01 	strb.w	r7, [r6], #1
 800ccf6:	42ae      	cmp	r6, r5
 800ccf8:	e9cd 0100 	strd	r0, r1, [sp]
 800ccfc:	f04f 0200 	mov.w	r2, #0
 800cd00:	d126      	bne.n	800cd50 <_dtoa_r+0x5e8>
 800cd02:	4b1c      	ldr	r3, [pc, #112]	; (800cd74 <_dtoa_r+0x60c>)
 800cd04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd08:	f7f3 fac0 	bl	800028c <__adddf3>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	460b      	mov	r3, r1
 800cd10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd14:	f7f3 ff00 	bl	8000b18 <__aeabi_dcmpgt>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d174      	bne.n	800ce06 <_dtoa_r+0x69e>
 800cd1c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cd20:	2000      	movs	r0, #0
 800cd22:	4914      	ldr	r1, [pc, #80]	; (800cd74 <_dtoa_r+0x60c>)
 800cd24:	f7f3 fab0 	bl	8000288 <__aeabi_dsub>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd30:	f7f3 fed4 	bl	8000adc <__aeabi_dcmplt>
 800cd34:	2800      	cmp	r0, #0
 800cd36:	f43f af30 	beq.w	800cb9a <_dtoa_r+0x432>
 800cd3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd3e:	2b30      	cmp	r3, #48	; 0x30
 800cd40:	f105 32ff 	add.w	r2, r5, #4294967295
 800cd44:	d002      	beq.n	800cd4c <_dtoa_r+0x5e4>
 800cd46:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cd4a:	e04a      	b.n	800cde2 <_dtoa_r+0x67a>
 800cd4c:	4615      	mov	r5, r2
 800cd4e:	e7f4      	b.n	800cd3a <_dtoa_r+0x5d2>
 800cd50:	4b05      	ldr	r3, [pc, #20]	; (800cd68 <_dtoa_r+0x600>)
 800cd52:	f7f3 fc51 	bl	80005f8 <__aeabi_dmul>
 800cd56:	e9cd 0100 	strd	r0, r1, [sp]
 800cd5a:	e7bc      	b.n	800ccd6 <_dtoa_r+0x56e>
 800cd5c:	08010468 	.word	0x08010468
 800cd60:	08010440 	.word	0x08010440
 800cd64:	3ff00000 	.word	0x3ff00000
 800cd68:	40240000 	.word	0x40240000
 800cd6c:	401c0000 	.word	0x401c0000
 800cd70:	40140000 	.word	0x40140000
 800cd74:	3fe00000 	.word	0x3fe00000
 800cd78:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd7c:	465d      	mov	r5, fp
 800cd7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd82:	4630      	mov	r0, r6
 800cd84:	4639      	mov	r1, r7
 800cd86:	f7f3 fd61 	bl	800084c <__aeabi_ddiv>
 800cd8a:	f7f3 fee5 	bl	8000b58 <__aeabi_d2iz>
 800cd8e:	4680      	mov	r8, r0
 800cd90:	f7f3 fbc8 	bl	8000524 <__aeabi_i2d>
 800cd94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd98:	f7f3 fc2e 	bl	80005f8 <__aeabi_dmul>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	4630      	mov	r0, r6
 800cda2:	4639      	mov	r1, r7
 800cda4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cda8:	f7f3 fa6e 	bl	8000288 <__aeabi_dsub>
 800cdac:	f805 6b01 	strb.w	r6, [r5], #1
 800cdb0:	eba5 060b 	sub.w	r6, r5, fp
 800cdb4:	45b1      	cmp	r9, r6
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	d139      	bne.n	800ce30 <_dtoa_r+0x6c8>
 800cdbc:	f7f3 fa66 	bl	800028c <__adddf3>
 800cdc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	460f      	mov	r7, r1
 800cdc8:	f7f3 fea6 	bl	8000b18 <__aeabi_dcmpgt>
 800cdcc:	b9c8      	cbnz	r0, 800ce02 <_dtoa_r+0x69a>
 800cdce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	f7f3 fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdda:	b110      	cbz	r0, 800cde2 <_dtoa_r+0x67a>
 800cddc:	f018 0f01 	tst.w	r8, #1
 800cde0:	d10f      	bne.n	800ce02 <_dtoa_r+0x69a>
 800cde2:	9904      	ldr	r1, [sp, #16]
 800cde4:	4620      	mov	r0, r4
 800cde6:	f000 ffdd 	bl	800dda4 <_Bfree>
 800cdea:	2300      	movs	r3, #0
 800cdec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdee:	702b      	strb	r3, [r5, #0]
 800cdf0:	f10a 0301 	add.w	r3, sl, #1
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f000 8241 	beq.w	800d280 <_dtoa_r+0xb18>
 800cdfe:	601d      	str	r5, [r3, #0]
 800ce00:	e23e      	b.n	800d280 <_dtoa_r+0xb18>
 800ce02:	f8cd a020 	str.w	sl, [sp, #32]
 800ce06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce0a:	2a39      	cmp	r2, #57	; 0x39
 800ce0c:	f105 33ff 	add.w	r3, r5, #4294967295
 800ce10:	d108      	bne.n	800ce24 <_dtoa_r+0x6bc>
 800ce12:	459b      	cmp	fp, r3
 800ce14:	d10a      	bne.n	800ce2c <_dtoa_r+0x6c4>
 800ce16:	9b08      	ldr	r3, [sp, #32]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	9308      	str	r3, [sp, #32]
 800ce1c:	2330      	movs	r3, #48	; 0x30
 800ce1e:	f88b 3000 	strb.w	r3, [fp]
 800ce22:	465b      	mov	r3, fp
 800ce24:	781a      	ldrb	r2, [r3, #0]
 800ce26:	3201      	adds	r2, #1
 800ce28:	701a      	strb	r2, [r3, #0]
 800ce2a:	e78c      	b.n	800cd46 <_dtoa_r+0x5de>
 800ce2c:	461d      	mov	r5, r3
 800ce2e:	e7ea      	b.n	800ce06 <_dtoa_r+0x69e>
 800ce30:	2200      	movs	r2, #0
 800ce32:	4b9b      	ldr	r3, [pc, #620]	; (800d0a0 <_dtoa_r+0x938>)
 800ce34:	f7f3 fbe0 	bl	80005f8 <__aeabi_dmul>
 800ce38:	2200      	movs	r2, #0
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	4606      	mov	r6, r0
 800ce3e:	460f      	mov	r7, r1
 800ce40:	f7f3 fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	d09a      	beq.n	800cd7e <_dtoa_r+0x616>
 800ce48:	e7cb      	b.n	800cde2 <_dtoa_r+0x67a>
 800ce4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce4c:	2a00      	cmp	r2, #0
 800ce4e:	f000 808b 	beq.w	800cf68 <_dtoa_r+0x800>
 800ce52:	9a06      	ldr	r2, [sp, #24]
 800ce54:	2a01      	cmp	r2, #1
 800ce56:	dc6e      	bgt.n	800cf36 <_dtoa_r+0x7ce>
 800ce58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce5a:	2a00      	cmp	r2, #0
 800ce5c:	d067      	beq.n	800cf2e <_dtoa_r+0x7c6>
 800ce5e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce62:	9f07      	ldr	r7, [sp, #28]
 800ce64:	9d05      	ldr	r5, [sp, #20]
 800ce66:	9a05      	ldr	r2, [sp, #20]
 800ce68:	2101      	movs	r1, #1
 800ce6a:	441a      	add	r2, r3
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	9205      	str	r2, [sp, #20]
 800ce70:	4498      	add	r8, r3
 800ce72:	f001 f875 	bl	800df60 <__i2b>
 800ce76:	4606      	mov	r6, r0
 800ce78:	2d00      	cmp	r5, #0
 800ce7a:	dd0c      	ble.n	800ce96 <_dtoa_r+0x72e>
 800ce7c:	f1b8 0f00 	cmp.w	r8, #0
 800ce80:	dd09      	ble.n	800ce96 <_dtoa_r+0x72e>
 800ce82:	4545      	cmp	r5, r8
 800ce84:	9a05      	ldr	r2, [sp, #20]
 800ce86:	462b      	mov	r3, r5
 800ce88:	bfa8      	it	ge
 800ce8a:	4643      	movge	r3, r8
 800ce8c:	1ad2      	subs	r2, r2, r3
 800ce8e:	9205      	str	r2, [sp, #20]
 800ce90:	1aed      	subs	r5, r5, r3
 800ce92:	eba8 0803 	sub.w	r8, r8, r3
 800ce96:	9b07      	ldr	r3, [sp, #28]
 800ce98:	b1eb      	cbz	r3, 800ced6 <_dtoa_r+0x76e>
 800ce9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d067      	beq.n	800cf70 <_dtoa_r+0x808>
 800cea0:	b18f      	cbz	r7, 800cec6 <_dtoa_r+0x75e>
 800cea2:	4631      	mov	r1, r6
 800cea4:	463a      	mov	r2, r7
 800cea6:	4620      	mov	r0, r4
 800cea8:	f001 f8fa 	bl	800e0a0 <__pow5mult>
 800ceac:	9a04      	ldr	r2, [sp, #16]
 800ceae:	4601      	mov	r1, r0
 800ceb0:	4606      	mov	r6, r0
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f001 f85d 	bl	800df72 <__multiply>
 800ceb8:	9904      	ldr	r1, [sp, #16]
 800ceba:	9008      	str	r0, [sp, #32]
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 ff71 	bl	800dda4 <_Bfree>
 800cec2:	9b08      	ldr	r3, [sp, #32]
 800cec4:	9304      	str	r3, [sp, #16]
 800cec6:	9b07      	ldr	r3, [sp, #28]
 800cec8:	1bda      	subs	r2, r3, r7
 800ceca:	d004      	beq.n	800ced6 <_dtoa_r+0x76e>
 800cecc:	9904      	ldr	r1, [sp, #16]
 800cece:	4620      	mov	r0, r4
 800ced0:	f001 f8e6 	bl	800e0a0 <__pow5mult>
 800ced4:	9004      	str	r0, [sp, #16]
 800ced6:	2101      	movs	r1, #1
 800ced8:	4620      	mov	r0, r4
 800ceda:	f001 f841 	bl	800df60 <__i2b>
 800cede:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cee0:	4607      	mov	r7, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 81d0 	beq.w	800d288 <_dtoa_r+0xb20>
 800cee8:	461a      	mov	r2, r3
 800ceea:	4601      	mov	r1, r0
 800ceec:	4620      	mov	r0, r4
 800ceee:	f001 f8d7 	bl	800e0a0 <__pow5mult>
 800cef2:	9b06      	ldr	r3, [sp, #24]
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	4607      	mov	r7, r0
 800cef8:	dc40      	bgt.n	800cf7c <_dtoa_r+0x814>
 800cefa:	9b00      	ldr	r3, [sp, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d139      	bne.n	800cf74 <_dtoa_r+0x80c>
 800cf00:	9b01      	ldr	r3, [sp, #4]
 800cf02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d136      	bne.n	800cf78 <_dtoa_r+0x810>
 800cf0a:	9b01      	ldr	r3, [sp, #4]
 800cf0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf10:	0d1b      	lsrs	r3, r3, #20
 800cf12:	051b      	lsls	r3, r3, #20
 800cf14:	b12b      	cbz	r3, 800cf22 <_dtoa_r+0x7ba>
 800cf16:	9b05      	ldr	r3, [sp, #20]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	9305      	str	r3, [sp, #20]
 800cf1c:	f108 0801 	add.w	r8, r8, #1
 800cf20:	2301      	movs	r3, #1
 800cf22:	9307      	str	r3, [sp, #28]
 800cf24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d12a      	bne.n	800cf80 <_dtoa_r+0x818>
 800cf2a:	2001      	movs	r0, #1
 800cf2c:	e030      	b.n	800cf90 <_dtoa_r+0x828>
 800cf2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf34:	e795      	b.n	800ce62 <_dtoa_r+0x6fa>
 800cf36:	9b07      	ldr	r3, [sp, #28]
 800cf38:	f109 37ff 	add.w	r7, r9, #4294967295
 800cf3c:	42bb      	cmp	r3, r7
 800cf3e:	bfbf      	itttt	lt
 800cf40:	9b07      	ldrlt	r3, [sp, #28]
 800cf42:	9707      	strlt	r7, [sp, #28]
 800cf44:	1afa      	sublt	r2, r7, r3
 800cf46:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cf48:	bfbb      	ittet	lt
 800cf4a:	189b      	addlt	r3, r3, r2
 800cf4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cf4e:	1bdf      	subge	r7, r3, r7
 800cf50:	2700      	movlt	r7, #0
 800cf52:	f1b9 0f00 	cmp.w	r9, #0
 800cf56:	bfb5      	itete	lt
 800cf58:	9b05      	ldrlt	r3, [sp, #20]
 800cf5a:	9d05      	ldrge	r5, [sp, #20]
 800cf5c:	eba3 0509 	sublt.w	r5, r3, r9
 800cf60:	464b      	movge	r3, r9
 800cf62:	bfb8      	it	lt
 800cf64:	2300      	movlt	r3, #0
 800cf66:	e77e      	b.n	800ce66 <_dtoa_r+0x6fe>
 800cf68:	9f07      	ldr	r7, [sp, #28]
 800cf6a:	9d05      	ldr	r5, [sp, #20]
 800cf6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cf6e:	e783      	b.n	800ce78 <_dtoa_r+0x710>
 800cf70:	9a07      	ldr	r2, [sp, #28]
 800cf72:	e7ab      	b.n	800cecc <_dtoa_r+0x764>
 800cf74:	2300      	movs	r3, #0
 800cf76:	e7d4      	b.n	800cf22 <_dtoa_r+0x7ba>
 800cf78:	9b00      	ldr	r3, [sp, #0]
 800cf7a:	e7d2      	b.n	800cf22 <_dtoa_r+0x7ba>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	9307      	str	r3, [sp, #28]
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cf86:	6918      	ldr	r0, [r3, #16]
 800cf88:	f000 ff9c 	bl	800dec4 <__hi0bits>
 800cf8c:	f1c0 0020 	rsb	r0, r0, #32
 800cf90:	4440      	add	r0, r8
 800cf92:	f010 001f 	ands.w	r0, r0, #31
 800cf96:	d047      	beq.n	800d028 <_dtoa_r+0x8c0>
 800cf98:	f1c0 0320 	rsb	r3, r0, #32
 800cf9c:	2b04      	cmp	r3, #4
 800cf9e:	dd3b      	ble.n	800d018 <_dtoa_r+0x8b0>
 800cfa0:	9b05      	ldr	r3, [sp, #20]
 800cfa2:	f1c0 001c 	rsb	r0, r0, #28
 800cfa6:	4403      	add	r3, r0
 800cfa8:	9305      	str	r3, [sp, #20]
 800cfaa:	4405      	add	r5, r0
 800cfac:	4480      	add	r8, r0
 800cfae:	9b05      	ldr	r3, [sp, #20]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	dd05      	ble.n	800cfc0 <_dtoa_r+0x858>
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	9904      	ldr	r1, [sp, #16]
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f001 f8bf 	bl	800e13c <__lshift>
 800cfbe:	9004      	str	r0, [sp, #16]
 800cfc0:	f1b8 0f00 	cmp.w	r8, #0
 800cfc4:	dd05      	ble.n	800cfd2 <_dtoa_r+0x86a>
 800cfc6:	4639      	mov	r1, r7
 800cfc8:	4642      	mov	r2, r8
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f001 f8b6 	bl	800e13c <__lshift>
 800cfd0:	4607      	mov	r7, r0
 800cfd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cfd4:	b353      	cbz	r3, 800d02c <_dtoa_r+0x8c4>
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	9804      	ldr	r0, [sp, #16]
 800cfda:	f001 f903 	bl	800e1e4 <__mcmp>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	da24      	bge.n	800d02c <_dtoa_r+0x8c4>
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	220a      	movs	r2, #10
 800cfe6:	9904      	ldr	r1, [sp, #16]
 800cfe8:	4620      	mov	r0, r4
 800cfea:	f000 fef2 	bl	800ddd2 <__multadd>
 800cfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cff0:	9004      	str	r0, [sp, #16]
 800cff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f000 814d 	beq.w	800d296 <_dtoa_r+0xb2e>
 800cffc:	2300      	movs	r3, #0
 800cffe:	4631      	mov	r1, r6
 800d000:	220a      	movs	r2, #10
 800d002:	4620      	mov	r0, r4
 800d004:	f000 fee5 	bl	800ddd2 <__multadd>
 800d008:	9b02      	ldr	r3, [sp, #8]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	4606      	mov	r6, r0
 800d00e:	dc4f      	bgt.n	800d0b0 <_dtoa_r+0x948>
 800d010:	9b06      	ldr	r3, [sp, #24]
 800d012:	2b02      	cmp	r3, #2
 800d014:	dd4c      	ble.n	800d0b0 <_dtoa_r+0x948>
 800d016:	e011      	b.n	800d03c <_dtoa_r+0x8d4>
 800d018:	d0c9      	beq.n	800cfae <_dtoa_r+0x846>
 800d01a:	9a05      	ldr	r2, [sp, #20]
 800d01c:	331c      	adds	r3, #28
 800d01e:	441a      	add	r2, r3
 800d020:	9205      	str	r2, [sp, #20]
 800d022:	441d      	add	r5, r3
 800d024:	4498      	add	r8, r3
 800d026:	e7c2      	b.n	800cfae <_dtoa_r+0x846>
 800d028:	4603      	mov	r3, r0
 800d02a:	e7f6      	b.n	800d01a <_dtoa_r+0x8b2>
 800d02c:	f1b9 0f00 	cmp.w	r9, #0
 800d030:	dc38      	bgt.n	800d0a4 <_dtoa_r+0x93c>
 800d032:	9b06      	ldr	r3, [sp, #24]
 800d034:	2b02      	cmp	r3, #2
 800d036:	dd35      	ble.n	800d0a4 <_dtoa_r+0x93c>
 800d038:	f8cd 9008 	str.w	r9, [sp, #8]
 800d03c:	9b02      	ldr	r3, [sp, #8]
 800d03e:	b963      	cbnz	r3, 800d05a <_dtoa_r+0x8f2>
 800d040:	4639      	mov	r1, r7
 800d042:	2205      	movs	r2, #5
 800d044:	4620      	mov	r0, r4
 800d046:	f000 fec4 	bl	800ddd2 <__multadd>
 800d04a:	4601      	mov	r1, r0
 800d04c:	4607      	mov	r7, r0
 800d04e:	9804      	ldr	r0, [sp, #16]
 800d050:	f001 f8c8 	bl	800e1e4 <__mcmp>
 800d054:	2800      	cmp	r0, #0
 800d056:	f73f adcc 	bgt.w	800cbf2 <_dtoa_r+0x48a>
 800d05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d05c:	465d      	mov	r5, fp
 800d05e:	ea6f 0a03 	mvn.w	sl, r3
 800d062:	f04f 0900 	mov.w	r9, #0
 800d066:	4639      	mov	r1, r7
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 fe9b 	bl	800dda4 <_Bfree>
 800d06e:	2e00      	cmp	r6, #0
 800d070:	f43f aeb7 	beq.w	800cde2 <_dtoa_r+0x67a>
 800d074:	f1b9 0f00 	cmp.w	r9, #0
 800d078:	d005      	beq.n	800d086 <_dtoa_r+0x91e>
 800d07a:	45b1      	cmp	r9, r6
 800d07c:	d003      	beq.n	800d086 <_dtoa_r+0x91e>
 800d07e:	4649      	mov	r1, r9
 800d080:	4620      	mov	r0, r4
 800d082:	f000 fe8f 	bl	800dda4 <_Bfree>
 800d086:	4631      	mov	r1, r6
 800d088:	4620      	mov	r0, r4
 800d08a:	f000 fe8b 	bl	800dda4 <_Bfree>
 800d08e:	e6a8      	b.n	800cde2 <_dtoa_r+0x67a>
 800d090:	2700      	movs	r7, #0
 800d092:	463e      	mov	r6, r7
 800d094:	e7e1      	b.n	800d05a <_dtoa_r+0x8f2>
 800d096:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d09a:	463e      	mov	r6, r7
 800d09c:	e5a9      	b.n	800cbf2 <_dtoa_r+0x48a>
 800d09e:	bf00      	nop
 800d0a0:	40240000 	.word	0x40240000
 800d0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f000 80fa 	beq.w	800d2a4 <_dtoa_r+0xb3c>
 800d0b0:	2d00      	cmp	r5, #0
 800d0b2:	dd05      	ble.n	800d0c0 <_dtoa_r+0x958>
 800d0b4:	4631      	mov	r1, r6
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f001 f83f 	bl	800e13c <__lshift>
 800d0be:	4606      	mov	r6, r0
 800d0c0:	9b07      	ldr	r3, [sp, #28]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d04c      	beq.n	800d160 <_dtoa_r+0x9f8>
 800d0c6:	6871      	ldr	r1, [r6, #4]
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f000 fe37 	bl	800dd3c <_Balloc>
 800d0ce:	6932      	ldr	r2, [r6, #16]
 800d0d0:	3202      	adds	r2, #2
 800d0d2:	4605      	mov	r5, r0
 800d0d4:	0092      	lsls	r2, r2, #2
 800d0d6:	f106 010c 	add.w	r1, r6, #12
 800d0da:	300c      	adds	r0, #12
 800d0dc:	f7fd fc52 	bl	800a984 <memcpy>
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	4629      	mov	r1, r5
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f001 f829 	bl	800e13c <__lshift>
 800d0ea:	9b00      	ldr	r3, [sp, #0]
 800d0ec:	f8cd b014 	str.w	fp, [sp, #20]
 800d0f0:	f003 0301 	and.w	r3, r3, #1
 800d0f4:	46b1      	mov	r9, r6
 800d0f6:	9307      	str	r3, [sp, #28]
 800d0f8:	4606      	mov	r6, r0
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	9804      	ldr	r0, [sp, #16]
 800d0fe:	f7ff faa5 	bl	800c64c <quorem>
 800d102:	4649      	mov	r1, r9
 800d104:	4605      	mov	r5, r0
 800d106:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d10a:	9804      	ldr	r0, [sp, #16]
 800d10c:	f001 f86a 	bl	800e1e4 <__mcmp>
 800d110:	4632      	mov	r2, r6
 800d112:	9000      	str	r0, [sp, #0]
 800d114:	4639      	mov	r1, r7
 800d116:	4620      	mov	r0, r4
 800d118:	f001 f87e 	bl	800e218 <__mdiff>
 800d11c:	68c3      	ldr	r3, [r0, #12]
 800d11e:	4602      	mov	r2, r0
 800d120:	bb03      	cbnz	r3, 800d164 <_dtoa_r+0x9fc>
 800d122:	4601      	mov	r1, r0
 800d124:	9008      	str	r0, [sp, #32]
 800d126:	9804      	ldr	r0, [sp, #16]
 800d128:	f001 f85c 	bl	800e1e4 <__mcmp>
 800d12c:	9a08      	ldr	r2, [sp, #32]
 800d12e:	4603      	mov	r3, r0
 800d130:	4611      	mov	r1, r2
 800d132:	4620      	mov	r0, r4
 800d134:	9308      	str	r3, [sp, #32]
 800d136:	f000 fe35 	bl	800dda4 <_Bfree>
 800d13a:	9b08      	ldr	r3, [sp, #32]
 800d13c:	b9a3      	cbnz	r3, 800d168 <_dtoa_r+0xa00>
 800d13e:	9a06      	ldr	r2, [sp, #24]
 800d140:	b992      	cbnz	r2, 800d168 <_dtoa_r+0xa00>
 800d142:	9a07      	ldr	r2, [sp, #28]
 800d144:	b982      	cbnz	r2, 800d168 <_dtoa_r+0xa00>
 800d146:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d14a:	d029      	beq.n	800d1a0 <_dtoa_r+0xa38>
 800d14c:	9b00      	ldr	r3, [sp, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	dd01      	ble.n	800d156 <_dtoa_r+0x9ee>
 800d152:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d156:	9b05      	ldr	r3, [sp, #20]
 800d158:	1c5d      	adds	r5, r3, #1
 800d15a:	f883 8000 	strb.w	r8, [r3]
 800d15e:	e782      	b.n	800d066 <_dtoa_r+0x8fe>
 800d160:	4630      	mov	r0, r6
 800d162:	e7c2      	b.n	800d0ea <_dtoa_r+0x982>
 800d164:	2301      	movs	r3, #1
 800d166:	e7e3      	b.n	800d130 <_dtoa_r+0x9c8>
 800d168:	9a00      	ldr	r2, [sp, #0]
 800d16a:	2a00      	cmp	r2, #0
 800d16c:	db04      	blt.n	800d178 <_dtoa_r+0xa10>
 800d16e:	d125      	bne.n	800d1bc <_dtoa_r+0xa54>
 800d170:	9a06      	ldr	r2, [sp, #24]
 800d172:	bb1a      	cbnz	r2, 800d1bc <_dtoa_r+0xa54>
 800d174:	9a07      	ldr	r2, [sp, #28]
 800d176:	bb0a      	cbnz	r2, 800d1bc <_dtoa_r+0xa54>
 800d178:	2b00      	cmp	r3, #0
 800d17a:	ddec      	ble.n	800d156 <_dtoa_r+0x9ee>
 800d17c:	2201      	movs	r2, #1
 800d17e:	9904      	ldr	r1, [sp, #16]
 800d180:	4620      	mov	r0, r4
 800d182:	f000 ffdb 	bl	800e13c <__lshift>
 800d186:	4639      	mov	r1, r7
 800d188:	9004      	str	r0, [sp, #16]
 800d18a:	f001 f82b 	bl	800e1e4 <__mcmp>
 800d18e:	2800      	cmp	r0, #0
 800d190:	dc03      	bgt.n	800d19a <_dtoa_r+0xa32>
 800d192:	d1e0      	bne.n	800d156 <_dtoa_r+0x9ee>
 800d194:	f018 0f01 	tst.w	r8, #1
 800d198:	d0dd      	beq.n	800d156 <_dtoa_r+0x9ee>
 800d19a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d19e:	d1d8      	bne.n	800d152 <_dtoa_r+0x9ea>
 800d1a0:	9b05      	ldr	r3, [sp, #20]
 800d1a2:	9a05      	ldr	r2, [sp, #20]
 800d1a4:	1c5d      	adds	r5, r3, #1
 800d1a6:	2339      	movs	r3, #57	; 0x39
 800d1a8:	7013      	strb	r3, [r2, #0]
 800d1aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1ae:	2b39      	cmp	r3, #57	; 0x39
 800d1b0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d1b4:	d04f      	beq.n	800d256 <_dtoa_r+0xaee>
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	7013      	strb	r3, [r2, #0]
 800d1ba:	e754      	b.n	800d066 <_dtoa_r+0x8fe>
 800d1bc:	9a05      	ldr	r2, [sp, #20]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	f102 0501 	add.w	r5, r2, #1
 800d1c4:	dd06      	ble.n	800d1d4 <_dtoa_r+0xa6c>
 800d1c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d1ca:	d0e9      	beq.n	800d1a0 <_dtoa_r+0xa38>
 800d1cc:	f108 0801 	add.w	r8, r8, #1
 800d1d0:	9b05      	ldr	r3, [sp, #20]
 800d1d2:	e7c2      	b.n	800d15a <_dtoa_r+0x9f2>
 800d1d4:	9a02      	ldr	r2, [sp, #8]
 800d1d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d1da:	eba5 030b 	sub.w	r3, r5, fp
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d021      	beq.n	800d226 <_dtoa_r+0xabe>
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	220a      	movs	r2, #10
 800d1e6:	9904      	ldr	r1, [sp, #16]
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f000 fdf2 	bl	800ddd2 <__multadd>
 800d1ee:	45b1      	cmp	r9, r6
 800d1f0:	9004      	str	r0, [sp, #16]
 800d1f2:	f04f 0300 	mov.w	r3, #0
 800d1f6:	f04f 020a 	mov.w	r2, #10
 800d1fa:	4649      	mov	r1, r9
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	d105      	bne.n	800d20c <_dtoa_r+0xaa4>
 800d200:	f000 fde7 	bl	800ddd2 <__multadd>
 800d204:	4681      	mov	r9, r0
 800d206:	4606      	mov	r6, r0
 800d208:	9505      	str	r5, [sp, #20]
 800d20a:	e776      	b.n	800d0fa <_dtoa_r+0x992>
 800d20c:	f000 fde1 	bl	800ddd2 <__multadd>
 800d210:	4631      	mov	r1, r6
 800d212:	4681      	mov	r9, r0
 800d214:	2300      	movs	r3, #0
 800d216:	220a      	movs	r2, #10
 800d218:	4620      	mov	r0, r4
 800d21a:	f000 fdda 	bl	800ddd2 <__multadd>
 800d21e:	4606      	mov	r6, r0
 800d220:	e7f2      	b.n	800d208 <_dtoa_r+0xaa0>
 800d222:	f04f 0900 	mov.w	r9, #0
 800d226:	2201      	movs	r2, #1
 800d228:	9904      	ldr	r1, [sp, #16]
 800d22a:	4620      	mov	r0, r4
 800d22c:	f000 ff86 	bl	800e13c <__lshift>
 800d230:	4639      	mov	r1, r7
 800d232:	9004      	str	r0, [sp, #16]
 800d234:	f000 ffd6 	bl	800e1e4 <__mcmp>
 800d238:	2800      	cmp	r0, #0
 800d23a:	dcb6      	bgt.n	800d1aa <_dtoa_r+0xa42>
 800d23c:	d102      	bne.n	800d244 <_dtoa_r+0xadc>
 800d23e:	f018 0f01 	tst.w	r8, #1
 800d242:	d1b2      	bne.n	800d1aa <_dtoa_r+0xa42>
 800d244:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d248:	2b30      	cmp	r3, #48	; 0x30
 800d24a:	f105 32ff 	add.w	r2, r5, #4294967295
 800d24e:	f47f af0a 	bne.w	800d066 <_dtoa_r+0x8fe>
 800d252:	4615      	mov	r5, r2
 800d254:	e7f6      	b.n	800d244 <_dtoa_r+0xadc>
 800d256:	4593      	cmp	fp, r2
 800d258:	d105      	bne.n	800d266 <_dtoa_r+0xafe>
 800d25a:	2331      	movs	r3, #49	; 0x31
 800d25c:	f10a 0a01 	add.w	sl, sl, #1
 800d260:	f88b 3000 	strb.w	r3, [fp]
 800d264:	e6ff      	b.n	800d066 <_dtoa_r+0x8fe>
 800d266:	4615      	mov	r5, r2
 800d268:	e79f      	b.n	800d1aa <_dtoa_r+0xa42>
 800d26a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d2d0 <_dtoa_r+0xb68>
 800d26e:	e007      	b.n	800d280 <_dtoa_r+0xb18>
 800d270:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d272:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d2d4 <_dtoa_r+0xb6c>
 800d276:	b11b      	cbz	r3, 800d280 <_dtoa_r+0xb18>
 800d278:	f10b 0308 	add.w	r3, fp, #8
 800d27c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d27e:	6013      	str	r3, [r2, #0]
 800d280:	4658      	mov	r0, fp
 800d282:	b017      	add	sp, #92	; 0x5c
 800d284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d288:	9b06      	ldr	r3, [sp, #24]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	f77f ae35 	ble.w	800cefa <_dtoa_r+0x792>
 800d290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d292:	9307      	str	r3, [sp, #28]
 800d294:	e649      	b.n	800cf2a <_dtoa_r+0x7c2>
 800d296:	9b02      	ldr	r3, [sp, #8]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	dc03      	bgt.n	800d2a4 <_dtoa_r+0xb3c>
 800d29c:	9b06      	ldr	r3, [sp, #24]
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	f73f aecc 	bgt.w	800d03c <_dtoa_r+0x8d4>
 800d2a4:	465d      	mov	r5, fp
 800d2a6:	4639      	mov	r1, r7
 800d2a8:	9804      	ldr	r0, [sp, #16]
 800d2aa:	f7ff f9cf 	bl	800c64c <quorem>
 800d2ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d2b2:	f805 8b01 	strb.w	r8, [r5], #1
 800d2b6:	9a02      	ldr	r2, [sp, #8]
 800d2b8:	eba5 030b 	sub.w	r3, r5, fp
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	ddb0      	ble.n	800d222 <_dtoa_r+0xaba>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	220a      	movs	r2, #10
 800d2c4:	9904      	ldr	r1, [sp, #16]
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f000 fd83 	bl	800ddd2 <__multadd>
 800d2cc:	9004      	str	r0, [sp, #16]
 800d2ce:	e7ea      	b.n	800d2a6 <_dtoa_r+0xb3e>
 800d2d0:	08010344 	.word	0x08010344
 800d2d4:	080103c0 	.word	0x080103c0

0800d2d8 <__sflush_r>:
 800d2d8:	898a      	ldrh	r2, [r1, #12]
 800d2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2de:	4605      	mov	r5, r0
 800d2e0:	0710      	lsls	r0, r2, #28
 800d2e2:	460c      	mov	r4, r1
 800d2e4:	d458      	bmi.n	800d398 <__sflush_r+0xc0>
 800d2e6:	684b      	ldr	r3, [r1, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	dc05      	bgt.n	800d2f8 <__sflush_r+0x20>
 800d2ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	dc02      	bgt.n	800d2f8 <__sflush_r+0x20>
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2fa:	2e00      	cmp	r6, #0
 800d2fc:	d0f9      	beq.n	800d2f2 <__sflush_r+0x1a>
 800d2fe:	2300      	movs	r3, #0
 800d300:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d304:	682f      	ldr	r7, [r5, #0]
 800d306:	6a21      	ldr	r1, [r4, #32]
 800d308:	602b      	str	r3, [r5, #0]
 800d30a:	d032      	beq.n	800d372 <__sflush_r+0x9a>
 800d30c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d30e:	89a3      	ldrh	r3, [r4, #12]
 800d310:	075a      	lsls	r2, r3, #29
 800d312:	d505      	bpl.n	800d320 <__sflush_r+0x48>
 800d314:	6863      	ldr	r3, [r4, #4]
 800d316:	1ac0      	subs	r0, r0, r3
 800d318:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d31a:	b10b      	cbz	r3, 800d320 <__sflush_r+0x48>
 800d31c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d31e:	1ac0      	subs	r0, r0, r3
 800d320:	2300      	movs	r3, #0
 800d322:	4602      	mov	r2, r0
 800d324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d326:	6a21      	ldr	r1, [r4, #32]
 800d328:	4628      	mov	r0, r5
 800d32a:	47b0      	blx	r6
 800d32c:	1c43      	adds	r3, r0, #1
 800d32e:	89a3      	ldrh	r3, [r4, #12]
 800d330:	d106      	bne.n	800d340 <__sflush_r+0x68>
 800d332:	6829      	ldr	r1, [r5, #0]
 800d334:	291d      	cmp	r1, #29
 800d336:	d848      	bhi.n	800d3ca <__sflush_r+0xf2>
 800d338:	4a29      	ldr	r2, [pc, #164]	; (800d3e0 <__sflush_r+0x108>)
 800d33a:	40ca      	lsrs	r2, r1
 800d33c:	07d6      	lsls	r6, r2, #31
 800d33e:	d544      	bpl.n	800d3ca <__sflush_r+0xf2>
 800d340:	2200      	movs	r2, #0
 800d342:	6062      	str	r2, [r4, #4]
 800d344:	04d9      	lsls	r1, r3, #19
 800d346:	6922      	ldr	r2, [r4, #16]
 800d348:	6022      	str	r2, [r4, #0]
 800d34a:	d504      	bpl.n	800d356 <__sflush_r+0x7e>
 800d34c:	1c42      	adds	r2, r0, #1
 800d34e:	d101      	bne.n	800d354 <__sflush_r+0x7c>
 800d350:	682b      	ldr	r3, [r5, #0]
 800d352:	b903      	cbnz	r3, 800d356 <__sflush_r+0x7e>
 800d354:	6560      	str	r0, [r4, #84]	; 0x54
 800d356:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d358:	602f      	str	r7, [r5, #0]
 800d35a:	2900      	cmp	r1, #0
 800d35c:	d0c9      	beq.n	800d2f2 <__sflush_r+0x1a>
 800d35e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d362:	4299      	cmp	r1, r3
 800d364:	d002      	beq.n	800d36c <__sflush_r+0x94>
 800d366:	4628      	mov	r0, r5
 800d368:	f001 f8f6 	bl	800e558 <_free_r>
 800d36c:	2000      	movs	r0, #0
 800d36e:	6360      	str	r0, [r4, #52]	; 0x34
 800d370:	e7c0      	b.n	800d2f4 <__sflush_r+0x1c>
 800d372:	2301      	movs	r3, #1
 800d374:	4628      	mov	r0, r5
 800d376:	47b0      	blx	r6
 800d378:	1c41      	adds	r1, r0, #1
 800d37a:	d1c8      	bne.n	800d30e <__sflush_r+0x36>
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0c5      	beq.n	800d30e <__sflush_r+0x36>
 800d382:	2b1d      	cmp	r3, #29
 800d384:	d001      	beq.n	800d38a <__sflush_r+0xb2>
 800d386:	2b16      	cmp	r3, #22
 800d388:	d101      	bne.n	800d38e <__sflush_r+0xb6>
 800d38a:	602f      	str	r7, [r5, #0]
 800d38c:	e7b1      	b.n	800d2f2 <__sflush_r+0x1a>
 800d38e:	89a3      	ldrh	r3, [r4, #12]
 800d390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d394:	81a3      	strh	r3, [r4, #12]
 800d396:	e7ad      	b.n	800d2f4 <__sflush_r+0x1c>
 800d398:	690f      	ldr	r7, [r1, #16]
 800d39a:	2f00      	cmp	r7, #0
 800d39c:	d0a9      	beq.n	800d2f2 <__sflush_r+0x1a>
 800d39e:	0793      	lsls	r3, r2, #30
 800d3a0:	680e      	ldr	r6, [r1, #0]
 800d3a2:	bf08      	it	eq
 800d3a4:	694b      	ldreq	r3, [r1, #20]
 800d3a6:	600f      	str	r7, [r1, #0]
 800d3a8:	bf18      	it	ne
 800d3aa:	2300      	movne	r3, #0
 800d3ac:	eba6 0807 	sub.w	r8, r6, r7
 800d3b0:	608b      	str	r3, [r1, #8]
 800d3b2:	f1b8 0f00 	cmp.w	r8, #0
 800d3b6:	dd9c      	ble.n	800d2f2 <__sflush_r+0x1a>
 800d3b8:	4643      	mov	r3, r8
 800d3ba:	463a      	mov	r2, r7
 800d3bc:	6a21      	ldr	r1, [r4, #32]
 800d3be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	47b0      	blx	r6
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	dc06      	bgt.n	800d3d6 <__sflush_r+0xfe>
 800d3c8:	89a3      	ldrh	r3, [r4, #12]
 800d3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ce:	81a3      	strh	r3, [r4, #12]
 800d3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d4:	e78e      	b.n	800d2f4 <__sflush_r+0x1c>
 800d3d6:	4407      	add	r7, r0
 800d3d8:	eba8 0800 	sub.w	r8, r8, r0
 800d3dc:	e7e9      	b.n	800d3b2 <__sflush_r+0xda>
 800d3de:	bf00      	nop
 800d3e0:	20400001 	.word	0x20400001

0800d3e4 <_fflush_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	690b      	ldr	r3, [r1, #16]
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	460c      	mov	r4, r1
 800d3ec:	b1db      	cbz	r3, 800d426 <_fflush_r+0x42>
 800d3ee:	b118      	cbz	r0, 800d3f8 <_fflush_r+0x14>
 800d3f0:	6983      	ldr	r3, [r0, #24]
 800d3f2:	b90b      	cbnz	r3, 800d3f8 <_fflush_r+0x14>
 800d3f4:	f000 f860 	bl	800d4b8 <__sinit>
 800d3f8:	4b0c      	ldr	r3, [pc, #48]	; (800d42c <_fflush_r+0x48>)
 800d3fa:	429c      	cmp	r4, r3
 800d3fc:	d109      	bne.n	800d412 <_fflush_r+0x2e>
 800d3fe:	686c      	ldr	r4, [r5, #4]
 800d400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d404:	b17b      	cbz	r3, 800d426 <_fflush_r+0x42>
 800d406:	4621      	mov	r1, r4
 800d408:	4628      	mov	r0, r5
 800d40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d40e:	f7ff bf63 	b.w	800d2d8 <__sflush_r>
 800d412:	4b07      	ldr	r3, [pc, #28]	; (800d430 <_fflush_r+0x4c>)
 800d414:	429c      	cmp	r4, r3
 800d416:	d101      	bne.n	800d41c <_fflush_r+0x38>
 800d418:	68ac      	ldr	r4, [r5, #8]
 800d41a:	e7f1      	b.n	800d400 <_fflush_r+0x1c>
 800d41c:	4b05      	ldr	r3, [pc, #20]	; (800d434 <_fflush_r+0x50>)
 800d41e:	429c      	cmp	r4, r3
 800d420:	bf08      	it	eq
 800d422:	68ec      	ldreq	r4, [r5, #12]
 800d424:	e7ec      	b.n	800d400 <_fflush_r+0x1c>
 800d426:	2000      	movs	r0, #0
 800d428:	bd38      	pop	{r3, r4, r5, pc}
 800d42a:	bf00      	nop
 800d42c:	080103f0 	.word	0x080103f0
 800d430:	08010410 	.word	0x08010410
 800d434:	080103d0 	.word	0x080103d0

0800d438 <std>:
 800d438:	2300      	movs	r3, #0
 800d43a:	b510      	push	{r4, lr}
 800d43c:	4604      	mov	r4, r0
 800d43e:	e9c0 3300 	strd	r3, r3, [r0]
 800d442:	6083      	str	r3, [r0, #8]
 800d444:	8181      	strh	r1, [r0, #12]
 800d446:	6643      	str	r3, [r0, #100]	; 0x64
 800d448:	81c2      	strh	r2, [r0, #14]
 800d44a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d44e:	6183      	str	r3, [r0, #24]
 800d450:	4619      	mov	r1, r3
 800d452:	2208      	movs	r2, #8
 800d454:	305c      	adds	r0, #92	; 0x5c
 800d456:	f7fd faa0 	bl	800a99a <memset>
 800d45a:	4b05      	ldr	r3, [pc, #20]	; (800d470 <std+0x38>)
 800d45c:	6263      	str	r3, [r4, #36]	; 0x24
 800d45e:	4b05      	ldr	r3, [pc, #20]	; (800d474 <std+0x3c>)
 800d460:	62a3      	str	r3, [r4, #40]	; 0x28
 800d462:	4b05      	ldr	r3, [pc, #20]	; (800d478 <std+0x40>)
 800d464:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d466:	4b05      	ldr	r3, [pc, #20]	; (800d47c <std+0x44>)
 800d468:	6224      	str	r4, [r4, #32]
 800d46a:	6323      	str	r3, [r4, #48]	; 0x30
 800d46c:	bd10      	pop	{r4, pc}
 800d46e:	bf00      	nop
 800d470:	0800ebed 	.word	0x0800ebed
 800d474:	0800ec0f 	.word	0x0800ec0f
 800d478:	0800ec47 	.word	0x0800ec47
 800d47c:	0800ec6b 	.word	0x0800ec6b

0800d480 <_cleanup_r>:
 800d480:	4901      	ldr	r1, [pc, #4]	; (800d488 <_cleanup_r+0x8>)
 800d482:	f000 b885 	b.w	800d590 <_fwalk_reent>
 800d486:	bf00      	nop
 800d488:	0800d3e5 	.word	0x0800d3e5

0800d48c <__sfmoreglue>:
 800d48c:	b570      	push	{r4, r5, r6, lr}
 800d48e:	1e4a      	subs	r2, r1, #1
 800d490:	2568      	movs	r5, #104	; 0x68
 800d492:	4355      	muls	r5, r2
 800d494:	460e      	mov	r6, r1
 800d496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d49a:	f001 f8ab 	bl	800e5f4 <_malloc_r>
 800d49e:	4604      	mov	r4, r0
 800d4a0:	b140      	cbz	r0, 800d4b4 <__sfmoreglue+0x28>
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	e9c0 1600 	strd	r1, r6, [r0]
 800d4a8:	300c      	adds	r0, #12
 800d4aa:	60a0      	str	r0, [r4, #8]
 800d4ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4b0:	f7fd fa73 	bl	800a99a <memset>
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	bd70      	pop	{r4, r5, r6, pc}

0800d4b8 <__sinit>:
 800d4b8:	6983      	ldr	r3, [r0, #24]
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	4604      	mov	r4, r0
 800d4be:	bb33      	cbnz	r3, 800d50e <__sinit+0x56>
 800d4c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d4c4:	6503      	str	r3, [r0, #80]	; 0x50
 800d4c6:	4b12      	ldr	r3, [pc, #72]	; (800d510 <__sinit+0x58>)
 800d4c8:	4a12      	ldr	r2, [pc, #72]	; (800d514 <__sinit+0x5c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	6282      	str	r2, [r0, #40]	; 0x28
 800d4ce:	4298      	cmp	r0, r3
 800d4d0:	bf04      	itt	eq
 800d4d2:	2301      	moveq	r3, #1
 800d4d4:	6183      	streq	r3, [r0, #24]
 800d4d6:	f000 f81f 	bl	800d518 <__sfp>
 800d4da:	6060      	str	r0, [r4, #4]
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 f81b 	bl	800d518 <__sfp>
 800d4e2:	60a0      	str	r0, [r4, #8]
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f000 f817 	bl	800d518 <__sfp>
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	60e0      	str	r0, [r4, #12]
 800d4ee:	2104      	movs	r1, #4
 800d4f0:	6860      	ldr	r0, [r4, #4]
 800d4f2:	f7ff ffa1 	bl	800d438 <std>
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	2109      	movs	r1, #9
 800d4fa:	68a0      	ldr	r0, [r4, #8]
 800d4fc:	f7ff ff9c 	bl	800d438 <std>
 800d500:	2202      	movs	r2, #2
 800d502:	2112      	movs	r1, #18
 800d504:	68e0      	ldr	r0, [r4, #12]
 800d506:	f7ff ff97 	bl	800d438 <std>
 800d50a:	2301      	movs	r3, #1
 800d50c:	61a3      	str	r3, [r4, #24]
 800d50e:	bd10      	pop	{r4, pc}
 800d510:	08010330 	.word	0x08010330
 800d514:	0800d481 	.word	0x0800d481

0800d518 <__sfp>:
 800d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51a:	4b1b      	ldr	r3, [pc, #108]	; (800d588 <__sfp+0x70>)
 800d51c:	681e      	ldr	r6, [r3, #0]
 800d51e:	69b3      	ldr	r3, [r6, #24]
 800d520:	4607      	mov	r7, r0
 800d522:	b913      	cbnz	r3, 800d52a <__sfp+0x12>
 800d524:	4630      	mov	r0, r6
 800d526:	f7ff ffc7 	bl	800d4b8 <__sinit>
 800d52a:	3648      	adds	r6, #72	; 0x48
 800d52c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d530:	3b01      	subs	r3, #1
 800d532:	d503      	bpl.n	800d53c <__sfp+0x24>
 800d534:	6833      	ldr	r3, [r6, #0]
 800d536:	b133      	cbz	r3, 800d546 <__sfp+0x2e>
 800d538:	6836      	ldr	r6, [r6, #0]
 800d53a:	e7f7      	b.n	800d52c <__sfp+0x14>
 800d53c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d540:	b16d      	cbz	r5, 800d55e <__sfp+0x46>
 800d542:	3468      	adds	r4, #104	; 0x68
 800d544:	e7f4      	b.n	800d530 <__sfp+0x18>
 800d546:	2104      	movs	r1, #4
 800d548:	4638      	mov	r0, r7
 800d54a:	f7ff ff9f 	bl	800d48c <__sfmoreglue>
 800d54e:	6030      	str	r0, [r6, #0]
 800d550:	2800      	cmp	r0, #0
 800d552:	d1f1      	bne.n	800d538 <__sfp+0x20>
 800d554:	230c      	movs	r3, #12
 800d556:	603b      	str	r3, [r7, #0]
 800d558:	4604      	mov	r4, r0
 800d55a:	4620      	mov	r0, r4
 800d55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d55e:	4b0b      	ldr	r3, [pc, #44]	; (800d58c <__sfp+0x74>)
 800d560:	6665      	str	r5, [r4, #100]	; 0x64
 800d562:	e9c4 5500 	strd	r5, r5, [r4]
 800d566:	60a5      	str	r5, [r4, #8]
 800d568:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d56c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d570:	2208      	movs	r2, #8
 800d572:	4629      	mov	r1, r5
 800d574:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d578:	f7fd fa0f 	bl	800a99a <memset>
 800d57c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d580:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d584:	e7e9      	b.n	800d55a <__sfp+0x42>
 800d586:	bf00      	nop
 800d588:	08010330 	.word	0x08010330
 800d58c:	ffff0001 	.word	0xffff0001

0800d590 <_fwalk_reent>:
 800d590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d594:	4680      	mov	r8, r0
 800d596:	4689      	mov	r9, r1
 800d598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d59c:	2600      	movs	r6, #0
 800d59e:	b914      	cbnz	r4, 800d5a6 <_fwalk_reent+0x16>
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d5aa:	3f01      	subs	r7, #1
 800d5ac:	d501      	bpl.n	800d5b2 <_fwalk_reent+0x22>
 800d5ae:	6824      	ldr	r4, [r4, #0]
 800d5b0:	e7f5      	b.n	800d59e <_fwalk_reent+0xe>
 800d5b2:	89ab      	ldrh	r3, [r5, #12]
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d907      	bls.n	800d5c8 <_fwalk_reent+0x38>
 800d5b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	d003      	beq.n	800d5c8 <_fwalk_reent+0x38>
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	4640      	mov	r0, r8
 800d5c4:	47c8      	blx	r9
 800d5c6:	4306      	orrs	r6, r0
 800d5c8:	3568      	adds	r5, #104	; 0x68
 800d5ca:	e7ee      	b.n	800d5aa <_fwalk_reent+0x1a>

0800d5cc <rshift>:
 800d5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ce:	6906      	ldr	r6, [r0, #16]
 800d5d0:	114b      	asrs	r3, r1, #5
 800d5d2:	429e      	cmp	r6, r3
 800d5d4:	f100 0414 	add.w	r4, r0, #20
 800d5d8:	dd30      	ble.n	800d63c <rshift+0x70>
 800d5da:	f011 011f 	ands.w	r1, r1, #31
 800d5de:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d5e2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d5e6:	d108      	bne.n	800d5fa <rshift+0x2e>
 800d5e8:	4621      	mov	r1, r4
 800d5ea:	42b2      	cmp	r2, r6
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	d211      	bcs.n	800d614 <rshift+0x48>
 800d5f0:	f852 3b04 	ldr.w	r3, [r2], #4
 800d5f4:	f841 3b04 	str.w	r3, [r1], #4
 800d5f8:	e7f7      	b.n	800d5ea <rshift+0x1e>
 800d5fa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d5fe:	f1c1 0c20 	rsb	ip, r1, #32
 800d602:	40cd      	lsrs	r5, r1
 800d604:	3204      	adds	r2, #4
 800d606:	4623      	mov	r3, r4
 800d608:	42b2      	cmp	r2, r6
 800d60a:	4617      	mov	r7, r2
 800d60c:	d30c      	bcc.n	800d628 <rshift+0x5c>
 800d60e:	601d      	str	r5, [r3, #0]
 800d610:	b105      	cbz	r5, 800d614 <rshift+0x48>
 800d612:	3304      	adds	r3, #4
 800d614:	1b1a      	subs	r2, r3, r4
 800d616:	42a3      	cmp	r3, r4
 800d618:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d61c:	bf08      	it	eq
 800d61e:	2300      	moveq	r3, #0
 800d620:	6102      	str	r2, [r0, #16]
 800d622:	bf08      	it	eq
 800d624:	6143      	streq	r3, [r0, #20]
 800d626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d628:	683f      	ldr	r7, [r7, #0]
 800d62a:	fa07 f70c 	lsl.w	r7, r7, ip
 800d62e:	433d      	orrs	r5, r7
 800d630:	f843 5b04 	str.w	r5, [r3], #4
 800d634:	f852 5b04 	ldr.w	r5, [r2], #4
 800d638:	40cd      	lsrs	r5, r1
 800d63a:	e7e5      	b.n	800d608 <rshift+0x3c>
 800d63c:	4623      	mov	r3, r4
 800d63e:	e7e9      	b.n	800d614 <rshift+0x48>

0800d640 <__hexdig_fun>:
 800d640:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d644:	2b09      	cmp	r3, #9
 800d646:	d802      	bhi.n	800d64e <__hexdig_fun+0xe>
 800d648:	3820      	subs	r0, #32
 800d64a:	b2c0      	uxtb	r0, r0
 800d64c:	4770      	bx	lr
 800d64e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d652:	2b05      	cmp	r3, #5
 800d654:	d801      	bhi.n	800d65a <__hexdig_fun+0x1a>
 800d656:	3847      	subs	r0, #71	; 0x47
 800d658:	e7f7      	b.n	800d64a <__hexdig_fun+0xa>
 800d65a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d65e:	2b05      	cmp	r3, #5
 800d660:	d801      	bhi.n	800d666 <__hexdig_fun+0x26>
 800d662:	3827      	subs	r0, #39	; 0x27
 800d664:	e7f1      	b.n	800d64a <__hexdig_fun+0xa>
 800d666:	2000      	movs	r0, #0
 800d668:	4770      	bx	lr

0800d66a <__gethex>:
 800d66a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66e:	b08b      	sub	sp, #44	; 0x2c
 800d670:	468a      	mov	sl, r1
 800d672:	9002      	str	r0, [sp, #8]
 800d674:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d676:	9306      	str	r3, [sp, #24]
 800d678:	4690      	mov	r8, r2
 800d67a:	f000 fad0 	bl	800dc1e <__localeconv_l>
 800d67e:	6803      	ldr	r3, [r0, #0]
 800d680:	9303      	str	r3, [sp, #12]
 800d682:	4618      	mov	r0, r3
 800d684:	f7f2 fda4 	bl	80001d0 <strlen>
 800d688:	9b03      	ldr	r3, [sp, #12]
 800d68a:	9001      	str	r0, [sp, #4]
 800d68c:	4403      	add	r3, r0
 800d68e:	f04f 0b00 	mov.w	fp, #0
 800d692:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d696:	9307      	str	r3, [sp, #28]
 800d698:	f8da 3000 	ldr.w	r3, [sl]
 800d69c:	3302      	adds	r3, #2
 800d69e:	461f      	mov	r7, r3
 800d6a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d6a4:	2830      	cmp	r0, #48	; 0x30
 800d6a6:	d06c      	beq.n	800d782 <__gethex+0x118>
 800d6a8:	f7ff ffca 	bl	800d640 <__hexdig_fun>
 800d6ac:	4604      	mov	r4, r0
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d16a      	bne.n	800d788 <__gethex+0x11e>
 800d6b2:	9a01      	ldr	r2, [sp, #4]
 800d6b4:	9903      	ldr	r1, [sp, #12]
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	f001 fadb 	bl	800ec72 <strncmp>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d166      	bne.n	800d78e <__gethex+0x124>
 800d6c0:	9b01      	ldr	r3, [sp, #4]
 800d6c2:	5cf8      	ldrb	r0, [r7, r3]
 800d6c4:	18fe      	adds	r6, r7, r3
 800d6c6:	f7ff ffbb 	bl	800d640 <__hexdig_fun>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d062      	beq.n	800d794 <__gethex+0x12a>
 800d6ce:	4633      	mov	r3, r6
 800d6d0:	7818      	ldrb	r0, [r3, #0]
 800d6d2:	2830      	cmp	r0, #48	; 0x30
 800d6d4:	461f      	mov	r7, r3
 800d6d6:	f103 0301 	add.w	r3, r3, #1
 800d6da:	d0f9      	beq.n	800d6d0 <__gethex+0x66>
 800d6dc:	f7ff ffb0 	bl	800d640 <__hexdig_fun>
 800d6e0:	fab0 f580 	clz	r5, r0
 800d6e4:	096d      	lsrs	r5, r5, #5
 800d6e6:	4634      	mov	r4, r6
 800d6e8:	f04f 0b01 	mov.w	fp, #1
 800d6ec:	463a      	mov	r2, r7
 800d6ee:	4616      	mov	r6, r2
 800d6f0:	3201      	adds	r2, #1
 800d6f2:	7830      	ldrb	r0, [r6, #0]
 800d6f4:	f7ff ffa4 	bl	800d640 <__hexdig_fun>
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	d1f8      	bne.n	800d6ee <__gethex+0x84>
 800d6fc:	9a01      	ldr	r2, [sp, #4]
 800d6fe:	9903      	ldr	r1, [sp, #12]
 800d700:	4630      	mov	r0, r6
 800d702:	f001 fab6 	bl	800ec72 <strncmp>
 800d706:	b950      	cbnz	r0, 800d71e <__gethex+0xb4>
 800d708:	b954      	cbnz	r4, 800d720 <__gethex+0xb6>
 800d70a:	9b01      	ldr	r3, [sp, #4]
 800d70c:	18f4      	adds	r4, r6, r3
 800d70e:	4622      	mov	r2, r4
 800d710:	4616      	mov	r6, r2
 800d712:	3201      	adds	r2, #1
 800d714:	7830      	ldrb	r0, [r6, #0]
 800d716:	f7ff ff93 	bl	800d640 <__hexdig_fun>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	d1f8      	bne.n	800d710 <__gethex+0xa6>
 800d71e:	b10c      	cbz	r4, 800d724 <__gethex+0xba>
 800d720:	1ba4      	subs	r4, r4, r6
 800d722:	00a4      	lsls	r4, r4, #2
 800d724:	7833      	ldrb	r3, [r6, #0]
 800d726:	2b50      	cmp	r3, #80	; 0x50
 800d728:	d001      	beq.n	800d72e <__gethex+0xc4>
 800d72a:	2b70      	cmp	r3, #112	; 0x70
 800d72c:	d140      	bne.n	800d7b0 <__gethex+0x146>
 800d72e:	7873      	ldrb	r3, [r6, #1]
 800d730:	2b2b      	cmp	r3, #43	; 0x2b
 800d732:	d031      	beq.n	800d798 <__gethex+0x12e>
 800d734:	2b2d      	cmp	r3, #45	; 0x2d
 800d736:	d033      	beq.n	800d7a0 <__gethex+0x136>
 800d738:	1c71      	adds	r1, r6, #1
 800d73a:	f04f 0900 	mov.w	r9, #0
 800d73e:	7808      	ldrb	r0, [r1, #0]
 800d740:	f7ff ff7e 	bl	800d640 <__hexdig_fun>
 800d744:	1e43      	subs	r3, r0, #1
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b18      	cmp	r3, #24
 800d74a:	d831      	bhi.n	800d7b0 <__gethex+0x146>
 800d74c:	f1a0 0210 	sub.w	r2, r0, #16
 800d750:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d754:	f7ff ff74 	bl	800d640 <__hexdig_fun>
 800d758:	1e43      	subs	r3, r0, #1
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	2b18      	cmp	r3, #24
 800d75e:	d922      	bls.n	800d7a6 <__gethex+0x13c>
 800d760:	f1b9 0f00 	cmp.w	r9, #0
 800d764:	d000      	beq.n	800d768 <__gethex+0xfe>
 800d766:	4252      	negs	r2, r2
 800d768:	4414      	add	r4, r2
 800d76a:	f8ca 1000 	str.w	r1, [sl]
 800d76e:	b30d      	cbz	r5, 800d7b4 <__gethex+0x14a>
 800d770:	f1bb 0f00 	cmp.w	fp, #0
 800d774:	bf0c      	ite	eq
 800d776:	2706      	moveq	r7, #6
 800d778:	2700      	movne	r7, #0
 800d77a:	4638      	mov	r0, r7
 800d77c:	b00b      	add	sp, #44	; 0x2c
 800d77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d782:	f10b 0b01 	add.w	fp, fp, #1
 800d786:	e78a      	b.n	800d69e <__gethex+0x34>
 800d788:	2500      	movs	r5, #0
 800d78a:	462c      	mov	r4, r5
 800d78c:	e7ae      	b.n	800d6ec <__gethex+0x82>
 800d78e:	463e      	mov	r6, r7
 800d790:	2501      	movs	r5, #1
 800d792:	e7c7      	b.n	800d724 <__gethex+0xba>
 800d794:	4604      	mov	r4, r0
 800d796:	e7fb      	b.n	800d790 <__gethex+0x126>
 800d798:	f04f 0900 	mov.w	r9, #0
 800d79c:	1cb1      	adds	r1, r6, #2
 800d79e:	e7ce      	b.n	800d73e <__gethex+0xd4>
 800d7a0:	f04f 0901 	mov.w	r9, #1
 800d7a4:	e7fa      	b.n	800d79c <__gethex+0x132>
 800d7a6:	230a      	movs	r3, #10
 800d7a8:	fb03 0202 	mla	r2, r3, r2, r0
 800d7ac:	3a10      	subs	r2, #16
 800d7ae:	e7cf      	b.n	800d750 <__gethex+0xe6>
 800d7b0:	4631      	mov	r1, r6
 800d7b2:	e7da      	b.n	800d76a <__gethex+0x100>
 800d7b4:	1bf3      	subs	r3, r6, r7
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	2b07      	cmp	r3, #7
 800d7bc:	dc49      	bgt.n	800d852 <__gethex+0x1e8>
 800d7be:	9802      	ldr	r0, [sp, #8]
 800d7c0:	f000 fabc 	bl	800dd3c <_Balloc>
 800d7c4:	9b01      	ldr	r3, [sp, #4]
 800d7c6:	f100 0914 	add.w	r9, r0, #20
 800d7ca:	f04f 0b00 	mov.w	fp, #0
 800d7ce:	f1c3 0301 	rsb	r3, r3, #1
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	f8cd 9010 	str.w	r9, [sp, #16]
 800d7d8:	46da      	mov	sl, fp
 800d7da:	9308      	str	r3, [sp, #32]
 800d7dc:	42b7      	cmp	r7, r6
 800d7de:	d33b      	bcc.n	800d858 <__gethex+0x1ee>
 800d7e0:	9804      	ldr	r0, [sp, #16]
 800d7e2:	f840 ab04 	str.w	sl, [r0], #4
 800d7e6:	eba0 0009 	sub.w	r0, r0, r9
 800d7ea:	1080      	asrs	r0, r0, #2
 800d7ec:	6128      	str	r0, [r5, #16]
 800d7ee:	0147      	lsls	r7, r0, #5
 800d7f0:	4650      	mov	r0, sl
 800d7f2:	f000 fb67 	bl	800dec4 <__hi0bits>
 800d7f6:	f8d8 6000 	ldr.w	r6, [r8]
 800d7fa:	1a3f      	subs	r7, r7, r0
 800d7fc:	42b7      	cmp	r7, r6
 800d7fe:	dd64      	ble.n	800d8ca <__gethex+0x260>
 800d800:	1bbf      	subs	r7, r7, r6
 800d802:	4639      	mov	r1, r7
 800d804:	4628      	mov	r0, r5
 800d806:	f000 fe77 	bl	800e4f8 <__any_on>
 800d80a:	4682      	mov	sl, r0
 800d80c:	b178      	cbz	r0, 800d82e <__gethex+0x1c4>
 800d80e:	1e7b      	subs	r3, r7, #1
 800d810:	1159      	asrs	r1, r3, #5
 800d812:	f003 021f 	and.w	r2, r3, #31
 800d816:	f04f 0a01 	mov.w	sl, #1
 800d81a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d81e:	fa0a f202 	lsl.w	r2, sl, r2
 800d822:	420a      	tst	r2, r1
 800d824:	d003      	beq.n	800d82e <__gethex+0x1c4>
 800d826:	4553      	cmp	r3, sl
 800d828:	dc46      	bgt.n	800d8b8 <__gethex+0x24e>
 800d82a:	f04f 0a02 	mov.w	sl, #2
 800d82e:	4639      	mov	r1, r7
 800d830:	4628      	mov	r0, r5
 800d832:	f7ff fecb 	bl	800d5cc <rshift>
 800d836:	443c      	add	r4, r7
 800d838:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d83c:	42a3      	cmp	r3, r4
 800d83e:	da52      	bge.n	800d8e6 <__gethex+0x27c>
 800d840:	4629      	mov	r1, r5
 800d842:	9802      	ldr	r0, [sp, #8]
 800d844:	f000 faae 	bl	800dda4 <_Bfree>
 800d848:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d84a:	2300      	movs	r3, #0
 800d84c:	6013      	str	r3, [r2, #0]
 800d84e:	27a3      	movs	r7, #163	; 0xa3
 800d850:	e793      	b.n	800d77a <__gethex+0x110>
 800d852:	3101      	adds	r1, #1
 800d854:	105b      	asrs	r3, r3, #1
 800d856:	e7b0      	b.n	800d7ba <__gethex+0x150>
 800d858:	1e73      	subs	r3, r6, #1
 800d85a:	9305      	str	r3, [sp, #20]
 800d85c:	9a07      	ldr	r2, [sp, #28]
 800d85e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d862:	4293      	cmp	r3, r2
 800d864:	d018      	beq.n	800d898 <__gethex+0x22e>
 800d866:	f1bb 0f20 	cmp.w	fp, #32
 800d86a:	d107      	bne.n	800d87c <__gethex+0x212>
 800d86c:	9b04      	ldr	r3, [sp, #16]
 800d86e:	f8c3 a000 	str.w	sl, [r3]
 800d872:	3304      	adds	r3, #4
 800d874:	f04f 0a00 	mov.w	sl, #0
 800d878:	9304      	str	r3, [sp, #16]
 800d87a:	46d3      	mov	fp, sl
 800d87c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d880:	f7ff fede 	bl	800d640 <__hexdig_fun>
 800d884:	f000 000f 	and.w	r0, r0, #15
 800d888:	fa00 f00b 	lsl.w	r0, r0, fp
 800d88c:	ea4a 0a00 	orr.w	sl, sl, r0
 800d890:	f10b 0b04 	add.w	fp, fp, #4
 800d894:	9b05      	ldr	r3, [sp, #20]
 800d896:	e00d      	b.n	800d8b4 <__gethex+0x24a>
 800d898:	9b05      	ldr	r3, [sp, #20]
 800d89a:	9a08      	ldr	r2, [sp, #32]
 800d89c:	4413      	add	r3, r2
 800d89e:	42bb      	cmp	r3, r7
 800d8a0:	d3e1      	bcc.n	800d866 <__gethex+0x1fc>
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	9a01      	ldr	r2, [sp, #4]
 800d8a6:	9903      	ldr	r1, [sp, #12]
 800d8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8aa:	f001 f9e2 	bl	800ec72 <strncmp>
 800d8ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d1d8      	bne.n	800d866 <__gethex+0x1fc>
 800d8b4:	461e      	mov	r6, r3
 800d8b6:	e791      	b.n	800d7dc <__gethex+0x172>
 800d8b8:	1eb9      	subs	r1, r7, #2
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	f000 fe1c 	bl	800e4f8 <__any_on>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d0b2      	beq.n	800d82a <__gethex+0x1c0>
 800d8c4:	f04f 0a03 	mov.w	sl, #3
 800d8c8:	e7b1      	b.n	800d82e <__gethex+0x1c4>
 800d8ca:	da09      	bge.n	800d8e0 <__gethex+0x276>
 800d8cc:	1bf7      	subs	r7, r6, r7
 800d8ce:	4629      	mov	r1, r5
 800d8d0:	463a      	mov	r2, r7
 800d8d2:	9802      	ldr	r0, [sp, #8]
 800d8d4:	f000 fc32 	bl	800e13c <__lshift>
 800d8d8:	1be4      	subs	r4, r4, r7
 800d8da:	4605      	mov	r5, r0
 800d8dc:	f100 0914 	add.w	r9, r0, #20
 800d8e0:	f04f 0a00 	mov.w	sl, #0
 800d8e4:	e7a8      	b.n	800d838 <__gethex+0x1ce>
 800d8e6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d8ea:	42a0      	cmp	r0, r4
 800d8ec:	dd6a      	ble.n	800d9c4 <__gethex+0x35a>
 800d8ee:	1b04      	subs	r4, r0, r4
 800d8f0:	42a6      	cmp	r6, r4
 800d8f2:	dc2e      	bgt.n	800d952 <__gethex+0x2e8>
 800d8f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d022      	beq.n	800d942 <__gethex+0x2d8>
 800d8fc:	2b03      	cmp	r3, #3
 800d8fe:	d024      	beq.n	800d94a <__gethex+0x2e0>
 800d900:	2b01      	cmp	r3, #1
 800d902:	d115      	bne.n	800d930 <__gethex+0x2c6>
 800d904:	42a6      	cmp	r6, r4
 800d906:	d113      	bne.n	800d930 <__gethex+0x2c6>
 800d908:	2e01      	cmp	r6, #1
 800d90a:	dc0b      	bgt.n	800d924 <__gethex+0x2ba>
 800d90c:	9a06      	ldr	r2, [sp, #24]
 800d90e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d912:	6013      	str	r3, [r2, #0]
 800d914:	2301      	movs	r3, #1
 800d916:	612b      	str	r3, [r5, #16]
 800d918:	f8c9 3000 	str.w	r3, [r9]
 800d91c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d91e:	2762      	movs	r7, #98	; 0x62
 800d920:	601d      	str	r5, [r3, #0]
 800d922:	e72a      	b.n	800d77a <__gethex+0x110>
 800d924:	1e71      	subs	r1, r6, #1
 800d926:	4628      	mov	r0, r5
 800d928:	f000 fde6 	bl	800e4f8 <__any_on>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d1ed      	bne.n	800d90c <__gethex+0x2a2>
 800d930:	4629      	mov	r1, r5
 800d932:	9802      	ldr	r0, [sp, #8]
 800d934:	f000 fa36 	bl	800dda4 <_Bfree>
 800d938:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d93a:	2300      	movs	r3, #0
 800d93c:	6013      	str	r3, [r2, #0]
 800d93e:	2750      	movs	r7, #80	; 0x50
 800d940:	e71b      	b.n	800d77a <__gethex+0x110>
 800d942:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d944:	2b00      	cmp	r3, #0
 800d946:	d0e1      	beq.n	800d90c <__gethex+0x2a2>
 800d948:	e7f2      	b.n	800d930 <__gethex+0x2c6>
 800d94a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1dd      	bne.n	800d90c <__gethex+0x2a2>
 800d950:	e7ee      	b.n	800d930 <__gethex+0x2c6>
 800d952:	1e67      	subs	r7, r4, #1
 800d954:	f1ba 0f00 	cmp.w	sl, #0
 800d958:	d131      	bne.n	800d9be <__gethex+0x354>
 800d95a:	b127      	cbz	r7, 800d966 <__gethex+0x2fc>
 800d95c:	4639      	mov	r1, r7
 800d95e:	4628      	mov	r0, r5
 800d960:	f000 fdca 	bl	800e4f8 <__any_on>
 800d964:	4682      	mov	sl, r0
 800d966:	117a      	asrs	r2, r7, #5
 800d968:	2301      	movs	r3, #1
 800d96a:	f007 071f 	and.w	r7, r7, #31
 800d96e:	fa03 f707 	lsl.w	r7, r3, r7
 800d972:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d976:	4621      	mov	r1, r4
 800d978:	421f      	tst	r7, r3
 800d97a:	4628      	mov	r0, r5
 800d97c:	bf18      	it	ne
 800d97e:	f04a 0a02 	orrne.w	sl, sl, #2
 800d982:	1b36      	subs	r6, r6, r4
 800d984:	f7ff fe22 	bl	800d5cc <rshift>
 800d988:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d98c:	2702      	movs	r7, #2
 800d98e:	f1ba 0f00 	cmp.w	sl, #0
 800d992:	d048      	beq.n	800da26 <__gethex+0x3bc>
 800d994:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d998:	2b02      	cmp	r3, #2
 800d99a:	d015      	beq.n	800d9c8 <__gethex+0x35e>
 800d99c:	2b03      	cmp	r3, #3
 800d99e:	d017      	beq.n	800d9d0 <__gethex+0x366>
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d109      	bne.n	800d9b8 <__gethex+0x34e>
 800d9a4:	f01a 0f02 	tst.w	sl, #2
 800d9a8:	d006      	beq.n	800d9b8 <__gethex+0x34e>
 800d9aa:	f8d9 3000 	ldr.w	r3, [r9]
 800d9ae:	ea4a 0a03 	orr.w	sl, sl, r3
 800d9b2:	f01a 0f01 	tst.w	sl, #1
 800d9b6:	d10e      	bne.n	800d9d6 <__gethex+0x36c>
 800d9b8:	f047 0710 	orr.w	r7, r7, #16
 800d9bc:	e033      	b.n	800da26 <__gethex+0x3bc>
 800d9be:	f04f 0a01 	mov.w	sl, #1
 800d9c2:	e7d0      	b.n	800d966 <__gethex+0x2fc>
 800d9c4:	2701      	movs	r7, #1
 800d9c6:	e7e2      	b.n	800d98e <__gethex+0x324>
 800d9c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9ca:	f1c3 0301 	rsb	r3, r3, #1
 800d9ce:	9315      	str	r3, [sp, #84]	; 0x54
 800d9d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d0f0      	beq.n	800d9b8 <__gethex+0x34e>
 800d9d6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d9da:	f105 0314 	add.w	r3, r5, #20
 800d9de:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d9e2:	eb03 010a 	add.w	r1, r3, sl
 800d9e6:	f04f 0c00 	mov.w	ip, #0
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d9f4:	d01c      	beq.n	800da30 <__gethex+0x3c6>
 800d9f6:	3201      	adds	r2, #1
 800d9f8:	6002      	str	r2, [r0, #0]
 800d9fa:	2f02      	cmp	r7, #2
 800d9fc:	f105 0314 	add.w	r3, r5, #20
 800da00:	d138      	bne.n	800da74 <__gethex+0x40a>
 800da02:	f8d8 2000 	ldr.w	r2, [r8]
 800da06:	3a01      	subs	r2, #1
 800da08:	42b2      	cmp	r2, r6
 800da0a:	d10a      	bne.n	800da22 <__gethex+0x3b8>
 800da0c:	1171      	asrs	r1, r6, #5
 800da0e:	2201      	movs	r2, #1
 800da10:	f006 061f 	and.w	r6, r6, #31
 800da14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da18:	fa02 f606 	lsl.w	r6, r2, r6
 800da1c:	421e      	tst	r6, r3
 800da1e:	bf18      	it	ne
 800da20:	4617      	movne	r7, r2
 800da22:	f047 0720 	orr.w	r7, r7, #32
 800da26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da28:	601d      	str	r5, [r3, #0]
 800da2a:	9b06      	ldr	r3, [sp, #24]
 800da2c:	601c      	str	r4, [r3, #0]
 800da2e:	e6a4      	b.n	800d77a <__gethex+0x110>
 800da30:	4299      	cmp	r1, r3
 800da32:	f843 cc04 	str.w	ip, [r3, #-4]
 800da36:	d8d8      	bhi.n	800d9ea <__gethex+0x380>
 800da38:	68ab      	ldr	r3, [r5, #8]
 800da3a:	4599      	cmp	r9, r3
 800da3c:	db12      	blt.n	800da64 <__gethex+0x3fa>
 800da3e:	6869      	ldr	r1, [r5, #4]
 800da40:	9802      	ldr	r0, [sp, #8]
 800da42:	3101      	adds	r1, #1
 800da44:	f000 f97a 	bl	800dd3c <_Balloc>
 800da48:	692a      	ldr	r2, [r5, #16]
 800da4a:	3202      	adds	r2, #2
 800da4c:	f105 010c 	add.w	r1, r5, #12
 800da50:	4683      	mov	fp, r0
 800da52:	0092      	lsls	r2, r2, #2
 800da54:	300c      	adds	r0, #12
 800da56:	f7fc ff95 	bl	800a984 <memcpy>
 800da5a:	4629      	mov	r1, r5
 800da5c:	9802      	ldr	r0, [sp, #8]
 800da5e:	f000 f9a1 	bl	800dda4 <_Bfree>
 800da62:	465d      	mov	r5, fp
 800da64:	692b      	ldr	r3, [r5, #16]
 800da66:	1c5a      	adds	r2, r3, #1
 800da68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800da6c:	612a      	str	r2, [r5, #16]
 800da6e:	2201      	movs	r2, #1
 800da70:	615a      	str	r2, [r3, #20]
 800da72:	e7c2      	b.n	800d9fa <__gethex+0x390>
 800da74:	692a      	ldr	r2, [r5, #16]
 800da76:	454a      	cmp	r2, r9
 800da78:	dd0b      	ble.n	800da92 <__gethex+0x428>
 800da7a:	2101      	movs	r1, #1
 800da7c:	4628      	mov	r0, r5
 800da7e:	f7ff fda5 	bl	800d5cc <rshift>
 800da82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da86:	3401      	adds	r4, #1
 800da88:	42a3      	cmp	r3, r4
 800da8a:	f6ff aed9 	blt.w	800d840 <__gethex+0x1d6>
 800da8e:	2701      	movs	r7, #1
 800da90:	e7c7      	b.n	800da22 <__gethex+0x3b8>
 800da92:	f016 061f 	ands.w	r6, r6, #31
 800da96:	d0fa      	beq.n	800da8e <__gethex+0x424>
 800da98:	449a      	add	sl, r3
 800da9a:	f1c6 0620 	rsb	r6, r6, #32
 800da9e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800daa2:	f000 fa0f 	bl	800dec4 <__hi0bits>
 800daa6:	42b0      	cmp	r0, r6
 800daa8:	dbe7      	blt.n	800da7a <__gethex+0x410>
 800daaa:	e7f0      	b.n	800da8e <__gethex+0x424>

0800daac <L_shift>:
 800daac:	f1c2 0208 	rsb	r2, r2, #8
 800dab0:	0092      	lsls	r2, r2, #2
 800dab2:	b570      	push	{r4, r5, r6, lr}
 800dab4:	f1c2 0620 	rsb	r6, r2, #32
 800dab8:	6843      	ldr	r3, [r0, #4]
 800daba:	6804      	ldr	r4, [r0, #0]
 800dabc:	fa03 f506 	lsl.w	r5, r3, r6
 800dac0:	432c      	orrs	r4, r5
 800dac2:	40d3      	lsrs	r3, r2
 800dac4:	6004      	str	r4, [r0, #0]
 800dac6:	f840 3f04 	str.w	r3, [r0, #4]!
 800daca:	4288      	cmp	r0, r1
 800dacc:	d3f4      	bcc.n	800dab8 <L_shift+0xc>
 800dace:	bd70      	pop	{r4, r5, r6, pc}

0800dad0 <__match>:
 800dad0:	b530      	push	{r4, r5, lr}
 800dad2:	6803      	ldr	r3, [r0, #0]
 800dad4:	3301      	adds	r3, #1
 800dad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dada:	b914      	cbnz	r4, 800dae2 <__match+0x12>
 800dadc:	6003      	str	r3, [r0, #0]
 800dade:	2001      	movs	r0, #1
 800dae0:	bd30      	pop	{r4, r5, pc}
 800dae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dae6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800daea:	2d19      	cmp	r5, #25
 800daec:	bf98      	it	ls
 800daee:	3220      	addls	r2, #32
 800daf0:	42a2      	cmp	r2, r4
 800daf2:	d0f0      	beq.n	800dad6 <__match+0x6>
 800daf4:	2000      	movs	r0, #0
 800daf6:	e7f3      	b.n	800dae0 <__match+0x10>

0800daf8 <__hexnan>:
 800daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dafc:	680b      	ldr	r3, [r1, #0]
 800dafe:	6801      	ldr	r1, [r0, #0]
 800db00:	115f      	asrs	r7, r3, #5
 800db02:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800db06:	f013 031f 	ands.w	r3, r3, #31
 800db0a:	b087      	sub	sp, #28
 800db0c:	bf18      	it	ne
 800db0e:	3704      	addne	r7, #4
 800db10:	2500      	movs	r5, #0
 800db12:	1f3e      	subs	r6, r7, #4
 800db14:	4682      	mov	sl, r0
 800db16:	4690      	mov	r8, r2
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	f847 5c04 	str.w	r5, [r7, #-4]
 800db1e:	46b1      	mov	r9, r6
 800db20:	4634      	mov	r4, r6
 800db22:	9502      	str	r5, [sp, #8]
 800db24:	46ab      	mov	fp, r5
 800db26:	784a      	ldrb	r2, [r1, #1]
 800db28:	1c4b      	adds	r3, r1, #1
 800db2a:	9303      	str	r3, [sp, #12]
 800db2c:	b342      	cbz	r2, 800db80 <__hexnan+0x88>
 800db2e:	4610      	mov	r0, r2
 800db30:	9105      	str	r1, [sp, #20]
 800db32:	9204      	str	r2, [sp, #16]
 800db34:	f7ff fd84 	bl	800d640 <__hexdig_fun>
 800db38:	2800      	cmp	r0, #0
 800db3a:	d143      	bne.n	800dbc4 <__hexnan+0xcc>
 800db3c:	9a04      	ldr	r2, [sp, #16]
 800db3e:	9905      	ldr	r1, [sp, #20]
 800db40:	2a20      	cmp	r2, #32
 800db42:	d818      	bhi.n	800db76 <__hexnan+0x7e>
 800db44:	9b02      	ldr	r3, [sp, #8]
 800db46:	459b      	cmp	fp, r3
 800db48:	dd13      	ble.n	800db72 <__hexnan+0x7a>
 800db4a:	454c      	cmp	r4, r9
 800db4c:	d206      	bcs.n	800db5c <__hexnan+0x64>
 800db4e:	2d07      	cmp	r5, #7
 800db50:	dc04      	bgt.n	800db5c <__hexnan+0x64>
 800db52:	462a      	mov	r2, r5
 800db54:	4649      	mov	r1, r9
 800db56:	4620      	mov	r0, r4
 800db58:	f7ff ffa8 	bl	800daac <L_shift>
 800db5c:	4544      	cmp	r4, r8
 800db5e:	d944      	bls.n	800dbea <__hexnan+0xf2>
 800db60:	2300      	movs	r3, #0
 800db62:	f1a4 0904 	sub.w	r9, r4, #4
 800db66:	f844 3c04 	str.w	r3, [r4, #-4]
 800db6a:	f8cd b008 	str.w	fp, [sp, #8]
 800db6e:	464c      	mov	r4, r9
 800db70:	461d      	mov	r5, r3
 800db72:	9903      	ldr	r1, [sp, #12]
 800db74:	e7d7      	b.n	800db26 <__hexnan+0x2e>
 800db76:	2a29      	cmp	r2, #41	; 0x29
 800db78:	d14a      	bne.n	800dc10 <__hexnan+0x118>
 800db7a:	3102      	adds	r1, #2
 800db7c:	f8ca 1000 	str.w	r1, [sl]
 800db80:	f1bb 0f00 	cmp.w	fp, #0
 800db84:	d044      	beq.n	800dc10 <__hexnan+0x118>
 800db86:	454c      	cmp	r4, r9
 800db88:	d206      	bcs.n	800db98 <__hexnan+0xa0>
 800db8a:	2d07      	cmp	r5, #7
 800db8c:	dc04      	bgt.n	800db98 <__hexnan+0xa0>
 800db8e:	462a      	mov	r2, r5
 800db90:	4649      	mov	r1, r9
 800db92:	4620      	mov	r0, r4
 800db94:	f7ff ff8a 	bl	800daac <L_shift>
 800db98:	4544      	cmp	r4, r8
 800db9a:	d928      	bls.n	800dbee <__hexnan+0xf6>
 800db9c:	4643      	mov	r3, r8
 800db9e:	f854 2b04 	ldr.w	r2, [r4], #4
 800dba2:	f843 2b04 	str.w	r2, [r3], #4
 800dba6:	42a6      	cmp	r6, r4
 800dba8:	d2f9      	bcs.n	800db9e <__hexnan+0xa6>
 800dbaa:	2200      	movs	r2, #0
 800dbac:	f843 2b04 	str.w	r2, [r3], #4
 800dbb0:	429e      	cmp	r6, r3
 800dbb2:	d2fb      	bcs.n	800dbac <__hexnan+0xb4>
 800dbb4:	6833      	ldr	r3, [r6, #0]
 800dbb6:	b91b      	cbnz	r3, 800dbc0 <__hexnan+0xc8>
 800dbb8:	4546      	cmp	r6, r8
 800dbba:	d127      	bne.n	800dc0c <__hexnan+0x114>
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	6033      	str	r3, [r6, #0]
 800dbc0:	2005      	movs	r0, #5
 800dbc2:	e026      	b.n	800dc12 <__hexnan+0x11a>
 800dbc4:	3501      	adds	r5, #1
 800dbc6:	2d08      	cmp	r5, #8
 800dbc8:	f10b 0b01 	add.w	fp, fp, #1
 800dbcc:	dd06      	ble.n	800dbdc <__hexnan+0xe4>
 800dbce:	4544      	cmp	r4, r8
 800dbd0:	d9cf      	bls.n	800db72 <__hexnan+0x7a>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbd8:	2501      	movs	r5, #1
 800dbda:	3c04      	subs	r4, #4
 800dbdc:	6822      	ldr	r2, [r4, #0]
 800dbde:	f000 000f 	and.w	r0, r0, #15
 800dbe2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dbe6:	6020      	str	r0, [r4, #0]
 800dbe8:	e7c3      	b.n	800db72 <__hexnan+0x7a>
 800dbea:	2508      	movs	r5, #8
 800dbec:	e7c1      	b.n	800db72 <__hexnan+0x7a>
 800dbee:	9b01      	ldr	r3, [sp, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d0df      	beq.n	800dbb4 <__hexnan+0xbc>
 800dbf4:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf8:	f1c3 0320 	rsb	r3, r3, #32
 800dbfc:	fa22 f303 	lsr.w	r3, r2, r3
 800dc00:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800dc04:	401a      	ands	r2, r3
 800dc06:	f847 2c04 	str.w	r2, [r7, #-4]
 800dc0a:	e7d3      	b.n	800dbb4 <__hexnan+0xbc>
 800dc0c:	3e04      	subs	r6, #4
 800dc0e:	e7d1      	b.n	800dbb4 <__hexnan+0xbc>
 800dc10:	2004      	movs	r0, #4
 800dc12:	b007      	add	sp, #28
 800dc14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc18 <__locale_ctype_ptr_l>:
 800dc18:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800dc1c:	4770      	bx	lr

0800dc1e <__localeconv_l>:
 800dc1e:	30f0      	adds	r0, #240	; 0xf0
 800dc20:	4770      	bx	lr
	...

0800dc24 <_localeconv_r>:
 800dc24:	4b04      	ldr	r3, [pc, #16]	; (800dc38 <_localeconv_r+0x14>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	6a18      	ldr	r0, [r3, #32]
 800dc2a:	4b04      	ldr	r3, [pc, #16]	; (800dc3c <_localeconv_r+0x18>)
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	bf08      	it	eq
 800dc30:	4618      	moveq	r0, r3
 800dc32:	30f0      	adds	r0, #240	; 0xf0
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	2000000c 	.word	0x2000000c
 800dc3c:	20000070 	.word	0x20000070

0800dc40 <__swhatbuf_r>:
 800dc40:	b570      	push	{r4, r5, r6, lr}
 800dc42:	460e      	mov	r6, r1
 800dc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc48:	2900      	cmp	r1, #0
 800dc4a:	b096      	sub	sp, #88	; 0x58
 800dc4c:	4614      	mov	r4, r2
 800dc4e:	461d      	mov	r5, r3
 800dc50:	da07      	bge.n	800dc62 <__swhatbuf_r+0x22>
 800dc52:	2300      	movs	r3, #0
 800dc54:	602b      	str	r3, [r5, #0]
 800dc56:	89b3      	ldrh	r3, [r6, #12]
 800dc58:	061a      	lsls	r2, r3, #24
 800dc5a:	d410      	bmi.n	800dc7e <__swhatbuf_r+0x3e>
 800dc5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc60:	e00e      	b.n	800dc80 <__swhatbuf_r+0x40>
 800dc62:	466a      	mov	r2, sp
 800dc64:	f001 f846 	bl	800ecf4 <_fstat_r>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	dbf2      	blt.n	800dc52 <__swhatbuf_r+0x12>
 800dc6c:	9a01      	ldr	r2, [sp, #4]
 800dc6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc76:	425a      	negs	r2, r3
 800dc78:	415a      	adcs	r2, r3
 800dc7a:	602a      	str	r2, [r5, #0]
 800dc7c:	e7ee      	b.n	800dc5c <__swhatbuf_r+0x1c>
 800dc7e:	2340      	movs	r3, #64	; 0x40
 800dc80:	2000      	movs	r0, #0
 800dc82:	6023      	str	r3, [r4, #0]
 800dc84:	b016      	add	sp, #88	; 0x58
 800dc86:	bd70      	pop	{r4, r5, r6, pc}

0800dc88 <__smakebuf_r>:
 800dc88:	898b      	ldrh	r3, [r1, #12]
 800dc8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc8c:	079d      	lsls	r5, r3, #30
 800dc8e:	4606      	mov	r6, r0
 800dc90:	460c      	mov	r4, r1
 800dc92:	d507      	bpl.n	800dca4 <__smakebuf_r+0x1c>
 800dc94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc98:	6023      	str	r3, [r4, #0]
 800dc9a:	6123      	str	r3, [r4, #16]
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	6163      	str	r3, [r4, #20]
 800dca0:	b002      	add	sp, #8
 800dca2:	bd70      	pop	{r4, r5, r6, pc}
 800dca4:	ab01      	add	r3, sp, #4
 800dca6:	466a      	mov	r2, sp
 800dca8:	f7ff ffca 	bl	800dc40 <__swhatbuf_r>
 800dcac:	9900      	ldr	r1, [sp, #0]
 800dcae:	4605      	mov	r5, r0
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	f000 fc9f 	bl	800e5f4 <_malloc_r>
 800dcb6:	b948      	cbnz	r0, 800dccc <__smakebuf_r+0x44>
 800dcb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcbc:	059a      	lsls	r2, r3, #22
 800dcbe:	d4ef      	bmi.n	800dca0 <__smakebuf_r+0x18>
 800dcc0:	f023 0303 	bic.w	r3, r3, #3
 800dcc4:	f043 0302 	orr.w	r3, r3, #2
 800dcc8:	81a3      	strh	r3, [r4, #12]
 800dcca:	e7e3      	b.n	800dc94 <__smakebuf_r+0xc>
 800dccc:	4b0d      	ldr	r3, [pc, #52]	; (800dd04 <__smakebuf_r+0x7c>)
 800dcce:	62b3      	str	r3, [r6, #40]	; 0x28
 800dcd0:	89a3      	ldrh	r3, [r4, #12]
 800dcd2:	6020      	str	r0, [r4, #0]
 800dcd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcd8:	81a3      	strh	r3, [r4, #12]
 800dcda:	9b00      	ldr	r3, [sp, #0]
 800dcdc:	6163      	str	r3, [r4, #20]
 800dcde:	9b01      	ldr	r3, [sp, #4]
 800dce0:	6120      	str	r0, [r4, #16]
 800dce2:	b15b      	cbz	r3, 800dcfc <__smakebuf_r+0x74>
 800dce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dce8:	4630      	mov	r0, r6
 800dcea:	f001 f815 	bl	800ed18 <_isatty_r>
 800dcee:	b128      	cbz	r0, 800dcfc <__smakebuf_r+0x74>
 800dcf0:	89a3      	ldrh	r3, [r4, #12]
 800dcf2:	f023 0303 	bic.w	r3, r3, #3
 800dcf6:	f043 0301 	orr.w	r3, r3, #1
 800dcfa:	81a3      	strh	r3, [r4, #12]
 800dcfc:	89a3      	ldrh	r3, [r4, #12]
 800dcfe:	431d      	orrs	r5, r3
 800dd00:	81a5      	strh	r5, [r4, #12]
 800dd02:	e7cd      	b.n	800dca0 <__smakebuf_r+0x18>
 800dd04:	0800d481 	.word	0x0800d481

0800dd08 <malloc>:
 800dd08:	4b02      	ldr	r3, [pc, #8]	; (800dd14 <malloc+0xc>)
 800dd0a:	4601      	mov	r1, r0
 800dd0c:	6818      	ldr	r0, [r3, #0]
 800dd0e:	f000 bc71 	b.w	800e5f4 <_malloc_r>
 800dd12:	bf00      	nop
 800dd14:	2000000c 	.word	0x2000000c

0800dd18 <__ascii_mbtowc>:
 800dd18:	b082      	sub	sp, #8
 800dd1a:	b901      	cbnz	r1, 800dd1e <__ascii_mbtowc+0x6>
 800dd1c:	a901      	add	r1, sp, #4
 800dd1e:	b142      	cbz	r2, 800dd32 <__ascii_mbtowc+0x1a>
 800dd20:	b14b      	cbz	r3, 800dd36 <__ascii_mbtowc+0x1e>
 800dd22:	7813      	ldrb	r3, [r2, #0]
 800dd24:	600b      	str	r3, [r1, #0]
 800dd26:	7812      	ldrb	r2, [r2, #0]
 800dd28:	1c10      	adds	r0, r2, #0
 800dd2a:	bf18      	it	ne
 800dd2c:	2001      	movne	r0, #1
 800dd2e:	b002      	add	sp, #8
 800dd30:	4770      	bx	lr
 800dd32:	4610      	mov	r0, r2
 800dd34:	e7fb      	b.n	800dd2e <__ascii_mbtowc+0x16>
 800dd36:	f06f 0001 	mvn.w	r0, #1
 800dd3a:	e7f8      	b.n	800dd2e <__ascii_mbtowc+0x16>

0800dd3c <_Balloc>:
 800dd3c:	b570      	push	{r4, r5, r6, lr}
 800dd3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd40:	4604      	mov	r4, r0
 800dd42:	460e      	mov	r6, r1
 800dd44:	b93d      	cbnz	r5, 800dd56 <_Balloc+0x1a>
 800dd46:	2010      	movs	r0, #16
 800dd48:	f7ff ffde 	bl	800dd08 <malloc>
 800dd4c:	6260      	str	r0, [r4, #36]	; 0x24
 800dd4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd52:	6005      	str	r5, [r0, #0]
 800dd54:	60c5      	str	r5, [r0, #12]
 800dd56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dd58:	68eb      	ldr	r3, [r5, #12]
 800dd5a:	b183      	cbz	r3, 800dd7e <_Balloc+0x42>
 800dd5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dd64:	b9b8      	cbnz	r0, 800dd96 <_Balloc+0x5a>
 800dd66:	2101      	movs	r1, #1
 800dd68:	fa01 f506 	lsl.w	r5, r1, r6
 800dd6c:	1d6a      	adds	r2, r5, #5
 800dd6e:	0092      	lsls	r2, r2, #2
 800dd70:	4620      	mov	r0, r4
 800dd72:	f000 fbe2 	bl	800e53a <_calloc_r>
 800dd76:	b160      	cbz	r0, 800dd92 <_Balloc+0x56>
 800dd78:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dd7c:	e00e      	b.n	800dd9c <_Balloc+0x60>
 800dd7e:	2221      	movs	r2, #33	; 0x21
 800dd80:	2104      	movs	r1, #4
 800dd82:	4620      	mov	r0, r4
 800dd84:	f000 fbd9 	bl	800e53a <_calloc_r>
 800dd88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd8a:	60e8      	str	r0, [r5, #12]
 800dd8c:	68db      	ldr	r3, [r3, #12]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1e4      	bne.n	800dd5c <_Balloc+0x20>
 800dd92:	2000      	movs	r0, #0
 800dd94:	bd70      	pop	{r4, r5, r6, pc}
 800dd96:	6802      	ldr	r2, [r0, #0]
 800dd98:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dda2:	e7f7      	b.n	800dd94 <_Balloc+0x58>

0800dda4 <_Bfree>:
 800dda4:	b570      	push	{r4, r5, r6, lr}
 800dda6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dda8:	4606      	mov	r6, r0
 800ddaa:	460d      	mov	r5, r1
 800ddac:	b93c      	cbnz	r4, 800ddbe <_Bfree+0x1a>
 800ddae:	2010      	movs	r0, #16
 800ddb0:	f7ff ffaa 	bl	800dd08 <malloc>
 800ddb4:	6270      	str	r0, [r6, #36]	; 0x24
 800ddb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddba:	6004      	str	r4, [r0, #0]
 800ddbc:	60c4      	str	r4, [r0, #12]
 800ddbe:	b13d      	cbz	r5, 800ddd0 <_Bfree+0x2c>
 800ddc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ddc2:	686a      	ldr	r2, [r5, #4]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ddca:	6029      	str	r1, [r5, #0]
 800ddcc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ddd0:	bd70      	pop	{r4, r5, r6, pc}

0800ddd2 <__multadd>:
 800ddd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd6:	690d      	ldr	r5, [r1, #16]
 800ddd8:	461f      	mov	r7, r3
 800ddda:	4606      	mov	r6, r0
 800dddc:	460c      	mov	r4, r1
 800ddde:	f101 0c14 	add.w	ip, r1, #20
 800dde2:	2300      	movs	r3, #0
 800dde4:	f8dc 0000 	ldr.w	r0, [ip]
 800dde8:	b281      	uxth	r1, r0
 800ddea:	fb02 7101 	mla	r1, r2, r1, r7
 800ddee:	0c0f      	lsrs	r7, r1, #16
 800ddf0:	0c00      	lsrs	r0, r0, #16
 800ddf2:	fb02 7000 	mla	r0, r2, r0, r7
 800ddf6:	b289      	uxth	r1, r1
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ddfe:	429d      	cmp	r5, r3
 800de00:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800de04:	f84c 1b04 	str.w	r1, [ip], #4
 800de08:	dcec      	bgt.n	800dde4 <__multadd+0x12>
 800de0a:	b1d7      	cbz	r7, 800de42 <__multadd+0x70>
 800de0c:	68a3      	ldr	r3, [r4, #8]
 800de0e:	42ab      	cmp	r3, r5
 800de10:	dc12      	bgt.n	800de38 <__multadd+0x66>
 800de12:	6861      	ldr	r1, [r4, #4]
 800de14:	4630      	mov	r0, r6
 800de16:	3101      	adds	r1, #1
 800de18:	f7ff ff90 	bl	800dd3c <_Balloc>
 800de1c:	6922      	ldr	r2, [r4, #16]
 800de1e:	3202      	adds	r2, #2
 800de20:	f104 010c 	add.w	r1, r4, #12
 800de24:	4680      	mov	r8, r0
 800de26:	0092      	lsls	r2, r2, #2
 800de28:	300c      	adds	r0, #12
 800de2a:	f7fc fdab 	bl	800a984 <memcpy>
 800de2e:	4621      	mov	r1, r4
 800de30:	4630      	mov	r0, r6
 800de32:	f7ff ffb7 	bl	800dda4 <_Bfree>
 800de36:	4644      	mov	r4, r8
 800de38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de3c:	3501      	adds	r5, #1
 800de3e:	615f      	str	r7, [r3, #20]
 800de40:	6125      	str	r5, [r4, #16]
 800de42:	4620      	mov	r0, r4
 800de44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de48 <__s2b>:
 800de48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de4c:	460c      	mov	r4, r1
 800de4e:	4615      	mov	r5, r2
 800de50:	461f      	mov	r7, r3
 800de52:	2209      	movs	r2, #9
 800de54:	3308      	adds	r3, #8
 800de56:	4606      	mov	r6, r0
 800de58:	fb93 f3f2 	sdiv	r3, r3, r2
 800de5c:	2100      	movs	r1, #0
 800de5e:	2201      	movs	r2, #1
 800de60:	429a      	cmp	r2, r3
 800de62:	db20      	blt.n	800dea6 <__s2b+0x5e>
 800de64:	4630      	mov	r0, r6
 800de66:	f7ff ff69 	bl	800dd3c <_Balloc>
 800de6a:	9b08      	ldr	r3, [sp, #32]
 800de6c:	6143      	str	r3, [r0, #20]
 800de6e:	2d09      	cmp	r5, #9
 800de70:	f04f 0301 	mov.w	r3, #1
 800de74:	6103      	str	r3, [r0, #16]
 800de76:	dd19      	ble.n	800deac <__s2b+0x64>
 800de78:	f104 0809 	add.w	r8, r4, #9
 800de7c:	46c1      	mov	r9, r8
 800de7e:	442c      	add	r4, r5
 800de80:	f819 3b01 	ldrb.w	r3, [r9], #1
 800de84:	4601      	mov	r1, r0
 800de86:	3b30      	subs	r3, #48	; 0x30
 800de88:	220a      	movs	r2, #10
 800de8a:	4630      	mov	r0, r6
 800de8c:	f7ff ffa1 	bl	800ddd2 <__multadd>
 800de90:	45a1      	cmp	r9, r4
 800de92:	d1f5      	bne.n	800de80 <__s2b+0x38>
 800de94:	eb08 0405 	add.w	r4, r8, r5
 800de98:	3c08      	subs	r4, #8
 800de9a:	1b2d      	subs	r5, r5, r4
 800de9c:	1963      	adds	r3, r4, r5
 800de9e:	42bb      	cmp	r3, r7
 800dea0:	db07      	blt.n	800deb2 <__s2b+0x6a>
 800dea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dea6:	0052      	lsls	r2, r2, #1
 800dea8:	3101      	adds	r1, #1
 800deaa:	e7d9      	b.n	800de60 <__s2b+0x18>
 800deac:	340a      	adds	r4, #10
 800deae:	2509      	movs	r5, #9
 800deb0:	e7f3      	b.n	800de9a <__s2b+0x52>
 800deb2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800deb6:	4601      	mov	r1, r0
 800deb8:	3b30      	subs	r3, #48	; 0x30
 800deba:	220a      	movs	r2, #10
 800debc:	4630      	mov	r0, r6
 800debe:	f7ff ff88 	bl	800ddd2 <__multadd>
 800dec2:	e7eb      	b.n	800de9c <__s2b+0x54>

0800dec4 <__hi0bits>:
 800dec4:	0c02      	lsrs	r2, r0, #16
 800dec6:	0412      	lsls	r2, r2, #16
 800dec8:	4603      	mov	r3, r0
 800deca:	b9b2      	cbnz	r2, 800defa <__hi0bits+0x36>
 800decc:	0403      	lsls	r3, r0, #16
 800dece:	2010      	movs	r0, #16
 800ded0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ded4:	bf04      	itt	eq
 800ded6:	021b      	lsleq	r3, r3, #8
 800ded8:	3008      	addeq	r0, #8
 800deda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dede:	bf04      	itt	eq
 800dee0:	011b      	lsleq	r3, r3, #4
 800dee2:	3004      	addeq	r0, #4
 800dee4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dee8:	bf04      	itt	eq
 800deea:	009b      	lsleq	r3, r3, #2
 800deec:	3002      	addeq	r0, #2
 800deee:	2b00      	cmp	r3, #0
 800def0:	db06      	blt.n	800df00 <__hi0bits+0x3c>
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	d503      	bpl.n	800defe <__hi0bits+0x3a>
 800def6:	3001      	adds	r0, #1
 800def8:	4770      	bx	lr
 800defa:	2000      	movs	r0, #0
 800defc:	e7e8      	b.n	800ded0 <__hi0bits+0xc>
 800defe:	2020      	movs	r0, #32
 800df00:	4770      	bx	lr

0800df02 <__lo0bits>:
 800df02:	6803      	ldr	r3, [r0, #0]
 800df04:	f013 0207 	ands.w	r2, r3, #7
 800df08:	4601      	mov	r1, r0
 800df0a:	d00b      	beq.n	800df24 <__lo0bits+0x22>
 800df0c:	07da      	lsls	r2, r3, #31
 800df0e:	d423      	bmi.n	800df58 <__lo0bits+0x56>
 800df10:	0798      	lsls	r0, r3, #30
 800df12:	bf49      	itett	mi
 800df14:	085b      	lsrmi	r3, r3, #1
 800df16:	089b      	lsrpl	r3, r3, #2
 800df18:	2001      	movmi	r0, #1
 800df1a:	600b      	strmi	r3, [r1, #0]
 800df1c:	bf5c      	itt	pl
 800df1e:	600b      	strpl	r3, [r1, #0]
 800df20:	2002      	movpl	r0, #2
 800df22:	4770      	bx	lr
 800df24:	b298      	uxth	r0, r3
 800df26:	b9a8      	cbnz	r0, 800df54 <__lo0bits+0x52>
 800df28:	0c1b      	lsrs	r3, r3, #16
 800df2a:	2010      	movs	r0, #16
 800df2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df30:	bf04      	itt	eq
 800df32:	0a1b      	lsreq	r3, r3, #8
 800df34:	3008      	addeq	r0, #8
 800df36:	071a      	lsls	r2, r3, #28
 800df38:	bf04      	itt	eq
 800df3a:	091b      	lsreq	r3, r3, #4
 800df3c:	3004      	addeq	r0, #4
 800df3e:	079a      	lsls	r2, r3, #30
 800df40:	bf04      	itt	eq
 800df42:	089b      	lsreq	r3, r3, #2
 800df44:	3002      	addeq	r0, #2
 800df46:	07da      	lsls	r2, r3, #31
 800df48:	d402      	bmi.n	800df50 <__lo0bits+0x4e>
 800df4a:	085b      	lsrs	r3, r3, #1
 800df4c:	d006      	beq.n	800df5c <__lo0bits+0x5a>
 800df4e:	3001      	adds	r0, #1
 800df50:	600b      	str	r3, [r1, #0]
 800df52:	4770      	bx	lr
 800df54:	4610      	mov	r0, r2
 800df56:	e7e9      	b.n	800df2c <__lo0bits+0x2a>
 800df58:	2000      	movs	r0, #0
 800df5a:	4770      	bx	lr
 800df5c:	2020      	movs	r0, #32
 800df5e:	4770      	bx	lr

0800df60 <__i2b>:
 800df60:	b510      	push	{r4, lr}
 800df62:	460c      	mov	r4, r1
 800df64:	2101      	movs	r1, #1
 800df66:	f7ff fee9 	bl	800dd3c <_Balloc>
 800df6a:	2201      	movs	r2, #1
 800df6c:	6144      	str	r4, [r0, #20]
 800df6e:	6102      	str	r2, [r0, #16]
 800df70:	bd10      	pop	{r4, pc}

0800df72 <__multiply>:
 800df72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df76:	4614      	mov	r4, r2
 800df78:	690a      	ldr	r2, [r1, #16]
 800df7a:	6923      	ldr	r3, [r4, #16]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	bfb8      	it	lt
 800df80:	460b      	movlt	r3, r1
 800df82:	4688      	mov	r8, r1
 800df84:	bfbc      	itt	lt
 800df86:	46a0      	movlt	r8, r4
 800df88:	461c      	movlt	r4, r3
 800df8a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800df92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df96:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df9a:	eb07 0609 	add.w	r6, r7, r9
 800df9e:	42b3      	cmp	r3, r6
 800dfa0:	bfb8      	it	lt
 800dfa2:	3101      	addlt	r1, #1
 800dfa4:	f7ff feca 	bl	800dd3c <_Balloc>
 800dfa8:	f100 0514 	add.w	r5, r0, #20
 800dfac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dfb0:	462b      	mov	r3, r5
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	4573      	cmp	r3, lr
 800dfb6:	d316      	bcc.n	800dfe6 <__multiply+0x74>
 800dfb8:	f104 0214 	add.w	r2, r4, #20
 800dfbc:	f108 0114 	add.w	r1, r8, #20
 800dfc0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dfc4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	9b00      	ldr	r3, [sp, #0]
 800dfcc:	9201      	str	r2, [sp, #4]
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d80c      	bhi.n	800dfec <__multiply+0x7a>
 800dfd2:	2e00      	cmp	r6, #0
 800dfd4:	dd03      	ble.n	800dfde <__multiply+0x6c>
 800dfd6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d05d      	beq.n	800e09a <__multiply+0x128>
 800dfde:	6106      	str	r6, [r0, #16]
 800dfe0:	b003      	add	sp, #12
 800dfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfe6:	f843 2b04 	str.w	r2, [r3], #4
 800dfea:	e7e3      	b.n	800dfb4 <__multiply+0x42>
 800dfec:	f8b2 b000 	ldrh.w	fp, [r2]
 800dff0:	f1bb 0f00 	cmp.w	fp, #0
 800dff4:	d023      	beq.n	800e03e <__multiply+0xcc>
 800dff6:	4689      	mov	r9, r1
 800dff8:	46ac      	mov	ip, r5
 800dffa:	f04f 0800 	mov.w	r8, #0
 800dffe:	f859 4b04 	ldr.w	r4, [r9], #4
 800e002:	f8dc a000 	ldr.w	sl, [ip]
 800e006:	b2a3      	uxth	r3, r4
 800e008:	fa1f fa8a 	uxth.w	sl, sl
 800e00c:	fb0b a303 	mla	r3, fp, r3, sl
 800e010:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e014:	f8dc 4000 	ldr.w	r4, [ip]
 800e018:	4443      	add	r3, r8
 800e01a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e01e:	fb0b 840a 	mla	r4, fp, sl, r8
 800e022:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e026:	46e2      	mov	sl, ip
 800e028:	b29b      	uxth	r3, r3
 800e02a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e02e:	454f      	cmp	r7, r9
 800e030:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e034:	f84a 3b04 	str.w	r3, [sl], #4
 800e038:	d82b      	bhi.n	800e092 <__multiply+0x120>
 800e03a:	f8cc 8004 	str.w	r8, [ip, #4]
 800e03e:	9b01      	ldr	r3, [sp, #4]
 800e040:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e044:	3204      	adds	r2, #4
 800e046:	f1ba 0f00 	cmp.w	sl, #0
 800e04a:	d020      	beq.n	800e08e <__multiply+0x11c>
 800e04c:	682b      	ldr	r3, [r5, #0]
 800e04e:	4689      	mov	r9, r1
 800e050:	46a8      	mov	r8, r5
 800e052:	f04f 0b00 	mov.w	fp, #0
 800e056:	f8b9 c000 	ldrh.w	ip, [r9]
 800e05a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e05e:	fb0a 440c 	mla	r4, sl, ip, r4
 800e062:	445c      	add	r4, fp
 800e064:	46c4      	mov	ip, r8
 800e066:	b29b      	uxth	r3, r3
 800e068:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e06c:	f84c 3b04 	str.w	r3, [ip], #4
 800e070:	f859 3b04 	ldr.w	r3, [r9], #4
 800e074:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e078:	0c1b      	lsrs	r3, r3, #16
 800e07a:	fb0a b303 	mla	r3, sl, r3, fp
 800e07e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e082:	454f      	cmp	r7, r9
 800e084:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e088:	d805      	bhi.n	800e096 <__multiply+0x124>
 800e08a:	f8c8 3004 	str.w	r3, [r8, #4]
 800e08e:	3504      	adds	r5, #4
 800e090:	e79b      	b.n	800dfca <__multiply+0x58>
 800e092:	46d4      	mov	ip, sl
 800e094:	e7b3      	b.n	800dffe <__multiply+0x8c>
 800e096:	46e0      	mov	r8, ip
 800e098:	e7dd      	b.n	800e056 <__multiply+0xe4>
 800e09a:	3e01      	subs	r6, #1
 800e09c:	e799      	b.n	800dfd2 <__multiply+0x60>
	...

0800e0a0 <__pow5mult>:
 800e0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0a4:	4615      	mov	r5, r2
 800e0a6:	f012 0203 	ands.w	r2, r2, #3
 800e0aa:	4606      	mov	r6, r0
 800e0ac:	460f      	mov	r7, r1
 800e0ae:	d007      	beq.n	800e0c0 <__pow5mult+0x20>
 800e0b0:	3a01      	subs	r2, #1
 800e0b2:	4c21      	ldr	r4, [pc, #132]	; (800e138 <__pow5mult+0x98>)
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0ba:	f7ff fe8a 	bl	800ddd2 <__multadd>
 800e0be:	4607      	mov	r7, r0
 800e0c0:	10ad      	asrs	r5, r5, #2
 800e0c2:	d035      	beq.n	800e130 <__pow5mult+0x90>
 800e0c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e0c6:	b93c      	cbnz	r4, 800e0d8 <__pow5mult+0x38>
 800e0c8:	2010      	movs	r0, #16
 800e0ca:	f7ff fe1d 	bl	800dd08 <malloc>
 800e0ce:	6270      	str	r0, [r6, #36]	; 0x24
 800e0d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e0d4:	6004      	str	r4, [r0, #0]
 800e0d6:	60c4      	str	r4, [r0, #12]
 800e0d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e0dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e0e0:	b94c      	cbnz	r4, 800e0f6 <__pow5mult+0x56>
 800e0e2:	f240 2171 	movw	r1, #625	; 0x271
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	f7ff ff3a 	bl	800df60 <__i2b>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	6003      	str	r3, [r0, #0]
 800e0f6:	f04f 0800 	mov.w	r8, #0
 800e0fa:	07eb      	lsls	r3, r5, #31
 800e0fc:	d50a      	bpl.n	800e114 <__pow5mult+0x74>
 800e0fe:	4639      	mov	r1, r7
 800e100:	4622      	mov	r2, r4
 800e102:	4630      	mov	r0, r6
 800e104:	f7ff ff35 	bl	800df72 <__multiply>
 800e108:	4639      	mov	r1, r7
 800e10a:	4681      	mov	r9, r0
 800e10c:	4630      	mov	r0, r6
 800e10e:	f7ff fe49 	bl	800dda4 <_Bfree>
 800e112:	464f      	mov	r7, r9
 800e114:	106d      	asrs	r5, r5, #1
 800e116:	d00b      	beq.n	800e130 <__pow5mult+0x90>
 800e118:	6820      	ldr	r0, [r4, #0]
 800e11a:	b938      	cbnz	r0, 800e12c <__pow5mult+0x8c>
 800e11c:	4622      	mov	r2, r4
 800e11e:	4621      	mov	r1, r4
 800e120:	4630      	mov	r0, r6
 800e122:	f7ff ff26 	bl	800df72 <__multiply>
 800e126:	6020      	str	r0, [r4, #0]
 800e128:	f8c0 8000 	str.w	r8, [r0]
 800e12c:	4604      	mov	r4, r0
 800e12e:	e7e4      	b.n	800e0fa <__pow5mult+0x5a>
 800e130:	4638      	mov	r0, r7
 800e132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e136:	bf00      	nop
 800e138:	08010530 	.word	0x08010530

0800e13c <__lshift>:
 800e13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e140:	460c      	mov	r4, r1
 800e142:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e146:	6923      	ldr	r3, [r4, #16]
 800e148:	6849      	ldr	r1, [r1, #4]
 800e14a:	eb0a 0903 	add.w	r9, sl, r3
 800e14e:	68a3      	ldr	r3, [r4, #8]
 800e150:	4607      	mov	r7, r0
 800e152:	4616      	mov	r6, r2
 800e154:	f109 0501 	add.w	r5, r9, #1
 800e158:	42ab      	cmp	r3, r5
 800e15a:	db32      	blt.n	800e1c2 <__lshift+0x86>
 800e15c:	4638      	mov	r0, r7
 800e15e:	f7ff fded 	bl	800dd3c <_Balloc>
 800e162:	2300      	movs	r3, #0
 800e164:	4680      	mov	r8, r0
 800e166:	f100 0114 	add.w	r1, r0, #20
 800e16a:	461a      	mov	r2, r3
 800e16c:	4553      	cmp	r3, sl
 800e16e:	db2b      	blt.n	800e1c8 <__lshift+0x8c>
 800e170:	6920      	ldr	r0, [r4, #16]
 800e172:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e176:	f104 0314 	add.w	r3, r4, #20
 800e17a:	f016 021f 	ands.w	r2, r6, #31
 800e17e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e182:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e186:	d025      	beq.n	800e1d4 <__lshift+0x98>
 800e188:	f1c2 0e20 	rsb	lr, r2, #32
 800e18c:	2000      	movs	r0, #0
 800e18e:	681e      	ldr	r6, [r3, #0]
 800e190:	468a      	mov	sl, r1
 800e192:	4096      	lsls	r6, r2
 800e194:	4330      	orrs	r0, r6
 800e196:	f84a 0b04 	str.w	r0, [sl], #4
 800e19a:	f853 0b04 	ldr.w	r0, [r3], #4
 800e19e:	459c      	cmp	ip, r3
 800e1a0:	fa20 f00e 	lsr.w	r0, r0, lr
 800e1a4:	d814      	bhi.n	800e1d0 <__lshift+0x94>
 800e1a6:	6048      	str	r0, [r1, #4]
 800e1a8:	b108      	cbz	r0, 800e1ae <__lshift+0x72>
 800e1aa:	f109 0502 	add.w	r5, r9, #2
 800e1ae:	3d01      	subs	r5, #1
 800e1b0:	4638      	mov	r0, r7
 800e1b2:	f8c8 5010 	str.w	r5, [r8, #16]
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	f7ff fdf4 	bl	800dda4 <_Bfree>
 800e1bc:	4640      	mov	r0, r8
 800e1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1c2:	3101      	adds	r1, #1
 800e1c4:	005b      	lsls	r3, r3, #1
 800e1c6:	e7c7      	b.n	800e158 <__lshift+0x1c>
 800e1c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	e7cd      	b.n	800e16c <__lshift+0x30>
 800e1d0:	4651      	mov	r1, sl
 800e1d2:	e7dc      	b.n	800e18e <__lshift+0x52>
 800e1d4:	3904      	subs	r1, #4
 800e1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1da:	f841 2f04 	str.w	r2, [r1, #4]!
 800e1de:	459c      	cmp	ip, r3
 800e1e0:	d8f9      	bhi.n	800e1d6 <__lshift+0x9a>
 800e1e2:	e7e4      	b.n	800e1ae <__lshift+0x72>

0800e1e4 <__mcmp>:
 800e1e4:	6903      	ldr	r3, [r0, #16]
 800e1e6:	690a      	ldr	r2, [r1, #16]
 800e1e8:	1a9b      	subs	r3, r3, r2
 800e1ea:	b530      	push	{r4, r5, lr}
 800e1ec:	d10c      	bne.n	800e208 <__mcmp+0x24>
 800e1ee:	0092      	lsls	r2, r2, #2
 800e1f0:	3014      	adds	r0, #20
 800e1f2:	3114      	adds	r1, #20
 800e1f4:	1884      	adds	r4, r0, r2
 800e1f6:	4411      	add	r1, r2
 800e1f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e1fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e200:	4295      	cmp	r5, r2
 800e202:	d003      	beq.n	800e20c <__mcmp+0x28>
 800e204:	d305      	bcc.n	800e212 <__mcmp+0x2e>
 800e206:	2301      	movs	r3, #1
 800e208:	4618      	mov	r0, r3
 800e20a:	bd30      	pop	{r4, r5, pc}
 800e20c:	42a0      	cmp	r0, r4
 800e20e:	d3f3      	bcc.n	800e1f8 <__mcmp+0x14>
 800e210:	e7fa      	b.n	800e208 <__mcmp+0x24>
 800e212:	f04f 33ff 	mov.w	r3, #4294967295
 800e216:	e7f7      	b.n	800e208 <__mcmp+0x24>

0800e218 <__mdiff>:
 800e218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e21c:	460d      	mov	r5, r1
 800e21e:	4607      	mov	r7, r0
 800e220:	4611      	mov	r1, r2
 800e222:	4628      	mov	r0, r5
 800e224:	4614      	mov	r4, r2
 800e226:	f7ff ffdd 	bl	800e1e4 <__mcmp>
 800e22a:	1e06      	subs	r6, r0, #0
 800e22c:	d108      	bne.n	800e240 <__mdiff+0x28>
 800e22e:	4631      	mov	r1, r6
 800e230:	4638      	mov	r0, r7
 800e232:	f7ff fd83 	bl	800dd3c <_Balloc>
 800e236:	2301      	movs	r3, #1
 800e238:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e240:	bfa4      	itt	ge
 800e242:	4623      	movge	r3, r4
 800e244:	462c      	movge	r4, r5
 800e246:	4638      	mov	r0, r7
 800e248:	6861      	ldr	r1, [r4, #4]
 800e24a:	bfa6      	itte	ge
 800e24c:	461d      	movge	r5, r3
 800e24e:	2600      	movge	r6, #0
 800e250:	2601      	movlt	r6, #1
 800e252:	f7ff fd73 	bl	800dd3c <_Balloc>
 800e256:	692b      	ldr	r3, [r5, #16]
 800e258:	60c6      	str	r6, [r0, #12]
 800e25a:	6926      	ldr	r6, [r4, #16]
 800e25c:	f105 0914 	add.w	r9, r5, #20
 800e260:	f104 0214 	add.w	r2, r4, #20
 800e264:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e268:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e26c:	f100 0514 	add.w	r5, r0, #20
 800e270:	f04f 0e00 	mov.w	lr, #0
 800e274:	f852 ab04 	ldr.w	sl, [r2], #4
 800e278:	f859 4b04 	ldr.w	r4, [r9], #4
 800e27c:	fa1e f18a 	uxtah	r1, lr, sl
 800e280:	b2a3      	uxth	r3, r4
 800e282:	1ac9      	subs	r1, r1, r3
 800e284:	0c23      	lsrs	r3, r4, #16
 800e286:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e28a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e28e:	b289      	uxth	r1, r1
 800e290:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e294:	45c8      	cmp	r8, r9
 800e296:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e29a:	4694      	mov	ip, r2
 800e29c:	f845 3b04 	str.w	r3, [r5], #4
 800e2a0:	d8e8      	bhi.n	800e274 <__mdiff+0x5c>
 800e2a2:	45bc      	cmp	ip, r7
 800e2a4:	d304      	bcc.n	800e2b0 <__mdiff+0x98>
 800e2a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e2aa:	b183      	cbz	r3, 800e2ce <__mdiff+0xb6>
 800e2ac:	6106      	str	r6, [r0, #16]
 800e2ae:	e7c5      	b.n	800e23c <__mdiff+0x24>
 800e2b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e2b4:	fa1e f381 	uxtah	r3, lr, r1
 800e2b8:	141a      	asrs	r2, r3, #16
 800e2ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e2c8:	f845 3b04 	str.w	r3, [r5], #4
 800e2cc:	e7e9      	b.n	800e2a2 <__mdiff+0x8a>
 800e2ce:	3e01      	subs	r6, #1
 800e2d0:	e7e9      	b.n	800e2a6 <__mdiff+0x8e>
	...

0800e2d4 <__ulp>:
 800e2d4:	4b12      	ldr	r3, [pc, #72]	; (800e320 <__ulp+0x4c>)
 800e2d6:	ee10 2a90 	vmov	r2, s1
 800e2da:	401a      	ands	r2, r3
 800e2dc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	dd04      	ble.n	800e2ee <__ulp+0x1a>
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	ec41 0b10 	vmov	d0, r0, r1
 800e2ec:	4770      	bx	lr
 800e2ee:	425b      	negs	r3, r3
 800e2f0:	151b      	asrs	r3, r3, #20
 800e2f2:	2b13      	cmp	r3, #19
 800e2f4:	f04f 0000 	mov.w	r0, #0
 800e2f8:	f04f 0100 	mov.w	r1, #0
 800e2fc:	dc04      	bgt.n	800e308 <__ulp+0x34>
 800e2fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e302:	fa42 f103 	asr.w	r1, r2, r3
 800e306:	e7ef      	b.n	800e2e8 <__ulp+0x14>
 800e308:	3b14      	subs	r3, #20
 800e30a:	2b1e      	cmp	r3, #30
 800e30c:	f04f 0201 	mov.w	r2, #1
 800e310:	bfda      	itte	le
 800e312:	f1c3 031f 	rsble	r3, r3, #31
 800e316:	fa02 f303 	lslle.w	r3, r2, r3
 800e31a:	4613      	movgt	r3, r2
 800e31c:	4618      	mov	r0, r3
 800e31e:	e7e3      	b.n	800e2e8 <__ulp+0x14>
 800e320:	7ff00000 	.word	0x7ff00000

0800e324 <__b2d>:
 800e324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e326:	6905      	ldr	r5, [r0, #16]
 800e328:	f100 0714 	add.w	r7, r0, #20
 800e32c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e330:	1f2e      	subs	r6, r5, #4
 800e332:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e336:	4620      	mov	r0, r4
 800e338:	f7ff fdc4 	bl	800dec4 <__hi0bits>
 800e33c:	f1c0 0320 	rsb	r3, r0, #32
 800e340:	280a      	cmp	r0, #10
 800e342:	600b      	str	r3, [r1, #0]
 800e344:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e3bc <__b2d+0x98>
 800e348:	dc14      	bgt.n	800e374 <__b2d+0x50>
 800e34a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e34e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e352:	42b7      	cmp	r7, r6
 800e354:	ea41 030c 	orr.w	r3, r1, ip
 800e358:	bf34      	ite	cc
 800e35a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e35e:	2100      	movcs	r1, #0
 800e360:	3015      	adds	r0, #21
 800e362:	fa04 f000 	lsl.w	r0, r4, r0
 800e366:	fa21 f10e 	lsr.w	r1, r1, lr
 800e36a:	ea40 0201 	orr.w	r2, r0, r1
 800e36e:	ec43 2b10 	vmov	d0, r2, r3
 800e372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e374:	42b7      	cmp	r7, r6
 800e376:	bf3a      	itte	cc
 800e378:	f1a5 0608 	subcc.w	r6, r5, #8
 800e37c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e380:	2100      	movcs	r1, #0
 800e382:	380b      	subs	r0, #11
 800e384:	d015      	beq.n	800e3b2 <__b2d+0x8e>
 800e386:	4084      	lsls	r4, r0
 800e388:	f1c0 0520 	rsb	r5, r0, #32
 800e38c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e390:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e394:	42be      	cmp	r6, r7
 800e396:	fa21 fc05 	lsr.w	ip, r1, r5
 800e39a:	ea44 030c 	orr.w	r3, r4, ip
 800e39e:	bf8c      	ite	hi
 800e3a0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e3a4:	2400      	movls	r4, #0
 800e3a6:	fa01 f000 	lsl.w	r0, r1, r0
 800e3aa:	40ec      	lsrs	r4, r5
 800e3ac:	ea40 0204 	orr.w	r2, r0, r4
 800e3b0:	e7dd      	b.n	800e36e <__b2d+0x4a>
 800e3b2:	ea44 030c 	orr.w	r3, r4, ip
 800e3b6:	460a      	mov	r2, r1
 800e3b8:	e7d9      	b.n	800e36e <__b2d+0x4a>
 800e3ba:	bf00      	nop
 800e3bc:	3ff00000 	.word	0x3ff00000

0800e3c0 <__d2b>:
 800e3c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e3c4:	460e      	mov	r6, r1
 800e3c6:	2101      	movs	r1, #1
 800e3c8:	ec59 8b10 	vmov	r8, r9, d0
 800e3cc:	4615      	mov	r5, r2
 800e3ce:	f7ff fcb5 	bl	800dd3c <_Balloc>
 800e3d2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e3d6:	4607      	mov	r7, r0
 800e3d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3dc:	bb34      	cbnz	r4, 800e42c <__d2b+0x6c>
 800e3de:	9301      	str	r3, [sp, #4]
 800e3e0:	f1b8 0300 	subs.w	r3, r8, #0
 800e3e4:	d027      	beq.n	800e436 <__d2b+0x76>
 800e3e6:	a802      	add	r0, sp, #8
 800e3e8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e3ec:	f7ff fd89 	bl	800df02 <__lo0bits>
 800e3f0:	9900      	ldr	r1, [sp, #0]
 800e3f2:	b1f0      	cbz	r0, 800e432 <__d2b+0x72>
 800e3f4:	9a01      	ldr	r2, [sp, #4]
 800e3f6:	f1c0 0320 	rsb	r3, r0, #32
 800e3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800e3fe:	430b      	orrs	r3, r1
 800e400:	40c2      	lsrs	r2, r0
 800e402:	617b      	str	r3, [r7, #20]
 800e404:	9201      	str	r2, [sp, #4]
 800e406:	9b01      	ldr	r3, [sp, #4]
 800e408:	61bb      	str	r3, [r7, #24]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	bf14      	ite	ne
 800e40e:	2102      	movne	r1, #2
 800e410:	2101      	moveq	r1, #1
 800e412:	6139      	str	r1, [r7, #16]
 800e414:	b1c4      	cbz	r4, 800e448 <__d2b+0x88>
 800e416:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e41a:	4404      	add	r4, r0
 800e41c:	6034      	str	r4, [r6, #0]
 800e41e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e422:	6028      	str	r0, [r5, #0]
 800e424:	4638      	mov	r0, r7
 800e426:	b003      	add	sp, #12
 800e428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e42c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e430:	e7d5      	b.n	800e3de <__d2b+0x1e>
 800e432:	6179      	str	r1, [r7, #20]
 800e434:	e7e7      	b.n	800e406 <__d2b+0x46>
 800e436:	a801      	add	r0, sp, #4
 800e438:	f7ff fd63 	bl	800df02 <__lo0bits>
 800e43c:	9b01      	ldr	r3, [sp, #4]
 800e43e:	617b      	str	r3, [r7, #20]
 800e440:	2101      	movs	r1, #1
 800e442:	6139      	str	r1, [r7, #16]
 800e444:	3020      	adds	r0, #32
 800e446:	e7e5      	b.n	800e414 <__d2b+0x54>
 800e448:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e44c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e450:	6030      	str	r0, [r6, #0]
 800e452:	6918      	ldr	r0, [r3, #16]
 800e454:	f7ff fd36 	bl	800dec4 <__hi0bits>
 800e458:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e45c:	e7e1      	b.n	800e422 <__d2b+0x62>

0800e45e <__ratio>:
 800e45e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e462:	4688      	mov	r8, r1
 800e464:	4669      	mov	r1, sp
 800e466:	4681      	mov	r9, r0
 800e468:	f7ff ff5c 	bl	800e324 <__b2d>
 800e46c:	a901      	add	r1, sp, #4
 800e46e:	4640      	mov	r0, r8
 800e470:	ec57 6b10 	vmov	r6, r7, d0
 800e474:	f7ff ff56 	bl	800e324 <__b2d>
 800e478:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e47c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e480:	eba3 0c02 	sub.w	ip, r3, r2
 800e484:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e488:	1a9b      	subs	r3, r3, r2
 800e48a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e48e:	ec5b ab10 	vmov	sl, fp, d0
 800e492:	2b00      	cmp	r3, #0
 800e494:	bfce      	itee	gt
 800e496:	463a      	movgt	r2, r7
 800e498:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e49c:	465a      	movle	r2, fp
 800e49e:	4659      	mov	r1, fp
 800e4a0:	463d      	mov	r5, r7
 800e4a2:	bfd4      	ite	le
 800e4a4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e4a8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	ee10 2a10 	vmov	r2, s0
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	f7f2 f9c9 	bl	800084c <__aeabi_ddiv>
 800e4ba:	ec41 0b10 	vmov	d0, r0, r1
 800e4be:	b003      	add	sp, #12
 800e4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e4c4 <__copybits>:
 800e4c4:	3901      	subs	r1, #1
 800e4c6:	b510      	push	{r4, lr}
 800e4c8:	1149      	asrs	r1, r1, #5
 800e4ca:	6914      	ldr	r4, [r2, #16]
 800e4cc:	3101      	adds	r1, #1
 800e4ce:	f102 0314 	add.w	r3, r2, #20
 800e4d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e4d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e4da:	42a3      	cmp	r3, r4
 800e4dc:	4602      	mov	r2, r0
 800e4de:	d303      	bcc.n	800e4e8 <__copybits+0x24>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	428a      	cmp	r2, r1
 800e4e4:	d305      	bcc.n	800e4f2 <__copybits+0x2e>
 800e4e6:	bd10      	pop	{r4, pc}
 800e4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4ec:	f840 2b04 	str.w	r2, [r0], #4
 800e4f0:	e7f3      	b.n	800e4da <__copybits+0x16>
 800e4f2:	f842 3b04 	str.w	r3, [r2], #4
 800e4f6:	e7f4      	b.n	800e4e2 <__copybits+0x1e>

0800e4f8 <__any_on>:
 800e4f8:	f100 0214 	add.w	r2, r0, #20
 800e4fc:	6900      	ldr	r0, [r0, #16]
 800e4fe:	114b      	asrs	r3, r1, #5
 800e500:	4298      	cmp	r0, r3
 800e502:	b510      	push	{r4, lr}
 800e504:	db11      	blt.n	800e52a <__any_on+0x32>
 800e506:	dd0a      	ble.n	800e51e <__any_on+0x26>
 800e508:	f011 011f 	ands.w	r1, r1, #31
 800e50c:	d007      	beq.n	800e51e <__any_on+0x26>
 800e50e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e512:	fa24 f001 	lsr.w	r0, r4, r1
 800e516:	fa00 f101 	lsl.w	r1, r0, r1
 800e51a:	428c      	cmp	r4, r1
 800e51c:	d10b      	bne.n	800e536 <__any_on+0x3e>
 800e51e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e522:	4293      	cmp	r3, r2
 800e524:	d803      	bhi.n	800e52e <__any_on+0x36>
 800e526:	2000      	movs	r0, #0
 800e528:	bd10      	pop	{r4, pc}
 800e52a:	4603      	mov	r3, r0
 800e52c:	e7f7      	b.n	800e51e <__any_on+0x26>
 800e52e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e532:	2900      	cmp	r1, #0
 800e534:	d0f5      	beq.n	800e522 <__any_on+0x2a>
 800e536:	2001      	movs	r0, #1
 800e538:	e7f6      	b.n	800e528 <__any_on+0x30>

0800e53a <_calloc_r>:
 800e53a:	b538      	push	{r3, r4, r5, lr}
 800e53c:	fb02 f401 	mul.w	r4, r2, r1
 800e540:	4621      	mov	r1, r4
 800e542:	f000 f857 	bl	800e5f4 <_malloc_r>
 800e546:	4605      	mov	r5, r0
 800e548:	b118      	cbz	r0, 800e552 <_calloc_r+0x18>
 800e54a:	4622      	mov	r2, r4
 800e54c:	2100      	movs	r1, #0
 800e54e:	f7fc fa24 	bl	800a99a <memset>
 800e552:	4628      	mov	r0, r5
 800e554:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e558 <_free_r>:
 800e558:	b538      	push	{r3, r4, r5, lr}
 800e55a:	4605      	mov	r5, r0
 800e55c:	2900      	cmp	r1, #0
 800e55e:	d045      	beq.n	800e5ec <_free_r+0x94>
 800e560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e564:	1f0c      	subs	r4, r1, #4
 800e566:	2b00      	cmp	r3, #0
 800e568:	bfb8      	it	lt
 800e56a:	18e4      	addlt	r4, r4, r3
 800e56c:	f000 fc0f 	bl	800ed8e <__malloc_lock>
 800e570:	4a1f      	ldr	r2, [pc, #124]	; (800e5f0 <_free_r+0x98>)
 800e572:	6813      	ldr	r3, [r2, #0]
 800e574:	4610      	mov	r0, r2
 800e576:	b933      	cbnz	r3, 800e586 <_free_r+0x2e>
 800e578:	6063      	str	r3, [r4, #4]
 800e57a:	6014      	str	r4, [r2, #0]
 800e57c:	4628      	mov	r0, r5
 800e57e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e582:	f000 bc05 	b.w	800ed90 <__malloc_unlock>
 800e586:	42a3      	cmp	r3, r4
 800e588:	d90c      	bls.n	800e5a4 <_free_r+0x4c>
 800e58a:	6821      	ldr	r1, [r4, #0]
 800e58c:	1862      	adds	r2, r4, r1
 800e58e:	4293      	cmp	r3, r2
 800e590:	bf04      	itt	eq
 800e592:	681a      	ldreq	r2, [r3, #0]
 800e594:	685b      	ldreq	r3, [r3, #4]
 800e596:	6063      	str	r3, [r4, #4]
 800e598:	bf04      	itt	eq
 800e59a:	1852      	addeq	r2, r2, r1
 800e59c:	6022      	streq	r2, [r4, #0]
 800e59e:	6004      	str	r4, [r0, #0]
 800e5a0:	e7ec      	b.n	800e57c <_free_r+0x24>
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	685a      	ldr	r2, [r3, #4]
 800e5a6:	b10a      	cbz	r2, 800e5ac <_free_r+0x54>
 800e5a8:	42a2      	cmp	r2, r4
 800e5aa:	d9fa      	bls.n	800e5a2 <_free_r+0x4a>
 800e5ac:	6819      	ldr	r1, [r3, #0]
 800e5ae:	1858      	adds	r0, r3, r1
 800e5b0:	42a0      	cmp	r0, r4
 800e5b2:	d10b      	bne.n	800e5cc <_free_r+0x74>
 800e5b4:	6820      	ldr	r0, [r4, #0]
 800e5b6:	4401      	add	r1, r0
 800e5b8:	1858      	adds	r0, r3, r1
 800e5ba:	4282      	cmp	r2, r0
 800e5bc:	6019      	str	r1, [r3, #0]
 800e5be:	d1dd      	bne.n	800e57c <_free_r+0x24>
 800e5c0:	6810      	ldr	r0, [r2, #0]
 800e5c2:	6852      	ldr	r2, [r2, #4]
 800e5c4:	605a      	str	r2, [r3, #4]
 800e5c6:	4401      	add	r1, r0
 800e5c8:	6019      	str	r1, [r3, #0]
 800e5ca:	e7d7      	b.n	800e57c <_free_r+0x24>
 800e5cc:	d902      	bls.n	800e5d4 <_free_r+0x7c>
 800e5ce:	230c      	movs	r3, #12
 800e5d0:	602b      	str	r3, [r5, #0]
 800e5d2:	e7d3      	b.n	800e57c <_free_r+0x24>
 800e5d4:	6820      	ldr	r0, [r4, #0]
 800e5d6:	1821      	adds	r1, r4, r0
 800e5d8:	428a      	cmp	r2, r1
 800e5da:	bf04      	itt	eq
 800e5dc:	6811      	ldreq	r1, [r2, #0]
 800e5de:	6852      	ldreq	r2, [r2, #4]
 800e5e0:	6062      	str	r2, [r4, #4]
 800e5e2:	bf04      	itt	eq
 800e5e4:	1809      	addeq	r1, r1, r0
 800e5e6:	6021      	streq	r1, [r4, #0]
 800e5e8:	605c      	str	r4, [r3, #4]
 800e5ea:	e7c7      	b.n	800e57c <_free_r+0x24>
 800e5ec:	bd38      	pop	{r3, r4, r5, pc}
 800e5ee:	bf00      	nop
 800e5f0:	20000204 	.word	0x20000204

0800e5f4 <_malloc_r>:
 800e5f4:	b570      	push	{r4, r5, r6, lr}
 800e5f6:	1ccd      	adds	r5, r1, #3
 800e5f8:	f025 0503 	bic.w	r5, r5, #3
 800e5fc:	3508      	adds	r5, #8
 800e5fe:	2d0c      	cmp	r5, #12
 800e600:	bf38      	it	cc
 800e602:	250c      	movcc	r5, #12
 800e604:	2d00      	cmp	r5, #0
 800e606:	4606      	mov	r6, r0
 800e608:	db01      	blt.n	800e60e <_malloc_r+0x1a>
 800e60a:	42a9      	cmp	r1, r5
 800e60c:	d903      	bls.n	800e616 <_malloc_r+0x22>
 800e60e:	230c      	movs	r3, #12
 800e610:	6033      	str	r3, [r6, #0]
 800e612:	2000      	movs	r0, #0
 800e614:	bd70      	pop	{r4, r5, r6, pc}
 800e616:	f000 fbba 	bl	800ed8e <__malloc_lock>
 800e61a:	4a21      	ldr	r2, [pc, #132]	; (800e6a0 <_malloc_r+0xac>)
 800e61c:	6814      	ldr	r4, [r2, #0]
 800e61e:	4621      	mov	r1, r4
 800e620:	b991      	cbnz	r1, 800e648 <_malloc_r+0x54>
 800e622:	4c20      	ldr	r4, [pc, #128]	; (800e6a4 <_malloc_r+0xb0>)
 800e624:	6823      	ldr	r3, [r4, #0]
 800e626:	b91b      	cbnz	r3, 800e630 <_malloc_r+0x3c>
 800e628:	4630      	mov	r0, r6
 800e62a:	f000 facf 	bl	800ebcc <_sbrk_r>
 800e62e:	6020      	str	r0, [r4, #0]
 800e630:	4629      	mov	r1, r5
 800e632:	4630      	mov	r0, r6
 800e634:	f000 faca 	bl	800ebcc <_sbrk_r>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	d124      	bne.n	800e686 <_malloc_r+0x92>
 800e63c:	230c      	movs	r3, #12
 800e63e:	6033      	str	r3, [r6, #0]
 800e640:	4630      	mov	r0, r6
 800e642:	f000 fba5 	bl	800ed90 <__malloc_unlock>
 800e646:	e7e4      	b.n	800e612 <_malloc_r+0x1e>
 800e648:	680b      	ldr	r3, [r1, #0]
 800e64a:	1b5b      	subs	r3, r3, r5
 800e64c:	d418      	bmi.n	800e680 <_malloc_r+0x8c>
 800e64e:	2b0b      	cmp	r3, #11
 800e650:	d90f      	bls.n	800e672 <_malloc_r+0x7e>
 800e652:	600b      	str	r3, [r1, #0]
 800e654:	50cd      	str	r5, [r1, r3]
 800e656:	18cc      	adds	r4, r1, r3
 800e658:	4630      	mov	r0, r6
 800e65a:	f000 fb99 	bl	800ed90 <__malloc_unlock>
 800e65e:	f104 000b 	add.w	r0, r4, #11
 800e662:	1d23      	adds	r3, r4, #4
 800e664:	f020 0007 	bic.w	r0, r0, #7
 800e668:	1ac3      	subs	r3, r0, r3
 800e66a:	d0d3      	beq.n	800e614 <_malloc_r+0x20>
 800e66c:	425a      	negs	r2, r3
 800e66e:	50e2      	str	r2, [r4, r3]
 800e670:	e7d0      	b.n	800e614 <_malloc_r+0x20>
 800e672:	428c      	cmp	r4, r1
 800e674:	684b      	ldr	r3, [r1, #4]
 800e676:	bf16      	itet	ne
 800e678:	6063      	strne	r3, [r4, #4]
 800e67a:	6013      	streq	r3, [r2, #0]
 800e67c:	460c      	movne	r4, r1
 800e67e:	e7eb      	b.n	800e658 <_malloc_r+0x64>
 800e680:	460c      	mov	r4, r1
 800e682:	6849      	ldr	r1, [r1, #4]
 800e684:	e7cc      	b.n	800e620 <_malloc_r+0x2c>
 800e686:	1cc4      	adds	r4, r0, #3
 800e688:	f024 0403 	bic.w	r4, r4, #3
 800e68c:	42a0      	cmp	r0, r4
 800e68e:	d005      	beq.n	800e69c <_malloc_r+0xa8>
 800e690:	1a21      	subs	r1, r4, r0
 800e692:	4630      	mov	r0, r6
 800e694:	f000 fa9a 	bl	800ebcc <_sbrk_r>
 800e698:	3001      	adds	r0, #1
 800e69a:	d0cf      	beq.n	800e63c <_malloc_r+0x48>
 800e69c:	6025      	str	r5, [r4, #0]
 800e69e:	e7db      	b.n	800e658 <_malloc_r+0x64>
 800e6a0:	20000204 	.word	0x20000204
 800e6a4:	20000208 	.word	0x20000208

0800e6a8 <__ssputs_r>:
 800e6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ac:	688e      	ldr	r6, [r1, #8]
 800e6ae:	429e      	cmp	r6, r3
 800e6b0:	4682      	mov	sl, r0
 800e6b2:	460c      	mov	r4, r1
 800e6b4:	4690      	mov	r8, r2
 800e6b6:	4699      	mov	r9, r3
 800e6b8:	d837      	bhi.n	800e72a <__ssputs_r+0x82>
 800e6ba:	898a      	ldrh	r2, [r1, #12]
 800e6bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e6c0:	d031      	beq.n	800e726 <__ssputs_r+0x7e>
 800e6c2:	6825      	ldr	r5, [r4, #0]
 800e6c4:	6909      	ldr	r1, [r1, #16]
 800e6c6:	1a6f      	subs	r7, r5, r1
 800e6c8:	6965      	ldr	r5, [r4, #20]
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e6d0:	fb95 f5f3 	sdiv	r5, r5, r3
 800e6d4:	f109 0301 	add.w	r3, r9, #1
 800e6d8:	443b      	add	r3, r7
 800e6da:	429d      	cmp	r5, r3
 800e6dc:	bf38      	it	cc
 800e6de:	461d      	movcc	r5, r3
 800e6e0:	0553      	lsls	r3, r2, #21
 800e6e2:	d530      	bpl.n	800e746 <__ssputs_r+0x9e>
 800e6e4:	4629      	mov	r1, r5
 800e6e6:	f7ff ff85 	bl	800e5f4 <_malloc_r>
 800e6ea:	4606      	mov	r6, r0
 800e6ec:	b950      	cbnz	r0, 800e704 <__ssputs_r+0x5c>
 800e6ee:	230c      	movs	r3, #12
 800e6f0:	f8ca 3000 	str.w	r3, [sl]
 800e6f4:	89a3      	ldrh	r3, [r4, #12]
 800e6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6fa:	81a3      	strh	r3, [r4, #12]
 800e6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e704:	463a      	mov	r2, r7
 800e706:	6921      	ldr	r1, [r4, #16]
 800e708:	f7fc f93c 	bl	800a984 <memcpy>
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e716:	81a3      	strh	r3, [r4, #12]
 800e718:	6126      	str	r6, [r4, #16]
 800e71a:	6165      	str	r5, [r4, #20]
 800e71c:	443e      	add	r6, r7
 800e71e:	1bed      	subs	r5, r5, r7
 800e720:	6026      	str	r6, [r4, #0]
 800e722:	60a5      	str	r5, [r4, #8]
 800e724:	464e      	mov	r6, r9
 800e726:	454e      	cmp	r6, r9
 800e728:	d900      	bls.n	800e72c <__ssputs_r+0x84>
 800e72a:	464e      	mov	r6, r9
 800e72c:	4632      	mov	r2, r6
 800e72e:	4641      	mov	r1, r8
 800e730:	6820      	ldr	r0, [r4, #0]
 800e732:	f000 fb13 	bl	800ed5c <memmove>
 800e736:	68a3      	ldr	r3, [r4, #8]
 800e738:	1b9b      	subs	r3, r3, r6
 800e73a:	60a3      	str	r3, [r4, #8]
 800e73c:	6823      	ldr	r3, [r4, #0]
 800e73e:	441e      	add	r6, r3
 800e740:	6026      	str	r6, [r4, #0]
 800e742:	2000      	movs	r0, #0
 800e744:	e7dc      	b.n	800e700 <__ssputs_r+0x58>
 800e746:	462a      	mov	r2, r5
 800e748:	f000 fb23 	bl	800ed92 <_realloc_r>
 800e74c:	4606      	mov	r6, r0
 800e74e:	2800      	cmp	r0, #0
 800e750:	d1e2      	bne.n	800e718 <__ssputs_r+0x70>
 800e752:	6921      	ldr	r1, [r4, #16]
 800e754:	4650      	mov	r0, sl
 800e756:	f7ff feff 	bl	800e558 <_free_r>
 800e75a:	e7c8      	b.n	800e6ee <__ssputs_r+0x46>

0800e75c <_svfiprintf_r>:
 800e75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e760:	461d      	mov	r5, r3
 800e762:	898b      	ldrh	r3, [r1, #12]
 800e764:	061f      	lsls	r7, r3, #24
 800e766:	b09d      	sub	sp, #116	; 0x74
 800e768:	4680      	mov	r8, r0
 800e76a:	460c      	mov	r4, r1
 800e76c:	4616      	mov	r6, r2
 800e76e:	d50f      	bpl.n	800e790 <_svfiprintf_r+0x34>
 800e770:	690b      	ldr	r3, [r1, #16]
 800e772:	b96b      	cbnz	r3, 800e790 <_svfiprintf_r+0x34>
 800e774:	2140      	movs	r1, #64	; 0x40
 800e776:	f7ff ff3d 	bl	800e5f4 <_malloc_r>
 800e77a:	6020      	str	r0, [r4, #0]
 800e77c:	6120      	str	r0, [r4, #16]
 800e77e:	b928      	cbnz	r0, 800e78c <_svfiprintf_r+0x30>
 800e780:	230c      	movs	r3, #12
 800e782:	f8c8 3000 	str.w	r3, [r8]
 800e786:	f04f 30ff 	mov.w	r0, #4294967295
 800e78a:	e0c8      	b.n	800e91e <_svfiprintf_r+0x1c2>
 800e78c:	2340      	movs	r3, #64	; 0x40
 800e78e:	6163      	str	r3, [r4, #20]
 800e790:	2300      	movs	r3, #0
 800e792:	9309      	str	r3, [sp, #36]	; 0x24
 800e794:	2320      	movs	r3, #32
 800e796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e79a:	2330      	movs	r3, #48	; 0x30
 800e79c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7a0:	9503      	str	r5, [sp, #12]
 800e7a2:	f04f 0b01 	mov.w	fp, #1
 800e7a6:	4637      	mov	r7, r6
 800e7a8:	463d      	mov	r5, r7
 800e7aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e7ae:	b10b      	cbz	r3, 800e7b4 <_svfiprintf_r+0x58>
 800e7b0:	2b25      	cmp	r3, #37	; 0x25
 800e7b2:	d13e      	bne.n	800e832 <_svfiprintf_r+0xd6>
 800e7b4:	ebb7 0a06 	subs.w	sl, r7, r6
 800e7b8:	d00b      	beq.n	800e7d2 <_svfiprintf_r+0x76>
 800e7ba:	4653      	mov	r3, sl
 800e7bc:	4632      	mov	r2, r6
 800e7be:	4621      	mov	r1, r4
 800e7c0:	4640      	mov	r0, r8
 800e7c2:	f7ff ff71 	bl	800e6a8 <__ssputs_r>
 800e7c6:	3001      	adds	r0, #1
 800e7c8:	f000 80a4 	beq.w	800e914 <_svfiprintf_r+0x1b8>
 800e7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ce:	4453      	add	r3, sl
 800e7d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e7d2:	783b      	ldrb	r3, [r7, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f000 809d 	beq.w	800e914 <_svfiprintf_r+0x1b8>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e7e4:	9304      	str	r3, [sp, #16]
 800e7e6:	9307      	str	r3, [sp, #28]
 800e7e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e7ec:	931a      	str	r3, [sp, #104]	; 0x68
 800e7ee:	462f      	mov	r7, r5
 800e7f0:	2205      	movs	r2, #5
 800e7f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e7f6:	4850      	ldr	r0, [pc, #320]	; (800e938 <_svfiprintf_r+0x1dc>)
 800e7f8:	f7f1 fcf2 	bl	80001e0 <memchr>
 800e7fc:	9b04      	ldr	r3, [sp, #16]
 800e7fe:	b9d0      	cbnz	r0, 800e836 <_svfiprintf_r+0xda>
 800e800:	06d9      	lsls	r1, r3, #27
 800e802:	bf44      	itt	mi
 800e804:	2220      	movmi	r2, #32
 800e806:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e80a:	071a      	lsls	r2, r3, #28
 800e80c:	bf44      	itt	mi
 800e80e:	222b      	movmi	r2, #43	; 0x2b
 800e810:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e814:	782a      	ldrb	r2, [r5, #0]
 800e816:	2a2a      	cmp	r2, #42	; 0x2a
 800e818:	d015      	beq.n	800e846 <_svfiprintf_r+0xea>
 800e81a:	9a07      	ldr	r2, [sp, #28]
 800e81c:	462f      	mov	r7, r5
 800e81e:	2000      	movs	r0, #0
 800e820:	250a      	movs	r5, #10
 800e822:	4639      	mov	r1, r7
 800e824:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e828:	3b30      	subs	r3, #48	; 0x30
 800e82a:	2b09      	cmp	r3, #9
 800e82c:	d94d      	bls.n	800e8ca <_svfiprintf_r+0x16e>
 800e82e:	b1b8      	cbz	r0, 800e860 <_svfiprintf_r+0x104>
 800e830:	e00f      	b.n	800e852 <_svfiprintf_r+0xf6>
 800e832:	462f      	mov	r7, r5
 800e834:	e7b8      	b.n	800e7a8 <_svfiprintf_r+0x4c>
 800e836:	4a40      	ldr	r2, [pc, #256]	; (800e938 <_svfiprintf_r+0x1dc>)
 800e838:	1a80      	subs	r0, r0, r2
 800e83a:	fa0b f000 	lsl.w	r0, fp, r0
 800e83e:	4318      	orrs	r0, r3
 800e840:	9004      	str	r0, [sp, #16]
 800e842:	463d      	mov	r5, r7
 800e844:	e7d3      	b.n	800e7ee <_svfiprintf_r+0x92>
 800e846:	9a03      	ldr	r2, [sp, #12]
 800e848:	1d11      	adds	r1, r2, #4
 800e84a:	6812      	ldr	r2, [r2, #0]
 800e84c:	9103      	str	r1, [sp, #12]
 800e84e:	2a00      	cmp	r2, #0
 800e850:	db01      	blt.n	800e856 <_svfiprintf_r+0xfa>
 800e852:	9207      	str	r2, [sp, #28]
 800e854:	e004      	b.n	800e860 <_svfiprintf_r+0x104>
 800e856:	4252      	negs	r2, r2
 800e858:	f043 0302 	orr.w	r3, r3, #2
 800e85c:	9207      	str	r2, [sp, #28]
 800e85e:	9304      	str	r3, [sp, #16]
 800e860:	783b      	ldrb	r3, [r7, #0]
 800e862:	2b2e      	cmp	r3, #46	; 0x2e
 800e864:	d10c      	bne.n	800e880 <_svfiprintf_r+0x124>
 800e866:	787b      	ldrb	r3, [r7, #1]
 800e868:	2b2a      	cmp	r3, #42	; 0x2a
 800e86a:	d133      	bne.n	800e8d4 <_svfiprintf_r+0x178>
 800e86c:	9b03      	ldr	r3, [sp, #12]
 800e86e:	1d1a      	adds	r2, r3, #4
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	9203      	str	r2, [sp, #12]
 800e874:	2b00      	cmp	r3, #0
 800e876:	bfb8      	it	lt
 800e878:	f04f 33ff 	movlt.w	r3, #4294967295
 800e87c:	3702      	adds	r7, #2
 800e87e:	9305      	str	r3, [sp, #20]
 800e880:	4d2e      	ldr	r5, [pc, #184]	; (800e93c <_svfiprintf_r+0x1e0>)
 800e882:	7839      	ldrb	r1, [r7, #0]
 800e884:	2203      	movs	r2, #3
 800e886:	4628      	mov	r0, r5
 800e888:	f7f1 fcaa 	bl	80001e0 <memchr>
 800e88c:	b138      	cbz	r0, 800e89e <_svfiprintf_r+0x142>
 800e88e:	2340      	movs	r3, #64	; 0x40
 800e890:	1b40      	subs	r0, r0, r5
 800e892:	fa03 f000 	lsl.w	r0, r3, r0
 800e896:	9b04      	ldr	r3, [sp, #16]
 800e898:	4303      	orrs	r3, r0
 800e89a:	3701      	adds	r7, #1
 800e89c:	9304      	str	r3, [sp, #16]
 800e89e:	7839      	ldrb	r1, [r7, #0]
 800e8a0:	4827      	ldr	r0, [pc, #156]	; (800e940 <_svfiprintf_r+0x1e4>)
 800e8a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8a6:	2206      	movs	r2, #6
 800e8a8:	1c7e      	adds	r6, r7, #1
 800e8aa:	f7f1 fc99 	bl	80001e0 <memchr>
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	d038      	beq.n	800e924 <_svfiprintf_r+0x1c8>
 800e8b2:	4b24      	ldr	r3, [pc, #144]	; (800e944 <_svfiprintf_r+0x1e8>)
 800e8b4:	bb13      	cbnz	r3, 800e8fc <_svfiprintf_r+0x1a0>
 800e8b6:	9b03      	ldr	r3, [sp, #12]
 800e8b8:	3307      	adds	r3, #7
 800e8ba:	f023 0307 	bic.w	r3, r3, #7
 800e8be:	3308      	adds	r3, #8
 800e8c0:	9303      	str	r3, [sp, #12]
 800e8c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8c4:	444b      	add	r3, r9
 800e8c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c8:	e76d      	b.n	800e7a6 <_svfiprintf_r+0x4a>
 800e8ca:	fb05 3202 	mla	r2, r5, r2, r3
 800e8ce:	2001      	movs	r0, #1
 800e8d0:	460f      	mov	r7, r1
 800e8d2:	e7a6      	b.n	800e822 <_svfiprintf_r+0xc6>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	3701      	adds	r7, #1
 800e8d8:	9305      	str	r3, [sp, #20]
 800e8da:	4619      	mov	r1, r3
 800e8dc:	250a      	movs	r5, #10
 800e8de:	4638      	mov	r0, r7
 800e8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e8e4:	3a30      	subs	r2, #48	; 0x30
 800e8e6:	2a09      	cmp	r2, #9
 800e8e8:	d903      	bls.n	800e8f2 <_svfiprintf_r+0x196>
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d0c8      	beq.n	800e880 <_svfiprintf_r+0x124>
 800e8ee:	9105      	str	r1, [sp, #20]
 800e8f0:	e7c6      	b.n	800e880 <_svfiprintf_r+0x124>
 800e8f2:	fb05 2101 	mla	r1, r5, r1, r2
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	4607      	mov	r7, r0
 800e8fa:	e7f0      	b.n	800e8de <_svfiprintf_r+0x182>
 800e8fc:	ab03      	add	r3, sp, #12
 800e8fe:	9300      	str	r3, [sp, #0]
 800e900:	4622      	mov	r2, r4
 800e902:	4b11      	ldr	r3, [pc, #68]	; (800e948 <_svfiprintf_r+0x1ec>)
 800e904:	a904      	add	r1, sp, #16
 800e906:	4640      	mov	r0, r8
 800e908:	f7fc f8e4 	bl	800aad4 <_printf_float>
 800e90c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e910:	4681      	mov	r9, r0
 800e912:	d1d6      	bne.n	800e8c2 <_svfiprintf_r+0x166>
 800e914:	89a3      	ldrh	r3, [r4, #12]
 800e916:	065b      	lsls	r3, r3, #25
 800e918:	f53f af35 	bmi.w	800e786 <_svfiprintf_r+0x2a>
 800e91c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e91e:	b01d      	add	sp, #116	; 0x74
 800e920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e924:	ab03      	add	r3, sp, #12
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	4622      	mov	r2, r4
 800e92a:	4b07      	ldr	r3, [pc, #28]	; (800e948 <_svfiprintf_r+0x1ec>)
 800e92c:	a904      	add	r1, sp, #16
 800e92e:	4640      	mov	r0, r8
 800e930:	f7fc fb86 	bl	800b040 <_printf_i>
 800e934:	e7ea      	b.n	800e90c <_svfiprintf_r+0x1b0>
 800e936:	bf00      	nop
 800e938:	0801053c 	.word	0x0801053c
 800e93c:	08010542 	.word	0x08010542
 800e940:	08010546 	.word	0x08010546
 800e944:	0800aad5 	.word	0x0800aad5
 800e948:	0800e6a9 	.word	0x0800e6a9

0800e94c <__sfputc_r>:
 800e94c:	6893      	ldr	r3, [r2, #8]
 800e94e:	3b01      	subs	r3, #1
 800e950:	2b00      	cmp	r3, #0
 800e952:	b410      	push	{r4}
 800e954:	6093      	str	r3, [r2, #8]
 800e956:	da08      	bge.n	800e96a <__sfputc_r+0x1e>
 800e958:	6994      	ldr	r4, [r2, #24]
 800e95a:	42a3      	cmp	r3, r4
 800e95c:	db01      	blt.n	800e962 <__sfputc_r+0x16>
 800e95e:	290a      	cmp	r1, #10
 800e960:	d103      	bne.n	800e96a <__sfputc_r+0x1e>
 800e962:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e966:	f7fd bdb1 	b.w	800c4cc <__swbuf_r>
 800e96a:	6813      	ldr	r3, [r2, #0]
 800e96c:	1c58      	adds	r0, r3, #1
 800e96e:	6010      	str	r0, [r2, #0]
 800e970:	7019      	strb	r1, [r3, #0]
 800e972:	4608      	mov	r0, r1
 800e974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e978:	4770      	bx	lr

0800e97a <__sfputs_r>:
 800e97a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97c:	4606      	mov	r6, r0
 800e97e:	460f      	mov	r7, r1
 800e980:	4614      	mov	r4, r2
 800e982:	18d5      	adds	r5, r2, r3
 800e984:	42ac      	cmp	r4, r5
 800e986:	d101      	bne.n	800e98c <__sfputs_r+0x12>
 800e988:	2000      	movs	r0, #0
 800e98a:	e007      	b.n	800e99c <__sfputs_r+0x22>
 800e98c:	463a      	mov	r2, r7
 800e98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e992:	4630      	mov	r0, r6
 800e994:	f7ff ffda 	bl	800e94c <__sfputc_r>
 800e998:	1c43      	adds	r3, r0, #1
 800e99a:	d1f3      	bne.n	800e984 <__sfputs_r+0xa>
 800e99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9a0 <_vfiprintf_r>:
 800e9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	b09d      	sub	sp, #116	; 0x74
 800e9a8:	4617      	mov	r7, r2
 800e9aa:	461d      	mov	r5, r3
 800e9ac:	4606      	mov	r6, r0
 800e9ae:	b118      	cbz	r0, 800e9b8 <_vfiprintf_r+0x18>
 800e9b0:	6983      	ldr	r3, [r0, #24]
 800e9b2:	b90b      	cbnz	r3, 800e9b8 <_vfiprintf_r+0x18>
 800e9b4:	f7fe fd80 	bl	800d4b8 <__sinit>
 800e9b8:	4b7c      	ldr	r3, [pc, #496]	; (800ebac <_vfiprintf_r+0x20c>)
 800e9ba:	429c      	cmp	r4, r3
 800e9bc:	d158      	bne.n	800ea70 <_vfiprintf_r+0xd0>
 800e9be:	6874      	ldr	r4, [r6, #4]
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	0718      	lsls	r0, r3, #28
 800e9c4:	d55e      	bpl.n	800ea84 <_vfiprintf_r+0xe4>
 800e9c6:	6923      	ldr	r3, [r4, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d05b      	beq.n	800ea84 <_vfiprintf_r+0xe4>
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800e9d0:	2320      	movs	r3, #32
 800e9d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9d6:	2330      	movs	r3, #48	; 0x30
 800e9d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9dc:	9503      	str	r5, [sp, #12]
 800e9de:	f04f 0b01 	mov.w	fp, #1
 800e9e2:	46b8      	mov	r8, r7
 800e9e4:	4645      	mov	r5, r8
 800e9e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e9ea:	b10b      	cbz	r3, 800e9f0 <_vfiprintf_r+0x50>
 800e9ec:	2b25      	cmp	r3, #37	; 0x25
 800e9ee:	d154      	bne.n	800ea9a <_vfiprintf_r+0xfa>
 800e9f0:	ebb8 0a07 	subs.w	sl, r8, r7
 800e9f4:	d00b      	beq.n	800ea0e <_vfiprintf_r+0x6e>
 800e9f6:	4653      	mov	r3, sl
 800e9f8:	463a      	mov	r2, r7
 800e9fa:	4621      	mov	r1, r4
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	f7ff ffbc 	bl	800e97a <__sfputs_r>
 800ea02:	3001      	adds	r0, #1
 800ea04:	f000 80c2 	beq.w	800eb8c <_vfiprintf_r+0x1ec>
 800ea08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea0a:	4453      	add	r3, sl
 800ea0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea0e:	f898 3000 	ldrb.w	r3, [r8]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f000 80ba 	beq.w	800eb8c <_vfiprintf_r+0x1ec>
 800ea18:	2300      	movs	r3, #0
 800ea1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea22:	9304      	str	r3, [sp, #16]
 800ea24:	9307      	str	r3, [sp, #28]
 800ea26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ea2c:	46a8      	mov	r8, r5
 800ea2e:	2205      	movs	r2, #5
 800ea30:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ea34:	485e      	ldr	r0, [pc, #376]	; (800ebb0 <_vfiprintf_r+0x210>)
 800ea36:	f7f1 fbd3 	bl	80001e0 <memchr>
 800ea3a:	9b04      	ldr	r3, [sp, #16]
 800ea3c:	bb78      	cbnz	r0, 800ea9e <_vfiprintf_r+0xfe>
 800ea3e:	06d9      	lsls	r1, r3, #27
 800ea40:	bf44      	itt	mi
 800ea42:	2220      	movmi	r2, #32
 800ea44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea48:	071a      	lsls	r2, r3, #28
 800ea4a:	bf44      	itt	mi
 800ea4c:	222b      	movmi	r2, #43	; 0x2b
 800ea4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea52:	782a      	ldrb	r2, [r5, #0]
 800ea54:	2a2a      	cmp	r2, #42	; 0x2a
 800ea56:	d02a      	beq.n	800eaae <_vfiprintf_r+0x10e>
 800ea58:	9a07      	ldr	r2, [sp, #28]
 800ea5a:	46a8      	mov	r8, r5
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	250a      	movs	r5, #10
 800ea60:	4641      	mov	r1, r8
 800ea62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea66:	3b30      	subs	r3, #48	; 0x30
 800ea68:	2b09      	cmp	r3, #9
 800ea6a:	d969      	bls.n	800eb40 <_vfiprintf_r+0x1a0>
 800ea6c:	b360      	cbz	r0, 800eac8 <_vfiprintf_r+0x128>
 800ea6e:	e024      	b.n	800eaba <_vfiprintf_r+0x11a>
 800ea70:	4b50      	ldr	r3, [pc, #320]	; (800ebb4 <_vfiprintf_r+0x214>)
 800ea72:	429c      	cmp	r4, r3
 800ea74:	d101      	bne.n	800ea7a <_vfiprintf_r+0xda>
 800ea76:	68b4      	ldr	r4, [r6, #8]
 800ea78:	e7a2      	b.n	800e9c0 <_vfiprintf_r+0x20>
 800ea7a:	4b4f      	ldr	r3, [pc, #316]	; (800ebb8 <_vfiprintf_r+0x218>)
 800ea7c:	429c      	cmp	r4, r3
 800ea7e:	bf08      	it	eq
 800ea80:	68f4      	ldreq	r4, [r6, #12]
 800ea82:	e79d      	b.n	800e9c0 <_vfiprintf_r+0x20>
 800ea84:	4621      	mov	r1, r4
 800ea86:	4630      	mov	r0, r6
 800ea88:	f7fd fd72 	bl	800c570 <__swsetup_r>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d09d      	beq.n	800e9cc <_vfiprintf_r+0x2c>
 800ea90:	f04f 30ff 	mov.w	r0, #4294967295
 800ea94:	b01d      	add	sp, #116	; 0x74
 800ea96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea9a:	46a8      	mov	r8, r5
 800ea9c:	e7a2      	b.n	800e9e4 <_vfiprintf_r+0x44>
 800ea9e:	4a44      	ldr	r2, [pc, #272]	; (800ebb0 <_vfiprintf_r+0x210>)
 800eaa0:	1a80      	subs	r0, r0, r2
 800eaa2:	fa0b f000 	lsl.w	r0, fp, r0
 800eaa6:	4318      	orrs	r0, r3
 800eaa8:	9004      	str	r0, [sp, #16]
 800eaaa:	4645      	mov	r5, r8
 800eaac:	e7be      	b.n	800ea2c <_vfiprintf_r+0x8c>
 800eaae:	9a03      	ldr	r2, [sp, #12]
 800eab0:	1d11      	adds	r1, r2, #4
 800eab2:	6812      	ldr	r2, [r2, #0]
 800eab4:	9103      	str	r1, [sp, #12]
 800eab6:	2a00      	cmp	r2, #0
 800eab8:	db01      	blt.n	800eabe <_vfiprintf_r+0x11e>
 800eaba:	9207      	str	r2, [sp, #28]
 800eabc:	e004      	b.n	800eac8 <_vfiprintf_r+0x128>
 800eabe:	4252      	negs	r2, r2
 800eac0:	f043 0302 	orr.w	r3, r3, #2
 800eac4:	9207      	str	r2, [sp, #28]
 800eac6:	9304      	str	r3, [sp, #16]
 800eac8:	f898 3000 	ldrb.w	r3, [r8]
 800eacc:	2b2e      	cmp	r3, #46	; 0x2e
 800eace:	d10e      	bne.n	800eaee <_vfiprintf_r+0x14e>
 800ead0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ead4:	2b2a      	cmp	r3, #42	; 0x2a
 800ead6:	d138      	bne.n	800eb4a <_vfiprintf_r+0x1aa>
 800ead8:	9b03      	ldr	r3, [sp, #12]
 800eada:	1d1a      	adds	r2, r3, #4
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	9203      	str	r2, [sp, #12]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	bfb8      	it	lt
 800eae4:	f04f 33ff 	movlt.w	r3, #4294967295
 800eae8:	f108 0802 	add.w	r8, r8, #2
 800eaec:	9305      	str	r3, [sp, #20]
 800eaee:	4d33      	ldr	r5, [pc, #204]	; (800ebbc <_vfiprintf_r+0x21c>)
 800eaf0:	f898 1000 	ldrb.w	r1, [r8]
 800eaf4:	2203      	movs	r2, #3
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f7f1 fb72 	bl	80001e0 <memchr>
 800eafc:	b140      	cbz	r0, 800eb10 <_vfiprintf_r+0x170>
 800eafe:	2340      	movs	r3, #64	; 0x40
 800eb00:	1b40      	subs	r0, r0, r5
 800eb02:	fa03 f000 	lsl.w	r0, r3, r0
 800eb06:	9b04      	ldr	r3, [sp, #16]
 800eb08:	4303      	orrs	r3, r0
 800eb0a:	f108 0801 	add.w	r8, r8, #1
 800eb0e:	9304      	str	r3, [sp, #16]
 800eb10:	f898 1000 	ldrb.w	r1, [r8]
 800eb14:	482a      	ldr	r0, [pc, #168]	; (800ebc0 <_vfiprintf_r+0x220>)
 800eb16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb1a:	2206      	movs	r2, #6
 800eb1c:	f108 0701 	add.w	r7, r8, #1
 800eb20:	f7f1 fb5e 	bl	80001e0 <memchr>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d037      	beq.n	800eb98 <_vfiprintf_r+0x1f8>
 800eb28:	4b26      	ldr	r3, [pc, #152]	; (800ebc4 <_vfiprintf_r+0x224>)
 800eb2a:	bb1b      	cbnz	r3, 800eb74 <_vfiprintf_r+0x1d4>
 800eb2c:	9b03      	ldr	r3, [sp, #12]
 800eb2e:	3307      	adds	r3, #7
 800eb30:	f023 0307 	bic.w	r3, r3, #7
 800eb34:	3308      	adds	r3, #8
 800eb36:	9303      	str	r3, [sp, #12]
 800eb38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb3a:	444b      	add	r3, r9
 800eb3c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb3e:	e750      	b.n	800e9e2 <_vfiprintf_r+0x42>
 800eb40:	fb05 3202 	mla	r2, r5, r2, r3
 800eb44:	2001      	movs	r0, #1
 800eb46:	4688      	mov	r8, r1
 800eb48:	e78a      	b.n	800ea60 <_vfiprintf_r+0xc0>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	f108 0801 	add.w	r8, r8, #1
 800eb50:	9305      	str	r3, [sp, #20]
 800eb52:	4619      	mov	r1, r3
 800eb54:	250a      	movs	r5, #10
 800eb56:	4640      	mov	r0, r8
 800eb58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb5c:	3a30      	subs	r2, #48	; 0x30
 800eb5e:	2a09      	cmp	r2, #9
 800eb60:	d903      	bls.n	800eb6a <_vfiprintf_r+0x1ca>
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d0c3      	beq.n	800eaee <_vfiprintf_r+0x14e>
 800eb66:	9105      	str	r1, [sp, #20]
 800eb68:	e7c1      	b.n	800eaee <_vfiprintf_r+0x14e>
 800eb6a:	fb05 2101 	mla	r1, r5, r1, r2
 800eb6e:	2301      	movs	r3, #1
 800eb70:	4680      	mov	r8, r0
 800eb72:	e7f0      	b.n	800eb56 <_vfiprintf_r+0x1b6>
 800eb74:	ab03      	add	r3, sp, #12
 800eb76:	9300      	str	r3, [sp, #0]
 800eb78:	4622      	mov	r2, r4
 800eb7a:	4b13      	ldr	r3, [pc, #76]	; (800ebc8 <_vfiprintf_r+0x228>)
 800eb7c:	a904      	add	r1, sp, #16
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f7fb ffa8 	bl	800aad4 <_printf_float>
 800eb84:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eb88:	4681      	mov	r9, r0
 800eb8a:	d1d5      	bne.n	800eb38 <_vfiprintf_r+0x198>
 800eb8c:	89a3      	ldrh	r3, [r4, #12]
 800eb8e:	065b      	lsls	r3, r3, #25
 800eb90:	f53f af7e 	bmi.w	800ea90 <_vfiprintf_r+0xf0>
 800eb94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb96:	e77d      	b.n	800ea94 <_vfiprintf_r+0xf4>
 800eb98:	ab03      	add	r3, sp, #12
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	4622      	mov	r2, r4
 800eb9e:	4b0a      	ldr	r3, [pc, #40]	; (800ebc8 <_vfiprintf_r+0x228>)
 800eba0:	a904      	add	r1, sp, #16
 800eba2:	4630      	mov	r0, r6
 800eba4:	f7fc fa4c 	bl	800b040 <_printf_i>
 800eba8:	e7ec      	b.n	800eb84 <_vfiprintf_r+0x1e4>
 800ebaa:	bf00      	nop
 800ebac:	080103f0 	.word	0x080103f0
 800ebb0:	0801053c 	.word	0x0801053c
 800ebb4:	08010410 	.word	0x08010410
 800ebb8:	080103d0 	.word	0x080103d0
 800ebbc:	08010542 	.word	0x08010542
 800ebc0:	08010546 	.word	0x08010546
 800ebc4:	0800aad5 	.word	0x0800aad5
 800ebc8:	0800e97b 	.word	0x0800e97b

0800ebcc <_sbrk_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4c06      	ldr	r4, [pc, #24]	; (800ebe8 <_sbrk_r+0x1c>)
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	6023      	str	r3, [r4, #0]
 800ebd8:	f7f5 ffe0 	bl	8004b9c <_sbrk>
 800ebdc:	1c43      	adds	r3, r0, #1
 800ebde:	d102      	bne.n	800ebe6 <_sbrk_r+0x1a>
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	b103      	cbz	r3, 800ebe6 <_sbrk_r+0x1a>
 800ebe4:	602b      	str	r3, [r5, #0]
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
 800ebe8:	2001807c 	.word	0x2001807c

0800ebec <__sread>:
 800ebec:	b510      	push	{r4, lr}
 800ebee:	460c      	mov	r4, r1
 800ebf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf4:	f000 f8f4 	bl	800ede0 <_read_r>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	bfab      	itete	ge
 800ebfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ebfe:	89a3      	ldrhlt	r3, [r4, #12]
 800ec00:	181b      	addge	r3, r3, r0
 800ec02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec06:	bfac      	ite	ge
 800ec08:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec0a:	81a3      	strhlt	r3, [r4, #12]
 800ec0c:	bd10      	pop	{r4, pc}

0800ec0e <__swrite>:
 800ec0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec12:	461f      	mov	r7, r3
 800ec14:	898b      	ldrh	r3, [r1, #12]
 800ec16:	05db      	lsls	r3, r3, #23
 800ec18:	4605      	mov	r5, r0
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	4616      	mov	r6, r2
 800ec1e:	d505      	bpl.n	800ec2c <__swrite+0x1e>
 800ec20:	2302      	movs	r3, #2
 800ec22:	2200      	movs	r2, #0
 800ec24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec28:	f000 f886 	bl	800ed38 <_lseek_r>
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec36:	81a3      	strh	r3, [r4, #12]
 800ec38:	4632      	mov	r2, r6
 800ec3a:	463b      	mov	r3, r7
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec42:	f000 b835 	b.w	800ecb0 <_write_r>

0800ec46 <__sseek>:
 800ec46:	b510      	push	{r4, lr}
 800ec48:	460c      	mov	r4, r1
 800ec4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec4e:	f000 f873 	bl	800ed38 <_lseek_r>
 800ec52:	1c43      	adds	r3, r0, #1
 800ec54:	89a3      	ldrh	r3, [r4, #12]
 800ec56:	bf15      	itete	ne
 800ec58:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec62:	81a3      	strheq	r3, [r4, #12]
 800ec64:	bf18      	it	ne
 800ec66:	81a3      	strhne	r3, [r4, #12]
 800ec68:	bd10      	pop	{r4, pc}

0800ec6a <__sclose>:
 800ec6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec6e:	f000 b831 	b.w	800ecd4 <_close_r>

0800ec72 <strncmp>:
 800ec72:	b510      	push	{r4, lr}
 800ec74:	b16a      	cbz	r2, 800ec92 <strncmp+0x20>
 800ec76:	3901      	subs	r1, #1
 800ec78:	1884      	adds	r4, r0, r2
 800ec7a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ec7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d103      	bne.n	800ec8e <strncmp+0x1c>
 800ec86:	42a0      	cmp	r0, r4
 800ec88:	d001      	beq.n	800ec8e <strncmp+0x1c>
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d1f5      	bne.n	800ec7a <strncmp+0x8>
 800ec8e:	1a98      	subs	r0, r3, r2
 800ec90:	bd10      	pop	{r4, pc}
 800ec92:	4610      	mov	r0, r2
 800ec94:	e7fc      	b.n	800ec90 <strncmp+0x1e>

0800ec96 <__ascii_wctomb>:
 800ec96:	b149      	cbz	r1, 800ecac <__ascii_wctomb+0x16>
 800ec98:	2aff      	cmp	r2, #255	; 0xff
 800ec9a:	bf85      	ittet	hi
 800ec9c:	238a      	movhi	r3, #138	; 0x8a
 800ec9e:	6003      	strhi	r3, [r0, #0]
 800eca0:	700a      	strbls	r2, [r1, #0]
 800eca2:	f04f 30ff 	movhi.w	r0, #4294967295
 800eca6:	bf98      	it	ls
 800eca8:	2001      	movls	r0, #1
 800ecaa:	4770      	bx	lr
 800ecac:	4608      	mov	r0, r1
 800ecae:	4770      	bx	lr

0800ecb0 <_write_r>:
 800ecb0:	b538      	push	{r3, r4, r5, lr}
 800ecb2:	4c07      	ldr	r4, [pc, #28]	; (800ecd0 <_write_r+0x20>)
 800ecb4:	4605      	mov	r5, r0
 800ecb6:	4608      	mov	r0, r1
 800ecb8:	4611      	mov	r1, r2
 800ecba:	2200      	movs	r2, #0
 800ecbc:	6022      	str	r2, [r4, #0]
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	f7f5 ff1b 	bl	8004afa <_write>
 800ecc4:	1c43      	adds	r3, r0, #1
 800ecc6:	d102      	bne.n	800ecce <_write_r+0x1e>
 800ecc8:	6823      	ldr	r3, [r4, #0]
 800ecca:	b103      	cbz	r3, 800ecce <_write_r+0x1e>
 800eccc:	602b      	str	r3, [r5, #0]
 800ecce:	bd38      	pop	{r3, r4, r5, pc}
 800ecd0:	2001807c 	.word	0x2001807c

0800ecd4 <_close_r>:
 800ecd4:	b538      	push	{r3, r4, r5, lr}
 800ecd6:	4c06      	ldr	r4, [pc, #24]	; (800ecf0 <_close_r+0x1c>)
 800ecd8:	2300      	movs	r3, #0
 800ecda:	4605      	mov	r5, r0
 800ecdc:	4608      	mov	r0, r1
 800ecde:	6023      	str	r3, [r4, #0]
 800ece0:	f7f5 ff27 	bl	8004b32 <_close>
 800ece4:	1c43      	adds	r3, r0, #1
 800ece6:	d102      	bne.n	800ecee <_close_r+0x1a>
 800ece8:	6823      	ldr	r3, [r4, #0]
 800ecea:	b103      	cbz	r3, 800ecee <_close_r+0x1a>
 800ecec:	602b      	str	r3, [r5, #0]
 800ecee:	bd38      	pop	{r3, r4, r5, pc}
 800ecf0:	2001807c 	.word	0x2001807c

0800ecf4 <_fstat_r>:
 800ecf4:	b538      	push	{r3, r4, r5, lr}
 800ecf6:	4c07      	ldr	r4, [pc, #28]	; (800ed14 <_fstat_r+0x20>)
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	4605      	mov	r5, r0
 800ecfc:	4608      	mov	r0, r1
 800ecfe:	4611      	mov	r1, r2
 800ed00:	6023      	str	r3, [r4, #0]
 800ed02:	f7f5 ff22 	bl	8004b4a <_fstat>
 800ed06:	1c43      	adds	r3, r0, #1
 800ed08:	d102      	bne.n	800ed10 <_fstat_r+0x1c>
 800ed0a:	6823      	ldr	r3, [r4, #0]
 800ed0c:	b103      	cbz	r3, 800ed10 <_fstat_r+0x1c>
 800ed0e:	602b      	str	r3, [r5, #0]
 800ed10:	bd38      	pop	{r3, r4, r5, pc}
 800ed12:	bf00      	nop
 800ed14:	2001807c 	.word	0x2001807c

0800ed18 <_isatty_r>:
 800ed18:	b538      	push	{r3, r4, r5, lr}
 800ed1a:	4c06      	ldr	r4, [pc, #24]	; (800ed34 <_isatty_r+0x1c>)
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	4605      	mov	r5, r0
 800ed20:	4608      	mov	r0, r1
 800ed22:	6023      	str	r3, [r4, #0]
 800ed24:	f7f5 ff21 	bl	8004b6a <_isatty>
 800ed28:	1c43      	adds	r3, r0, #1
 800ed2a:	d102      	bne.n	800ed32 <_isatty_r+0x1a>
 800ed2c:	6823      	ldr	r3, [r4, #0]
 800ed2e:	b103      	cbz	r3, 800ed32 <_isatty_r+0x1a>
 800ed30:	602b      	str	r3, [r5, #0]
 800ed32:	bd38      	pop	{r3, r4, r5, pc}
 800ed34:	2001807c 	.word	0x2001807c

0800ed38 <_lseek_r>:
 800ed38:	b538      	push	{r3, r4, r5, lr}
 800ed3a:	4c07      	ldr	r4, [pc, #28]	; (800ed58 <_lseek_r+0x20>)
 800ed3c:	4605      	mov	r5, r0
 800ed3e:	4608      	mov	r0, r1
 800ed40:	4611      	mov	r1, r2
 800ed42:	2200      	movs	r2, #0
 800ed44:	6022      	str	r2, [r4, #0]
 800ed46:	461a      	mov	r2, r3
 800ed48:	f7f5 ff1a 	bl	8004b80 <_lseek>
 800ed4c:	1c43      	adds	r3, r0, #1
 800ed4e:	d102      	bne.n	800ed56 <_lseek_r+0x1e>
 800ed50:	6823      	ldr	r3, [r4, #0]
 800ed52:	b103      	cbz	r3, 800ed56 <_lseek_r+0x1e>
 800ed54:	602b      	str	r3, [r5, #0]
 800ed56:	bd38      	pop	{r3, r4, r5, pc}
 800ed58:	2001807c 	.word	0x2001807c

0800ed5c <memmove>:
 800ed5c:	4288      	cmp	r0, r1
 800ed5e:	b510      	push	{r4, lr}
 800ed60:	eb01 0302 	add.w	r3, r1, r2
 800ed64:	d807      	bhi.n	800ed76 <memmove+0x1a>
 800ed66:	1e42      	subs	r2, r0, #1
 800ed68:	4299      	cmp	r1, r3
 800ed6a:	d00a      	beq.n	800ed82 <memmove+0x26>
 800ed6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed70:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ed74:	e7f8      	b.n	800ed68 <memmove+0xc>
 800ed76:	4283      	cmp	r3, r0
 800ed78:	d9f5      	bls.n	800ed66 <memmove+0xa>
 800ed7a:	1881      	adds	r1, r0, r2
 800ed7c:	1ad2      	subs	r2, r2, r3
 800ed7e:	42d3      	cmn	r3, r2
 800ed80:	d100      	bne.n	800ed84 <memmove+0x28>
 800ed82:	bd10      	pop	{r4, pc}
 800ed84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ed8c:	e7f7      	b.n	800ed7e <memmove+0x22>

0800ed8e <__malloc_lock>:
 800ed8e:	4770      	bx	lr

0800ed90 <__malloc_unlock>:
 800ed90:	4770      	bx	lr

0800ed92 <_realloc_r>:
 800ed92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed94:	4607      	mov	r7, r0
 800ed96:	4614      	mov	r4, r2
 800ed98:	460e      	mov	r6, r1
 800ed9a:	b921      	cbnz	r1, 800eda6 <_realloc_r+0x14>
 800ed9c:	4611      	mov	r1, r2
 800ed9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eda2:	f7ff bc27 	b.w	800e5f4 <_malloc_r>
 800eda6:	b922      	cbnz	r2, 800edb2 <_realloc_r+0x20>
 800eda8:	f7ff fbd6 	bl	800e558 <_free_r>
 800edac:	4625      	mov	r5, r4
 800edae:	4628      	mov	r0, r5
 800edb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edb2:	f000 f827 	bl	800ee04 <_malloc_usable_size_r>
 800edb6:	42a0      	cmp	r0, r4
 800edb8:	d20f      	bcs.n	800edda <_realloc_r+0x48>
 800edba:	4621      	mov	r1, r4
 800edbc:	4638      	mov	r0, r7
 800edbe:	f7ff fc19 	bl	800e5f4 <_malloc_r>
 800edc2:	4605      	mov	r5, r0
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d0f2      	beq.n	800edae <_realloc_r+0x1c>
 800edc8:	4631      	mov	r1, r6
 800edca:	4622      	mov	r2, r4
 800edcc:	f7fb fdda 	bl	800a984 <memcpy>
 800edd0:	4631      	mov	r1, r6
 800edd2:	4638      	mov	r0, r7
 800edd4:	f7ff fbc0 	bl	800e558 <_free_r>
 800edd8:	e7e9      	b.n	800edae <_realloc_r+0x1c>
 800edda:	4635      	mov	r5, r6
 800eddc:	e7e7      	b.n	800edae <_realloc_r+0x1c>
	...

0800ede0 <_read_r>:
 800ede0:	b538      	push	{r3, r4, r5, lr}
 800ede2:	4c07      	ldr	r4, [pc, #28]	; (800ee00 <_read_r+0x20>)
 800ede4:	4605      	mov	r5, r0
 800ede6:	4608      	mov	r0, r1
 800ede8:	4611      	mov	r1, r2
 800edea:	2200      	movs	r2, #0
 800edec:	6022      	str	r2, [r4, #0]
 800edee:	461a      	mov	r2, r3
 800edf0:	f7f5 fe66 	bl	8004ac0 <_read>
 800edf4:	1c43      	adds	r3, r0, #1
 800edf6:	d102      	bne.n	800edfe <_read_r+0x1e>
 800edf8:	6823      	ldr	r3, [r4, #0]
 800edfa:	b103      	cbz	r3, 800edfe <_read_r+0x1e>
 800edfc:	602b      	str	r3, [r5, #0]
 800edfe:	bd38      	pop	{r3, r4, r5, pc}
 800ee00:	2001807c 	.word	0x2001807c

0800ee04 <_malloc_usable_size_r>:
 800ee04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee08:	1f18      	subs	r0, r3, #4
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	bfbc      	itt	lt
 800ee0e:	580b      	ldrlt	r3, [r1, r0]
 800ee10:	18c0      	addlt	r0, r0, r3
 800ee12:	4770      	bx	lr

0800ee14 <pow>:
 800ee14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee18:	ed2d 8b04 	vpush	{d8-d9}
 800ee1c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800f0f0 <pow+0x2dc>
 800ee20:	b08d      	sub	sp, #52	; 0x34
 800ee22:	ec57 6b10 	vmov	r6, r7, d0
 800ee26:	ec55 4b11 	vmov	r4, r5, d1
 800ee2a:	f000 f9bd 	bl	800f1a8 <__ieee754_pow>
 800ee2e:	f999 3000 	ldrsb.w	r3, [r9]
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	3301      	adds	r3, #1
 800ee36:	eeb0 8a40 	vmov.f32	s16, s0
 800ee3a:	eef0 8a60 	vmov.f32	s17, s1
 800ee3e:	46c8      	mov	r8, r9
 800ee40:	d05f      	beq.n	800ef02 <pow+0xee>
 800ee42:	4622      	mov	r2, r4
 800ee44:	462b      	mov	r3, r5
 800ee46:	4620      	mov	r0, r4
 800ee48:	4629      	mov	r1, r5
 800ee4a:	f7f1 fe6f 	bl	8000b2c <__aeabi_dcmpun>
 800ee4e:	4683      	mov	fp, r0
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d156      	bne.n	800ef02 <pow+0xee>
 800ee54:	4632      	mov	r2, r6
 800ee56:	463b      	mov	r3, r7
 800ee58:	4630      	mov	r0, r6
 800ee5a:	4639      	mov	r1, r7
 800ee5c:	f7f1 fe66 	bl	8000b2c <__aeabi_dcmpun>
 800ee60:	9001      	str	r0, [sp, #4]
 800ee62:	b1e8      	cbz	r0, 800eea0 <pow+0x8c>
 800ee64:	2200      	movs	r2, #0
 800ee66:	2300      	movs	r3, #0
 800ee68:	4620      	mov	r0, r4
 800ee6a:	4629      	mov	r1, r5
 800ee6c:	f7f1 fe2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	d046      	beq.n	800ef02 <pow+0xee>
 800ee74:	2301      	movs	r3, #1
 800ee76:	9302      	str	r3, [sp, #8]
 800ee78:	4b96      	ldr	r3, [pc, #600]	; (800f0d4 <pow+0x2c0>)
 800ee7a:	9303      	str	r3, [sp, #12]
 800ee7c:	4b96      	ldr	r3, [pc, #600]	; (800f0d8 <pow+0x2c4>)
 800ee7e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800ee82:	2200      	movs	r2, #0
 800ee84:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ee88:	9b00      	ldr	r3, [sp, #0]
 800ee8a:	2b02      	cmp	r3, #2
 800ee8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ee90:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ee94:	d033      	beq.n	800eefe <pow+0xea>
 800ee96:	a802      	add	r0, sp, #8
 800ee98:	f000 ff55 	bl	800fd46 <matherr>
 800ee9c:	bb48      	cbnz	r0, 800eef2 <pow+0xde>
 800ee9e:	e05d      	b.n	800ef5c <pow+0x148>
 800eea0:	f04f 0a00 	mov.w	sl, #0
 800eea4:	f04f 0b00 	mov.w	fp, #0
 800eea8:	4652      	mov	r2, sl
 800eeaa:	465b      	mov	r3, fp
 800eeac:	4630      	mov	r0, r6
 800eeae:	4639      	mov	r1, r7
 800eeb0:	f7f1 fe0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800eeb4:	ec4b ab19 	vmov	d9, sl, fp
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	d054      	beq.n	800ef66 <pow+0x152>
 800eebc:	4652      	mov	r2, sl
 800eebe:	465b      	mov	r3, fp
 800eec0:	4620      	mov	r0, r4
 800eec2:	4629      	mov	r1, r5
 800eec4:	f7f1 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 800eec8:	4680      	mov	r8, r0
 800eeca:	b318      	cbz	r0, 800ef14 <pow+0x100>
 800eecc:	2301      	movs	r3, #1
 800eece:	9302      	str	r3, [sp, #8]
 800eed0:	4b80      	ldr	r3, [pc, #512]	; (800f0d4 <pow+0x2c0>)
 800eed2:	9303      	str	r3, [sp, #12]
 800eed4:	9b01      	ldr	r3, [sp, #4]
 800eed6:	930a      	str	r3, [sp, #40]	; 0x28
 800eed8:	9b00      	ldr	r3, [sp, #0]
 800eeda:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800eede:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800eee2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d0d5      	beq.n	800ee96 <pow+0x82>
 800eeea:	4b7b      	ldr	r3, [pc, #492]	; (800f0d8 <pow+0x2c4>)
 800eeec:	2200      	movs	r2, #0
 800eeee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eef4:	b11b      	cbz	r3, 800eefe <pow+0xea>
 800eef6:	f7fb fd1b 	bl	800a930 <__errno>
 800eefa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eefc:	6003      	str	r3, [r0, #0]
 800eefe:	ed9d 8b08 	vldr	d8, [sp, #32]
 800ef02:	eeb0 0a48 	vmov.f32	s0, s16
 800ef06:	eef0 0a68 	vmov.f32	s1, s17
 800ef0a:	b00d      	add	sp, #52	; 0x34
 800ef0c:	ecbd 8b04 	vpop	{d8-d9}
 800ef10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef14:	ec45 4b10 	vmov	d0, r4, r5
 800ef18:	f000 ff0d 	bl	800fd36 <finite>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d0f0      	beq.n	800ef02 <pow+0xee>
 800ef20:	4652      	mov	r2, sl
 800ef22:	465b      	mov	r3, fp
 800ef24:	4620      	mov	r0, r4
 800ef26:	4629      	mov	r1, r5
 800ef28:	f7f1 fdd8 	bl	8000adc <__aeabi_dcmplt>
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	d0e8      	beq.n	800ef02 <pow+0xee>
 800ef30:	2301      	movs	r3, #1
 800ef32:	9302      	str	r3, [sp, #8]
 800ef34:	4b67      	ldr	r3, [pc, #412]	; (800f0d4 <pow+0x2c0>)
 800ef36:	9303      	str	r3, [sp, #12]
 800ef38:	f999 3000 	ldrsb.w	r3, [r9]
 800ef3c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800ef40:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ef44:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ef48:	b913      	cbnz	r3, 800ef50 <pow+0x13c>
 800ef4a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ef4e:	e7a2      	b.n	800ee96 <pow+0x82>
 800ef50:	4962      	ldr	r1, [pc, #392]	; (800f0dc <pow+0x2c8>)
 800ef52:	2000      	movs	r0, #0
 800ef54:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ef58:	2b02      	cmp	r3, #2
 800ef5a:	d19c      	bne.n	800ee96 <pow+0x82>
 800ef5c:	f7fb fce8 	bl	800a930 <__errno>
 800ef60:	2321      	movs	r3, #33	; 0x21
 800ef62:	6003      	str	r3, [r0, #0]
 800ef64:	e7c5      	b.n	800eef2 <pow+0xde>
 800ef66:	eeb0 0a48 	vmov.f32	s0, s16
 800ef6a:	eef0 0a68 	vmov.f32	s1, s17
 800ef6e:	f000 fee2 	bl	800fd36 <finite>
 800ef72:	9000      	str	r0, [sp, #0]
 800ef74:	2800      	cmp	r0, #0
 800ef76:	f040 8081 	bne.w	800f07c <pow+0x268>
 800ef7a:	ec47 6b10 	vmov	d0, r6, r7
 800ef7e:	f000 feda 	bl	800fd36 <finite>
 800ef82:	2800      	cmp	r0, #0
 800ef84:	d07a      	beq.n	800f07c <pow+0x268>
 800ef86:	ec45 4b10 	vmov	d0, r4, r5
 800ef8a:	f000 fed4 	bl	800fd36 <finite>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d074      	beq.n	800f07c <pow+0x268>
 800ef92:	ec53 2b18 	vmov	r2, r3, d8
 800ef96:	ee18 0a10 	vmov	r0, s16
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	f7f1 fdc6 	bl	8000b2c <__aeabi_dcmpun>
 800efa0:	f999 9000 	ldrsb.w	r9, [r9]
 800efa4:	4b4b      	ldr	r3, [pc, #300]	; (800f0d4 <pow+0x2c0>)
 800efa6:	b1b0      	cbz	r0, 800efd6 <pow+0x1c2>
 800efa8:	2201      	movs	r2, #1
 800efaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800efae:	9b00      	ldr	r3, [sp, #0]
 800efb0:	930a      	str	r3, [sp, #40]	; 0x28
 800efb2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800efb6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800efba:	f1b9 0f00 	cmp.w	r9, #0
 800efbe:	d0c4      	beq.n	800ef4a <pow+0x136>
 800efc0:	4652      	mov	r2, sl
 800efc2:	465b      	mov	r3, fp
 800efc4:	4650      	mov	r0, sl
 800efc6:	4659      	mov	r1, fp
 800efc8:	f7f1 fc40 	bl	800084c <__aeabi_ddiv>
 800efcc:	f1b9 0f02 	cmp.w	r9, #2
 800efd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800efd4:	e7c1      	b.n	800ef5a <pow+0x146>
 800efd6:	2203      	movs	r2, #3
 800efd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800efdc:	900a      	str	r0, [sp, #40]	; 0x28
 800efde:	4629      	mov	r1, r5
 800efe0:	4620      	mov	r0, r4
 800efe2:	2200      	movs	r2, #0
 800efe4:	4b3e      	ldr	r3, [pc, #248]	; (800f0e0 <pow+0x2cc>)
 800efe6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800efea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800efee:	f7f1 fb03 	bl	80005f8 <__aeabi_dmul>
 800eff2:	4604      	mov	r4, r0
 800eff4:	460d      	mov	r5, r1
 800eff6:	f1b9 0f00 	cmp.w	r9, #0
 800effa:	d124      	bne.n	800f046 <pow+0x232>
 800effc:	4b39      	ldr	r3, [pc, #228]	; (800f0e4 <pow+0x2d0>)
 800effe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f002:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f006:	4630      	mov	r0, r6
 800f008:	4652      	mov	r2, sl
 800f00a:	465b      	mov	r3, fp
 800f00c:	4639      	mov	r1, r7
 800f00e:	f7f1 fd65 	bl	8000adc <__aeabi_dcmplt>
 800f012:	2800      	cmp	r0, #0
 800f014:	d056      	beq.n	800f0c4 <pow+0x2b0>
 800f016:	ec45 4b10 	vmov	d0, r4, r5
 800f01a:	f000 fea1 	bl	800fd60 <rint>
 800f01e:	4622      	mov	r2, r4
 800f020:	462b      	mov	r3, r5
 800f022:	ec51 0b10 	vmov	r0, r1, d0
 800f026:	f7f1 fd4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f02a:	b920      	cbnz	r0, 800f036 <pow+0x222>
 800f02c:	4b2e      	ldr	r3, [pc, #184]	; (800f0e8 <pow+0x2d4>)
 800f02e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f032:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f036:	f998 3000 	ldrsb.w	r3, [r8]
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	d142      	bne.n	800f0c4 <pow+0x2b0>
 800f03e:	f7fb fc77 	bl	800a930 <__errno>
 800f042:	2322      	movs	r3, #34	; 0x22
 800f044:	e78d      	b.n	800ef62 <pow+0x14e>
 800f046:	4b29      	ldr	r3, [pc, #164]	; (800f0ec <pow+0x2d8>)
 800f048:	2200      	movs	r2, #0
 800f04a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f04e:	4630      	mov	r0, r6
 800f050:	4652      	mov	r2, sl
 800f052:	465b      	mov	r3, fp
 800f054:	4639      	mov	r1, r7
 800f056:	f7f1 fd41 	bl	8000adc <__aeabi_dcmplt>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	d0eb      	beq.n	800f036 <pow+0x222>
 800f05e:	ec45 4b10 	vmov	d0, r4, r5
 800f062:	f000 fe7d 	bl	800fd60 <rint>
 800f066:	4622      	mov	r2, r4
 800f068:	462b      	mov	r3, r5
 800f06a:	ec51 0b10 	vmov	r0, r1, d0
 800f06e:	f7f1 fd2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f072:	2800      	cmp	r0, #0
 800f074:	d1df      	bne.n	800f036 <pow+0x222>
 800f076:	2200      	movs	r2, #0
 800f078:	4b18      	ldr	r3, [pc, #96]	; (800f0dc <pow+0x2c8>)
 800f07a:	e7da      	b.n	800f032 <pow+0x21e>
 800f07c:	2200      	movs	r2, #0
 800f07e:	2300      	movs	r3, #0
 800f080:	ec51 0b18 	vmov	r0, r1, d8
 800f084:	f7f1 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 800f088:	2800      	cmp	r0, #0
 800f08a:	f43f af3a 	beq.w	800ef02 <pow+0xee>
 800f08e:	ec47 6b10 	vmov	d0, r6, r7
 800f092:	f000 fe50 	bl	800fd36 <finite>
 800f096:	2800      	cmp	r0, #0
 800f098:	f43f af33 	beq.w	800ef02 <pow+0xee>
 800f09c:	ec45 4b10 	vmov	d0, r4, r5
 800f0a0:	f000 fe49 	bl	800fd36 <finite>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	f43f af2c 	beq.w	800ef02 <pow+0xee>
 800f0aa:	2304      	movs	r3, #4
 800f0ac:	9302      	str	r3, [sp, #8]
 800f0ae:	4b09      	ldr	r3, [pc, #36]	; (800f0d4 <pow+0x2c0>)
 800f0b0:	9303      	str	r3, [sp, #12]
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	930a      	str	r3, [sp, #40]	; 0x28
 800f0b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f0ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800f0be:	ed8d 9b08 	vstr	d9, [sp, #32]
 800f0c2:	e7b8      	b.n	800f036 <pow+0x222>
 800f0c4:	a802      	add	r0, sp, #8
 800f0c6:	f000 fe3e 	bl	800fd46 <matherr>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	f47f af11 	bne.w	800eef2 <pow+0xde>
 800f0d0:	e7b5      	b.n	800f03e <pow+0x22a>
 800f0d2:	bf00      	nop
 800f0d4:	0801064e 	.word	0x0801064e
 800f0d8:	3ff00000 	.word	0x3ff00000
 800f0dc:	fff00000 	.word	0xfff00000
 800f0e0:	3fe00000 	.word	0x3fe00000
 800f0e4:	47efffff 	.word	0x47efffff
 800f0e8:	c7efffff 	.word	0xc7efffff
 800f0ec:	7ff00000 	.word	0x7ff00000
 800f0f0:	200001dc 	.word	0x200001dc

0800f0f4 <sqrt>:
 800f0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f0f8:	ed2d 8b02 	vpush	{d8}
 800f0fc:	b08b      	sub	sp, #44	; 0x2c
 800f0fe:	ec55 4b10 	vmov	r4, r5, d0
 800f102:	f000 fd5f 	bl	800fbc4 <__ieee754_sqrt>
 800f106:	4b26      	ldr	r3, [pc, #152]	; (800f1a0 <sqrt+0xac>)
 800f108:	eeb0 8a40 	vmov.f32	s16, s0
 800f10c:	eef0 8a60 	vmov.f32	s17, s1
 800f110:	f993 6000 	ldrsb.w	r6, [r3]
 800f114:	1c73      	adds	r3, r6, #1
 800f116:	d02a      	beq.n	800f16e <sqrt+0x7a>
 800f118:	4622      	mov	r2, r4
 800f11a:	462b      	mov	r3, r5
 800f11c:	4620      	mov	r0, r4
 800f11e:	4629      	mov	r1, r5
 800f120:	f7f1 fd04 	bl	8000b2c <__aeabi_dcmpun>
 800f124:	4607      	mov	r7, r0
 800f126:	bb10      	cbnz	r0, 800f16e <sqrt+0x7a>
 800f128:	f04f 0800 	mov.w	r8, #0
 800f12c:	f04f 0900 	mov.w	r9, #0
 800f130:	4642      	mov	r2, r8
 800f132:	464b      	mov	r3, r9
 800f134:	4620      	mov	r0, r4
 800f136:	4629      	mov	r1, r5
 800f138:	f7f1 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800f13c:	b1b8      	cbz	r0, 800f16e <sqrt+0x7a>
 800f13e:	2301      	movs	r3, #1
 800f140:	9300      	str	r3, [sp, #0]
 800f142:	4b18      	ldr	r3, [pc, #96]	; (800f1a4 <sqrt+0xb0>)
 800f144:	9301      	str	r3, [sp, #4]
 800f146:	9708      	str	r7, [sp, #32]
 800f148:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800f14c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f150:	b9b6      	cbnz	r6, 800f180 <sqrt+0x8c>
 800f152:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800f156:	4668      	mov	r0, sp
 800f158:	f000 fdf5 	bl	800fd46 <matherr>
 800f15c:	b1d0      	cbz	r0, 800f194 <sqrt+0xa0>
 800f15e:	9b08      	ldr	r3, [sp, #32]
 800f160:	b11b      	cbz	r3, 800f16a <sqrt+0x76>
 800f162:	f7fb fbe5 	bl	800a930 <__errno>
 800f166:	9b08      	ldr	r3, [sp, #32]
 800f168:	6003      	str	r3, [r0, #0]
 800f16a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800f16e:	eeb0 0a48 	vmov.f32	s0, s16
 800f172:	eef0 0a68 	vmov.f32	s1, s17
 800f176:	b00b      	add	sp, #44	; 0x2c
 800f178:	ecbd 8b02 	vpop	{d8}
 800f17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f180:	4642      	mov	r2, r8
 800f182:	464b      	mov	r3, r9
 800f184:	4640      	mov	r0, r8
 800f186:	4649      	mov	r1, r9
 800f188:	f7f1 fb60 	bl	800084c <__aeabi_ddiv>
 800f18c:	2e02      	cmp	r6, #2
 800f18e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f192:	d1e0      	bne.n	800f156 <sqrt+0x62>
 800f194:	f7fb fbcc 	bl	800a930 <__errno>
 800f198:	2321      	movs	r3, #33	; 0x21
 800f19a:	6003      	str	r3, [r0, #0]
 800f19c:	e7df      	b.n	800f15e <sqrt+0x6a>
 800f19e:	bf00      	nop
 800f1a0:	200001dc 	.word	0x200001dc
 800f1a4:	08010652 	.word	0x08010652

0800f1a8 <__ieee754_pow>:
 800f1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ac:	b091      	sub	sp, #68	; 0x44
 800f1ae:	ed8d 1b00 	vstr	d1, [sp]
 800f1b2:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f1b6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f1ba:	ea58 0302 	orrs.w	r3, r8, r2
 800f1be:	ec57 6b10 	vmov	r6, r7, d0
 800f1c2:	f000 84be 	beq.w	800fb42 <__ieee754_pow+0x99a>
 800f1c6:	4b7a      	ldr	r3, [pc, #488]	; (800f3b0 <__ieee754_pow+0x208>)
 800f1c8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f1cc:	429c      	cmp	r4, r3
 800f1ce:	463d      	mov	r5, r7
 800f1d0:	ee10 aa10 	vmov	sl, s0
 800f1d4:	dc09      	bgt.n	800f1ea <__ieee754_pow+0x42>
 800f1d6:	d103      	bne.n	800f1e0 <__ieee754_pow+0x38>
 800f1d8:	b93e      	cbnz	r6, 800f1ea <__ieee754_pow+0x42>
 800f1da:	45a0      	cmp	r8, r4
 800f1dc:	dc0d      	bgt.n	800f1fa <__ieee754_pow+0x52>
 800f1de:	e001      	b.n	800f1e4 <__ieee754_pow+0x3c>
 800f1e0:	4598      	cmp	r8, r3
 800f1e2:	dc02      	bgt.n	800f1ea <__ieee754_pow+0x42>
 800f1e4:	4598      	cmp	r8, r3
 800f1e6:	d10e      	bne.n	800f206 <__ieee754_pow+0x5e>
 800f1e8:	b16a      	cbz	r2, 800f206 <__ieee754_pow+0x5e>
 800f1ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f1ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f1f2:	ea54 030a 	orrs.w	r3, r4, sl
 800f1f6:	f000 84a4 	beq.w	800fb42 <__ieee754_pow+0x99a>
 800f1fa:	486e      	ldr	r0, [pc, #440]	; (800f3b4 <__ieee754_pow+0x20c>)
 800f1fc:	b011      	add	sp, #68	; 0x44
 800f1fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f202:	f000 bda5 	b.w	800fd50 <nan>
 800f206:	2d00      	cmp	r5, #0
 800f208:	da53      	bge.n	800f2b2 <__ieee754_pow+0x10a>
 800f20a:	4b6b      	ldr	r3, [pc, #428]	; (800f3b8 <__ieee754_pow+0x210>)
 800f20c:	4598      	cmp	r8, r3
 800f20e:	dc4d      	bgt.n	800f2ac <__ieee754_pow+0x104>
 800f210:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f214:	4598      	cmp	r8, r3
 800f216:	dd4c      	ble.n	800f2b2 <__ieee754_pow+0x10a>
 800f218:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f21c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f220:	2b14      	cmp	r3, #20
 800f222:	dd26      	ble.n	800f272 <__ieee754_pow+0xca>
 800f224:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f228:	fa22 f103 	lsr.w	r1, r2, r3
 800f22c:	fa01 f303 	lsl.w	r3, r1, r3
 800f230:	4293      	cmp	r3, r2
 800f232:	d13e      	bne.n	800f2b2 <__ieee754_pow+0x10a>
 800f234:	f001 0101 	and.w	r1, r1, #1
 800f238:	f1c1 0b02 	rsb	fp, r1, #2
 800f23c:	2a00      	cmp	r2, #0
 800f23e:	d15b      	bne.n	800f2f8 <__ieee754_pow+0x150>
 800f240:	4b5b      	ldr	r3, [pc, #364]	; (800f3b0 <__ieee754_pow+0x208>)
 800f242:	4598      	cmp	r8, r3
 800f244:	d124      	bne.n	800f290 <__ieee754_pow+0xe8>
 800f246:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f24a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f24e:	ea53 030a 	orrs.w	r3, r3, sl
 800f252:	f000 8476 	beq.w	800fb42 <__ieee754_pow+0x99a>
 800f256:	4b59      	ldr	r3, [pc, #356]	; (800f3bc <__ieee754_pow+0x214>)
 800f258:	429c      	cmp	r4, r3
 800f25a:	dd2d      	ble.n	800f2b8 <__ieee754_pow+0x110>
 800f25c:	f1b9 0f00 	cmp.w	r9, #0
 800f260:	f280 8473 	bge.w	800fb4a <__ieee754_pow+0x9a2>
 800f264:	2000      	movs	r0, #0
 800f266:	2100      	movs	r1, #0
 800f268:	ec41 0b10 	vmov	d0, r0, r1
 800f26c:	b011      	add	sp, #68	; 0x44
 800f26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f272:	2a00      	cmp	r2, #0
 800f274:	d13e      	bne.n	800f2f4 <__ieee754_pow+0x14c>
 800f276:	f1c3 0314 	rsb	r3, r3, #20
 800f27a:	fa48 f103 	asr.w	r1, r8, r3
 800f27e:	fa01 f303 	lsl.w	r3, r1, r3
 800f282:	4543      	cmp	r3, r8
 800f284:	f040 8469 	bne.w	800fb5a <__ieee754_pow+0x9b2>
 800f288:	f001 0101 	and.w	r1, r1, #1
 800f28c:	f1c1 0b02 	rsb	fp, r1, #2
 800f290:	4b4b      	ldr	r3, [pc, #300]	; (800f3c0 <__ieee754_pow+0x218>)
 800f292:	4598      	cmp	r8, r3
 800f294:	d118      	bne.n	800f2c8 <__ieee754_pow+0x120>
 800f296:	f1b9 0f00 	cmp.w	r9, #0
 800f29a:	f280 845a 	bge.w	800fb52 <__ieee754_pow+0x9aa>
 800f29e:	4948      	ldr	r1, [pc, #288]	; (800f3c0 <__ieee754_pow+0x218>)
 800f2a0:	4632      	mov	r2, r6
 800f2a2:	463b      	mov	r3, r7
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	f7f1 fad1 	bl	800084c <__aeabi_ddiv>
 800f2aa:	e7dd      	b.n	800f268 <__ieee754_pow+0xc0>
 800f2ac:	f04f 0b02 	mov.w	fp, #2
 800f2b0:	e7c4      	b.n	800f23c <__ieee754_pow+0x94>
 800f2b2:	f04f 0b00 	mov.w	fp, #0
 800f2b6:	e7c1      	b.n	800f23c <__ieee754_pow+0x94>
 800f2b8:	f1b9 0f00 	cmp.w	r9, #0
 800f2bc:	dad2      	bge.n	800f264 <__ieee754_pow+0xbc>
 800f2be:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f2c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f2c6:	e7cf      	b.n	800f268 <__ieee754_pow+0xc0>
 800f2c8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f2cc:	d106      	bne.n	800f2dc <__ieee754_pow+0x134>
 800f2ce:	4632      	mov	r2, r6
 800f2d0:	463b      	mov	r3, r7
 800f2d2:	4610      	mov	r0, r2
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	f7f1 f98f 	bl	80005f8 <__aeabi_dmul>
 800f2da:	e7c5      	b.n	800f268 <__ieee754_pow+0xc0>
 800f2dc:	4b39      	ldr	r3, [pc, #228]	; (800f3c4 <__ieee754_pow+0x21c>)
 800f2de:	4599      	cmp	r9, r3
 800f2e0:	d10a      	bne.n	800f2f8 <__ieee754_pow+0x150>
 800f2e2:	2d00      	cmp	r5, #0
 800f2e4:	db08      	blt.n	800f2f8 <__ieee754_pow+0x150>
 800f2e6:	ec47 6b10 	vmov	d0, r6, r7
 800f2ea:	b011      	add	sp, #68	; 0x44
 800f2ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f0:	f000 bc68 	b.w	800fbc4 <__ieee754_sqrt>
 800f2f4:	f04f 0b00 	mov.w	fp, #0
 800f2f8:	ec47 6b10 	vmov	d0, r6, r7
 800f2fc:	f000 fd12 	bl	800fd24 <fabs>
 800f300:	ec51 0b10 	vmov	r0, r1, d0
 800f304:	f1ba 0f00 	cmp.w	sl, #0
 800f308:	d127      	bne.n	800f35a <__ieee754_pow+0x1b2>
 800f30a:	b124      	cbz	r4, 800f316 <__ieee754_pow+0x16e>
 800f30c:	4b2c      	ldr	r3, [pc, #176]	; (800f3c0 <__ieee754_pow+0x218>)
 800f30e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f312:	429a      	cmp	r2, r3
 800f314:	d121      	bne.n	800f35a <__ieee754_pow+0x1b2>
 800f316:	f1b9 0f00 	cmp.w	r9, #0
 800f31a:	da05      	bge.n	800f328 <__ieee754_pow+0x180>
 800f31c:	4602      	mov	r2, r0
 800f31e:	460b      	mov	r3, r1
 800f320:	2000      	movs	r0, #0
 800f322:	4927      	ldr	r1, [pc, #156]	; (800f3c0 <__ieee754_pow+0x218>)
 800f324:	f7f1 fa92 	bl	800084c <__aeabi_ddiv>
 800f328:	2d00      	cmp	r5, #0
 800f32a:	da9d      	bge.n	800f268 <__ieee754_pow+0xc0>
 800f32c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f330:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f334:	ea54 030b 	orrs.w	r3, r4, fp
 800f338:	d108      	bne.n	800f34c <__ieee754_pow+0x1a4>
 800f33a:	4602      	mov	r2, r0
 800f33c:	460b      	mov	r3, r1
 800f33e:	4610      	mov	r0, r2
 800f340:	4619      	mov	r1, r3
 800f342:	f7f0 ffa1 	bl	8000288 <__aeabi_dsub>
 800f346:	4602      	mov	r2, r0
 800f348:	460b      	mov	r3, r1
 800f34a:	e7ac      	b.n	800f2a6 <__ieee754_pow+0xfe>
 800f34c:	f1bb 0f01 	cmp.w	fp, #1
 800f350:	d18a      	bne.n	800f268 <__ieee754_pow+0xc0>
 800f352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f356:	4619      	mov	r1, r3
 800f358:	e786      	b.n	800f268 <__ieee754_pow+0xc0>
 800f35a:	0fed      	lsrs	r5, r5, #31
 800f35c:	1e6b      	subs	r3, r5, #1
 800f35e:	930d      	str	r3, [sp, #52]	; 0x34
 800f360:	ea5b 0303 	orrs.w	r3, fp, r3
 800f364:	d102      	bne.n	800f36c <__ieee754_pow+0x1c4>
 800f366:	4632      	mov	r2, r6
 800f368:	463b      	mov	r3, r7
 800f36a:	e7e8      	b.n	800f33e <__ieee754_pow+0x196>
 800f36c:	4b16      	ldr	r3, [pc, #88]	; (800f3c8 <__ieee754_pow+0x220>)
 800f36e:	4598      	cmp	r8, r3
 800f370:	f340 80fe 	ble.w	800f570 <__ieee754_pow+0x3c8>
 800f374:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f378:	4598      	cmp	r8, r3
 800f37a:	dd0a      	ble.n	800f392 <__ieee754_pow+0x1ea>
 800f37c:	4b0f      	ldr	r3, [pc, #60]	; (800f3bc <__ieee754_pow+0x214>)
 800f37e:	429c      	cmp	r4, r3
 800f380:	dc0d      	bgt.n	800f39e <__ieee754_pow+0x1f6>
 800f382:	f1b9 0f00 	cmp.w	r9, #0
 800f386:	f6bf af6d 	bge.w	800f264 <__ieee754_pow+0xbc>
 800f38a:	a307      	add	r3, pc, #28	; (adr r3, 800f3a8 <__ieee754_pow+0x200>)
 800f38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f390:	e79f      	b.n	800f2d2 <__ieee754_pow+0x12a>
 800f392:	4b0e      	ldr	r3, [pc, #56]	; (800f3cc <__ieee754_pow+0x224>)
 800f394:	429c      	cmp	r4, r3
 800f396:	ddf4      	ble.n	800f382 <__ieee754_pow+0x1da>
 800f398:	4b09      	ldr	r3, [pc, #36]	; (800f3c0 <__ieee754_pow+0x218>)
 800f39a:	429c      	cmp	r4, r3
 800f39c:	dd18      	ble.n	800f3d0 <__ieee754_pow+0x228>
 800f39e:	f1b9 0f00 	cmp.w	r9, #0
 800f3a2:	dcf2      	bgt.n	800f38a <__ieee754_pow+0x1e2>
 800f3a4:	e75e      	b.n	800f264 <__ieee754_pow+0xbc>
 800f3a6:	bf00      	nop
 800f3a8:	8800759c 	.word	0x8800759c
 800f3ac:	7e37e43c 	.word	0x7e37e43c
 800f3b0:	7ff00000 	.word	0x7ff00000
 800f3b4:	08010541 	.word	0x08010541
 800f3b8:	433fffff 	.word	0x433fffff
 800f3bc:	3fefffff 	.word	0x3fefffff
 800f3c0:	3ff00000 	.word	0x3ff00000
 800f3c4:	3fe00000 	.word	0x3fe00000
 800f3c8:	41e00000 	.word	0x41e00000
 800f3cc:	3feffffe 	.word	0x3feffffe
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	4b63      	ldr	r3, [pc, #396]	; (800f560 <__ieee754_pow+0x3b8>)
 800f3d4:	f7f0 ff58 	bl	8000288 <__aeabi_dsub>
 800f3d8:	a355      	add	r3, pc, #340	; (adr r3, 800f530 <__ieee754_pow+0x388>)
 800f3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3de:	4604      	mov	r4, r0
 800f3e0:	460d      	mov	r5, r1
 800f3e2:	f7f1 f909 	bl	80005f8 <__aeabi_dmul>
 800f3e6:	a354      	add	r3, pc, #336	; (adr r3, 800f538 <__ieee754_pow+0x390>)
 800f3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ec:	4606      	mov	r6, r0
 800f3ee:	460f      	mov	r7, r1
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	f7f1 f900 	bl	80005f8 <__aeabi_dmul>
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3fe:	4b59      	ldr	r3, [pc, #356]	; (800f564 <__ieee754_pow+0x3bc>)
 800f400:	4620      	mov	r0, r4
 800f402:	4629      	mov	r1, r5
 800f404:	f7f1 f8f8 	bl	80005f8 <__aeabi_dmul>
 800f408:	4602      	mov	r2, r0
 800f40a:	460b      	mov	r3, r1
 800f40c:	a14c      	add	r1, pc, #304	; (adr r1, 800f540 <__ieee754_pow+0x398>)
 800f40e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f412:	f7f0 ff39 	bl	8000288 <__aeabi_dsub>
 800f416:	4622      	mov	r2, r4
 800f418:	462b      	mov	r3, r5
 800f41a:	f7f1 f8ed 	bl	80005f8 <__aeabi_dmul>
 800f41e:	4602      	mov	r2, r0
 800f420:	460b      	mov	r3, r1
 800f422:	2000      	movs	r0, #0
 800f424:	4950      	ldr	r1, [pc, #320]	; (800f568 <__ieee754_pow+0x3c0>)
 800f426:	f7f0 ff2f 	bl	8000288 <__aeabi_dsub>
 800f42a:	4622      	mov	r2, r4
 800f42c:	462b      	mov	r3, r5
 800f42e:	4680      	mov	r8, r0
 800f430:	4689      	mov	r9, r1
 800f432:	4620      	mov	r0, r4
 800f434:	4629      	mov	r1, r5
 800f436:	f7f1 f8df 	bl	80005f8 <__aeabi_dmul>
 800f43a:	4602      	mov	r2, r0
 800f43c:	460b      	mov	r3, r1
 800f43e:	4640      	mov	r0, r8
 800f440:	4649      	mov	r1, r9
 800f442:	f7f1 f8d9 	bl	80005f8 <__aeabi_dmul>
 800f446:	a340      	add	r3, pc, #256	; (adr r3, 800f548 <__ieee754_pow+0x3a0>)
 800f448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44c:	f7f1 f8d4 	bl	80005f8 <__aeabi_dmul>
 800f450:	4602      	mov	r2, r0
 800f452:	460b      	mov	r3, r1
 800f454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f458:	f7f0 ff16 	bl	8000288 <__aeabi_dsub>
 800f45c:	4602      	mov	r2, r0
 800f45e:	460b      	mov	r3, r1
 800f460:	4604      	mov	r4, r0
 800f462:	460d      	mov	r5, r1
 800f464:	4630      	mov	r0, r6
 800f466:	4639      	mov	r1, r7
 800f468:	f7f0 ff10 	bl	800028c <__adddf3>
 800f46c:	2000      	movs	r0, #0
 800f46e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f472:	4632      	mov	r2, r6
 800f474:	463b      	mov	r3, r7
 800f476:	f7f0 ff07 	bl	8000288 <__aeabi_dsub>
 800f47a:	4602      	mov	r2, r0
 800f47c:	460b      	mov	r3, r1
 800f47e:	4620      	mov	r0, r4
 800f480:	4629      	mov	r1, r5
 800f482:	f7f0 ff01 	bl	8000288 <__aeabi_dsub>
 800f486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f488:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f48c:	4313      	orrs	r3, r2
 800f48e:	4606      	mov	r6, r0
 800f490:	460f      	mov	r7, r1
 800f492:	f040 81eb 	bne.w	800f86c <__ieee754_pow+0x6c4>
 800f496:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f550 <__ieee754_pow+0x3a8>
 800f49a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f49e:	2400      	movs	r4, #0
 800f4a0:	4622      	mov	r2, r4
 800f4a2:	462b      	mov	r3, r5
 800f4a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f4ac:	f7f0 feec 	bl	8000288 <__aeabi_dsub>
 800f4b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4b4:	f7f1 f8a0 	bl	80005f8 <__aeabi_dmul>
 800f4b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4bc:	4680      	mov	r8, r0
 800f4be:	4689      	mov	r9, r1
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	4639      	mov	r1, r7
 800f4c4:	f7f1 f898 	bl	80005f8 <__aeabi_dmul>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	460b      	mov	r3, r1
 800f4cc:	4640      	mov	r0, r8
 800f4ce:	4649      	mov	r1, r9
 800f4d0:	f7f0 fedc 	bl	800028c <__adddf3>
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	462b      	mov	r3, r5
 800f4d8:	4680      	mov	r8, r0
 800f4da:	4689      	mov	r9, r1
 800f4dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4e0:	f7f1 f88a 	bl	80005f8 <__aeabi_dmul>
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	460d      	mov	r5, r1
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	4640      	mov	r0, r8
 800f4f0:	e9cd 4500 	strd	r4, r5, [sp]
 800f4f4:	f7f0 feca 	bl	800028c <__adddf3>
 800f4f8:	4b1c      	ldr	r3, [pc, #112]	; (800f56c <__ieee754_pow+0x3c4>)
 800f4fa:	4299      	cmp	r1, r3
 800f4fc:	4606      	mov	r6, r0
 800f4fe:	460f      	mov	r7, r1
 800f500:	468b      	mov	fp, r1
 800f502:	f340 82f7 	ble.w	800faf4 <__ieee754_pow+0x94c>
 800f506:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f50a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f50e:	4303      	orrs	r3, r0
 800f510:	f000 81ea 	beq.w	800f8e8 <__ieee754_pow+0x740>
 800f514:	a310      	add	r3, pc, #64	; (adr r3, 800f558 <__ieee754_pow+0x3b0>)
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f51e:	f7f1 f86b 	bl	80005f8 <__aeabi_dmul>
 800f522:	a30d      	add	r3, pc, #52	; (adr r3, 800f558 <__ieee754_pow+0x3b0>)
 800f524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f528:	e6d5      	b.n	800f2d6 <__ieee754_pow+0x12e>
 800f52a:	bf00      	nop
 800f52c:	f3af 8000 	nop.w
 800f530:	60000000 	.word	0x60000000
 800f534:	3ff71547 	.word	0x3ff71547
 800f538:	f85ddf44 	.word	0xf85ddf44
 800f53c:	3e54ae0b 	.word	0x3e54ae0b
 800f540:	55555555 	.word	0x55555555
 800f544:	3fd55555 	.word	0x3fd55555
 800f548:	652b82fe 	.word	0x652b82fe
 800f54c:	3ff71547 	.word	0x3ff71547
 800f550:	00000000 	.word	0x00000000
 800f554:	bff00000 	.word	0xbff00000
 800f558:	8800759c 	.word	0x8800759c
 800f55c:	7e37e43c 	.word	0x7e37e43c
 800f560:	3ff00000 	.word	0x3ff00000
 800f564:	3fd00000 	.word	0x3fd00000
 800f568:	3fe00000 	.word	0x3fe00000
 800f56c:	408fffff 	.word	0x408fffff
 800f570:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f574:	f04f 0200 	mov.w	r2, #0
 800f578:	da05      	bge.n	800f586 <__ieee754_pow+0x3de>
 800f57a:	4bd3      	ldr	r3, [pc, #844]	; (800f8c8 <__ieee754_pow+0x720>)
 800f57c:	f7f1 f83c 	bl	80005f8 <__aeabi_dmul>
 800f580:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f584:	460c      	mov	r4, r1
 800f586:	1523      	asrs	r3, r4, #20
 800f588:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f58c:	4413      	add	r3, r2
 800f58e:	9309      	str	r3, [sp, #36]	; 0x24
 800f590:	4bce      	ldr	r3, [pc, #824]	; (800f8cc <__ieee754_pow+0x724>)
 800f592:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f596:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f59a:	429c      	cmp	r4, r3
 800f59c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f5a0:	dd08      	ble.n	800f5b4 <__ieee754_pow+0x40c>
 800f5a2:	4bcb      	ldr	r3, [pc, #812]	; (800f8d0 <__ieee754_pow+0x728>)
 800f5a4:	429c      	cmp	r4, r3
 800f5a6:	f340 815e 	ble.w	800f866 <__ieee754_pow+0x6be>
 800f5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	9309      	str	r3, [sp, #36]	; 0x24
 800f5b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f5b4:	f04f 0a00 	mov.w	sl, #0
 800f5b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f5bc:	930c      	str	r3, [sp, #48]	; 0x30
 800f5be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5c0:	4bc4      	ldr	r3, [pc, #784]	; (800f8d4 <__ieee754_pow+0x72c>)
 800f5c2:	4413      	add	r3, r2
 800f5c4:	ed93 7b00 	vldr	d7, [r3]
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	ec53 2b17 	vmov	r2, r3, d7
 800f5ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f5d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f5d6:	f7f0 fe57 	bl	8000288 <__aeabi_dsub>
 800f5da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f5de:	4606      	mov	r6, r0
 800f5e0:	460f      	mov	r7, r1
 800f5e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5e6:	f7f0 fe51 	bl	800028c <__adddf3>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	49b9      	ldr	r1, [pc, #740]	; (800f8d8 <__ieee754_pow+0x730>)
 800f5f2:	f7f1 f92b 	bl	800084c <__aeabi_ddiv>
 800f5f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	4630      	mov	r0, r6
 800f600:	4639      	mov	r1, r7
 800f602:	f7f0 fff9 	bl	80005f8 <__aeabi_dmul>
 800f606:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f60a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f60e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f612:	2300      	movs	r3, #0
 800f614:	9302      	str	r3, [sp, #8]
 800f616:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f61a:	106d      	asrs	r5, r5, #1
 800f61c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f620:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f624:	2200      	movs	r2, #0
 800f626:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f62a:	4640      	mov	r0, r8
 800f62c:	4649      	mov	r1, r9
 800f62e:	4614      	mov	r4, r2
 800f630:	461d      	mov	r5, r3
 800f632:	f7f0 ffe1 	bl	80005f8 <__aeabi_dmul>
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	4630      	mov	r0, r6
 800f63c:	4639      	mov	r1, r7
 800f63e:	f7f0 fe23 	bl	8000288 <__aeabi_dsub>
 800f642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f646:	4606      	mov	r6, r0
 800f648:	460f      	mov	r7, r1
 800f64a:	4620      	mov	r0, r4
 800f64c:	4629      	mov	r1, r5
 800f64e:	f7f0 fe1b 	bl	8000288 <__aeabi_dsub>
 800f652:	4602      	mov	r2, r0
 800f654:	460b      	mov	r3, r1
 800f656:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f65a:	f7f0 fe15 	bl	8000288 <__aeabi_dsub>
 800f65e:	4642      	mov	r2, r8
 800f660:	464b      	mov	r3, r9
 800f662:	f7f0 ffc9 	bl	80005f8 <__aeabi_dmul>
 800f666:	4602      	mov	r2, r0
 800f668:	460b      	mov	r3, r1
 800f66a:	4630      	mov	r0, r6
 800f66c:	4639      	mov	r1, r7
 800f66e:	f7f0 fe0b 	bl	8000288 <__aeabi_dsub>
 800f672:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f676:	f7f0 ffbf 	bl	80005f8 <__aeabi_dmul>
 800f67a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f67e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f682:	4610      	mov	r0, r2
 800f684:	4619      	mov	r1, r3
 800f686:	f7f0 ffb7 	bl	80005f8 <__aeabi_dmul>
 800f68a:	a37b      	add	r3, pc, #492	; (adr r3, 800f878 <__ieee754_pow+0x6d0>)
 800f68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f690:	4604      	mov	r4, r0
 800f692:	460d      	mov	r5, r1
 800f694:	f7f0 ffb0 	bl	80005f8 <__aeabi_dmul>
 800f698:	a379      	add	r3, pc, #484	; (adr r3, 800f880 <__ieee754_pow+0x6d8>)
 800f69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69e:	f7f0 fdf5 	bl	800028c <__adddf3>
 800f6a2:	4622      	mov	r2, r4
 800f6a4:	462b      	mov	r3, r5
 800f6a6:	f7f0 ffa7 	bl	80005f8 <__aeabi_dmul>
 800f6aa:	a377      	add	r3, pc, #476	; (adr r3, 800f888 <__ieee754_pow+0x6e0>)
 800f6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b0:	f7f0 fdec 	bl	800028c <__adddf3>
 800f6b4:	4622      	mov	r2, r4
 800f6b6:	462b      	mov	r3, r5
 800f6b8:	f7f0 ff9e 	bl	80005f8 <__aeabi_dmul>
 800f6bc:	a374      	add	r3, pc, #464	; (adr r3, 800f890 <__ieee754_pow+0x6e8>)
 800f6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c2:	f7f0 fde3 	bl	800028c <__adddf3>
 800f6c6:	4622      	mov	r2, r4
 800f6c8:	462b      	mov	r3, r5
 800f6ca:	f7f0 ff95 	bl	80005f8 <__aeabi_dmul>
 800f6ce:	a372      	add	r3, pc, #456	; (adr r3, 800f898 <__ieee754_pow+0x6f0>)
 800f6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d4:	f7f0 fdda 	bl	800028c <__adddf3>
 800f6d8:	4622      	mov	r2, r4
 800f6da:	462b      	mov	r3, r5
 800f6dc:	f7f0 ff8c 	bl	80005f8 <__aeabi_dmul>
 800f6e0:	a36f      	add	r3, pc, #444	; (adr r3, 800f8a0 <__ieee754_pow+0x6f8>)
 800f6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e6:	f7f0 fdd1 	bl	800028c <__adddf3>
 800f6ea:	4622      	mov	r2, r4
 800f6ec:	4606      	mov	r6, r0
 800f6ee:	460f      	mov	r7, r1
 800f6f0:	462b      	mov	r3, r5
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	f7f0 ff7f 	bl	80005f8 <__aeabi_dmul>
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	4630      	mov	r0, r6
 800f700:	4639      	mov	r1, r7
 800f702:	f7f0 ff79 	bl	80005f8 <__aeabi_dmul>
 800f706:	4642      	mov	r2, r8
 800f708:	4604      	mov	r4, r0
 800f70a:	460d      	mov	r5, r1
 800f70c:	464b      	mov	r3, r9
 800f70e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f712:	f7f0 fdbb 	bl	800028c <__adddf3>
 800f716:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f71a:	f7f0 ff6d 	bl	80005f8 <__aeabi_dmul>
 800f71e:	4622      	mov	r2, r4
 800f720:	462b      	mov	r3, r5
 800f722:	f7f0 fdb3 	bl	800028c <__adddf3>
 800f726:	4642      	mov	r2, r8
 800f728:	4606      	mov	r6, r0
 800f72a:	460f      	mov	r7, r1
 800f72c:	464b      	mov	r3, r9
 800f72e:	4640      	mov	r0, r8
 800f730:	4649      	mov	r1, r9
 800f732:	f7f0 ff61 	bl	80005f8 <__aeabi_dmul>
 800f736:	2200      	movs	r2, #0
 800f738:	4b68      	ldr	r3, [pc, #416]	; (800f8dc <__ieee754_pow+0x734>)
 800f73a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f73e:	f7f0 fda5 	bl	800028c <__adddf3>
 800f742:	4632      	mov	r2, r6
 800f744:	463b      	mov	r3, r7
 800f746:	f7f0 fda1 	bl	800028c <__adddf3>
 800f74a:	9802      	ldr	r0, [sp, #8]
 800f74c:	460d      	mov	r5, r1
 800f74e:	4604      	mov	r4, r0
 800f750:	4602      	mov	r2, r0
 800f752:	460b      	mov	r3, r1
 800f754:	4640      	mov	r0, r8
 800f756:	4649      	mov	r1, r9
 800f758:	f7f0 ff4e 	bl	80005f8 <__aeabi_dmul>
 800f75c:	2200      	movs	r2, #0
 800f75e:	4680      	mov	r8, r0
 800f760:	4689      	mov	r9, r1
 800f762:	4b5e      	ldr	r3, [pc, #376]	; (800f8dc <__ieee754_pow+0x734>)
 800f764:	4620      	mov	r0, r4
 800f766:	4629      	mov	r1, r5
 800f768:	f7f0 fd8e 	bl	8000288 <__aeabi_dsub>
 800f76c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f770:	f7f0 fd8a 	bl	8000288 <__aeabi_dsub>
 800f774:	4602      	mov	r2, r0
 800f776:	460b      	mov	r3, r1
 800f778:	4630      	mov	r0, r6
 800f77a:	4639      	mov	r1, r7
 800f77c:	f7f0 fd84 	bl	8000288 <__aeabi_dsub>
 800f780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f784:	f7f0 ff38 	bl	80005f8 <__aeabi_dmul>
 800f788:	4622      	mov	r2, r4
 800f78a:	4606      	mov	r6, r0
 800f78c:	460f      	mov	r7, r1
 800f78e:	462b      	mov	r3, r5
 800f790:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f794:	f7f0 ff30 	bl	80005f8 <__aeabi_dmul>
 800f798:	4602      	mov	r2, r0
 800f79a:	460b      	mov	r3, r1
 800f79c:	4630      	mov	r0, r6
 800f79e:	4639      	mov	r1, r7
 800f7a0:	f7f0 fd74 	bl	800028c <__adddf3>
 800f7a4:	4606      	mov	r6, r0
 800f7a6:	460f      	mov	r7, r1
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	460b      	mov	r3, r1
 800f7ac:	4640      	mov	r0, r8
 800f7ae:	4649      	mov	r1, r9
 800f7b0:	f7f0 fd6c 	bl	800028c <__adddf3>
 800f7b4:	9802      	ldr	r0, [sp, #8]
 800f7b6:	a33c      	add	r3, pc, #240	; (adr r3, 800f8a8 <__ieee754_pow+0x700>)
 800f7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7bc:	4604      	mov	r4, r0
 800f7be:	460d      	mov	r5, r1
 800f7c0:	f7f0 ff1a 	bl	80005f8 <__aeabi_dmul>
 800f7c4:	4642      	mov	r2, r8
 800f7c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f7ca:	464b      	mov	r3, r9
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	4629      	mov	r1, r5
 800f7d0:	f7f0 fd5a 	bl	8000288 <__aeabi_dsub>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	4630      	mov	r0, r6
 800f7da:	4639      	mov	r1, r7
 800f7dc:	f7f0 fd54 	bl	8000288 <__aeabi_dsub>
 800f7e0:	a333      	add	r3, pc, #204	; (adr r3, 800f8b0 <__ieee754_pow+0x708>)
 800f7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e6:	f7f0 ff07 	bl	80005f8 <__aeabi_dmul>
 800f7ea:	a333      	add	r3, pc, #204	; (adr r3, 800f8b8 <__ieee754_pow+0x710>)
 800f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	460f      	mov	r7, r1
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	4629      	mov	r1, r5
 800f7f8:	f7f0 fefe 	bl	80005f8 <__aeabi_dmul>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	460b      	mov	r3, r1
 800f800:	4630      	mov	r0, r6
 800f802:	4639      	mov	r1, r7
 800f804:	f7f0 fd42 	bl	800028c <__adddf3>
 800f808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f80a:	4b35      	ldr	r3, [pc, #212]	; (800f8e0 <__ieee754_pow+0x738>)
 800f80c:	4413      	add	r3, r2
 800f80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f812:	f7f0 fd3b 	bl	800028c <__adddf3>
 800f816:	4604      	mov	r4, r0
 800f818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f81a:	460d      	mov	r5, r1
 800f81c:	f7f0 fe82 	bl	8000524 <__aeabi_i2d>
 800f820:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f822:	4b30      	ldr	r3, [pc, #192]	; (800f8e4 <__ieee754_pow+0x73c>)
 800f824:	4413      	add	r3, r2
 800f826:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f82a:	4606      	mov	r6, r0
 800f82c:	460f      	mov	r7, r1
 800f82e:	4622      	mov	r2, r4
 800f830:	462b      	mov	r3, r5
 800f832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f836:	f7f0 fd29 	bl	800028c <__adddf3>
 800f83a:	4642      	mov	r2, r8
 800f83c:	464b      	mov	r3, r9
 800f83e:	f7f0 fd25 	bl	800028c <__adddf3>
 800f842:	4632      	mov	r2, r6
 800f844:	463b      	mov	r3, r7
 800f846:	f7f0 fd21 	bl	800028c <__adddf3>
 800f84a:	9802      	ldr	r0, [sp, #8]
 800f84c:	4632      	mov	r2, r6
 800f84e:	463b      	mov	r3, r7
 800f850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f854:	f7f0 fd18 	bl	8000288 <__aeabi_dsub>
 800f858:	4642      	mov	r2, r8
 800f85a:	464b      	mov	r3, r9
 800f85c:	f7f0 fd14 	bl	8000288 <__aeabi_dsub>
 800f860:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f864:	e607      	b.n	800f476 <__ieee754_pow+0x2ce>
 800f866:	f04f 0a01 	mov.w	sl, #1
 800f86a:	e6a5      	b.n	800f5b8 <__ieee754_pow+0x410>
 800f86c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800f8c0 <__ieee754_pow+0x718>
 800f870:	e613      	b.n	800f49a <__ieee754_pow+0x2f2>
 800f872:	bf00      	nop
 800f874:	f3af 8000 	nop.w
 800f878:	4a454eef 	.word	0x4a454eef
 800f87c:	3fca7e28 	.word	0x3fca7e28
 800f880:	93c9db65 	.word	0x93c9db65
 800f884:	3fcd864a 	.word	0x3fcd864a
 800f888:	a91d4101 	.word	0xa91d4101
 800f88c:	3fd17460 	.word	0x3fd17460
 800f890:	518f264d 	.word	0x518f264d
 800f894:	3fd55555 	.word	0x3fd55555
 800f898:	db6fabff 	.word	0xdb6fabff
 800f89c:	3fdb6db6 	.word	0x3fdb6db6
 800f8a0:	33333303 	.word	0x33333303
 800f8a4:	3fe33333 	.word	0x3fe33333
 800f8a8:	e0000000 	.word	0xe0000000
 800f8ac:	3feec709 	.word	0x3feec709
 800f8b0:	dc3a03fd 	.word	0xdc3a03fd
 800f8b4:	3feec709 	.word	0x3feec709
 800f8b8:	145b01f5 	.word	0x145b01f5
 800f8bc:	be3e2fe0 	.word	0xbe3e2fe0
 800f8c0:	00000000 	.word	0x00000000
 800f8c4:	3ff00000 	.word	0x3ff00000
 800f8c8:	43400000 	.word	0x43400000
 800f8cc:	0003988e 	.word	0x0003988e
 800f8d0:	000bb679 	.word	0x000bb679
 800f8d4:	08010658 	.word	0x08010658
 800f8d8:	3ff00000 	.word	0x3ff00000
 800f8dc:	40080000 	.word	0x40080000
 800f8e0:	08010678 	.word	0x08010678
 800f8e4:	08010668 	.word	0x08010668
 800f8e8:	a3b4      	add	r3, pc, #720	; (adr r3, 800fbbc <__ieee754_pow+0xa14>)
 800f8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ee:	4640      	mov	r0, r8
 800f8f0:	4649      	mov	r1, r9
 800f8f2:	f7f0 fccb 	bl	800028c <__adddf3>
 800f8f6:	4622      	mov	r2, r4
 800f8f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8fc:	462b      	mov	r3, r5
 800f8fe:	4630      	mov	r0, r6
 800f900:	4639      	mov	r1, r7
 800f902:	f7f0 fcc1 	bl	8000288 <__aeabi_dsub>
 800f906:	4602      	mov	r2, r0
 800f908:	460b      	mov	r3, r1
 800f90a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f90e:	f7f1 f903 	bl	8000b18 <__aeabi_dcmpgt>
 800f912:	2800      	cmp	r0, #0
 800f914:	f47f adfe 	bne.w	800f514 <__ieee754_pow+0x36c>
 800f918:	4aa3      	ldr	r2, [pc, #652]	; (800fba8 <__ieee754_pow+0xa00>)
 800f91a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f91e:	4293      	cmp	r3, r2
 800f920:	f340 810a 	ble.w	800fb38 <__ieee754_pow+0x990>
 800f924:	151b      	asrs	r3, r3, #20
 800f926:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f92a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f92e:	fa4a f303 	asr.w	r3, sl, r3
 800f932:	445b      	add	r3, fp
 800f934:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f938:	4e9c      	ldr	r6, [pc, #624]	; (800fbac <__ieee754_pow+0xa04>)
 800f93a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f93e:	4116      	asrs	r6, r2
 800f940:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f944:	2000      	movs	r0, #0
 800f946:	ea23 0106 	bic.w	r1, r3, r6
 800f94a:	f1c2 0214 	rsb	r2, r2, #20
 800f94e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f952:	fa4a fa02 	asr.w	sl, sl, r2
 800f956:	f1bb 0f00 	cmp.w	fp, #0
 800f95a:	4602      	mov	r2, r0
 800f95c:	460b      	mov	r3, r1
 800f95e:	4620      	mov	r0, r4
 800f960:	4629      	mov	r1, r5
 800f962:	bfb8      	it	lt
 800f964:	f1ca 0a00 	rsblt	sl, sl, #0
 800f968:	f7f0 fc8e 	bl	8000288 <__aeabi_dsub>
 800f96c:	e9cd 0100 	strd	r0, r1, [sp]
 800f970:	4642      	mov	r2, r8
 800f972:	464b      	mov	r3, r9
 800f974:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f978:	f7f0 fc88 	bl	800028c <__adddf3>
 800f97c:	2000      	movs	r0, #0
 800f97e:	a378      	add	r3, pc, #480	; (adr r3, 800fb60 <__ieee754_pow+0x9b8>)
 800f980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f984:	4604      	mov	r4, r0
 800f986:	460d      	mov	r5, r1
 800f988:	f7f0 fe36 	bl	80005f8 <__aeabi_dmul>
 800f98c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f990:	4606      	mov	r6, r0
 800f992:	460f      	mov	r7, r1
 800f994:	4620      	mov	r0, r4
 800f996:	4629      	mov	r1, r5
 800f998:	f7f0 fc76 	bl	8000288 <__aeabi_dsub>
 800f99c:	4602      	mov	r2, r0
 800f99e:	460b      	mov	r3, r1
 800f9a0:	4640      	mov	r0, r8
 800f9a2:	4649      	mov	r1, r9
 800f9a4:	f7f0 fc70 	bl	8000288 <__aeabi_dsub>
 800f9a8:	a36f      	add	r3, pc, #444	; (adr r3, 800fb68 <__ieee754_pow+0x9c0>)
 800f9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ae:	f7f0 fe23 	bl	80005f8 <__aeabi_dmul>
 800f9b2:	a36f      	add	r3, pc, #444	; (adr r3, 800fb70 <__ieee754_pow+0x9c8>)
 800f9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b8:	4680      	mov	r8, r0
 800f9ba:	4689      	mov	r9, r1
 800f9bc:	4620      	mov	r0, r4
 800f9be:	4629      	mov	r1, r5
 800f9c0:	f7f0 fe1a 	bl	80005f8 <__aeabi_dmul>
 800f9c4:	4602      	mov	r2, r0
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	4640      	mov	r0, r8
 800f9ca:	4649      	mov	r1, r9
 800f9cc:	f7f0 fc5e 	bl	800028c <__adddf3>
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	460d      	mov	r5, r1
 800f9d4:	4602      	mov	r2, r0
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	4630      	mov	r0, r6
 800f9da:	4639      	mov	r1, r7
 800f9dc:	f7f0 fc56 	bl	800028c <__adddf3>
 800f9e0:	4632      	mov	r2, r6
 800f9e2:	463b      	mov	r3, r7
 800f9e4:	4680      	mov	r8, r0
 800f9e6:	4689      	mov	r9, r1
 800f9e8:	f7f0 fc4e 	bl	8000288 <__aeabi_dsub>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	4629      	mov	r1, r5
 800f9f4:	f7f0 fc48 	bl	8000288 <__aeabi_dsub>
 800f9f8:	4642      	mov	r2, r8
 800f9fa:	4606      	mov	r6, r0
 800f9fc:	460f      	mov	r7, r1
 800f9fe:	464b      	mov	r3, r9
 800fa00:	4640      	mov	r0, r8
 800fa02:	4649      	mov	r1, r9
 800fa04:	f7f0 fdf8 	bl	80005f8 <__aeabi_dmul>
 800fa08:	a35b      	add	r3, pc, #364	; (adr r3, 800fb78 <__ieee754_pow+0x9d0>)
 800fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0e:	4604      	mov	r4, r0
 800fa10:	460d      	mov	r5, r1
 800fa12:	f7f0 fdf1 	bl	80005f8 <__aeabi_dmul>
 800fa16:	a35a      	add	r3, pc, #360	; (adr r3, 800fb80 <__ieee754_pow+0x9d8>)
 800fa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1c:	f7f0 fc34 	bl	8000288 <__aeabi_dsub>
 800fa20:	4622      	mov	r2, r4
 800fa22:	462b      	mov	r3, r5
 800fa24:	f7f0 fde8 	bl	80005f8 <__aeabi_dmul>
 800fa28:	a357      	add	r3, pc, #348	; (adr r3, 800fb88 <__ieee754_pow+0x9e0>)
 800fa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2e:	f7f0 fc2d 	bl	800028c <__adddf3>
 800fa32:	4622      	mov	r2, r4
 800fa34:	462b      	mov	r3, r5
 800fa36:	f7f0 fddf 	bl	80005f8 <__aeabi_dmul>
 800fa3a:	a355      	add	r3, pc, #340	; (adr r3, 800fb90 <__ieee754_pow+0x9e8>)
 800fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa40:	f7f0 fc22 	bl	8000288 <__aeabi_dsub>
 800fa44:	4622      	mov	r2, r4
 800fa46:	462b      	mov	r3, r5
 800fa48:	f7f0 fdd6 	bl	80005f8 <__aeabi_dmul>
 800fa4c:	a352      	add	r3, pc, #328	; (adr r3, 800fb98 <__ieee754_pow+0x9f0>)
 800fa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa52:	f7f0 fc1b 	bl	800028c <__adddf3>
 800fa56:	4622      	mov	r2, r4
 800fa58:	462b      	mov	r3, r5
 800fa5a:	f7f0 fdcd 	bl	80005f8 <__aeabi_dmul>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	460b      	mov	r3, r1
 800fa62:	4640      	mov	r0, r8
 800fa64:	4649      	mov	r1, r9
 800fa66:	f7f0 fc0f 	bl	8000288 <__aeabi_dsub>
 800fa6a:	4604      	mov	r4, r0
 800fa6c:	460d      	mov	r5, r1
 800fa6e:	4602      	mov	r2, r0
 800fa70:	460b      	mov	r3, r1
 800fa72:	4640      	mov	r0, r8
 800fa74:	4649      	mov	r1, r9
 800fa76:	f7f0 fdbf 	bl	80005f8 <__aeabi_dmul>
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	e9cd 0100 	strd	r0, r1, [sp]
 800fa80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fa84:	4620      	mov	r0, r4
 800fa86:	4629      	mov	r1, r5
 800fa88:	f7f0 fbfe 	bl	8000288 <__aeabi_dsub>
 800fa8c:	4602      	mov	r2, r0
 800fa8e:	460b      	mov	r3, r1
 800fa90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa94:	f7f0 feda 	bl	800084c <__aeabi_ddiv>
 800fa98:	4632      	mov	r2, r6
 800fa9a:	4604      	mov	r4, r0
 800fa9c:	460d      	mov	r5, r1
 800fa9e:	463b      	mov	r3, r7
 800faa0:	4640      	mov	r0, r8
 800faa2:	4649      	mov	r1, r9
 800faa4:	f7f0 fda8 	bl	80005f8 <__aeabi_dmul>
 800faa8:	4632      	mov	r2, r6
 800faaa:	463b      	mov	r3, r7
 800faac:	f7f0 fbee 	bl	800028c <__adddf3>
 800fab0:	4602      	mov	r2, r0
 800fab2:	460b      	mov	r3, r1
 800fab4:	4620      	mov	r0, r4
 800fab6:	4629      	mov	r1, r5
 800fab8:	f7f0 fbe6 	bl	8000288 <__aeabi_dsub>
 800fabc:	4642      	mov	r2, r8
 800fabe:	464b      	mov	r3, r9
 800fac0:	f7f0 fbe2 	bl	8000288 <__aeabi_dsub>
 800fac4:	4602      	mov	r2, r0
 800fac6:	460b      	mov	r3, r1
 800fac8:	2000      	movs	r0, #0
 800faca:	4939      	ldr	r1, [pc, #228]	; (800fbb0 <__ieee754_pow+0xa08>)
 800facc:	f7f0 fbdc 	bl	8000288 <__aeabi_dsub>
 800fad0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800fad4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	da2f      	bge.n	800fb3e <__ieee754_pow+0x996>
 800fade:	4650      	mov	r0, sl
 800fae0:	ec43 2b10 	vmov	d0, r2, r3
 800fae4:	f000 f9c0 	bl	800fe68 <scalbn>
 800fae8:	ec51 0b10 	vmov	r0, r1, d0
 800faec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800faf0:	f7ff bbf1 	b.w	800f2d6 <__ieee754_pow+0x12e>
 800faf4:	4b2f      	ldr	r3, [pc, #188]	; (800fbb4 <__ieee754_pow+0xa0c>)
 800faf6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fafa:	429e      	cmp	r6, r3
 800fafc:	f77f af0c 	ble.w	800f918 <__ieee754_pow+0x770>
 800fb00:	4b2d      	ldr	r3, [pc, #180]	; (800fbb8 <__ieee754_pow+0xa10>)
 800fb02:	440b      	add	r3, r1
 800fb04:	4303      	orrs	r3, r0
 800fb06:	d00b      	beq.n	800fb20 <__ieee754_pow+0x978>
 800fb08:	a325      	add	r3, pc, #148	; (adr r3, 800fba0 <__ieee754_pow+0x9f8>)
 800fb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb12:	f7f0 fd71 	bl	80005f8 <__aeabi_dmul>
 800fb16:	a322      	add	r3, pc, #136	; (adr r3, 800fba0 <__ieee754_pow+0x9f8>)
 800fb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1c:	f7ff bbdb 	b.w	800f2d6 <__ieee754_pow+0x12e>
 800fb20:	4622      	mov	r2, r4
 800fb22:	462b      	mov	r3, r5
 800fb24:	f7f0 fbb0 	bl	8000288 <__aeabi_dsub>
 800fb28:	4642      	mov	r2, r8
 800fb2a:	464b      	mov	r3, r9
 800fb2c:	f7f0 ffea 	bl	8000b04 <__aeabi_dcmpge>
 800fb30:	2800      	cmp	r0, #0
 800fb32:	f43f aef1 	beq.w	800f918 <__ieee754_pow+0x770>
 800fb36:	e7e7      	b.n	800fb08 <__ieee754_pow+0x960>
 800fb38:	f04f 0a00 	mov.w	sl, #0
 800fb3c:	e718      	b.n	800f970 <__ieee754_pow+0x7c8>
 800fb3e:	4621      	mov	r1, r4
 800fb40:	e7d4      	b.n	800faec <__ieee754_pow+0x944>
 800fb42:	2000      	movs	r0, #0
 800fb44:	491a      	ldr	r1, [pc, #104]	; (800fbb0 <__ieee754_pow+0xa08>)
 800fb46:	f7ff bb8f 	b.w	800f268 <__ieee754_pow+0xc0>
 800fb4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb4e:	f7ff bb8b 	b.w	800f268 <__ieee754_pow+0xc0>
 800fb52:	4630      	mov	r0, r6
 800fb54:	4639      	mov	r1, r7
 800fb56:	f7ff bb87 	b.w	800f268 <__ieee754_pow+0xc0>
 800fb5a:	4693      	mov	fp, r2
 800fb5c:	f7ff bb98 	b.w	800f290 <__ieee754_pow+0xe8>
 800fb60:	00000000 	.word	0x00000000
 800fb64:	3fe62e43 	.word	0x3fe62e43
 800fb68:	fefa39ef 	.word	0xfefa39ef
 800fb6c:	3fe62e42 	.word	0x3fe62e42
 800fb70:	0ca86c39 	.word	0x0ca86c39
 800fb74:	be205c61 	.word	0xbe205c61
 800fb78:	72bea4d0 	.word	0x72bea4d0
 800fb7c:	3e663769 	.word	0x3e663769
 800fb80:	c5d26bf1 	.word	0xc5d26bf1
 800fb84:	3ebbbd41 	.word	0x3ebbbd41
 800fb88:	af25de2c 	.word	0xaf25de2c
 800fb8c:	3f11566a 	.word	0x3f11566a
 800fb90:	16bebd93 	.word	0x16bebd93
 800fb94:	3f66c16c 	.word	0x3f66c16c
 800fb98:	5555553e 	.word	0x5555553e
 800fb9c:	3fc55555 	.word	0x3fc55555
 800fba0:	c2f8f359 	.word	0xc2f8f359
 800fba4:	01a56e1f 	.word	0x01a56e1f
 800fba8:	3fe00000 	.word	0x3fe00000
 800fbac:	000fffff 	.word	0x000fffff
 800fbb0:	3ff00000 	.word	0x3ff00000
 800fbb4:	4090cbff 	.word	0x4090cbff
 800fbb8:	3f6f3400 	.word	0x3f6f3400
 800fbbc:	652b82fe 	.word	0x652b82fe
 800fbc0:	3c971547 	.word	0x3c971547

0800fbc4 <__ieee754_sqrt>:
 800fbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc8:	4955      	ldr	r1, [pc, #340]	; (800fd20 <__ieee754_sqrt+0x15c>)
 800fbca:	ec55 4b10 	vmov	r4, r5, d0
 800fbce:	43a9      	bics	r1, r5
 800fbd0:	462b      	mov	r3, r5
 800fbd2:	462a      	mov	r2, r5
 800fbd4:	d112      	bne.n	800fbfc <__ieee754_sqrt+0x38>
 800fbd6:	ee10 2a10 	vmov	r2, s0
 800fbda:	ee10 0a10 	vmov	r0, s0
 800fbde:	4629      	mov	r1, r5
 800fbe0:	f7f0 fd0a 	bl	80005f8 <__aeabi_dmul>
 800fbe4:	4602      	mov	r2, r0
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	4620      	mov	r0, r4
 800fbea:	4629      	mov	r1, r5
 800fbec:	f7f0 fb4e 	bl	800028c <__adddf3>
 800fbf0:	4604      	mov	r4, r0
 800fbf2:	460d      	mov	r5, r1
 800fbf4:	ec45 4b10 	vmov	d0, r4, r5
 800fbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbfc:	2d00      	cmp	r5, #0
 800fbfe:	ee10 0a10 	vmov	r0, s0
 800fc02:	4621      	mov	r1, r4
 800fc04:	dc0f      	bgt.n	800fc26 <__ieee754_sqrt+0x62>
 800fc06:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fc0a:	4330      	orrs	r0, r6
 800fc0c:	d0f2      	beq.n	800fbf4 <__ieee754_sqrt+0x30>
 800fc0e:	b155      	cbz	r5, 800fc26 <__ieee754_sqrt+0x62>
 800fc10:	ee10 2a10 	vmov	r2, s0
 800fc14:	4620      	mov	r0, r4
 800fc16:	4629      	mov	r1, r5
 800fc18:	f7f0 fb36 	bl	8000288 <__aeabi_dsub>
 800fc1c:	4602      	mov	r2, r0
 800fc1e:	460b      	mov	r3, r1
 800fc20:	f7f0 fe14 	bl	800084c <__aeabi_ddiv>
 800fc24:	e7e4      	b.n	800fbf0 <__ieee754_sqrt+0x2c>
 800fc26:	151b      	asrs	r3, r3, #20
 800fc28:	d073      	beq.n	800fd12 <__ieee754_sqrt+0x14e>
 800fc2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fc2e:	07dd      	lsls	r5, r3, #31
 800fc30:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800fc34:	bf48      	it	mi
 800fc36:	0fc8      	lsrmi	r0, r1, #31
 800fc38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800fc3c:	bf44      	itt	mi
 800fc3e:	0049      	lslmi	r1, r1, #1
 800fc40:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800fc44:	2500      	movs	r5, #0
 800fc46:	1058      	asrs	r0, r3, #1
 800fc48:	0fcb      	lsrs	r3, r1, #31
 800fc4a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800fc4e:	0049      	lsls	r1, r1, #1
 800fc50:	2316      	movs	r3, #22
 800fc52:	462c      	mov	r4, r5
 800fc54:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800fc58:	19a7      	adds	r7, r4, r6
 800fc5a:	4297      	cmp	r7, r2
 800fc5c:	bfde      	ittt	le
 800fc5e:	19bc      	addle	r4, r7, r6
 800fc60:	1bd2      	suble	r2, r2, r7
 800fc62:	19ad      	addle	r5, r5, r6
 800fc64:	0fcf      	lsrs	r7, r1, #31
 800fc66:	3b01      	subs	r3, #1
 800fc68:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800fc6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fc70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fc74:	d1f0      	bne.n	800fc58 <__ieee754_sqrt+0x94>
 800fc76:	f04f 0c20 	mov.w	ip, #32
 800fc7a:	469e      	mov	lr, r3
 800fc7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fc80:	42a2      	cmp	r2, r4
 800fc82:	eb06 070e 	add.w	r7, r6, lr
 800fc86:	dc02      	bgt.n	800fc8e <__ieee754_sqrt+0xca>
 800fc88:	d112      	bne.n	800fcb0 <__ieee754_sqrt+0xec>
 800fc8a:	428f      	cmp	r7, r1
 800fc8c:	d810      	bhi.n	800fcb0 <__ieee754_sqrt+0xec>
 800fc8e:	2f00      	cmp	r7, #0
 800fc90:	eb07 0e06 	add.w	lr, r7, r6
 800fc94:	da42      	bge.n	800fd1c <__ieee754_sqrt+0x158>
 800fc96:	f1be 0f00 	cmp.w	lr, #0
 800fc9a:	db3f      	blt.n	800fd1c <__ieee754_sqrt+0x158>
 800fc9c:	f104 0801 	add.w	r8, r4, #1
 800fca0:	1b12      	subs	r2, r2, r4
 800fca2:	428f      	cmp	r7, r1
 800fca4:	bf88      	it	hi
 800fca6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800fcaa:	1bc9      	subs	r1, r1, r7
 800fcac:	4433      	add	r3, r6
 800fcae:	4644      	mov	r4, r8
 800fcb0:	0052      	lsls	r2, r2, #1
 800fcb2:	f1bc 0c01 	subs.w	ip, ip, #1
 800fcb6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800fcba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fcbe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fcc2:	d1dd      	bne.n	800fc80 <__ieee754_sqrt+0xbc>
 800fcc4:	430a      	orrs	r2, r1
 800fcc6:	d006      	beq.n	800fcd6 <__ieee754_sqrt+0x112>
 800fcc8:	1c5c      	adds	r4, r3, #1
 800fcca:	bf13      	iteet	ne
 800fccc:	3301      	addne	r3, #1
 800fcce:	3501      	addeq	r5, #1
 800fcd0:	4663      	moveq	r3, ip
 800fcd2:	f023 0301 	bicne.w	r3, r3, #1
 800fcd6:	106a      	asrs	r2, r5, #1
 800fcd8:	085b      	lsrs	r3, r3, #1
 800fcda:	07e9      	lsls	r1, r5, #31
 800fcdc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fce0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fce4:	bf48      	it	mi
 800fce6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fcea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800fcee:	461c      	mov	r4, r3
 800fcf0:	e780      	b.n	800fbf4 <__ieee754_sqrt+0x30>
 800fcf2:	0aca      	lsrs	r2, r1, #11
 800fcf4:	3815      	subs	r0, #21
 800fcf6:	0549      	lsls	r1, r1, #21
 800fcf8:	2a00      	cmp	r2, #0
 800fcfa:	d0fa      	beq.n	800fcf2 <__ieee754_sqrt+0x12e>
 800fcfc:	02d6      	lsls	r6, r2, #11
 800fcfe:	d50a      	bpl.n	800fd16 <__ieee754_sqrt+0x152>
 800fd00:	f1c3 0420 	rsb	r4, r3, #32
 800fd04:	fa21 f404 	lsr.w	r4, r1, r4
 800fd08:	1e5d      	subs	r5, r3, #1
 800fd0a:	4099      	lsls	r1, r3
 800fd0c:	4322      	orrs	r2, r4
 800fd0e:	1b43      	subs	r3, r0, r5
 800fd10:	e78b      	b.n	800fc2a <__ieee754_sqrt+0x66>
 800fd12:	4618      	mov	r0, r3
 800fd14:	e7f0      	b.n	800fcf8 <__ieee754_sqrt+0x134>
 800fd16:	0052      	lsls	r2, r2, #1
 800fd18:	3301      	adds	r3, #1
 800fd1a:	e7ef      	b.n	800fcfc <__ieee754_sqrt+0x138>
 800fd1c:	46a0      	mov	r8, r4
 800fd1e:	e7bf      	b.n	800fca0 <__ieee754_sqrt+0xdc>
 800fd20:	7ff00000 	.word	0x7ff00000

0800fd24 <fabs>:
 800fd24:	ec51 0b10 	vmov	r0, r1, d0
 800fd28:	ee10 2a10 	vmov	r2, s0
 800fd2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fd30:	ec43 2b10 	vmov	d0, r2, r3
 800fd34:	4770      	bx	lr

0800fd36 <finite>:
 800fd36:	ee10 3a90 	vmov	r3, s1
 800fd3a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800fd3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fd42:	0fc0      	lsrs	r0, r0, #31
 800fd44:	4770      	bx	lr

0800fd46 <matherr>:
 800fd46:	2000      	movs	r0, #0
 800fd48:	4770      	bx	lr
 800fd4a:	0000      	movs	r0, r0
 800fd4c:	0000      	movs	r0, r0
	...

0800fd50 <nan>:
 800fd50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fd58 <nan+0x8>
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop
 800fd58:	00000000 	.word	0x00000000
 800fd5c:	7ff80000 	.word	0x7ff80000

0800fd60 <rint>:
 800fd60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd62:	ec51 0b10 	vmov	r0, r1, d0
 800fd66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fd6a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fd6e:	2e13      	cmp	r6, #19
 800fd70:	460b      	mov	r3, r1
 800fd72:	ee10 4a10 	vmov	r4, s0
 800fd76:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800fd7a:	dc56      	bgt.n	800fe2a <rint+0xca>
 800fd7c:	2e00      	cmp	r6, #0
 800fd7e:	da2b      	bge.n	800fdd8 <rint+0x78>
 800fd80:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800fd84:	4302      	orrs	r2, r0
 800fd86:	d023      	beq.n	800fdd0 <rint+0x70>
 800fd88:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800fd8c:	4302      	orrs	r2, r0
 800fd8e:	4254      	negs	r4, r2
 800fd90:	4314      	orrs	r4, r2
 800fd92:	0c4b      	lsrs	r3, r1, #17
 800fd94:	0b24      	lsrs	r4, r4, #12
 800fd96:	045b      	lsls	r3, r3, #17
 800fd98:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800fd9c:	ea44 0103 	orr.w	r1, r4, r3
 800fda0:	460b      	mov	r3, r1
 800fda2:	492f      	ldr	r1, [pc, #188]	; (800fe60 <rint+0x100>)
 800fda4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800fda8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800fdac:	4602      	mov	r2, r0
 800fdae:	4639      	mov	r1, r7
 800fdb0:	4630      	mov	r0, r6
 800fdb2:	f7f0 fa6b 	bl	800028c <__adddf3>
 800fdb6:	e9cd 0100 	strd	r0, r1, [sp]
 800fdba:	463b      	mov	r3, r7
 800fdbc:	4632      	mov	r2, r6
 800fdbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fdc2:	f7f0 fa61 	bl	8000288 <__aeabi_dsub>
 800fdc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fdca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800fdce:	4639      	mov	r1, r7
 800fdd0:	ec41 0b10 	vmov	d0, r0, r1
 800fdd4:	b003      	add	sp, #12
 800fdd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdd8:	4a22      	ldr	r2, [pc, #136]	; (800fe64 <rint+0x104>)
 800fdda:	4132      	asrs	r2, r6
 800fddc:	ea01 0702 	and.w	r7, r1, r2
 800fde0:	4307      	orrs	r7, r0
 800fde2:	d0f5      	beq.n	800fdd0 <rint+0x70>
 800fde4:	0852      	lsrs	r2, r2, #1
 800fde6:	4011      	ands	r1, r2
 800fde8:	430c      	orrs	r4, r1
 800fdea:	d00b      	beq.n	800fe04 <rint+0xa4>
 800fdec:	ea23 0202 	bic.w	r2, r3, r2
 800fdf0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fdf4:	2e13      	cmp	r6, #19
 800fdf6:	fa43 f306 	asr.w	r3, r3, r6
 800fdfa:	bf0c      	ite	eq
 800fdfc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800fe00:	2400      	movne	r4, #0
 800fe02:	4313      	orrs	r3, r2
 800fe04:	4916      	ldr	r1, [pc, #88]	; (800fe60 <rint+0x100>)
 800fe06:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fe0a:	4622      	mov	r2, r4
 800fe0c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe10:	4620      	mov	r0, r4
 800fe12:	4629      	mov	r1, r5
 800fe14:	f7f0 fa3a 	bl	800028c <__adddf3>
 800fe18:	e9cd 0100 	strd	r0, r1, [sp]
 800fe1c:	4622      	mov	r2, r4
 800fe1e:	462b      	mov	r3, r5
 800fe20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe24:	f7f0 fa30 	bl	8000288 <__aeabi_dsub>
 800fe28:	e7d2      	b.n	800fdd0 <rint+0x70>
 800fe2a:	2e33      	cmp	r6, #51	; 0x33
 800fe2c:	dd07      	ble.n	800fe3e <rint+0xde>
 800fe2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fe32:	d1cd      	bne.n	800fdd0 <rint+0x70>
 800fe34:	ee10 2a10 	vmov	r2, s0
 800fe38:	f7f0 fa28 	bl	800028c <__adddf3>
 800fe3c:	e7c8      	b.n	800fdd0 <rint+0x70>
 800fe3e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800fe42:	f04f 32ff 	mov.w	r2, #4294967295
 800fe46:	40f2      	lsrs	r2, r6
 800fe48:	4210      	tst	r0, r2
 800fe4a:	d0c1      	beq.n	800fdd0 <rint+0x70>
 800fe4c:	0852      	lsrs	r2, r2, #1
 800fe4e:	4210      	tst	r0, r2
 800fe50:	bf1f      	itttt	ne
 800fe52:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800fe56:	ea20 0202 	bicne.w	r2, r0, r2
 800fe5a:	4134      	asrne	r4, r6
 800fe5c:	4314      	orrne	r4, r2
 800fe5e:	e7d1      	b.n	800fe04 <rint+0xa4>
 800fe60:	08010688 	.word	0x08010688
 800fe64:	000fffff 	.word	0x000fffff

0800fe68 <scalbn>:
 800fe68:	b570      	push	{r4, r5, r6, lr}
 800fe6a:	ec55 4b10 	vmov	r4, r5, d0
 800fe6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fe72:	4606      	mov	r6, r0
 800fe74:	462b      	mov	r3, r5
 800fe76:	b9aa      	cbnz	r2, 800fea4 <scalbn+0x3c>
 800fe78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fe7c:	4323      	orrs	r3, r4
 800fe7e:	d03b      	beq.n	800fef8 <scalbn+0x90>
 800fe80:	4b31      	ldr	r3, [pc, #196]	; (800ff48 <scalbn+0xe0>)
 800fe82:	4629      	mov	r1, r5
 800fe84:	2200      	movs	r2, #0
 800fe86:	ee10 0a10 	vmov	r0, s0
 800fe8a:	f7f0 fbb5 	bl	80005f8 <__aeabi_dmul>
 800fe8e:	4b2f      	ldr	r3, [pc, #188]	; (800ff4c <scalbn+0xe4>)
 800fe90:	429e      	cmp	r6, r3
 800fe92:	4604      	mov	r4, r0
 800fe94:	460d      	mov	r5, r1
 800fe96:	da12      	bge.n	800febe <scalbn+0x56>
 800fe98:	a327      	add	r3, pc, #156	; (adr r3, 800ff38 <scalbn+0xd0>)
 800fe9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9e:	f7f0 fbab 	bl	80005f8 <__aeabi_dmul>
 800fea2:	e009      	b.n	800feb8 <scalbn+0x50>
 800fea4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fea8:	428a      	cmp	r2, r1
 800feaa:	d10c      	bne.n	800fec6 <scalbn+0x5e>
 800feac:	ee10 2a10 	vmov	r2, s0
 800feb0:	4620      	mov	r0, r4
 800feb2:	4629      	mov	r1, r5
 800feb4:	f7f0 f9ea 	bl	800028c <__adddf3>
 800feb8:	4604      	mov	r4, r0
 800feba:	460d      	mov	r5, r1
 800febc:	e01c      	b.n	800fef8 <scalbn+0x90>
 800febe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fec2:	460b      	mov	r3, r1
 800fec4:	3a36      	subs	r2, #54	; 0x36
 800fec6:	4432      	add	r2, r6
 800fec8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fecc:	428a      	cmp	r2, r1
 800fece:	dd0b      	ble.n	800fee8 <scalbn+0x80>
 800fed0:	ec45 4b11 	vmov	d1, r4, r5
 800fed4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ff40 <scalbn+0xd8>
 800fed8:	f000 f83c 	bl	800ff54 <copysign>
 800fedc:	a318      	add	r3, pc, #96	; (adr r3, 800ff40 <scalbn+0xd8>)
 800fede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee2:	ec51 0b10 	vmov	r0, r1, d0
 800fee6:	e7da      	b.n	800fe9e <scalbn+0x36>
 800fee8:	2a00      	cmp	r2, #0
 800feea:	dd08      	ble.n	800fefe <scalbn+0x96>
 800feec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fef0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fef4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fef8:	ec45 4b10 	vmov	d0, r4, r5
 800fefc:	bd70      	pop	{r4, r5, r6, pc}
 800fefe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ff02:	da0d      	bge.n	800ff20 <scalbn+0xb8>
 800ff04:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ff08:	429e      	cmp	r6, r3
 800ff0a:	ec45 4b11 	vmov	d1, r4, r5
 800ff0e:	dce1      	bgt.n	800fed4 <scalbn+0x6c>
 800ff10:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ff38 <scalbn+0xd0>
 800ff14:	f000 f81e 	bl	800ff54 <copysign>
 800ff18:	a307      	add	r3, pc, #28	; (adr r3, 800ff38 <scalbn+0xd0>)
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	e7e0      	b.n	800fee2 <scalbn+0x7a>
 800ff20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff24:	3236      	adds	r2, #54	; 0x36
 800ff26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ff2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff2e:	4620      	mov	r0, r4
 800ff30:	4629      	mov	r1, r5
 800ff32:	2200      	movs	r2, #0
 800ff34:	4b06      	ldr	r3, [pc, #24]	; (800ff50 <scalbn+0xe8>)
 800ff36:	e7b2      	b.n	800fe9e <scalbn+0x36>
 800ff38:	c2f8f359 	.word	0xc2f8f359
 800ff3c:	01a56e1f 	.word	0x01a56e1f
 800ff40:	8800759c 	.word	0x8800759c
 800ff44:	7e37e43c 	.word	0x7e37e43c
 800ff48:	43500000 	.word	0x43500000
 800ff4c:	ffff3cb0 	.word	0xffff3cb0
 800ff50:	3c900000 	.word	0x3c900000

0800ff54 <copysign>:
 800ff54:	ec51 0b10 	vmov	r0, r1, d0
 800ff58:	ee11 0a90 	vmov	r0, s3
 800ff5c:	ee10 2a10 	vmov	r2, s0
 800ff60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ff64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ff68:	ea41 0300 	orr.w	r3, r1, r0
 800ff6c:	ec43 2b10 	vmov	d0, r2, r3
 800ff70:	4770      	bx	lr
	...

0800ff74 <_init>:
 800ff74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff76:	bf00      	nop
 800ff78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff7a:	bc08      	pop	{r3}
 800ff7c:	469e      	mov	lr, r3
 800ff7e:	4770      	bx	lr

0800ff80 <_fini>:
 800ff80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff82:	bf00      	nop
 800ff84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff86:	bc08      	pop	{r3}
 800ff88:	469e      	mov	lr, r3
 800ff8a:	4770      	bx	lr
