
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  0800ffd0  0800ffd0  0001ffd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010700  08010700  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08010700  08010700  00020700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010708  08010708  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010708  08010708  00020708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801070c  0801070c  0002070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08010710  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a58  200001e0  080108f0  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c38  080108f0  00031c38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000403b6  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000065bc  00000000  00000000  000705c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f30  00000000  00000000  00076b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c98  00000000  00000000  00078ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029f84  00000000  00000000  0007a750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020a27  00000000  00000000  000a46d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5d51  00000000  00000000  000c50fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019ae4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090cc  00000000  00000000  0019aec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ffb4 	.word	0x0800ffb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ffb4 	.word	0x0800ffb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <imu_read_byte>:

uint8_t initialized = 0;
Inertial inertial;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <imu_read_byte+0x54>)
 8000fa4:	f006 fd22 	bl	80079ec <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 8000fa8:	f107 010f 	add.w	r1, r7, #15
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	2201      	movs	r2, #1
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <imu_read_byte+0x58>)
 8000fb2:	f007 fb5e 	bl	8008672 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 8000fb6:	f107 010e 	add.w	r1, r7, #14
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <imu_read_byte+0x58>)
 8000fc0:	f007 fc93 	bl	80088ea <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <imu_read_byte+0x54>)
 8000fcc:	f006 fd0e 	bl	80079ec <HAL_GPIO_WritePin>
#endif
	return val;
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20000754 	.word	0x20000754

08000fe4 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <imu_write_byte+0x54>)
 8001006:	f006 fcf1 	bl	80079ec <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100a:	f107 010f 	add.w	r1, r7, #15
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	2201      	movs	r2, #1
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <imu_write_byte+0x58>)
 8001014:	f007 fb2d 	bl	8008672 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 8001018:	1db9      	adds	r1, r7, #6
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	2201      	movs	r2, #1
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <imu_write_byte+0x58>)
 8001020:	f007 fb27 	bl	8008672 <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <imu_write_byte+0x54>)
 800102c:	f006 fcde 	bl	80079ec <HAL_GPIO_WritePin>
#endif
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40020400 	.word	0x40020400
 800103c:	20000754 	.word	0x20000754

08001040 <imu_init>:
 * @fn imu_init()
 * @brief 
 * 
 */
void imu_init()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	if(initialized == 0)
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <imu_init+0x54>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d11d      	bne.n	800108a <imu_init+0x4a>
	{
		printf("Starting SPI2 (IMU)\r\n");
 800104e:	4812      	ldr	r0, [pc, #72]	; (8001098 <imu_init+0x58>)
 8001050:	f00a fb80 	bl	800b754 <puts>
		uint8_t wai, ret;
		ret = imu_initialize(&wai);
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f826 	bl	80010a8 <imu_initialize>
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
		printf("who_am_i = %d\r\n", wai);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	4619      	mov	r1, r3
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <imu_init+0x5c>)
 8001066:	f00a fb01 	bl	800b66c <iprintf>
		if(ret == 1)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d103      	bne.n	8001078 <imu_init+0x38>
		{
			printf("SPI INIT COLLECT!\r\n");
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <imu_init+0x60>)
 8001072:	f00a fb6f 	bl	800b754 <puts>
 8001076:	e002      	b.n	800107e <imu_init+0x3e>
		}
		else
		{
			printf("SPI INIT FAILURE x_x \r\n");
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <imu_init+0x64>)
 800107a:	f00a fb6b 	bl	800b754 <puts>
		}
		initialized = initialized + 1;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <imu_init+0x54>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b03      	ldr	r3, [pc, #12]	; (8001094 <imu_init+0x54>)
 8001088:	701a      	strb	r2, [r3, #0]
	}
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001fc 	.word	0x200001fc
 8001098:	0800ffd0 	.word	0x0800ffd0
 800109c:	0800ffe8 	.word	0x0800ffe8
 80010a0:	0800fff8 	.word	0x0800fff8
 80010a4:	0801000c 	.word	0x0801000c

080010a8 <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	CS_RESET;
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	4833      	ldr	r0, [pc, #204]	; (8001184 <imu_initialize+0xdc>)
 80010b8:	f006 fc98 	bl	80079ec <HAL_GPIO_WritePin>
	uint8_t who_am_i, ret;
	ret = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

#if	INIT_ZERO
	inertial.linear = vector3_creation(0, 0, 0);
 80010c0:	4c31      	ldr	r4, [pc, #196]	; (8001188 <imu_initialize+0xe0>)
 80010c2:	ed9f 1a32 	vldr	s2, [pc, #200]	; 800118c <imu_initialize+0xe4>
 80010c6:	eddf 0a31 	vldr	s1, [pc, #196]	; 800118c <imu_initialize+0xe4>
 80010ca:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800118c <imu_initialize+0xe4>
 80010ce:	f001 fd61 	bl	8002b94 <vector3_creation>
 80010d2:	eef0 6a40 	vmov.f32	s13, s0
 80010d6:	eeb0 7a60 	vmov.f32	s14, s1
 80010da:	eef0 7a41 	vmov.f32	s15, s2
 80010de:	edc4 6a00 	vstr	s13, [r4]
 80010e2:	ed84 7a01 	vstr	s14, [r4, #4]
 80010e6:	edc4 7a02 	vstr	s15, [r4, #8]
	inertial.angular = vector3_creation(0, 0, 0);
 80010ea:	4c27      	ldr	r4, [pc, #156]	; (8001188 <imu_initialize+0xe0>)
 80010ec:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800118c <imu_initialize+0xe4>
 80010f0:	eddf 0a26 	vldr	s1, [pc, #152]	; 800118c <imu_initialize+0xe4>
 80010f4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800118c <imu_initialize+0xe4>
 80010f8:	f001 fd4c 	bl	8002b94 <vector3_creation>
 80010fc:	eef0 6a40 	vmov.f32	s13, s0
 8001100:	eeb0 7a60 	vmov.f32	s14, s1
 8001104:	eef0 7a41 	vmov.f32	s15, s2
 8001108:	edc4 6a03 	vstr	s13, [r4, #12]
 800110c:	ed84 7a04 	vstr	s14, [r4, #16]
 8001110:	edc4 7a05 	vstr	s15, [r4, #20]
#endif

	//! User Bank 0 を選択
	imu_write_byte(REG_BANK_SEL, 0x00);
 8001114:	2100      	movs	r1, #0
 8001116:	207f      	movs	r0, #127	; 0x7f
 8001118:	f7ff ff64 	bl	8000fe4 <imu_write_byte>
	who_am_i = imu_read_byte(0x00);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff ff33 	bl	8000f88 <imu_read_byte>
 8001122:	4603      	mov	r3, r0
 8001124:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7bba      	ldrb	r2, [r7, #14]
 800112a:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	2be0      	cmp	r3, #224	; 0xe0
 8001130:	d11c      	bne.n	800116c <imu_initialize+0xc4>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
		//! PWR_MGMT_1 推奨値 1
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 8001136:	2101      	movs	r1, #1
 8001138:	2006      	movs	r0, #6
 800113a:	f7ff ff53 	bl	8000fe4 <imu_write_byte>
		//! PWR_MGMt_2 推奨値 0
		// imu_write_byte(PWR_MGMT_2, 0x00);
		HAL_Delay(100);
 800113e:	2064      	movs	r0, #100	; 0x64
 8001140:	f004 fe58 	bl	8005df4 <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 8001144:	2110      	movs	r1, #16
 8001146:	2003      	movs	r0, #3
 8001148:	f7ff ff4c 	bl	8000fe4 <imu_write_byte>
		 * 	10 : User Bank 2 : 加速度と角速度の値の設定ができる
		 * 	11 : User Bank 3 : I2C の設定が行える
		 * 
		 */
		//! User Bank 2 を選択
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 800114c:	2120      	movs	r1, #32
 800114e:	207f      	movs	r0, #127	; 0x7f
 8001150:	f7ff ff48 	bl	8000fe4 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 9     [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2000 [dps] & bypass ) -> 0b 0000 0110 -> 0x06
		imu_write_byte(0x01, 0x06);
 8001154:	2106      	movs	r1, #6
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff ff44 	bl	8000fe4 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 4.5   [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2 [dps] & bypass ) -> 0b 0000 0000 -> 0x06
		imu_write_byte(0x14, 0x00);
 800115c:	2100      	movs	r1, #0
 800115e:	2014      	movs	r0, #20
 8001160:	f7ff ff40 	bl	8000fe4 <imu_write_byte>

		//! User Bank 0 に戻す
		imu_write_byte(REG_BANK_SEL, 0x00);
 8001164:	2100      	movs	r1, #0
 8001166:	207f      	movs	r0, #127	; 0x7f
 8001168:	f7ff ff3c 	bl	8000fe4 <imu_write_byte>
	}
#if USE_NCS
	CS_SET;
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <imu_initialize+0xdc>)
 8001174:	f006 fc3a 	bl	80079ec <HAL_GPIO_WritePin>
#endif
	return ret;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	40020400 	.word	0x40020400
 8001188:	20000210 	.word	0x20000210
 800118c:	00000000 	.word	0x00000000

08001190 <imu_start>:

void imu_start()
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	/* imu_start */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <imu_stop>:

void imu_stop()
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
#if !USE_NCS
	CS_SET;
#endif
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <imu_update_gyro>:
 * --- --- --- --- --- --- --- --- --- ---
 * @attention 値を代入したら外部参照変数を呼び出して値を取得することになる
 *
*/
void imu_update_gyro()
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
	float k_gyro;
	int16_t byte_data;
	float tmp;

	k_gyro = (GYRO_RANGE / (float) MAXDATA_RANGE);
 80011b6:	4b56      	ldr	r3, [pc, #344]	; (8001310 <imu_update_gyro+0x160>)
 80011b8:	60fb      	str	r3, [r7, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 80011ba:	2033      	movs	r0, #51	; 0x33
 80011bc:	f7ff fee4 	bl	8000f88 <imu_read_byte>
 80011c0:	4603      	mov	r3, r0
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21c      	sxth	r4, r3
 80011c6:	2034      	movs	r0, #52	; 0x34
 80011c8:	f7ff fede 	bl	8000f88 <imu_read_byte>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4323      	orrs	r3, r4
 80011d2:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 80011d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.x = low_pass_filter(tmp, inertial.angular.x, LPF_RATE);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff f9ab 	bl	8000548 <__aeabi_f2d>
 80011f2:	4604      	mov	r4, r0
 80011f4:	460d      	mov	r5, r1
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <imu_update_gyro+0x164>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9a4 	bl	8000548 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	ed9f 2b40 	vldr	d2, [pc, #256]	; 8001308 <imu_update_gyro+0x158>
 8001208:	ec43 2b11 	vmov	d1, r2, r3
 800120c:	ec45 4b10 	vmov	d0, r4, r5
 8001210:	f001 fc8a 	bl	8002b28 <low_pass_filter>
 8001214:	ec54 3b10 	vmov	r3, r4, d0
 8001218:	4618      	mov	r0, r3
 800121a:	4621      	mov	r1, r4
 800121c:	f7ff fce4 	bl	8000be8 <__aeabi_d2f>
 8001220:	4602      	mov	r2, r0
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <imu_update_gyro+0x164>)
 8001224:	60da      	str	r2, [r3, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 8001226:	2035      	movs	r0, #53	; 0x35
 8001228:	f7ff feae 	bl	8000f88 <imu_read_byte>
 800122c:	4603      	mov	r3, r0
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21c      	sxth	r4, r3
 8001232:	2036      	movs	r0, #54	; 0x36
 8001234:	f7ff fea8 	bl	8000f88 <imu_read_byte>
 8001238:	4603      	mov	r3, r0
 800123a:	b21b      	sxth	r3, r3
 800123c:	4323      	orrs	r3, r4
 800123e:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 8001240:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001254:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.y = low_pass_filter(tmp, inertial.angular.y, LPF_RATE);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff f975 	bl	8000548 <__aeabi_f2d>
 800125e:	4604      	mov	r4, r0
 8001260:	460d      	mov	r5, r1
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <imu_update_gyro+0x164>)
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f96e 	bl	8000548 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8001308 <imu_update_gyro+0x158>
 8001274:	ec43 2b11 	vmov	d1, r2, r3
 8001278:	ec45 4b10 	vmov	d0, r4, r5
 800127c:	f001 fc54 	bl	8002b28 <low_pass_filter>
 8001280:	ec54 3b10 	vmov	r3, r4, d0
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fcae 	bl	8000be8 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <imu_update_gyro+0x164>)
 8001290:	611a      	str	r2, [r3, #16]

	byte_data = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 8001292:	2037      	movs	r0, #55	; 0x37
 8001294:	f7ff fe78 	bl	8000f88 <imu_read_byte>
 8001298:	4603      	mov	r3, r0
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b21c      	sxth	r4, r3
 800129e:	2038      	movs	r0, #56	; 0x38
 80012a0:	f7ff fe72 	bl	8000f88 <imu_read_byte>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4323      	orrs	r3, r4
 80012aa:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 80012ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c0:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.z = low_pass_filter(tmp, inertial.angular.z, LPF_RATE);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_f2d>
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <imu_update_gyro+0x164>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f938 	bl	8000548 <__aeabi_f2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001308 <imu_update_gyro+0x158>
 80012e0:	ec43 2b11 	vmov	d1, r2, r3
 80012e4:	ec45 4b10 	vmov	d0, r4, r5
 80012e8:	f001 fc1e 	bl	8002b28 <low_pass_filter>
 80012ec:	ec54 3b10 	vmov	r3, r4, d0
 80012f0:	4618      	mov	r0, r3
 80012f2:	4621      	mov	r1, r4
 80012f4:	f7ff fc78 	bl	8000be8 <__aeabi_d2f>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <imu_update_gyro+0x164>)
 80012fc:	615a      	str	r2, [r3, #20]
	 * 		float y;
	 * 		float z;
	 * } Vector3;
	 * 
	 */
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bdb0      	pop	{r4, r5, r7, pc}
 8001306:	bf00      	nop
 8001308:	40000000 	.word	0x40000000
 800130c:	3fd33333 	.word	0x3fd33333
 8001310:	3d7a0000 	.word	0x3d7a0000
 8001314:	20000210 	.word	0x20000210

08001318 <imu_read_yaw>:
 * @return float 
 * @attention [ degree ]
 * 
 */
float imu_read_yaw()
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	//! バイアス補正を加味した返り値（ inertial.angular.z はすでに LPF を通されている ）
	return inertial.angular.z - (BIAS_AVERAGE - TRUE_VALUE);
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <imu_read_yaw+0x20>)
 800131e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001322:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800133c <imu_read_yaw+0x24>
 8001326:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000210 	.word	0x20000210
 800133c:	3e0a704c 	.word	0x3e0a704c

08001340 <led_init>:

uint8_t current_value;
uint8_t current_rgb_value;

void led_init()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    current_value = 0b11;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <led_init+0x24>)
 8001346:	2203      	movs	r2, #3
 8001348:	701a      	strb	r2, [r3, #0]
    current_rgb_value = 0b111;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <led_init+0x28>)
 800134c:	2207      	movs	r2, #7
 800134e:	701a      	strb	r2, [r3, #0]
    led_write_led(0b11, 0b11);
 8001350:	2103      	movs	r1, #3
 8001352:	2003      	movs	r0, #3
 8001354:	f000 f8ae 	bl	80014b4 <led_write_led>
    led_write_rgb(0b111);
 8001358:	2007      	movs	r0, #7
 800135a:	f000 f86b 	bl	8001434 <led_write_rgb>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000228 	.word	0x20000228
 8001368:	20000229 	.word	0x20000229

0800136c <led_start>:

void led_start()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 8001370:	2100      	movs	r1, #0
 8001372:	2003      	movs	r0, #3
 8001374:	f000 f89e 	bl	80014b4 <led_write_led>
    led_write_rgb(0b000);
 8001378:	2000      	movs	r0, #0
 800137a:	f000 f85b 	bl	8001434 <led_write_rgb>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}

08001382 <led_stop>:

void led_stop()
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 8001386:	2100      	movs	r1, #0
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f893 	bl	80014b4 <led_write_led>
    led_write_rgb(0b100);
 800138e:	2004      	movs	r0, #4
 8001390:	f000 f850 	bl	8001434 <led_write_rgb>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <led_write_led1>:
{
    return current_rgb_value;
}

void led_write_led1(uint8_t value_)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = value_ << 1;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
    led2_value = current_value & 0b01;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <led_write_led1+0x48>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <led_write_led1+0x4c>)
 80013c6:	f006 fb11 	bl	80079ec <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <led_write_led1+0x48>)
 80013d4:	701a      	strb	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000228 	.word	0x20000228
 80013e4:	40020800 	.word	0x40020800

080013e8 <led_write_led2>:

void led_write_led2(uint8_t value_)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = current_value & 0b10;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <led_write_led2+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	73fb      	strb	r3, [r7, #15]
    led2_value = value_ << 0;
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf0c      	ite	eq
 8001406:	2301      	moveq	r3, #1
 8001408:	2300      	movne	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <led_write_led2+0x48>)
 8001414:	f006 faea 	bl	80079ec <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	4313      	orrs	r3, r2
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <led_write_led2+0x44>)
 8001422:	701a      	strb	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000228 	.word	0x20000228
 8001430:	40020400 	.word	0x40020400

08001434 <led_write_rgb>:

void led_write_rgb(uint8_t rgb_)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (rgb_ & 0b100) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <led_write_rgb+0x74>)
 8001456:	f006 fac9 	bl	80079ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (rgb_ & 0b010) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <led_write_rgb+0x74>)
 8001472:	f006 fabb 	bl	80079ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (rgb_ & 0b001) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800148c:	4807      	ldr	r0, [pc, #28]	; (80014ac <led_write_rgb+0x78>)
 800148e:	f006 faad 	bl	80079ec <HAL_GPIO_WritePin>
    current_rgb_value = rgb_ & 0b0111;
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <led_write_rgb+0x7c>)
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020800 	.word	0x40020800
 80014b0:	20000229 	.word	0x20000229

080014b4 <led_write_led>:

void led_write_led(uint8_t mask_, uint8_t value_)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
    if(mask_ & 0b10)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <led_write_led+0x2c>
    {
        led_write_led1((0b10 & value_) >> 1);
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff5c 	bl	8001398 <led_write_led1>
    }
    if(mask_ & 0b01)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <led_write_led+0x44>
    {
        led_write_led2((0b01 & value_) >> 0);
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff78 	bl	80013e8 <led_write_led2>
    }
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 8001504:	f000 f804 	bl	8001510 <rotary_set_playmode>
    rotary_set_value();
 8001508:	f000 f81a 	bl	8001540 <rotary_set_value>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <rotary_set_playmode>:

void rotary_set_playmode()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 8001514:	f000 f82c 	bl	8001570 <rotary_read>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b01      	ldr	r3, [pc, #4]	; (8001524 <rotary_set_playmode+0x14>)
 800151e:	701a      	strb	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000022a 	.word	0x2000022a

08001528 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
    return playmode;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <rotary_read_playmode+0x14>)
 800152e:	781b      	ldrb	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	2000022a 	.word	0x2000022a

08001540 <rotary_set_value>:

void rotary_set_value()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    value = rotary_read();
 8001544:	f000 f814 	bl	8001570 <rotary_read>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b01      	ldr	r3, [pc, #4]	; (8001554 <rotary_set_value+0x14>)
 800154e:	701a      	strb	r2, [r3, #0]
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000022b 	.word	0x2000022b

08001558 <rotary_read_value>:

uint8_t rotary_read_value()
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
    return value;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <rotary_read_value+0x14>)
 800155e:	781b      	ldrb	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2000022b 	.word	0x2000022b

08001570 <rotary_read>:

uint8_t rotary_read()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 800157a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157e:	481f      	ldr	r0, [pc, #124]	; (80015fc <rotary_read+0x8c>)
 8001580:	f006 fa1c 	bl	80079bc <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	b2da      	uxtb	r2, r3
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4413      	add	r3, r2
 8001596:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159c:	4817      	ldr	r0, [pc, #92]	; (80015fc <rotary_read+0x8c>)
 800159e:	f006 fa0d 	bl	80079bc <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <rotary_read+0x3c>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e000      	b.n	80015ae <rotary_read+0x3e>
 80015ac:	2300      	movs	r3, #0
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	4413      	add	r3, r2
 80015b4:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 80015b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <rotary_read+0x90>)
 80015bc:	f006 f9fe 	bl	80079bc <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <rotary_read+0x5a>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e000      	b.n	80015cc <rotary_read+0x5c>
 80015ca:	2300      	movs	r3, #0
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4413      	add	r3, r2
 80015d2:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 80015d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <rotary_read+0x8c>)
 80015da:	f006 f9ef 	bl	80079bc <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <rotary_read+0x78>
 80015e4:	2308      	movs	r3, #8
 80015e6:	e000      	b.n	80015ea <rotary_read+0x7a>
 80015e8:	2300      	movs	r3, #0
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4413      	add	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020000 	.word	0x40020000

08001604 <rotary_print_playmode>:

void rotary_print_playmode()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	printf("playmode = ");
 8001608:	482e      	ldr	r0, [pc, #184]	; (80016c4 <rotary_print_playmode+0xc0>)
 800160a:	f00a f82f 	bl	800b66c <iprintf>
	switch(rotary_read_playmode())
 800160e:	f7ff ff8b 	bl	8001528 <rotary_read_playmode>
 8001612:	4603      	mov	r3, r0
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d84b      	bhi.n	80016b0 <rotary_print_playmode+0xac>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <rotary_print_playmode+0x1c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001661 	.word	0x08001661
 8001624:	08001669 	.word	0x08001669
 8001628:	08001671 	.word	0x08001671
 800162c:	08001679 	.word	0x08001679
 8001630:	08001681 	.word	0x08001681
 8001634:	08001689 	.word	0x08001689
 8001638:	08001691 	.word	0x08001691
 800163c:	08001699 	.word	0x08001699
 8001640:	080016a1 	.word	0x080016a1
 8001644:	080016b1 	.word	0x080016b1
 8001648:	080016b1 	.word	0x080016b1
 800164c:	080016b1 	.word	0x080016b1
 8001650:	080016b1 	.word	0x080016b1
 8001654:	080016b1 	.word	0x080016b1
 8001658:	080016b1 	.word	0x080016b1
 800165c:	080016a9 	.word	0x080016a9
	{
		case calibration:
			printf("calibration");
 8001660:	4819      	ldr	r0, [pc, #100]	; (80016c8 <rotary_print_playmode+0xc4>)
 8001662:	f00a f803 	bl	800b66c <iprintf>
			break;
 8001666:	e027      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case search:
			printf("search");
 8001668:	4818      	ldr	r0, [pc, #96]	; (80016cc <rotary_print_playmode+0xc8>)
 800166a:	f009 ffff 	bl	800b66c <iprintf>
			break;
 800166e:	e023      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case accel:
			printf("accel");
 8001670:	4817      	ldr	r0, [pc, #92]	; (80016d0 <rotary_print_playmode+0xcc>)
 8001672:	f009 fffb 	bl	800b66c <iprintf>
			break;
 8001676:	e01f      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case max_enable:
			printf("max_enable");
 8001678:	4816      	ldr	r0, [pc, #88]	; (80016d4 <rotary_print_playmode+0xd0>)
 800167a:	f009 fff7 	bl	800b66c <iprintf>
			break;
 800167e:	e01b      	b.n	80016b8 <rotary_print_playmode+0xb4>
        case motor_free:
            printf("motor_free");
 8001680:	4815      	ldr	r0, [pc, #84]	; (80016d8 <rotary_print_playmode+0xd4>)
 8001682:	f009 fff3 	bl	800b66c <iprintf>
            break;
 8001686:	e017      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case tracer_tuning:
			printf("tracer_tuning");
 8001688:	4814      	ldr	r0, [pc, #80]	; (80016dc <rotary_print_playmode+0xd8>)
 800168a:	f009 ffef 	bl	800b66c <iprintf>
			break;
 800168e:	e013      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case velotrace_tuning:
			printf("velotrace_tuning");
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <rotary_print_playmode+0xdc>)
 8001692:	f009 ffeb 	bl	800b66c <iprintf>
			break;
 8001696:	e00f      	b.n	80016b8 <rotary_print_playmode+0xb4>
        case velotrace_tuning_2:
            printf("velotrace_tuning_2");
 8001698:	4812      	ldr	r0, [pc, #72]	; (80016e4 <rotary_print_playmode+0xe0>)
 800169a:	f009 ffe7 	bl	800b66c <iprintf>
            break;
 800169e:	e00b      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case banquet:
			printf("banquet");
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <rotary_print_playmode+0xe4>)
 80016a2:	f009 ffe3 	bl	800b66c <iprintf>
			break;
 80016a6:	e007      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case flash_print:
			printf("flash_print");
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <rotary_print_playmode+0xe8>)
 80016aa:	f009 ffdf 	bl	800b66c <iprintf>
			break;
 80016ae:	e003      	b.n	80016b8 <rotary_print_playmode+0xb4>
		default:
			printf("unknown playmode...");
 80016b0:	480f      	ldr	r0, [pc, #60]	; (80016f0 <rotary_print_playmode+0xec>)
 80016b2:	f009 ffdb 	bl	800b66c <iprintf>
			break;
 80016b6:	bf00      	nop
	}
	printf("\r\n");
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <rotary_print_playmode+0xf0>)
 80016ba:	f00a f84b 	bl	800b754 <puts>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	08010024 	.word	0x08010024
 80016c8:	08010030 	.word	0x08010030
 80016cc:	0801003c 	.word	0x0801003c
 80016d0:	08010044 	.word	0x08010044
 80016d4:	0801004c 	.word	0x0801004c
 80016d8:	08010058 	.word	0x08010058
 80016dc:	08010064 	.word	0x08010064
 80016e0:	08010074 	.word	0x08010074
 80016e4:	08010088 	.word	0x08010088
 80016e8:	0801009c 	.word	0x0801009c
 80016ec:	080100a4 	.word	0x080100a4
 80016f0:	080100b0 	.word	0x080100b0
 80016f4:	080100c4 	.word	0x080100c4

080016f8 <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
    enter = 1;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <switch_set_enter+0x14>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	2000022c 	.word	0x2000022c

08001710 <switch_reset_enter>:

void switch_reset_enter()
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
    enter = 0;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <switch_reset_enter+0x14>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	2000022c 	.word	0x2000022c

08001728 <switch_init>:
{
    switch_reset_enter();
}

void switch_init()
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
    switch_reset_enter();
 800172c:	f7ff fff0 	bl	8001710 <switch_reset_enter>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <switch_read_enter>:

uint8_t switch_read_enter()
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
    return enter;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <switch_read_enter+0x14>)
 800173a:	781b      	ldrb	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000022c 	.word	0x2000022c

0800174c <switch1_read>:

uint8_t switch1_read()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 8001750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <switch1_read+0x20>)
 8001756:	f006 f931 	bl	80079bc <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40020800 	.word	0x40020800

08001770 <switch2_read>:

uint8_t switch2_read()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 8001774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <switch2_read+0x20>)
 800177a:	f006 f91f 	bl	80079bc <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40020800 	.word	0x40020800

08001794 <switch_read>:

uint8_t switch_read()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 800179e:	f7ff ffd5 	bl	800174c <switch1_read>
 80017a2:	4603      	mov	r3, r0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	4413      	add	r3, r2
 80017ac:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 80017ae:	f7ff ffdf 	bl	8001770 <switch2_read>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4413      	add	r3, r2
 80017ba:	71fb      	strb	r3, [r7, #7]

    return value_;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <switch_enter>:

void switch_enter()
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 80017ca:	f7ff ffe3 	bl	8001794 <switch_read>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d102      	bne.n	80017da <switch_enter+0x14>
    {
        switch_reset_enter();
 80017d4:	f7ff ff9c 	bl	8001710 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 80017d8:	e006      	b.n	80017e8 <switch_enter+0x22>
    else if(switch_read() == 0b10)
 80017da:	f7ff ffdb 	bl	8001794 <switch_read>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d101      	bne.n	80017e8 <switch_enter+0x22>
        switch_set_enter();
 80017e4:	f7ff ff88 	bl	80016f8 <switch_set_enter>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 80017ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f0:	b08e      	sub	sp, #56	; 0x38
 80017f2:	af0a      	add	r7, sp, #40	; 0x28
 80017f4:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 80017f6:	482d      	ldr	r0, [pc, #180]	; (80018ac <analog_array_print+0xc0>)
 80017f8:	f009 ff38 	bl	800b66c <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3318      	adds	r3, #24
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4619      	mov	r1, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	331c      	adds	r3, #28
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	331e      	adds	r3, #30
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	331a      	adds	r3, #26
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4603      	mov	r3, r0
 800181e:	4824      	ldr	r0, [pc, #144]	; (80018b0 <analog_array_print+0xc4>)
 8001820:	f009 ff24 	bl	800b66c <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	469c      	mov	ip, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3304      	adds	r3, #4
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	469e      	mov	lr, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3308      	adds	r3, #8
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	4698      	mov	r8, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	330c      	adds	r3, #12
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3310      	adds	r3, #16
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3314      	adds	r3, #20
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3316      	adds	r3, #22
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	461c      	mov	r4, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3312      	adds	r3, #18
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	461d      	mov	r5, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	330e      	adds	r3, #14
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	461e      	mov	r6, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	330a      	adds	r3, #10
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3306      	adds	r3, #6
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3302      	adds	r3, #2
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	9308      	str	r3, [sp, #32]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	9307      	str	r3, [sp, #28]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	9306      	str	r3, [sp, #24]
 800188a:	9605      	str	r6, [sp, #20]
 800188c:	9504      	str	r5, [sp, #16]
 800188e:	9403      	str	r4, [sp, #12]
 8001890:	9002      	str	r0, [sp, #8]
 8001892:	9101      	str	r1, [sp, #4]
 8001894:	9200      	str	r2, [sp, #0]
 8001896:	4643      	mov	r3, r8
 8001898:	4672      	mov	r2, lr
 800189a:	4661      	mov	r1, ip
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <analog_array_print+0xc8>)
 800189e:	f009 fee5 	bl	800b66c <iprintf>
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018ac:	080100c8 	.word	0x080100c8
 80018b0:	080100d0 	.word	0x080100d0
 80018b4:	080100e8 	.word	0x080100e8

080018b8 <analog_d_print>:

	printf("average = %4.2f\r\n\r\n", sum_ / (float) size_);
}

void analog_d_print()
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
#if D_ANALOG
	analog_print_analogmode();
	analog_rate_array_print();
	// analog_array_print(analog);
#endif
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <analog_print_max>:
	analog_print_analogmode();
	analog_array_print(analog);
}

void analog_print_max()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 80018cc:	4806      	ldr	r0, [pc, #24]	; (80018e8 <analog_print_max+0x20>)
 80018ce:	f009 fecd 	bl	800b66c <iprintf>
	printf("analog_print_max\r\n");
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <analog_print_max+0x24>)
 80018d4:	f009 ff3e 	bl	800b754 <puts>
	analog_array_print(analogmax);
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <analog_print_max+0x28>)
 80018da:	f7ff ff87 	bl	80017ec <analog_array_print>
	printf(ESC_DEF);
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <analog_print_max+0x2c>)
 80018e0:	f009 fec4 	bl	800b66c <iprintf>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	080101e0 	.word	0x080101e0
 80018ec:	080101e8 	.word	0x080101e8
 80018f0:	200003f8 	.word	0x200003f8
 80018f4:	080101fc 	.word	0x080101fc

080018f8 <analog_print_min>:

void analog_print_min()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <analog_print_min+0x20>)
 80018fe:	f009 feb5 	bl	800b66c <iprintf>
	printf("analog_print_min\r\n");
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <analog_print_min+0x24>)
 8001904:	f009 ff26 	bl	800b754 <puts>
	analog_array_print(analogmin);
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <analog_print_min+0x28>)
 800190a:	f7ff ff6f 	bl	80017ec <analog_array_print>
	printf(ESC_DEF);
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <analog_print_min+0x2c>)
 8001910:	f009 feac 	bl	800b66c <iprintf>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	08010204 	.word	0x08010204
 800191c:	0801020c 	.word	0x0801020c
 8001920:	20000274 	.word	0x20000274
 8001924:	080101fc 	.word	0x080101fc

08001928 <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_to_flash()\r\n");
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e014      	b.n	8001962 <analog_set_on_flash+0x3a>
		#if D_ANALOG
		printf(ESC_MAG);
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, analogdata.min[i], i, analogdata.max[i]);
		printf(ESC_DEF);
		#endif
		*(analogmin_ + i) = analogmin[i];
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <analog_set_on_flash+0x4c>)
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001948:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	4909      	ldr	r1, [pc, #36]	; (8001978 <analog_set_on_flash+0x50>)
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800195a:	801a      	strh	r2, [r3, #0]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d9e7      	bls.n	8001938 <analog_set_on_flash+0x10>
		printf(ESC_GRE);
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, analogdata.min[i], i, analogdata.max[i]);
		printf(ESC_DEF);
		#endif
	}
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20000274 	.word	0x20000274
 8001978:	200003f8 	.word	0x200003f8

0800197c <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_from_flash()\r\n");
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e014      	b.n	80019b6 <analog_set_from_flash+0x3a>
	{
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, analogdata.min[i], i, analogdata.max[i]);
		#endif
		analogmin[i] = *(analogmin_ + i);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	8819      	ldrh	r1, [r3, #0]
 8001996:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <analog_set_from_flash+0x4c>)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	8819      	ldrh	r1, [r3, #0]
 80019a8:	4a08      	ldr	r2, [pc, #32]	; (80019cc <analog_set_from_flash+0x50>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d9e7      	bls.n	800198c <analog_set_from_flash+0x10>
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, analogdata.min[i], i, analogdata.max[i]);
		#endif
	}
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	20000274 	.word	0x20000274
 80019cc:	200003f8 	.word	0x200003f8

080019d0 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <analog_set_calibrationsize+0x1c>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	7013      	strb	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20000295 	.word	0x20000295

080019f0 <analog_set_analogmode>:
{
	return calibrationsize;
}

void analog_set_analogmode(AnalogMode analogmode_)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <analog_set_analogmode+0x1c>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	7013      	strb	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	20000294 	.word	0x20000294

08001a10 <analog_read_analogmode>:

AnalogMode analog_read_analogmode()
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return analogmode;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <analog_read_analogmode+0x14>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000294 	.word	0x20000294

08001a28 <analog_calibration_start>:

void analog_calibration_start()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	analog_set_analogmode(analogmode_all);
 8001a2e:	2010      	movs	r0, #16
 8001a30:	f7ff ffde 	bl	80019f0 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	e00d      	b.n	8001a56 <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <analog_calibration_start+0x48>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <analog_calibration_start+0x4c>)
 8001a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	3301      	adds	r3, #1
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d9ee      	bls.n	8001a3a <analog_calibration_start+0x12>
    }
	analog_print_max();
 8001a5c:	f7ff ff34 	bl	80018c8 <analog_print_max>
	analog_print_min();
 8001a60:	f7ff ff4a 	bl	80018f8 <analog_print_min>
	analog_sensor_start();
 8001a64:	f000 f83e 	bl	8001ae4 <analog_sensor_start>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200003f8 	.word	0x200003f8
 8001a74:	20000274 	.word	0x20000274

08001a78 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(analogmode_all);
 8001a7c:	2010      	movs	r0, #16
 8001a7e:	f7ff ffb7 	bl	80019f0 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001a82:	f000 f829 	bl	8001ad8 <analog_stop>
	analog_print_max();
 8001a86:	f7ff ff1f 	bl	80018c8 <analog_print_max>
	analog_print_min();
 8001a8a:	f7ff ff35 	bl	80018f8 <analog_print_min>
	/* analogdata.min/max = analogmin/max */
	analog_set_on_flash(analogdata.min, analogdata.max);
 8001a8e:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <analog_calibration_stop+0x28>)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <analog_calibration_stop+0x2c>)
 8001a92:	f7ff ff49 	bl	8001928 <analog_set_on_flash>
	//! FLASH_SECTOR_8 is AnalogData
	flash_write(FLASH_SECTOR_8);
 8001a96:	2008      	movs	r0, #8
 8001a98:	f000 ffb2 	bl	8002a00 <flash_write>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200014bc 	.word	0x200014bc
 8001aa4:	2000149c 	.word	0x2000149c

08001aa8 <analog_init>:

void analog_init()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 8001aac:	2010      	movs	r0, #16
 8001aae:	f7ff ff8f 	bl	80019d0 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <analog_init+0x20>)
 8001ab4:	f004 f9c0 	bl	8005e38 <HAL_ADC_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <analog_init+0x1a>
    {
        Error_Handler();
 8001abe:	f002 f8f3 	bl	8003ca8 <Error_Handler>
    }
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200008d8 	.word	0x200008d8

08001acc <analog_start>:

void analog_start()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("analog_sensor_start()\r\n");
	#endif
	analog_sensor_start();
 8001ad0:	f000 f808 	bl	8001ae4 <analog_sensor_start>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <analog_stop>:

void analog_stop()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001adc:	f000 f81a 	bl	8001b14 <analog_sensor_stop>
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <analog_sensor_start>:

void analog_sensor_start()
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
	#endif
    sensgettime = 0;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <analog_sensor_start+0x24>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001aee:	2210      	movs	r2, #16
 8001af0:	4906      	ldr	r1, [pc, #24]	; (8001b0c <analog_sensor_start+0x28>)
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <analog_sensor_start+0x2c>)
 8001af4:	f004 f9e4 	bl	8005ec0 <HAL_ADC_Start_DMA>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <analog_sensor_start+0x1e>
    {
        Error_Handler();
 8001afe:	f002 f8d3 	bl	8003ca8 <Error_Handler>
    }
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000250 	.word	0x20000250
 8001b0c:	20000254 	.word	0x20000254
 8001b10:	200008d8 	.word	0x200008d8

08001b14 <analog_sensor_stop>:

void analog_sensor_stop()
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <analog_sensor_stop+0x10>)
 8001b1a:	f004 fae1 	bl	80060e0 <HAL_ADC_Stop_DMA>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200008d8 	.word	0x200008d8

08001b28 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
	uint16_t analog_before;
	//! 前の値を保存しておく
	analog_before = analograte[i];
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4a2e      	ldr	r2, [pc, #184]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b3a:	81fb      	strh	r3, [r7, #14]
	//! 割合を取得する
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (float) (analogmax[i] - analogmin[i]);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <analog_sensor_get+0xcc>)
 8001b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b44:	4619      	mov	r1, r3
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <analog_sensor_get+0xd0>)
 8001b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b4e:	1acb      	subs	r3, r1, r3
 8001b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <analog_sensor_get+0xd4>)
 8001b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <analog_sensor_get+0xd0>)
 8001b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b72:	1acb      	subs	r3, r1, r3
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b86:	ee17 2a90 	vmov	r2, s15
 8001b8a:	b291      	uxth	r1, r2
 8001b8c:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(float)800, 500);
#endif
	//! ローパスフィルタに通す
	analograte[i] = low_pass_filter(analograte[i], analog_before, ANALOG_LPF_GAMMA);
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcb2 	bl	8000504 <__aeabi_ui2d>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	460d      	mov	r5, r1
 8001ba4:	89fb      	ldrh	r3, [r7, #14]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcac 	bl	8000504 <__aeabi_ui2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001be8 <analog_sensor_get+0xc0>
 8001bb4:	ec43 2b11 	vmov	d1, r2, r3
 8001bb8:	ec45 4b10 	vmov	d0, r4, r5
 8001bbc:	f000 ffb4 	bl	8002b28 <low_pass_filter>
 8001bc0:	ec53 2b10 	vmov	r2, r3, d0
 8001bc4:	79fc      	ldrb	r4, [r7, #7]
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ffed 	bl	8000ba8 <__aeabi_d2uiz>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001bd4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	return analograte[i];
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8001bf0:	20000298 	.word	0x20000298
 8001bf4:	20000230 	.word	0x20000230
 8001bf8:	20000274 	.word	0x20000274
 8001bfc:	200003f8 	.word	0x200003f8

08001c00 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001c08:	f000 f804 	bl	8001c14 <analog_get_and_sort>
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001c14:	b490      	push	{r4, r7}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <analog_get_and_sort+0x120>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d968      	bls.n	8001cf4 <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <analog_get_and_sort+0x120>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	e05f      	b.n	8001cee <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71bb      	strb	r3, [r7, #6]
 8001c32:	e02d      	b.n	8001c90 <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001c34:	2300      	movs	r3, #0
 8001c36:	717b      	strb	r3, [r7, #5]
 8001c38:	e023      	b.n	8001c82 <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001c3a:	797b      	ldrb	r3, [r7, #5]
 8001c3c:	1e5a      	subs	r2, r3, #1
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	493d      	ldr	r1, [pc, #244]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c4a:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001c4c:	7978      	ldrb	r0, [r7, #5]
 8001c4e:	79f9      	ldrb	r1, [r7, #7]
 8001c50:	797b      	ldrb	r3, [r7, #5]
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4c38      	ldr	r4, [pc, #224]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c58:	0100      	lsls	r0, r0, #4
 8001c5a:	4401      	add	r1, r0
 8001c5c:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001c60:	4935      	ldr	r1, [pc, #212]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	4413      	add	r3, r2
 8001c66:	4602      	mov	r2, r0
 8001c68:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001c6c:	797a      	ldrb	r2, [r7, #5]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	4931      	ldr	r1, [pc, #196]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001c7c:	797b      	ldrb	r3, [r7, #5]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	717b      	strb	r3, [r7, #5]
 8001c82:	797a      	ldrb	r2, [r7, #5]
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d8d7      	bhi.n	8001c3a <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001c8a:	79bb      	ldrb	r3, [r7, #6]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	71bb      	strb	r3, [r7, #6]
 8001c90:	79bb      	ldrb	r3, [r7, #6]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d9ce      	bls.n	8001c34 <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001c96:	79fa      	ldrb	r2, [r7, #7]
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4927      	ldr	r1, [pc, #156]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c9c:	3240      	adds	r2, #64	; 0x40
 8001c9e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001ca2:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <analog_get_and_sort+0x128>)
 8001ca4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4a25      	ldr	r2, [pc, #148]	; (8001d40 <analog_get_and_sort+0x12c>)
 8001cac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <analog_get_and_sort+0x128>)
 8001cb4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	428a      	cmp	r2, r1
 8001cbc:	bf38      	it	cc
 8001cbe:	460a      	movcc	r2, r1
 8001cc0:	b291      	uxth	r1, r2
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <analog_get_and_sort+0x12c>)
 8001cc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <analog_get_and_sort+0x130>)
 8001ccc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <analog_get_and_sort+0x128>)
 8001cd4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	428a      	cmp	r2, r1
 8001cdc:	bf28      	it	cs
 8001cde:	460a      	movcs	r2, r1
 8001ce0:	b291      	uxth	r1, r2
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <analog_get_and_sort+0x130>)
 8001ce4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	3301      	adds	r3, #1
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d99c      	bls.n	8001c2e <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	713b      	strb	r3, [r7, #4]
 8001cf8:	e00f      	b.n	8001d1a <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001cfa:	7939      	ldrb	r1, [r7, #4]
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <analog_get_and_sort+0x120>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	793b      	ldrb	r3, [r7, #4]
 8001d02:	4811      	ldr	r0, [pc, #68]	; (8001d48 <analog_get_and_sort+0x134>)
 8001d04:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001d08:	490b      	ldr	r1, [pc, #44]	; (8001d38 <analog_get_and_sort+0x124>)
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d14:	793b      	ldrb	r3, [r7, #4]
 8001d16:	3301      	adds	r3, #1
 8001d18:	713b      	strb	r3, [r7, #4]
 8001d1a:	793b      	ldrb	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d9ec      	bls.n	8001cfa <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <analog_get_and_sort+0x120>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <analog_get_and_sort+0x120>)
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc90      	pop	{r4, r7}
 8001d32:	4770      	bx	lr
 8001d34:	20000250 	.word	0x20000250
 8001d38:	200002b8 	.word	0x200002b8
 8001d3c:	20000230 	.word	0x20000230
 8001d40:	200003f8 	.word	0x200003f8
 8001d44:	20000274 	.word	0x20000274
 8001d48:	20000254 	.word	0x20000254

08001d4c <course_init>:
float course_update_section_sampling_time_s;
float course_accel_max;
float __course_debug_target_speed__;

void course_init(unsigned short int samplingtime_ms)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
	imu_init();
 8001d56:	f7ff f973 	bl	8001040 <imu_init>
	course_state_count = 0;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <course_init+0x24>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
	course_set_update_section_freq_ms(samplingtime_ms);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f8a2 	bl	8001eac <course_set_update_section_freq_ms>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000428 	.word	0x20000428

08001d74 <course_start>:

void course_start()
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	/* course_start */
	course_state_count = 0;
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <course_start+0x60>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	801a      	strh	r2, [r3, #0]
	course_accel_max = accel_max_calc(rotary_read_value());
 8001d7e:	f7ff fbeb 	bl	8001558 <rotary_read_value>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fca9 	bl	80026dc <accel_max_calc>
 8001d8a:	eef0 7a40 	vmov.f32	s15, s0
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <course_start+0x64>)
 8001d90:	edc3 7a00 	vstr	s15, [r3]
	course_reset_section_degree();
 8001d94:	f000 f8b4 	bl	8001f00 <course_reset_section_degree>
	if(rotary_read_playmode() == search || rotary_read_playmode() == motor_free)
 8001d98:	f7ff fbc6 	bl	8001528 <rotary_read_playmode>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d004      	beq.n	8001dac <course_start+0x38>
 8001da2:	f7ff fbc1 	bl	8001528 <rotary_read_playmode>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d101      	bne.n	8001db0 <course_start+0x3c>
	{
		//! speed radius right left に初期値を与える
		course_reset_flash();
 8001dac:	f000 fc58 	bl	8002660 <course_reset_flash>
	}
	if(rotary_read_playmode() == accel)
 8001db0:	f7ff fbba 	bl	8001528 <rotary_read_playmode>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d107      	bne.n	8001dca <course_start+0x56>
	{
		//! coursedata だけでいい
		flash_read(FLASH_SECTOR_11);
 8001dba:	200b      	movs	r0, #11
 8001dbc:	f000 fe62 	bl	8002a84 <flash_read>
		//! 走る前に速度を計算して書き込んでからスタートする ( 使うのは coursedata のみ )
		course_fixing_radius2speed();
 8001dc0:	f000 f9fa 	bl	80021b8 <course_fixing_radius2speed>
		//! FLASH_SECTOR_11 is CourseData
		flash_write(FLASH_SECTOR_11);
 8001dc4:	200b      	movs	r0, #11
 8001dc6:	f000 fe1b 	bl	8002a00 <flash_write>
	}
	imu_start();
 8001dca:	f7ff f9e1 	bl	8001190 <imu_start>
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000428 	.word	0x20000428
 8001dd8:	20000424 	.word	0x20000424

08001ddc <course_stop>:

void course_stop()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	if(rotary_read_playmode() == search || rotary_read_playmode() == motor_free)
 8001de0:	f7ff fba2 	bl	8001528 <rotary_read_playmode>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d004      	beq.n	8001df4 <course_stop+0x18>
 8001dea:	f7ff fb9d 	bl	8001528 <rotary_read_playmode>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d108      	bne.n	8001e06 <course_stop+0x2a>
	{
		flash_write(FLASH_SECTOR_9);
 8001df4:	2009      	movs	r0, #9
 8001df6:	f000 fe03 	bl	8002a00 <flash_write>
		flash_write(FLASH_SECTOR_10);
 8001dfa:	200a      	movs	r0, #10
 8001dfc:	f000 fe00 	bl	8002a00 <flash_write>
		flash_write(FLASH_SECTOR_11);
 8001e00:	200b      	movs	r0, #11
 8001e02:	f000 fdfd 	bl	8002a00 <flash_write>
	}
	if(rotary_read_playmode() == accel)
 8001e06:	f7ff fb8f 	bl	8001528 <rotary_read_playmode>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d102      	bne.n	8001e16 <course_stop+0x3a>
	{
		flash_write(FLASH_SECTOR_11);
 8001e10:	200b      	movs	r0, #11
 8001e12:	f000 fdf5 	bl	8002a00 <flash_write>
	}
	imu_stop();
 8001e16:	f7ff f9c2 	bl	800119e <imu_stop>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <course_update_section_degree>:
 * 好きな時に course_section_degree をリセットする
 * course_update_section_degree() は course_update_section_sampling_time_s の周期で常に実行され続ける
 * 
 */
void course_update_section_degree()
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	float tmp;
	imu_update_gyro();
 8001e26:	f7ff f9c3 	bl	80011b0 <imu_update_gyro>
	#if D_COURSE_WHILE
	printf("imu_read_yaw() = %7.2lf, course_section_degree = %7.2lf\r\n", imu_read_yaw(), course_section_degree);
	#endif
	course_sampling_count = course_sampling_count + 1;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <course_update_section_degree+0x80>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <course_update_section_degree+0x80>)
 8001e34:	801a      	strh	r2, [r3, #0]
	tmp = course_section_degree + imu_read_yaw() * course_update_section_sampling_time_s;
 8001e36:	f7ff fa6f 	bl	8001318 <imu_read_yaw>
 8001e3a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <course_update_section_degree+0x84>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <course_update_section_degree+0x88>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e52:	edc7 7a01 	vstr	s15, [r7, #4]
	course_section_degree = low_pass_filter(tmp, course_section_degree, 0);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fb76 	bl	8000548 <__aeabi_f2d>
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	460d      	mov	r5, r1
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <course_update_section_degree+0x88>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb6f 	bl	8000548 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001e98 <course_update_section_degree+0x78>
 8001e72:	ec43 2b11 	vmov	d1, r2, r3
 8001e76:	ec45 4b10 	vmov	d0, r4, r5
 8001e7a:	f000 fe55 	bl	8002b28 <low_pass_filter>
 8001e7e:	ec54 3b10 	vmov	r3, r4, d0
 8001e82:	4618      	mov	r0, r3
 8001e84:	4621      	mov	r1, r4
 8001e86:	f7fe feaf 	bl	8000be8 <__aeabi_d2f>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <course_update_section_degree+0x88>)
 8001e8e:	601a      	str	r2, [r3, #0]
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8001ea0:	20000420 	.word	0x20000420
 8001ea4:	2000041c 	.word	0x2000041c
 8001ea8:	20000430 	.word	0x20000430

08001eac <course_set_update_section_freq_ms>:

void course_set_update_section_freq_ms(unsigned short int samplingtime_ms)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
	course_update_section_sampling_time_s = samplingtime_ms / (float) 1000;
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec0:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001edc <course_set_update_section_freq_ms+0x30>
 8001ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <course_set_update_section_freq_ms+0x34>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	447a0000 	.word	0x447a0000
 8001ee0:	2000041c 	.word	0x2000041c

08001ee4 <course_read_section_degree>:

float course_read_section_degree()
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	return course_section_degree;
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <course_read_section_degree+0x18>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	ee07 3a90 	vmov	s15, r3
}
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	20000430 	.word	0x20000430

08001f00 <course_reset_section_degree>:

void course_reset_section_degree()
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
	course_sampling_count = 0;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <course_reset_section_degree+0x1c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	801a      	strh	r2, [r3, #0]
	course_section_degree = 0;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <course_reset_section_degree+0x20>)
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000420 	.word	0x20000420
 8001f20:	20000430 	.word	0x20000430

08001f24 <course_reset>:

void course_reset()
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	course_reset_section_degree();
 8001f28:	f7ff ffea 	bl	8001f00 <course_reset_section_degree>
	section_length_reset();
 8001f2c:	f001 fff0 	bl	8003f10 <section_length_reset>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <course_read_curvature_radius>:

float course_read_curvature_radius()
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	return course_section_radius;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <course_read_curvature_radius+0x18>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	ee07 3a90 	vmov	s15, r3
}
 8001f40:	eeb0 0a67 	vmov.f32	s0, s15
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	2000042c 	.word	0x2000042c

08001f50 <course_read_state_count>:

uint16_t course_read_state_count()
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
    return course_state_count;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <course_read_state_count+0x14>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000428 	.word	0x20000428

08001f68 <course_increment_state_count>:
{
	return course_sampling_count;
}

void course_increment_state_count()
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
    course_state_count++;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <course_increment_state_count+0x1c>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <course_increment_state_count+0x1c>)
 8001f76:	801a      	strh	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000428 	.word	0x20000428

08001f88 <course_calclate_radius>:
 * course_reset()					// 角度と長さ情報をリセットする
 * の順に呼び出す必要がある
 * 
 */
void course_calclate_radius()
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
    float curvature_radius;
	float section_degree, section_length;
	float section_radian;

    //! 現在の区間長を取得する
	section_length = section_length_read();
 8001f8e:	f001 ffe7 	bl	8003f60 <section_length_read>
 8001f92:	ed87 0a03 	vstr	s0, [r7, #12]
	//! 必要な情報をバッファに保存する
	course_data_saving();
 8001f96:	f000 fbc5 	bl	8002724 <course_data_saving>
	//! 現在点を次の区間開始点に設定する。値のリセットは別でやる
	section_length_set_buffer();
 8001f9a:	f002 f817 	bl	8003fcc <section_length_set_buffer>
	//! 角度を取得するだけ、値のアップデートやリセットは別で行われる
	section_degree = course_read_section_degree();
 8001f9e:	f7ff ffa1 	bl	8001ee4 <course_read_section_degree>
 8001fa2:	ed87 0a02 	vstr	s0, [r7, #8]
	//! 角度を保存する
	course_imu_data_saving();
 8001fa6:	f000 fbe1 	bl	800276c <course_imu_data_saving>
	//! 長さ情報と角度情報をいっぺんにリセットする
	course_reset();
 8001faa:	f7ff ffbb 	bl	8001f24 <course_reset>

#if MODE_IMU_CALCLATE
	course_section_length = // course_section_length_from_imu
#endif

	section_radian = section_degree * M_PI / (float) 180;
 8001fae:	68b8      	ldr	r0, [r7, #8]
 8001fb0:	f7fe faca 	bl	8000548 <__aeabi_f2d>
 8001fb4:	a314      	add	r3, pc, #80	; (adr r3, 8002008 <course_calclate_radius+0x80>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fb1d 	bl	80005f8 <__aeabi_dmul>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <course_calclate_radius+0x78>)
 8001fcc:	f7fe fc3e 	bl	800084c <__aeabi_ddiv>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	460c      	mov	r4, r1
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	f7fe fe06 	bl	8000be8 <__aeabi_d2f>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	607b      	str	r3, [r7, #4]
	curvature_radius = section_length / (float) section_radian;
 8001fe0:	edd7 6a03 	vldr	s13, [r7, #12]
 8001fe4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fec:	edc7 7a00 	vstr	s15, [r7]
	course_section_radius = curvature_radius;
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <course_calclate_radius+0x7c>)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6013      	str	r3, [r2, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd90      	pop	{r4, r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40668000 	.word	0x40668000
 8002004:	2000042c 	.word	0x2000042c
 8002008:	54442d18 	.word	0x54442d18
 800200c:	400921fb 	.word	0x400921fb

08002010 <course_state_function>:
 * 左センサを読んだら、あるいは、一定区間進んだら course_state_function() を実行するようにプログラムする
 * 探索か二次走行かは course_state_function() 関数内で判断する必要がある
 * 
 */
void course_state_function()
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
	PlayMode pm;
	pm = rotary_read_playmode();
 8002016:	f7ff fa87 	bl	8001528 <rotary_read_playmode>
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
	if(pm == search || pm == motor_free )
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d002      	beq.n	800202a <course_state_function+0x1a>
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	2b04      	cmp	r3, #4
 8002028:	d123      	bne.n	8002072 <course_state_function+0x62>
	{
		coursedata.course_state_count_max = course_read_state_count();
 800202a:	f7ff ff91 	bl	8001f50 <course_read_state_count>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <course_state_function+0x94>)
 8002034:	801a      	strh	r2, [r3, #0]
		//! 区間長を計算して現在点を次の区間開始点に設定する。区間の角度を取り出す。これら２つから区間半径を計算する。
		course_calclate_radius();
 8002036:	f7ff ffa7 	bl	8001f88 <course_calclate_radius>
		//! 計算された半径を格納するだけ。アップデートやリセットは別でやる。
		coursedata.radius[course_state_count] = course_read_curvature_radius();
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <course_state_function+0x98>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	461c      	mov	r4, r3
 8002040:	f7ff ff78 	bl	8001f34 <course_read_curvature_radius>
 8002044:	eef0 7a40 	vmov.f32	s15, s0
 8002048:	4a16      	ldr	r2, [pc, #88]	; (80020a4 <course_state_function+0x94>)
 800204a:	00a3      	lsls	r3, r4, #2
 800204c:	4413      	add	r3, r2
 800204e:	3304      	adds	r3, #4
 8002050:	edc3 7a00 	vstr	s15, [r3]
		//! マーカを読んだ場所の記録だけする。値のアップデートやリセットは他でやる。
		coursedata.marker[course_state_count] = length_read();
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <course_state_function+0x98>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	461c      	mov	r4, r3
 800205a:	f000 fe27 	bl	8002cac <length_read>
 800205e:	eef0 7a40 	vmov.f32	s15, s0
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <course_state_function+0x94>)
 8002064:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3304      	adds	r3, #4
 800206e:	edc3 7a00 	vstr	s15, [r3]
	}
	if(pm == accel)
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d10f      	bne.n	8002098 <course_state_function+0x88>
	{
		float fixed_velocity_target;
		// course_calclate_radius() を呼び出していないのでリセットする必要がある
		//! 現在地を区間開始点にする
		section_length_set_buffer();
 8002078:	f001 ffa8 	bl	8003fcc <section_length_set_buffer>
		fixed_velocity_target = data_speed[course_state_count];
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <course_state_function+0x98>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <course_state_function+0x9c>)
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	603b      	str	r3, [r7, #0]
		__course_debug_target_speed__ = fixed_velocity_target;
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <course_state_function+0xa0>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6013      	str	r3, [r2, #0]
		velotrace_set_target_direct(fixed_velocity_target);
 8002090:	ed97 0a00 	vldr	s0, [r7]
 8002094:	f003 fc24 	bl	80058e0 <velotrace_set_target_direct>
	}
	course_increment_state_count();
 8002098:	f7ff ff66 	bl	8001f68 <course_increment_state_count>
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd90      	pop	{r4, r7, pc}
 80020a4:	20000b38 	.word	0x20000b38
 80020a8:	20000428 	.word	0x20000428
 80020ac:	20000434 	.word	0x20000434
 80020b0:	20000418 	.word	0x20000418

080020b4 <course_d_print>:

void course_d_print()
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
#if D_COURSE
	printf("__course_debug_target_speed__ = %2.5f\r\n", __course_debug_target_speed__);
#endif
	encoder_d_print();
 80020b8:	f000 fba0 	bl	80027fc <encoder_d_print>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}

080020c0 <course_radius2speed>:

float course_radius2speed(float radius)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed;
	radius = fabs(radius);
 80020ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ce:	eef0 7ae7 	vabs.f32	s15, s15
 80020d2:	edc7 7a01 	vstr	s15, [r7, #4]
	if(radius < 0.075f) speed = 1.000f;
 80020d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020da:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800219c <course_radius2speed+0xdc>
 80020de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	d503      	bpl.n	80020f0 <course_radius2speed+0x30>
 80020e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e04b      	b.n	8002188 <course_radius2speed+0xc8>
    else if(radius < 0.125f) speed = 1.200f;
 80020f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f4:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80020f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002100:	d502      	bpl.n	8002108 <course_radius2speed+0x48>
 8002102:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <course_radius2speed+0xe0>)
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	e03f      	b.n	8002188 <course_radius2speed+0xc8>
    else if(radius < 0.175f) speed = 1.500f;
 8002108:	edd7 7a01 	vldr	s15, [r7, #4]
 800210c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80021a4 <course_radius2speed+0xe4>
 8002110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002118:	d503      	bpl.n	8002122 <course_radius2speed+0x62>
 800211a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e032      	b.n	8002188 <course_radius2speed+0xc8>
    else if(radius < 0.45f) speed = 2.00f;
 8002122:	edd7 7a01 	vldr	s15, [r7, #4]
 8002126:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80021a8 <course_radius2speed+0xe8>
 800212a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002132:	d503      	bpl.n	800213c <course_radius2speed+0x7c>
 8002134:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e025      	b.n	8002188 <course_radius2speed+0xc8>
    else if(radius < 0.8f) speed = 2.500f;
 800213c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002140:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021ac <course_radius2speed+0xec>
 8002144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	d502      	bpl.n	8002154 <course_radius2speed+0x94>
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <course_radius2speed+0xf0>)
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	e019      	b.n	8002188 <course_radius2speed+0xc8>
    else if(radius < 1.5f) speed = 2.500f;
 8002154:	edd7 7a01 	vldr	s15, [r7, #4]
 8002158:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800215c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002164:	d502      	bpl.n	800216c <course_radius2speed+0xac>
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <course_radius2speed+0xf0>)
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e00d      	b.n	8002188 <course_radius2speed+0xc8>
    else if(radius < 2.5f) speed = 2.500f;
 800216c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002170:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217c:	d502      	bpl.n	8002184 <course_radius2speed+0xc4>
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <course_radius2speed+0xf0>)
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e001      	b.n	8002188 <course_radius2speed+0xc8>
    else speed = 2.50f;
 8002184:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <course_radius2speed+0xf0>)
 8002186:	60fb      	str	r3, [r7, #12]
	// speed = - (4238566523291511 * pow(radius, 5)) / (double) 633825300114114700748351602688 + (8582934509267735 * pow(radius, 4)) / (double) 77371252455336267181195264 - (1459060547913519 * pow(radius, 3)) / (double) 2361183241434822606848 + (2682365349594497 * pow(radius, 2)) / (double) 2305843009213693952 + (1737420468106149 * radius) / (double) 4503599627370496 + 7057670738269725 / (double) 8796093022208;
	return speed;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	ee07 3a90 	vmov	s15, r3
}
 800218e:	eeb0 0a67 	vmov.f32	s0, s15
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	3d99999a 	.word	0x3d99999a
 80021a0:	3f99999a 	.word	0x3f99999a
 80021a4:	3e333333 	.word	0x3e333333
 80021a8:	3ee66666 	.word	0x3ee66666
 80021ac:	3f4ccccd 	.word	0x3f4ccccd
 80021b0:	40200000 	.word	0x40200000
 80021b4:	00000000 	.word	0x00000000

080021b8 <course_fixing_radius2speed>:

void course_fixing_radius2speed()
{
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	f2ad 6d7c 	subw	sp, sp, #1660	; 0x67c
 80021be:	af00      	add	r7, sp, #0
	float accel_length;
	uint16_t imax;
	imax = coursedata.course_state_count_max;
 80021c0:	4bdd      	ldr	r3, [pc, #884]	; (8002538 <course_fixing_radius2speed+0x380>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f8a7 3664 	strh.w	r3, [r7, #1636]	; 0x664
	/* まず矩形グラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80021c8:	f8b7 3664 	ldrh.w	r3, [r7, #1636]	; 0x664
 80021cc:	f8a7 3676 	strh.w	r3, [r7, #1654]	; 0x676
 80021d0:	e020      	b.n	8002214 <course_fixing_radius2speed+0x5c>
	{
		uint16_t index;
		index = imax - course_state_size;
 80021d2:	f8b7 2664 	ldrh.w	r2, [r7, #1636]	; 0x664
 80021d6:	f8b7 3676 	ldrh.w	r3, [r7, #1654]	; 0x676
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f8a7 3646 	strh.w	r3, [r7, #1606]	; 0x646
		data_speed[index] = course_radius2speed(coursedata.radius[index]);
 80021e0:	f8b7 3646 	ldrh.w	r3, [r7, #1606]	; 0x646
 80021e4:	4ad4      	ldr	r2, [pc, #848]	; (8002538 <course_fixing_radius2speed+0x380>)
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	3304      	adds	r3, #4
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	f8b7 4646 	ldrh.w	r4, [r7, #1606]	; 0x646
 80021f4:	eeb0 0a67 	vmov.f32	s0, s15
 80021f8:	f7ff ff62 	bl	80020c0 <course_radius2speed>
 80021fc:	eef0 7a40 	vmov.f32	s15, s0
 8002200:	4ace      	ldr	r2, [pc, #824]	; (800253c <course_fixing_radius2speed+0x384>)
 8002202:	00a3      	lsls	r3, r4, #2
 8002204:	4413      	add	r3, r2
 8002206:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800220a:	f8b7 3676 	ldrh.w	r3, [r7, #1654]	; 0x676
 800220e:	3b01      	subs	r3, #1
 8002210:	f8a7 3676 	strh.w	r3, [r7, #1654]	; 0x676
 8002214:	f8b7 3676 	ldrh.w	r3, [r7, #1654]	; 0x676
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1da      	bne.n	80021d2 <course_fixing_radius2speed+0x1a>
	}

	float accel_glaph[COURSE_STATE_SIZE];
	float decel_glaph[COURSE_STATE_SIZE];

	accel_glaph[0] = 1;
 800221c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 8002220:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002224:	601a      	str	r2, [r3, #0]
	decel_glaph[imax] = 20;
 8002226:	f8b7 3664 	ldrh.w	r3, [r7, #1636]	; 0x664
 800222a:	1d3a      	adds	r2, r7, #4
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	4ac3      	ldr	r2, [pc, #780]	; (8002540 <course_fixing_radius2speed+0x388>)
 8002232:	601a      	str	r2, [r3, #0]

	accel_length = (float) COURSE_SAMPLING_LENGTH * course_accel_max;
 8002234:	4bc3      	ldr	r3, [pc, #780]	; (8002544 <course_fixing_radius2speed+0x38c>)
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8002548 <course_fixing_radius2speed+0x390>
 800223e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002242:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8002246:	edc3 7a00 	vstr	s15, [r3]

	/* 加速方向でのこぎりグラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800224a:	f8b7 3664 	ldrh.w	r3, [r7, #1636]	; 0x664
 800224e:	f8a7 3674 	strh.w	r3, [r7, #1652]	; 0x674
 8002252:	e08f      	b.n	8002374 <course_fixing_radius2speed+0x1bc>
	{
		uint16_t index;
		float v1, v2, vref;
		index = imax - course_state_size;
 8002254:	f8b7 2664 	ldrh.w	r2, [r7, #1636]	; 0x664
 8002258:	f8b7 3674 	ldrh.w	r3, [r7, #1652]	; 0x674
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
		v1 = accel_glaph[index];
 8002262:	f8b7 3652 	ldrh.w	r3, [r7, #1618]	; 0x652
 8002266:	f507 7249 	add.w	r2, r7, #804	; 0x324
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8002274:	6013      	str	r3, [r2, #0]
		v2 = data_speed[index + 1];
 8002276:	f8b7 3652 	ldrh.w	r3, [r7, #1618]	; 0x652
 800227a:	3301      	adds	r3, #1
 800227c:	4aaf      	ldr	r2, [pc, #700]	; (800253c <course_fixing_radius2speed+0x384>)
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f507 62c9 	add.w	r2, r7, #1608	; 0x648
 8002288:	6013      	str	r3, [r2, #0]
		if(v2 > v1)
 800228a:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800228e:	ed93 7a00 	vldr	s14, [r3]
 8002292:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	dd51      	ble.n	8002348 <course_fixing_radius2speed+0x190>
		{
			if(accel_length >= pow(v2 - v1, 2))
 80022a4:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	f7fe f94d 	bl	8000548 <__aeabi_f2d>
 80022ae:	4604      	mov	r4, r0
 80022b0:	460d      	mov	r5, r1
 80022b2:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 80022b6:	ed93 7a00 	vldr	s14, [r3]
 80022ba:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c6:	ee17 0a90 	vmov	r0, s15
 80022ca:	f7fe f93d 	bl	8000548 <__aeabi_f2d>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8002530 <course_fixing_radius2speed+0x378>
 80022d6:	ec43 2b10 	vmov	d0, r2, r3
 80022da:	f00c fdbb 	bl	800ee54 <pow>
 80022de:	ec53 2b10 	vmov	r2, r3, d0
 80022e2:	4620      	mov	r0, r4
 80022e4:	4629      	mov	r1, r5
 80022e6:	f7fe fc0d 	bl	8000b04 <__aeabi_dcmpge>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <course_fixing_radius2speed+0x146>
			{
				vref = v2;
 80022f0:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	e02a      	b.n	8002354 <course_fixing_radius2speed+0x19c>
			}
			else
			{
				vref = sqrt(accel_length) + v1;
 80022fe:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	f7fe f920 	bl	8000548 <__aeabi_f2d>
 8002308:	4603      	mov	r3, r0
 800230a:	460c      	mov	r4, r1
 800230c:	ec44 3b10 	vmov	d0, r3, r4
 8002310:	f00c ff10 	bl	800f134 <sqrt>
 8002314:	ec56 5b10 	vmov	r5, r6, d0
 8002318:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	f7fe f913 	bl	8000548 <__aeabi_f2d>
 8002322:	4603      	mov	r3, r0
 8002324:	460c      	mov	r4, r1
 8002326:	461a      	mov	r2, r3
 8002328:	4623      	mov	r3, r4
 800232a:	4628      	mov	r0, r5
 800232c:	4631      	mov	r1, r6
 800232e:	f7fd ffad 	bl	800028c <__adddf3>
 8002332:	4603      	mov	r3, r0
 8002334:	460c      	mov	r4, r1
 8002336:	4618      	mov	r0, r3
 8002338:	4621      	mov	r1, r4
 800233a:	f7fe fc55 	bl	8000be8 <__aeabi_d2f>
 800233e:	4603      	mov	r3, r0
 8002340:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e005      	b.n	8002354 <course_fixing_radius2speed+0x19c>
			}
		}
		else
		{
			vref = v2;
 8002348:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8002352:	6013      	str	r3, [r2, #0]
		}
		accel_glaph[index + 1] = vref;
 8002354:	f8b7 3652 	ldrh.w	r3, [r7, #1618]	; 0x652
 8002358:	3301      	adds	r3, #1
 800235a:	f507 7249 	add.w	r2, r7, #804	; 0x324
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4413      	add	r3, r2
 8002362:	f507 62ce 	add.w	r2, r7, #1648	; 0x670
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800236a:	f8b7 3674 	ldrh.w	r3, [r7, #1652]	; 0x674
 800236e:	3b01      	subs	r3, #1
 8002370:	f8a7 3674 	strh.w	r3, [r7, #1652]	; 0x674
 8002374:	f8b7 3674 	ldrh.w	r3, [r7, #1652]	; 0x674
 8002378:	2b00      	cmp	r3, #0
 800237a:	f47f af6b 	bne.w	8002254 <course_fixing_radius2speed+0x9c>
		printf("course_fixing_radius2speed() > accel 加速グラフ\r\n");
		#endif
	}

	/* 減速方向でのこぎりグラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800237e:	f8b7 3664 	ldrh.w	r3, [r7, #1636]	; 0x664
 8002382:	f8a7 366e 	strh.w	r3, [r7, #1646]	; 0x66e
 8002386:	e08a      	b.n	800249e <course_fixing_radius2speed+0x2e6>
	{
		uint16_t index;
		float v2, v3, vref;
		index = course_state_size;
 8002388:	f8b7 366e 	ldrh.w	r3, [r7, #1646]	; 0x66e
 800238c:	f8a7 365c 	strh.w	r3, [r7, #1628]	; 0x65c
		v3 = decel_glaph[index];
 8002390:	f8b7 365c 	ldrh.w	r3, [r7, #1628]	; 0x65c
 8002394:	1d3a      	adds	r2, r7, #4
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f507 62cb 	add.w	r2, r7, #1624	; 0x658
 80023a0:	6013      	str	r3, [r2, #0]
		v2 = data_speed[index - 1];
 80023a2:	f8b7 365c 	ldrh.w	r3, [r7, #1628]	; 0x65c
 80023a6:	3b01      	subs	r3, #1
 80023a8:	4a64      	ldr	r2, [pc, #400]	; (800253c <course_fixing_radius2speed+0x384>)
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f207 6254 	addw	r2, r7, #1620	; 0x654
 80023b4:	6013      	str	r3, [r2, #0]
		if(v2 > v3)
 80023b6:	f207 6354 	addw	r3, r7, #1620	; 0x654
 80023ba:	ed93 7a00 	vldr	s14, [r3]
 80023be:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ce:	dd51      	ble.n	8002474 <course_fixing_radius2speed+0x2bc>
		{
			if(accel_length >= pow(v3 - v2, 2))
 80023d0:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	f7fe f8b7 	bl	8000548 <__aeabi_f2d>
 80023da:	4604      	mov	r4, r0
 80023dc:	460d      	mov	r5, r1
 80023de:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 80023e2:	ed93 7a00 	vldr	s14, [r3]
 80023e6:	f207 6354 	addw	r3, r7, #1620	; 0x654
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f2:	ee17 0a90 	vmov	r0, s15
 80023f6:	f7fe f8a7 	bl	8000548 <__aeabi_f2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8002530 <course_fixing_radius2speed+0x378>
 8002402:	ec43 2b10 	vmov	d0, r2, r3
 8002406:	f00c fd25 	bl	800ee54 <pow>
 800240a:	ec53 2b10 	vmov	r2, r3, d0
 800240e:	4620      	mov	r0, r4
 8002410:	4629      	mov	r1, r5
 8002412:	f7fe fb77 	bl	8000b04 <__aeabi_dcmpge>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <course_fixing_radius2speed+0x272>
			{
				vref = v2;
 800241c:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e02a      	b.n	8002480 <course_fixing_radius2speed+0x2c8>
			}
			else
			{
				vref = sqrt(accel_length) + v3;
 800242a:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	f7fe f88a 	bl	8000548 <__aeabi_f2d>
 8002434:	4603      	mov	r3, r0
 8002436:	460c      	mov	r4, r1
 8002438:	ec44 3b10 	vmov	d0, r3, r4
 800243c:	f00c fe7a 	bl	800f134 <sqrt>
 8002440:	ec56 5b10 	vmov	r5, r6, d0
 8002444:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	f7fe f87d 	bl	8000548 <__aeabi_f2d>
 800244e:	4603      	mov	r3, r0
 8002450:	460c      	mov	r4, r1
 8002452:	461a      	mov	r2, r3
 8002454:	4623      	mov	r3, r4
 8002456:	4628      	mov	r0, r5
 8002458:	4631      	mov	r1, r6
 800245a:	f7fd ff17 	bl	800028c <__adddf3>
 800245e:	4603      	mov	r3, r0
 8002460:	460c      	mov	r4, r1
 8002462:	4618      	mov	r0, r3
 8002464:	4621      	mov	r1, r4
 8002466:	f7fe fbbf 	bl	8000be8 <__aeabi_d2f>
 800246a:	4603      	mov	r3, r0
 800246c:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e005      	b.n	8002480 <course_fixing_radius2speed+0x2c8>
			}
		}
		else
		{
			vref = v2;
 8002474:	f207 6354 	addw	r3, r7, #1620	; 0x654
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 800247e:	6013      	str	r3, [r2, #0]
		}
		decel_glaph[index - 1] = vref;
 8002480:	f8b7 365c 	ldrh.w	r3, [r7, #1628]	; 0x65c
 8002484:	3b01      	subs	r3, #1
 8002486:	1d3a      	adds	r2, r7, #4
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002494:	f8b7 366e 	ldrh.w	r3, [r7, #1646]	; 0x66e
 8002498:	3b01      	subs	r3, #1
 800249a:	f8a7 366e 	strh.w	r3, [r7, #1646]	; 0x66e
 800249e:	f8b7 366e 	ldrh.w	r3, [r7, #1646]	; 0x66e
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f47f af70 	bne.w	8002388 <course_fixing_radius2speed+0x1d0>
		printf("course_fixing_radius2speed() > decel 減速グラフ\r\n");
		#endif
	}

	/* 加速方向と減速方向で遅い方の速度を速度値として記憶させる */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80024a8:	f8b7 3664 	ldrh.w	r3, [r7, #1636]	; 0x664
 80024ac:	f8a7 3666 	strh.w	r3, [r7, #1638]	; 0x666
 80024b0:	e033      	b.n	800251a <course_fixing_radius2speed+0x362>
	{
		uint16_t index;
		index = imax - course_state_size;
 80024b2:	f8b7 2664 	ldrh.w	r2, [r7, #1636]	; 0x664
 80024b6:	f8b7 3666 	ldrh.w	r3, [r7, #1638]	; 0x666
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	f8a7 365e 	strh.w	r3, [r7, #1630]	; 0x65e
		data_speed[index] = (accel_glaph[index] > decel_glaph[index]) ? decel_glaph[index] : accel_glaph[index];
 80024c0:	f8b7 365e 	ldrh.w	r3, [r7, #1630]	; 0x65e
 80024c4:	f507 7249 	add.w	r2, r7, #804	; 0x324
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	ed93 7a00 	vldr	s14, [r3]
 80024d0:	f8b7 365e 	ldrh.w	r3, [r7, #1630]	; 0x65e
 80024d4:	1d3a      	adds	r2, r7, #4
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	dd06      	ble.n	80024f6 <course_fixing_radius2speed+0x33e>
 80024e8:	f8b7 365e 	ldrh.w	r3, [r7, #1630]	; 0x65e
 80024ec:	1d3a      	adds	r2, r7, #4
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	e006      	b.n	8002504 <course_fixing_radius2speed+0x34c>
 80024f6:	f8b7 365e 	ldrh.w	r3, [r7, #1630]	; 0x65e
 80024fa:	f507 7249 	add.w	r2, r7, #804	; 0x324
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8b7 265e 	ldrh.w	r2, [r7, #1630]	; 0x65e
 8002508:	490c      	ldr	r1, [pc, #48]	; (800253c <course_fixing_radius2speed+0x384>)
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	440a      	add	r2, r1
 800250e:	6013      	str	r3, [r2, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002510:	f8b7 3666 	ldrh.w	r3, [r7, #1638]	; 0x666
 8002514:	3b01      	subs	r3, #1
 8002516:	f8a7 3666 	strh.w	r3, [r7, #1638]	; 0x666
 800251a:	f8b7 3666 	ldrh.w	r3, [r7, #1638]	; 0x666
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1c7      	bne.n	80024b2 <course_fixing_radius2speed+0x2fa>
		#if D_COURSE
		printf("course_fixing_radius2speed() > speed 速度グラフ\r\n");
		printf("%4d, %7.3f, %7.3f\r\n", index, accel_glaph[index], decel_glaph[index]);
		#endif
	}
}
 8002522:	bf00      	nop
 8002524:	f207 677c 	addw	r7, r7, #1660	; 0x67c
 8002528:	46bd      	mov	sp, r7
 800252a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800252c:	f3af 8000 	nop.w
 8002530:	00000000 	.word	0x00000000
 8002534:	40000000 	.word	0x40000000
 8002538:	20000b38 	.word	0x20000b38
 800253c:	20000434 	.word	0x20000434
 8002540:	41a00000 	.word	0x41a00000
 8002544:	20000424 	.word	0x20000424
 8002548:	3c23d70a 	.word	0x3c23d70a

0800254c <course_print_flash>:

void course_print_flash()
{
 800254c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af02      	add	r7, sp, #8
	uint16_t course_state_size;
	course_state_size = COURSE_STATE_SIZE;
 8002554:	23c8      	movs	r3, #200	; 0xc8
 8002556:	81fb      	strh	r3, [r7, #14]
	//! print flash contents
	while(switch_read_enter())
 8002558:	e06d      	b.n	8002636 <course_print_flash+0xea>
	{
		if(course_state_size > 0)
 800255a:	89fb      	ldrh	r3, [r7, #14]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d066      	beq.n	800262e <course_print_flash+0xe2>
		{
			uint16_t index;
			float print_data_a, print_data_b;
			index = COURSE_STATE_SIZE - course_state_size;
 8002560:	89fb      	ldrh	r3, [r7, #14]
 8002562:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002566:	807b      	strh	r3, [r7, #2]
			switch(rotary_read_value())
 8002568:	f7fe fff6 	bl	8001558 <rotary_read_value>
 800256c:	4603      	mov	r3, r0
 800256e:	3b0c      	subs	r3, #12
 8002570:	2b03      	cmp	r3, #3
 8002572:	d841      	bhi.n	80025f8 <course_print_flash+0xac>
 8002574:	a201      	add	r2, pc, #4	; (adr r2, 800257c <course_print_flash+0x30>)
 8002576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257a:	bf00      	nop
 800257c:	080025d9 	.word	0x080025d9
 8002580:	080025bd 	.word	0x080025bd
 8002584:	080025a9 	.word	0x080025a9
 8002588:	0800258d 	.word	0x0800258d
			{
				case 15:
					//! CourseData
					print_data_a = data_speed[index];
 800258c:	887b      	ldrh	r3, [r7, #2]
 800258e:	4a2f      	ldr	r2, [pc, #188]	; (800264c <course_print_flash+0x100>)
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60bb      	str	r3, [r7, #8]
					print_data_b = coursedata.radius[index];
 8002598:	887b      	ldrh	r3, [r7, #2]
 800259a:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <course_print_flash+0x104>)
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	3304      	adds	r3, #4
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	607b      	str	r3, [r7, #4]
					break;
 80025a6:	e028      	b.n	80025fa <course_print_flash+0xae>
				case 14:
					//! ImuData
					print_data_a = imudata.yaw[index];
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	4a2a      	ldr	r2, [pc, #168]	; (8002654 <course_print_flash+0x108>)
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60bb      	str	r3, [r7, #8]
					print_data_b = 0.000f;
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
					break;
 80025ba:	e01e      	b.n	80025fa <course_print_flash+0xae>
				case 13:
					//! EncoderData
					print_data_a = encoderdata.left[index];
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	4a26      	ldr	r2, [pc, #152]	; (8002658 <course_print_flash+0x10c>)
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60bb      	str	r3, [r7, #8]
					print_data_b = encoderdata.right[index];
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4a23      	ldr	r2, [pc, #140]	; (8002658 <course_print_flash+0x10c>)
 80025cc:	33c8      	adds	r3, #200	; 0xc8
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	607b      	str	r3, [r7, #4]
					break;
 80025d6:	e010      	b.n	80025fa <course_print_flash+0xae>
				case 12:
					//! CourseData
					print_data_a = coursedata.marker[index];
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <course_print_flash+0x104>)
 80025dc:	33c8      	adds	r3, #200	; 0xc8
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60bb      	str	r3, [r7, #8]
					print_data_a = coursedata.course_state_count_max;
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <course_print_flash+0x104>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	ee07 3a90 	vmov	s15, r3
 80025f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f4:	edc7 7a02 	vstr	s15, [r7, #8]
				default :
					break;
 80025f8:	bf00      	nop
			}
			printf("%6d, %8lf, %8lf\r\n", index, print_data_a, print_data_b);
 80025fa:	887d      	ldrh	r5, [r7, #2]
 80025fc:	68b8      	ldr	r0, [r7, #8]
 80025fe:	f7fd ffa3 	bl	8000548 <__aeabi_f2d>
 8002602:	4680      	mov	r8, r0
 8002604:	4689      	mov	r9, r1
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fd ff9e 	bl	8000548 <__aeabi_f2d>
 800260c:	4603      	mov	r3, r0
 800260e:	460c      	mov	r4, r1
 8002610:	e9cd 3400 	strd	r3, r4, [sp]
 8002614:	4642      	mov	r2, r8
 8002616:	464b      	mov	r3, r9
 8002618:	4629      	mov	r1, r5
 800261a:	4810      	ldr	r0, [pc, #64]	; (800265c <course_print_flash+0x110>)
 800261c:	f009 f826 	bl	800b66c <iprintf>
			course_state_size = course_state_size - 1;
 8002620:	89fb      	ldrh	r3, [r7, #14]
 8002622:	3b01      	subs	r3, #1
 8002624:	81fb      	strh	r3, [r7, #14]
			HAL_Delay(100);
 8002626:	2064      	movs	r0, #100	; 0x64
 8002628:	f003 fbe4 	bl	8005df4 <HAL_Delay>
 800262c:	e003      	b.n	8002636 <course_print_flash+0xea>
		}
		else
		{
			HAL_Delay(1000);
 800262e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002632:	f003 fbdf 	bl	8005df4 <HAL_Delay>
	while(switch_read_enter())
 8002636:	f7ff f87d 	bl	8001734 <switch_read_enter>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d18c      	bne.n	800255a <course_print_flash+0xe>
		}
	}
}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800264a:	bf00      	nop
 800264c:	20000434 	.word	0x20000434
 8002650:	20000b38 	.word	0x20000b38
 8002654:	2000117c 	.word	0x2000117c
 8002658:	200014dc 	.word	0x200014dc
 800265c:	08010220 	.word	0x08010220

08002660 <course_reset_flash>:

void course_reset_flash()
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 8002666:	23c8      	movs	r3, #200	; 0xc8
 8002668:	80fb      	strh	r3, [r7, #6]
 800266a:	e020      	b.n	80026ae <course_reset_flash+0x4e>
	{
		uint16_t index;
		index = COURSE_STATE_SIZE - course_state_size;
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8002672:	80bb      	strh	r3, [r7, #4]
		data_speed[index] = COURSE_SPEED_DEFAULT;
 8002674:	88bb      	ldrh	r3, [r7, #4]
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <course_reset_flash+0x60>)
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <course_reset_flash+0x64>)
 800267e:	601a      	str	r2, [r3, #0]
		coursedata.radius[index] = COURSE_RADIUS_DEFAULT;
 8002680:	88bb      	ldrh	r3, [r7, #4]
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <course_reset_flash+0x68>)
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3304      	adds	r3, #4
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <course_reset_flash+0x6c>)
 800268c:	601a      	str	r2, [r3, #0]
		encoderdata.left[index] = 8.888f;
 800268e:	88bb      	ldrh	r3, [r7, #4]
 8002690:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <course_reset_flash+0x70>)
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	4a0f      	ldr	r2, [pc, #60]	; (80026d4 <course_reset_flash+0x74>)
 8002698:	601a      	str	r2, [r3, #0]
		encoderdata.right[index] = 7.777f;
 800269a:	88bb      	ldrh	r3, [r7, #4]
 800269c:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <course_reset_flash+0x70>)
 800269e:	33c8      	adds	r3, #200	; 0xc8
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <course_reset_flash+0x78>)
 80026a6:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	80fb      	strh	r3, [r7, #6]
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1db      	bne.n	800266c <course_reset_flash+0xc>
	}
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	20000434 	.word	0x20000434
 80026c4:	3f7fbe77 	.word	0x3f7fbe77
 80026c8:	20000b38 	.word	0x20000b38
 80026cc:	411fd70a 	.word	0x411fd70a
 80026d0:	200014dc 	.word	0x200014dc
 80026d4:	410e353f 	.word	0x410e353f
 80026d8:	40f8dd2f 	.word	0x40f8dd2f

080026dc <accel_max_calc>:

float accel_max_calc(uint8_t i)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
	return ACCEL_MAX_MAX - ((ACCEL_STEP_SIZE - 1) - i) * (float) (ACCEL_MAX_MAX - ACCEL_MAX_MIN) / (float) (ACCEL_STEP_SIZE - 1);
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	f1c3 030f 	rsb	r3, r3, #15
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800271c <accel_max_calc+0x40>
 80026f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026fc:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8002700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002704:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002720 <accel_max_calc+0x44>
 8002708:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800270c:	eeb0 0a67 	vmov.f32	s0, s15
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	3e428f5c 	.word	0x3e428f5c
 8002720:	3e4ccccd 	.word	0x3e4ccccd

08002724 <course_data_saving>:

void course_data_saving()
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
	uint16_t index;
	index = course_read_state_count();
 800272a:	f7ff fc11 	bl	8001f50 <course_read_state_count>
 800272e:	4603      	mov	r3, r0
 8002730:	80fb      	strh	r3, [r7, #6]
	encoderdata.left[index] = section_length_read_left();
 8002732:	88fc      	ldrh	r4, [r7, #6]
 8002734:	f001 fc2e 	bl	8003f94 <section_length_read_left>
 8002738:	eef0 7a40 	vmov.f32	s15, s0
 800273c:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <course_data_saving+0x44>)
 800273e:	00a3      	lsls	r3, r4, #2
 8002740:	4413      	add	r3, r2
 8002742:	edc3 7a00 	vstr	s15, [r3]
	encoderdata.right[index] = section_length_read_right();
 8002746:	88fc      	ldrh	r4, [r7, #6]
 8002748:	f001 fc32 	bl	8003fb0 <section_length_read_right>
 800274c:	eef0 7a40 	vmov.f32	s15, s0
 8002750:	4a05      	ldr	r2, [pc, #20]	; (8002768 <course_data_saving+0x44>)
 8002752:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	edc3 7a00 	vstr	s15, [r3]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bd90      	pop	{r4, r7, pc}
 8002766:	bf00      	nop
 8002768:	200014dc 	.word	0x200014dc

0800276c <course_imu_data_saving>:

void course_imu_data_saving()
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
	uint16_t index;
	index = course_read_state_count();
 8002772:	f7ff fbed 	bl	8001f50 <course_read_state_count>
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
	imudata.yaw[index] = course_read_section_degree();
 800277a:	88fc      	ldrh	r4, [r7, #6]
 800277c:	f7ff fbb2 	bl	8001ee4 <course_read_section_degree>
 8002780:	eef0 7a40 	vmov.f32	s15, s0
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <course_imu_data_saving+0x2c>)
 8002786:	00a3      	lsls	r3, r4, #2
 8002788:	4413      	add	r3, r2
 800278a:	edc3 7a00 	vstr	s15, [r3]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	bf00      	nop
 8002798:	2000117c 	.word	0x2000117c

0800279c <encoder_length_left>:
    //! 単位は [ um ]
    return (float) encoder * (float) LENGTHPERPULSE;
}

float encoder_length_left()
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_left() > ");
    printf("encoder_left * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_left, LENGTHPERPULSE, encoder_left * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_left * (float) LENGTHPERPULSE;
 80027a0:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <encoder_length_left+0x28>)
 80027a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80027c8 <encoder_length_left+0x2c>
 80027b2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80027b6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000b2c 	.word	0x20000b2c
 80027c8:	41076bf7 	.word	0x41076bf7

080027cc <encoder_length_right>:

float encoder_length_right()
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_right() > ");
    printf("encoder_right * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_right, LENGTHPERPULSE, encoder_right * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_right * (float) LENGTHPERPULSE;
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <encoder_length_right+0x28>)
 80027d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027de:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80027f8 <encoder_length_right+0x2c>
 80027e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80027e6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000b34 	.word	0x20000b34
 80027f8:	41076bf7 	.word	0x41076bf7

080027fc <encoder_d_print>:

void encoder_d_print()
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
    #if D_ENCODER
    //! printf("encoder.c > encoder_left = %5d, encoder_left = %5d, encoder = %f\r\n", encoder_left, encoder_right, encoder);
    printf("encoder.c > encoder_length_left = %5d, encoder_length_right = %5d, encoder_length = %f\r\n", encoder_length_left(), encoder_length_right(), encoder_length());
    #endif
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <encoder_set>:

/* only read tim10_update_values */
void encoder_set()
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8002810:	4b14      	ldr	r3, [pc, #80]	; (8002864 <encoder_set+0x58>)
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	b29b      	uxth	r3, r3
 8002816:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800281a:	b29b      	uxth	r3, r3
 800281c:	b21a      	sxth	r2, r3
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <encoder_set+0x5c>)
 8002820:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <encoder_set+0x60>)
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	b29b      	uxth	r3, r3
 8002828:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800282c:	b29b      	uxth	r3, r3
 800282e:	b21a      	sxth	r2, r3
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <encoder_set+0x64>)
 8002832:	801a      	strh	r2, [r3, #0]
    //! 単位 [ cnt / sampling_time_s ]
    encoder = (encoder_left + encoder_right) / (float) 2;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <encoder_set+0x5c>)
 8002836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283a:	461a      	mov	r2, r3
 800283c:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <encoder_set+0x64>)
 800283e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002842:	4413      	add	r3, r2
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800284c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <encoder_set+0x68>)
 8002856:	edc3 7a00 	vstr	s15, [r3]
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set() > ");
    printf("encoder_left = %6d, encoder_right = %6d, encoder = %6.1f\r\n", encoder_left, encoder_right, encoder);
    #endif

    encoder_set_middle();
 800285a:	f000 f84d 	bl	80028f8 <encoder_set_middle>
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40010000 	.word	0x40010000
 8002868:	20000b2c 	.word	0x20000b2c
 800286c:	40000400 	.word	0x40000400
 8002870:	20000b34 	.word	0x20000b34
 8002874:	20000b30 	.word	0x20000b30

08002878 <encoder_init>:

void encoder_init()
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
    #endif
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
    encoder_left = 0;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <encoder_start+0x38>)
 800288e:	2200      	movs	r2, #0
 8002890:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <encoder_start+0x3c>)
 8002894:	2200      	movs	r2, #0
 8002896:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <encoder_start+0x40>)
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

    encoder_set_middle();
 80028a0:	f000 f82a 	bl	80028f8 <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80028a4:	213c      	movs	r1, #60	; 0x3c
 80028a6:	4809      	ldr	r0, [pc, #36]	; (80028cc <encoder_start+0x44>)
 80028a8:	f006 ff1e 	bl	80096e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80028ac:	213c      	movs	r1, #60	; 0x3c
 80028ae:	4808      	ldr	r0, [pc, #32]	; (80028d0 <encoder_start+0x48>)
 80028b0:	f006 ff1a 	bl	80096e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 80028b4:	4807      	ldr	r0, [pc, #28]	; (80028d4 <encoder_start+0x4c>)
 80028b6:	f006 fc4b 	bl	8009150 <HAL_TIM_Base_Start_IT>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000b2c 	.word	0x20000b2c
 80028c4:	20000b34 	.word	0x20000b34
 80028c8:	20000b30 	.word	0x20000b30
 80028cc:	20000a10 	.word	0x20000a10
 80028d0:	20000890 	.word	0x20000890
 80028d4:	20000848 	.word	0x20000848

080028d8 <encoder_stop>:

void encoder_stop()
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 80028dc:	213c      	movs	r1, #60	; 0x3c
 80028de:	4804      	ldr	r0, [pc, #16]	; (80028f0 <encoder_stop+0x18>)
 80028e0:	f006 ff8f 	bl	8009802 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 80028e4:	213c      	movs	r1, #60	; 0x3c
 80028e6:	4803      	ldr	r0, [pc, #12]	; (80028f4 <encoder_stop+0x1c>)
 80028e8:	f006 ff8b 	bl	8009802 <HAL_TIM_Encoder_Stop>
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000a10 	.word	0x20000a10
 80028f4:	20000890 	.word	0x20000890

080028f8 <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <encoder_set_middle+0x20>)
 80028fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002902:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <encoder_set_middle+0x24>)
 8002906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set_middle() > ");
    printf("TIM1 -> CNT = %6lu, TIM3 -> CNT = %6lu\r\n", TIM1->CNT, TIM3->CNT);
    #endif
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40010000 	.word	0x40010000
 800291c:	40000400 	.word	0x40000400

08002920 <fixed_section_start>:
 */

#include "fixed_section.h"

void fixed_section_start()
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
	//! 作っとく
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <fixed_section_main>:
 * @brief 一定距離ごとに course_state_function() を呼び出す関数
 * @attention
 * 
 */
void fixed_section_main()
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
    float fixed_length;
    //! 現在点の区間長を取得
    fixed_length = section_length_read();
 8002936:	f001 fb13 	bl	8003f60 <section_length_read>
 800293a:	ed87 0a01 	vstr	s0, [r7, #4]
    if(fixed_length >= COURSE_SAMPLING_LENGTH)
 800293e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002942:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002960 <fixed_section_main+0x30>
 8002946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	da00      	bge.n	8002952 <fixed_section_main+0x22>
    {
        //! 現在点の区間長が閾値を超えた時
        course_state_function();
    }
}
 8002950:	e001      	b.n	8002956 <fixed_section_main+0x26>
        course_state_function();
 8002952:	f7ff fb5d 	bl	8002010 <course_state_function>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	3c23d70a 	.word	0x3c23d70a

08002964 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(uint32_t sector_num)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
	erase.Sector = sector_num;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	617b      	str	r3, [r7, #20]
	erase.NbSectors = 1;
 8002974:	2301      	movs	r3, #1
 8002976:	61bb      	str	r3, [r7, #24]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002978:	2302      	movs	r3, #2
 800297a:	61fb      	str	r3, [r7, #28]
	uint32_t pageError = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	60bb      	str	r3, [r7, #8]

	HAL_FLASHEx_Erase(&erase, &pageError);
 8002980:	f107 0208 	add.w	r2, r7, #8
 8002984:	f107 030c 	add.w	r3, r7, #12
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f004 fd5a 	bl	8007444 <HAL_FLASHEx_Erase>
}
 8002990:	bf00      	nop
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
	for (uint32_t add = address; add < (address + size); add++)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	e010      	b.n	80029cc <flash_writting+0x34>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f04f 0400 	mov.w	r4, #0
 80029b4:	461a      	mov	r2, r3
 80029b6:	4623      	mov	r3, r4
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	2000      	movs	r0, #0
 80029bc:	f004 fb8e 	bl	80070dc <HAL_FLASH_Program>
		data++;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	3301      	adds	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	3301      	adds	r3, #1
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d3e8      	bcc.n	80029aa <flash_writting+0x12>
	}
}
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}

080029e0 <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4619      	mov	r1, r3
 80029f2:	68b8      	ldr	r0, [r7, #8]
 80029f4:	f007 ffe8 	bl	800a9c8 <memcpy>
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <flash_write>:

/* FLASH_SECTOR_num を渡すとそのセクタに対応する構造体のデータを書き込んでくれる関数 */
void flash_write(unsigned sector_num)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8002a08:	f004 fbbc 	bl	8007184 <HAL_FLASH_Unlock>
	flash_erase(sector_num);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ffa9 	bl	8002964 <flash_erase>

	if(sector_num == FLASH_SECTOR_8)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d104      	bne.n	8002a22 <flash_write+0x22>
	{
		flash_writting(FLASH_SECTOR_8_START_ADDRESS, (uint8_t *) &analogdata, sizeof(AnalogData));
 8002a18:	2240      	movs	r2, #64	; 0x40
 8002a1a:	4912      	ldr	r1, [pc, #72]	; (8002a64 <flash_write+0x64>)
 8002a1c:	4812      	ldr	r0, [pc, #72]	; (8002a68 <flash_write+0x68>)
 8002a1e:	f7ff ffbb 	bl	8002998 <flash_writting>
	}

	if(sector_num == FLASH_SECTOR_9)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b09      	cmp	r3, #9
 8002a26:	d105      	bne.n	8002a34 <flash_write+0x34>
	{
		flash_writting(FLASH_SECTOR_9_START_ADDRESS, (uint8_t *) &encoderdata, sizeof(EncoderData));
 8002a28:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002a2c:	490f      	ldr	r1, [pc, #60]	; (8002a6c <flash_write+0x6c>)
 8002a2e:	4810      	ldr	r0, [pc, #64]	; (8002a70 <flash_write+0x70>)
 8002a30:	f7ff ffb2 	bl	8002998 <flash_writting>
	}

	if(sector_num == FLASH_SECTOR_10)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b0a      	cmp	r3, #10
 8002a38:	d105      	bne.n	8002a46 <flash_write+0x46>
	{
		flash_writting(FLASH_SECTOR_10_START_ADDRESS, (uint8_t *) &imudata, sizeof(ImuData));
 8002a3a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a3e:	490d      	ldr	r1, [pc, #52]	; (8002a74 <flash_write+0x74>)
 8002a40:	480d      	ldr	r0, [pc, #52]	; (8002a78 <flash_write+0x78>)
 8002a42:	f7ff ffa9 	bl	8002998 <flash_writting>
	}

	if(sector_num == FLASH_SECTOR_11)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b0b      	cmp	r3, #11
 8002a4a:	d105      	bne.n	8002a58 <flash_write+0x58>
	{
		flash_writting(FLASH_SECTOR_11_START_ADDRESS, (uint8_t *) &coursedata, sizeof(CourseData));
 8002a4c:	f240 6244 	movw	r2, #1604	; 0x644
 8002a50:	490a      	ldr	r1, [pc, #40]	; (8002a7c <flash_write+0x7c>)
 8002a52:	480b      	ldr	r0, [pc, #44]	; (8002a80 <flash_write+0x80>)
 8002a54:	f7ff ffa0 	bl	8002998 <flash_writting>
	}

	HAL_FLASH_Lock();
 8002a58:	f004 fbb6 	bl	80071c8 <HAL_FLASH_Lock>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000149c 	.word	0x2000149c
 8002a68:	08080000 	.word	0x08080000
 8002a6c:	200014dc 	.word	0x200014dc
 8002a70:	080a0000 	.word	0x080a0000
 8002a74:	2000117c 	.word	0x2000117c
 8002a78:	080c0000 	.word	0x080c0000
 8002a7c:	20000b38 	.word	0x20000b38
 8002a80:	080e0000 	.word	0x080e0000

08002a84 <flash_read>:

/* FLASH_SECTOR_num を渡すとそのセクタに対応する構造体のデータを読み取ってくれる関数 */
void flash_read(unsigned sector_num)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	//! AnalogData : Sector8
	if(sector_num == FLASH_SECTOR_8)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d104      	bne.n	8002a9c <flash_read+0x18>
	{
		flash_reading(FLASH_SECTOR_8_START_ADDRESS, (uint8_t *) &analogdata, sizeof(AnalogData));
 8002a92:	2240      	movs	r2, #64	; 0x40
 8002a94:	4911      	ldr	r1, [pc, #68]	; (8002adc <flash_read+0x58>)
 8002a96:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <flash_read+0x5c>)
 8002a98:	f7ff ffa2 	bl	80029e0 <flash_reading>
	}

	//! EncoderData : Sector9
	if(sector_num == FLASH_SECTOR_9)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	d105      	bne.n	8002aae <flash_read+0x2a>
	{
		flash_reading(FLASH_SECTOR_9_START_ADDRESS, (uint8_t *) &encoderdata, sizeof(EncoderData));
 8002aa2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8002aa6:	490f      	ldr	r1, [pc, #60]	; (8002ae4 <flash_read+0x60>)
 8002aa8:	480f      	ldr	r0, [pc, #60]	; (8002ae8 <flash_read+0x64>)
 8002aaa:	f7ff ff99 	bl	80029e0 <flash_reading>
	}

	//! ImuData : Sector10
	if(sector_num == FLASH_SECTOR_10)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b0a      	cmp	r3, #10
 8002ab2:	d105      	bne.n	8002ac0 <flash_read+0x3c>
	{
		flash_reading(FLASH_SECTOR_10_START_ADDRESS, (uint8_t *) &imudata, sizeof(ImuData));
 8002ab4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002ab8:	490c      	ldr	r1, [pc, #48]	; (8002aec <flash_read+0x68>)
 8002aba:	480d      	ldr	r0, [pc, #52]	; (8002af0 <flash_read+0x6c>)
 8002abc:	f7ff ff90 	bl	80029e0 <flash_reading>
	}

	//! CourseData : Sector11
	if(sector_num == FLASH_SECTOR_11)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b0b      	cmp	r3, #11
 8002ac4:	d105      	bne.n	8002ad2 <flash_read+0x4e>
	{
		flash_reading(FLASH_SECTOR_11_START_ADDRESS, (uint8_t *) &coursedata, sizeof(CourseData));
 8002ac6:	f240 6244 	movw	r2, #1604	; 0x644
 8002aca:	490a      	ldr	r1, [pc, #40]	; (8002af4 <flash_read+0x70>)
 8002acc:	480a      	ldr	r0, [pc, #40]	; (8002af8 <flash_read+0x74>)
 8002ace:	f7ff ff87 	bl	80029e0 <flash_reading>
	}
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000149c 	.word	0x2000149c
 8002ae0:	08080000 	.word	0x08080000
 8002ae4:	200014dc 	.word	0x200014dc
 8002ae8:	080a0000 	.word	0x080a0000
 8002aec:	2000117c 	.word	0x2000117c
 8002af0:	080c0000 	.word	0x080c0000
 8002af4:	20000b38 	.word	0x20000b38
 8002af8:	080e0000 	.word	0x080e0000

08002afc <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	flash_read_all();
 8002b00:	f000 f802 	bl	8002b08 <flash_read_all>
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <flash_read_all>:

void flash_read_all()
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	flash_read(FLASH_SECTOR_8);
 8002b0c:	2008      	movs	r0, #8
 8002b0e:	f7ff ffb9 	bl	8002a84 <flash_read>
	flash_read(FLASH_SECTOR_9);
 8002b12:	2009      	movs	r0, #9
 8002b14:	f7ff ffb6 	bl	8002a84 <flash_read>
	flash_read(FLASH_SECTOR_10);
 8002b18:	200a      	movs	r0, #10
 8002b1a:	f7ff ffb3 	bl	8002a84 <flash_read>
	flash_read(FLASH_SECTOR_11);
 8002b1e:	200b      	movs	r0, #11
 8002b20:	f7ff ffb0 	bl	8002a84 <flash_read>
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <low_pass_filter>:
#include "function.h"

double low_pass_filter(double val, double pre_val, double gamma)
{
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002b32:	ed87 1b02 	vstr	d1, [r7, #8]
 8002b36:	ed87 2b00 	vstr	d2, [r7]
	return (double) (gamma * (double) pre_val
 8002b3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b42:	f7fd fd59 	bl	80005f8 <__aeabi_dmul>
 8002b46:	4603      	mov	r3, r0
 8002b48:	460c      	mov	r4, r1
 8002b4a:	4625      	mov	r5, r4
 8002b4c:	461c      	mov	r4, r3
			+ (double) (1 - gamma) * (double) val);
 8002b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b52:	f04f 0000 	mov.w	r0, #0
 8002b56:	490e      	ldr	r1, [pc, #56]	; (8002b90 <low_pass_filter+0x68>)
 8002b58:	f7fd fb96 	bl	8000288 <__aeabi_dsub>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b68:	f7fd fd46 	bl	80005f8 <__aeabi_dmul>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
	return (double) (gamma * (double) pre_val
 8002b70:	4620      	mov	r0, r4
 8002b72:	4629      	mov	r1, r5
 8002b74:	f7fd fb8a 	bl	800028c <__adddf3>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	ec44 3b17 	vmov	d7, r3, r4
}
 8002b80:	eeb0 0a47 	vmov.f32	s0, s14
 8002b84:	eef0 0a67 	vmov.f32	s1, s15
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	3ff00000 	.word	0x3ff00000

08002b94 <vector3_creation>:

    return vector_sum;
}

Vector3 vector3_creation(float x, float y, float z)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b08f      	sub	sp, #60	; 0x3c
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	ed87 0a07 	vstr	s0, [r7, #28]
 8002b9e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002ba2:	ed87 1a05 	vstr	s2, [r7, #20]
    Vector3 new;
    new.x = x;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	623b      	str	r3, [r7, #32]
    new.y = y;
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    new.z = z;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    return new;
 8002bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bb6:	f107 0220 	add.w	r2, r7, #32
 8002bba:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	ee06 1a90 	vmov	s13, r1
 8002bca:	ee07 2a10 	vmov	s14, r2
 8002bce:	ee07 3a90 	vmov	s15, r3
}
 8002bd2:	eeb0 0a66 	vmov.f32	s0, s13
 8002bd6:	eef0 0a47 	vmov.f32	s1, s14
 8002bda:	eeb0 1a67 	vmov.f32	s2, s15
 8002bde:	373c      	adds	r7, #60	; 0x3c
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <length_set_sampling_time_ms>:
float velocity_left, velocity_right;
float length_update_sampling_time_s;
uint8_t length_started;

void length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
    length_update_sampling_time_s = samplingtime_ms / (float) 1000;
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bfc:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002c18 <length_set_sampling_time_ms+0x30>
 8002c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <length_set_sampling_time_ms+0x34>)
 8002c06:	edc3 7a00 	vstr	s15, [r3]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	447a0000 	.word	0x447a0000
 8002c1c:	20001b1c 	.word	0x20001b1c

08002c20 <length_init>:

void length_init(unsigned short int samplingtime_ms)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
    length_started = 0;
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <length_init+0x24>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
    length_set_sampling_time_ms(samplingtime_ms);
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ffd8 	bl	8002be8 <length_set_sampling_time_ms>
    encoder_init();
 8002c38:	f7ff fe1e 	bl	8002878 <encoder_init>
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20001b24 	.word	0x20001b24

08002c48 <length_start>:

void length_start()
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
    if(0 >= length_started)
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <length_start+0x20>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d103      	bne.n	8002c5c <length_start+0x14>
    {
        length_reset();
 8002c54:	f000 f816 	bl	8002c84 <length_reset>
        encoder_start();
 8002c58:	f7ff fe16 	bl	8002888 <encoder_start>
    }
    length_started = 1;
 8002c5c:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <length_start+0x20>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	20001b24 	.word	0x20001b24

08002c6c <length_stop>:

void length_stop()
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
    encoder_stop();
 8002c70:	f7ff fe32 	bl	80028d8 <encoder_stop>
    length_started = 0;
 8002c74:	4b02      	ldr	r3, [pc, #8]	; (8002c80 <length_stop+0x14>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20001b24 	.word	0x20001b24

08002c84 <length_reset>:
{
    encoder_fin();
}

void length_reset()
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
    length_left = 0;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <length_reset+0x20>)
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
    length_right = 0;
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <length_reset+0x24>)
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20001b20 	.word	0x20001b20
 8002ca8:	20001b30 	.word	0x20001b30

08002cac <length_read>:

float length_read()
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	ed2d 8b02 	vpush	{d8}
 8002cb2:	af00      	add	r7, sp, #0
    return (length_read_left() + length_read_right()) / 2;
 8002cb4:	f000 f814 	bl	8002ce0 <length_read_left>
 8002cb8:	eeb0 8a40 	vmov.f32	s16, s0
 8002cbc:	f000 f81e 	bl	8002cfc <length_read_right>
 8002cc0:	eef0 7a40 	vmov.f32	s15, s0
 8002cc4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002cc8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002ccc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cd0:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	ecbd 8b02 	vpop	{d8}
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <length_read_left>:

float length_read_left()
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
    return length_left;
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <length_read_left+0x18>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	ee07 3a90 	vmov	s15, r3
}
 8002cec:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	20001b20 	.word	0x20001b20

08002cfc <length_read_right>:

float length_read_right()
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
    return length_right;
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <length_read_right+0x18>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	ee07 3a90 	vmov	s15, r3
}
 8002d08:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	20001b30 	.word	0x20001b30

08002d18 <velocity_read>:

float velocity_read()
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	ed2d 8b02 	vpush	{d8}
 8002d1e:	af00      	add	r7, sp, #0
    return (velocity_read_left() + velocity_read_right()) / 2;
 8002d20:	f000 f814 	bl	8002d4c <velocity_read_left>
 8002d24:	eeb0 8a40 	vmov.f32	s16, s0
 8002d28:	f000 f81e 	bl	8002d68 <velocity_read_right>
 8002d2c:	eef0 7a40 	vmov.f32	s15, s0
 8002d30:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002d34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002d38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d3c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002d40:	eeb0 0a67 	vmov.f32	s0, s15
 8002d44:	46bd      	mov	sp, r7
 8002d46:	ecbd 8b02 	vpop	{d8}
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <velocity_read_left>:

float velocity_read_left()
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
    return velocity_left;
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <velocity_read_left+0x18>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	ee07 3a90 	vmov	s15, r3
}
 8002d58:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	20001b2c 	.word	0x20001b2c

08002d68 <velocity_read_right>:

float velocity_read_right()
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
    return velocity_right;
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <velocity_read_right+0x18>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	ee07 3a90 	vmov	s15, r3
}
 8002d74:	eeb0 0a67 	vmov.f32	s0, s15
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	20001b28 	.word	0x20001b28

08002d84 <length_update>:

//! エンコーダの値を読み、速度と距離を計算する
void length_update()
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
    float encoder_left, encoder_right;
    float sampling_time_s;
    sampling_time_s = length_update_sampling_time_s;
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <length_update+0x88>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]
    //! エンコーダの値を読み、中央値に戻す
    encoder_set();
 8002d90:	f7ff fd3c 	bl	800280c <encoder_set>
    encoder_left = encoder_length_left();
 8002d94:	f7ff fd02 	bl	800279c <encoder_length_left>
 8002d98:	ed87 0a02 	vstr	s0, [r7, #8]
    encoder_right = encoder_length_right();
 8002d9c:	f7ff fd16 	bl	80027cc <encoder_length_right>
 8002da0:	ed87 0a01 	vstr	s0, [r7, #4]
    velocity_left = encoder_left * sampling_time_s;
 8002da4:	ed97 7a02 	vldr	s14, [r7, #8]
 8002da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db0:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <length_update+0x8c>)
 8002db2:	edc3 7a00 	vstr	s15, [r3]
    velocity_right = encoder_right * sampling_time_s;
 8002db6:	ed97 7a01 	vldr	s14, [r7, #4]
 8002dba:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <length_update+0x90>)
 8002dc4:	edc3 7a00 	vstr	s15, [r3]
    length_left += velocity_left * sampling_time_s;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <length_update+0x8c>)
 8002dca:	ed93 7a00 	vldr	s14, [r3]
 8002dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <length_update+0x94>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <length_update+0x94>)
 8002de2:	edc3 7a00 	vstr	s15, [r3]
    length_right += velocity_right * sampling_time_s;
 8002de6:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <length_update+0x90>)
 8002de8:	ed93 7a00 	vldr	s14, [r3]
 8002dec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <length_update+0x98>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <length_update+0x98>)
 8002e00:	edc3 7a00 	vstr	s15, [r3]
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20001b1c 	.word	0x20001b1c
 8002e10:	20001b2c 	.word	0x20001b2c
 8002e14:	20001b28 	.word	0x20001b28
 8002e18:	20001b20 	.word	0x20001b20
 8002e1c:	20001b30 	.word	0x20001b30

08002e20 <length_d_print>:

void length_d_print()
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
    #if D_LENGTH
    printf("length = %10.2f, sampling_time_s = %8.6f\r\n", length_read(), length_update_sampling_time_s);
    //! printf("velocity = %10.2f\r\n", velocity_read());
    #endif
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		#if !D_TIM6_WHILE
		tim6_main();
 8002e42:	f002 f825 	bl	8004e90 <tim6_main>
		#endif
	}

	if(htim->Instance == TIM10)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d101      	bne.n	8002e54 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		#if !D_TIM7_WHILE
		tim7_main();
 8002e50:	f002 f922 	bl	8005098 <tim7_main>
		#endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    #if !D_TIM10_WHILE
		tim10_main();
 8002e5e:	f001 ff51 	bl	8004d04 <tim10_main>
    #endif
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a06      	ldr	r2, [pc, #24]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d101      	bne.n	8002e70 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim11_main();
 8002e6c:	f001 ffc2 	bl	8004df4 <tim11_main>
	}
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40001000 	.word	0x40001000
 8002e7c:	40014400 	.word	0x40014400
 8002e80:	40014800 	.word	0x40014800

08002e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e88:	f002 ff42 	bl	8005d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e8c:	f000 f96e 	bl	800316c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e90:	f000 fd90 	bl	80039b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e94:	f000 fd6e 	bl	8003974 <MX_DMA_Init>
  MX_ADC1_Init();
 8002e98:	f000 f9d2 	bl	8003240 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8002e9c:	f000 fd40 	bl	8003920 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8002ea0:	f000 fc66 	bl	8003770 <MX_TIM6_Init>
  MX_TIM4_Init();
 8002ea4:	f000 fc00 	bl	80036a8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002ea8:	f000 fb52 	bl	8003550 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002eac:	f000 fba8 	bl	8003600 <MX_TIM3_Init>
  MX_TIM10_Init();
 8002eb0:	f000 fcca 	bl	8003848 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002eb4:	f000 fcec 	bl	8003890 <MX_TIM11_Init>
  MX_SPI2_Init();
 8002eb8:	f000 fb14 	bl	80034e4 <MX_SPI2_Init>
  MX_I2C1_Init();
 8002ebc:	f000 fae4 	bl	8003488 <MX_I2C1_Init>
  MX_TIM14_Init();
 8002ec0:	f000 fd0a 	bl	80038d8 <MX_TIM14_Init>
  MX_TIM7_Init();
 8002ec4:	f000 fc8a 	bl	80037dc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8002ec8:	48a4      	ldr	r0, [pc, #656]	; (800315c <main+0x2d8>)
 8002eca:	f008 fbcf 	bl	800b66c <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8002ece:	48a4      	ldr	r0, [pc, #656]	; (8003160 <main+0x2dc>)
 8002ed0:	f008 fc40 	bl	800b754 <puts>
	printf("murakumo_odom version.%4.2lf\r\n", __VERSION__);
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	4ba2      	ldr	r3, [pc, #648]	; (8003164 <main+0x2e0>)
 8002eda:	48a3      	ldr	r0, [pc, #652]	; (8003168 <main+0x2e4>)
 8002edc:	f008 fbc6 	bl	800b66c <iprintf>

  main_init();
 8002ee0:	f000 fe52 	bl	8003b88 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 8002ee4:	f000 fe9e 	bl	8003c24 <main_print_while>

		if(switch_read_enter())
 8002ee8:	f7fe fc24 	bl	8001734 <switch_read_enter>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 812c 	beq.w	800314c <main+0x2c8>
		{
			switch(rotary_read())
 8002ef4:	f7fe fb3c 	bl	8001570 <rotary_read>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b0f      	cmp	r3, #15
 8002efc:	f200 8128 	bhi.w	8003150 <main+0x2cc>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <main+0x84>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f49 	.word	0x08002f49
 8002f0c:	08002f87 	.word	0x08002f87
 8002f10:	08002fa1 	.word	0x08002fa1
 8002f14:	08002fbb 	.word	0x08002fbb
 8002f18:	08002fd5 	.word	0x08002fd5
 8002f1c:	08002fef 	.word	0x08002fef
 8002f20:	08003009 	.word	0x08003009
 8002f24:	08003023 	.word	0x08003023
 8002f28:	0800303d 	.word	0x0800303d
 8002f2c:	08003057 	.word	0x08003057
 8002f30:	08003071 	.word	0x08003071
 8002f34:	0800308b 	.word	0x0800308b
 8002f38:	080030a5 	.word	0x080030a5
 8002f3c:	080030cf 	.word	0x080030cf
 8002f40:	080030f9 	.word	0x080030f9
 8002f44:	08003123 	.word	0x08003123
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8002f48:	f7fe faee 	bl	8001528 <rotary_read_playmode>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <main+0xe8>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 8002f52:	f7fe fd69 	bl	8001a28 <analog_calibration_start>

            while(switch_read_enter())
 8002f56:	e001      	b.n	8002f5c <main+0xd8>
            {
              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_main();
 8002f58:	f000 fe94 	bl	8003c84 <main_main>
            while(switch_read_enter())
 8002f5c:	f7fe fbea 	bl	8001734 <switch_read_enter>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f8      	bne.n	8002f58 <main+0xd4>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 8002f66:	f7fe fd87 	bl	8001a78 <analog_calibration_stop>
              main_main();
            }

            running_stop();
          }
          break;	// case 0x00:
 8002f6a:	e0f2      	b.n	8003152 <main+0x2ce>
            running_start();
 8002f6c:	f000 fe1c 	bl	8003ba8 <running_start>
            while(switch_read_enter())
 8002f70:	e001      	b.n	8002f76 <main+0xf2>
              main_main();
 8002f72:	f000 fe87 	bl	8003c84 <main_main>
            while(switch_read_enter())
 8002f76:	f7fe fbdd 	bl	8001734 <switch_read_enter>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f8      	bne.n	8002f72 <main+0xee>
            running_stop();
 8002f80:	f000 fe40 	bl	8003c04 <running_stop>
          break;	// case 0x00:
 8002f84:	e0e5      	b.n	8003152 <main+0x2ce>
        case 0x01:	// 1
          running_start();
 8002f86:	f000 fe0f 	bl	8003ba8 <running_start>

          while (switch_read_enter())
 8002f8a:	e001      	b.n	8002f90 <main+0x10c>
          {
            main_main();
 8002f8c:	f000 fe7a 	bl	8003c84 <main_main>
          while (switch_read_enter())
 8002f90:	f7fe fbd0 	bl	8001734 <switch_read_enter>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f8      	bne.n	8002f8c <main+0x108>
          }

          running_stop();
 8002f9a:	f000 fe33 	bl	8003c04 <running_stop>
          break;
 8002f9e:	e0d8      	b.n	8003152 <main+0x2ce>
        case 0x02:	// 2
          running_start();
 8002fa0:	f000 fe02 	bl	8003ba8 <running_start>

          while(switch_read_enter())
 8002fa4:	e001      	b.n	8002faa <main+0x126>
          {
            main_main();
 8002fa6:	f000 fe6d 	bl	8003c84 <main_main>
          while(switch_read_enter())
 8002faa:	f7fe fbc3 	bl	8001734 <switch_read_enter>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f8      	bne.n	8002fa6 <main+0x122>
          }

          running_stop();
 8002fb4:	f000 fe26 	bl	8003c04 <running_stop>
          break;
 8002fb8:	e0cb      	b.n	8003152 <main+0x2ce>
        case 0x03:	// 3
          running_start();
 8002fba:	f000 fdf5 	bl	8003ba8 <running_start>

          while(switch_read_enter())
 8002fbe:	e001      	b.n	8002fc4 <main+0x140>
          {
            main_main();
 8002fc0:	f000 fe60 	bl	8003c84 <main_main>
          while(switch_read_enter())
 8002fc4:	f7fe fbb6 	bl	8001734 <switch_read_enter>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f8      	bne.n	8002fc0 <main+0x13c>
          }

          running_stop();
 8002fce:	f000 fe19 	bl	8003c04 <running_stop>
          break;
 8002fd2:	e0be      	b.n	8003152 <main+0x2ce>
        case 0x04:	// 4
          running_start();
 8002fd4:	f000 fde8 	bl	8003ba8 <running_start>

          while(switch_read_enter())
 8002fd8:	e001      	b.n	8002fde <main+0x15a>
          {
            main_main();
 8002fda:	f000 fe53 	bl	8003c84 <main_main>
          while(switch_read_enter())
 8002fde:	f7fe fba9 	bl	8001734 <switch_read_enter>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f8      	bne.n	8002fda <main+0x156>
          }

          running_stop();
 8002fe8:	f000 fe0c 	bl	8003c04 <running_stop>
          break;
 8002fec:	e0b1      	b.n	8003152 <main+0x2ce>
        case 0x05:	// 5
          running_start();
 8002fee:	f000 fddb 	bl	8003ba8 <running_start>

          while(switch_read_enter())
 8002ff2:	e001      	b.n	8002ff8 <main+0x174>
          {
            main_main();
 8002ff4:	f000 fe46 	bl	8003c84 <main_main>
          while(switch_read_enter())
 8002ff8:	f7fe fb9c 	bl	8001734 <switch_read_enter>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f8      	bne.n	8002ff4 <main+0x170>
          }

          running_stop();
 8003002:	f000 fdff 	bl	8003c04 <running_stop>
          break;
 8003006:	e0a4      	b.n	8003152 <main+0x2ce>
        case 0x06:	// 6
          running_start();
 8003008:	f000 fdce 	bl	8003ba8 <running_start>

          while(switch_read_enter())
 800300c:	e001      	b.n	8003012 <main+0x18e>
          {
            main_main();
 800300e:	f000 fe39 	bl	8003c84 <main_main>
          while(switch_read_enter())
 8003012:	f7fe fb8f 	bl	8001734 <switch_read_enter>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1f8      	bne.n	800300e <main+0x18a>
          }

          running_stop();
 800301c:	f000 fdf2 	bl	8003c04 <running_stop>
          break;
 8003020:	e097      	b.n	8003152 <main+0x2ce>
        case 0x07:	// 7
          running_start();
 8003022:	f000 fdc1 	bl	8003ba8 <running_start>

          while(switch_read_enter())
 8003026:	e001      	b.n	800302c <main+0x1a8>
          {
            main_main();
 8003028:	f000 fe2c 	bl	8003c84 <main_main>
          while(switch_read_enter())
 800302c:	f7fe fb82 	bl	8001734 <switch_read_enter>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f8      	bne.n	8003028 <main+0x1a4>
          }

          running_stop();
 8003036:	f000 fde5 	bl	8003c04 <running_stop>
          break;
 800303a:	e08a      	b.n	8003152 <main+0x2ce>
        case 0x08:	// 8
          running_start();
 800303c:	f000 fdb4 	bl	8003ba8 <running_start>

          while(switch_read_enter())
 8003040:	e001      	b.n	8003046 <main+0x1c2>
          {
            main_main();
 8003042:	f000 fe1f 	bl	8003c84 <main_main>
          while(switch_read_enter())
 8003046:	f7fe fb75 	bl	8001734 <switch_read_enter>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f8      	bne.n	8003042 <main+0x1be>
          }

          running_stop();
 8003050:	f000 fdd8 	bl	8003c04 <running_stop>
          break;
 8003054:	e07d      	b.n	8003152 <main+0x2ce>
        case 0x09:	// 9
          running_start();
 8003056:	f000 fda7 	bl	8003ba8 <running_start>

          while(switch_read_enter())
 800305a:	e001      	b.n	8003060 <main+0x1dc>
          {
            main_main();
 800305c:	f000 fe12 	bl	8003c84 <main_main>
          while(switch_read_enter())
 8003060:	f7fe fb68 	bl	8001734 <switch_read_enter>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f8      	bne.n	800305c <main+0x1d8>
          }

          running_stop();
 800306a:	f000 fdcb 	bl	8003c04 <running_stop>
          break;
 800306e:	e070      	b.n	8003152 <main+0x2ce>
        case 0x0A:	// A
          running_start();
 8003070:	f000 fd9a 	bl	8003ba8 <running_start>

          while(switch_read_enter())
 8003074:	e001      	b.n	800307a <main+0x1f6>
          {
            main_main();
 8003076:	f000 fe05 	bl	8003c84 <main_main>
          while(switch_read_enter())
 800307a:	f7fe fb5b 	bl	8001734 <switch_read_enter>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f8      	bne.n	8003076 <main+0x1f2>
          }

          running_stop();
 8003084:	f000 fdbe 	bl	8003c04 <running_stop>
          break;
 8003088:	e063      	b.n	8003152 <main+0x2ce>
        case 0x0B:	// B
          running_start();
 800308a:	f000 fd8d 	bl	8003ba8 <running_start>

          while(switch_read_enter())
 800308e:	e001      	b.n	8003094 <main+0x210>
          {
            main_main();
 8003090:	f000 fdf8 	bl	8003c84 <main_main>
          while(switch_read_enter())
 8003094:	f7fe fb4e 	bl	8001734 <switch_read_enter>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f8      	bne.n	8003090 <main+0x20c>
          }

          running_stop();
 800309e:	f000 fdb1 	bl	8003c04 <running_stop>
          break;
 80030a2:	e056      	b.n	8003152 <main+0x2ce>
        case 0x0C:	// C
          if(rotary_read_playmode() == flash_print)
 80030a4:	f7fe fa40 	bl	8001528 <rotary_read_playmode>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	d102      	bne.n	80030b4 <main+0x230>
          {
            course_print_flash();
 80030ae:	f7ff fa4d 	bl	800254c <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 80030b2:	e04e      	b.n	8003152 <main+0x2ce>
            running_start();
 80030b4:	f000 fd78 	bl	8003ba8 <running_start>
            while(switch_read_enter())
 80030b8:	e001      	b.n	80030be <main+0x23a>
              main_main();
 80030ba:	f000 fde3 	bl	8003c84 <main_main>
            while(switch_read_enter())
 80030be:	f7fe fb39 	bl	8001734 <switch_read_enter>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f8      	bne.n	80030ba <main+0x236>
            running_stop();
 80030c8:	f000 fd9c 	bl	8003c04 <running_stop>
          break;
 80030cc:	e041      	b.n	8003152 <main+0x2ce>
        case 0x0D:	// D
          if(rotary_read_playmode() == flash_print)
 80030ce:	f7fe fa2b 	bl	8001528 <rotary_read_playmode>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b0f      	cmp	r3, #15
 80030d6:	d102      	bne.n	80030de <main+0x25a>
          {
            course_print_flash();
 80030d8:	f7ff fa38 	bl	800254c <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 80030dc:	e039      	b.n	8003152 <main+0x2ce>
            running_start();
 80030de:	f000 fd63 	bl	8003ba8 <running_start>
            while(switch_read_enter())
 80030e2:	e001      	b.n	80030e8 <main+0x264>
              main_main();
 80030e4:	f000 fdce 	bl	8003c84 <main_main>
            while(switch_read_enter())
 80030e8:	f7fe fb24 	bl	8001734 <switch_read_enter>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f8      	bne.n	80030e4 <main+0x260>
            running_stop();
 80030f2:	f000 fd87 	bl	8003c04 <running_stop>
          break;
 80030f6:	e02c      	b.n	8003152 <main+0x2ce>
        case 0x0E:	// E
          if(rotary_read_playmode() == flash_print)
 80030f8:	f7fe fa16 	bl	8001528 <rotary_read_playmode>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	d102      	bne.n	8003108 <main+0x284>
          {
            course_print_flash();
 8003102:	f7ff fa23 	bl	800254c <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8003106:	e024      	b.n	8003152 <main+0x2ce>
            running_start();
 8003108:	f000 fd4e 	bl	8003ba8 <running_start>
            while(switch_read_enter())
 800310c:	e001      	b.n	8003112 <main+0x28e>
              main_main();
 800310e:	f000 fdb9 	bl	8003c84 <main_main>
            while(switch_read_enter())
 8003112:	f7fe fb0f 	bl	8001734 <switch_read_enter>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f8      	bne.n	800310e <main+0x28a>
            running_stop();
 800311c:	f000 fd72 	bl	8003c04 <running_stop>
          break;
 8003120:	e017      	b.n	8003152 <main+0x2ce>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 8003122:	f7fe fa01 	bl	8001528 <rotary_read_playmode>
 8003126:	4603      	mov	r3, r0
 8003128:	2b0f      	cmp	r3, #15
 800312a:	d102      	bne.n	8003132 <main+0x2ae>
          {
            course_print_flash();
 800312c:	f7ff fa0e 	bl	800254c <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8003130:	e00f      	b.n	8003152 <main+0x2ce>
            running_start();
 8003132:	f000 fd39 	bl	8003ba8 <running_start>
            while(switch_read_enter())
 8003136:	e001      	b.n	800313c <main+0x2b8>
              main_main();
 8003138:	f000 fda4 	bl	8003c84 <main_main>
            while(switch_read_enter())
 800313c:	f7fe fafa 	bl	8001734 <switch_read_enter>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f8      	bne.n	8003138 <main+0x2b4>
            running_stop();
 8003146:	f000 fd5d 	bl	8003c04 <running_stop>
          break;
 800314a:	e002      	b.n	8003152 <main+0x2ce>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <main+0x2ce>
          break;
 8003150:	bf00      	nop
    HAL_Delay(500);
 8003152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003156:	f002 fe4d 	bl	8005df4 <HAL_Delay>
    main_print_while();
 800315a:	e6c3      	b.n	8002ee4 <main+0x60>
 800315c:	08010234 	.word	0x08010234
 8003160:	0801023c 	.word	0x0801023c
 8003164:	3ff80000 	.word	0x3ff80000
 8003168:	0801025c 	.word	0x0801025c

0800316c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b094      	sub	sp, #80	; 0x50
 8003170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003172:	f107 0320 	add.w	r3, r7, #32
 8003176:	2230      	movs	r2, #48	; 0x30
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f007 fc2f 	bl	800a9de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	4b28      	ldr	r3, [pc, #160]	; (8003238 <SystemClock_Config+0xcc>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	4a27      	ldr	r2, [pc, #156]	; (8003238 <SystemClock_Config+0xcc>)
 800319a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800319e:	6413      	str	r3, [r2, #64]	; 0x40
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <SystemClock_Config+0xcc>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	60bb      	str	r3, [r7, #8]
 80031aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031ac:	2300      	movs	r3, #0
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	4b22      	ldr	r3, [pc, #136]	; (800323c <SystemClock_Config+0xd0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a21      	ldr	r2, [pc, #132]	; (800323c <SystemClock_Config+0xd0>)
 80031b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <SystemClock_Config+0xd0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80031cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031d2:	2302      	movs	r3, #2
 80031d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031dc:	2308      	movs	r3, #8
 80031de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80031e0:	23a8      	movs	r3, #168	; 0xa8
 80031e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031e4:	2302      	movs	r3, #2
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80031e8:	2304      	movs	r3, #4
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ec:	f107 0320 	add.w	r3, r7, #32
 80031f0:	4618      	mov	r0, r3
 80031f2:	f004 fd4d 	bl	8007c90 <HAL_RCC_OscConfig>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80031fc:	f000 fd54 	bl	8003ca8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003200:	230f      	movs	r3, #15
 8003202:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003204:	2302      	movs	r3, #2
 8003206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800320c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003216:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	2105      	movs	r1, #5
 800321e:	4618      	mov	r0, r3
 8003220:	f004 ffae 	bl	8008180 <HAL_RCC_ClockConfig>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800322a:	f000 fd3d 	bl	8003ca8 <Error_Handler>
  }
}
 800322e:	bf00      	nop
 8003230:	3750      	adds	r7, #80	; 0x50
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40007000 	.word	0x40007000

08003240 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003246:	463b      	mov	r3, r7
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003252:	4b8a      	ldr	r3, [pc, #552]	; (800347c <MX_ADC1_Init+0x23c>)
 8003254:	4a8a      	ldr	r2, [pc, #552]	; (8003480 <MX_ADC1_Init+0x240>)
 8003256:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003258:	4b88      	ldr	r3, [pc, #544]	; (800347c <MX_ADC1_Init+0x23c>)
 800325a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800325e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003260:	4b86      	ldr	r3, [pc, #536]	; (800347c <MX_ADC1_Init+0x23c>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003266:	4b85      	ldr	r3, [pc, #532]	; (800347c <MX_ADC1_Init+0x23c>)
 8003268:	2201      	movs	r2, #1
 800326a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800326c:	4b83      	ldr	r3, [pc, #524]	; (800347c <MX_ADC1_Init+0x23c>)
 800326e:	2201      	movs	r2, #1
 8003270:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003272:	4b82      	ldr	r3, [pc, #520]	; (800347c <MX_ADC1_Init+0x23c>)
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800327a:	4b80      	ldr	r3, [pc, #512]	; (800347c <MX_ADC1_Init+0x23c>)
 800327c:	2200      	movs	r2, #0
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003280:	4b7e      	ldr	r3, [pc, #504]	; (800347c <MX_ADC1_Init+0x23c>)
 8003282:	4a80      	ldr	r2, [pc, #512]	; (8003484 <MX_ADC1_Init+0x244>)
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003286:	4b7d      	ldr	r3, [pc, #500]	; (800347c <MX_ADC1_Init+0x23c>)
 8003288:	2200      	movs	r2, #0
 800328a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 800328c:	4b7b      	ldr	r3, [pc, #492]	; (800347c <MX_ADC1_Init+0x23c>)
 800328e:	2210      	movs	r2, #16
 8003290:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003292:	4b7a      	ldr	r3, [pc, #488]	; (800347c <MX_ADC1_Init+0x23c>)
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800329a:	4b78      	ldr	r3, [pc, #480]	; (800347c <MX_ADC1_Init+0x23c>)
 800329c:	2201      	movs	r2, #1
 800329e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032a0:	4876      	ldr	r0, [pc, #472]	; (800347c <MX_ADC1_Init+0x23c>)
 80032a2:	f002 fdc9 	bl	8005e38 <HAL_ADC_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80032ac:	f000 fcfc 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80032b0:	2309      	movs	r3, #9
 80032b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80032b4:	2301      	movs	r3, #1
 80032b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80032b8:	2303      	movs	r3, #3
 80032ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032bc:	463b      	mov	r3, r7
 80032be:	4619      	mov	r1, r3
 80032c0:	486e      	ldr	r0, [pc, #440]	; (800347c <MX_ADC1_Init+0x23c>)
 80032c2:	f002 ff7b 	bl	80061bc <HAL_ADC_ConfigChannel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80032cc:	f000 fcec 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80032d0:	230a      	movs	r3, #10
 80032d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80032d4:	2302      	movs	r3, #2
 80032d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032d8:	463b      	mov	r3, r7
 80032da:	4619      	mov	r1, r3
 80032dc:	4867      	ldr	r0, [pc, #412]	; (800347c <MX_ADC1_Init+0x23c>)
 80032de:	f002 ff6d 	bl	80061bc <HAL_ADC_ConfigChannel>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80032e8:	f000 fcde 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80032ec:	2308      	movs	r3, #8
 80032ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80032f0:	2303      	movs	r3, #3
 80032f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032f4:	463b      	mov	r3, r7
 80032f6:	4619      	mov	r1, r3
 80032f8:	4860      	ldr	r0, [pc, #384]	; (800347c <MX_ADC1_Init+0x23c>)
 80032fa:	f002 ff5f 	bl	80061bc <HAL_ADC_ConfigChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003304:	f000 fcd0 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003308:	230b      	movs	r3, #11
 800330a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800330c:	2304      	movs	r3, #4
 800330e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003310:	463b      	mov	r3, r7
 8003312:	4619      	mov	r1, r3
 8003314:	4859      	ldr	r0, [pc, #356]	; (800347c <MX_ADC1_Init+0x23c>)
 8003316:	f002 ff51 	bl	80061bc <HAL_ADC_ConfigChannel>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003320:	f000 fcc2 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003324:	230f      	movs	r3, #15
 8003326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003328:	2305      	movs	r3, #5
 800332a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800332c:	463b      	mov	r3, r7
 800332e:	4619      	mov	r1, r3
 8003330:	4852      	ldr	r0, [pc, #328]	; (800347c <MX_ADC1_Init+0x23c>)
 8003332:	f002 ff43 	bl	80061bc <HAL_ADC_ConfigChannel>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800333c:	f000 fcb4 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003340:	230c      	movs	r3, #12
 8003342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003344:	2306      	movs	r3, #6
 8003346:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003348:	463b      	mov	r3, r7
 800334a:	4619      	mov	r1, r3
 800334c:	484b      	ldr	r0, [pc, #300]	; (800347c <MX_ADC1_Init+0x23c>)
 800334e:	f002 ff35 	bl	80061bc <HAL_ADC_ConfigChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003358:	f000 fca6 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800335c:	230e      	movs	r3, #14
 800335e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003360:	2307      	movs	r3, #7
 8003362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003364:	463b      	mov	r3, r7
 8003366:	4619      	mov	r1, r3
 8003368:	4844      	ldr	r0, [pc, #272]	; (800347c <MX_ADC1_Init+0x23c>)
 800336a:	f002 ff27 	bl	80061bc <HAL_ADC_ConfigChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8003374:	f000 fc98 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003378:	230d      	movs	r3, #13
 800337a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800337c:	2308      	movs	r3, #8
 800337e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003380:	463b      	mov	r3, r7
 8003382:	4619      	mov	r1, r3
 8003384:	483d      	ldr	r0, [pc, #244]	; (800347c <MX_ADC1_Init+0x23c>)
 8003386:	f002 ff19 	bl	80061bc <HAL_ADC_ConfigChannel>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8003390:	f000 fc8a 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003394:	2307      	movs	r3, #7
 8003396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003398:	2309      	movs	r3, #9
 800339a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800339c:	463b      	mov	r3, r7
 800339e:	4619      	mov	r1, r3
 80033a0:	4836      	ldr	r0, [pc, #216]	; (800347c <MX_ADC1_Init+0x23c>)
 80033a2:	f002 ff0b 	bl	80061bc <HAL_ADC_ConfigChannel>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80033ac:	f000 fc7c 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80033b4:	230a      	movs	r3, #10
 80033b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033b8:	463b      	mov	r3, r7
 80033ba:	4619      	mov	r1, r3
 80033bc:	482f      	ldr	r0, [pc, #188]	; (800347c <MX_ADC1_Init+0x23c>)
 80033be:	f002 fefd 	bl	80061bc <HAL_ADC_ConfigChannel>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80033c8:	f000 fc6e 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80033cc:	2306      	movs	r3, #6
 80033ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80033d0:	230b      	movs	r3, #11
 80033d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033d4:	463b      	mov	r3, r7
 80033d6:	4619      	mov	r1, r3
 80033d8:	4828      	ldr	r0, [pc, #160]	; (800347c <MX_ADC1_Init+0x23c>)
 80033da:	f002 feef 	bl	80061bc <HAL_ADC_ConfigChannel>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80033e4:	f000 fc60 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80033e8:	2301      	movs	r3, #1
 80033ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80033ec:	230c      	movs	r3, #12
 80033ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033f0:	463b      	mov	r3, r7
 80033f2:	4619      	mov	r1, r3
 80033f4:	4821      	ldr	r0, [pc, #132]	; (800347c <MX_ADC1_Init+0x23c>)
 80033f6:	f002 fee1 	bl	80061bc <HAL_ADC_ConfigChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8003400:	f000 fc52 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003404:	2305      	movs	r3, #5
 8003406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003408:	230d      	movs	r3, #13
 800340a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800340c:	463b      	mov	r3, r7
 800340e:	4619      	mov	r1, r3
 8003410:	481a      	ldr	r0, [pc, #104]	; (800347c <MX_ADC1_Init+0x23c>)
 8003412:	f002 fed3 	bl	80061bc <HAL_ADC_ConfigChannel>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 800341c:	f000 fc44 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003420:	2302      	movs	r3, #2
 8003422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003424:	230e      	movs	r3, #14
 8003426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003428:	463b      	mov	r3, r7
 800342a:	4619      	mov	r1, r3
 800342c:	4813      	ldr	r0, [pc, #76]	; (800347c <MX_ADC1_Init+0x23c>)
 800342e:	f002 fec5 	bl	80061bc <HAL_ADC_ConfigChannel>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8003438:	f000 fc36 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800343c:	2304      	movs	r3, #4
 800343e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8003440:	230f      	movs	r3, #15
 8003442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003444:	463b      	mov	r3, r7
 8003446:	4619      	mov	r1, r3
 8003448:	480c      	ldr	r0, [pc, #48]	; (800347c <MX_ADC1_Init+0x23c>)
 800344a:	f002 feb7 	bl	80061bc <HAL_ADC_ConfigChannel>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8003454:	f000 fc28 	bl	8003ca8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003458:	2303      	movs	r3, #3
 800345a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 800345c:	2310      	movs	r3, #16
 800345e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003460:	463b      	mov	r3, r7
 8003462:	4619      	mov	r1, r3
 8003464:	4805      	ldr	r0, [pc, #20]	; (800347c <MX_ADC1_Init+0x23c>)
 8003466:	f002 fea9 	bl	80061bc <HAL_ADC_ConfigChannel>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8003470:	f000 fc1a 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003474:	bf00      	nop
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	200008d8 	.word	0x200008d8
 8003480:	40012000 	.word	0x40012000
 8003484:	0f000001 	.word	0x0f000001

08003488 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <MX_I2C1_Init+0x50>)
 800348e:	4a13      	ldr	r2, [pc, #76]	; (80034dc <MX_I2C1_Init+0x54>)
 8003490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <MX_I2C1_Init+0x50>)
 8003494:	4a12      	ldr	r2, [pc, #72]	; (80034e0 <MX_I2C1_Init+0x58>)
 8003496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <MX_I2C1_Init+0x50>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <MX_I2C1_Init+0x50>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <MX_I2C1_Init+0x50>)
 80034a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <MX_I2C1_Init+0x50>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <MX_I2C1_Init+0x50>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <MX_I2C1_Init+0x50>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <MX_I2C1_Init+0x50>)
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034c4:	4804      	ldr	r0, [pc, #16]	; (80034d8 <MX_I2C1_Init+0x50>)
 80034c6:	f004 faab 	bl	8007a20 <HAL_I2C_Init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80034d0:	f000 fbea 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	200007f4 	.word	0x200007f4
 80034dc:	40005400 	.word	0x40005400
 80034e0:	000186a0 	.word	0x000186a0

080034e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <MX_SPI2_Init+0x64>)
 80034ea:	4a18      	ldr	r2, [pc, #96]	; (800354c <MX_SPI2_Init+0x68>)
 80034ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034ee:	4b16      	ldr	r3, [pc, #88]	; (8003548 <MX_SPI2_Init+0x64>)
 80034f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80034f6:	4b14      	ldr	r3, [pc, #80]	; (8003548 <MX_SPI2_Init+0x64>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <MX_SPI2_Init+0x64>)
 80034fe:	2200      	movs	r2, #0
 8003500:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <MX_SPI2_Init+0x64>)
 8003504:	2202      	movs	r2, #2
 8003506:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <MX_SPI2_Init+0x64>)
 800350a:	2201      	movs	r2, #1
 800350c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <MX_SPI2_Init+0x64>)
 8003510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003514:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <MX_SPI2_Init+0x64>)
 8003518:	2228      	movs	r2, #40	; 0x28
 800351a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <MX_SPI2_Init+0x64>)
 800351e:	2200      	movs	r2, #0
 8003520:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <MX_SPI2_Init+0x64>)
 8003524:	2200      	movs	r2, #0
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <MX_SPI2_Init+0x64>)
 800352a:	2200      	movs	r2, #0
 800352c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <MX_SPI2_Init+0x64>)
 8003530:	220a      	movs	r2, #10
 8003532:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003534:	4804      	ldr	r0, [pc, #16]	; (8003548 <MX_SPI2_Init+0x64>)
 8003536:	f005 f813 	bl	8008560 <HAL_SPI_Init>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003540:	f000 fbb2 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000754 	.word	0x20000754
 800354c:	40003800 	.word	0x40003800

08003550 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08c      	sub	sp, #48	; 0x30
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003556:	f107 030c 	add.w	r3, r7, #12
 800355a:	2224      	movs	r2, #36	; 0x24
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f007 fa3d 	bl	800a9de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800356c:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <MX_TIM1_Init+0xa8>)
 800356e:	4a23      	ldr	r2, [pc, #140]	; (80035fc <MX_TIM1_Init+0xac>)
 8003570:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <MX_TIM1_Init+0xa8>)
 8003574:	2200      	movs	r2, #0
 8003576:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003578:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <MX_TIM1_Init+0xa8>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <MX_TIM1_Init+0xa8>)
 8003580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003584:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <MX_TIM1_Init+0xa8>)
 8003588:	2200      	movs	r2, #0
 800358a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <MX_TIM1_Init+0xa8>)
 800358e:	2200      	movs	r2, #0
 8003590:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <MX_TIM1_Init+0xa8>)
 8003594:	2200      	movs	r2, #0
 8003596:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003598:	2303      	movs	r3, #3
 800359a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035a0:	2301      	movs	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035ac:	2300      	movs	r3, #0
 80035ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035b0:	2301      	movs	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	4619      	mov	r1, r3
 80035c2:	480d      	ldr	r0, [pc, #52]	; (80035f8 <MX_TIM1_Init+0xa8>)
 80035c4:	f005 ffea 	bl	800959c <HAL_TIM_Encoder_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80035ce:	f000 fb6b 	bl	8003ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035da:	1d3b      	adds	r3, r7, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4806      	ldr	r0, [pc, #24]	; (80035f8 <MX_TIM1_Init+0xa8>)
 80035e0:	f006 fe0e 	bl	800a200 <HAL_TIMEx_MasterConfigSynchronization>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80035ea:	f000 fb5d 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80035ee:	bf00      	nop
 80035f0:	3730      	adds	r7, #48	; 0x30
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000a10 	.word	0x20000a10
 80035fc:	40010000 	.word	0x40010000

08003600 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08c      	sub	sp, #48	; 0x30
 8003604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003606:	f107 030c 	add.w	r3, r7, #12
 800360a:	2224      	movs	r2, #36	; 0x24
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f007 f9e5 	bl	800a9de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800361c:	4b20      	ldr	r3, [pc, #128]	; (80036a0 <MX_TIM3_Init+0xa0>)
 800361e:	4a21      	ldr	r2, [pc, #132]	; (80036a4 <MX_TIM3_Init+0xa4>)
 8003620:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <MX_TIM3_Init+0xa0>)
 8003624:	2200      	movs	r2, #0
 8003626:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003628:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <MX_TIM3_Init+0xa0>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 800362e:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <MX_TIM3_Init+0xa0>)
 8003630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003634:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <MX_TIM3_Init+0xa0>)
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <MX_TIM3_Init+0xa0>)
 800363e:	2200      	movs	r2, #0
 8003640:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003642:	2303      	movs	r3, #3
 8003644:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003646:	2300      	movs	r3, #0
 8003648:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800364a:	2301      	movs	r3, #1
 800364c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800365a:	2301      	movs	r3, #1
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800365e:	2300      	movs	r3, #0
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	4619      	mov	r1, r3
 800366c:	480c      	ldr	r0, [pc, #48]	; (80036a0 <MX_TIM3_Init+0xa0>)
 800366e:	f005 ff95 	bl	800959c <HAL_TIM_Encoder_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003678:	f000 fb16 	bl	8003ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800367c:	2300      	movs	r3, #0
 800367e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	4619      	mov	r1, r3
 8003688:	4805      	ldr	r0, [pc, #20]	; (80036a0 <MX_TIM3_Init+0xa0>)
 800368a:	f006 fdb9 	bl	800a200 <HAL_TIMEx_MasterConfigSynchronization>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003694:	f000 fb08 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003698:	bf00      	nop
 800369a:	3730      	adds	r7, #48	; 0x30
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000890 	.word	0x20000890
 80036a4:	40000400 	.word	0x40000400

080036a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	; 0x28
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ae:	f107 0320 	add.w	r3, r7, #32
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036b8:	1d3b      	adds	r3, r7, #4
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]
 80036c0:	609a      	str	r2, [r3, #8]
 80036c2:	60da      	str	r2, [r3, #12]
 80036c4:	611a      	str	r2, [r3, #16]
 80036c6:	615a      	str	r2, [r3, #20]
 80036c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <MX_TIM4_Init+0xc0>)
 80036cc:	4a27      	ldr	r2, [pc, #156]	; (800376c <MX_TIM4_Init+0xc4>)
 80036ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 80036d0:	4b25      	ldr	r3, [pc, #148]	; (8003768 <MX_TIM4_Init+0xc0>)
 80036d2:	2202      	movs	r2, #2
 80036d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <MX_TIM4_Init+0xc0>)
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80036dc:	4b22      	ldr	r3, [pc, #136]	; (8003768 <MX_TIM4_Init+0xc0>)
 80036de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e4:	4b20      	ldr	r3, [pc, #128]	; (8003768 <MX_TIM4_Init+0xc0>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ea:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <MX_TIM4_Init+0xc0>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80036f0:	481d      	ldr	r0, [pc, #116]	; (8003768 <MX_TIM4_Init+0xc0>)
 80036f2:	f005 fdcc 	bl	800928e <HAL_TIM_PWM_Init>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80036fc:	f000 fad4 	bl	8003ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003700:	2300      	movs	r3, #0
 8003702:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003708:	f107 0320 	add.w	r3, r7, #32
 800370c:	4619      	mov	r1, r3
 800370e:	4816      	ldr	r0, [pc, #88]	; (8003768 <MX_TIM4_Init+0xc0>)
 8003710:	f006 fd76 	bl	800a200 <HAL_TIMEx_MasterConfigSynchronization>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800371a:	f000 fac5 	bl	8003ca8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800371e:	2360      	movs	r3, #96	; 0x60
 8003720:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	2200      	movs	r2, #0
 8003732:	4619      	mov	r1, r3
 8003734:	480c      	ldr	r0, [pc, #48]	; (8003768 <MX_TIM4_Init+0xc0>)
 8003736:	f006 fa03 	bl	8009b40 <HAL_TIM_PWM_ConfigChannel>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003740:	f000 fab2 	bl	8003ca8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003744:	1d3b      	adds	r3, r7, #4
 8003746:	2204      	movs	r2, #4
 8003748:	4619      	mov	r1, r3
 800374a:	4807      	ldr	r0, [pc, #28]	; (8003768 <MX_TIM4_Init+0xc0>)
 800374c:	f006 f9f8 	bl	8009b40 <HAL_TIM_PWM_ConfigChannel>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003756:	f000 faa7 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800375a:	4803      	ldr	r0, [pc, #12]	; (8003768 <MX_TIM4_Init+0xc0>)
 800375c:	f001 f8b4 	bl	80048c8 <HAL_TIM_MspPostInit>

}
 8003760:	bf00      	nop
 8003762:	3728      	adds	r7, #40	; 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200007ac 	.word	0x200007ac
 800376c:	40000800 	.word	0x40000800

08003770 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003776:	463b      	mov	r3, r7
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <MX_TIM6_Init+0x64>)
 8003780:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <MX_TIM6_Init+0x68>)
 8003782:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <MX_TIM6_Init+0x64>)
 8003786:	2204      	movs	r2, #4
 8003788:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378a:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <MX_TIM6_Init+0x64>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 33599;
 8003790:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <MX_TIM6_Init+0x64>)
 8003792:	f248 323f 	movw	r2, #33599	; 0x833f
 8003796:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <MX_TIM6_Init+0x64>)
 800379a:	2200      	movs	r2, #0
 800379c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800379e:	480d      	ldr	r0, [pc, #52]	; (80037d4 <MX_TIM6_Init+0x64>)
 80037a0:	f005 fc86 	bl	80090b0 <HAL_TIM_Base_Init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80037aa:	f000 fa7d 	bl	8003ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037b6:	463b      	mov	r3, r7
 80037b8:	4619      	mov	r1, r3
 80037ba:	4806      	ldr	r0, [pc, #24]	; (80037d4 <MX_TIM6_Init+0x64>)
 80037bc:	f006 fd20 	bl	800a200 <HAL_TIMEx_MasterConfigSynchronization>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80037c6:	f000 fa6f 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200009c8 	.word	0x200009c8
 80037d8:	40001000 	.word	0x40001000

080037dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e2:	463b      	mov	r3, r7
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <MX_TIM7_Init+0x64>)
 80037ec:	4a15      	ldr	r2, [pc, #84]	; (8003844 <MX_TIM7_Init+0x68>)
 80037ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <MX_TIM7_Init+0x64>)
 80037f2:	2204      	movs	r2, #4
 80037f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <MX_TIM7_Init+0x64>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33599;
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <MX_TIM7_Init+0x64>)
 80037fe:	f248 323f 	movw	r2, #33599	; 0x833f
 8003802:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <MX_TIM7_Init+0x64>)
 8003806:	2200      	movs	r2, #0
 8003808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800380a:	480d      	ldr	r0, [pc, #52]	; (8003840 <MX_TIM7_Init+0x64>)
 800380c:	f005 fc50 	bl	80090b0 <HAL_TIM_Base_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003816:	f000 fa47 	bl	8003ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381a:	2300      	movs	r3, #0
 800381c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003822:	463b      	mov	r3, r7
 8003824:	4619      	mov	r1, r3
 8003826:	4806      	ldr	r0, [pc, #24]	; (8003840 <MX_TIM7_Init+0x64>)
 8003828:	f006 fcea 	bl	800a200 <HAL_TIMEx_MasterConfigSynchronization>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003832:	f000 fa39 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000ae4 	.word	0x20000ae4
 8003844:	40001400 	.word	0x40001400

08003848 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800384c:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <MX_TIM10_Init+0x40>)
 800384e:	4a0f      	ldr	r2, [pc, #60]	; (800388c <MX_TIM10_Init+0x44>)
 8003850:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8003852:	4b0d      	ldr	r3, [pc, #52]	; (8003888 <MX_TIM10_Init+0x40>)
 8003854:	2204      	movs	r2, #4
 8003856:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <MX_TIM10_Init+0x40>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <MX_TIM10_Init+0x40>)
 8003860:	f248 323f 	movw	r2, #33599	; 0x833f
 8003864:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <MX_TIM10_Init+0x40>)
 8003868:	2200      	movs	r2, #0
 800386a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <MX_TIM10_Init+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003872:	4805      	ldr	r0, [pc, #20]	; (8003888 <MX_TIM10_Init+0x40>)
 8003874:	f005 fc1c 	bl	80090b0 <HAL_TIM_Base_Init>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800387e:	f000 fa13 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000848 	.word	0x20000848
 800388c:	40014400 	.word	0x40014400

08003890 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <MX_TIM11_Init+0x40>)
 8003896:	4a0f      	ldr	r2, [pc, #60]	; (80038d4 <MX_TIM11_Init+0x44>)
 8003898:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <MX_TIM11_Init+0x40>)
 800389c:	2204      	movs	r2, #4
 800389e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <MX_TIM11_Init+0x40>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <MX_TIM11_Init+0x40>)
 80038a8:	f248 323f 	movw	r2, #33599	; 0x833f
 80038ac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <MX_TIM11_Init+0x40>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <MX_TIM11_Init+0x40>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80038ba:	4805      	ldr	r0, [pc, #20]	; (80038d0 <MX_TIM11_Init+0x40>)
 80038bc:	f005 fbf8 	bl	80090b0 <HAL_TIM_Base_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80038c6:	f000 f9ef 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000920 	.word	0x20000920
 80038d4:	40014800 	.word	0x40014800

080038d8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <MX_TIM14_Init+0x40>)
 80038de:	4a0f      	ldr	r2, [pc, #60]	; (800391c <MX_TIM14_Init+0x44>)
 80038e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <MX_TIM14_Init+0x40>)
 80038e4:	2204      	movs	r2, #4
 80038e6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <MX_TIM14_Init+0x40>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <MX_TIM14_Init+0x40>)
 80038f0:	f248 323f 	movw	r2, #33599	; 0x833f
 80038f4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f6:	4b08      	ldr	r3, [pc, #32]	; (8003918 <MX_TIM14_Init+0x40>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <MX_TIM14_Init+0x40>)
 80038fe:	2200      	movs	r2, #0
 8003900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003902:	4805      	ldr	r0, [pc, #20]	; (8003918 <MX_TIM14_Init+0x40>)
 8003904:	f005 fbd4 	bl	80090b0 <HAL_TIM_Base_Init>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800390e:	f000 f9cb 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000a9c 	.word	0x20000a9c
 800391c:	40002000 	.word	0x40002000

08003920 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <MX_USART6_UART_Init+0x4c>)
 8003926:	4a12      	ldr	r2, [pc, #72]	; (8003970 <MX_USART6_UART_Init+0x50>)
 8003928:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <MX_USART6_UART_Init+0x4c>)
 800392c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003930:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <MX_USART6_UART_Init+0x4c>)
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <MX_USART6_UART_Init+0x4c>)
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <MX_USART6_UART_Init+0x4c>)
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <MX_USART6_UART_Init+0x4c>)
 8003946:	220c      	movs	r2, #12
 8003948:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <MX_USART6_UART_Init+0x4c>)
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <MX_USART6_UART_Init+0x4c>)
 8003952:	2200      	movs	r2, #0
 8003954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003956:	4805      	ldr	r0, [pc, #20]	; (800396c <MX_USART6_UART_Init+0x4c>)
 8003958:	f006 fce2 	bl	800a320 <HAL_UART_Init>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003962:	f000 f9a1 	bl	8003ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000a58 	.word	0x20000a58
 8003970:	40011400 	.word	0x40011400

08003974 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <MX_DMA_Init+0x3c>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	4a0b      	ldr	r2, [pc, #44]	; (80039b0 <MX_DMA_Init+0x3c>)
 8003984:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003988:	6313      	str	r3, [r2, #48]	; 0x30
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <MX_DMA_Init+0x3c>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	607b      	str	r3, [r7, #4]
 8003994:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	2038      	movs	r0, #56	; 0x38
 800399c:	f002 ff89 	bl	80068b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80039a0:	2038      	movs	r0, #56	; 0x38
 80039a2:	f002 ffa2 	bl	80068ea <HAL_NVIC_EnableIRQ>

}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800

080039b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ba:	f107 0314 	add.w	r3, r7, #20
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	60da      	str	r2, [r3, #12]
 80039c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	4b69      	ldr	r3, [pc, #420]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	4a68      	ldr	r2, [pc, #416]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6313      	str	r3, [r2, #48]	; 0x30
 80039da:	4b66      	ldr	r3, [pc, #408]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	4b62      	ldr	r3, [pc, #392]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	4a61      	ldr	r2, [pc, #388]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 80039f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f4:	6313      	str	r3, [r2, #48]	; 0x30
 80039f6:	4b5f      	ldr	r3, [pc, #380]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	4b5b      	ldr	r3, [pc, #364]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4a5a      	ldr	r2, [pc, #360]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6313      	str	r3, [r2, #48]	; 0x30
 8003a12:	4b58      	ldr	r3, [pc, #352]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]
 8003a22:	4b54      	ldr	r3, [pc, #336]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a53      	ldr	r2, [pc, #332]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 8003a28:	f043 0302 	orr.w	r3, r3, #2
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b51      	ldr	r3, [pc, #324]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	607b      	str	r3, [r7, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	4b4d      	ldr	r3, [pc, #308]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4a4c      	ldr	r2, [pc, #304]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <MX_GPIO_Init+0x1c0>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003a56:	2200      	movs	r2, #0
 8003a58:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8003a5c:	4846      	ldr	r0, [pc, #280]	; (8003b78 <MX_GPIO_Init+0x1c4>)
 8003a5e:	f003 ffc5 	bl	80079ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8003a62:	2200      	movs	r2, #0
 8003a64:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003a68:	4844      	ldr	r0, [pc, #272]	; (8003b7c <MX_GPIO_Init+0x1c8>)
 8003a6a:	f003 ffbf 	bl	80079ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003a74:	4842      	ldr	r0, [pc, #264]	; (8003b80 <MX_GPIO_Init+0x1cc>)
 8003a76:	f003 ffb9 	bl	80079ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	4841      	ldr	r0, [pc, #260]	; (8003b84 <MX_GPIO_Init+0x1d0>)
 8003a80:	f003 ffb4 	bl	80079ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8003a84:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a92:	2300      	movs	r3, #0
 8003a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a96:	f107 0314 	add.w	r3, r7, #20
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4836      	ldr	r0, [pc, #216]	; (8003b78 <MX_GPIO_Init+0x1c4>)
 8003a9e:	f003 fdf3 	bl	8007688 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8003aa2:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8003aa6:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4830      	ldr	r0, [pc, #192]	; (8003b78 <MX_GPIO_Init+0x1c4>)
 8003ab8:	f003 fde6 	bl	8007688 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8003abc:	f640 0304 	movw	r3, #2052	; 0x804
 8003ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aca:	f107 0314 	add.w	r3, r7, #20
 8003ace:	4619      	mov	r1, r3
 8003ad0:	482a      	ldr	r0, [pc, #168]	; (8003b7c <MX_GPIO_Init+0x1c8>)
 8003ad2:	f003 fdd9 	bl	8007688 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8003ad6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003adc:	2301      	movs	r3, #1
 8003ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	4619      	mov	r1, r3
 8003aee:	4823      	ldr	r0, [pc, #140]	; (8003b7c <MX_GPIO_Init+0x1c8>)
 8003af0:	f003 fdca 	bl	8007688 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8003af4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003afa:	2301      	movs	r3, #1
 8003afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	2300      	movs	r3, #0
 8003b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b06:	f107 0314 	add.w	r3, r7, #20
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	481c      	ldr	r0, [pc, #112]	; (8003b80 <MX_GPIO_Init+0x1cc>)
 8003b0e:	f003 fdbb 	bl	8007688 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8003b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	4619      	mov	r1, r3
 8003b26:	4816      	ldr	r0, [pc, #88]	; (8003b80 <MX_GPIO_Init+0x1cc>)
 8003b28:	f003 fdae 	bl	8007688 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b32:	2302      	movs	r3, #2
 8003b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	4619      	mov	r1, r3
 8003b48:	480d      	ldr	r0, [pc, #52]	; (8003b80 <MX_GPIO_Init+0x1cc>)
 8003b4a:	f003 fd9d 	bl	8007688 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8003b4e:	2304      	movs	r3, #4
 8003b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b52:	2301      	movs	r3, #1
 8003b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8003b5e:	f107 0314 	add.w	r3, r7, #20
 8003b62:	4619      	mov	r1, r3
 8003b64:	4807      	ldr	r0, [pc, #28]	; (8003b84 <MX_GPIO_Init+0x1d0>)
 8003b66:	f003 fd8f 	bl	8007688 <HAL_GPIO_Init>

}
 8003b6a:	bf00      	nop
 8003b6c:	3728      	adds	r7, #40	; 0x28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40020800 	.word	0x40020800
 8003b7c:	40020400 	.word	0x40020400
 8003b80:	40020000 	.word	0x40020000
 8003b84:	40020c00 	.word	0x40020c00

08003b88 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  #if USE_LED
  led_init();
 8003b8c:	f7fd fbd8 	bl	8001340 <led_init>
  #endif
  flash_init();
 8003b90:	f7fe ffb4 	bl	8002afc <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 8003b94:	f001 f920 	bl	8004dd8 <tim11_init>
  /* encoder_init */
  tim10_init();
 8003b98:	f001 f84a 	bl	8004c30 <tim10_init>
  /* tim7 */
  tim7_init();
 8003b9c:	f001 fa36 	bl	800500c <tim7_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8003ba0:	f001 f934 	bl	8004e0c <tim6_init>
  /* imu のバイアス補正のための初期�? */
  // if(rotary_read_playmode() == motor_free)
    // imu_revision_init();
}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <running_start>:

void running_start()
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  #if USE_LED
  led_start();
 8003bac:	f7fd fbde 	bl	800136c <led_start>
  #endif
  HAL_Delay(1000);
 8003bb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bb4:	f002 f91e 	bl	8005df4 <HAL_Delay>
  led_write_rgb(0b100);
 8003bb8:	2004      	movs	r0, #4
 8003bba:	f7fd fc3b 	bl	8001434 <led_write_rgb>
  HAL_Delay(1000);
 8003bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bc2:	f002 f917 	bl	8005df4 <HAL_Delay>
  led_write_led(0b01, 0b01);
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f7fd fc73 	bl	80014b4 <led_write_led>
  HAL_Delay(1000);
 8003bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bd2:	f002 f90f 	bl	8005df4 <HAL_Delay>
  led_write_led(0b10, 0b10);
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	2002      	movs	r0, #2
 8003bda:	f7fd fc6b 	bl	80014b4 <led_write_led>
  HAL_Delay(1000);
 8003bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be2:	f002 f907 	bl	8005df4 <HAL_Delay>
  led_write_led(0b11, 0b00);
 8003be6:	2100      	movs	r1, #0
 8003be8:	2003      	movs	r0, #3
 8003bea:	f7fd fc63 	bl	80014b4 <led_write_led>
  led_write_rgb(0b010);
 8003bee:	2002      	movs	r0, #2
 8003bf0:	f7fd fc20 	bl	8001434 <led_write_rgb>
  #if D_TIM7
  printf("main.c > running_start() > ");
  #endif
  tim7_start();
 8003bf4:	f001 fa1a 	bl	800502c <tim7_start>
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 8003bf8:	f001 f844 	bl	8004c84 <tim10_start>
  /* analogmin/max = analogdata.min/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 8003bfc:	f001 f918 	bl	8004e30 <tim6_start>
  /* imu のバイアス補正のための準備 */
  // if(rotary_read_playmode() == motor_free)
    // imu_revision_start();
}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <running_stop>:

void running_stop()
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  #if USE_LED
  led_stop();
 8003c08:	f7fd fbbb 	bl	8001382 <led_stop>
  #endif
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8003c0c:	f001 f928 	bl	8004e60 <tim6_stop>
  /* tim7 */
  tim7_stop();
 8003c10:	f001 fa34 	bl	800507c <tim7_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8003c14:	f001 f864 	bl	8004ce0 <tim10_stop>
  /* imu バイアス補正のための終�? */
  // if(rotary_read_playmode() == motor_free)
    // imu_revision_stop();
  led_write_rgb(0b001);
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f7fd fc0b 	bl	8001434 <led_write_rgb>
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <main_print_while>:

void main_print_while()
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
	printf("////////////////////////////// WHILE //////////////////////////////\n\r");
 8003c28:	4815      	ldr	r0, [pc, #84]	; (8003c80 <main_print_while+0x5c>)
 8003c2a:	f007 fd1f 	bl	800b66c <iprintf>
  rotary_print_playmode();
 8003c2e:	f7fd fce9 	bl	8001604 <rotary_print_playmode>
	print_rotary_value();
 8003c32:	f000 f91d 	bl	8003e70 <print_rotary_value>
  if(rotary_read() < 4)
 8003c36:	f7fd fc9b 	bl	8001570 <rotary_read>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d804      	bhi.n	8003c4a <main_print_while+0x26>
  {
    led_write_led(0b11, 0b10);
 8003c40:	2102      	movs	r1, #2
 8003c42:	2003      	movs	r0, #3
 8003c44:	f7fd fc36 	bl	80014b4 <led_write_led>
  }
  else
  {
    led_write_led(0b11, 0b00);
  }
}
 8003c48:	e017      	b.n	8003c7a <main_print_while+0x56>
  else if(rotary_read() < 8)
 8003c4a:	f7fd fc91 	bl	8001570 <rotary_read>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b07      	cmp	r3, #7
 8003c52:	d804      	bhi.n	8003c5e <main_print_while+0x3a>
    led_write_led(0b11, 0b01);
 8003c54:	2101      	movs	r1, #1
 8003c56:	2003      	movs	r0, #3
 8003c58:	f7fd fc2c 	bl	80014b4 <led_write_led>
}
 8003c5c:	e00d      	b.n	8003c7a <main_print_while+0x56>
  else if(rotary_read() == 15)
 8003c5e:	f7fd fc87 	bl	8001570 <rotary_read>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b0f      	cmp	r3, #15
 8003c66:	d104      	bne.n	8003c72 <main_print_while+0x4e>
    led_write_led(0b11, 0b11);
 8003c68:	2103      	movs	r1, #3
 8003c6a:	2003      	movs	r0, #3
 8003c6c:	f7fd fc22 	bl	80014b4 <led_write_led>
}
 8003c70:	e003      	b.n	8003c7a <main_print_while+0x56>
    led_write_led(0b11, 0b00);
 8003c72:	2100      	movs	r1, #0
 8003c74:	2003      	movs	r0, #3
 8003c76:	f7fd fc1d 	bl	80014b4 <led_write_led>
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	0801027c 	.word	0x0801027c

08003c84 <main_main>:

void main_main()
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  main_d_print();
 8003c88:	f000 f802 	bl	8003c90 <main_d_print>
	tim7_main();
	#endif
	#if D_TIM6_WHILE
	tim6_main();
	#endif
}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <main_d_print>:

void main_d_print()
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  revision_print();
 8003c94:	f000 f8fa 	bl	8003e8c <revision_print>
  tim10_d_print();
 8003c98:	f001 f890 	bl	8004dbc <tim10_d_print>
  tim7_d_print();
 8003c9c:	f001 faec 	bl	8005278 <tim7_d_print>
  tim6_d_print();
 8003ca0:	f001 f9ae 	bl	8005000 <tim6_d_print>
}
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003cae:	e7fe      	b.n	8003cae <Error_Handler+0x6>

08003cb0 <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f000 f827 	bl	8003d08 <motor_enable>
}
 8003cba:	bf00      	nop
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <motor_start>:

void motor_start()
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4806      	ldr	r0, [pc, #24]	; (8003ce0 <motor_start+0x20>)
 8003cc8:	f005 fb30 	bl	800932c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003ccc:	2104      	movs	r1, #4
 8003cce:	4804      	ldr	r0, [pc, #16]	; (8003ce0 <motor_start+0x20>)
 8003cd0:	f005 fb2c 	bl	800932c <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	f000 f817 	bl	8003d08 <motor_enable>
#endif
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200007ac 	.word	0x200007ac

08003ce4 <motor_stop>:

void motor_stop()
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f000 f80d 	bl	8003d08 <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8003cee:	2104      	movs	r1, #4
 8003cf0:	4804      	ldr	r0, [pc, #16]	; (8003d04 <motor_stop+0x20>)
 8003cf2:	f005 fbe3 	bl	80094bc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <motor_stop+0x20>)
 8003cfa:	f005 fbdf 	bl	80094bc <HAL_TIM_PWM_Stop>
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200007ac 	.word	0x200007ac

08003d08 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <motor_enable+0x28>)
 8003d22:	701a      	strb	r2, [r3, #0]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	20001b34 	.word	0x20001b34

08003d34 <motor_read_enable>:

char motor_read_enable()
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
    return enable;
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <motor_read_enable+0x14>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20001b34 	.word	0x20001b34

08003d4c <motor_set>:

void motor_set(float motor_left_, float motor_right_)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d56:	edc7 0a00 	vstr	s1, [r7]
    if(motor_left_ < 0)
 8003d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d66:	d50b      	bpl.n	8003d80 <motor_set+0x34>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003d68:	2200      	movs	r2, #0
 8003d6a:	2104      	movs	r1, #4
 8003d6c:	4831      	ldr	r0, [pc, #196]	; (8003e34 <motor_set+0xe8>)
 8003d6e:	f003 fe3d 	bl	80079ec <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8003d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d76:	eef1 7a67 	vneg.f32	s15, s15
 8003d7a:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d7e:	e004      	b.n	8003d8a <motor_set+0x3e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8003d80:	2201      	movs	r2, #1
 8003d82:	2104      	movs	r1, #4
 8003d84:	482b      	ldr	r0, [pc, #172]	; (8003e34 <motor_set+0xe8>)
 8003d86:	f003 fe31 	bl	80079ec <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8003d8a:	edd7 7a00 	vldr	s15, [r7]
 8003d8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	d50c      	bpl.n	8003db2 <motor_set+0x66>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d9e:	4826      	ldr	r0, [pc, #152]	; (8003e38 <motor_set+0xec>)
 8003da0:	f003 fe24 	bl	80079ec <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8003da4:	edd7 7a00 	vldr	s15, [r7]
 8003da8:	eef1 7a67 	vneg.f32	s15, s15
 8003dac:	edc7 7a00 	vstr	s15, [r7]
 8003db0:	e005      	b.n	8003dbe <motor_set+0x72>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003db2:	2200      	movs	r2, #0
 8003db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003db8:	481f      	ldr	r0, [pc, #124]	; (8003e38 <motor_set+0xec>)
 8003dba:	f003 fe17 	bl	80079ec <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 8003dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dc2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003e3c <motor_set+0xf0>
 8003dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	dd01      	ble.n	8003dd4 <motor_set+0x88>
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <motor_set+0xf4>)
 8003dd2:	e000      	b.n	8003dd6 <motor_set+0x8a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	607b      	str	r3, [r7, #4]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 8003dd8:	edd7 7a00 	vldr	s15, [r7]
 8003ddc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003e3c <motor_set+0xf0>
 8003de0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de8:	dd01      	ble.n	8003dee <motor_set+0xa2>
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <motor_set+0xf4>)
 8003dec:	e000      	b.n	8003df0 <motor_set+0xa4>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	603b      	str	r3, [r7, #0]

    if(!enable)
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <motor_set+0xf8>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <motor_set+0xba>
    {
        motor_left_ = 0;
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	607b      	str	r3, [r7, #4]
        motor_right_ = 0;
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	603b      	str	r3, [r7, #0]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 8003e06:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <motor_set+0xfc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e12:	ee17 2a90 	vmov	r2, s15
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <motor_set+0xfc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	edd7 7a00 	vldr	s15, [r7]
 8003e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e24:	ee17 2a90 	vmov	r2, s15
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40020c00 	.word	0x40020c00
 8003e38:	40020800 	.word	0x40020800
 8003e3c:	447a0000 	.word	0x447a0000
 8003e40:	447a0000 	.word	0x447a0000
 8003e44:	20001b34 	.word	0x20001b34
 8003e48:	200007ac 	.word	0x200007ac

08003e4c <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8003e54:	1d39      	adds	r1, r7, #4
 8003e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4803      	ldr	r0, [pc, #12]	; (8003e6c <__io_putchar+0x20>)
 8003e5e:	f006 faac 	bl	800a3ba <HAL_UART_Transmit>
	return ch;
 8003e62:	687b      	ldr	r3, [r7, #4]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3708      	adds	r7, #8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000a58 	.word	0x20000a58

08003e70 <print_rotary_value>:

void print_rotary_value()
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8003e74:	f7fd fb70 	bl	8001558 <rotary_read_value>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <print_rotary_value+0x18>)
 8003e7e:	f007 fbf5 	bl	800b66c <iprintf>
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	080102c4 	.word	0x080102c4

08003e8c <revision_print>:
        imu_revision_count = imu_revision_count + 1;
	}
}

void revision_print()
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
    #if IMU_REVISION
    imu_revision_print();
    #endif
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <section_length_set_sampling_time_ms>:
//! update 周期
float samplingtime_s;

//! update 周期を設定する
void section_length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	80fb      	strh	r3, [r7, #6]
    samplingtime_s = samplingtime_ms / (float) 1000;
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb0:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003ecc <section_length_set_sampling_time_ms+0x30>
 8003eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <section_length_set_sampling_time_ms+0x34>)
 8003eba:	edc3 7a00 	vstr	s15, [r3]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	447a0000 	.word	0x447a0000
 8003ed0:	20001b3c 	.word	0x20001b3c

08003ed4 <section_length_init>:

void section_length_init(unsigned short int samplingtime_ms)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	80fb      	strh	r3, [r7, #6]
    section_length_set_sampling_time_ms(samplingtime_ms);
 8003ede:	88fb      	ldrh	r3, [r7, #6]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff ffdb 	bl	8003e9c <section_length_set_sampling_time_ms>
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <section_length_start>:

void section_length_start()
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	af00      	add	r7, sp, #0
    section_length_reset();
 8003ef2:	f000 f80d 	bl	8003f10 <section_length_reset>
    section_length_buffer_reset();
 8003ef6:	f000 f81f 	bl	8003f38 <section_length_buffer_reset>
    length_start();
 8003efa:	f7fe fea5 	bl	8002c48 <length_start>
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <section_length_stop>:

void section_length_stop()
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	af00      	add	r7, sp, #0
    length_stop();
 8003f06:	f7fe feb1 	bl	8002c6c <length_stop>
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <section_length_reset>:
{
    length_fin();
}

void section_length_reset()
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
    section_length_right = 0;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <section_length_reset+0x20>)
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
    section_length_left = 0;
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <section_length_reset+0x24>)
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20001b38 	.word	0x20001b38
 8003f34:	20001b40 	.word	0x20001b40

08003f38 <section_length_buffer_reset>:

void section_length_buffer_reset()
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = 0;
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <section_length_buffer_reset+0x20>)
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
    section_length_buffer_global_right = 0;
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <section_length_buffer_reset+0x24>)
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20001b48 	.word	0x20001b48
 8003f5c:	20001b44 	.word	0x20001b44

08003f60 <section_length_read>:

//! 現在点区間長を返す
float section_length_read()
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	ed2d 8b02 	vpush	{d8}
 8003f66:	af00      	add	r7, sp, #0
    return (section_length_read_left() + section_length_read_right()) / 2;
 8003f68:	f000 f814 	bl	8003f94 <section_length_read_left>
 8003f6c:	eeb0 8a40 	vmov.f32	s16, s0
 8003f70:	f000 f81e 	bl	8003fb0 <section_length_read_right>
 8003f74:	eef0 7a40 	vmov.f32	s15, s0
 8003f78:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003f7c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003f80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003f84:	eef0 7a66 	vmov.f32	s15, s13
}
 8003f88:	eeb0 0a67 	vmov.f32	s0, s15
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	ecbd 8b02 	vpop	{d8}
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <section_length_read_left>:

float section_length_read_left()
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
    return section_length_left;
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <section_length_read_left+0x18>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	ee07 3a90 	vmov	s15, r3
}
 8003fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	20001b40 	.word	0x20001b40

08003fb0 <section_length_read_right>:

float section_length_read_right()
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
    return section_length_right;
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <section_length_read_right+0x18>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	ee07 3a90 	vmov	s15, r3
}
 8003fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	20001b38 	.word	0x20001b38

08003fcc <section_length_set_buffer>:
 * }
 * 
 */
//! 区間開始点を現在点の世界長にする
void section_length_set_buffer()
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = length_read_left();
 8003fd0:	f7fe fe86 	bl	8002ce0 <length_read_left>
 8003fd4:	eef0 7a40 	vmov.f32	s15, s0
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <section_length_set_buffer+0x24>)
 8003fda:	edc3 7a00 	vstr	s15, [r3]
    section_length_buffer_global_right = length_read_right();
 8003fde:	f7fe fe8d 	bl	8002cfc <length_read_right>
 8003fe2:	eef0 7a40 	vmov.f32	s15, s0
 8003fe6:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <section_length_set_buffer+0x28>)
 8003fe8:	edc3 7a00 	vstr	s15, [r3]
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20001b48 	.word	0x20001b48
 8003ff4:	20001b44 	.word	0x20001b44

08003ff8 <section_length_update>:

void section_length_update()
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
    //! 区間開始点から現在点の区間長を計算
    section_length_left = length_read_left() - section_length_buffer_global_left;
 8003ffc:	f7fe fe70 	bl	8002ce0 <length_read_left>
 8004000:	eeb0 7a40 	vmov.f32	s14, s0
 8004004:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <section_length_update+0x38>)
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <section_length_update+0x3c>)
 8004010:	edc3 7a00 	vstr	s15, [r3]
    section_length_right = length_read_right() - section_length_buffer_global_right;
 8004014:	f7fe fe72 	bl	8002cfc <length_read_right>
 8004018:	eeb0 7a40 	vmov.f32	s14, s0
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <section_length_update+0x40>)
 800401e:	edd3 7a00 	vldr	s15, [r3]
 8004022:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <section_length_update+0x44>)
 8004028:	edc3 7a00 	vstr	s15, [r3]
}
 800402c:	bf00      	nop
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20001b48 	.word	0x20001b48
 8004034:	20001b40 	.word	0x20001b40
 8004038:	20001b44 	.word	0x20001b44
 800403c:	20001b38 	.word	0x20001b38

08004040 <section_length_d_print>:

void section_length_d_print()
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
    #if D_SECTION_LENGTH
    printf("section_length = %10.2f\r\n", section_length_read());
    #endif
}
 8004044:	bf00      	nop
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <sidesensor_read>:
unsigned char subsensbuf, marker, sidedeltacount, rightmarkercount;
SideSensorState markerstate, markerstate_volatile;
char sidesensor_start_or_stop;

uint8_t sidesensor_read()
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 800405a:	2104      	movs	r1, #4
 800405c:	4810      	ldr	r0, [pc, #64]	; (80040a0 <sidesensor_read+0x50>)
 800405e:	f003 fcad 	bl	80079bc <HAL_GPIO_ReadPin>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	4413      	add	r3, r2
 8004074:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 8004076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800407a:	4809      	ldr	r0, [pc, #36]	; (80040a0 <sidesensor_read+0x50>)
 800407c:	f003 fc9e 	bl	80079bc <HAL_GPIO_ReadPin>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <sidesensor_read+0x3a>
 8004086:	2302      	movs	r3, #2
 8004088:	e000      	b.n	800408c <sidesensor_read+0x3c>
 800408a:	2300      	movs	r3, #0
 800408c:	b2da      	uxtb	r2, r3
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	4413      	add	r3, r2
 8004092:	71fb      	strb	r3, [r7, #7]

    return subsens;
 8004094:	79fb      	ldrb	r3, [r7, #7]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40020400 	.word	0x40020400

080040a4 <sidesensor_init>:

void sidesensor_init()
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
	/* sidesensor_init */
}
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <sidesensor_start>:

void sidesensor_start()
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
    marker = 0;
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <sidesensor_start+0x34>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <sidesensor_start+0x38>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <sidesensor_start+0x3c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <sidesensor_start+0x40>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	701a      	strb	r2, [r3, #0]
	markerstate = none;
 80040d0:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <sidesensor_start+0x44>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = none;
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <sidesensor_start+0x48>)
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 80040dc:	bf00      	nop
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20001b4f 	.word	0x20001b4f
 80040ec:	20001b4c 	.word	0x20001b4c
 80040f0:	20001b4d 	.word	0x20001b4d
 80040f4:	20001b52 	.word	0x20001b52
 80040f8:	20001b4e 	.word	0x20001b4e
 80040fc:	20001b50 	.word	0x20001b50

08004100 <sidesensor_stop>:

void sidesensor_stop()
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <sidesensor_read_markerstate>:

SideSensorState sidesensor_read_markerstate()
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
	return markerstate;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <sidesensor_read_markerstate+0x14>)
 8004116:	781b      	ldrb	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20001b4e 	.word	0x20001b4e

08004128 <sidesensor_read_markerstate_volatile>:

SideSensorState sidesensor_read_markerstate_volatile()
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
	return markerstate_volatile;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <sidesensor_read_markerstate_volatile+0x14>)
 800412e:	781b      	ldrb	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20001b50 	.word	0x20001b50

08004140 <sidesensor_right>:

void sidesensor_right()
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
    if(rightmarkercount == 1 - 1)
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <sidesensor_right+0x44>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <sidesensor_right+0x1a>
    {
        // start
		markerstate_volatile = straight;
 800414c:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <sidesensor_right+0x48>)
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
		markerstate = straight;
 8004152:	4b0e      	ldr	r3, [pc, #56]	; (800418c <sidesensor_right+0x4c>)
 8004154:	2201      	movs	r2, #1
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e009      	b.n	800416e <sidesensor_right+0x2e>
    }
    else if(rightmarkercount == 2 - 1)
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <sidesensor_right+0x44>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d105      	bne.n	800416e <sidesensor_right+0x2e>
    {
        // stop
		markerstate_volatile = stop;
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <sidesensor_right+0x48>)
 8004164:	2203      	movs	r2, #3
 8004166:	701a      	strb	r2, [r3, #0]
		markerstate = stop;
 8004168:	4b08      	ldr	r3, [pc, #32]	; (800418c <sidesensor_right+0x4c>)
 800416a:	2203      	movs	r2, #3
 800416c:	701a      	strb	r2, [r3, #0]
    }
    rightmarkercount++;
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <sidesensor_right+0x44>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4b03      	ldr	r3, [pc, #12]	; (8004184 <sidesensor_right+0x44>)
 8004178:	701a      	strb	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	20001b52 	.word	0x20001b52
 8004188:	20001b50 	.word	0x20001b50
 800418c:	20001b4e 	.word	0x20001b4e

08004190 <sidesensor_left>:

void sidesensor_left()
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <sidesensor_left+0x1c>)
 8004196:	2204      	movs	r2, #4
 8004198:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = curve;
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <sidesensor_left+0x20>)
 800419c:	2204      	movs	r2, #4
 800419e:	701a      	strb	r2, [r3, #0]
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20001b4e 	.word	0x20001b4e
 80041b0:	20001b50 	.word	0x20001b50

080041b4 <sidesensor_cross>:

void sidesensor_cross()
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <sidesensor_cross+0x1c>)
 80041ba:	2205      	movs	r2, #5
 80041bc:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = cross;
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <sidesensor_cross+0x20>)
 80041c0:	2205      	movs	r2, #5
 80041c2:	701a      	strb	r2, [r3, #0]
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20001b4e 	.word	0x20001b4e
 80041d4:	20001b50 	.word	0x20001b50

080041d8 <sidesensor_main>:
	markerstate = straight;
	markerstate_volatile = straight;
}

void sidesensor_main()
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 80041de:	f7ff ff37 	bl	8004050 <sidesensor_read>
 80041e2:	4603      	mov	r3, r0
 80041e4:	71fb      	strb	r3, [r7, #7]
	markerstate_volatile = none;
 80041e6:	4b28      	ldr	r3, [pc, #160]	; (8004288 <sidesensor_main+0xb0>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]

	if(subsens != subsensbuf)
 80041ec:	4b27      	ldr	r3, [pc, #156]	; (800428c <sidesensor_main+0xb4>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	79fa      	ldrb	r2, [r7, #7]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d044      	beq.n	8004280 <sidesensor_main+0xa8>
	{
		subsensbuf = subsens;
 80041f6:	4a25      	ldr	r2, [pc, #148]	; (800428c <sidesensor_main+0xb4>)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 80041fc:	79fa      	ldrb	r2, [r7, #7]
 80041fe:	4b24      	ldr	r3, [pc, #144]	; (8004290 <sidesensor_main+0xb8>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4b22      	ldr	r3, [pc, #136]	; (8004294 <sidesensor_main+0xbc>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	4413      	add	r3, r2
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4b20      	ldr	r3, [pc, #128]	; (8004294 <sidesensor_main+0xbc>)
 8004214:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d12b      	bne.n	8004274 <sidesensor_main+0x9c>
 800421c:	4b1c      	ldr	r3, [pc, #112]	; (8004290 <sidesensor_main+0xb8>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d027      	beq.n	8004274 <sidesensor_main+0x9c>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 8004224:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <sidesensor_main+0xbc>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 800422e:	4b19      	ldr	r3, [pc, #100]	; (8004294 <sidesensor_main+0xbc>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	109b      	asrs	r3, r3, #2
 8004234:	b2db      	uxtb	r3, r3
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 800423c:	797b      	ldrb	r3, [r7, #5]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10e      	bne.n	8004260 <sidesensor_main+0x88>
			{
				if (first == 0b01)
 8004242:	79bb      	ldrb	r3, [r7, #6]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d102      	bne.n	800424e <sidesensor_main+0x76>
				{
					// right -> start / stop
                    sidesensor_right();
 8004248:	f7ff ff7a 	bl	8004140 <sidesensor_right>
 800424c:	e00a      	b.n	8004264 <sidesensor_main+0x8c>
				}
				else if (first == 0b10)
 800424e:	79bb      	ldrb	r3, [r7, #6]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d102      	bne.n	800425a <sidesensor_main+0x82>
				{
					// left -> curve
                    sidesensor_left();
 8004254:	f7ff ff9c 	bl	8004190 <sidesensor_left>
 8004258:	e004      	b.n	8004264 <sidesensor_main+0x8c>
				}
				else
				{
					// cross
                    sidesensor_cross();
 800425a:	f7ff ffab 	bl	80041b4 <sidesensor_cross>
 800425e:	e001      	b.n	8004264 <sidesensor_main+0x8c>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8004260:	f7ff ffa8 	bl	80041b4 <sidesensor_cross>
			}
			sidedeltacount = 0;
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <sidesensor_main+0xb8>)
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
			marker = 0;
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <sidesensor_main+0xbc>)
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]
		{
 8004270:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 8004272:	e005      	b.n	8004280 <sidesensor_main+0xa8>
			sidedeltacount++;
 8004274:	4b06      	ldr	r3, [pc, #24]	; (8004290 <sidesensor_main+0xb8>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <sidesensor_main+0xb8>)
 800427e:	701a      	strb	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	20001b50 	.word	0x20001b50
 800428c:	20001b4c 	.word	0x20001b4c
 8004290:	20001b4d 	.word	0x20001b4d
 8004294:	20001b4f 	.word	0x20001b4f

08004298 <slow_start>:
    /* slow_init */
    slow_started = 0;
}

void slow_start()
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
    /* slow_start */

    /* 初期設定されている値を一旦保存する */
    PID *slow_default_pid_pointer;
    slow_default_pid_pointer = velotrace_read_values();
 800429e:	f001 fc1d 	bl	8005adc <velotrace_read_values>
 80042a2:	6078      	str	r0, [r7, #4]
    slow_default_pid.target = slow_default_pid_pointer -> target;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <slow_start+0x80>)
 80042aa:	6013      	str	r3, [r2, #0]
    slow_default_pid_pointer = tracer_read_values();
 80042ac:	f001 f9c4 	bl	8005638 <tracer_read_values>
 80042b0:	6078      	str	r0, [r7, #4]
    slow_default_pid.kp = slow_default_pid_pointer->kp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4a18      	ldr	r2, [pc, #96]	; (8004318 <slow_start+0x80>)
 80042b8:	6053      	str	r3, [r2, #4]
    slow_default_pid.ki = slow_default_pid_pointer->ki;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	4a16      	ldr	r2, [pc, #88]	; (8004318 <slow_start+0x80>)
 80042c0:	6093      	str	r3, [r2, #8]
    slow_default_pid.kd = slow_default_pid_pointer->kd;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4a14      	ldr	r2, [pc, #80]	; (8004318 <slow_start+0x80>)
 80042c8:	60d3      	str	r3, [r2, #12]

    /* slow 実行時の PID パラメータ */
    slow_pid.target = SLOW_VELOTRACE_TARGET;
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <slow_start+0x84>)
 80042cc:	4a14      	ldr	r2, [pc, #80]	; (8004320 <slow_start+0x88>)
 80042ce:	601a      	str	r2, [r3, #0]
    slow_pid.kp = SLOW_TRACE_KP;
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <slow_start+0x84>)
 80042d2:	4a14      	ldr	r2, [pc, #80]	; (8004324 <slow_start+0x8c>)
 80042d4:	605a      	str	r2, [r3, #4]
    slow_pid.ki = SLOW_TRACE_KI;
 80042d6:	4b11      	ldr	r3, [pc, #68]	; (800431c <slow_start+0x84>)
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	609a      	str	r2, [r3, #8]
    slow_pid.kd = SLOW_TRACE_KD;
 80042de:	4b0f      	ldr	r3, [pc, #60]	; (800431c <slow_start+0x84>)
 80042e0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80042e4:	60da      	str	r2, [r3, #12]

    /* 初期化 */
    length_start();
 80042e6:	f7fe fcaf 	bl	8002c48 <length_start>
    tracer_start();
 80042ea:	f001 f84d 	bl	8005388 <tracer_start>
    velotrace_start();
 80042ee:	f001 fa43 	bl	8005778 <velotrace_start>
    slowinglength = 0;
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <slow_start+0x90>)
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
    slow_enable = 1;
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <slow_start+0x94>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	701a      	strb	r2, [r3, #0]
    //! スロースタートを始めたタイミングでの世界長を取り出す
    slow_start_point_global_length = length_read();
 8004300:	f7fe fcd4 	bl	8002cac <length_read>
 8004304:	eef0 7a40 	vmov.f32	s15, s0
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <slow_start+0x98>)
 800430a:	edc3 7a00 	vstr	s15, [r3]
}
 800430e:	bf00      	nop
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20001b70 	.word	0x20001b70
 800431c:	20001b5c 	.word	0x20001b5c
 8004320:	3e99999a 	.word	0x3e99999a
 8004324:	40400000 	.word	0x40400000
 8004328:	20001b80 	.word	0x20001b80
 800432c:	20001b59 	.word	0x20001b59
 8004330:	20001b54 	.word	0x20001b54

08004334 <slow_print_default_pid>:
{
    return sigmoid(x, SLOW_SIGMOID_A, SLOW_LENGTH / 2);
}

void slow_print_default_pid()
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
#if D_SLOW
    // printf("slow > kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", slow_default_pid.kp, slow_default_pid.ki, slow_default_pid.kd);
    printf("slow > target = %7.2f\r\n", slow_default_pid.target);
#endif
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	607b      	str	r3, [r7, #4]
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_MspInit+0x54>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	4a11      	ldr	r2, [pc, #68]	; (8004398 <HAL_MspInit+0x54>)
 8004354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004358:	6453      	str	r3, [r2, #68]	; 0x44
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <HAL_MspInit+0x54>)
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004366:	2300      	movs	r3, #0
 8004368:	603b      	str	r3, [r7, #0]
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_MspInit+0x54>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <HAL_MspInit+0x54>)
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004374:	6413      	str	r3, [r2, #64]	; 0x40
 8004376:	4b08      	ldr	r3, [pc, #32]	; (8004398 <HAL_MspInit+0x54>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8004382:	2200      	movs	r2, #0
 8004384:	210f      	movs	r1, #15
 8004386:	f06f 0003 	mvn.w	r0, #3
 800438a:	f002 fa92 	bl	80068b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40023800 	.word	0x40023800

0800439c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	; 0x30
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a4:	f107 031c 	add.w	r3, r7, #28
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	60da      	str	r2, [r3, #12]
 80043b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a49      	ldr	r2, [pc, #292]	; (80044e0 <HAL_ADC_MspInit+0x144>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	f040 808c 	bne.w	80044d8 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043c0:	2300      	movs	r3, #0
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	4a46      	ldr	r2, [pc, #280]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 80043ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ce:	6453      	str	r3, [r2, #68]	; 0x44
 80043d0:	4b44      	ldr	r3, [pc, #272]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	4b40      	ldr	r3, [pc, #256]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	4a3f      	ldr	r2, [pc, #252]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	6313      	str	r3, [r2, #48]	; 0x30
 80043ec:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f8:	2300      	movs	r3, #0
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	4b39      	ldr	r3, [pc, #228]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004400:	4a38      	ldr	r2, [pc, #224]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 8004402:	f043 0301 	orr.w	r3, r3, #1
 8004406:	6313      	str	r3, [r2, #48]	; 0x30
 8004408:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004414:	2300      	movs	r3, #0
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	4b32      	ldr	r3, [pc, #200]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	4a31      	ldr	r2, [pc, #196]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 800441e:	f043 0302 	orr.w	r3, r3, #2
 8004422:	6313      	str	r3, [r2, #48]	; 0x30
 8004424:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <HAL_ADC_MspInit+0x148>)
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004430:	233f      	movs	r3, #63	; 0x3f
 8004432:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004434:	2303      	movs	r3, #3
 8004436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004438:	2300      	movs	r3, #0
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800443c:	f107 031c 	add.w	r3, r7, #28
 8004440:	4619      	mov	r1, r3
 8004442:	4829      	ldr	r0, [pc, #164]	; (80044e8 <HAL_ADC_MspInit+0x14c>)
 8004444:	f003 f920 	bl	8007688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004448:	23ff      	movs	r3, #255	; 0xff
 800444a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800444c:	2303      	movs	r3, #3
 800444e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	2300      	movs	r3, #0
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004454:	f107 031c 	add.w	r3, r7, #28
 8004458:	4619      	mov	r1, r3
 800445a:	4824      	ldr	r0, [pc, #144]	; (80044ec <HAL_ADC_MspInit+0x150>)
 800445c:	f003 f914 	bl	8007688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004460:	2303      	movs	r3, #3
 8004462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004464:	2303      	movs	r3, #3
 8004466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004468:	2300      	movs	r3, #0
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800446c:	f107 031c 	add.w	r3, r7, #28
 8004470:	4619      	mov	r1, r3
 8004472:	481f      	ldr	r0, [pc, #124]	; (80044f0 <HAL_ADC_MspInit+0x154>)
 8004474:	f003 f908 	bl	8007688 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 800447a:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <HAL_ADC_MspInit+0x15c>)
 800447c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800447e:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004484:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 8004486:	2200      	movs	r2, #0
 8004488:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 800448c:	2200      	movs	r2, #0
 800448e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004490:	4b18      	ldr	r3, [pc, #96]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 8004492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004496:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004498:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 800449a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800449e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80044a0:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 80044a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80044a8:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 80044aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80044b0:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044b6:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80044bc:	480d      	ldr	r0, [pc, #52]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 80044be:	f002 fa2f 	bl	8006920 <HAL_DMA_Init>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80044c8:	f7ff fbee 	bl	8003ca8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a09      	ldr	r2, [pc, #36]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
 80044d2:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <HAL_ADC_MspInit+0x158>)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80044d8:	bf00      	nop
 80044da:	3730      	adds	r7, #48	; 0x30
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	40012000 	.word	0x40012000
 80044e4:	40023800 	.word	0x40023800
 80044e8:	40020800 	.word	0x40020800
 80044ec:	40020000 	.word	0x40020000
 80044f0:	40020400 	.word	0x40020400
 80044f4:	20000968 	.word	0x20000968
 80044f8:	40026410 	.word	0x40026410

080044fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004504:	f107 0314 	add.w	r3, r7, #20
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a19      	ldr	r2, [pc, #100]	; (8004580 <HAL_I2C_MspInit+0x84>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d12c      	bne.n	8004578 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	4b18      	ldr	r3, [pc, #96]	; (8004584 <HAL_I2C_MspInit+0x88>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	4a17      	ldr	r2, [pc, #92]	; (8004584 <HAL_I2C_MspInit+0x88>)
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	6313      	str	r3, [r2, #48]	; 0x30
 800452e:	4b15      	ldr	r3, [pc, #84]	; (8004584 <HAL_I2C_MspInit+0x88>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800453a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800453e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004540:	2312      	movs	r3, #18
 8004542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004544:	2301      	movs	r3, #1
 8004546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004548:	2303      	movs	r3, #3
 800454a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800454c:	2304      	movs	r3, #4
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004550:	f107 0314 	add.w	r3, r7, #20
 8004554:	4619      	mov	r1, r3
 8004556:	480c      	ldr	r0, [pc, #48]	; (8004588 <HAL_I2C_MspInit+0x8c>)
 8004558:	f003 f896 	bl	8007688 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	4b08      	ldr	r3, [pc, #32]	; (8004584 <HAL_I2C_MspInit+0x88>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	4a07      	ldr	r2, [pc, #28]	; (8004584 <HAL_I2C_MspInit+0x88>)
 8004566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800456a:	6413      	str	r3, [r2, #64]	; 0x40
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_I2C_MspInit+0x88>)
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004578:	bf00      	nop
 800457a:	3728      	adds	r7, #40	; 0x28
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40005400 	.word	0x40005400
 8004584:	40023800 	.word	0x40023800
 8004588:	40020400 	.word	0x40020400

0800458c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004594:	f107 0314 	add.w	r3, r7, #20
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_SPI_MspInit+0x84>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d12c      	bne.n	8004608 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	4b18      	ldr	r3, [pc, #96]	; (8004614 <HAL_SPI_MspInit+0x88>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	4a17      	ldr	r2, [pc, #92]	; (8004614 <HAL_SPI_MspInit+0x88>)
 80045b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045bc:	6413      	str	r3, [r2, #64]	; 0x40
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <HAL_SPI_MspInit+0x88>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_SPI_MspInit+0x88>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a10      	ldr	r2, [pc, #64]	; (8004614 <HAL_SPI_MspInit+0x88>)
 80045d4:	f043 0302 	orr.w	r3, r3, #2
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <HAL_SPI_MspInit+0x88>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80045e6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80045ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ec:	2302      	movs	r3, #2
 80045ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f4:	2303      	movs	r3, #3
 80045f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045f8:	2305      	movs	r3, #5
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fc:	f107 0314 	add.w	r3, r7, #20
 8004600:	4619      	mov	r1, r3
 8004602:	4805      	ldr	r0, [pc, #20]	; (8004618 <HAL_SPI_MspInit+0x8c>)
 8004604:	f003 f840 	bl	8007688 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004608:	bf00      	nop
 800460a:	3728      	adds	r7, #40	; 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40003800 	.word	0x40003800
 8004614:	40023800 	.word	0x40023800
 8004618:	40020400 	.word	0x40020400

0800461c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004624:	f107 031c 	add.w	r3, r7, #28
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a3e      	ldr	r2, [pc, #248]	; (8004734 <HAL_TIM_Encoder_MspInit+0x118>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d13d      	bne.n	80046ba <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	4a3c      	ldr	r2, [pc, #240]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	6453      	str	r3, [r2, #68]	; 0x44
 800464e:	4b3a      	ldr	r3, [pc, #232]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	4b36      	ldr	r3, [pc, #216]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	4a35      	ldr	r2, [pc, #212]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6313      	str	r3, [r2, #48]	; 0x30
 800466a:	4b33      	ldr	r3, [pc, #204]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8004676:	f44f 7340 	mov.w	r3, #768	; 0x300
 800467a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004684:	2300      	movs	r3, #0
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004688:	2301      	movs	r3, #1
 800468a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468c:	f107 031c 	add.w	r3, r7, #28
 8004690:	4619      	mov	r1, r3
 8004692:	482a      	ldr	r0, [pc, #168]	; (800473c <HAL_TIM_Encoder_MspInit+0x120>)
 8004694:	f002 fff8 	bl	8007688 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8004698:	2200      	movs	r2, #0
 800469a:	2101      	movs	r1, #1
 800469c:	2019      	movs	r0, #25
 800469e:	f002 f908 	bl	80068b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80046a2:	2019      	movs	r0, #25
 80046a4:	f002 f921 	bl	80068ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 80046a8:	2200      	movs	r2, #0
 80046aa:	2101      	movs	r1, #1
 80046ac:	201a      	movs	r0, #26
 80046ae:	f002 f900 	bl	80068b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80046b2:	201a      	movs	r0, #26
 80046b4:	f002 f919 	bl	80068ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80046b8:	e038      	b.n	800472c <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM3)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a20      	ldr	r2, [pc, #128]	; (8004740 <HAL_TIM_Encoder_MspInit+0x124>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d133      	bne.n	800472c <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046c4:	2300      	movs	r3, #0
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	4b1b      	ldr	r3, [pc, #108]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	4a1a      	ldr	r2, [pc, #104]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 80046ce:	f043 0302 	orr.w	r3, r3, #2
 80046d2:	6413      	str	r3, [r2, #64]	; 0x40
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	4b14      	ldr	r3, [pc, #80]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	4a13      	ldr	r2, [pc, #76]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 80046ea:	f043 0302 	orr.w	r3, r3, #2
 80046ee:	6313      	str	r3, [r2, #48]	; 0x30
 80046f0:	4b11      	ldr	r3, [pc, #68]	; (8004738 <HAL_TIM_Encoder_MspInit+0x11c>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 80046fc:	2330      	movs	r3, #48	; 0x30
 80046fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004700:	2302      	movs	r3, #2
 8004702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004708:	2300      	movs	r3, #0
 800470a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800470c:	2302      	movs	r3, #2
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004710:	f107 031c 	add.w	r3, r7, #28
 8004714:	4619      	mov	r1, r3
 8004716:	480b      	ldr	r0, [pc, #44]	; (8004744 <HAL_TIM_Encoder_MspInit+0x128>)
 8004718:	f002 ffb6 	bl	8007688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800471c:	2200      	movs	r2, #0
 800471e:	2101      	movs	r1, #1
 8004720:	201d      	movs	r0, #29
 8004722:	f002 f8c6 	bl	80068b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004726:	201d      	movs	r0, #29
 8004728:	f002 f8df 	bl	80068ea <HAL_NVIC_EnableIRQ>
}
 800472c:	bf00      	nop
 800472e:	3730      	adds	r7, #48	; 0x30
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40010000 	.word	0x40010000
 8004738:	40023800 	.word	0x40023800
 800473c:	40020000 	.word	0x40020000
 8004740:	40000400 	.word	0x40000400
 8004744:	40020400 	.word	0x40020400

08004748 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a0e      	ldr	r2, [pc, #56]	; (8004790 <HAL_TIM_PWM_MspInit+0x48>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d115      	bne.n	8004786 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <HAL_TIM_PWM_MspInit+0x4c>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4a0c      	ldr	r2, [pc, #48]	; (8004794 <HAL_TIM_PWM_MspInit+0x4c>)
 8004764:	f043 0304 	orr.w	r3, r3, #4
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_TIM_PWM_MspInit+0x4c>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004776:	2200      	movs	r2, #0
 8004778:	2101      	movs	r1, #1
 800477a:	201e      	movs	r0, #30
 800477c:	f002 f899 	bl	80068b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004780:	201e      	movs	r0, #30
 8004782:	f002 f8b2 	bl	80068ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40000800 	.word	0x40000800
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a42      	ldr	r2, [pc, #264]	; (80048b0 <HAL_TIM_Base_MspInit+0x118>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d116      	bne.n	80047d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	4b41      	ldr	r3, [pc, #260]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	4a40      	ldr	r2, [pc, #256]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 80047b4:	f043 0310 	orr.w	r3, r3, #16
 80047b8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ba:	4b3e      	ldr	r3, [pc, #248]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f003 0310 	and.w	r3, r3, #16
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80047c6:	2200      	movs	r2, #0
 80047c8:	2101      	movs	r1, #1
 80047ca:	2036      	movs	r0, #54	; 0x36
 80047cc:	f002 f871 	bl	80068b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80047d0:	2036      	movs	r0, #54	; 0x36
 80047d2:	f002 f88a 	bl	80068ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80047d6:	e066      	b.n	80048a6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a36      	ldr	r2, [pc, #216]	; (80048b8 <HAL_TIM_Base_MspInit+0x120>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d116      	bne.n	8004810 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80047e2:	2300      	movs	r3, #0
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	4b33      	ldr	r3, [pc, #204]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	4a32      	ldr	r2, [pc, #200]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 80047ec:	f043 0320 	orr.w	r3, r3, #32
 80047f0:	6413      	str	r3, [r2, #64]	; 0x40
 80047f2:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80047fe:	2200      	movs	r2, #0
 8004800:	2101      	movs	r1, #1
 8004802:	2037      	movs	r0, #55	; 0x37
 8004804:	f002 f855 	bl	80068b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004808:	2037      	movs	r0, #55	; 0x37
 800480a:	f002 f86e 	bl	80068ea <HAL_NVIC_EnableIRQ>
}
 800480e:	e04a      	b.n	80048a6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a29      	ldr	r2, [pc, #164]	; (80048bc <HAL_TIM_Base_MspInit+0x124>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d116      	bne.n	8004848 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
 800481e:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	4a24      	ldr	r2, [pc, #144]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 8004824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004828:	6453      	str	r3, [r2, #68]	; 0x44
 800482a:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8004836:	2200      	movs	r2, #0
 8004838:	2101      	movs	r1, #1
 800483a:	2019      	movs	r0, #25
 800483c:	f002 f839 	bl	80068b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004840:	2019      	movs	r0, #25
 8004842:	f002 f852 	bl	80068ea <HAL_NVIC_EnableIRQ>
}
 8004846:	e02e      	b.n	80048a6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <HAL_TIM_Base_MspInit+0x128>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d116      	bne.n	8004880 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 800485c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004860:	6453      	str	r3, [r2, #68]	; 0x44
 8004862:	4b14      	ldr	r3, [pc, #80]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 800486e:	2200      	movs	r2, #0
 8004870:	2101      	movs	r1, #1
 8004872:	201a      	movs	r0, #26
 8004874:	f002 f81d 	bl	80068b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004878:	201a      	movs	r0, #26
 800487a:	f002 f836 	bl	80068ea <HAL_NVIC_EnableIRQ>
}
 800487e:	e012      	b.n	80048a6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0f      	ldr	r2, [pc, #60]	; (80048c4 <HAL_TIM_Base_MspInit+0x12c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d10d      	bne.n	80048a6 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 8004894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004898:	6413      	str	r3, [r2, #64]	; 0x40
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_TIM_Base_MspInit+0x11c>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
}
 80048a6:	bf00      	nop
 80048a8:	3720      	adds	r7, #32
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40001000 	.word	0x40001000
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40001400 	.word	0x40001400
 80048bc:	40014400 	.word	0x40014400
 80048c0:	40014800 	.word	0x40014800
 80048c4:	40002000 	.word	0x40002000

080048c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a12      	ldr	r2, [pc, #72]	; (8004930 <HAL_TIM_MspPostInit+0x68>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d11d      	bne.n	8004926 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <HAL_TIM_MspPostInit+0x6c>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	4a10      	ldr	r2, [pc, #64]	; (8004934 <HAL_TIM_MspPostInit+0x6c>)
 80048f4:	f043 0302 	orr.w	r3, r3, #2
 80048f8:	6313      	str	r3, [r2, #48]	; 0x30
 80048fa:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <HAL_TIM_MspPostInit+0x6c>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8004906:	23c0      	movs	r3, #192	; 0xc0
 8004908:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800490a:	2302      	movs	r3, #2
 800490c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004916:	2302      	movs	r3, #2
 8004918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800491a:	f107 030c 	add.w	r3, r7, #12
 800491e:	4619      	mov	r1, r3
 8004920:	4805      	ldr	r0, [pc, #20]	; (8004938 <HAL_TIM_MspPostInit+0x70>)
 8004922:	f002 feb1 	bl	8007688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004926:	bf00      	nop
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	40000800 	.word	0x40000800
 8004934:	40023800 	.word	0x40023800
 8004938:	40020400 	.word	0x40020400

0800493c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004944:	f107 0314 	add.w	r3, r7, #20
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	60da      	str	r2, [r3, #12]
 8004952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <HAL_UART_MspInit+0x84>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d12b      	bne.n	80049b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <HAL_UART_MspInit+0x88>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004966:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <HAL_UART_MspInit+0x88>)
 8004968:	f043 0320 	orr.w	r3, r3, #32
 800496c:	6453      	str	r3, [r2, #68]	; 0x44
 800496e:	4b15      	ldr	r3, [pc, #84]	; (80049c4 <HAL_UART_MspInit+0x88>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_UART_MspInit+0x88>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4a10      	ldr	r2, [pc, #64]	; (80049c4 <HAL_UART_MspInit+0x88>)
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	6313      	str	r3, [r2, #48]	; 0x30
 800498a:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <HAL_UART_MspInit+0x88>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004996:	23c0      	movs	r3, #192	; 0xc0
 8004998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499a:	2302      	movs	r3, #2
 800499c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a2:	2303      	movs	r3, #3
 80049a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80049a6:	2308      	movs	r3, #8
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049aa:	f107 0314 	add.w	r3, r7, #20
 80049ae:	4619      	mov	r1, r3
 80049b0:	4805      	ldr	r0, [pc, #20]	; (80049c8 <HAL_UART_MspInit+0x8c>)
 80049b2:	f002 fe69 	bl	8007688 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80049b6:	bf00      	nop
 80049b8:	3728      	adds	r7, #40	; 0x28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40011400 	.word	0x40011400
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020800 	.word	0x40020800

080049cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049d0:	e7fe      	b.n	80049d0 <NMI_Handler+0x4>

080049d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049d6:	e7fe      	b.n	80049d6 <HardFault_Handler+0x4>

080049d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049dc:	e7fe      	b.n	80049dc <MemManage_Handler+0x4>

080049de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049de:	b480      	push	{r7}
 80049e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049e2:	e7fe      	b.n	80049e2 <BusFault_Handler+0x4>

080049e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049e8:	e7fe      	b.n	80049e8 <UsageFault_Handler+0x4>

080049ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049ea:	b480      	push	{r7}
 80049ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049fc:	bf00      	nop
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a06:	b480      	push	{r7}
 8004a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a0a:	bf00      	nop
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a18:	f001 f9cc 	bl	8005db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a1c:	bf00      	nop
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a24:	4803      	ldr	r0, [pc, #12]	; (8004a34 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004a26:	f004 ff82 	bl	800992e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004a2a:	4803      	ldr	r0, [pc, #12]	; (8004a38 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004a2c:	f004 ff7f 	bl	800992e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a30:	bf00      	nop
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000a10 	.word	0x20000a10
 8004a38:	20000848 	.word	0x20000848

08004a3c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a40:	4803      	ldr	r0, [pc, #12]	; (8004a50 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004a42:	f004 ff74 	bl	800992e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004a46:	4803      	ldr	r0, [pc, #12]	; (8004a54 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004a48:	f004 ff71 	bl	800992e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004a4c:	bf00      	nop
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000a10 	.word	0x20000a10
 8004a54:	20000920 	.word	0x20000920

08004a58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a5c:	4802      	ldr	r0, [pc, #8]	; (8004a68 <TIM3_IRQHandler+0x10>)
 8004a5e:	f004 ff66 	bl	800992e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000890 	.word	0x20000890

08004a6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004a70:	4802      	ldr	r0, [pc, #8]	; (8004a7c <TIM4_IRQHandler+0x10>)
 8004a72:	f004 ff5c 	bl	800992e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	200007ac 	.word	0x200007ac

08004a80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a84:	4802      	ldr	r0, [pc, #8]	; (8004a90 <TIM6_DAC_IRQHandler+0x10>)
 8004a86:	f004 ff52 	bl	800992e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	200009c8 	.word	0x200009c8

08004a94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004a98:	4802      	ldr	r0, [pc, #8]	; (8004aa4 <TIM7_IRQHandler+0x10>)
 8004a9a:	f004 ff48 	bl	800992e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000ae4 	.word	0x20000ae4

08004aa8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004aac:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <DMA2_Stream0_IRQHandler+0x10>)
 8004aae:	f002 f8ad 	bl	8006c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000968 	.word	0x20000968

08004abc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e00a      	b.n	8004ae4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ace:	f3af 8000 	nop.w
 8004ad2:	4601      	mov	r1, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	60ba      	str	r2, [r7, #8]
 8004ada:	b2ca      	uxtb	r2, r1
 8004adc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	dbf0      	blt.n	8004ace <_read+0x12>
	}

return len;
 8004aec:	687b      	ldr	r3, [r7, #4]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e009      	b.n	8004b1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	60ba      	str	r2, [r7, #8]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff f99b 	bl	8003e4c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	dbf1      	blt.n	8004b08 <_write+0x12>
	}
	return len;
 8004b24:	687b      	ldr	r3, [r7, #4]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <_close>:

int _close(int file)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
	return -1;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b56:	605a      	str	r2, [r3, #4]
	return 0;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <_isatty>:

int _isatty(int file)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
	return 1;
 8004b6e:	2301      	movs	r3, #1
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
	return 0;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ba0:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <_sbrk+0x5c>)
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <_sbrk+0x60>)
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <_sbrk+0x64>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d102      	bne.n	8004bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bb4:	4b11      	ldr	r3, [pc, #68]	; (8004bfc <_sbrk+0x64>)
 8004bb6:	4a12      	ldr	r2, [pc, #72]	; (8004c00 <_sbrk+0x68>)
 8004bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <_sbrk+0x64>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d207      	bcs.n	8004bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bc8:	f005 fed4 	bl	800a974 <__errno>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	230c      	movs	r3, #12
 8004bd0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bd6:	e009      	b.n	8004bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bd8:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <_sbrk+0x64>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bde:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <_sbrk+0x64>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4413      	add	r3, r2
 8004be6:	4a05      	ldr	r2, [pc, #20]	; (8004bfc <_sbrk+0x64>)
 8004be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bea:	68fb      	ldr	r3, [r7, #12]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20020000 	.word	0x20020000
 8004bf8:	00000400 	.word	0x00000400
 8004bfc:	20000200 	.word	0x20000200
 8004c00:	20001c38 	.word	0x20001c38

08004c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c08:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <SystemInit+0x28>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	4a07      	ldr	r2, [pc, #28]	; (8004c2c <SystemInit+0x28>)
 8004c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <SystemInit+0x28>)
 8004c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c1e:	609a      	str	r2, [r3, #8]
#endif
}
 8004c20:	bf00      	nop
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <tim10_init>:
float samplingtime_s;
uint32_t __debug_tim10_count__, __debug_tim10_count_2__;

/* only use in main.c */
void tim10_init()
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
	samplingtime_s = TIM10_TIME_MS / (float) 1000;
 8004c34:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <tim10_init+0x44>)
 8004c36:	4a10      	ldr	r2, [pc, #64]	; (8004c78 <tim10_init+0x48>)
 8004c38:	601a      	str	r2, [r3, #0]
	samplingtime_ms = TIM10_TIME_MS;
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <tim10_init+0x4c>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
	length_init(samplingtime_ms);
 8004c40:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <tim10_init+0x4c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fd ffea 	bl	8002c20 <length_init>
	section_length_init(samplingtime_ms);
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <tim10_init+0x4c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff f93e 	bl	8003ed4 <section_length_init>
	course_init(samplingtime_ms);
 8004c58:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <tim10_init+0x4c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fd f874 	bl	8001d4c <course_init>
	velotrace_init(1);
 8004c64:	2001      	movs	r0, #1
 8004c66:	f000 fd71 	bl	800574c <velotrace_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8004c6a:	4805      	ldr	r0, [pc, #20]	; (8004c80 <tim10_init+0x50>)
 8004c6c:	f004 fae0 	bl	8009230 <HAL_TIM_Base_Stop_IT>
}
 8004c70:	bf00      	nop
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20001b3c 	.word	0x20001b3c
 8004c78:	3a83126f 	.word	0x3a83126f
 8004c7c:	20001b98 	.word	0x20001b98
 8004c80:	20000848 	.word	0x20000848

08004c84 <tim10_start>:

void tim10_start()
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
	tim10_left = 0;
 8004c88:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <tim10_start+0x48>)
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
	tim10_right = 0;
 8004c90:	4b0f      	ldr	r3, [pc, #60]	; (8004cd0 <tim10_start+0x4c>)
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
	__debug_tim10_count__ = 0;
 8004c98:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <tim10_start+0x50>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
	__debug_tim10_count_2__ = 0;
 8004c9e:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <tim10_start+0x54>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
	course_start();
 8004ca4:	f7fd f866 	bl	8001d74 <course_start>
	length_start();
 8004ca8:	f7fd ffce 	bl	8002c48 <length_start>
	section_length_start();
 8004cac:	f7ff f91f 	bl	8003eee <section_length_start>
	velotrace_start();
 8004cb0:	f000 fd62 	bl	8005778 <velotrace_start>
	slow_start(velotrace_read_values());
 8004cb4:	f000 ff12 	bl	8005adc <velotrace_read_values>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff faec 	bl	8004298 <slow_start>
	HAL_TIM_Base_Start_IT(&htim10);
 8004cc0:	4806      	ldr	r0, [pc, #24]	; (8004cdc <tim10_start+0x58>)
 8004cc2:	f004 fa45 	bl	8009150 <HAL_TIM_Base_Start_IT>
}
 8004cc6:	bf00      	nop
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20001b90 	.word	0x20001b90
 8004cd0:	20001b9c 	.word	0x20001b9c
 8004cd4:	20001b84 	.word	0x20001b84
 8004cd8:	20001b8c 	.word	0x20001b8c
 8004cdc:	20000848 	.word	0x20000848

08004ce0 <tim10_stop>:

void tim10_stop()
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 8004ce4:	4806      	ldr	r0, [pc, #24]	; (8004d00 <tim10_stop+0x20>)
 8004ce6:	f004 faa3 	bl	8009230 <HAL_TIM_Base_Stop_IT>
	velotrace_stop();
 8004cea:	f000 fdeb 	bl	80058c4 <velotrace_stop>
	section_length_stop();
 8004cee:	f7ff f908 	bl	8003f02 <section_length_stop>
	length_stop();
 8004cf2:	f7fd ffbb 	bl	8002c6c <length_stop>
	course_stop();
 8004cf6:	f7fd f871 	bl	8001ddc <course_stop>
}
 8004cfa:	bf00      	nop
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000848 	.word	0x20000848

08004d04 <tim10_main>:
	section_length_fin();
	HAL_TIM_Base_Stop_IT(&htim10);
}

void tim10_main()
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
	PlayMode rrpm;
	//! 角度をアップデートし続ける
	course_update_section_degree();
 8004d0a:	f7fd f889 	bl	8001e20 <course_update_section_degree>
	//! 長さをアップデートし続ける
	length_update();
 8004d0e:	f7fe f839 	bl	8002d84 <length_update>
	//! 区間長をアップデートし続ける
	section_length_update();
 8004d12:	f7ff f971 	bl	8003ff8 <section_length_update>
	//! 速度制御の指令値をアップデートし続ける
	tim10_update_values();
 8004d16:	f000 f81b 	bl	8004d50 <tim10_update_values>
	rrpm = rotary_read_playmode();
 8004d1a:	f7fc fc05 	bl	8001528 <rotary_read_playmode>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
	__debug_tim10_count_2__ = __debug_tim10_count_2__ + 1;
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <tim10_main+0x48>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3301      	adds	r3, #1
 8004d28:	4a08      	ldr	r2, [pc, #32]	; (8004d4c <tim10_main+0x48>)
 8004d2a:	6013      	str	r3, [r2, #0]
			course_state_function();
			__debug_tim10_count__ = __debug_tim10_count__ + 1;
		}
	}
#endif
	if(rotary_read_playmode() == velotrace_tuning_2)
 8004d2c:	f7fc fbfc 	bl	8001528 <rotary_read_playmode>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b07      	cmp	r3, #7
 8004d34:	d106      	bne.n	8004d44 <tim10_main+0x40>
	{
		if(virtual_marker_read_markerstate() == straight)
 8004d36:	f000 ffa1 	bl	8005c7c <virtual_marker_read_markerstate>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <tim10_main+0x40>
		{
			velotrace_gain_tuning();
 8004d40:	f000 ff4c 	bl	8005bdc <velotrace_gain_tuning>
		}
	}
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20001b8c 	.word	0x20001b8c

08004d50 <tim10_update_values>:

//! tim10_main でのみ呼び出されるべき関数
//! 速度制御の指令値を更新する
void tim10_update_values()
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
	{
		slow_main();
	}
#endif

	tim10_left  = velotrace_solve(velocity_read());
 8004d54:	f7fd ffe0 	bl	8002d18 <velocity_read>
 8004d58:	eef0 7a40 	vmov.f32	s15, s0
 8004d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d60:	f000 fec6 	bl	8005af0 <velotrace_solve>
 8004d64:	eef0 7a40 	vmov.f32	s15, s0
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <tim10_update_values+0x2c>)
 8004d6a:	edc3 7a00 	vstr	s15, [r3]
	tim10_right = tim10_left;
 8004d6e:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <tim10_update_values+0x2c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a03      	ldr	r2, [pc, #12]	; (8004d80 <tim10_update_values+0x30>)
 8004d74:	6013      	str	r3, [r2, #0]
}
 8004d76:	bf00      	nop
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20001b90 	.word	0x20001b90
 8004d80:	20001b9c 	.word	0x20001b9c

08004d84 <tim10_read_left>:

float tim10_read_left()
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
	return tim10_left;
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <tim10_read_left+0x18>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	ee07 3a90 	vmov	s15, r3
}
 8004d90:	eeb0 0a67 	vmov.f32	s0, s15
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	20001b90 	.word	0x20001b90

08004da0 <tim10_read_right>:

float tim10_read_right()
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
	return tim10_right;
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <tim10_read_right+0x18>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	ee07 3a90 	vmov	s15, r3
}
 8004dac:	eeb0 0a67 	vmov.f32	s0, s15
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	20001b9c 	.word	0x20001b9c

08004dbc <tim10_d_print>:

void tim10_d_print()
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
#if D_TIM10
	// printf("tim10_left = %f, tim10_right = %f\r\n", tim10_left, tim10_right);
	printf("__debug_tim10_count  __ = %16ld\r\n__debug_tim10_count_2__ = %16ld\r\n", __debug_tim10_count__, __debug_tim10_count_2__);
#endif
	length_d_print();
 8004dc0:	f7fe f82e 	bl	8002e20 <length_d_print>
	course_d_print();
 8004dc4:	f7fd f976 	bl	80020b4 <course_d_print>
	velotrace_print_values();
 8004dc8:	f000 ff00 	bl	8005bcc <velotrace_print_values>
	section_length_d_print();
 8004dcc:	f7ff f938 	bl	8004040 <section_length_d_print>
	slow_print_default_pid();
 8004dd0:	f7ff fab0 	bl	8004334 <slow_print_default_pid>
}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
    switch_init();
 8004ddc:	f7fc fca4 	bl	8001728 <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8004de0:	4803      	ldr	r0, [pc, #12]	; (8004df0 <tim11_init+0x18>)
 8004de2:	f004 f9b5 	bl	8009150 <HAL_TIM_Base_Start_IT>
    rotary_init();
 8004de6:	f7fc fb8b 	bl	8001500 <rotary_init>
}
 8004dea:	bf00      	nop
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000920 	.word	0x20000920

08004df4 <tim11_main>:

void tim11_main()
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
    //! 1ms
    time_update_ms(1);
 8004df8:	2001      	movs	r0, #1
 8004dfa:	f000 fa65 	bl	80052c8 <time_update_ms>
    switch_enter();
 8004dfe:	f7fc fce2 	bl	80017c6 <switch_enter>
    rotary_set_value();
 8004e02:	f7fc fb9d 	bl	8001540 <rotary_set_value>
}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <tim6_init>:

SideSensorState tim6_markerstate_before;
uint8_t debug_num;

void tim6_init()
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
    motor_init();
 8004e10:	f7fe ff4e 	bl	8003cb0 <motor_init>
    virtual_marker_init();
 8004e14:	f000 ff02 	bl	8005c1c <virtual_marker_init>
    HAL_TIM_Base_Stop_IT(&htim6);
 8004e18:	4803      	ldr	r0, [pc, #12]	; (8004e28 <tim6_init+0x1c>)
 8004e1a:	f004 fa09 	bl	8009230 <HAL_TIM_Base_Stop_IT>
    debug_num = 0;
 8004e1e:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <tim6_init+0x20>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]
}
 8004e24:	bf00      	nop
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	200009c8 	.word	0x200009c8
 8004e2c:	20001ba1 	.word	0x20001ba1

08004e30 <tim6_start>:

void tim6_start()
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
#if D_TIM6
    leftmotor = 0;
    rightmotor = 0;
#endif
    virtual_marker_start();
 8004e34:	f000 fef8 	bl	8005c28 <virtual_marker_start>
    fixed_section_start();
 8004e38:	f7fd fd72 	bl	8002920 <fixed_section_start>
    motor_start();
 8004e3c:	f7fe ff40 	bl	8003cc0 <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8004e40:	4805      	ldr	r0, [pc, #20]	; (8004e58 <tim6_start+0x28>)
 8004e42:	f004 f985 	bl	8009150 <HAL_TIM_Base_Start_IT>
    debug_num += 0b1;
 8004e46:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <tim6_start+0x2c>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <tim6_start+0x2c>)
 8004e50:	701a      	strb	r2, [r3, #0]
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200009c8 	.word	0x200009c8
 8004e5c:	20001ba1 	.word	0x20001ba1

08004e60 <tim6_stop>:

void tim6_stop()
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
    motor_stop();
 8004e64:	f7fe ff3e 	bl	8003ce4 <motor_stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 8004e68:	4807      	ldr	r0, [pc, #28]	; (8004e88 <tim6_stop+0x28>)
 8004e6a:	f004 f9e1 	bl	8009230 <HAL_TIM_Base_Stop_IT>
    course_stop();
 8004e6e:	f7fc ffb5 	bl	8001ddc <course_stop>
    virtual_marker_stop();
 8004e72:	f000 fee9 	bl	8005c48 <virtual_marker_stop>
    debug_num += 0b10;
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <tim6_stop+0x2c>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <tim6_stop+0x2c>)
 8004e80:	701a      	strb	r2, [r3, #0]
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	200009c8 	.word	0x200009c8
 8004e8c:	20001ba1 	.word	0x20001ba1

08004e90 <tim6_main>:

void tim6_main()
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	ed2d 8b02 	vpush	{d8}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
    #endif
    SideSensorState markerstate;
    SideSensorState markerstate_volatile;
    PlayMode playmode;

    playmode = rotary_read_playmode();
 8004e9a:	f7fc fb45 	bl	8001528 <rotary_read_playmode>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]

    //! コース状態の把握
    //! ここ以降 virtual_marker_read_markerstate() / virtual_marker_read_markerstate_volatile() で読みだせる
    virtual_marker_main();
 8004ea2:	f000 fec9 	bl	8005c38 <virtual_marker_main>
    //! 格納されるのは直前のマーカの状態であり、区間中はリセットされないことに注意すべし！
    markerstate = virtual_marker_read_markerstate();
 8004ea6:	f000 fee9 	bl	8005c7c <virtual_marker_read_markerstate>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	71bb      	strb	r3, [r7, #6]
    //! 格納されるのは現在マーカを読んだか読んでないか、次に virtual_marker_main() が来た時に変化することに注意
    markerstate_volatile = virtual_marker_read_markerstate_volatile();
 8004eae:	f000 fef1 	bl	8005c94 <virtual_marker_read_markerstate_volatile>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	717b      	strb	r3, [r7, #5]

    debug_num = 0;
 8004eb6:	4b4f      	ldr	r3, [pc, #316]	; (8004ff4 <tim6_main+0x164>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
    debug_num += 0b100;
 8004ebc:	4b4d      	ldr	r3, [pc, #308]	; (8004ff4 <tim6_main+0x164>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	4b4b      	ldr	r3, [pc, #300]	; (8004ff4 <tim6_main+0x164>)
 8004ec6:	701a      	strb	r2, [r3, #0]
    if(motor_read_enable() && playmode != motor_free)
 8004ec8:	f7fe ff34 	bl	8003d34 <motor_read_enable>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d05e      	beq.n	8004f90 <tim6_main+0x100>
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d05b      	beq.n	8004f90 <tim6_main+0x100>
    {
        #if !(TRACER_TUNING || VELOTRACE_TUNING)
        switch(playmode)
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d002      	beq.n	8004ee4 <tim6_main+0x54>
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d01b      	beq.n	8004f1a <tim6_main+0x8a>
 8004ee2:	e035      	b.n	8004f50 <tim6_main+0xc0>
        {
            case tracer_tuning:
                leftmotor   = 0 + tim7_read_left();
 8004ee4:	f000 f9ac 	bl	8005240 <tim7_read_left>
 8004ee8:	eeb0 7a40 	vmov.f32	s14, s0
 8004eec:	eddf 7a42 	vldr	s15, [pc, #264]	; 8004ff8 <tim6_main+0x168>
 8004ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef4:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = 0 + tim7_read_right();
 8004ef8:	f000 f9b0 	bl	800525c <tim7_read_right>
 8004efc:	eeb0 7a40 	vmov.f32	s14, s0
 8004f00:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8004ff8 <tim6_main+0x168>
 8004f04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f08:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b1000;
 8004f0c:	4b39      	ldr	r3, [pc, #228]	; (8004ff4 <tim6_main+0x164>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	3308      	adds	r3, #8
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	4b37      	ldr	r3, [pc, #220]	; (8004ff4 <tim6_main+0x164>)
 8004f16:	701a      	strb	r2, [r3, #0]
                break;
 8004f18:	e039      	b.n	8004f8e <tim6_main+0xfe>
            case velotrace_tuning:
                leftmotor   = tim10_read_left() + 0;
 8004f1a:	f7ff ff33 	bl	8004d84 <tim10_read_left>
 8004f1e:	eeb0 7a40 	vmov.f32	s14, s0
 8004f22:	eddf 7a35 	vldr	s15, [pc, #212]	; 8004ff8 <tim6_main+0x168>
 8004f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f2a:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + 0;
 8004f2e:	f7ff ff37 	bl	8004da0 <tim10_read_right>
 8004f32:	eeb0 7a40 	vmov.f32	s14, s0
 8004f36:	eddf 7a30 	vldr	s15, [pc, #192]	; 8004ff8 <tim6_main+0x168>
 8004f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f3e:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b10000;
 8004f42:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <tim6_main+0x164>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	3310      	adds	r3, #16
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ff4 <tim6_main+0x164>)
 8004f4c:	701a      	strb	r2, [r3, #0]
                break;
 8004f4e:	e01e      	b.n	8004f8e <tim6_main+0xfe>
            default:
                leftmotor   = tim10_read_left() + tim7_read_left();
 8004f50:	f7ff ff18 	bl	8004d84 <tim10_read_left>
 8004f54:	eeb0 8a40 	vmov.f32	s16, s0
 8004f58:	f000 f972 	bl	8005240 <tim7_read_left>
 8004f5c:	eef0 7a40 	vmov.f32	s15, s0
 8004f60:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004f64:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + tim7_read_right();
 8004f68:	f7ff ff1a 	bl	8004da0 <tim10_read_right>
 8004f6c:	eeb0 8a40 	vmov.f32	s16, s0
 8004f70:	f000 f974 	bl	800525c <tim7_read_right>
 8004f74:	eef0 7a40 	vmov.f32	s15, s0
 8004f78:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004f7c:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b100000;
 8004f80:	4b1c      	ldr	r3, [pc, #112]	; (8004ff4 <tim6_main+0x164>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	3320      	adds	r3, #32
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <tim6_main+0x164>)
 8004f8a:	701a      	strb	r2, [r3, #0]
                break;
 8004f8c:	bf00      	nop
        #if VELOTRACE_TUNING && TRACER_TUNING
        leftmotor  =  tim10_read_left() +  tim7_read_left();
        rightmotor = tim10_read_right() + tim7_read_right();
        #endif
		#endif	/* !(TRACER_TUNING || VELOTRACE_TUNING) */
    }
 8004f8e:	e00b      	b.n	8004fa8 <tim6_main+0x118>
    else
    {
        leftmotor = 0;
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
        rightmotor = 0;
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	60bb      	str	r3, [r7, #8]
        debug_num += 0b1000000;
 8004f9c:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <tim6_main+0x164>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	3340      	adds	r3, #64	; 0x40
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	4b13      	ldr	r3, [pc, #76]	; (8004ff4 <tim6_main+0x164>)
 8004fa6:	701a      	strb	r2, [r3, #0]
            }
        }
    }
#else
    //! 距離が COURSE_SAMPLING_LENGTH になっていたら course_state_function() を実行する関数
    fixed_section_main();
 8004fa8:	f7fd fcc2 	bl	8002930 <fixed_section_main>
#endif

    switch(markerstate)
 8004fac:	79bb      	ldrb	r3, [r7, #6]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d10a      	bne.n	8004fc8 <tim6_main+0x138>
    {
        case stop:
            switch_reset_enter();
 8004fb2:	f7fc fbad 	bl	8001710 <switch_reset_enter>
            tim6_stop();
 8004fb6:	f7ff ff53 	bl	8004e60 <tim6_stop>
            motor_set(0, 0);
 8004fba:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8004ff8 <tim6_main+0x168>
 8004fbe:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8004ff8 <tim6_main+0x168>
 8004fc2:	f7fe fec3 	bl	8003d4c <motor_set>
            break;
 8004fc6:	e00c      	b.n	8004fe2 <tim6_main+0x152>
        default:
            debug_num += 0b10000000;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <tim6_main+0x164>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	3b80      	subs	r3, #128	; 0x80
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <tim6_main+0x164>)
 8004fd2:	701a      	strb	r2, [r3, #0]
            motor_set(leftmotor, rightmotor);
 8004fd4:	edd7 0a02 	vldr	s1, [r7, #8]
 8004fd8:	ed97 0a03 	vldr	s0, [r7, #12]
 8004fdc:	f7fe feb6 	bl	8003d4c <motor_set>
            break;
 8004fe0:	bf00      	nop
    }

    tim6_markerstate_before = markerstate;
 8004fe2:	4a06      	ldr	r2, [pc, #24]	; (8004ffc <tim6_main+0x16c>)
 8004fe4:	79bb      	ldrb	r3, [r7, #6]
 8004fe6:	7013      	strb	r3, [r2, #0]
}
 8004fe8:	bf00      	nop
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	ecbd 8b02 	vpop	{d8}
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20001ba1 	.word	0x20001ba1
 8004ff8:	00000000 	.word	0x00000000
 8004ffc:	20001ba0 	.word	0x20001ba0

08005000 <tim6_d_print>:

void tim6_d_print()
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
    printf("tim6.c > debug_num = ");
    print_bin(debug_num);
    printf("\r\n");
    printf("tim6.c > tim6_d_print() > motor_enable = %1d, leftmotor = %5.3f, rightmotor = %5.3f\r\n", motor_read_enable(), leftmotor, rightmotor); 
    #endif
    virtual_marker_d_print();
 8005004:	f000 fe52 	bl	8005cac <virtual_marker_d_print>
}
 8005008:	bf00      	nop
 800500a:	bd80      	pop	{r7, pc}

0800500c <tim7_init>:
#if D_TIM7
unsigned char i_count, i_start;
#endif

void tim7_init()
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
    /* init */
    #if D_TIM7
    printf("tim7.c > tim7_init() > ");
    #endif
    analog_init();
 8005010:	f7fc fd4a 	bl	8001aa8 <analog_init>
    tracer_init(TIM7_TIME_MS);
 8005014:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005018:	f000 f99a 	bl	8005350 <tracer_init>
    HAL_TIM_Base_Stop_IT(&htim7);
 800501c:	4802      	ldr	r0, [pc, #8]	; (8005028 <tim7_init+0x1c>)
 800501e:	f004 f907 	bl	8009230 <HAL_TIM_Base_Stop_IT>
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000ae4 	.word	0x20000ae4

0800502c <tim7_start>:

void tim7_start()
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
    /* start */
    #if D_TIM7
    printf("tim7.c > tim7_start() > ");
    #endif
    tim7_set_emergency(0);
 8005030:	2000      	movs	r0, #0
 8005032:	f000 f8f5 	bl	8005220 <tim7_set_emergency>
    tim7_left = 0;
 8005036:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <tim7_start+0x3c>)
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	601a      	str	r2, [r3, #0]
    tim7_right = 0;
 800503e:	4b0b      	ldr	r3, [pc, #44]	; (800506c <tim7_start+0x40>)
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
    analog_set_from_flash(analogdata.min, analogdata.max);
 8005046:	490a      	ldr	r1, [pc, #40]	; (8005070 <tim7_start+0x44>)
 8005048:	480a      	ldr	r0, [pc, #40]	; (8005074 <tim7_start+0x48>)
 800504a:	f7fc fc97 	bl	800197c <analog_set_from_flash>
    analog_set_analogmode(analogmode_short);
 800504e:	200c      	movs	r0, #12
 8005050:	f7fc fcce 	bl	80019f0 <analog_set_analogmode>

    analog_start();
 8005054:	f7fc fd3a 	bl	8001acc <analog_start>
    tracer_start();
 8005058:	f000 f996 	bl	8005388 <tracer_start>
    HAL_TIM_Base_Start_IT(&htim7);
 800505c:	4806      	ldr	r0, [pc, #24]	; (8005078 <tim7_start+0x4c>)
 800505e:	f004 f877 	bl	8009150 <HAL_TIM_Base_Start_IT>
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20001bac 	.word	0x20001bac
 800506c:	20001ba4 	.word	0x20001ba4
 8005070:	200014bc 	.word	0x200014bc
 8005074:	2000149c 	.word	0x2000149c
 8005078:	20000ae4 	.word	0x20000ae4

0800507c <tim7_stop>:

void tim7_stop()
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
    /* stop */
    #if D_TIM7
    printf("tim7.c > tim7_stop() > ");
    #endif
    HAL_TIM_Base_Stop_IT(&htim7);
 8005080:	4804      	ldr	r0, [pc, #16]	; (8005094 <tim7_stop+0x18>)
 8005082:	f004 f8d5 	bl	8009230 <HAL_TIM_Base_Stop_IT>
    tracer_stop();
 8005086:	f000 f9c7 	bl	8005418 <tracer_stop>
    analog_stop();
 800508a:	f7fc fd25 	bl	8001ad8 <analog_stop>
}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000ae4 	.word	0x20000ae4

08005098 <tim7_main>:

void tim7_main()
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
    /* main */
    int direction;

    direction = tim7_read_direction();
 800509e:	f000 f819 	bl	80050d4 <tim7_read_direction>
 80050a2:	6078      	str	r0, [r7, #4]
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("direction = %5d\r\n", direction);
    #endif

    tim7_left   =   tracer_solve(direction);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fad1 	bl	800564c <tracer_solve>
 80050aa:	eef0 7a40 	vmov.f32	s15, s0
 80050ae:	4b07      	ldr	r3, [pc, #28]	; (80050cc <tim7_main+0x34>)
 80050b0:	edc3 7a00 	vstr	s15, [r3]
    tim7_right  = - tim7_left;
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <tim7_main+0x34>)
 80050b6:	edd3 7a00 	vldr	s15, [r3]
 80050ba:	eef1 7a67 	vneg.f32	s15, s15
 80050be:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <tim7_main+0x38>)
 80050c0:	edc3 7a00 	vstr	s15, [r3]

    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("tim7_left = %7.2f, tim7_right = %7.2f\r\n", tim7_left, tim7_right);
    #endif
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20001bac 	.word	0x20001bac
 80050d0:	20001ba4 	.word	0x20001ba4

080050d4 <tim7_read_direction>:

/* this method is private */
int tim7_read_direction()
{
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
    uint16_t short_middle;
	#if !D_TIM7
    unsigned char i_count, i_start;
	#endif

    analogl = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	81fb      	strh	r3, [r7, #14]
    analogr = 0;
 80050de:	2300      	movs	r3, #0
 80050e0:	81bb      	strh	r3, [r7, #12]

    switch(analog_read_analogmode())
 80050e2:	f7fc fc95 	bl	8001a10 <analog_read_analogmode>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d834      	bhi.n	8005156 <tim7_read_direction+0x82>
 80050ec:	a201      	add	r2, pc, #4	; (adr r2, 80050f4 <tim7_read_direction+0x20>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	08005157 	.word	0x08005157
 80050f8:	08005157 	.word	0x08005157
 80050fc:	08005157 	.word	0x08005157
 8005100:	08005157 	.word	0x08005157
 8005104:	08005143 	.word	0x08005143
 8005108:	08005157 	.word	0x08005157
 800510c:	08005157 	.word	0x08005157
 8005110:	08005157 	.word	0x08005157
 8005114:	08005157 	.word	0x08005157
 8005118:	08005157 	.word	0x08005157
 800511c:	08005157 	.word	0x08005157
 8005120:	08005157 	.word	0x08005157
 8005124:	08005139 	.word	0x08005139
 8005128:	08005157 	.word	0x08005157
 800512c:	08005157 	.word	0x08005157
 8005130:	08005157 	.word	0x08005157
 8005134:	0800514d 	.word	0x0800514d
    {
        case analogmode_calibrating:
            break;
        case analogmode_short:
            i_count = 12;
 8005138:	230c      	movs	r3, #12
 800513a:	727b      	strb	r3, [r7, #9]
            i_start = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	723b      	strb	r3, [r7, #8]
            break;
 8005140:	e00a      	b.n	8005158 <tim7_read_direction+0x84>
        case analogmode_long:
            i_count = 4;
 8005142:	2304      	movs	r3, #4
 8005144:	727b      	strb	r3, [r7, #9]
            i_start = 12;
 8005146:	230c      	movs	r3, #12
 8005148:	723b      	strb	r3, [r7, #8]
            break;
 800514a:	e005      	b.n	8005158 <tim7_read_direction+0x84>
        case analogmode_all:
            i_count = 16;
 800514c:	2310      	movs	r3, #16
 800514e:	727b      	strb	r3, [r7, #9]
            i_start = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	723b      	strb	r3, [r7, #8]
            break;
 8005154:	e000      	b.n	8005158 <tim7_read_direction+0x84>
        default:
            /* unknown analogmode ... x_x */
            break;
 8005156:	bf00      	nop
    }

    for(unsigned char i = i_start; i < (i_count + i_start); i++)
 8005158:	7a3b      	ldrb	r3, [r7, #8]
 800515a:	71fb      	strb	r3, [r7, #7]
 800515c:	e022      	b.n	80051a4 <tim7_read_direction+0xd0>
    {
        #if D_TIM7_WHILE
        printf("tim7.c > tim7_main() > for() > ");
        printf("i = %2d", i);
        #endif
        if(i % 2 == 0)
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <tim7_read_direction+0xaa>
        {
            #if D_TIM7_WHILE
            printf("  odd\r\n");
            #endif
            analogl += analog_sensor_get(i);
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	4618      	mov	r0, r3
 800516e:	f7fc fcdb 	bl	8001b28 <analog_sensor_get>
 8005172:	4603      	mov	r3, r0
 8005174:	461a      	mov	r2, r3
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	4413      	add	r3, r2
 800517a:	81fb      	strh	r3, [r7, #14]
 800517c:	e008      	b.n	8005190 <tim7_read_direction+0xbc>
        else
        {
            #if D_TIM7_WHILE
            printf(" even\r\n");
            #endif
            analogr += analog_sensor_get(i);
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	4618      	mov	r0, r3
 8005182:	f7fc fcd1 	bl	8001b28 <analog_sensor_get>
 8005186:	4603      	mov	r3, r0
 8005188:	461a      	mov	r2, r3
 800518a:	89bb      	ldrh	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	81bb      	strh	r3, [r7, #12]
        }
        if(i < SHORT_MIDDLE_SENSOR)
 8005190:	79fb      	ldrb	r3, [r7, #7]
 8005192:	2b05      	cmp	r3, #5
 8005194:	d803      	bhi.n	800519e <tim7_read_direction+0xca>
        {
            short_middle = analogl + analogr;
 8005196:	89fa      	ldrh	r2, [r7, #14]
 8005198:	89bb      	ldrh	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	817b      	strh	r3, [r7, #10]
    for(unsigned char i = i_start; i < (i_count + i_start); i++)
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	3301      	adds	r3, #1
 80051a2:	71fb      	strb	r3, [r7, #7]
 80051a4:	79fa      	ldrb	r2, [r7, #7]
 80051a6:	7a79      	ldrb	r1, [r7, #9]
 80051a8:	7a3b      	ldrb	r3, [r7, #8]
 80051aa:	440b      	add	r3, r1
 80051ac:	429a      	cmp	r2, r3
 80051ae:	dbd6      	blt.n	800515e <tim7_read_direction+0x8a>
    {
    	// tim7_main_emergency();
    }

    //if(short_middle <= CLOSS_IGNORE_THRESHOLD * SHORT_MIDDLE_SENSOR && virtual_marker_read_markerstate() == cross)
    if(short_middle <= CLOSS_IGNORE_THRESHOLD * SHORT_MIDDLE_SENSOR)
 80051b0:	897b      	ldrh	r3, [r7, #10]
 80051b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d824      	bhi.n	8005204 <tim7_read_direction+0x130>
    {
        /* 交差判定 */
        analogl = 3 * (analog_sensor_get(12) + analog_sensor_get(14));
 80051ba:	200c      	movs	r0, #12
 80051bc:	f7fc fcb4 	bl	8001b28 <analog_sensor_get>
 80051c0:	4603      	mov	r3, r0
 80051c2:	461c      	mov	r4, r3
 80051c4:	200e      	movs	r0, #14
 80051c6:	f7fc fcaf 	bl	8001b28 <analog_sensor_get>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4423      	add	r3, r4
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	0052      	lsls	r2, r2, #1
 80051d4:	4413      	add	r3, r2
 80051d6:	81fb      	strh	r3, [r7, #14]
        analogr = 3 * (analog_sensor_get(13) + analog_sensor_get(15));
 80051d8:	200d      	movs	r0, #13
 80051da:	f7fc fca5 	bl	8001b28 <analog_sensor_get>
 80051de:	4603      	mov	r3, r0
 80051e0:	461c      	mov	r4, r3
 80051e2:	200f      	movs	r0, #15
 80051e4:	f7fc fca0 	bl	8001b28 <analog_sensor_get>
 80051e8:	4603      	mov	r3, r0
 80051ea:	4423      	add	r3, r4
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	0052      	lsls	r2, r2, #1
 80051f2:	4413      	add	r3, r2
 80051f4:	81bb      	strh	r3, [r7, #12]
        /* 長い方のゲイン値にする */
        tim7_tracer_set_gain_long();
 80051f6:	f000 f84d 	bl	8005294 <tim7_tracer_set_gain_long>
        led_write_led(0b11, 0b10);
 80051fa:	2102      	movs	r1, #2
 80051fc:	2003      	movs	r0, #3
 80051fe:	f7fc f959 	bl	80014b4 <led_write_led>
 8005202:	e005      	b.n	8005210 <tim7_read_direction+0x13c>
    }
    else
    {
        /* その他判定 */
        /* 短い方のゲイン値にする（戻すって言った方が正しいかも） */
        tim7_tracer_set_gain_short();
 8005204:	f000 f840 	bl	8005288 <tim7_tracer_set_gain_short>
        led_write_led(0b11, 0b01);
 8005208:	2101      	movs	r1, #1
 800520a:	2003      	movs	r0, #3
 800520c:	f7fc f952 	bl	80014b4 <led_write_led>
#if D_TIM7_WHILE
	printf("tim7.c > tim7_main() > ");
	printf("analogl = %5d, analogr = %5d\r\n", analogl, analogr);
#endif

    return analogl - analogr;
 8005210:	89fa      	ldrh	r2, [r7, #14]
 8005212:	89bb      	ldrh	r3, [r7, #12]
 8005214:	1ad3      	subs	r3, r2, r3
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	bd90      	pop	{r4, r7, pc}
 800521e:	bf00      	nop

08005220 <tim7_set_emergency>:
{
	switch_reset_enter();
}

void tim7_set_emergency(char emergency_)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
    tim7_emergency = emergency_;
 800522a:	4a04      	ldr	r2, [pc, #16]	; (800523c <tim7_set_emergency+0x1c>)
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	7013      	strb	r3, [r2, #0]
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	20001ba8 	.word	0x20001ba8

08005240 <tim7_read_left>:
{
    return tim7_emergency;
}

float tim7_read_left()
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c >  tim7_read_left() >  tim7_left = %7.2f\r\n", tim7_left);
    #endif
    return tim7_left;
 8005244:	4b04      	ldr	r3, [pc, #16]	; (8005258 <tim7_read_left+0x18>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	ee07 3a90 	vmov	s15, r3
}
 800524c:	eeb0 0a67 	vmov.f32	s0, s15
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	20001bac 	.word	0x20001bac

0800525c <tim7_read_right>:

float tim7_read_right()
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_read_right() > tim7_right = %7.2f\r\n", tim7_right);
    #endif
    return tim7_right;
 8005260:	4b04      	ldr	r3, [pc, #16]	; (8005274 <tim7_read_right+0x18>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	ee07 3a90 	vmov	s15, r3
}
 8005268:	eeb0 0a67 	vmov.f32	s0, s15
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	20001ba4 	.word	0x20001ba4

08005278 <tim7_d_print>:

void tim7_d_print()
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
#if D_TIM7
    printf("tim7_left = %f, tim7_right = %f\r\n", tim7_left, tim7_right);
#endif
    analog_d_print();
 800527c:	f7fc fb1c 	bl	80018b8 <analog_d_print>
    tracer_print_values();
 8005280:	f000 fa5c 	bl	800573c <tracer_print_values>
}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}

08005288 <tim7_tracer_set_gain_short>:

void tim7_tracer_set_gain_short()
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
    tracer_set_gain_default();
 800528c:	f000 f9a6 	bl	80055dc <tracer_set_gain_default>
}
 8005290:	bf00      	nop
 8005292:	bd80      	pop	{r7, pc}

08005294 <tim7_tracer_set_gain_long>:

void tim7_tracer_set_gain_long()
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
    float kp, ki, kd;
    kp = TIM7_LONG_KP;
 800529a:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <tim7_tracer_set_gain_long+0x2c>)
 800529c:	60fb      	str	r3, [r7, #12]
    ki = TIM7_LONG_KI;
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	60bb      	str	r3, [r7, #8]
    kd = TIM7_LONG_KD;
 80052a4:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <tim7_tracer_set_gain_long+0x30>)
 80052a6:	607b      	str	r3, [r7, #4]
    tracer_set_gain_direct(kp, ki, kd);
 80052a8:	ed97 1a01 	vldr	s2, [r7, #4]
 80052ac:	edd7 0a02 	vldr	s1, [r7, #8]
 80052b0:	ed97 0a03 	vldr	s0, [r7, #12]
 80052b4:	f000 f8ec 	bl	8005490 <tracer_set_gain_direct>
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	3e4ccccd 	.word	0x3e4ccccd
 80052c4:	3b9374bc 	.word	0x3b9374bc

080052c8 <time_update_ms>:
 * @fn time_update_ms()
 * @brief 1 ms 周期で呼び出される割り込み内で実行する必要がある
 * 
 */
void time_update_ms(unsigned short int step)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	80fb      	strh	r3, [r7, #6]
    /**
     * @brief time_ms が 1 時間（ 3600,000 ミリ秒 ）を超えた時にゼロに戻す
     * 
     */
    time_countup(&time_ms, step, 6300000);
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <time_update_ms+0x30>)
 80052d6:	4619      	mov	r1, r3
 80052d8:	4808      	ldr	r0, [pc, #32]	; (80052fc <time_update_ms+0x34>)
 80052da:	f000 f813 	bl	8005304 <time_countup>
    time_origin = time_ms * 1000;
 80052de:	4b07      	ldr	r3, [pc, #28]	; (80052fc <time_update_ms+0x34>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052e6:	fb02 f303 	mul.w	r3, r2, r3
 80052ea:	4a05      	ldr	r2, [pc, #20]	; (8005300 <time_update_ms+0x38>)
 80052ec:	6013      	str	r3, [r2, #0]
}
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	00602160 	.word	0x00602160
 80052fc:	20001bb8 	.word	0x20001bb8
 8005300:	20001bb4 	.word	0x20001bb4

08005304 <time_countup>:
    time_ms = 0;
    time_origin = 0;
}

void time_countup(unsigned int *_time, unsigned short int step, unsigned int _time_max)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	460b      	mov	r3, r1
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	817b      	strh	r3, [r7, #10]
    if(*_time + step >= _time_max)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	897b      	ldrh	r3, [r7, #10]
 8005318:	4413      	add	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	429a      	cmp	r2, r3
 800531e:	d809      	bhi.n	8005334 <time_countup+0x30>
    {
        *_time = 0;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
        time_reset_count = time_reset_count + 1;
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <time_countup+0x48>)
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	3301      	adds	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	4b07      	ldr	r3, [pc, #28]	; (800534c <time_countup+0x48>)
 8005330:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        *_time = *_time + step;
    }
}
 8005332:	e005      	b.n	8005340 <time_countup+0x3c>
        *_time = *_time + step;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	897b      	ldrh	r3, [r7, #10]
 800533a:	441a      	add	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	601a      	str	r2, [r3, #0]
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	20001bb0 	.word	0x20001bb0

08005350 <tracer_init>:
PID tracer_pid;
PID tracer_default;
uint8_t tracer_started;

void tracer_init(float samplingtime_ms)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_started = 0;
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <tracer_init+0x30>)
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
    tracer_sampling_time_ms = samplingtime_ms;
 8005360:	edd7 7a01 	vldr	s15, [r7, #4]
 8005364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005368:	ee17 3a90 	vmov	r3, s15
 800536c:	b29a      	uxth	r2, r3
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <tracer_init+0x34>)
 8005370:	801a      	strh	r2, [r3, #0]
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	20001bcc 	.word	0x20001bcc
 8005384:	20001bd8 	.word	0x20001bd8

08005388 <tracer_start>:

void tracer_start()
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
    if(tracer_started <= 0)
 800538e:	4b1f      	ldr	r3, [pc, #124]	; (800540c <tracer_start+0x84>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d133      	bne.n	80053fe <tracer_start+0x76>
    {
        float kp, ki, kd;
        tracer_s_error = 0;
 8005396:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <tracer_start+0x88>)
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
        tracer_before_error = 0;
 800539e:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <tracer_start+0x8c>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
        kp = tracer_calc_gain_kp(rotary_read_value());
 80053a4:	f7fc f8d8 	bl	8001558 <rotary_read_value>
 80053a8:	4603      	mov	r3, r0
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f8ad 	bl	800550c <tracer_calc_gain_kp>
 80053b2:	ed87 0a03 	vstr	s0, [r7, #12]
        ki = tracer_calc_gain_ki(rotary_read_value());
 80053b6:	f7fc f8cf 	bl	8001558 <rotary_read_value>
 80053ba:	4603      	mov	r3, r0
 80053bc:	b29b      	uxth	r3, r3
 80053be:	4618      	mov	r0, r3
 80053c0:	f000 f8c6 	bl	8005550 <tracer_calc_gain_ki>
 80053c4:	ed87 0a02 	vstr	s0, [r7, #8]
        kd = tracer_calc_gain_kd(rotary_read_value());
 80053c8:	f7fc f8c6 	bl	8001558 <rotary_read_value>
 80053cc:	4603      	mov	r3, r0
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f8df 	bl	8005594 <tracer_calc_gain_kd>
 80053d6:	ed87 0a01 	vstr	s0, [r7, #4]
        tracer_set_default_now_gain(kp, ki, kd);
 80053da:	ed97 1a01 	vldr	s2, [r7, #4]
 80053de:	edd7 0a02 	vldr	s1, [r7, #8]
 80053e2:	ed97 0a03 	vldr	s0, [r7, #12]
 80053e6:	f000 f909 	bl	80055fc <tracer_set_default_now_gain>
        tracer_set_target_zero();
 80053ea:	f000 f86b 	bl	80054c4 <tracer_set_target_zero>
        tracer_set_gain_direct(kp, ki, kd);
 80053ee:	ed97 1a01 	vldr	s2, [r7, #4]
 80053f2:	edd7 0a02 	vldr	s1, [r7, #8]
 80053f6:	ed97 0a03 	vldr	s0, [r7, #12]
 80053fa:	f000 f849 	bl	8005490 <tracer_set_gain_direct>
    #if D_TRACER
        printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", kp, ki, kd);
        print_pid(&tracer_pid);
    #endif
    }
    tracer_started = 1;
 80053fe:	4b03      	ldr	r3, [pc, #12]	; (800540c <tracer_start+0x84>)
 8005400:	2201      	movs	r2, #1
 8005402:	701a      	strb	r2, [r3, #0]
}
 8005404:	bf00      	nop
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20001bcc 	.word	0x20001bcc
 8005410:	20001bd4 	.word	0x20001bd4
 8005414:	20001bd0 	.word	0x20001bd0

08005418 <tracer_stop>:

void tracer_stop()
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
    tracer_set_gain_zero();
 800541c:	f000 f860 	bl	80054e0 <tracer_set_gain_zero>
    tracer_started = 0;
 8005420:	4b02      	ldr	r3, [pc, #8]	; (800542c <tracer_stop+0x14>)
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
}
 8005426:	bf00      	nop
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20001bcc 	.word	0x20001bcc

08005430 <tracer_set_gain_kp_direct>:
{
    tracer_set_gain_kd_direct(tracer_calc_gain_kd(i));
}

void tracer_set_gain_kp_direct(float kp)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.kp = kp;
 800543a:	4a04      	ldr	r2, [pc, #16]	; (800544c <tracer_set_gain_kp_direct+0x1c>)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6053      	str	r3, [r2, #4]
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	20001bbc 	.word	0x20001bbc

08005450 <tracer_set_gain_ki_direct>:

void tracer_set_gain_ki_direct(float ki)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.ki = ki;
 800545a:	4a04      	ldr	r2, [pc, #16]	; (800546c <tracer_set_gain_ki_direct+0x1c>)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6093      	str	r3, [r2, #8]
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	20001bbc 	.word	0x20001bbc

08005470 <tracer_set_gain_kd_direct>:

void tracer_set_gain_kd_direct(float kd)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.kd = kd;
 800547a:	4a04      	ldr	r2, [pc, #16]	; (800548c <tracer_set_gain_kd_direct+0x1c>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60d3      	str	r3, [r2, #12]
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20001bbc 	.word	0x20001bbc

08005490 <tracer_set_gain_direct>:

void tracer_set_gain_direct(float kp, float ki, float kd)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	ed87 0a03 	vstr	s0, [r7, #12]
 800549a:	edc7 0a02 	vstr	s1, [r7, #8]
 800549e:	ed87 1a01 	vstr	s2, [r7, #4]
    tracer_set_gain_kp_direct(kp);
 80054a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80054a6:	f7ff ffc3 	bl	8005430 <tracer_set_gain_kp_direct>
    tracer_set_gain_ki_direct(ki);
 80054aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80054ae:	f7ff ffcf 	bl	8005450 <tracer_set_gain_ki_direct>
    tracer_set_gain_kd_direct(kd);
 80054b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80054b6:	f7ff ffdb 	bl	8005470 <tracer_set_gain_kd_direct>
}
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <tracer_set_target_zero>:

/* kp ki kd set zero */
void tracer_set_target_zero()
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
    tracer_pid.target = 0;
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <tracer_set_target_zero+0x18>)
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
}
 80054d0:	bf00      	nop
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	20001bbc 	.word	0x20001bbc

080054e0 <tracer_set_gain_zero>:

void tracer_set_gain_zero()
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
    tracer_pid.kp = 0;
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <tracer_set_gain_zero+0x28>)
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	605a      	str	r2, [r3, #4]
    tracer_pid.ki = 0;
 80054ec:	4b06      	ldr	r3, [pc, #24]	; (8005508 <tracer_set_gain_zero+0x28>)
 80054ee:	f04f 0200 	mov.w	r2, #0
 80054f2:	609a      	str	r2, [r3, #8]
    tracer_pid.kd = 0;
 80054f4:	4b04      	ldr	r3, [pc, #16]	; (8005508 <tracer_set_gain_zero+0x28>)
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	60da      	str	r2, [r3, #12]
}
 80054fc:	bf00      	nop
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20001bbc 	.word	0x20001bbc

0800550c <tracer_calc_gain_kp>:

/* calclate pid values from rotary value */
float tracer_calc_gain_kp(unsigned short int i)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KP_MAX - TRACER_KP_MIN) / (float) (TRACER_STEP_SIZE - 1);
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	f1c3 030f 	rsb	r3, r3, #15
 800551c:	ee07 3a90 	vmov	s15, r3
 8005520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005524:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800554c <tracer_calc_gain_kp+0x40>
 8005528:	ee27 7a87 	vmul.f32	s14, s15, s14
 800552c:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005530:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005538:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800553c:	eeb0 0a67 	vmov.f32	s0, s15
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	00000000 	.word	0x00000000

08005550 <tracer_calc_gain_ki>:

float tracer_calc_gain_ki(unsigned short int i)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KI_MAX - TRACER_KI_MIN) / (float) (TRACER_STEP_SIZE - 1);
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	f1c3 030f 	rsb	r3, r3, #15
 8005560:	ee07 3a90 	vmov	s15, r3
 8005564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005568:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005590 <tracer_calc_gain_ki+0x40>
 800556c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005570:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005574:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005578:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005590 <tracer_calc_gain_ki+0x40>
 800557c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005580:	eeb0 0a67 	vmov.f32	s0, s15
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	00000000 	.word	0x00000000

08005594 <tracer_calc_gain_kd>:

float tracer_calc_gain_kd(unsigned short int i)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KD_MAX - TRACER_KD_MIN) / (float) (TRACER_STEP_SIZE - 1);
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	f1c3 030f 	rsb	r3, r3, #15
 80055a4:	ee07 3a90 	vmov	s15, r3
 80055a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ac:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80055d4 <tracer_calc_gain_kd+0x40>
 80055b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055b4:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80055b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055bc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80055d8 <tracer_calc_gain_kd+0x44>
 80055c0:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80055c4:	eeb0 0a67 	vmov.f32	s0, s15
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	00000000 	.word	0x00000000
 80055d8:	3c656042 	.word	0x3c656042

080055dc <tracer_set_gain_default>:

/* set default */
void tracer_set_gain_default()
{
 80055dc:	b490      	push	{r4, r7}
 80055de:	af00      	add	r7, sp, #0
    tracer_pid = tracer_default;
 80055e0:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <tracer_set_gain_default+0x18>)
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <tracer_set_gain_default+0x1c>)
 80055e4:	4614      	mov	r4, r2
 80055e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80055ec:	bf00      	nop
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc90      	pop	{r4, r7}
 80055f2:	4770      	bx	lr
 80055f4:	20001bbc 	.word	0x20001bbc
 80055f8:	20001bdc 	.word	0x20001bdc

080055fc <tracer_set_default_now_gain>:

void tracer_set_default_now_gain(float kp, float ki, float kd)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	ed87 0a03 	vstr	s0, [r7, #12]
 8005606:	edc7 0a02 	vstr	s1, [r7, #8]
 800560a:	ed87 1a01 	vstr	s2, [r7, #4]
    tracer_default.target = 0;
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <tracer_set_default_now_gain+0x38>)
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
    tracer_default.kp = kp;
 8005616:	4a07      	ldr	r2, [pc, #28]	; (8005634 <tracer_set_default_now_gain+0x38>)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6053      	str	r3, [r2, #4]
    tracer_default.ki = ki;
 800561c:	4a05      	ldr	r2, [pc, #20]	; (8005634 <tracer_set_default_now_gain+0x38>)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	6093      	str	r3, [r2, #8]
    tracer_default.kd = kd;
 8005622:	4a04      	ldr	r2, [pc, #16]	; (8005634 <tracer_set_default_now_gain+0x38>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60d3      	str	r3, [r2, #12]
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	20001bdc 	.word	0x20001bdc

08005638 <tracer_read_values>:
    tracer_pid.ki = _pid->ki;
    tracer_pid.kd = _pid->kd;
}

PID* tracer_read_values()
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
    return &tracer_pid;
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <tracer_read_values+0x10>)
}
 800563e:	4618      	mov	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	20001bbc 	.word	0x20001bbc

0800564c <tracer_solve>:

float tracer_solve(int reference_)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("reference_ = %5d\r\n", reference_);
    #endif

    error = reference_ - tracer_pid.target;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800565e:	4b32      	ldr	r3, [pc, #200]	; (8005728 <tracer_solve+0xdc>)
 8005660:	edd3 7a00 	vldr	s15, [r3]
 8005664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800566c:	ee17 3a90 	vmov	r3, s15
 8005670:	617b      	str	r3, [r7, #20]

    d_error = (error - tracer_before_error) / (float) (tracer_sampling_time_ms / (float) 1000);
 8005672:	4b2e      	ldr	r3, [pc, #184]	; (800572c <tracer_solve+0xe0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005682:	4b2b      	ldr	r3, [pc, #172]	; (8005730 <tracer_solve+0xe4>)
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800568e:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8005734 <tracer_solve+0xe8>
 8005692:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800569a:	edc7 7a04 	vstr	s15, [r7, #16]
    tracer_s_error += error * (float) (tracer_sampling_time_ms / (float) 1000);
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056a8:	4b21      	ldr	r3, [pc, #132]	; (8005730 <tracer_solve+0xe4>)
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80056b4:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 8005734 <tracer_solve+0xe8>
 80056b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80056bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056c0:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <tracer_solve+0xec>)
 80056c2:	edd3 7a00 	vldr	s15, [r3]
 80056c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ca:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <tracer_solve+0xec>)
 80056cc:	edc3 7a00 	vstr	s15, [r3]

    result = tracer_pid.kp * error + tracer_pid.ki * tracer_s_error + tracer_pid.kd * d_error;
 80056d0:	4b15      	ldr	r3, [pc, #84]	; (8005728 <tracer_solve+0xdc>)
 80056d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <tracer_solve+0xdc>)
 80056e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80056ea:	4b13      	ldr	r3, [pc, #76]	; (8005738 <tracer_solve+0xec>)
 80056ec:	edd3 7a00 	vldr	s15, [r3]
 80056f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <tracer_solve+0xdc>)
 80056fa:	edd3 6a03 	vldr	s13, [r3, #12]
 80056fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8005702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800570a:	edc7 7a03 	vstr	s15, [r7, #12]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("%7.2f = %7.2f * %5d + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, tracer_pid.kp, error, tracer_pid.ki, tracer_s_error, tracer_pid.kd, d_error);
    #endif

    tracer_before_error = error;
 800570e:	4a07      	ldr	r2, [pc, #28]	; (800572c <tracer_solve+0xe0>)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	6013      	str	r3, [r2, #0]

    return result;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	ee07 3a90 	vmov	s15, r3
}
 800571a:	eeb0 0a67 	vmov.f32	s0, s15
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	20001bbc 	.word	0x20001bbc
 800572c:	20001bd0 	.word	0x20001bd0
 8005730:	20001bd8 	.word	0x20001bd8
 8005734:	447a0000 	.word	0x447a0000
 8005738:	20001bd4 	.word	0x20001bd4

0800573c <tracer_print_values>:

void tracer_print_values()
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
#if D_TRACER
    printf("trac > kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
#endif
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
	...

0800574c <velotrace_init>:
PID velotrace_pid;
uint8_t velotrace_started;

/* pre setting */
void velotrace_init(uint16_t samplingtime_ms)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	80fb      	strh	r3, [r7, #6]
    velotrace_started = 0;
 8005756:	4b06      	ldr	r3, [pc, #24]	; (8005770 <velotrace_init+0x24>)
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
    velotrace_sampling_time_ms = samplingtime_ms;
 800575c:	4a05      	ldr	r2, [pc, #20]	; (8005774 <velotrace_init+0x28>)
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	8013      	strh	r3, [r2, #0]
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20001bf6 	.word	0x20001bf6
 8005774:	20001bec 	.word	0x20001bec

08005778 <velotrace_start>:

void velotrace_start()
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
    if(velotrace_started <= 0)
 800577e:	4b4b      	ldr	r3, [pc, #300]	; (80058ac <velotrace_start+0x134>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 808a 	bne.w	800589c <velotrace_start+0x124>
    {
        float target, kp, ki, kd;
        #if D_VELOTRACE
        printf("velotrace_sampling_time_ms = 1, velotrace_s_error = 0, velotrace_before_error = 0\r\n");
        #endif
        velotrace_s_error = 0;
 8005788:	4b49      	ldr	r3, [pc, #292]	; (80058b0 <velotrace_start+0x138>)
 800578a:	f04f 0200 	mov.w	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
        velotrace_before_error = 0;
 8005790:	4b48      	ldr	r3, [pc, #288]	; (80058b4 <velotrace_start+0x13c>)
 8005792:	f04f 0200 	mov.w	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
        velotrace_gain_tuning_time_ms = 0;
 8005798:	4b47      	ldr	r3, [pc, #284]	; (80058b8 <velotrace_start+0x140>)
 800579a:	2200      	movs	r2, #0
 800579c:	801a      	strh	r2, [r3, #0]
        switch(rotary_read_playmode())
 800579e:	f7fb fec3 	bl	8001528 <rotary_read_playmode>
 80057a2:	4603      	mov	r3, r0
 80057a4:	3b01      	subs	r3, #1
 80057a6:	2b06      	cmp	r3, #6
 80057a8:	d85f      	bhi.n	800586a <velotrace_start+0xf2>
 80057aa:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <velotrace_start+0x38>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	080057cd 	.word	0x080057cd
 80057b4:	080057cd 	.word	0x080057cd
 80057b8:	0800586b 	.word	0x0800586b
 80057bc:	0800586b 	.word	0x0800586b
 80057c0:	0800586b 	.word	0x0800586b
 80057c4:	080057e3 	.word	0x080057e3
 80057c8:	08005821 	.word	0x08005821
                target = velotrace_calc_target(rotary_read_value());
                kp = velotrace_calc_gain_kp(rotary_read_value());
                ki = velotrace_calc_gain_ki(rotary_read_value());
                kd = velotrace_calc_gain_kd(rotary_read_value());
                */
                target = 1;
 80057cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80057d0:	60fb      	str	r3, [r7, #12]
                kp = 1000;
 80057d2:	4b3a      	ldr	r3, [pc, #232]	; (80058bc <velotrace_start+0x144>)
 80057d4:	60bb      	str	r3, [r7, #8]
                ki = 100;
 80057d6:	4b3a      	ldr	r3, [pc, #232]	; (80058c0 <velotrace_start+0x148>)
 80057d8:	607b      	str	r3, [r7, #4]
                kd = 0;
 80057da:	f04f 0300 	mov.w	r3, #0
 80057de:	603b      	str	r3, [r7, #0]
                break;
 80057e0:	e050      	b.n	8005884 <velotrace_start+0x10c>
            case velotrace_tuning:
                target = 0;
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]
                kp = velotrace_calc_gain_kp(rotary_read_value());
 80057e8:	f7fb feb6 	bl	8001558 <rotary_read_value>
 80057ec:	4603      	mov	r3, r0
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f909 	bl	8005a08 <velotrace_calc_gain_kp>
 80057f6:	ed87 0a02 	vstr	s0, [r7, #8]
                ki = velotrace_calc_gain_ki(rotary_read_value());
 80057fa:	f7fb fead 	bl	8001558 <rotary_read_value>
 80057fe:	4603      	mov	r3, r0
 8005800:	b29b      	uxth	r3, r3
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f924 	bl	8005a50 <velotrace_calc_gain_ki>
 8005808:	ed87 0a01 	vstr	s0, [r7, #4]
                kd = velotrace_calc_gain_kd(rotary_read_value());
 800580c:	f7fb fea4 	bl	8001558 <rotary_read_value>
 8005810:	4603      	mov	r3, r0
 8005812:	b29b      	uxth	r3, r3
 8005814:	4618      	mov	r0, r3
 8005816:	f000 f93f 	bl	8005a98 <velotrace_calc_gain_kd>
 800581a:	ed87 0a00 	vstr	s0, [r7]
                break;
 800581e:	e031      	b.n	8005884 <velotrace_start+0x10c>
            case velotrace_tuning_2:
                target = velotrace_calc_target(rotary_read_value());
 8005820:	f7fb fe9a 	bl	8001558 <rotary_read_value>
 8005824:	4603      	mov	r3, r0
 8005826:	b29b      	uxth	r3, r3
 8005828:	4618      	mov	r0, r3
 800582a:	f000 f8cf 	bl	80059cc <velotrace_calc_target>
 800582e:	ed87 0a03 	vstr	s0, [r7, #12]
                kp = velotrace_calc_gain_kp(rotary_read_value());
 8005832:	f7fb fe91 	bl	8001558 <rotary_read_value>
 8005836:	4603      	mov	r3, r0
 8005838:	b29b      	uxth	r3, r3
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f8e4 	bl	8005a08 <velotrace_calc_gain_kp>
 8005840:	ed87 0a02 	vstr	s0, [r7, #8]
                ki = velotrace_calc_gain_ki(rotary_read_value());
 8005844:	f7fb fe88 	bl	8001558 <rotary_read_value>
 8005848:	4603      	mov	r3, r0
 800584a:	b29b      	uxth	r3, r3
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f8ff 	bl	8005a50 <velotrace_calc_gain_ki>
 8005852:	ed87 0a01 	vstr	s0, [r7, #4]
                kd = velotrace_calc_gain_kd(rotary_read_value());
 8005856:	f7fb fe7f 	bl	8001558 <rotary_read_value>
 800585a:	4603      	mov	r3, r0
 800585c:	b29b      	uxth	r3, r3
 800585e:	4618      	mov	r0, r3
 8005860:	f000 f91a 	bl	8005a98 <velotrace_calc_gain_kd>
 8005864:	ed87 0a00 	vstr	s0, [r7]
                break;
 8005868:	e00c      	b.n	8005884 <velotrace_start+0x10c>
            case tracer_tuning:
            default:
                target = 0;
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]
                kp = 0;
 8005870:	f04f 0300 	mov.w	r3, #0
 8005874:	60bb      	str	r3, [r7, #8]
                ki = 0;
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	607b      	str	r3, [r7, #4]
                kd = 0;
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	603b      	str	r3, [r7, #0]
                break;
 8005882:	bf00      	nop
        }
        velotrace_set_target_direct(target);
 8005884:	ed97 0a03 	vldr	s0, [r7, #12]
 8005888:	f000 f82a 	bl	80058e0 <velotrace_set_target_direct>
        velotrace_set_gain_direct(kp, ki, kd);
 800588c:	ed97 1a00 	vldr	s2, [r7]
 8005890:	edd7 0a01 	vldr	s1, [r7, #4]
 8005894:	ed97 0a02 	vldr	s0, [r7, #8]
 8005898:	f000 f862 	bl	8005960 <velotrace_set_gain_direct>
    }
    velotrace_started = 1;
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <velotrace_start+0x134>)
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20001bf6 	.word	0x20001bf6
 80058b0:	20001bf8 	.word	0x20001bf8
 80058b4:	20001bf0 	.word	0x20001bf0
 80058b8:	20001bf4 	.word	0x20001bf4
 80058bc:	447a0000 	.word	0x447a0000
 80058c0:	42c80000 	.word	0x42c80000

080058c4 <velotrace_stop>:

void velotrace_stop()
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
    velotrace_set_target_zero();
 80058c8:	f000 f864 	bl	8005994 <velotrace_set_target_zero>
    velotrace_set_gain_zero();
 80058cc:	f000 f86c 	bl	80059a8 <velotrace_set_gain_zero>
    velotrace_started = 0;
 80058d0:	4b02      	ldr	r3, [pc, #8]	; (80058dc <velotrace_stop+0x18>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
}
 80058d6:	bf00      	nop
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20001bf6 	.word	0x20001bf6

080058e0 <velotrace_set_target_direct>:
{
    velotrace_pid.target = velotrace_calc_target(i);
}

void velotrace_set_target_direct(float target)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.target = target;
 80058ea:	4a04      	ldr	r2, [pc, #16]	; (80058fc <velotrace_set_target_direct+0x1c>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6013      	str	r3, [r2, #0]
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	20001bfc 	.word	0x20001bfc

08005900 <velotrace_set_gain_kp_direct>:
{
    velotrace_set_gain_kd_direct(velotrace_calc_gain_kd(i));
}

void velotrace_set_gain_kp_direct(float kp)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kp = kp;
 800590a:	4a04      	ldr	r2, [pc, #16]	; (800591c <velotrace_set_gain_kp_direct+0x1c>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6053      	str	r3, [r2, #4]
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	20001bfc 	.word	0x20001bfc

08005920 <velotrace_set_gain_ki_direct>:

void velotrace_set_gain_ki_direct(float ki)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.ki = ki;
 800592a:	4a04      	ldr	r2, [pc, #16]	; (800593c <velotrace_set_gain_ki_direct+0x1c>)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6093      	str	r3, [r2, #8]
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	20001bfc 	.word	0x20001bfc

08005940 <velotrace_set_gain_kd_direct>:

void velotrace_set_gain_kd_direct(float kd)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kd = kd;
 800594a:	4a04      	ldr	r2, [pc, #16]	; (800595c <velotrace_set_gain_kd_direct+0x1c>)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60d3      	str	r3, [r2, #12]
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	20001bfc 	.word	0x20001bfc

08005960 <velotrace_set_gain_direct>:

void velotrace_set_gain_direct(float kp, float ki, float kd)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	ed87 0a03 	vstr	s0, [r7, #12]
 800596a:	edc7 0a02 	vstr	s1, [r7, #8]
 800596e:	ed87 1a01 	vstr	s2, [r7, #4]
    velotrace_set_gain_kp_direct(kp);
 8005972:	ed97 0a03 	vldr	s0, [r7, #12]
 8005976:	f7ff ffc3 	bl	8005900 <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(ki);
 800597a:	ed97 0a02 	vldr	s0, [r7, #8]
 800597e:	f7ff ffcf 	bl	8005920 <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(kd);
 8005982:	ed97 0a01 	vldr	s0, [r7, #4]
 8005986:	f7ff ffdb 	bl	8005940 <velotrace_set_gain_kd_direct>
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <velotrace_set_target_zero>:

/* target kp ki kd set zero */
void velotrace_set_target_zero()
{
 8005994:	b580      	push	{r7, lr}
 8005996:	af00      	add	r7, sp, #0
    velotrace_set_target_direct(0);
 8005998:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80059a4 <velotrace_set_target_zero+0x10>
 800599c:	f7ff ffa0 	bl	80058e0 <velotrace_set_target_direct>
}
 80059a0:	bf00      	nop
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	00000000 	.word	0x00000000

080059a8 <velotrace_set_gain_zero>:

void velotrace_set_gain_zero()
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
    velotrace_set_gain_kp_direct(0);
 80059ac:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80059c8 <velotrace_set_gain_zero+0x20>
 80059b0:	f7ff ffa6 	bl	8005900 <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(0);
 80059b4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80059c8 <velotrace_set_gain_zero+0x20>
 80059b8:	f7ff ffb2 	bl	8005920 <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(0);
 80059bc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80059c8 <velotrace_set_gain_zero+0x20>
 80059c0:	f7ff ffbe 	bl	8005940 <velotrace_set_gain_kd_direct>
}
 80059c4:	bf00      	nop
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	00000000 	.word	0x00000000

080059cc <velotrace_calc_target>:

/* calclate pid values from rotary value */
float velotrace_calc_target(unsigned short int i)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4603      	mov	r3, r0
 80059d4:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	f1c3 030f 	rsb	r3, r3, #15
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80059e8:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80059ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059f0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80059f4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80059f8:	eeb0 0a67 	vmov.f32	s0, s15
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <velotrace_calc_gain_kp>:

float velotrace_calc_gain_kp(unsigned short int i)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	f1c3 030f 	rsb	r3, r3, #15
 8005a18:	ee07 3a90 	vmov	s15, r3
 8005a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a20:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005a48 <velotrace_calc_gain_kp+0x40>
 8005a24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a28:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005a2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a30:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005a4c <velotrace_calc_gain_kp+0x44>
 8005a34:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005a38:	eeb0 0a67 	vmov.f32	s0, s15
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	00000000 	.word	0x00000000
 8005a4c:	447a0000 	.word	0x447a0000

08005a50 <velotrace_calc_gain_ki>:

float velotrace_calc_gain_ki(unsigned short int i)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	f1c3 030f 	rsb	r3, r3, #15
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a68:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005a90 <velotrace_calc_gain_ki+0x40>
 8005a6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005a70:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005a74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a78:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005a94 <velotrace_calc_gain_ki+0x44>
 8005a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005a80:	eeb0 0a67 	vmov.f32	s0, s15
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	00000000 	.word	0x00000000
 8005a94:	42c80000 	.word	0x42c80000

08005a98 <velotrace_calc_gain_kd>:

float velotrace_calc_gain_kd(unsigned short int i)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	f1c3 030f 	rsb	r3, r3, #15
 8005aa8:	ee07 3a90 	vmov	s15, r3
 8005aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ab0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005ad8 <velotrace_calc_gain_kd+0x40>
 8005ab4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ab8:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ac0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ad8 <velotrace_calc_gain_kd+0x40>
 8005ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	00000000 	.word	0x00000000

08005adc <velotrace_read_values>:
    velotrace_pid.ki = _pid->ki;
    velotrace_pid.kd = _pid->kd;
}

PID* velotrace_read_values()
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
    return &velotrace_pid;
 8005ae0:	4b02      	ldr	r3, [pc, #8]	; (8005aec <velotrace_read_values+0x10>)
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20001bfc 	.word	0x20001bfc

08005af0 <velotrace_solve>:

float velotrace_solve(float reference_)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	ed87 0a01 	vstr	s0, [r7, #4]
    float error;
    float d_error;
    float result;

    error = reference_ - velotrace_pid.target;
 8005afa:	4b2f      	ldr	r3, [pc, #188]	; (8005bb8 <velotrace_solve+0xc8>)
 8005afc:	edd3 7a00 	vldr	s15, [r3]
 8005b00:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b08:	edc7 7a05 	vstr	s15, [r7, #20]

    d_error = (error - velotrace_before_error) / (float) (velotrace_sampling_time_ms / (float) 1000);
 8005b0c:	4b2b      	ldr	r3, [pc, #172]	; (8005bbc <velotrace_solve+0xcc>)
 8005b0e:	edd3 7a00 	vldr	s15, [r3]
 8005b12:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b16:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005b1a:	4b29      	ldr	r3, [pc, #164]	; (8005bc0 <velotrace_solve+0xd0>)
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b26:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8005bc4 <velotrace_solve+0xd4>
 8005b2a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b32:	edc7 7a04 	vstr	s15, [r7, #16]
    velotrace_s_error += error * (float) (velotrace_sampling_time_ms / (float) 1000);
 8005b36:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <velotrace_solve+0xd0>)
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b42:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005bc4 <velotrace_solve+0xd4>
 8005b46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b52:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <velotrace_solve+0xd8>)
 8005b54:	edd3 7a00 	vldr	s15, [r3]
 8005b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	; (8005bc8 <velotrace_solve+0xd8>)
 8005b5e:	edc3 7a00 	vstr	s15, [r3]

    result = - (velotrace_pid.kp * error + velotrace_pid.ki * velotrace_s_error + velotrace_pid.kd * d_error);
 8005b62:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <velotrace_solve+0xc8>)
 8005b64:	ed93 7a01 	vldr	s14, [r3, #4]
 8005b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b70:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <velotrace_solve+0xc8>)
 8005b72:	edd3 6a02 	vldr	s13, [r3, #8]
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <velotrace_solve+0xd8>)
 8005b78:	edd3 7a00 	vldr	s15, [r3]
 8005b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b84:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <velotrace_solve+0xc8>)
 8005b86:	edd3 6a03 	vldr	s13, [r3, #12]
 8005b8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b96:	eef1 7a67 	vneg.f32	s15, s15
 8005b9a:	edc7 7a03 	vstr	s15, [r7, #12]
    printf("velotrace_solve()\r\n");
    printf("reference_ - velotrace_pid.target = %7.2f - %7.2f = %7.2f\r\n", reference_, velotrace_pid.target, reference_ - velotrace_pid.target);
    printf("%7.2f = %7.2f * %7.2f + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, velotrace_pid.kp, error, velotrace_pid.ki, velotrace_s_error, velotrace_pid.kd, d_error);
    #endif

    velotrace_before_error = error;
 8005b9e:	4a07      	ldr	r2, [pc, #28]	; (8005bbc <velotrace_solve+0xcc>)
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	6013      	str	r3, [r2, #0]

    return result;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	ee07 3a90 	vmov	s15, r3
}
 8005baa:	eeb0 0a67 	vmov.f32	s0, s15
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	20001bfc 	.word	0x20001bfc
 8005bbc:	20001bf0 	.word	0x20001bf0
 8005bc0:	20001bec 	.word	0x20001bec
 8005bc4:	447a0000 	.word	0x447a0000
 8005bc8:	20001bf8 	.word	0x20001bf8

08005bcc <velotrace_print_values>:

void velotrace_print_values()
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
#if D_VELOTRACE
	printf("velo > target = %5.3f\r\n", velotrace_read_target());
	//! printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_calc_gain_kp(rotary_read_value()), velotrace_calc_gain_ki(rotary_read_value()), velotrace_calc_gain_kd(rotary_read_value()));
#endif
}
 8005bd0:	bf00      	nop
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <velotrace_gain_tuning>:

void velotrace_gain_tuning()
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
    //! 右センサを読んでからの時間を格納する
    velotrace_gain_tuning_time_ms += velotrace_sampling_time_ms;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <velotrace_gain_tuning+0x34>)
 8005be2:	881a      	ldrh	r2, [r3, #0]
 8005be4:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <velotrace_gain_tuning+0x38>)
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	4413      	add	r3, r2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <velotrace_gain_tuning+0x34>)
 8005bee:	801a      	strh	r2, [r3, #0]
    //! 停止時間になったら
    if(velotrace_gain_tuning_time_ms >= VELOTRACE_GAIN_TUNING_STOP_TIME_MS)
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <velotrace_gain_tuning+0x34>)
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d903      	bls.n	8005c04 <velotrace_gain_tuning+0x28>
    {
        //! 速度の目標値をゼロにする
        velotrace_pid.target = 0;
 8005bfc:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <velotrace_gain_tuning+0x3c>)
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]
    }
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20001bf4 	.word	0x20001bf4
 8005c14:	20001bec 	.word	0x20001bec
 8005c18:	20001bfc 	.word	0x20001bfc

08005c1c <virtual_marker_init>:
#include "virtual_marker.h"

SideSensorState virtual_marker_state, virtual_marker_state_volatile;

void virtual_marker_init()
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
    sidesensor_init();
 8005c20:	f7fe fa40 	bl	80040a4 <sidesensor_init>
}
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <virtual_marker_start>:

void virtual_marker_start()
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
    sidesensor_start();
 8005c2c:	f7fe fa42 	bl	80040b4 <sidesensor_start>
    virtual_marker_set();
 8005c30:	f000 f810 	bl	8005c54 <virtual_marker_set>
}
 8005c34:	bf00      	nop
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <virtual_marker_main>:

void virtual_marker_main()
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
    /* virtual_main */
    sidesensor_main();
 8005c3c:	f7fe facc 	bl	80041d8 <sidesensor_main>
    virtual_marker_set();
 8005c40:	f000 f808 	bl	8005c54 <virtual_marker_set>
}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <virtual_marker_stop>:

void virtual_marker_stop()
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
    sidesensor_stop();
 8005c4c:	f7fe fa58 	bl	8004100 <sidesensor_stop>
}
 8005c50:	bf00      	nop
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <virtual_marker_set>:

void virtual_marker_set()
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
    virtual_marker_state = sidesensor_read_markerstate();
 8005c58:	f7fe fa5a 	bl	8004110 <sidesensor_read_markerstate>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	461a      	mov	r2, r3
 8005c60:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <virtual_marker_set+0x20>)
 8005c62:	701a      	strb	r2, [r3, #0]
    virtual_marker_state_volatile = sidesensor_read_markerstate_volatile();
 8005c64:	f7fe fa60 	bl	8004128 <sidesensor_read_markerstate_volatile>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	4b02      	ldr	r3, [pc, #8]	; (8005c78 <virtual_marker_set+0x24>)
 8005c6e:	701a      	strb	r2, [r3, #0]
}
 8005c70:	bf00      	nop
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	20001c0d 	.word	0x20001c0d
 8005c78:	20001c0c 	.word	0x20001c0c

08005c7c <virtual_marker_read_markerstate>:

SideSensorState virtual_marker_read_markerstate()
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
    return virtual_marker_state;
 8005c80:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <virtual_marker_read_markerstate+0x14>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20001c0d 	.word	0x20001c0d

08005c94 <virtual_marker_read_markerstate_volatile>:

SideSensorState virtual_marker_read_markerstate_volatile()
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
    if(course_read_section_degree() / course_read_sampling_count() >= THRESHOLD_YAW_CURVE_OR_STRAIGHT)
    {
        virtual_marker_state_volatile = curve;
    }
    */
    return virtual_marker_state_volatile;
 8005c98:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <virtual_marker_read_markerstate_volatile+0x14>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	20001c0c 	.word	0x20001c0c

08005cac <virtual_marker_d_print>:

void virtual_marker_d_print()
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0

}
 8005cb0:	bf00      	nop
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005cf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005cc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005cc2:	e003      	b.n	8005ccc <LoopCopyDataInit>

08005cc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	; (8005cf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005cc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005cc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005cca:	3104      	adds	r1, #4

08005ccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005ccc:	480b      	ldr	r0, [pc, #44]	; (8005cfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005cce:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005cd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005cd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005cd4:	d3f6      	bcc.n	8005cc4 <CopyDataInit>
  ldr  r2, =_sbss
 8005cd6:	4a0b      	ldr	r2, [pc, #44]	; (8005d04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005cd8:	e002      	b.n	8005ce0 <LoopFillZerobss>

08005cda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005cda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005cdc:	f842 3b04 	str.w	r3, [r2], #4

08005ce0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ce0:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ce2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ce4:	d3f9      	bcc.n	8005cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005ce6:	f7fe ff8d 	bl	8004c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cea:	f004 fe49 	bl	800a980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cee:	f7fd f8c9 	bl	8002e84 <main>
  bx  lr    
 8005cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005cf4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005cf8:	08010710 	.word	0x08010710
  ldr  r0, =_sdata
 8005cfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005d00:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8005d04:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005d08:	20001c38 	.word	0x20001c38

08005d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005d0c:	e7fe      	b.n	8005d0c <ADC_IRQHandler>
	...

08005d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d14:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <HAL_Init+0x40>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a0d      	ldr	r2, [pc, #52]	; (8005d50 <HAL_Init+0x40>)
 8005d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <HAL_Init+0x40>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <HAL_Init+0x40>)
 8005d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d2c:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <HAL_Init+0x40>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a07      	ldr	r2, [pc, #28]	; (8005d50 <HAL_Init+0x40>)
 8005d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d38:	2003      	movs	r0, #3
 8005d3a:	f000 fdaf 	bl	800689c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d3e:	2000      	movs	r0, #0
 8005d40:	f000 f808 	bl	8005d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d44:	f7fe fafe 	bl	8004344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40023c00 	.word	0x40023c00

08005d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d5c:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <HAL_InitTick+0x54>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4b12      	ldr	r3, [pc, #72]	; (8005dac <HAL_InitTick+0x58>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	4619      	mov	r1, r3
 8005d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fdc7 	bl	8006906 <HAL_SYSTICK_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e00e      	b.n	8005da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b0f      	cmp	r3, #15
 8005d86:	d80a      	bhi.n	8005d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d88:	2200      	movs	r2, #0
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d90:	f000 fd8f 	bl	80068b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d94:	4a06      	ldr	r2, [pc, #24]	; (8005db0 <HAL_InitTick+0x5c>)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e000      	b.n	8005da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20000000 	.word	0x20000000
 8005dac:	20000008 	.word	0x20000008
 8005db0:	20000004 	.word	0x20000004

08005db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005db8:	4b06      	ldr	r3, [pc, #24]	; (8005dd4 <HAL_IncTick+0x20>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <HAL_IncTick+0x24>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	4a04      	ldr	r2, [pc, #16]	; (8005dd8 <HAL_IncTick+0x24>)
 8005dc6:	6013      	str	r3, [r2, #0]
}
 8005dc8:	bf00      	nop
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000008 	.word	0x20000008
 8005dd8:	20001c10 	.word	0x20001c10

08005ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
  return uwTick;
 8005de0:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <HAL_GetTick+0x14>)
 8005de2:	681b      	ldr	r3, [r3, #0]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	20001c10 	.word	0x20001c10

08005df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005dfc:	f7ff ffee 	bl	8005ddc <HAL_GetTick>
 8005e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e0c:	d005      	beq.n	8005e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e0e:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <HAL_Delay+0x40>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005e1a:	bf00      	nop
 8005e1c:	f7ff ffde 	bl	8005ddc <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d8f7      	bhi.n	8005e1c <HAL_Delay+0x28>
  {
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20000008 	.word	0x20000008

08005e38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e033      	b.n	8005eb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d109      	bne.n	8005e6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fe faa0 	bl	800439c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d118      	bne.n	8005ea8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e7e:	f023 0302 	bic.w	r3, r3, #2
 8005e82:	f043 0202 	orr.w	r2, r3, #2
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fab8 	bl	8006400 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f023 0303 	bic.w	r3, r3, #3
 8005e9e:	f043 0201 	orr.w	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
 8005ea6:	e001      	b.n	8005eac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_ADC_Start_DMA+0x1e>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e0e9      	b.n	80060b2 <HAL_ADC_Start_DMA+0x1f2>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d018      	beq.n	8005f26 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f042 0201 	orr.w	r2, r2, #1
 8005f02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005f04:	4b6d      	ldr	r3, [pc, #436]	; (80060bc <HAL_ADC_Start_DMA+0x1fc>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a6d      	ldr	r2, [pc, #436]	; (80060c0 <HAL_ADC_Start_DMA+0x200>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	0c9a      	lsrs	r2, r3, #18
 8005f10:	4613      	mov	r3, r2
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	4413      	add	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005f18:	e002      	b.n	8005f20 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f9      	bne.n	8005f1a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f34:	d107      	bne.n	8005f46 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f44:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	f040 80a1 	bne.w	8006098 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f94:	d106      	bne.n	8005fa4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	f023 0206 	bic.w	r2, r3, #6
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44
 8005fa2:	e002      	b.n	8005faa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fb2:	4b44      	ldr	r3, [pc, #272]	; (80060c4 <HAL_ADC_Start_DMA+0x204>)
 8005fb4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	4a43      	ldr	r2, [pc, #268]	; (80060c8 <HAL_ADC_Start_DMA+0x208>)
 8005fbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	4a42      	ldr	r2, [pc, #264]	; (80060cc <HAL_ADC_Start_DMA+0x20c>)
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	4a41      	ldr	r2, [pc, #260]	; (80060d0 <HAL_ADC_Start_DMA+0x210>)
 8005fcc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005fd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005fe6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ff6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	334c      	adds	r3, #76	; 0x4c
 8006002:	4619      	mov	r1, r3
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f000 fd38 	bl	8006a7c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	2b00      	cmp	r3, #0
 8006016:	d12a      	bne.n	800606e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a2d      	ldr	r2, [pc, #180]	; (80060d4 <HAL_ADC_Start_DMA+0x214>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d015      	beq.n	800604e <HAL_ADC_Start_DMA+0x18e>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2c      	ldr	r2, [pc, #176]	; (80060d8 <HAL_ADC_Start_DMA+0x218>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d105      	bne.n	8006038 <HAL_ADC_Start_DMA+0x178>
 800602c:	4b25      	ldr	r3, [pc, #148]	; (80060c4 <HAL_ADC_Start_DMA+0x204>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f003 031f 	and.w	r3, r3, #31
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a27      	ldr	r2, [pc, #156]	; (80060dc <HAL_ADC_Start_DMA+0x21c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d136      	bne.n	80060b0 <HAL_ADC_Start_DMA+0x1f0>
 8006042:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <HAL_ADC_Start_DMA+0x204>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2b0f      	cmp	r3, #15
 800604c:	d830      	bhi.n	80060b0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d129      	bne.n	80060b0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689a      	ldr	r2, [r3, #8]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	e020      	b.n	80060b0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <HAL_ADC_Start_DMA+0x214>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d11b      	bne.n	80060b0 <HAL_ADC_Start_DMA+0x1f0>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d114      	bne.n	80060b0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006094:	609a      	str	r2, [r3, #8]
 8006096:	e00b      	b.n	80060b0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	f043 0210 	orr.w	r2, r3, #16
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a8:	f043 0201 	orr.w	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000000 	.word	0x20000000
 80060c0:	431bde83 	.word	0x431bde83
 80060c4:	40012300 	.word	0x40012300
 80060c8:	080065f9 	.word	0x080065f9
 80060cc:	080066b3 	.word	0x080066b3
 80060d0:	080066cf 	.word	0x080066cf
 80060d4:	40012000 	.word	0x40012000
 80060d8:	40012100 	.word	0x40012100
 80060dc:	40012200 	.word	0x40012200

080060e0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_ADC_Stop_DMA+0x1a>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e048      	b.n	800618c <HAL_ADC_Stop_DMA+0xac>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0201 	bic.w	r2, r2, #1
 8006110:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d130      	bne.n	8006182 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800612e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d10f      	bne.n	800615e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fcf2 	bl	8006b2c <HAL_DMA_Abort>
 8006148:	4603      	mov	r3, r0
 800614a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800616c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	f043 0201 	orr.w	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800618a:	7bfb      	ldrb	r3, [r7, #15]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d101      	bne.n	80061d8 <HAL_ADC_ConfigChannel+0x1c>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e105      	b.n	80063e4 <HAL_ADC_ConfigChannel+0x228>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b09      	cmp	r3, #9
 80061e6:	d925      	bls.n	8006234 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68d9      	ldr	r1, [r3, #12]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	3b1e      	subs	r3, #30
 80061fe:	2207      	movs	r2, #7
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	43da      	mvns	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	400a      	ands	r2, r1
 800620c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68d9      	ldr	r1, [r3, #12]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	4618      	mov	r0, r3
 8006220:	4603      	mov	r3, r0
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4403      	add	r3, r0
 8006226:	3b1e      	subs	r3, #30
 8006228:	409a      	lsls	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	60da      	str	r2, [r3, #12]
 8006232:	e022      	b.n	800627a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6919      	ldr	r1, [r3, #16]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	4613      	mov	r3, r2
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4413      	add	r3, r2
 8006248:	2207      	movs	r2, #7
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	43da      	mvns	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	400a      	ands	r2, r1
 8006256:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6919      	ldr	r1, [r3, #16]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	4618      	mov	r0, r3
 800626a:	4603      	mov	r3, r0
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	4403      	add	r3, r0
 8006270:	409a      	lsls	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b06      	cmp	r3, #6
 8006280:	d824      	bhi.n	80062cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	3b05      	subs	r3, #5
 8006294:	221f      	movs	r2, #31
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43da      	mvns	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	400a      	ands	r2, r1
 80062a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	4618      	mov	r0, r3
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	3b05      	subs	r3, #5
 80062be:	fa00 f203 	lsl.w	r2, r0, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	635a      	str	r2, [r3, #52]	; 0x34
 80062ca:	e04c      	b.n	8006366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b0c      	cmp	r3, #12
 80062d2:	d824      	bhi.n	800631e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	3b23      	subs	r3, #35	; 0x23
 80062e6:	221f      	movs	r2, #31
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	43da      	mvns	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	400a      	ands	r2, r1
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	b29b      	uxth	r3, r3
 8006302:	4618      	mov	r0, r3
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	4413      	add	r3, r2
 800630e:	3b23      	subs	r3, #35	; 0x23
 8006310:	fa00 f203 	lsl.w	r2, r0, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	631a      	str	r2, [r3, #48]	; 0x30
 800631c:	e023      	b.n	8006366 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	3b41      	subs	r3, #65	; 0x41
 8006330:	221f      	movs	r2, #31
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43da      	mvns	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	400a      	ands	r2, r1
 800633e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	4618      	mov	r0, r3
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	4613      	mov	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	3b41      	subs	r3, #65	; 0x41
 800635a:	fa00 f203 	lsl.w	r2, r0, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006366:	4b22      	ldr	r3, [pc, #136]	; (80063f0 <HAL_ADC_ConfigChannel+0x234>)
 8006368:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a21      	ldr	r2, [pc, #132]	; (80063f4 <HAL_ADC_ConfigChannel+0x238>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d109      	bne.n	8006388 <HAL_ADC_ConfigChannel+0x1cc>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2b12      	cmp	r3, #18
 800637a:	d105      	bne.n	8006388 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <HAL_ADC_ConfigChannel+0x238>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d123      	bne.n	80063da <HAL_ADC_ConfigChannel+0x21e>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b10      	cmp	r3, #16
 8006398:	d003      	beq.n	80063a2 <HAL_ADC_ConfigChannel+0x1e6>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b11      	cmp	r3, #17
 80063a0:	d11b      	bne.n	80063da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d111      	bne.n	80063da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80063b6:	4b10      	ldr	r3, [pc, #64]	; (80063f8 <HAL_ADC_ConfigChannel+0x23c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a10      	ldr	r2, [pc, #64]	; (80063fc <HAL_ADC_ConfigChannel+0x240>)
 80063bc:	fba2 2303 	umull	r2, r3, r2, r3
 80063c0:	0c9a      	lsrs	r2, r3, #18
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80063cc:	e002      	b.n	80063d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	3b01      	subs	r3, #1
 80063d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1f9      	bne.n	80063ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	40012300 	.word	0x40012300
 80063f4:	40012000 	.word	0x40012000
 80063f8:	20000000 	.word	0x20000000
 80063fc:	431bde83 	.word	0x431bde83

08006400 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006408:	4b79      	ldr	r3, [pc, #484]	; (80065f0 <ADC_Init+0x1f0>)
 800640a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	431a      	orrs	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6859      	ldr	r1, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	021a      	lsls	r2, r3, #8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6859      	ldr	r1, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800647a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6899      	ldr	r1, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	4a58      	ldr	r2, [pc, #352]	; (80065f4 <ADC_Init+0x1f4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d022      	beq.n	80064de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6899      	ldr	r1, [r3, #8]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80064c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6899      	ldr	r1, [r3, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	609a      	str	r2, [r3, #8]
 80064dc:	e00f      	b.n	80064fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80064fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0202 	bic.w	r2, r2, #2
 800650c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6899      	ldr	r1, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	7e1b      	ldrb	r3, [r3, #24]
 8006518:	005a      	lsls	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01b      	beq.n	8006564 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800654a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6859      	ldr	r1, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	3b01      	subs	r3, #1
 8006558:	035a      	lsls	r2, r3, #13
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	e007      	b.n	8006574 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006572:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006582:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	3b01      	subs	r3, #1
 8006590:	051a      	lsls	r2, r3, #20
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6899      	ldr	r1, [r3, #8]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065b6:	025a      	lsls	r2, r3, #9
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6899      	ldr	r1, [r3, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	029a      	lsls	r2, r3, #10
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	609a      	str	r2, [r3, #8]
}
 80065e4:	bf00      	nop
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	40012300 	.word	0x40012300
 80065f4:	0f000001 	.word	0x0f000001

080065f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800660e:	2b00      	cmp	r3, #0
 8006610:	d13c      	bne.n	800668c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d12b      	bne.n	8006684 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006630:	2b00      	cmp	r3, #0
 8006632:	d127      	bne.n	8006684 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800663e:	2b00      	cmp	r3, #0
 8006640:	d006      	beq.n	8006650 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800664c:	2b00      	cmp	r3, #0
 800664e:	d119      	bne.n	8006684 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0220 	bic.w	r2, r2, #32
 800665e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	f043 0201 	orr.w	r2, r3, #1
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f7fb fabb 	bl	8001c00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800668a:	e00e      	b.n	80066aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	d003      	beq.n	80066a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff fd85 	bl	80061a8 <HAL_ADC_ErrorCallback>
}
 800669e:	e004      	b.n	80066aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	4798      	blx	r3
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff fd67 	bl	8006194 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2240      	movs	r2, #64	; 0x40
 80066e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e6:	f043 0204 	orr.w	r2, r3, #4
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f7ff fd5a 	bl	80061a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800670c:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <__NVIC_SetPriorityGrouping+0x44>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006718:	4013      	ands	r3, r2
 800671a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800672e:	4a04      	ldr	r2, [pc, #16]	; (8006740 <__NVIC_SetPriorityGrouping+0x44>)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	60d3      	str	r3, [r2, #12]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	e000ed00 	.word	0xe000ed00

08006744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006748:	4b04      	ldr	r3, [pc, #16]	; (800675c <__NVIC_GetPriorityGrouping+0x18>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	0a1b      	lsrs	r3, r3, #8
 800674e:	f003 0307 	and.w	r3, r3, #7
}
 8006752:	4618      	mov	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	e000ed00 	.word	0xe000ed00

08006760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800676a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676e:	2b00      	cmp	r3, #0
 8006770:	db0b      	blt.n	800678a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	f003 021f 	and.w	r2, r3, #31
 8006778:	4907      	ldr	r1, [pc, #28]	; (8006798 <__NVIC_EnableIRQ+0x38>)
 800677a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800677e:	095b      	lsrs	r3, r3, #5
 8006780:	2001      	movs	r0, #1
 8006782:	fa00 f202 	lsl.w	r2, r0, r2
 8006786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	e000e100 	.word	0xe000e100

0800679c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	6039      	str	r1, [r7, #0]
 80067a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	db0a      	blt.n	80067c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	490c      	ldr	r1, [pc, #48]	; (80067e8 <__NVIC_SetPriority+0x4c>)
 80067b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067ba:	0112      	lsls	r2, r2, #4
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	440b      	add	r3, r1
 80067c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067c4:	e00a      	b.n	80067dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	4908      	ldr	r1, [pc, #32]	; (80067ec <__NVIC_SetPriority+0x50>)
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	3b04      	subs	r3, #4
 80067d4:	0112      	lsls	r2, r2, #4
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	440b      	add	r3, r1
 80067da:	761a      	strb	r2, [r3, #24]
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	e000e100 	.word	0xe000e100
 80067ec:	e000ed00 	.word	0xe000ed00

080067f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b089      	sub	sp, #36	; 0x24
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f1c3 0307 	rsb	r3, r3, #7
 800680a:	2b04      	cmp	r3, #4
 800680c:	bf28      	it	cs
 800680e:	2304      	movcs	r3, #4
 8006810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	3304      	adds	r3, #4
 8006816:	2b06      	cmp	r3, #6
 8006818:	d902      	bls.n	8006820 <NVIC_EncodePriority+0x30>
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	3b03      	subs	r3, #3
 800681e:	e000      	b.n	8006822 <NVIC_EncodePriority+0x32>
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	43da      	mvns	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	401a      	ands	r2, r3
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006838:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	fa01 f303 	lsl.w	r3, r1, r3
 8006842:	43d9      	mvns	r1, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006848:	4313      	orrs	r3, r2
         );
}
 800684a:	4618      	mov	r0, r3
 800684c:	3724      	adds	r7, #36	; 0x24
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
	...

08006858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3b01      	subs	r3, #1
 8006864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006868:	d301      	bcc.n	800686e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800686a:	2301      	movs	r3, #1
 800686c:	e00f      	b.n	800688e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800686e:	4a0a      	ldr	r2, [pc, #40]	; (8006898 <SysTick_Config+0x40>)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3b01      	subs	r3, #1
 8006874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006876:	210f      	movs	r1, #15
 8006878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800687c:	f7ff ff8e 	bl	800679c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <SysTick_Config+0x40>)
 8006882:	2200      	movs	r2, #0
 8006884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006886:	4b04      	ldr	r3, [pc, #16]	; (8006898 <SysTick_Config+0x40>)
 8006888:	2207      	movs	r2, #7
 800688a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	e000e010 	.word	0xe000e010

0800689c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff ff29 	bl	80066fc <__NVIC_SetPriorityGrouping>
}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	4603      	mov	r3, r0
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
 80068be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068c4:	f7ff ff3e 	bl	8006744 <__NVIC_GetPriorityGrouping>
 80068c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	6978      	ldr	r0, [r7, #20]
 80068d0:	f7ff ff8e 	bl	80067f0 <NVIC_EncodePriority>
 80068d4:	4602      	mov	r2, r0
 80068d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068da:	4611      	mov	r1, r2
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff ff5d 	bl	800679c <__NVIC_SetPriority>
}
 80068e2:	bf00      	nop
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	4603      	mov	r3, r0
 80068f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff ff31 	bl	8006760 <__NVIC_EnableIRQ>
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff ffa2 	bl	8006858 <SysTick_Config>
 8006914:	4603      	mov	r3, r0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800692c:	f7ff fa56 	bl	8005ddc <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e099      	b.n	8006a70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0201 	bic.w	r2, r2, #1
 800695a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800695c:	e00f      	b.n	800697e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800695e:	f7ff fa3d 	bl	8005ddc <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b05      	cmp	r3, #5
 800696a:	d908      	bls.n	800697e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2203      	movs	r2, #3
 8006976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e078      	b.n	8006a70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1e8      	bne.n	800695e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4b38      	ldr	r3, [pc, #224]	; (8006a78 <HAL_DMA_Init+0x158>)
 8006998:	4013      	ands	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d107      	bne.n	80069e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e0:	4313      	orrs	r3, r2
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d117      	bne.n	8006a42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00e      	beq.n	8006a42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fadf 	bl	8006fe8 <DMA_CheckFifoParam>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d008      	beq.n	8006a42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2240      	movs	r2, #64	; 0x40
 8006a34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e016      	b.n	8006a70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa96 	bl	8006f7c <DMA_CalcBaseAndBitshift>
 8006a50:	4603      	mov	r3, r0
 8006a52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a58:	223f      	movs	r2, #63	; 0x3f
 8006a5a:	409a      	lsls	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	f010803f 	.word	0xf010803f

08006a7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_DMA_Start_IT+0x26>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e040      	b.n	8006b24 <HAL_DMA_Start_IT+0xa8>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d12f      	bne.n	8006b16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fa28 	bl	8006f20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad4:	223f      	movs	r2, #63	; 0x3f
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0216 	orr.w	r2, r2, #22
 8006aea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f042 0208 	orr.w	r2, r2, #8
 8006b02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e005      	b.n	8006b22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006b3a:	f7ff f94f 	bl	8005ddc <HAL_GetTick>
 8006b3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d008      	beq.n	8006b5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2280      	movs	r2, #128	; 0x80
 8006b50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e052      	b.n	8006c04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0216 	bic.w	r2, r2, #22
 8006b6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695a      	ldr	r2, [r3, #20]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <HAL_DMA_Abort+0x62>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0208 	bic.w	r2, r2, #8
 8006b9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bae:	e013      	b.n	8006bd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bb0:	f7ff f914 	bl	8005ddc <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b05      	cmp	r3, #5
 8006bbc:	d90c      	bls.n	8006bd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e015      	b.n	8006c04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e4      	bne.n	8006bb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bea:	223f      	movs	r2, #63	; 0x3f
 8006bec:	409a      	lsls	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c18:	4b92      	ldr	r3, [pc, #584]	; (8006e64 <HAL_DMA_IRQHandler+0x258>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a92      	ldr	r2, [pc, #584]	; (8006e68 <HAL_DMA_IRQHandler+0x25c>)
 8006c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c22:	0a9b      	lsrs	r3, r3, #10
 8006c24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c36:	2208      	movs	r2, #8
 8006c38:	409a      	lsls	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d01a      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0304 	and.w	r3, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d013      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0204 	bic.w	r2, r2, #4
 8006c5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c64:	2208      	movs	r2, #8
 8006c66:	409a      	lsls	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c70:	f043 0201 	orr.w	r2, r3, #1
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	409a      	lsls	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d012      	beq.n	8006cae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	409a      	lsls	r2, r3
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	f043 0202 	orr.w	r2, r3, #2
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	409a      	lsls	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d012      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	409a      	lsls	r2, r3
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cdc:	f043 0204 	orr.w	r2, r3, #4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce8:	2210      	movs	r2, #16
 8006cea:	409a      	lsls	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d043      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0308 	and.w	r3, r3, #8
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d03c      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d06:	2210      	movs	r2, #16
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d018      	beq.n	8006d4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d108      	bne.n	8006d3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d024      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
 8006d3a:	e01f      	b.n	8006d7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01b      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
 8006d4c:	e016      	b.n	8006d7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d107      	bne.n	8006d6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0208 	bic.w	r2, r2, #8
 8006d6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d80:	2220      	movs	r2, #32
 8006d82:	409a      	lsls	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 808e 	beq.w	8006eaa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 8086 	beq.w	8006eaa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006da2:	2220      	movs	r2, #32
 8006da4:	409a      	lsls	r2, r3
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	d136      	bne.n	8006e24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0216 	bic.w	r2, r2, #22
 8006dc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	695a      	ldr	r2, [r3, #20]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d103      	bne.n	8006de6 <HAL_DMA_IRQHandler+0x1da>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d007      	beq.n	8006df6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0208 	bic.w	r2, r2, #8
 8006df4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfa:	223f      	movs	r2, #63	; 0x3f
 8006dfc:	409a      	lsls	r2, r3
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d07d      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
        }
        return;
 8006e22:	e078      	b.n	8006f16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d01c      	beq.n	8006e6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d108      	bne.n	8006e52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d030      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	4798      	blx	r3
 8006e50:	e02b      	b.n	8006eaa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d027      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
 8006e62:	e022      	b.n	8006eaa <HAL_DMA_IRQHandler+0x29e>
 8006e64:	20000000 	.word	0x20000000
 8006e68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10f      	bne.n	8006e9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0210 	bic.w	r2, r2, #16
 8006e88:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d032      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d022      	beq.n	8006f04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2205      	movs	r2, #5
 8006ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0201 	bic.w	r2, r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	60bb      	str	r3, [r7, #8]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d307      	bcc.n	8006ef2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1f2      	bne.n	8006ed6 <HAL_DMA_IRQHandler+0x2ca>
 8006ef0:	e000      	b.n	8006ef4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006ef2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
 8006f14:	e000      	b.n	8006f18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006f16:	bf00      	nop
    }
  }
}
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop

08006f20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2b40      	cmp	r3, #64	; 0x40
 8006f4c:	d108      	bne.n	8006f60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f5e:	e007      	b.n	8006f70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	60da      	str	r2, [r3, #12]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	3b10      	subs	r3, #16
 8006f8c:	4a14      	ldr	r2, [pc, #80]	; (8006fe0 <DMA_CalcBaseAndBitshift+0x64>)
 8006f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f92:	091b      	lsrs	r3, r3, #4
 8006f94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006f96:	4a13      	ldr	r2, [pc, #76]	; (8006fe4 <DMA_CalcBaseAndBitshift+0x68>)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d909      	bls.n	8006fbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006fb2:	f023 0303 	bic.w	r3, r3, #3
 8006fb6:	1d1a      	adds	r2, r3, #4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	659a      	str	r2, [r3, #88]	; 0x58
 8006fbc:	e007      	b.n	8006fce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	aaaaaaab 	.word	0xaaaaaaab
 8006fe4:	08010390 	.word	0x08010390

08006fe8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d11f      	bne.n	8007042 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b03      	cmp	r3, #3
 8007006:	d855      	bhi.n	80070b4 <DMA_CheckFifoParam+0xcc>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <DMA_CheckFifoParam+0x28>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007021 	.word	0x08007021
 8007014:	08007033 	.word	0x08007033
 8007018:	08007021 	.word	0x08007021
 800701c:	080070b5 	.word	0x080070b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d045      	beq.n	80070b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007030:	e042      	b.n	80070b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800703a:	d13f      	bne.n	80070bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007040:	e03c      	b.n	80070bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800704a:	d121      	bne.n	8007090 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b03      	cmp	r3, #3
 8007050:	d836      	bhi.n	80070c0 <DMA_CheckFifoParam+0xd8>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <DMA_CheckFifoParam+0x70>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007069 	.word	0x08007069
 800705c:	0800706f 	.word	0x0800706f
 8007060:	08007069 	.word	0x08007069
 8007064:	08007081 	.word	0x08007081
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	73fb      	strb	r3, [r7, #15]
      break;
 800706c:	e02f      	b.n	80070ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d024      	beq.n	80070c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800707e:	e021      	b.n	80070c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007088:	d11e      	bne.n	80070c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800708e:	e01b      	b.n	80070c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d902      	bls.n	800709c <DMA_CheckFifoParam+0xb4>
 8007096:	2b03      	cmp	r3, #3
 8007098:	d003      	beq.n	80070a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800709a:	e018      	b.n	80070ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
      break;
 80070a0:	e015      	b.n	80070ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00e      	beq.n	80070cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	73fb      	strb	r3, [r7, #15]
      break;
 80070b2:	e00b      	b.n	80070cc <DMA_CheckFifoParam+0xe4>
      break;
 80070b4:	bf00      	nop
 80070b6:	e00a      	b.n	80070ce <DMA_CheckFifoParam+0xe6>
      break;
 80070b8:	bf00      	nop
 80070ba:	e008      	b.n	80070ce <DMA_CheckFifoParam+0xe6>
      break;
 80070bc:	bf00      	nop
 80070be:	e006      	b.n	80070ce <DMA_CheckFifoParam+0xe6>
      break;
 80070c0:	bf00      	nop
 80070c2:	e004      	b.n	80070ce <DMA_CheckFifoParam+0xe6>
      break;
 80070c4:	bf00      	nop
 80070c6:	e002      	b.n	80070ce <DMA_CheckFifoParam+0xe6>
      break;   
 80070c8:	bf00      	nop
 80070ca:	e000      	b.n	80070ce <DMA_CheckFifoParam+0xe6>
      break;
 80070cc:	bf00      	nop
    }
  } 
  
  return status; 
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80070ee:	4b23      	ldr	r3, [pc, #140]	; (800717c <HAL_FLASH_Program+0xa0>)
 80070f0:	7e1b      	ldrb	r3, [r3, #24]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_FLASH_Program+0x1e>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e03b      	b.n	8007172 <HAL_FLASH_Program+0x96>
 80070fa:	4b20      	ldr	r3, [pc, #128]	; (800717c <HAL_FLASH_Program+0xa0>)
 80070fc:	2201      	movs	r2, #1
 80070fe:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007100:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007104:	f000 f870 	bl	80071e8 <FLASH_WaitForLastOperation>
 8007108:	4603      	mov	r3, r0
 800710a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d12b      	bne.n	800716a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007118:	783b      	ldrb	r3, [r7, #0]
 800711a:	4619      	mov	r1, r3
 800711c:	68b8      	ldr	r0, [r7, #8]
 800711e:	f000 f919 	bl	8007354 <FLASH_Program_Byte>
 8007122:	e016      	b.n	8007152 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d105      	bne.n	8007136 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800712a:	883b      	ldrh	r3, [r7, #0]
 800712c:	4619      	mov	r1, r3
 800712e:	68b8      	ldr	r0, [r7, #8]
 8007130:	f000 f8ec 	bl	800730c <FLASH_Program_HalfWord>
 8007134:	e00d      	b.n	8007152 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d105      	bne.n	8007148 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	4619      	mov	r1, r3
 8007140:	68b8      	ldr	r0, [r7, #8]
 8007142:	f000 f8c1 	bl	80072c8 <FLASH_Program_Word>
 8007146:	e004      	b.n	8007152 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800714c:	68b8      	ldr	r0, [r7, #8]
 800714e:	f000 f88b 	bl	8007268 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007152:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007156:	f000 f847 	bl	80071e8 <FLASH_WaitForLastOperation>
 800715a:	4603      	mov	r3, r0
 800715c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800715e:	4b08      	ldr	r3, [pc, #32]	; (8007180 <HAL_FLASH_Program+0xa4>)
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	4a07      	ldr	r2, [pc, #28]	; (8007180 <HAL_FLASH_Program+0xa4>)
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800716a:	4b04      	ldr	r3, [pc, #16]	; (800717c <HAL_FLASH_Program+0xa0>)
 800716c:	2200      	movs	r2, #0
 800716e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007170:	7dfb      	ldrb	r3, [r7, #23]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20001c14 	.word	0x20001c14
 8007180:	40023c00 	.word	0x40023c00

08007184 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800718e:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <HAL_FLASH_Unlock+0x38>)
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	da0b      	bge.n	80071ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <HAL_FLASH_Unlock+0x38>)
 8007198:	4a09      	ldr	r2, [pc, #36]	; (80071c0 <HAL_FLASH_Unlock+0x3c>)
 800719a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800719c:	4b07      	ldr	r3, [pc, #28]	; (80071bc <HAL_FLASH_Unlock+0x38>)
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <HAL_FLASH_Unlock+0x40>)
 80071a0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80071a2:	4b06      	ldr	r3, [pc, #24]	; (80071bc <HAL_FLASH_Unlock+0x38>)
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	da01      	bge.n	80071ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80071ae:	79fb      	ldrb	r3, [r7, #7]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	40023c00 	.word	0x40023c00
 80071c0:	45670123 	.word	0x45670123
 80071c4:	cdef89ab 	.word	0xcdef89ab

080071c8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80071c8:	b480      	push	{r7}
 80071ca:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <HAL_FLASH_Lock+0x1c>)
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	4a04      	ldr	r2, [pc, #16]	; (80071e4 <HAL_FLASH_Lock+0x1c>)
 80071d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071d6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	40023c00 	.word	0x40023c00

080071e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80071f4:	4b1a      	ldr	r3, [pc, #104]	; (8007260 <FLASH_WaitForLastOperation+0x78>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80071fa:	f7fe fdef 	bl	8005ddc <HAL_GetTick>
 80071fe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007200:	e010      	b.n	8007224 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007208:	d00c      	beq.n	8007224 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <FLASH_WaitForLastOperation+0x38>
 8007210:	f7fe fde4 	bl	8005ddc <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	d201      	bcs.n	8007224 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e019      	b.n	8007258 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007224:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <FLASH_WaitForLastOperation+0x7c>)
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e8      	bne.n	8007202 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007230:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <FLASH_WaitForLastOperation+0x7c>)
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800723c:	4b09      	ldr	r3, [pc, #36]	; (8007264 <FLASH_WaitForLastOperation+0x7c>)
 800723e:	2201      	movs	r2, #1
 8007240:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007242:	4b08      	ldr	r3, [pc, #32]	; (8007264 <FLASH_WaitForLastOperation+0x7c>)
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800724e:	f000 f8a3 	bl	8007398 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007256:	2300      	movs	r3, #0
  
}  
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20001c14 	.word	0x20001c14
 8007264:	40023c00 	.word	0x40023c00

08007268 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007268:	b490      	push	{r4, r7}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007274:	4b13      	ldr	r3, [pc, #76]	; (80072c4 <FLASH_Program_DoubleWord+0x5c>)
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	4a12      	ldr	r2, [pc, #72]	; (80072c4 <FLASH_Program_DoubleWord+0x5c>)
 800727a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007280:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <FLASH_Program_DoubleWord+0x5c>)
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	4a0f      	ldr	r2, [pc, #60]	; (80072c4 <FLASH_Program_DoubleWord+0x5c>)
 8007286:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800728a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800728c:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <FLASH_Program_DoubleWord+0x5c>)
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	4a0c      	ldr	r2, [pc, #48]	; (80072c4 <FLASH_Program_DoubleWord+0x5c>)
 8007292:	f043 0301 	orr.w	r3, r3, #1
 8007296:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800729e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80072a2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80072a6:	f04f 0300 	mov.w	r3, #0
 80072aa:	f04f 0400 	mov.w	r4, #0
 80072ae:	0013      	movs	r3, r2
 80072b0:	2400      	movs	r4, #0
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	3204      	adds	r2, #4
 80072b6:	6013      	str	r3, [r2, #0]
}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc90      	pop	{r4, r7}
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	40023c00 	.word	0x40023c00

080072c8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80072d2:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <FLASH_Program_Word+0x40>)
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	4a0c      	ldr	r2, [pc, #48]	; (8007308 <FLASH_Program_Word+0x40>)
 80072d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80072de:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <FLASH_Program_Word+0x40>)
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	4a09      	ldr	r2, [pc, #36]	; (8007308 <FLASH_Program_Word+0x40>)
 80072e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80072ea:	4b07      	ldr	r3, [pc, #28]	; (8007308 <FLASH_Program_Word+0x40>)
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	4a06      	ldr	r2, [pc, #24]	; (8007308 <FLASH_Program_Word+0x40>)
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	601a      	str	r2, [r3, #0]
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	40023c00 	.word	0x40023c00

0800730c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007318:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <FLASH_Program_HalfWord+0x44>)
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	4a0c      	ldr	r2, [pc, #48]	; (8007350 <FLASH_Program_HalfWord+0x44>)
 800731e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007322:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007324:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <FLASH_Program_HalfWord+0x44>)
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	4a09      	ldr	r2, [pc, #36]	; (8007350 <FLASH_Program_HalfWord+0x44>)
 800732a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800732e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <FLASH_Program_HalfWord+0x44>)
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	4a06      	ldr	r2, [pc, #24]	; (8007350 <FLASH_Program_HalfWord+0x44>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	887a      	ldrh	r2, [r7, #2]
 8007340:	801a      	strh	r2, [r3, #0]
}
 8007342:	bf00      	nop
 8007344:	370c      	adds	r7, #12
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40023c00 	.word	0x40023c00

08007354 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007360:	4b0c      	ldr	r3, [pc, #48]	; (8007394 <FLASH_Program_Byte+0x40>)
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	4a0b      	ldr	r2, [pc, #44]	; (8007394 <FLASH_Program_Byte+0x40>)
 8007366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800736a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800736c:	4b09      	ldr	r3, [pc, #36]	; (8007394 <FLASH_Program_Byte+0x40>)
 800736e:	4a09      	ldr	r2, [pc, #36]	; (8007394 <FLASH_Program_Byte+0x40>)
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007374:	4b07      	ldr	r3, [pc, #28]	; (8007394 <FLASH_Program_Byte+0x40>)
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	4a06      	ldr	r2, [pc, #24]	; (8007394 <FLASH_Program_Byte+0x40>)
 800737a:	f043 0301 	orr.w	r3, r3, #1
 800737e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	701a      	strb	r2, [r3, #0]
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	40023c00 	.word	0x40023c00

08007398 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800739c:	4b27      	ldr	r3, [pc, #156]	; (800743c <FLASH_SetErrorCode+0xa4>)
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d008      	beq.n	80073ba <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80073a8:	4b25      	ldr	r3, [pc, #148]	; (8007440 <FLASH_SetErrorCode+0xa8>)
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f043 0310 	orr.w	r3, r3, #16
 80073b0:	4a23      	ldr	r2, [pc, #140]	; (8007440 <FLASH_SetErrorCode+0xa8>)
 80073b2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80073b4:	4b21      	ldr	r3, [pc, #132]	; (800743c <FLASH_SetErrorCode+0xa4>)
 80073b6:	2210      	movs	r2, #16
 80073b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80073ba:	4b20      	ldr	r3, [pc, #128]	; (800743c <FLASH_SetErrorCode+0xa4>)
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d008      	beq.n	80073d8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80073c6:	4b1e      	ldr	r3, [pc, #120]	; (8007440 <FLASH_SetErrorCode+0xa8>)
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	f043 0308 	orr.w	r3, r3, #8
 80073ce:	4a1c      	ldr	r2, [pc, #112]	; (8007440 <FLASH_SetErrorCode+0xa8>)
 80073d0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80073d2:	4b1a      	ldr	r3, [pc, #104]	; (800743c <FLASH_SetErrorCode+0xa4>)
 80073d4:	2220      	movs	r2, #32
 80073d6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80073d8:	4b18      	ldr	r3, [pc, #96]	; (800743c <FLASH_SetErrorCode+0xa4>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80073e4:	4b16      	ldr	r3, [pc, #88]	; (8007440 <FLASH_SetErrorCode+0xa8>)
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	f043 0304 	orr.w	r3, r3, #4
 80073ec:	4a14      	ldr	r2, [pc, #80]	; (8007440 <FLASH_SetErrorCode+0xa8>)
 80073ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80073f0:	4b12      	ldr	r3, [pc, #72]	; (800743c <FLASH_SetErrorCode+0xa4>)
 80073f2:	2240      	movs	r2, #64	; 0x40
 80073f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80073f6:	4b11      	ldr	r3, [pc, #68]	; (800743c <FLASH_SetErrorCode+0xa4>)
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d008      	beq.n	8007414 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007402:	4b0f      	ldr	r3, [pc, #60]	; (8007440 <FLASH_SetErrorCode+0xa8>)
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	f043 0302 	orr.w	r3, r3, #2
 800740a:	4a0d      	ldr	r2, [pc, #52]	; (8007440 <FLASH_SetErrorCode+0xa8>)
 800740c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800740e:	4b0b      	ldr	r3, [pc, #44]	; (800743c <FLASH_SetErrorCode+0xa4>)
 8007410:	2280      	movs	r2, #128	; 0x80
 8007412:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007414:	4b09      	ldr	r3, [pc, #36]	; (800743c <FLASH_SetErrorCode+0xa4>)
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007420:	4b07      	ldr	r3, [pc, #28]	; (8007440 <FLASH_SetErrorCode+0xa8>)
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	f043 0320 	orr.w	r3, r3, #32
 8007428:	4a05      	ldr	r2, [pc, #20]	; (8007440 <FLASH_SetErrorCode+0xa8>)
 800742a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800742c:	4b03      	ldr	r3, [pc, #12]	; (800743c <FLASH_SetErrorCode+0xa4>)
 800742e:	2202      	movs	r2, #2
 8007430:	60da      	str	r2, [r3, #12]
  }
}
 8007432:	bf00      	nop
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	40023c00 	.word	0x40023c00
 8007440:	20001c14 	.word	0x20001c14

08007444 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007456:	4b31      	ldr	r3, [pc, #196]	; (800751c <HAL_FLASHEx_Erase+0xd8>)
 8007458:	7e1b      	ldrb	r3, [r3, #24]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d101      	bne.n	8007462 <HAL_FLASHEx_Erase+0x1e>
 800745e:	2302      	movs	r3, #2
 8007460:	e058      	b.n	8007514 <HAL_FLASHEx_Erase+0xd0>
 8007462:	4b2e      	ldr	r3, [pc, #184]	; (800751c <HAL_FLASHEx_Erase+0xd8>)
 8007464:	2201      	movs	r2, #1
 8007466:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007468:	f24c 3050 	movw	r0, #50000	; 0xc350
 800746c:	f7ff febc 	bl	80071e8 <FLASH_WaitForLastOperation>
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d148      	bne.n	800750c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007480:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d115      	bne.n	80074b6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	b2da      	uxtb	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	4619      	mov	r1, r3
 8007496:	4610      	mov	r0, r2
 8007498:	f000 f844 	bl	8007524 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800749c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80074a0:	f7ff fea2 	bl	80071e8 <FLASH_WaitForLastOperation>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80074a8:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <HAL_FLASHEx_Erase+0xdc>)
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	4a1c      	ldr	r2, [pc, #112]	; (8007520 <HAL_FLASHEx_Erase+0xdc>)
 80074ae:	f023 0304 	bic.w	r3, r3, #4
 80074b2:	6113      	str	r3, [r2, #16]
 80074b4:	e028      	b.n	8007508 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	60bb      	str	r3, [r7, #8]
 80074bc:	e01c      	b.n	80074f8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	4619      	mov	r1, r3
 80074c6:	68b8      	ldr	r0, [r7, #8]
 80074c8:	f000 f850 	bl	800756c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80074cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80074d0:	f7ff fe8a 	bl	80071e8 <FLASH_WaitForLastOperation>
 80074d4:	4603      	mov	r3, r0
 80074d6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80074d8:	4b11      	ldr	r3, [pc, #68]	; (8007520 <HAL_FLASHEx_Erase+0xdc>)
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	4a10      	ldr	r2, [pc, #64]	; (8007520 <HAL_FLASHEx_Erase+0xdc>)
 80074de:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80074e2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	601a      	str	r2, [r3, #0]
          break;
 80074f0:	e00a      	b.n	8007508 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	4413      	add	r3, r2
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	429a      	cmp	r2, r3
 8007506:	d3da      	bcc.n	80074be <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007508:	f000 f878 	bl	80075fc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800750c:	4b03      	ldr	r3, [pc, #12]	; (800751c <HAL_FLASHEx_Erase+0xd8>)
 800750e:	2200      	movs	r2, #0
 8007510:	761a      	strb	r2, [r3, #24]

  return status;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	20001c14 	.word	0x20001c14
 8007520:	40023c00 	.word	0x40023c00

08007524 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	6039      	str	r1, [r7, #0]
 800752e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <FLASH_MassErase+0x44>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	4a0c      	ldr	r2, [pc, #48]	; (8007568 <FLASH_MassErase+0x44>)
 8007536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800753a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <FLASH_MassErase+0x44>)
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	4a09      	ldr	r2, [pc, #36]	; (8007568 <FLASH_MassErase+0x44>)
 8007542:	f043 0304 	orr.w	r3, r3, #4
 8007546:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007548:	4b07      	ldr	r3, [pc, #28]	; (8007568 <FLASH_MassErase+0x44>)
 800754a:	691a      	ldr	r2, [r3, #16]
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	021b      	lsls	r3, r3, #8
 8007550:	4313      	orrs	r3, r2
 8007552:	4a05      	ldr	r2, [pc, #20]	; (8007568 <FLASH_MassErase+0x44>)
 8007554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007558:	6113      	str	r3, [r2, #16]
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	40023c00 	.word	0x40023c00

0800756c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d102      	bne.n	8007588 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	e010      	b.n	80075aa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007588:	78fb      	ldrb	r3, [r7, #3]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d103      	bne.n	8007596 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800758e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	e009      	b.n	80075aa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007596:	78fb      	ldrb	r3, [r7, #3]
 8007598:	2b02      	cmp	r3, #2
 800759a:	d103      	bne.n	80075a4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800759c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e002      	b.n	80075aa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80075a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80075a8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80075aa:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <FLASH_Erase_Sector+0x8c>)
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	4a12      	ldr	r2, [pc, #72]	; (80075f8 <FLASH_Erase_Sector+0x8c>)
 80075b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80075b6:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <FLASH_Erase_Sector+0x8c>)
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	490f      	ldr	r1, [pc, #60]	; (80075f8 <FLASH_Erase_Sector+0x8c>)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80075c2:	4b0d      	ldr	r3, [pc, #52]	; (80075f8 <FLASH_Erase_Sector+0x8c>)
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <FLASH_Erase_Sector+0x8c>)
 80075c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80075cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80075ce:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <FLASH_Erase_Sector+0x8c>)
 80075d0:	691a      	ldr	r2, [r3, #16]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	4313      	orrs	r3, r2
 80075d8:	4a07      	ldr	r2, [pc, #28]	; (80075f8 <FLASH_Erase_Sector+0x8c>)
 80075da:	f043 0302 	orr.w	r3, r3, #2
 80075de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80075e0:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <FLASH_Erase_Sector+0x8c>)
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	4a04      	ldr	r2, [pc, #16]	; (80075f8 <FLASH_Erase_Sector+0x8c>)
 80075e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ea:	6113      	str	r3, [r2, #16]
}
 80075ec:	bf00      	nop
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	40023c00 	.word	0x40023c00

080075fc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007600:	4b20      	ldr	r3, [pc, #128]	; (8007684 <FLASH_FlushCaches+0x88>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007608:	2b00      	cmp	r3, #0
 800760a:	d017      	beq.n	800763c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800760c:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <FLASH_FlushCaches+0x88>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <FLASH_FlushCaches+0x88>)
 8007612:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007616:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007618:	4b1a      	ldr	r3, [pc, #104]	; (8007684 <FLASH_FlushCaches+0x88>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a19      	ldr	r2, [pc, #100]	; (8007684 <FLASH_FlushCaches+0x88>)
 800761e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	4b17      	ldr	r3, [pc, #92]	; (8007684 <FLASH_FlushCaches+0x88>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a16      	ldr	r2, [pc, #88]	; (8007684 <FLASH_FlushCaches+0x88>)
 800762a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800762e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007630:	4b14      	ldr	r3, [pc, #80]	; (8007684 <FLASH_FlushCaches+0x88>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a13      	ldr	r2, [pc, #76]	; (8007684 <FLASH_FlushCaches+0x88>)
 8007636:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800763a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800763c:	4b11      	ldr	r3, [pc, #68]	; (8007684 <FLASH_FlushCaches+0x88>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007644:	2b00      	cmp	r3, #0
 8007646:	d017      	beq.n	8007678 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007648:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <FLASH_FlushCaches+0x88>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a0d      	ldr	r2, [pc, #52]	; (8007684 <FLASH_FlushCaches+0x88>)
 800764e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007652:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007654:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <FLASH_FlushCaches+0x88>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a0a      	ldr	r2, [pc, #40]	; (8007684 <FLASH_FlushCaches+0x88>)
 800765a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	4b08      	ldr	r3, [pc, #32]	; (8007684 <FLASH_FlushCaches+0x88>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a07      	ldr	r2, [pc, #28]	; (8007684 <FLASH_FlushCaches+0x88>)
 8007666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800766a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800766c:	4b05      	ldr	r3, [pc, #20]	; (8007684 <FLASH_FlushCaches+0x88>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a04      	ldr	r2, [pc, #16]	; (8007684 <FLASH_FlushCaches+0x88>)
 8007672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007676:	6013      	str	r3, [r2, #0]
  }
}
 8007678:	bf00      	nop
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40023c00 	.word	0x40023c00

08007688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007688:	b480      	push	{r7}
 800768a:	b089      	sub	sp, #36	; 0x24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007692:	2300      	movs	r3, #0
 8007694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800769a:	2300      	movs	r3, #0
 800769c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800769e:	2300      	movs	r3, #0
 80076a0:	61fb      	str	r3, [r7, #28]
 80076a2:	e16b      	b.n	800797c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80076a4:	2201      	movs	r2, #1
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4013      	ands	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	429a      	cmp	r2, r3
 80076be:	f040 815a 	bne.w	8007976 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f003 0303 	and.w	r3, r3, #3
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d005      	beq.n	80076da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d130      	bne.n	800773c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	2203      	movs	r2, #3
 80076e6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ea:	43db      	mvns	r3, r3
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	4013      	ands	r3, r2
 80076f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	4313      	orrs	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007710:	2201      	movs	r2, #1
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	43db      	mvns	r3, r3
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	4013      	ands	r3, r2
 800771e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f003 0201 	and.w	r2, r3, #1
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	fa02 f303 	lsl.w	r3, r2, r3
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	4313      	orrs	r3, r2
 8007734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69ba      	ldr	r2, [r7, #24]
 800773a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	2b03      	cmp	r3, #3
 8007746:	d017      	beq.n	8007778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	2203      	movs	r2, #3
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	43db      	mvns	r3, r3
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	4013      	ands	r3, r2
 800775e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	fa02 f303 	lsl.w	r3, r2, r3
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	4313      	orrs	r3, r2
 8007770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f003 0303 	and.w	r3, r3, #3
 8007780:	2b02      	cmp	r3, #2
 8007782:	d123      	bne.n	80077cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	08da      	lsrs	r2, r3, #3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	3208      	adds	r2, #8
 800778c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	220f      	movs	r2, #15
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	43db      	mvns	r3, r3
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	4013      	ands	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	fa02 f303 	lsl.w	r3, r2, r3
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	08da      	lsrs	r2, r3, #3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3208      	adds	r2, #8
 80077c6:	69b9      	ldr	r1, [r7, #24]
 80077c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	2203      	movs	r2, #3
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	43db      	mvns	r3, r3
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	4013      	ands	r3, r2
 80077e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f003 0203 	and.w	r2, r3, #3
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 80b4 	beq.w	8007976 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	4b5f      	ldr	r3, [pc, #380]	; (8007990 <HAL_GPIO_Init+0x308>)
 8007814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007816:	4a5e      	ldr	r2, [pc, #376]	; (8007990 <HAL_GPIO_Init+0x308>)
 8007818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800781c:	6453      	str	r3, [r2, #68]	; 0x44
 800781e:	4b5c      	ldr	r3, [pc, #368]	; (8007990 <HAL_GPIO_Init+0x308>)
 8007820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800782a:	4a5a      	ldr	r2, [pc, #360]	; (8007994 <HAL_GPIO_Init+0x30c>)
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	089b      	lsrs	r3, r3, #2
 8007830:	3302      	adds	r3, #2
 8007832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f003 0303 	and.w	r3, r3, #3
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	220f      	movs	r2, #15
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	43db      	mvns	r3, r3
 8007848:	69ba      	ldr	r2, [r7, #24]
 800784a:	4013      	ands	r3, r2
 800784c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a51      	ldr	r2, [pc, #324]	; (8007998 <HAL_GPIO_Init+0x310>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d02b      	beq.n	80078ae <HAL_GPIO_Init+0x226>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a50      	ldr	r2, [pc, #320]	; (800799c <HAL_GPIO_Init+0x314>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d025      	beq.n	80078aa <HAL_GPIO_Init+0x222>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a4f      	ldr	r2, [pc, #316]	; (80079a0 <HAL_GPIO_Init+0x318>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d01f      	beq.n	80078a6 <HAL_GPIO_Init+0x21e>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a4e      	ldr	r2, [pc, #312]	; (80079a4 <HAL_GPIO_Init+0x31c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d019      	beq.n	80078a2 <HAL_GPIO_Init+0x21a>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a4d      	ldr	r2, [pc, #308]	; (80079a8 <HAL_GPIO_Init+0x320>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <HAL_GPIO_Init+0x216>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a4c      	ldr	r2, [pc, #304]	; (80079ac <HAL_GPIO_Init+0x324>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00d      	beq.n	800789a <HAL_GPIO_Init+0x212>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a4b      	ldr	r2, [pc, #300]	; (80079b0 <HAL_GPIO_Init+0x328>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d007      	beq.n	8007896 <HAL_GPIO_Init+0x20e>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4a4a      	ldr	r2, [pc, #296]	; (80079b4 <HAL_GPIO_Init+0x32c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d101      	bne.n	8007892 <HAL_GPIO_Init+0x20a>
 800788e:	2307      	movs	r3, #7
 8007890:	e00e      	b.n	80078b0 <HAL_GPIO_Init+0x228>
 8007892:	2308      	movs	r3, #8
 8007894:	e00c      	b.n	80078b0 <HAL_GPIO_Init+0x228>
 8007896:	2306      	movs	r3, #6
 8007898:	e00a      	b.n	80078b0 <HAL_GPIO_Init+0x228>
 800789a:	2305      	movs	r3, #5
 800789c:	e008      	b.n	80078b0 <HAL_GPIO_Init+0x228>
 800789e:	2304      	movs	r3, #4
 80078a0:	e006      	b.n	80078b0 <HAL_GPIO_Init+0x228>
 80078a2:	2303      	movs	r3, #3
 80078a4:	e004      	b.n	80078b0 <HAL_GPIO_Init+0x228>
 80078a6:	2302      	movs	r3, #2
 80078a8:	e002      	b.n	80078b0 <HAL_GPIO_Init+0x228>
 80078aa:	2301      	movs	r3, #1
 80078ac:	e000      	b.n	80078b0 <HAL_GPIO_Init+0x228>
 80078ae:	2300      	movs	r3, #0
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	f002 0203 	and.w	r2, r2, #3
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	4093      	lsls	r3, r2
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	4313      	orrs	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078c0:	4934      	ldr	r1, [pc, #208]	; (8007994 <HAL_GPIO_Init+0x30c>)
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	089b      	lsrs	r3, r3, #2
 80078c6:	3302      	adds	r3, #2
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078ce:	4b3a      	ldr	r3, [pc, #232]	; (80079b8 <HAL_GPIO_Init+0x330>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	43db      	mvns	r3, r3
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	4013      	ands	r3, r2
 80078dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80078f2:	4a31      	ldr	r2, [pc, #196]	; (80079b8 <HAL_GPIO_Init+0x330>)
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80078f8:	4b2f      	ldr	r3, [pc, #188]	; (80079b8 <HAL_GPIO_Init+0x330>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	43db      	mvns	r3, r3
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	4013      	ands	r3, r2
 8007906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	4313      	orrs	r3, r2
 800791a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800791c:	4a26      	ldr	r2, [pc, #152]	; (80079b8 <HAL_GPIO_Init+0x330>)
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007922:	4b25      	ldr	r3, [pc, #148]	; (80079b8 <HAL_GPIO_Init+0x330>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	43db      	mvns	r3, r3
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	4013      	ands	r3, r2
 8007930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	4313      	orrs	r3, r2
 8007944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007946:	4a1c      	ldr	r2, [pc, #112]	; (80079b8 <HAL_GPIO_Init+0x330>)
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800794c:	4b1a      	ldr	r3, [pc, #104]	; (80079b8 <HAL_GPIO_Init+0x330>)
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	43db      	mvns	r3, r3
 8007956:	69ba      	ldr	r2, [r7, #24]
 8007958:	4013      	ands	r3, r2
 800795a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	4313      	orrs	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007970:	4a11      	ldr	r2, [pc, #68]	; (80079b8 <HAL_GPIO_Init+0x330>)
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	3301      	adds	r3, #1
 800797a:	61fb      	str	r3, [r7, #28]
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	2b0f      	cmp	r3, #15
 8007980:	f67f ae90 	bls.w	80076a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007984:	bf00      	nop
 8007986:	3724      	adds	r7, #36	; 0x24
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	40023800 	.word	0x40023800
 8007994:	40013800 	.word	0x40013800
 8007998:	40020000 	.word	0x40020000
 800799c:	40020400 	.word	0x40020400
 80079a0:	40020800 	.word	0x40020800
 80079a4:	40020c00 	.word	0x40020c00
 80079a8:	40021000 	.word	0x40021000
 80079ac:	40021400 	.word	0x40021400
 80079b0:	40021800 	.word	0x40021800
 80079b4:	40021c00 	.word	0x40021c00
 80079b8:	40013c00 	.word	0x40013c00

080079bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80079bc:	b480      	push	{r7}
 80079be:	b085      	sub	sp, #20
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	887b      	ldrh	r3, [r7, #2]
 80079ce:	4013      	ands	r3, r2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079d4:	2301      	movs	r3, #1
 80079d6:	73fb      	strb	r3, [r7, #15]
 80079d8:	e001      	b.n	80079de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	807b      	strh	r3, [r7, #2]
 80079f8:	4613      	mov	r3, r2
 80079fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079fc:	787b      	ldrb	r3, [r7, #1]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a02:	887a      	ldrh	r2, [r7, #2]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a08:	e003      	b.n	8007a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a0a:	887b      	ldrh	r3, [r7, #2]
 8007a0c:	041a      	lsls	r2, r3, #16
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	619a      	str	r2, [r3, #24]
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
	...

08007a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e11f      	b.n	8007c72 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d106      	bne.n	8007a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fc fd58 	bl	80044fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2224      	movs	r2, #36	; 0x24
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0201 	bic.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007a84:	f000 fd44 	bl	8008510 <HAL_RCC_GetPCLK1Freq>
 8007a88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	4a7b      	ldr	r2, [pc, #492]	; (8007c7c <HAL_I2C_Init+0x25c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d807      	bhi.n	8007aa4 <HAL_I2C_Init+0x84>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4a7a      	ldr	r2, [pc, #488]	; (8007c80 <HAL_I2C_Init+0x260>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	bf94      	ite	ls
 8007a9c:	2301      	movls	r3, #1
 8007a9e:	2300      	movhi	r3, #0
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	e006      	b.n	8007ab2 <HAL_I2C_Init+0x92>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4a77      	ldr	r2, [pc, #476]	; (8007c84 <HAL_I2C_Init+0x264>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	bf94      	ite	ls
 8007aac:	2301      	movls	r3, #1
 8007aae:	2300      	movhi	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d001      	beq.n	8007aba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e0db      	b.n	8007c72 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a72      	ldr	r2, [pc, #456]	; (8007c88 <HAL_I2C_Init+0x268>)
 8007abe:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac2:	0c9b      	lsrs	r3, r3, #18
 8007ac4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	4a64      	ldr	r2, [pc, #400]	; (8007c7c <HAL_I2C_Init+0x25c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d802      	bhi.n	8007af4 <HAL_I2C_Init+0xd4>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	3301      	adds	r3, #1
 8007af2:	e009      	b.n	8007b08 <HAL_I2C_Init+0xe8>
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007afa:	fb02 f303 	mul.w	r3, r2, r3
 8007afe:	4a63      	ldr	r2, [pc, #396]	; (8007c8c <HAL_I2C_Init+0x26c>)
 8007b00:	fba2 2303 	umull	r2, r3, r2, r3
 8007b04:	099b      	lsrs	r3, r3, #6
 8007b06:	3301      	adds	r3, #1
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007b1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4956      	ldr	r1, [pc, #344]	; (8007c7c <HAL_I2C_Init+0x25c>)
 8007b24:	428b      	cmp	r3, r1
 8007b26:	d80d      	bhi.n	8007b44 <HAL_I2C_Init+0x124>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	1e59      	subs	r1, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b36:	3301      	adds	r3, #1
 8007b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	bf38      	it	cc
 8007b40:	2304      	movcc	r3, #4
 8007b42:	e04f      	b.n	8007be4 <HAL_I2C_Init+0x1c4>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d111      	bne.n	8007b70 <HAL_I2C_Init+0x150>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	1e58      	subs	r0, r3, #1
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6859      	ldr	r1, [r3, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	440b      	add	r3, r1
 8007b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b5e:	3301      	adds	r3, #1
 8007b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf0c      	ite	eq
 8007b68:	2301      	moveq	r3, #1
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	e012      	b.n	8007b96 <HAL_I2C_Init+0x176>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	1e58      	subs	r0, r3, #1
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6859      	ldr	r1, [r3, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	0099      	lsls	r1, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b86:	3301      	adds	r3, #1
 8007b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bf0c      	ite	eq
 8007b90:	2301      	moveq	r3, #1
 8007b92:	2300      	movne	r3, #0
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <HAL_I2C_Init+0x17e>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e022      	b.n	8007be4 <HAL_I2C_Init+0x1c4>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10e      	bne.n	8007bc4 <HAL_I2C_Init+0x1a4>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1e58      	subs	r0, r3, #1
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6859      	ldr	r1, [r3, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	440b      	add	r3, r1
 8007bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bb8:	3301      	adds	r3, #1
 8007bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc2:	e00f      	b.n	8007be4 <HAL_I2C_Init+0x1c4>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	1e58      	subs	r0, r3, #1
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6859      	ldr	r1, [r3, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	0099      	lsls	r1, r3, #2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bda:	3301      	adds	r3, #1
 8007bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	6809      	ldr	r1, [r1, #0]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69da      	ldr	r2, [r3, #28]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	430a      	orrs	r2, r1
 8007c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007c12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6911      	ldr	r1, [r2, #16]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	68d2      	ldr	r2, [r2, #12]
 8007c1e:	4311      	orrs	r1, r2
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	6812      	ldr	r2, [r2, #0]
 8007c24:	430b      	orrs	r3, r1
 8007c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	695a      	ldr	r2, [r3, #20]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	000186a0 	.word	0x000186a0
 8007c80:	001e847f 	.word	0x001e847f
 8007c84:	003d08ff 	.word	0x003d08ff
 8007c88:	431bde83 	.word	0x431bde83
 8007c8c:	10624dd3 	.word	0x10624dd3

08007c90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e264      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d075      	beq.n	8007d9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cae:	4ba3      	ldr	r3, [pc, #652]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 030c 	and.w	r3, r3, #12
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d00c      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cba:	4ba0      	ldr	r3, [pc, #640]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cc2:	2b08      	cmp	r3, #8
 8007cc4:	d112      	bne.n	8007cec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cc6:	4b9d      	ldr	r3, [pc, #628]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd2:	d10b      	bne.n	8007cec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cd4:	4b99      	ldr	r3, [pc, #612]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d05b      	beq.n	8007d98 <HAL_RCC_OscConfig+0x108>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d157      	bne.n	8007d98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e23f      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf4:	d106      	bne.n	8007d04 <HAL_RCC_OscConfig+0x74>
 8007cf6:	4b91      	ldr	r3, [pc, #580]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a90      	ldr	r2, [pc, #576]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	e01d      	b.n	8007d40 <HAL_RCC_OscConfig+0xb0>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d0c:	d10c      	bne.n	8007d28 <HAL_RCC_OscConfig+0x98>
 8007d0e:	4b8b      	ldr	r3, [pc, #556]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a8a      	ldr	r2, [pc, #552]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	4b88      	ldr	r3, [pc, #544]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a87      	ldr	r2, [pc, #540]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	e00b      	b.n	8007d40 <HAL_RCC_OscConfig+0xb0>
 8007d28:	4b84      	ldr	r3, [pc, #528]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a83      	ldr	r2, [pc, #524]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	4b81      	ldr	r3, [pc, #516]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a80      	ldr	r2, [pc, #512]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d013      	beq.n	8007d70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d48:	f7fe f848 	bl	8005ddc <HAL_GetTick>
 8007d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d4e:	e008      	b.n	8007d62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d50:	f7fe f844 	bl	8005ddc <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	2b64      	cmp	r3, #100	; 0x64
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e204      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d62:	4b76      	ldr	r3, [pc, #472]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d0f0      	beq.n	8007d50 <HAL_RCC_OscConfig+0xc0>
 8007d6e:	e014      	b.n	8007d9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d70:	f7fe f834 	bl	8005ddc <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d78:	f7fe f830 	bl	8005ddc <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b64      	cmp	r3, #100	; 0x64
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e1f0      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d8a:	4b6c      	ldr	r3, [pc, #432]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f0      	bne.n	8007d78 <HAL_RCC_OscConfig+0xe8>
 8007d96:	e000      	b.n	8007d9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d063      	beq.n	8007e6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007da6:	4b65      	ldr	r3, [pc, #404]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 030c 	and.w	r3, r3, #12
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00b      	beq.n	8007dca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007db2:	4b62      	ldr	r3, [pc, #392]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dba:	2b08      	cmp	r3, #8
 8007dbc:	d11c      	bne.n	8007df8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dbe:	4b5f      	ldr	r3, [pc, #380]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d116      	bne.n	8007df8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dca:	4b5c      	ldr	r3, [pc, #368]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <HAL_RCC_OscConfig+0x152>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d001      	beq.n	8007de2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e1c4      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de2:	4b56      	ldr	r3, [pc, #344]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	00db      	lsls	r3, r3, #3
 8007df0:	4952      	ldr	r1, [pc, #328]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007df6:	e03a      	b.n	8007e6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d020      	beq.n	8007e42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e00:	4b4f      	ldr	r3, [pc, #316]	; (8007f40 <HAL_RCC_OscConfig+0x2b0>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e06:	f7fd ffe9 	bl	8005ddc <HAL_GetTick>
 8007e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e0c:	e008      	b.n	8007e20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e0e:	f7fd ffe5 	bl	8005ddc <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d901      	bls.n	8007e20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e1a5      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e20:	4b46      	ldr	r3, [pc, #280]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0f0      	beq.n	8007e0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e2c:	4b43      	ldr	r3, [pc, #268]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	4940      	ldr	r1, [pc, #256]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	600b      	str	r3, [r1, #0]
 8007e40:	e015      	b.n	8007e6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e42:	4b3f      	ldr	r3, [pc, #252]	; (8007f40 <HAL_RCC_OscConfig+0x2b0>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e48:	f7fd ffc8 	bl	8005ddc <HAL_GetTick>
 8007e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e4e:	e008      	b.n	8007e62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e50:	f7fd ffc4 	bl	8005ddc <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e184      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e62:	4b36      	ldr	r3, [pc, #216]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f0      	bne.n	8007e50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0308 	and.w	r3, r3, #8
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d030      	beq.n	8007edc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d016      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e82:	4b30      	ldr	r3, [pc, #192]	; (8007f44 <HAL_RCC_OscConfig+0x2b4>)
 8007e84:	2201      	movs	r2, #1
 8007e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e88:	f7fd ffa8 	bl	8005ddc <HAL_GetTick>
 8007e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e8e:	e008      	b.n	8007ea2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e90:	f7fd ffa4 	bl	8005ddc <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d901      	bls.n	8007ea2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e164      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ea2:	4b26      	ldr	r3, [pc, #152]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea6:	f003 0302 	and.w	r3, r3, #2
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d0f0      	beq.n	8007e90 <HAL_RCC_OscConfig+0x200>
 8007eae:	e015      	b.n	8007edc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eb0:	4b24      	ldr	r3, [pc, #144]	; (8007f44 <HAL_RCC_OscConfig+0x2b4>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eb6:	f7fd ff91 	bl	8005ddc <HAL_GetTick>
 8007eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ebc:	e008      	b.n	8007ed0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ebe:	f7fd ff8d 	bl	8005ddc <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d901      	bls.n	8007ed0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e14d      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed0:	4b1a      	ldr	r3, [pc, #104]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f0      	bne.n	8007ebe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 80a0 	beq.w	800802a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eea:	2300      	movs	r3, #0
 8007eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eee:	4b13      	ldr	r3, [pc, #76]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10f      	bne.n	8007f1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007efa:	2300      	movs	r3, #0
 8007efc:	60bb      	str	r3, [r7, #8]
 8007efe:	4b0f      	ldr	r3, [pc, #60]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	4a0e      	ldr	r2, [pc, #56]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f08:	6413      	str	r3, [r2, #64]	; 0x40
 8007f0a:	4b0c      	ldr	r3, [pc, #48]	; (8007f3c <HAL_RCC_OscConfig+0x2ac>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f12:	60bb      	str	r3, [r7, #8]
 8007f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f16:	2301      	movs	r3, #1
 8007f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f1a:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <HAL_RCC_OscConfig+0x2b8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d121      	bne.n	8007f6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f26:	4b08      	ldr	r3, [pc, #32]	; (8007f48 <HAL_RCC_OscConfig+0x2b8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a07      	ldr	r2, [pc, #28]	; (8007f48 <HAL_RCC_OscConfig+0x2b8>)
 8007f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f32:	f7fd ff53 	bl	8005ddc <HAL_GetTick>
 8007f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f38:	e011      	b.n	8007f5e <HAL_RCC_OscConfig+0x2ce>
 8007f3a:	bf00      	nop
 8007f3c:	40023800 	.word	0x40023800
 8007f40:	42470000 	.word	0x42470000
 8007f44:	42470e80 	.word	0x42470e80
 8007f48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f4c:	f7fd ff46 	bl	8005ddc <HAL_GetTick>
 8007f50:	4602      	mov	r2, r0
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e106      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f5e:	4b85      	ldr	r3, [pc, #532]	; (8008174 <HAL_RCC_OscConfig+0x4e4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0f0      	beq.n	8007f4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d106      	bne.n	8007f80 <HAL_RCC_OscConfig+0x2f0>
 8007f72:	4b81      	ldr	r3, [pc, #516]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f76:	4a80      	ldr	r2, [pc, #512]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f7e:	e01c      	b.n	8007fba <HAL_RCC_OscConfig+0x32a>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	2b05      	cmp	r3, #5
 8007f86:	d10c      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x312>
 8007f88:	4b7b      	ldr	r3, [pc, #492]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8c:	4a7a      	ldr	r2, [pc, #488]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007f8e:	f043 0304 	orr.w	r3, r3, #4
 8007f92:	6713      	str	r3, [r2, #112]	; 0x70
 8007f94:	4b78      	ldr	r3, [pc, #480]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f98:	4a77      	ldr	r2, [pc, #476]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007f9a:	f043 0301 	orr.w	r3, r3, #1
 8007f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa0:	e00b      	b.n	8007fba <HAL_RCC_OscConfig+0x32a>
 8007fa2:	4b75      	ldr	r3, [pc, #468]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa6:	4a74      	ldr	r2, [pc, #464]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007fa8:	f023 0301 	bic.w	r3, r3, #1
 8007fac:	6713      	str	r3, [r2, #112]	; 0x70
 8007fae:	4b72      	ldr	r3, [pc, #456]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb2:	4a71      	ldr	r2, [pc, #452]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007fb4:	f023 0304 	bic.w	r3, r3, #4
 8007fb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d015      	beq.n	8007fee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc2:	f7fd ff0b 	bl	8005ddc <HAL_GetTick>
 8007fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fc8:	e00a      	b.n	8007fe0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fca:	f7fd ff07 	bl	8005ddc <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d901      	bls.n	8007fe0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e0c5      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe0:	4b65      	ldr	r3, [pc, #404]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8007fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0ee      	beq.n	8007fca <HAL_RCC_OscConfig+0x33a>
 8007fec:	e014      	b.n	8008018 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fee:	f7fd fef5 	bl	8005ddc <HAL_GetTick>
 8007ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ff4:	e00a      	b.n	800800c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ff6:	f7fd fef1 	bl	8005ddc <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	f241 3288 	movw	r2, #5000	; 0x1388
 8008004:	4293      	cmp	r3, r2
 8008006:	d901      	bls.n	800800c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e0af      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800800c:	4b5a      	ldr	r3, [pc, #360]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 800800e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1ee      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d105      	bne.n	800802a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800801e:	4b56      	ldr	r3, [pc, #344]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	4a55      	ldr	r2, [pc, #340]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8008024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008028:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 809b 	beq.w	800816a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008034:	4b50      	ldr	r3, [pc, #320]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f003 030c 	and.w	r3, r3, #12
 800803c:	2b08      	cmp	r3, #8
 800803e:	d05c      	beq.n	80080fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d141      	bne.n	80080cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008048:	4b4c      	ldr	r3, [pc, #304]	; (800817c <HAL_RCC_OscConfig+0x4ec>)
 800804a:	2200      	movs	r2, #0
 800804c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800804e:	f7fd fec5 	bl	8005ddc <HAL_GetTick>
 8008052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008054:	e008      	b.n	8008068 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008056:	f7fd fec1 	bl	8005ddc <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	2b02      	cmp	r3, #2
 8008062:	d901      	bls.n	8008068 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008064:	2303      	movs	r3, #3
 8008066:	e081      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008068:	4b43      	ldr	r3, [pc, #268]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1f0      	bne.n	8008056 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	69da      	ldr	r2, [r3, #28]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	019b      	lsls	r3, r3, #6
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808a:	085b      	lsrs	r3, r3, #1
 800808c:	3b01      	subs	r3, #1
 800808e:	041b      	lsls	r3, r3, #16
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008096:	061b      	lsls	r3, r3, #24
 8008098:	4937      	ldr	r1, [pc, #220]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 800809a:	4313      	orrs	r3, r2
 800809c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800809e:	4b37      	ldr	r3, [pc, #220]	; (800817c <HAL_RCC_OscConfig+0x4ec>)
 80080a0:	2201      	movs	r2, #1
 80080a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a4:	f7fd fe9a 	bl	8005ddc <HAL_GetTick>
 80080a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080aa:	e008      	b.n	80080be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080ac:	f7fd fe96 	bl	8005ddc <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e056      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080be:	4b2e      	ldr	r3, [pc, #184]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0f0      	beq.n	80080ac <HAL_RCC_OscConfig+0x41c>
 80080ca:	e04e      	b.n	800816a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080cc:	4b2b      	ldr	r3, [pc, #172]	; (800817c <HAL_RCC_OscConfig+0x4ec>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d2:	f7fd fe83 	bl	8005ddc <HAL_GetTick>
 80080d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080d8:	e008      	b.n	80080ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080da:	f7fd fe7f 	bl	8005ddc <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d901      	bls.n	80080ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e03f      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ec:	4b22      	ldr	r3, [pc, #136]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1f0      	bne.n	80080da <HAL_RCC_OscConfig+0x44a>
 80080f8:	e037      	b.n	800816a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e032      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008106:	4b1c      	ldr	r3, [pc, #112]	; (8008178 <HAL_RCC_OscConfig+0x4e8>)
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d028      	beq.n	8008166 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800811e:	429a      	cmp	r2, r3
 8008120:	d121      	bne.n	8008166 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800812c:	429a      	cmp	r2, r3
 800812e:	d11a      	bne.n	8008166 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008136:	4013      	ands	r3, r2
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800813c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800813e:	4293      	cmp	r3, r2
 8008140:	d111      	bne.n	8008166 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	085b      	lsrs	r3, r3, #1
 800814e:	3b01      	subs	r3, #1
 8008150:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008152:	429a      	cmp	r2, r3
 8008154:	d107      	bne.n	8008166 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008162:	429a      	cmp	r2, r3
 8008164:	d001      	beq.n	800816a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40007000 	.word	0x40007000
 8008178:	40023800 	.word	0x40023800
 800817c:	42470060 	.word	0x42470060

08008180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e0cc      	b.n	800832e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008194:	4b68      	ldr	r3, [pc, #416]	; (8008338 <HAL_RCC_ClockConfig+0x1b8>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d90c      	bls.n	80081bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081a2:	4b65      	ldr	r3, [pc, #404]	; (8008338 <HAL_RCC_ClockConfig+0x1b8>)
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081aa:	4b63      	ldr	r3, [pc, #396]	; (8008338 <HAL_RCC_ClockConfig+0x1b8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0307 	and.w	r3, r3, #7
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d001      	beq.n	80081bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e0b8      	b.n	800832e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d020      	beq.n	800820a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d005      	beq.n	80081e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081d4:	4b59      	ldr	r3, [pc, #356]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	4a58      	ldr	r2, [pc, #352]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 80081da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081ec:	4b53      	ldr	r3, [pc, #332]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	4a52      	ldr	r2, [pc, #328]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 80081f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081f8:	4b50      	ldr	r3, [pc, #320]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	494d      	ldr	r1, [pc, #308]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 8008206:	4313      	orrs	r3, r2
 8008208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	d044      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d107      	bne.n	800822e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800821e:	4b47      	ldr	r3, [pc, #284]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d119      	bne.n	800825e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e07f      	b.n	800832e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d003      	beq.n	800823e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800823a:	2b03      	cmp	r3, #3
 800823c:	d107      	bne.n	800824e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800823e:	4b3f      	ldr	r3, [pc, #252]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d109      	bne.n	800825e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e06f      	b.n	800832e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800824e:	4b3b      	ldr	r3, [pc, #236]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e067      	b.n	800832e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800825e:	4b37      	ldr	r3, [pc, #220]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f023 0203 	bic.w	r2, r3, #3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	4934      	ldr	r1, [pc, #208]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 800826c:	4313      	orrs	r3, r2
 800826e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008270:	f7fd fdb4 	bl	8005ddc <HAL_GetTick>
 8008274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008276:	e00a      	b.n	800828e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008278:	f7fd fdb0 	bl	8005ddc <HAL_GetTick>
 800827c:	4602      	mov	r2, r0
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	f241 3288 	movw	r2, #5000	; 0x1388
 8008286:	4293      	cmp	r3, r2
 8008288:	d901      	bls.n	800828e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e04f      	b.n	800832e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800828e:	4b2b      	ldr	r3, [pc, #172]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f003 020c 	and.w	r2, r3, #12
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	429a      	cmp	r2, r3
 800829e:	d1eb      	bne.n	8008278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082a0:	4b25      	ldr	r3, [pc, #148]	; (8008338 <HAL_RCC_ClockConfig+0x1b8>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	683a      	ldr	r2, [r7, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d20c      	bcs.n	80082c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ae:	4b22      	ldr	r3, [pc, #136]	; (8008338 <HAL_RCC_ClockConfig+0x1b8>)
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082b6:	4b20      	ldr	r3, [pc, #128]	; (8008338 <HAL_RCC_ClockConfig+0x1b8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0307 	and.w	r3, r3, #7
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d001      	beq.n	80082c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e032      	b.n	800832e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d008      	beq.n	80082e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082d4:	4b19      	ldr	r3, [pc, #100]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	4916      	ldr	r1, [pc, #88]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0308 	and.w	r3, r3, #8
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d009      	beq.n	8008306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082f2:	4b12      	ldr	r3, [pc, #72]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	00db      	lsls	r3, r3, #3
 8008300:	490e      	ldr	r1, [pc, #56]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 8008302:	4313      	orrs	r3, r2
 8008304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008306:	f000 f821 	bl	800834c <HAL_RCC_GetSysClockFreq>
 800830a:	4601      	mov	r1, r0
 800830c:	4b0b      	ldr	r3, [pc, #44]	; (800833c <HAL_RCC_ClockConfig+0x1bc>)
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	091b      	lsrs	r3, r3, #4
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	4a0a      	ldr	r2, [pc, #40]	; (8008340 <HAL_RCC_ClockConfig+0x1c0>)
 8008318:	5cd3      	ldrb	r3, [r2, r3]
 800831a:	fa21 f303 	lsr.w	r3, r1, r3
 800831e:	4a09      	ldr	r2, [pc, #36]	; (8008344 <HAL_RCC_ClockConfig+0x1c4>)
 8008320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008322:	4b09      	ldr	r3, [pc, #36]	; (8008348 <HAL_RCC_ClockConfig+0x1c8>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4618      	mov	r0, r3
 8008328:	f7fd fd14 	bl	8005d54 <HAL_InitTick>

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40023c00 	.word	0x40023c00
 800833c:	40023800 	.word	0x40023800
 8008340:	08010378 	.word	0x08010378
 8008344:	20000000 	.word	0x20000000
 8008348:	20000004 	.word	0x20000004

0800834c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800834c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	607b      	str	r3, [r7, #4]
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	2300      	movs	r3, #0
 800835c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008362:	4b63      	ldr	r3, [pc, #396]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f003 030c 	and.w	r3, r3, #12
 800836a:	2b04      	cmp	r3, #4
 800836c:	d007      	beq.n	800837e <HAL_RCC_GetSysClockFreq+0x32>
 800836e:	2b08      	cmp	r3, #8
 8008370:	d008      	beq.n	8008384 <HAL_RCC_GetSysClockFreq+0x38>
 8008372:	2b00      	cmp	r3, #0
 8008374:	f040 80b4 	bne.w	80084e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008378:	4b5e      	ldr	r3, [pc, #376]	; (80084f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800837a:	60bb      	str	r3, [r7, #8]
       break;
 800837c:	e0b3      	b.n	80084e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800837e:	4b5d      	ldr	r3, [pc, #372]	; (80084f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008380:	60bb      	str	r3, [r7, #8]
      break;
 8008382:	e0b0      	b.n	80084e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008384:	4b5a      	ldr	r3, [pc, #360]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800838c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800838e:	4b58      	ldr	r3, [pc, #352]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d04a      	beq.n	8008430 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800839a:	4b55      	ldr	r3, [pc, #340]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	099b      	lsrs	r3, r3, #6
 80083a0:	f04f 0400 	mov.w	r4, #0
 80083a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	ea03 0501 	and.w	r5, r3, r1
 80083b0:	ea04 0602 	and.w	r6, r4, r2
 80083b4:	4629      	mov	r1, r5
 80083b6:	4632      	mov	r2, r6
 80083b8:	f04f 0300 	mov.w	r3, #0
 80083bc:	f04f 0400 	mov.w	r4, #0
 80083c0:	0154      	lsls	r4, r2, #5
 80083c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80083c6:	014b      	lsls	r3, r1, #5
 80083c8:	4619      	mov	r1, r3
 80083ca:	4622      	mov	r2, r4
 80083cc:	1b49      	subs	r1, r1, r5
 80083ce:	eb62 0206 	sbc.w	r2, r2, r6
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	f04f 0400 	mov.w	r4, #0
 80083da:	0194      	lsls	r4, r2, #6
 80083dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80083e0:	018b      	lsls	r3, r1, #6
 80083e2:	1a5b      	subs	r3, r3, r1
 80083e4:	eb64 0402 	sbc.w	r4, r4, r2
 80083e8:	f04f 0100 	mov.w	r1, #0
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	00e2      	lsls	r2, r4, #3
 80083f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80083f6:	00d9      	lsls	r1, r3, #3
 80083f8:	460b      	mov	r3, r1
 80083fa:	4614      	mov	r4, r2
 80083fc:	195b      	adds	r3, r3, r5
 80083fe:	eb44 0406 	adc.w	r4, r4, r6
 8008402:	f04f 0100 	mov.w	r1, #0
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	02a2      	lsls	r2, r4, #10
 800840c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008410:	0299      	lsls	r1, r3, #10
 8008412:	460b      	mov	r3, r1
 8008414:	4614      	mov	r4, r2
 8008416:	4618      	mov	r0, r3
 8008418:	4621      	mov	r1, r4
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f04f 0400 	mov.w	r4, #0
 8008420:	461a      	mov	r2, r3
 8008422:	4623      	mov	r3, r4
 8008424:	f7f8 fc30 	bl	8000c88 <__aeabi_uldivmod>
 8008428:	4603      	mov	r3, r0
 800842a:	460c      	mov	r4, r1
 800842c:	60fb      	str	r3, [r7, #12]
 800842e:	e049      	b.n	80084c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008430:	4b2f      	ldr	r3, [pc, #188]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	099b      	lsrs	r3, r3, #6
 8008436:	f04f 0400 	mov.w	r4, #0
 800843a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800843e:	f04f 0200 	mov.w	r2, #0
 8008442:	ea03 0501 	and.w	r5, r3, r1
 8008446:	ea04 0602 	and.w	r6, r4, r2
 800844a:	4629      	mov	r1, r5
 800844c:	4632      	mov	r2, r6
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	f04f 0400 	mov.w	r4, #0
 8008456:	0154      	lsls	r4, r2, #5
 8008458:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800845c:	014b      	lsls	r3, r1, #5
 800845e:	4619      	mov	r1, r3
 8008460:	4622      	mov	r2, r4
 8008462:	1b49      	subs	r1, r1, r5
 8008464:	eb62 0206 	sbc.w	r2, r2, r6
 8008468:	f04f 0300 	mov.w	r3, #0
 800846c:	f04f 0400 	mov.w	r4, #0
 8008470:	0194      	lsls	r4, r2, #6
 8008472:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008476:	018b      	lsls	r3, r1, #6
 8008478:	1a5b      	subs	r3, r3, r1
 800847a:	eb64 0402 	sbc.w	r4, r4, r2
 800847e:	f04f 0100 	mov.w	r1, #0
 8008482:	f04f 0200 	mov.w	r2, #0
 8008486:	00e2      	lsls	r2, r4, #3
 8008488:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800848c:	00d9      	lsls	r1, r3, #3
 800848e:	460b      	mov	r3, r1
 8008490:	4614      	mov	r4, r2
 8008492:	195b      	adds	r3, r3, r5
 8008494:	eb44 0406 	adc.w	r4, r4, r6
 8008498:	f04f 0100 	mov.w	r1, #0
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	02a2      	lsls	r2, r4, #10
 80084a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80084a6:	0299      	lsls	r1, r3, #10
 80084a8:	460b      	mov	r3, r1
 80084aa:	4614      	mov	r4, r2
 80084ac:	4618      	mov	r0, r3
 80084ae:	4621      	mov	r1, r4
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f04f 0400 	mov.w	r4, #0
 80084b6:	461a      	mov	r2, r3
 80084b8:	4623      	mov	r3, r4
 80084ba:	f7f8 fbe5 	bl	8000c88 <__aeabi_uldivmod>
 80084be:	4603      	mov	r3, r0
 80084c0:	460c      	mov	r4, r1
 80084c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80084c4:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	0c1b      	lsrs	r3, r3, #16
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	3301      	adds	r3, #1
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084dc:	60bb      	str	r3, [r7, #8]
      break;
 80084de:	e002      	b.n	80084e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084e0:	4b04      	ldr	r3, [pc, #16]	; (80084f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80084e2:	60bb      	str	r3, [r7, #8]
      break;
 80084e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084e6:	68bb      	ldr	r3, [r7, #8]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f0:	40023800 	.word	0x40023800
 80084f4:	00f42400 	.word	0x00f42400

080084f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084f8:	b480      	push	{r7}
 80084fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084fc:	4b03      	ldr	r3, [pc, #12]	; (800850c <HAL_RCC_GetHCLKFreq+0x14>)
 80084fe:	681b      	ldr	r3, [r3, #0]
}
 8008500:	4618      	mov	r0, r3
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	20000000 	.word	0x20000000

08008510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008514:	f7ff fff0 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 8008518:	4601      	mov	r1, r0
 800851a:	4b05      	ldr	r3, [pc, #20]	; (8008530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	0a9b      	lsrs	r3, r3, #10
 8008520:	f003 0307 	and.w	r3, r3, #7
 8008524:	4a03      	ldr	r2, [pc, #12]	; (8008534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008526:	5cd3      	ldrb	r3, [r2, r3]
 8008528:	fa21 f303 	lsr.w	r3, r1, r3
}
 800852c:	4618      	mov	r0, r3
 800852e:	bd80      	pop	{r7, pc}
 8008530:	40023800 	.word	0x40023800
 8008534:	08010388 	.word	0x08010388

08008538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800853c:	f7ff ffdc 	bl	80084f8 <HAL_RCC_GetHCLKFreq>
 8008540:	4601      	mov	r1, r0
 8008542:	4b05      	ldr	r3, [pc, #20]	; (8008558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	0b5b      	lsrs	r3, r3, #13
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	4a03      	ldr	r2, [pc, #12]	; (800855c <HAL_RCC_GetPCLK2Freq+0x24>)
 800854e:	5cd3      	ldrb	r3, [r2, r3]
 8008550:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008554:	4618      	mov	r0, r3
 8008556:	bd80      	pop	{r7, pc}
 8008558:	40023800 	.word	0x40023800
 800855c:	08010388 	.word	0x08010388

08008560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e07b      	b.n	800866a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008576:	2b00      	cmp	r3, #0
 8008578:	d108      	bne.n	800858c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008582:	d009      	beq.n	8008598 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	61da      	str	r2, [r3, #28]
 800858a:	e005      	b.n	8008598 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d106      	bne.n	80085b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fb ffea 	bl	800458c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085ea:	431a      	orrs	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	431a      	orrs	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008612:	431a      	orrs	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861c:	ea42 0103 	orr.w	r1, r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008624:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	0c1b      	lsrs	r3, r3, #16
 8008636:	f003 0104 	and.w	r1, r3, #4
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	f003 0210 	and.w	r2, r3, #16
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69da      	ldr	r2, [r3, #28]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008658:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b088      	sub	sp, #32
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	603b      	str	r3, [r7, #0]
 800867e:	4613      	mov	r3, r2
 8008680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_SPI_Transmit+0x22>
 8008690:	2302      	movs	r3, #2
 8008692:	e126      	b.n	80088e2 <HAL_SPI_Transmit+0x270>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800869c:	f7fd fb9e 	bl	8005ddc <HAL_GetTick>
 80086a0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80086a2:	88fb      	ldrh	r3, [r7, #6]
 80086a4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d002      	beq.n	80086b8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80086b2:	2302      	movs	r3, #2
 80086b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80086b6:	e10b      	b.n	80088d0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <HAL_SPI_Transmit+0x52>
 80086be:	88fb      	ldrh	r3, [r7, #6]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d102      	bne.n	80086ca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80086c8:	e102      	b.n	80088d0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2203      	movs	r2, #3
 80086ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	88fa      	ldrh	r2, [r7, #6]
 80086e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	88fa      	ldrh	r2, [r7, #6]
 80086e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008710:	d10f      	bne.n	8008732 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008720:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008730:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873c:	2b40      	cmp	r3, #64	; 0x40
 800873e:	d007      	beq.n	8008750 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800874e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008758:	d14b      	bne.n	80087f2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <HAL_SPI_Transmit+0xf6>
 8008762:	8afb      	ldrh	r3, [r7, #22]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d13e      	bne.n	80087e6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876c:	881a      	ldrh	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008778:	1c9a      	adds	r2, r3, #2
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008782:	b29b      	uxth	r3, r3
 8008784:	3b01      	subs	r3, #1
 8008786:	b29a      	uxth	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800878c:	e02b      	b.n	80087e6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b02      	cmp	r3, #2
 800879a:	d112      	bne.n	80087c2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a0:	881a      	ldrh	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ac:	1c9a      	adds	r2, r3, #2
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	86da      	strh	r2, [r3, #54]	; 0x36
 80087c0:	e011      	b.n	80087e6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087c2:	f7fd fb0b 	bl	8005ddc <HAL_GetTick>
 80087c6:	4602      	mov	r2, r0
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	683a      	ldr	r2, [r7, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d803      	bhi.n	80087da <HAL_SPI_Transmit+0x168>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087d8:	d102      	bne.n	80087e0 <HAL_SPI_Transmit+0x16e>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d102      	bne.n	80087e6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80087e4:	e074      	b.n	80088d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1ce      	bne.n	800878e <HAL_SPI_Transmit+0x11c>
 80087f0:	e04c      	b.n	800888c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <HAL_SPI_Transmit+0x18e>
 80087fa:	8afb      	ldrh	r3, [r7, #22]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d140      	bne.n	8008882 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	330c      	adds	r3, #12
 800880a:	7812      	ldrb	r2, [r2, #0]
 800880c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800881c:	b29b      	uxth	r3, r3
 800881e:	3b01      	subs	r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008826:	e02c      	b.n	8008882 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b02      	cmp	r3, #2
 8008834:	d113      	bne.n	800885e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	330c      	adds	r3, #12
 8008840:	7812      	ldrb	r2, [r2, #0]
 8008842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008852:	b29b      	uxth	r3, r3
 8008854:	3b01      	subs	r3, #1
 8008856:	b29a      	uxth	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	86da      	strh	r2, [r3, #54]	; 0x36
 800885c:	e011      	b.n	8008882 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800885e:	f7fd fabd 	bl	8005ddc <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d803      	bhi.n	8008876 <HAL_SPI_Transmit+0x204>
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008874:	d102      	bne.n	800887c <HAL_SPI_Transmit+0x20a>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d102      	bne.n	8008882 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008880:	e026      	b.n	80088d0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1cd      	bne.n	8008828 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 fbcb 	bl	800902c <SPI_EndRxTxTransaction>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d002      	beq.n	80088a2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2220      	movs	r2, #32
 80088a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10a      	bne.n	80088c0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088aa:	2300      	movs	r3, #0
 80088ac:	613b      	str	r3, [r7, #16]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	613b      	str	r3, [r7, #16]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	613b      	str	r3, [r7, #16]
 80088be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	77fb      	strb	r3, [r7, #31]
 80088cc:	e000      	b.n	80088d0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80088ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80088e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3720      	adds	r7, #32
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b088      	sub	sp, #32
 80088ee:	af02      	add	r7, sp, #8
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	603b      	str	r3, [r7, #0]
 80088f6:	4613      	mov	r3, r2
 80088f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008906:	d112      	bne.n	800892e <HAL_SPI_Receive+0x44>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d10e      	bne.n	800892e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2204      	movs	r2, #4
 8008914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008918:	88fa      	ldrh	r2, [r7, #6]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	4613      	mov	r3, r2
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f8f1 	bl	8008b0c <HAL_SPI_TransmitReceive>
 800892a:	4603      	mov	r3, r0
 800892c:	e0ea      	b.n	8008b04 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008934:	2b01      	cmp	r3, #1
 8008936:	d101      	bne.n	800893c <HAL_SPI_Receive+0x52>
 8008938:	2302      	movs	r3, #2
 800893a:	e0e3      	b.n	8008b04 <HAL_SPI_Receive+0x21a>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008944:	f7fd fa4a 	bl	8005ddc <HAL_GetTick>
 8008948:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b01      	cmp	r3, #1
 8008954:	d002      	beq.n	800895c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008956:	2302      	movs	r3, #2
 8008958:	75fb      	strb	r3, [r7, #23]
    goto error;
 800895a:	e0ca      	b.n	8008af2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <HAL_SPI_Receive+0x7e>
 8008962:	88fb      	ldrh	r3, [r7, #6]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d102      	bne.n	800896e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800896c:	e0c1      	b.n	8008af2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2204      	movs	r2, #4
 8008972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	88fa      	ldrh	r2, [r7, #6]
 8008986:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	88fa      	ldrh	r2, [r7, #6]
 800898c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b4:	d10f      	bne.n	80089d6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80089d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e0:	2b40      	cmp	r3, #64	; 0x40
 80089e2:	d007      	beq.n	80089f4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089f2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d162      	bne.n	8008ac2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80089fc:	e02e      	b.n	8008a5c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d115      	bne.n	8008a38 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f103 020c 	add.w	r2, r3, #12
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	b2d2      	uxtb	r2, r2
 8008a1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a36:	e011      	b.n	8008a5c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a38:	f7fd f9d0 	bl	8005ddc <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d803      	bhi.n	8008a50 <HAL_SPI_Receive+0x166>
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a4e:	d102      	bne.n	8008a56 <HAL_SPI_Receive+0x16c>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008a5a:	e04a      	b.n	8008af2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1cb      	bne.n	80089fe <HAL_SPI_Receive+0x114>
 8008a66:	e031      	b.n	8008acc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d113      	bne.n	8008a9e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	b292      	uxth	r2, r2
 8008a82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a88:	1c9a      	adds	r2, r3, #2
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	3b01      	subs	r3, #1
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a9c:	e011      	b.n	8008ac2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a9e:	f7fd f99d 	bl	8005ddc <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d803      	bhi.n	8008ab6 <HAL_SPI_Receive+0x1cc>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ab4:	d102      	bne.n	8008abc <HAL_SPI_Receive+0x1d2>
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008abc:	2303      	movs	r3, #3
 8008abe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ac0:	e017      	b.n	8008af2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1cd      	bne.n	8008a68 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 fa45 	bl	8008f60 <SPI_EndRxTransaction>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	75fb      	strb	r3, [r7, #23]
 8008aee:	e000      	b.n	8008af2 <HAL_SPI_Receive+0x208>
  }

error :
 8008af0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3718      	adds	r7, #24
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08c      	sub	sp, #48	; 0x30
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d101      	bne.n	8008b32 <HAL_SPI_TransmitReceive+0x26>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e18a      	b.n	8008e48 <HAL_SPI_TransmitReceive+0x33c>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b3a:	f7fd f94f 	bl	8005ddc <HAL_GetTick>
 8008b3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008b50:	887b      	ldrh	r3, [r7, #2]
 8008b52:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d00f      	beq.n	8008b7c <HAL_SPI_TransmitReceive+0x70>
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b62:	d107      	bne.n	8008b74 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d103      	bne.n	8008b74 <HAL_SPI_TransmitReceive+0x68>
 8008b6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d003      	beq.n	8008b7c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008b74:	2302      	movs	r3, #2
 8008b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b7a:	e15b      	b.n	8008e34 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d005      	beq.n	8008b8e <HAL_SPI_TransmitReceive+0x82>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <HAL_SPI_TransmitReceive+0x82>
 8008b88:	887b      	ldrh	r3, [r7, #2]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d103      	bne.n	8008b96 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b94:	e14e      	b.n	8008e34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d003      	beq.n	8008baa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2205      	movs	r2, #5
 8008ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	887a      	ldrh	r2, [r7, #2]
 8008bba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	887a      	ldrh	r2, [r7, #2]
 8008bc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	887a      	ldrh	r2, [r7, #2]
 8008bcc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	887a      	ldrh	r2, [r7, #2]
 8008bd2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bea:	2b40      	cmp	r3, #64	; 0x40
 8008bec:	d007      	beq.n	8008bfe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c06:	d178      	bne.n	8008cfa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <HAL_SPI_TransmitReceive+0x10a>
 8008c10:	8b7b      	ldrh	r3, [r7, #26]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d166      	bne.n	8008ce4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	881a      	ldrh	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c26:	1c9a      	adds	r2, r3, #2
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	3b01      	subs	r3, #1
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c3a:	e053      	b.n	8008ce4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d11b      	bne.n	8008c82 <HAL_SPI_TransmitReceive+0x176>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d016      	beq.n	8008c82 <HAL_SPI_TransmitReceive+0x176>
 8008c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d113      	bne.n	8008c82 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	881a      	ldrh	r2, [r3, #0]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c6a:	1c9a      	adds	r2, r3, #2
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d119      	bne.n	8008cc4 <HAL_SPI_TransmitReceive+0x1b8>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d014      	beq.n	8008cc4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	b292      	uxth	r2, r2
 8008ca6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	1c9a      	adds	r2, r3, #2
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008cc4:	f7fd f88a 	bl	8005ddc <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d807      	bhi.n	8008ce4 <HAL_SPI_TransmitReceive+0x1d8>
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cda:	d003      	beq.n	8008ce4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ce2:	e0a7      	b.n	8008e34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1a6      	bne.n	8008c3c <HAL_SPI_TransmitReceive+0x130>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1a1      	bne.n	8008c3c <HAL_SPI_TransmitReceive+0x130>
 8008cf8:	e07c      	b.n	8008df4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <HAL_SPI_TransmitReceive+0x1fc>
 8008d02:	8b7b      	ldrh	r3, [r7, #26]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d16b      	bne.n	8008de0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	330c      	adds	r3, #12
 8008d12:	7812      	ldrb	r2, [r2, #0]
 8008d14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d2e:	e057      	b.n	8008de0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d11c      	bne.n	8008d78 <HAL_SPI_TransmitReceive+0x26c>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d017      	beq.n	8008d78 <HAL_SPI_TransmitReceive+0x26c>
 8008d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d114      	bne.n	8008d78 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	7812      	ldrb	r2, [r2, #0]
 8008d5a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d60:	1c5a      	adds	r2, r3, #1
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	b29a      	uxth	r2, r3
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d119      	bne.n	8008dba <HAL_SPI_TransmitReceive+0x2ae>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d014      	beq.n	8008dba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	b2d2      	uxtb	r2, r2
 8008d9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	1c5a      	adds	r2, r3, #1
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	3b01      	subs	r3, #1
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008db6:	2301      	movs	r3, #1
 8008db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008dba:	f7fd f80f 	bl	8005ddc <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d803      	bhi.n	8008dd2 <HAL_SPI_TransmitReceive+0x2c6>
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dd0:	d102      	bne.n	8008dd8 <HAL_SPI_TransmitReceive+0x2cc>
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008dde:	e029      	b.n	8008e34 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1a2      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x224>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d19d      	bne.n	8008d30 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 f917 	bl	800902c <SPI_EndRxTxTransaction>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d006      	beq.n	8008e12 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008e10:	e010      	b.n	8008e34 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10b      	bne.n	8008e32 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	617b      	str	r3, [r7, #20]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	617b      	str	r3, [r7, #20]
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	e000      	b.n	8008e34 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3730      	adds	r7, #48	; 0x30
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e60:	f7fc ffbc 	bl	8005ddc <HAL_GetTick>
 8008e64:	4602      	mov	r2, r0
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	1a9b      	subs	r3, r3, r2
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e70:	f7fc ffb4 	bl	8005ddc <HAL_GetTick>
 8008e74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e76:	4b39      	ldr	r3, [pc, #228]	; (8008f5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	015b      	lsls	r3, r3, #5
 8008e7c:	0d1b      	lsrs	r3, r3, #20
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	fb02 f303 	mul.w	r3, r2, r3
 8008e84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e86:	e054      	b.n	8008f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e8e:	d050      	beq.n	8008f32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e90:	f7fc ffa4 	bl	8005ddc <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	69fa      	ldr	r2, [r7, #28]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d902      	bls.n	8008ea6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d13d      	bne.n	8008f22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008eb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ebe:	d111      	bne.n	8008ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ec8:	d004      	beq.n	8008ed4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ed2:	d107      	bne.n	8008ee4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eec:	d10f      	bne.n	8008f0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e017      	b.n	8008f52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d101      	bne.n	8008f2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689a      	ldr	r2, [r3, #8]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	bf0c      	ite	eq
 8008f42:	2301      	moveq	r3, #1
 8008f44:	2300      	movne	r3, #0
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d19b      	bne.n	8008e88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3720      	adds	r7, #32
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000000 	.word	0x20000000

08008f60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af02      	add	r7, sp, #8
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f74:	d111      	bne.n	8008f9a <SPI_EndRxTransaction+0x3a>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f7e:	d004      	beq.n	8008f8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f88:	d107      	bne.n	8008f9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fa2:	d12a      	bne.n	8008ffa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fac:	d012      	beq.n	8008fd4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2180      	movs	r1, #128	; 0x80
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f7ff ff49 	bl	8008e50 <SPI_WaitFlagStateUntilTimeout>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d02d      	beq.n	8009020 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fc8:	f043 0220 	orr.w	r2, r3, #32
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e026      	b.n	8009022 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2101      	movs	r1, #1
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f7ff ff36 	bl	8008e50 <SPI_WaitFlagStateUntilTimeout>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01a      	beq.n	8009020 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fee:	f043 0220 	orr.w	r2, r3, #32
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e013      	b.n	8009022 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	2200      	movs	r2, #0
 8009002:	2101      	movs	r1, #1
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f7ff ff23 	bl	8008e50 <SPI_WaitFlagStateUntilTimeout>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009014:	f043 0220 	orr.w	r2, r3, #32
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e000      	b.n	8009022 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
	...

0800902c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af02      	add	r7, sp, #8
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009038:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <SPI_EndRxTxTransaction+0x7c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a1b      	ldr	r2, [pc, #108]	; (80090ac <SPI_EndRxTxTransaction+0x80>)
 800903e:	fba2 2303 	umull	r2, r3, r2, r3
 8009042:	0d5b      	lsrs	r3, r3, #21
 8009044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009048:	fb02 f303 	mul.w	r3, r2, r3
 800904c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009056:	d112      	bne.n	800907e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2200      	movs	r2, #0
 8009060:	2180      	movs	r1, #128	; 0x80
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff fef4 	bl	8008e50 <SPI_WaitFlagStateUntilTimeout>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d016      	beq.n	800909c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009072:	f043 0220 	orr.w	r2, r3, #32
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e00f      	b.n	800909e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00a      	beq.n	800909a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	3b01      	subs	r3, #1
 8009088:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009094:	2b80      	cmp	r3, #128	; 0x80
 8009096:	d0f2      	beq.n	800907e <SPI_EndRxTxTransaction+0x52>
 8009098:	e000      	b.n	800909c <SPI_EndRxTxTransaction+0x70>
        break;
 800909a:	bf00      	nop
  }

  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20000000 	.word	0x20000000
 80090ac:	165e9f81 	.word	0x165e9f81

080090b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e041      	b.n	8009146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d106      	bne.n	80090dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7fb fb5e 	bl	8004798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3304      	adds	r3, #4
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f000 fe10 	bl	8009d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b01      	cmp	r3, #1
 8009162:	d001      	beq.n	8009168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e04e      	b.n	8009206 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f042 0201 	orr.w	r2, r2, #1
 800917e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a23      	ldr	r2, [pc, #140]	; (8009214 <HAL_TIM_Base_Start_IT+0xc4>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d022      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009192:	d01d      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a1f      	ldr	r2, [pc, #124]	; (8009218 <HAL_TIM_Base_Start_IT+0xc8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d018      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a1e      	ldr	r2, [pc, #120]	; (800921c <HAL_TIM_Base_Start_IT+0xcc>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d013      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a1c      	ldr	r2, [pc, #112]	; (8009220 <HAL_TIM_Base_Start_IT+0xd0>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d00e      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a1b      	ldr	r2, [pc, #108]	; (8009224 <HAL_TIM_Base_Start_IT+0xd4>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d009      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a19      	ldr	r2, [pc, #100]	; (8009228 <HAL_TIM_Base_Start_IT+0xd8>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d004      	beq.n	80091d0 <HAL_TIM_Base_Start_IT+0x80>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a18      	ldr	r2, [pc, #96]	; (800922c <HAL_TIM_Base_Start_IT+0xdc>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d111      	bne.n	80091f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b06      	cmp	r3, #6
 80091e0:	d010      	beq.n	8009204 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f042 0201 	orr.w	r2, r2, #1
 80091f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f2:	e007      	b.n	8009204 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0201 	orr.w	r2, r2, #1
 8009202:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	40010000 	.word	0x40010000
 8009218:	40000400 	.word	0x40000400
 800921c:	40000800 	.word	0x40000800
 8009220:	40000c00 	.word	0x40000c00
 8009224:	40010400 	.word	0x40010400
 8009228:	40014000 	.word	0x40014000
 800922c:	40001800 	.word	0x40001800

08009230 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68da      	ldr	r2, [r3, #12]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 0201 	bic.w	r2, r2, #1
 8009246:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6a1a      	ldr	r2, [r3, #32]
 800924e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009252:	4013      	ands	r3, r2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10f      	bne.n	8009278 <HAL_TIM_Base_Stop_IT+0x48>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6a1a      	ldr	r2, [r3, #32]
 800925e:	f240 4344 	movw	r3, #1092	; 0x444
 8009262:	4013      	ands	r3, r2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d107      	bne.n	8009278 <HAL_TIM_Base_Stop_IT+0x48>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f022 0201 	bic.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	370c      	adds	r7, #12
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e041      	b.n	8009324 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d106      	bne.n	80092ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f7fb fa47 	bl	8004748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2202      	movs	r2, #2
 80092be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3304      	adds	r3, #4
 80092ca:	4619      	mov	r1, r3
 80092cc:	4610      	mov	r0, r2
 80092ce:	f000 fd21 	bl	8009d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d109      	bne.n	8009350 <HAL_TIM_PWM_Start+0x24>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	bf14      	ite	ne
 8009348:	2301      	movne	r3, #1
 800934a:	2300      	moveq	r3, #0
 800934c:	b2db      	uxtb	r3, r3
 800934e:	e022      	b.n	8009396 <HAL_TIM_PWM_Start+0x6a>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b04      	cmp	r3, #4
 8009354:	d109      	bne.n	800936a <HAL_TIM_PWM_Start+0x3e>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b01      	cmp	r3, #1
 8009360:	bf14      	ite	ne
 8009362:	2301      	movne	r3, #1
 8009364:	2300      	moveq	r3, #0
 8009366:	b2db      	uxtb	r3, r3
 8009368:	e015      	b.n	8009396 <HAL_TIM_PWM_Start+0x6a>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b08      	cmp	r3, #8
 800936e:	d109      	bne.n	8009384 <HAL_TIM_PWM_Start+0x58>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009376:	b2db      	uxtb	r3, r3
 8009378:	2b01      	cmp	r3, #1
 800937a:	bf14      	ite	ne
 800937c:	2301      	movne	r3, #1
 800937e:	2300      	moveq	r3, #0
 8009380:	b2db      	uxtb	r3, r3
 8009382:	e008      	b.n	8009396 <HAL_TIM_PWM_Start+0x6a>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b01      	cmp	r3, #1
 800938e:	bf14      	ite	ne
 8009390:	2301      	movne	r3, #1
 8009392:	2300      	moveq	r3, #0
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e07c      	b.n	8009498 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d104      	bne.n	80093ae <HAL_TIM_PWM_Start+0x82>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2202      	movs	r2, #2
 80093a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093ac:	e013      	b.n	80093d6 <HAL_TIM_PWM_Start+0xaa>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d104      	bne.n	80093be <HAL_TIM_PWM_Start+0x92>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2202      	movs	r2, #2
 80093b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093bc:	e00b      	b.n	80093d6 <HAL_TIM_PWM_Start+0xaa>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d104      	bne.n	80093ce <HAL_TIM_PWM_Start+0xa2>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093cc:	e003      	b.n	80093d6 <HAL_TIM_PWM_Start+0xaa>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2202      	movs	r2, #2
 80093d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2201      	movs	r2, #1
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fee8 	bl	800a1b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a2d      	ldr	r2, [pc, #180]	; (80094a0 <HAL_TIM_PWM_Start+0x174>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d004      	beq.n	80093f8 <HAL_TIM_PWM_Start+0xcc>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a2c      	ldr	r2, [pc, #176]	; (80094a4 <HAL_TIM_PWM_Start+0x178>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d101      	bne.n	80093fc <HAL_TIM_PWM_Start+0xd0>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e000      	b.n	80093fe <HAL_TIM_PWM_Start+0xd2>
 80093fc:	2300      	movs	r3, #0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009410:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a22      	ldr	r2, [pc, #136]	; (80094a0 <HAL_TIM_PWM_Start+0x174>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d022      	beq.n	8009462 <HAL_TIM_PWM_Start+0x136>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009424:	d01d      	beq.n	8009462 <HAL_TIM_PWM_Start+0x136>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a1f      	ldr	r2, [pc, #124]	; (80094a8 <HAL_TIM_PWM_Start+0x17c>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d018      	beq.n	8009462 <HAL_TIM_PWM_Start+0x136>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a1d      	ldr	r2, [pc, #116]	; (80094ac <HAL_TIM_PWM_Start+0x180>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d013      	beq.n	8009462 <HAL_TIM_PWM_Start+0x136>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a1c      	ldr	r2, [pc, #112]	; (80094b0 <HAL_TIM_PWM_Start+0x184>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d00e      	beq.n	8009462 <HAL_TIM_PWM_Start+0x136>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a16      	ldr	r2, [pc, #88]	; (80094a4 <HAL_TIM_PWM_Start+0x178>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d009      	beq.n	8009462 <HAL_TIM_PWM_Start+0x136>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <HAL_TIM_PWM_Start+0x188>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d004      	beq.n	8009462 <HAL_TIM_PWM_Start+0x136>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a16      	ldr	r2, [pc, #88]	; (80094b8 <HAL_TIM_PWM_Start+0x18c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d111      	bne.n	8009486 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f003 0307 	and.w	r3, r3, #7
 800946c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2b06      	cmp	r3, #6
 8009472:	d010      	beq.n	8009496 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f042 0201 	orr.w	r2, r2, #1
 8009482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009484:	e007      	b.n	8009496 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f042 0201 	orr.w	r2, r2, #1
 8009494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	40010000 	.word	0x40010000
 80094a4:	40010400 	.word	0x40010400
 80094a8:	40000400 	.word	0x40000400
 80094ac:	40000800 	.word	0x40000800
 80094b0:	40000c00 	.word	0x40000c00
 80094b4:	40014000 	.word	0x40014000
 80094b8:	40001800 	.word	0x40001800

080094bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2200      	movs	r2, #0
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fe70 	bl	800a1b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a2e      	ldr	r2, [pc, #184]	; (8009594 <HAL_TIM_PWM_Stop+0xd8>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d004      	beq.n	80094e8 <HAL_TIM_PWM_Stop+0x2c>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a2d      	ldr	r2, [pc, #180]	; (8009598 <HAL_TIM_PWM_Stop+0xdc>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d101      	bne.n	80094ec <HAL_TIM_PWM_Stop+0x30>
 80094e8:	2301      	movs	r3, #1
 80094ea:	e000      	b.n	80094ee <HAL_TIM_PWM_Stop+0x32>
 80094ec:	2300      	movs	r3, #0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d017      	beq.n	8009522 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6a1a      	ldr	r2, [r3, #32]
 80094f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80094fc:	4013      	ands	r3, r2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10f      	bne.n	8009522 <HAL_TIM_PWM_Stop+0x66>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6a1a      	ldr	r2, [r3, #32]
 8009508:	f240 4344 	movw	r3, #1092	; 0x444
 800950c:	4013      	ands	r3, r2
 800950e:	2b00      	cmp	r3, #0
 8009510:	d107      	bne.n	8009522 <HAL_TIM_PWM_Stop+0x66>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009520:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6a1a      	ldr	r2, [r3, #32]
 8009528:	f241 1311 	movw	r3, #4369	; 0x1111
 800952c:	4013      	ands	r3, r2
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10f      	bne.n	8009552 <HAL_TIM_PWM_Stop+0x96>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6a1a      	ldr	r2, [r3, #32]
 8009538:	f240 4344 	movw	r3, #1092	; 0x444
 800953c:	4013      	ands	r3, r2
 800953e:	2b00      	cmp	r3, #0
 8009540:	d107      	bne.n	8009552 <HAL_TIM_PWM_Stop+0x96>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0201 	bic.w	r2, r2, #1
 8009550:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d104      	bne.n	8009562 <HAL_TIM_PWM_Stop+0xa6>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009560:	e013      	b.n	800958a <HAL_TIM_PWM_Stop+0xce>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b04      	cmp	r3, #4
 8009566:	d104      	bne.n	8009572 <HAL_TIM_PWM_Stop+0xb6>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009570:	e00b      	b.n	800958a <HAL_TIM_PWM_Stop+0xce>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b08      	cmp	r3, #8
 8009576:	d104      	bne.n	8009582 <HAL_TIM_PWM_Stop+0xc6>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009580:	e003      	b.n	800958a <HAL_TIM_PWM_Stop+0xce>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	40010000 	.word	0x40010000
 8009598:	40010400 	.word	0x40010400

0800959c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e097      	b.n	80096e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d106      	bne.n	80095ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7fb f829 	bl	800461c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2202      	movs	r2, #2
 80095ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	6812      	ldr	r2, [r2, #0]
 80095dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095e0:	f023 0307 	bic.w	r3, r3, #7
 80095e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4610      	mov	r0, r2
 80095f2:	f000 fb8f 	bl	8009d14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	697a      	ldr	r2, [r7, #20]
 8009614:	4313      	orrs	r3, r2
 8009616:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	689a      	ldr	r2, [r3, #8]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	021b      	lsls	r3, r3, #8
 800962e:	4313      	orrs	r3, r2
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	4313      	orrs	r3, r2
 8009634:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800963c:	f023 030c 	bic.w	r3, r3, #12
 8009640:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800964c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	68da      	ldr	r2, [r3, #12]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	021b      	lsls	r3, r3, #8
 8009658:	4313      	orrs	r3, r2
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	4313      	orrs	r3, r2
 800965e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	011a      	lsls	r2, r3, #4
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	031b      	lsls	r3, r3, #12
 800966c:	4313      	orrs	r3, r2
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	4313      	orrs	r3, r2
 8009672:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800967a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009682:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	4313      	orrs	r3, r2
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2201      	movs	r2, #1
 80096b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3718      	adds	r7, #24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009700:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009708:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009710:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d110      	bne.n	800973a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d102      	bne.n	8009724 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800971e:	7b7b      	ldrb	r3, [r7, #13]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d001      	beq.n	8009728 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e068      	b.n	80097fa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2202      	movs	r2, #2
 8009734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009738:	e031      	b.n	800979e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b04      	cmp	r3, #4
 800973e:	d110      	bne.n	8009762 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d102      	bne.n	800974c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009746:	7b3b      	ldrb	r3, [r7, #12]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d001      	beq.n	8009750 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e054      	b.n	80097fa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2202      	movs	r2, #2
 8009754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2202      	movs	r2, #2
 800975c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009760:	e01d      	b.n	800979e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d108      	bne.n	800977a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	2b01      	cmp	r3, #1
 800976c:	d105      	bne.n	800977a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800976e:	7b7b      	ldrb	r3, [r7, #13]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d102      	bne.n	800977a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009774:	7b3b      	ldrb	r3, [r7, #12]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d001      	beq.n	800977e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e03d      	b.n	80097fa <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2202      	movs	r2, #2
 8009782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2202      	movs	r2, #2
 800978a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2202      	movs	r2, #2
 8009792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2202      	movs	r2, #2
 800979a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <HAL_TIM_Encoder_Start+0xc2>
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	d008      	beq.n	80097ba <HAL_TIM_Encoder_Start+0xd2>
 80097a8:	e00f      	b.n	80097ca <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2201      	movs	r2, #1
 80097b0:	2100      	movs	r1, #0
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 fcfe 	bl	800a1b4 <TIM_CCxChannelCmd>
      break;
 80097b8:	e016      	b.n	80097e8 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2201      	movs	r2, #1
 80097c0:	2104      	movs	r1, #4
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 fcf6 	bl	800a1b4 <TIM_CCxChannelCmd>
      break;
 80097c8:	e00e      	b.n	80097e8 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2201      	movs	r2, #1
 80097d0:	2100      	movs	r1, #0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fcee 	bl	800a1b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2201      	movs	r2, #1
 80097de:	2104      	movs	r1, #4
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fce7 	bl	800a1b4 <TIM_CCxChannelCmd>
      break;
 80097e6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0201 	orr.w	r2, r2, #1
 80097f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}

08009802 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009802:	b580      	push	{r7, lr}
 8009804:	b082      	sub	sp, #8
 8009806:	af00      	add	r7, sp, #0
 8009808:	6078      	str	r0, [r7, #4]
 800980a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <HAL_TIM_Encoder_Stop+0x16>
 8009812:	2b04      	cmp	r3, #4
 8009814:	d008      	beq.n	8009828 <HAL_TIM_Encoder_Stop+0x26>
 8009816:	e00f      	b.n	8009838 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2200      	movs	r2, #0
 800981e:	2100      	movs	r1, #0
 8009820:	4618      	mov	r0, r3
 8009822:	f000 fcc7 	bl	800a1b4 <TIM_CCxChannelCmd>
      break;
 8009826:	e016      	b.n	8009856 <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2200      	movs	r2, #0
 800982e:	2104      	movs	r1, #4
 8009830:	4618      	mov	r0, r3
 8009832:	f000 fcbf 	bl	800a1b4 <TIM_CCxChannelCmd>
      break;
 8009836:	e00e      	b.n	8009856 <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2200      	movs	r2, #0
 800983e:	2100      	movs	r1, #0
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fcb7 	bl	800a1b4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2200      	movs	r2, #0
 800984c:	2104      	movs	r1, #4
 800984e:	4618      	mov	r0, r3
 8009850:	f000 fcb0 	bl	800a1b4 <TIM_CCxChannelCmd>
      break;
 8009854:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	6a1a      	ldr	r2, [r3, #32]
 800985c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009860:	4013      	ands	r3, r2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10f      	bne.n	8009886 <HAL_TIM_Encoder_Stop+0x84>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	6a1a      	ldr	r2, [r3, #32]
 800986c:	f240 4344 	movw	r3, #1092	; 0x444
 8009870:	4013      	ands	r3, r2
 8009872:	2b00      	cmp	r3, #0
 8009874:	d107      	bne.n	8009886 <HAL_TIM_Encoder_Stop+0x84>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f022 0201 	bic.w	r2, r2, #1
 8009884:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d002      	beq.n	8009892 <HAL_TIM_Encoder_Stop+0x90>
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2b04      	cmp	r3, #4
 8009890:	d138      	bne.n	8009904 <HAL_TIM_Encoder_Stop+0x102>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d104      	bne.n	80098a2 <HAL_TIM_Encoder_Stop+0xa0>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098a0:	e013      	b.n	80098ca <HAL_TIM_Encoder_Stop+0xc8>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b04      	cmp	r3, #4
 80098a6:	d104      	bne.n	80098b2 <HAL_TIM_Encoder_Stop+0xb0>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2201      	movs	r2, #1
 80098ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098b0:	e00b      	b.n	80098ca <HAL_TIM_Encoder_Stop+0xc8>
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2b08      	cmp	r3, #8
 80098b6:	d104      	bne.n	80098c2 <HAL_TIM_Encoder_Stop+0xc0>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098c0:	e003      	b.n	80098ca <HAL_TIM_Encoder_Stop+0xc8>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d104      	bne.n	80098da <HAL_TIM_Encoder_Stop+0xd8>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098d8:	e024      	b.n	8009924 <HAL_TIM_Encoder_Stop+0x122>
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d104      	bne.n	80098ea <HAL_TIM_Encoder_Stop+0xe8>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098e8:	e01c      	b.n	8009924 <HAL_TIM_Encoder_Stop+0x122>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b08      	cmp	r3, #8
 80098ee:	d104      	bne.n	80098fa <HAL_TIM_Encoder_Stop+0xf8>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098f8:	e014      	b.n	8009924 <HAL_TIM_Encoder_Stop+0x122>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009902:	e00f      	b.n	8009924 <HAL_TIM_Encoder_Stop+0x122>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b082      	sub	sp, #8
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f003 0302 	and.w	r3, r3, #2
 8009940:	2b02      	cmp	r3, #2
 8009942:	d122      	bne.n	800998a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b02      	cmp	r3, #2
 8009950:	d11b      	bne.n	800998a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f06f 0202 	mvn.w	r2, #2
 800995a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	f003 0303 	and.w	r3, r3, #3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f9b1 	bl	8009cd8 <HAL_TIM_IC_CaptureCallback>
 8009976:	e005      	b.n	8009984 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f9a3 	bl	8009cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 f9b4 	bl	8009cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	f003 0304 	and.w	r3, r3, #4
 8009994:	2b04      	cmp	r3, #4
 8009996:	d122      	bne.n	80099de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	f003 0304 	and.w	r3, r3, #4
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d11b      	bne.n	80099de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f06f 0204 	mvn.w	r2, #4
 80099ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2202      	movs	r2, #2
 80099b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f987 	bl	8009cd8 <HAL_TIM_IC_CaptureCallback>
 80099ca:	e005      	b.n	80099d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f979 	bl	8009cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f98a 	bl	8009cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f003 0308 	and.w	r3, r3, #8
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d122      	bne.n	8009a32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f003 0308 	and.w	r3, r3, #8
 80099f6:	2b08      	cmp	r3, #8
 80099f8:	d11b      	bne.n	8009a32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f06f 0208 	mvn.w	r2, #8
 8009a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2204      	movs	r2, #4
 8009a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	f003 0303 	and.w	r3, r3, #3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f95d 	bl	8009cd8 <HAL_TIM_IC_CaptureCallback>
 8009a1e:	e005      	b.n	8009a2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f94f 	bl	8009cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f960 	bl	8009cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	f003 0310 	and.w	r3, r3, #16
 8009a3c:	2b10      	cmp	r3, #16
 8009a3e:	d122      	bne.n	8009a86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	f003 0310 	and.w	r3, r3, #16
 8009a4a:	2b10      	cmp	r3, #16
 8009a4c:	d11b      	bne.n	8009a86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f06f 0210 	mvn.w	r2, #16
 8009a56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2208      	movs	r2, #8
 8009a5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	69db      	ldr	r3, [r3, #28]
 8009a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d003      	beq.n	8009a74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f933 	bl	8009cd8 <HAL_TIM_IC_CaptureCallback>
 8009a72:	e005      	b.n	8009a80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f925 	bl	8009cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f936 	bl	8009cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	691b      	ldr	r3, [r3, #16]
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d10e      	bne.n	8009ab2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d107      	bne.n	8009ab2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f06f 0201 	mvn.w	r2, #1
 8009aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7f9 f9bf 	bl	8002e30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009abc:	2b80      	cmp	r3, #128	; 0x80
 8009abe:	d10e      	bne.n	8009ade <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aca:	2b80      	cmp	r3, #128	; 0x80
 8009acc:	d107      	bne.n	8009ade <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fc17 	bl	800a30c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	691b      	ldr	r3, [r3, #16]
 8009ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae8:	2b40      	cmp	r3, #64	; 0x40
 8009aea:	d10e      	bne.n	8009b0a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af6:	2b40      	cmp	r3, #64	; 0x40
 8009af8:	d107      	bne.n	8009b0a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f8fb 	bl	8009d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	f003 0320 	and.w	r3, r3, #32
 8009b14:	2b20      	cmp	r3, #32
 8009b16:	d10e      	bne.n	8009b36 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	f003 0320 	and.w	r3, r3, #32
 8009b22:	2b20      	cmp	r3, #32
 8009b24:	d107      	bne.n	8009b36 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f06f 0220 	mvn.w	r2, #32
 8009b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fbe1 	bl	800a2f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d101      	bne.n	8009b5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e0ae      	b.n	8009cbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b0c      	cmp	r3, #12
 8009b6a:	f200 809f 	bhi.w	8009cac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009b6e:	a201      	add	r2, pc, #4	; (adr r2, 8009b74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b74:	08009ba9 	.word	0x08009ba9
 8009b78:	08009cad 	.word	0x08009cad
 8009b7c:	08009cad 	.word	0x08009cad
 8009b80:	08009cad 	.word	0x08009cad
 8009b84:	08009be9 	.word	0x08009be9
 8009b88:	08009cad 	.word	0x08009cad
 8009b8c:	08009cad 	.word	0x08009cad
 8009b90:	08009cad 	.word	0x08009cad
 8009b94:	08009c2b 	.word	0x08009c2b
 8009b98:	08009cad 	.word	0x08009cad
 8009b9c:	08009cad 	.word	0x08009cad
 8009ba0:	08009cad 	.word	0x08009cad
 8009ba4:	08009c6b 	.word	0x08009c6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68b9      	ldr	r1, [r7, #8]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 f950 	bl	8009e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	699a      	ldr	r2, [r3, #24]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f042 0208 	orr.w	r2, r2, #8
 8009bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 0204 	bic.w	r2, r2, #4
 8009bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6999      	ldr	r1, [r3, #24]
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	691a      	ldr	r2, [r3, #16]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	619a      	str	r2, [r3, #24]
      break;
 8009be6:	e064      	b.n	8009cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 f9a0 	bl	8009f34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	699a      	ldr	r2, [r3, #24]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699a      	ldr	r2, [r3, #24]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6999      	ldr	r1, [r3, #24]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	021a      	lsls	r2, r3, #8
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	619a      	str	r2, [r3, #24]
      break;
 8009c28:	e043      	b.n	8009cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 f9f5 	bl	800a020 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69da      	ldr	r2, [r3, #28]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 0208 	orr.w	r2, r2, #8
 8009c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69da      	ldr	r2, [r3, #28]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f022 0204 	bic.w	r2, r2, #4
 8009c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69d9      	ldr	r1, [r3, #28]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	691a      	ldr	r2, [r3, #16]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	61da      	str	r2, [r3, #28]
      break;
 8009c68:	e023      	b.n	8009cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68b9      	ldr	r1, [r7, #8]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 fa49 	bl	800a108 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69da      	ldr	r2, [r3, #28]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	69da      	ldr	r2, [r3, #28]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69d9      	ldr	r1, [r3, #28]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	021a      	lsls	r2, r3, #8
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	430a      	orrs	r2, r1
 8009ca8:	61da      	str	r2, [r3, #28]
      break;
 8009caa:	e002      	b.n	8009cb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b085      	sub	sp, #20
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a40      	ldr	r2, [pc, #256]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d013      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d32:	d00f      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a3d      	ldr	r2, [pc, #244]	; (8009e2c <TIM_Base_SetConfig+0x118>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00b      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a3c      	ldr	r2, [pc, #240]	; (8009e30 <TIM_Base_SetConfig+0x11c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d007      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a3b      	ldr	r2, [pc, #236]	; (8009e34 <TIM_Base_SetConfig+0x120>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d003      	beq.n	8009d54 <TIM_Base_SetConfig+0x40>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	4a3a      	ldr	r2, [pc, #232]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d108      	bne.n	8009d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a2f      	ldr	r2, [pc, #188]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d02b      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d74:	d027      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a2c      	ldr	r2, [pc, #176]	; (8009e2c <TIM_Base_SetConfig+0x118>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d023      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a2b      	ldr	r2, [pc, #172]	; (8009e30 <TIM_Base_SetConfig+0x11c>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d01f      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a2a      	ldr	r2, [pc, #168]	; (8009e34 <TIM_Base_SetConfig+0x120>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d01b      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a29      	ldr	r2, [pc, #164]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d017      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a28      	ldr	r2, [pc, #160]	; (8009e3c <TIM_Base_SetConfig+0x128>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d013      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a27      	ldr	r2, [pc, #156]	; (8009e40 <TIM_Base_SetConfig+0x12c>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d00f      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a26      	ldr	r2, [pc, #152]	; (8009e44 <TIM_Base_SetConfig+0x130>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d00b      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a25      	ldr	r2, [pc, #148]	; (8009e48 <TIM_Base_SetConfig+0x134>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d007      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a24      	ldr	r2, [pc, #144]	; (8009e4c <TIM_Base_SetConfig+0x138>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d003      	beq.n	8009dc6 <TIM_Base_SetConfig+0xb2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a23      	ldr	r2, [pc, #140]	; (8009e50 <TIM_Base_SetConfig+0x13c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d108      	bne.n	8009dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	695b      	ldr	r3, [r3, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	689a      	ldr	r2, [r3, #8]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a0a      	ldr	r2, [pc, #40]	; (8009e28 <TIM_Base_SetConfig+0x114>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d003      	beq.n	8009e0c <TIM_Base_SetConfig+0xf8>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a0c      	ldr	r2, [pc, #48]	; (8009e38 <TIM_Base_SetConfig+0x124>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d103      	bne.n	8009e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	691a      	ldr	r2, [r3, #16]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	615a      	str	r2, [r3, #20]
}
 8009e1a:	bf00      	nop
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	40010000 	.word	0x40010000
 8009e2c:	40000400 	.word	0x40000400
 8009e30:	40000800 	.word	0x40000800
 8009e34:	40000c00 	.word	0x40000c00
 8009e38:	40010400 	.word	0x40010400
 8009e3c:	40014000 	.word	0x40014000
 8009e40:	40014400 	.word	0x40014400
 8009e44:	40014800 	.word	0x40014800
 8009e48:	40001800 	.word	0x40001800
 8009e4c:	40001c00 	.word	0x40001c00
 8009e50:	40002000 	.word	0x40002000

08009e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	f023 0201 	bic.w	r2, r3, #1
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f023 0303 	bic.w	r3, r3, #3
 8009e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f023 0302 	bic.w	r3, r3, #2
 8009e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	697a      	ldr	r2, [r7, #20]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a20      	ldr	r2, [pc, #128]	; (8009f2c <TIM_OC1_SetConfig+0xd8>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d003      	beq.n	8009eb8 <TIM_OC1_SetConfig+0x64>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <TIM_OC1_SetConfig+0xdc>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d10c      	bne.n	8009ed2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f023 0308 	bic.w	r3, r3, #8
 8009ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f023 0304 	bic.w	r3, r3, #4
 8009ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a15      	ldr	r2, [pc, #84]	; (8009f2c <TIM_OC1_SetConfig+0xd8>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d003      	beq.n	8009ee2 <TIM_OC1_SetConfig+0x8e>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a14      	ldr	r2, [pc, #80]	; (8009f30 <TIM_OC1_SetConfig+0xdc>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d111      	bne.n	8009f06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	695b      	ldr	r3, [r3, #20]
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	621a      	str	r2, [r3, #32]
}
 8009f20:	bf00      	nop
 8009f22:	371c      	adds	r7, #28
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	40010000 	.word	0x40010000
 8009f30:	40010400 	.word	0x40010400

08009f34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	f023 0210 	bic.w	r2, r3, #16
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	021b      	lsls	r3, r3, #8
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f023 0320 	bic.w	r3, r3, #32
 8009f7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	011b      	lsls	r3, r3, #4
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a22      	ldr	r2, [pc, #136]	; (800a018 <TIM_OC2_SetConfig+0xe4>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d003      	beq.n	8009f9c <TIM_OC2_SetConfig+0x68>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a21      	ldr	r2, [pc, #132]	; (800a01c <TIM_OC2_SetConfig+0xe8>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d10d      	bne.n	8009fb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	011b      	lsls	r3, r3, #4
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a17      	ldr	r2, [pc, #92]	; (800a018 <TIM_OC2_SetConfig+0xe4>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d003      	beq.n	8009fc8 <TIM_OC2_SetConfig+0x94>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a16      	ldr	r2, [pc, #88]	; (800a01c <TIM_OC2_SetConfig+0xe8>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d113      	bne.n	8009ff0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	621a      	str	r2, [r3, #32]
}
 800a00a:	bf00      	nop
 800a00c:	371c      	adds	r7, #28
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	40010000 	.word	0x40010000
 800a01c:	40010400 	.word	0x40010400

0800a020 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a020:	b480      	push	{r7}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	4313      	orrs	r3, r2
 800a060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	021b      	lsls	r3, r3, #8
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	4313      	orrs	r3, r2
 800a074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a21      	ldr	r2, [pc, #132]	; (800a100 <TIM_OC3_SetConfig+0xe0>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d003      	beq.n	800a086 <TIM_OC3_SetConfig+0x66>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a20      	ldr	r2, [pc, #128]	; (800a104 <TIM_OC3_SetConfig+0xe4>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d10d      	bne.n	800a0a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a08c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	4313      	orrs	r3, r2
 800a098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a16      	ldr	r2, [pc, #88]	; (800a100 <TIM_OC3_SetConfig+0xe0>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d003      	beq.n	800a0b2 <TIM_OC3_SetConfig+0x92>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a15      	ldr	r2, [pc, #84]	; (800a104 <TIM_OC3_SetConfig+0xe4>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d113      	bne.n	800a0da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	011b      	lsls	r3, r3, #4
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	011b      	lsls	r3, r3, #4
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	621a      	str	r2, [r3, #32]
}
 800a0f4:	bf00      	nop
 800a0f6:	371c      	adds	r7, #28
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	40010000 	.word	0x40010000
 800a104:	40010400 	.word	0x40010400

0800a108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a108:	b480      	push	{r7}
 800a10a:	b087      	sub	sp, #28
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a13e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	021b      	lsls	r3, r3, #8
 800a146:	68fa      	ldr	r2, [r7, #12]
 800a148:	4313      	orrs	r3, r2
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a152:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	031b      	lsls	r3, r3, #12
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a12      	ldr	r2, [pc, #72]	; (800a1ac <TIM_OC4_SetConfig+0xa4>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d003      	beq.n	800a170 <TIM_OC4_SetConfig+0x68>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a11      	ldr	r2, [pc, #68]	; (800a1b0 <TIM_OC4_SetConfig+0xa8>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d109      	bne.n	800a184 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	695b      	ldr	r3, [r3, #20]
 800a17c:	019b      	lsls	r3, r3, #6
 800a17e:	697a      	ldr	r2, [r7, #20]
 800a180:	4313      	orrs	r3, r2
 800a182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	621a      	str	r2, [r3, #32]
}
 800a19e:	bf00      	nop
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	40010000 	.word	0x40010000
 800a1b0:	40010400 	.word	0x40010400

0800a1b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	f003 031f 	and.w	r3, r3, #31
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6a1a      	ldr	r2, [r3, #32]
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	43db      	mvns	r3, r3
 800a1d6:	401a      	ands	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6a1a      	ldr	r2, [r3, #32]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	f003 031f 	and.w	r3, r3, #31
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ec:	431a      	orrs	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	621a      	str	r2, [r3, #32]
}
 800a1f2:	bf00      	nop
 800a1f4:	371c      	adds	r7, #28
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
	...

0800a200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a210:	2b01      	cmp	r3, #1
 800a212:	d101      	bne.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a214:	2302      	movs	r3, #2
 800a216:	e05a      	b.n	800a2ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2202      	movs	r2, #2
 800a224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a23e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a21      	ldr	r2, [pc, #132]	; (800a2dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d022      	beq.n	800a2a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a264:	d01d      	beq.n	800a2a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a1d      	ldr	r2, [pc, #116]	; (800a2e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d018      	beq.n	800a2a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a1b      	ldr	r2, [pc, #108]	; (800a2e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d013      	beq.n	800a2a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a1a      	ldr	r2, [pc, #104]	; (800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d00e      	beq.n	800a2a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a18      	ldr	r2, [pc, #96]	; (800a2ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d009      	beq.n	800a2a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a17      	ldr	r2, [pc, #92]	; (800a2f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d004      	beq.n	800a2a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a15      	ldr	r2, [pc, #84]	; (800a2f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d10c      	bne.n	800a2bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	40010000 	.word	0x40010000
 800a2e0:	40000400 	.word	0x40000400
 800a2e4:	40000800 	.word	0x40000800
 800a2e8:	40000c00 	.word	0x40000c00
 800a2ec:	40010400 	.word	0x40010400
 800a2f0:	40014000 	.word	0x40014000
 800a2f4:	40001800 	.word	0x40001800

0800a2f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e03f      	b.n	800a3b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d106      	bne.n	800a34c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7fa faf8 	bl	800493c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2224      	movs	r2, #36	; 0x24
 800a350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f929 	bl	800a5bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	695a      	ldr	r2, [r3, #20]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	68da      	ldr	r2, [r3, #12]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b08a      	sub	sp, #40	; 0x28
 800a3be:	af02      	add	r7, sp, #8
 800a3c0:	60f8      	str	r0, [r7, #12]
 800a3c2:	60b9      	str	r1, [r7, #8]
 800a3c4:	603b      	str	r3, [r7, #0]
 800a3c6:	4613      	mov	r3, r2
 800a3c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	d17c      	bne.n	800a4d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d002      	beq.n	800a3e6 <HAL_UART_Transmit+0x2c>
 800a3e0:	88fb      	ldrh	r3, [r7, #6]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e075      	b.n	800a4d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d101      	bne.n	800a3f8 <HAL_UART_Transmit+0x3e>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e06e      	b.n	800a4d6 <HAL_UART_Transmit+0x11c>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2221      	movs	r2, #33	; 0x21
 800a40a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a40e:	f7fb fce5 	bl	8005ddc <HAL_GetTick>
 800a412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	88fa      	ldrh	r2, [r7, #6]
 800a418:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	88fa      	ldrh	r2, [r7, #6]
 800a41e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a428:	d108      	bne.n	800a43c <HAL_UART_Transmit+0x82>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d104      	bne.n	800a43c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a432:	2300      	movs	r3, #0
 800a434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	61bb      	str	r3, [r7, #24]
 800a43a:	e003      	b.n	800a444 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a440:	2300      	movs	r3, #0
 800a442:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a44c:	e02a      	b.n	800a4a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2200      	movs	r2, #0
 800a456:	2180      	movs	r1, #128	; 0x80
 800a458:	68f8      	ldr	r0, [r7, #12]
 800a45a:	f000 f840 	bl	800a4de <UART_WaitOnFlagUntilTimeout>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	e036      	b.n	800a4d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10b      	bne.n	800a486 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a47c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	3302      	adds	r3, #2
 800a482:	61bb      	str	r3, [r7, #24]
 800a484:	e007      	b.n	800a496 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	781a      	ldrb	r2, [r3, #0]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	3301      	adds	r3, #1
 800a494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	3b01      	subs	r3, #1
 800a49e:	b29a      	uxth	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1cf      	bne.n	800a44e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2140      	movs	r1, #64	; 0x40
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 f810 	bl	800a4de <UART_WaitOnFlagUntilTimeout>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d001      	beq.n	800a4c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	e006      	b.n	800a4d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	e000      	b.n	800a4d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a4d4:	2302      	movs	r3, #2
  }
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b090      	sub	sp, #64	; 0x40
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	60f8      	str	r0, [r7, #12]
 800a4e6:	60b9      	str	r1, [r7, #8]
 800a4e8:	603b      	str	r3, [r7, #0]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ee:	e050      	b.n	800a592 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4f6:	d04c      	beq.n	800a592 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d007      	beq.n	800a50e <UART_WaitOnFlagUntilTimeout+0x30>
 800a4fe:	f7fb fc6d 	bl	8005ddc <HAL_GetTick>
 800a502:	4602      	mov	r2, r0
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d241      	bcs.n	800a592 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	330c      	adds	r3, #12
 800a514:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	e853 3f00 	ldrex	r3, [r3]
 800a51c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a520:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a524:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	330c      	adds	r3, #12
 800a52c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a52e:	637a      	str	r2, [r7, #52]	; 0x34
 800a530:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a536:	e841 2300 	strex	r3, r2, [r1]
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e5      	bne.n	800a50e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	3314      	adds	r3, #20
 800a548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	e853 3f00 	ldrex	r3, [r3]
 800a550:	613b      	str	r3, [r7, #16]
   return(result);
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	f023 0301 	bic.w	r3, r3, #1
 800a558:	63bb      	str	r3, [r7, #56]	; 0x38
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	3314      	adds	r3, #20
 800a560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a562:	623a      	str	r2, [r7, #32]
 800a564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a566:	69f9      	ldr	r1, [r7, #28]
 800a568:	6a3a      	ldr	r2, [r7, #32]
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e5      	bne.n	800a542 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2220      	movs	r2, #32
 800a57a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2220      	movs	r2, #32
 800a582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	e00f      	b.n	800a5b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	4013      	ands	r3, r2
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	bf0c      	ite	eq
 800a5a2:	2301      	moveq	r3, #1
 800a5a4:	2300      	movne	r3, #0
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d09f      	beq.n	800a4f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3740      	adds	r7, #64	; 0x40
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
	...

0800a5bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c0:	b085      	sub	sp, #20
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	691b      	ldr	r3, [r3, #16]
 800a5cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68da      	ldr	r2, [r3, #12]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689a      	ldr	r2, [r3, #8]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	431a      	orrs	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	431a      	orrs	r2, r3
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	69db      	ldr	r3, [r3, #28]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a5fe:	f023 030c 	bic.w	r3, r3, #12
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	6812      	ldr	r2, [r2, #0]
 800a606:	68b9      	ldr	r1, [r7, #8]
 800a608:	430b      	orrs	r3, r1
 800a60a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4ad0      	ldr	r2, [pc, #832]	; (800a968 <UART_SetConfig+0x3ac>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d004      	beq.n	800a636 <UART_SetConfig+0x7a>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4ace      	ldr	r2, [pc, #824]	; (800a96c <UART_SetConfig+0x3b0>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d103      	bne.n	800a63e <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a636:	f7fd ff7f 	bl	8008538 <HAL_RCC_GetPCLK2Freq>
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	e002      	b.n	800a644 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a63e:	f7fd ff67 	bl	8008510 <HAL_RCC_GetPCLK1Freq>
 800a642:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	69db      	ldr	r3, [r3, #28]
 800a648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a64c:	f040 80ba 	bne.w	800a7c4 <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	461d      	mov	r5, r3
 800a654:	f04f 0600 	mov.w	r6, #0
 800a658:	46a8      	mov	r8, r5
 800a65a:	46b1      	mov	r9, r6
 800a65c:	eb18 0308 	adds.w	r3, r8, r8
 800a660:	eb49 0409 	adc.w	r4, r9, r9
 800a664:	4698      	mov	r8, r3
 800a666:	46a1      	mov	r9, r4
 800a668:	eb18 0805 	adds.w	r8, r8, r5
 800a66c:	eb49 0906 	adc.w	r9, r9, r6
 800a670:	f04f 0100 	mov.w	r1, #0
 800a674:	f04f 0200 	mov.w	r2, #0
 800a678:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a67c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a680:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a684:	4688      	mov	r8, r1
 800a686:	4691      	mov	r9, r2
 800a688:	eb18 0005 	adds.w	r0, r8, r5
 800a68c:	eb49 0106 	adc.w	r1, r9, r6
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	461d      	mov	r5, r3
 800a696:	f04f 0600 	mov.w	r6, #0
 800a69a:	196b      	adds	r3, r5, r5
 800a69c:	eb46 0406 	adc.w	r4, r6, r6
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	4623      	mov	r3, r4
 800a6a4:	f7f6 faf0 	bl	8000c88 <__aeabi_uldivmod>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	4bb0      	ldr	r3, [pc, #704]	; (800a970 <UART_SetConfig+0x3b4>)
 800a6b0:	fba3 2302 	umull	r2, r3, r3, r2
 800a6b4:	095b      	lsrs	r3, r3, #5
 800a6b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	461d      	mov	r5, r3
 800a6be:	f04f 0600 	mov.w	r6, #0
 800a6c2:	46a9      	mov	r9, r5
 800a6c4:	46b2      	mov	sl, r6
 800a6c6:	eb19 0309 	adds.w	r3, r9, r9
 800a6ca:	eb4a 040a 	adc.w	r4, sl, sl
 800a6ce:	4699      	mov	r9, r3
 800a6d0:	46a2      	mov	sl, r4
 800a6d2:	eb19 0905 	adds.w	r9, r9, r5
 800a6d6:	eb4a 0a06 	adc.w	sl, sl, r6
 800a6da:	f04f 0100 	mov.w	r1, #0
 800a6de:	f04f 0200 	mov.w	r2, #0
 800a6e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a6ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a6ee:	4689      	mov	r9, r1
 800a6f0:	4692      	mov	sl, r2
 800a6f2:	eb19 0005 	adds.w	r0, r9, r5
 800a6f6:	eb4a 0106 	adc.w	r1, sl, r6
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	461d      	mov	r5, r3
 800a700:	f04f 0600 	mov.w	r6, #0
 800a704:	196b      	adds	r3, r5, r5
 800a706:	eb46 0406 	adc.w	r4, r6, r6
 800a70a:	461a      	mov	r2, r3
 800a70c:	4623      	mov	r3, r4
 800a70e:	f7f6 fabb 	bl	8000c88 <__aeabi_uldivmod>
 800a712:	4603      	mov	r3, r0
 800a714:	460c      	mov	r4, r1
 800a716:	461a      	mov	r2, r3
 800a718:	4b95      	ldr	r3, [pc, #596]	; (800a970 <UART_SetConfig+0x3b4>)
 800a71a:	fba3 1302 	umull	r1, r3, r3, r2
 800a71e:	095b      	lsrs	r3, r3, #5
 800a720:	2164      	movs	r1, #100	; 0x64
 800a722:	fb01 f303 	mul.w	r3, r1, r3
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	3332      	adds	r3, #50	; 0x32
 800a72c:	4a90      	ldr	r2, [pc, #576]	; (800a970 <UART_SetConfig+0x3b4>)
 800a72e:	fba2 2303 	umull	r2, r3, r2, r3
 800a732:	095b      	lsrs	r3, r3, #5
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a73a:	4498      	add	r8, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	461d      	mov	r5, r3
 800a740:	f04f 0600 	mov.w	r6, #0
 800a744:	46a9      	mov	r9, r5
 800a746:	46b2      	mov	sl, r6
 800a748:	eb19 0309 	adds.w	r3, r9, r9
 800a74c:	eb4a 040a 	adc.w	r4, sl, sl
 800a750:	4699      	mov	r9, r3
 800a752:	46a2      	mov	sl, r4
 800a754:	eb19 0905 	adds.w	r9, r9, r5
 800a758:	eb4a 0a06 	adc.w	sl, sl, r6
 800a75c:	f04f 0100 	mov.w	r1, #0
 800a760:	f04f 0200 	mov.w	r2, #0
 800a764:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a768:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a76c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a770:	4689      	mov	r9, r1
 800a772:	4692      	mov	sl, r2
 800a774:	eb19 0005 	adds.w	r0, r9, r5
 800a778:	eb4a 0106 	adc.w	r1, sl, r6
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	461d      	mov	r5, r3
 800a782:	f04f 0600 	mov.w	r6, #0
 800a786:	196b      	adds	r3, r5, r5
 800a788:	eb46 0406 	adc.w	r4, r6, r6
 800a78c:	461a      	mov	r2, r3
 800a78e:	4623      	mov	r3, r4
 800a790:	f7f6 fa7a 	bl	8000c88 <__aeabi_uldivmod>
 800a794:	4603      	mov	r3, r0
 800a796:	460c      	mov	r4, r1
 800a798:	461a      	mov	r2, r3
 800a79a:	4b75      	ldr	r3, [pc, #468]	; (800a970 <UART_SetConfig+0x3b4>)
 800a79c:	fba3 1302 	umull	r1, r3, r3, r2
 800a7a0:	095b      	lsrs	r3, r3, #5
 800a7a2:	2164      	movs	r1, #100	; 0x64
 800a7a4:	fb01 f303 	mul.w	r3, r1, r3
 800a7a8:	1ad3      	subs	r3, r2, r3
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	3332      	adds	r3, #50	; 0x32
 800a7ae:	4a70      	ldr	r2, [pc, #448]	; (800a970 <UART_SetConfig+0x3b4>)
 800a7b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7b4:	095b      	lsrs	r3, r3, #5
 800a7b6:	f003 0207 	and.w	r2, r3, #7
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4442      	add	r2, r8
 800a7c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a7c2:	e0cc      	b.n	800a95e <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	469a      	mov	sl, r3
 800a7c8:	f04f 0b00 	mov.w	fp, #0
 800a7cc:	46d0      	mov	r8, sl
 800a7ce:	46d9      	mov	r9, fp
 800a7d0:	eb18 0308 	adds.w	r3, r8, r8
 800a7d4:	eb49 0409 	adc.w	r4, r9, r9
 800a7d8:	4698      	mov	r8, r3
 800a7da:	46a1      	mov	r9, r4
 800a7dc:	eb18 080a 	adds.w	r8, r8, sl
 800a7e0:	eb49 090b 	adc.w	r9, r9, fp
 800a7e4:	f04f 0100 	mov.w	r1, #0
 800a7e8:	f04f 0200 	mov.w	r2, #0
 800a7ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a7f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a7f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a7f8:	4688      	mov	r8, r1
 800a7fa:	4691      	mov	r9, r2
 800a7fc:	eb1a 0508 	adds.w	r5, sl, r8
 800a800:	eb4b 0609 	adc.w	r6, fp, r9
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	4619      	mov	r1, r3
 800a80a:	f04f 0200 	mov.w	r2, #0
 800a80e:	f04f 0300 	mov.w	r3, #0
 800a812:	f04f 0400 	mov.w	r4, #0
 800a816:	0094      	lsls	r4, r2, #2
 800a818:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a81c:	008b      	lsls	r3, r1, #2
 800a81e:	461a      	mov	r2, r3
 800a820:	4623      	mov	r3, r4
 800a822:	4628      	mov	r0, r5
 800a824:	4631      	mov	r1, r6
 800a826:	f7f6 fa2f 	bl	8000c88 <__aeabi_uldivmod>
 800a82a:	4603      	mov	r3, r0
 800a82c:	460c      	mov	r4, r1
 800a82e:	461a      	mov	r2, r3
 800a830:	4b4f      	ldr	r3, [pc, #316]	; (800a970 <UART_SetConfig+0x3b4>)
 800a832:	fba3 2302 	umull	r2, r3, r3, r2
 800a836:	095b      	lsrs	r3, r3, #5
 800a838:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	469b      	mov	fp, r3
 800a840:	f04f 0c00 	mov.w	ip, #0
 800a844:	46d9      	mov	r9, fp
 800a846:	46e2      	mov	sl, ip
 800a848:	eb19 0309 	adds.w	r3, r9, r9
 800a84c:	eb4a 040a 	adc.w	r4, sl, sl
 800a850:	4699      	mov	r9, r3
 800a852:	46a2      	mov	sl, r4
 800a854:	eb19 090b 	adds.w	r9, r9, fp
 800a858:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a85c:	f04f 0100 	mov.w	r1, #0
 800a860:	f04f 0200 	mov.w	r2, #0
 800a864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a868:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a86c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a870:	4689      	mov	r9, r1
 800a872:	4692      	mov	sl, r2
 800a874:	eb1b 0509 	adds.w	r5, fp, r9
 800a878:	eb4c 060a 	adc.w	r6, ip, sl
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	4619      	mov	r1, r3
 800a882:	f04f 0200 	mov.w	r2, #0
 800a886:	f04f 0300 	mov.w	r3, #0
 800a88a:	f04f 0400 	mov.w	r4, #0
 800a88e:	0094      	lsls	r4, r2, #2
 800a890:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a894:	008b      	lsls	r3, r1, #2
 800a896:	461a      	mov	r2, r3
 800a898:	4623      	mov	r3, r4
 800a89a:	4628      	mov	r0, r5
 800a89c:	4631      	mov	r1, r6
 800a89e:	f7f6 f9f3 	bl	8000c88 <__aeabi_uldivmod>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	460c      	mov	r4, r1
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	4b31      	ldr	r3, [pc, #196]	; (800a970 <UART_SetConfig+0x3b4>)
 800a8aa:	fba3 1302 	umull	r1, r3, r3, r2
 800a8ae:	095b      	lsrs	r3, r3, #5
 800a8b0:	2164      	movs	r1, #100	; 0x64
 800a8b2:	fb01 f303 	mul.w	r3, r1, r3
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	011b      	lsls	r3, r3, #4
 800a8ba:	3332      	adds	r3, #50	; 0x32
 800a8bc:	4a2c      	ldr	r2, [pc, #176]	; (800a970 <UART_SetConfig+0x3b4>)
 800a8be:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c2:	095b      	lsrs	r3, r3, #5
 800a8c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8c8:	4498      	add	r8, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	469b      	mov	fp, r3
 800a8ce:	f04f 0c00 	mov.w	ip, #0
 800a8d2:	46d9      	mov	r9, fp
 800a8d4:	46e2      	mov	sl, ip
 800a8d6:	eb19 0309 	adds.w	r3, r9, r9
 800a8da:	eb4a 040a 	adc.w	r4, sl, sl
 800a8de:	4699      	mov	r9, r3
 800a8e0:	46a2      	mov	sl, r4
 800a8e2:	eb19 090b 	adds.w	r9, r9, fp
 800a8e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a8ea:	f04f 0100 	mov.w	r1, #0
 800a8ee:	f04f 0200 	mov.w	r2, #0
 800a8f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8fe:	4689      	mov	r9, r1
 800a900:	4692      	mov	sl, r2
 800a902:	eb1b 0509 	adds.w	r5, fp, r9
 800a906:	eb4c 060a 	adc.w	r6, ip, sl
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	4619      	mov	r1, r3
 800a910:	f04f 0200 	mov.w	r2, #0
 800a914:	f04f 0300 	mov.w	r3, #0
 800a918:	f04f 0400 	mov.w	r4, #0
 800a91c:	0094      	lsls	r4, r2, #2
 800a91e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a922:	008b      	lsls	r3, r1, #2
 800a924:	461a      	mov	r2, r3
 800a926:	4623      	mov	r3, r4
 800a928:	4628      	mov	r0, r5
 800a92a:	4631      	mov	r1, r6
 800a92c:	f7f6 f9ac 	bl	8000c88 <__aeabi_uldivmod>
 800a930:	4603      	mov	r3, r0
 800a932:	460c      	mov	r4, r1
 800a934:	461a      	mov	r2, r3
 800a936:	4b0e      	ldr	r3, [pc, #56]	; (800a970 <UART_SetConfig+0x3b4>)
 800a938:	fba3 1302 	umull	r1, r3, r3, r2
 800a93c:	095b      	lsrs	r3, r3, #5
 800a93e:	2164      	movs	r1, #100	; 0x64
 800a940:	fb01 f303 	mul.w	r3, r1, r3
 800a944:	1ad3      	subs	r3, r2, r3
 800a946:	011b      	lsls	r3, r3, #4
 800a948:	3332      	adds	r3, #50	; 0x32
 800a94a:	4a09      	ldr	r2, [pc, #36]	; (800a970 <UART_SetConfig+0x3b4>)
 800a94c:	fba2 2303 	umull	r2, r3, r2, r3
 800a950:	095b      	lsrs	r3, r3, #5
 800a952:	f003 020f 	and.w	r2, r3, #15
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4442      	add	r2, r8
 800a95c:	609a      	str	r2, [r3, #8]
}
 800a95e:	bf00      	nop
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a968:	40011000 	.word	0x40011000
 800a96c:	40011400 	.word	0x40011400
 800a970:	51eb851f 	.word	0x51eb851f

0800a974 <__errno>:
 800a974:	4b01      	ldr	r3, [pc, #4]	; (800a97c <__errno+0x8>)
 800a976:	6818      	ldr	r0, [r3, #0]
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	2000000c 	.word	0x2000000c

0800a980 <__libc_init_array>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	4e0d      	ldr	r6, [pc, #52]	; (800a9b8 <__libc_init_array+0x38>)
 800a984:	4c0d      	ldr	r4, [pc, #52]	; (800a9bc <__libc_init_array+0x3c>)
 800a986:	1ba4      	subs	r4, r4, r6
 800a988:	10a4      	asrs	r4, r4, #2
 800a98a:	2500      	movs	r5, #0
 800a98c:	42a5      	cmp	r5, r4
 800a98e:	d109      	bne.n	800a9a4 <__libc_init_array+0x24>
 800a990:	4e0b      	ldr	r6, [pc, #44]	; (800a9c0 <__libc_init_array+0x40>)
 800a992:	4c0c      	ldr	r4, [pc, #48]	; (800a9c4 <__libc_init_array+0x44>)
 800a994:	f005 fb0e 	bl	800ffb4 <_init>
 800a998:	1ba4      	subs	r4, r4, r6
 800a99a:	10a4      	asrs	r4, r4, #2
 800a99c:	2500      	movs	r5, #0
 800a99e:	42a5      	cmp	r5, r4
 800a9a0:	d105      	bne.n	800a9ae <__libc_init_array+0x2e>
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a9a8:	4798      	blx	r3
 800a9aa:	3501      	adds	r5, #1
 800a9ac:	e7ee      	b.n	800a98c <__libc_init_array+0xc>
 800a9ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a9b2:	4798      	blx	r3
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	e7f2      	b.n	800a99e <__libc_init_array+0x1e>
 800a9b8:	08010708 	.word	0x08010708
 800a9bc:	08010708 	.word	0x08010708
 800a9c0:	08010708 	.word	0x08010708
 800a9c4:	0801070c 	.word	0x0801070c

0800a9c8 <memcpy>:
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	1e43      	subs	r3, r0, #1
 800a9cc:	440a      	add	r2, r1
 800a9ce:	4291      	cmp	r1, r2
 800a9d0:	d100      	bne.n	800a9d4 <memcpy+0xc>
 800a9d2:	bd10      	pop	{r4, pc}
 800a9d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9dc:	e7f7      	b.n	800a9ce <memcpy+0x6>

0800a9de <memset>:
 800a9de:	4402      	add	r2, r0
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d100      	bne.n	800a9e8 <memset+0xa>
 800a9e6:	4770      	bx	lr
 800a9e8:	f803 1b01 	strb.w	r1, [r3], #1
 800a9ec:	e7f9      	b.n	800a9e2 <memset+0x4>

0800a9ee <__cvt>:
 800a9ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9f2:	ec55 4b10 	vmov	r4, r5, d0
 800a9f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a9f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a9fc:	2d00      	cmp	r5, #0
 800a9fe:	460e      	mov	r6, r1
 800aa00:	4691      	mov	r9, r2
 800aa02:	4619      	mov	r1, r3
 800aa04:	bfb8      	it	lt
 800aa06:	4622      	movlt	r2, r4
 800aa08:	462b      	mov	r3, r5
 800aa0a:	f027 0720 	bic.w	r7, r7, #32
 800aa0e:	bfbb      	ittet	lt
 800aa10:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa14:	461d      	movlt	r5, r3
 800aa16:	2300      	movge	r3, #0
 800aa18:	232d      	movlt	r3, #45	; 0x2d
 800aa1a:	bfb8      	it	lt
 800aa1c:	4614      	movlt	r4, r2
 800aa1e:	2f46      	cmp	r7, #70	; 0x46
 800aa20:	700b      	strb	r3, [r1, #0]
 800aa22:	d004      	beq.n	800aa2e <__cvt+0x40>
 800aa24:	2f45      	cmp	r7, #69	; 0x45
 800aa26:	d100      	bne.n	800aa2a <__cvt+0x3c>
 800aa28:	3601      	adds	r6, #1
 800aa2a:	2102      	movs	r1, #2
 800aa2c:	e000      	b.n	800aa30 <__cvt+0x42>
 800aa2e:	2103      	movs	r1, #3
 800aa30:	ab03      	add	r3, sp, #12
 800aa32:	9301      	str	r3, [sp, #4]
 800aa34:	ab02      	add	r3, sp, #8
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	4632      	mov	r2, r6
 800aa3a:	4653      	mov	r3, sl
 800aa3c:	ec45 4b10 	vmov	d0, r4, r5
 800aa40:	f001 feb2 	bl	800c7a8 <_dtoa_r>
 800aa44:	2f47      	cmp	r7, #71	; 0x47
 800aa46:	4680      	mov	r8, r0
 800aa48:	d102      	bne.n	800aa50 <__cvt+0x62>
 800aa4a:	f019 0f01 	tst.w	r9, #1
 800aa4e:	d026      	beq.n	800aa9e <__cvt+0xb0>
 800aa50:	2f46      	cmp	r7, #70	; 0x46
 800aa52:	eb08 0906 	add.w	r9, r8, r6
 800aa56:	d111      	bne.n	800aa7c <__cvt+0x8e>
 800aa58:	f898 3000 	ldrb.w	r3, [r8]
 800aa5c:	2b30      	cmp	r3, #48	; 0x30
 800aa5e:	d10a      	bne.n	800aa76 <__cvt+0x88>
 800aa60:	2200      	movs	r2, #0
 800aa62:	2300      	movs	r3, #0
 800aa64:	4620      	mov	r0, r4
 800aa66:	4629      	mov	r1, r5
 800aa68:	f7f6 f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa6c:	b918      	cbnz	r0, 800aa76 <__cvt+0x88>
 800aa6e:	f1c6 0601 	rsb	r6, r6, #1
 800aa72:	f8ca 6000 	str.w	r6, [sl]
 800aa76:	f8da 3000 	ldr.w	r3, [sl]
 800aa7a:	4499      	add	r9, r3
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	2300      	movs	r3, #0
 800aa80:	4620      	mov	r0, r4
 800aa82:	4629      	mov	r1, r5
 800aa84:	f7f6 f820 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa88:	b938      	cbnz	r0, 800aa9a <__cvt+0xac>
 800aa8a:	2230      	movs	r2, #48	; 0x30
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	454b      	cmp	r3, r9
 800aa90:	d205      	bcs.n	800aa9e <__cvt+0xb0>
 800aa92:	1c59      	adds	r1, r3, #1
 800aa94:	9103      	str	r1, [sp, #12]
 800aa96:	701a      	strb	r2, [r3, #0]
 800aa98:	e7f8      	b.n	800aa8c <__cvt+0x9e>
 800aa9a:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aaa2:	eba3 0308 	sub.w	r3, r3, r8
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	b004      	add	sp, #16
 800aaac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aab0 <__exponent>:
 800aab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aab2:	2900      	cmp	r1, #0
 800aab4:	4604      	mov	r4, r0
 800aab6:	bfba      	itte	lt
 800aab8:	4249      	neglt	r1, r1
 800aaba:	232d      	movlt	r3, #45	; 0x2d
 800aabc:	232b      	movge	r3, #43	; 0x2b
 800aabe:	2909      	cmp	r1, #9
 800aac0:	f804 2b02 	strb.w	r2, [r4], #2
 800aac4:	7043      	strb	r3, [r0, #1]
 800aac6:	dd20      	ble.n	800ab0a <__exponent+0x5a>
 800aac8:	f10d 0307 	add.w	r3, sp, #7
 800aacc:	461f      	mov	r7, r3
 800aace:	260a      	movs	r6, #10
 800aad0:	fb91 f5f6 	sdiv	r5, r1, r6
 800aad4:	fb06 1115 	mls	r1, r6, r5, r1
 800aad8:	3130      	adds	r1, #48	; 0x30
 800aada:	2d09      	cmp	r5, #9
 800aadc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aae0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800aae4:	4629      	mov	r1, r5
 800aae6:	dc09      	bgt.n	800aafc <__exponent+0x4c>
 800aae8:	3130      	adds	r1, #48	; 0x30
 800aaea:	3b02      	subs	r3, #2
 800aaec:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aaf0:	42bb      	cmp	r3, r7
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	d304      	bcc.n	800ab00 <__exponent+0x50>
 800aaf6:	1a10      	subs	r0, r2, r0
 800aaf8:	b003      	add	sp, #12
 800aafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aafc:	4613      	mov	r3, r2
 800aafe:	e7e7      	b.n	800aad0 <__exponent+0x20>
 800ab00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab04:	f804 2b01 	strb.w	r2, [r4], #1
 800ab08:	e7f2      	b.n	800aaf0 <__exponent+0x40>
 800ab0a:	2330      	movs	r3, #48	; 0x30
 800ab0c:	4419      	add	r1, r3
 800ab0e:	7083      	strb	r3, [r0, #2]
 800ab10:	1d02      	adds	r2, r0, #4
 800ab12:	70c1      	strb	r1, [r0, #3]
 800ab14:	e7ef      	b.n	800aaf6 <__exponent+0x46>
	...

0800ab18 <_printf_float>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	b08d      	sub	sp, #52	; 0x34
 800ab1e:	460c      	mov	r4, r1
 800ab20:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ab24:	4616      	mov	r6, r2
 800ab26:	461f      	mov	r7, r3
 800ab28:	4605      	mov	r5, r0
 800ab2a:	f003 f89b 	bl	800dc64 <_localeconv_r>
 800ab2e:	6803      	ldr	r3, [r0, #0]
 800ab30:	9304      	str	r3, [sp, #16]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7f5 fb4c 	bl	80001d0 <strlen>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab40:	9005      	str	r0, [sp, #20]
 800ab42:	3307      	adds	r3, #7
 800ab44:	f023 0307 	bic.w	r3, r3, #7
 800ab48:	f103 0208 	add.w	r2, r3, #8
 800ab4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab50:	f8d4 b000 	ldr.w	fp, [r4]
 800ab54:	f8c8 2000 	str.w	r2, [r8]
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ab60:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ab64:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ab68:	9307      	str	r3, [sp, #28]
 800ab6a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab72:	4ba7      	ldr	r3, [pc, #668]	; (800ae10 <_printf_float+0x2f8>)
 800ab74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab78:	f7f5 ffd8 	bl	8000b2c <__aeabi_dcmpun>
 800ab7c:	bb70      	cbnz	r0, 800abdc <_printf_float+0xc4>
 800ab7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab82:	4ba3      	ldr	r3, [pc, #652]	; (800ae10 <_printf_float+0x2f8>)
 800ab84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab88:	f7f5 ffb2 	bl	8000af0 <__aeabi_dcmple>
 800ab8c:	bb30      	cbnz	r0, 800abdc <_printf_float+0xc4>
 800ab8e:	2200      	movs	r2, #0
 800ab90:	2300      	movs	r3, #0
 800ab92:	4640      	mov	r0, r8
 800ab94:	4649      	mov	r1, r9
 800ab96:	f7f5 ffa1 	bl	8000adc <__aeabi_dcmplt>
 800ab9a:	b110      	cbz	r0, 800aba2 <_printf_float+0x8a>
 800ab9c:	232d      	movs	r3, #45	; 0x2d
 800ab9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aba2:	4a9c      	ldr	r2, [pc, #624]	; (800ae14 <_printf_float+0x2fc>)
 800aba4:	4b9c      	ldr	r3, [pc, #624]	; (800ae18 <_printf_float+0x300>)
 800aba6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800abaa:	bf8c      	ite	hi
 800abac:	4690      	movhi	r8, r2
 800abae:	4698      	movls	r8, r3
 800abb0:	2303      	movs	r3, #3
 800abb2:	f02b 0204 	bic.w	r2, fp, #4
 800abb6:	6123      	str	r3, [r4, #16]
 800abb8:	6022      	str	r2, [r4, #0]
 800abba:	f04f 0900 	mov.w	r9, #0
 800abbe:	9700      	str	r7, [sp, #0]
 800abc0:	4633      	mov	r3, r6
 800abc2:	aa0b      	add	r2, sp, #44	; 0x2c
 800abc4:	4621      	mov	r1, r4
 800abc6:	4628      	mov	r0, r5
 800abc8:	f000 f9e6 	bl	800af98 <_printf_common>
 800abcc:	3001      	adds	r0, #1
 800abce:	f040 808d 	bne.w	800acec <_printf_float+0x1d4>
 800abd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abd6:	b00d      	add	sp, #52	; 0x34
 800abd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abdc:	4642      	mov	r2, r8
 800abde:	464b      	mov	r3, r9
 800abe0:	4640      	mov	r0, r8
 800abe2:	4649      	mov	r1, r9
 800abe4:	f7f5 ffa2 	bl	8000b2c <__aeabi_dcmpun>
 800abe8:	b110      	cbz	r0, 800abf0 <_printf_float+0xd8>
 800abea:	4a8c      	ldr	r2, [pc, #560]	; (800ae1c <_printf_float+0x304>)
 800abec:	4b8c      	ldr	r3, [pc, #560]	; (800ae20 <_printf_float+0x308>)
 800abee:	e7da      	b.n	800aba6 <_printf_float+0x8e>
 800abf0:	6861      	ldr	r1, [r4, #4]
 800abf2:	1c4b      	adds	r3, r1, #1
 800abf4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800abf8:	a80a      	add	r0, sp, #40	; 0x28
 800abfa:	d13e      	bne.n	800ac7a <_printf_float+0x162>
 800abfc:	2306      	movs	r3, #6
 800abfe:	6063      	str	r3, [r4, #4]
 800ac00:	2300      	movs	r3, #0
 800ac02:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ac06:	ab09      	add	r3, sp, #36	; 0x24
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	ec49 8b10 	vmov	d0, r8, r9
 800ac0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ac12:	6022      	str	r2, [r4, #0]
 800ac14:	f8cd a004 	str.w	sl, [sp, #4]
 800ac18:	6861      	ldr	r1, [r4, #4]
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f7ff fee7 	bl	800a9ee <__cvt>
 800ac20:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ac24:	2b47      	cmp	r3, #71	; 0x47
 800ac26:	4680      	mov	r8, r0
 800ac28:	d109      	bne.n	800ac3e <_printf_float+0x126>
 800ac2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac2c:	1cd8      	adds	r0, r3, #3
 800ac2e:	db02      	blt.n	800ac36 <_printf_float+0x11e>
 800ac30:	6862      	ldr	r2, [r4, #4]
 800ac32:	4293      	cmp	r3, r2
 800ac34:	dd47      	ble.n	800acc6 <_printf_float+0x1ae>
 800ac36:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac3a:	fa5f fa8a 	uxtb.w	sl, sl
 800ac3e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ac42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac44:	d824      	bhi.n	800ac90 <_printf_float+0x178>
 800ac46:	3901      	subs	r1, #1
 800ac48:	4652      	mov	r2, sl
 800ac4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac4e:	9109      	str	r1, [sp, #36]	; 0x24
 800ac50:	f7ff ff2e 	bl	800aab0 <__exponent>
 800ac54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac56:	1813      	adds	r3, r2, r0
 800ac58:	2a01      	cmp	r2, #1
 800ac5a:	4681      	mov	r9, r0
 800ac5c:	6123      	str	r3, [r4, #16]
 800ac5e:	dc02      	bgt.n	800ac66 <_printf_float+0x14e>
 800ac60:	6822      	ldr	r2, [r4, #0]
 800ac62:	07d1      	lsls	r1, r2, #31
 800ac64:	d501      	bpl.n	800ac6a <_printf_float+0x152>
 800ac66:	3301      	adds	r3, #1
 800ac68:	6123      	str	r3, [r4, #16]
 800ac6a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d0a5      	beq.n	800abbe <_printf_float+0xa6>
 800ac72:	232d      	movs	r3, #45	; 0x2d
 800ac74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac78:	e7a1      	b.n	800abbe <_printf_float+0xa6>
 800ac7a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ac7e:	f000 8177 	beq.w	800af70 <_printf_float+0x458>
 800ac82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ac86:	d1bb      	bne.n	800ac00 <_printf_float+0xe8>
 800ac88:	2900      	cmp	r1, #0
 800ac8a:	d1b9      	bne.n	800ac00 <_printf_float+0xe8>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e7b6      	b.n	800abfe <_printf_float+0xe6>
 800ac90:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ac94:	d119      	bne.n	800acca <_printf_float+0x1b2>
 800ac96:	2900      	cmp	r1, #0
 800ac98:	6863      	ldr	r3, [r4, #4]
 800ac9a:	dd0c      	ble.n	800acb6 <_printf_float+0x19e>
 800ac9c:	6121      	str	r1, [r4, #16]
 800ac9e:	b913      	cbnz	r3, 800aca6 <_printf_float+0x18e>
 800aca0:	6822      	ldr	r2, [r4, #0]
 800aca2:	07d2      	lsls	r2, r2, #31
 800aca4:	d502      	bpl.n	800acac <_printf_float+0x194>
 800aca6:	3301      	adds	r3, #1
 800aca8:	440b      	add	r3, r1
 800acaa:	6123      	str	r3, [r4, #16]
 800acac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acae:	65a3      	str	r3, [r4, #88]	; 0x58
 800acb0:	f04f 0900 	mov.w	r9, #0
 800acb4:	e7d9      	b.n	800ac6a <_printf_float+0x152>
 800acb6:	b913      	cbnz	r3, 800acbe <_printf_float+0x1a6>
 800acb8:	6822      	ldr	r2, [r4, #0]
 800acba:	07d0      	lsls	r0, r2, #31
 800acbc:	d501      	bpl.n	800acc2 <_printf_float+0x1aa>
 800acbe:	3302      	adds	r3, #2
 800acc0:	e7f3      	b.n	800acaa <_printf_float+0x192>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e7f1      	b.n	800acaa <_printf_float+0x192>
 800acc6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800acca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800acce:	4293      	cmp	r3, r2
 800acd0:	db05      	blt.n	800acde <_printf_float+0x1c6>
 800acd2:	6822      	ldr	r2, [r4, #0]
 800acd4:	6123      	str	r3, [r4, #16]
 800acd6:	07d1      	lsls	r1, r2, #31
 800acd8:	d5e8      	bpl.n	800acac <_printf_float+0x194>
 800acda:	3301      	adds	r3, #1
 800acdc:	e7e5      	b.n	800acaa <_printf_float+0x192>
 800acde:	2b00      	cmp	r3, #0
 800ace0:	bfd4      	ite	le
 800ace2:	f1c3 0302 	rsble	r3, r3, #2
 800ace6:	2301      	movgt	r3, #1
 800ace8:	4413      	add	r3, r2
 800acea:	e7de      	b.n	800acaa <_printf_float+0x192>
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	055a      	lsls	r2, r3, #21
 800acf0:	d407      	bmi.n	800ad02 <_printf_float+0x1ea>
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	4642      	mov	r2, r8
 800acf6:	4631      	mov	r1, r6
 800acf8:	4628      	mov	r0, r5
 800acfa:	47b8      	blx	r7
 800acfc:	3001      	adds	r0, #1
 800acfe:	d12b      	bne.n	800ad58 <_printf_float+0x240>
 800ad00:	e767      	b.n	800abd2 <_printf_float+0xba>
 800ad02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ad06:	f240 80dc 	bls.w	800aec2 <_printf_float+0x3aa>
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ad12:	f7f5 fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d033      	beq.n	800ad82 <_printf_float+0x26a>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	4a41      	ldr	r2, [pc, #260]	; (800ae24 <_printf_float+0x30c>)
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4628      	mov	r0, r5
 800ad22:	47b8      	blx	r7
 800ad24:	3001      	adds	r0, #1
 800ad26:	f43f af54 	beq.w	800abd2 <_printf_float+0xba>
 800ad2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	db02      	blt.n	800ad38 <_printf_float+0x220>
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	07d8      	lsls	r0, r3, #31
 800ad36:	d50f      	bpl.n	800ad58 <_printf_float+0x240>
 800ad38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4628      	mov	r0, r5
 800ad40:	47b8      	blx	r7
 800ad42:	3001      	adds	r0, #1
 800ad44:	f43f af45 	beq.w	800abd2 <_printf_float+0xba>
 800ad48:	f04f 0800 	mov.w	r8, #0
 800ad4c:	f104 091a 	add.w	r9, r4, #26
 800ad50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad52:	3b01      	subs	r3, #1
 800ad54:	4543      	cmp	r3, r8
 800ad56:	dc09      	bgt.n	800ad6c <_printf_float+0x254>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	079b      	lsls	r3, r3, #30
 800ad5c:	f100 8103 	bmi.w	800af66 <_printf_float+0x44e>
 800ad60:	68e0      	ldr	r0, [r4, #12]
 800ad62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad64:	4298      	cmp	r0, r3
 800ad66:	bfb8      	it	lt
 800ad68:	4618      	movlt	r0, r3
 800ad6a:	e734      	b.n	800abd6 <_printf_float+0xbe>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	464a      	mov	r2, r9
 800ad70:	4631      	mov	r1, r6
 800ad72:	4628      	mov	r0, r5
 800ad74:	47b8      	blx	r7
 800ad76:	3001      	adds	r0, #1
 800ad78:	f43f af2b 	beq.w	800abd2 <_printf_float+0xba>
 800ad7c:	f108 0801 	add.w	r8, r8, #1
 800ad80:	e7e6      	b.n	800ad50 <_printf_float+0x238>
 800ad82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	dc2b      	bgt.n	800ade0 <_printf_float+0x2c8>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	4a26      	ldr	r2, [pc, #152]	; (800ae24 <_printf_float+0x30c>)
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	4628      	mov	r0, r5
 800ad90:	47b8      	blx	r7
 800ad92:	3001      	adds	r0, #1
 800ad94:	f43f af1d 	beq.w	800abd2 <_printf_float+0xba>
 800ad98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad9a:	b923      	cbnz	r3, 800ada6 <_printf_float+0x28e>
 800ad9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad9e:	b913      	cbnz	r3, 800ada6 <_printf_float+0x28e>
 800ada0:	6823      	ldr	r3, [r4, #0]
 800ada2:	07d9      	lsls	r1, r3, #31
 800ada4:	d5d8      	bpl.n	800ad58 <_printf_float+0x240>
 800ada6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adaa:	4631      	mov	r1, r6
 800adac:	4628      	mov	r0, r5
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	f43f af0e 	beq.w	800abd2 <_printf_float+0xba>
 800adb6:	f04f 0900 	mov.w	r9, #0
 800adba:	f104 0a1a 	add.w	sl, r4, #26
 800adbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adc0:	425b      	negs	r3, r3
 800adc2:	454b      	cmp	r3, r9
 800adc4:	dc01      	bgt.n	800adca <_printf_float+0x2b2>
 800adc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc8:	e794      	b.n	800acf4 <_printf_float+0x1dc>
 800adca:	2301      	movs	r3, #1
 800adcc:	4652      	mov	r2, sl
 800adce:	4631      	mov	r1, r6
 800add0:	4628      	mov	r0, r5
 800add2:	47b8      	blx	r7
 800add4:	3001      	adds	r0, #1
 800add6:	f43f aefc 	beq.w	800abd2 <_printf_float+0xba>
 800adda:	f109 0901 	add.w	r9, r9, #1
 800adde:	e7ee      	b.n	800adbe <_printf_float+0x2a6>
 800ade0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ade2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ade4:	429a      	cmp	r2, r3
 800ade6:	bfa8      	it	ge
 800ade8:	461a      	movge	r2, r3
 800adea:	2a00      	cmp	r2, #0
 800adec:	4691      	mov	r9, r2
 800adee:	dd07      	ble.n	800ae00 <_printf_float+0x2e8>
 800adf0:	4613      	mov	r3, r2
 800adf2:	4631      	mov	r1, r6
 800adf4:	4642      	mov	r2, r8
 800adf6:	4628      	mov	r0, r5
 800adf8:	47b8      	blx	r7
 800adfa:	3001      	adds	r0, #1
 800adfc:	f43f aee9 	beq.w	800abd2 <_printf_float+0xba>
 800ae00:	f104 031a 	add.w	r3, r4, #26
 800ae04:	f04f 0b00 	mov.w	fp, #0
 800ae08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae0c:	9306      	str	r3, [sp, #24]
 800ae0e:	e015      	b.n	800ae3c <_printf_float+0x324>
 800ae10:	7fefffff 	.word	0x7fefffff
 800ae14:	080103a0 	.word	0x080103a0
 800ae18:	0801039c 	.word	0x0801039c
 800ae1c:	080103a8 	.word	0x080103a8
 800ae20:	080103a4 	.word	0x080103a4
 800ae24:	080103ac 	.word	0x080103ac
 800ae28:	2301      	movs	r3, #1
 800ae2a:	9a06      	ldr	r2, [sp, #24]
 800ae2c:	4631      	mov	r1, r6
 800ae2e:	4628      	mov	r0, r5
 800ae30:	47b8      	blx	r7
 800ae32:	3001      	adds	r0, #1
 800ae34:	f43f aecd 	beq.w	800abd2 <_printf_float+0xba>
 800ae38:	f10b 0b01 	add.w	fp, fp, #1
 800ae3c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ae40:	ebaa 0309 	sub.w	r3, sl, r9
 800ae44:	455b      	cmp	r3, fp
 800ae46:	dcef      	bgt.n	800ae28 <_printf_float+0x310>
 800ae48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	44d0      	add	r8, sl
 800ae50:	db15      	blt.n	800ae7e <_printf_float+0x366>
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	07da      	lsls	r2, r3, #31
 800ae56:	d412      	bmi.n	800ae7e <_printf_float+0x366>
 800ae58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae5c:	eba3 020a 	sub.w	r2, r3, sl
 800ae60:	eba3 0a01 	sub.w	sl, r3, r1
 800ae64:	4592      	cmp	sl, r2
 800ae66:	bfa8      	it	ge
 800ae68:	4692      	movge	sl, r2
 800ae6a:	f1ba 0f00 	cmp.w	sl, #0
 800ae6e:	dc0e      	bgt.n	800ae8e <_printf_float+0x376>
 800ae70:	f04f 0800 	mov.w	r8, #0
 800ae74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae78:	f104 091a 	add.w	r9, r4, #26
 800ae7c:	e019      	b.n	800aeb2 <_printf_float+0x39a>
 800ae7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae82:	4631      	mov	r1, r6
 800ae84:	4628      	mov	r0, r5
 800ae86:	47b8      	blx	r7
 800ae88:	3001      	adds	r0, #1
 800ae8a:	d1e5      	bne.n	800ae58 <_printf_float+0x340>
 800ae8c:	e6a1      	b.n	800abd2 <_printf_float+0xba>
 800ae8e:	4653      	mov	r3, sl
 800ae90:	4642      	mov	r2, r8
 800ae92:	4631      	mov	r1, r6
 800ae94:	4628      	mov	r0, r5
 800ae96:	47b8      	blx	r7
 800ae98:	3001      	adds	r0, #1
 800ae9a:	d1e9      	bne.n	800ae70 <_printf_float+0x358>
 800ae9c:	e699      	b.n	800abd2 <_printf_float+0xba>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	464a      	mov	r2, r9
 800aea2:	4631      	mov	r1, r6
 800aea4:	4628      	mov	r0, r5
 800aea6:	47b8      	blx	r7
 800aea8:	3001      	adds	r0, #1
 800aeaa:	f43f ae92 	beq.w	800abd2 <_printf_float+0xba>
 800aeae:	f108 0801 	add.w	r8, r8, #1
 800aeb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aeb6:	1a9b      	subs	r3, r3, r2
 800aeb8:	eba3 030a 	sub.w	r3, r3, sl
 800aebc:	4543      	cmp	r3, r8
 800aebe:	dcee      	bgt.n	800ae9e <_printf_float+0x386>
 800aec0:	e74a      	b.n	800ad58 <_printf_float+0x240>
 800aec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aec4:	2a01      	cmp	r2, #1
 800aec6:	dc01      	bgt.n	800aecc <_printf_float+0x3b4>
 800aec8:	07db      	lsls	r3, r3, #31
 800aeca:	d53a      	bpl.n	800af42 <_printf_float+0x42a>
 800aecc:	2301      	movs	r3, #1
 800aece:	4642      	mov	r2, r8
 800aed0:	4631      	mov	r1, r6
 800aed2:	4628      	mov	r0, r5
 800aed4:	47b8      	blx	r7
 800aed6:	3001      	adds	r0, #1
 800aed8:	f43f ae7b 	beq.w	800abd2 <_printf_float+0xba>
 800aedc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aee0:	4631      	mov	r1, r6
 800aee2:	4628      	mov	r0, r5
 800aee4:	47b8      	blx	r7
 800aee6:	3001      	adds	r0, #1
 800aee8:	f108 0801 	add.w	r8, r8, #1
 800aeec:	f43f ae71 	beq.w	800abd2 <_printf_float+0xba>
 800aef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef2:	2200      	movs	r2, #0
 800aef4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800aef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aefc:	2300      	movs	r3, #0
 800aefe:	f7f5 fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 800af02:	b9c8      	cbnz	r0, 800af38 <_printf_float+0x420>
 800af04:	4653      	mov	r3, sl
 800af06:	4642      	mov	r2, r8
 800af08:	4631      	mov	r1, r6
 800af0a:	4628      	mov	r0, r5
 800af0c:	47b8      	blx	r7
 800af0e:	3001      	adds	r0, #1
 800af10:	d10e      	bne.n	800af30 <_printf_float+0x418>
 800af12:	e65e      	b.n	800abd2 <_printf_float+0xba>
 800af14:	2301      	movs	r3, #1
 800af16:	4652      	mov	r2, sl
 800af18:	4631      	mov	r1, r6
 800af1a:	4628      	mov	r0, r5
 800af1c:	47b8      	blx	r7
 800af1e:	3001      	adds	r0, #1
 800af20:	f43f ae57 	beq.w	800abd2 <_printf_float+0xba>
 800af24:	f108 0801 	add.w	r8, r8, #1
 800af28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af2a:	3b01      	subs	r3, #1
 800af2c:	4543      	cmp	r3, r8
 800af2e:	dcf1      	bgt.n	800af14 <_printf_float+0x3fc>
 800af30:	464b      	mov	r3, r9
 800af32:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800af36:	e6de      	b.n	800acf6 <_printf_float+0x1de>
 800af38:	f04f 0800 	mov.w	r8, #0
 800af3c:	f104 0a1a 	add.w	sl, r4, #26
 800af40:	e7f2      	b.n	800af28 <_printf_float+0x410>
 800af42:	2301      	movs	r3, #1
 800af44:	e7df      	b.n	800af06 <_printf_float+0x3ee>
 800af46:	2301      	movs	r3, #1
 800af48:	464a      	mov	r2, r9
 800af4a:	4631      	mov	r1, r6
 800af4c:	4628      	mov	r0, r5
 800af4e:	47b8      	blx	r7
 800af50:	3001      	adds	r0, #1
 800af52:	f43f ae3e 	beq.w	800abd2 <_printf_float+0xba>
 800af56:	f108 0801 	add.w	r8, r8, #1
 800af5a:	68e3      	ldr	r3, [r4, #12]
 800af5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af5e:	1a9b      	subs	r3, r3, r2
 800af60:	4543      	cmp	r3, r8
 800af62:	dcf0      	bgt.n	800af46 <_printf_float+0x42e>
 800af64:	e6fc      	b.n	800ad60 <_printf_float+0x248>
 800af66:	f04f 0800 	mov.w	r8, #0
 800af6a:	f104 0919 	add.w	r9, r4, #25
 800af6e:	e7f4      	b.n	800af5a <_printf_float+0x442>
 800af70:	2900      	cmp	r1, #0
 800af72:	f43f ae8b 	beq.w	800ac8c <_printf_float+0x174>
 800af76:	2300      	movs	r3, #0
 800af78:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800af7c:	ab09      	add	r3, sp, #36	; 0x24
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	ec49 8b10 	vmov	d0, r8, r9
 800af84:	6022      	str	r2, [r4, #0]
 800af86:	f8cd a004 	str.w	sl, [sp, #4]
 800af8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af8e:	4628      	mov	r0, r5
 800af90:	f7ff fd2d 	bl	800a9ee <__cvt>
 800af94:	4680      	mov	r8, r0
 800af96:	e648      	b.n	800ac2a <_printf_float+0x112>

0800af98 <_printf_common>:
 800af98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af9c:	4691      	mov	r9, r2
 800af9e:	461f      	mov	r7, r3
 800afa0:	688a      	ldr	r2, [r1, #8]
 800afa2:	690b      	ldr	r3, [r1, #16]
 800afa4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afa8:	4293      	cmp	r3, r2
 800afaa:	bfb8      	it	lt
 800afac:	4613      	movlt	r3, r2
 800afae:	f8c9 3000 	str.w	r3, [r9]
 800afb2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afb6:	4606      	mov	r6, r0
 800afb8:	460c      	mov	r4, r1
 800afba:	b112      	cbz	r2, 800afc2 <_printf_common+0x2a>
 800afbc:	3301      	adds	r3, #1
 800afbe:	f8c9 3000 	str.w	r3, [r9]
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	0699      	lsls	r1, r3, #26
 800afc6:	bf42      	ittt	mi
 800afc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800afcc:	3302      	addmi	r3, #2
 800afce:	f8c9 3000 	strmi.w	r3, [r9]
 800afd2:	6825      	ldr	r5, [r4, #0]
 800afd4:	f015 0506 	ands.w	r5, r5, #6
 800afd8:	d107      	bne.n	800afea <_printf_common+0x52>
 800afda:	f104 0a19 	add.w	sl, r4, #25
 800afde:	68e3      	ldr	r3, [r4, #12]
 800afe0:	f8d9 2000 	ldr.w	r2, [r9]
 800afe4:	1a9b      	subs	r3, r3, r2
 800afe6:	42ab      	cmp	r3, r5
 800afe8:	dc28      	bgt.n	800b03c <_printf_common+0xa4>
 800afea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800afee:	6822      	ldr	r2, [r4, #0]
 800aff0:	3300      	adds	r3, #0
 800aff2:	bf18      	it	ne
 800aff4:	2301      	movne	r3, #1
 800aff6:	0692      	lsls	r2, r2, #26
 800aff8:	d42d      	bmi.n	800b056 <_printf_common+0xbe>
 800affa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800affe:	4639      	mov	r1, r7
 800b000:	4630      	mov	r0, r6
 800b002:	47c0      	blx	r8
 800b004:	3001      	adds	r0, #1
 800b006:	d020      	beq.n	800b04a <_printf_common+0xb2>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	68e5      	ldr	r5, [r4, #12]
 800b00c:	f8d9 2000 	ldr.w	r2, [r9]
 800b010:	f003 0306 	and.w	r3, r3, #6
 800b014:	2b04      	cmp	r3, #4
 800b016:	bf08      	it	eq
 800b018:	1aad      	subeq	r5, r5, r2
 800b01a:	68a3      	ldr	r3, [r4, #8]
 800b01c:	6922      	ldr	r2, [r4, #16]
 800b01e:	bf0c      	ite	eq
 800b020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b024:	2500      	movne	r5, #0
 800b026:	4293      	cmp	r3, r2
 800b028:	bfc4      	itt	gt
 800b02a:	1a9b      	subgt	r3, r3, r2
 800b02c:	18ed      	addgt	r5, r5, r3
 800b02e:	f04f 0900 	mov.w	r9, #0
 800b032:	341a      	adds	r4, #26
 800b034:	454d      	cmp	r5, r9
 800b036:	d11a      	bne.n	800b06e <_printf_common+0xd6>
 800b038:	2000      	movs	r0, #0
 800b03a:	e008      	b.n	800b04e <_printf_common+0xb6>
 800b03c:	2301      	movs	r3, #1
 800b03e:	4652      	mov	r2, sl
 800b040:	4639      	mov	r1, r7
 800b042:	4630      	mov	r0, r6
 800b044:	47c0      	blx	r8
 800b046:	3001      	adds	r0, #1
 800b048:	d103      	bne.n	800b052 <_printf_common+0xba>
 800b04a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b052:	3501      	adds	r5, #1
 800b054:	e7c3      	b.n	800afde <_printf_common+0x46>
 800b056:	18e1      	adds	r1, r4, r3
 800b058:	1c5a      	adds	r2, r3, #1
 800b05a:	2030      	movs	r0, #48	; 0x30
 800b05c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b060:	4422      	add	r2, r4
 800b062:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b066:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b06a:	3302      	adds	r3, #2
 800b06c:	e7c5      	b.n	800affa <_printf_common+0x62>
 800b06e:	2301      	movs	r3, #1
 800b070:	4622      	mov	r2, r4
 800b072:	4639      	mov	r1, r7
 800b074:	4630      	mov	r0, r6
 800b076:	47c0      	blx	r8
 800b078:	3001      	adds	r0, #1
 800b07a:	d0e6      	beq.n	800b04a <_printf_common+0xb2>
 800b07c:	f109 0901 	add.w	r9, r9, #1
 800b080:	e7d8      	b.n	800b034 <_printf_common+0x9c>
	...

0800b084 <_printf_i>:
 800b084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b088:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b08c:	460c      	mov	r4, r1
 800b08e:	7e09      	ldrb	r1, [r1, #24]
 800b090:	b085      	sub	sp, #20
 800b092:	296e      	cmp	r1, #110	; 0x6e
 800b094:	4617      	mov	r7, r2
 800b096:	4606      	mov	r6, r0
 800b098:	4698      	mov	r8, r3
 800b09a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b09c:	f000 80b3 	beq.w	800b206 <_printf_i+0x182>
 800b0a0:	d822      	bhi.n	800b0e8 <_printf_i+0x64>
 800b0a2:	2963      	cmp	r1, #99	; 0x63
 800b0a4:	d036      	beq.n	800b114 <_printf_i+0x90>
 800b0a6:	d80a      	bhi.n	800b0be <_printf_i+0x3a>
 800b0a8:	2900      	cmp	r1, #0
 800b0aa:	f000 80b9 	beq.w	800b220 <_printf_i+0x19c>
 800b0ae:	2958      	cmp	r1, #88	; 0x58
 800b0b0:	f000 8083 	beq.w	800b1ba <_printf_i+0x136>
 800b0b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b0bc:	e032      	b.n	800b124 <_printf_i+0xa0>
 800b0be:	2964      	cmp	r1, #100	; 0x64
 800b0c0:	d001      	beq.n	800b0c6 <_printf_i+0x42>
 800b0c2:	2969      	cmp	r1, #105	; 0x69
 800b0c4:	d1f6      	bne.n	800b0b4 <_printf_i+0x30>
 800b0c6:	6820      	ldr	r0, [r4, #0]
 800b0c8:	6813      	ldr	r3, [r2, #0]
 800b0ca:	0605      	lsls	r5, r0, #24
 800b0cc:	f103 0104 	add.w	r1, r3, #4
 800b0d0:	d52a      	bpl.n	800b128 <_printf_i+0xa4>
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6011      	str	r1, [r2, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	da03      	bge.n	800b0e2 <_printf_i+0x5e>
 800b0da:	222d      	movs	r2, #45	; 0x2d
 800b0dc:	425b      	negs	r3, r3
 800b0de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b0e2:	486f      	ldr	r0, [pc, #444]	; (800b2a0 <_printf_i+0x21c>)
 800b0e4:	220a      	movs	r2, #10
 800b0e6:	e039      	b.n	800b15c <_printf_i+0xd8>
 800b0e8:	2973      	cmp	r1, #115	; 0x73
 800b0ea:	f000 809d 	beq.w	800b228 <_printf_i+0x1a4>
 800b0ee:	d808      	bhi.n	800b102 <_printf_i+0x7e>
 800b0f0:	296f      	cmp	r1, #111	; 0x6f
 800b0f2:	d020      	beq.n	800b136 <_printf_i+0xb2>
 800b0f4:	2970      	cmp	r1, #112	; 0x70
 800b0f6:	d1dd      	bne.n	800b0b4 <_printf_i+0x30>
 800b0f8:	6823      	ldr	r3, [r4, #0]
 800b0fa:	f043 0320 	orr.w	r3, r3, #32
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	e003      	b.n	800b10a <_printf_i+0x86>
 800b102:	2975      	cmp	r1, #117	; 0x75
 800b104:	d017      	beq.n	800b136 <_printf_i+0xb2>
 800b106:	2978      	cmp	r1, #120	; 0x78
 800b108:	d1d4      	bne.n	800b0b4 <_printf_i+0x30>
 800b10a:	2378      	movs	r3, #120	; 0x78
 800b10c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b110:	4864      	ldr	r0, [pc, #400]	; (800b2a4 <_printf_i+0x220>)
 800b112:	e055      	b.n	800b1c0 <_printf_i+0x13c>
 800b114:	6813      	ldr	r3, [r2, #0]
 800b116:	1d19      	adds	r1, r3, #4
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6011      	str	r1, [r2, #0]
 800b11c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b124:	2301      	movs	r3, #1
 800b126:	e08c      	b.n	800b242 <_printf_i+0x1be>
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	6011      	str	r1, [r2, #0]
 800b12c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b130:	bf18      	it	ne
 800b132:	b21b      	sxthne	r3, r3
 800b134:	e7cf      	b.n	800b0d6 <_printf_i+0x52>
 800b136:	6813      	ldr	r3, [r2, #0]
 800b138:	6825      	ldr	r5, [r4, #0]
 800b13a:	1d18      	adds	r0, r3, #4
 800b13c:	6010      	str	r0, [r2, #0]
 800b13e:	0628      	lsls	r0, r5, #24
 800b140:	d501      	bpl.n	800b146 <_printf_i+0xc2>
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	e002      	b.n	800b14c <_printf_i+0xc8>
 800b146:	0668      	lsls	r0, r5, #25
 800b148:	d5fb      	bpl.n	800b142 <_printf_i+0xbe>
 800b14a:	881b      	ldrh	r3, [r3, #0]
 800b14c:	4854      	ldr	r0, [pc, #336]	; (800b2a0 <_printf_i+0x21c>)
 800b14e:	296f      	cmp	r1, #111	; 0x6f
 800b150:	bf14      	ite	ne
 800b152:	220a      	movne	r2, #10
 800b154:	2208      	moveq	r2, #8
 800b156:	2100      	movs	r1, #0
 800b158:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b15c:	6865      	ldr	r5, [r4, #4]
 800b15e:	60a5      	str	r5, [r4, #8]
 800b160:	2d00      	cmp	r5, #0
 800b162:	f2c0 8095 	blt.w	800b290 <_printf_i+0x20c>
 800b166:	6821      	ldr	r1, [r4, #0]
 800b168:	f021 0104 	bic.w	r1, r1, #4
 800b16c:	6021      	str	r1, [r4, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d13d      	bne.n	800b1ee <_printf_i+0x16a>
 800b172:	2d00      	cmp	r5, #0
 800b174:	f040 808e 	bne.w	800b294 <_printf_i+0x210>
 800b178:	4665      	mov	r5, ip
 800b17a:	2a08      	cmp	r2, #8
 800b17c:	d10b      	bne.n	800b196 <_printf_i+0x112>
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	07db      	lsls	r3, r3, #31
 800b182:	d508      	bpl.n	800b196 <_printf_i+0x112>
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	6862      	ldr	r2, [r4, #4]
 800b188:	429a      	cmp	r2, r3
 800b18a:	bfde      	ittt	le
 800b18c:	2330      	movle	r3, #48	; 0x30
 800b18e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b192:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b196:	ebac 0305 	sub.w	r3, ip, r5
 800b19a:	6123      	str	r3, [r4, #16]
 800b19c:	f8cd 8000 	str.w	r8, [sp]
 800b1a0:	463b      	mov	r3, r7
 800b1a2:	aa03      	add	r2, sp, #12
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f7ff fef6 	bl	800af98 <_printf_common>
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	d14d      	bne.n	800b24c <_printf_i+0x1c8>
 800b1b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1b4:	b005      	add	sp, #20
 800b1b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ba:	4839      	ldr	r0, [pc, #228]	; (800b2a0 <_printf_i+0x21c>)
 800b1bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b1c0:	6813      	ldr	r3, [r2, #0]
 800b1c2:	6821      	ldr	r1, [r4, #0]
 800b1c4:	1d1d      	adds	r5, r3, #4
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	6015      	str	r5, [r2, #0]
 800b1ca:	060a      	lsls	r2, r1, #24
 800b1cc:	d50b      	bpl.n	800b1e6 <_printf_i+0x162>
 800b1ce:	07ca      	lsls	r2, r1, #31
 800b1d0:	bf44      	itt	mi
 800b1d2:	f041 0120 	orrmi.w	r1, r1, #32
 800b1d6:	6021      	strmi	r1, [r4, #0]
 800b1d8:	b91b      	cbnz	r3, 800b1e2 <_printf_i+0x15e>
 800b1da:	6822      	ldr	r2, [r4, #0]
 800b1dc:	f022 0220 	bic.w	r2, r2, #32
 800b1e0:	6022      	str	r2, [r4, #0]
 800b1e2:	2210      	movs	r2, #16
 800b1e4:	e7b7      	b.n	800b156 <_printf_i+0xd2>
 800b1e6:	064d      	lsls	r5, r1, #25
 800b1e8:	bf48      	it	mi
 800b1ea:	b29b      	uxthmi	r3, r3
 800b1ec:	e7ef      	b.n	800b1ce <_printf_i+0x14a>
 800b1ee:	4665      	mov	r5, ip
 800b1f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1f4:	fb02 3311 	mls	r3, r2, r1, r3
 800b1f8:	5cc3      	ldrb	r3, [r0, r3]
 800b1fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b1fe:	460b      	mov	r3, r1
 800b200:	2900      	cmp	r1, #0
 800b202:	d1f5      	bne.n	800b1f0 <_printf_i+0x16c>
 800b204:	e7b9      	b.n	800b17a <_printf_i+0xf6>
 800b206:	6813      	ldr	r3, [r2, #0]
 800b208:	6825      	ldr	r5, [r4, #0]
 800b20a:	6961      	ldr	r1, [r4, #20]
 800b20c:	1d18      	adds	r0, r3, #4
 800b20e:	6010      	str	r0, [r2, #0]
 800b210:	0628      	lsls	r0, r5, #24
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	d501      	bpl.n	800b21a <_printf_i+0x196>
 800b216:	6019      	str	r1, [r3, #0]
 800b218:	e002      	b.n	800b220 <_printf_i+0x19c>
 800b21a:	066a      	lsls	r2, r5, #25
 800b21c:	d5fb      	bpl.n	800b216 <_printf_i+0x192>
 800b21e:	8019      	strh	r1, [r3, #0]
 800b220:	2300      	movs	r3, #0
 800b222:	6123      	str	r3, [r4, #16]
 800b224:	4665      	mov	r5, ip
 800b226:	e7b9      	b.n	800b19c <_printf_i+0x118>
 800b228:	6813      	ldr	r3, [r2, #0]
 800b22a:	1d19      	adds	r1, r3, #4
 800b22c:	6011      	str	r1, [r2, #0]
 800b22e:	681d      	ldr	r5, [r3, #0]
 800b230:	6862      	ldr	r2, [r4, #4]
 800b232:	2100      	movs	r1, #0
 800b234:	4628      	mov	r0, r5
 800b236:	f7f4 ffd3 	bl	80001e0 <memchr>
 800b23a:	b108      	cbz	r0, 800b240 <_printf_i+0x1bc>
 800b23c:	1b40      	subs	r0, r0, r5
 800b23e:	6060      	str	r0, [r4, #4]
 800b240:	6863      	ldr	r3, [r4, #4]
 800b242:	6123      	str	r3, [r4, #16]
 800b244:	2300      	movs	r3, #0
 800b246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b24a:	e7a7      	b.n	800b19c <_printf_i+0x118>
 800b24c:	6923      	ldr	r3, [r4, #16]
 800b24e:	462a      	mov	r2, r5
 800b250:	4639      	mov	r1, r7
 800b252:	4630      	mov	r0, r6
 800b254:	47c0      	blx	r8
 800b256:	3001      	adds	r0, #1
 800b258:	d0aa      	beq.n	800b1b0 <_printf_i+0x12c>
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	079b      	lsls	r3, r3, #30
 800b25e:	d413      	bmi.n	800b288 <_printf_i+0x204>
 800b260:	68e0      	ldr	r0, [r4, #12]
 800b262:	9b03      	ldr	r3, [sp, #12]
 800b264:	4298      	cmp	r0, r3
 800b266:	bfb8      	it	lt
 800b268:	4618      	movlt	r0, r3
 800b26a:	e7a3      	b.n	800b1b4 <_printf_i+0x130>
 800b26c:	2301      	movs	r3, #1
 800b26e:	464a      	mov	r2, r9
 800b270:	4639      	mov	r1, r7
 800b272:	4630      	mov	r0, r6
 800b274:	47c0      	blx	r8
 800b276:	3001      	adds	r0, #1
 800b278:	d09a      	beq.n	800b1b0 <_printf_i+0x12c>
 800b27a:	3501      	adds	r5, #1
 800b27c:	68e3      	ldr	r3, [r4, #12]
 800b27e:	9a03      	ldr	r2, [sp, #12]
 800b280:	1a9b      	subs	r3, r3, r2
 800b282:	42ab      	cmp	r3, r5
 800b284:	dcf2      	bgt.n	800b26c <_printf_i+0x1e8>
 800b286:	e7eb      	b.n	800b260 <_printf_i+0x1dc>
 800b288:	2500      	movs	r5, #0
 800b28a:	f104 0919 	add.w	r9, r4, #25
 800b28e:	e7f5      	b.n	800b27c <_printf_i+0x1f8>
 800b290:	2b00      	cmp	r3, #0
 800b292:	d1ac      	bne.n	800b1ee <_printf_i+0x16a>
 800b294:	7803      	ldrb	r3, [r0, #0]
 800b296:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b29a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b29e:	e76c      	b.n	800b17a <_printf_i+0xf6>
 800b2a0:	080103ae 	.word	0x080103ae
 800b2a4:	080103bf 	.word	0x080103bf

0800b2a8 <_scanf_float>:
 800b2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ac:	469a      	mov	sl, r3
 800b2ae:	688b      	ldr	r3, [r1, #8]
 800b2b0:	4616      	mov	r6, r2
 800b2b2:	1e5a      	subs	r2, r3, #1
 800b2b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b2b8:	b087      	sub	sp, #28
 800b2ba:	bf83      	ittte	hi
 800b2bc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b2c0:	189b      	addhi	r3, r3, r2
 800b2c2:	9301      	strhi	r3, [sp, #4]
 800b2c4:	2300      	movls	r3, #0
 800b2c6:	bf86      	itte	hi
 800b2c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b2cc:	608b      	strhi	r3, [r1, #8]
 800b2ce:	9301      	strls	r3, [sp, #4]
 800b2d0:	680b      	ldr	r3, [r1, #0]
 800b2d2:	4688      	mov	r8, r1
 800b2d4:	f04f 0b00 	mov.w	fp, #0
 800b2d8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b2dc:	f848 3b1c 	str.w	r3, [r8], #28
 800b2e0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	4645      	mov	r5, r8
 800b2ea:	465a      	mov	r2, fp
 800b2ec:	46d9      	mov	r9, fp
 800b2ee:	f8cd b008 	str.w	fp, [sp, #8]
 800b2f2:	68a1      	ldr	r1, [r4, #8]
 800b2f4:	b181      	cbz	r1, 800b318 <_scanf_float+0x70>
 800b2f6:	6833      	ldr	r3, [r6, #0]
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b49      	cmp	r3, #73	; 0x49
 800b2fc:	d071      	beq.n	800b3e2 <_scanf_float+0x13a>
 800b2fe:	d84d      	bhi.n	800b39c <_scanf_float+0xf4>
 800b300:	2b39      	cmp	r3, #57	; 0x39
 800b302:	d840      	bhi.n	800b386 <_scanf_float+0xde>
 800b304:	2b31      	cmp	r3, #49	; 0x31
 800b306:	f080 8088 	bcs.w	800b41a <_scanf_float+0x172>
 800b30a:	2b2d      	cmp	r3, #45	; 0x2d
 800b30c:	f000 8090 	beq.w	800b430 <_scanf_float+0x188>
 800b310:	d815      	bhi.n	800b33e <_scanf_float+0x96>
 800b312:	2b2b      	cmp	r3, #43	; 0x2b
 800b314:	f000 808c 	beq.w	800b430 <_scanf_float+0x188>
 800b318:	f1b9 0f00 	cmp.w	r9, #0
 800b31c:	d003      	beq.n	800b326 <_scanf_float+0x7e>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	3a01      	subs	r2, #1
 800b328:	2a01      	cmp	r2, #1
 800b32a:	f200 80ea 	bhi.w	800b502 <_scanf_float+0x25a>
 800b32e:	4545      	cmp	r5, r8
 800b330:	f200 80dc 	bhi.w	800b4ec <_scanf_float+0x244>
 800b334:	2601      	movs	r6, #1
 800b336:	4630      	mov	r0, r6
 800b338:	b007      	add	sp, #28
 800b33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33e:	2b2e      	cmp	r3, #46	; 0x2e
 800b340:	f000 809f 	beq.w	800b482 <_scanf_float+0x1da>
 800b344:	2b30      	cmp	r3, #48	; 0x30
 800b346:	d1e7      	bne.n	800b318 <_scanf_float+0x70>
 800b348:	6820      	ldr	r0, [r4, #0]
 800b34a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b34e:	d064      	beq.n	800b41a <_scanf_float+0x172>
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b356:	6020      	str	r0, [r4, #0]
 800b358:	f109 0901 	add.w	r9, r9, #1
 800b35c:	b11b      	cbz	r3, 800b366 <_scanf_float+0xbe>
 800b35e:	3b01      	subs	r3, #1
 800b360:	3101      	adds	r1, #1
 800b362:	9301      	str	r3, [sp, #4]
 800b364:	60a1      	str	r1, [r4, #8]
 800b366:	68a3      	ldr	r3, [r4, #8]
 800b368:	3b01      	subs	r3, #1
 800b36a:	60a3      	str	r3, [r4, #8]
 800b36c:	6923      	ldr	r3, [r4, #16]
 800b36e:	3301      	adds	r3, #1
 800b370:	6123      	str	r3, [r4, #16]
 800b372:	6873      	ldr	r3, [r6, #4]
 800b374:	3b01      	subs	r3, #1
 800b376:	2b00      	cmp	r3, #0
 800b378:	6073      	str	r3, [r6, #4]
 800b37a:	f340 80ac 	ble.w	800b4d6 <_scanf_float+0x22e>
 800b37e:	6833      	ldr	r3, [r6, #0]
 800b380:	3301      	adds	r3, #1
 800b382:	6033      	str	r3, [r6, #0]
 800b384:	e7b5      	b.n	800b2f2 <_scanf_float+0x4a>
 800b386:	2b45      	cmp	r3, #69	; 0x45
 800b388:	f000 8085 	beq.w	800b496 <_scanf_float+0x1ee>
 800b38c:	2b46      	cmp	r3, #70	; 0x46
 800b38e:	d06a      	beq.n	800b466 <_scanf_float+0x1be>
 800b390:	2b41      	cmp	r3, #65	; 0x41
 800b392:	d1c1      	bne.n	800b318 <_scanf_float+0x70>
 800b394:	2a01      	cmp	r2, #1
 800b396:	d1bf      	bne.n	800b318 <_scanf_float+0x70>
 800b398:	2202      	movs	r2, #2
 800b39a:	e046      	b.n	800b42a <_scanf_float+0x182>
 800b39c:	2b65      	cmp	r3, #101	; 0x65
 800b39e:	d07a      	beq.n	800b496 <_scanf_float+0x1ee>
 800b3a0:	d818      	bhi.n	800b3d4 <_scanf_float+0x12c>
 800b3a2:	2b54      	cmp	r3, #84	; 0x54
 800b3a4:	d066      	beq.n	800b474 <_scanf_float+0x1cc>
 800b3a6:	d811      	bhi.n	800b3cc <_scanf_float+0x124>
 800b3a8:	2b4e      	cmp	r3, #78	; 0x4e
 800b3aa:	d1b5      	bne.n	800b318 <_scanf_float+0x70>
 800b3ac:	2a00      	cmp	r2, #0
 800b3ae:	d146      	bne.n	800b43e <_scanf_float+0x196>
 800b3b0:	f1b9 0f00 	cmp.w	r9, #0
 800b3b4:	d145      	bne.n	800b442 <_scanf_float+0x19a>
 800b3b6:	6821      	ldr	r1, [r4, #0]
 800b3b8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b3bc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b3c0:	d13f      	bne.n	800b442 <_scanf_float+0x19a>
 800b3c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b3c6:	6021      	str	r1, [r4, #0]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	e02e      	b.n	800b42a <_scanf_float+0x182>
 800b3cc:	2b59      	cmp	r3, #89	; 0x59
 800b3ce:	d01e      	beq.n	800b40e <_scanf_float+0x166>
 800b3d0:	2b61      	cmp	r3, #97	; 0x61
 800b3d2:	e7de      	b.n	800b392 <_scanf_float+0xea>
 800b3d4:	2b6e      	cmp	r3, #110	; 0x6e
 800b3d6:	d0e9      	beq.n	800b3ac <_scanf_float+0x104>
 800b3d8:	d815      	bhi.n	800b406 <_scanf_float+0x15e>
 800b3da:	2b66      	cmp	r3, #102	; 0x66
 800b3dc:	d043      	beq.n	800b466 <_scanf_float+0x1be>
 800b3de:	2b69      	cmp	r3, #105	; 0x69
 800b3e0:	d19a      	bne.n	800b318 <_scanf_float+0x70>
 800b3e2:	f1bb 0f00 	cmp.w	fp, #0
 800b3e6:	d138      	bne.n	800b45a <_scanf_float+0x1b2>
 800b3e8:	f1b9 0f00 	cmp.w	r9, #0
 800b3ec:	d197      	bne.n	800b31e <_scanf_float+0x76>
 800b3ee:	6821      	ldr	r1, [r4, #0]
 800b3f0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b3f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b3f8:	d195      	bne.n	800b326 <_scanf_float+0x7e>
 800b3fa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b3fe:	6021      	str	r1, [r4, #0]
 800b400:	f04f 0b01 	mov.w	fp, #1
 800b404:	e011      	b.n	800b42a <_scanf_float+0x182>
 800b406:	2b74      	cmp	r3, #116	; 0x74
 800b408:	d034      	beq.n	800b474 <_scanf_float+0x1cc>
 800b40a:	2b79      	cmp	r3, #121	; 0x79
 800b40c:	d184      	bne.n	800b318 <_scanf_float+0x70>
 800b40e:	f1bb 0f07 	cmp.w	fp, #7
 800b412:	d181      	bne.n	800b318 <_scanf_float+0x70>
 800b414:	f04f 0b08 	mov.w	fp, #8
 800b418:	e007      	b.n	800b42a <_scanf_float+0x182>
 800b41a:	eb12 0f0b 	cmn.w	r2, fp
 800b41e:	f47f af7b 	bne.w	800b318 <_scanf_float+0x70>
 800b422:	6821      	ldr	r1, [r4, #0]
 800b424:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b428:	6021      	str	r1, [r4, #0]
 800b42a:	702b      	strb	r3, [r5, #0]
 800b42c:	3501      	adds	r5, #1
 800b42e:	e79a      	b.n	800b366 <_scanf_float+0xbe>
 800b430:	6821      	ldr	r1, [r4, #0]
 800b432:	0608      	lsls	r0, r1, #24
 800b434:	f57f af70 	bpl.w	800b318 <_scanf_float+0x70>
 800b438:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b43c:	e7f4      	b.n	800b428 <_scanf_float+0x180>
 800b43e:	2a02      	cmp	r2, #2
 800b440:	d047      	beq.n	800b4d2 <_scanf_float+0x22a>
 800b442:	f1bb 0f01 	cmp.w	fp, #1
 800b446:	d003      	beq.n	800b450 <_scanf_float+0x1a8>
 800b448:	f1bb 0f04 	cmp.w	fp, #4
 800b44c:	f47f af64 	bne.w	800b318 <_scanf_float+0x70>
 800b450:	f10b 0b01 	add.w	fp, fp, #1
 800b454:	fa5f fb8b 	uxtb.w	fp, fp
 800b458:	e7e7      	b.n	800b42a <_scanf_float+0x182>
 800b45a:	f1bb 0f03 	cmp.w	fp, #3
 800b45e:	d0f7      	beq.n	800b450 <_scanf_float+0x1a8>
 800b460:	f1bb 0f05 	cmp.w	fp, #5
 800b464:	e7f2      	b.n	800b44c <_scanf_float+0x1a4>
 800b466:	f1bb 0f02 	cmp.w	fp, #2
 800b46a:	f47f af55 	bne.w	800b318 <_scanf_float+0x70>
 800b46e:	f04f 0b03 	mov.w	fp, #3
 800b472:	e7da      	b.n	800b42a <_scanf_float+0x182>
 800b474:	f1bb 0f06 	cmp.w	fp, #6
 800b478:	f47f af4e 	bne.w	800b318 <_scanf_float+0x70>
 800b47c:	f04f 0b07 	mov.w	fp, #7
 800b480:	e7d3      	b.n	800b42a <_scanf_float+0x182>
 800b482:	6821      	ldr	r1, [r4, #0]
 800b484:	0588      	lsls	r0, r1, #22
 800b486:	f57f af47 	bpl.w	800b318 <_scanf_float+0x70>
 800b48a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b48e:	6021      	str	r1, [r4, #0]
 800b490:	f8cd 9008 	str.w	r9, [sp, #8]
 800b494:	e7c9      	b.n	800b42a <_scanf_float+0x182>
 800b496:	6821      	ldr	r1, [r4, #0]
 800b498:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b49c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b4a0:	d006      	beq.n	800b4b0 <_scanf_float+0x208>
 800b4a2:	0548      	lsls	r0, r1, #21
 800b4a4:	f57f af38 	bpl.w	800b318 <_scanf_float+0x70>
 800b4a8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ac:	f43f af3b 	beq.w	800b326 <_scanf_float+0x7e>
 800b4b0:	0588      	lsls	r0, r1, #22
 800b4b2:	bf58      	it	pl
 800b4b4:	9802      	ldrpl	r0, [sp, #8]
 800b4b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b4ba:	bf58      	it	pl
 800b4bc:	eba9 0000 	subpl.w	r0, r9, r0
 800b4c0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b4c4:	bf58      	it	pl
 800b4c6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b4ca:	6021      	str	r1, [r4, #0]
 800b4cc:	f04f 0900 	mov.w	r9, #0
 800b4d0:	e7ab      	b.n	800b42a <_scanf_float+0x182>
 800b4d2:	2203      	movs	r2, #3
 800b4d4:	e7a9      	b.n	800b42a <_scanf_float+0x182>
 800b4d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b4da:	9205      	str	r2, [sp, #20]
 800b4dc:	4631      	mov	r1, r6
 800b4de:	4638      	mov	r0, r7
 800b4e0:	4798      	blx	r3
 800b4e2:	9a05      	ldr	r2, [sp, #20]
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	f43f af04 	beq.w	800b2f2 <_scanf_float+0x4a>
 800b4ea:	e715      	b.n	800b318 <_scanf_float+0x70>
 800b4ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b4f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b4f4:	4632      	mov	r2, r6
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	4798      	blx	r3
 800b4fa:	6923      	ldr	r3, [r4, #16]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	6123      	str	r3, [r4, #16]
 800b500:	e715      	b.n	800b32e <_scanf_float+0x86>
 800b502:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800b506:	2b06      	cmp	r3, #6
 800b508:	d80a      	bhi.n	800b520 <_scanf_float+0x278>
 800b50a:	f1bb 0f02 	cmp.w	fp, #2
 800b50e:	d968      	bls.n	800b5e2 <_scanf_float+0x33a>
 800b510:	f1ab 0b03 	sub.w	fp, fp, #3
 800b514:	fa5f fb8b 	uxtb.w	fp, fp
 800b518:	eba5 0b0b 	sub.w	fp, r5, fp
 800b51c:	455d      	cmp	r5, fp
 800b51e:	d14b      	bne.n	800b5b8 <_scanf_float+0x310>
 800b520:	6823      	ldr	r3, [r4, #0]
 800b522:	05da      	lsls	r2, r3, #23
 800b524:	d51f      	bpl.n	800b566 <_scanf_float+0x2be>
 800b526:	055b      	lsls	r3, r3, #21
 800b528:	d468      	bmi.n	800b5fc <_scanf_float+0x354>
 800b52a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	2965      	cmp	r1, #101	; 0x65
 800b532:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b536:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800b53a:	6123      	str	r3, [r4, #16]
 800b53c:	d00d      	beq.n	800b55a <_scanf_float+0x2b2>
 800b53e:	2945      	cmp	r1, #69	; 0x45
 800b540:	d00b      	beq.n	800b55a <_scanf_float+0x2b2>
 800b542:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b546:	4632      	mov	r2, r6
 800b548:	4638      	mov	r0, r7
 800b54a:	4798      	blx	r3
 800b54c:	6923      	ldr	r3, [r4, #16]
 800b54e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b552:	3b01      	subs	r3, #1
 800b554:	f1a5 0b02 	sub.w	fp, r5, #2
 800b558:	6123      	str	r3, [r4, #16]
 800b55a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b55e:	4632      	mov	r2, r6
 800b560:	4638      	mov	r0, r7
 800b562:	4798      	blx	r3
 800b564:	465d      	mov	r5, fp
 800b566:	6826      	ldr	r6, [r4, #0]
 800b568:	f016 0610 	ands.w	r6, r6, #16
 800b56c:	d17a      	bne.n	800b664 <_scanf_float+0x3bc>
 800b56e:	702e      	strb	r6, [r5, #0]
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b57a:	d142      	bne.n	800b602 <_scanf_float+0x35a>
 800b57c:	9b02      	ldr	r3, [sp, #8]
 800b57e:	eba9 0303 	sub.w	r3, r9, r3
 800b582:	425a      	negs	r2, r3
 800b584:	2b00      	cmp	r3, #0
 800b586:	d149      	bne.n	800b61c <_scanf_float+0x374>
 800b588:	2200      	movs	r2, #0
 800b58a:	4641      	mov	r1, r8
 800b58c:	4638      	mov	r0, r7
 800b58e:	f000 ff1f 	bl	800c3d0 <_strtod_r>
 800b592:	6825      	ldr	r5, [r4, #0]
 800b594:	f8da 3000 	ldr.w	r3, [sl]
 800b598:	f015 0f02 	tst.w	r5, #2
 800b59c:	f103 0204 	add.w	r2, r3, #4
 800b5a0:	ec59 8b10 	vmov	r8, r9, d0
 800b5a4:	f8ca 2000 	str.w	r2, [sl]
 800b5a8:	d043      	beq.n	800b632 <_scanf_float+0x38a>
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	e9c3 8900 	strd	r8, r9, [r3]
 800b5b0:	68e3      	ldr	r3, [r4, #12]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	60e3      	str	r3, [r4, #12]
 800b5b6:	e6be      	b.n	800b336 <_scanf_float+0x8e>
 800b5b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b5c0:	4632      	mov	r2, r6
 800b5c2:	4638      	mov	r0, r7
 800b5c4:	4798      	blx	r3
 800b5c6:	6923      	ldr	r3, [r4, #16]
 800b5c8:	3b01      	subs	r3, #1
 800b5ca:	6123      	str	r3, [r4, #16]
 800b5cc:	e7a6      	b.n	800b51c <_scanf_float+0x274>
 800b5ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5d2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b5d6:	4632      	mov	r2, r6
 800b5d8:	4638      	mov	r0, r7
 800b5da:	4798      	blx	r3
 800b5dc:	6923      	ldr	r3, [r4, #16]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	6123      	str	r3, [r4, #16]
 800b5e2:	4545      	cmp	r5, r8
 800b5e4:	d8f3      	bhi.n	800b5ce <_scanf_float+0x326>
 800b5e6:	e6a5      	b.n	800b334 <_scanf_float+0x8c>
 800b5e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5ec:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	4798      	blx	r3
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	3b01      	subs	r3, #1
 800b5fa:	6123      	str	r3, [r4, #16]
 800b5fc:	4545      	cmp	r5, r8
 800b5fe:	d8f3      	bhi.n	800b5e8 <_scanf_float+0x340>
 800b600:	e698      	b.n	800b334 <_scanf_float+0x8c>
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d0bf      	beq.n	800b588 <_scanf_float+0x2e0>
 800b608:	9904      	ldr	r1, [sp, #16]
 800b60a:	230a      	movs	r3, #10
 800b60c:	4632      	mov	r2, r6
 800b60e:	3101      	adds	r1, #1
 800b610:	4638      	mov	r0, r7
 800b612:	f000 ff69 	bl	800c4e8 <_strtol_r>
 800b616:	9b03      	ldr	r3, [sp, #12]
 800b618:	9d04      	ldr	r5, [sp, #16]
 800b61a:	1ac2      	subs	r2, r0, r3
 800b61c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b620:	429d      	cmp	r5, r3
 800b622:	bf28      	it	cs
 800b624:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b628:	490f      	ldr	r1, [pc, #60]	; (800b668 <_scanf_float+0x3c0>)
 800b62a:	4628      	mov	r0, r5
 800b62c:	f000 f8a0 	bl	800b770 <siprintf>
 800b630:	e7aa      	b.n	800b588 <_scanf_float+0x2e0>
 800b632:	f015 0504 	ands.w	r5, r5, #4
 800b636:	d1b8      	bne.n	800b5aa <_scanf_float+0x302>
 800b638:	681f      	ldr	r7, [r3, #0]
 800b63a:	ee10 2a10 	vmov	r2, s0
 800b63e:	464b      	mov	r3, r9
 800b640:	ee10 0a10 	vmov	r0, s0
 800b644:	4649      	mov	r1, r9
 800b646:	f7f5 fa71 	bl	8000b2c <__aeabi_dcmpun>
 800b64a:	b128      	cbz	r0, 800b658 <_scanf_float+0x3b0>
 800b64c:	4628      	mov	r0, r5
 800b64e:	f000 f889 	bl	800b764 <nanf>
 800b652:	ed87 0a00 	vstr	s0, [r7]
 800b656:	e7ab      	b.n	800b5b0 <_scanf_float+0x308>
 800b658:	4640      	mov	r0, r8
 800b65a:	4649      	mov	r1, r9
 800b65c:	f7f5 fac4 	bl	8000be8 <__aeabi_d2f>
 800b660:	6038      	str	r0, [r7, #0]
 800b662:	e7a5      	b.n	800b5b0 <_scanf_float+0x308>
 800b664:	2600      	movs	r6, #0
 800b666:	e666      	b.n	800b336 <_scanf_float+0x8e>
 800b668:	080103d0 	.word	0x080103d0

0800b66c <iprintf>:
 800b66c:	b40f      	push	{r0, r1, r2, r3}
 800b66e:	4b0a      	ldr	r3, [pc, #40]	; (800b698 <iprintf+0x2c>)
 800b670:	b513      	push	{r0, r1, r4, lr}
 800b672:	681c      	ldr	r4, [r3, #0]
 800b674:	b124      	cbz	r4, 800b680 <iprintf+0x14>
 800b676:	69a3      	ldr	r3, [r4, #24]
 800b678:	b913      	cbnz	r3, 800b680 <iprintf+0x14>
 800b67a:	4620      	mov	r0, r4
 800b67c:	f001 ff3c 	bl	800d4f8 <__sinit>
 800b680:	ab05      	add	r3, sp, #20
 800b682:	9a04      	ldr	r2, [sp, #16]
 800b684:	68a1      	ldr	r1, [r4, #8]
 800b686:	9301      	str	r3, [sp, #4]
 800b688:	4620      	mov	r0, r4
 800b68a:	f003 f9a9 	bl	800e9e0 <_vfiprintf_r>
 800b68e:	b002      	add	sp, #8
 800b690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b694:	b004      	add	sp, #16
 800b696:	4770      	bx	lr
 800b698:	2000000c 	.word	0x2000000c

0800b69c <_puts_r>:
 800b69c:	b570      	push	{r4, r5, r6, lr}
 800b69e:	460e      	mov	r6, r1
 800b6a0:	4605      	mov	r5, r0
 800b6a2:	b118      	cbz	r0, 800b6ac <_puts_r+0x10>
 800b6a4:	6983      	ldr	r3, [r0, #24]
 800b6a6:	b90b      	cbnz	r3, 800b6ac <_puts_r+0x10>
 800b6a8:	f001 ff26 	bl	800d4f8 <__sinit>
 800b6ac:	69ab      	ldr	r3, [r5, #24]
 800b6ae:	68ac      	ldr	r4, [r5, #8]
 800b6b0:	b913      	cbnz	r3, 800b6b8 <_puts_r+0x1c>
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f001 ff20 	bl	800d4f8 <__sinit>
 800b6b8:	4b23      	ldr	r3, [pc, #140]	; (800b748 <_puts_r+0xac>)
 800b6ba:	429c      	cmp	r4, r3
 800b6bc:	d117      	bne.n	800b6ee <_puts_r+0x52>
 800b6be:	686c      	ldr	r4, [r5, #4]
 800b6c0:	89a3      	ldrh	r3, [r4, #12]
 800b6c2:	071b      	lsls	r3, r3, #28
 800b6c4:	d51d      	bpl.n	800b702 <_puts_r+0x66>
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	b1db      	cbz	r3, 800b702 <_puts_r+0x66>
 800b6ca:	3e01      	subs	r6, #1
 800b6cc:	68a3      	ldr	r3, [r4, #8]
 800b6ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	60a3      	str	r3, [r4, #8]
 800b6d6:	b9e9      	cbnz	r1, 800b714 <_puts_r+0x78>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	da2e      	bge.n	800b73a <_puts_r+0x9e>
 800b6dc:	4622      	mov	r2, r4
 800b6de:	210a      	movs	r1, #10
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f000 ff13 	bl	800c50c <__swbuf_r>
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	d011      	beq.n	800b70e <_puts_r+0x72>
 800b6ea:	200a      	movs	r0, #10
 800b6ec:	e011      	b.n	800b712 <_puts_r+0x76>
 800b6ee:	4b17      	ldr	r3, [pc, #92]	; (800b74c <_puts_r+0xb0>)
 800b6f0:	429c      	cmp	r4, r3
 800b6f2:	d101      	bne.n	800b6f8 <_puts_r+0x5c>
 800b6f4:	68ac      	ldr	r4, [r5, #8]
 800b6f6:	e7e3      	b.n	800b6c0 <_puts_r+0x24>
 800b6f8:	4b15      	ldr	r3, [pc, #84]	; (800b750 <_puts_r+0xb4>)
 800b6fa:	429c      	cmp	r4, r3
 800b6fc:	bf08      	it	eq
 800b6fe:	68ec      	ldreq	r4, [r5, #12]
 800b700:	e7de      	b.n	800b6c0 <_puts_r+0x24>
 800b702:	4621      	mov	r1, r4
 800b704:	4628      	mov	r0, r5
 800b706:	f000 ff53 	bl	800c5b0 <__swsetup_r>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d0dd      	beq.n	800b6ca <_puts_r+0x2e>
 800b70e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b712:	bd70      	pop	{r4, r5, r6, pc}
 800b714:	2b00      	cmp	r3, #0
 800b716:	da04      	bge.n	800b722 <_puts_r+0x86>
 800b718:	69a2      	ldr	r2, [r4, #24]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	dc06      	bgt.n	800b72c <_puts_r+0x90>
 800b71e:	290a      	cmp	r1, #10
 800b720:	d004      	beq.n	800b72c <_puts_r+0x90>
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	6022      	str	r2, [r4, #0]
 800b728:	7019      	strb	r1, [r3, #0]
 800b72a:	e7cf      	b.n	800b6cc <_puts_r+0x30>
 800b72c:	4622      	mov	r2, r4
 800b72e:	4628      	mov	r0, r5
 800b730:	f000 feec 	bl	800c50c <__swbuf_r>
 800b734:	3001      	adds	r0, #1
 800b736:	d1c9      	bne.n	800b6cc <_puts_r+0x30>
 800b738:	e7e9      	b.n	800b70e <_puts_r+0x72>
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	200a      	movs	r0, #10
 800b73e:	1c5a      	adds	r2, r3, #1
 800b740:	6022      	str	r2, [r4, #0]
 800b742:	7018      	strb	r0, [r3, #0]
 800b744:	e7e5      	b.n	800b712 <_puts_r+0x76>
 800b746:	bf00      	nop
 800b748:	08010458 	.word	0x08010458
 800b74c:	08010478 	.word	0x08010478
 800b750:	08010438 	.word	0x08010438

0800b754 <puts>:
 800b754:	4b02      	ldr	r3, [pc, #8]	; (800b760 <puts+0xc>)
 800b756:	4601      	mov	r1, r0
 800b758:	6818      	ldr	r0, [r3, #0]
 800b75a:	f7ff bf9f 	b.w	800b69c <_puts_r>
 800b75e:	bf00      	nop
 800b760:	2000000c 	.word	0x2000000c

0800b764 <nanf>:
 800b764:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b76c <nanf+0x8>
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	7fc00000 	.word	0x7fc00000

0800b770 <siprintf>:
 800b770:	b40e      	push	{r1, r2, r3}
 800b772:	b500      	push	{lr}
 800b774:	b09c      	sub	sp, #112	; 0x70
 800b776:	ab1d      	add	r3, sp, #116	; 0x74
 800b778:	9002      	str	r0, [sp, #8]
 800b77a:	9006      	str	r0, [sp, #24]
 800b77c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b780:	4809      	ldr	r0, [pc, #36]	; (800b7a8 <siprintf+0x38>)
 800b782:	9107      	str	r1, [sp, #28]
 800b784:	9104      	str	r1, [sp, #16]
 800b786:	4909      	ldr	r1, [pc, #36]	; (800b7ac <siprintf+0x3c>)
 800b788:	f853 2b04 	ldr.w	r2, [r3], #4
 800b78c:	9105      	str	r1, [sp, #20]
 800b78e:	6800      	ldr	r0, [r0, #0]
 800b790:	9301      	str	r3, [sp, #4]
 800b792:	a902      	add	r1, sp, #8
 800b794:	f003 f802 	bl	800e79c <_svfiprintf_r>
 800b798:	9b02      	ldr	r3, [sp, #8]
 800b79a:	2200      	movs	r2, #0
 800b79c:	701a      	strb	r2, [r3, #0]
 800b79e:	b01c      	add	sp, #112	; 0x70
 800b7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7a4:	b003      	add	sp, #12
 800b7a6:	4770      	bx	lr
 800b7a8:	2000000c 	.word	0x2000000c
 800b7ac:	ffff0208 	.word	0xffff0208

0800b7b0 <sulp>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	460d      	mov	r5, r1
 800b7b6:	ec45 4b10 	vmov	d0, r4, r5
 800b7ba:	4616      	mov	r6, r2
 800b7bc:	f002 fdaa 	bl	800e314 <__ulp>
 800b7c0:	ec51 0b10 	vmov	r0, r1, d0
 800b7c4:	b17e      	cbz	r6, 800b7e6 <sulp+0x36>
 800b7c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b7ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	dd09      	ble.n	800b7e6 <sulp+0x36>
 800b7d2:	051b      	lsls	r3, r3, #20
 800b7d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b7d8:	2400      	movs	r4, #0
 800b7da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b7de:	4622      	mov	r2, r4
 800b7e0:	462b      	mov	r3, r5
 800b7e2:	f7f4 ff09 	bl	80005f8 <__aeabi_dmul>
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}

0800b7e8 <_strtod_l>:
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	461f      	mov	r7, r3
 800b7ee:	b0a1      	sub	sp, #132	; 0x84
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4681      	mov	r9, r0
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	460e      	mov	r6, r1
 800b7f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b7fa:	931c      	str	r3, [sp, #112]	; 0x70
 800b7fc:	f002 fa2f 	bl	800dc5e <__localeconv_l>
 800b800:	4680      	mov	r8, r0
 800b802:	6800      	ldr	r0, [r0, #0]
 800b804:	f7f4 fce4 	bl	80001d0 <strlen>
 800b808:	f04f 0a00 	mov.w	sl, #0
 800b80c:	4604      	mov	r4, r0
 800b80e:	f04f 0b00 	mov.w	fp, #0
 800b812:	961b      	str	r6, [sp, #108]	; 0x6c
 800b814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b816:	781a      	ldrb	r2, [r3, #0]
 800b818:	2a0d      	cmp	r2, #13
 800b81a:	d832      	bhi.n	800b882 <_strtod_l+0x9a>
 800b81c:	2a09      	cmp	r2, #9
 800b81e:	d236      	bcs.n	800b88e <_strtod_l+0xa6>
 800b820:	2a00      	cmp	r2, #0
 800b822:	d03e      	beq.n	800b8a2 <_strtod_l+0xba>
 800b824:	2300      	movs	r3, #0
 800b826:	930d      	str	r3, [sp, #52]	; 0x34
 800b828:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b82a:	782b      	ldrb	r3, [r5, #0]
 800b82c:	2b30      	cmp	r3, #48	; 0x30
 800b82e:	f040 80ac 	bne.w	800b98a <_strtod_l+0x1a2>
 800b832:	786b      	ldrb	r3, [r5, #1]
 800b834:	2b58      	cmp	r3, #88	; 0x58
 800b836:	d001      	beq.n	800b83c <_strtod_l+0x54>
 800b838:	2b78      	cmp	r3, #120	; 0x78
 800b83a:	d167      	bne.n	800b90c <_strtod_l+0x124>
 800b83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b83e:	9301      	str	r3, [sp, #4]
 800b840:	ab1c      	add	r3, sp, #112	; 0x70
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	9702      	str	r7, [sp, #8]
 800b846:	ab1d      	add	r3, sp, #116	; 0x74
 800b848:	4a88      	ldr	r2, [pc, #544]	; (800ba6c <_strtod_l+0x284>)
 800b84a:	a91b      	add	r1, sp, #108	; 0x6c
 800b84c:	4648      	mov	r0, r9
 800b84e:	f001 ff2c 	bl	800d6aa <__gethex>
 800b852:	f010 0407 	ands.w	r4, r0, #7
 800b856:	4606      	mov	r6, r0
 800b858:	d005      	beq.n	800b866 <_strtod_l+0x7e>
 800b85a:	2c06      	cmp	r4, #6
 800b85c:	d12b      	bne.n	800b8b6 <_strtod_l+0xce>
 800b85e:	3501      	adds	r5, #1
 800b860:	2300      	movs	r3, #0
 800b862:	951b      	str	r5, [sp, #108]	; 0x6c
 800b864:	930d      	str	r3, [sp, #52]	; 0x34
 800b866:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f040 859a 	bne.w	800c3a2 <_strtod_l+0xbba>
 800b86e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b870:	b1e3      	cbz	r3, 800b8ac <_strtod_l+0xc4>
 800b872:	4652      	mov	r2, sl
 800b874:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b878:	ec43 2b10 	vmov	d0, r2, r3
 800b87c:	b021      	add	sp, #132	; 0x84
 800b87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b882:	2a2b      	cmp	r2, #43	; 0x2b
 800b884:	d015      	beq.n	800b8b2 <_strtod_l+0xca>
 800b886:	2a2d      	cmp	r2, #45	; 0x2d
 800b888:	d004      	beq.n	800b894 <_strtod_l+0xac>
 800b88a:	2a20      	cmp	r2, #32
 800b88c:	d1ca      	bne.n	800b824 <_strtod_l+0x3c>
 800b88e:	3301      	adds	r3, #1
 800b890:	931b      	str	r3, [sp, #108]	; 0x6c
 800b892:	e7bf      	b.n	800b814 <_strtod_l+0x2c>
 800b894:	2201      	movs	r2, #1
 800b896:	920d      	str	r2, [sp, #52]	; 0x34
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b89c:	785b      	ldrb	r3, [r3, #1]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1c2      	bne.n	800b828 <_strtod_l+0x40>
 800b8a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8a4:	961b      	str	r6, [sp, #108]	; 0x6c
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f040 8579 	bne.w	800c39e <_strtod_l+0xbb6>
 800b8ac:	4652      	mov	r2, sl
 800b8ae:	465b      	mov	r3, fp
 800b8b0:	e7e2      	b.n	800b878 <_strtod_l+0x90>
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	e7ef      	b.n	800b896 <_strtod_l+0xae>
 800b8b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b8b8:	b13a      	cbz	r2, 800b8ca <_strtod_l+0xe2>
 800b8ba:	2135      	movs	r1, #53	; 0x35
 800b8bc:	a81e      	add	r0, sp, #120	; 0x78
 800b8be:	f002 fe21 	bl	800e504 <__copybits>
 800b8c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8c4:	4648      	mov	r0, r9
 800b8c6:	f002 fa8d 	bl	800dde4 <_Bfree>
 800b8ca:	3c01      	subs	r4, #1
 800b8cc:	2c04      	cmp	r4, #4
 800b8ce:	d806      	bhi.n	800b8de <_strtod_l+0xf6>
 800b8d0:	e8df f004 	tbb	[pc, r4]
 800b8d4:	1714030a 	.word	0x1714030a
 800b8d8:	0a          	.byte	0x0a
 800b8d9:	00          	.byte	0x00
 800b8da:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800b8de:	0730      	lsls	r0, r6, #28
 800b8e0:	d5c1      	bpl.n	800b866 <_strtod_l+0x7e>
 800b8e2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b8e6:	e7be      	b.n	800b866 <_strtod_l+0x7e>
 800b8e8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800b8ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b8ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b8f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b8f6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b8fa:	e7f0      	b.n	800b8de <_strtod_l+0xf6>
 800b8fc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800ba70 <_strtod_l+0x288>
 800b900:	e7ed      	b.n	800b8de <_strtod_l+0xf6>
 800b902:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b906:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b90a:	e7e8      	b.n	800b8de <_strtod_l+0xf6>
 800b90c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b90e:	1c5a      	adds	r2, r3, #1
 800b910:	921b      	str	r2, [sp, #108]	; 0x6c
 800b912:	785b      	ldrb	r3, [r3, #1]
 800b914:	2b30      	cmp	r3, #48	; 0x30
 800b916:	d0f9      	beq.n	800b90c <_strtod_l+0x124>
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d0a4      	beq.n	800b866 <_strtod_l+0x7e>
 800b91c:	2301      	movs	r3, #1
 800b91e:	2500      	movs	r5, #0
 800b920:	9306      	str	r3, [sp, #24]
 800b922:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b924:	9308      	str	r3, [sp, #32]
 800b926:	9507      	str	r5, [sp, #28]
 800b928:	9505      	str	r5, [sp, #20]
 800b92a:	220a      	movs	r2, #10
 800b92c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b92e:	7807      	ldrb	r7, [r0, #0]
 800b930:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b934:	b2d9      	uxtb	r1, r3
 800b936:	2909      	cmp	r1, #9
 800b938:	d929      	bls.n	800b98e <_strtod_l+0x1a6>
 800b93a:	4622      	mov	r2, r4
 800b93c:	f8d8 1000 	ldr.w	r1, [r8]
 800b940:	f003 f9b7 	bl	800ecb2 <strncmp>
 800b944:	2800      	cmp	r0, #0
 800b946:	d031      	beq.n	800b9ac <_strtod_l+0x1c4>
 800b948:	2000      	movs	r0, #0
 800b94a:	9c05      	ldr	r4, [sp, #20]
 800b94c:	9004      	str	r0, [sp, #16]
 800b94e:	463b      	mov	r3, r7
 800b950:	4602      	mov	r2, r0
 800b952:	2b65      	cmp	r3, #101	; 0x65
 800b954:	d001      	beq.n	800b95a <_strtod_l+0x172>
 800b956:	2b45      	cmp	r3, #69	; 0x45
 800b958:	d114      	bne.n	800b984 <_strtod_l+0x19c>
 800b95a:	b924      	cbnz	r4, 800b966 <_strtod_l+0x17e>
 800b95c:	b910      	cbnz	r0, 800b964 <_strtod_l+0x17c>
 800b95e:	9b06      	ldr	r3, [sp, #24]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d09e      	beq.n	800b8a2 <_strtod_l+0xba>
 800b964:	2400      	movs	r4, #0
 800b966:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b968:	1c73      	adds	r3, r6, #1
 800b96a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b96c:	7873      	ldrb	r3, [r6, #1]
 800b96e:	2b2b      	cmp	r3, #43	; 0x2b
 800b970:	d078      	beq.n	800ba64 <_strtod_l+0x27c>
 800b972:	2b2d      	cmp	r3, #45	; 0x2d
 800b974:	d070      	beq.n	800ba58 <_strtod_l+0x270>
 800b976:	f04f 0c00 	mov.w	ip, #0
 800b97a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b97e:	2f09      	cmp	r7, #9
 800b980:	d97c      	bls.n	800ba7c <_strtod_l+0x294>
 800b982:	961b      	str	r6, [sp, #108]	; 0x6c
 800b984:	f04f 0e00 	mov.w	lr, #0
 800b988:	e09a      	b.n	800bac0 <_strtod_l+0x2d8>
 800b98a:	2300      	movs	r3, #0
 800b98c:	e7c7      	b.n	800b91e <_strtod_l+0x136>
 800b98e:	9905      	ldr	r1, [sp, #20]
 800b990:	2908      	cmp	r1, #8
 800b992:	bfdd      	ittte	le
 800b994:	9907      	ldrle	r1, [sp, #28]
 800b996:	fb02 3301 	mlale	r3, r2, r1, r3
 800b99a:	9307      	strle	r3, [sp, #28]
 800b99c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b9a0:	9b05      	ldr	r3, [sp, #20]
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	9305      	str	r3, [sp, #20]
 800b9a8:	901b      	str	r0, [sp, #108]	; 0x6c
 800b9aa:	e7bf      	b.n	800b92c <_strtod_l+0x144>
 800b9ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9ae:	191a      	adds	r2, r3, r4
 800b9b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9b2:	9a05      	ldr	r2, [sp, #20]
 800b9b4:	5d1b      	ldrb	r3, [r3, r4]
 800b9b6:	2a00      	cmp	r2, #0
 800b9b8:	d037      	beq.n	800ba2a <_strtod_l+0x242>
 800b9ba:	9c05      	ldr	r4, [sp, #20]
 800b9bc:	4602      	mov	r2, r0
 800b9be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b9c2:	2909      	cmp	r1, #9
 800b9c4:	d913      	bls.n	800b9ee <_strtod_l+0x206>
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	9104      	str	r1, [sp, #16]
 800b9ca:	e7c2      	b.n	800b952 <_strtod_l+0x16a>
 800b9cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b9d2:	785b      	ldrb	r3, [r3, #1]
 800b9d4:	3001      	adds	r0, #1
 800b9d6:	2b30      	cmp	r3, #48	; 0x30
 800b9d8:	d0f8      	beq.n	800b9cc <_strtod_l+0x1e4>
 800b9da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b9de:	2a08      	cmp	r2, #8
 800b9e0:	f200 84e4 	bhi.w	800c3ac <_strtod_l+0xbc4>
 800b9e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b9e6:	9208      	str	r2, [sp, #32]
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b9f2:	f100 0101 	add.w	r1, r0, #1
 800b9f6:	d012      	beq.n	800ba1e <_strtod_l+0x236>
 800b9f8:	440a      	add	r2, r1
 800b9fa:	eb00 0c04 	add.w	ip, r0, r4
 800b9fe:	4621      	mov	r1, r4
 800ba00:	270a      	movs	r7, #10
 800ba02:	458c      	cmp	ip, r1
 800ba04:	d113      	bne.n	800ba2e <_strtod_l+0x246>
 800ba06:	1821      	adds	r1, r4, r0
 800ba08:	2908      	cmp	r1, #8
 800ba0a:	f104 0401 	add.w	r4, r4, #1
 800ba0e:	4404      	add	r4, r0
 800ba10:	dc19      	bgt.n	800ba46 <_strtod_l+0x25e>
 800ba12:	9b07      	ldr	r3, [sp, #28]
 800ba14:	210a      	movs	r1, #10
 800ba16:	fb01 e303 	mla	r3, r1, r3, lr
 800ba1a:	9307      	str	r3, [sp, #28]
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba20:	1c58      	adds	r0, r3, #1
 800ba22:	901b      	str	r0, [sp, #108]	; 0x6c
 800ba24:	785b      	ldrb	r3, [r3, #1]
 800ba26:	4608      	mov	r0, r1
 800ba28:	e7c9      	b.n	800b9be <_strtod_l+0x1d6>
 800ba2a:	9805      	ldr	r0, [sp, #20]
 800ba2c:	e7d3      	b.n	800b9d6 <_strtod_l+0x1ee>
 800ba2e:	2908      	cmp	r1, #8
 800ba30:	f101 0101 	add.w	r1, r1, #1
 800ba34:	dc03      	bgt.n	800ba3e <_strtod_l+0x256>
 800ba36:	9b07      	ldr	r3, [sp, #28]
 800ba38:	437b      	muls	r3, r7
 800ba3a:	9307      	str	r3, [sp, #28]
 800ba3c:	e7e1      	b.n	800ba02 <_strtod_l+0x21a>
 800ba3e:	2910      	cmp	r1, #16
 800ba40:	bfd8      	it	le
 800ba42:	437d      	mulle	r5, r7
 800ba44:	e7dd      	b.n	800ba02 <_strtod_l+0x21a>
 800ba46:	2c10      	cmp	r4, #16
 800ba48:	bfdc      	itt	le
 800ba4a:	210a      	movle	r1, #10
 800ba4c:	fb01 e505 	mlale	r5, r1, r5, lr
 800ba50:	e7e4      	b.n	800ba1c <_strtod_l+0x234>
 800ba52:	2301      	movs	r3, #1
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	e781      	b.n	800b95c <_strtod_l+0x174>
 800ba58:	f04f 0c01 	mov.w	ip, #1
 800ba5c:	1cb3      	adds	r3, r6, #2
 800ba5e:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba60:	78b3      	ldrb	r3, [r6, #2]
 800ba62:	e78a      	b.n	800b97a <_strtod_l+0x192>
 800ba64:	f04f 0c00 	mov.w	ip, #0
 800ba68:	e7f8      	b.n	800ba5c <_strtod_l+0x274>
 800ba6a:	bf00      	nop
 800ba6c:	080103d8 	.word	0x080103d8
 800ba70:	7ff00000 	.word	0x7ff00000
 800ba74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba76:	1c5f      	adds	r7, r3, #1
 800ba78:	971b      	str	r7, [sp, #108]	; 0x6c
 800ba7a:	785b      	ldrb	r3, [r3, #1]
 800ba7c:	2b30      	cmp	r3, #48	; 0x30
 800ba7e:	d0f9      	beq.n	800ba74 <_strtod_l+0x28c>
 800ba80:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800ba84:	2f08      	cmp	r7, #8
 800ba86:	f63f af7d 	bhi.w	800b984 <_strtod_l+0x19c>
 800ba8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ba8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba90:	930a      	str	r3, [sp, #40]	; 0x28
 800ba92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ba94:	1c5f      	adds	r7, r3, #1
 800ba96:	971b      	str	r7, [sp, #108]	; 0x6c
 800ba98:	785b      	ldrb	r3, [r3, #1]
 800ba9a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800ba9e:	f1b8 0f09 	cmp.w	r8, #9
 800baa2:	d937      	bls.n	800bb14 <_strtod_l+0x32c>
 800baa4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800baa6:	1a7f      	subs	r7, r7, r1
 800baa8:	2f08      	cmp	r7, #8
 800baaa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800baae:	dc37      	bgt.n	800bb20 <_strtod_l+0x338>
 800bab0:	45be      	cmp	lr, r7
 800bab2:	bfa8      	it	ge
 800bab4:	46be      	movge	lr, r7
 800bab6:	f1bc 0f00 	cmp.w	ip, #0
 800baba:	d001      	beq.n	800bac0 <_strtod_l+0x2d8>
 800babc:	f1ce 0e00 	rsb	lr, lr, #0
 800bac0:	2c00      	cmp	r4, #0
 800bac2:	d151      	bne.n	800bb68 <_strtod_l+0x380>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	f47f aece 	bne.w	800b866 <_strtod_l+0x7e>
 800baca:	9a06      	ldr	r2, [sp, #24]
 800bacc:	2a00      	cmp	r2, #0
 800bace:	f47f aeca 	bne.w	800b866 <_strtod_l+0x7e>
 800bad2:	9a04      	ldr	r2, [sp, #16]
 800bad4:	2a00      	cmp	r2, #0
 800bad6:	f47f aee4 	bne.w	800b8a2 <_strtod_l+0xba>
 800bada:	2b4e      	cmp	r3, #78	; 0x4e
 800badc:	d027      	beq.n	800bb2e <_strtod_l+0x346>
 800bade:	dc21      	bgt.n	800bb24 <_strtod_l+0x33c>
 800bae0:	2b49      	cmp	r3, #73	; 0x49
 800bae2:	f47f aede 	bne.w	800b8a2 <_strtod_l+0xba>
 800bae6:	49a0      	ldr	r1, [pc, #640]	; (800bd68 <_strtod_l+0x580>)
 800bae8:	a81b      	add	r0, sp, #108	; 0x6c
 800baea:	f002 f811 	bl	800db10 <__match>
 800baee:	2800      	cmp	r0, #0
 800baf0:	f43f aed7 	beq.w	800b8a2 <_strtod_l+0xba>
 800baf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800baf6:	499d      	ldr	r1, [pc, #628]	; (800bd6c <_strtod_l+0x584>)
 800baf8:	3b01      	subs	r3, #1
 800bafa:	a81b      	add	r0, sp, #108	; 0x6c
 800bafc:	931b      	str	r3, [sp, #108]	; 0x6c
 800bafe:	f002 f807 	bl	800db10 <__match>
 800bb02:	b910      	cbnz	r0, 800bb0a <_strtod_l+0x322>
 800bb04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb06:	3301      	adds	r3, #1
 800bb08:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb0a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800bd80 <_strtod_l+0x598>
 800bb0e:	f04f 0a00 	mov.w	sl, #0
 800bb12:	e6a8      	b.n	800b866 <_strtod_l+0x7e>
 800bb14:	210a      	movs	r1, #10
 800bb16:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bb1a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bb1e:	e7b8      	b.n	800ba92 <_strtod_l+0x2aa>
 800bb20:	46be      	mov	lr, r7
 800bb22:	e7c8      	b.n	800bab6 <_strtod_l+0x2ce>
 800bb24:	2b69      	cmp	r3, #105	; 0x69
 800bb26:	d0de      	beq.n	800bae6 <_strtod_l+0x2fe>
 800bb28:	2b6e      	cmp	r3, #110	; 0x6e
 800bb2a:	f47f aeba 	bne.w	800b8a2 <_strtod_l+0xba>
 800bb2e:	4990      	ldr	r1, [pc, #576]	; (800bd70 <_strtod_l+0x588>)
 800bb30:	a81b      	add	r0, sp, #108	; 0x6c
 800bb32:	f001 ffed 	bl	800db10 <__match>
 800bb36:	2800      	cmp	r0, #0
 800bb38:	f43f aeb3 	beq.w	800b8a2 <_strtod_l+0xba>
 800bb3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	2b28      	cmp	r3, #40	; 0x28
 800bb42:	d10e      	bne.n	800bb62 <_strtod_l+0x37a>
 800bb44:	aa1e      	add	r2, sp, #120	; 0x78
 800bb46:	498b      	ldr	r1, [pc, #556]	; (800bd74 <_strtod_l+0x58c>)
 800bb48:	a81b      	add	r0, sp, #108	; 0x6c
 800bb4a:	f001 fff5 	bl	800db38 <__hexnan>
 800bb4e:	2805      	cmp	r0, #5
 800bb50:	d107      	bne.n	800bb62 <_strtod_l+0x37a>
 800bb52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb54:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800bb58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bb5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bb60:	e681      	b.n	800b866 <_strtod_l+0x7e>
 800bb62:	f8df b224 	ldr.w	fp, [pc, #548]	; 800bd88 <_strtod_l+0x5a0>
 800bb66:	e7d2      	b.n	800bb0e <_strtod_l+0x326>
 800bb68:	ebae 0302 	sub.w	r3, lr, r2
 800bb6c:	9306      	str	r3, [sp, #24]
 800bb6e:	9b05      	ldr	r3, [sp, #20]
 800bb70:	9807      	ldr	r0, [sp, #28]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	bf08      	it	eq
 800bb76:	4623      	moveq	r3, r4
 800bb78:	2c10      	cmp	r4, #16
 800bb7a:	9305      	str	r3, [sp, #20]
 800bb7c:	46a0      	mov	r8, r4
 800bb7e:	bfa8      	it	ge
 800bb80:	f04f 0810 	movge.w	r8, #16
 800bb84:	f7f4 fcbe 	bl	8000504 <__aeabi_ui2d>
 800bb88:	2c09      	cmp	r4, #9
 800bb8a:	4682      	mov	sl, r0
 800bb8c:	468b      	mov	fp, r1
 800bb8e:	dc13      	bgt.n	800bbb8 <_strtod_l+0x3d0>
 800bb90:	9b06      	ldr	r3, [sp, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f43f ae67 	beq.w	800b866 <_strtod_l+0x7e>
 800bb98:	9b06      	ldr	r3, [sp, #24]
 800bb9a:	dd7a      	ble.n	800bc92 <_strtod_l+0x4aa>
 800bb9c:	2b16      	cmp	r3, #22
 800bb9e:	dc61      	bgt.n	800bc64 <_strtod_l+0x47c>
 800bba0:	4a75      	ldr	r2, [pc, #468]	; (800bd78 <_strtod_l+0x590>)
 800bba2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bba6:	e9de 0100 	ldrd	r0, r1, [lr]
 800bbaa:	4652      	mov	r2, sl
 800bbac:	465b      	mov	r3, fp
 800bbae:	f7f4 fd23 	bl	80005f8 <__aeabi_dmul>
 800bbb2:	4682      	mov	sl, r0
 800bbb4:	468b      	mov	fp, r1
 800bbb6:	e656      	b.n	800b866 <_strtod_l+0x7e>
 800bbb8:	4b6f      	ldr	r3, [pc, #444]	; (800bd78 <_strtod_l+0x590>)
 800bbba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bbbe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bbc2:	f7f4 fd19 	bl	80005f8 <__aeabi_dmul>
 800bbc6:	4606      	mov	r6, r0
 800bbc8:	4628      	mov	r0, r5
 800bbca:	460f      	mov	r7, r1
 800bbcc:	f7f4 fc9a 	bl	8000504 <__aeabi_ui2d>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	f7f4 fb58 	bl	800028c <__adddf3>
 800bbdc:	2c0f      	cmp	r4, #15
 800bbde:	4682      	mov	sl, r0
 800bbe0:	468b      	mov	fp, r1
 800bbe2:	ddd5      	ble.n	800bb90 <_strtod_l+0x3a8>
 800bbe4:	9b06      	ldr	r3, [sp, #24]
 800bbe6:	eba4 0808 	sub.w	r8, r4, r8
 800bbea:	4498      	add	r8, r3
 800bbec:	f1b8 0f00 	cmp.w	r8, #0
 800bbf0:	f340 8096 	ble.w	800bd20 <_strtod_l+0x538>
 800bbf4:	f018 030f 	ands.w	r3, r8, #15
 800bbf8:	d00a      	beq.n	800bc10 <_strtod_l+0x428>
 800bbfa:	495f      	ldr	r1, [pc, #380]	; (800bd78 <_strtod_l+0x590>)
 800bbfc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc00:	4652      	mov	r2, sl
 800bc02:	465b      	mov	r3, fp
 800bc04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc08:	f7f4 fcf6 	bl	80005f8 <__aeabi_dmul>
 800bc0c:	4682      	mov	sl, r0
 800bc0e:	468b      	mov	fp, r1
 800bc10:	f038 080f 	bics.w	r8, r8, #15
 800bc14:	d073      	beq.n	800bcfe <_strtod_l+0x516>
 800bc16:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bc1a:	dd47      	ble.n	800bcac <_strtod_l+0x4c4>
 800bc1c:	2400      	movs	r4, #0
 800bc1e:	46a0      	mov	r8, r4
 800bc20:	9407      	str	r4, [sp, #28]
 800bc22:	9405      	str	r4, [sp, #20]
 800bc24:	2322      	movs	r3, #34	; 0x22
 800bc26:	f8df b158 	ldr.w	fp, [pc, #344]	; 800bd80 <_strtod_l+0x598>
 800bc2a:	f8c9 3000 	str.w	r3, [r9]
 800bc2e:	f04f 0a00 	mov.w	sl, #0
 800bc32:	9b07      	ldr	r3, [sp, #28]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f43f ae16 	beq.w	800b866 <_strtod_l+0x7e>
 800bc3a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc3c:	4648      	mov	r0, r9
 800bc3e:	f002 f8d1 	bl	800dde4 <_Bfree>
 800bc42:	9905      	ldr	r1, [sp, #20]
 800bc44:	4648      	mov	r0, r9
 800bc46:	f002 f8cd 	bl	800dde4 <_Bfree>
 800bc4a:	4641      	mov	r1, r8
 800bc4c:	4648      	mov	r0, r9
 800bc4e:	f002 f8c9 	bl	800dde4 <_Bfree>
 800bc52:	9907      	ldr	r1, [sp, #28]
 800bc54:	4648      	mov	r0, r9
 800bc56:	f002 f8c5 	bl	800dde4 <_Bfree>
 800bc5a:	4621      	mov	r1, r4
 800bc5c:	4648      	mov	r0, r9
 800bc5e:	f002 f8c1 	bl	800dde4 <_Bfree>
 800bc62:	e600      	b.n	800b866 <_strtod_l+0x7e>
 800bc64:	9a06      	ldr	r2, [sp, #24]
 800bc66:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	dbba      	blt.n	800bbe4 <_strtod_l+0x3fc>
 800bc6e:	4d42      	ldr	r5, [pc, #264]	; (800bd78 <_strtod_l+0x590>)
 800bc70:	f1c4 040f 	rsb	r4, r4, #15
 800bc74:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bc78:	4652      	mov	r2, sl
 800bc7a:	465b      	mov	r3, fp
 800bc7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc80:	f7f4 fcba 	bl	80005f8 <__aeabi_dmul>
 800bc84:	9b06      	ldr	r3, [sp, #24]
 800bc86:	1b1c      	subs	r4, r3, r4
 800bc88:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bc8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc90:	e78d      	b.n	800bbae <_strtod_l+0x3c6>
 800bc92:	f113 0f16 	cmn.w	r3, #22
 800bc96:	dba5      	blt.n	800bbe4 <_strtod_l+0x3fc>
 800bc98:	4a37      	ldr	r2, [pc, #220]	; (800bd78 <_strtod_l+0x590>)
 800bc9a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800bc9e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bca2:	4650      	mov	r0, sl
 800bca4:	4659      	mov	r1, fp
 800bca6:	f7f4 fdd1 	bl	800084c <__aeabi_ddiv>
 800bcaa:	e782      	b.n	800bbb2 <_strtod_l+0x3ca>
 800bcac:	2300      	movs	r3, #0
 800bcae:	4e33      	ldr	r6, [pc, #204]	; (800bd7c <_strtod_l+0x594>)
 800bcb0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bcb4:	4650      	mov	r0, sl
 800bcb6:	4659      	mov	r1, fp
 800bcb8:	461d      	mov	r5, r3
 800bcba:	f1b8 0f01 	cmp.w	r8, #1
 800bcbe:	dc21      	bgt.n	800bd04 <_strtod_l+0x51c>
 800bcc0:	b10b      	cbz	r3, 800bcc6 <_strtod_l+0x4de>
 800bcc2:	4682      	mov	sl, r0
 800bcc4:	468b      	mov	fp, r1
 800bcc6:	4b2d      	ldr	r3, [pc, #180]	; (800bd7c <_strtod_l+0x594>)
 800bcc8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bccc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bcd0:	4652      	mov	r2, sl
 800bcd2:	465b      	mov	r3, fp
 800bcd4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bcd8:	f7f4 fc8e 	bl	80005f8 <__aeabi_dmul>
 800bcdc:	4b28      	ldr	r3, [pc, #160]	; (800bd80 <_strtod_l+0x598>)
 800bcde:	460a      	mov	r2, r1
 800bce0:	400b      	ands	r3, r1
 800bce2:	4928      	ldr	r1, [pc, #160]	; (800bd84 <_strtod_l+0x59c>)
 800bce4:	428b      	cmp	r3, r1
 800bce6:	4682      	mov	sl, r0
 800bce8:	d898      	bhi.n	800bc1c <_strtod_l+0x434>
 800bcea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bcee:	428b      	cmp	r3, r1
 800bcf0:	bf86      	itte	hi
 800bcf2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bd8c <_strtod_l+0x5a4>
 800bcf6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800bcfa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bcfe:	2300      	movs	r3, #0
 800bd00:	9304      	str	r3, [sp, #16]
 800bd02:	e077      	b.n	800bdf4 <_strtod_l+0x60c>
 800bd04:	f018 0f01 	tst.w	r8, #1
 800bd08:	d006      	beq.n	800bd18 <_strtod_l+0x530>
 800bd0a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	f7f4 fc71 	bl	80005f8 <__aeabi_dmul>
 800bd16:	2301      	movs	r3, #1
 800bd18:	3501      	adds	r5, #1
 800bd1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bd1e:	e7cc      	b.n	800bcba <_strtod_l+0x4d2>
 800bd20:	d0ed      	beq.n	800bcfe <_strtod_l+0x516>
 800bd22:	f1c8 0800 	rsb	r8, r8, #0
 800bd26:	f018 020f 	ands.w	r2, r8, #15
 800bd2a:	d00a      	beq.n	800bd42 <_strtod_l+0x55a>
 800bd2c:	4b12      	ldr	r3, [pc, #72]	; (800bd78 <_strtod_l+0x590>)
 800bd2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd32:	4650      	mov	r0, sl
 800bd34:	4659      	mov	r1, fp
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f7f4 fd87 	bl	800084c <__aeabi_ddiv>
 800bd3e:	4682      	mov	sl, r0
 800bd40:	468b      	mov	fp, r1
 800bd42:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bd46:	d0da      	beq.n	800bcfe <_strtod_l+0x516>
 800bd48:	f1b8 0f1f 	cmp.w	r8, #31
 800bd4c:	dd20      	ble.n	800bd90 <_strtod_l+0x5a8>
 800bd4e:	2400      	movs	r4, #0
 800bd50:	46a0      	mov	r8, r4
 800bd52:	9407      	str	r4, [sp, #28]
 800bd54:	9405      	str	r4, [sp, #20]
 800bd56:	2322      	movs	r3, #34	; 0x22
 800bd58:	f04f 0a00 	mov.w	sl, #0
 800bd5c:	f04f 0b00 	mov.w	fp, #0
 800bd60:	f8c9 3000 	str.w	r3, [r9]
 800bd64:	e765      	b.n	800bc32 <_strtod_l+0x44a>
 800bd66:	bf00      	nop
 800bd68:	080103a1 	.word	0x080103a1
 800bd6c:	0801042b 	.word	0x0801042b
 800bd70:	080103a9 	.word	0x080103a9
 800bd74:	080103ec 	.word	0x080103ec
 800bd78:	080104d0 	.word	0x080104d0
 800bd7c:	080104a8 	.word	0x080104a8
 800bd80:	7ff00000 	.word	0x7ff00000
 800bd84:	7ca00000 	.word	0x7ca00000
 800bd88:	fff80000 	.word	0xfff80000
 800bd8c:	7fefffff 	.word	0x7fefffff
 800bd90:	f018 0310 	ands.w	r3, r8, #16
 800bd94:	bf18      	it	ne
 800bd96:	236a      	movne	r3, #106	; 0x6a
 800bd98:	4da0      	ldr	r5, [pc, #640]	; (800c01c <_strtod_l+0x834>)
 800bd9a:	9304      	str	r3, [sp, #16]
 800bd9c:	4650      	mov	r0, sl
 800bd9e:	4659      	mov	r1, fp
 800bda0:	2300      	movs	r3, #0
 800bda2:	f1b8 0f00 	cmp.w	r8, #0
 800bda6:	f300 810a 	bgt.w	800bfbe <_strtod_l+0x7d6>
 800bdaa:	b10b      	cbz	r3, 800bdb0 <_strtod_l+0x5c8>
 800bdac:	4682      	mov	sl, r0
 800bdae:	468b      	mov	fp, r1
 800bdb0:	9b04      	ldr	r3, [sp, #16]
 800bdb2:	b1bb      	cbz	r3, 800bde4 <_strtod_l+0x5fc>
 800bdb4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bdb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	4659      	mov	r1, fp
 800bdc0:	dd10      	ble.n	800bde4 <_strtod_l+0x5fc>
 800bdc2:	2b1f      	cmp	r3, #31
 800bdc4:	f340 8107 	ble.w	800bfd6 <_strtod_l+0x7ee>
 800bdc8:	2b34      	cmp	r3, #52	; 0x34
 800bdca:	bfde      	ittt	le
 800bdcc:	3b20      	suble	r3, #32
 800bdce:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800bdd2:	fa02 f303 	lslle.w	r3, r2, r3
 800bdd6:	f04f 0a00 	mov.w	sl, #0
 800bdda:	bfcc      	ite	gt
 800bddc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bde0:	ea03 0b01 	andle.w	fp, r3, r1
 800bde4:	2200      	movs	r2, #0
 800bde6:	2300      	movs	r3, #0
 800bde8:	4650      	mov	r0, sl
 800bdea:	4659      	mov	r1, fp
 800bdec:	f7f4 fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d1ac      	bne.n	800bd4e <_strtod_l+0x566>
 800bdf4:	9b07      	ldr	r3, [sp, #28]
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	9a05      	ldr	r2, [sp, #20]
 800bdfa:	9908      	ldr	r1, [sp, #32]
 800bdfc:	4623      	mov	r3, r4
 800bdfe:	4648      	mov	r0, r9
 800be00:	f002 f842 	bl	800de88 <__s2b>
 800be04:	9007      	str	r0, [sp, #28]
 800be06:	2800      	cmp	r0, #0
 800be08:	f43f af08 	beq.w	800bc1c <_strtod_l+0x434>
 800be0c:	9a06      	ldr	r2, [sp, #24]
 800be0e:	9b06      	ldr	r3, [sp, #24]
 800be10:	2a00      	cmp	r2, #0
 800be12:	f1c3 0300 	rsb	r3, r3, #0
 800be16:	bfa8      	it	ge
 800be18:	2300      	movge	r3, #0
 800be1a:	930e      	str	r3, [sp, #56]	; 0x38
 800be1c:	2400      	movs	r4, #0
 800be1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800be22:	9316      	str	r3, [sp, #88]	; 0x58
 800be24:	46a0      	mov	r8, r4
 800be26:	9b07      	ldr	r3, [sp, #28]
 800be28:	4648      	mov	r0, r9
 800be2a:	6859      	ldr	r1, [r3, #4]
 800be2c:	f001 ffa6 	bl	800dd7c <_Balloc>
 800be30:	9005      	str	r0, [sp, #20]
 800be32:	2800      	cmp	r0, #0
 800be34:	f43f aef6 	beq.w	800bc24 <_strtod_l+0x43c>
 800be38:	9b07      	ldr	r3, [sp, #28]
 800be3a:	691a      	ldr	r2, [r3, #16]
 800be3c:	3202      	adds	r2, #2
 800be3e:	f103 010c 	add.w	r1, r3, #12
 800be42:	0092      	lsls	r2, r2, #2
 800be44:	300c      	adds	r0, #12
 800be46:	f7fe fdbf 	bl	800a9c8 <memcpy>
 800be4a:	aa1e      	add	r2, sp, #120	; 0x78
 800be4c:	a91d      	add	r1, sp, #116	; 0x74
 800be4e:	ec4b ab10 	vmov	d0, sl, fp
 800be52:	4648      	mov	r0, r9
 800be54:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800be58:	f002 fad2 	bl	800e400 <__d2b>
 800be5c:	901c      	str	r0, [sp, #112]	; 0x70
 800be5e:	2800      	cmp	r0, #0
 800be60:	f43f aee0 	beq.w	800bc24 <_strtod_l+0x43c>
 800be64:	2101      	movs	r1, #1
 800be66:	4648      	mov	r0, r9
 800be68:	f002 f89a 	bl	800dfa0 <__i2b>
 800be6c:	4680      	mov	r8, r0
 800be6e:	2800      	cmp	r0, #0
 800be70:	f43f aed8 	beq.w	800bc24 <_strtod_l+0x43c>
 800be74:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800be76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800be78:	2e00      	cmp	r6, #0
 800be7a:	bfab      	itete	ge
 800be7c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800be7e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800be80:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800be82:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800be84:	bfac      	ite	ge
 800be86:	18f7      	addge	r7, r6, r3
 800be88:	1b9d      	sublt	r5, r3, r6
 800be8a:	9b04      	ldr	r3, [sp, #16]
 800be8c:	1af6      	subs	r6, r6, r3
 800be8e:	4416      	add	r6, r2
 800be90:	4b63      	ldr	r3, [pc, #396]	; (800c020 <_strtod_l+0x838>)
 800be92:	3e01      	subs	r6, #1
 800be94:	429e      	cmp	r6, r3
 800be96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be9a:	f280 80af 	bge.w	800bffc <_strtod_l+0x814>
 800be9e:	1b9b      	subs	r3, r3, r6
 800bea0:	2b1f      	cmp	r3, #31
 800bea2:	eba2 0203 	sub.w	r2, r2, r3
 800bea6:	f04f 0101 	mov.w	r1, #1
 800beaa:	f300 809b 	bgt.w	800bfe4 <_strtod_l+0x7fc>
 800beae:	fa01 f303 	lsl.w	r3, r1, r3
 800beb2:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb4:	2300      	movs	r3, #0
 800beb6:	930a      	str	r3, [sp, #40]	; 0x28
 800beb8:	18be      	adds	r6, r7, r2
 800beba:	9b04      	ldr	r3, [sp, #16]
 800bebc:	42b7      	cmp	r7, r6
 800bebe:	4415      	add	r5, r2
 800bec0:	441d      	add	r5, r3
 800bec2:	463b      	mov	r3, r7
 800bec4:	bfa8      	it	ge
 800bec6:	4633      	movge	r3, r6
 800bec8:	42ab      	cmp	r3, r5
 800beca:	bfa8      	it	ge
 800becc:	462b      	movge	r3, r5
 800bece:	2b00      	cmp	r3, #0
 800bed0:	bfc2      	ittt	gt
 800bed2:	1af6      	subgt	r6, r6, r3
 800bed4:	1aed      	subgt	r5, r5, r3
 800bed6:	1aff      	subgt	r7, r7, r3
 800bed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beda:	b1bb      	cbz	r3, 800bf0c <_strtod_l+0x724>
 800bedc:	4641      	mov	r1, r8
 800bede:	461a      	mov	r2, r3
 800bee0:	4648      	mov	r0, r9
 800bee2:	f002 f8fd 	bl	800e0e0 <__pow5mult>
 800bee6:	4680      	mov	r8, r0
 800bee8:	2800      	cmp	r0, #0
 800beea:	f43f ae9b 	beq.w	800bc24 <_strtod_l+0x43c>
 800beee:	4601      	mov	r1, r0
 800bef0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bef2:	4648      	mov	r0, r9
 800bef4:	f002 f85d 	bl	800dfb2 <__multiply>
 800bef8:	900c      	str	r0, [sp, #48]	; 0x30
 800befa:	2800      	cmp	r0, #0
 800befc:	f43f ae92 	beq.w	800bc24 <_strtod_l+0x43c>
 800bf00:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf02:	4648      	mov	r0, r9
 800bf04:	f001 ff6e 	bl	800dde4 <_Bfree>
 800bf08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf0a:	931c      	str	r3, [sp, #112]	; 0x70
 800bf0c:	2e00      	cmp	r6, #0
 800bf0e:	dc7a      	bgt.n	800c006 <_strtod_l+0x81e>
 800bf10:	9b06      	ldr	r3, [sp, #24]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dd08      	ble.n	800bf28 <_strtod_l+0x740>
 800bf16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bf18:	9905      	ldr	r1, [sp, #20]
 800bf1a:	4648      	mov	r0, r9
 800bf1c:	f002 f8e0 	bl	800e0e0 <__pow5mult>
 800bf20:	9005      	str	r0, [sp, #20]
 800bf22:	2800      	cmp	r0, #0
 800bf24:	f43f ae7e 	beq.w	800bc24 <_strtod_l+0x43c>
 800bf28:	2d00      	cmp	r5, #0
 800bf2a:	dd08      	ble.n	800bf3e <_strtod_l+0x756>
 800bf2c:	462a      	mov	r2, r5
 800bf2e:	9905      	ldr	r1, [sp, #20]
 800bf30:	4648      	mov	r0, r9
 800bf32:	f002 f923 	bl	800e17c <__lshift>
 800bf36:	9005      	str	r0, [sp, #20]
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	f43f ae73 	beq.w	800bc24 <_strtod_l+0x43c>
 800bf3e:	2f00      	cmp	r7, #0
 800bf40:	dd08      	ble.n	800bf54 <_strtod_l+0x76c>
 800bf42:	4641      	mov	r1, r8
 800bf44:	463a      	mov	r2, r7
 800bf46:	4648      	mov	r0, r9
 800bf48:	f002 f918 	bl	800e17c <__lshift>
 800bf4c:	4680      	mov	r8, r0
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	f43f ae68 	beq.w	800bc24 <_strtod_l+0x43c>
 800bf54:	9a05      	ldr	r2, [sp, #20]
 800bf56:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf58:	4648      	mov	r0, r9
 800bf5a:	f002 f97d 	bl	800e258 <__mdiff>
 800bf5e:	4604      	mov	r4, r0
 800bf60:	2800      	cmp	r0, #0
 800bf62:	f43f ae5f 	beq.w	800bc24 <_strtod_l+0x43c>
 800bf66:	68c3      	ldr	r3, [r0, #12]
 800bf68:	930c      	str	r3, [sp, #48]	; 0x30
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60c3      	str	r3, [r0, #12]
 800bf6e:	4641      	mov	r1, r8
 800bf70:	f002 f958 	bl	800e224 <__mcmp>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	da55      	bge.n	800c024 <_strtod_l+0x83c>
 800bf78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf7a:	b9e3      	cbnz	r3, 800bfb6 <_strtod_l+0x7ce>
 800bf7c:	f1ba 0f00 	cmp.w	sl, #0
 800bf80:	d119      	bne.n	800bfb6 <_strtod_l+0x7ce>
 800bf82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf86:	b9b3      	cbnz	r3, 800bfb6 <_strtod_l+0x7ce>
 800bf88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf8c:	0d1b      	lsrs	r3, r3, #20
 800bf8e:	051b      	lsls	r3, r3, #20
 800bf90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf94:	d90f      	bls.n	800bfb6 <_strtod_l+0x7ce>
 800bf96:	6963      	ldr	r3, [r4, #20]
 800bf98:	b913      	cbnz	r3, 800bfa0 <_strtod_l+0x7b8>
 800bf9a:	6923      	ldr	r3, [r4, #16]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	dd0a      	ble.n	800bfb6 <_strtod_l+0x7ce>
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	4648      	mov	r0, r9
 800bfa6:	f002 f8e9 	bl	800e17c <__lshift>
 800bfaa:	4641      	mov	r1, r8
 800bfac:	4604      	mov	r4, r0
 800bfae:	f002 f939 	bl	800e224 <__mcmp>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	dc67      	bgt.n	800c086 <_strtod_l+0x89e>
 800bfb6:	9b04      	ldr	r3, [sp, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d171      	bne.n	800c0a0 <_strtod_l+0x8b8>
 800bfbc:	e63d      	b.n	800bc3a <_strtod_l+0x452>
 800bfbe:	f018 0f01 	tst.w	r8, #1
 800bfc2:	d004      	beq.n	800bfce <_strtod_l+0x7e6>
 800bfc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfc8:	f7f4 fb16 	bl	80005f8 <__aeabi_dmul>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bfd2:	3508      	adds	r5, #8
 800bfd4:	e6e5      	b.n	800bda2 <_strtod_l+0x5ba>
 800bfd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfda:	fa02 f303 	lsl.w	r3, r2, r3
 800bfde:	ea03 0a0a 	and.w	sl, r3, sl
 800bfe2:	e6ff      	b.n	800bde4 <_strtod_l+0x5fc>
 800bfe4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bfe8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bfec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bff0:	36e2      	adds	r6, #226	; 0xe2
 800bff2:	fa01 f306 	lsl.w	r3, r1, r6
 800bff6:	930a      	str	r3, [sp, #40]	; 0x28
 800bff8:	910f      	str	r1, [sp, #60]	; 0x3c
 800bffa:	e75d      	b.n	800beb8 <_strtod_l+0x6d0>
 800bffc:	2300      	movs	r3, #0
 800bffe:	930a      	str	r3, [sp, #40]	; 0x28
 800c000:	2301      	movs	r3, #1
 800c002:	930f      	str	r3, [sp, #60]	; 0x3c
 800c004:	e758      	b.n	800beb8 <_strtod_l+0x6d0>
 800c006:	4632      	mov	r2, r6
 800c008:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c00a:	4648      	mov	r0, r9
 800c00c:	f002 f8b6 	bl	800e17c <__lshift>
 800c010:	901c      	str	r0, [sp, #112]	; 0x70
 800c012:	2800      	cmp	r0, #0
 800c014:	f47f af7c 	bne.w	800bf10 <_strtod_l+0x728>
 800c018:	e604      	b.n	800bc24 <_strtod_l+0x43c>
 800c01a:	bf00      	nop
 800c01c:	08010400 	.word	0x08010400
 800c020:	fffffc02 	.word	0xfffffc02
 800c024:	465d      	mov	r5, fp
 800c026:	f040 8086 	bne.w	800c136 <_strtod_l+0x94e>
 800c02a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c02c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c030:	b32a      	cbz	r2, 800c07e <_strtod_l+0x896>
 800c032:	4aaf      	ldr	r2, [pc, #700]	; (800c2f0 <_strtod_l+0xb08>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d153      	bne.n	800c0e0 <_strtod_l+0x8f8>
 800c038:	9b04      	ldr	r3, [sp, #16]
 800c03a:	4650      	mov	r0, sl
 800c03c:	b1d3      	cbz	r3, 800c074 <_strtod_l+0x88c>
 800c03e:	4aad      	ldr	r2, [pc, #692]	; (800c2f4 <_strtod_l+0xb0c>)
 800c040:	402a      	ands	r2, r5
 800c042:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c046:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c04a:	d816      	bhi.n	800c07a <_strtod_l+0x892>
 800c04c:	0d12      	lsrs	r2, r2, #20
 800c04e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c052:	fa01 f303 	lsl.w	r3, r1, r3
 800c056:	4298      	cmp	r0, r3
 800c058:	d142      	bne.n	800c0e0 <_strtod_l+0x8f8>
 800c05a:	4ba7      	ldr	r3, [pc, #668]	; (800c2f8 <_strtod_l+0xb10>)
 800c05c:	429d      	cmp	r5, r3
 800c05e:	d102      	bne.n	800c066 <_strtod_l+0x87e>
 800c060:	3001      	adds	r0, #1
 800c062:	f43f addf 	beq.w	800bc24 <_strtod_l+0x43c>
 800c066:	4ba3      	ldr	r3, [pc, #652]	; (800c2f4 <_strtod_l+0xb0c>)
 800c068:	402b      	ands	r3, r5
 800c06a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c06e:	f04f 0a00 	mov.w	sl, #0
 800c072:	e7a0      	b.n	800bfb6 <_strtod_l+0x7ce>
 800c074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c078:	e7ed      	b.n	800c056 <_strtod_l+0x86e>
 800c07a:	460b      	mov	r3, r1
 800c07c:	e7eb      	b.n	800c056 <_strtod_l+0x86e>
 800c07e:	bb7b      	cbnz	r3, 800c0e0 <_strtod_l+0x8f8>
 800c080:	f1ba 0f00 	cmp.w	sl, #0
 800c084:	d12c      	bne.n	800c0e0 <_strtod_l+0x8f8>
 800c086:	9904      	ldr	r1, [sp, #16]
 800c088:	4a9a      	ldr	r2, [pc, #616]	; (800c2f4 <_strtod_l+0xb0c>)
 800c08a:	465b      	mov	r3, fp
 800c08c:	b1f1      	cbz	r1, 800c0cc <_strtod_l+0x8e4>
 800c08e:	ea02 010b 	and.w	r1, r2, fp
 800c092:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c096:	dc19      	bgt.n	800c0cc <_strtod_l+0x8e4>
 800c098:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c09c:	f77f ae5b 	ble.w	800bd56 <_strtod_l+0x56e>
 800c0a0:	4a96      	ldr	r2, [pc, #600]	; (800c2fc <_strtod_l+0xb14>)
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c0a8:	4650      	mov	r0, sl
 800c0aa:	4659      	mov	r1, fp
 800c0ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c0b0:	f7f4 faa2 	bl	80005f8 <__aeabi_dmul>
 800c0b4:	4682      	mov	sl, r0
 800c0b6:	468b      	mov	fp, r1
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	f47f adbe 	bne.w	800bc3a <_strtod_l+0x452>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f47f adbb 	bne.w	800bc3a <_strtod_l+0x452>
 800c0c4:	2322      	movs	r3, #34	; 0x22
 800c0c6:	f8c9 3000 	str.w	r3, [r9]
 800c0ca:	e5b6      	b.n	800bc3a <_strtod_l+0x452>
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c0d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c0d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c0da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c0de:	e76a      	b.n	800bfb6 <_strtod_l+0x7ce>
 800c0e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e2:	b193      	cbz	r3, 800c10a <_strtod_l+0x922>
 800c0e4:	422b      	tst	r3, r5
 800c0e6:	f43f af66 	beq.w	800bfb6 <_strtod_l+0x7ce>
 800c0ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0ec:	9a04      	ldr	r2, [sp, #16]
 800c0ee:	4650      	mov	r0, sl
 800c0f0:	4659      	mov	r1, fp
 800c0f2:	b173      	cbz	r3, 800c112 <_strtod_l+0x92a>
 800c0f4:	f7ff fb5c 	bl	800b7b0 <sulp>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c100:	f7f4 f8c4 	bl	800028c <__adddf3>
 800c104:	4682      	mov	sl, r0
 800c106:	468b      	mov	fp, r1
 800c108:	e755      	b.n	800bfb6 <_strtod_l+0x7ce>
 800c10a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c10c:	ea13 0f0a 	tst.w	r3, sl
 800c110:	e7e9      	b.n	800c0e6 <_strtod_l+0x8fe>
 800c112:	f7ff fb4d 	bl	800b7b0 <sulp>
 800c116:	4602      	mov	r2, r0
 800c118:	460b      	mov	r3, r1
 800c11a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c11e:	f7f4 f8b3 	bl	8000288 <__aeabi_dsub>
 800c122:	2200      	movs	r2, #0
 800c124:	2300      	movs	r3, #0
 800c126:	4682      	mov	sl, r0
 800c128:	468b      	mov	fp, r1
 800c12a:	f7f4 fccd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c12e:	2800      	cmp	r0, #0
 800c130:	f47f ae11 	bne.w	800bd56 <_strtod_l+0x56e>
 800c134:	e73f      	b.n	800bfb6 <_strtod_l+0x7ce>
 800c136:	4641      	mov	r1, r8
 800c138:	4620      	mov	r0, r4
 800c13a:	f002 f9b0 	bl	800e49e <__ratio>
 800c13e:	ec57 6b10 	vmov	r6, r7, d0
 800c142:	2200      	movs	r2, #0
 800c144:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c148:	ee10 0a10 	vmov	r0, s0
 800c14c:	4639      	mov	r1, r7
 800c14e:	f7f4 fccf 	bl	8000af0 <__aeabi_dcmple>
 800c152:	2800      	cmp	r0, #0
 800c154:	d077      	beq.n	800c246 <_strtod_l+0xa5e>
 800c156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d04a      	beq.n	800c1f2 <_strtod_l+0xa0a>
 800c15c:	4b68      	ldr	r3, [pc, #416]	; (800c300 <_strtod_l+0xb18>)
 800c15e:	2200      	movs	r2, #0
 800c160:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c164:	4f66      	ldr	r7, [pc, #408]	; (800c300 <_strtod_l+0xb18>)
 800c166:	2600      	movs	r6, #0
 800c168:	4b62      	ldr	r3, [pc, #392]	; (800c2f4 <_strtod_l+0xb0c>)
 800c16a:	402b      	ands	r3, r5
 800c16c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c16e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c170:	4b64      	ldr	r3, [pc, #400]	; (800c304 <_strtod_l+0xb1c>)
 800c172:	429a      	cmp	r2, r3
 800c174:	f040 80ce 	bne.w	800c314 <_strtod_l+0xb2c>
 800c178:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c17c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c180:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c184:	ec4b ab10 	vmov	d0, sl, fp
 800c188:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c18c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c190:	f002 f8c0 	bl	800e314 <__ulp>
 800c194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c198:	ec53 2b10 	vmov	r2, r3, d0
 800c19c:	f7f4 fa2c 	bl	80005f8 <__aeabi_dmul>
 800c1a0:	4652      	mov	r2, sl
 800c1a2:	465b      	mov	r3, fp
 800c1a4:	f7f4 f872 	bl	800028c <__adddf3>
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	4952      	ldr	r1, [pc, #328]	; (800c2f4 <_strtod_l+0xb0c>)
 800c1ac:	4a56      	ldr	r2, [pc, #344]	; (800c308 <_strtod_l+0xb20>)
 800c1ae:	4019      	ands	r1, r3
 800c1b0:	4291      	cmp	r1, r2
 800c1b2:	4682      	mov	sl, r0
 800c1b4:	d95b      	bls.n	800c26e <_strtod_l+0xa86>
 800c1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d103      	bne.n	800c1c8 <_strtod_l+0x9e0>
 800c1c0:	9b08      	ldr	r3, [sp, #32]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	f43f ad2e 	beq.w	800bc24 <_strtod_l+0x43c>
 800c1c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c2f8 <_strtod_l+0xb10>
 800c1cc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c1d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c1d2:	4648      	mov	r0, r9
 800c1d4:	f001 fe06 	bl	800dde4 <_Bfree>
 800c1d8:	9905      	ldr	r1, [sp, #20]
 800c1da:	4648      	mov	r0, r9
 800c1dc:	f001 fe02 	bl	800dde4 <_Bfree>
 800c1e0:	4641      	mov	r1, r8
 800c1e2:	4648      	mov	r0, r9
 800c1e4:	f001 fdfe 	bl	800dde4 <_Bfree>
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	4648      	mov	r0, r9
 800c1ec:	f001 fdfa 	bl	800dde4 <_Bfree>
 800c1f0:	e619      	b.n	800be26 <_strtod_l+0x63e>
 800c1f2:	f1ba 0f00 	cmp.w	sl, #0
 800c1f6:	d11a      	bne.n	800c22e <_strtod_l+0xa46>
 800c1f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1fc:	b9eb      	cbnz	r3, 800c23a <_strtod_l+0xa52>
 800c1fe:	2200      	movs	r2, #0
 800c200:	4b3f      	ldr	r3, [pc, #252]	; (800c300 <_strtod_l+0xb18>)
 800c202:	4630      	mov	r0, r6
 800c204:	4639      	mov	r1, r7
 800c206:	f7f4 fc69 	bl	8000adc <__aeabi_dcmplt>
 800c20a:	b9c8      	cbnz	r0, 800c240 <_strtod_l+0xa58>
 800c20c:	4630      	mov	r0, r6
 800c20e:	4639      	mov	r1, r7
 800c210:	2200      	movs	r2, #0
 800c212:	4b3e      	ldr	r3, [pc, #248]	; (800c30c <_strtod_l+0xb24>)
 800c214:	f7f4 f9f0 	bl	80005f8 <__aeabi_dmul>
 800c218:	4606      	mov	r6, r0
 800c21a:	460f      	mov	r7, r1
 800c21c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c220:	9618      	str	r6, [sp, #96]	; 0x60
 800c222:	9319      	str	r3, [sp, #100]	; 0x64
 800c224:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c228:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c22c:	e79c      	b.n	800c168 <_strtod_l+0x980>
 800c22e:	f1ba 0f01 	cmp.w	sl, #1
 800c232:	d102      	bne.n	800c23a <_strtod_l+0xa52>
 800c234:	2d00      	cmp	r5, #0
 800c236:	f43f ad8e 	beq.w	800bd56 <_strtod_l+0x56e>
 800c23a:	2200      	movs	r2, #0
 800c23c:	4b34      	ldr	r3, [pc, #208]	; (800c310 <_strtod_l+0xb28>)
 800c23e:	e78f      	b.n	800c160 <_strtod_l+0x978>
 800c240:	2600      	movs	r6, #0
 800c242:	4f32      	ldr	r7, [pc, #200]	; (800c30c <_strtod_l+0xb24>)
 800c244:	e7ea      	b.n	800c21c <_strtod_l+0xa34>
 800c246:	4b31      	ldr	r3, [pc, #196]	; (800c30c <_strtod_l+0xb24>)
 800c248:	4630      	mov	r0, r6
 800c24a:	4639      	mov	r1, r7
 800c24c:	2200      	movs	r2, #0
 800c24e:	f7f4 f9d3 	bl	80005f8 <__aeabi_dmul>
 800c252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c254:	4606      	mov	r6, r0
 800c256:	460f      	mov	r7, r1
 800c258:	b933      	cbnz	r3, 800c268 <_strtod_l+0xa80>
 800c25a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c25e:	9010      	str	r0, [sp, #64]	; 0x40
 800c260:	9311      	str	r3, [sp, #68]	; 0x44
 800c262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c266:	e7df      	b.n	800c228 <_strtod_l+0xa40>
 800c268:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c26c:	e7f9      	b.n	800c262 <_strtod_l+0xa7a>
 800c26e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c272:	9b04      	ldr	r3, [sp, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1ab      	bne.n	800c1d0 <_strtod_l+0x9e8>
 800c278:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c27c:	0d1b      	lsrs	r3, r3, #20
 800c27e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c280:	051b      	lsls	r3, r3, #20
 800c282:	429a      	cmp	r2, r3
 800c284:	465d      	mov	r5, fp
 800c286:	d1a3      	bne.n	800c1d0 <_strtod_l+0x9e8>
 800c288:	4639      	mov	r1, r7
 800c28a:	4630      	mov	r0, r6
 800c28c:	f7f4 fc64 	bl	8000b58 <__aeabi_d2iz>
 800c290:	f7f4 f948 	bl	8000524 <__aeabi_i2d>
 800c294:	460b      	mov	r3, r1
 800c296:	4602      	mov	r2, r0
 800c298:	4639      	mov	r1, r7
 800c29a:	4630      	mov	r0, r6
 800c29c:	f7f3 fff4 	bl	8000288 <__aeabi_dsub>
 800c2a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2a2:	4606      	mov	r6, r0
 800c2a4:	460f      	mov	r7, r1
 800c2a6:	b933      	cbnz	r3, 800c2b6 <_strtod_l+0xace>
 800c2a8:	f1ba 0f00 	cmp.w	sl, #0
 800c2ac:	d103      	bne.n	800c2b6 <_strtod_l+0xace>
 800c2ae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c2b2:	2d00      	cmp	r5, #0
 800c2b4:	d06d      	beq.n	800c392 <_strtod_l+0xbaa>
 800c2b6:	a30a      	add	r3, pc, #40	; (adr r3, 800c2e0 <_strtod_l+0xaf8>)
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	4630      	mov	r0, r6
 800c2be:	4639      	mov	r1, r7
 800c2c0:	f7f4 fc0c 	bl	8000adc <__aeabi_dcmplt>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	f47f acb8 	bne.w	800bc3a <_strtod_l+0x452>
 800c2ca:	a307      	add	r3, pc, #28	; (adr r3, 800c2e8 <_strtod_l+0xb00>)
 800c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	f7f4 fc20 	bl	8000b18 <__aeabi_dcmpgt>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	f43f af79 	beq.w	800c1d0 <_strtod_l+0x9e8>
 800c2de:	e4ac      	b.n	800bc3a <_strtod_l+0x452>
 800c2e0:	94a03595 	.word	0x94a03595
 800c2e4:	3fdfffff 	.word	0x3fdfffff
 800c2e8:	35afe535 	.word	0x35afe535
 800c2ec:	3fe00000 	.word	0x3fe00000
 800c2f0:	000fffff 	.word	0x000fffff
 800c2f4:	7ff00000 	.word	0x7ff00000
 800c2f8:	7fefffff 	.word	0x7fefffff
 800c2fc:	39500000 	.word	0x39500000
 800c300:	3ff00000 	.word	0x3ff00000
 800c304:	7fe00000 	.word	0x7fe00000
 800c308:	7c9fffff 	.word	0x7c9fffff
 800c30c:	3fe00000 	.word	0x3fe00000
 800c310:	bff00000 	.word	0xbff00000
 800c314:	9b04      	ldr	r3, [sp, #16]
 800c316:	b333      	cbz	r3, 800c366 <_strtod_l+0xb7e>
 800c318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c31a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c31e:	d822      	bhi.n	800c366 <_strtod_l+0xb7e>
 800c320:	a327      	add	r3, pc, #156	; (adr r3, 800c3c0 <_strtod_l+0xbd8>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	4630      	mov	r0, r6
 800c328:	4639      	mov	r1, r7
 800c32a:	f7f4 fbe1 	bl	8000af0 <__aeabi_dcmple>
 800c32e:	b1a0      	cbz	r0, 800c35a <_strtod_l+0xb72>
 800c330:	4639      	mov	r1, r7
 800c332:	4630      	mov	r0, r6
 800c334:	f7f4 fc38 	bl	8000ba8 <__aeabi_d2uiz>
 800c338:	2800      	cmp	r0, #0
 800c33a:	bf08      	it	eq
 800c33c:	2001      	moveq	r0, #1
 800c33e:	f7f4 f8e1 	bl	8000504 <__aeabi_ui2d>
 800c342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c344:	4606      	mov	r6, r0
 800c346:	460f      	mov	r7, r1
 800c348:	bb03      	cbnz	r3, 800c38c <_strtod_l+0xba4>
 800c34a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c34e:	9012      	str	r0, [sp, #72]	; 0x48
 800c350:	9313      	str	r3, [sp, #76]	; 0x4c
 800c352:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c356:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c35c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c35e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c362:	1a9b      	subs	r3, r3, r2
 800c364:	930b      	str	r3, [sp, #44]	; 0x2c
 800c366:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c36a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c36e:	f001 ffd1 	bl	800e314 <__ulp>
 800c372:	4650      	mov	r0, sl
 800c374:	ec53 2b10 	vmov	r2, r3, d0
 800c378:	4659      	mov	r1, fp
 800c37a:	f7f4 f93d 	bl	80005f8 <__aeabi_dmul>
 800c37e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c382:	f7f3 ff83 	bl	800028c <__adddf3>
 800c386:	4682      	mov	sl, r0
 800c388:	468b      	mov	fp, r1
 800c38a:	e772      	b.n	800c272 <_strtod_l+0xa8a>
 800c38c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c390:	e7df      	b.n	800c352 <_strtod_l+0xb6a>
 800c392:	a30d      	add	r3, pc, #52	; (adr r3, 800c3c8 <_strtod_l+0xbe0>)
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	f7f4 fba0 	bl	8000adc <__aeabi_dcmplt>
 800c39c:	e79c      	b.n	800c2d8 <_strtod_l+0xaf0>
 800c39e:	2300      	movs	r3, #0
 800c3a0:	930d      	str	r3, [sp, #52]	; 0x34
 800c3a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3a6:	6013      	str	r3, [r2, #0]
 800c3a8:	f7ff ba61 	b.w	800b86e <_strtod_l+0x86>
 800c3ac:	2b65      	cmp	r3, #101	; 0x65
 800c3ae:	f04f 0200 	mov.w	r2, #0
 800c3b2:	f43f ab4e 	beq.w	800ba52 <_strtod_l+0x26a>
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	9104      	str	r1, [sp, #16]
 800c3bc:	f7ff bacb 	b.w	800b956 <_strtod_l+0x16e>
 800c3c0:	ffc00000 	.word	0xffc00000
 800c3c4:	41dfffff 	.word	0x41dfffff
 800c3c8:	94a03595 	.word	0x94a03595
 800c3cc:	3fcfffff 	.word	0x3fcfffff

0800c3d0 <_strtod_r>:
 800c3d0:	4b05      	ldr	r3, [pc, #20]	; (800c3e8 <_strtod_r+0x18>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	b410      	push	{r4}
 800c3d6:	6a1b      	ldr	r3, [r3, #32]
 800c3d8:	4c04      	ldr	r4, [pc, #16]	; (800c3ec <_strtod_r+0x1c>)
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	bf08      	it	eq
 800c3de:	4623      	moveq	r3, r4
 800c3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3e4:	f7ff ba00 	b.w	800b7e8 <_strtod_l>
 800c3e8:	2000000c 	.word	0x2000000c
 800c3ec:	20000070 	.word	0x20000070

0800c3f0 <_strtol_l.isra.0>:
 800c3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f4:	4680      	mov	r8, r0
 800c3f6:	4689      	mov	r9, r1
 800c3f8:	4692      	mov	sl, r2
 800c3fa:	461e      	mov	r6, r3
 800c3fc:	460f      	mov	r7, r1
 800c3fe:	463d      	mov	r5, r7
 800c400:	9808      	ldr	r0, [sp, #32]
 800c402:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c406:	f001 fc27 	bl	800dc58 <__locale_ctype_ptr_l>
 800c40a:	4420      	add	r0, r4
 800c40c:	7843      	ldrb	r3, [r0, #1]
 800c40e:	f013 0308 	ands.w	r3, r3, #8
 800c412:	d132      	bne.n	800c47a <_strtol_l.isra.0+0x8a>
 800c414:	2c2d      	cmp	r4, #45	; 0x2d
 800c416:	d132      	bne.n	800c47e <_strtol_l.isra.0+0x8e>
 800c418:	787c      	ldrb	r4, [r7, #1]
 800c41a:	1cbd      	adds	r5, r7, #2
 800c41c:	2201      	movs	r2, #1
 800c41e:	2e00      	cmp	r6, #0
 800c420:	d05d      	beq.n	800c4de <_strtol_l.isra.0+0xee>
 800c422:	2e10      	cmp	r6, #16
 800c424:	d109      	bne.n	800c43a <_strtol_l.isra.0+0x4a>
 800c426:	2c30      	cmp	r4, #48	; 0x30
 800c428:	d107      	bne.n	800c43a <_strtol_l.isra.0+0x4a>
 800c42a:	782b      	ldrb	r3, [r5, #0]
 800c42c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c430:	2b58      	cmp	r3, #88	; 0x58
 800c432:	d14f      	bne.n	800c4d4 <_strtol_l.isra.0+0xe4>
 800c434:	786c      	ldrb	r4, [r5, #1]
 800c436:	2610      	movs	r6, #16
 800c438:	3502      	adds	r5, #2
 800c43a:	2a00      	cmp	r2, #0
 800c43c:	bf14      	ite	ne
 800c43e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c442:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c446:	2700      	movs	r7, #0
 800c448:	fbb1 fcf6 	udiv	ip, r1, r6
 800c44c:	4638      	mov	r0, r7
 800c44e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c452:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c456:	2b09      	cmp	r3, #9
 800c458:	d817      	bhi.n	800c48a <_strtol_l.isra.0+0x9a>
 800c45a:	461c      	mov	r4, r3
 800c45c:	42a6      	cmp	r6, r4
 800c45e:	dd23      	ble.n	800c4a8 <_strtol_l.isra.0+0xb8>
 800c460:	1c7b      	adds	r3, r7, #1
 800c462:	d007      	beq.n	800c474 <_strtol_l.isra.0+0x84>
 800c464:	4584      	cmp	ip, r0
 800c466:	d31c      	bcc.n	800c4a2 <_strtol_l.isra.0+0xb2>
 800c468:	d101      	bne.n	800c46e <_strtol_l.isra.0+0x7e>
 800c46a:	45a6      	cmp	lr, r4
 800c46c:	db19      	blt.n	800c4a2 <_strtol_l.isra.0+0xb2>
 800c46e:	fb00 4006 	mla	r0, r0, r6, r4
 800c472:	2701      	movs	r7, #1
 800c474:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c478:	e7eb      	b.n	800c452 <_strtol_l.isra.0+0x62>
 800c47a:	462f      	mov	r7, r5
 800c47c:	e7bf      	b.n	800c3fe <_strtol_l.isra.0+0xe>
 800c47e:	2c2b      	cmp	r4, #43	; 0x2b
 800c480:	bf04      	itt	eq
 800c482:	1cbd      	addeq	r5, r7, #2
 800c484:	787c      	ldrbeq	r4, [r7, #1]
 800c486:	461a      	mov	r2, r3
 800c488:	e7c9      	b.n	800c41e <_strtol_l.isra.0+0x2e>
 800c48a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c48e:	2b19      	cmp	r3, #25
 800c490:	d801      	bhi.n	800c496 <_strtol_l.isra.0+0xa6>
 800c492:	3c37      	subs	r4, #55	; 0x37
 800c494:	e7e2      	b.n	800c45c <_strtol_l.isra.0+0x6c>
 800c496:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c49a:	2b19      	cmp	r3, #25
 800c49c:	d804      	bhi.n	800c4a8 <_strtol_l.isra.0+0xb8>
 800c49e:	3c57      	subs	r4, #87	; 0x57
 800c4a0:	e7dc      	b.n	800c45c <_strtol_l.isra.0+0x6c>
 800c4a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c4a6:	e7e5      	b.n	800c474 <_strtol_l.isra.0+0x84>
 800c4a8:	1c7b      	adds	r3, r7, #1
 800c4aa:	d108      	bne.n	800c4be <_strtol_l.isra.0+0xce>
 800c4ac:	2322      	movs	r3, #34	; 0x22
 800c4ae:	f8c8 3000 	str.w	r3, [r8]
 800c4b2:	4608      	mov	r0, r1
 800c4b4:	f1ba 0f00 	cmp.w	sl, #0
 800c4b8:	d107      	bne.n	800c4ca <_strtol_l.isra.0+0xda>
 800c4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4be:	b102      	cbz	r2, 800c4c2 <_strtol_l.isra.0+0xd2>
 800c4c0:	4240      	negs	r0, r0
 800c4c2:	f1ba 0f00 	cmp.w	sl, #0
 800c4c6:	d0f8      	beq.n	800c4ba <_strtol_l.isra.0+0xca>
 800c4c8:	b10f      	cbz	r7, 800c4ce <_strtol_l.isra.0+0xde>
 800c4ca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c4ce:	f8ca 9000 	str.w	r9, [sl]
 800c4d2:	e7f2      	b.n	800c4ba <_strtol_l.isra.0+0xca>
 800c4d4:	2430      	movs	r4, #48	; 0x30
 800c4d6:	2e00      	cmp	r6, #0
 800c4d8:	d1af      	bne.n	800c43a <_strtol_l.isra.0+0x4a>
 800c4da:	2608      	movs	r6, #8
 800c4dc:	e7ad      	b.n	800c43a <_strtol_l.isra.0+0x4a>
 800c4de:	2c30      	cmp	r4, #48	; 0x30
 800c4e0:	d0a3      	beq.n	800c42a <_strtol_l.isra.0+0x3a>
 800c4e2:	260a      	movs	r6, #10
 800c4e4:	e7a9      	b.n	800c43a <_strtol_l.isra.0+0x4a>
	...

0800c4e8 <_strtol_r>:
 800c4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4ea:	4c06      	ldr	r4, [pc, #24]	; (800c504 <_strtol_r+0x1c>)
 800c4ec:	4d06      	ldr	r5, [pc, #24]	; (800c508 <_strtol_r+0x20>)
 800c4ee:	6824      	ldr	r4, [r4, #0]
 800c4f0:	6a24      	ldr	r4, [r4, #32]
 800c4f2:	2c00      	cmp	r4, #0
 800c4f4:	bf08      	it	eq
 800c4f6:	462c      	moveq	r4, r5
 800c4f8:	9400      	str	r4, [sp, #0]
 800c4fa:	f7ff ff79 	bl	800c3f0 <_strtol_l.isra.0>
 800c4fe:	b003      	add	sp, #12
 800c500:	bd30      	pop	{r4, r5, pc}
 800c502:	bf00      	nop
 800c504:	2000000c 	.word	0x2000000c
 800c508:	20000070 	.word	0x20000070

0800c50c <__swbuf_r>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	460e      	mov	r6, r1
 800c510:	4614      	mov	r4, r2
 800c512:	4605      	mov	r5, r0
 800c514:	b118      	cbz	r0, 800c51e <__swbuf_r+0x12>
 800c516:	6983      	ldr	r3, [r0, #24]
 800c518:	b90b      	cbnz	r3, 800c51e <__swbuf_r+0x12>
 800c51a:	f000 ffed 	bl	800d4f8 <__sinit>
 800c51e:	4b21      	ldr	r3, [pc, #132]	; (800c5a4 <__swbuf_r+0x98>)
 800c520:	429c      	cmp	r4, r3
 800c522:	d12a      	bne.n	800c57a <__swbuf_r+0x6e>
 800c524:	686c      	ldr	r4, [r5, #4]
 800c526:	69a3      	ldr	r3, [r4, #24]
 800c528:	60a3      	str	r3, [r4, #8]
 800c52a:	89a3      	ldrh	r3, [r4, #12]
 800c52c:	071a      	lsls	r2, r3, #28
 800c52e:	d52e      	bpl.n	800c58e <__swbuf_r+0x82>
 800c530:	6923      	ldr	r3, [r4, #16]
 800c532:	b363      	cbz	r3, 800c58e <__swbuf_r+0x82>
 800c534:	6923      	ldr	r3, [r4, #16]
 800c536:	6820      	ldr	r0, [r4, #0]
 800c538:	1ac0      	subs	r0, r0, r3
 800c53a:	6963      	ldr	r3, [r4, #20]
 800c53c:	b2f6      	uxtb	r6, r6
 800c53e:	4283      	cmp	r3, r0
 800c540:	4637      	mov	r7, r6
 800c542:	dc04      	bgt.n	800c54e <__swbuf_r+0x42>
 800c544:	4621      	mov	r1, r4
 800c546:	4628      	mov	r0, r5
 800c548:	f000 ff6c 	bl	800d424 <_fflush_r>
 800c54c:	bb28      	cbnz	r0, 800c59a <__swbuf_r+0x8e>
 800c54e:	68a3      	ldr	r3, [r4, #8]
 800c550:	3b01      	subs	r3, #1
 800c552:	60a3      	str	r3, [r4, #8]
 800c554:	6823      	ldr	r3, [r4, #0]
 800c556:	1c5a      	adds	r2, r3, #1
 800c558:	6022      	str	r2, [r4, #0]
 800c55a:	701e      	strb	r6, [r3, #0]
 800c55c:	6963      	ldr	r3, [r4, #20]
 800c55e:	3001      	adds	r0, #1
 800c560:	4283      	cmp	r3, r0
 800c562:	d004      	beq.n	800c56e <__swbuf_r+0x62>
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	07db      	lsls	r3, r3, #31
 800c568:	d519      	bpl.n	800c59e <__swbuf_r+0x92>
 800c56a:	2e0a      	cmp	r6, #10
 800c56c:	d117      	bne.n	800c59e <__swbuf_r+0x92>
 800c56e:	4621      	mov	r1, r4
 800c570:	4628      	mov	r0, r5
 800c572:	f000 ff57 	bl	800d424 <_fflush_r>
 800c576:	b190      	cbz	r0, 800c59e <__swbuf_r+0x92>
 800c578:	e00f      	b.n	800c59a <__swbuf_r+0x8e>
 800c57a:	4b0b      	ldr	r3, [pc, #44]	; (800c5a8 <__swbuf_r+0x9c>)
 800c57c:	429c      	cmp	r4, r3
 800c57e:	d101      	bne.n	800c584 <__swbuf_r+0x78>
 800c580:	68ac      	ldr	r4, [r5, #8]
 800c582:	e7d0      	b.n	800c526 <__swbuf_r+0x1a>
 800c584:	4b09      	ldr	r3, [pc, #36]	; (800c5ac <__swbuf_r+0xa0>)
 800c586:	429c      	cmp	r4, r3
 800c588:	bf08      	it	eq
 800c58a:	68ec      	ldreq	r4, [r5, #12]
 800c58c:	e7cb      	b.n	800c526 <__swbuf_r+0x1a>
 800c58e:	4621      	mov	r1, r4
 800c590:	4628      	mov	r0, r5
 800c592:	f000 f80d 	bl	800c5b0 <__swsetup_r>
 800c596:	2800      	cmp	r0, #0
 800c598:	d0cc      	beq.n	800c534 <__swbuf_r+0x28>
 800c59a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c59e:	4638      	mov	r0, r7
 800c5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	08010458 	.word	0x08010458
 800c5a8:	08010478 	.word	0x08010478
 800c5ac:	08010438 	.word	0x08010438

0800c5b0 <__swsetup_r>:
 800c5b0:	4b32      	ldr	r3, [pc, #200]	; (800c67c <__swsetup_r+0xcc>)
 800c5b2:	b570      	push	{r4, r5, r6, lr}
 800c5b4:	681d      	ldr	r5, [r3, #0]
 800c5b6:	4606      	mov	r6, r0
 800c5b8:	460c      	mov	r4, r1
 800c5ba:	b125      	cbz	r5, 800c5c6 <__swsetup_r+0x16>
 800c5bc:	69ab      	ldr	r3, [r5, #24]
 800c5be:	b913      	cbnz	r3, 800c5c6 <__swsetup_r+0x16>
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f000 ff99 	bl	800d4f8 <__sinit>
 800c5c6:	4b2e      	ldr	r3, [pc, #184]	; (800c680 <__swsetup_r+0xd0>)
 800c5c8:	429c      	cmp	r4, r3
 800c5ca:	d10f      	bne.n	800c5ec <__swsetup_r+0x3c>
 800c5cc:	686c      	ldr	r4, [r5, #4]
 800c5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	0715      	lsls	r5, r2, #28
 800c5d6:	d42c      	bmi.n	800c632 <__swsetup_r+0x82>
 800c5d8:	06d0      	lsls	r0, r2, #27
 800c5da:	d411      	bmi.n	800c600 <__swsetup_r+0x50>
 800c5dc:	2209      	movs	r2, #9
 800c5de:	6032      	str	r2, [r6, #0]
 800c5e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5e4:	81a3      	strh	r3, [r4, #12]
 800c5e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5ea:	e03e      	b.n	800c66a <__swsetup_r+0xba>
 800c5ec:	4b25      	ldr	r3, [pc, #148]	; (800c684 <__swsetup_r+0xd4>)
 800c5ee:	429c      	cmp	r4, r3
 800c5f0:	d101      	bne.n	800c5f6 <__swsetup_r+0x46>
 800c5f2:	68ac      	ldr	r4, [r5, #8]
 800c5f4:	e7eb      	b.n	800c5ce <__swsetup_r+0x1e>
 800c5f6:	4b24      	ldr	r3, [pc, #144]	; (800c688 <__swsetup_r+0xd8>)
 800c5f8:	429c      	cmp	r4, r3
 800c5fa:	bf08      	it	eq
 800c5fc:	68ec      	ldreq	r4, [r5, #12]
 800c5fe:	e7e6      	b.n	800c5ce <__swsetup_r+0x1e>
 800c600:	0751      	lsls	r1, r2, #29
 800c602:	d512      	bpl.n	800c62a <__swsetup_r+0x7a>
 800c604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c606:	b141      	cbz	r1, 800c61a <__swsetup_r+0x6a>
 800c608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c60c:	4299      	cmp	r1, r3
 800c60e:	d002      	beq.n	800c616 <__swsetup_r+0x66>
 800c610:	4630      	mov	r0, r6
 800c612:	f001 ffc1 	bl	800e598 <_free_r>
 800c616:	2300      	movs	r3, #0
 800c618:	6363      	str	r3, [r4, #52]	; 0x34
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c620:	81a3      	strh	r3, [r4, #12]
 800c622:	2300      	movs	r3, #0
 800c624:	6063      	str	r3, [r4, #4]
 800c626:	6923      	ldr	r3, [r4, #16]
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	f043 0308 	orr.w	r3, r3, #8
 800c630:	81a3      	strh	r3, [r4, #12]
 800c632:	6923      	ldr	r3, [r4, #16]
 800c634:	b94b      	cbnz	r3, 800c64a <__swsetup_r+0x9a>
 800c636:	89a3      	ldrh	r3, [r4, #12]
 800c638:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c63c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c640:	d003      	beq.n	800c64a <__swsetup_r+0x9a>
 800c642:	4621      	mov	r1, r4
 800c644:	4630      	mov	r0, r6
 800c646:	f001 fb3f 	bl	800dcc8 <__smakebuf_r>
 800c64a:	89a2      	ldrh	r2, [r4, #12]
 800c64c:	f012 0301 	ands.w	r3, r2, #1
 800c650:	d00c      	beq.n	800c66c <__swsetup_r+0xbc>
 800c652:	2300      	movs	r3, #0
 800c654:	60a3      	str	r3, [r4, #8]
 800c656:	6963      	ldr	r3, [r4, #20]
 800c658:	425b      	negs	r3, r3
 800c65a:	61a3      	str	r3, [r4, #24]
 800c65c:	6923      	ldr	r3, [r4, #16]
 800c65e:	b953      	cbnz	r3, 800c676 <__swsetup_r+0xc6>
 800c660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c664:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c668:	d1ba      	bne.n	800c5e0 <__swsetup_r+0x30>
 800c66a:	bd70      	pop	{r4, r5, r6, pc}
 800c66c:	0792      	lsls	r2, r2, #30
 800c66e:	bf58      	it	pl
 800c670:	6963      	ldrpl	r3, [r4, #20]
 800c672:	60a3      	str	r3, [r4, #8]
 800c674:	e7f2      	b.n	800c65c <__swsetup_r+0xac>
 800c676:	2000      	movs	r0, #0
 800c678:	e7f7      	b.n	800c66a <__swsetup_r+0xba>
 800c67a:	bf00      	nop
 800c67c:	2000000c 	.word	0x2000000c
 800c680:	08010458 	.word	0x08010458
 800c684:	08010478 	.word	0x08010478
 800c688:	08010438 	.word	0x08010438

0800c68c <quorem>:
 800c68c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	6903      	ldr	r3, [r0, #16]
 800c692:	690c      	ldr	r4, [r1, #16]
 800c694:	42a3      	cmp	r3, r4
 800c696:	4680      	mov	r8, r0
 800c698:	f2c0 8082 	blt.w	800c7a0 <quorem+0x114>
 800c69c:	3c01      	subs	r4, #1
 800c69e:	f101 0714 	add.w	r7, r1, #20
 800c6a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c6a6:	f100 0614 	add.w	r6, r0, #20
 800c6aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c6ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c6b2:	eb06 030c 	add.w	r3, r6, ip
 800c6b6:	3501      	adds	r5, #1
 800c6b8:	eb07 090c 	add.w	r9, r7, ip
 800c6bc:	9301      	str	r3, [sp, #4]
 800c6be:	fbb0 f5f5 	udiv	r5, r0, r5
 800c6c2:	b395      	cbz	r5, 800c72a <quorem+0x9e>
 800c6c4:	f04f 0a00 	mov.w	sl, #0
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	46b6      	mov	lr, r6
 800c6cc:	46d3      	mov	fp, sl
 800c6ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6d2:	b293      	uxth	r3, r2
 800c6d4:	fb05 a303 	mla	r3, r5, r3, sl
 800c6d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	ebab 0303 	sub.w	r3, fp, r3
 800c6e2:	0c12      	lsrs	r2, r2, #16
 800c6e4:	f8de b000 	ldr.w	fp, [lr]
 800c6e8:	fb05 a202 	mla	r2, r5, r2, sl
 800c6ec:	fa13 f38b 	uxtah	r3, r3, fp
 800c6f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c6f4:	fa1f fb82 	uxth.w	fp, r2
 800c6f8:	f8de 2000 	ldr.w	r2, [lr]
 800c6fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c700:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c704:	b29b      	uxth	r3, r3
 800c706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c70a:	4581      	cmp	r9, r0
 800c70c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c710:	f84e 3b04 	str.w	r3, [lr], #4
 800c714:	d2db      	bcs.n	800c6ce <quorem+0x42>
 800c716:	f856 300c 	ldr.w	r3, [r6, ip]
 800c71a:	b933      	cbnz	r3, 800c72a <quorem+0x9e>
 800c71c:	9b01      	ldr	r3, [sp, #4]
 800c71e:	3b04      	subs	r3, #4
 800c720:	429e      	cmp	r6, r3
 800c722:	461a      	mov	r2, r3
 800c724:	d330      	bcc.n	800c788 <quorem+0xfc>
 800c726:	f8c8 4010 	str.w	r4, [r8, #16]
 800c72a:	4640      	mov	r0, r8
 800c72c:	f001 fd7a 	bl	800e224 <__mcmp>
 800c730:	2800      	cmp	r0, #0
 800c732:	db25      	blt.n	800c780 <quorem+0xf4>
 800c734:	3501      	adds	r5, #1
 800c736:	4630      	mov	r0, r6
 800c738:	f04f 0c00 	mov.w	ip, #0
 800c73c:	f857 2b04 	ldr.w	r2, [r7], #4
 800c740:	f8d0 e000 	ldr.w	lr, [r0]
 800c744:	b293      	uxth	r3, r2
 800c746:	ebac 0303 	sub.w	r3, ip, r3
 800c74a:	0c12      	lsrs	r2, r2, #16
 800c74c:	fa13 f38e 	uxtah	r3, r3, lr
 800c750:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c754:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c758:	b29b      	uxth	r3, r3
 800c75a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c75e:	45b9      	cmp	r9, r7
 800c760:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c764:	f840 3b04 	str.w	r3, [r0], #4
 800c768:	d2e8      	bcs.n	800c73c <quorem+0xb0>
 800c76a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c76e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c772:	b92a      	cbnz	r2, 800c780 <quorem+0xf4>
 800c774:	3b04      	subs	r3, #4
 800c776:	429e      	cmp	r6, r3
 800c778:	461a      	mov	r2, r3
 800c77a:	d30b      	bcc.n	800c794 <quorem+0x108>
 800c77c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c780:	4628      	mov	r0, r5
 800c782:	b003      	add	sp, #12
 800c784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c788:	6812      	ldr	r2, [r2, #0]
 800c78a:	3b04      	subs	r3, #4
 800c78c:	2a00      	cmp	r2, #0
 800c78e:	d1ca      	bne.n	800c726 <quorem+0x9a>
 800c790:	3c01      	subs	r4, #1
 800c792:	e7c5      	b.n	800c720 <quorem+0x94>
 800c794:	6812      	ldr	r2, [r2, #0]
 800c796:	3b04      	subs	r3, #4
 800c798:	2a00      	cmp	r2, #0
 800c79a:	d1ef      	bne.n	800c77c <quorem+0xf0>
 800c79c:	3c01      	subs	r4, #1
 800c79e:	e7ea      	b.n	800c776 <quorem+0xea>
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	e7ee      	b.n	800c782 <quorem+0xf6>
 800c7a4:	0000      	movs	r0, r0
	...

0800c7a8 <_dtoa_r>:
 800c7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ac:	ec57 6b10 	vmov	r6, r7, d0
 800c7b0:	b097      	sub	sp, #92	; 0x5c
 800c7b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c7b4:	9106      	str	r1, [sp, #24]
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	920b      	str	r2, [sp, #44]	; 0x2c
 800c7ba:	9312      	str	r3, [sp, #72]	; 0x48
 800c7bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c7c0:	e9cd 6700 	strd	r6, r7, [sp]
 800c7c4:	b93d      	cbnz	r5, 800c7d6 <_dtoa_r+0x2e>
 800c7c6:	2010      	movs	r0, #16
 800c7c8:	f001 fabe 	bl	800dd48 <malloc>
 800c7cc:	6260      	str	r0, [r4, #36]	; 0x24
 800c7ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c7d2:	6005      	str	r5, [r0, #0]
 800c7d4:	60c5      	str	r5, [r0, #12]
 800c7d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7d8:	6819      	ldr	r1, [r3, #0]
 800c7da:	b151      	cbz	r1, 800c7f2 <_dtoa_r+0x4a>
 800c7dc:	685a      	ldr	r2, [r3, #4]
 800c7de:	604a      	str	r2, [r1, #4]
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	4093      	lsls	r3, r2
 800c7e4:	608b      	str	r3, [r1, #8]
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f001 fafc 	bl	800dde4 <_Bfree>
 800c7ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	601a      	str	r2, [r3, #0]
 800c7f2:	1e3b      	subs	r3, r7, #0
 800c7f4:	bfbb      	ittet	lt
 800c7f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c7fa:	9301      	strlt	r3, [sp, #4]
 800c7fc:	2300      	movge	r3, #0
 800c7fe:	2201      	movlt	r2, #1
 800c800:	bfac      	ite	ge
 800c802:	f8c8 3000 	strge.w	r3, [r8]
 800c806:	f8c8 2000 	strlt.w	r2, [r8]
 800c80a:	4baf      	ldr	r3, [pc, #700]	; (800cac8 <_dtoa_r+0x320>)
 800c80c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c810:	ea33 0308 	bics.w	r3, r3, r8
 800c814:	d114      	bne.n	800c840 <_dtoa_r+0x98>
 800c816:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c818:	f242 730f 	movw	r3, #9999	; 0x270f
 800c81c:	6013      	str	r3, [r2, #0]
 800c81e:	9b00      	ldr	r3, [sp, #0]
 800c820:	b923      	cbnz	r3, 800c82c <_dtoa_r+0x84>
 800c822:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c826:	2800      	cmp	r0, #0
 800c828:	f000 8542 	beq.w	800d2b0 <_dtoa_r+0xb08>
 800c82c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c82e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cadc <_dtoa_r+0x334>
 800c832:	2b00      	cmp	r3, #0
 800c834:	f000 8544 	beq.w	800d2c0 <_dtoa_r+0xb18>
 800c838:	f10b 0303 	add.w	r3, fp, #3
 800c83c:	f000 bd3e 	b.w	800d2bc <_dtoa_r+0xb14>
 800c840:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c844:	2200      	movs	r2, #0
 800c846:	2300      	movs	r3, #0
 800c848:	4630      	mov	r0, r6
 800c84a:	4639      	mov	r1, r7
 800c84c:	f7f4 f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c850:	4681      	mov	r9, r0
 800c852:	b168      	cbz	r0, 800c870 <_dtoa_r+0xc8>
 800c854:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c856:	2301      	movs	r3, #1
 800c858:	6013      	str	r3, [r2, #0]
 800c85a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 8524 	beq.w	800d2aa <_dtoa_r+0xb02>
 800c862:	4b9a      	ldr	r3, [pc, #616]	; (800cacc <_dtoa_r+0x324>)
 800c864:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c866:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	f000 bd28 	b.w	800d2c0 <_dtoa_r+0xb18>
 800c870:	aa14      	add	r2, sp, #80	; 0x50
 800c872:	a915      	add	r1, sp, #84	; 0x54
 800c874:	ec47 6b10 	vmov	d0, r6, r7
 800c878:	4620      	mov	r0, r4
 800c87a:	f001 fdc1 	bl	800e400 <__d2b>
 800c87e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c882:	9004      	str	r0, [sp, #16]
 800c884:	2d00      	cmp	r5, #0
 800c886:	d07c      	beq.n	800c982 <_dtoa_r+0x1da>
 800c888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c88c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c890:	46b2      	mov	sl, r6
 800c892:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c896:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c89a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c89e:	2200      	movs	r2, #0
 800c8a0:	4b8b      	ldr	r3, [pc, #556]	; (800cad0 <_dtoa_r+0x328>)
 800c8a2:	4650      	mov	r0, sl
 800c8a4:	4659      	mov	r1, fp
 800c8a6:	f7f3 fcef 	bl	8000288 <__aeabi_dsub>
 800c8aa:	a381      	add	r3, pc, #516	; (adr r3, 800cab0 <_dtoa_r+0x308>)
 800c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b0:	f7f3 fea2 	bl	80005f8 <__aeabi_dmul>
 800c8b4:	a380      	add	r3, pc, #512	; (adr r3, 800cab8 <_dtoa_r+0x310>)
 800c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ba:	f7f3 fce7 	bl	800028c <__adddf3>
 800c8be:	4606      	mov	r6, r0
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	460f      	mov	r7, r1
 800c8c4:	f7f3 fe2e 	bl	8000524 <__aeabi_i2d>
 800c8c8:	a37d      	add	r3, pc, #500	; (adr r3, 800cac0 <_dtoa_r+0x318>)
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	f7f3 fe93 	bl	80005f8 <__aeabi_dmul>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	4639      	mov	r1, r7
 800c8da:	f7f3 fcd7 	bl	800028c <__adddf3>
 800c8de:	4606      	mov	r6, r0
 800c8e0:	460f      	mov	r7, r1
 800c8e2:	f7f4 f939 	bl	8000b58 <__aeabi_d2iz>
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	4682      	mov	sl, r0
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	4639      	mov	r1, r7
 800c8f0:	f7f4 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800c8f4:	b148      	cbz	r0, 800c90a <_dtoa_r+0x162>
 800c8f6:	4650      	mov	r0, sl
 800c8f8:	f7f3 fe14 	bl	8000524 <__aeabi_i2d>
 800c8fc:	4632      	mov	r2, r6
 800c8fe:	463b      	mov	r3, r7
 800c900:	f7f4 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800c904:	b908      	cbnz	r0, 800c90a <_dtoa_r+0x162>
 800c906:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c90a:	f1ba 0f16 	cmp.w	sl, #22
 800c90e:	d859      	bhi.n	800c9c4 <_dtoa_r+0x21c>
 800c910:	4970      	ldr	r1, [pc, #448]	; (800cad4 <_dtoa_r+0x32c>)
 800c912:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c916:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c91a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c91e:	f7f4 f8fb 	bl	8000b18 <__aeabi_dcmpgt>
 800c922:	2800      	cmp	r0, #0
 800c924:	d050      	beq.n	800c9c8 <_dtoa_r+0x220>
 800c926:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c92a:	2300      	movs	r3, #0
 800c92c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c92e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c930:	1b5d      	subs	r5, r3, r5
 800c932:	f1b5 0801 	subs.w	r8, r5, #1
 800c936:	bf49      	itett	mi
 800c938:	f1c5 0301 	rsbmi	r3, r5, #1
 800c93c:	2300      	movpl	r3, #0
 800c93e:	9305      	strmi	r3, [sp, #20]
 800c940:	f04f 0800 	movmi.w	r8, #0
 800c944:	bf58      	it	pl
 800c946:	9305      	strpl	r3, [sp, #20]
 800c948:	f1ba 0f00 	cmp.w	sl, #0
 800c94c:	db3e      	blt.n	800c9cc <_dtoa_r+0x224>
 800c94e:	2300      	movs	r3, #0
 800c950:	44d0      	add	r8, sl
 800c952:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c956:	9307      	str	r3, [sp, #28]
 800c958:	9b06      	ldr	r3, [sp, #24]
 800c95a:	2b09      	cmp	r3, #9
 800c95c:	f200 8090 	bhi.w	800ca80 <_dtoa_r+0x2d8>
 800c960:	2b05      	cmp	r3, #5
 800c962:	bfc4      	itt	gt
 800c964:	3b04      	subgt	r3, #4
 800c966:	9306      	strgt	r3, [sp, #24]
 800c968:	9b06      	ldr	r3, [sp, #24]
 800c96a:	f1a3 0302 	sub.w	r3, r3, #2
 800c96e:	bfcc      	ite	gt
 800c970:	2500      	movgt	r5, #0
 800c972:	2501      	movle	r5, #1
 800c974:	2b03      	cmp	r3, #3
 800c976:	f200 808f 	bhi.w	800ca98 <_dtoa_r+0x2f0>
 800c97a:	e8df f003 	tbb	[pc, r3]
 800c97e:	7f7d      	.short	0x7f7d
 800c980:	7131      	.short	0x7131
 800c982:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c986:	441d      	add	r5, r3
 800c988:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c98c:	2820      	cmp	r0, #32
 800c98e:	dd13      	ble.n	800c9b8 <_dtoa_r+0x210>
 800c990:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c994:	9b00      	ldr	r3, [sp, #0]
 800c996:	fa08 f800 	lsl.w	r8, r8, r0
 800c99a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c99e:	fa23 f000 	lsr.w	r0, r3, r0
 800c9a2:	ea48 0000 	orr.w	r0, r8, r0
 800c9a6:	f7f3 fdad 	bl	8000504 <__aeabi_ui2d>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	4682      	mov	sl, r0
 800c9ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c9b2:	3d01      	subs	r5, #1
 800c9b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800c9b6:	e772      	b.n	800c89e <_dtoa_r+0xf6>
 800c9b8:	9b00      	ldr	r3, [sp, #0]
 800c9ba:	f1c0 0020 	rsb	r0, r0, #32
 800c9be:	fa03 f000 	lsl.w	r0, r3, r0
 800c9c2:	e7f0      	b.n	800c9a6 <_dtoa_r+0x1fe>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e7b1      	b.n	800c92c <_dtoa_r+0x184>
 800c9c8:	900f      	str	r0, [sp, #60]	; 0x3c
 800c9ca:	e7b0      	b.n	800c92e <_dtoa_r+0x186>
 800c9cc:	9b05      	ldr	r3, [sp, #20]
 800c9ce:	eba3 030a 	sub.w	r3, r3, sl
 800c9d2:	9305      	str	r3, [sp, #20]
 800c9d4:	f1ca 0300 	rsb	r3, sl, #0
 800c9d8:	9307      	str	r3, [sp, #28]
 800c9da:	2300      	movs	r3, #0
 800c9dc:	930e      	str	r3, [sp, #56]	; 0x38
 800c9de:	e7bb      	b.n	800c958 <_dtoa_r+0x1b0>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	930a      	str	r3, [sp, #40]	; 0x28
 800c9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	dd59      	ble.n	800ca9e <_dtoa_r+0x2f6>
 800c9ea:	9302      	str	r3, [sp, #8]
 800c9ec:	4699      	mov	r9, r3
 800c9ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	6072      	str	r2, [r6, #4]
 800c9f4:	2204      	movs	r2, #4
 800c9f6:	f102 0014 	add.w	r0, r2, #20
 800c9fa:	4298      	cmp	r0, r3
 800c9fc:	6871      	ldr	r1, [r6, #4]
 800c9fe:	d953      	bls.n	800caa8 <_dtoa_r+0x300>
 800ca00:	4620      	mov	r0, r4
 800ca02:	f001 f9bb 	bl	800dd7c <_Balloc>
 800ca06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca08:	6030      	str	r0, [r6, #0]
 800ca0a:	f1b9 0f0e 	cmp.w	r9, #14
 800ca0e:	f8d3 b000 	ldr.w	fp, [r3]
 800ca12:	f200 80e6 	bhi.w	800cbe2 <_dtoa_r+0x43a>
 800ca16:	2d00      	cmp	r5, #0
 800ca18:	f000 80e3 	beq.w	800cbe2 <_dtoa_r+0x43a>
 800ca1c:	ed9d 7b00 	vldr	d7, [sp]
 800ca20:	f1ba 0f00 	cmp.w	sl, #0
 800ca24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ca28:	dd74      	ble.n	800cb14 <_dtoa_r+0x36c>
 800ca2a:	4a2a      	ldr	r2, [pc, #168]	; (800cad4 <_dtoa_r+0x32c>)
 800ca2c:	f00a 030f 	and.w	r3, sl, #15
 800ca30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca34:	ed93 7b00 	vldr	d7, [r3]
 800ca38:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ca3c:	06f0      	lsls	r0, r6, #27
 800ca3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ca42:	d565      	bpl.n	800cb10 <_dtoa_r+0x368>
 800ca44:	4b24      	ldr	r3, [pc, #144]	; (800cad8 <_dtoa_r+0x330>)
 800ca46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ca4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca4e:	f7f3 fefd 	bl	800084c <__aeabi_ddiv>
 800ca52:	e9cd 0100 	strd	r0, r1, [sp]
 800ca56:	f006 060f 	and.w	r6, r6, #15
 800ca5a:	2503      	movs	r5, #3
 800ca5c:	4f1e      	ldr	r7, [pc, #120]	; (800cad8 <_dtoa_r+0x330>)
 800ca5e:	e04c      	b.n	800cafa <_dtoa_r+0x352>
 800ca60:	2301      	movs	r3, #1
 800ca62:	930a      	str	r3, [sp, #40]	; 0x28
 800ca64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca66:	4453      	add	r3, sl
 800ca68:	f103 0901 	add.w	r9, r3, #1
 800ca6c:	9302      	str	r3, [sp, #8]
 800ca6e:	464b      	mov	r3, r9
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	bfb8      	it	lt
 800ca74:	2301      	movlt	r3, #1
 800ca76:	e7ba      	b.n	800c9ee <_dtoa_r+0x246>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e7b2      	b.n	800c9e2 <_dtoa_r+0x23a>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	e7f0      	b.n	800ca62 <_dtoa_r+0x2ba>
 800ca80:	2501      	movs	r5, #1
 800ca82:	2300      	movs	r3, #0
 800ca84:	9306      	str	r3, [sp, #24]
 800ca86:	950a      	str	r5, [sp, #40]	; 0x28
 800ca88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ca8c:	9302      	str	r3, [sp, #8]
 800ca8e:	4699      	mov	r9, r3
 800ca90:	2200      	movs	r2, #0
 800ca92:	2312      	movs	r3, #18
 800ca94:	920b      	str	r2, [sp, #44]	; 0x2c
 800ca96:	e7aa      	b.n	800c9ee <_dtoa_r+0x246>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca9c:	e7f4      	b.n	800ca88 <_dtoa_r+0x2e0>
 800ca9e:	2301      	movs	r3, #1
 800caa0:	9302      	str	r3, [sp, #8]
 800caa2:	4699      	mov	r9, r3
 800caa4:	461a      	mov	r2, r3
 800caa6:	e7f5      	b.n	800ca94 <_dtoa_r+0x2ec>
 800caa8:	3101      	adds	r1, #1
 800caaa:	6071      	str	r1, [r6, #4]
 800caac:	0052      	lsls	r2, r2, #1
 800caae:	e7a2      	b.n	800c9f6 <_dtoa_r+0x24e>
 800cab0:	636f4361 	.word	0x636f4361
 800cab4:	3fd287a7 	.word	0x3fd287a7
 800cab8:	8b60c8b3 	.word	0x8b60c8b3
 800cabc:	3fc68a28 	.word	0x3fc68a28
 800cac0:	509f79fb 	.word	0x509f79fb
 800cac4:	3fd34413 	.word	0x3fd34413
 800cac8:	7ff00000 	.word	0x7ff00000
 800cacc:	080103ad 	.word	0x080103ad
 800cad0:	3ff80000 	.word	0x3ff80000
 800cad4:	080104d0 	.word	0x080104d0
 800cad8:	080104a8 	.word	0x080104a8
 800cadc:	08010431 	.word	0x08010431
 800cae0:	07f1      	lsls	r1, r6, #31
 800cae2:	d508      	bpl.n	800caf6 <_dtoa_r+0x34e>
 800cae4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caec:	f7f3 fd84 	bl	80005f8 <__aeabi_dmul>
 800caf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800caf4:	3501      	adds	r5, #1
 800caf6:	1076      	asrs	r6, r6, #1
 800caf8:	3708      	adds	r7, #8
 800cafa:	2e00      	cmp	r6, #0
 800cafc:	d1f0      	bne.n	800cae0 <_dtoa_r+0x338>
 800cafe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cb02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb06:	f7f3 fea1 	bl	800084c <__aeabi_ddiv>
 800cb0a:	e9cd 0100 	strd	r0, r1, [sp]
 800cb0e:	e01a      	b.n	800cb46 <_dtoa_r+0x39e>
 800cb10:	2502      	movs	r5, #2
 800cb12:	e7a3      	b.n	800ca5c <_dtoa_r+0x2b4>
 800cb14:	f000 80a0 	beq.w	800cc58 <_dtoa_r+0x4b0>
 800cb18:	f1ca 0600 	rsb	r6, sl, #0
 800cb1c:	4b9f      	ldr	r3, [pc, #636]	; (800cd9c <_dtoa_r+0x5f4>)
 800cb1e:	4fa0      	ldr	r7, [pc, #640]	; (800cda0 <_dtoa_r+0x5f8>)
 800cb20:	f006 020f 	and.w	r2, r6, #15
 800cb24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb30:	f7f3 fd62 	bl	80005f8 <__aeabi_dmul>
 800cb34:	e9cd 0100 	strd	r0, r1, [sp]
 800cb38:	1136      	asrs	r6, r6, #4
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	2502      	movs	r5, #2
 800cb3e:	2e00      	cmp	r6, #0
 800cb40:	d17f      	bne.n	800cc42 <_dtoa_r+0x49a>
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1e1      	bne.n	800cb0a <_dtoa_r+0x362>
 800cb46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	f000 8087 	beq.w	800cc5c <_dtoa_r+0x4b4>
 800cb4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb52:	2200      	movs	r2, #0
 800cb54:	4b93      	ldr	r3, [pc, #588]	; (800cda4 <_dtoa_r+0x5fc>)
 800cb56:	4630      	mov	r0, r6
 800cb58:	4639      	mov	r1, r7
 800cb5a:	f7f3 ffbf 	bl	8000adc <__aeabi_dcmplt>
 800cb5e:	2800      	cmp	r0, #0
 800cb60:	d07c      	beq.n	800cc5c <_dtoa_r+0x4b4>
 800cb62:	f1b9 0f00 	cmp.w	r9, #0
 800cb66:	d079      	beq.n	800cc5c <_dtoa_r+0x4b4>
 800cb68:	9b02      	ldr	r3, [sp, #8]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	dd35      	ble.n	800cbda <_dtoa_r+0x432>
 800cb6e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cb72:	9308      	str	r3, [sp, #32]
 800cb74:	4639      	mov	r1, r7
 800cb76:	2200      	movs	r2, #0
 800cb78:	4b8b      	ldr	r3, [pc, #556]	; (800cda8 <_dtoa_r+0x600>)
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f7f3 fd3c 	bl	80005f8 <__aeabi_dmul>
 800cb80:	e9cd 0100 	strd	r0, r1, [sp]
 800cb84:	9f02      	ldr	r7, [sp, #8]
 800cb86:	3501      	adds	r5, #1
 800cb88:	4628      	mov	r0, r5
 800cb8a:	f7f3 fccb 	bl	8000524 <__aeabi_i2d>
 800cb8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb92:	f7f3 fd31 	bl	80005f8 <__aeabi_dmul>
 800cb96:	2200      	movs	r2, #0
 800cb98:	4b84      	ldr	r3, [pc, #528]	; (800cdac <_dtoa_r+0x604>)
 800cb9a:	f7f3 fb77 	bl	800028c <__adddf3>
 800cb9e:	4605      	mov	r5, r0
 800cba0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cba4:	2f00      	cmp	r7, #0
 800cba6:	d15d      	bne.n	800cc64 <_dtoa_r+0x4bc>
 800cba8:	2200      	movs	r2, #0
 800cbaa:	4b81      	ldr	r3, [pc, #516]	; (800cdb0 <_dtoa_r+0x608>)
 800cbac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbb0:	f7f3 fb6a 	bl	8000288 <__aeabi_dsub>
 800cbb4:	462a      	mov	r2, r5
 800cbb6:	4633      	mov	r3, r6
 800cbb8:	e9cd 0100 	strd	r0, r1, [sp]
 800cbbc:	f7f3 ffac 	bl	8000b18 <__aeabi_dcmpgt>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	f040 8288 	bne.w	800d0d6 <_dtoa_r+0x92e>
 800cbc6:	462a      	mov	r2, r5
 800cbc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cbcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbd0:	f7f3 ff84 	bl	8000adc <__aeabi_dcmplt>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	f040 827c 	bne.w	800d0d2 <_dtoa_r+0x92a>
 800cbda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cbde:	e9cd 2300 	strd	r2, r3, [sp]
 800cbe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f2c0 8150 	blt.w	800ce8a <_dtoa_r+0x6e2>
 800cbea:	f1ba 0f0e 	cmp.w	sl, #14
 800cbee:	f300 814c 	bgt.w	800ce8a <_dtoa_r+0x6e2>
 800cbf2:	4b6a      	ldr	r3, [pc, #424]	; (800cd9c <_dtoa_r+0x5f4>)
 800cbf4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cbf8:	ed93 7b00 	vldr	d7, [r3]
 800cbfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc04:	f280 80d8 	bge.w	800cdb8 <_dtoa_r+0x610>
 800cc08:	f1b9 0f00 	cmp.w	r9, #0
 800cc0c:	f300 80d4 	bgt.w	800cdb8 <_dtoa_r+0x610>
 800cc10:	f040 825e 	bne.w	800d0d0 <_dtoa_r+0x928>
 800cc14:	2200      	movs	r2, #0
 800cc16:	4b66      	ldr	r3, [pc, #408]	; (800cdb0 <_dtoa_r+0x608>)
 800cc18:	ec51 0b17 	vmov	r0, r1, d7
 800cc1c:	f7f3 fcec 	bl	80005f8 <__aeabi_dmul>
 800cc20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc24:	f7f3 ff6e 	bl	8000b04 <__aeabi_dcmpge>
 800cc28:	464f      	mov	r7, r9
 800cc2a:	464e      	mov	r6, r9
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	f040 8234 	bne.w	800d09a <_dtoa_r+0x8f2>
 800cc32:	2331      	movs	r3, #49	; 0x31
 800cc34:	f10b 0501 	add.w	r5, fp, #1
 800cc38:	f88b 3000 	strb.w	r3, [fp]
 800cc3c:	f10a 0a01 	add.w	sl, sl, #1
 800cc40:	e22f      	b.n	800d0a2 <_dtoa_r+0x8fa>
 800cc42:	07f2      	lsls	r2, r6, #31
 800cc44:	d505      	bpl.n	800cc52 <_dtoa_r+0x4aa>
 800cc46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc4a:	f7f3 fcd5 	bl	80005f8 <__aeabi_dmul>
 800cc4e:	3501      	adds	r5, #1
 800cc50:	2301      	movs	r3, #1
 800cc52:	1076      	asrs	r6, r6, #1
 800cc54:	3708      	adds	r7, #8
 800cc56:	e772      	b.n	800cb3e <_dtoa_r+0x396>
 800cc58:	2502      	movs	r5, #2
 800cc5a:	e774      	b.n	800cb46 <_dtoa_r+0x39e>
 800cc5c:	f8cd a020 	str.w	sl, [sp, #32]
 800cc60:	464f      	mov	r7, r9
 800cc62:	e791      	b.n	800cb88 <_dtoa_r+0x3e0>
 800cc64:	4b4d      	ldr	r3, [pc, #308]	; (800cd9c <_dtoa_r+0x5f4>)
 800cc66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cc6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d047      	beq.n	800cd04 <_dtoa_r+0x55c>
 800cc74:	4602      	mov	r2, r0
 800cc76:	460b      	mov	r3, r1
 800cc78:	2000      	movs	r0, #0
 800cc7a:	494e      	ldr	r1, [pc, #312]	; (800cdb4 <_dtoa_r+0x60c>)
 800cc7c:	f7f3 fde6 	bl	800084c <__aeabi_ddiv>
 800cc80:	462a      	mov	r2, r5
 800cc82:	4633      	mov	r3, r6
 800cc84:	f7f3 fb00 	bl	8000288 <__aeabi_dsub>
 800cc88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cc8c:	465d      	mov	r5, fp
 800cc8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc92:	f7f3 ff61 	bl	8000b58 <__aeabi_d2iz>
 800cc96:	4606      	mov	r6, r0
 800cc98:	f7f3 fc44 	bl	8000524 <__aeabi_i2d>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cca4:	f7f3 faf0 	bl	8000288 <__aeabi_dsub>
 800cca8:	3630      	adds	r6, #48	; 0x30
 800ccaa:	f805 6b01 	strb.w	r6, [r5], #1
 800ccae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ccb2:	e9cd 0100 	strd	r0, r1, [sp]
 800ccb6:	f7f3 ff11 	bl	8000adc <__aeabi_dcmplt>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d163      	bne.n	800cd86 <_dtoa_r+0x5de>
 800ccbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccc2:	2000      	movs	r0, #0
 800ccc4:	4937      	ldr	r1, [pc, #220]	; (800cda4 <_dtoa_r+0x5fc>)
 800ccc6:	f7f3 fadf 	bl	8000288 <__aeabi_dsub>
 800ccca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ccce:	f7f3 ff05 	bl	8000adc <__aeabi_dcmplt>
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	f040 80b7 	bne.w	800ce46 <_dtoa_r+0x69e>
 800ccd8:	eba5 030b 	sub.w	r3, r5, fp
 800ccdc:	429f      	cmp	r7, r3
 800ccde:	f77f af7c 	ble.w	800cbda <_dtoa_r+0x432>
 800cce2:	2200      	movs	r2, #0
 800cce4:	4b30      	ldr	r3, [pc, #192]	; (800cda8 <_dtoa_r+0x600>)
 800cce6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ccea:	f7f3 fc85 	bl	80005f8 <__aeabi_dmul>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ccf4:	4b2c      	ldr	r3, [pc, #176]	; (800cda8 <_dtoa_r+0x600>)
 800ccf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccfa:	f7f3 fc7d 	bl	80005f8 <__aeabi_dmul>
 800ccfe:	e9cd 0100 	strd	r0, r1, [sp]
 800cd02:	e7c4      	b.n	800cc8e <_dtoa_r+0x4e6>
 800cd04:	462a      	mov	r2, r5
 800cd06:	4633      	mov	r3, r6
 800cd08:	f7f3 fc76 	bl	80005f8 <__aeabi_dmul>
 800cd0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cd10:	eb0b 0507 	add.w	r5, fp, r7
 800cd14:	465e      	mov	r6, fp
 800cd16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd1a:	f7f3 ff1d 	bl	8000b58 <__aeabi_d2iz>
 800cd1e:	4607      	mov	r7, r0
 800cd20:	f7f3 fc00 	bl	8000524 <__aeabi_i2d>
 800cd24:	3730      	adds	r7, #48	; 0x30
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd2e:	f7f3 faab 	bl	8000288 <__aeabi_dsub>
 800cd32:	f806 7b01 	strb.w	r7, [r6], #1
 800cd36:	42ae      	cmp	r6, r5
 800cd38:	e9cd 0100 	strd	r0, r1, [sp]
 800cd3c:	f04f 0200 	mov.w	r2, #0
 800cd40:	d126      	bne.n	800cd90 <_dtoa_r+0x5e8>
 800cd42:	4b1c      	ldr	r3, [pc, #112]	; (800cdb4 <_dtoa_r+0x60c>)
 800cd44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cd48:	f7f3 faa0 	bl	800028c <__adddf3>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	460b      	mov	r3, r1
 800cd50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd54:	f7f3 fee0 	bl	8000b18 <__aeabi_dcmpgt>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d174      	bne.n	800ce46 <_dtoa_r+0x69e>
 800cd5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cd60:	2000      	movs	r0, #0
 800cd62:	4914      	ldr	r1, [pc, #80]	; (800cdb4 <_dtoa_r+0x60c>)
 800cd64:	f7f3 fa90 	bl	8000288 <__aeabi_dsub>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd70:	f7f3 feb4 	bl	8000adc <__aeabi_dcmplt>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	f43f af30 	beq.w	800cbda <_dtoa_r+0x432>
 800cd7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd7e:	2b30      	cmp	r3, #48	; 0x30
 800cd80:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800cd84:	d002      	beq.n	800cd8c <_dtoa_r+0x5e4>
 800cd86:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cd8a:	e04a      	b.n	800ce22 <_dtoa_r+0x67a>
 800cd8c:	4615      	mov	r5, r2
 800cd8e:	e7f4      	b.n	800cd7a <_dtoa_r+0x5d2>
 800cd90:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <_dtoa_r+0x600>)
 800cd92:	f7f3 fc31 	bl	80005f8 <__aeabi_dmul>
 800cd96:	e9cd 0100 	strd	r0, r1, [sp]
 800cd9a:	e7bc      	b.n	800cd16 <_dtoa_r+0x56e>
 800cd9c:	080104d0 	.word	0x080104d0
 800cda0:	080104a8 	.word	0x080104a8
 800cda4:	3ff00000 	.word	0x3ff00000
 800cda8:	40240000 	.word	0x40240000
 800cdac:	401c0000 	.word	0x401c0000
 800cdb0:	40140000 	.word	0x40140000
 800cdb4:	3fe00000 	.word	0x3fe00000
 800cdb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cdbc:	465d      	mov	r5, fp
 800cdbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	f7f3 fd41 	bl	800084c <__aeabi_ddiv>
 800cdca:	f7f3 fec5 	bl	8000b58 <__aeabi_d2iz>
 800cdce:	4680      	mov	r8, r0
 800cdd0:	f7f3 fba8 	bl	8000524 <__aeabi_i2d>
 800cdd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdd8:	f7f3 fc0e 	bl	80005f8 <__aeabi_dmul>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	4630      	mov	r0, r6
 800cde2:	4639      	mov	r1, r7
 800cde4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cde8:	f7f3 fa4e 	bl	8000288 <__aeabi_dsub>
 800cdec:	f805 6b01 	strb.w	r6, [r5], #1
 800cdf0:	eba5 060b 	sub.w	r6, r5, fp
 800cdf4:	45b1      	cmp	r9, r6
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	d139      	bne.n	800ce70 <_dtoa_r+0x6c8>
 800cdfc:	f7f3 fa46 	bl	800028c <__adddf3>
 800ce00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce04:	4606      	mov	r6, r0
 800ce06:	460f      	mov	r7, r1
 800ce08:	f7f3 fe86 	bl	8000b18 <__aeabi_dcmpgt>
 800ce0c:	b9c8      	cbnz	r0, 800ce42 <_dtoa_r+0x69a>
 800ce0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce12:	4630      	mov	r0, r6
 800ce14:	4639      	mov	r1, r7
 800ce16:	f7f3 fe57 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce1a:	b110      	cbz	r0, 800ce22 <_dtoa_r+0x67a>
 800ce1c:	f018 0f01 	tst.w	r8, #1
 800ce20:	d10f      	bne.n	800ce42 <_dtoa_r+0x69a>
 800ce22:	9904      	ldr	r1, [sp, #16]
 800ce24:	4620      	mov	r0, r4
 800ce26:	f000 ffdd 	bl	800dde4 <_Bfree>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce2e:	702b      	strb	r3, [r5, #0]
 800ce30:	f10a 0301 	add.w	r3, sl, #1
 800ce34:	6013      	str	r3, [r2, #0]
 800ce36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 8241 	beq.w	800d2c0 <_dtoa_r+0xb18>
 800ce3e:	601d      	str	r5, [r3, #0]
 800ce40:	e23e      	b.n	800d2c0 <_dtoa_r+0xb18>
 800ce42:	f8cd a020 	str.w	sl, [sp, #32]
 800ce46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce4a:	2a39      	cmp	r2, #57	; 0x39
 800ce4c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800ce50:	d108      	bne.n	800ce64 <_dtoa_r+0x6bc>
 800ce52:	459b      	cmp	fp, r3
 800ce54:	d10a      	bne.n	800ce6c <_dtoa_r+0x6c4>
 800ce56:	9b08      	ldr	r3, [sp, #32]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	9308      	str	r3, [sp, #32]
 800ce5c:	2330      	movs	r3, #48	; 0x30
 800ce5e:	f88b 3000 	strb.w	r3, [fp]
 800ce62:	465b      	mov	r3, fp
 800ce64:	781a      	ldrb	r2, [r3, #0]
 800ce66:	3201      	adds	r2, #1
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	e78c      	b.n	800cd86 <_dtoa_r+0x5de>
 800ce6c:	461d      	mov	r5, r3
 800ce6e:	e7ea      	b.n	800ce46 <_dtoa_r+0x69e>
 800ce70:	2200      	movs	r2, #0
 800ce72:	4b9b      	ldr	r3, [pc, #620]	; (800d0e0 <_dtoa_r+0x938>)
 800ce74:	f7f3 fbc0 	bl	80005f8 <__aeabi_dmul>
 800ce78:	2200      	movs	r2, #0
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	4606      	mov	r6, r0
 800ce7e:	460f      	mov	r7, r1
 800ce80:	f7f3 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	d09a      	beq.n	800cdbe <_dtoa_r+0x616>
 800ce88:	e7cb      	b.n	800ce22 <_dtoa_r+0x67a>
 800ce8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce8c:	2a00      	cmp	r2, #0
 800ce8e:	f000 808b 	beq.w	800cfa8 <_dtoa_r+0x800>
 800ce92:	9a06      	ldr	r2, [sp, #24]
 800ce94:	2a01      	cmp	r2, #1
 800ce96:	dc6e      	bgt.n	800cf76 <_dtoa_r+0x7ce>
 800ce98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce9a:	2a00      	cmp	r2, #0
 800ce9c:	d067      	beq.n	800cf6e <_dtoa_r+0x7c6>
 800ce9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cea2:	9f07      	ldr	r7, [sp, #28]
 800cea4:	9d05      	ldr	r5, [sp, #20]
 800cea6:	9a05      	ldr	r2, [sp, #20]
 800cea8:	2101      	movs	r1, #1
 800ceaa:	441a      	add	r2, r3
 800ceac:	4620      	mov	r0, r4
 800ceae:	9205      	str	r2, [sp, #20]
 800ceb0:	4498      	add	r8, r3
 800ceb2:	f001 f875 	bl	800dfa0 <__i2b>
 800ceb6:	4606      	mov	r6, r0
 800ceb8:	2d00      	cmp	r5, #0
 800ceba:	dd0c      	ble.n	800ced6 <_dtoa_r+0x72e>
 800cebc:	f1b8 0f00 	cmp.w	r8, #0
 800cec0:	dd09      	ble.n	800ced6 <_dtoa_r+0x72e>
 800cec2:	4545      	cmp	r5, r8
 800cec4:	9a05      	ldr	r2, [sp, #20]
 800cec6:	462b      	mov	r3, r5
 800cec8:	bfa8      	it	ge
 800ceca:	4643      	movge	r3, r8
 800cecc:	1ad2      	subs	r2, r2, r3
 800cece:	9205      	str	r2, [sp, #20]
 800ced0:	1aed      	subs	r5, r5, r3
 800ced2:	eba8 0803 	sub.w	r8, r8, r3
 800ced6:	9b07      	ldr	r3, [sp, #28]
 800ced8:	b1eb      	cbz	r3, 800cf16 <_dtoa_r+0x76e>
 800ceda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d067      	beq.n	800cfb0 <_dtoa_r+0x808>
 800cee0:	b18f      	cbz	r7, 800cf06 <_dtoa_r+0x75e>
 800cee2:	4631      	mov	r1, r6
 800cee4:	463a      	mov	r2, r7
 800cee6:	4620      	mov	r0, r4
 800cee8:	f001 f8fa 	bl	800e0e0 <__pow5mult>
 800ceec:	9a04      	ldr	r2, [sp, #16]
 800ceee:	4601      	mov	r1, r0
 800cef0:	4606      	mov	r6, r0
 800cef2:	4620      	mov	r0, r4
 800cef4:	f001 f85d 	bl	800dfb2 <__multiply>
 800cef8:	9904      	ldr	r1, [sp, #16]
 800cefa:	9008      	str	r0, [sp, #32]
 800cefc:	4620      	mov	r0, r4
 800cefe:	f000 ff71 	bl	800dde4 <_Bfree>
 800cf02:	9b08      	ldr	r3, [sp, #32]
 800cf04:	9304      	str	r3, [sp, #16]
 800cf06:	9b07      	ldr	r3, [sp, #28]
 800cf08:	1bda      	subs	r2, r3, r7
 800cf0a:	d004      	beq.n	800cf16 <_dtoa_r+0x76e>
 800cf0c:	9904      	ldr	r1, [sp, #16]
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f001 f8e6 	bl	800e0e0 <__pow5mult>
 800cf14:	9004      	str	r0, [sp, #16]
 800cf16:	2101      	movs	r1, #1
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f001 f841 	bl	800dfa0 <__i2b>
 800cf1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf20:	4607      	mov	r7, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	f000 81d0 	beq.w	800d2c8 <_dtoa_r+0xb20>
 800cf28:	461a      	mov	r2, r3
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f001 f8d7 	bl	800e0e0 <__pow5mult>
 800cf32:	9b06      	ldr	r3, [sp, #24]
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	4607      	mov	r7, r0
 800cf38:	dc40      	bgt.n	800cfbc <_dtoa_r+0x814>
 800cf3a:	9b00      	ldr	r3, [sp, #0]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d139      	bne.n	800cfb4 <_dtoa_r+0x80c>
 800cf40:	9b01      	ldr	r3, [sp, #4]
 800cf42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d136      	bne.n	800cfb8 <_dtoa_r+0x810>
 800cf4a:	9b01      	ldr	r3, [sp, #4]
 800cf4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf50:	0d1b      	lsrs	r3, r3, #20
 800cf52:	051b      	lsls	r3, r3, #20
 800cf54:	b12b      	cbz	r3, 800cf62 <_dtoa_r+0x7ba>
 800cf56:	9b05      	ldr	r3, [sp, #20]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	9305      	str	r3, [sp, #20]
 800cf5c:	f108 0801 	add.w	r8, r8, #1
 800cf60:	2301      	movs	r3, #1
 800cf62:	9307      	str	r3, [sp, #28]
 800cf64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d12a      	bne.n	800cfc0 <_dtoa_r+0x818>
 800cf6a:	2001      	movs	r0, #1
 800cf6c:	e030      	b.n	800cfd0 <_dtoa_r+0x828>
 800cf6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf74:	e795      	b.n	800cea2 <_dtoa_r+0x6fa>
 800cf76:	9b07      	ldr	r3, [sp, #28]
 800cf78:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800cf7c:	42bb      	cmp	r3, r7
 800cf7e:	bfbf      	itttt	lt
 800cf80:	9b07      	ldrlt	r3, [sp, #28]
 800cf82:	9707      	strlt	r7, [sp, #28]
 800cf84:	1afa      	sublt	r2, r7, r3
 800cf86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cf88:	bfbb      	ittet	lt
 800cf8a:	189b      	addlt	r3, r3, r2
 800cf8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cf8e:	1bdf      	subge	r7, r3, r7
 800cf90:	2700      	movlt	r7, #0
 800cf92:	f1b9 0f00 	cmp.w	r9, #0
 800cf96:	bfb5      	itete	lt
 800cf98:	9b05      	ldrlt	r3, [sp, #20]
 800cf9a:	9d05      	ldrge	r5, [sp, #20]
 800cf9c:	eba3 0509 	sublt.w	r5, r3, r9
 800cfa0:	464b      	movge	r3, r9
 800cfa2:	bfb8      	it	lt
 800cfa4:	2300      	movlt	r3, #0
 800cfa6:	e77e      	b.n	800cea6 <_dtoa_r+0x6fe>
 800cfa8:	9f07      	ldr	r7, [sp, #28]
 800cfaa:	9d05      	ldr	r5, [sp, #20]
 800cfac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cfae:	e783      	b.n	800ceb8 <_dtoa_r+0x710>
 800cfb0:	9a07      	ldr	r2, [sp, #28]
 800cfb2:	e7ab      	b.n	800cf0c <_dtoa_r+0x764>
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	e7d4      	b.n	800cf62 <_dtoa_r+0x7ba>
 800cfb8:	9b00      	ldr	r3, [sp, #0]
 800cfba:	e7d2      	b.n	800cf62 <_dtoa_r+0x7ba>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	9307      	str	r3, [sp, #28]
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cfc6:	6918      	ldr	r0, [r3, #16]
 800cfc8:	f000 ff9c 	bl	800df04 <__hi0bits>
 800cfcc:	f1c0 0020 	rsb	r0, r0, #32
 800cfd0:	4440      	add	r0, r8
 800cfd2:	f010 001f 	ands.w	r0, r0, #31
 800cfd6:	d047      	beq.n	800d068 <_dtoa_r+0x8c0>
 800cfd8:	f1c0 0320 	rsb	r3, r0, #32
 800cfdc:	2b04      	cmp	r3, #4
 800cfde:	dd3b      	ble.n	800d058 <_dtoa_r+0x8b0>
 800cfe0:	9b05      	ldr	r3, [sp, #20]
 800cfe2:	f1c0 001c 	rsb	r0, r0, #28
 800cfe6:	4403      	add	r3, r0
 800cfe8:	9305      	str	r3, [sp, #20]
 800cfea:	4405      	add	r5, r0
 800cfec:	4480      	add	r8, r0
 800cfee:	9b05      	ldr	r3, [sp, #20]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	dd05      	ble.n	800d000 <_dtoa_r+0x858>
 800cff4:	461a      	mov	r2, r3
 800cff6:	9904      	ldr	r1, [sp, #16]
 800cff8:	4620      	mov	r0, r4
 800cffa:	f001 f8bf 	bl	800e17c <__lshift>
 800cffe:	9004      	str	r0, [sp, #16]
 800d000:	f1b8 0f00 	cmp.w	r8, #0
 800d004:	dd05      	ble.n	800d012 <_dtoa_r+0x86a>
 800d006:	4639      	mov	r1, r7
 800d008:	4642      	mov	r2, r8
 800d00a:	4620      	mov	r0, r4
 800d00c:	f001 f8b6 	bl	800e17c <__lshift>
 800d010:	4607      	mov	r7, r0
 800d012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d014:	b353      	cbz	r3, 800d06c <_dtoa_r+0x8c4>
 800d016:	4639      	mov	r1, r7
 800d018:	9804      	ldr	r0, [sp, #16]
 800d01a:	f001 f903 	bl	800e224 <__mcmp>
 800d01e:	2800      	cmp	r0, #0
 800d020:	da24      	bge.n	800d06c <_dtoa_r+0x8c4>
 800d022:	2300      	movs	r3, #0
 800d024:	220a      	movs	r2, #10
 800d026:	9904      	ldr	r1, [sp, #16]
 800d028:	4620      	mov	r0, r4
 800d02a:	f000 fef2 	bl	800de12 <__multadd>
 800d02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d030:	9004      	str	r0, [sp, #16]
 800d032:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d036:	2b00      	cmp	r3, #0
 800d038:	f000 814d 	beq.w	800d2d6 <_dtoa_r+0xb2e>
 800d03c:	2300      	movs	r3, #0
 800d03e:	4631      	mov	r1, r6
 800d040:	220a      	movs	r2, #10
 800d042:	4620      	mov	r0, r4
 800d044:	f000 fee5 	bl	800de12 <__multadd>
 800d048:	9b02      	ldr	r3, [sp, #8]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	4606      	mov	r6, r0
 800d04e:	dc4f      	bgt.n	800d0f0 <_dtoa_r+0x948>
 800d050:	9b06      	ldr	r3, [sp, #24]
 800d052:	2b02      	cmp	r3, #2
 800d054:	dd4c      	ble.n	800d0f0 <_dtoa_r+0x948>
 800d056:	e011      	b.n	800d07c <_dtoa_r+0x8d4>
 800d058:	d0c9      	beq.n	800cfee <_dtoa_r+0x846>
 800d05a:	9a05      	ldr	r2, [sp, #20]
 800d05c:	331c      	adds	r3, #28
 800d05e:	441a      	add	r2, r3
 800d060:	9205      	str	r2, [sp, #20]
 800d062:	441d      	add	r5, r3
 800d064:	4498      	add	r8, r3
 800d066:	e7c2      	b.n	800cfee <_dtoa_r+0x846>
 800d068:	4603      	mov	r3, r0
 800d06a:	e7f6      	b.n	800d05a <_dtoa_r+0x8b2>
 800d06c:	f1b9 0f00 	cmp.w	r9, #0
 800d070:	dc38      	bgt.n	800d0e4 <_dtoa_r+0x93c>
 800d072:	9b06      	ldr	r3, [sp, #24]
 800d074:	2b02      	cmp	r3, #2
 800d076:	dd35      	ble.n	800d0e4 <_dtoa_r+0x93c>
 800d078:	f8cd 9008 	str.w	r9, [sp, #8]
 800d07c:	9b02      	ldr	r3, [sp, #8]
 800d07e:	b963      	cbnz	r3, 800d09a <_dtoa_r+0x8f2>
 800d080:	4639      	mov	r1, r7
 800d082:	2205      	movs	r2, #5
 800d084:	4620      	mov	r0, r4
 800d086:	f000 fec4 	bl	800de12 <__multadd>
 800d08a:	4601      	mov	r1, r0
 800d08c:	4607      	mov	r7, r0
 800d08e:	9804      	ldr	r0, [sp, #16]
 800d090:	f001 f8c8 	bl	800e224 <__mcmp>
 800d094:	2800      	cmp	r0, #0
 800d096:	f73f adcc 	bgt.w	800cc32 <_dtoa_r+0x48a>
 800d09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d09c:	465d      	mov	r5, fp
 800d09e:	ea6f 0a03 	mvn.w	sl, r3
 800d0a2:	f04f 0900 	mov.w	r9, #0
 800d0a6:	4639      	mov	r1, r7
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	f000 fe9b 	bl	800dde4 <_Bfree>
 800d0ae:	2e00      	cmp	r6, #0
 800d0b0:	f43f aeb7 	beq.w	800ce22 <_dtoa_r+0x67a>
 800d0b4:	f1b9 0f00 	cmp.w	r9, #0
 800d0b8:	d005      	beq.n	800d0c6 <_dtoa_r+0x91e>
 800d0ba:	45b1      	cmp	r9, r6
 800d0bc:	d003      	beq.n	800d0c6 <_dtoa_r+0x91e>
 800d0be:	4649      	mov	r1, r9
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	f000 fe8f 	bl	800dde4 <_Bfree>
 800d0c6:	4631      	mov	r1, r6
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f000 fe8b 	bl	800dde4 <_Bfree>
 800d0ce:	e6a8      	b.n	800ce22 <_dtoa_r+0x67a>
 800d0d0:	2700      	movs	r7, #0
 800d0d2:	463e      	mov	r6, r7
 800d0d4:	e7e1      	b.n	800d09a <_dtoa_r+0x8f2>
 800d0d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d0da:	463e      	mov	r6, r7
 800d0dc:	e5a9      	b.n	800cc32 <_dtoa_r+0x48a>
 800d0de:	bf00      	nop
 800d0e0:	40240000 	.word	0x40240000
 800d0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f000 80fa 	beq.w	800d2e4 <_dtoa_r+0xb3c>
 800d0f0:	2d00      	cmp	r5, #0
 800d0f2:	dd05      	ble.n	800d100 <_dtoa_r+0x958>
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	462a      	mov	r2, r5
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f001 f83f 	bl	800e17c <__lshift>
 800d0fe:	4606      	mov	r6, r0
 800d100:	9b07      	ldr	r3, [sp, #28]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d04c      	beq.n	800d1a0 <_dtoa_r+0x9f8>
 800d106:	6871      	ldr	r1, [r6, #4]
 800d108:	4620      	mov	r0, r4
 800d10a:	f000 fe37 	bl	800dd7c <_Balloc>
 800d10e:	6932      	ldr	r2, [r6, #16]
 800d110:	3202      	adds	r2, #2
 800d112:	4605      	mov	r5, r0
 800d114:	0092      	lsls	r2, r2, #2
 800d116:	f106 010c 	add.w	r1, r6, #12
 800d11a:	300c      	adds	r0, #12
 800d11c:	f7fd fc54 	bl	800a9c8 <memcpy>
 800d120:	2201      	movs	r2, #1
 800d122:	4629      	mov	r1, r5
 800d124:	4620      	mov	r0, r4
 800d126:	f001 f829 	bl	800e17c <__lshift>
 800d12a:	9b00      	ldr	r3, [sp, #0]
 800d12c:	f8cd b014 	str.w	fp, [sp, #20]
 800d130:	f003 0301 	and.w	r3, r3, #1
 800d134:	46b1      	mov	r9, r6
 800d136:	9307      	str	r3, [sp, #28]
 800d138:	4606      	mov	r6, r0
 800d13a:	4639      	mov	r1, r7
 800d13c:	9804      	ldr	r0, [sp, #16]
 800d13e:	f7ff faa5 	bl	800c68c <quorem>
 800d142:	4649      	mov	r1, r9
 800d144:	4605      	mov	r5, r0
 800d146:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d14a:	9804      	ldr	r0, [sp, #16]
 800d14c:	f001 f86a 	bl	800e224 <__mcmp>
 800d150:	4632      	mov	r2, r6
 800d152:	9000      	str	r0, [sp, #0]
 800d154:	4639      	mov	r1, r7
 800d156:	4620      	mov	r0, r4
 800d158:	f001 f87e 	bl	800e258 <__mdiff>
 800d15c:	68c3      	ldr	r3, [r0, #12]
 800d15e:	4602      	mov	r2, r0
 800d160:	bb03      	cbnz	r3, 800d1a4 <_dtoa_r+0x9fc>
 800d162:	4601      	mov	r1, r0
 800d164:	9008      	str	r0, [sp, #32]
 800d166:	9804      	ldr	r0, [sp, #16]
 800d168:	f001 f85c 	bl	800e224 <__mcmp>
 800d16c:	9a08      	ldr	r2, [sp, #32]
 800d16e:	4603      	mov	r3, r0
 800d170:	4611      	mov	r1, r2
 800d172:	4620      	mov	r0, r4
 800d174:	9308      	str	r3, [sp, #32]
 800d176:	f000 fe35 	bl	800dde4 <_Bfree>
 800d17a:	9b08      	ldr	r3, [sp, #32]
 800d17c:	b9a3      	cbnz	r3, 800d1a8 <_dtoa_r+0xa00>
 800d17e:	9a06      	ldr	r2, [sp, #24]
 800d180:	b992      	cbnz	r2, 800d1a8 <_dtoa_r+0xa00>
 800d182:	9a07      	ldr	r2, [sp, #28]
 800d184:	b982      	cbnz	r2, 800d1a8 <_dtoa_r+0xa00>
 800d186:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d18a:	d029      	beq.n	800d1e0 <_dtoa_r+0xa38>
 800d18c:	9b00      	ldr	r3, [sp, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	dd01      	ble.n	800d196 <_dtoa_r+0x9ee>
 800d192:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d196:	9b05      	ldr	r3, [sp, #20]
 800d198:	1c5d      	adds	r5, r3, #1
 800d19a:	f883 8000 	strb.w	r8, [r3]
 800d19e:	e782      	b.n	800d0a6 <_dtoa_r+0x8fe>
 800d1a0:	4630      	mov	r0, r6
 800d1a2:	e7c2      	b.n	800d12a <_dtoa_r+0x982>
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	e7e3      	b.n	800d170 <_dtoa_r+0x9c8>
 800d1a8:	9a00      	ldr	r2, [sp, #0]
 800d1aa:	2a00      	cmp	r2, #0
 800d1ac:	db04      	blt.n	800d1b8 <_dtoa_r+0xa10>
 800d1ae:	d125      	bne.n	800d1fc <_dtoa_r+0xa54>
 800d1b0:	9a06      	ldr	r2, [sp, #24]
 800d1b2:	bb1a      	cbnz	r2, 800d1fc <_dtoa_r+0xa54>
 800d1b4:	9a07      	ldr	r2, [sp, #28]
 800d1b6:	bb0a      	cbnz	r2, 800d1fc <_dtoa_r+0xa54>
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	ddec      	ble.n	800d196 <_dtoa_r+0x9ee>
 800d1bc:	2201      	movs	r2, #1
 800d1be:	9904      	ldr	r1, [sp, #16]
 800d1c0:	4620      	mov	r0, r4
 800d1c2:	f000 ffdb 	bl	800e17c <__lshift>
 800d1c6:	4639      	mov	r1, r7
 800d1c8:	9004      	str	r0, [sp, #16]
 800d1ca:	f001 f82b 	bl	800e224 <__mcmp>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	dc03      	bgt.n	800d1da <_dtoa_r+0xa32>
 800d1d2:	d1e0      	bne.n	800d196 <_dtoa_r+0x9ee>
 800d1d4:	f018 0f01 	tst.w	r8, #1
 800d1d8:	d0dd      	beq.n	800d196 <_dtoa_r+0x9ee>
 800d1da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d1de:	d1d8      	bne.n	800d192 <_dtoa_r+0x9ea>
 800d1e0:	9b05      	ldr	r3, [sp, #20]
 800d1e2:	9a05      	ldr	r2, [sp, #20]
 800d1e4:	1c5d      	adds	r5, r3, #1
 800d1e6:	2339      	movs	r3, #57	; 0x39
 800d1e8:	7013      	strb	r3, [r2, #0]
 800d1ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1ee:	2b39      	cmp	r3, #57	; 0x39
 800d1f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d1f4:	d04f      	beq.n	800d296 <_dtoa_r+0xaee>
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	7013      	strb	r3, [r2, #0]
 800d1fa:	e754      	b.n	800d0a6 <_dtoa_r+0x8fe>
 800d1fc:	9a05      	ldr	r2, [sp, #20]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f102 0501 	add.w	r5, r2, #1
 800d204:	dd06      	ble.n	800d214 <_dtoa_r+0xa6c>
 800d206:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d20a:	d0e9      	beq.n	800d1e0 <_dtoa_r+0xa38>
 800d20c:	f108 0801 	add.w	r8, r8, #1
 800d210:	9b05      	ldr	r3, [sp, #20]
 800d212:	e7c2      	b.n	800d19a <_dtoa_r+0x9f2>
 800d214:	9a02      	ldr	r2, [sp, #8]
 800d216:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d21a:	eba5 030b 	sub.w	r3, r5, fp
 800d21e:	4293      	cmp	r3, r2
 800d220:	d021      	beq.n	800d266 <_dtoa_r+0xabe>
 800d222:	2300      	movs	r3, #0
 800d224:	220a      	movs	r2, #10
 800d226:	9904      	ldr	r1, [sp, #16]
 800d228:	4620      	mov	r0, r4
 800d22a:	f000 fdf2 	bl	800de12 <__multadd>
 800d22e:	45b1      	cmp	r9, r6
 800d230:	9004      	str	r0, [sp, #16]
 800d232:	f04f 0300 	mov.w	r3, #0
 800d236:	f04f 020a 	mov.w	r2, #10
 800d23a:	4649      	mov	r1, r9
 800d23c:	4620      	mov	r0, r4
 800d23e:	d105      	bne.n	800d24c <_dtoa_r+0xaa4>
 800d240:	f000 fde7 	bl	800de12 <__multadd>
 800d244:	4681      	mov	r9, r0
 800d246:	4606      	mov	r6, r0
 800d248:	9505      	str	r5, [sp, #20]
 800d24a:	e776      	b.n	800d13a <_dtoa_r+0x992>
 800d24c:	f000 fde1 	bl	800de12 <__multadd>
 800d250:	4631      	mov	r1, r6
 800d252:	4681      	mov	r9, r0
 800d254:	2300      	movs	r3, #0
 800d256:	220a      	movs	r2, #10
 800d258:	4620      	mov	r0, r4
 800d25a:	f000 fdda 	bl	800de12 <__multadd>
 800d25e:	4606      	mov	r6, r0
 800d260:	e7f2      	b.n	800d248 <_dtoa_r+0xaa0>
 800d262:	f04f 0900 	mov.w	r9, #0
 800d266:	2201      	movs	r2, #1
 800d268:	9904      	ldr	r1, [sp, #16]
 800d26a:	4620      	mov	r0, r4
 800d26c:	f000 ff86 	bl	800e17c <__lshift>
 800d270:	4639      	mov	r1, r7
 800d272:	9004      	str	r0, [sp, #16]
 800d274:	f000 ffd6 	bl	800e224 <__mcmp>
 800d278:	2800      	cmp	r0, #0
 800d27a:	dcb6      	bgt.n	800d1ea <_dtoa_r+0xa42>
 800d27c:	d102      	bne.n	800d284 <_dtoa_r+0xadc>
 800d27e:	f018 0f01 	tst.w	r8, #1
 800d282:	d1b2      	bne.n	800d1ea <_dtoa_r+0xa42>
 800d284:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d288:	2b30      	cmp	r3, #48	; 0x30
 800d28a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d28e:	f47f af0a 	bne.w	800d0a6 <_dtoa_r+0x8fe>
 800d292:	4615      	mov	r5, r2
 800d294:	e7f6      	b.n	800d284 <_dtoa_r+0xadc>
 800d296:	4593      	cmp	fp, r2
 800d298:	d105      	bne.n	800d2a6 <_dtoa_r+0xafe>
 800d29a:	2331      	movs	r3, #49	; 0x31
 800d29c:	f10a 0a01 	add.w	sl, sl, #1
 800d2a0:	f88b 3000 	strb.w	r3, [fp]
 800d2a4:	e6ff      	b.n	800d0a6 <_dtoa_r+0x8fe>
 800d2a6:	4615      	mov	r5, r2
 800d2a8:	e79f      	b.n	800d1ea <_dtoa_r+0xa42>
 800d2aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d310 <_dtoa_r+0xb68>
 800d2ae:	e007      	b.n	800d2c0 <_dtoa_r+0xb18>
 800d2b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d314 <_dtoa_r+0xb6c>
 800d2b6:	b11b      	cbz	r3, 800d2c0 <_dtoa_r+0xb18>
 800d2b8:	f10b 0308 	add.w	r3, fp, #8
 800d2bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d2be:	6013      	str	r3, [r2, #0]
 800d2c0:	4658      	mov	r0, fp
 800d2c2:	b017      	add	sp, #92	; 0x5c
 800d2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c8:	9b06      	ldr	r3, [sp, #24]
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	f77f ae35 	ble.w	800cf3a <_dtoa_r+0x792>
 800d2d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2d2:	9307      	str	r3, [sp, #28]
 800d2d4:	e649      	b.n	800cf6a <_dtoa_r+0x7c2>
 800d2d6:	9b02      	ldr	r3, [sp, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	dc03      	bgt.n	800d2e4 <_dtoa_r+0xb3c>
 800d2dc:	9b06      	ldr	r3, [sp, #24]
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	f73f aecc 	bgt.w	800d07c <_dtoa_r+0x8d4>
 800d2e4:	465d      	mov	r5, fp
 800d2e6:	4639      	mov	r1, r7
 800d2e8:	9804      	ldr	r0, [sp, #16]
 800d2ea:	f7ff f9cf 	bl	800c68c <quorem>
 800d2ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d2f2:	f805 8b01 	strb.w	r8, [r5], #1
 800d2f6:	9a02      	ldr	r2, [sp, #8]
 800d2f8:	eba5 030b 	sub.w	r3, r5, fp
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	ddb0      	ble.n	800d262 <_dtoa_r+0xaba>
 800d300:	2300      	movs	r3, #0
 800d302:	220a      	movs	r2, #10
 800d304:	9904      	ldr	r1, [sp, #16]
 800d306:	4620      	mov	r0, r4
 800d308:	f000 fd83 	bl	800de12 <__multadd>
 800d30c:	9004      	str	r0, [sp, #16]
 800d30e:	e7ea      	b.n	800d2e6 <_dtoa_r+0xb3e>
 800d310:	080103ac 	.word	0x080103ac
 800d314:	08010428 	.word	0x08010428

0800d318 <__sflush_r>:
 800d318:	898a      	ldrh	r2, [r1, #12]
 800d31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d31e:	4605      	mov	r5, r0
 800d320:	0710      	lsls	r0, r2, #28
 800d322:	460c      	mov	r4, r1
 800d324:	d458      	bmi.n	800d3d8 <__sflush_r+0xc0>
 800d326:	684b      	ldr	r3, [r1, #4]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	dc05      	bgt.n	800d338 <__sflush_r+0x20>
 800d32c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d32e:	2b00      	cmp	r3, #0
 800d330:	dc02      	bgt.n	800d338 <__sflush_r+0x20>
 800d332:	2000      	movs	r0, #0
 800d334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d33a:	2e00      	cmp	r6, #0
 800d33c:	d0f9      	beq.n	800d332 <__sflush_r+0x1a>
 800d33e:	2300      	movs	r3, #0
 800d340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d344:	682f      	ldr	r7, [r5, #0]
 800d346:	6a21      	ldr	r1, [r4, #32]
 800d348:	602b      	str	r3, [r5, #0]
 800d34a:	d032      	beq.n	800d3b2 <__sflush_r+0x9a>
 800d34c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d34e:	89a3      	ldrh	r3, [r4, #12]
 800d350:	075a      	lsls	r2, r3, #29
 800d352:	d505      	bpl.n	800d360 <__sflush_r+0x48>
 800d354:	6863      	ldr	r3, [r4, #4]
 800d356:	1ac0      	subs	r0, r0, r3
 800d358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d35a:	b10b      	cbz	r3, 800d360 <__sflush_r+0x48>
 800d35c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d35e:	1ac0      	subs	r0, r0, r3
 800d360:	2300      	movs	r3, #0
 800d362:	4602      	mov	r2, r0
 800d364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d366:	6a21      	ldr	r1, [r4, #32]
 800d368:	4628      	mov	r0, r5
 800d36a:	47b0      	blx	r6
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	89a3      	ldrh	r3, [r4, #12]
 800d370:	d106      	bne.n	800d380 <__sflush_r+0x68>
 800d372:	6829      	ldr	r1, [r5, #0]
 800d374:	291d      	cmp	r1, #29
 800d376:	d848      	bhi.n	800d40a <__sflush_r+0xf2>
 800d378:	4a29      	ldr	r2, [pc, #164]	; (800d420 <__sflush_r+0x108>)
 800d37a:	40ca      	lsrs	r2, r1
 800d37c:	07d6      	lsls	r6, r2, #31
 800d37e:	d544      	bpl.n	800d40a <__sflush_r+0xf2>
 800d380:	2200      	movs	r2, #0
 800d382:	6062      	str	r2, [r4, #4]
 800d384:	04d9      	lsls	r1, r3, #19
 800d386:	6922      	ldr	r2, [r4, #16]
 800d388:	6022      	str	r2, [r4, #0]
 800d38a:	d504      	bpl.n	800d396 <__sflush_r+0x7e>
 800d38c:	1c42      	adds	r2, r0, #1
 800d38e:	d101      	bne.n	800d394 <__sflush_r+0x7c>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	b903      	cbnz	r3, 800d396 <__sflush_r+0x7e>
 800d394:	6560      	str	r0, [r4, #84]	; 0x54
 800d396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d398:	602f      	str	r7, [r5, #0]
 800d39a:	2900      	cmp	r1, #0
 800d39c:	d0c9      	beq.n	800d332 <__sflush_r+0x1a>
 800d39e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3a2:	4299      	cmp	r1, r3
 800d3a4:	d002      	beq.n	800d3ac <__sflush_r+0x94>
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	f001 f8f6 	bl	800e598 <_free_r>
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	6360      	str	r0, [r4, #52]	; 0x34
 800d3b0:	e7c0      	b.n	800d334 <__sflush_r+0x1c>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	47b0      	blx	r6
 800d3b8:	1c41      	adds	r1, r0, #1
 800d3ba:	d1c8      	bne.n	800d34e <__sflush_r+0x36>
 800d3bc:	682b      	ldr	r3, [r5, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d0c5      	beq.n	800d34e <__sflush_r+0x36>
 800d3c2:	2b1d      	cmp	r3, #29
 800d3c4:	d001      	beq.n	800d3ca <__sflush_r+0xb2>
 800d3c6:	2b16      	cmp	r3, #22
 800d3c8:	d101      	bne.n	800d3ce <__sflush_r+0xb6>
 800d3ca:	602f      	str	r7, [r5, #0]
 800d3cc:	e7b1      	b.n	800d332 <__sflush_r+0x1a>
 800d3ce:	89a3      	ldrh	r3, [r4, #12]
 800d3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3d4:	81a3      	strh	r3, [r4, #12]
 800d3d6:	e7ad      	b.n	800d334 <__sflush_r+0x1c>
 800d3d8:	690f      	ldr	r7, [r1, #16]
 800d3da:	2f00      	cmp	r7, #0
 800d3dc:	d0a9      	beq.n	800d332 <__sflush_r+0x1a>
 800d3de:	0793      	lsls	r3, r2, #30
 800d3e0:	680e      	ldr	r6, [r1, #0]
 800d3e2:	bf08      	it	eq
 800d3e4:	694b      	ldreq	r3, [r1, #20]
 800d3e6:	600f      	str	r7, [r1, #0]
 800d3e8:	bf18      	it	ne
 800d3ea:	2300      	movne	r3, #0
 800d3ec:	eba6 0807 	sub.w	r8, r6, r7
 800d3f0:	608b      	str	r3, [r1, #8]
 800d3f2:	f1b8 0f00 	cmp.w	r8, #0
 800d3f6:	dd9c      	ble.n	800d332 <__sflush_r+0x1a>
 800d3f8:	4643      	mov	r3, r8
 800d3fa:	463a      	mov	r2, r7
 800d3fc:	6a21      	ldr	r1, [r4, #32]
 800d3fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d400:	4628      	mov	r0, r5
 800d402:	47b0      	blx	r6
 800d404:	2800      	cmp	r0, #0
 800d406:	dc06      	bgt.n	800d416 <__sflush_r+0xfe>
 800d408:	89a3      	ldrh	r3, [r4, #12]
 800d40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d40e:	81a3      	strh	r3, [r4, #12]
 800d410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d414:	e78e      	b.n	800d334 <__sflush_r+0x1c>
 800d416:	4407      	add	r7, r0
 800d418:	eba8 0800 	sub.w	r8, r8, r0
 800d41c:	e7e9      	b.n	800d3f2 <__sflush_r+0xda>
 800d41e:	bf00      	nop
 800d420:	20400001 	.word	0x20400001

0800d424 <_fflush_r>:
 800d424:	b538      	push	{r3, r4, r5, lr}
 800d426:	690b      	ldr	r3, [r1, #16]
 800d428:	4605      	mov	r5, r0
 800d42a:	460c      	mov	r4, r1
 800d42c:	b1db      	cbz	r3, 800d466 <_fflush_r+0x42>
 800d42e:	b118      	cbz	r0, 800d438 <_fflush_r+0x14>
 800d430:	6983      	ldr	r3, [r0, #24]
 800d432:	b90b      	cbnz	r3, 800d438 <_fflush_r+0x14>
 800d434:	f000 f860 	bl	800d4f8 <__sinit>
 800d438:	4b0c      	ldr	r3, [pc, #48]	; (800d46c <_fflush_r+0x48>)
 800d43a:	429c      	cmp	r4, r3
 800d43c:	d109      	bne.n	800d452 <_fflush_r+0x2e>
 800d43e:	686c      	ldr	r4, [r5, #4]
 800d440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d444:	b17b      	cbz	r3, 800d466 <_fflush_r+0x42>
 800d446:	4621      	mov	r1, r4
 800d448:	4628      	mov	r0, r5
 800d44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d44e:	f7ff bf63 	b.w	800d318 <__sflush_r>
 800d452:	4b07      	ldr	r3, [pc, #28]	; (800d470 <_fflush_r+0x4c>)
 800d454:	429c      	cmp	r4, r3
 800d456:	d101      	bne.n	800d45c <_fflush_r+0x38>
 800d458:	68ac      	ldr	r4, [r5, #8]
 800d45a:	e7f1      	b.n	800d440 <_fflush_r+0x1c>
 800d45c:	4b05      	ldr	r3, [pc, #20]	; (800d474 <_fflush_r+0x50>)
 800d45e:	429c      	cmp	r4, r3
 800d460:	bf08      	it	eq
 800d462:	68ec      	ldreq	r4, [r5, #12]
 800d464:	e7ec      	b.n	800d440 <_fflush_r+0x1c>
 800d466:	2000      	movs	r0, #0
 800d468:	bd38      	pop	{r3, r4, r5, pc}
 800d46a:	bf00      	nop
 800d46c:	08010458 	.word	0x08010458
 800d470:	08010478 	.word	0x08010478
 800d474:	08010438 	.word	0x08010438

0800d478 <std>:
 800d478:	2300      	movs	r3, #0
 800d47a:	b510      	push	{r4, lr}
 800d47c:	4604      	mov	r4, r0
 800d47e:	e9c0 3300 	strd	r3, r3, [r0]
 800d482:	6083      	str	r3, [r0, #8]
 800d484:	8181      	strh	r1, [r0, #12]
 800d486:	6643      	str	r3, [r0, #100]	; 0x64
 800d488:	81c2      	strh	r2, [r0, #14]
 800d48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d48e:	6183      	str	r3, [r0, #24]
 800d490:	4619      	mov	r1, r3
 800d492:	2208      	movs	r2, #8
 800d494:	305c      	adds	r0, #92	; 0x5c
 800d496:	f7fd faa2 	bl	800a9de <memset>
 800d49a:	4b05      	ldr	r3, [pc, #20]	; (800d4b0 <std+0x38>)
 800d49c:	6263      	str	r3, [r4, #36]	; 0x24
 800d49e:	4b05      	ldr	r3, [pc, #20]	; (800d4b4 <std+0x3c>)
 800d4a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d4a2:	4b05      	ldr	r3, [pc, #20]	; (800d4b8 <std+0x40>)
 800d4a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d4a6:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <std+0x44>)
 800d4a8:	6224      	str	r4, [r4, #32]
 800d4aa:	6323      	str	r3, [r4, #48]	; 0x30
 800d4ac:	bd10      	pop	{r4, pc}
 800d4ae:	bf00      	nop
 800d4b0:	0800ec2d 	.word	0x0800ec2d
 800d4b4:	0800ec4f 	.word	0x0800ec4f
 800d4b8:	0800ec87 	.word	0x0800ec87
 800d4bc:	0800ecab 	.word	0x0800ecab

0800d4c0 <_cleanup_r>:
 800d4c0:	4901      	ldr	r1, [pc, #4]	; (800d4c8 <_cleanup_r+0x8>)
 800d4c2:	f000 b885 	b.w	800d5d0 <_fwalk_reent>
 800d4c6:	bf00      	nop
 800d4c8:	0800d425 	.word	0x0800d425

0800d4cc <__sfmoreglue>:
 800d4cc:	b570      	push	{r4, r5, r6, lr}
 800d4ce:	1e4a      	subs	r2, r1, #1
 800d4d0:	2568      	movs	r5, #104	; 0x68
 800d4d2:	4355      	muls	r5, r2
 800d4d4:	460e      	mov	r6, r1
 800d4d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d4da:	f001 f8ab 	bl	800e634 <_malloc_r>
 800d4de:	4604      	mov	r4, r0
 800d4e0:	b140      	cbz	r0, 800d4f4 <__sfmoreglue+0x28>
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	e9c0 1600 	strd	r1, r6, [r0]
 800d4e8:	300c      	adds	r0, #12
 800d4ea:	60a0      	str	r0, [r4, #8]
 800d4ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4f0:	f7fd fa75 	bl	800a9de <memset>
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}

0800d4f8 <__sinit>:
 800d4f8:	6983      	ldr	r3, [r0, #24]
 800d4fa:	b510      	push	{r4, lr}
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	bb33      	cbnz	r3, 800d54e <__sinit+0x56>
 800d500:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d504:	6503      	str	r3, [r0, #80]	; 0x50
 800d506:	4b12      	ldr	r3, [pc, #72]	; (800d550 <__sinit+0x58>)
 800d508:	4a12      	ldr	r2, [pc, #72]	; (800d554 <__sinit+0x5c>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6282      	str	r2, [r0, #40]	; 0x28
 800d50e:	4298      	cmp	r0, r3
 800d510:	bf04      	itt	eq
 800d512:	2301      	moveq	r3, #1
 800d514:	6183      	streq	r3, [r0, #24]
 800d516:	f000 f81f 	bl	800d558 <__sfp>
 800d51a:	6060      	str	r0, [r4, #4]
 800d51c:	4620      	mov	r0, r4
 800d51e:	f000 f81b 	bl	800d558 <__sfp>
 800d522:	60a0      	str	r0, [r4, #8]
 800d524:	4620      	mov	r0, r4
 800d526:	f000 f817 	bl	800d558 <__sfp>
 800d52a:	2200      	movs	r2, #0
 800d52c:	60e0      	str	r0, [r4, #12]
 800d52e:	2104      	movs	r1, #4
 800d530:	6860      	ldr	r0, [r4, #4]
 800d532:	f7ff ffa1 	bl	800d478 <std>
 800d536:	2201      	movs	r2, #1
 800d538:	2109      	movs	r1, #9
 800d53a:	68a0      	ldr	r0, [r4, #8]
 800d53c:	f7ff ff9c 	bl	800d478 <std>
 800d540:	2202      	movs	r2, #2
 800d542:	2112      	movs	r1, #18
 800d544:	68e0      	ldr	r0, [r4, #12]
 800d546:	f7ff ff97 	bl	800d478 <std>
 800d54a:	2301      	movs	r3, #1
 800d54c:	61a3      	str	r3, [r4, #24]
 800d54e:	bd10      	pop	{r4, pc}
 800d550:	08010398 	.word	0x08010398
 800d554:	0800d4c1 	.word	0x0800d4c1

0800d558 <__sfp>:
 800d558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55a:	4b1b      	ldr	r3, [pc, #108]	; (800d5c8 <__sfp+0x70>)
 800d55c:	681e      	ldr	r6, [r3, #0]
 800d55e:	69b3      	ldr	r3, [r6, #24]
 800d560:	4607      	mov	r7, r0
 800d562:	b913      	cbnz	r3, 800d56a <__sfp+0x12>
 800d564:	4630      	mov	r0, r6
 800d566:	f7ff ffc7 	bl	800d4f8 <__sinit>
 800d56a:	3648      	adds	r6, #72	; 0x48
 800d56c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d570:	3b01      	subs	r3, #1
 800d572:	d503      	bpl.n	800d57c <__sfp+0x24>
 800d574:	6833      	ldr	r3, [r6, #0]
 800d576:	b133      	cbz	r3, 800d586 <__sfp+0x2e>
 800d578:	6836      	ldr	r6, [r6, #0]
 800d57a:	e7f7      	b.n	800d56c <__sfp+0x14>
 800d57c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d580:	b16d      	cbz	r5, 800d59e <__sfp+0x46>
 800d582:	3468      	adds	r4, #104	; 0x68
 800d584:	e7f4      	b.n	800d570 <__sfp+0x18>
 800d586:	2104      	movs	r1, #4
 800d588:	4638      	mov	r0, r7
 800d58a:	f7ff ff9f 	bl	800d4cc <__sfmoreglue>
 800d58e:	6030      	str	r0, [r6, #0]
 800d590:	2800      	cmp	r0, #0
 800d592:	d1f1      	bne.n	800d578 <__sfp+0x20>
 800d594:	230c      	movs	r3, #12
 800d596:	603b      	str	r3, [r7, #0]
 800d598:	4604      	mov	r4, r0
 800d59a:	4620      	mov	r0, r4
 800d59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d59e:	4b0b      	ldr	r3, [pc, #44]	; (800d5cc <__sfp+0x74>)
 800d5a0:	6665      	str	r5, [r4, #100]	; 0x64
 800d5a2:	e9c4 5500 	strd	r5, r5, [r4]
 800d5a6:	60a5      	str	r5, [r4, #8]
 800d5a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d5ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d5b0:	2208      	movs	r2, #8
 800d5b2:	4629      	mov	r1, r5
 800d5b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d5b8:	f7fd fa11 	bl	800a9de <memset>
 800d5bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d5c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d5c4:	e7e9      	b.n	800d59a <__sfp+0x42>
 800d5c6:	bf00      	nop
 800d5c8:	08010398 	.word	0x08010398
 800d5cc:	ffff0001 	.word	0xffff0001

0800d5d0 <_fwalk_reent>:
 800d5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5d4:	4680      	mov	r8, r0
 800d5d6:	4689      	mov	r9, r1
 800d5d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5dc:	2600      	movs	r6, #0
 800d5de:	b914      	cbnz	r4, 800d5e6 <_fwalk_reent+0x16>
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d5ea:	3f01      	subs	r7, #1
 800d5ec:	d501      	bpl.n	800d5f2 <_fwalk_reent+0x22>
 800d5ee:	6824      	ldr	r4, [r4, #0]
 800d5f0:	e7f5      	b.n	800d5de <_fwalk_reent+0xe>
 800d5f2:	89ab      	ldrh	r3, [r5, #12]
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d907      	bls.n	800d608 <_fwalk_reent+0x38>
 800d5f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	d003      	beq.n	800d608 <_fwalk_reent+0x38>
 800d600:	4629      	mov	r1, r5
 800d602:	4640      	mov	r0, r8
 800d604:	47c8      	blx	r9
 800d606:	4306      	orrs	r6, r0
 800d608:	3568      	adds	r5, #104	; 0x68
 800d60a:	e7ee      	b.n	800d5ea <_fwalk_reent+0x1a>

0800d60c <rshift>:
 800d60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d60e:	6906      	ldr	r6, [r0, #16]
 800d610:	114b      	asrs	r3, r1, #5
 800d612:	429e      	cmp	r6, r3
 800d614:	f100 0414 	add.w	r4, r0, #20
 800d618:	dd30      	ble.n	800d67c <rshift+0x70>
 800d61a:	f011 011f 	ands.w	r1, r1, #31
 800d61e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d622:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d626:	d108      	bne.n	800d63a <rshift+0x2e>
 800d628:	4621      	mov	r1, r4
 800d62a:	42b2      	cmp	r2, r6
 800d62c:	460b      	mov	r3, r1
 800d62e:	d211      	bcs.n	800d654 <rshift+0x48>
 800d630:	f852 3b04 	ldr.w	r3, [r2], #4
 800d634:	f841 3b04 	str.w	r3, [r1], #4
 800d638:	e7f7      	b.n	800d62a <rshift+0x1e>
 800d63a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d63e:	f1c1 0c20 	rsb	ip, r1, #32
 800d642:	40cd      	lsrs	r5, r1
 800d644:	3204      	adds	r2, #4
 800d646:	4623      	mov	r3, r4
 800d648:	42b2      	cmp	r2, r6
 800d64a:	4617      	mov	r7, r2
 800d64c:	d30c      	bcc.n	800d668 <rshift+0x5c>
 800d64e:	601d      	str	r5, [r3, #0]
 800d650:	b105      	cbz	r5, 800d654 <rshift+0x48>
 800d652:	3304      	adds	r3, #4
 800d654:	1b1a      	subs	r2, r3, r4
 800d656:	42a3      	cmp	r3, r4
 800d658:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d65c:	bf08      	it	eq
 800d65e:	2300      	moveq	r3, #0
 800d660:	6102      	str	r2, [r0, #16]
 800d662:	bf08      	it	eq
 800d664:	6143      	streq	r3, [r0, #20]
 800d666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d668:	683f      	ldr	r7, [r7, #0]
 800d66a:	fa07 f70c 	lsl.w	r7, r7, ip
 800d66e:	433d      	orrs	r5, r7
 800d670:	f843 5b04 	str.w	r5, [r3], #4
 800d674:	f852 5b04 	ldr.w	r5, [r2], #4
 800d678:	40cd      	lsrs	r5, r1
 800d67a:	e7e5      	b.n	800d648 <rshift+0x3c>
 800d67c:	4623      	mov	r3, r4
 800d67e:	e7e9      	b.n	800d654 <rshift+0x48>

0800d680 <__hexdig_fun>:
 800d680:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d684:	2b09      	cmp	r3, #9
 800d686:	d802      	bhi.n	800d68e <__hexdig_fun+0xe>
 800d688:	3820      	subs	r0, #32
 800d68a:	b2c0      	uxtb	r0, r0
 800d68c:	4770      	bx	lr
 800d68e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d692:	2b05      	cmp	r3, #5
 800d694:	d801      	bhi.n	800d69a <__hexdig_fun+0x1a>
 800d696:	3847      	subs	r0, #71	; 0x47
 800d698:	e7f7      	b.n	800d68a <__hexdig_fun+0xa>
 800d69a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d69e:	2b05      	cmp	r3, #5
 800d6a0:	d801      	bhi.n	800d6a6 <__hexdig_fun+0x26>
 800d6a2:	3827      	subs	r0, #39	; 0x27
 800d6a4:	e7f1      	b.n	800d68a <__hexdig_fun+0xa>
 800d6a6:	2000      	movs	r0, #0
 800d6a8:	4770      	bx	lr

0800d6aa <__gethex>:
 800d6aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ae:	b08b      	sub	sp, #44	; 0x2c
 800d6b0:	468a      	mov	sl, r1
 800d6b2:	9002      	str	r0, [sp, #8]
 800d6b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d6b6:	9306      	str	r3, [sp, #24]
 800d6b8:	4690      	mov	r8, r2
 800d6ba:	f000 fad0 	bl	800dc5e <__localeconv_l>
 800d6be:	6803      	ldr	r3, [r0, #0]
 800d6c0:	9303      	str	r3, [sp, #12]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7f2 fd84 	bl	80001d0 <strlen>
 800d6c8:	9b03      	ldr	r3, [sp, #12]
 800d6ca:	9001      	str	r0, [sp, #4]
 800d6cc:	4403      	add	r3, r0
 800d6ce:	f04f 0b00 	mov.w	fp, #0
 800d6d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d6d6:	9307      	str	r3, [sp, #28]
 800d6d8:	f8da 3000 	ldr.w	r3, [sl]
 800d6dc:	3302      	adds	r3, #2
 800d6de:	461f      	mov	r7, r3
 800d6e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d6e4:	2830      	cmp	r0, #48	; 0x30
 800d6e6:	d06c      	beq.n	800d7c2 <__gethex+0x118>
 800d6e8:	f7ff ffca 	bl	800d680 <__hexdig_fun>
 800d6ec:	4604      	mov	r4, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	d16a      	bne.n	800d7c8 <__gethex+0x11e>
 800d6f2:	9a01      	ldr	r2, [sp, #4]
 800d6f4:	9903      	ldr	r1, [sp, #12]
 800d6f6:	4638      	mov	r0, r7
 800d6f8:	f001 fadb 	bl	800ecb2 <strncmp>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d166      	bne.n	800d7ce <__gethex+0x124>
 800d700:	9b01      	ldr	r3, [sp, #4]
 800d702:	5cf8      	ldrb	r0, [r7, r3]
 800d704:	18fe      	adds	r6, r7, r3
 800d706:	f7ff ffbb 	bl	800d680 <__hexdig_fun>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	d062      	beq.n	800d7d4 <__gethex+0x12a>
 800d70e:	4633      	mov	r3, r6
 800d710:	7818      	ldrb	r0, [r3, #0]
 800d712:	2830      	cmp	r0, #48	; 0x30
 800d714:	461f      	mov	r7, r3
 800d716:	f103 0301 	add.w	r3, r3, #1
 800d71a:	d0f9      	beq.n	800d710 <__gethex+0x66>
 800d71c:	f7ff ffb0 	bl	800d680 <__hexdig_fun>
 800d720:	fab0 f580 	clz	r5, r0
 800d724:	096d      	lsrs	r5, r5, #5
 800d726:	4634      	mov	r4, r6
 800d728:	f04f 0b01 	mov.w	fp, #1
 800d72c:	463a      	mov	r2, r7
 800d72e:	4616      	mov	r6, r2
 800d730:	3201      	adds	r2, #1
 800d732:	7830      	ldrb	r0, [r6, #0]
 800d734:	f7ff ffa4 	bl	800d680 <__hexdig_fun>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d1f8      	bne.n	800d72e <__gethex+0x84>
 800d73c:	9a01      	ldr	r2, [sp, #4]
 800d73e:	9903      	ldr	r1, [sp, #12]
 800d740:	4630      	mov	r0, r6
 800d742:	f001 fab6 	bl	800ecb2 <strncmp>
 800d746:	b950      	cbnz	r0, 800d75e <__gethex+0xb4>
 800d748:	b954      	cbnz	r4, 800d760 <__gethex+0xb6>
 800d74a:	9b01      	ldr	r3, [sp, #4]
 800d74c:	18f4      	adds	r4, r6, r3
 800d74e:	4622      	mov	r2, r4
 800d750:	4616      	mov	r6, r2
 800d752:	3201      	adds	r2, #1
 800d754:	7830      	ldrb	r0, [r6, #0]
 800d756:	f7ff ff93 	bl	800d680 <__hexdig_fun>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d1f8      	bne.n	800d750 <__gethex+0xa6>
 800d75e:	b10c      	cbz	r4, 800d764 <__gethex+0xba>
 800d760:	1ba4      	subs	r4, r4, r6
 800d762:	00a4      	lsls	r4, r4, #2
 800d764:	7833      	ldrb	r3, [r6, #0]
 800d766:	2b50      	cmp	r3, #80	; 0x50
 800d768:	d001      	beq.n	800d76e <__gethex+0xc4>
 800d76a:	2b70      	cmp	r3, #112	; 0x70
 800d76c:	d140      	bne.n	800d7f0 <__gethex+0x146>
 800d76e:	7873      	ldrb	r3, [r6, #1]
 800d770:	2b2b      	cmp	r3, #43	; 0x2b
 800d772:	d031      	beq.n	800d7d8 <__gethex+0x12e>
 800d774:	2b2d      	cmp	r3, #45	; 0x2d
 800d776:	d033      	beq.n	800d7e0 <__gethex+0x136>
 800d778:	1c71      	adds	r1, r6, #1
 800d77a:	f04f 0900 	mov.w	r9, #0
 800d77e:	7808      	ldrb	r0, [r1, #0]
 800d780:	f7ff ff7e 	bl	800d680 <__hexdig_fun>
 800d784:	1e43      	subs	r3, r0, #1
 800d786:	b2db      	uxtb	r3, r3
 800d788:	2b18      	cmp	r3, #24
 800d78a:	d831      	bhi.n	800d7f0 <__gethex+0x146>
 800d78c:	f1a0 0210 	sub.w	r2, r0, #16
 800d790:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d794:	f7ff ff74 	bl	800d680 <__hexdig_fun>
 800d798:	1e43      	subs	r3, r0, #1
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	2b18      	cmp	r3, #24
 800d79e:	d922      	bls.n	800d7e6 <__gethex+0x13c>
 800d7a0:	f1b9 0f00 	cmp.w	r9, #0
 800d7a4:	d000      	beq.n	800d7a8 <__gethex+0xfe>
 800d7a6:	4252      	negs	r2, r2
 800d7a8:	4414      	add	r4, r2
 800d7aa:	f8ca 1000 	str.w	r1, [sl]
 800d7ae:	b30d      	cbz	r5, 800d7f4 <__gethex+0x14a>
 800d7b0:	f1bb 0f00 	cmp.w	fp, #0
 800d7b4:	bf0c      	ite	eq
 800d7b6:	2706      	moveq	r7, #6
 800d7b8:	2700      	movne	r7, #0
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	b00b      	add	sp, #44	; 0x2c
 800d7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c2:	f10b 0b01 	add.w	fp, fp, #1
 800d7c6:	e78a      	b.n	800d6de <__gethex+0x34>
 800d7c8:	2500      	movs	r5, #0
 800d7ca:	462c      	mov	r4, r5
 800d7cc:	e7ae      	b.n	800d72c <__gethex+0x82>
 800d7ce:	463e      	mov	r6, r7
 800d7d0:	2501      	movs	r5, #1
 800d7d2:	e7c7      	b.n	800d764 <__gethex+0xba>
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	e7fb      	b.n	800d7d0 <__gethex+0x126>
 800d7d8:	f04f 0900 	mov.w	r9, #0
 800d7dc:	1cb1      	adds	r1, r6, #2
 800d7de:	e7ce      	b.n	800d77e <__gethex+0xd4>
 800d7e0:	f04f 0901 	mov.w	r9, #1
 800d7e4:	e7fa      	b.n	800d7dc <__gethex+0x132>
 800d7e6:	230a      	movs	r3, #10
 800d7e8:	fb03 0202 	mla	r2, r3, r2, r0
 800d7ec:	3a10      	subs	r2, #16
 800d7ee:	e7cf      	b.n	800d790 <__gethex+0xe6>
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	e7da      	b.n	800d7aa <__gethex+0x100>
 800d7f4:	1bf3      	subs	r3, r6, r7
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	2b07      	cmp	r3, #7
 800d7fc:	dc49      	bgt.n	800d892 <__gethex+0x1e8>
 800d7fe:	9802      	ldr	r0, [sp, #8]
 800d800:	f000 fabc 	bl	800dd7c <_Balloc>
 800d804:	9b01      	ldr	r3, [sp, #4]
 800d806:	f100 0914 	add.w	r9, r0, #20
 800d80a:	f04f 0b00 	mov.w	fp, #0
 800d80e:	f1c3 0301 	rsb	r3, r3, #1
 800d812:	4605      	mov	r5, r0
 800d814:	f8cd 9010 	str.w	r9, [sp, #16]
 800d818:	46da      	mov	sl, fp
 800d81a:	9308      	str	r3, [sp, #32]
 800d81c:	42b7      	cmp	r7, r6
 800d81e:	d33b      	bcc.n	800d898 <__gethex+0x1ee>
 800d820:	9804      	ldr	r0, [sp, #16]
 800d822:	f840 ab04 	str.w	sl, [r0], #4
 800d826:	eba0 0009 	sub.w	r0, r0, r9
 800d82a:	1080      	asrs	r0, r0, #2
 800d82c:	6128      	str	r0, [r5, #16]
 800d82e:	0147      	lsls	r7, r0, #5
 800d830:	4650      	mov	r0, sl
 800d832:	f000 fb67 	bl	800df04 <__hi0bits>
 800d836:	f8d8 6000 	ldr.w	r6, [r8]
 800d83a:	1a3f      	subs	r7, r7, r0
 800d83c:	42b7      	cmp	r7, r6
 800d83e:	dd64      	ble.n	800d90a <__gethex+0x260>
 800d840:	1bbf      	subs	r7, r7, r6
 800d842:	4639      	mov	r1, r7
 800d844:	4628      	mov	r0, r5
 800d846:	f000 fe77 	bl	800e538 <__any_on>
 800d84a:	4682      	mov	sl, r0
 800d84c:	b178      	cbz	r0, 800d86e <__gethex+0x1c4>
 800d84e:	1e7b      	subs	r3, r7, #1
 800d850:	1159      	asrs	r1, r3, #5
 800d852:	f003 021f 	and.w	r2, r3, #31
 800d856:	f04f 0a01 	mov.w	sl, #1
 800d85a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d85e:	fa0a f202 	lsl.w	r2, sl, r2
 800d862:	420a      	tst	r2, r1
 800d864:	d003      	beq.n	800d86e <__gethex+0x1c4>
 800d866:	4553      	cmp	r3, sl
 800d868:	dc46      	bgt.n	800d8f8 <__gethex+0x24e>
 800d86a:	f04f 0a02 	mov.w	sl, #2
 800d86e:	4639      	mov	r1, r7
 800d870:	4628      	mov	r0, r5
 800d872:	f7ff fecb 	bl	800d60c <rshift>
 800d876:	443c      	add	r4, r7
 800d878:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d87c:	42a3      	cmp	r3, r4
 800d87e:	da52      	bge.n	800d926 <__gethex+0x27c>
 800d880:	4629      	mov	r1, r5
 800d882:	9802      	ldr	r0, [sp, #8]
 800d884:	f000 faae 	bl	800dde4 <_Bfree>
 800d888:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d88a:	2300      	movs	r3, #0
 800d88c:	6013      	str	r3, [r2, #0]
 800d88e:	27a3      	movs	r7, #163	; 0xa3
 800d890:	e793      	b.n	800d7ba <__gethex+0x110>
 800d892:	3101      	adds	r1, #1
 800d894:	105b      	asrs	r3, r3, #1
 800d896:	e7b0      	b.n	800d7fa <__gethex+0x150>
 800d898:	1e73      	subs	r3, r6, #1
 800d89a:	9305      	str	r3, [sp, #20]
 800d89c:	9a07      	ldr	r2, [sp, #28]
 800d89e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d018      	beq.n	800d8d8 <__gethex+0x22e>
 800d8a6:	f1bb 0f20 	cmp.w	fp, #32
 800d8aa:	d107      	bne.n	800d8bc <__gethex+0x212>
 800d8ac:	9b04      	ldr	r3, [sp, #16]
 800d8ae:	f8c3 a000 	str.w	sl, [r3]
 800d8b2:	3304      	adds	r3, #4
 800d8b4:	f04f 0a00 	mov.w	sl, #0
 800d8b8:	9304      	str	r3, [sp, #16]
 800d8ba:	46d3      	mov	fp, sl
 800d8bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d8c0:	f7ff fede 	bl	800d680 <__hexdig_fun>
 800d8c4:	f000 000f 	and.w	r0, r0, #15
 800d8c8:	fa00 f00b 	lsl.w	r0, r0, fp
 800d8cc:	ea4a 0a00 	orr.w	sl, sl, r0
 800d8d0:	f10b 0b04 	add.w	fp, fp, #4
 800d8d4:	9b05      	ldr	r3, [sp, #20]
 800d8d6:	e00d      	b.n	800d8f4 <__gethex+0x24a>
 800d8d8:	9b05      	ldr	r3, [sp, #20]
 800d8da:	9a08      	ldr	r2, [sp, #32]
 800d8dc:	4413      	add	r3, r2
 800d8de:	42bb      	cmp	r3, r7
 800d8e0:	d3e1      	bcc.n	800d8a6 <__gethex+0x1fc>
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	9a01      	ldr	r2, [sp, #4]
 800d8e6:	9903      	ldr	r1, [sp, #12]
 800d8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ea:	f001 f9e2 	bl	800ecb2 <strncmp>
 800d8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	d1d8      	bne.n	800d8a6 <__gethex+0x1fc>
 800d8f4:	461e      	mov	r6, r3
 800d8f6:	e791      	b.n	800d81c <__gethex+0x172>
 800d8f8:	1eb9      	subs	r1, r7, #2
 800d8fa:	4628      	mov	r0, r5
 800d8fc:	f000 fe1c 	bl	800e538 <__any_on>
 800d900:	2800      	cmp	r0, #0
 800d902:	d0b2      	beq.n	800d86a <__gethex+0x1c0>
 800d904:	f04f 0a03 	mov.w	sl, #3
 800d908:	e7b1      	b.n	800d86e <__gethex+0x1c4>
 800d90a:	da09      	bge.n	800d920 <__gethex+0x276>
 800d90c:	1bf7      	subs	r7, r6, r7
 800d90e:	4629      	mov	r1, r5
 800d910:	463a      	mov	r2, r7
 800d912:	9802      	ldr	r0, [sp, #8]
 800d914:	f000 fc32 	bl	800e17c <__lshift>
 800d918:	1be4      	subs	r4, r4, r7
 800d91a:	4605      	mov	r5, r0
 800d91c:	f100 0914 	add.w	r9, r0, #20
 800d920:	f04f 0a00 	mov.w	sl, #0
 800d924:	e7a8      	b.n	800d878 <__gethex+0x1ce>
 800d926:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d92a:	42a0      	cmp	r0, r4
 800d92c:	dd6a      	ble.n	800da04 <__gethex+0x35a>
 800d92e:	1b04      	subs	r4, r0, r4
 800d930:	42a6      	cmp	r6, r4
 800d932:	dc2e      	bgt.n	800d992 <__gethex+0x2e8>
 800d934:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d938:	2b02      	cmp	r3, #2
 800d93a:	d022      	beq.n	800d982 <__gethex+0x2d8>
 800d93c:	2b03      	cmp	r3, #3
 800d93e:	d024      	beq.n	800d98a <__gethex+0x2e0>
 800d940:	2b01      	cmp	r3, #1
 800d942:	d115      	bne.n	800d970 <__gethex+0x2c6>
 800d944:	42a6      	cmp	r6, r4
 800d946:	d113      	bne.n	800d970 <__gethex+0x2c6>
 800d948:	2e01      	cmp	r6, #1
 800d94a:	dc0b      	bgt.n	800d964 <__gethex+0x2ba>
 800d94c:	9a06      	ldr	r2, [sp, #24]
 800d94e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	2301      	movs	r3, #1
 800d956:	612b      	str	r3, [r5, #16]
 800d958:	f8c9 3000 	str.w	r3, [r9]
 800d95c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d95e:	2762      	movs	r7, #98	; 0x62
 800d960:	601d      	str	r5, [r3, #0]
 800d962:	e72a      	b.n	800d7ba <__gethex+0x110>
 800d964:	1e71      	subs	r1, r6, #1
 800d966:	4628      	mov	r0, r5
 800d968:	f000 fde6 	bl	800e538 <__any_on>
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d1ed      	bne.n	800d94c <__gethex+0x2a2>
 800d970:	4629      	mov	r1, r5
 800d972:	9802      	ldr	r0, [sp, #8]
 800d974:	f000 fa36 	bl	800dde4 <_Bfree>
 800d978:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d97a:	2300      	movs	r3, #0
 800d97c:	6013      	str	r3, [r2, #0]
 800d97e:	2750      	movs	r7, #80	; 0x50
 800d980:	e71b      	b.n	800d7ba <__gethex+0x110>
 800d982:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d984:	2b00      	cmp	r3, #0
 800d986:	d0e1      	beq.n	800d94c <__gethex+0x2a2>
 800d988:	e7f2      	b.n	800d970 <__gethex+0x2c6>
 800d98a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d1dd      	bne.n	800d94c <__gethex+0x2a2>
 800d990:	e7ee      	b.n	800d970 <__gethex+0x2c6>
 800d992:	1e67      	subs	r7, r4, #1
 800d994:	f1ba 0f00 	cmp.w	sl, #0
 800d998:	d131      	bne.n	800d9fe <__gethex+0x354>
 800d99a:	b127      	cbz	r7, 800d9a6 <__gethex+0x2fc>
 800d99c:	4639      	mov	r1, r7
 800d99e:	4628      	mov	r0, r5
 800d9a0:	f000 fdca 	bl	800e538 <__any_on>
 800d9a4:	4682      	mov	sl, r0
 800d9a6:	117a      	asrs	r2, r7, #5
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	f007 071f 	and.w	r7, r7, #31
 800d9ae:	fa03 f707 	lsl.w	r7, r3, r7
 800d9b2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d9b6:	4621      	mov	r1, r4
 800d9b8:	421f      	tst	r7, r3
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	bf18      	it	ne
 800d9be:	f04a 0a02 	orrne.w	sl, sl, #2
 800d9c2:	1b36      	subs	r6, r6, r4
 800d9c4:	f7ff fe22 	bl	800d60c <rshift>
 800d9c8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d9cc:	2702      	movs	r7, #2
 800d9ce:	f1ba 0f00 	cmp.w	sl, #0
 800d9d2:	d048      	beq.n	800da66 <__gethex+0x3bc>
 800d9d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	d015      	beq.n	800da08 <__gethex+0x35e>
 800d9dc:	2b03      	cmp	r3, #3
 800d9de:	d017      	beq.n	800da10 <__gethex+0x366>
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d109      	bne.n	800d9f8 <__gethex+0x34e>
 800d9e4:	f01a 0f02 	tst.w	sl, #2
 800d9e8:	d006      	beq.n	800d9f8 <__gethex+0x34e>
 800d9ea:	f8d9 3000 	ldr.w	r3, [r9]
 800d9ee:	ea4a 0a03 	orr.w	sl, sl, r3
 800d9f2:	f01a 0f01 	tst.w	sl, #1
 800d9f6:	d10e      	bne.n	800da16 <__gethex+0x36c>
 800d9f8:	f047 0710 	orr.w	r7, r7, #16
 800d9fc:	e033      	b.n	800da66 <__gethex+0x3bc>
 800d9fe:	f04f 0a01 	mov.w	sl, #1
 800da02:	e7d0      	b.n	800d9a6 <__gethex+0x2fc>
 800da04:	2701      	movs	r7, #1
 800da06:	e7e2      	b.n	800d9ce <__gethex+0x324>
 800da08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da0a:	f1c3 0301 	rsb	r3, r3, #1
 800da0e:	9315      	str	r3, [sp, #84]	; 0x54
 800da10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da12:	2b00      	cmp	r3, #0
 800da14:	d0f0      	beq.n	800d9f8 <__gethex+0x34e>
 800da16:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800da1a:	f105 0314 	add.w	r3, r5, #20
 800da1e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800da22:	eb03 010a 	add.w	r1, r3, sl
 800da26:	f04f 0c00 	mov.w	ip, #0
 800da2a:	4618      	mov	r0, r3
 800da2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da30:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800da34:	d01c      	beq.n	800da70 <__gethex+0x3c6>
 800da36:	3201      	adds	r2, #1
 800da38:	6002      	str	r2, [r0, #0]
 800da3a:	2f02      	cmp	r7, #2
 800da3c:	f105 0314 	add.w	r3, r5, #20
 800da40:	d138      	bne.n	800dab4 <__gethex+0x40a>
 800da42:	f8d8 2000 	ldr.w	r2, [r8]
 800da46:	3a01      	subs	r2, #1
 800da48:	42b2      	cmp	r2, r6
 800da4a:	d10a      	bne.n	800da62 <__gethex+0x3b8>
 800da4c:	1171      	asrs	r1, r6, #5
 800da4e:	2201      	movs	r2, #1
 800da50:	f006 061f 	and.w	r6, r6, #31
 800da54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da58:	fa02 f606 	lsl.w	r6, r2, r6
 800da5c:	421e      	tst	r6, r3
 800da5e:	bf18      	it	ne
 800da60:	4617      	movne	r7, r2
 800da62:	f047 0720 	orr.w	r7, r7, #32
 800da66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da68:	601d      	str	r5, [r3, #0]
 800da6a:	9b06      	ldr	r3, [sp, #24]
 800da6c:	601c      	str	r4, [r3, #0]
 800da6e:	e6a4      	b.n	800d7ba <__gethex+0x110>
 800da70:	4299      	cmp	r1, r3
 800da72:	f843 cc04 	str.w	ip, [r3, #-4]
 800da76:	d8d8      	bhi.n	800da2a <__gethex+0x380>
 800da78:	68ab      	ldr	r3, [r5, #8]
 800da7a:	4599      	cmp	r9, r3
 800da7c:	db12      	blt.n	800daa4 <__gethex+0x3fa>
 800da7e:	6869      	ldr	r1, [r5, #4]
 800da80:	9802      	ldr	r0, [sp, #8]
 800da82:	3101      	adds	r1, #1
 800da84:	f000 f97a 	bl	800dd7c <_Balloc>
 800da88:	692a      	ldr	r2, [r5, #16]
 800da8a:	3202      	adds	r2, #2
 800da8c:	f105 010c 	add.w	r1, r5, #12
 800da90:	4683      	mov	fp, r0
 800da92:	0092      	lsls	r2, r2, #2
 800da94:	300c      	adds	r0, #12
 800da96:	f7fc ff97 	bl	800a9c8 <memcpy>
 800da9a:	4629      	mov	r1, r5
 800da9c:	9802      	ldr	r0, [sp, #8]
 800da9e:	f000 f9a1 	bl	800dde4 <_Bfree>
 800daa2:	465d      	mov	r5, fp
 800daa4:	692b      	ldr	r3, [r5, #16]
 800daa6:	1c5a      	adds	r2, r3, #1
 800daa8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800daac:	612a      	str	r2, [r5, #16]
 800daae:	2201      	movs	r2, #1
 800dab0:	615a      	str	r2, [r3, #20]
 800dab2:	e7c2      	b.n	800da3a <__gethex+0x390>
 800dab4:	692a      	ldr	r2, [r5, #16]
 800dab6:	454a      	cmp	r2, r9
 800dab8:	dd0b      	ble.n	800dad2 <__gethex+0x428>
 800daba:	2101      	movs	r1, #1
 800dabc:	4628      	mov	r0, r5
 800dabe:	f7ff fda5 	bl	800d60c <rshift>
 800dac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dac6:	3401      	adds	r4, #1
 800dac8:	42a3      	cmp	r3, r4
 800daca:	f6ff aed9 	blt.w	800d880 <__gethex+0x1d6>
 800dace:	2701      	movs	r7, #1
 800dad0:	e7c7      	b.n	800da62 <__gethex+0x3b8>
 800dad2:	f016 061f 	ands.w	r6, r6, #31
 800dad6:	d0fa      	beq.n	800dace <__gethex+0x424>
 800dad8:	449a      	add	sl, r3
 800dada:	f1c6 0620 	rsb	r6, r6, #32
 800dade:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800dae2:	f000 fa0f 	bl	800df04 <__hi0bits>
 800dae6:	42b0      	cmp	r0, r6
 800dae8:	dbe7      	blt.n	800daba <__gethex+0x410>
 800daea:	e7f0      	b.n	800dace <__gethex+0x424>

0800daec <L_shift>:
 800daec:	f1c2 0208 	rsb	r2, r2, #8
 800daf0:	0092      	lsls	r2, r2, #2
 800daf2:	b570      	push	{r4, r5, r6, lr}
 800daf4:	f1c2 0620 	rsb	r6, r2, #32
 800daf8:	6843      	ldr	r3, [r0, #4]
 800dafa:	6804      	ldr	r4, [r0, #0]
 800dafc:	fa03 f506 	lsl.w	r5, r3, r6
 800db00:	432c      	orrs	r4, r5
 800db02:	40d3      	lsrs	r3, r2
 800db04:	6004      	str	r4, [r0, #0]
 800db06:	f840 3f04 	str.w	r3, [r0, #4]!
 800db0a:	4288      	cmp	r0, r1
 800db0c:	d3f4      	bcc.n	800daf8 <L_shift+0xc>
 800db0e:	bd70      	pop	{r4, r5, r6, pc}

0800db10 <__match>:
 800db10:	b530      	push	{r4, r5, lr}
 800db12:	6803      	ldr	r3, [r0, #0]
 800db14:	3301      	adds	r3, #1
 800db16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db1a:	b914      	cbnz	r4, 800db22 <__match+0x12>
 800db1c:	6003      	str	r3, [r0, #0]
 800db1e:	2001      	movs	r0, #1
 800db20:	bd30      	pop	{r4, r5, pc}
 800db22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800db2a:	2d19      	cmp	r5, #25
 800db2c:	bf98      	it	ls
 800db2e:	3220      	addls	r2, #32
 800db30:	42a2      	cmp	r2, r4
 800db32:	d0f0      	beq.n	800db16 <__match+0x6>
 800db34:	2000      	movs	r0, #0
 800db36:	e7f3      	b.n	800db20 <__match+0x10>

0800db38 <__hexnan>:
 800db38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	680b      	ldr	r3, [r1, #0]
 800db3e:	6801      	ldr	r1, [r0, #0]
 800db40:	115f      	asrs	r7, r3, #5
 800db42:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800db46:	f013 031f 	ands.w	r3, r3, #31
 800db4a:	b087      	sub	sp, #28
 800db4c:	bf18      	it	ne
 800db4e:	3704      	addne	r7, #4
 800db50:	2500      	movs	r5, #0
 800db52:	1f3e      	subs	r6, r7, #4
 800db54:	4682      	mov	sl, r0
 800db56:	4690      	mov	r8, r2
 800db58:	9301      	str	r3, [sp, #4]
 800db5a:	f847 5c04 	str.w	r5, [r7, #-4]
 800db5e:	46b1      	mov	r9, r6
 800db60:	4634      	mov	r4, r6
 800db62:	9502      	str	r5, [sp, #8]
 800db64:	46ab      	mov	fp, r5
 800db66:	784a      	ldrb	r2, [r1, #1]
 800db68:	1c4b      	adds	r3, r1, #1
 800db6a:	9303      	str	r3, [sp, #12]
 800db6c:	b342      	cbz	r2, 800dbc0 <__hexnan+0x88>
 800db6e:	4610      	mov	r0, r2
 800db70:	9105      	str	r1, [sp, #20]
 800db72:	9204      	str	r2, [sp, #16]
 800db74:	f7ff fd84 	bl	800d680 <__hexdig_fun>
 800db78:	2800      	cmp	r0, #0
 800db7a:	d143      	bne.n	800dc04 <__hexnan+0xcc>
 800db7c:	9a04      	ldr	r2, [sp, #16]
 800db7e:	9905      	ldr	r1, [sp, #20]
 800db80:	2a20      	cmp	r2, #32
 800db82:	d818      	bhi.n	800dbb6 <__hexnan+0x7e>
 800db84:	9b02      	ldr	r3, [sp, #8]
 800db86:	459b      	cmp	fp, r3
 800db88:	dd13      	ble.n	800dbb2 <__hexnan+0x7a>
 800db8a:	454c      	cmp	r4, r9
 800db8c:	d206      	bcs.n	800db9c <__hexnan+0x64>
 800db8e:	2d07      	cmp	r5, #7
 800db90:	dc04      	bgt.n	800db9c <__hexnan+0x64>
 800db92:	462a      	mov	r2, r5
 800db94:	4649      	mov	r1, r9
 800db96:	4620      	mov	r0, r4
 800db98:	f7ff ffa8 	bl	800daec <L_shift>
 800db9c:	4544      	cmp	r4, r8
 800db9e:	d944      	bls.n	800dc2a <__hexnan+0xf2>
 800dba0:	2300      	movs	r3, #0
 800dba2:	f1a4 0904 	sub.w	r9, r4, #4
 800dba6:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbaa:	f8cd b008 	str.w	fp, [sp, #8]
 800dbae:	464c      	mov	r4, r9
 800dbb0:	461d      	mov	r5, r3
 800dbb2:	9903      	ldr	r1, [sp, #12]
 800dbb4:	e7d7      	b.n	800db66 <__hexnan+0x2e>
 800dbb6:	2a29      	cmp	r2, #41	; 0x29
 800dbb8:	d14a      	bne.n	800dc50 <__hexnan+0x118>
 800dbba:	3102      	adds	r1, #2
 800dbbc:	f8ca 1000 	str.w	r1, [sl]
 800dbc0:	f1bb 0f00 	cmp.w	fp, #0
 800dbc4:	d044      	beq.n	800dc50 <__hexnan+0x118>
 800dbc6:	454c      	cmp	r4, r9
 800dbc8:	d206      	bcs.n	800dbd8 <__hexnan+0xa0>
 800dbca:	2d07      	cmp	r5, #7
 800dbcc:	dc04      	bgt.n	800dbd8 <__hexnan+0xa0>
 800dbce:	462a      	mov	r2, r5
 800dbd0:	4649      	mov	r1, r9
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f7ff ff8a 	bl	800daec <L_shift>
 800dbd8:	4544      	cmp	r4, r8
 800dbda:	d928      	bls.n	800dc2e <__hexnan+0xf6>
 800dbdc:	4643      	mov	r3, r8
 800dbde:	f854 2b04 	ldr.w	r2, [r4], #4
 800dbe2:	f843 2b04 	str.w	r2, [r3], #4
 800dbe6:	42a6      	cmp	r6, r4
 800dbe8:	d2f9      	bcs.n	800dbde <__hexnan+0xa6>
 800dbea:	2200      	movs	r2, #0
 800dbec:	f843 2b04 	str.w	r2, [r3], #4
 800dbf0:	429e      	cmp	r6, r3
 800dbf2:	d2fb      	bcs.n	800dbec <__hexnan+0xb4>
 800dbf4:	6833      	ldr	r3, [r6, #0]
 800dbf6:	b91b      	cbnz	r3, 800dc00 <__hexnan+0xc8>
 800dbf8:	4546      	cmp	r6, r8
 800dbfa:	d127      	bne.n	800dc4c <__hexnan+0x114>
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	6033      	str	r3, [r6, #0]
 800dc00:	2005      	movs	r0, #5
 800dc02:	e026      	b.n	800dc52 <__hexnan+0x11a>
 800dc04:	3501      	adds	r5, #1
 800dc06:	2d08      	cmp	r5, #8
 800dc08:	f10b 0b01 	add.w	fp, fp, #1
 800dc0c:	dd06      	ble.n	800dc1c <__hexnan+0xe4>
 800dc0e:	4544      	cmp	r4, r8
 800dc10:	d9cf      	bls.n	800dbb2 <__hexnan+0x7a>
 800dc12:	2300      	movs	r3, #0
 800dc14:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc18:	2501      	movs	r5, #1
 800dc1a:	3c04      	subs	r4, #4
 800dc1c:	6822      	ldr	r2, [r4, #0]
 800dc1e:	f000 000f 	and.w	r0, r0, #15
 800dc22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800dc26:	6020      	str	r0, [r4, #0]
 800dc28:	e7c3      	b.n	800dbb2 <__hexnan+0x7a>
 800dc2a:	2508      	movs	r5, #8
 800dc2c:	e7c1      	b.n	800dbb2 <__hexnan+0x7a>
 800dc2e:	9b01      	ldr	r3, [sp, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d0df      	beq.n	800dbf4 <__hexnan+0xbc>
 800dc34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc38:	f1c3 0320 	rsb	r3, r3, #32
 800dc3c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc40:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800dc44:	401a      	ands	r2, r3
 800dc46:	f847 2c04 	str.w	r2, [r7, #-4]
 800dc4a:	e7d3      	b.n	800dbf4 <__hexnan+0xbc>
 800dc4c:	3e04      	subs	r6, #4
 800dc4e:	e7d1      	b.n	800dbf4 <__hexnan+0xbc>
 800dc50:	2004      	movs	r0, #4
 800dc52:	b007      	add	sp, #28
 800dc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc58 <__locale_ctype_ptr_l>:
 800dc58:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800dc5c:	4770      	bx	lr

0800dc5e <__localeconv_l>:
 800dc5e:	30f0      	adds	r0, #240	; 0xf0
 800dc60:	4770      	bx	lr
	...

0800dc64 <_localeconv_r>:
 800dc64:	4b04      	ldr	r3, [pc, #16]	; (800dc78 <_localeconv_r+0x14>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	6a18      	ldr	r0, [r3, #32]
 800dc6a:	4b04      	ldr	r3, [pc, #16]	; (800dc7c <_localeconv_r+0x18>)
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	bf08      	it	eq
 800dc70:	4618      	moveq	r0, r3
 800dc72:	30f0      	adds	r0, #240	; 0xf0
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	2000000c 	.word	0x2000000c
 800dc7c:	20000070 	.word	0x20000070

0800dc80 <__swhatbuf_r>:
 800dc80:	b570      	push	{r4, r5, r6, lr}
 800dc82:	460e      	mov	r6, r1
 800dc84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc88:	2900      	cmp	r1, #0
 800dc8a:	b096      	sub	sp, #88	; 0x58
 800dc8c:	4614      	mov	r4, r2
 800dc8e:	461d      	mov	r5, r3
 800dc90:	da07      	bge.n	800dca2 <__swhatbuf_r+0x22>
 800dc92:	2300      	movs	r3, #0
 800dc94:	602b      	str	r3, [r5, #0]
 800dc96:	89b3      	ldrh	r3, [r6, #12]
 800dc98:	061a      	lsls	r2, r3, #24
 800dc9a:	d410      	bmi.n	800dcbe <__swhatbuf_r+0x3e>
 800dc9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dca0:	e00e      	b.n	800dcc0 <__swhatbuf_r+0x40>
 800dca2:	466a      	mov	r2, sp
 800dca4:	f001 f846 	bl	800ed34 <_fstat_r>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	dbf2      	blt.n	800dc92 <__swhatbuf_r+0x12>
 800dcac:	9a01      	ldr	r2, [sp, #4]
 800dcae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dcb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dcb6:	425a      	negs	r2, r3
 800dcb8:	415a      	adcs	r2, r3
 800dcba:	602a      	str	r2, [r5, #0]
 800dcbc:	e7ee      	b.n	800dc9c <__swhatbuf_r+0x1c>
 800dcbe:	2340      	movs	r3, #64	; 0x40
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	6023      	str	r3, [r4, #0]
 800dcc4:	b016      	add	sp, #88	; 0x58
 800dcc6:	bd70      	pop	{r4, r5, r6, pc}

0800dcc8 <__smakebuf_r>:
 800dcc8:	898b      	ldrh	r3, [r1, #12]
 800dcca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dccc:	079d      	lsls	r5, r3, #30
 800dcce:	4606      	mov	r6, r0
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	d507      	bpl.n	800dce4 <__smakebuf_r+0x1c>
 800dcd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dcd8:	6023      	str	r3, [r4, #0]
 800dcda:	6123      	str	r3, [r4, #16]
 800dcdc:	2301      	movs	r3, #1
 800dcde:	6163      	str	r3, [r4, #20]
 800dce0:	b002      	add	sp, #8
 800dce2:	bd70      	pop	{r4, r5, r6, pc}
 800dce4:	ab01      	add	r3, sp, #4
 800dce6:	466a      	mov	r2, sp
 800dce8:	f7ff ffca 	bl	800dc80 <__swhatbuf_r>
 800dcec:	9900      	ldr	r1, [sp, #0]
 800dcee:	4605      	mov	r5, r0
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f000 fc9f 	bl	800e634 <_malloc_r>
 800dcf6:	b948      	cbnz	r0, 800dd0c <__smakebuf_r+0x44>
 800dcf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcfc:	059a      	lsls	r2, r3, #22
 800dcfe:	d4ef      	bmi.n	800dce0 <__smakebuf_r+0x18>
 800dd00:	f023 0303 	bic.w	r3, r3, #3
 800dd04:	f043 0302 	orr.w	r3, r3, #2
 800dd08:	81a3      	strh	r3, [r4, #12]
 800dd0a:	e7e3      	b.n	800dcd4 <__smakebuf_r+0xc>
 800dd0c:	4b0d      	ldr	r3, [pc, #52]	; (800dd44 <__smakebuf_r+0x7c>)
 800dd0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	6020      	str	r0, [r4, #0]
 800dd14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd18:	81a3      	strh	r3, [r4, #12]
 800dd1a:	9b00      	ldr	r3, [sp, #0]
 800dd1c:	6163      	str	r3, [r4, #20]
 800dd1e:	9b01      	ldr	r3, [sp, #4]
 800dd20:	6120      	str	r0, [r4, #16]
 800dd22:	b15b      	cbz	r3, 800dd3c <__smakebuf_r+0x74>
 800dd24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f001 f815 	bl	800ed58 <_isatty_r>
 800dd2e:	b128      	cbz	r0, 800dd3c <__smakebuf_r+0x74>
 800dd30:	89a3      	ldrh	r3, [r4, #12]
 800dd32:	f023 0303 	bic.w	r3, r3, #3
 800dd36:	f043 0301 	orr.w	r3, r3, #1
 800dd3a:	81a3      	strh	r3, [r4, #12]
 800dd3c:	89a3      	ldrh	r3, [r4, #12]
 800dd3e:	431d      	orrs	r5, r3
 800dd40:	81a5      	strh	r5, [r4, #12]
 800dd42:	e7cd      	b.n	800dce0 <__smakebuf_r+0x18>
 800dd44:	0800d4c1 	.word	0x0800d4c1

0800dd48 <malloc>:
 800dd48:	4b02      	ldr	r3, [pc, #8]	; (800dd54 <malloc+0xc>)
 800dd4a:	4601      	mov	r1, r0
 800dd4c:	6818      	ldr	r0, [r3, #0]
 800dd4e:	f000 bc71 	b.w	800e634 <_malloc_r>
 800dd52:	bf00      	nop
 800dd54:	2000000c 	.word	0x2000000c

0800dd58 <__ascii_mbtowc>:
 800dd58:	b082      	sub	sp, #8
 800dd5a:	b901      	cbnz	r1, 800dd5e <__ascii_mbtowc+0x6>
 800dd5c:	a901      	add	r1, sp, #4
 800dd5e:	b142      	cbz	r2, 800dd72 <__ascii_mbtowc+0x1a>
 800dd60:	b14b      	cbz	r3, 800dd76 <__ascii_mbtowc+0x1e>
 800dd62:	7813      	ldrb	r3, [r2, #0]
 800dd64:	600b      	str	r3, [r1, #0]
 800dd66:	7812      	ldrb	r2, [r2, #0]
 800dd68:	1c10      	adds	r0, r2, #0
 800dd6a:	bf18      	it	ne
 800dd6c:	2001      	movne	r0, #1
 800dd6e:	b002      	add	sp, #8
 800dd70:	4770      	bx	lr
 800dd72:	4610      	mov	r0, r2
 800dd74:	e7fb      	b.n	800dd6e <__ascii_mbtowc+0x16>
 800dd76:	f06f 0001 	mvn.w	r0, #1
 800dd7a:	e7f8      	b.n	800dd6e <__ascii_mbtowc+0x16>

0800dd7c <_Balloc>:
 800dd7c:	b570      	push	{r4, r5, r6, lr}
 800dd7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd80:	4604      	mov	r4, r0
 800dd82:	460e      	mov	r6, r1
 800dd84:	b93d      	cbnz	r5, 800dd96 <_Balloc+0x1a>
 800dd86:	2010      	movs	r0, #16
 800dd88:	f7ff ffde 	bl	800dd48 <malloc>
 800dd8c:	6260      	str	r0, [r4, #36]	; 0x24
 800dd8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd92:	6005      	str	r5, [r0, #0]
 800dd94:	60c5      	str	r5, [r0, #12]
 800dd96:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dd98:	68eb      	ldr	r3, [r5, #12]
 800dd9a:	b183      	cbz	r3, 800ddbe <_Balloc+0x42>
 800dd9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dda4:	b9b8      	cbnz	r0, 800ddd6 <_Balloc+0x5a>
 800dda6:	2101      	movs	r1, #1
 800dda8:	fa01 f506 	lsl.w	r5, r1, r6
 800ddac:	1d6a      	adds	r2, r5, #5
 800ddae:	0092      	lsls	r2, r2, #2
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f000 fbe2 	bl	800e57a <_calloc_r>
 800ddb6:	b160      	cbz	r0, 800ddd2 <_Balloc+0x56>
 800ddb8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ddbc:	e00e      	b.n	800dddc <_Balloc+0x60>
 800ddbe:	2221      	movs	r2, #33	; 0x21
 800ddc0:	2104      	movs	r1, #4
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f000 fbd9 	bl	800e57a <_calloc_r>
 800ddc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddca:	60e8      	str	r0, [r5, #12]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1e4      	bne.n	800dd9c <_Balloc+0x20>
 800ddd2:	2000      	movs	r0, #0
 800ddd4:	bd70      	pop	{r4, r5, r6, pc}
 800ddd6:	6802      	ldr	r2, [r0, #0]
 800ddd8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dddc:	2300      	movs	r3, #0
 800ddde:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dde2:	e7f7      	b.n	800ddd4 <_Balloc+0x58>

0800dde4 <_Bfree>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dde8:	4606      	mov	r6, r0
 800ddea:	460d      	mov	r5, r1
 800ddec:	b93c      	cbnz	r4, 800ddfe <_Bfree+0x1a>
 800ddee:	2010      	movs	r0, #16
 800ddf0:	f7ff ffaa 	bl	800dd48 <malloc>
 800ddf4:	6270      	str	r0, [r6, #36]	; 0x24
 800ddf6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddfa:	6004      	str	r4, [r0, #0]
 800ddfc:	60c4      	str	r4, [r0, #12]
 800ddfe:	b13d      	cbz	r5, 800de10 <_Bfree+0x2c>
 800de00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800de02:	686a      	ldr	r2, [r5, #4]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de0a:	6029      	str	r1, [r5, #0]
 800de0c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800de10:	bd70      	pop	{r4, r5, r6, pc}

0800de12 <__multadd>:
 800de12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de16:	690d      	ldr	r5, [r1, #16]
 800de18:	461f      	mov	r7, r3
 800de1a:	4606      	mov	r6, r0
 800de1c:	460c      	mov	r4, r1
 800de1e:	f101 0c14 	add.w	ip, r1, #20
 800de22:	2300      	movs	r3, #0
 800de24:	f8dc 0000 	ldr.w	r0, [ip]
 800de28:	b281      	uxth	r1, r0
 800de2a:	fb02 7101 	mla	r1, r2, r1, r7
 800de2e:	0c0f      	lsrs	r7, r1, #16
 800de30:	0c00      	lsrs	r0, r0, #16
 800de32:	fb02 7000 	mla	r0, r2, r0, r7
 800de36:	b289      	uxth	r1, r1
 800de38:	3301      	adds	r3, #1
 800de3a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800de3e:	429d      	cmp	r5, r3
 800de40:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800de44:	f84c 1b04 	str.w	r1, [ip], #4
 800de48:	dcec      	bgt.n	800de24 <__multadd+0x12>
 800de4a:	b1d7      	cbz	r7, 800de82 <__multadd+0x70>
 800de4c:	68a3      	ldr	r3, [r4, #8]
 800de4e:	42ab      	cmp	r3, r5
 800de50:	dc12      	bgt.n	800de78 <__multadd+0x66>
 800de52:	6861      	ldr	r1, [r4, #4]
 800de54:	4630      	mov	r0, r6
 800de56:	3101      	adds	r1, #1
 800de58:	f7ff ff90 	bl	800dd7c <_Balloc>
 800de5c:	6922      	ldr	r2, [r4, #16]
 800de5e:	3202      	adds	r2, #2
 800de60:	f104 010c 	add.w	r1, r4, #12
 800de64:	4680      	mov	r8, r0
 800de66:	0092      	lsls	r2, r2, #2
 800de68:	300c      	adds	r0, #12
 800de6a:	f7fc fdad 	bl	800a9c8 <memcpy>
 800de6e:	4621      	mov	r1, r4
 800de70:	4630      	mov	r0, r6
 800de72:	f7ff ffb7 	bl	800dde4 <_Bfree>
 800de76:	4644      	mov	r4, r8
 800de78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de7c:	3501      	adds	r5, #1
 800de7e:	615f      	str	r7, [r3, #20]
 800de80:	6125      	str	r5, [r4, #16]
 800de82:	4620      	mov	r0, r4
 800de84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de88 <__s2b>:
 800de88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de8c:	460c      	mov	r4, r1
 800de8e:	4615      	mov	r5, r2
 800de90:	461f      	mov	r7, r3
 800de92:	2209      	movs	r2, #9
 800de94:	3308      	adds	r3, #8
 800de96:	4606      	mov	r6, r0
 800de98:	fb93 f3f2 	sdiv	r3, r3, r2
 800de9c:	2100      	movs	r1, #0
 800de9e:	2201      	movs	r2, #1
 800dea0:	429a      	cmp	r2, r3
 800dea2:	db20      	blt.n	800dee6 <__s2b+0x5e>
 800dea4:	4630      	mov	r0, r6
 800dea6:	f7ff ff69 	bl	800dd7c <_Balloc>
 800deaa:	9b08      	ldr	r3, [sp, #32]
 800deac:	6143      	str	r3, [r0, #20]
 800deae:	2d09      	cmp	r5, #9
 800deb0:	f04f 0301 	mov.w	r3, #1
 800deb4:	6103      	str	r3, [r0, #16]
 800deb6:	dd19      	ble.n	800deec <__s2b+0x64>
 800deb8:	f104 0809 	add.w	r8, r4, #9
 800debc:	46c1      	mov	r9, r8
 800debe:	442c      	add	r4, r5
 800dec0:	f819 3b01 	ldrb.w	r3, [r9], #1
 800dec4:	4601      	mov	r1, r0
 800dec6:	3b30      	subs	r3, #48	; 0x30
 800dec8:	220a      	movs	r2, #10
 800deca:	4630      	mov	r0, r6
 800decc:	f7ff ffa1 	bl	800de12 <__multadd>
 800ded0:	45a1      	cmp	r9, r4
 800ded2:	d1f5      	bne.n	800dec0 <__s2b+0x38>
 800ded4:	eb08 0405 	add.w	r4, r8, r5
 800ded8:	3c08      	subs	r4, #8
 800deda:	1b2d      	subs	r5, r5, r4
 800dedc:	1963      	adds	r3, r4, r5
 800dede:	42bb      	cmp	r3, r7
 800dee0:	db07      	blt.n	800def2 <__s2b+0x6a>
 800dee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dee6:	0052      	lsls	r2, r2, #1
 800dee8:	3101      	adds	r1, #1
 800deea:	e7d9      	b.n	800dea0 <__s2b+0x18>
 800deec:	340a      	adds	r4, #10
 800deee:	2509      	movs	r5, #9
 800def0:	e7f3      	b.n	800deda <__s2b+0x52>
 800def2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800def6:	4601      	mov	r1, r0
 800def8:	3b30      	subs	r3, #48	; 0x30
 800defa:	220a      	movs	r2, #10
 800defc:	4630      	mov	r0, r6
 800defe:	f7ff ff88 	bl	800de12 <__multadd>
 800df02:	e7eb      	b.n	800dedc <__s2b+0x54>

0800df04 <__hi0bits>:
 800df04:	0c02      	lsrs	r2, r0, #16
 800df06:	0412      	lsls	r2, r2, #16
 800df08:	4603      	mov	r3, r0
 800df0a:	b9b2      	cbnz	r2, 800df3a <__hi0bits+0x36>
 800df0c:	0403      	lsls	r3, r0, #16
 800df0e:	2010      	movs	r0, #16
 800df10:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800df14:	bf04      	itt	eq
 800df16:	021b      	lsleq	r3, r3, #8
 800df18:	3008      	addeq	r0, #8
 800df1a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800df1e:	bf04      	itt	eq
 800df20:	011b      	lsleq	r3, r3, #4
 800df22:	3004      	addeq	r0, #4
 800df24:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800df28:	bf04      	itt	eq
 800df2a:	009b      	lsleq	r3, r3, #2
 800df2c:	3002      	addeq	r0, #2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	db06      	blt.n	800df40 <__hi0bits+0x3c>
 800df32:	005b      	lsls	r3, r3, #1
 800df34:	d503      	bpl.n	800df3e <__hi0bits+0x3a>
 800df36:	3001      	adds	r0, #1
 800df38:	4770      	bx	lr
 800df3a:	2000      	movs	r0, #0
 800df3c:	e7e8      	b.n	800df10 <__hi0bits+0xc>
 800df3e:	2020      	movs	r0, #32
 800df40:	4770      	bx	lr

0800df42 <__lo0bits>:
 800df42:	6803      	ldr	r3, [r0, #0]
 800df44:	f013 0207 	ands.w	r2, r3, #7
 800df48:	4601      	mov	r1, r0
 800df4a:	d00b      	beq.n	800df64 <__lo0bits+0x22>
 800df4c:	07da      	lsls	r2, r3, #31
 800df4e:	d423      	bmi.n	800df98 <__lo0bits+0x56>
 800df50:	0798      	lsls	r0, r3, #30
 800df52:	bf49      	itett	mi
 800df54:	085b      	lsrmi	r3, r3, #1
 800df56:	089b      	lsrpl	r3, r3, #2
 800df58:	2001      	movmi	r0, #1
 800df5a:	600b      	strmi	r3, [r1, #0]
 800df5c:	bf5c      	itt	pl
 800df5e:	600b      	strpl	r3, [r1, #0]
 800df60:	2002      	movpl	r0, #2
 800df62:	4770      	bx	lr
 800df64:	b298      	uxth	r0, r3
 800df66:	b9a8      	cbnz	r0, 800df94 <__lo0bits+0x52>
 800df68:	0c1b      	lsrs	r3, r3, #16
 800df6a:	2010      	movs	r0, #16
 800df6c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800df70:	bf04      	itt	eq
 800df72:	0a1b      	lsreq	r3, r3, #8
 800df74:	3008      	addeq	r0, #8
 800df76:	071a      	lsls	r2, r3, #28
 800df78:	bf04      	itt	eq
 800df7a:	091b      	lsreq	r3, r3, #4
 800df7c:	3004      	addeq	r0, #4
 800df7e:	079a      	lsls	r2, r3, #30
 800df80:	bf04      	itt	eq
 800df82:	089b      	lsreq	r3, r3, #2
 800df84:	3002      	addeq	r0, #2
 800df86:	07da      	lsls	r2, r3, #31
 800df88:	d402      	bmi.n	800df90 <__lo0bits+0x4e>
 800df8a:	085b      	lsrs	r3, r3, #1
 800df8c:	d006      	beq.n	800df9c <__lo0bits+0x5a>
 800df8e:	3001      	adds	r0, #1
 800df90:	600b      	str	r3, [r1, #0]
 800df92:	4770      	bx	lr
 800df94:	4610      	mov	r0, r2
 800df96:	e7e9      	b.n	800df6c <__lo0bits+0x2a>
 800df98:	2000      	movs	r0, #0
 800df9a:	4770      	bx	lr
 800df9c:	2020      	movs	r0, #32
 800df9e:	4770      	bx	lr

0800dfa0 <__i2b>:
 800dfa0:	b510      	push	{r4, lr}
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	2101      	movs	r1, #1
 800dfa6:	f7ff fee9 	bl	800dd7c <_Balloc>
 800dfaa:	2201      	movs	r2, #1
 800dfac:	6144      	str	r4, [r0, #20]
 800dfae:	6102      	str	r2, [r0, #16]
 800dfb0:	bd10      	pop	{r4, pc}

0800dfb2 <__multiply>:
 800dfb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb6:	4614      	mov	r4, r2
 800dfb8:	690a      	ldr	r2, [r1, #16]
 800dfba:	6923      	ldr	r3, [r4, #16]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	bfb8      	it	lt
 800dfc0:	460b      	movlt	r3, r1
 800dfc2:	4688      	mov	r8, r1
 800dfc4:	bfbc      	itt	lt
 800dfc6:	46a0      	movlt	r8, r4
 800dfc8:	461c      	movlt	r4, r3
 800dfca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dfce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dfd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfd6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfda:	eb07 0609 	add.w	r6, r7, r9
 800dfde:	42b3      	cmp	r3, r6
 800dfe0:	bfb8      	it	lt
 800dfe2:	3101      	addlt	r1, #1
 800dfe4:	f7ff feca 	bl	800dd7c <_Balloc>
 800dfe8:	f100 0514 	add.w	r5, r0, #20
 800dfec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dff0:	462b      	mov	r3, r5
 800dff2:	2200      	movs	r2, #0
 800dff4:	4573      	cmp	r3, lr
 800dff6:	d316      	bcc.n	800e026 <__multiply+0x74>
 800dff8:	f104 0214 	add.w	r2, r4, #20
 800dffc:	f108 0114 	add.w	r1, r8, #20
 800e000:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e004:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	9b00      	ldr	r3, [sp, #0]
 800e00c:	9201      	str	r2, [sp, #4]
 800e00e:	4293      	cmp	r3, r2
 800e010:	d80c      	bhi.n	800e02c <__multiply+0x7a>
 800e012:	2e00      	cmp	r6, #0
 800e014:	dd03      	ble.n	800e01e <__multiply+0x6c>
 800e016:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d05d      	beq.n	800e0da <__multiply+0x128>
 800e01e:	6106      	str	r6, [r0, #16]
 800e020:	b003      	add	sp, #12
 800e022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e026:	f843 2b04 	str.w	r2, [r3], #4
 800e02a:	e7e3      	b.n	800dff4 <__multiply+0x42>
 800e02c:	f8b2 b000 	ldrh.w	fp, [r2]
 800e030:	f1bb 0f00 	cmp.w	fp, #0
 800e034:	d023      	beq.n	800e07e <__multiply+0xcc>
 800e036:	4689      	mov	r9, r1
 800e038:	46ac      	mov	ip, r5
 800e03a:	f04f 0800 	mov.w	r8, #0
 800e03e:	f859 4b04 	ldr.w	r4, [r9], #4
 800e042:	f8dc a000 	ldr.w	sl, [ip]
 800e046:	b2a3      	uxth	r3, r4
 800e048:	fa1f fa8a 	uxth.w	sl, sl
 800e04c:	fb0b a303 	mla	r3, fp, r3, sl
 800e050:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e054:	f8dc 4000 	ldr.w	r4, [ip]
 800e058:	4443      	add	r3, r8
 800e05a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e05e:	fb0b 840a 	mla	r4, fp, sl, r8
 800e062:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e066:	46e2      	mov	sl, ip
 800e068:	b29b      	uxth	r3, r3
 800e06a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e06e:	454f      	cmp	r7, r9
 800e070:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e074:	f84a 3b04 	str.w	r3, [sl], #4
 800e078:	d82b      	bhi.n	800e0d2 <__multiply+0x120>
 800e07a:	f8cc 8004 	str.w	r8, [ip, #4]
 800e07e:	9b01      	ldr	r3, [sp, #4]
 800e080:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e084:	3204      	adds	r2, #4
 800e086:	f1ba 0f00 	cmp.w	sl, #0
 800e08a:	d020      	beq.n	800e0ce <__multiply+0x11c>
 800e08c:	682b      	ldr	r3, [r5, #0]
 800e08e:	4689      	mov	r9, r1
 800e090:	46a8      	mov	r8, r5
 800e092:	f04f 0b00 	mov.w	fp, #0
 800e096:	f8b9 c000 	ldrh.w	ip, [r9]
 800e09a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e09e:	fb0a 440c 	mla	r4, sl, ip, r4
 800e0a2:	445c      	add	r4, fp
 800e0a4:	46c4      	mov	ip, r8
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e0ac:	f84c 3b04 	str.w	r3, [ip], #4
 800e0b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e0b8:	0c1b      	lsrs	r3, r3, #16
 800e0ba:	fb0a b303 	mla	r3, sl, r3, fp
 800e0be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e0c2:	454f      	cmp	r7, r9
 800e0c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e0c8:	d805      	bhi.n	800e0d6 <__multiply+0x124>
 800e0ca:	f8c8 3004 	str.w	r3, [r8, #4]
 800e0ce:	3504      	adds	r5, #4
 800e0d0:	e79b      	b.n	800e00a <__multiply+0x58>
 800e0d2:	46d4      	mov	ip, sl
 800e0d4:	e7b3      	b.n	800e03e <__multiply+0x8c>
 800e0d6:	46e0      	mov	r8, ip
 800e0d8:	e7dd      	b.n	800e096 <__multiply+0xe4>
 800e0da:	3e01      	subs	r6, #1
 800e0dc:	e799      	b.n	800e012 <__multiply+0x60>
	...

0800e0e0 <__pow5mult>:
 800e0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0e4:	4615      	mov	r5, r2
 800e0e6:	f012 0203 	ands.w	r2, r2, #3
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	460f      	mov	r7, r1
 800e0ee:	d007      	beq.n	800e100 <__pow5mult+0x20>
 800e0f0:	3a01      	subs	r2, #1
 800e0f2:	4c21      	ldr	r4, [pc, #132]	; (800e178 <__pow5mult+0x98>)
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0fa:	f7ff fe8a 	bl	800de12 <__multadd>
 800e0fe:	4607      	mov	r7, r0
 800e100:	10ad      	asrs	r5, r5, #2
 800e102:	d035      	beq.n	800e170 <__pow5mult+0x90>
 800e104:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e106:	b93c      	cbnz	r4, 800e118 <__pow5mult+0x38>
 800e108:	2010      	movs	r0, #16
 800e10a:	f7ff fe1d 	bl	800dd48 <malloc>
 800e10e:	6270      	str	r0, [r6, #36]	; 0x24
 800e110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e114:	6004      	str	r4, [r0, #0]
 800e116:	60c4      	str	r4, [r0, #12]
 800e118:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e11c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e120:	b94c      	cbnz	r4, 800e136 <__pow5mult+0x56>
 800e122:	f240 2171 	movw	r1, #625	; 0x271
 800e126:	4630      	mov	r0, r6
 800e128:	f7ff ff3a 	bl	800dfa0 <__i2b>
 800e12c:	2300      	movs	r3, #0
 800e12e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e132:	4604      	mov	r4, r0
 800e134:	6003      	str	r3, [r0, #0]
 800e136:	f04f 0800 	mov.w	r8, #0
 800e13a:	07eb      	lsls	r3, r5, #31
 800e13c:	d50a      	bpl.n	800e154 <__pow5mult+0x74>
 800e13e:	4639      	mov	r1, r7
 800e140:	4622      	mov	r2, r4
 800e142:	4630      	mov	r0, r6
 800e144:	f7ff ff35 	bl	800dfb2 <__multiply>
 800e148:	4639      	mov	r1, r7
 800e14a:	4681      	mov	r9, r0
 800e14c:	4630      	mov	r0, r6
 800e14e:	f7ff fe49 	bl	800dde4 <_Bfree>
 800e152:	464f      	mov	r7, r9
 800e154:	106d      	asrs	r5, r5, #1
 800e156:	d00b      	beq.n	800e170 <__pow5mult+0x90>
 800e158:	6820      	ldr	r0, [r4, #0]
 800e15a:	b938      	cbnz	r0, 800e16c <__pow5mult+0x8c>
 800e15c:	4622      	mov	r2, r4
 800e15e:	4621      	mov	r1, r4
 800e160:	4630      	mov	r0, r6
 800e162:	f7ff ff26 	bl	800dfb2 <__multiply>
 800e166:	6020      	str	r0, [r4, #0]
 800e168:	f8c0 8000 	str.w	r8, [r0]
 800e16c:	4604      	mov	r4, r0
 800e16e:	e7e4      	b.n	800e13a <__pow5mult+0x5a>
 800e170:	4638      	mov	r0, r7
 800e172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e176:	bf00      	nop
 800e178:	08010598 	.word	0x08010598

0800e17c <__lshift>:
 800e17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e180:	460c      	mov	r4, r1
 800e182:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e186:	6923      	ldr	r3, [r4, #16]
 800e188:	6849      	ldr	r1, [r1, #4]
 800e18a:	eb0a 0903 	add.w	r9, sl, r3
 800e18e:	68a3      	ldr	r3, [r4, #8]
 800e190:	4607      	mov	r7, r0
 800e192:	4616      	mov	r6, r2
 800e194:	f109 0501 	add.w	r5, r9, #1
 800e198:	42ab      	cmp	r3, r5
 800e19a:	db32      	blt.n	800e202 <__lshift+0x86>
 800e19c:	4638      	mov	r0, r7
 800e19e:	f7ff fded 	bl	800dd7c <_Balloc>
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	4680      	mov	r8, r0
 800e1a6:	f100 0114 	add.w	r1, r0, #20
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	4553      	cmp	r3, sl
 800e1ae:	db2b      	blt.n	800e208 <__lshift+0x8c>
 800e1b0:	6920      	ldr	r0, [r4, #16]
 800e1b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1b6:	f104 0314 	add.w	r3, r4, #20
 800e1ba:	f016 021f 	ands.w	r2, r6, #31
 800e1be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e1c6:	d025      	beq.n	800e214 <__lshift+0x98>
 800e1c8:	f1c2 0e20 	rsb	lr, r2, #32
 800e1cc:	2000      	movs	r0, #0
 800e1ce:	681e      	ldr	r6, [r3, #0]
 800e1d0:	468a      	mov	sl, r1
 800e1d2:	4096      	lsls	r6, r2
 800e1d4:	4330      	orrs	r0, r6
 800e1d6:	f84a 0b04 	str.w	r0, [sl], #4
 800e1da:	f853 0b04 	ldr.w	r0, [r3], #4
 800e1de:	459c      	cmp	ip, r3
 800e1e0:	fa20 f00e 	lsr.w	r0, r0, lr
 800e1e4:	d814      	bhi.n	800e210 <__lshift+0x94>
 800e1e6:	6048      	str	r0, [r1, #4]
 800e1e8:	b108      	cbz	r0, 800e1ee <__lshift+0x72>
 800e1ea:	f109 0502 	add.w	r5, r9, #2
 800e1ee:	3d01      	subs	r5, #1
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	f8c8 5010 	str.w	r5, [r8, #16]
 800e1f6:	4621      	mov	r1, r4
 800e1f8:	f7ff fdf4 	bl	800dde4 <_Bfree>
 800e1fc:	4640      	mov	r0, r8
 800e1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e202:	3101      	adds	r1, #1
 800e204:	005b      	lsls	r3, r3, #1
 800e206:	e7c7      	b.n	800e198 <__lshift+0x1c>
 800e208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e20c:	3301      	adds	r3, #1
 800e20e:	e7cd      	b.n	800e1ac <__lshift+0x30>
 800e210:	4651      	mov	r1, sl
 800e212:	e7dc      	b.n	800e1ce <__lshift+0x52>
 800e214:	3904      	subs	r1, #4
 800e216:	f853 2b04 	ldr.w	r2, [r3], #4
 800e21a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e21e:	459c      	cmp	ip, r3
 800e220:	d8f9      	bhi.n	800e216 <__lshift+0x9a>
 800e222:	e7e4      	b.n	800e1ee <__lshift+0x72>

0800e224 <__mcmp>:
 800e224:	6903      	ldr	r3, [r0, #16]
 800e226:	690a      	ldr	r2, [r1, #16]
 800e228:	1a9b      	subs	r3, r3, r2
 800e22a:	b530      	push	{r4, r5, lr}
 800e22c:	d10c      	bne.n	800e248 <__mcmp+0x24>
 800e22e:	0092      	lsls	r2, r2, #2
 800e230:	3014      	adds	r0, #20
 800e232:	3114      	adds	r1, #20
 800e234:	1884      	adds	r4, r0, r2
 800e236:	4411      	add	r1, r2
 800e238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e23c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e240:	4295      	cmp	r5, r2
 800e242:	d003      	beq.n	800e24c <__mcmp+0x28>
 800e244:	d305      	bcc.n	800e252 <__mcmp+0x2e>
 800e246:	2301      	movs	r3, #1
 800e248:	4618      	mov	r0, r3
 800e24a:	bd30      	pop	{r4, r5, pc}
 800e24c:	42a0      	cmp	r0, r4
 800e24e:	d3f3      	bcc.n	800e238 <__mcmp+0x14>
 800e250:	e7fa      	b.n	800e248 <__mcmp+0x24>
 800e252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e256:	e7f7      	b.n	800e248 <__mcmp+0x24>

0800e258 <__mdiff>:
 800e258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e25c:	460d      	mov	r5, r1
 800e25e:	4607      	mov	r7, r0
 800e260:	4611      	mov	r1, r2
 800e262:	4628      	mov	r0, r5
 800e264:	4614      	mov	r4, r2
 800e266:	f7ff ffdd 	bl	800e224 <__mcmp>
 800e26a:	1e06      	subs	r6, r0, #0
 800e26c:	d108      	bne.n	800e280 <__mdiff+0x28>
 800e26e:	4631      	mov	r1, r6
 800e270:	4638      	mov	r0, r7
 800e272:	f7ff fd83 	bl	800dd7c <_Balloc>
 800e276:	2301      	movs	r3, #1
 800e278:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e280:	bfa4      	itt	ge
 800e282:	4623      	movge	r3, r4
 800e284:	462c      	movge	r4, r5
 800e286:	4638      	mov	r0, r7
 800e288:	6861      	ldr	r1, [r4, #4]
 800e28a:	bfa6      	itte	ge
 800e28c:	461d      	movge	r5, r3
 800e28e:	2600      	movge	r6, #0
 800e290:	2601      	movlt	r6, #1
 800e292:	f7ff fd73 	bl	800dd7c <_Balloc>
 800e296:	692b      	ldr	r3, [r5, #16]
 800e298:	60c6      	str	r6, [r0, #12]
 800e29a:	6926      	ldr	r6, [r4, #16]
 800e29c:	f105 0914 	add.w	r9, r5, #20
 800e2a0:	f104 0214 	add.w	r2, r4, #20
 800e2a4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e2a8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e2ac:	f100 0514 	add.w	r5, r0, #20
 800e2b0:	f04f 0e00 	mov.w	lr, #0
 800e2b4:	f852 ab04 	ldr.w	sl, [r2], #4
 800e2b8:	f859 4b04 	ldr.w	r4, [r9], #4
 800e2bc:	fa1e f18a 	uxtah	r1, lr, sl
 800e2c0:	b2a3      	uxth	r3, r4
 800e2c2:	1ac9      	subs	r1, r1, r3
 800e2c4:	0c23      	lsrs	r3, r4, #16
 800e2c6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e2ca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e2ce:	b289      	uxth	r1, r1
 800e2d0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e2d4:	45c8      	cmp	r8, r9
 800e2d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e2da:	4694      	mov	ip, r2
 800e2dc:	f845 3b04 	str.w	r3, [r5], #4
 800e2e0:	d8e8      	bhi.n	800e2b4 <__mdiff+0x5c>
 800e2e2:	45bc      	cmp	ip, r7
 800e2e4:	d304      	bcc.n	800e2f0 <__mdiff+0x98>
 800e2e6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e2ea:	b183      	cbz	r3, 800e30e <__mdiff+0xb6>
 800e2ec:	6106      	str	r6, [r0, #16]
 800e2ee:	e7c5      	b.n	800e27c <__mdiff+0x24>
 800e2f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e2f4:	fa1e f381 	uxtah	r3, lr, r1
 800e2f8:	141a      	asrs	r2, r3, #16
 800e2fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e304:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e308:	f845 3b04 	str.w	r3, [r5], #4
 800e30c:	e7e9      	b.n	800e2e2 <__mdiff+0x8a>
 800e30e:	3e01      	subs	r6, #1
 800e310:	e7e9      	b.n	800e2e6 <__mdiff+0x8e>
	...

0800e314 <__ulp>:
 800e314:	4b12      	ldr	r3, [pc, #72]	; (800e360 <__ulp+0x4c>)
 800e316:	ee10 2a90 	vmov	r2, s1
 800e31a:	401a      	ands	r2, r3
 800e31c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e320:	2b00      	cmp	r3, #0
 800e322:	dd04      	ble.n	800e32e <__ulp+0x1a>
 800e324:	2000      	movs	r0, #0
 800e326:	4619      	mov	r1, r3
 800e328:	ec41 0b10 	vmov	d0, r0, r1
 800e32c:	4770      	bx	lr
 800e32e:	425b      	negs	r3, r3
 800e330:	151b      	asrs	r3, r3, #20
 800e332:	2b13      	cmp	r3, #19
 800e334:	f04f 0000 	mov.w	r0, #0
 800e338:	f04f 0100 	mov.w	r1, #0
 800e33c:	dc04      	bgt.n	800e348 <__ulp+0x34>
 800e33e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e342:	fa42 f103 	asr.w	r1, r2, r3
 800e346:	e7ef      	b.n	800e328 <__ulp+0x14>
 800e348:	3b14      	subs	r3, #20
 800e34a:	2b1e      	cmp	r3, #30
 800e34c:	f04f 0201 	mov.w	r2, #1
 800e350:	bfda      	itte	le
 800e352:	f1c3 031f 	rsble	r3, r3, #31
 800e356:	fa02 f303 	lslle.w	r3, r2, r3
 800e35a:	4613      	movgt	r3, r2
 800e35c:	4618      	mov	r0, r3
 800e35e:	e7e3      	b.n	800e328 <__ulp+0x14>
 800e360:	7ff00000 	.word	0x7ff00000

0800e364 <__b2d>:
 800e364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e366:	6905      	ldr	r5, [r0, #16]
 800e368:	f100 0714 	add.w	r7, r0, #20
 800e36c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e370:	1f2e      	subs	r6, r5, #4
 800e372:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e376:	4620      	mov	r0, r4
 800e378:	f7ff fdc4 	bl	800df04 <__hi0bits>
 800e37c:	f1c0 0320 	rsb	r3, r0, #32
 800e380:	280a      	cmp	r0, #10
 800e382:	600b      	str	r3, [r1, #0]
 800e384:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e3fc <__b2d+0x98>
 800e388:	dc14      	bgt.n	800e3b4 <__b2d+0x50>
 800e38a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e38e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e392:	42b7      	cmp	r7, r6
 800e394:	ea41 030c 	orr.w	r3, r1, ip
 800e398:	bf34      	ite	cc
 800e39a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e39e:	2100      	movcs	r1, #0
 800e3a0:	3015      	adds	r0, #21
 800e3a2:	fa04 f000 	lsl.w	r0, r4, r0
 800e3a6:	fa21 f10e 	lsr.w	r1, r1, lr
 800e3aa:	ea40 0201 	orr.w	r2, r0, r1
 800e3ae:	ec43 2b10 	vmov	d0, r2, r3
 800e3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3b4:	42b7      	cmp	r7, r6
 800e3b6:	bf3a      	itte	cc
 800e3b8:	f1a5 0608 	subcc.w	r6, r5, #8
 800e3bc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e3c0:	2100      	movcs	r1, #0
 800e3c2:	380b      	subs	r0, #11
 800e3c4:	d015      	beq.n	800e3f2 <__b2d+0x8e>
 800e3c6:	4084      	lsls	r4, r0
 800e3c8:	f1c0 0520 	rsb	r5, r0, #32
 800e3cc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e3d0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e3d4:	42be      	cmp	r6, r7
 800e3d6:	fa21 fc05 	lsr.w	ip, r1, r5
 800e3da:	ea44 030c 	orr.w	r3, r4, ip
 800e3de:	bf8c      	ite	hi
 800e3e0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e3e4:	2400      	movls	r4, #0
 800e3e6:	fa01 f000 	lsl.w	r0, r1, r0
 800e3ea:	40ec      	lsrs	r4, r5
 800e3ec:	ea40 0204 	orr.w	r2, r0, r4
 800e3f0:	e7dd      	b.n	800e3ae <__b2d+0x4a>
 800e3f2:	ea44 030c 	orr.w	r3, r4, ip
 800e3f6:	460a      	mov	r2, r1
 800e3f8:	e7d9      	b.n	800e3ae <__b2d+0x4a>
 800e3fa:	bf00      	nop
 800e3fc:	3ff00000 	.word	0x3ff00000

0800e400 <__d2b>:
 800e400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e404:	460e      	mov	r6, r1
 800e406:	2101      	movs	r1, #1
 800e408:	ec59 8b10 	vmov	r8, r9, d0
 800e40c:	4615      	mov	r5, r2
 800e40e:	f7ff fcb5 	bl	800dd7c <_Balloc>
 800e412:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e416:	4607      	mov	r7, r0
 800e418:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e41c:	bb34      	cbnz	r4, 800e46c <__d2b+0x6c>
 800e41e:	9301      	str	r3, [sp, #4]
 800e420:	f1b8 0300 	subs.w	r3, r8, #0
 800e424:	d027      	beq.n	800e476 <__d2b+0x76>
 800e426:	a802      	add	r0, sp, #8
 800e428:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e42c:	f7ff fd89 	bl	800df42 <__lo0bits>
 800e430:	9900      	ldr	r1, [sp, #0]
 800e432:	b1f0      	cbz	r0, 800e472 <__d2b+0x72>
 800e434:	9a01      	ldr	r2, [sp, #4]
 800e436:	f1c0 0320 	rsb	r3, r0, #32
 800e43a:	fa02 f303 	lsl.w	r3, r2, r3
 800e43e:	430b      	orrs	r3, r1
 800e440:	40c2      	lsrs	r2, r0
 800e442:	617b      	str	r3, [r7, #20]
 800e444:	9201      	str	r2, [sp, #4]
 800e446:	9b01      	ldr	r3, [sp, #4]
 800e448:	61bb      	str	r3, [r7, #24]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	bf14      	ite	ne
 800e44e:	2102      	movne	r1, #2
 800e450:	2101      	moveq	r1, #1
 800e452:	6139      	str	r1, [r7, #16]
 800e454:	b1c4      	cbz	r4, 800e488 <__d2b+0x88>
 800e456:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e45a:	4404      	add	r4, r0
 800e45c:	6034      	str	r4, [r6, #0]
 800e45e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e462:	6028      	str	r0, [r5, #0]
 800e464:	4638      	mov	r0, r7
 800e466:	b003      	add	sp, #12
 800e468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e46c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e470:	e7d5      	b.n	800e41e <__d2b+0x1e>
 800e472:	6179      	str	r1, [r7, #20]
 800e474:	e7e7      	b.n	800e446 <__d2b+0x46>
 800e476:	a801      	add	r0, sp, #4
 800e478:	f7ff fd63 	bl	800df42 <__lo0bits>
 800e47c:	9b01      	ldr	r3, [sp, #4]
 800e47e:	617b      	str	r3, [r7, #20]
 800e480:	2101      	movs	r1, #1
 800e482:	6139      	str	r1, [r7, #16]
 800e484:	3020      	adds	r0, #32
 800e486:	e7e5      	b.n	800e454 <__d2b+0x54>
 800e488:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e48c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e490:	6030      	str	r0, [r6, #0]
 800e492:	6918      	ldr	r0, [r3, #16]
 800e494:	f7ff fd36 	bl	800df04 <__hi0bits>
 800e498:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e49c:	e7e1      	b.n	800e462 <__d2b+0x62>

0800e49e <__ratio>:
 800e49e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a2:	4688      	mov	r8, r1
 800e4a4:	4669      	mov	r1, sp
 800e4a6:	4681      	mov	r9, r0
 800e4a8:	f7ff ff5c 	bl	800e364 <__b2d>
 800e4ac:	a901      	add	r1, sp, #4
 800e4ae:	4640      	mov	r0, r8
 800e4b0:	ec57 6b10 	vmov	r6, r7, d0
 800e4b4:	f7ff ff56 	bl	800e364 <__b2d>
 800e4b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e4bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e4c0:	eba3 0c02 	sub.w	ip, r3, r2
 800e4c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e4c8:	1a9b      	subs	r3, r3, r2
 800e4ca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e4ce:	ec5b ab10 	vmov	sl, fp, d0
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	bfce      	itee	gt
 800e4d6:	463a      	movgt	r2, r7
 800e4d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e4dc:	465a      	movle	r2, fp
 800e4de:	4659      	mov	r1, fp
 800e4e0:	463d      	mov	r5, r7
 800e4e2:	bfd4      	ite	le
 800e4e4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e4e8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	ee10 2a10 	vmov	r2, s0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	f7f2 f9a9 	bl	800084c <__aeabi_ddiv>
 800e4fa:	ec41 0b10 	vmov	d0, r0, r1
 800e4fe:	b003      	add	sp, #12
 800e500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e504 <__copybits>:
 800e504:	3901      	subs	r1, #1
 800e506:	b510      	push	{r4, lr}
 800e508:	1149      	asrs	r1, r1, #5
 800e50a:	6914      	ldr	r4, [r2, #16]
 800e50c:	3101      	adds	r1, #1
 800e50e:	f102 0314 	add.w	r3, r2, #20
 800e512:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e516:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e51a:	42a3      	cmp	r3, r4
 800e51c:	4602      	mov	r2, r0
 800e51e:	d303      	bcc.n	800e528 <__copybits+0x24>
 800e520:	2300      	movs	r3, #0
 800e522:	428a      	cmp	r2, r1
 800e524:	d305      	bcc.n	800e532 <__copybits+0x2e>
 800e526:	bd10      	pop	{r4, pc}
 800e528:	f853 2b04 	ldr.w	r2, [r3], #4
 800e52c:	f840 2b04 	str.w	r2, [r0], #4
 800e530:	e7f3      	b.n	800e51a <__copybits+0x16>
 800e532:	f842 3b04 	str.w	r3, [r2], #4
 800e536:	e7f4      	b.n	800e522 <__copybits+0x1e>

0800e538 <__any_on>:
 800e538:	f100 0214 	add.w	r2, r0, #20
 800e53c:	6900      	ldr	r0, [r0, #16]
 800e53e:	114b      	asrs	r3, r1, #5
 800e540:	4298      	cmp	r0, r3
 800e542:	b510      	push	{r4, lr}
 800e544:	db11      	blt.n	800e56a <__any_on+0x32>
 800e546:	dd0a      	ble.n	800e55e <__any_on+0x26>
 800e548:	f011 011f 	ands.w	r1, r1, #31
 800e54c:	d007      	beq.n	800e55e <__any_on+0x26>
 800e54e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e552:	fa24 f001 	lsr.w	r0, r4, r1
 800e556:	fa00 f101 	lsl.w	r1, r0, r1
 800e55a:	428c      	cmp	r4, r1
 800e55c:	d10b      	bne.n	800e576 <__any_on+0x3e>
 800e55e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e562:	4293      	cmp	r3, r2
 800e564:	d803      	bhi.n	800e56e <__any_on+0x36>
 800e566:	2000      	movs	r0, #0
 800e568:	bd10      	pop	{r4, pc}
 800e56a:	4603      	mov	r3, r0
 800e56c:	e7f7      	b.n	800e55e <__any_on+0x26>
 800e56e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e572:	2900      	cmp	r1, #0
 800e574:	d0f5      	beq.n	800e562 <__any_on+0x2a>
 800e576:	2001      	movs	r0, #1
 800e578:	e7f6      	b.n	800e568 <__any_on+0x30>

0800e57a <_calloc_r>:
 800e57a:	b538      	push	{r3, r4, r5, lr}
 800e57c:	fb02 f401 	mul.w	r4, r2, r1
 800e580:	4621      	mov	r1, r4
 800e582:	f000 f857 	bl	800e634 <_malloc_r>
 800e586:	4605      	mov	r5, r0
 800e588:	b118      	cbz	r0, 800e592 <_calloc_r+0x18>
 800e58a:	4622      	mov	r2, r4
 800e58c:	2100      	movs	r1, #0
 800e58e:	f7fc fa26 	bl	800a9de <memset>
 800e592:	4628      	mov	r0, r5
 800e594:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e598 <_free_r>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	4605      	mov	r5, r0
 800e59c:	2900      	cmp	r1, #0
 800e59e:	d045      	beq.n	800e62c <_free_r+0x94>
 800e5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5a4:	1f0c      	subs	r4, r1, #4
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	bfb8      	it	lt
 800e5aa:	18e4      	addlt	r4, r4, r3
 800e5ac:	f000 fc0f 	bl	800edce <__malloc_lock>
 800e5b0:	4a1f      	ldr	r2, [pc, #124]	; (800e630 <_free_r+0x98>)
 800e5b2:	6813      	ldr	r3, [r2, #0]
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	b933      	cbnz	r3, 800e5c6 <_free_r+0x2e>
 800e5b8:	6063      	str	r3, [r4, #4]
 800e5ba:	6014      	str	r4, [r2, #0]
 800e5bc:	4628      	mov	r0, r5
 800e5be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5c2:	f000 bc05 	b.w	800edd0 <__malloc_unlock>
 800e5c6:	42a3      	cmp	r3, r4
 800e5c8:	d90c      	bls.n	800e5e4 <_free_r+0x4c>
 800e5ca:	6821      	ldr	r1, [r4, #0]
 800e5cc:	1862      	adds	r2, r4, r1
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	bf04      	itt	eq
 800e5d2:	681a      	ldreq	r2, [r3, #0]
 800e5d4:	685b      	ldreq	r3, [r3, #4]
 800e5d6:	6063      	str	r3, [r4, #4]
 800e5d8:	bf04      	itt	eq
 800e5da:	1852      	addeq	r2, r2, r1
 800e5dc:	6022      	streq	r2, [r4, #0]
 800e5de:	6004      	str	r4, [r0, #0]
 800e5e0:	e7ec      	b.n	800e5bc <_free_r+0x24>
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	685a      	ldr	r2, [r3, #4]
 800e5e6:	b10a      	cbz	r2, 800e5ec <_free_r+0x54>
 800e5e8:	42a2      	cmp	r2, r4
 800e5ea:	d9fa      	bls.n	800e5e2 <_free_r+0x4a>
 800e5ec:	6819      	ldr	r1, [r3, #0]
 800e5ee:	1858      	adds	r0, r3, r1
 800e5f0:	42a0      	cmp	r0, r4
 800e5f2:	d10b      	bne.n	800e60c <_free_r+0x74>
 800e5f4:	6820      	ldr	r0, [r4, #0]
 800e5f6:	4401      	add	r1, r0
 800e5f8:	1858      	adds	r0, r3, r1
 800e5fa:	4282      	cmp	r2, r0
 800e5fc:	6019      	str	r1, [r3, #0]
 800e5fe:	d1dd      	bne.n	800e5bc <_free_r+0x24>
 800e600:	6810      	ldr	r0, [r2, #0]
 800e602:	6852      	ldr	r2, [r2, #4]
 800e604:	605a      	str	r2, [r3, #4]
 800e606:	4401      	add	r1, r0
 800e608:	6019      	str	r1, [r3, #0]
 800e60a:	e7d7      	b.n	800e5bc <_free_r+0x24>
 800e60c:	d902      	bls.n	800e614 <_free_r+0x7c>
 800e60e:	230c      	movs	r3, #12
 800e610:	602b      	str	r3, [r5, #0]
 800e612:	e7d3      	b.n	800e5bc <_free_r+0x24>
 800e614:	6820      	ldr	r0, [r4, #0]
 800e616:	1821      	adds	r1, r4, r0
 800e618:	428a      	cmp	r2, r1
 800e61a:	bf04      	itt	eq
 800e61c:	6811      	ldreq	r1, [r2, #0]
 800e61e:	6852      	ldreq	r2, [r2, #4]
 800e620:	6062      	str	r2, [r4, #4]
 800e622:	bf04      	itt	eq
 800e624:	1809      	addeq	r1, r1, r0
 800e626:	6021      	streq	r1, [r4, #0]
 800e628:	605c      	str	r4, [r3, #4]
 800e62a:	e7c7      	b.n	800e5bc <_free_r+0x24>
 800e62c:	bd38      	pop	{r3, r4, r5, pc}
 800e62e:	bf00      	nop
 800e630:	20000204 	.word	0x20000204

0800e634 <_malloc_r>:
 800e634:	b570      	push	{r4, r5, r6, lr}
 800e636:	1ccd      	adds	r5, r1, #3
 800e638:	f025 0503 	bic.w	r5, r5, #3
 800e63c:	3508      	adds	r5, #8
 800e63e:	2d0c      	cmp	r5, #12
 800e640:	bf38      	it	cc
 800e642:	250c      	movcc	r5, #12
 800e644:	2d00      	cmp	r5, #0
 800e646:	4606      	mov	r6, r0
 800e648:	db01      	blt.n	800e64e <_malloc_r+0x1a>
 800e64a:	42a9      	cmp	r1, r5
 800e64c:	d903      	bls.n	800e656 <_malloc_r+0x22>
 800e64e:	230c      	movs	r3, #12
 800e650:	6033      	str	r3, [r6, #0]
 800e652:	2000      	movs	r0, #0
 800e654:	bd70      	pop	{r4, r5, r6, pc}
 800e656:	f000 fbba 	bl	800edce <__malloc_lock>
 800e65a:	4a21      	ldr	r2, [pc, #132]	; (800e6e0 <_malloc_r+0xac>)
 800e65c:	6814      	ldr	r4, [r2, #0]
 800e65e:	4621      	mov	r1, r4
 800e660:	b991      	cbnz	r1, 800e688 <_malloc_r+0x54>
 800e662:	4c20      	ldr	r4, [pc, #128]	; (800e6e4 <_malloc_r+0xb0>)
 800e664:	6823      	ldr	r3, [r4, #0]
 800e666:	b91b      	cbnz	r3, 800e670 <_malloc_r+0x3c>
 800e668:	4630      	mov	r0, r6
 800e66a:	f000 facf 	bl	800ec0c <_sbrk_r>
 800e66e:	6020      	str	r0, [r4, #0]
 800e670:	4629      	mov	r1, r5
 800e672:	4630      	mov	r0, r6
 800e674:	f000 faca 	bl	800ec0c <_sbrk_r>
 800e678:	1c43      	adds	r3, r0, #1
 800e67a:	d124      	bne.n	800e6c6 <_malloc_r+0x92>
 800e67c:	230c      	movs	r3, #12
 800e67e:	6033      	str	r3, [r6, #0]
 800e680:	4630      	mov	r0, r6
 800e682:	f000 fba5 	bl	800edd0 <__malloc_unlock>
 800e686:	e7e4      	b.n	800e652 <_malloc_r+0x1e>
 800e688:	680b      	ldr	r3, [r1, #0]
 800e68a:	1b5b      	subs	r3, r3, r5
 800e68c:	d418      	bmi.n	800e6c0 <_malloc_r+0x8c>
 800e68e:	2b0b      	cmp	r3, #11
 800e690:	d90f      	bls.n	800e6b2 <_malloc_r+0x7e>
 800e692:	600b      	str	r3, [r1, #0]
 800e694:	50cd      	str	r5, [r1, r3]
 800e696:	18cc      	adds	r4, r1, r3
 800e698:	4630      	mov	r0, r6
 800e69a:	f000 fb99 	bl	800edd0 <__malloc_unlock>
 800e69e:	f104 000b 	add.w	r0, r4, #11
 800e6a2:	1d23      	adds	r3, r4, #4
 800e6a4:	f020 0007 	bic.w	r0, r0, #7
 800e6a8:	1ac3      	subs	r3, r0, r3
 800e6aa:	d0d3      	beq.n	800e654 <_malloc_r+0x20>
 800e6ac:	425a      	negs	r2, r3
 800e6ae:	50e2      	str	r2, [r4, r3]
 800e6b0:	e7d0      	b.n	800e654 <_malloc_r+0x20>
 800e6b2:	428c      	cmp	r4, r1
 800e6b4:	684b      	ldr	r3, [r1, #4]
 800e6b6:	bf16      	itet	ne
 800e6b8:	6063      	strne	r3, [r4, #4]
 800e6ba:	6013      	streq	r3, [r2, #0]
 800e6bc:	460c      	movne	r4, r1
 800e6be:	e7eb      	b.n	800e698 <_malloc_r+0x64>
 800e6c0:	460c      	mov	r4, r1
 800e6c2:	6849      	ldr	r1, [r1, #4]
 800e6c4:	e7cc      	b.n	800e660 <_malloc_r+0x2c>
 800e6c6:	1cc4      	adds	r4, r0, #3
 800e6c8:	f024 0403 	bic.w	r4, r4, #3
 800e6cc:	42a0      	cmp	r0, r4
 800e6ce:	d005      	beq.n	800e6dc <_malloc_r+0xa8>
 800e6d0:	1a21      	subs	r1, r4, r0
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f000 fa9a 	bl	800ec0c <_sbrk_r>
 800e6d8:	3001      	adds	r0, #1
 800e6da:	d0cf      	beq.n	800e67c <_malloc_r+0x48>
 800e6dc:	6025      	str	r5, [r4, #0]
 800e6de:	e7db      	b.n	800e698 <_malloc_r+0x64>
 800e6e0:	20000204 	.word	0x20000204
 800e6e4:	20000208 	.word	0x20000208

0800e6e8 <__ssputs_r>:
 800e6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6ec:	688e      	ldr	r6, [r1, #8]
 800e6ee:	429e      	cmp	r6, r3
 800e6f0:	4682      	mov	sl, r0
 800e6f2:	460c      	mov	r4, r1
 800e6f4:	4690      	mov	r8, r2
 800e6f6:	4699      	mov	r9, r3
 800e6f8:	d837      	bhi.n	800e76a <__ssputs_r+0x82>
 800e6fa:	898a      	ldrh	r2, [r1, #12]
 800e6fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e700:	d031      	beq.n	800e766 <__ssputs_r+0x7e>
 800e702:	6825      	ldr	r5, [r4, #0]
 800e704:	6909      	ldr	r1, [r1, #16]
 800e706:	1a6f      	subs	r7, r5, r1
 800e708:	6965      	ldr	r5, [r4, #20]
 800e70a:	2302      	movs	r3, #2
 800e70c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e710:	fb95 f5f3 	sdiv	r5, r5, r3
 800e714:	f109 0301 	add.w	r3, r9, #1
 800e718:	443b      	add	r3, r7
 800e71a:	429d      	cmp	r5, r3
 800e71c:	bf38      	it	cc
 800e71e:	461d      	movcc	r5, r3
 800e720:	0553      	lsls	r3, r2, #21
 800e722:	d530      	bpl.n	800e786 <__ssputs_r+0x9e>
 800e724:	4629      	mov	r1, r5
 800e726:	f7ff ff85 	bl	800e634 <_malloc_r>
 800e72a:	4606      	mov	r6, r0
 800e72c:	b950      	cbnz	r0, 800e744 <__ssputs_r+0x5c>
 800e72e:	230c      	movs	r3, #12
 800e730:	f8ca 3000 	str.w	r3, [sl]
 800e734:	89a3      	ldrh	r3, [r4, #12]
 800e736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e73a:	81a3      	strh	r3, [r4, #12]
 800e73c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e744:	463a      	mov	r2, r7
 800e746:	6921      	ldr	r1, [r4, #16]
 800e748:	f7fc f93e 	bl	800a9c8 <memcpy>
 800e74c:	89a3      	ldrh	r3, [r4, #12]
 800e74e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e756:	81a3      	strh	r3, [r4, #12]
 800e758:	6126      	str	r6, [r4, #16]
 800e75a:	6165      	str	r5, [r4, #20]
 800e75c:	443e      	add	r6, r7
 800e75e:	1bed      	subs	r5, r5, r7
 800e760:	6026      	str	r6, [r4, #0]
 800e762:	60a5      	str	r5, [r4, #8]
 800e764:	464e      	mov	r6, r9
 800e766:	454e      	cmp	r6, r9
 800e768:	d900      	bls.n	800e76c <__ssputs_r+0x84>
 800e76a:	464e      	mov	r6, r9
 800e76c:	4632      	mov	r2, r6
 800e76e:	4641      	mov	r1, r8
 800e770:	6820      	ldr	r0, [r4, #0]
 800e772:	f000 fb13 	bl	800ed9c <memmove>
 800e776:	68a3      	ldr	r3, [r4, #8]
 800e778:	1b9b      	subs	r3, r3, r6
 800e77a:	60a3      	str	r3, [r4, #8]
 800e77c:	6823      	ldr	r3, [r4, #0]
 800e77e:	441e      	add	r6, r3
 800e780:	6026      	str	r6, [r4, #0]
 800e782:	2000      	movs	r0, #0
 800e784:	e7dc      	b.n	800e740 <__ssputs_r+0x58>
 800e786:	462a      	mov	r2, r5
 800e788:	f000 fb23 	bl	800edd2 <_realloc_r>
 800e78c:	4606      	mov	r6, r0
 800e78e:	2800      	cmp	r0, #0
 800e790:	d1e2      	bne.n	800e758 <__ssputs_r+0x70>
 800e792:	6921      	ldr	r1, [r4, #16]
 800e794:	4650      	mov	r0, sl
 800e796:	f7ff feff 	bl	800e598 <_free_r>
 800e79a:	e7c8      	b.n	800e72e <__ssputs_r+0x46>

0800e79c <_svfiprintf_r>:
 800e79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a0:	461d      	mov	r5, r3
 800e7a2:	898b      	ldrh	r3, [r1, #12]
 800e7a4:	061f      	lsls	r7, r3, #24
 800e7a6:	b09d      	sub	sp, #116	; 0x74
 800e7a8:	4680      	mov	r8, r0
 800e7aa:	460c      	mov	r4, r1
 800e7ac:	4616      	mov	r6, r2
 800e7ae:	d50f      	bpl.n	800e7d0 <_svfiprintf_r+0x34>
 800e7b0:	690b      	ldr	r3, [r1, #16]
 800e7b2:	b96b      	cbnz	r3, 800e7d0 <_svfiprintf_r+0x34>
 800e7b4:	2140      	movs	r1, #64	; 0x40
 800e7b6:	f7ff ff3d 	bl	800e634 <_malloc_r>
 800e7ba:	6020      	str	r0, [r4, #0]
 800e7bc:	6120      	str	r0, [r4, #16]
 800e7be:	b928      	cbnz	r0, 800e7cc <_svfiprintf_r+0x30>
 800e7c0:	230c      	movs	r3, #12
 800e7c2:	f8c8 3000 	str.w	r3, [r8]
 800e7c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7ca:	e0c8      	b.n	800e95e <_svfiprintf_r+0x1c2>
 800e7cc:	2340      	movs	r3, #64	; 0x40
 800e7ce:	6163      	str	r3, [r4, #20]
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e7d4:	2320      	movs	r3, #32
 800e7d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7da:	2330      	movs	r3, #48	; 0x30
 800e7dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7e0:	9503      	str	r5, [sp, #12]
 800e7e2:	f04f 0b01 	mov.w	fp, #1
 800e7e6:	4637      	mov	r7, r6
 800e7e8:	463d      	mov	r5, r7
 800e7ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e7ee:	b10b      	cbz	r3, 800e7f4 <_svfiprintf_r+0x58>
 800e7f0:	2b25      	cmp	r3, #37	; 0x25
 800e7f2:	d13e      	bne.n	800e872 <_svfiprintf_r+0xd6>
 800e7f4:	ebb7 0a06 	subs.w	sl, r7, r6
 800e7f8:	d00b      	beq.n	800e812 <_svfiprintf_r+0x76>
 800e7fa:	4653      	mov	r3, sl
 800e7fc:	4632      	mov	r2, r6
 800e7fe:	4621      	mov	r1, r4
 800e800:	4640      	mov	r0, r8
 800e802:	f7ff ff71 	bl	800e6e8 <__ssputs_r>
 800e806:	3001      	adds	r0, #1
 800e808:	f000 80a4 	beq.w	800e954 <_svfiprintf_r+0x1b8>
 800e80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e80e:	4453      	add	r3, sl
 800e810:	9309      	str	r3, [sp, #36]	; 0x24
 800e812:	783b      	ldrb	r3, [r7, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	f000 809d 	beq.w	800e954 <_svfiprintf_r+0x1b8>
 800e81a:	2300      	movs	r3, #0
 800e81c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e824:	9304      	str	r3, [sp, #16]
 800e826:	9307      	str	r3, [sp, #28]
 800e828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e82c:	931a      	str	r3, [sp, #104]	; 0x68
 800e82e:	462f      	mov	r7, r5
 800e830:	2205      	movs	r2, #5
 800e832:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e836:	4850      	ldr	r0, [pc, #320]	; (800e978 <_svfiprintf_r+0x1dc>)
 800e838:	f7f1 fcd2 	bl	80001e0 <memchr>
 800e83c:	9b04      	ldr	r3, [sp, #16]
 800e83e:	b9d0      	cbnz	r0, 800e876 <_svfiprintf_r+0xda>
 800e840:	06d9      	lsls	r1, r3, #27
 800e842:	bf44      	itt	mi
 800e844:	2220      	movmi	r2, #32
 800e846:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e84a:	071a      	lsls	r2, r3, #28
 800e84c:	bf44      	itt	mi
 800e84e:	222b      	movmi	r2, #43	; 0x2b
 800e850:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e854:	782a      	ldrb	r2, [r5, #0]
 800e856:	2a2a      	cmp	r2, #42	; 0x2a
 800e858:	d015      	beq.n	800e886 <_svfiprintf_r+0xea>
 800e85a:	9a07      	ldr	r2, [sp, #28]
 800e85c:	462f      	mov	r7, r5
 800e85e:	2000      	movs	r0, #0
 800e860:	250a      	movs	r5, #10
 800e862:	4639      	mov	r1, r7
 800e864:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e868:	3b30      	subs	r3, #48	; 0x30
 800e86a:	2b09      	cmp	r3, #9
 800e86c:	d94d      	bls.n	800e90a <_svfiprintf_r+0x16e>
 800e86e:	b1b8      	cbz	r0, 800e8a0 <_svfiprintf_r+0x104>
 800e870:	e00f      	b.n	800e892 <_svfiprintf_r+0xf6>
 800e872:	462f      	mov	r7, r5
 800e874:	e7b8      	b.n	800e7e8 <_svfiprintf_r+0x4c>
 800e876:	4a40      	ldr	r2, [pc, #256]	; (800e978 <_svfiprintf_r+0x1dc>)
 800e878:	1a80      	subs	r0, r0, r2
 800e87a:	fa0b f000 	lsl.w	r0, fp, r0
 800e87e:	4318      	orrs	r0, r3
 800e880:	9004      	str	r0, [sp, #16]
 800e882:	463d      	mov	r5, r7
 800e884:	e7d3      	b.n	800e82e <_svfiprintf_r+0x92>
 800e886:	9a03      	ldr	r2, [sp, #12]
 800e888:	1d11      	adds	r1, r2, #4
 800e88a:	6812      	ldr	r2, [r2, #0]
 800e88c:	9103      	str	r1, [sp, #12]
 800e88e:	2a00      	cmp	r2, #0
 800e890:	db01      	blt.n	800e896 <_svfiprintf_r+0xfa>
 800e892:	9207      	str	r2, [sp, #28]
 800e894:	e004      	b.n	800e8a0 <_svfiprintf_r+0x104>
 800e896:	4252      	negs	r2, r2
 800e898:	f043 0302 	orr.w	r3, r3, #2
 800e89c:	9207      	str	r2, [sp, #28]
 800e89e:	9304      	str	r3, [sp, #16]
 800e8a0:	783b      	ldrb	r3, [r7, #0]
 800e8a2:	2b2e      	cmp	r3, #46	; 0x2e
 800e8a4:	d10c      	bne.n	800e8c0 <_svfiprintf_r+0x124>
 800e8a6:	787b      	ldrb	r3, [r7, #1]
 800e8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800e8aa:	d133      	bne.n	800e914 <_svfiprintf_r+0x178>
 800e8ac:	9b03      	ldr	r3, [sp, #12]
 800e8ae:	1d1a      	adds	r2, r3, #4
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	9203      	str	r2, [sp, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	bfb8      	it	lt
 800e8b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e8bc:	3702      	adds	r7, #2
 800e8be:	9305      	str	r3, [sp, #20]
 800e8c0:	4d2e      	ldr	r5, [pc, #184]	; (800e97c <_svfiprintf_r+0x1e0>)
 800e8c2:	7839      	ldrb	r1, [r7, #0]
 800e8c4:	2203      	movs	r2, #3
 800e8c6:	4628      	mov	r0, r5
 800e8c8:	f7f1 fc8a 	bl	80001e0 <memchr>
 800e8cc:	b138      	cbz	r0, 800e8de <_svfiprintf_r+0x142>
 800e8ce:	2340      	movs	r3, #64	; 0x40
 800e8d0:	1b40      	subs	r0, r0, r5
 800e8d2:	fa03 f000 	lsl.w	r0, r3, r0
 800e8d6:	9b04      	ldr	r3, [sp, #16]
 800e8d8:	4303      	orrs	r3, r0
 800e8da:	3701      	adds	r7, #1
 800e8dc:	9304      	str	r3, [sp, #16]
 800e8de:	7839      	ldrb	r1, [r7, #0]
 800e8e0:	4827      	ldr	r0, [pc, #156]	; (800e980 <_svfiprintf_r+0x1e4>)
 800e8e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e8e6:	2206      	movs	r2, #6
 800e8e8:	1c7e      	adds	r6, r7, #1
 800e8ea:	f7f1 fc79 	bl	80001e0 <memchr>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	d038      	beq.n	800e964 <_svfiprintf_r+0x1c8>
 800e8f2:	4b24      	ldr	r3, [pc, #144]	; (800e984 <_svfiprintf_r+0x1e8>)
 800e8f4:	bb13      	cbnz	r3, 800e93c <_svfiprintf_r+0x1a0>
 800e8f6:	9b03      	ldr	r3, [sp, #12]
 800e8f8:	3307      	adds	r3, #7
 800e8fa:	f023 0307 	bic.w	r3, r3, #7
 800e8fe:	3308      	adds	r3, #8
 800e900:	9303      	str	r3, [sp, #12]
 800e902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e904:	444b      	add	r3, r9
 800e906:	9309      	str	r3, [sp, #36]	; 0x24
 800e908:	e76d      	b.n	800e7e6 <_svfiprintf_r+0x4a>
 800e90a:	fb05 3202 	mla	r2, r5, r2, r3
 800e90e:	2001      	movs	r0, #1
 800e910:	460f      	mov	r7, r1
 800e912:	e7a6      	b.n	800e862 <_svfiprintf_r+0xc6>
 800e914:	2300      	movs	r3, #0
 800e916:	3701      	adds	r7, #1
 800e918:	9305      	str	r3, [sp, #20]
 800e91a:	4619      	mov	r1, r3
 800e91c:	250a      	movs	r5, #10
 800e91e:	4638      	mov	r0, r7
 800e920:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e924:	3a30      	subs	r2, #48	; 0x30
 800e926:	2a09      	cmp	r2, #9
 800e928:	d903      	bls.n	800e932 <_svfiprintf_r+0x196>
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d0c8      	beq.n	800e8c0 <_svfiprintf_r+0x124>
 800e92e:	9105      	str	r1, [sp, #20]
 800e930:	e7c6      	b.n	800e8c0 <_svfiprintf_r+0x124>
 800e932:	fb05 2101 	mla	r1, r5, r1, r2
 800e936:	2301      	movs	r3, #1
 800e938:	4607      	mov	r7, r0
 800e93a:	e7f0      	b.n	800e91e <_svfiprintf_r+0x182>
 800e93c:	ab03      	add	r3, sp, #12
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	4622      	mov	r2, r4
 800e942:	4b11      	ldr	r3, [pc, #68]	; (800e988 <_svfiprintf_r+0x1ec>)
 800e944:	a904      	add	r1, sp, #16
 800e946:	4640      	mov	r0, r8
 800e948:	f7fc f8e6 	bl	800ab18 <_printf_float>
 800e94c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e950:	4681      	mov	r9, r0
 800e952:	d1d6      	bne.n	800e902 <_svfiprintf_r+0x166>
 800e954:	89a3      	ldrh	r3, [r4, #12]
 800e956:	065b      	lsls	r3, r3, #25
 800e958:	f53f af35 	bmi.w	800e7c6 <_svfiprintf_r+0x2a>
 800e95c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e95e:	b01d      	add	sp, #116	; 0x74
 800e960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e964:	ab03      	add	r3, sp, #12
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	4622      	mov	r2, r4
 800e96a:	4b07      	ldr	r3, [pc, #28]	; (800e988 <_svfiprintf_r+0x1ec>)
 800e96c:	a904      	add	r1, sp, #16
 800e96e:	4640      	mov	r0, r8
 800e970:	f7fc fb88 	bl	800b084 <_printf_i>
 800e974:	e7ea      	b.n	800e94c <_svfiprintf_r+0x1b0>
 800e976:	bf00      	nop
 800e978:	080105a4 	.word	0x080105a4
 800e97c:	080105aa 	.word	0x080105aa
 800e980:	080105ae 	.word	0x080105ae
 800e984:	0800ab19 	.word	0x0800ab19
 800e988:	0800e6e9 	.word	0x0800e6e9

0800e98c <__sfputc_r>:
 800e98c:	6893      	ldr	r3, [r2, #8]
 800e98e:	3b01      	subs	r3, #1
 800e990:	2b00      	cmp	r3, #0
 800e992:	b410      	push	{r4}
 800e994:	6093      	str	r3, [r2, #8]
 800e996:	da08      	bge.n	800e9aa <__sfputc_r+0x1e>
 800e998:	6994      	ldr	r4, [r2, #24]
 800e99a:	42a3      	cmp	r3, r4
 800e99c:	db01      	blt.n	800e9a2 <__sfputc_r+0x16>
 800e99e:	290a      	cmp	r1, #10
 800e9a0:	d103      	bne.n	800e9aa <__sfputc_r+0x1e>
 800e9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9a6:	f7fd bdb1 	b.w	800c50c <__swbuf_r>
 800e9aa:	6813      	ldr	r3, [r2, #0]
 800e9ac:	1c58      	adds	r0, r3, #1
 800e9ae:	6010      	str	r0, [r2, #0]
 800e9b0:	7019      	strb	r1, [r3, #0]
 800e9b2:	4608      	mov	r0, r1
 800e9b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9b8:	4770      	bx	lr

0800e9ba <__sfputs_r>:
 800e9ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9bc:	4606      	mov	r6, r0
 800e9be:	460f      	mov	r7, r1
 800e9c0:	4614      	mov	r4, r2
 800e9c2:	18d5      	adds	r5, r2, r3
 800e9c4:	42ac      	cmp	r4, r5
 800e9c6:	d101      	bne.n	800e9cc <__sfputs_r+0x12>
 800e9c8:	2000      	movs	r0, #0
 800e9ca:	e007      	b.n	800e9dc <__sfputs_r+0x22>
 800e9cc:	463a      	mov	r2, r7
 800e9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f7ff ffda 	bl	800e98c <__sfputc_r>
 800e9d8:	1c43      	adds	r3, r0, #1
 800e9da:	d1f3      	bne.n	800e9c4 <__sfputs_r+0xa>
 800e9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9e0 <_vfiprintf_r>:
 800e9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e4:	460c      	mov	r4, r1
 800e9e6:	b09d      	sub	sp, #116	; 0x74
 800e9e8:	4617      	mov	r7, r2
 800e9ea:	461d      	mov	r5, r3
 800e9ec:	4606      	mov	r6, r0
 800e9ee:	b118      	cbz	r0, 800e9f8 <_vfiprintf_r+0x18>
 800e9f0:	6983      	ldr	r3, [r0, #24]
 800e9f2:	b90b      	cbnz	r3, 800e9f8 <_vfiprintf_r+0x18>
 800e9f4:	f7fe fd80 	bl	800d4f8 <__sinit>
 800e9f8:	4b7c      	ldr	r3, [pc, #496]	; (800ebec <_vfiprintf_r+0x20c>)
 800e9fa:	429c      	cmp	r4, r3
 800e9fc:	d158      	bne.n	800eab0 <_vfiprintf_r+0xd0>
 800e9fe:	6874      	ldr	r4, [r6, #4]
 800ea00:	89a3      	ldrh	r3, [r4, #12]
 800ea02:	0718      	lsls	r0, r3, #28
 800ea04:	d55e      	bpl.n	800eac4 <_vfiprintf_r+0xe4>
 800ea06:	6923      	ldr	r3, [r4, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d05b      	beq.n	800eac4 <_vfiprintf_r+0xe4>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ea10:	2320      	movs	r3, #32
 800ea12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea16:	2330      	movs	r3, #48	; 0x30
 800ea18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea1c:	9503      	str	r5, [sp, #12]
 800ea1e:	f04f 0b01 	mov.w	fp, #1
 800ea22:	46b8      	mov	r8, r7
 800ea24:	4645      	mov	r5, r8
 800ea26:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ea2a:	b10b      	cbz	r3, 800ea30 <_vfiprintf_r+0x50>
 800ea2c:	2b25      	cmp	r3, #37	; 0x25
 800ea2e:	d154      	bne.n	800eada <_vfiprintf_r+0xfa>
 800ea30:	ebb8 0a07 	subs.w	sl, r8, r7
 800ea34:	d00b      	beq.n	800ea4e <_vfiprintf_r+0x6e>
 800ea36:	4653      	mov	r3, sl
 800ea38:	463a      	mov	r2, r7
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f7ff ffbc 	bl	800e9ba <__sfputs_r>
 800ea42:	3001      	adds	r0, #1
 800ea44:	f000 80c2 	beq.w	800ebcc <_vfiprintf_r+0x1ec>
 800ea48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea4a:	4453      	add	r3, sl
 800ea4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea4e:	f898 3000 	ldrb.w	r3, [r8]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f000 80ba 	beq.w	800ebcc <_vfiprintf_r+0x1ec>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea62:	9304      	str	r3, [sp, #16]
 800ea64:	9307      	str	r3, [sp, #28]
 800ea66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ea6c:	46a8      	mov	r8, r5
 800ea6e:	2205      	movs	r2, #5
 800ea70:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ea74:	485e      	ldr	r0, [pc, #376]	; (800ebf0 <_vfiprintf_r+0x210>)
 800ea76:	f7f1 fbb3 	bl	80001e0 <memchr>
 800ea7a:	9b04      	ldr	r3, [sp, #16]
 800ea7c:	bb78      	cbnz	r0, 800eade <_vfiprintf_r+0xfe>
 800ea7e:	06d9      	lsls	r1, r3, #27
 800ea80:	bf44      	itt	mi
 800ea82:	2220      	movmi	r2, #32
 800ea84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea88:	071a      	lsls	r2, r3, #28
 800ea8a:	bf44      	itt	mi
 800ea8c:	222b      	movmi	r2, #43	; 0x2b
 800ea8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea92:	782a      	ldrb	r2, [r5, #0]
 800ea94:	2a2a      	cmp	r2, #42	; 0x2a
 800ea96:	d02a      	beq.n	800eaee <_vfiprintf_r+0x10e>
 800ea98:	9a07      	ldr	r2, [sp, #28]
 800ea9a:	46a8      	mov	r8, r5
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	250a      	movs	r5, #10
 800eaa0:	4641      	mov	r1, r8
 800eaa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaa6:	3b30      	subs	r3, #48	; 0x30
 800eaa8:	2b09      	cmp	r3, #9
 800eaaa:	d969      	bls.n	800eb80 <_vfiprintf_r+0x1a0>
 800eaac:	b360      	cbz	r0, 800eb08 <_vfiprintf_r+0x128>
 800eaae:	e024      	b.n	800eafa <_vfiprintf_r+0x11a>
 800eab0:	4b50      	ldr	r3, [pc, #320]	; (800ebf4 <_vfiprintf_r+0x214>)
 800eab2:	429c      	cmp	r4, r3
 800eab4:	d101      	bne.n	800eaba <_vfiprintf_r+0xda>
 800eab6:	68b4      	ldr	r4, [r6, #8]
 800eab8:	e7a2      	b.n	800ea00 <_vfiprintf_r+0x20>
 800eaba:	4b4f      	ldr	r3, [pc, #316]	; (800ebf8 <_vfiprintf_r+0x218>)
 800eabc:	429c      	cmp	r4, r3
 800eabe:	bf08      	it	eq
 800eac0:	68f4      	ldreq	r4, [r6, #12]
 800eac2:	e79d      	b.n	800ea00 <_vfiprintf_r+0x20>
 800eac4:	4621      	mov	r1, r4
 800eac6:	4630      	mov	r0, r6
 800eac8:	f7fd fd72 	bl	800c5b0 <__swsetup_r>
 800eacc:	2800      	cmp	r0, #0
 800eace:	d09d      	beq.n	800ea0c <_vfiprintf_r+0x2c>
 800ead0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ead4:	b01d      	add	sp, #116	; 0x74
 800ead6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eada:	46a8      	mov	r8, r5
 800eadc:	e7a2      	b.n	800ea24 <_vfiprintf_r+0x44>
 800eade:	4a44      	ldr	r2, [pc, #272]	; (800ebf0 <_vfiprintf_r+0x210>)
 800eae0:	1a80      	subs	r0, r0, r2
 800eae2:	fa0b f000 	lsl.w	r0, fp, r0
 800eae6:	4318      	orrs	r0, r3
 800eae8:	9004      	str	r0, [sp, #16]
 800eaea:	4645      	mov	r5, r8
 800eaec:	e7be      	b.n	800ea6c <_vfiprintf_r+0x8c>
 800eaee:	9a03      	ldr	r2, [sp, #12]
 800eaf0:	1d11      	adds	r1, r2, #4
 800eaf2:	6812      	ldr	r2, [r2, #0]
 800eaf4:	9103      	str	r1, [sp, #12]
 800eaf6:	2a00      	cmp	r2, #0
 800eaf8:	db01      	blt.n	800eafe <_vfiprintf_r+0x11e>
 800eafa:	9207      	str	r2, [sp, #28]
 800eafc:	e004      	b.n	800eb08 <_vfiprintf_r+0x128>
 800eafe:	4252      	negs	r2, r2
 800eb00:	f043 0302 	orr.w	r3, r3, #2
 800eb04:	9207      	str	r2, [sp, #28]
 800eb06:	9304      	str	r3, [sp, #16]
 800eb08:	f898 3000 	ldrb.w	r3, [r8]
 800eb0c:	2b2e      	cmp	r3, #46	; 0x2e
 800eb0e:	d10e      	bne.n	800eb2e <_vfiprintf_r+0x14e>
 800eb10:	f898 3001 	ldrb.w	r3, [r8, #1]
 800eb14:	2b2a      	cmp	r3, #42	; 0x2a
 800eb16:	d138      	bne.n	800eb8a <_vfiprintf_r+0x1aa>
 800eb18:	9b03      	ldr	r3, [sp, #12]
 800eb1a:	1d1a      	adds	r2, r3, #4
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	9203      	str	r2, [sp, #12]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	bfb8      	it	lt
 800eb24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eb28:	f108 0802 	add.w	r8, r8, #2
 800eb2c:	9305      	str	r3, [sp, #20]
 800eb2e:	4d33      	ldr	r5, [pc, #204]	; (800ebfc <_vfiprintf_r+0x21c>)
 800eb30:	f898 1000 	ldrb.w	r1, [r8]
 800eb34:	2203      	movs	r2, #3
 800eb36:	4628      	mov	r0, r5
 800eb38:	f7f1 fb52 	bl	80001e0 <memchr>
 800eb3c:	b140      	cbz	r0, 800eb50 <_vfiprintf_r+0x170>
 800eb3e:	2340      	movs	r3, #64	; 0x40
 800eb40:	1b40      	subs	r0, r0, r5
 800eb42:	fa03 f000 	lsl.w	r0, r3, r0
 800eb46:	9b04      	ldr	r3, [sp, #16]
 800eb48:	4303      	orrs	r3, r0
 800eb4a:	f108 0801 	add.w	r8, r8, #1
 800eb4e:	9304      	str	r3, [sp, #16]
 800eb50:	f898 1000 	ldrb.w	r1, [r8]
 800eb54:	482a      	ldr	r0, [pc, #168]	; (800ec00 <_vfiprintf_r+0x220>)
 800eb56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb5a:	2206      	movs	r2, #6
 800eb5c:	f108 0701 	add.w	r7, r8, #1
 800eb60:	f7f1 fb3e 	bl	80001e0 <memchr>
 800eb64:	2800      	cmp	r0, #0
 800eb66:	d037      	beq.n	800ebd8 <_vfiprintf_r+0x1f8>
 800eb68:	4b26      	ldr	r3, [pc, #152]	; (800ec04 <_vfiprintf_r+0x224>)
 800eb6a:	bb1b      	cbnz	r3, 800ebb4 <_vfiprintf_r+0x1d4>
 800eb6c:	9b03      	ldr	r3, [sp, #12]
 800eb6e:	3307      	adds	r3, #7
 800eb70:	f023 0307 	bic.w	r3, r3, #7
 800eb74:	3308      	adds	r3, #8
 800eb76:	9303      	str	r3, [sp, #12]
 800eb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb7a:	444b      	add	r3, r9
 800eb7c:	9309      	str	r3, [sp, #36]	; 0x24
 800eb7e:	e750      	b.n	800ea22 <_vfiprintf_r+0x42>
 800eb80:	fb05 3202 	mla	r2, r5, r2, r3
 800eb84:	2001      	movs	r0, #1
 800eb86:	4688      	mov	r8, r1
 800eb88:	e78a      	b.n	800eaa0 <_vfiprintf_r+0xc0>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	f108 0801 	add.w	r8, r8, #1
 800eb90:	9305      	str	r3, [sp, #20]
 800eb92:	4619      	mov	r1, r3
 800eb94:	250a      	movs	r5, #10
 800eb96:	4640      	mov	r0, r8
 800eb98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb9c:	3a30      	subs	r2, #48	; 0x30
 800eb9e:	2a09      	cmp	r2, #9
 800eba0:	d903      	bls.n	800ebaa <_vfiprintf_r+0x1ca>
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d0c3      	beq.n	800eb2e <_vfiprintf_r+0x14e>
 800eba6:	9105      	str	r1, [sp, #20]
 800eba8:	e7c1      	b.n	800eb2e <_vfiprintf_r+0x14e>
 800ebaa:	fb05 2101 	mla	r1, r5, r1, r2
 800ebae:	2301      	movs	r3, #1
 800ebb0:	4680      	mov	r8, r0
 800ebb2:	e7f0      	b.n	800eb96 <_vfiprintf_r+0x1b6>
 800ebb4:	ab03      	add	r3, sp, #12
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	4622      	mov	r2, r4
 800ebba:	4b13      	ldr	r3, [pc, #76]	; (800ec08 <_vfiprintf_r+0x228>)
 800ebbc:	a904      	add	r1, sp, #16
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f7fb ffaa 	bl	800ab18 <_printf_float>
 800ebc4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ebc8:	4681      	mov	r9, r0
 800ebca:	d1d5      	bne.n	800eb78 <_vfiprintf_r+0x198>
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	065b      	lsls	r3, r3, #25
 800ebd0:	f53f af7e 	bmi.w	800ead0 <_vfiprintf_r+0xf0>
 800ebd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebd6:	e77d      	b.n	800ead4 <_vfiprintf_r+0xf4>
 800ebd8:	ab03      	add	r3, sp, #12
 800ebda:	9300      	str	r3, [sp, #0]
 800ebdc:	4622      	mov	r2, r4
 800ebde:	4b0a      	ldr	r3, [pc, #40]	; (800ec08 <_vfiprintf_r+0x228>)
 800ebe0:	a904      	add	r1, sp, #16
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	f7fc fa4e 	bl	800b084 <_printf_i>
 800ebe8:	e7ec      	b.n	800ebc4 <_vfiprintf_r+0x1e4>
 800ebea:	bf00      	nop
 800ebec:	08010458 	.word	0x08010458
 800ebf0:	080105a4 	.word	0x080105a4
 800ebf4:	08010478 	.word	0x08010478
 800ebf8:	08010438 	.word	0x08010438
 800ebfc:	080105aa 	.word	0x080105aa
 800ec00:	080105ae 	.word	0x080105ae
 800ec04:	0800ab19 	.word	0x0800ab19
 800ec08:	0800e9bb 	.word	0x0800e9bb

0800ec0c <_sbrk_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	4c06      	ldr	r4, [pc, #24]	; (800ec28 <_sbrk_r+0x1c>)
 800ec10:	2300      	movs	r3, #0
 800ec12:	4605      	mov	r5, r0
 800ec14:	4608      	mov	r0, r1
 800ec16:	6023      	str	r3, [r4, #0]
 800ec18:	f7f5 ffbe 	bl	8004b98 <_sbrk>
 800ec1c:	1c43      	adds	r3, r0, #1
 800ec1e:	d102      	bne.n	800ec26 <_sbrk_r+0x1a>
 800ec20:	6823      	ldr	r3, [r4, #0]
 800ec22:	b103      	cbz	r3, 800ec26 <_sbrk_r+0x1a>
 800ec24:	602b      	str	r3, [r5, #0]
 800ec26:	bd38      	pop	{r3, r4, r5, pc}
 800ec28:	20001c34 	.word	0x20001c34

0800ec2c <__sread>:
 800ec2c:	b510      	push	{r4, lr}
 800ec2e:	460c      	mov	r4, r1
 800ec30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec34:	f000 f8f4 	bl	800ee20 <_read_r>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	bfab      	itete	ge
 800ec3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec3e:	89a3      	ldrhlt	r3, [r4, #12]
 800ec40:	181b      	addge	r3, r3, r0
 800ec42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec46:	bfac      	ite	ge
 800ec48:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec4a:	81a3      	strhlt	r3, [r4, #12]
 800ec4c:	bd10      	pop	{r4, pc}

0800ec4e <__swrite>:
 800ec4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec52:	461f      	mov	r7, r3
 800ec54:	898b      	ldrh	r3, [r1, #12]
 800ec56:	05db      	lsls	r3, r3, #23
 800ec58:	4605      	mov	r5, r0
 800ec5a:	460c      	mov	r4, r1
 800ec5c:	4616      	mov	r6, r2
 800ec5e:	d505      	bpl.n	800ec6c <__swrite+0x1e>
 800ec60:	2302      	movs	r3, #2
 800ec62:	2200      	movs	r2, #0
 800ec64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec68:	f000 f886 	bl	800ed78 <_lseek_r>
 800ec6c:	89a3      	ldrh	r3, [r4, #12]
 800ec6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec76:	81a3      	strh	r3, [r4, #12]
 800ec78:	4632      	mov	r2, r6
 800ec7a:	463b      	mov	r3, r7
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec82:	f000 b835 	b.w	800ecf0 <_write_r>

0800ec86 <__sseek>:
 800ec86:	b510      	push	{r4, lr}
 800ec88:	460c      	mov	r4, r1
 800ec8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec8e:	f000 f873 	bl	800ed78 <_lseek_r>
 800ec92:	1c43      	adds	r3, r0, #1
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	bf15      	itete	ne
 800ec98:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eca2:	81a3      	strheq	r3, [r4, #12]
 800eca4:	bf18      	it	ne
 800eca6:	81a3      	strhne	r3, [r4, #12]
 800eca8:	bd10      	pop	{r4, pc}

0800ecaa <__sclose>:
 800ecaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecae:	f000 b831 	b.w	800ed14 <_close_r>

0800ecb2 <strncmp>:
 800ecb2:	b510      	push	{r4, lr}
 800ecb4:	b16a      	cbz	r2, 800ecd2 <strncmp+0x20>
 800ecb6:	3901      	subs	r1, #1
 800ecb8:	1884      	adds	r4, r0, r2
 800ecba:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ecbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d103      	bne.n	800ecce <strncmp+0x1c>
 800ecc6:	42a0      	cmp	r0, r4
 800ecc8:	d001      	beq.n	800ecce <strncmp+0x1c>
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d1f5      	bne.n	800ecba <strncmp+0x8>
 800ecce:	1a98      	subs	r0, r3, r2
 800ecd0:	bd10      	pop	{r4, pc}
 800ecd2:	4610      	mov	r0, r2
 800ecd4:	e7fc      	b.n	800ecd0 <strncmp+0x1e>

0800ecd6 <__ascii_wctomb>:
 800ecd6:	b149      	cbz	r1, 800ecec <__ascii_wctomb+0x16>
 800ecd8:	2aff      	cmp	r2, #255	; 0xff
 800ecda:	bf85      	ittet	hi
 800ecdc:	238a      	movhi	r3, #138	; 0x8a
 800ecde:	6003      	strhi	r3, [r0, #0]
 800ece0:	700a      	strbls	r2, [r1, #0]
 800ece2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ece6:	bf98      	it	ls
 800ece8:	2001      	movls	r0, #1
 800ecea:	4770      	bx	lr
 800ecec:	4608      	mov	r0, r1
 800ecee:	4770      	bx	lr

0800ecf0 <_write_r>:
 800ecf0:	b538      	push	{r3, r4, r5, lr}
 800ecf2:	4c07      	ldr	r4, [pc, #28]	; (800ed10 <_write_r+0x20>)
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	4608      	mov	r0, r1
 800ecf8:	4611      	mov	r1, r2
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	6022      	str	r2, [r4, #0]
 800ecfe:	461a      	mov	r2, r3
 800ed00:	f7f5 fef9 	bl	8004af6 <_write>
 800ed04:	1c43      	adds	r3, r0, #1
 800ed06:	d102      	bne.n	800ed0e <_write_r+0x1e>
 800ed08:	6823      	ldr	r3, [r4, #0]
 800ed0a:	b103      	cbz	r3, 800ed0e <_write_r+0x1e>
 800ed0c:	602b      	str	r3, [r5, #0]
 800ed0e:	bd38      	pop	{r3, r4, r5, pc}
 800ed10:	20001c34 	.word	0x20001c34

0800ed14 <_close_r>:
 800ed14:	b538      	push	{r3, r4, r5, lr}
 800ed16:	4c06      	ldr	r4, [pc, #24]	; (800ed30 <_close_r+0x1c>)
 800ed18:	2300      	movs	r3, #0
 800ed1a:	4605      	mov	r5, r0
 800ed1c:	4608      	mov	r0, r1
 800ed1e:	6023      	str	r3, [r4, #0]
 800ed20:	f7f5 ff05 	bl	8004b2e <_close>
 800ed24:	1c43      	adds	r3, r0, #1
 800ed26:	d102      	bne.n	800ed2e <_close_r+0x1a>
 800ed28:	6823      	ldr	r3, [r4, #0]
 800ed2a:	b103      	cbz	r3, 800ed2e <_close_r+0x1a>
 800ed2c:	602b      	str	r3, [r5, #0]
 800ed2e:	bd38      	pop	{r3, r4, r5, pc}
 800ed30:	20001c34 	.word	0x20001c34

0800ed34 <_fstat_r>:
 800ed34:	b538      	push	{r3, r4, r5, lr}
 800ed36:	4c07      	ldr	r4, [pc, #28]	; (800ed54 <_fstat_r+0x20>)
 800ed38:	2300      	movs	r3, #0
 800ed3a:	4605      	mov	r5, r0
 800ed3c:	4608      	mov	r0, r1
 800ed3e:	4611      	mov	r1, r2
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	f7f5 ff00 	bl	8004b46 <_fstat>
 800ed46:	1c43      	adds	r3, r0, #1
 800ed48:	d102      	bne.n	800ed50 <_fstat_r+0x1c>
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	b103      	cbz	r3, 800ed50 <_fstat_r+0x1c>
 800ed4e:	602b      	str	r3, [r5, #0]
 800ed50:	bd38      	pop	{r3, r4, r5, pc}
 800ed52:	bf00      	nop
 800ed54:	20001c34 	.word	0x20001c34

0800ed58 <_isatty_r>:
 800ed58:	b538      	push	{r3, r4, r5, lr}
 800ed5a:	4c06      	ldr	r4, [pc, #24]	; (800ed74 <_isatty_r+0x1c>)
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	4605      	mov	r5, r0
 800ed60:	4608      	mov	r0, r1
 800ed62:	6023      	str	r3, [r4, #0]
 800ed64:	f7f5 feff 	bl	8004b66 <_isatty>
 800ed68:	1c43      	adds	r3, r0, #1
 800ed6a:	d102      	bne.n	800ed72 <_isatty_r+0x1a>
 800ed6c:	6823      	ldr	r3, [r4, #0]
 800ed6e:	b103      	cbz	r3, 800ed72 <_isatty_r+0x1a>
 800ed70:	602b      	str	r3, [r5, #0]
 800ed72:	bd38      	pop	{r3, r4, r5, pc}
 800ed74:	20001c34 	.word	0x20001c34

0800ed78 <_lseek_r>:
 800ed78:	b538      	push	{r3, r4, r5, lr}
 800ed7a:	4c07      	ldr	r4, [pc, #28]	; (800ed98 <_lseek_r+0x20>)
 800ed7c:	4605      	mov	r5, r0
 800ed7e:	4608      	mov	r0, r1
 800ed80:	4611      	mov	r1, r2
 800ed82:	2200      	movs	r2, #0
 800ed84:	6022      	str	r2, [r4, #0]
 800ed86:	461a      	mov	r2, r3
 800ed88:	f7f5 fef8 	bl	8004b7c <_lseek>
 800ed8c:	1c43      	adds	r3, r0, #1
 800ed8e:	d102      	bne.n	800ed96 <_lseek_r+0x1e>
 800ed90:	6823      	ldr	r3, [r4, #0]
 800ed92:	b103      	cbz	r3, 800ed96 <_lseek_r+0x1e>
 800ed94:	602b      	str	r3, [r5, #0]
 800ed96:	bd38      	pop	{r3, r4, r5, pc}
 800ed98:	20001c34 	.word	0x20001c34

0800ed9c <memmove>:
 800ed9c:	4288      	cmp	r0, r1
 800ed9e:	b510      	push	{r4, lr}
 800eda0:	eb01 0302 	add.w	r3, r1, r2
 800eda4:	d807      	bhi.n	800edb6 <memmove+0x1a>
 800eda6:	1e42      	subs	r2, r0, #1
 800eda8:	4299      	cmp	r1, r3
 800edaa:	d00a      	beq.n	800edc2 <memmove+0x26>
 800edac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edb0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800edb4:	e7f8      	b.n	800eda8 <memmove+0xc>
 800edb6:	4283      	cmp	r3, r0
 800edb8:	d9f5      	bls.n	800eda6 <memmove+0xa>
 800edba:	1881      	adds	r1, r0, r2
 800edbc:	1ad2      	subs	r2, r2, r3
 800edbe:	42d3      	cmn	r3, r2
 800edc0:	d100      	bne.n	800edc4 <memmove+0x28>
 800edc2:	bd10      	pop	{r4, pc}
 800edc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edc8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800edcc:	e7f7      	b.n	800edbe <memmove+0x22>

0800edce <__malloc_lock>:
 800edce:	4770      	bx	lr

0800edd0 <__malloc_unlock>:
 800edd0:	4770      	bx	lr

0800edd2 <_realloc_r>:
 800edd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edd4:	4607      	mov	r7, r0
 800edd6:	4614      	mov	r4, r2
 800edd8:	460e      	mov	r6, r1
 800edda:	b921      	cbnz	r1, 800ede6 <_realloc_r+0x14>
 800eddc:	4611      	mov	r1, r2
 800edde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ede2:	f7ff bc27 	b.w	800e634 <_malloc_r>
 800ede6:	b922      	cbnz	r2, 800edf2 <_realloc_r+0x20>
 800ede8:	f7ff fbd6 	bl	800e598 <_free_r>
 800edec:	4625      	mov	r5, r4
 800edee:	4628      	mov	r0, r5
 800edf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edf2:	f000 f827 	bl	800ee44 <_malloc_usable_size_r>
 800edf6:	42a0      	cmp	r0, r4
 800edf8:	d20f      	bcs.n	800ee1a <_realloc_r+0x48>
 800edfa:	4621      	mov	r1, r4
 800edfc:	4638      	mov	r0, r7
 800edfe:	f7ff fc19 	bl	800e634 <_malloc_r>
 800ee02:	4605      	mov	r5, r0
 800ee04:	2800      	cmp	r0, #0
 800ee06:	d0f2      	beq.n	800edee <_realloc_r+0x1c>
 800ee08:	4631      	mov	r1, r6
 800ee0a:	4622      	mov	r2, r4
 800ee0c:	f7fb fddc 	bl	800a9c8 <memcpy>
 800ee10:	4631      	mov	r1, r6
 800ee12:	4638      	mov	r0, r7
 800ee14:	f7ff fbc0 	bl	800e598 <_free_r>
 800ee18:	e7e9      	b.n	800edee <_realloc_r+0x1c>
 800ee1a:	4635      	mov	r5, r6
 800ee1c:	e7e7      	b.n	800edee <_realloc_r+0x1c>
	...

0800ee20 <_read_r>:
 800ee20:	b538      	push	{r3, r4, r5, lr}
 800ee22:	4c07      	ldr	r4, [pc, #28]	; (800ee40 <_read_r+0x20>)
 800ee24:	4605      	mov	r5, r0
 800ee26:	4608      	mov	r0, r1
 800ee28:	4611      	mov	r1, r2
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	6022      	str	r2, [r4, #0]
 800ee2e:	461a      	mov	r2, r3
 800ee30:	f7f5 fe44 	bl	8004abc <_read>
 800ee34:	1c43      	adds	r3, r0, #1
 800ee36:	d102      	bne.n	800ee3e <_read_r+0x1e>
 800ee38:	6823      	ldr	r3, [r4, #0]
 800ee3a:	b103      	cbz	r3, 800ee3e <_read_r+0x1e>
 800ee3c:	602b      	str	r3, [r5, #0]
 800ee3e:	bd38      	pop	{r3, r4, r5, pc}
 800ee40:	20001c34 	.word	0x20001c34

0800ee44 <_malloc_usable_size_r>:
 800ee44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee48:	1f18      	subs	r0, r3, #4
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	bfbc      	itt	lt
 800ee4e:	580b      	ldrlt	r3, [r1, r0]
 800ee50:	18c0      	addlt	r0, r0, r3
 800ee52:	4770      	bx	lr

0800ee54 <pow>:
 800ee54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee58:	ed2d 8b04 	vpush	{d8-d9}
 800ee5c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800f130 <pow+0x2dc>
 800ee60:	b08d      	sub	sp, #52	; 0x34
 800ee62:	ec57 6b10 	vmov	r6, r7, d0
 800ee66:	ec55 4b11 	vmov	r4, r5, d1
 800ee6a:	f000 f9bd 	bl	800f1e8 <__ieee754_pow>
 800ee6e:	f999 3000 	ldrsb.w	r3, [r9]
 800ee72:	9300      	str	r3, [sp, #0]
 800ee74:	3301      	adds	r3, #1
 800ee76:	eeb0 8a40 	vmov.f32	s16, s0
 800ee7a:	eef0 8a60 	vmov.f32	s17, s1
 800ee7e:	46c8      	mov	r8, r9
 800ee80:	d05f      	beq.n	800ef42 <pow+0xee>
 800ee82:	4622      	mov	r2, r4
 800ee84:	462b      	mov	r3, r5
 800ee86:	4620      	mov	r0, r4
 800ee88:	4629      	mov	r1, r5
 800ee8a:	f7f1 fe4f 	bl	8000b2c <__aeabi_dcmpun>
 800ee8e:	4683      	mov	fp, r0
 800ee90:	2800      	cmp	r0, #0
 800ee92:	d156      	bne.n	800ef42 <pow+0xee>
 800ee94:	4632      	mov	r2, r6
 800ee96:	463b      	mov	r3, r7
 800ee98:	4630      	mov	r0, r6
 800ee9a:	4639      	mov	r1, r7
 800ee9c:	f7f1 fe46 	bl	8000b2c <__aeabi_dcmpun>
 800eea0:	9001      	str	r0, [sp, #4]
 800eea2:	b1e8      	cbz	r0, 800eee0 <pow+0x8c>
 800eea4:	2200      	movs	r2, #0
 800eea6:	2300      	movs	r3, #0
 800eea8:	4620      	mov	r0, r4
 800eeaa:	4629      	mov	r1, r5
 800eeac:	f7f1 fe0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800eeb0:	2800      	cmp	r0, #0
 800eeb2:	d046      	beq.n	800ef42 <pow+0xee>
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	9302      	str	r3, [sp, #8]
 800eeb8:	4b96      	ldr	r3, [pc, #600]	; (800f114 <pow+0x2c0>)
 800eeba:	9303      	str	r3, [sp, #12]
 800eebc:	4b96      	ldr	r3, [pc, #600]	; (800f118 <pow+0x2c4>)
 800eebe:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800eec2:	2200      	movs	r2, #0
 800eec4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eec8:	9b00      	ldr	r3, [sp, #0]
 800eeca:	2b02      	cmp	r3, #2
 800eecc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800eed0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800eed4:	d033      	beq.n	800ef3e <pow+0xea>
 800eed6:	a802      	add	r0, sp, #8
 800eed8:	f000 ff55 	bl	800fd86 <matherr>
 800eedc:	bb48      	cbnz	r0, 800ef32 <pow+0xde>
 800eede:	e05d      	b.n	800ef9c <pow+0x148>
 800eee0:	f04f 0a00 	mov.w	sl, #0
 800eee4:	f04f 0b00 	mov.w	fp, #0
 800eee8:	4652      	mov	r2, sl
 800eeea:	465b      	mov	r3, fp
 800eeec:	4630      	mov	r0, r6
 800eeee:	4639      	mov	r1, r7
 800eef0:	f7f1 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 800eef4:	ec4b ab19 	vmov	d9, sl, fp
 800eef8:	2800      	cmp	r0, #0
 800eefa:	d054      	beq.n	800efa6 <pow+0x152>
 800eefc:	4652      	mov	r2, sl
 800eefe:	465b      	mov	r3, fp
 800ef00:	4620      	mov	r0, r4
 800ef02:	4629      	mov	r1, r5
 800ef04:	f7f1 fde0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef08:	4680      	mov	r8, r0
 800ef0a:	b318      	cbz	r0, 800ef54 <pow+0x100>
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	9302      	str	r3, [sp, #8]
 800ef10:	4b80      	ldr	r3, [pc, #512]	; (800f114 <pow+0x2c0>)
 800ef12:	9303      	str	r3, [sp, #12]
 800ef14:	9b01      	ldr	r3, [sp, #4]
 800ef16:	930a      	str	r3, [sp, #40]	; 0x28
 800ef18:	9b00      	ldr	r3, [sp, #0]
 800ef1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ef1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ef22:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d0d5      	beq.n	800eed6 <pow+0x82>
 800ef2a:	4b7b      	ldr	r3, [pc, #492]	; (800f118 <pow+0x2c4>)
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ef32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef34:	b11b      	cbz	r3, 800ef3e <pow+0xea>
 800ef36:	f7fb fd1d 	bl	800a974 <__errno>
 800ef3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef3c:	6003      	str	r3, [r0, #0]
 800ef3e:	ed9d 8b08 	vldr	d8, [sp, #32]
 800ef42:	eeb0 0a48 	vmov.f32	s0, s16
 800ef46:	eef0 0a68 	vmov.f32	s1, s17
 800ef4a:	b00d      	add	sp, #52	; 0x34
 800ef4c:	ecbd 8b04 	vpop	{d8-d9}
 800ef50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef54:	ec45 4b10 	vmov	d0, r4, r5
 800ef58:	f000 ff0d 	bl	800fd76 <finite>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d0f0      	beq.n	800ef42 <pow+0xee>
 800ef60:	4652      	mov	r2, sl
 800ef62:	465b      	mov	r3, fp
 800ef64:	4620      	mov	r0, r4
 800ef66:	4629      	mov	r1, r5
 800ef68:	f7f1 fdb8 	bl	8000adc <__aeabi_dcmplt>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	d0e8      	beq.n	800ef42 <pow+0xee>
 800ef70:	2301      	movs	r3, #1
 800ef72:	9302      	str	r3, [sp, #8]
 800ef74:	4b67      	ldr	r3, [pc, #412]	; (800f114 <pow+0x2c0>)
 800ef76:	9303      	str	r3, [sp, #12]
 800ef78:	f999 3000 	ldrsb.w	r3, [r9]
 800ef7c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800ef80:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ef84:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800ef88:	b913      	cbnz	r3, 800ef90 <pow+0x13c>
 800ef8a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ef8e:	e7a2      	b.n	800eed6 <pow+0x82>
 800ef90:	4962      	ldr	r1, [pc, #392]	; (800f11c <pow+0x2c8>)
 800ef92:	2000      	movs	r0, #0
 800ef94:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ef98:	2b02      	cmp	r3, #2
 800ef9a:	d19c      	bne.n	800eed6 <pow+0x82>
 800ef9c:	f7fb fcea 	bl	800a974 <__errno>
 800efa0:	2321      	movs	r3, #33	; 0x21
 800efa2:	6003      	str	r3, [r0, #0]
 800efa4:	e7c5      	b.n	800ef32 <pow+0xde>
 800efa6:	eeb0 0a48 	vmov.f32	s0, s16
 800efaa:	eef0 0a68 	vmov.f32	s1, s17
 800efae:	f000 fee2 	bl	800fd76 <finite>
 800efb2:	9000      	str	r0, [sp, #0]
 800efb4:	2800      	cmp	r0, #0
 800efb6:	f040 8081 	bne.w	800f0bc <pow+0x268>
 800efba:	ec47 6b10 	vmov	d0, r6, r7
 800efbe:	f000 feda 	bl	800fd76 <finite>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	d07a      	beq.n	800f0bc <pow+0x268>
 800efc6:	ec45 4b10 	vmov	d0, r4, r5
 800efca:	f000 fed4 	bl	800fd76 <finite>
 800efce:	2800      	cmp	r0, #0
 800efd0:	d074      	beq.n	800f0bc <pow+0x268>
 800efd2:	ec53 2b18 	vmov	r2, r3, d8
 800efd6:	ee18 0a10 	vmov	r0, s16
 800efda:	4619      	mov	r1, r3
 800efdc:	f7f1 fda6 	bl	8000b2c <__aeabi_dcmpun>
 800efe0:	f999 9000 	ldrsb.w	r9, [r9]
 800efe4:	4b4b      	ldr	r3, [pc, #300]	; (800f114 <pow+0x2c0>)
 800efe6:	b1b0      	cbz	r0, 800f016 <pow+0x1c2>
 800efe8:	2201      	movs	r2, #1
 800efea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800efee:	9b00      	ldr	r3, [sp, #0]
 800eff0:	930a      	str	r3, [sp, #40]	; 0x28
 800eff2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800eff6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800effa:	f1b9 0f00 	cmp.w	r9, #0
 800effe:	d0c4      	beq.n	800ef8a <pow+0x136>
 800f000:	4652      	mov	r2, sl
 800f002:	465b      	mov	r3, fp
 800f004:	4650      	mov	r0, sl
 800f006:	4659      	mov	r1, fp
 800f008:	f7f1 fc20 	bl	800084c <__aeabi_ddiv>
 800f00c:	f1b9 0f02 	cmp.w	r9, #2
 800f010:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f014:	e7c1      	b.n	800ef9a <pow+0x146>
 800f016:	2203      	movs	r2, #3
 800f018:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f01c:	900a      	str	r0, [sp, #40]	; 0x28
 800f01e:	4629      	mov	r1, r5
 800f020:	4620      	mov	r0, r4
 800f022:	2200      	movs	r2, #0
 800f024:	4b3e      	ldr	r3, [pc, #248]	; (800f120 <pow+0x2cc>)
 800f026:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800f02a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f02e:	f7f1 fae3 	bl	80005f8 <__aeabi_dmul>
 800f032:	4604      	mov	r4, r0
 800f034:	460d      	mov	r5, r1
 800f036:	f1b9 0f00 	cmp.w	r9, #0
 800f03a:	d124      	bne.n	800f086 <pow+0x232>
 800f03c:	4b39      	ldr	r3, [pc, #228]	; (800f124 <pow+0x2d0>)
 800f03e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f042:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f046:	4630      	mov	r0, r6
 800f048:	4652      	mov	r2, sl
 800f04a:	465b      	mov	r3, fp
 800f04c:	4639      	mov	r1, r7
 800f04e:	f7f1 fd45 	bl	8000adc <__aeabi_dcmplt>
 800f052:	2800      	cmp	r0, #0
 800f054:	d056      	beq.n	800f104 <pow+0x2b0>
 800f056:	ec45 4b10 	vmov	d0, r4, r5
 800f05a:	f000 fea1 	bl	800fda0 <rint>
 800f05e:	4622      	mov	r2, r4
 800f060:	462b      	mov	r3, r5
 800f062:	ec51 0b10 	vmov	r0, r1, d0
 800f066:	f7f1 fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f06a:	b920      	cbnz	r0, 800f076 <pow+0x222>
 800f06c:	4b2e      	ldr	r3, [pc, #184]	; (800f128 <pow+0x2d4>)
 800f06e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f072:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f076:	f998 3000 	ldrsb.w	r3, [r8]
 800f07a:	2b02      	cmp	r3, #2
 800f07c:	d142      	bne.n	800f104 <pow+0x2b0>
 800f07e:	f7fb fc79 	bl	800a974 <__errno>
 800f082:	2322      	movs	r3, #34	; 0x22
 800f084:	e78d      	b.n	800efa2 <pow+0x14e>
 800f086:	4b29      	ldr	r3, [pc, #164]	; (800f12c <pow+0x2d8>)
 800f088:	2200      	movs	r2, #0
 800f08a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f08e:	4630      	mov	r0, r6
 800f090:	4652      	mov	r2, sl
 800f092:	465b      	mov	r3, fp
 800f094:	4639      	mov	r1, r7
 800f096:	f7f1 fd21 	bl	8000adc <__aeabi_dcmplt>
 800f09a:	2800      	cmp	r0, #0
 800f09c:	d0eb      	beq.n	800f076 <pow+0x222>
 800f09e:	ec45 4b10 	vmov	d0, r4, r5
 800f0a2:	f000 fe7d 	bl	800fda0 <rint>
 800f0a6:	4622      	mov	r2, r4
 800f0a8:	462b      	mov	r3, r5
 800f0aa:	ec51 0b10 	vmov	r0, r1, d0
 800f0ae:	f7f1 fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0b2:	2800      	cmp	r0, #0
 800f0b4:	d1df      	bne.n	800f076 <pow+0x222>
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	4b18      	ldr	r3, [pc, #96]	; (800f11c <pow+0x2c8>)
 800f0ba:	e7da      	b.n	800f072 <pow+0x21e>
 800f0bc:	2200      	movs	r2, #0
 800f0be:	2300      	movs	r3, #0
 800f0c0:	ec51 0b18 	vmov	r0, r1, d8
 800f0c4:	f7f1 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	f43f af3a 	beq.w	800ef42 <pow+0xee>
 800f0ce:	ec47 6b10 	vmov	d0, r6, r7
 800f0d2:	f000 fe50 	bl	800fd76 <finite>
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	f43f af33 	beq.w	800ef42 <pow+0xee>
 800f0dc:	ec45 4b10 	vmov	d0, r4, r5
 800f0e0:	f000 fe49 	bl	800fd76 <finite>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	f43f af2c 	beq.w	800ef42 <pow+0xee>
 800f0ea:	2304      	movs	r3, #4
 800f0ec:	9302      	str	r3, [sp, #8]
 800f0ee:	4b09      	ldr	r3, [pc, #36]	; (800f114 <pow+0x2c0>)
 800f0f0:	9303      	str	r3, [sp, #12]
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	930a      	str	r3, [sp, #40]	; 0x28
 800f0f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f0fa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800f0fe:	ed8d 9b08 	vstr	d9, [sp, #32]
 800f102:	e7b8      	b.n	800f076 <pow+0x222>
 800f104:	a802      	add	r0, sp, #8
 800f106:	f000 fe3e 	bl	800fd86 <matherr>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	f47f af11 	bne.w	800ef32 <pow+0xde>
 800f110:	e7b5      	b.n	800f07e <pow+0x22a>
 800f112:	bf00      	nop
 800f114:	080106b6 	.word	0x080106b6
 800f118:	3ff00000 	.word	0x3ff00000
 800f11c:	fff00000 	.word	0xfff00000
 800f120:	3fe00000 	.word	0x3fe00000
 800f124:	47efffff 	.word	0x47efffff
 800f128:	c7efffff 	.word	0xc7efffff
 800f12c:	7ff00000 	.word	0x7ff00000
 800f130:	200001dc 	.word	0x200001dc

0800f134 <sqrt>:
 800f134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f138:	ed2d 8b02 	vpush	{d8}
 800f13c:	b08b      	sub	sp, #44	; 0x2c
 800f13e:	ec55 4b10 	vmov	r4, r5, d0
 800f142:	f000 fd5f 	bl	800fc04 <__ieee754_sqrt>
 800f146:	4b26      	ldr	r3, [pc, #152]	; (800f1e0 <sqrt+0xac>)
 800f148:	eeb0 8a40 	vmov.f32	s16, s0
 800f14c:	eef0 8a60 	vmov.f32	s17, s1
 800f150:	f993 6000 	ldrsb.w	r6, [r3]
 800f154:	1c73      	adds	r3, r6, #1
 800f156:	d02a      	beq.n	800f1ae <sqrt+0x7a>
 800f158:	4622      	mov	r2, r4
 800f15a:	462b      	mov	r3, r5
 800f15c:	4620      	mov	r0, r4
 800f15e:	4629      	mov	r1, r5
 800f160:	f7f1 fce4 	bl	8000b2c <__aeabi_dcmpun>
 800f164:	4607      	mov	r7, r0
 800f166:	bb10      	cbnz	r0, 800f1ae <sqrt+0x7a>
 800f168:	f04f 0800 	mov.w	r8, #0
 800f16c:	f04f 0900 	mov.w	r9, #0
 800f170:	4642      	mov	r2, r8
 800f172:	464b      	mov	r3, r9
 800f174:	4620      	mov	r0, r4
 800f176:	4629      	mov	r1, r5
 800f178:	f7f1 fcb0 	bl	8000adc <__aeabi_dcmplt>
 800f17c:	b1b8      	cbz	r0, 800f1ae <sqrt+0x7a>
 800f17e:	2301      	movs	r3, #1
 800f180:	9300      	str	r3, [sp, #0]
 800f182:	4b18      	ldr	r3, [pc, #96]	; (800f1e4 <sqrt+0xb0>)
 800f184:	9301      	str	r3, [sp, #4]
 800f186:	9708      	str	r7, [sp, #32]
 800f188:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800f18c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f190:	b9b6      	cbnz	r6, 800f1c0 <sqrt+0x8c>
 800f192:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800f196:	4668      	mov	r0, sp
 800f198:	f000 fdf5 	bl	800fd86 <matherr>
 800f19c:	b1d0      	cbz	r0, 800f1d4 <sqrt+0xa0>
 800f19e:	9b08      	ldr	r3, [sp, #32]
 800f1a0:	b11b      	cbz	r3, 800f1aa <sqrt+0x76>
 800f1a2:	f7fb fbe7 	bl	800a974 <__errno>
 800f1a6:	9b08      	ldr	r3, [sp, #32]
 800f1a8:	6003      	str	r3, [r0, #0]
 800f1aa:	ed9d 8b06 	vldr	d8, [sp, #24]
 800f1ae:	eeb0 0a48 	vmov.f32	s0, s16
 800f1b2:	eef0 0a68 	vmov.f32	s1, s17
 800f1b6:	b00b      	add	sp, #44	; 0x2c
 800f1b8:	ecbd 8b02 	vpop	{d8}
 800f1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1c0:	4642      	mov	r2, r8
 800f1c2:	464b      	mov	r3, r9
 800f1c4:	4640      	mov	r0, r8
 800f1c6:	4649      	mov	r1, r9
 800f1c8:	f7f1 fb40 	bl	800084c <__aeabi_ddiv>
 800f1cc:	2e02      	cmp	r6, #2
 800f1ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f1d2:	d1e0      	bne.n	800f196 <sqrt+0x62>
 800f1d4:	f7fb fbce 	bl	800a974 <__errno>
 800f1d8:	2321      	movs	r3, #33	; 0x21
 800f1da:	6003      	str	r3, [r0, #0]
 800f1dc:	e7df      	b.n	800f19e <sqrt+0x6a>
 800f1de:	bf00      	nop
 800f1e0:	200001dc 	.word	0x200001dc
 800f1e4:	080106ba 	.word	0x080106ba

0800f1e8 <__ieee754_pow>:
 800f1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1ec:	b091      	sub	sp, #68	; 0x44
 800f1ee:	ed8d 1b00 	vstr	d1, [sp]
 800f1f2:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f1f6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f1fa:	ea58 0302 	orrs.w	r3, r8, r2
 800f1fe:	ec57 6b10 	vmov	r6, r7, d0
 800f202:	f000 84be 	beq.w	800fb82 <__ieee754_pow+0x99a>
 800f206:	4b7a      	ldr	r3, [pc, #488]	; (800f3f0 <__ieee754_pow+0x208>)
 800f208:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f20c:	429c      	cmp	r4, r3
 800f20e:	463d      	mov	r5, r7
 800f210:	ee10 aa10 	vmov	sl, s0
 800f214:	dc09      	bgt.n	800f22a <__ieee754_pow+0x42>
 800f216:	d103      	bne.n	800f220 <__ieee754_pow+0x38>
 800f218:	b93e      	cbnz	r6, 800f22a <__ieee754_pow+0x42>
 800f21a:	45a0      	cmp	r8, r4
 800f21c:	dc0d      	bgt.n	800f23a <__ieee754_pow+0x52>
 800f21e:	e001      	b.n	800f224 <__ieee754_pow+0x3c>
 800f220:	4598      	cmp	r8, r3
 800f222:	dc02      	bgt.n	800f22a <__ieee754_pow+0x42>
 800f224:	4598      	cmp	r8, r3
 800f226:	d10e      	bne.n	800f246 <__ieee754_pow+0x5e>
 800f228:	b16a      	cbz	r2, 800f246 <__ieee754_pow+0x5e>
 800f22a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f22e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f232:	ea54 030a 	orrs.w	r3, r4, sl
 800f236:	f000 84a4 	beq.w	800fb82 <__ieee754_pow+0x99a>
 800f23a:	486e      	ldr	r0, [pc, #440]	; (800f3f4 <__ieee754_pow+0x20c>)
 800f23c:	b011      	add	sp, #68	; 0x44
 800f23e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f242:	f000 bda5 	b.w	800fd90 <nan>
 800f246:	2d00      	cmp	r5, #0
 800f248:	da53      	bge.n	800f2f2 <__ieee754_pow+0x10a>
 800f24a:	4b6b      	ldr	r3, [pc, #428]	; (800f3f8 <__ieee754_pow+0x210>)
 800f24c:	4598      	cmp	r8, r3
 800f24e:	dc4d      	bgt.n	800f2ec <__ieee754_pow+0x104>
 800f250:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f254:	4598      	cmp	r8, r3
 800f256:	dd4c      	ble.n	800f2f2 <__ieee754_pow+0x10a>
 800f258:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f25c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f260:	2b14      	cmp	r3, #20
 800f262:	dd26      	ble.n	800f2b2 <__ieee754_pow+0xca>
 800f264:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f268:	fa22 f103 	lsr.w	r1, r2, r3
 800f26c:	fa01 f303 	lsl.w	r3, r1, r3
 800f270:	4293      	cmp	r3, r2
 800f272:	d13e      	bne.n	800f2f2 <__ieee754_pow+0x10a>
 800f274:	f001 0101 	and.w	r1, r1, #1
 800f278:	f1c1 0b02 	rsb	fp, r1, #2
 800f27c:	2a00      	cmp	r2, #0
 800f27e:	d15b      	bne.n	800f338 <__ieee754_pow+0x150>
 800f280:	4b5b      	ldr	r3, [pc, #364]	; (800f3f0 <__ieee754_pow+0x208>)
 800f282:	4598      	cmp	r8, r3
 800f284:	d124      	bne.n	800f2d0 <__ieee754_pow+0xe8>
 800f286:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f28a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f28e:	ea53 030a 	orrs.w	r3, r3, sl
 800f292:	f000 8476 	beq.w	800fb82 <__ieee754_pow+0x99a>
 800f296:	4b59      	ldr	r3, [pc, #356]	; (800f3fc <__ieee754_pow+0x214>)
 800f298:	429c      	cmp	r4, r3
 800f29a:	dd2d      	ble.n	800f2f8 <__ieee754_pow+0x110>
 800f29c:	f1b9 0f00 	cmp.w	r9, #0
 800f2a0:	f280 8473 	bge.w	800fb8a <__ieee754_pow+0x9a2>
 800f2a4:	2000      	movs	r0, #0
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	ec41 0b10 	vmov	d0, r0, r1
 800f2ac:	b011      	add	sp, #68	; 0x44
 800f2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b2:	2a00      	cmp	r2, #0
 800f2b4:	d13e      	bne.n	800f334 <__ieee754_pow+0x14c>
 800f2b6:	f1c3 0314 	rsb	r3, r3, #20
 800f2ba:	fa48 f103 	asr.w	r1, r8, r3
 800f2be:	fa01 f303 	lsl.w	r3, r1, r3
 800f2c2:	4543      	cmp	r3, r8
 800f2c4:	f040 8469 	bne.w	800fb9a <__ieee754_pow+0x9b2>
 800f2c8:	f001 0101 	and.w	r1, r1, #1
 800f2cc:	f1c1 0b02 	rsb	fp, r1, #2
 800f2d0:	4b4b      	ldr	r3, [pc, #300]	; (800f400 <__ieee754_pow+0x218>)
 800f2d2:	4598      	cmp	r8, r3
 800f2d4:	d118      	bne.n	800f308 <__ieee754_pow+0x120>
 800f2d6:	f1b9 0f00 	cmp.w	r9, #0
 800f2da:	f280 845a 	bge.w	800fb92 <__ieee754_pow+0x9aa>
 800f2de:	4948      	ldr	r1, [pc, #288]	; (800f400 <__ieee754_pow+0x218>)
 800f2e0:	4632      	mov	r2, r6
 800f2e2:	463b      	mov	r3, r7
 800f2e4:	2000      	movs	r0, #0
 800f2e6:	f7f1 fab1 	bl	800084c <__aeabi_ddiv>
 800f2ea:	e7dd      	b.n	800f2a8 <__ieee754_pow+0xc0>
 800f2ec:	f04f 0b02 	mov.w	fp, #2
 800f2f0:	e7c4      	b.n	800f27c <__ieee754_pow+0x94>
 800f2f2:	f04f 0b00 	mov.w	fp, #0
 800f2f6:	e7c1      	b.n	800f27c <__ieee754_pow+0x94>
 800f2f8:	f1b9 0f00 	cmp.w	r9, #0
 800f2fc:	dad2      	bge.n	800f2a4 <__ieee754_pow+0xbc>
 800f2fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f302:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f306:	e7cf      	b.n	800f2a8 <__ieee754_pow+0xc0>
 800f308:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f30c:	d106      	bne.n	800f31c <__ieee754_pow+0x134>
 800f30e:	4632      	mov	r2, r6
 800f310:	463b      	mov	r3, r7
 800f312:	4610      	mov	r0, r2
 800f314:	4619      	mov	r1, r3
 800f316:	f7f1 f96f 	bl	80005f8 <__aeabi_dmul>
 800f31a:	e7c5      	b.n	800f2a8 <__ieee754_pow+0xc0>
 800f31c:	4b39      	ldr	r3, [pc, #228]	; (800f404 <__ieee754_pow+0x21c>)
 800f31e:	4599      	cmp	r9, r3
 800f320:	d10a      	bne.n	800f338 <__ieee754_pow+0x150>
 800f322:	2d00      	cmp	r5, #0
 800f324:	db08      	blt.n	800f338 <__ieee754_pow+0x150>
 800f326:	ec47 6b10 	vmov	d0, r6, r7
 800f32a:	b011      	add	sp, #68	; 0x44
 800f32c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f330:	f000 bc68 	b.w	800fc04 <__ieee754_sqrt>
 800f334:	f04f 0b00 	mov.w	fp, #0
 800f338:	ec47 6b10 	vmov	d0, r6, r7
 800f33c:	f000 fd12 	bl	800fd64 <fabs>
 800f340:	ec51 0b10 	vmov	r0, r1, d0
 800f344:	f1ba 0f00 	cmp.w	sl, #0
 800f348:	d127      	bne.n	800f39a <__ieee754_pow+0x1b2>
 800f34a:	b124      	cbz	r4, 800f356 <__ieee754_pow+0x16e>
 800f34c:	4b2c      	ldr	r3, [pc, #176]	; (800f400 <__ieee754_pow+0x218>)
 800f34e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f352:	429a      	cmp	r2, r3
 800f354:	d121      	bne.n	800f39a <__ieee754_pow+0x1b2>
 800f356:	f1b9 0f00 	cmp.w	r9, #0
 800f35a:	da05      	bge.n	800f368 <__ieee754_pow+0x180>
 800f35c:	4602      	mov	r2, r0
 800f35e:	460b      	mov	r3, r1
 800f360:	2000      	movs	r0, #0
 800f362:	4927      	ldr	r1, [pc, #156]	; (800f400 <__ieee754_pow+0x218>)
 800f364:	f7f1 fa72 	bl	800084c <__aeabi_ddiv>
 800f368:	2d00      	cmp	r5, #0
 800f36a:	da9d      	bge.n	800f2a8 <__ieee754_pow+0xc0>
 800f36c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f370:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f374:	ea54 030b 	orrs.w	r3, r4, fp
 800f378:	d108      	bne.n	800f38c <__ieee754_pow+0x1a4>
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	4610      	mov	r0, r2
 800f380:	4619      	mov	r1, r3
 800f382:	f7f0 ff81 	bl	8000288 <__aeabi_dsub>
 800f386:	4602      	mov	r2, r0
 800f388:	460b      	mov	r3, r1
 800f38a:	e7ac      	b.n	800f2e6 <__ieee754_pow+0xfe>
 800f38c:	f1bb 0f01 	cmp.w	fp, #1
 800f390:	d18a      	bne.n	800f2a8 <__ieee754_pow+0xc0>
 800f392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f396:	4619      	mov	r1, r3
 800f398:	e786      	b.n	800f2a8 <__ieee754_pow+0xc0>
 800f39a:	0fed      	lsrs	r5, r5, #31
 800f39c:	1e6b      	subs	r3, r5, #1
 800f39e:	930d      	str	r3, [sp, #52]	; 0x34
 800f3a0:	ea5b 0303 	orrs.w	r3, fp, r3
 800f3a4:	d102      	bne.n	800f3ac <__ieee754_pow+0x1c4>
 800f3a6:	4632      	mov	r2, r6
 800f3a8:	463b      	mov	r3, r7
 800f3aa:	e7e8      	b.n	800f37e <__ieee754_pow+0x196>
 800f3ac:	4b16      	ldr	r3, [pc, #88]	; (800f408 <__ieee754_pow+0x220>)
 800f3ae:	4598      	cmp	r8, r3
 800f3b0:	f340 80fe 	ble.w	800f5b0 <__ieee754_pow+0x3c8>
 800f3b4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f3b8:	4598      	cmp	r8, r3
 800f3ba:	dd0a      	ble.n	800f3d2 <__ieee754_pow+0x1ea>
 800f3bc:	4b0f      	ldr	r3, [pc, #60]	; (800f3fc <__ieee754_pow+0x214>)
 800f3be:	429c      	cmp	r4, r3
 800f3c0:	dc0d      	bgt.n	800f3de <__ieee754_pow+0x1f6>
 800f3c2:	f1b9 0f00 	cmp.w	r9, #0
 800f3c6:	f6bf af6d 	bge.w	800f2a4 <__ieee754_pow+0xbc>
 800f3ca:	a307      	add	r3, pc, #28	; (adr r3, 800f3e8 <__ieee754_pow+0x200>)
 800f3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d0:	e79f      	b.n	800f312 <__ieee754_pow+0x12a>
 800f3d2:	4b0e      	ldr	r3, [pc, #56]	; (800f40c <__ieee754_pow+0x224>)
 800f3d4:	429c      	cmp	r4, r3
 800f3d6:	ddf4      	ble.n	800f3c2 <__ieee754_pow+0x1da>
 800f3d8:	4b09      	ldr	r3, [pc, #36]	; (800f400 <__ieee754_pow+0x218>)
 800f3da:	429c      	cmp	r4, r3
 800f3dc:	dd18      	ble.n	800f410 <__ieee754_pow+0x228>
 800f3de:	f1b9 0f00 	cmp.w	r9, #0
 800f3e2:	dcf2      	bgt.n	800f3ca <__ieee754_pow+0x1e2>
 800f3e4:	e75e      	b.n	800f2a4 <__ieee754_pow+0xbc>
 800f3e6:	bf00      	nop
 800f3e8:	8800759c 	.word	0x8800759c
 800f3ec:	7e37e43c 	.word	0x7e37e43c
 800f3f0:	7ff00000 	.word	0x7ff00000
 800f3f4:	080105a9 	.word	0x080105a9
 800f3f8:	433fffff 	.word	0x433fffff
 800f3fc:	3fefffff 	.word	0x3fefffff
 800f400:	3ff00000 	.word	0x3ff00000
 800f404:	3fe00000 	.word	0x3fe00000
 800f408:	41e00000 	.word	0x41e00000
 800f40c:	3feffffe 	.word	0x3feffffe
 800f410:	2200      	movs	r2, #0
 800f412:	4b63      	ldr	r3, [pc, #396]	; (800f5a0 <__ieee754_pow+0x3b8>)
 800f414:	f7f0 ff38 	bl	8000288 <__aeabi_dsub>
 800f418:	a355      	add	r3, pc, #340	; (adr r3, 800f570 <__ieee754_pow+0x388>)
 800f41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41e:	4604      	mov	r4, r0
 800f420:	460d      	mov	r5, r1
 800f422:	f7f1 f8e9 	bl	80005f8 <__aeabi_dmul>
 800f426:	a354      	add	r3, pc, #336	; (adr r3, 800f578 <__ieee754_pow+0x390>)
 800f428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42c:	4606      	mov	r6, r0
 800f42e:	460f      	mov	r7, r1
 800f430:	4620      	mov	r0, r4
 800f432:	4629      	mov	r1, r5
 800f434:	f7f1 f8e0 	bl	80005f8 <__aeabi_dmul>
 800f438:	2200      	movs	r2, #0
 800f43a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f43e:	4b59      	ldr	r3, [pc, #356]	; (800f5a4 <__ieee754_pow+0x3bc>)
 800f440:	4620      	mov	r0, r4
 800f442:	4629      	mov	r1, r5
 800f444:	f7f1 f8d8 	bl	80005f8 <__aeabi_dmul>
 800f448:	4602      	mov	r2, r0
 800f44a:	460b      	mov	r3, r1
 800f44c:	a14c      	add	r1, pc, #304	; (adr r1, 800f580 <__ieee754_pow+0x398>)
 800f44e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f452:	f7f0 ff19 	bl	8000288 <__aeabi_dsub>
 800f456:	4622      	mov	r2, r4
 800f458:	462b      	mov	r3, r5
 800f45a:	f7f1 f8cd 	bl	80005f8 <__aeabi_dmul>
 800f45e:	4602      	mov	r2, r0
 800f460:	460b      	mov	r3, r1
 800f462:	2000      	movs	r0, #0
 800f464:	4950      	ldr	r1, [pc, #320]	; (800f5a8 <__ieee754_pow+0x3c0>)
 800f466:	f7f0 ff0f 	bl	8000288 <__aeabi_dsub>
 800f46a:	4622      	mov	r2, r4
 800f46c:	462b      	mov	r3, r5
 800f46e:	4680      	mov	r8, r0
 800f470:	4689      	mov	r9, r1
 800f472:	4620      	mov	r0, r4
 800f474:	4629      	mov	r1, r5
 800f476:	f7f1 f8bf 	bl	80005f8 <__aeabi_dmul>
 800f47a:	4602      	mov	r2, r0
 800f47c:	460b      	mov	r3, r1
 800f47e:	4640      	mov	r0, r8
 800f480:	4649      	mov	r1, r9
 800f482:	f7f1 f8b9 	bl	80005f8 <__aeabi_dmul>
 800f486:	a340      	add	r3, pc, #256	; (adr r3, 800f588 <__ieee754_pow+0x3a0>)
 800f488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48c:	f7f1 f8b4 	bl	80005f8 <__aeabi_dmul>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f498:	f7f0 fef6 	bl	8000288 <__aeabi_dsub>
 800f49c:	4602      	mov	r2, r0
 800f49e:	460b      	mov	r3, r1
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	460d      	mov	r5, r1
 800f4a4:	4630      	mov	r0, r6
 800f4a6:	4639      	mov	r1, r7
 800f4a8:	f7f0 fef0 	bl	800028c <__adddf3>
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f4b2:	4632      	mov	r2, r6
 800f4b4:	463b      	mov	r3, r7
 800f4b6:	f7f0 fee7 	bl	8000288 <__aeabi_dsub>
 800f4ba:	4602      	mov	r2, r0
 800f4bc:	460b      	mov	r3, r1
 800f4be:	4620      	mov	r0, r4
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	f7f0 fee1 	bl	8000288 <__aeabi_dsub>
 800f4c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f4c8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800f4cc:	4313      	orrs	r3, r2
 800f4ce:	4606      	mov	r6, r0
 800f4d0:	460f      	mov	r7, r1
 800f4d2:	f040 81eb 	bne.w	800f8ac <__ieee754_pow+0x6c4>
 800f4d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f590 <__ieee754_pow+0x3a8>
 800f4da:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f4de:	2400      	movs	r4, #0
 800f4e0:	4622      	mov	r2, r4
 800f4e2:	462b      	mov	r3, r5
 800f4e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f4ec:	f7f0 fecc 	bl	8000288 <__aeabi_dsub>
 800f4f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4f4:	f7f1 f880 	bl	80005f8 <__aeabi_dmul>
 800f4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4fc:	4680      	mov	r8, r0
 800f4fe:	4689      	mov	r9, r1
 800f500:	4630      	mov	r0, r6
 800f502:	4639      	mov	r1, r7
 800f504:	f7f1 f878 	bl	80005f8 <__aeabi_dmul>
 800f508:	4602      	mov	r2, r0
 800f50a:	460b      	mov	r3, r1
 800f50c:	4640      	mov	r0, r8
 800f50e:	4649      	mov	r1, r9
 800f510:	f7f0 febc 	bl	800028c <__adddf3>
 800f514:	4622      	mov	r2, r4
 800f516:	462b      	mov	r3, r5
 800f518:	4680      	mov	r8, r0
 800f51a:	4689      	mov	r9, r1
 800f51c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f520:	f7f1 f86a 	bl	80005f8 <__aeabi_dmul>
 800f524:	460b      	mov	r3, r1
 800f526:	4604      	mov	r4, r0
 800f528:	460d      	mov	r5, r1
 800f52a:	4602      	mov	r2, r0
 800f52c:	4649      	mov	r1, r9
 800f52e:	4640      	mov	r0, r8
 800f530:	e9cd 4500 	strd	r4, r5, [sp]
 800f534:	f7f0 feaa 	bl	800028c <__adddf3>
 800f538:	4b1c      	ldr	r3, [pc, #112]	; (800f5ac <__ieee754_pow+0x3c4>)
 800f53a:	4299      	cmp	r1, r3
 800f53c:	4606      	mov	r6, r0
 800f53e:	460f      	mov	r7, r1
 800f540:	468b      	mov	fp, r1
 800f542:	f340 82f7 	ble.w	800fb34 <__ieee754_pow+0x94c>
 800f546:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f54a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f54e:	4303      	orrs	r3, r0
 800f550:	f000 81ea 	beq.w	800f928 <__ieee754_pow+0x740>
 800f554:	a310      	add	r3, pc, #64	; (adr r3, 800f598 <__ieee754_pow+0x3b0>)
 800f556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f55e:	f7f1 f84b 	bl	80005f8 <__aeabi_dmul>
 800f562:	a30d      	add	r3, pc, #52	; (adr r3, 800f598 <__ieee754_pow+0x3b0>)
 800f564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f568:	e6d5      	b.n	800f316 <__ieee754_pow+0x12e>
 800f56a:	bf00      	nop
 800f56c:	f3af 8000 	nop.w
 800f570:	60000000 	.word	0x60000000
 800f574:	3ff71547 	.word	0x3ff71547
 800f578:	f85ddf44 	.word	0xf85ddf44
 800f57c:	3e54ae0b 	.word	0x3e54ae0b
 800f580:	55555555 	.word	0x55555555
 800f584:	3fd55555 	.word	0x3fd55555
 800f588:	652b82fe 	.word	0x652b82fe
 800f58c:	3ff71547 	.word	0x3ff71547
 800f590:	00000000 	.word	0x00000000
 800f594:	bff00000 	.word	0xbff00000
 800f598:	8800759c 	.word	0x8800759c
 800f59c:	7e37e43c 	.word	0x7e37e43c
 800f5a0:	3ff00000 	.word	0x3ff00000
 800f5a4:	3fd00000 	.word	0x3fd00000
 800f5a8:	3fe00000 	.word	0x3fe00000
 800f5ac:	408fffff 	.word	0x408fffff
 800f5b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f5b4:	f04f 0200 	mov.w	r2, #0
 800f5b8:	da05      	bge.n	800f5c6 <__ieee754_pow+0x3de>
 800f5ba:	4bd3      	ldr	r3, [pc, #844]	; (800f908 <__ieee754_pow+0x720>)
 800f5bc:	f7f1 f81c 	bl	80005f8 <__aeabi_dmul>
 800f5c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f5c4:	460c      	mov	r4, r1
 800f5c6:	1523      	asrs	r3, r4, #20
 800f5c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f5cc:	4413      	add	r3, r2
 800f5ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f5d0:	4bce      	ldr	r3, [pc, #824]	; (800f90c <__ieee754_pow+0x724>)
 800f5d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f5d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f5da:	429c      	cmp	r4, r3
 800f5dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f5e0:	dd08      	ble.n	800f5f4 <__ieee754_pow+0x40c>
 800f5e2:	4bcb      	ldr	r3, [pc, #812]	; (800f910 <__ieee754_pow+0x728>)
 800f5e4:	429c      	cmp	r4, r3
 800f5e6:	f340 815e 	ble.w	800f8a6 <__ieee754_pow+0x6be>
 800f5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	9309      	str	r3, [sp, #36]	; 0x24
 800f5f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f5f4:	f04f 0a00 	mov.w	sl, #0
 800f5f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f5fc:	930c      	str	r3, [sp, #48]	; 0x30
 800f5fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f600:	4bc4      	ldr	r3, [pc, #784]	; (800f914 <__ieee754_pow+0x72c>)
 800f602:	4413      	add	r3, r2
 800f604:	ed93 7b00 	vldr	d7, [r3]
 800f608:	4629      	mov	r1, r5
 800f60a:	ec53 2b17 	vmov	r2, r3, d7
 800f60e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f612:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f616:	f7f0 fe37 	bl	8000288 <__aeabi_dsub>
 800f61a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f61e:	4606      	mov	r6, r0
 800f620:	460f      	mov	r7, r1
 800f622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f626:	f7f0 fe31 	bl	800028c <__adddf3>
 800f62a:	4602      	mov	r2, r0
 800f62c:	460b      	mov	r3, r1
 800f62e:	2000      	movs	r0, #0
 800f630:	49b9      	ldr	r1, [pc, #740]	; (800f918 <__ieee754_pow+0x730>)
 800f632:	f7f1 f90b 	bl	800084c <__aeabi_ddiv>
 800f636:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f63a:	4602      	mov	r2, r0
 800f63c:	460b      	mov	r3, r1
 800f63e:	4630      	mov	r0, r6
 800f640:	4639      	mov	r1, r7
 800f642:	f7f0 ffd9 	bl	80005f8 <__aeabi_dmul>
 800f646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f64a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f64e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f652:	2300      	movs	r3, #0
 800f654:	9302      	str	r3, [sp, #8]
 800f656:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f65a:	106d      	asrs	r5, r5, #1
 800f65c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f660:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f664:	2200      	movs	r2, #0
 800f666:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f66a:	4640      	mov	r0, r8
 800f66c:	4649      	mov	r1, r9
 800f66e:	4614      	mov	r4, r2
 800f670:	461d      	mov	r5, r3
 800f672:	f7f0 ffc1 	bl	80005f8 <__aeabi_dmul>
 800f676:	4602      	mov	r2, r0
 800f678:	460b      	mov	r3, r1
 800f67a:	4630      	mov	r0, r6
 800f67c:	4639      	mov	r1, r7
 800f67e:	f7f0 fe03 	bl	8000288 <__aeabi_dsub>
 800f682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f686:	4606      	mov	r6, r0
 800f688:	460f      	mov	r7, r1
 800f68a:	4620      	mov	r0, r4
 800f68c:	4629      	mov	r1, r5
 800f68e:	f7f0 fdfb 	bl	8000288 <__aeabi_dsub>
 800f692:	4602      	mov	r2, r0
 800f694:	460b      	mov	r3, r1
 800f696:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f69a:	f7f0 fdf5 	bl	8000288 <__aeabi_dsub>
 800f69e:	4642      	mov	r2, r8
 800f6a0:	464b      	mov	r3, r9
 800f6a2:	f7f0 ffa9 	bl	80005f8 <__aeabi_dmul>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	4630      	mov	r0, r6
 800f6ac:	4639      	mov	r1, r7
 800f6ae:	f7f0 fdeb 	bl	8000288 <__aeabi_dsub>
 800f6b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f6b6:	f7f0 ff9f 	bl	80005f8 <__aeabi_dmul>
 800f6ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f6c2:	4610      	mov	r0, r2
 800f6c4:	4619      	mov	r1, r3
 800f6c6:	f7f0 ff97 	bl	80005f8 <__aeabi_dmul>
 800f6ca:	a37b      	add	r3, pc, #492	; (adr r3, 800f8b8 <__ieee754_pow+0x6d0>)
 800f6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	460d      	mov	r5, r1
 800f6d4:	f7f0 ff90 	bl	80005f8 <__aeabi_dmul>
 800f6d8:	a379      	add	r3, pc, #484	; (adr r3, 800f8c0 <__ieee754_pow+0x6d8>)
 800f6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6de:	f7f0 fdd5 	bl	800028c <__adddf3>
 800f6e2:	4622      	mov	r2, r4
 800f6e4:	462b      	mov	r3, r5
 800f6e6:	f7f0 ff87 	bl	80005f8 <__aeabi_dmul>
 800f6ea:	a377      	add	r3, pc, #476	; (adr r3, 800f8c8 <__ieee754_pow+0x6e0>)
 800f6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6f0:	f7f0 fdcc 	bl	800028c <__adddf3>
 800f6f4:	4622      	mov	r2, r4
 800f6f6:	462b      	mov	r3, r5
 800f6f8:	f7f0 ff7e 	bl	80005f8 <__aeabi_dmul>
 800f6fc:	a374      	add	r3, pc, #464	; (adr r3, 800f8d0 <__ieee754_pow+0x6e8>)
 800f6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f702:	f7f0 fdc3 	bl	800028c <__adddf3>
 800f706:	4622      	mov	r2, r4
 800f708:	462b      	mov	r3, r5
 800f70a:	f7f0 ff75 	bl	80005f8 <__aeabi_dmul>
 800f70e:	a372      	add	r3, pc, #456	; (adr r3, 800f8d8 <__ieee754_pow+0x6f0>)
 800f710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f714:	f7f0 fdba 	bl	800028c <__adddf3>
 800f718:	4622      	mov	r2, r4
 800f71a:	462b      	mov	r3, r5
 800f71c:	f7f0 ff6c 	bl	80005f8 <__aeabi_dmul>
 800f720:	a36f      	add	r3, pc, #444	; (adr r3, 800f8e0 <__ieee754_pow+0x6f8>)
 800f722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f726:	f7f0 fdb1 	bl	800028c <__adddf3>
 800f72a:	4622      	mov	r2, r4
 800f72c:	4606      	mov	r6, r0
 800f72e:	460f      	mov	r7, r1
 800f730:	462b      	mov	r3, r5
 800f732:	4620      	mov	r0, r4
 800f734:	4629      	mov	r1, r5
 800f736:	f7f0 ff5f 	bl	80005f8 <__aeabi_dmul>
 800f73a:	4602      	mov	r2, r0
 800f73c:	460b      	mov	r3, r1
 800f73e:	4630      	mov	r0, r6
 800f740:	4639      	mov	r1, r7
 800f742:	f7f0 ff59 	bl	80005f8 <__aeabi_dmul>
 800f746:	4642      	mov	r2, r8
 800f748:	4604      	mov	r4, r0
 800f74a:	460d      	mov	r5, r1
 800f74c:	464b      	mov	r3, r9
 800f74e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f752:	f7f0 fd9b 	bl	800028c <__adddf3>
 800f756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f75a:	f7f0 ff4d 	bl	80005f8 <__aeabi_dmul>
 800f75e:	4622      	mov	r2, r4
 800f760:	462b      	mov	r3, r5
 800f762:	f7f0 fd93 	bl	800028c <__adddf3>
 800f766:	4642      	mov	r2, r8
 800f768:	4606      	mov	r6, r0
 800f76a:	460f      	mov	r7, r1
 800f76c:	464b      	mov	r3, r9
 800f76e:	4640      	mov	r0, r8
 800f770:	4649      	mov	r1, r9
 800f772:	f7f0 ff41 	bl	80005f8 <__aeabi_dmul>
 800f776:	2200      	movs	r2, #0
 800f778:	4b68      	ldr	r3, [pc, #416]	; (800f91c <__ieee754_pow+0x734>)
 800f77a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f77e:	f7f0 fd85 	bl	800028c <__adddf3>
 800f782:	4632      	mov	r2, r6
 800f784:	463b      	mov	r3, r7
 800f786:	f7f0 fd81 	bl	800028c <__adddf3>
 800f78a:	9802      	ldr	r0, [sp, #8]
 800f78c:	460d      	mov	r5, r1
 800f78e:	4604      	mov	r4, r0
 800f790:	4602      	mov	r2, r0
 800f792:	460b      	mov	r3, r1
 800f794:	4640      	mov	r0, r8
 800f796:	4649      	mov	r1, r9
 800f798:	f7f0 ff2e 	bl	80005f8 <__aeabi_dmul>
 800f79c:	2200      	movs	r2, #0
 800f79e:	4680      	mov	r8, r0
 800f7a0:	4689      	mov	r9, r1
 800f7a2:	4b5e      	ldr	r3, [pc, #376]	; (800f91c <__ieee754_pow+0x734>)
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	4629      	mov	r1, r5
 800f7a8:	f7f0 fd6e 	bl	8000288 <__aeabi_dsub>
 800f7ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f7b0:	f7f0 fd6a 	bl	8000288 <__aeabi_dsub>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	460b      	mov	r3, r1
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	f7f0 fd64 	bl	8000288 <__aeabi_dsub>
 800f7c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7c4:	f7f0 ff18 	bl	80005f8 <__aeabi_dmul>
 800f7c8:	4622      	mov	r2, r4
 800f7ca:	4606      	mov	r6, r0
 800f7cc:	460f      	mov	r7, r1
 800f7ce:	462b      	mov	r3, r5
 800f7d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7d4:	f7f0 ff10 	bl	80005f8 <__aeabi_dmul>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	460b      	mov	r3, r1
 800f7dc:	4630      	mov	r0, r6
 800f7de:	4639      	mov	r1, r7
 800f7e0:	f7f0 fd54 	bl	800028c <__adddf3>
 800f7e4:	4606      	mov	r6, r0
 800f7e6:	460f      	mov	r7, r1
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	4640      	mov	r0, r8
 800f7ee:	4649      	mov	r1, r9
 800f7f0:	f7f0 fd4c 	bl	800028c <__adddf3>
 800f7f4:	9802      	ldr	r0, [sp, #8]
 800f7f6:	a33c      	add	r3, pc, #240	; (adr r3, 800f8e8 <__ieee754_pow+0x700>)
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	460d      	mov	r5, r1
 800f800:	f7f0 fefa 	bl	80005f8 <__aeabi_dmul>
 800f804:	4642      	mov	r2, r8
 800f806:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f80a:	464b      	mov	r3, r9
 800f80c:	4620      	mov	r0, r4
 800f80e:	4629      	mov	r1, r5
 800f810:	f7f0 fd3a 	bl	8000288 <__aeabi_dsub>
 800f814:	4602      	mov	r2, r0
 800f816:	460b      	mov	r3, r1
 800f818:	4630      	mov	r0, r6
 800f81a:	4639      	mov	r1, r7
 800f81c:	f7f0 fd34 	bl	8000288 <__aeabi_dsub>
 800f820:	a333      	add	r3, pc, #204	; (adr r3, 800f8f0 <__ieee754_pow+0x708>)
 800f822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f826:	f7f0 fee7 	bl	80005f8 <__aeabi_dmul>
 800f82a:	a333      	add	r3, pc, #204	; (adr r3, 800f8f8 <__ieee754_pow+0x710>)
 800f82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f830:	4606      	mov	r6, r0
 800f832:	460f      	mov	r7, r1
 800f834:	4620      	mov	r0, r4
 800f836:	4629      	mov	r1, r5
 800f838:	f7f0 fede 	bl	80005f8 <__aeabi_dmul>
 800f83c:	4602      	mov	r2, r0
 800f83e:	460b      	mov	r3, r1
 800f840:	4630      	mov	r0, r6
 800f842:	4639      	mov	r1, r7
 800f844:	f7f0 fd22 	bl	800028c <__adddf3>
 800f848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f84a:	4b35      	ldr	r3, [pc, #212]	; (800f920 <__ieee754_pow+0x738>)
 800f84c:	4413      	add	r3, r2
 800f84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f852:	f7f0 fd1b 	bl	800028c <__adddf3>
 800f856:	4604      	mov	r4, r0
 800f858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f85a:	460d      	mov	r5, r1
 800f85c:	f7f0 fe62 	bl	8000524 <__aeabi_i2d>
 800f860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f862:	4b30      	ldr	r3, [pc, #192]	; (800f924 <__ieee754_pow+0x73c>)
 800f864:	4413      	add	r3, r2
 800f866:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f86a:	4606      	mov	r6, r0
 800f86c:	460f      	mov	r7, r1
 800f86e:	4622      	mov	r2, r4
 800f870:	462b      	mov	r3, r5
 800f872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f876:	f7f0 fd09 	bl	800028c <__adddf3>
 800f87a:	4642      	mov	r2, r8
 800f87c:	464b      	mov	r3, r9
 800f87e:	f7f0 fd05 	bl	800028c <__adddf3>
 800f882:	4632      	mov	r2, r6
 800f884:	463b      	mov	r3, r7
 800f886:	f7f0 fd01 	bl	800028c <__adddf3>
 800f88a:	9802      	ldr	r0, [sp, #8]
 800f88c:	4632      	mov	r2, r6
 800f88e:	463b      	mov	r3, r7
 800f890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f894:	f7f0 fcf8 	bl	8000288 <__aeabi_dsub>
 800f898:	4642      	mov	r2, r8
 800f89a:	464b      	mov	r3, r9
 800f89c:	f7f0 fcf4 	bl	8000288 <__aeabi_dsub>
 800f8a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f8a4:	e607      	b.n	800f4b6 <__ieee754_pow+0x2ce>
 800f8a6:	f04f 0a01 	mov.w	sl, #1
 800f8aa:	e6a5      	b.n	800f5f8 <__ieee754_pow+0x410>
 800f8ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800f900 <__ieee754_pow+0x718>
 800f8b0:	e613      	b.n	800f4da <__ieee754_pow+0x2f2>
 800f8b2:	bf00      	nop
 800f8b4:	f3af 8000 	nop.w
 800f8b8:	4a454eef 	.word	0x4a454eef
 800f8bc:	3fca7e28 	.word	0x3fca7e28
 800f8c0:	93c9db65 	.word	0x93c9db65
 800f8c4:	3fcd864a 	.word	0x3fcd864a
 800f8c8:	a91d4101 	.word	0xa91d4101
 800f8cc:	3fd17460 	.word	0x3fd17460
 800f8d0:	518f264d 	.word	0x518f264d
 800f8d4:	3fd55555 	.word	0x3fd55555
 800f8d8:	db6fabff 	.word	0xdb6fabff
 800f8dc:	3fdb6db6 	.word	0x3fdb6db6
 800f8e0:	33333303 	.word	0x33333303
 800f8e4:	3fe33333 	.word	0x3fe33333
 800f8e8:	e0000000 	.word	0xe0000000
 800f8ec:	3feec709 	.word	0x3feec709
 800f8f0:	dc3a03fd 	.word	0xdc3a03fd
 800f8f4:	3feec709 	.word	0x3feec709
 800f8f8:	145b01f5 	.word	0x145b01f5
 800f8fc:	be3e2fe0 	.word	0xbe3e2fe0
 800f900:	00000000 	.word	0x00000000
 800f904:	3ff00000 	.word	0x3ff00000
 800f908:	43400000 	.word	0x43400000
 800f90c:	0003988e 	.word	0x0003988e
 800f910:	000bb679 	.word	0x000bb679
 800f914:	080106c0 	.word	0x080106c0
 800f918:	3ff00000 	.word	0x3ff00000
 800f91c:	40080000 	.word	0x40080000
 800f920:	080106e0 	.word	0x080106e0
 800f924:	080106d0 	.word	0x080106d0
 800f928:	a3b4      	add	r3, pc, #720	; (adr r3, 800fbfc <__ieee754_pow+0xa14>)
 800f92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92e:	4640      	mov	r0, r8
 800f930:	4649      	mov	r1, r9
 800f932:	f7f0 fcab 	bl	800028c <__adddf3>
 800f936:	4622      	mov	r2, r4
 800f938:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f93c:	462b      	mov	r3, r5
 800f93e:	4630      	mov	r0, r6
 800f940:	4639      	mov	r1, r7
 800f942:	f7f0 fca1 	bl	8000288 <__aeabi_dsub>
 800f946:	4602      	mov	r2, r0
 800f948:	460b      	mov	r3, r1
 800f94a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f94e:	f7f1 f8e3 	bl	8000b18 <__aeabi_dcmpgt>
 800f952:	2800      	cmp	r0, #0
 800f954:	f47f adfe 	bne.w	800f554 <__ieee754_pow+0x36c>
 800f958:	4aa3      	ldr	r2, [pc, #652]	; (800fbe8 <__ieee754_pow+0xa00>)
 800f95a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f95e:	4293      	cmp	r3, r2
 800f960:	f340 810a 	ble.w	800fb78 <__ieee754_pow+0x990>
 800f964:	151b      	asrs	r3, r3, #20
 800f966:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f96a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f96e:	fa4a f303 	asr.w	r3, sl, r3
 800f972:	445b      	add	r3, fp
 800f974:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f978:	4e9c      	ldr	r6, [pc, #624]	; (800fbec <__ieee754_pow+0xa04>)
 800f97a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f97e:	4116      	asrs	r6, r2
 800f980:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f984:	2000      	movs	r0, #0
 800f986:	ea23 0106 	bic.w	r1, r3, r6
 800f98a:	f1c2 0214 	rsb	r2, r2, #20
 800f98e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f992:	fa4a fa02 	asr.w	sl, sl, r2
 800f996:	f1bb 0f00 	cmp.w	fp, #0
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	4620      	mov	r0, r4
 800f9a0:	4629      	mov	r1, r5
 800f9a2:	bfb8      	it	lt
 800f9a4:	f1ca 0a00 	rsblt	sl, sl, #0
 800f9a8:	f7f0 fc6e 	bl	8000288 <__aeabi_dsub>
 800f9ac:	e9cd 0100 	strd	r0, r1, [sp]
 800f9b0:	4642      	mov	r2, r8
 800f9b2:	464b      	mov	r3, r9
 800f9b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9b8:	f7f0 fc68 	bl	800028c <__adddf3>
 800f9bc:	2000      	movs	r0, #0
 800f9be:	a378      	add	r3, pc, #480	; (adr r3, 800fba0 <__ieee754_pow+0x9b8>)
 800f9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c4:	4604      	mov	r4, r0
 800f9c6:	460d      	mov	r5, r1
 800f9c8:	f7f0 fe16 	bl	80005f8 <__aeabi_dmul>
 800f9cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9d0:	4606      	mov	r6, r0
 800f9d2:	460f      	mov	r7, r1
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	4629      	mov	r1, r5
 800f9d8:	f7f0 fc56 	bl	8000288 <__aeabi_dsub>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	460b      	mov	r3, r1
 800f9e0:	4640      	mov	r0, r8
 800f9e2:	4649      	mov	r1, r9
 800f9e4:	f7f0 fc50 	bl	8000288 <__aeabi_dsub>
 800f9e8:	a36f      	add	r3, pc, #444	; (adr r3, 800fba8 <__ieee754_pow+0x9c0>)
 800f9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ee:	f7f0 fe03 	bl	80005f8 <__aeabi_dmul>
 800f9f2:	a36f      	add	r3, pc, #444	; (adr r3, 800fbb0 <__ieee754_pow+0x9c8>)
 800f9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f8:	4680      	mov	r8, r0
 800f9fa:	4689      	mov	r9, r1
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	4629      	mov	r1, r5
 800fa00:	f7f0 fdfa 	bl	80005f8 <__aeabi_dmul>
 800fa04:	4602      	mov	r2, r0
 800fa06:	460b      	mov	r3, r1
 800fa08:	4640      	mov	r0, r8
 800fa0a:	4649      	mov	r1, r9
 800fa0c:	f7f0 fc3e 	bl	800028c <__adddf3>
 800fa10:	4604      	mov	r4, r0
 800fa12:	460d      	mov	r5, r1
 800fa14:	4602      	mov	r2, r0
 800fa16:	460b      	mov	r3, r1
 800fa18:	4630      	mov	r0, r6
 800fa1a:	4639      	mov	r1, r7
 800fa1c:	f7f0 fc36 	bl	800028c <__adddf3>
 800fa20:	4632      	mov	r2, r6
 800fa22:	463b      	mov	r3, r7
 800fa24:	4680      	mov	r8, r0
 800fa26:	4689      	mov	r9, r1
 800fa28:	f7f0 fc2e 	bl	8000288 <__aeabi_dsub>
 800fa2c:	4602      	mov	r2, r0
 800fa2e:	460b      	mov	r3, r1
 800fa30:	4620      	mov	r0, r4
 800fa32:	4629      	mov	r1, r5
 800fa34:	f7f0 fc28 	bl	8000288 <__aeabi_dsub>
 800fa38:	4642      	mov	r2, r8
 800fa3a:	4606      	mov	r6, r0
 800fa3c:	460f      	mov	r7, r1
 800fa3e:	464b      	mov	r3, r9
 800fa40:	4640      	mov	r0, r8
 800fa42:	4649      	mov	r1, r9
 800fa44:	f7f0 fdd8 	bl	80005f8 <__aeabi_dmul>
 800fa48:	a35b      	add	r3, pc, #364	; (adr r3, 800fbb8 <__ieee754_pow+0x9d0>)
 800fa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4e:	4604      	mov	r4, r0
 800fa50:	460d      	mov	r5, r1
 800fa52:	f7f0 fdd1 	bl	80005f8 <__aeabi_dmul>
 800fa56:	a35a      	add	r3, pc, #360	; (adr r3, 800fbc0 <__ieee754_pow+0x9d8>)
 800fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5c:	f7f0 fc14 	bl	8000288 <__aeabi_dsub>
 800fa60:	4622      	mov	r2, r4
 800fa62:	462b      	mov	r3, r5
 800fa64:	f7f0 fdc8 	bl	80005f8 <__aeabi_dmul>
 800fa68:	a357      	add	r3, pc, #348	; (adr r3, 800fbc8 <__ieee754_pow+0x9e0>)
 800fa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6e:	f7f0 fc0d 	bl	800028c <__adddf3>
 800fa72:	4622      	mov	r2, r4
 800fa74:	462b      	mov	r3, r5
 800fa76:	f7f0 fdbf 	bl	80005f8 <__aeabi_dmul>
 800fa7a:	a355      	add	r3, pc, #340	; (adr r3, 800fbd0 <__ieee754_pow+0x9e8>)
 800fa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa80:	f7f0 fc02 	bl	8000288 <__aeabi_dsub>
 800fa84:	4622      	mov	r2, r4
 800fa86:	462b      	mov	r3, r5
 800fa88:	f7f0 fdb6 	bl	80005f8 <__aeabi_dmul>
 800fa8c:	a352      	add	r3, pc, #328	; (adr r3, 800fbd8 <__ieee754_pow+0x9f0>)
 800fa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa92:	f7f0 fbfb 	bl	800028c <__adddf3>
 800fa96:	4622      	mov	r2, r4
 800fa98:	462b      	mov	r3, r5
 800fa9a:	f7f0 fdad 	bl	80005f8 <__aeabi_dmul>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	460b      	mov	r3, r1
 800faa2:	4640      	mov	r0, r8
 800faa4:	4649      	mov	r1, r9
 800faa6:	f7f0 fbef 	bl	8000288 <__aeabi_dsub>
 800faaa:	4604      	mov	r4, r0
 800faac:	460d      	mov	r5, r1
 800faae:	4602      	mov	r2, r0
 800fab0:	460b      	mov	r3, r1
 800fab2:	4640      	mov	r0, r8
 800fab4:	4649      	mov	r1, r9
 800fab6:	f7f0 fd9f 	bl	80005f8 <__aeabi_dmul>
 800faba:	2200      	movs	r2, #0
 800fabc:	e9cd 0100 	strd	r0, r1, [sp]
 800fac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fac4:	4620      	mov	r0, r4
 800fac6:	4629      	mov	r1, r5
 800fac8:	f7f0 fbde 	bl	8000288 <__aeabi_dsub>
 800facc:	4602      	mov	r2, r0
 800face:	460b      	mov	r3, r1
 800fad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fad4:	f7f0 feba 	bl	800084c <__aeabi_ddiv>
 800fad8:	4632      	mov	r2, r6
 800fada:	4604      	mov	r4, r0
 800fadc:	460d      	mov	r5, r1
 800fade:	463b      	mov	r3, r7
 800fae0:	4640      	mov	r0, r8
 800fae2:	4649      	mov	r1, r9
 800fae4:	f7f0 fd88 	bl	80005f8 <__aeabi_dmul>
 800fae8:	4632      	mov	r2, r6
 800faea:	463b      	mov	r3, r7
 800faec:	f7f0 fbce 	bl	800028c <__adddf3>
 800faf0:	4602      	mov	r2, r0
 800faf2:	460b      	mov	r3, r1
 800faf4:	4620      	mov	r0, r4
 800faf6:	4629      	mov	r1, r5
 800faf8:	f7f0 fbc6 	bl	8000288 <__aeabi_dsub>
 800fafc:	4642      	mov	r2, r8
 800fafe:	464b      	mov	r3, r9
 800fb00:	f7f0 fbc2 	bl	8000288 <__aeabi_dsub>
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	2000      	movs	r0, #0
 800fb0a:	4939      	ldr	r1, [pc, #228]	; (800fbf0 <__ieee754_pow+0xa08>)
 800fb0c:	f7f0 fbbc 	bl	8000288 <__aeabi_dsub>
 800fb10:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800fb14:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800fb18:	4602      	mov	r2, r0
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	da2f      	bge.n	800fb7e <__ieee754_pow+0x996>
 800fb1e:	4650      	mov	r0, sl
 800fb20:	ec43 2b10 	vmov	d0, r2, r3
 800fb24:	f000 f9c0 	bl	800fea8 <scalbn>
 800fb28:	ec51 0b10 	vmov	r0, r1, d0
 800fb2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb30:	f7ff bbf1 	b.w	800f316 <__ieee754_pow+0x12e>
 800fb34:	4b2f      	ldr	r3, [pc, #188]	; (800fbf4 <__ieee754_pow+0xa0c>)
 800fb36:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fb3a:	429e      	cmp	r6, r3
 800fb3c:	f77f af0c 	ble.w	800f958 <__ieee754_pow+0x770>
 800fb40:	4b2d      	ldr	r3, [pc, #180]	; (800fbf8 <__ieee754_pow+0xa10>)
 800fb42:	440b      	add	r3, r1
 800fb44:	4303      	orrs	r3, r0
 800fb46:	d00b      	beq.n	800fb60 <__ieee754_pow+0x978>
 800fb48:	a325      	add	r3, pc, #148	; (adr r3, 800fbe0 <__ieee754_pow+0x9f8>)
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb52:	f7f0 fd51 	bl	80005f8 <__aeabi_dmul>
 800fb56:	a322      	add	r3, pc, #136	; (adr r3, 800fbe0 <__ieee754_pow+0x9f8>)
 800fb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5c:	f7ff bbdb 	b.w	800f316 <__ieee754_pow+0x12e>
 800fb60:	4622      	mov	r2, r4
 800fb62:	462b      	mov	r3, r5
 800fb64:	f7f0 fb90 	bl	8000288 <__aeabi_dsub>
 800fb68:	4642      	mov	r2, r8
 800fb6a:	464b      	mov	r3, r9
 800fb6c:	f7f0 ffca 	bl	8000b04 <__aeabi_dcmpge>
 800fb70:	2800      	cmp	r0, #0
 800fb72:	f43f aef1 	beq.w	800f958 <__ieee754_pow+0x770>
 800fb76:	e7e7      	b.n	800fb48 <__ieee754_pow+0x960>
 800fb78:	f04f 0a00 	mov.w	sl, #0
 800fb7c:	e718      	b.n	800f9b0 <__ieee754_pow+0x7c8>
 800fb7e:	4621      	mov	r1, r4
 800fb80:	e7d4      	b.n	800fb2c <__ieee754_pow+0x944>
 800fb82:	2000      	movs	r0, #0
 800fb84:	491a      	ldr	r1, [pc, #104]	; (800fbf0 <__ieee754_pow+0xa08>)
 800fb86:	f7ff bb8f 	b.w	800f2a8 <__ieee754_pow+0xc0>
 800fb8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb8e:	f7ff bb8b 	b.w	800f2a8 <__ieee754_pow+0xc0>
 800fb92:	4630      	mov	r0, r6
 800fb94:	4639      	mov	r1, r7
 800fb96:	f7ff bb87 	b.w	800f2a8 <__ieee754_pow+0xc0>
 800fb9a:	4693      	mov	fp, r2
 800fb9c:	f7ff bb98 	b.w	800f2d0 <__ieee754_pow+0xe8>
 800fba0:	00000000 	.word	0x00000000
 800fba4:	3fe62e43 	.word	0x3fe62e43
 800fba8:	fefa39ef 	.word	0xfefa39ef
 800fbac:	3fe62e42 	.word	0x3fe62e42
 800fbb0:	0ca86c39 	.word	0x0ca86c39
 800fbb4:	be205c61 	.word	0xbe205c61
 800fbb8:	72bea4d0 	.word	0x72bea4d0
 800fbbc:	3e663769 	.word	0x3e663769
 800fbc0:	c5d26bf1 	.word	0xc5d26bf1
 800fbc4:	3ebbbd41 	.word	0x3ebbbd41
 800fbc8:	af25de2c 	.word	0xaf25de2c
 800fbcc:	3f11566a 	.word	0x3f11566a
 800fbd0:	16bebd93 	.word	0x16bebd93
 800fbd4:	3f66c16c 	.word	0x3f66c16c
 800fbd8:	5555553e 	.word	0x5555553e
 800fbdc:	3fc55555 	.word	0x3fc55555
 800fbe0:	c2f8f359 	.word	0xc2f8f359
 800fbe4:	01a56e1f 	.word	0x01a56e1f
 800fbe8:	3fe00000 	.word	0x3fe00000
 800fbec:	000fffff 	.word	0x000fffff
 800fbf0:	3ff00000 	.word	0x3ff00000
 800fbf4:	4090cbff 	.word	0x4090cbff
 800fbf8:	3f6f3400 	.word	0x3f6f3400
 800fbfc:	652b82fe 	.word	0x652b82fe
 800fc00:	3c971547 	.word	0x3c971547

0800fc04 <__ieee754_sqrt>:
 800fc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc08:	4955      	ldr	r1, [pc, #340]	; (800fd60 <__ieee754_sqrt+0x15c>)
 800fc0a:	ec55 4b10 	vmov	r4, r5, d0
 800fc0e:	43a9      	bics	r1, r5
 800fc10:	462b      	mov	r3, r5
 800fc12:	462a      	mov	r2, r5
 800fc14:	d112      	bne.n	800fc3c <__ieee754_sqrt+0x38>
 800fc16:	ee10 2a10 	vmov	r2, s0
 800fc1a:	ee10 0a10 	vmov	r0, s0
 800fc1e:	4629      	mov	r1, r5
 800fc20:	f7f0 fcea 	bl	80005f8 <__aeabi_dmul>
 800fc24:	4602      	mov	r2, r0
 800fc26:	460b      	mov	r3, r1
 800fc28:	4620      	mov	r0, r4
 800fc2a:	4629      	mov	r1, r5
 800fc2c:	f7f0 fb2e 	bl	800028c <__adddf3>
 800fc30:	4604      	mov	r4, r0
 800fc32:	460d      	mov	r5, r1
 800fc34:	ec45 4b10 	vmov	d0, r4, r5
 800fc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc3c:	2d00      	cmp	r5, #0
 800fc3e:	ee10 0a10 	vmov	r0, s0
 800fc42:	4621      	mov	r1, r4
 800fc44:	dc0f      	bgt.n	800fc66 <__ieee754_sqrt+0x62>
 800fc46:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fc4a:	4330      	orrs	r0, r6
 800fc4c:	d0f2      	beq.n	800fc34 <__ieee754_sqrt+0x30>
 800fc4e:	b155      	cbz	r5, 800fc66 <__ieee754_sqrt+0x62>
 800fc50:	ee10 2a10 	vmov	r2, s0
 800fc54:	4620      	mov	r0, r4
 800fc56:	4629      	mov	r1, r5
 800fc58:	f7f0 fb16 	bl	8000288 <__aeabi_dsub>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	460b      	mov	r3, r1
 800fc60:	f7f0 fdf4 	bl	800084c <__aeabi_ddiv>
 800fc64:	e7e4      	b.n	800fc30 <__ieee754_sqrt+0x2c>
 800fc66:	151b      	asrs	r3, r3, #20
 800fc68:	d073      	beq.n	800fd52 <__ieee754_sqrt+0x14e>
 800fc6a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fc6e:	07dd      	lsls	r5, r3, #31
 800fc70:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800fc74:	bf48      	it	mi
 800fc76:	0fc8      	lsrmi	r0, r1, #31
 800fc78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800fc7c:	bf44      	itt	mi
 800fc7e:	0049      	lslmi	r1, r1, #1
 800fc80:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800fc84:	2500      	movs	r5, #0
 800fc86:	1058      	asrs	r0, r3, #1
 800fc88:	0fcb      	lsrs	r3, r1, #31
 800fc8a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800fc8e:	0049      	lsls	r1, r1, #1
 800fc90:	2316      	movs	r3, #22
 800fc92:	462c      	mov	r4, r5
 800fc94:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800fc98:	19a7      	adds	r7, r4, r6
 800fc9a:	4297      	cmp	r7, r2
 800fc9c:	bfde      	ittt	le
 800fc9e:	19bc      	addle	r4, r7, r6
 800fca0:	1bd2      	suble	r2, r2, r7
 800fca2:	19ad      	addle	r5, r5, r6
 800fca4:	0fcf      	lsrs	r7, r1, #31
 800fca6:	3b01      	subs	r3, #1
 800fca8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800fcac:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fcb0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fcb4:	d1f0      	bne.n	800fc98 <__ieee754_sqrt+0x94>
 800fcb6:	f04f 0c20 	mov.w	ip, #32
 800fcba:	469e      	mov	lr, r3
 800fcbc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fcc0:	42a2      	cmp	r2, r4
 800fcc2:	eb06 070e 	add.w	r7, r6, lr
 800fcc6:	dc02      	bgt.n	800fcce <__ieee754_sqrt+0xca>
 800fcc8:	d112      	bne.n	800fcf0 <__ieee754_sqrt+0xec>
 800fcca:	428f      	cmp	r7, r1
 800fccc:	d810      	bhi.n	800fcf0 <__ieee754_sqrt+0xec>
 800fcce:	2f00      	cmp	r7, #0
 800fcd0:	eb07 0e06 	add.w	lr, r7, r6
 800fcd4:	da42      	bge.n	800fd5c <__ieee754_sqrt+0x158>
 800fcd6:	f1be 0f00 	cmp.w	lr, #0
 800fcda:	db3f      	blt.n	800fd5c <__ieee754_sqrt+0x158>
 800fcdc:	f104 0801 	add.w	r8, r4, #1
 800fce0:	1b12      	subs	r2, r2, r4
 800fce2:	428f      	cmp	r7, r1
 800fce4:	bf88      	it	hi
 800fce6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800fcea:	1bc9      	subs	r1, r1, r7
 800fcec:	4433      	add	r3, r6
 800fcee:	4644      	mov	r4, r8
 800fcf0:	0052      	lsls	r2, r2, #1
 800fcf2:	f1bc 0c01 	subs.w	ip, ip, #1
 800fcf6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800fcfa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fcfe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fd02:	d1dd      	bne.n	800fcc0 <__ieee754_sqrt+0xbc>
 800fd04:	430a      	orrs	r2, r1
 800fd06:	d006      	beq.n	800fd16 <__ieee754_sqrt+0x112>
 800fd08:	1c5c      	adds	r4, r3, #1
 800fd0a:	bf13      	iteet	ne
 800fd0c:	3301      	addne	r3, #1
 800fd0e:	3501      	addeq	r5, #1
 800fd10:	4663      	moveq	r3, ip
 800fd12:	f023 0301 	bicne.w	r3, r3, #1
 800fd16:	106a      	asrs	r2, r5, #1
 800fd18:	085b      	lsrs	r3, r3, #1
 800fd1a:	07e9      	lsls	r1, r5, #31
 800fd1c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fd20:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fd24:	bf48      	it	mi
 800fd26:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fd2a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800fd2e:	461c      	mov	r4, r3
 800fd30:	e780      	b.n	800fc34 <__ieee754_sqrt+0x30>
 800fd32:	0aca      	lsrs	r2, r1, #11
 800fd34:	3815      	subs	r0, #21
 800fd36:	0549      	lsls	r1, r1, #21
 800fd38:	2a00      	cmp	r2, #0
 800fd3a:	d0fa      	beq.n	800fd32 <__ieee754_sqrt+0x12e>
 800fd3c:	02d6      	lsls	r6, r2, #11
 800fd3e:	d50a      	bpl.n	800fd56 <__ieee754_sqrt+0x152>
 800fd40:	f1c3 0420 	rsb	r4, r3, #32
 800fd44:	fa21 f404 	lsr.w	r4, r1, r4
 800fd48:	1e5d      	subs	r5, r3, #1
 800fd4a:	4099      	lsls	r1, r3
 800fd4c:	4322      	orrs	r2, r4
 800fd4e:	1b43      	subs	r3, r0, r5
 800fd50:	e78b      	b.n	800fc6a <__ieee754_sqrt+0x66>
 800fd52:	4618      	mov	r0, r3
 800fd54:	e7f0      	b.n	800fd38 <__ieee754_sqrt+0x134>
 800fd56:	0052      	lsls	r2, r2, #1
 800fd58:	3301      	adds	r3, #1
 800fd5a:	e7ef      	b.n	800fd3c <__ieee754_sqrt+0x138>
 800fd5c:	46a0      	mov	r8, r4
 800fd5e:	e7bf      	b.n	800fce0 <__ieee754_sqrt+0xdc>
 800fd60:	7ff00000 	.word	0x7ff00000

0800fd64 <fabs>:
 800fd64:	ec51 0b10 	vmov	r0, r1, d0
 800fd68:	ee10 2a10 	vmov	r2, s0
 800fd6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fd70:	ec43 2b10 	vmov	d0, r2, r3
 800fd74:	4770      	bx	lr

0800fd76 <finite>:
 800fd76:	ee10 3a90 	vmov	r3, s1
 800fd7a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800fd7e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800fd82:	0fc0      	lsrs	r0, r0, #31
 800fd84:	4770      	bx	lr

0800fd86 <matherr>:
 800fd86:	2000      	movs	r0, #0
 800fd88:	4770      	bx	lr
 800fd8a:	0000      	movs	r0, r0
 800fd8c:	0000      	movs	r0, r0
	...

0800fd90 <nan>:
 800fd90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fd98 <nan+0x8>
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	00000000 	.word	0x00000000
 800fd9c:	7ff80000 	.word	0x7ff80000

0800fda0 <rint>:
 800fda0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fda2:	ec51 0b10 	vmov	r0, r1, d0
 800fda6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fdaa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800fdae:	2e13      	cmp	r6, #19
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	ee10 4a10 	vmov	r4, s0
 800fdb6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800fdba:	dc56      	bgt.n	800fe6a <rint+0xca>
 800fdbc:	2e00      	cmp	r6, #0
 800fdbe:	da2b      	bge.n	800fe18 <rint+0x78>
 800fdc0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800fdc4:	4302      	orrs	r2, r0
 800fdc6:	d023      	beq.n	800fe10 <rint+0x70>
 800fdc8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800fdcc:	4302      	orrs	r2, r0
 800fdce:	4254      	negs	r4, r2
 800fdd0:	4314      	orrs	r4, r2
 800fdd2:	0c4b      	lsrs	r3, r1, #17
 800fdd4:	0b24      	lsrs	r4, r4, #12
 800fdd6:	045b      	lsls	r3, r3, #17
 800fdd8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800fddc:	ea44 0103 	orr.w	r1, r4, r3
 800fde0:	460b      	mov	r3, r1
 800fde2:	492f      	ldr	r1, [pc, #188]	; (800fea0 <rint+0x100>)
 800fde4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800fde8:	e9d1 6700 	ldrd	r6, r7, [r1]
 800fdec:	4602      	mov	r2, r0
 800fdee:	4639      	mov	r1, r7
 800fdf0:	4630      	mov	r0, r6
 800fdf2:	f7f0 fa4b 	bl	800028c <__adddf3>
 800fdf6:	e9cd 0100 	strd	r0, r1, [sp]
 800fdfa:	463b      	mov	r3, r7
 800fdfc:	4632      	mov	r2, r6
 800fdfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe02:	f7f0 fa41 	bl	8000288 <__aeabi_dsub>
 800fe06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe0a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800fe0e:	4639      	mov	r1, r7
 800fe10:	ec41 0b10 	vmov	d0, r0, r1
 800fe14:	b003      	add	sp, #12
 800fe16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe18:	4a22      	ldr	r2, [pc, #136]	; (800fea4 <rint+0x104>)
 800fe1a:	4132      	asrs	r2, r6
 800fe1c:	ea01 0702 	and.w	r7, r1, r2
 800fe20:	4307      	orrs	r7, r0
 800fe22:	d0f5      	beq.n	800fe10 <rint+0x70>
 800fe24:	0852      	lsrs	r2, r2, #1
 800fe26:	4011      	ands	r1, r2
 800fe28:	430c      	orrs	r4, r1
 800fe2a:	d00b      	beq.n	800fe44 <rint+0xa4>
 800fe2c:	ea23 0202 	bic.w	r2, r3, r2
 800fe30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fe34:	2e13      	cmp	r6, #19
 800fe36:	fa43 f306 	asr.w	r3, r3, r6
 800fe3a:	bf0c      	ite	eq
 800fe3c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800fe40:	2400      	movne	r4, #0
 800fe42:	4313      	orrs	r3, r2
 800fe44:	4916      	ldr	r1, [pc, #88]	; (800fea0 <rint+0x100>)
 800fe46:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800fe4a:	4622      	mov	r2, r4
 800fe4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe50:	4620      	mov	r0, r4
 800fe52:	4629      	mov	r1, r5
 800fe54:	f7f0 fa1a 	bl	800028c <__adddf3>
 800fe58:	e9cd 0100 	strd	r0, r1, [sp]
 800fe5c:	4622      	mov	r2, r4
 800fe5e:	462b      	mov	r3, r5
 800fe60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe64:	f7f0 fa10 	bl	8000288 <__aeabi_dsub>
 800fe68:	e7d2      	b.n	800fe10 <rint+0x70>
 800fe6a:	2e33      	cmp	r6, #51	; 0x33
 800fe6c:	dd07      	ble.n	800fe7e <rint+0xde>
 800fe6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fe72:	d1cd      	bne.n	800fe10 <rint+0x70>
 800fe74:	ee10 2a10 	vmov	r2, s0
 800fe78:	f7f0 fa08 	bl	800028c <__adddf3>
 800fe7c:	e7c8      	b.n	800fe10 <rint+0x70>
 800fe7e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800fe82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe86:	40f2      	lsrs	r2, r6
 800fe88:	4210      	tst	r0, r2
 800fe8a:	d0c1      	beq.n	800fe10 <rint+0x70>
 800fe8c:	0852      	lsrs	r2, r2, #1
 800fe8e:	4210      	tst	r0, r2
 800fe90:	bf1f      	itttt	ne
 800fe92:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800fe96:	ea20 0202 	bicne.w	r2, r0, r2
 800fe9a:	4134      	asrne	r4, r6
 800fe9c:	4314      	orrne	r4, r2
 800fe9e:	e7d1      	b.n	800fe44 <rint+0xa4>
 800fea0:	080106f0 	.word	0x080106f0
 800fea4:	000fffff 	.word	0x000fffff

0800fea8 <scalbn>:
 800fea8:	b570      	push	{r4, r5, r6, lr}
 800feaa:	ec55 4b10 	vmov	r4, r5, d0
 800feae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800feb2:	4606      	mov	r6, r0
 800feb4:	462b      	mov	r3, r5
 800feb6:	b9aa      	cbnz	r2, 800fee4 <scalbn+0x3c>
 800feb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800febc:	4323      	orrs	r3, r4
 800febe:	d03b      	beq.n	800ff38 <scalbn+0x90>
 800fec0:	4b31      	ldr	r3, [pc, #196]	; (800ff88 <scalbn+0xe0>)
 800fec2:	4629      	mov	r1, r5
 800fec4:	2200      	movs	r2, #0
 800fec6:	ee10 0a10 	vmov	r0, s0
 800feca:	f7f0 fb95 	bl	80005f8 <__aeabi_dmul>
 800fece:	4b2f      	ldr	r3, [pc, #188]	; (800ff8c <scalbn+0xe4>)
 800fed0:	429e      	cmp	r6, r3
 800fed2:	4604      	mov	r4, r0
 800fed4:	460d      	mov	r5, r1
 800fed6:	da12      	bge.n	800fefe <scalbn+0x56>
 800fed8:	a327      	add	r3, pc, #156	; (adr r3, 800ff78 <scalbn+0xd0>)
 800feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fede:	f7f0 fb8b 	bl	80005f8 <__aeabi_dmul>
 800fee2:	e009      	b.n	800fef8 <scalbn+0x50>
 800fee4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fee8:	428a      	cmp	r2, r1
 800feea:	d10c      	bne.n	800ff06 <scalbn+0x5e>
 800feec:	ee10 2a10 	vmov	r2, s0
 800fef0:	4620      	mov	r0, r4
 800fef2:	4629      	mov	r1, r5
 800fef4:	f7f0 f9ca 	bl	800028c <__adddf3>
 800fef8:	4604      	mov	r4, r0
 800fefa:	460d      	mov	r5, r1
 800fefc:	e01c      	b.n	800ff38 <scalbn+0x90>
 800fefe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ff02:	460b      	mov	r3, r1
 800ff04:	3a36      	subs	r2, #54	; 0x36
 800ff06:	4432      	add	r2, r6
 800ff08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ff0c:	428a      	cmp	r2, r1
 800ff0e:	dd0b      	ble.n	800ff28 <scalbn+0x80>
 800ff10:	ec45 4b11 	vmov	d1, r4, r5
 800ff14:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ff80 <scalbn+0xd8>
 800ff18:	f000 f83c 	bl	800ff94 <copysign>
 800ff1c:	a318      	add	r3, pc, #96	; (adr r3, 800ff80 <scalbn+0xd8>)
 800ff1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff22:	ec51 0b10 	vmov	r0, r1, d0
 800ff26:	e7da      	b.n	800fede <scalbn+0x36>
 800ff28:	2a00      	cmp	r2, #0
 800ff2a:	dd08      	ble.n	800ff3e <scalbn+0x96>
 800ff2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ff34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff38:	ec45 4b10 	vmov	d0, r4, r5
 800ff3c:	bd70      	pop	{r4, r5, r6, pc}
 800ff3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ff42:	da0d      	bge.n	800ff60 <scalbn+0xb8>
 800ff44:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ff48:	429e      	cmp	r6, r3
 800ff4a:	ec45 4b11 	vmov	d1, r4, r5
 800ff4e:	dce1      	bgt.n	800ff14 <scalbn+0x6c>
 800ff50:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ff78 <scalbn+0xd0>
 800ff54:	f000 f81e 	bl	800ff94 <copysign>
 800ff58:	a307      	add	r3, pc, #28	; (adr r3, 800ff78 <scalbn+0xd0>)
 800ff5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5e:	e7e0      	b.n	800ff22 <scalbn+0x7a>
 800ff60:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ff64:	3236      	adds	r2, #54	; 0x36
 800ff66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ff6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ff6e:	4620      	mov	r0, r4
 800ff70:	4629      	mov	r1, r5
 800ff72:	2200      	movs	r2, #0
 800ff74:	4b06      	ldr	r3, [pc, #24]	; (800ff90 <scalbn+0xe8>)
 800ff76:	e7b2      	b.n	800fede <scalbn+0x36>
 800ff78:	c2f8f359 	.word	0xc2f8f359
 800ff7c:	01a56e1f 	.word	0x01a56e1f
 800ff80:	8800759c 	.word	0x8800759c
 800ff84:	7e37e43c 	.word	0x7e37e43c
 800ff88:	43500000 	.word	0x43500000
 800ff8c:	ffff3cb0 	.word	0xffff3cb0
 800ff90:	3c900000 	.word	0x3c900000

0800ff94 <copysign>:
 800ff94:	ec51 0b10 	vmov	r0, r1, d0
 800ff98:	ee11 0a90 	vmov	r0, s3
 800ff9c:	ee10 2a10 	vmov	r2, s0
 800ffa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ffa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ffa8:	ea41 0300 	orr.w	r3, r1, r0
 800ffac:	ec43 2b10 	vmov	d0, r2, r3
 800ffb0:	4770      	bx	lr
	...

0800ffb4 <_init>:
 800ffb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffb6:	bf00      	nop
 800ffb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffba:	bc08      	pop	{r3}
 800ffbc:	469e      	mov	lr, r3
 800ffbe:	4770      	bx	lr

0800ffc0 <_fini>:
 800ffc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffc2:	bf00      	nop
 800ffc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffc6:	bc08      	pop	{r3}
 800ffc8:	469e      	mov	lr, r3
 800ffca:	4770      	bx	lr
