
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  080101a8  080101a8  000201a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108b8  080108b8  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080108b8  080108b8  000208b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108c0  080108c0  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108c0  080108c0  000208c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108c4  080108c4  000208c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080108c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001dc70  200001e0  08010aa8  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001de50  08010aa8  0003de50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004122e  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000069ce  00000000  00000000  0007143e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f28  00000000  00000000  00077e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c90  00000000  00000000  00079d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002abe3  00000000  00000000  0007b9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026a14  00000000  00000000  000a65ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d66fc  00000000  00000000  000ccfbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  001a36bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090a4  00000000  00000000  001a378c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801018c 	.word	0x0801018c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0801018c 	.word	0x0801018c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <imu_read_byte>:

uint8_t initialized = 0;
Inertial inertial;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <imu_read_byte+0x54>)
 8000fa4:	f006 fe08 	bl	8007bb8 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 8000fa8:	f107 010f 	add.w	r1, r7, #15
 8000fac:	2364      	movs	r3, #100	; 0x64
 8000fae:	2201      	movs	r2, #1
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <imu_read_byte+0x58>)
 8000fb2:	f007 fc5a 	bl	800886a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 8000fb6:	f107 010e 	add.w	r1, r7, #14
 8000fba:	2364      	movs	r3, #100	; 0x64
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <imu_read_byte+0x58>)
 8000fc0:	f007 fd8f 	bl	8008ae2 <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <imu_read_byte+0x54>)
 8000fcc:	f006 fdf4 	bl	8007bb8 <HAL_GPIO_WritePin>
#endif
	return val;
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20000434 	.word	0x20000434

08000fe4 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <imu_write_byte+0x54>)
 8001006:	f006 fdd7 	bl	8007bb8 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100a:	f107 010f 	add.w	r1, r7, #15
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	2201      	movs	r2, #1
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <imu_write_byte+0x58>)
 8001014:	f007 fc29 	bl	800886a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 8001018:	1db9      	adds	r1, r7, #6
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	2201      	movs	r2, #1
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <imu_write_byte+0x58>)
 8001020:	f007 fc23 	bl	800886a <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <imu_write_byte+0x54>)
 800102c:	f006 fdc4 	bl	8007bb8 <HAL_GPIO_WritePin>
#endif
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40020400 	.word	0x40020400
 800103c:	20000434 	.word	0x20000434

08001040 <imu_init>:
 * @fn imu_init()
 * @brief 
 * 
 */
void imu_init()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	if(initialized == 0)
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <imu_init+0x54>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d11d      	bne.n	800108a <imu_init+0x4a>
	{
		printf("Starting SPI2 (IMU)\r\n");
 800104e:	4812      	ldr	r0, [pc, #72]	; (8001098 <imu_init+0x58>)
 8001050:	f00a fc6a 	bl	800b928 <puts>
		uint8_t wai, ret;
		ret = imu_initialize(&wai);
 8001054:	1dbb      	adds	r3, r7, #6
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f826 	bl	80010a8 <imu_initialize>
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
		printf("who_am_i = %d\r\n", wai);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	4619      	mov	r1, r3
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <imu_init+0x5c>)
 8001066:	f00a fbeb 	bl	800b840 <iprintf>
		if(ret == 1)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d103      	bne.n	8001078 <imu_init+0x38>
		{
			printf("SPI INIT COLLECT!\r\n");
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <imu_init+0x60>)
 8001072:	f00a fc59 	bl	800b928 <puts>
 8001076:	e002      	b.n	800107e <imu_init+0x3e>
		}
		else
		{
			printf("SPI INIT FAILURE x_x \r\n");
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <imu_init+0x64>)
 800107a:	f00a fc55 	bl	800b928 <puts>
		}
		initialized = initialized + 1;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <imu_init+0x54>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b03      	ldr	r3, [pc, #12]	; (8001094 <imu_init+0x54>)
 8001088:	701a      	strb	r2, [r3, #0]
	}
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001fc 	.word	0x200001fc
 8001098:	080101a8 	.word	0x080101a8
 800109c:	080101c0 	.word	0x080101c0
 80010a0:	080101d0 	.word	0x080101d0
 80010a4:	080101e4 	.word	0x080101e4

080010a8 <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	CS_RESET;
 80010b0:	2200      	movs	r2, #0
 80010b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b6:	4833      	ldr	r0, [pc, #204]	; (8001184 <imu_initialize+0xdc>)
 80010b8:	f006 fd7e 	bl	8007bb8 <HAL_GPIO_WritePin>
	uint8_t who_am_i, ret;
	ret = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

#if	INIT_ZERO
	inertial.linear = vector3_creation(0, 0, 0);
 80010c0:	4c31      	ldr	r4, [pc, #196]	; (8001188 <imu_initialize+0xe0>)
 80010c2:	ed9f 1a32 	vldr	s2, [pc, #200]	; 800118c <imu_initialize+0xe4>
 80010c6:	eddf 0a31 	vldr	s1, [pc, #196]	; 800118c <imu_initialize+0xe4>
 80010ca:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800118c <imu_initialize+0xe4>
 80010ce:	f001 fe43 	bl	8002d58 <vector3_creation>
 80010d2:	eef0 6a40 	vmov.f32	s13, s0
 80010d6:	eeb0 7a60 	vmov.f32	s14, s1
 80010da:	eef0 7a41 	vmov.f32	s15, s2
 80010de:	edc4 6a00 	vstr	s13, [r4]
 80010e2:	ed84 7a01 	vstr	s14, [r4, #4]
 80010e6:	edc4 7a02 	vstr	s15, [r4, #8]
	inertial.angular = vector3_creation(0, 0, 0);
 80010ea:	4c27      	ldr	r4, [pc, #156]	; (8001188 <imu_initialize+0xe0>)
 80010ec:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800118c <imu_initialize+0xe4>
 80010f0:	eddf 0a26 	vldr	s1, [pc, #152]	; 800118c <imu_initialize+0xe4>
 80010f4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800118c <imu_initialize+0xe4>
 80010f8:	f001 fe2e 	bl	8002d58 <vector3_creation>
 80010fc:	eef0 6a40 	vmov.f32	s13, s0
 8001100:	eeb0 7a60 	vmov.f32	s14, s1
 8001104:	eef0 7a41 	vmov.f32	s15, s2
 8001108:	edc4 6a03 	vstr	s13, [r4, #12]
 800110c:	ed84 7a04 	vstr	s14, [r4, #16]
 8001110:	edc4 7a05 	vstr	s15, [r4, #20]
#endif

	//! User Bank 0 を選択
	imu_write_byte(REG_BANK_SEL, 0x00);
 8001114:	2100      	movs	r1, #0
 8001116:	207f      	movs	r0, #127	; 0x7f
 8001118:	f7ff ff64 	bl	8000fe4 <imu_write_byte>
	who_am_i = imu_read_byte(0x00);
 800111c:	2000      	movs	r0, #0
 800111e:	f7ff ff33 	bl	8000f88 <imu_read_byte>
 8001122:	4603      	mov	r3, r0
 8001124:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7bba      	ldrb	r2, [r7, #14]
 800112a:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	2be0      	cmp	r3, #224	; 0xe0
 8001130:	d11c      	bne.n	800116c <imu_initialize+0xc4>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
		//! PWR_MGMT_1 推奨値 1
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 8001136:	2101      	movs	r1, #1
 8001138:	2006      	movs	r0, #6
 800113a:	f7ff ff53 	bl	8000fe4 <imu_write_byte>
		//! PWR_MGMt_2 推奨値 0
		// imu_write_byte(PWR_MGMT_2, 0x00);
		HAL_Delay(100);
 800113e:	2064      	movs	r0, #100	; 0x64
 8001140:	f004 ff3c 	bl	8005fbc <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 8001144:	2110      	movs	r1, #16
 8001146:	2003      	movs	r0, #3
 8001148:	f7ff ff4c 	bl	8000fe4 <imu_write_byte>
		 * 	10 : User Bank 2 : 加速度と角速度の値の設定ができる
		 * 	11 : User Bank 3 : I2C の設定が行える
		 * 
		 */
		//! User Bank 2 を選択
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 800114c:	2120      	movs	r1, #32
 800114e:	207f      	movs	r0, #127	; 0x7f
 8001150:	f7ff ff48 	bl	8000fe4 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 9     [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2000 [dps] & bypass ) -> 0b 0000 0110 -> 0x06
		imu_write_byte(0x01, 0x06);
 8001154:	2106      	movs	r1, #6
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff ff44 	bl	8000fe4 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 4.5   [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2 [dps] & bypass ) -> 0b 0000 0000 -> 0x06
		imu_write_byte(0x14, 0x00);
 800115c:	2100      	movs	r1, #0
 800115e:	2014      	movs	r0, #20
 8001160:	f7ff ff40 	bl	8000fe4 <imu_write_byte>

		//! User Bank 0 に戻す
		imu_write_byte(REG_BANK_SEL, 0x00);
 8001164:	2100      	movs	r1, #0
 8001166:	207f      	movs	r0, #127	; 0x7f
 8001168:	f7ff ff3c 	bl	8000fe4 <imu_write_byte>
	}
#if USE_NCS
	CS_SET;
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <imu_initialize+0xdc>)
 8001174:	f006 fd20 	bl	8007bb8 <HAL_GPIO_WritePin>
#endif
	return ret;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	40020400 	.word	0x40020400
 8001188:	20000210 	.word	0x20000210
 800118c:	00000000 	.word	0x00000000

08001190 <imu_start>:

void imu_start()
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	/* imu_start */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <imu_stop>:

void imu_stop()
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
#if !USE_NCS
	CS_SET;
#endif
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <imu_update_gyro>:
 * --- --- --- --- --- --- --- --- --- ---
 * @attention 値を代入したら外部参照変数を呼び出して値を取得することになる
 *
*/
void imu_update_gyro()
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
	float k_gyro;
	int16_t byte_data;
	float tmp;

	k_gyro = (GYRO_RANGE / (float) MAXDATA_RANGE);
 80011b6:	4b56      	ldr	r3, [pc, #344]	; (8001310 <imu_update_gyro+0x160>)
 80011b8:	60fb      	str	r3, [r7, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 80011ba:	2033      	movs	r0, #51	; 0x33
 80011bc:	f7ff fee4 	bl	8000f88 <imu_read_byte>
 80011c0:	4603      	mov	r3, r0
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21c      	sxth	r4, r3
 80011c6:	2034      	movs	r0, #52	; 0x34
 80011c8:	f7ff fede 	bl	8000f88 <imu_read_byte>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4323      	orrs	r3, r4
 80011d2:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 80011d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.x = low_pass_filter(tmp, inertial.angular.x, LPF_RATE);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff f9ab 	bl	8000548 <__aeabi_f2d>
 80011f2:	4604      	mov	r4, r0
 80011f4:	460d      	mov	r5, r1
 80011f6:	4b47      	ldr	r3, [pc, #284]	; (8001314 <imu_update_gyro+0x164>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f9a4 	bl	8000548 <__aeabi_f2d>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	ed9f 2b40 	vldr	d2, [pc, #256]	; 8001308 <imu_update_gyro+0x158>
 8001208:	ec43 2b11 	vmov	d1, r2, r3
 800120c:	ec45 4b10 	vmov	d0, r4, r5
 8001210:	f001 fd6c 	bl	8002cec <low_pass_filter>
 8001214:	ec54 3b10 	vmov	r3, r4, d0
 8001218:	4618      	mov	r0, r3
 800121a:	4621      	mov	r1, r4
 800121c:	f7ff fce4 	bl	8000be8 <__aeabi_d2f>
 8001220:	4602      	mov	r2, r0
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <imu_update_gyro+0x164>)
 8001224:	60da      	str	r2, [r3, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 8001226:	2035      	movs	r0, #53	; 0x35
 8001228:	f7ff feae 	bl	8000f88 <imu_read_byte>
 800122c:	4603      	mov	r3, r0
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21c      	sxth	r4, r3
 8001232:	2036      	movs	r0, #54	; 0x36
 8001234:	f7ff fea8 	bl	8000f88 <imu_read_byte>
 8001238:	4603      	mov	r3, r0
 800123a:	b21b      	sxth	r3, r3
 800123c:	4323      	orrs	r3, r4
 800123e:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 8001240:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001254:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.y = low_pass_filter(tmp, inertial.angular.y, LPF_RATE);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff f975 	bl	8000548 <__aeabi_f2d>
 800125e:	4604      	mov	r4, r0
 8001260:	460d      	mov	r5, r1
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <imu_update_gyro+0x164>)
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f96e 	bl	8000548 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8001308 <imu_update_gyro+0x158>
 8001274:	ec43 2b11 	vmov	d1, r2, r3
 8001278:	ec45 4b10 	vmov	d0, r4, r5
 800127c:	f001 fd36 	bl	8002cec <low_pass_filter>
 8001280:	ec54 3b10 	vmov	r3, r4, d0
 8001284:	4618      	mov	r0, r3
 8001286:	4621      	mov	r1, r4
 8001288:	f7ff fcae 	bl	8000be8 <__aeabi_d2f>
 800128c:	4602      	mov	r2, r0
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <imu_update_gyro+0x164>)
 8001290:	611a      	str	r2, [r3, #16]

	byte_data = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 8001292:	2037      	movs	r0, #55	; 0x37
 8001294:	f7ff fe78 	bl	8000f88 <imu_read_byte>
 8001298:	4603      	mov	r3, r0
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b21c      	sxth	r4, r3
 800129e:	2038      	movs	r0, #56	; 0x38
 80012a0:	f7ff fe72 	bl	8000f88 <imu_read_byte>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	4323      	orrs	r3, r4
 80012aa:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 80012ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80012bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c0:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.z = low_pass_filter(tmp, inertial.angular.z, LPF_RATE);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_f2d>
 80012ca:	4604      	mov	r4, r0
 80012cc:	460d      	mov	r5, r1
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <imu_update_gyro+0x164>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f938 	bl	8000548 <__aeabi_f2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001308 <imu_update_gyro+0x158>
 80012e0:	ec43 2b11 	vmov	d1, r2, r3
 80012e4:	ec45 4b10 	vmov	d0, r4, r5
 80012e8:	f001 fd00 	bl	8002cec <low_pass_filter>
 80012ec:	ec54 3b10 	vmov	r3, r4, d0
 80012f0:	4618      	mov	r0, r3
 80012f2:	4621      	mov	r1, r4
 80012f4:	f7ff fc78 	bl	8000be8 <__aeabi_d2f>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <imu_update_gyro+0x164>)
 80012fc:	615a      	str	r2, [r3, #20]
	 * 		float y;
	 * 		float z;
	 * } Vector3;
	 * 
	 */
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bdb0      	pop	{r4, r5, r7, pc}
 8001306:	bf00      	nop
 8001308:	40000000 	.word	0x40000000
 800130c:	3fd33333 	.word	0x3fd33333
 8001310:	3d7a0000 	.word	0x3d7a0000
 8001314:	20000210 	.word	0x20000210

08001318 <imu_read_yaw>:
 * @return float 
 * @attention [ degree ]
 * 
 */
float imu_read_yaw()
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	//! バイアス補正を加味した返り値（ inertial.angular.z はすでに LPF を通されている ）
	return inertial.angular.z - (BIAS_AVERAGE - TRUE_VALUE);
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <imu_read_yaw+0x20>)
 800131e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001322:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800133c <imu_read_yaw+0x24>
 8001326:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000210 	.word	0x20000210
 800133c:	3e0a704c 	.word	0x3e0a704c

08001340 <led_init>:

uint8_t current_value;
uint8_t current_rgb_value;

void led_init()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    current_value = 0b11;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <led_init+0x24>)
 8001346:	2203      	movs	r2, #3
 8001348:	701a      	strb	r2, [r3, #0]
    current_rgb_value = 0b111;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <led_init+0x28>)
 800134c:	2207      	movs	r2, #7
 800134e:	701a      	strb	r2, [r3, #0]
    led_write_led(0b11, 0b11);
 8001350:	2103      	movs	r1, #3
 8001352:	2003      	movs	r0, #3
 8001354:	f000 f8ae 	bl	80014b4 <led_write_led>
    led_write_rgb(0b111);
 8001358:	2007      	movs	r0, #7
 800135a:	f000 f86b 	bl	8001434 <led_write_rgb>
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000228 	.word	0x20000228
 8001368:	20000229 	.word	0x20000229

0800136c <led_start>:

void led_start()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 8001370:	2100      	movs	r1, #0
 8001372:	2003      	movs	r0, #3
 8001374:	f000 f89e 	bl	80014b4 <led_write_led>
    led_write_rgb(0b000);
 8001378:	2000      	movs	r0, #0
 800137a:	f000 f85b 	bl	8001434 <led_write_rgb>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}

08001382 <led_stop>:

void led_stop()
{
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 8001386:	2100      	movs	r1, #0
 8001388:	2003      	movs	r0, #3
 800138a:	f000 f893 	bl	80014b4 <led_write_led>
    led_write_rgb(0b100);
 800138e:	2004      	movs	r0, #4
 8001390:	f000 f850 	bl	8001434 <led_write_rgb>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <led_write_led1>:
{
    return current_rgb_value;
}

void led_write_led1(uint8_t value_)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = value_ << 1;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
    led2_value = current_value & 0b01;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <led_write_led1+0x48>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <led_write_led1+0x4c>)
 80013c6:	f006 fbf7 	bl	8007bb8 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <led_write_led1+0x48>)
 80013d4:	701a      	strb	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000228 	.word	0x20000228
 80013e4:	40020800 	.word	0x40020800

080013e8 <led_write_led2>:

void led_write_led2(uint8_t value_)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = current_value & 0b10;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <led_write_led2+0x44>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	73fb      	strb	r3, [r7, #15]
    led2_value = value_ << 0;
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf0c      	ite	eq
 8001406:	2301      	moveq	r3, #1
 8001408:	2300      	movne	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <led_write_led2+0x48>)
 8001414:	f006 fbd0 	bl	8007bb8 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	4313      	orrs	r3, r2
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <led_write_led2+0x44>)
 8001422:	701a      	strb	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000228 	.word	0x20000228
 8001430:	40020400 	.word	0x40020400

08001434 <led_write_rgb>:

void led_write_rgb(uint8_t rgb_)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (rgb_ & 0b100) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf0c      	ite	eq
 8001448:	2301      	moveq	r3, #1
 800144a:	2300      	movne	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	461a      	mov	r2, r3
 8001450:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001454:	4814      	ldr	r0, [pc, #80]	; (80014a8 <led_write_rgb+0x74>)
 8001456:	f006 fbaf 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (rgb_ & 0b010) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <led_write_rgb+0x74>)
 8001472:	f006 fba1 	bl	8007bb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (rgb_ & 0b001) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800148c:	4807      	ldr	r0, [pc, #28]	; (80014ac <led_write_rgb+0x78>)
 800148e:	f006 fb93 	bl	8007bb8 <HAL_GPIO_WritePin>
    current_rgb_value = rgb_ & 0b0111;
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <led_write_rgb+0x7c>)
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020800 	.word	0x40020800
 80014b0:	20000229 	.word	0x20000229

080014b4 <led_write_led>:

void led_write_led(uint8_t mask_, uint8_t value_)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
    if(mask_ & 0b10)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <led_write_led+0x2c>
    {
        led_write_led1((0b10 & value_) >> 1);
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff5c 	bl	8001398 <led_write_led1>
    }
    if(mask_ & 0b01)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <led_write_led+0x44>
    {
        led_write_led2((0b01 & value_) >> 0);
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff78 	bl	80013e8 <led_write_led2>
    }
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 8001504:	f000 f804 	bl	8001510 <rotary_set_playmode>
    rotary_set_value();
 8001508:	f000 f81a 	bl	8001540 <rotary_set_value>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <rotary_set_playmode>:

void rotary_set_playmode()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 8001514:	f000 f82c 	bl	8001570 <rotary_read>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b01      	ldr	r3, [pc, #4]	; (8001524 <rotary_set_playmode+0x14>)
 800151e:	701a      	strb	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	2000022a 	.word	0x2000022a

08001528 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
    return playmode;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <rotary_read_playmode+0x14>)
 800152e:	781b      	ldrb	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	2000022a 	.word	0x2000022a

08001540 <rotary_set_value>:

void rotary_set_value()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    value = rotary_read();
 8001544:	f000 f814 	bl	8001570 <rotary_read>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b01      	ldr	r3, [pc, #4]	; (8001554 <rotary_set_value+0x14>)
 800154e:	701a      	strb	r2, [r3, #0]
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000022b 	.word	0x2000022b

08001558 <rotary_read_value>:

uint8_t rotary_read_value()
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
    return value;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <rotary_read_value+0x14>)
 800155e:	781b      	ldrb	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2000022b 	.word	0x2000022b

08001570 <rotary_read>:

uint8_t rotary_read()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 800157a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157e:	481f      	ldr	r0, [pc, #124]	; (80015fc <rotary_read+0x8c>)
 8001580:	f006 fb02 	bl	8007b88 <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	bf0c      	ite	eq
 800158a:	2301      	moveq	r3, #1
 800158c:	2300      	movne	r3, #0
 800158e:	b2db      	uxtb	r3, r3
 8001590:	b2da      	uxtb	r2, r3
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	4413      	add	r3, r2
 8001596:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159c:	4817      	ldr	r0, [pc, #92]	; (80015fc <rotary_read+0x8c>)
 800159e:	f006 faf3 	bl	8007b88 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <rotary_read+0x3c>
 80015a8:	2302      	movs	r3, #2
 80015aa:	e000      	b.n	80015ae <rotary_read+0x3e>
 80015ac:	2300      	movs	r3, #0
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	4413      	add	r3, r2
 80015b4:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 80015b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ba:	4811      	ldr	r0, [pc, #68]	; (8001600 <rotary_read+0x90>)
 80015bc:	f006 fae4 	bl	8007b88 <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <rotary_read+0x5a>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e000      	b.n	80015cc <rotary_read+0x5c>
 80015ca:	2300      	movs	r3, #0
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4413      	add	r3, r2
 80015d2:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 80015d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <rotary_read+0x8c>)
 80015da:	f006 fad5 	bl	8007b88 <HAL_GPIO_ReadPin>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <rotary_read+0x78>
 80015e4:	2308      	movs	r3, #8
 80015e6:	e000      	b.n	80015ea <rotary_read+0x7a>
 80015e8:	2300      	movs	r3, #0
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4413      	add	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40020800 	.word	0x40020800
 8001600:	40020000 	.word	0x40020000

08001604 <rotary_print_playmode>:

void rotary_print_playmode()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	printf("playmode = ");
 8001608:	482e      	ldr	r0, [pc, #184]	; (80016c4 <rotary_print_playmode+0xc0>)
 800160a:	f00a f919 	bl	800b840 <iprintf>
	switch(rotary_read_playmode())
 800160e:	f7ff ff8b 	bl	8001528 <rotary_read_playmode>
 8001612:	4603      	mov	r3, r0
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d84b      	bhi.n	80016b0 <rotary_print_playmode+0xac>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <rotary_print_playmode+0x1c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001661 	.word	0x08001661
 8001624:	08001669 	.word	0x08001669
 8001628:	08001671 	.word	0x08001671
 800162c:	08001679 	.word	0x08001679
 8001630:	08001681 	.word	0x08001681
 8001634:	08001689 	.word	0x08001689
 8001638:	08001691 	.word	0x08001691
 800163c:	08001699 	.word	0x08001699
 8001640:	080016a1 	.word	0x080016a1
 8001644:	080016b1 	.word	0x080016b1
 8001648:	080016b1 	.word	0x080016b1
 800164c:	080016b1 	.word	0x080016b1
 8001650:	080016b1 	.word	0x080016b1
 8001654:	080016b1 	.word	0x080016b1
 8001658:	080016b1 	.word	0x080016b1
 800165c:	080016a9 	.word	0x080016a9
	{
		case calibration:
			printf("calibration");
 8001660:	4819      	ldr	r0, [pc, #100]	; (80016c8 <rotary_print_playmode+0xc4>)
 8001662:	f00a f8ed 	bl	800b840 <iprintf>
			break;
 8001666:	e027      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case search:
			printf("search");
 8001668:	4818      	ldr	r0, [pc, #96]	; (80016cc <rotary_print_playmode+0xc8>)
 800166a:	f00a f8e9 	bl	800b840 <iprintf>
			break;
 800166e:	e023      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case accel:
			printf("accel");
 8001670:	4817      	ldr	r0, [pc, #92]	; (80016d0 <rotary_print_playmode+0xcc>)
 8001672:	f00a f8e5 	bl	800b840 <iprintf>
			break;
 8001676:	e01f      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case max_enable:
			printf("max_enable");
 8001678:	4816      	ldr	r0, [pc, #88]	; (80016d4 <rotary_print_playmode+0xd0>)
 800167a:	f00a f8e1 	bl	800b840 <iprintf>
			break;
 800167e:	e01b      	b.n	80016b8 <rotary_print_playmode+0xb4>
        case motor_free:
            printf("motor_free");
 8001680:	4815      	ldr	r0, [pc, #84]	; (80016d8 <rotary_print_playmode+0xd4>)
 8001682:	f00a f8dd 	bl	800b840 <iprintf>
            break;
 8001686:	e017      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case tracer_tuning:
			printf("tracer_tuning");
 8001688:	4814      	ldr	r0, [pc, #80]	; (80016dc <rotary_print_playmode+0xd8>)
 800168a:	f00a f8d9 	bl	800b840 <iprintf>
			break;
 800168e:	e013      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case velotrace_tuning:
			printf("velotrace_tuning");
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <rotary_print_playmode+0xdc>)
 8001692:	f00a f8d5 	bl	800b840 <iprintf>
			break;
 8001696:	e00f      	b.n	80016b8 <rotary_print_playmode+0xb4>
        case velotrace_tuning_2:
            printf("velotrace_tuning_2");
 8001698:	4812      	ldr	r0, [pc, #72]	; (80016e4 <rotary_print_playmode+0xe0>)
 800169a:	f00a f8d1 	bl	800b840 <iprintf>
            break;
 800169e:	e00b      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case banquet:
			printf("banquet");
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <rotary_print_playmode+0xe4>)
 80016a2:	f00a f8cd 	bl	800b840 <iprintf>
			break;
 80016a6:	e007      	b.n	80016b8 <rotary_print_playmode+0xb4>
		case flash_print:
			printf("flash_print");
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <rotary_print_playmode+0xe8>)
 80016aa:	f00a f8c9 	bl	800b840 <iprintf>
			break;
 80016ae:	e003      	b.n	80016b8 <rotary_print_playmode+0xb4>
		default:
			printf("unknown playmode...");
 80016b0:	480f      	ldr	r0, [pc, #60]	; (80016f0 <rotary_print_playmode+0xec>)
 80016b2:	f00a f8c5 	bl	800b840 <iprintf>
			break;
 80016b6:	bf00      	nop
	}
	printf("\r\n");
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <rotary_print_playmode+0xf0>)
 80016ba:	f00a f935 	bl	800b928 <puts>
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	080101fc 	.word	0x080101fc
 80016c8:	08010208 	.word	0x08010208
 80016cc:	08010214 	.word	0x08010214
 80016d0:	0801021c 	.word	0x0801021c
 80016d4:	08010224 	.word	0x08010224
 80016d8:	08010230 	.word	0x08010230
 80016dc:	0801023c 	.word	0x0801023c
 80016e0:	0801024c 	.word	0x0801024c
 80016e4:	08010260 	.word	0x08010260
 80016e8:	08010274 	.word	0x08010274
 80016ec:	0801027c 	.word	0x0801027c
 80016f0:	08010288 	.word	0x08010288
 80016f4:	0801029c 	.word	0x0801029c

080016f8 <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
    enter = 1;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <switch_set_enter+0x14>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	2000022c 	.word	0x2000022c

08001710 <switch_reset_enter>:

void switch_reset_enter()
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
    enter = 0;
 8001714:	4b03      	ldr	r3, [pc, #12]	; (8001724 <switch_reset_enter+0x14>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	2000022c 	.word	0x2000022c

08001728 <switch_init>:
{
    switch_reset_enter();
}

void switch_init()
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
    switch_reset_enter();
 800172c:	f7ff fff0 	bl	8001710 <switch_reset_enter>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <switch_read_enter>:

uint8_t switch_read_enter()
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
    return enter;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <switch_read_enter+0x14>)
 800173a:	781b      	ldrb	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000022c 	.word	0x2000022c

0800174c <switch1_read>:

uint8_t switch1_read()
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 8001750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <switch1_read+0x20>)
 8001756:	f006 fa17 	bl	8007b88 <HAL_GPIO_ReadPin>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
}
 8001766:	4618      	mov	r0, r3
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40020800 	.word	0x40020800

08001770 <switch2_read>:

uint8_t switch2_read()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 8001774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <switch2_read+0x20>)
 800177a:	f006 fa05 	bl	8007b88 <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2db      	uxtb	r3, r3
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40020800 	.word	0x40020800

08001794 <switch_read>:

uint8_t switch_read()
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 800179e:	f7ff ffd5 	bl	800174c <switch1_read>
 80017a2:	4603      	mov	r3, r0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	4413      	add	r3, r2
 80017ac:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 80017ae:	f7ff ffdf 	bl	8001770 <switch2_read>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	4413      	add	r3, r2
 80017ba:	71fb      	strb	r3, [r7, #7]

    return value_;
 80017bc:	79fb      	ldrb	r3, [r7, #7]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <switch_enter>:

void switch_enter()
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 80017ca:	f7ff ffe3 	bl	8001794 <switch_read>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d102      	bne.n	80017da <switch_enter+0x14>
    {
        switch_reset_enter();
 80017d4:	f7ff ff9c 	bl	8001710 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 80017d8:	e006      	b.n	80017e8 <switch_enter+0x22>
    else if(switch_read() == 0b10)
 80017da:	f7ff ffdb 	bl	8001794 <switch_read>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d101      	bne.n	80017e8 <switch_enter+0x22>
        switch_set_enter();
 80017e4:	f7ff ff88 	bl	80016f8 <switch_set_enter>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 80017ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f0:	b08e      	sub	sp, #56	; 0x38
 80017f2:	af0a      	add	r7, sp, #40	; 0x28
 80017f4:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 80017f6:	482d      	ldr	r0, [pc, #180]	; (80018ac <analog_array_print+0xc0>)
 80017f8:	f00a f822 	bl	800b840 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3318      	adds	r3, #24
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	4619      	mov	r1, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	331c      	adds	r3, #28
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	331e      	adds	r3, #30
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	331a      	adds	r3, #26
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4603      	mov	r3, r0
 800181e:	4824      	ldr	r0, [pc, #144]	; (80018b0 <analog_array_print+0xc4>)
 8001820:	f00a f80e 	bl	800b840 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	469c      	mov	ip, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3304      	adds	r3, #4
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	469e      	mov	lr, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3308      	adds	r3, #8
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	4698      	mov	r8, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	330c      	adds	r3, #12
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3310      	adds	r3, #16
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3314      	adds	r3, #20
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3316      	adds	r3, #22
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	461c      	mov	r4, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3312      	adds	r3, #18
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	461d      	mov	r5, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	330e      	adds	r3, #14
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	461e      	mov	r6, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	330a      	adds	r3, #10
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3306      	adds	r3, #6
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3302      	adds	r3, #2
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	9308      	str	r3, [sp, #32]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	9307      	str	r3, [sp, #28]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	9306      	str	r3, [sp, #24]
 800188a:	9605      	str	r6, [sp, #20]
 800188c:	9504      	str	r5, [sp, #16]
 800188e:	9403      	str	r4, [sp, #12]
 8001890:	9002      	str	r0, [sp, #8]
 8001892:	9101      	str	r1, [sp, #4]
 8001894:	9200      	str	r2, [sp, #0]
 8001896:	4643      	mov	r3, r8
 8001898:	4672      	mov	r2, lr
 800189a:	4661      	mov	r1, ip
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <analog_array_print+0xc8>)
 800189e:	f009 ffcf 	bl	800b840 <iprintf>
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018ac:	080102a0 	.word	0x080102a0
 80018b0:	080102a8 	.word	0x080102a8
 80018b4:	080102c0 	.word	0x080102c0

080018b8 <analog_d_print>:

	printf("average = %4.2f\r\n\r\n", sum_ / (float) size_);
}

void analog_d_print()
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
#if D_ANALOG
	analog_print_analogmode();
	analog_rate_array_print();
	// analog_array_print(analog);
#endif
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <analog_print_max>:
	analog_print_analogmode();
	analog_array_print(analog);
}

void analog_print_max()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 80018cc:	4806      	ldr	r0, [pc, #24]	; (80018e8 <analog_print_max+0x20>)
 80018ce:	f009 ffb7 	bl	800b840 <iprintf>
	printf("analog_print_max\r\n");
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <analog_print_max+0x24>)
 80018d4:	f00a f828 	bl	800b928 <puts>
	analog_array_print(analogmax);
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <analog_print_max+0x28>)
 80018da:	f7ff ff87 	bl	80017ec <analog_array_print>
	printf(ESC_DEF);
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <analog_print_max+0x2c>)
 80018e0:	f009 ffae 	bl	800b840 <iprintf>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	080103b8 	.word	0x080103b8
 80018ec:	080103c0 	.word	0x080103c0
 80018f0:	200003f8 	.word	0x200003f8
 80018f4:	080103d4 	.word	0x080103d4

080018f8 <analog_print_min>:

void analog_print_min()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 80018fc:	4806      	ldr	r0, [pc, #24]	; (8001918 <analog_print_min+0x20>)
 80018fe:	f009 ff9f 	bl	800b840 <iprintf>
	printf("analog_print_min\r\n");
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <analog_print_min+0x24>)
 8001904:	f00a f810 	bl	800b928 <puts>
	analog_array_print(analogmin);
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <analog_print_min+0x28>)
 800190a:	f7ff ff6f 	bl	80017ec <analog_array_print>
	printf(ESC_DEF);
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <analog_print_min+0x2c>)
 8001910:	f009 ff96 	bl	800b840 <iprintf>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	080103dc 	.word	0x080103dc
 800191c:	080103e4 	.word	0x080103e4
 8001920:	20000274 	.word	0x20000274
 8001924:	080103d4 	.word	0x080103d4

08001928 <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_to_flash()\r\n");
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e014      	b.n	8001962 <analog_set_on_flash+0x3a>
		#if D_ANALOG
		printf(ESC_MAG);
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, analogdata.min[i], i, analogdata.max[i]);
		printf(ESC_DEF);
		#endif
		*(analogmin_ + i) = analogmin[i];
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <analog_set_on_flash+0x4c>)
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001948:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	4909      	ldr	r1, [pc, #36]	; (8001978 <analog_set_on_flash+0x50>)
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800195a:	801a      	strh	r2, [r3, #0]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d9e7      	bls.n	8001938 <analog_set_on_flash+0x10>
		printf(ESC_GRE);
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, analogdata.min[i], i, analogdata.max[i]);
		printf(ESC_DEF);
		#endif
	}
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20000274 	.word	0x20000274
 8001978:	200003f8 	.word	0x200003f8

0800197c <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_from_flash()\r\n");
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e014      	b.n	80019b6 <analog_set_from_flash+0x3a>
	{
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, analogdata.min[i], i, analogdata.max[i]);
		#endif
		analogmin[i] = *(analogmin_ + i);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	8819      	ldrh	r1, [r3, #0]
 8001996:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <analog_set_from_flash+0x4c>)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	8819      	ldrh	r1, [r3, #0]
 80019a8:	4a08      	ldr	r2, [pc, #32]	; (80019cc <analog_set_from_flash+0x50>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d9e7      	bls.n	800198c <analog_set_from_flash+0x10>
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, analogdata.min[i], i, analogdata.max[i]);
		#endif
	}
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	20000274 	.word	0x20000274
 80019cc:	200003f8 	.word	0x200003f8

080019d0 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <analog_set_calibrationsize+0x1c>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	7013      	strb	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	20000295 	.word	0x20000295

080019f0 <analog_set_analogmode>:
{
	return calibrationsize;
}

void analog_set_analogmode(AnalogMode analogmode_)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <analog_set_analogmode+0x1c>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	7013      	strb	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	20000294 	.word	0x20000294

08001a10 <analog_read_analogmode>:

AnalogMode analog_read_analogmode()
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return analogmode;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <analog_read_analogmode+0x14>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000294 	.word	0x20000294

08001a28 <analog_calibration_start>:

void analog_calibration_start()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	analog_set_analogmode(analogmode_all);
 8001a2e:	2010      	movs	r0, #16
 8001a30:	f7ff ffde 	bl	80019f0 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	71fb      	strb	r3, [r7, #7]
 8001a38:	e00d      	b.n	8001a56 <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <analog_calibration_start+0x48>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <analog_calibration_start+0x4c>)
 8001a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	3301      	adds	r3, #1
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d9ee      	bls.n	8001a3a <analog_calibration_start+0x12>
    }
	analog_print_max();
 8001a5c:	f7ff ff34 	bl	80018c8 <analog_print_max>
	analog_print_min();
 8001a60:	f7ff ff4a 	bl	80018f8 <analog_print_min>
	analog_sensor_start();
 8001a64:	f000 f83e 	bl	8001ae4 <analog_sensor_start>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200003f8 	.word	0x200003f8
 8001a74:	20000274 	.word	0x20000274

08001a78 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(analogmode_all);
 8001a7c:	2010      	movs	r0, #16
 8001a7e:	f7ff ffb7 	bl	80019f0 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001a82:	f000 f829 	bl	8001ad8 <analog_stop>
	analog_print_max();
 8001a86:	f7ff ff1f 	bl	80018c8 <analog_print_max>
	analog_print_min();
 8001a8a:	f7ff ff35 	bl	80018f8 <analog_print_min>
	/* analogdata.min/max = analogmin/max */
	analog_set_on_flash(analogdata.min, analogdata.max);
 8001a8e:	4904      	ldr	r1, [pc, #16]	; (8001aa0 <analog_calibration_stop+0x28>)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <analog_calibration_stop+0x2c>)
 8001a92:	f7ff ff49 	bl	8001928 <analog_set_on_flash>
	//! FLASH_SECTOR_8 is AnalogData
	flash_write(FLASH_SECTOR_8);
 8001a96:	2008      	movs	r0, #8
 8001a98:	f001 f894 	bl	8002bc4 <flash_write>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20012194 	.word	0x20012194
 8001aa4:	20012174 	.word	0x20012174

08001aa8 <analog_init>:

void analog_init()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 8001aac:	2010      	movs	r0, #16
 8001aae:	f7ff ff8f 	bl	80019d0 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <analog_init+0x20>)
 8001ab4:	f004 faa4 	bl	8006000 <HAL_ADC_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <analog_init+0x1a>
    {
        Error_Handler();
 8001abe:	f002 f9cb 	bl	8003e58 <Error_Handler>
    }
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200005b8 	.word	0x200005b8

08001acc <analog_start>:

void analog_start()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("analog_sensor_start()\r\n");
	#endif
	analog_sensor_start();
 8001ad0:	f000 f808 	bl	8001ae4 <analog_sensor_start>
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <analog_stop>:

void analog_stop()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001adc:	f000 f81a 	bl	8001b14 <analog_sensor_stop>
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <analog_sensor_start>:

void analog_sensor_start()
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
	#endif
    sensgettime = 0;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <analog_sensor_start+0x24>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001aee:	2210      	movs	r2, #16
 8001af0:	4906      	ldr	r1, [pc, #24]	; (8001b0c <analog_sensor_start+0x28>)
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <analog_sensor_start+0x2c>)
 8001af4:	f004 fac8 	bl	8006088 <HAL_ADC_Start_DMA>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <analog_sensor_start+0x1e>
    {
        Error_Handler();
 8001afe:	f002 f9ab 	bl	8003e58 <Error_Handler>
    }
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000250 	.word	0x20000250
 8001b0c:	20000254 	.word	0x20000254
 8001b10:	200005b8 	.word	0x200005b8

08001b14 <analog_sensor_stop>:

void analog_sensor_stop()
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <analog_sensor_stop+0x10>)
 8001b1a:	f004 fbc5 	bl	80062a8 <HAL_ADC_Stop_DMA>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200005b8 	.word	0x200005b8

08001b28 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
	uint16_t analog_before;
	//! 前の値を保存しておく
	analog_before = analograte[i];
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	4a2e      	ldr	r2, [pc, #184]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b3a:	81fb      	strh	r3, [r7, #14]
	//! 割合を取得する
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (float) (analogmax[i] - analogmin[i]);
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <analog_sensor_get+0xcc>)
 8001b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b44:	4619      	mov	r1, r3
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4a2b      	ldr	r2, [pc, #172]	; (8001bf8 <analog_sensor_get+0xd0>)
 8001b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b4e:	1acb      	subs	r3, r1, r3
 8001b50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	ee07 3a90 	vmov	s15, r3
 8001b5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <analog_sensor_get+0xd4>)
 8001b64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <analog_sensor_get+0xd0>)
 8001b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b72:	1acb      	subs	r3, r1, r3
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b80:	79fb      	ldrb	r3, [r7, #7]
 8001b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b86:	ee17 2a90 	vmov	r2, s15
 8001b8a:	b291      	uxth	r1, r2
 8001b8c:	4a18      	ldr	r2, [pc, #96]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(float)800, 500);
#endif
	//! ローパスフィルタに通す
	analograte[i] = low_pass_filter(analograte[i], analog_before, ANALOG_LPF_GAMMA);
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	4a16      	ldr	r2, [pc, #88]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001b96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcb2 	bl	8000504 <__aeabi_ui2d>
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	460d      	mov	r5, r1
 8001ba4:	89fb      	ldrh	r3, [r7, #14]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcac 	bl	8000504 <__aeabi_ui2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8001be8 <analog_sensor_get+0xc0>
 8001bb4:	ec43 2b11 	vmov	d1, r2, r3
 8001bb8:	ec45 4b10 	vmov	d0, r4, r5
 8001bbc:	f001 f896 	bl	8002cec <low_pass_filter>
 8001bc0:	ec53 2b10 	vmov	r2, r3, d0
 8001bc4:	79fc      	ldrb	r4, [r7, #7]
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe ffed 	bl	8000ba8 <__aeabi_d2uiz>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001bd4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	return analograte[i];
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <analog_sensor_get+0xc8>)
 8001bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8001bf0:	20000298 	.word	0x20000298
 8001bf4:	20000230 	.word	0x20000230
 8001bf8:	20000274 	.word	0x20000274
 8001bfc:	200003f8 	.word	0x200003f8

08001c00 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001c08:	f000 f804 	bl	8001c14 <analog_get_and_sort>
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001c14:	b490      	push	{r4, r7}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <analog_get_and_sort+0x120>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d968      	bls.n	8001cf4 <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <analog_get_and_sort+0x120>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	e05f      	b.n	8001cee <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71bb      	strb	r3, [r7, #6]
 8001c32:	e02d      	b.n	8001c90 <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001c34:	2300      	movs	r3, #0
 8001c36:	717b      	strb	r3, [r7, #5]
 8001c38:	e023      	b.n	8001c82 <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001c3a:	797b      	ldrb	r3, [r7, #5]
 8001c3c:	1e5a      	subs	r2, r3, #1
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	493d      	ldr	r1, [pc, #244]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001c4a:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001c4c:	7978      	ldrb	r0, [r7, #5]
 8001c4e:	79f9      	ldrb	r1, [r7, #7]
 8001c50:	797b      	ldrb	r3, [r7, #5]
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	4c38      	ldr	r4, [pc, #224]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c58:	0100      	lsls	r0, r0, #4
 8001c5a:	4401      	add	r1, r0
 8001c5c:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001c60:	4935      	ldr	r1, [pc, #212]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	4413      	add	r3, r2
 8001c66:	4602      	mov	r2, r0
 8001c68:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001c6c:	797a      	ldrb	r2, [r7, #5]
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	4931      	ldr	r1, [pc, #196]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	4413      	add	r3, r2
 8001c76:	887a      	ldrh	r2, [r7, #2]
 8001c78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001c7c:	797b      	ldrb	r3, [r7, #5]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	717b      	strb	r3, [r7, #5]
 8001c82:	797a      	ldrb	r2, [r7, #5]
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d8d7      	bhi.n	8001c3a <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001c8a:	79bb      	ldrb	r3, [r7, #6]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	71bb      	strb	r3, [r7, #6]
 8001c90:	79bb      	ldrb	r3, [r7, #6]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d9ce      	bls.n	8001c34 <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001c96:	79fa      	ldrb	r2, [r7, #7]
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	4927      	ldr	r1, [pc, #156]	; (8001d38 <analog_get_and_sort+0x124>)
 8001c9c:	3240      	adds	r2, #64	; 0x40
 8001c9e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001ca2:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <analog_get_and_sort+0x128>)
 8001ca4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4a25      	ldr	r2, [pc, #148]	; (8001d40 <analog_get_and_sort+0x12c>)
 8001cac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <analog_get_and_sort+0x128>)
 8001cb4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	428a      	cmp	r2, r1
 8001cbc:	bf38      	it	cc
 8001cbe:	460a      	movcc	r2, r1
 8001cc0:	b291      	uxth	r1, r2
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <analog_get_and_sort+0x12c>)
 8001cc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <analog_get_and_sort+0x130>)
 8001ccc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <analog_get_and_sort+0x128>)
 8001cd4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	428a      	cmp	r2, r1
 8001cdc:	bf28      	it	cs
 8001cde:	460a      	movcs	r2, r1
 8001ce0:	b291      	uxth	r1, r2
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <analog_get_and_sort+0x130>)
 8001ce4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	3301      	adds	r3, #1
 8001cec:	71fb      	strb	r3, [r7, #7]
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d99c      	bls.n	8001c2e <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	713b      	strb	r3, [r7, #4]
 8001cf8:	e00f      	b.n	8001d1a <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001cfa:	7939      	ldrb	r1, [r7, #4]
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <analog_get_and_sort+0x120>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	793b      	ldrb	r3, [r7, #4]
 8001d02:	4811      	ldr	r0, [pc, #68]	; (8001d48 <analog_get_and_sort+0x134>)
 8001d04:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001d08:	490b      	ldr	r1, [pc, #44]	; (8001d38 <analog_get_and_sort+0x124>)
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	4602      	mov	r2, r0
 8001d10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d14:	793b      	ldrb	r3, [r7, #4]
 8001d16:	3301      	adds	r3, #1
 8001d18:	713b      	strb	r3, [r7, #4]
 8001d1a:	793b      	ldrb	r3, [r7, #4]
 8001d1c:	2b0f      	cmp	r3, #15
 8001d1e:	d9ec      	bls.n	8001cfa <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <analog_get_and_sort+0x120>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	4a03      	ldr	r2, [pc, #12]	; (8001d34 <analog_get_and_sort+0x120>)
 8001d28:	6013      	str	r3, [r2, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc90      	pop	{r4, r7}
 8001d32:	4770      	bx	lr
 8001d34:	20000250 	.word	0x20000250
 8001d38:	200002b8 	.word	0x200002b8
 8001d3c:	20000230 	.word	0x20000230
 8001d40:	200003f8 	.word	0x200003f8
 8001d44:	20000274 	.word	0x20000274
 8001d48:	20000254 	.word	0x20000254

08001d4c <course_init>:
float course_update_section_sampling_time_s;
float course_accel_max;
float __course_debug_target_speed__;

void course_init(unsigned short int samplingtime_ms)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
	imu_init();
 8001d56:	f7ff f973 	bl	8001040 <imu_init>
	course_state_count = 0;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <course_init+0x24>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
	course_set_update_section_freq_ms(samplingtime_ms);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f8a2 	bl	8001eac <course_set_update_section_freq_ms>
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000428 	.word	0x20000428

08001d74 <course_start>:

void course_start()
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	/* course_start */
	course_state_count = 0;
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <course_start+0x60>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	801a      	strh	r2, [r3, #0]
	course_accel_max = accel_max_calc(rotary_read_value());
 8001d7e:	f7ff fbeb 	bl	8001558 <rotary_read_value>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fda3 	bl	80028d0 <accel_max_calc>
 8001d8a:	eef0 7a40 	vmov.f32	s15, s0
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <course_start+0x64>)
 8001d90:	edc3 7a00 	vstr	s15, [r3]
	course_reset_section_degree();
 8001d94:	f000 f8b4 	bl	8001f00 <course_reset_section_degree>
	if(rotary_read_playmode() == search || rotary_read_playmode() == motor_free)
 8001d98:	f7ff fbc6 	bl	8001528 <rotary_read_playmode>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d004      	beq.n	8001dac <course_start+0x38>
 8001da2:	f7ff fbc1 	bl	8001528 <rotary_read_playmode>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d101      	bne.n	8001db0 <course_start+0x3c>
	{
		//! speed radius right left に初期値を与える
		course_reset_flash();
 8001dac:	f000 fd4c 	bl	8002848 <course_reset_flash>
	}
	if(rotary_read_playmode() == accel)
 8001db0:	f7ff fbba 	bl	8001528 <rotary_read_playmode>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d107      	bne.n	8001dca <course_start+0x56>
	{
		//! coursedata だけでいい
		flash_read(FLASH_SECTOR_11);
 8001dba:	200b      	movs	r0, #11
 8001dbc:	f000 ff44 	bl	8002c48 <flash_read>
		//! 走る前に速度を計算して書き込んでからスタートする ( 使うのは coursedata のみ )
		course_fixing_radius2speed();
 8001dc0:	f000 f9fe 	bl	80021c0 <course_fixing_radius2speed>
		//! FLASH_SECTOR_11 is CourseData
		flash_write(FLASH_SECTOR_11);
 8001dc4:	200b      	movs	r0, #11
 8001dc6:	f000 fefd 	bl	8002bc4 <flash_write>
	}
	imu_start();
 8001dca:	f7ff f9e1 	bl	8001190 <imu_start>
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000428 	.word	0x20000428
 8001dd8:	20000424 	.word	0x20000424

08001ddc <course_stop>:

void course_stop()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	if(rotary_read_playmode() == search || rotary_read_playmode() == motor_free)
 8001de0:	f7ff fba2 	bl	8001528 <rotary_read_playmode>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d004      	beq.n	8001df4 <course_stop+0x18>
 8001dea:	f7ff fb9d 	bl	8001528 <rotary_read_playmode>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d108      	bne.n	8001e06 <course_stop+0x2a>
	{
		flash_write(FLASH_SECTOR_9);
 8001df4:	2009      	movs	r0, #9
 8001df6:	f000 fee5 	bl	8002bc4 <flash_write>
		flash_write(FLASH_SECTOR_10);
 8001dfa:	200a      	movs	r0, #10
 8001dfc:	f000 fee2 	bl	8002bc4 <flash_write>
		flash_write(FLASH_SECTOR_11);
 8001e00:	200b      	movs	r0, #11
 8001e02:	f000 fedf 	bl	8002bc4 <flash_write>
	}
	if(rotary_read_playmode() == accel)
 8001e06:	f7ff fb8f 	bl	8001528 <rotary_read_playmode>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d102      	bne.n	8001e16 <course_stop+0x3a>
	{
		flash_write(FLASH_SECTOR_11);
 8001e10:	200b      	movs	r0, #11
 8001e12:	f000 fed7 	bl	8002bc4 <flash_write>
	}
	imu_stop();
 8001e16:	f7ff f9c2 	bl	800119e <imu_stop>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <course_update_section_degree>:
 * 好きな時に course_section_degree をリセットする
 * course_update_section_degree() は course_update_section_sampling_time_s の周期で常に実行され続ける
 * 
 */
void course_update_section_degree()
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	float tmp;
	imu_update_gyro();
 8001e26:	f7ff f9c3 	bl	80011b0 <imu_update_gyro>
	#if D_COURSE_WHILE
	printf("imu_read_yaw() = %7.2lf, course_section_degree = %7.2lf\r\n", imu_read_yaw(), course_section_degree);
	#endif
	course_sampling_count = course_sampling_count + 1;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <course_update_section_degree+0x80>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <course_update_section_degree+0x80>)
 8001e34:	801a      	strh	r2, [r3, #0]
	tmp = course_section_degree + imu_read_yaw() * course_update_section_sampling_time_s;
 8001e36:	f7ff fa6f 	bl	8001318 <imu_read_yaw>
 8001e3a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <course_update_section_degree+0x84>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <course_update_section_degree+0x88>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e52:	edc7 7a01 	vstr	s15, [r7, #4]
	course_section_degree = low_pass_filter(tmp, course_section_degree, 0);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fb76 	bl	8000548 <__aeabi_f2d>
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	460d      	mov	r5, r1
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <course_update_section_degree+0x88>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb6f 	bl	8000548 <__aeabi_f2d>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001e98 <course_update_section_degree+0x78>
 8001e72:	ec43 2b11 	vmov	d1, r2, r3
 8001e76:	ec45 4b10 	vmov	d0, r4, r5
 8001e7a:	f000 ff37 	bl	8002cec <low_pass_filter>
 8001e7e:	ec54 3b10 	vmov	r3, r4, d0
 8001e82:	4618      	mov	r0, r3
 8001e84:	4621      	mov	r1, r4
 8001e86:	f7fe feaf 	bl	8000be8 <__aeabi_d2f>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <course_update_section_degree+0x88>)
 8001e8e:	601a      	str	r2, [r3, #0]
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8001ea0:	20000420 	.word	0x20000420
 8001ea4:	2000041c 	.word	0x2000041c
 8001ea8:	20000430 	.word	0x20000430

08001eac <course_set_update_section_freq_ms>:

void course_set_update_section_freq_ms(unsigned short int samplingtime_ms)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
	course_update_section_sampling_time_s = samplingtime_ms / (float) 1000;
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec0:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001edc <course_set_update_section_freq_ms+0x30>
 8001ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <course_set_update_section_freq_ms+0x34>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	447a0000 	.word	0x447a0000
 8001ee0:	2000041c 	.word	0x2000041c

08001ee4 <course_read_section_degree>:

float course_read_section_degree()
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
	return course_section_degree;
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <course_read_section_degree+0x18>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	ee07 3a90 	vmov	s15, r3
}
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	20000430 	.word	0x20000430

08001f00 <course_reset_section_degree>:

void course_reset_section_degree()
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
	course_sampling_count = 0;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <course_reset_section_degree+0x1c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	801a      	strh	r2, [r3, #0]
	course_section_degree = 0;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <course_reset_section_degree+0x20>)
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000420 	.word	0x20000420
 8001f20:	20000430 	.word	0x20000430

08001f24 <course_reset>:

void course_reset()
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	course_reset_section_degree();
 8001f28:	f7ff ffea 	bl	8001f00 <course_reset_section_degree>
	section_length_reset();
 8001f2c:	f002 f8c8 	bl	80040c0 <section_length_reset>
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <course_read_curvature_radius>:

float course_read_curvature_radius()
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
	return course_section_radius;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <course_read_curvature_radius+0x18>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	ee07 3a90 	vmov	s15, r3
}
 8001f40:	eeb0 0a67 	vmov.f32	s0, s15
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	2000042c 	.word	0x2000042c

08001f50 <course_read_state_count>:

uint16_t course_read_state_count()
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
    return course_state_count;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <course_read_state_count+0x14>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000428 	.word	0x20000428

08001f68 <course_increment_state_count>:
{
	return course_sampling_count;
}

void course_increment_state_count()
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
    course_state_count++;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <course_increment_state_count+0x1c>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	3301      	adds	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <course_increment_state_count+0x1c>)
 8001f76:	801a      	strh	r2, [r3, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000428 	.word	0x20000428

08001f88 <course_calclate_radius>:
 * course_reset()					// 角度と長さ情報をリセットする
 * の順に呼び出す必要がある
 * 
 */
void course_calclate_radius()
{
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
    float curvature_radius;
	float section_degree, section_length;
	float section_radian;

    //! 現在の区間長を取得する */
	section_length = section_length_read();
 8001f8e:	f002 f8bf 	bl	8004110 <section_length_read>
 8001f92:	ed87 0a03 	vstr	s0, [r7, #12]
	//! 現在点を次の区間開始点に設定する
	section_length_set_buffer();
 8001f96:	f002 f8f1 	bl	800417c <section_length_set_buffer>
	//! 角度を取得する
	section_degree = course_read_section_degree();
 8001f9a:	f7ff ffa3 	bl	8001ee4 <course_read_section_degree>
 8001f9e:	ed87 0a02 	vstr	s0, [r7, #8]

#if MODE_IMU_CALCLATE
	course_section_length = // course_section_length_from_imu
#endif

	section_radian = section_degree * M_PI / (float) 180;
 8001fa2:	68b8      	ldr	r0, [r7, #8]
 8001fa4:	f7fe fad0 	bl	8000548 <__aeabi_f2d>
 8001fa8:	a315      	add	r3, pc, #84	; (adr r3, 8002000 <course_calclate_radius+0x78>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fb23 	bl	80005f8 <__aeabi_dmul>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4621      	mov	r1, r4
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <course_calclate_radius+0x70>)
 8001fc0:	f7fe fc44 	bl	800084c <__aeabi_ddiv>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	4618      	mov	r0, r3
 8001fca:	4621      	mov	r1, r4
 8001fcc:	f7fe fe0c 	bl	8000be8 <__aeabi_d2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	607b      	str	r3, [r7, #4]
	curvature_radius = section_length / (float) section_radian;
 8001fd4:	edd7 6a03 	vldr	s13, [r7, #12]
 8001fd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe0:	edc7 7a00 	vstr	s15, [r7]
	course_section_radius = curvature_radius;
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <course_calclate_radius+0x74>)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6013      	str	r3, [r2, #0]
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	40668000 	.word	0x40668000
 8001ffc:	2000042c 	.word	0x2000042c
 8002000:	54442d18 	.word	0x54442d18
 8002004:	400921fb 	.word	0x400921fb

08002008 <course_state_function>:
 * 左センサを読んだら、あるいは、一定区間進んだら course_state_function() を実行するようにプログラムする
 * 探索か二次走行かは course_state_function() 関数内で判断する必要がある
 * 
 */
void course_state_function()
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
	PlayMode pm;
	pm = rotary_read_playmode();
 800200e:	f7ff fa8b 	bl	8001528 <rotary_read_playmode>
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
	if(pm == search || pm == motor_free )
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d002      	beq.n	8002022 <course_state_function+0x1a>
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	2b04      	cmp	r3, #4
 8002020:	d12b      	bne.n	800207a <course_state_function+0x72>
	{
		coursedata.course_state_count_max = course_read_state_count();
 8002022:	f7ff ff95 	bl	8001f50 <course_read_state_count>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <course_state_function+0xa8>)
 800202c:	801a      	strh	r2, [r3, #0]
		course_calclate_radius();
 800202e:	f7ff ffab 	bl	8001f88 <course_calclate_radius>
		coursedata.radius[course_state_count] = course_read_curvature_radius();
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <course_state_function+0xac>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	461c      	mov	r4, r3
 8002038:	f7ff ff7c 	bl	8001f34 <course_read_curvature_radius>
 800203c:	eef0 7a40 	vmov.f32	s15, s0
 8002040:	4a1b      	ldr	r2, [pc, #108]	; (80020b0 <course_state_function+0xa8>)
 8002042:	f504 53bb 	add.w	r3, r4, #5984	; 0x1760
 8002046:	3310      	adds	r3, #16
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3304      	adds	r3, #4
 800204e:	edc3 7a00 	vstr	s15, [r3]
		//! 必要な情報を保管しておく
		course_data_saving();
 8002052:	f000 fc61 	bl	8002918 <course_data_saving>
		//! 区間長と区間角度と区間半径をリセット
		course_reset();
 8002056:	f7ff ff65 	bl	8001f24 <course_reset>
		//! マーカを読んだ場所の記録
		coursedata.marker[course_state_count] = length_read();
 800205a:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <course_state_function+0xac>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	461c      	mov	r4, r3
 8002060:	f000 ff06 	bl	8002e70 <length_read>
 8002064:	eef0 7a40 	vmov.f32	s15, s0
 8002068:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <course_state_function+0xa8>)
 800206a:	f504 533b 	add.w	r3, r4, #11968	; 0x2ec0
 800206e:	3320      	adds	r3, #32
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	edc3 7a00 	vstr	s15, [r3]
	}
	if(pm == accel)
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d110      	bne.n	80020a2 <course_state_function+0x9a>
	{
		float fixed_velocity_target;
		// course_calclate_radius() を呼び出していないのでリセットする必要がある
		section_length_set_buffer();
 8002080:	f002 f87c 	bl	800417c <section_length_set_buffer>
		fixed_velocity_target = coursedata.speed[course_state_count];
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <course_state_function+0xac>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <course_state_function+0xa8>)
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	603b      	str	r3, [r7, #0]
		__course_debug_target_speed__ = fixed_velocity_target;
 8002094:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <course_state_function+0xb0>)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6013      	str	r3, [r2, #0]
		velotrace_set_target_direct(fixed_velocity_target);
 800209a:	ed97 0a00 	vldr	s0, [r7]
 800209e:	f003 fd03 	bl	8005aa8 <velotrace_set_target_direct>
	}
	course_increment_state_count();
 80020a2:	f7ff ff61 	bl	8001f68 <course_increment_state_count>
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000818 	.word	0x20000818
 80020b4:	20000428 	.word	0x20000428
 80020b8:	20000418 	.word	0x20000418

080020bc <course_d_print>:

void course_d_print()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
#if D_COURSE
	printf("__course_debug_target_speed__ = %2.5f\r\n", __course_debug_target_speed__);
#endif
	encoder_d_print();
 80020c0:	f000 fc7e 	bl	80029c0 <encoder_d_print>
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <course_radius2speed>:

float course_radius2speed(float radius)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	ed87 0a01 	vstr	s0, [r7, #4]
	float speed;
	radius = fabs(radius);
 80020d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d6:	eef0 7ae7 	vabs.f32	s15, s15
 80020da:	edc7 7a01 	vstr	s15, [r7, #4]
	if(radius < 0.075f) speed = 1.000f;
 80020de:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80021a4 <course_radius2speed+0xdc>
 80020e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ee:	d503      	bpl.n	80020f8 <course_radius2speed+0x30>
 80020f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	e04b      	b.n	8002190 <course_radius2speed+0xc8>
    else if(radius < 0.125f) speed = 1.200f;
 80020f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020fc:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	d502      	bpl.n	8002110 <course_radius2speed+0x48>
 800210a:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <course_radius2speed+0xe0>)
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e03f      	b.n	8002190 <course_radius2speed+0xc8>
    else if(radius < 0.175f) speed = 1.500f;
 8002110:	edd7 7a01 	vldr	s15, [r7, #4]
 8002114:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80021ac <course_radius2speed+0xe4>
 8002118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	d503      	bpl.n	800212a <course_radius2speed+0x62>
 8002122:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	e032      	b.n	8002190 <course_radius2speed+0xc8>
    else if(radius < 0.45f) speed = 2.00f;
 800212a:	edd7 7a01 	vldr	s15, [r7, #4]
 800212e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80021b0 <course_radius2speed+0xe8>
 8002132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	d503      	bpl.n	8002144 <course_radius2speed+0x7c>
 800213c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	e025      	b.n	8002190 <course_radius2speed+0xc8>
    else if(radius < 0.8f) speed = 2.500f;
 8002144:	edd7 7a01 	vldr	s15, [r7, #4]
 8002148:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80021b4 <course_radius2speed+0xec>
 800214c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002154:	d502      	bpl.n	800215c <course_radius2speed+0x94>
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <course_radius2speed+0xf0>)
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	e019      	b.n	8002190 <course_radius2speed+0xc8>
    else if(radius < 1.5f) speed = 2.500f;
 800215c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002160:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	d502      	bpl.n	8002174 <course_radius2speed+0xac>
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <course_radius2speed+0xf0>)
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	e00d      	b.n	8002190 <course_radius2speed+0xc8>
    else if(radius < 2.5f) speed = 2.500f;
 8002174:	edd7 7a01 	vldr	s15, [r7, #4]
 8002178:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800217c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002184:	d502      	bpl.n	800218c <course_radius2speed+0xc4>
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <course_radius2speed+0xf0>)
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e001      	b.n	8002190 <course_radius2speed+0xc8>
    else speed = 2.50f;
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <course_radius2speed+0xf0>)
 800218e:	60fb      	str	r3, [r7, #12]
	// speed = - (4238566523291511 * pow(radius, 5)) / (double) 633825300114114700748351602688 + (8582934509267735 * pow(radius, 4)) / (double) 77371252455336267181195264 - (1459060547913519 * pow(radius, 3)) / (double) 2361183241434822606848 + (2682365349594497 * pow(radius, 2)) / (double) 2305843009213693952 + (1737420468106149 * radius) / (double) 4503599627370496 + 7057670738269725 / (double) 8796093022208;
	return speed;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	ee07 3a90 	vmov	s15, r3
}
 8002196:	eeb0 0a67 	vmov.f32	s0, s15
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	3d99999a 	.word	0x3d99999a
 80021a8:	3f99999a 	.word	0x3f99999a
 80021ac:	3e333333 	.word	0x3e333333
 80021b0:	3ee66666 	.word	0x3ee66666
 80021b4:	3f4ccccd 	.word	0x3f4ccccd
 80021b8:	40200000 	.word	0x40200000
 80021bc:	00000000 	.word	0x00000000

080021c0 <course_fixing_radius2speed>:

void course_fixing_radius2speed()
{
 80021c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c2:	f5ad 4d3b 	sub.w	sp, sp, #47872	; 0xbb00
 80021c6:	b0af      	sub	sp, #188	; 0xbc
 80021c8:	af00      	add	r7, sp, #0
	float accel_length;
	uint16_t imax;
	imax = coursedata.course_state_count_max;
 80021ca:	4bb1      	ldr	r3, [pc, #708]	; (8002490 <course_fixing_radius2speed+0x2d0>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80021d2:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 80021d6:	8013      	strh	r3, [r2, #0]
	/* まず矩形グラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80021d8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80021dc:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80021e6:	f102 02b6 	add.w	r2, r2, #182	; 0xb6
 80021ea:	8013      	strh	r3, [r2, #0]
 80021ec:	e039      	b.n	8002262 <course_fixing_radius2speed+0xa2>
	{
		uint16_t index;
		index = imax - course_state_size;
 80021ee:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80021f2:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80021f6:	881a      	ldrh	r2, [r3, #0]
 80021f8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80021fc:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002208:	f102 0286 	add.w	r2, r2, #134	; 0x86
 800220c:	8013      	strh	r3, [r2, #0]
		coursedata.speed[index] = course_radius2speed(coursedata.radius[index]);
 800220e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002212:	f103 0386 	add.w	r3, r3, #134	; 0x86
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	4a9d      	ldr	r2, [pc, #628]	; (8002490 <course_fixing_radius2speed+0x2d0>)
 800221a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800221e:	3310      	adds	r3, #16
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	3304      	adds	r3, #4
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800222e:	f103 0386 	add.w	r3, r3, #134	; 0x86
 8002232:	881c      	ldrh	r4, [r3, #0]
 8002234:	eeb0 0a67 	vmov.f32	s0, s15
 8002238:	f7ff ff46 	bl	80020c8 <course_radius2speed>
 800223c:	eef0 7a40 	vmov.f32	s15, s0
 8002240:	4a93      	ldr	r2, [pc, #588]	; (8002490 <course_fixing_radius2speed+0x2d0>)
 8002242:	00a3      	lsls	r3, r4, #2
 8002244:	4413      	add	r3, r2
 8002246:	3304      	adds	r3, #4
 8002248:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800224c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002250:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	3b01      	subs	r3, #1
 8002258:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800225c:	f102 02b6 	add.w	r2, r2, #182	; 0xb6
 8002260:	8013      	strh	r3, [r2, #0]
 8002262:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002266:	f103 03b6 	add.w	r3, r3, #182	; 0xb6
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1be      	bne.n	80021ee <course_fixing_radius2speed+0x2e>
	}

	float accel_glaph[COURSE_STATE_SIZE];
	float decel_glaph[COURSE_STATE_SIZE];

	accel_glaph[0] = 1;
 8002270:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8002274:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002278:	3b74      	subs	r3, #116	; 0x74
 800227a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800227e:	601a      	str	r2, [r3, #0]
	decel_glaph[imax] = 20;
 8002280:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002284:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002288:	881a      	ldrh	r2, [r3, #0]
 800228a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800228e:	3bb4      	subs	r3, #180	; 0xb4
 8002290:	0092      	lsls	r2, r2, #2
 8002292:	4413      	add	r3, r2
 8002294:	4a7f      	ldr	r2, [pc, #508]	; (8002494 <course_fixing_radius2speed+0x2d4>)
 8002296:	601a      	str	r2, [r3, #0]

	accel_length = (float) COURSE_SAMPLING_LENGTH * course_accel_max;
 8002298:	4b7f      	ldr	r3, [pc, #508]	; (8002498 <course_fixing_radius2speed+0x2d8>)
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800249c <course_fixing_radius2speed+0x2dc>
 80022a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a6:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022aa:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80022ae:	edc3 7a00 	vstr	s15, [r3]

	/* 加速方向でのこぎりグラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80022b2:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022b6:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80022c0:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80022c4:	8013      	strh	r3, [r2, #0]
 80022c6:	e0cc      	b.n	8002462 <course_fixing_radius2speed+0x2a2>
	{
		uint16_t index;
		float v1, v2, vref;
		index = imax - course_state_size;
 80022c8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022cc:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022d6:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80022e2:	f102 0292 	add.w	r2, r2, #146	; 0x92
 80022e6:	8013      	strh	r3, [r2, #0]
		v1 = accel_glaph[index];
 80022e8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80022ec:	f103 0392 	add.w	r3, r3, #146	; 0x92
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80022f6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80022fa:	3b74      	subs	r3, #116	; 0x74
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	4413      	add	r3, r2
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002306:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 800230a:	6013      	str	r3, [r2, #0]
		v2 = coursedata.speed[index + 1];
 800230c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002310:	f103 0392 	add.w	r3, r3, #146	; 0x92
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	4a5d      	ldr	r2, [pc, #372]	; (8002490 <course_fixing_radius2speed+0x2d0>)
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	3304      	adds	r3, #4
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002326:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800232a:	6013      	str	r3, [r2, #0]
		if(v2 > v1)
 800232c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002330:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8002334:	ed93 7a00 	vldr	s14, [r3]
 8002338:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800233c:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	dd61      	ble.n	8002412 <course_fixing_radius2speed+0x252>
		{
			if(accel_length >= pow(v2 - v1, 2))
 800234e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002352:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 8002356:	6818      	ldr	r0, [r3, #0]
 8002358:	f7fe f8f6 	bl	8000548 <__aeabi_f2d>
 800235c:	4604      	mov	r4, r0
 800235e:	460d      	mov	r5, r1
 8002360:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002364:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8002368:	ed93 7a00 	vldr	s14, [r3]
 800236c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002370:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	ee17 0a90 	vmov	r0, s15
 8002380:	f7fe f8e2 	bl	8000548 <__aeabi_f2d>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	ed9f 1b3f 	vldr	d1, [pc, #252]	; 8002488 <course_fixing_radius2speed+0x2c8>
 800238c:	ec43 2b10 	vmov	d0, r2, r3
 8002390:	f00c fe4c 	bl	800f02c <pow>
 8002394:	ec53 2b10 	vmov	r2, r3, d0
 8002398:	4620      	mov	r0, r4
 800239a:	4629      	mov	r1, r5
 800239c:	f7fe fbb2 	bl	8000b04 <__aeabi_dcmpge>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <course_fixing_radius2speed+0x1fc>
			{
				vref = v2;
 80023a6:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80023aa:	f103 0388 	add.w	r3, r3, #136	; 0x88
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80023b4:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e034      	b.n	8002426 <course_fixing_radius2speed+0x266>
			}
			else
			{
				vref = sqrt(accel_length) + v1;
 80023bc:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80023c0:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	f7fe f8bf 	bl	8000548 <__aeabi_f2d>
 80023ca:	4603      	mov	r3, r0
 80023cc:	460c      	mov	r4, r1
 80023ce:	ec44 3b10 	vmov	d0, r3, r4
 80023d2:	f00c ff9b 	bl	800f30c <sqrt>
 80023d6:	ec56 5b10 	vmov	r5, r6, d0
 80023da:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80023de:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	f7fe f8b0 	bl	8000548 <__aeabi_f2d>
 80023e8:	4603      	mov	r3, r0
 80023ea:	460c      	mov	r4, r1
 80023ec:	461a      	mov	r2, r3
 80023ee:	4623      	mov	r3, r4
 80023f0:	4628      	mov	r0, r5
 80023f2:	4631      	mov	r1, r6
 80023f4:	f7fd ff4a 	bl	800028c <__adddf3>
 80023f8:	4603      	mov	r3, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	4618      	mov	r0, r3
 80023fe:	4621      	mov	r1, r4
 8002400:	f7fe fbf2 	bl	8000be8 <__aeabi_d2f>
 8002404:	4603      	mov	r3, r0
 8002406:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800240a:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	e009      	b.n	8002426 <course_fixing_radius2speed+0x266>
			}
		}
		else
		{
			vref = v2;
 8002412:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002416:	f103 0388 	add.w	r3, r3, #136	; 0x88
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002420:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8002424:	6013      	str	r3, [r2, #0]
		}
		accel_glaph[index + 1] = vref;
 8002426:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800242a:	f103 0392 	add.w	r3, r3, #146	; 0x92
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8002436:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800243a:	3b74      	subs	r3, #116	; 0x74
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	4413      	add	r3, r2
 8002440:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002444:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 800244c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002450:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	3b01      	subs	r3, #1
 8002458:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800245c:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8002460:	8013      	strh	r3, [r2, #0]
 8002462:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002466:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f47f af2b 	bne.w	80022c8 <course_fixing_radius2speed+0x108>
		printf("course_fixing_radius2speed() > accel 加速グラフ\r\n");
		#endif
	}

	/* 減速方向でのこぎりグラフを作成する */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002472:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002476:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002480:	f102 02ae 	add.w	r2, r2, #174	; 0xae
 8002484:	8013      	strh	r3, [r2, #0]
 8002486:	e0ce      	b.n	8002626 <course_fixing_radius2speed+0x466>
 8002488:	00000000 	.word	0x00000000
 800248c:	40000000 	.word	0x40000000
 8002490:	20000818 	.word	0x20000818
 8002494:	41a00000 	.word	0x41a00000
 8002498:	20000424 	.word	0x20000424
 800249c:	3c23d70a 	.word	0x3c23d70a
	{
		uint16_t index;
		float v2, v3, vref;
		index = course_state_size;
 80024a0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024a4:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80024ae:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 80024b2:	8013      	strh	r3, [r2, #0]
		v3 = decel_glaph[index];
 80024b4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024b8:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80024c2:	3bb4      	subs	r3, #180	; 0xb4
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80024ce:	f102 0298 	add.w	r2, r2, #152	; 0x98
 80024d2:	6013      	str	r3, [r2, #0]
		v2 = coursedata.speed[index - 1];
 80024d4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024d8:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	3b01      	subs	r3, #1
 80024e0:	4a91      	ldr	r2, [pc, #580]	; (8002728 <course_fixing_radius2speed+0x568>)
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3304      	adds	r3, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80024ee:	f102 0294 	add.w	r2, r2, #148	; 0x94
 80024f2:	6013      	str	r3, [r2, #0]
		if(v2 > v3)
 80024f4:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80024f8:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80024fc:	ed93 7a00 	vldr	s14, [r3]
 8002500:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002504:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	dd61      	ble.n	80025da <course_fixing_radius2speed+0x41a>
		{
			if(accel_length >= pow(v3 - v2, 2))
 8002516:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800251a:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	f7fe f812 	bl	8000548 <__aeabi_f2d>
 8002524:	4604      	mov	r4, r0
 8002526:	460d      	mov	r5, r1
 8002528:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800252c:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8002530:	ed93 7a00 	vldr	s14, [r3]
 8002534:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002538:	f103 0394 	add.w	r3, r3, #148	; 0x94
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002544:	ee17 0a90 	vmov	r0, s15
 8002548:	f7fd fffe 	bl	8000548 <__aeabi_f2d>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	ed9f 1b73 	vldr	d1, [pc, #460]	; 8002720 <course_fixing_radius2speed+0x560>
 8002554:	ec43 2b10 	vmov	d0, r2, r3
 8002558:	f00c fd68 	bl	800f02c <pow>
 800255c:	ec53 2b10 	vmov	r2, r3, d0
 8002560:	4620      	mov	r0, r4
 8002562:	4629      	mov	r1, r5
 8002564:	f7fe face 	bl	8000b04 <__aeabi_dcmpge>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <course_fixing_radius2speed+0x3c4>
			{
				vref = v2;
 800256e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002572:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800257c:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e034      	b.n	80025ee <course_fixing_radius2speed+0x42e>
			}
			else
			{
				vref = sqrt(accel_length) + v3;
 8002584:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002588:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	f7fd ffdb 	bl	8000548 <__aeabi_f2d>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	ec44 3b10 	vmov	d0, r3, r4
 800259a:	f00c feb7 	bl	800f30c <sqrt>
 800259e:	ec56 5b10 	vmov	r5, r6, d0
 80025a2:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025a6:	f103 0398 	add.w	r3, r3, #152	; 0x98
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f7fd ffcc 	bl	8000548 <__aeabi_f2d>
 80025b0:	4603      	mov	r3, r0
 80025b2:	460c      	mov	r4, r1
 80025b4:	461a      	mov	r2, r3
 80025b6:	4623      	mov	r3, r4
 80025b8:	4628      	mov	r0, r5
 80025ba:	4631      	mov	r1, r6
 80025bc:	f7fd fe66 	bl	800028c <__adddf3>
 80025c0:	4603      	mov	r3, r0
 80025c2:	460c      	mov	r4, r1
 80025c4:	4618      	mov	r0, r3
 80025c6:	4621      	mov	r1, r4
 80025c8:	f7fe fb0e 	bl	8000be8 <__aeabi_d2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80025d2:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	e009      	b.n	80025ee <course_fixing_radius2speed+0x42e>
			}
		}
		else
		{
			vref = v2;
 80025da:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025de:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80025e8:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 80025ec:	6013      	str	r3, [r2, #0]
		}
		decel_glaph[index - 1] = vref;
 80025ee:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80025f2:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80025f6:	881b      	ldrh	r3, [r3, #0]
 80025f8:	1e5a      	subs	r2, r3, #1
 80025fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80025fe:	3bb4      	subs	r3, #180	; 0xb4
 8002600:	0092      	lsls	r2, r2, #2
 8002602:	4413      	add	r3, r2
 8002604:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002608:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002610:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002614:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	3b01      	subs	r3, #1
 800261c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002620:	f102 02ae 	add.w	r2, r2, #174	; 0xae
 8002624:	8013      	strh	r3, [r2, #0]
 8002626:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800262a:	f103 03ae 	add.w	r3, r3, #174	; 0xae
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f47f af35 	bne.w	80024a0 <course_fixing_radius2speed+0x2e0>
		printf("course_fixing_radius2speed() > decel 減速グラフ\r\n");
		#endif
	}

	/* 加速方向と減速方向で遅い方の速度を速度値として記憶させる */
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 8002636:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800263a:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002644:	f102 02a6 	add.w	r2, r2, #166	; 0xa6
 8002648:	8013      	strh	r3, [r2, #0]
 800264a:	e05c      	b.n	8002706 <course_fixing_radius2speed+0x546>
	{
		uint16_t index;
		index = imax - course_state_size;
 800264c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002650:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002654:	881a      	ldrh	r2, [r3, #0]
 8002656:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800265a:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002666:	f102 029e 	add.w	r2, r2, #158	; 0x9e
 800266a:	8013      	strh	r3, [r2, #0]
		coursedata.speed[index] = (accel_glaph[index] > decel_glaph[index]) ? decel_glaph[index] : accel_glaph[index];
 800266c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8002670:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 8002674:	881a      	ldrh	r2, [r3, #0]
 8002676:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 800267a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800267e:	3b74      	subs	r3, #116	; 0x74
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	4413      	add	r3, r2
 8002684:	ed93 7a00 	vldr	s14, [r3]
 8002688:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800268c:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002696:	3bb4      	subs	r3, #180	; 0xb4
 8002698:	0092      	lsls	r2, r2, #2
 800269a:	4413      	add	r3, r2
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a8:	dd0b      	ble.n	80026c2 <course_fixing_radius2speed+0x502>
 80026aa:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026ae:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 80026b2:	881a      	ldrh	r2, [r3, #0]
 80026b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80026b8:	3bb4      	subs	r3, #180	; 0xb4
 80026ba:	0092      	lsls	r2, r2, #2
 80026bc:	4413      	add	r3, r2
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	e00c      	b.n	80026dc <course_fixing_radius2speed+0x51c>
 80026c2:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026c6:	f103 039e 	add.w	r3, r3, #158	; 0x9e
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80026d0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80026d4:	3b74      	subs	r3, #116	; 0x74
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	4413      	add	r3, r2
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80026e0:	f102 029e 	add.w	r2, r2, #158	; 0x9e
 80026e4:	8812      	ldrh	r2, [r2, #0]
 80026e6:	4910      	ldr	r1, [pc, #64]	; (8002728 <course_fixing_radius2speed+0x568>)
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	440a      	add	r2, r1
 80026ec:	3204      	adds	r2, #4
 80026ee:	6013      	str	r3, [r2, #0]
	for(uint16_t course_state_size = imax; course_state_size > 0; course_state_size = course_state_size - 1)
 80026f0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80026f4:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8002700:	f102 02a6 	add.w	r2, r2, #166	; 0xa6
 8002704:	8013      	strh	r3, [r2, #0]
 8002706:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800270a:	f103 03a6 	add.w	r3, r3, #166	; 0xa6
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d19b      	bne.n	800264c <course_fixing_radius2speed+0x48c>
		#if D_COURSE
		printf("course_fixing_radius2speed() > speed 速度グラフ\r\n");
		printf("%4d, %7.3f, %7.3f\r\n", index, accel_glaph[index], decel_glaph[index]);
		#endif
	}
}
 8002714:	bf00      	nop
 8002716:	f507 473b 	add.w	r7, r7, #47872	; 0xbb00
 800271a:	37bc      	adds	r7, #188	; 0xbc
 800271c:	46bd      	mov	sp, r7
 800271e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002720:	00000000 	.word	0x00000000
 8002724:	40000000 	.word	0x40000000
 8002728:	20000818 	.word	0x20000818

0800272c <course_print_flash>:

void course_print_flash()
{
 800272c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002730:	b086      	sub	sp, #24
 8002732:	af02      	add	r7, sp, #8
	uint16_t course_state_size;
	course_state_size = COURSE_STATE_SIZE;
 8002734:	f241 7370 	movw	r3, #6000	; 0x1770
 8002738:	81fb      	strh	r3, [r7, #14]
	//! print flash contents
	while(switch_read_enter())
 800273a:	e071      	b.n	8002820 <course_print_flash+0xf4>
	{
		if(course_state_size > 0)
 800273c:	89fb      	ldrh	r3, [r7, #14]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d06a      	beq.n	8002818 <course_print_flash+0xec>
		{
			uint16_t index;
			float print_data_a, print_data_b;
			index = COURSE_STATE_SIZE - course_state_size;
 8002742:	89fb      	ldrh	r3, [r7, #14]
 8002744:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 8002748:	3310      	adds	r3, #16
 800274a:	807b      	strh	r3, [r7, #2]
			switch(rotary_read_value())
 800274c:	f7fe ff04 	bl	8001558 <rotary_read_value>
 8002750:	4603      	mov	r3, r0
 8002752:	3b0c      	subs	r3, #12
 8002754:	2b03      	cmp	r3, #3
 8002756:	d844      	bhi.n	80027e2 <course_print_flash+0xb6>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <course_print_flash+0x34>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	080027bf 	.word	0x080027bf
 8002764:	0800279f 	.word	0x0800279f
 8002768:	08002795 	.word	0x08002795
 800276c:	08002771 	.word	0x08002771
			{
				case 15:
					//! CourseData
					print_data_a = coursedata.speed[index];
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	4a30      	ldr	r2, [pc, #192]	; (8002834 <course_print_flash+0x108>)
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3304      	adds	r3, #4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60bb      	str	r3, [r7, #8]
					print_data_b = coursedata.radius[index];
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <course_print_flash+0x108>)
 8002782:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002786:	3310      	adds	r3, #16
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	607b      	str	r3, [r7, #4]
					break;
 8002792:	e027      	b.n	80027e4 <course_print_flash+0xb8>
				case 14:
					//! ImuData
					print_data_a = 9.999f;
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <course_print_flash+0x10c>)
 8002796:	60bb      	str	r3, [r7, #8]
					print_data_b = 8.888f;
 8002798:	4b28      	ldr	r3, [pc, #160]	; (800283c <course_print_flash+0x110>)
 800279a:	607b      	str	r3, [r7, #4]
					break;
 800279c:	e022      	b.n	80027e4 <course_print_flash+0xb8>
				case 13:
					//! EncoderData
					print_data_a = encoderdata.left[index];
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	4a27      	ldr	r2, [pc, #156]	; (8002840 <course_print_flash+0x114>)
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60bb      	str	r3, [r7, #8]
					print_data_b = encoderdata.right[index];
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <course_print_flash+0x114>)
 80027ae:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80027b2:	3310      	adds	r3, #16
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	607b      	str	r3, [r7, #4]
					break;
 80027bc:	e012      	b.n	80027e4 <course_print_flash+0xb8>
				case 12:
					//! CourseData
					print_data_a = coursedata.marker[index];
 80027be:	887b      	ldrh	r3, [r7, #2]
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <course_print_flash+0x108>)
 80027c2:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80027c6:	3320      	adds	r3, #32
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	3304      	adds	r3, #4
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60bb      	str	r3, [r7, #8]
					print_data_a = coursedata.course_state_count_max;
 80027d2:	4b18      	ldr	r3, [pc, #96]	; (8002834 <course_print_flash+0x108>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	edc7 7a02 	vstr	s15, [r7, #8]
				default :
					break;
 80027e2:	bf00      	nop
			}
			printf("%6d, %8lf, %8lf\r\n", index, print_data_a, print_data_b);
 80027e4:	887d      	ldrh	r5, [r7, #2]
 80027e6:	68b8      	ldr	r0, [r7, #8]
 80027e8:	f7fd feae 	bl	8000548 <__aeabi_f2d>
 80027ec:	4680      	mov	r8, r0
 80027ee:	4689      	mov	r9, r1
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fd fea9 	bl	8000548 <__aeabi_f2d>
 80027f6:	4603      	mov	r3, r0
 80027f8:	460c      	mov	r4, r1
 80027fa:	e9cd 3400 	strd	r3, r4, [sp]
 80027fe:	4642      	mov	r2, r8
 8002800:	464b      	mov	r3, r9
 8002802:	4629      	mov	r1, r5
 8002804:	480f      	ldr	r0, [pc, #60]	; (8002844 <course_print_flash+0x118>)
 8002806:	f009 f81b 	bl	800b840 <iprintf>
			course_state_size = course_state_size - 1;
 800280a:	89fb      	ldrh	r3, [r7, #14]
 800280c:	3b01      	subs	r3, #1
 800280e:	81fb      	strh	r3, [r7, #14]
			HAL_Delay(100);
 8002810:	2064      	movs	r0, #100	; 0x64
 8002812:	f003 fbd3 	bl	8005fbc <HAL_Delay>
 8002816:	e003      	b.n	8002820 <course_print_flash+0xf4>
		}
		else
		{
			HAL_Delay(1000);
 8002818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800281c:	f003 fbce 	bl	8005fbc <HAL_Delay>
	while(switch_read_enter())
 8002820:	f7fe ff88 	bl	8001734 <switch_read_enter>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d188      	bne.n	800273c <course_print_flash+0x10>
		}
	}
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002834:	20000818 	.word	0x20000818
 8002838:	411ffbe7 	.word	0x411ffbe7
 800283c:	410e353f 	.word	0x410e353f
 8002840:	200121b4 	.word	0x200121b4
 8002844:	080103f8 	.word	0x080103f8

08002848 <course_reset_flash>:

void course_reset_flash()
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 800284e:	f241 7370 	movw	r3, #6000	; 0x1770
 8002852:	80fb      	strh	r3, [r7, #6]
 8002854:	e027      	b.n	80028a6 <course_reset_flash+0x5e>
	{
		uint16_t index;
		index = COURSE_STATE_SIZE - course_state_size;
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 800285c:	3310      	adds	r3, #16
 800285e:	80bb      	strh	r3, [r7, #4]
		coursedata.speed[index] = COURSE_SPEED_DEFAULT;
 8002860:	88bb      	ldrh	r3, [r7, #4]
 8002862:	4a15      	ldr	r2, [pc, #84]	; (80028b8 <course_reset_flash+0x70>)
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	4a14      	ldr	r2, [pc, #80]	; (80028bc <course_reset_flash+0x74>)
 800286c:	601a      	str	r2, [r3, #0]
		coursedata.radius[index] = COURSE_RADIUS_DEFAULT;
 800286e:	88bb      	ldrh	r3, [r7, #4]
 8002870:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <course_reset_flash+0x70>)
 8002872:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002876:	3310      	adds	r3, #16
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3304      	adds	r3, #4
 800287e:	4a10      	ldr	r2, [pc, #64]	; (80028c0 <course_reset_flash+0x78>)
 8002880:	601a      	str	r2, [r3, #0]
		encoderdata.left[index] = 8.888f;
 8002882:	88bb      	ldrh	r3, [r7, #4]
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <course_reset_flash+0x7c>)
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	4a0f      	ldr	r2, [pc, #60]	; (80028c8 <course_reset_flash+0x80>)
 800288c:	601a      	str	r2, [r3, #0]
		encoderdata.right[index] = 7.777f;
 800288e:	88bb      	ldrh	r3, [r7, #4]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <course_reset_flash+0x7c>)
 8002892:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8002896:	3310      	adds	r3, #16
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	4a0b      	ldr	r2, [pc, #44]	; (80028cc <course_reset_flash+0x84>)
 800289e:	601a      	str	r2, [r3, #0]
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	80fb      	strh	r3, [r7, #6]
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1d4      	bne.n	8002856 <course_reset_flash+0xe>
	}
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	20000818 	.word	0x20000818
 80028bc:	3f7fbe77 	.word	0x3f7fbe77
 80028c0:	411fd70a 	.word	0x411fd70a
 80028c4:	200121b4 	.word	0x200121b4
 80028c8:	410e353f 	.word	0x410e353f
 80028cc:	40f8dd2f 	.word	0x40f8dd2f

080028d0 <accel_max_calc>:

float accel_max_calc(uint8_t i)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	return ACCEL_MAX_MAX - ((ACCEL_STEP_SIZE - 1) - i) * (float) (ACCEL_MAX_MAX - ACCEL_MAX_MIN) / (float) (ACCEL_STEP_SIZE - 1);
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	f1c3 030f 	rsb	r3, r3, #15
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002910 <accel_max_calc+0x40>
 80028ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80028f0:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80028f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002914 <accel_max_calc+0x44>
 80028fc:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002900:	eeb0 0a67 	vmov.f32	s0, s15
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	3e428f5c 	.word	0x3e428f5c
 8002914:	3e4ccccd 	.word	0x3e4ccccd

08002918 <course_data_saving>:

void course_data_saving()
{
 8002918:	b598      	push	{r3, r4, r7, lr}
 800291a:	af00      	add	r7, sp, #0
	encoderdata.left[course_state_count] = section_length_read_left();
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <course_data_saving+0x40>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	461c      	mov	r4, r3
 8002922:	f001 fc0f 	bl	8004144 <section_length_read_left>
 8002926:	eef0 7a40 	vmov.f32	s15, s0
 800292a:	4a0c      	ldr	r2, [pc, #48]	; (800295c <course_data_saving+0x44>)
 800292c:	00a3      	lsls	r3, r4, #2
 800292e:	4413      	add	r3, r2
 8002930:	edc3 7a00 	vstr	s15, [r3]
	encoderdata.right[course_state_count] = section_length_read_right();
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <course_data_saving+0x40>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	461c      	mov	r4, r3
 800293a:	f001 fc11 	bl	8004160 <section_length_read_right>
 800293e:	eef0 7a40 	vmov.f32	s15, s0
 8002942:	4a06      	ldr	r2, [pc, #24]	; (800295c <course_data_saving+0x44>)
 8002944:	f504 53bb 	add.w	r3, r4, #5984	; 0x1760
 8002948:	3310      	adds	r3, #16
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	edc3 7a00 	vstr	s15, [r3]
}
 8002952:	bf00      	nop
 8002954:	bd98      	pop	{r3, r4, r7, pc}
 8002956:	bf00      	nop
 8002958:	20000428 	.word	0x20000428
 800295c:	200121b4 	.word	0x200121b4

08002960 <encoder_length_left>:
    //! 単位は [ um ]
    return (float) encoder * (float) LENGTHPERPULSE;
}

float encoder_length_left()
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_left() > ");
    printf("encoder_left * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_left, LENGTHPERPULSE, encoder_left * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_left * (float) LENGTHPERPULSE;
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <encoder_length_left+0x28>)
 8002966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002972:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800298c <encoder_length_left+0x2c>
 8002976:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800297a:	eeb0 0a67 	vmov.f32	s0, s15
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	2000080c 	.word	0x2000080c
 800298c:	41076bf7 	.word	0x41076bf7

08002990 <encoder_length_right>:

float encoder_length_right()
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_right() > ");
    printf("encoder_right * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_right, LENGTHPERPULSE, encoder_right * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_right * (float) LENGTHPERPULSE;
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <encoder_length_right+0x28>)
 8002996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80029bc <encoder_length_right+0x2c>
 80029a6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80029aa:	eeb0 0a67 	vmov.f32	s0, s15
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000814 	.word	0x20000814
 80029bc:	41076bf7 	.word	0x41076bf7

080029c0 <encoder_d_print>:

void encoder_d_print()
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("encoder.c > encoder_left = %5d, encoder_left = %5d, encoder = %f\r\n", encoder_left, encoder_right, encoder);
    #endif
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <encoder_set>:

/* only read tim10_update_values */
void encoder_set()
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <encoder_set+0x58>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <encoder_set+0x5c>)
 80029e4:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 80029e6:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <encoder_set+0x60>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	b21a      	sxth	r2, r3
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <encoder_set+0x64>)
 80029f6:	801a      	strh	r2, [r3, #0]
    //! 単位 [ cnt / sampling_time_s ]
    encoder = (encoder_left + encoder_right) / (float) 2;
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <encoder_set+0x5c>)
 80029fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <encoder_set+0x64>)
 8002a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a06:	4413      	add	r3, r2
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <encoder_set+0x68>)
 8002a1a:	edc3 7a00 	vstr	s15, [r3]
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set() > ");
    printf("encoder_left = %6d, encoder_right = %6d, encoder = %6.1f\r\n", encoder_left, encoder_right, encoder);
    #endif

    encoder_set_middle();
 8002a1e:	f000 f84d 	bl	8002abc <encoder_set_middle>
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	2000080c 	.word	0x2000080c
 8002a30:	40000400 	.word	0x40000400
 8002a34:	20000814 	.word	0x20000814
 8002a38:	20000810 	.word	0x20000810

08002a3c <encoder_init>:

void encoder_init()
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
    #endif
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
    encoder_left = 0;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <encoder_start+0x38>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 8002a56:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <encoder_start+0x3c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <encoder_start+0x40>)
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

    encoder_set_middle();
 8002a64:	f000 f82a 	bl	8002abc <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8002a68:	213c      	movs	r1, #60	; 0x3c
 8002a6a:	4809      	ldr	r0, [pc, #36]	; (8002a90 <encoder_start+0x44>)
 8002a6c:	f006 ff38 	bl	80098e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002a70:	213c      	movs	r1, #60	; 0x3c
 8002a72:	4808      	ldr	r0, [pc, #32]	; (8002a94 <encoder_start+0x48>)
 8002a74:	f006 ff34 	bl	80098e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 8002a78:	4807      	ldr	r0, [pc, #28]	; (8002a98 <encoder_start+0x4c>)
 8002a7a:	f006 fc65 	bl	8009348 <HAL_TIM_Base_Start_IT>
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2000080c 	.word	0x2000080c
 8002a88:	20000814 	.word	0x20000814
 8002a8c:	20000810 	.word	0x20000810
 8002a90:	200006f0 	.word	0x200006f0
 8002a94:	20000570 	.word	0x20000570
 8002a98:	20000528 	.word	0x20000528

08002a9c <encoder_stop>:

void encoder_stop()
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8002aa0:	213c      	movs	r1, #60	; 0x3c
 8002aa2:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <encoder_stop+0x18>)
 8002aa4:	f006 ffaa 	bl	80099fc <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8002aa8:	213c      	movs	r1, #60	; 0x3c
 8002aaa:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <encoder_stop+0x1c>)
 8002aac:	f006 ffa6 	bl	80099fc <HAL_TIM_Encoder_Stop>
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200006f0 	.word	0x200006f0
 8002ab8:	20000570 	.word	0x20000570

08002abc <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <encoder_set_middle+0x20>)
 8002ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <encoder_set_middle+0x24>)
 8002aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set_middle() > ");
    printf("TIM1 -> CNT = %6lu, TIM3 -> CNT = %6lu\r\n", TIM1->CNT, TIM3->CNT);
    #endif
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40000400 	.word	0x40000400

08002ae4 <fixed_section_start>:
 */

#include "fixed_section.h"

void fixed_section_start()
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
	//! 作っとく
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <fixed_section_main>:
 * @brief 一定距離ごとに course_state_function() を呼び出す関数
 * @attention
 * 
 */
void fixed_section_main()
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
    float fixed_length;
    //! 現在点の区間長を取得
    fixed_length = section_length_read();
 8002afa:	f001 fb09 	bl	8004110 <section_length_read>
 8002afe:	ed87 0a01 	vstr	s0, [r7, #4]
    if(fixed_length >= COURSE_SAMPLING_LENGTH)
 8002b02:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b06:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002b24 <fixed_section_main+0x30>
 8002b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	da00      	bge.n	8002b16 <fixed_section_main+0x22>
    {
        //! 現在点の区間長が閾値を超えた時
        course_state_function();
    }
}
 8002b14:	e001      	b.n	8002b1a <fixed_section_main+0x26>
        course_state_function();
 8002b16:	f7ff fa77 	bl	8002008 <course_state_function>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	3c23d70a 	.word	0x3c23d70a

08002b28 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(uint32_t sector_num)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
	erase.Sector = sector_num;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	617b      	str	r3, [r7, #20]
	erase.NbSectors = 1;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	61bb      	str	r3, [r7, #24]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	61fb      	str	r3, [r7, #28]
	uint32_t pageError = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]

	HAL_FLASHEx_Erase(&erase, &pageError);
 8002b44:	f107 0208 	add.w	r2, r7, #8
 8002b48:	f107 030c 	add.w	r3, r7, #12
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 fd5c 	bl	800760c <HAL_FLASHEx_Erase>
}
 8002b54:	bf00      	nop
 8002b56:	3720      	adds	r7, #32
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
	for (uint32_t add = address; add < (address + size); add++)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	e010      	b.n	8002b90 <flash_writting+0x34>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f04f 0400 	mov.w	r4, #0
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	6979      	ldr	r1, [r7, #20]
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f004 fb90 	bl	80072a4 <HAL_FLASH_Program>
		data++;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	3301      	adds	r3, #1
 8002b88:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4413      	add	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d3e8      	bcc.n	8002b6e <flash_writting+0x12>
	}
}
 8002b9c:	bf00      	nop
 8002b9e:	371c      	adds	r7, #28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd90      	pop	{r4, r7, pc}

08002ba4 <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	68b8      	ldr	r0, [r7, #8]
 8002bb8:	f007 fff0 	bl	800ab9c <memcpy>
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <flash_write>:

/* FLASH_SECTOR_num を渡すとそのセクタに対応する構造体のデータを書き込んでくれる関数 */
void flash_write(unsigned sector_num)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8002bcc:	f004 fbbe 	bl	800734c <HAL_FLASH_Unlock>
	flash_erase(sector_num);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ffa9 	bl	8002b28 <flash_erase>

	if(sector_num == FLASH_SECTOR_8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d104      	bne.n	8002be6 <flash_write+0x22>
	{
		flash_writting(FLASH_SECTOR_8_START_ADDRESS, (uint8_t *) &analogdata, sizeof(AnalogData));
 8002bdc:	2240      	movs	r2, #64	; 0x40
 8002bde:	4911      	ldr	r1, [pc, #68]	; (8002c24 <flash_write+0x60>)
 8002be0:	4811      	ldr	r0, [pc, #68]	; (8002c28 <flash_write+0x64>)
 8002be2:	f7ff ffbb 	bl	8002b5c <flash_writting>
	}

	if(sector_num == FLASH_SECTOR_9)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	d105      	bne.n	8002bf8 <flash_write+0x34>
	{
		flash_writting(FLASH_SECTOR_9_START_ADDRESS, (uint8_t *) &encoderdata, sizeof(EncoderData));
 8002bec:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002bf0:	490e      	ldr	r1, [pc, #56]	; (8002c2c <flash_write+0x68>)
 8002bf2:	480f      	ldr	r0, [pc, #60]	; (8002c30 <flash_write+0x6c>)
 8002bf4:	f7ff ffb2 	bl	8002b5c <flash_writting>
	}

	if(sector_num == FLASH_SECTOR_10)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b0a      	cmp	r3, #10
 8002bfc:	d104      	bne.n	8002c08 <flash_write+0x44>
	{
		flash_writting(FLASH_SECTOR_10_START_ADDRESS, (uint8_t *) &imudata, sizeof(ImuData));
 8002bfe:	2218      	movs	r2, #24
 8002c00:	490c      	ldr	r1, [pc, #48]	; (8002c34 <flash_write+0x70>)
 8002c02:	480d      	ldr	r0, [pc, #52]	; (8002c38 <flash_write+0x74>)
 8002c04:	f7ff ffaa 	bl	8002b5c <flash_writting>
	}

	if(sector_num == FLASH_SECTOR_11)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b0b      	cmp	r3, #11
 8002c0c:	d104      	bne.n	8002c18 <flash_write+0x54>
	{
		flash_writting(FLASH_SECTOR_11_START_ADDRESS, (uint8_t *) &coursedata, sizeof(CourseData));
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <flash_write+0x78>)
 8002c10:	490b      	ldr	r1, [pc, #44]	; (8002c40 <flash_write+0x7c>)
 8002c12:	480c      	ldr	r0, [pc, #48]	; (8002c44 <flash_write+0x80>)
 8002c14:	f7ff ffa2 	bl	8002b5c <flash_writting>
	}

	HAL_FLASH_Lock();
 8002c18:	f004 fbba 	bl	8007390 <HAL_FLASH_Lock>
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20012174 	.word	0x20012174
 8002c28:	08080000 	.word	0x08080000
 8002c2c:	200121b4 	.word	0x200121b4
 8002c30:	080a0000 	.word	0x080a0000
 8002c34:	2001215c 	.word	0x2001215c
 8002c38:	080c0000 	.word	0x080c0000
 8002c3c:	00011944 	.word	0x00011944
 8002c40:	20000818 	.word	0x20000818
 8002c44:	080e0000 	.word	0x080e0000

08002c48 <flash_read>:

/* FLASH_SECTOR_num を渡すとそのセクタに対応する構造体のデータを読み取ってくれる関数 */
void flash_read(unsigned sector_num)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	//! AnalogData : Sector8
	if(sector_num == FLASH_SECTOR_8)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d104      	bne.n	8002c60 <flash_read+0x18>
	{
		flash_reading(FLASH_SECTOR_8_START_ADDRESS, (uint8_t *) &analogdata, sizeof(AnalogData));
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	4910      	ldr	r1, [pc, #64]	; (8002c9c <flash_read+0x54>)
 8002c5a:	4811      	ldr	r0, [pc, #68]	; (8002ca0 <flash_read+0x58>)
 8002c5c:	f7ff ffa2 	bl	8002ba4 <flash_reading>
	}

	//! EncoderData : Sector9
	if(sector_num == FLASH_SECTOR_9)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b09      	cmp	r3, #9
 8002c64:	d105      	bne.n	8002c72 <flash_read+0x2a>
	{
		flash_reading(FLASH_SECTOR_9_START_ADDRESS, (uint8_t *) &encoderdata, sizeof(EncoderData));
 8002c66:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002c6a:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <flash_read+0x5c>)
 8002c6c:	480e      	ldr	r0, [pc, #56]	; (8002ca8 <flash_read+0x60>)
 8002c6e:	f7ff ff99 	bl	8002ba4 <flash_reading>
	}

	//! ImuData : Sector10
	if(sector_num == FLASH_SECTOR_10)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b0a      	cmp	r3, #10
 8002c76:	d104      	bne.n	8002c82 <flash_read+0x3a>
	{
		flash_reading(FLASH_SECTOR_10_START_ADDRESS, (uint8_t *) &imudata, sizeof(ImuData));
 8002c78:	2218      	movs	r2, #24
 8002c7a:	490c      	ldr	r1, [pc, #48]	; (8002cac <flash_read+0x64>)
 8002c7c:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <flash_read+0x68>)
 8002c7e:	f7ff ff91 	bl	8002ba4 <flash_reading>
	}

	//! CourseData : Sector11
	if(sector_num == FLASH_SECTOR_11)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b0b      	cmp	r3, #11
 8002c86:	d104      	bne.n	8002c92 <flash_read+0x4a>
	{
		flash_reading(FLASH_SECTOR_11_START_ADDRESS, (uint8_t *) &coursedata, sizeof(CourseData));
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <flash_read+0x6c>)
 8002c8a:	490b      	ldr	r1, [pc, #44]	; (8002cb8 <flash_read+0x70>)
 8002c8c:	480b      	ldr	r0, [pc, #44]	; (8002cbc <flash_read+0x74>)
 8002c8e:	f7ff ff89 	bl	8002ba4 <flash_reading>
	}
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20012174 	.word	0x20012174
 8002ca0:	08080000 	.word	0x08080000
 8002ca4:	200121b4 	.word	0x200121b4
 8002ca8:	080a0000 	.word	0x080a0000
 8002cac:	2001215c 	.word	0x2001215c
 8002cb0:	080c0000 	.word	0x080c0000
 8002cb4:	00011944 	.word	0x00011944
 8002cb8:	20000818 	.word	0x20000818
 8002cbc:	080e0000 	.word	0x080e0000

08002cc0 <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	flash_read_all();
 8002cc4:	f000 f802 	bl	8002ccc <flash_read_all>
}
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <flash_read_all>:

void flash_read_all()
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
	flash_read(FLASH_SECTOR_8);
 8002cd0:	2008      	movs	r0, #8
 8002cd2:	f7ff ffb9 	bl	8002c48 <flash_read>
	flash_read(FLASH_SECTOR_9);
 8002cd6:	2009      	movs	r0, #9
 8002cd8:	f7ff ffb6 	bl	8002c48 <flash_read>
	flash_read(FLASH_SECTOR_10);
 8002cdc:	200a      	movs	r0, #10
 8002cde:	f7ff ffb3 	bl	8002c48 <flash_read>
	flash_read(FLASH_SECTOR_11);
 8002ce2:	200b      	movs	r0, #11
 8002ce4:	f7ff ffb0 	bl	8002c48 <flash_read>
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}

08002cec <low_pass_filter>:
 8002cec:	b5b0      	push	{r4, r5, r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	ed87 0b04 	vstr	d0, [r7, #16]
 8002cf6:	ed87 1b02 	vstr	d1, [r7, #8]
 8002cfa:	ed87 2b00 	vstr	d2, [r7]
 8002cfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d06:	f7fd fc77 	bl	80005f8 <__aeabi_dmul>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4614      	mov	r4, r2
 8002d10:	461d      	mov	r5, r3
 8002d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d16:	f04f 0000 	mov.w	r0, #0
 8002d1a:	490e      	ldr	r1, [pc, #56]	; (8002d54 <low_pass_filter+0x68>)
 8002d1c:	f7fd fab4 	bl	8000288 <__aeabi_dsub>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d2c:	f7fd fc64 	bl	80005f8 <__aeabi_dmul>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4620      	mov	r0, r4
 8002d36:	4629      	mov	r1, r5
 8002d38:	f7fd faa8 	bl	800028c <__adddf3>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	ec43 2b17 	vmov	d7, r2, r3
 8002d44:	eeb0 0a47 	vmov.f32	s0, s14
 8002d48:	eef0 0a67 	vmov.f32	s1, s15
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bdb0      	pop	{r4, r5, r7, pc}
 8002d52:	bf00      	nop
 8002d54:	3ff00000 	.word	0x3ff00000

08002d58 <vector3_creation>:
 8002d58:	b480      	push	{r7}
 8002d5a:	b08f      	sub	sp, #60	; 0x3c
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002d62:	edc7 0a06 	vstr	s1, [r7, #24]
 8002d66:	ed87 1a05 	vstr	s2, [r7, #20]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	623b      	str	r3, [r7, #32]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d7a:	f107 0220 	add.w	r2, r7, #32
 8002d7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002d84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8a:	ee06 1a90 	vmov	s13, r1
 8002d8e:	ee07 2a10 	vmov	s14, r2
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eeb0 0a66 	vmov.f32	s0, s13
 8002d9a:	eef0 0a47 	vmov.f32	s1, s14
 8002d9e:	eeb0 1a67 	vmov.f32	s2, s15
 8002da2:	373c      	adds	r7, #60	; 0x3c
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <length_set_sampling_time_ms>:
float velocity_left, velocity_right;
float length_update_sampling_time_s;
uint8_t length_started;

void length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
    length_update_sampling_time_s = samplingtime_ms / (float) 1000;
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	ee07 3a90 	vmov	s15, r3
 8002dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc0:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002ddc <length_set_sampling_time_ms+0x30>
 8002dc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <length_set_sampling_time_ms+0x34>)
 8002dca:	edc3 7a00 	vstr	s15, [r3]
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	447a0000 	.word	0x447a0000
 8002de0:	2001dd34 	.word	0x2001dd34

08002de4 <length_init>:

void length_init(unsigned short int samplingtime_ms)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
    length_started = 0;
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <length_init+0x24>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
    length_set_sampling_time_ms(samplingtime_ms);
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ffd8 	bl	8002dac <length_set_sampling_time_ms>
    encoder_init();
 8002dfc:	f7ff fe1e 	bl	8002a3c <encoder_init>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	2001dd3c 	.word	0x2001dd3c

08002e0c <length_start>:

void length_start()
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
    if(0 >= length_started)
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <length_start+0x20>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d103      	bne.n	8002e20 <length_start+0x14>
    {
        length_reset();
 8002e18:	f000 f816 	bl	8002e48 <length_reset>
        encoder_start();
 8002e1c:	f7ff fe16 	bl	8002a4c <encoder_start>
    }
    length_started = 1;
 8002e20:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <length_start+0x20>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2001dd3c 	.word	0x2001dd3c

08002e30 <length_stop>:

void length_stop()
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
    encoder_stop();
 8002e34:	f7ff fe32 	bl	8002a9c <encoder_stop>
    length_started = 0;
 8002e38:	4b02      	ldr	r3, [pc, #8]	; (8002e44 <length_stop+0x14>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	2001dd3c 	.word	0x2001dd3c

08002e48 <length_reset>:
{
    encoder_fin();
}

void length_reset()
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
    length_left = 0;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <length_reset+0x20>)
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
    length_right = 0;
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <length_reset+0x24>)
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	2001dd38 	.word	0x2001dd38
 8002e6c:	2001dd48 	.word	0x2001dd48

08002e70 <length_read>:

float length_read()
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	ed2d 8b02 	vpush	{d8}
 8002e76:	af00      	add	r7, sp, #0
    return (length_read_left() + length_read_right()) / 2;
 8002e78:	f000 f814 	bl	8002ea4 <length_read_left>
 8002e7c:	eeb0 8a40 	vmov.f32	s16, s0
 8002e80:	f000 f81e 	bl	8002ec0 <length_read_right>
 8002e84:	eef0 7a40 	vmov.f32	s15, s0
 8002e88:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002e8c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002e90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e94:	eef0 7a66 	vmov.f32	s15, s13
}
 8002e98:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	ecbd 8b02 	vpop	{d8}
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <length_read_left>:

float length_read_left()
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
    return length_left;
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <length_read_left+0x18>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	ee07 3a90 	vmov	s15, r3
}
 8002eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	2001dd38 	.word	0x2001dd38

08002ec0 <length_read_right>:

float length_read_right()
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
    return length_right;
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <length_read_right+0x18>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	ee07 3a90 	vmov	s15, r3
}
 8002ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	2001dd48 	.word	0x2001dd48

08002edc <velocity_read>:

float velocity_read()
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	ed2d 8b02 	vpush	{d8}
 8002ee2:	af00      	add	r7, sp, #0
    return (velocity_read_left() + velocity_read_right()) / 2;
 8002ee4:	f000 f814 	bl	8002f10 <velocity_read_left>
 8002ee8:	eeb0 8a40 	vmov.f32	s16, s0
 8002eec:	f000 f81e 	bl	8002f2c <velocity_read_right>
 8002ef0:	eef0 7a40 	vmov.f32	s15, s0
 8002ef4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002ef8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002efc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f00:	eef0 7a66 	vmov.f32	s15, s13
}
 8002f04:	eeb0 0a67 	vmov.f32	s0, s15
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	ecbd 8b02 	vpop	{d8}
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <velocity_read_left>:

float velocity_read_left()
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
    return velocity_left;
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <velocity_read_left+0x18>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	ee07 3a90 	vmov	s15, r3
}
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	2001dd44 	.word	0x2001dd44

08002f2c <velocity_read_right>:

float velocity_read_right()
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
    return velocity_right;
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <velocity_read_right+0x18>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	ee07 3a90 	vmov	s15, r3
}
 8002f38:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	2001dd40 	.word	0x2001dd40

08002f48 <length_update>:

//! エンコーダの値を読み、速度と距離を計算する
void length_update()
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
    float encoder_left, encoder_right;
    float sampling_time_s;
    sampling_time_s = length_update_sampling_time_s;
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <length_update+0x88>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60fb      	str	r3, [r7, #12]
    //! エンコーダの値を読み、中央値に戻す
    encoder_set();
 8002f54:	f7ff fd3c 	bl	80029d0 <encoder_set>
    encoder_left = encoder_length_left();
 8002f58:	f7ff fd02 	bl	8002960 <encoder_length_left>
 8002f5c:	ed87 0a02 	vstr	s0, [r7, #8]
    encoder_right = encoder_length_right();
 8002f60:	f7ff fd16 	bl	8002990 <encoder_length_right>
 8002f64:	ed87 0a01 	vstr	s0, [r7, #4]
    velocity_left = encoder_left * sampling_time_s;
 8002f68:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <length_update+0x8c>)
 8002f76:	edc3 7a00 	vstr	s15, [r3]
    velocity_right = encoder_right * sampling_time_s;
 8002f7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <length_update+0x90>)
 8002f88:	edc3 7a00 	vstr	s15, [r3]
    length_left += velocity_left * sampling_time_s;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <length_update+0x8c>)
 8002f8e:	ed93 7a00 	vldr	s14, [r3]
 8002f92:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <length_update+0x94>)
 8002f9c:	edd3 7a00 	vldr	s15, [r3]
 8002fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <length_update+0x94>)
 8002fa6:	edc3 7a00 	vstr	s15, [r3]
    length_right += velocity_right * sampling_time_s;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <length_update+0x90>)
 8002fac:	ed93 7a00 	vldr	s14, [r3]
 8002fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <length_update+0x98>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <length_update+0x98>)
 8002fc4:	edc3 7a00 	vstr	s15, [r3]
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	2001dd34 	.word	0x2001dd34
 8002fd4:	2001dd44 	.word	0x2001dd44
 8002fd8:	2001dd40 	.word	0x2001dd40
 8002fdc:	2001dd38 	.word	0x2001dd38
 8002fe0:	2001dd48 	.word	0x2001dd48

08002fe4 <length_d_print>:

void length_d_print()
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
    #if D_LENGTH
    printf("length = %10.2f, sampling_time_s = %8.6f\r\n", length_read(), length_update_sampling_time_s);
    //! printf("velocity = %10.2f\r\n", velocity_read());
    #endif
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
	...

08002ff4 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a0e      	ldr	r2, [pc, #56]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		#if !D_TIM6_WHILE
		tim6_main();
 8003006:	f002 f827 	bl	8005058 <tim6_main>
		#endif
	}

	if(htim->Instance == TIM10)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d101      	bne.n	8003018 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		#if !D_TIM7_WHILE
		tim7_main();
 8003014:	f002 f924 	bl	8005260 <tim7_main>
		#endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a08      	ldr	r2, [pc, #32]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    #if !D_TIM10_WHILE
		tim10_main();
 8003022:	f001 ff53 	bl	8004ecc <tim10_main>
    #endif
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a06      	ldr	r2, [pc, #24]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d101      	bne.n	8003034 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim11_main();
 8003030:	f001 ffc4 	bl	8004fbc <tim11_main>
	}
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40001000 	.word	0x40001000
 8003040:	40014400 	.word	0x40014400
 8003044:	40014800 	.word	0x40014800

08003048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800304c:	f002 ff44 	bl	8005ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003050:	f000 f964 	bl	800331c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003054:	f000 fd86 	bl	8003b64 <MX_GPIO_Init>
  MX_DMA_Init();
 8003058:	f000 fd64 	bl	8003b24 <MX_DMA_Init>
  MX_ADC1_Init();
 800305c:	f000 f9c8 	bl	80033f0 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8003060:	f000 fd36 	bl	8003ad0 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 8003064:	f000 fc5c 	bl	8003920 <MX_TIM6_Init>
  MX_TIM4_Init();
 8003068:	f000 fbf6 	bl	8003858 <MX_TIM4_Init>
  MX_TIM1_Init();
 800306c:	f000 fb48 	bl	8003700 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003070:	f000 fb9e 	bl	80037b0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003074:	f000 fcc0 	bl	80039f8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003078:	f000 fce2 	bl	8003a40 <MX_TIM11_Init>
  MX_SPI2_Init();
 800307c:	f000 fb0a 	bl	8003694 <MX_SPI2_Init>
  MX_I2C1_Init();
 8003080:	f000 fada 	bl	8003638 <MX_I2C1_Init>
  MX_TIM14_Init();
 8003084:	f000 fd00 	bl	8003a88 <MX_TIM14_Init>
  MX_TIM7_Init();
 8003088:	f000 fc80 	bl	800398c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 800308c:	48a1      	ldr	r0, [pc, #644]	; (8003314 <main+0x2cc>)
 800308e:	f008 fbd7 	bl	800b840 <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 8003092:	48a1      	ldr	r0, [pc, #644]	; (8003318 <main+0x2d0>)
 8003094:	f008 fc48 	bl	800b928 <puts>

  main_init();
 8003098:	f000 fe4e 	bl	8003d38 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 800309c:	f000 fe9a 	bl	8003dd4 <main_print_while>

		if(switch_read_enter())
 80030a0:	f7fe fb48 	bl	8001734 <switch_read_enter>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 812c 	beq.w	8003304 <main+0x2bc>
		{
			switch(rotary_read())
 80030ac:	f7fe fa60 	bl	8001570 <rotary_read>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	f200 8128 	bhi.w	8003308 <main+0x2c0>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <main+0x78>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	08003101 	.word	0x08003101
 80030c4:	0800313f 	.word	0x0800313f
 80030c8:	08003159 	.word	0x08003159
 80030cc:	08003173 	.word	0x08003173
 80030d0:	0800318d 	.word	0x0800318d
 80030d4:	080031a7 	.word	0x080031a7
 80030d8:	080031c1 	.word	0x080031c1
 80030dc:	080031db 	.word	0x080031db
 80030e0:	080031f5 	.word	0x080031f5
 80030e4:	0800320f 	.word	0x0800320f
 80030e8:	08003229 	.word	0x08003229
 80030ec:	08003243 	.word	0x08003243
 80030f0:	0800325d 	.word	0x0800325d
 80030f4:	08003287 	.word	0x08003287
 80030f8:	080032b1 	.word	0x080032b1
 80030fc:	080032db 	.word	0x080032db
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8003100:	f7fe fa12 	bl	8001528 <rotary_read_playmode>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10c      	bne.n	8003124 <main+0xdc>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 800310a:	f7fe fc8d 	bl	8001a28 <analog_calibration_start>

            while(switch_read_enter())
 800310e:	e001      	b.n	8003114 <main+0xcc>
            {
              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_main();
 8003110:	f000 fe90 	bl	8003e34 <main_main>
            while(switch_read_enter())
 8003114:	f7fe fb0e 	bl	8001734 <switch_read_enter>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f8      	bne.n	8003110 <main+0xc8>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 800311e:	f7fe fcab 	bl	8001a78 <analog_calibration_stop>
              main_main();
            }

            running_stop();
          }
          break;	// case 0x00:
 8003122:	e0f2      	b.n	800330a <main+0x2c2>
            running_start();
 8003124:	f000 fe18 	bl	8003d58 <running_start>
            while(switch_read_enter())
 8003128:	e001      	b.n	800312e <main+0xe6>
              main_main();
 800312a:	f000 fe83 	bl	8003e34 <main_main>
            while(switch_read_enter())
 800312e:	f7fe fb01 	bl	8001734 <switch_read_enter>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f8      	bne.n	800312a <main+0xe2>
            running_stop();
 8003138:	f000 fe3c 	bl	8003db4 <running_stop>
          break;	// case 0x00:
 800313c:	e0e5      	b.n	800330a <main+0x2c2>
        case 0x01:	// 1
          running_start();
 800313e:	f000 fe0b 	bl	8003d58 <running_start>

          while (switch_read_enter())
 8003142:	e001      	b.n	8003148 <main+0x100>
          {
            main_main();
 8003144:	f000 fe76 	bl	8003e34 <main_main>
          while (switch_read_enter())
 8003148:	f7fe faf4 	bl	8001734 <switch_read_enter>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f8      	bne.n	8003144 <main+0xfc>
          }

          running_stop();
 8003152:	f000 fe2f 	bl	8003db4 <running_stop>
          break;
 8003156:	e0d8      	b.n	800330a <main+0x2c2>
        case 0x02:	// 2
          running_start();
 8003158:	f000 fdfe 	bl	8003d58 <running_start>

          while(switch_read_enter())
 800315c:	e001      	b.n	8003162 <main+0x11a>
          {
            main_main();
 800315e:	f000 fe69 	bl	8003e34 <main_main>
          while(switch_read_enter())
 8003162:	f7fe fae7 	bl	8001734 <switch_read_enter>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f8      	bne.n	800315e <main+0x116>
          }

          running_stop();
 800316c:	f000 fe22 	bl	8003db4 <running_stop>
          break;
 8003170:	e0cb      	b.n	800330a <main+0x2c2>
        case 0x03:	// 3
          running_start();
 8003172:	f000 fdf1 	bl	8003d58 <running_start>

          while(switch_read_enter())
 8003176:	e001      	b.n	800317c <main+0x134>
          {
            main_main();
 8003178:	f000 fe5c 	bl	8003e34 <main_main>
          while(switch_read_enter())
 800317c:	f7fe fada 	bl	8001734 <switch_read_enter>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f8      	bne.n	8003178 <main+0x130>
          }

          running_stop();
 8003186:	f000 fe15 	bl	8003db4 <running_stop>
          break;
 800318a:	e0be      	b.n	800330a <main+0x2c2>
        case 0x04:	// 4
          running_start();
 800318c:	f000 fde4 	bl	8003d58 <running_start>

          while(switch_read_enter())
 8003190:	e001      	b.n	8003196 <main+0x14e>
          {
            main_main();
 8003192:	f000 fe4f 	bl	8003e34 <main_main>
          while(switch_read_enter())
 8003196:	f7fe facd 	bl	8001734 <switch_read_enter>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f8      	bne.n	8003192 <main+0x14a>
          }

          running_stop();
 80031a0:	f000 fe08 	bl	8003db4 <running_stop>
          break;
 80031a4:	e0b1      	b.n	800330a <main+0x2c2>
        case 0x05:	// 5
          running_start();
 80031a6:	f000 fdd7 	bl	8003d58 <running_start>

          while(switch_read_enter())
 80031aa:	e001      	b.n	80031b0 <main+0x168>
          {
            main_main();
 80031ac:	f000 fe42 	bl	8003e34 <main_main>
          while(switch_read_enter())
 80031b0:	f7fe fac0 	bl	8001734 <switch_read_enter>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f8      	bne.n	80031ac <main+0x164>
          }

          running_stop();
 80031ba:	f000 fdfb 	bl	8003db4 <running_stop>
          break;
 80031be:	e0a4      	b.n	800330a <main+0x2c2>
        case 0x06:	// 6
          running_start();
 80031c0:	f000 fdca 	bl	8003d58 <running_start>

          while(switch_read_enter())
 80031c4:	e001      	b.n	80031ca <main+0x182>
          {
            main_main();
 80031c6:	f000 fe35 	bl	8003e34 <main_main>
          while(switch_read_enter())
 80031ca:	f7fe fab3 	bl	8001734 <switch_read_enter>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f8      	bne.n	80031c6 <main+0x17e>
          }

          running_stop();
 80031d4:	f000 fdee 	bl	8003db4 <running_stop>
          break;
 80031d8:	e097      	b.n	800330a <main+0x2c2>
        case 0x07:	// 7
          running_start();
 80031da:	f000 fdbd 	bl	8003d58 <running_start>

          while(switch_read_enter())
 80031de:	e001      	b.n	80031e4 <main+0x19c>
          {
            main_main();
 80031e0:	f000 fe28 	bl	8003e34 <main_main>
          while(switch_read_enter())
 80031e4:	f7fe faa6 	bl	8001734 <switch_read_enter>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f8      	bne.n	80031e0 <main+0x198>
          }

          running_stop();
 80031ee:	f000 fde1 	bl	8003db4 <running_stop>
          break;
 80031f2:	e08a      	b.n	800330a <main+0x2c2>
        case 0x08:	// 8
          running_start();
 80031f4:	f000 fdb0 	bl	8003d58 <running_start>

          while(switch_read_enter())
 80031f8:	e001      	b.n	80031fe <main+0x1b6>
          {
            main_main();
 80031fa:	f000 fe1b 	bl	8003e34 <main_main>
          while(switch_read_enter())
 80031fe:	f7fe fa99 	bl	8001734 <switch_read_enter>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f8      	bne.n	80031fa <main+0x1b2>
          }

          running_stop();
 8003208:	f000 fdd4 	bl	8003db4 <running_stop>
          break;
 800320c:	e07d      	b.n	800330a <main+0x2c2>
        case 0x09:	// 9
          running_start();
 800320e:	f000 fda3 	bl	8003d58 <running_start>

          while(switch_read_enter())
 8003212:	e001      	b.n	8003218 <main+0x1d0>
          {
            main_main();
 8003214:	f000 fe0e 	bl	8003e34 <main_main>
          while(switch_read_enter())
 8003218:	f7fe fa8c 	bl	8001734 <switch_read_enter>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f8      	bne.n	8003214 <main+0x1cc>
          }

          running_stop();
 8003222:	f000 fdc7 	bl	8003db4 <running_stop>
          break;
 8003226:	e070      	b.n	800330a <main+0x2c2>
        case 0x0A:	// A
          running_start();
 8003228:	f000 fd96 	bl	8003d58 <running_start>

          while(switch_read_enter())
 800322c:	e001      	b.n	8003232 <main+0x1ea>
          {
            main_main();
 800322e:	f000 fe01 	bl	8003e34 <main_main>
          while(switch_read_enter())
 8003232:	f7fe fa7f 	bl	8001734 <switch_read_enter>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f8      	bne.n	800322e <main+0x1e6>
          }

          running_stop();
 800323c:	f000 fdba 	bl	8003db4 <running_stop>
          break;
 8003240:	e063      	b.n	800330a <main+0x2c2>
        case 0x0B:	// B
          running_start();
 8003242:	f000 fd89 	bl	8003d58 <running_start>

          while(switch_read_enter())
 8003246:	e001      	b.n	800324c <main+0x204>
          {
            main_main();
 8003248:	f000 fdf4 	bl	8003e34 <main_main>
          while(switch_read_enter())
 800324c:	f7fe fa72 	bl	8001734 <switch_read_enter>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f8      	bne.n	8003248 <main+0x200>
          }

          running_stop();
 8003256:	f000 fdad 	bl	8003db4 <running_stop>
          break;
 800325a:	e056      	b.n	800330a <main+0x2c2>
        case 0x0C:	// C
          if(rotary_read_playmode() == flash_print)
 800325c:	f7fe f964 	bl	8001528 <rotary_read_playmode>
 8003260:	4603      	mov	r3, r0
 8003262:	2b0f      	cmp	r3, #15
 8003264:	d102      	bne.n	800326c <main+0x224>
          {
            course_print_flash();
 8003266:	f7ff fa61 	bl	800272c <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 800326a:	e04e      	b.n	800330a <main+0x2c2>
            running_start();
 800326c:	f000 fd74 	bl	8003d58 <running_start>
            while(switch_read_enter())
 8003270:	e001      	b.n	8003276 <main+0x22e>
              main_main();
 8003272:	f000 fddf 	bl	8003e34 <main_main>
            while(switch_read_enter())
 8003276:	f7fe fa5d 	bl	8001734 <switch_read_enter>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f8      	bne.n	8003272 <main+0x22a>
            running_stop();
 8003280:	f000 fd98 	bl	8003db4 <running_stop>
          break;
 8003284:	e041      	b.n	800330a <main+0x2c2>
        case 0x0D:	// D
          if(rotary_read_playmode() == flash_print)
 8003286:	f7fe f94f 	bl	8001528 <rotary_read_playmode>
 800328a:	4603      	mov	r3, r0
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d102      	bne.n	8003296 <main+0x24e>
          {
            course_print_flash();
 8003290:	f7ff fa4c 	bl	800272c <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8003294:	e039      	b.n	800330a <main+0x2c2>
            running_start();
 8003296:	f000 fd5f 	bl	8003d58 <running_start>
            while(switch_read_enter())
 800329a:	e001      	b.n	80032a0 <main+0x258>
              main_main();
 800329c:	f000 fdca 	bl	8003e34 <main_main>
            while(switch_read_enter())
 80032a0:	f7fe fa48 	bl	8001734 <switch_read_enter>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f8      	bne.n	800329c <main+0x254>
            running_stop();
 80032aa:	f000 fd83 	bl	8003db4 <running_stop>
          break;
 80032ae:	e02c      	b.n	800330a <main+0x2c2>
        case 0x0E:	// E
          if(rotary_read_playmode() == flash_print)
 80032b0:	f7fe f93a 	bl	8001528 <rotary_read_playmode>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b0f      	cmp	r3, #15
 80032b8:	d102      	bne.n	80032c0 <main+0x278>
          {
            course_print_flash();
 80032ba:	f7ff fa37 	bl	800272c <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 80032be:	e024      	b.n	800330a <main+0x2c2>
            running_start();
 80032c0:	f000 fd4a 	bl	8003d58 <running_start>
            while(switch_read_enter())
 80032c4:	e001      	b.n	80032ca <main+0x282>
              main_main();
 80032c6:	f000 fdb5 	bl	8003e34 <main_main>
            while(switch_read_enter())
 80032ca:	f7fe fa33 	bl	8001734 <switch_read_enter>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f8      	bne.n	80032c6 <main+0x27e>
            running_stop();
 80032d4:	f000 fd6e 	bl	8003db4 <running_stop>
          break;
 80032d8:	e017      	b.n	800330a <main+0x2c2>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 80032da:	f7fe f925 	bl	8001528 <rotary_read_playmode>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b0f      	cmp	r3, #15
 80032e2:	d102      	bne.n	80032ea <main+0x2a2>
          {
            course_print_flash();
 80032e4:	f7ff fa22 	bl	800272c <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 80032e8:	e00f      	b.n	800330a <main+0x2c2>
            running_start();
 80032ea:	f000 fd35 	bl	8003d58 <running_start>
            while(switch_read_enter())
 80032ee:	e001      	b.n	80032f4 <main+0x2ac>
              main_main();
 80032f0:	f000 fda0 	bl	8003e34 <main_main>
            while(switch_read_enter())
 80032f4:	f7fe fa1e 	bl	8001734 <switch_read_enter>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f8      	bne.n	80032f0 <main+0x2a8>
            running_stop();
 80032fe:	f000 fd59 	bl	8003db4 <running_stop>
          break;
 8003302:	e002      	b.n	800330a <main+0x2c2>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 8003304:	bf00      	nop
 8003306:	e000      	b.n	800330a <main+0x2c2>
          break;
 8003308:	bf00      	nop
    HAL_Delay(500);
 800330a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800330e:	f002 fe55 	bl	8005fbc <HAL_Delay>
    main_print_while();
 8003312:	e6c3      	b.n	800309c <main+0x54>
 8003314:	0801040c 	.word	0x0801040c
 8003318:	08010414 	.word	0x08010414

0800331c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b094      	sub	sp, #80	; 0x50
 8003320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003322:	f107 0320 	add.w	r3, r7, #32
 8003326:	2230      	movs	r2, #48	; 0x30
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f007 fc41 	bl	800abb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <SystemClock_Config+0xcc>)
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <SystemClock_Config+0xcc>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334e:	6413      	str	r3, [r2, #64]	; 0x40
 8003350:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <SystemClock_Config+0xcc>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800335c:	2300      	movs	r3, #0
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <SystemClock_Config+0xd0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a21      	ldr	r2, [pc, #132]	; (80033ec <SystemClock_Config+0xd0>)
 8003366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <SystemClock_Config+0xd0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003378:	2301      	movs	r3, #1
 800337a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800337c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003382:	2302      	movs	r3, #2
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003386:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800338c:	2308      	movs	r3, #8
 800338e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003390:	23a8      	movs	r3, #168	; 0xa8
 8003392:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003394:	2302      	movs	r3, #2
 8003396:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003398:	2304      	movs	r3, #4
 800339a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800339c:	f107 0320 	add.w	r3, r7, #32
 80033a0:	4618      	mov	r0, r3
 80033a2:	f004 fd67 	bl	8007e74 <HAL_RCC_OscConfig>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80033ac:	f000 fd54 	bl	8003e58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033b0:	230f      	movs	r3, #15
 80033b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033b4:	2302      	movs	r3, #2
 80033b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80033c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80033c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	2105      	movs	r1, #5
 80033ce:	4618      	mov	r0, r3
 80033d0:	f004 ffc8 	bl	8008364 <HAL_RCC_ClockConfig>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80033da:	f000 fd3d 	bl	8003e58 <Error_Handler>
  }
}
 80033de:	bf00      	nop
 80033e0:	3750      	adds	r7, #80	; 0x50
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40007000 	.word	0x40007000

080033f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033f6:	463b      	mov	r3, r7
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003402:	4b8a      	ldr	r3, [pc, #552]	; (800362c <MX_ADC1_Init+0x23c>)
 8003404:	4a8a      	ldr	r2, [pc, #552]	; (8003630 <MX_ADC1_Init+0x240>)
 8003406:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003408:	4b88      	ldr	r3, [pc, #544]	; (800362c <MX_ADC1_Init+0x23c>)
 800340a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800340e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003410:	4b86      	ldr	r3, [pc, #536]	; (800362c <MX_ADC1_Init+0x23c>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003416:	4b85      	ldr	r3, [pc, #532]	; (800362c <MX_ADC1_Init+0x23c>)
 8003418:	2201      	movs	r2, #1
 800341a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800341c:	4b83      	ldr	r3, [pc, #524]	; (800362c <MX_ADC1_Init+0x23c>)
 800341e:	2201      	movs	r2, #1
 8003420:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003422:	4b82      	ldr	r3, [pc, #520]	; (800362c <MX_ADC1_Init+0x23c>)
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800342a:	4b80      	ldr	r3, [pc, #512]	; (800362c <MX_ADC1_Init+0x23c>)
 800342c:	2200      	movs	r2, #0
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003430:	4b7e      	ldr	r3, [pc, #504]	; (800362c <MX_ADC1_Init+0x23c>)
 8003432:	4a80      	ldr	r2, [pc, #512]	; (8003634 <MX_ADC1_Init+0x244>)
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003436:	4b7d      	ldr	r3, [pc, #500]	; (800362c <MX_ADC1_Init+0x23c>)
 8003438:	2200      	movs	r2, #0
 800343a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 800343c:	4b7b      	ldr	r3, [pc, #492]	; (800362c <MX_ADC1_Init+0x23c>)
 800343e:	2210      	movs	r2, #16
 8003440:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003442:	4b7a      	ldr	r3, [pc, #488]	; (800362c <MX_ADC1_Init+0x23c>)
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800344a:	4b78      	ldr	r3, [pc, #480]	; (800362c <MX_ADC1_Init+0x23c>)
 800344c:	2201      	movs	r2, #1
 800344e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003450:	4876      	ldr	r0, [pc, #472]	; (800362c <MX_ADC1_Init+0x23c>)
 8003452:	f002 fdd5 	bl	8006000 <HAL_ADC_Init>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800345c:	f000 fcfc 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003460:	2309      	movs	r3, #9
 8003462:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003464:	2301      	movs	r3, #1
 8003466:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003468:	2303      	movs	r3, #3
 800346a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800346c:	463b      	mov	r3, r7
 800346e:	4619      	mov	r1, r3
 8003470:	486e      	ldr	r0, [pc, #440]	; (800362c <MX_ADC1_Init+0x23c>)
 8003472:	f002 ff87 	bl	8006384 <HAL_ADC_ConfigChannel>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800347c:	f000 fcec 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003480:	230a      	movs	r3, #10
 8003482:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003484:	2302      	movs	r3, #2
 8003486:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003488:	463b      	mov	r3, r7
 800348a:	4619      	mov	r1, r3
 800348c:	4867      	ldr	r0, [pc, #412]	; (800362c <MX_ADC1_Init+0x23c>)
 800348e:	f002 ff79 	bl	8006384 <HAL_ADC_ConfigChannel>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003498:	f000 fcde 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800349c:	2308      	movs	r3, #8
 800349e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80034a0:	2303      	movs	r3, #3
 80034a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034a4:	463b      	mov	r3, r7
 80034a6:	4619      	mov	r1, r3
 80034a8:	4860      	ldr	r0, [pc, #384]	; (800362c <MX_ADC1_Init+0x23c>)
 80034aa:	f002 ff6b 	bl	8006384 <HAL_ADC_ConfigChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80034b4:	f000 fcd0 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80034b8:	230b      	movs	r3, #11
 80034ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80034bc:	2304      	movs	r3, #4
 80034be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034c0:	463b      	mov	r3, r7
 80034c2:	4619      	mov	r1, r3
 80034c4:	4859      	ldr	r0, [pc, #356]	; (800362c <MX_ADC1_Init+0x23c>)
 80034c6:	f002 ff5d 	bl	8006384 <HAL_ADC_ConfigChannel>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80034d0:	f000 fcc2 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80034d4:	230f      	movs	r3, #15
 80034d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80034d8:	2305      	movs	r3, #5
 80034da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034dc:	463b      	mov	r3, r7
 80034de:	4619      	mov	r1, r3
 80034e0:	4852      	ldr	r0, [pc, #328]	; (800362c <MX_ADC1_Init+0x23c>)
 80034e2:	f002 ff4f 	bl	8006384 <HAL_ADC_ConfigChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80034ec:	f000 fcb4 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80034f0:	230c      	movs	r3, #12
 80034f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80034f4:	2306      	movs	r3, #6
 80034f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034f8:	463b      	mov	r3, r7
 80034fa:	4619      	mov	r1, r3
 80034fc:	484b      	ldr	r0, [pc, #300]	; (800362c <MX_ADC1_Init+0x23c>)
 80034fe:	f002 ff41 	bl	8006384 <HAL_ADC_ConfigChannel>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003508:	f000 fca6 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800350c:	230e      	movs	r3, #14
 800350e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003510:	2307      	movs	r3, #7
 8003512:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003514:	463b      	mov	r3, r7
 8003516:	4619      	mov	r1, r3
 8003518:	4844      	ldr	r0, [pc, #272]	; (800362c <MX_ADC1_Init+0x23c>)
 800351a:	f002 ff33 	bl	8006384 <HAL_ADC_ConfigChannel>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8003524:	f000 fc98 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003528:	230d      	movs	r3, #13
 800352a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800352c:	2308      	movs	r3, #8
 800352e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003530:	463b      	mov	r3, r7
 8003532:	4619      	mov	r1, r3
 8003534:	483d      	ldr	r0, [pc, #244]	; (800362c <MX_ADC1_Init+0x23c>)
 8003536:	f002 ff25 	bl	8006384 <HAL_ADC_ConfigChannel>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8003540:	f000 fc8a 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003544:	2307      	movs	r3, #7
 8003546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003548:	2309      	movs	r3, #9
 800354a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800354c:	463b      	mov	r3, r7
 800354e:	4619      	mov	r1, r3
 8003550:	4836      	ldr	r0, [pc, #216]	; (800362c <MX_ADC1_Init+0x23c>)
 8003552:	f002 ff17 	bl	8006384 <HAL_ADC_ConfigChannel>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800355c:	f000 fc7c 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003560:	2300      	movs	r3, #0
 8003562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003564:	230a      	movs	r3, #10
 8003566:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003568:	463b      	mov	r3, r7
 800356a:	4619      	mov	r1, r3
 800356c:	482f      	ldr	r0, [pc, #188]	; (800362c <MX_ADC1_Init+0x23c>)
 800356e:	f002 ff09 	bl	8006384 <HAL_ADC_ConfigChannel>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8003578:	f000 fc6e 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800357c:	2306      	movs	r3, #6
 800357e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003580:	230b      	movs	r3, #11
 8003582:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003584:	463b      	mov	r3, r7
 8003586:	4619      	mov	r1, r3
 8003588:	4828      	ldr	r0, [pc, #160]	; (800362c <MX_ADC1_Init+0x23c>)
 800358a:	f002 fefb 	bl	8006384 <HAL_ADC_ConfigChannel>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8003594:	f000 fc60 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003598:	2301      	movs	r3, #1
 800359a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800359c:	230c      	movs	r3, #12
 800359e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035a0:	463b      	mov	r3, r7
 80035a2:	4619      	mov	r1, r3
 80035a4:	4821      	ldr	r0, [pc, #132]	; (800362c <MX_ADC1_Init+0x23c>)
 80035a6:	f002 feed 	bl	8006384 <HAL_ADC_ConfigChannel>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 80035b0:	f000 fc52 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80035b4:	2305      	movs	r3, #5
 80035b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80035b8:	230d      	movs	r3, #13
 80035ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035bc:	463b      	mov	r3, r7
 80035be:	4619      	mov	r1, r3
 80035c0:	481a      	ldr	r0, [pc, #104]	; (800362c <MX_ADC1_Init+0x23c>)
 80035c2:	f002 fedf 	bl	8006384 <HAL_ADC_ConfigChannel>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80035cc:	f000 fc44 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80035d0:	2302      	movs	r3, #2
 80035d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80035d4:	230e      	movs	r3, #14
 80035d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035d8:	463b      	mov	r3, r7
 80035da:	4619      	mov	r1, r3
 80035dc:	4813      	ldr	r0, [pc, #76]	; (800362c <MX_ADC1_Init+0x23c>)
 80035de:	f002 fed1 	bl	8006384 <HAL_ADC_ConfigChannel>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80035e8:	f000 fc36 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80035ec:	2304      	movs	r3, #4
 80035ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80035f0:	230f      	movs	r3, #15
 80035f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80035f4:	463b      	mov	r3, r7
 80035f6:	4619      	mov	r1, r3
 80035f8:	480c      	ldr	r0, [pc, #48]	; (800362c <MX_ADC1_Init+0x23c>)
 80035fa:	f002 fec3 	bl	8006384 <HAL_ADC_ConfigChannel>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8003604:	f000 fc28 	bl	8003e58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003608:	2303      	movs	r3, #3
 800360a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 800360c:	2310      	movs	r3, #16
 800360e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003610:	463b      	mov	r3, r7
 8003612:	4619      	mov	r1, r3
 8003614:	4805      	ldr	r0, [pc, #20]	; (800362c <MX_ADC1_Init+0x23c>)
 8003616:	f002 feb5 	bl	8006384 <HAL_ADC_ConfigChannel>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8003620:	f000 fc1a 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200005b8 	.word	0x200005b8
 8003630:	40012000 	.word	0x40012000
 8003634:	0f000001 	.word	0x0f000001

08003638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <MX_I2C1_Init+0x50>)
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <MX_I2C1_Init+0x54>)
 8003640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <MX_I2C1_Init+0x50>)
 8003644:	4a12      	ldr	r2, [pc, #72]	; (8003690 <MX_I2C1_Init+0x58>)
 8003646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <MX_I2C1_Init+0x50>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <MX_I2C1_Init+0x50>)
 8003650:	2200      	movs	r2, #0
 8003652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <MX_I2C1_Init+0x50>)
 8003656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800365a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <MX_I2C1_Init+0x50>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <MX_I2C1_Init+0x50>)
 8003664:	2200      	movs	r2, #0
 8003666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <MX_I2C1_Init+0x50>)
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <MX_I2C1_Init+0x50>)
 8003670:	2280      	movs	r2, #128	; 0x80
 8003672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003674:	4804      	ldr	r0, [pc, #16]	; (8003688 <MX_I2C1_Init+0x50>)
 8003676:	f004 fab9 	bl	8007bec <HAL_I2C_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003680:	f000 fbea 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}
 8003688:	200004d4 	.word	0x200004d4
 800368c:	40005400 	.word	0x40005400
 8003690:	000186a0 	.word	0x000186a0

08003694 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <MX_SPI2_Init+0x64>)
 800369a:	4a18      	ldr	r2, [pc, #96]	; (80036fc <MX_SPI2_Init+0x68>)
 800369c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800369e:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036b4:	2202      	movs	r2, #2
 80036b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80036c6:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036c8:	2228      	movs	r2, #40	; 0x28
 80036ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036d8:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036da:	2200      	movs	r2, #0
 80036dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036e0:	220a      	movs	r2, #10
 80036e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036e4:	4804      	ldr	r0, [pc, #16]	; (80036f8 <MX_SPI2_Init+0x64>)
 80036e6:	f005 f837 	bl	8008758 <HAL_SPI_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80036f0:	f000 fbb2 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80036f4:	bf00      	nop
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000434 	.word	0x20000434
 80036fc:	40003800 	.word	0x40003800

08003700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	; 0x30
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003706:	f107 030c 	add.w	r3, r7, #12
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f007 fa4f 	bl	800abb2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003714:	1d3b      	adds	r3, r7, #4
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800371c:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <MX_TIM1_Init+0xa8>)
 800371e:	4a23      	ldr	r2, [pc, #140]	; (80037ac <MX_TIM1_Init+0xac>)
 8003720:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003722:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <MX_TIM1_Init+0xa8>)
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003728:	4b1f      	ldr	r3, [pc, #124]	; (80037a8 <MX_TIM1_Init+0xa8>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <MX_TIM1_Init+0xa8>)
 8003730:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <MX_TIM1_Init+0xa8>)
 8003738:	2200      	movs	r2, #0
 800373a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <MX_TIM1_Init+0xa8>)
 800373e:	2200      	movs	r2, #0
 8003740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <MX_TIM1_Init+0xa8>)
 8003744:	2200      	movs	r2, #0
 8003746:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003748:	2303      	movs	r3, #3
 800374a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800374c:	2300      	movs	r3, #0
 800374e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003750:	2301      	movs	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003754:	2300      	movs	r3, #0
 8003756:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800375c:	2300      	movs	r3, #0
 800375e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003760:	2301      	movs	r3, #1
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003764:	2300      	movs	r3, #0
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800376c:	f107 030c 	add.w	r3, r7, #12
 8003770:	4619      	mov	r1, r3
 8003772:	480d      	ldr	r0, [pc, #52]	; (80037a8 <MX_TIM1_Init+0xa8>)
 8003774:	f006 f80e 	bl	8009794 <HAL_TIM_Encoder_Init>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800377e:	f000 fb6b 	bl	8003e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003782:	2300      	movs	r3, #0
 8003784:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	4619      	mov	r1, r3
 800378e:	4806      	ldr	r0, [pc, #24]	; (80037a8 <MX_TIM1_Init+0xa8>)
 8003790:	f006 fe34 	bl	800a3fc <HAL_TIMEx_MasterConfigSynchronization>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800379a:	f000 fb5d 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800379e:	bf00      	nop
 80037a0:	3730      	adds	r7, #48	; 0x30
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200006f0 	.word	0x200006f0
 80037ac:	40010000 	.word	0x40010000

080037b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08c      	sub	sp, #48	; 0x30
 80037b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037b6:	f107 030c 	add.w	r3, r7, #12
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f007 f9f7 	bl	800abb2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c4:	1d3b      	adds	r3, r7, #4
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037cc:	4b20      	ldr	r3, [pc, #128]	; (8003850 <MX_TIM3_Init+0xa0>)
 80037ce:	4a21      	ldr	r2, [pc, #132]	; (8003854 <MX_TIM3_Init+0xa4>)
 80037d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80037d2:	4b1f      	ldr	r3, [pc, #124]	; (8003850 <MX_TIM3_Init+0xa0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d8:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <MX_TIM3_Init+0xa0>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <MX_TIM3_Init+0xa0>)
 80037e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e6:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <MX_TIM3_Init+0xa0>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ec:	4b18      	ldr	r3, [pc, #96]	; (8003850 <MX_TIM3_Init+0xa0>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037f2:	2303      	movs	r3, #3
 80037f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037fa:	2301      	movs	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003806:	2300      	movs	r3, #0
 8003808:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800380a:	2301      	movs	r3, #1
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800380e:	2300      	movs	r3, #0
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003816:	f107 030c 	add.w	r3, r7, #12
 800381a:	4619      	mov	r1, r3
 800381c:	480c      	ldr	r0, [pc, #48]	; (8003850 <MX_TIM3_Init+0xa0>)
 800381e:	f005 ffb9 	bl	8009794 <HAL_TIM_Encoder_Init>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003828:	f000 fb16 	bl	8003e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800382c:	2300      	movs	r3, #0
 800382e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003830:	2300      	movs	r3, #0
 8003832:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4805      	ldr	r0, [pc, #20]	; (8003850 <MX_TIM3_Init+0xa0>)
 800383a:	f006 fddf 	bl	800a3fc <HAL_TIMEx_MasterConfigSynchronization>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003844:	f000 fb08 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003848:	bf00      	nop
 800384a:	3730      	adds	r7, #48	; 0x30
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000570 	.word	0x20000570
 8003854:	40000400 	.word	0x40000400

08003858 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800385e:	f107 0320 	add.w	r3, r7, #32
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003868:	1d3b      	adds	r3, r7, #4
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	611a      	str	r2, [r3, #16]
 8003876:	615a      	str	r2, [r3, #20]
 8003878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800387a:	4b27      	ldr	r3, [pc, #156]	; (8003918 <MX_TIM4_Init+0xc0>)
 800387c:	4a27      	ldr	r2, [pc, #156]	; (800391c <MX_TIM4_Init+0xc4>)
 800387e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <MX_TIM4_Init+0xc0>)
 8003882:	2202      	movs	r2, #2
 8003884:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003886:	4b24      	ldr	r3, [pc, #144]	; (8003918 <MX_TIM4_Init+0xc0>)
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800388c:	4b22      	ldr	r3, [pc, #136]	; (8003918 <MX_TIM4_Init+0xc0>)
 800388e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003892:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003894:	4b20      	ldr	r3, [pc, #128]	; (8003918 <MX_TIM4_Init+0xc0>)
 8003896:	2200      	movs	r2, #0
 8003898:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800389a:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <MX_TIM4_Init+0xc0>)
 800389c:	2200      	movs	r2, #0
 800389e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80038a0:	481d      	ldr	r0, [pc, #116]	; (8003918 <MX_TIM4_Init+0xc0>)
 80038a2:	f005 fdf0 	bl	8009486 <HAL_TIM_PWM_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80038ac:	f000 fad4 	bl	8003e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b0:	2300      	movs	r3, #0
 80038b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038b8:	f107 0320 	add.w	r3, r7, #32
 80038bc:	4619      	mov	r1, r3
 80038be:	4816      	ldr	r0, [pc, #88]	; (8003918 <MX_TIM4_Init+0xc0>)
 80038c0:	f006 fd9c 	bl	800a3fc <HAL_TIMEx_MasterConfigSynchronization>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80038ca:	f000 fac5 	bl	8003e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038ce:	2360      	movs	r3, #96	; 0x60
 80038d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	2200      	movs	r2, #0
 80038e2:	4619      	mov	r1, r3
 80038e4:	480c      	ldr	r0, [pc, #48]	; (8003918 <MX_TIM4_Init+0xc0>)
 80038e6:	f006 fa29 	bl	8009d3c <HAL_TIM_PWM_ConfigChannel>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80038f0:	f000 fab2 	bl	8003e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	2204      	movs	r2, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4807      	ldr	r0, [pc, #28]	; (8003918 <MX_TIM4_Init+0xc0>)
 80038fc:	f006 fa1e 	bl	8009d3c <HAL_TIM_PWM_ConfigChannel>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003906:	f000 faa7 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800390a:	4803      	ldr	r0, [pc, #12]	; (8003918 <MX_TIM4_Init+0xc0>)
 800390c:	f001 f8c0 	bl	8004a90 <HAL_TIM_MspPostInit>

}
 8003910:	bf00      	nop
 8003912:	3728      	adds	r7, #40	; 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	2000048c 	.word	0x2000048c
 800391c:	40000800 	.word	0x40000800

08003920 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003926:	463b      	mov	r3, r7
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <MX_TIM6_Init+0x64>)
 8003930:	4a15      	ldr	r2, [pc, #84]	; (8003988 <MX_TIM6_Init+0x68>)
 8003932:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8003934:	4b13      	ldr	r3, [pc, #76]	; (8003984 <MX_TIM6_Init+0x64>)
 8003936:	2204      	movs	r2, #4
 8003938:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <MX_TIM6_Init+0x64>)
 800393c:	2200      	movs	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 33599;
 8003940:	4b10      	ldr	r3, [pc, #64]	; (8003984 <MX_TIM6_Init+0x64>)
 8003942:	f248 323f 	movw	r2, #33599	; 0x833f
 8003946:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <MX_TIM6_Init+0x64>)
 800394a:	2200      	movs	r2, #0
 800394c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800394e:	480d      	ldr	r0, [pc, #52]	; (8003984 <MX_TIM6_Init+0x64>)
 8003950:	f005 fcaa 	bl	80092a8 <HAL_TIM_Base_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800395a:	f000 fa7d 	bl	8003e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003966:	463b      	mov	r3, r7
 8003968:	4619      	mov	r1, r3
 800396a:	4806      	ldr	r0, [pc, #24]	; (8003984 <MX_TIM6_Init+0x64>)
 800396c:	f006 fd46 	bl	800a3fc <HAL_TIMEx_MasterConfigSynchronization>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003976:	f000 fa6f 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200006a8 	.word	0x200006a8
 8003988:	40001000 	.word	0x40001000

0800398c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003992:	463b      	mov	r3, r7
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <MX_TIM7_Init+0x64>)
 800399c:	4a15      	ldr	r2, [pc, #84]	; (80039f4 <MX_TIM7_Init+0x68>)
 800399e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <MX_TIM7_Init+0x64>)
 80039a2:	2204      	movs	r2, #4
 80039a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a6:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <MX_TIM7_Init+0x64>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33599;
 80039ac:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <MX_TIM7_Init+0x64>)
 80039ae:	f248 323f 	movw	r2, #33599	; 0x833f
 80039b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <MX_TIM7_Init+0x64>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80039ba:	480d      	ldr	r0, [pc, #52]	; (80039f0 <MX_TIM7_Init+0x64>)
 80039bc:	f005 fc74 	bl	80092a8 <HAL_TIM_Base_Init>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80039c6:	f000 fa47 	bl	8003e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80039d2:	463b      	mov	r3, r7
 80039d4:	4619      	mov	r1, r3
 80039d6:	4806      	ldr	r0, [pc, #24]	; (80039f0 <MX_TIM7_Init+0x64>)
 80039d8:	f006 fd10 	bl	800a3fc <HAL_TIMEx_MasterConfigSynchronization>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80039e2:	f000 fa39 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80039e6:	bf00      	nop
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	200007c4 	.word	0x200007c4
 80039f4:	40001400 	.word	0x40001400

080039f8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80039fc:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <MX_TIM10_Init+0x40>)
 80039fe:	4a0f      	ldr	r2, [pc, #60]	; (8003a3c <MX_TIM10_Init+0x44>)
 8003a00:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8003a02:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <MX_TIM10_Init+0x40>)
 8003a04:	2204      	movs	r2, #4
 8003a06:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a08:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <MX_TIM10_Init+0x40>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <MX_TIM10_Init+0x40>)
 8003a10:	f248 323f 	movw	r2, #33599	; 0x833f
 8003a14:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a16:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <MX_TIM10_Init+0x40>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <MX_TIM10_Init+0x40>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003a22:	4805      	ldr	r0, [pc, #20]	; (8003a38 <MX_TIM10_Init+0x40>)
 8003a24:	f005 fc40 	bl	80092a8 <HAL_TIM_Base_Init>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003a2e:	f000 fa13 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000528 	.word	0x20000528
 8003a3c:	40014400 	.word	0x40014400

08003a40 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <MX_TIM11_Init+0x40>)
 8003a46:	4a0f      	ldr	r2, [pc, #60]	; (8003a84 <MX_TIM11_Init+0x44>)
 8003a48:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <MX_TIM11_Init+0x40>)
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <MX_TIM11_Init+0x40>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <MX_TIM11_Init+0x40>)
 8003a58:	f248 323f 	movw	r2, #33599	; 0x833f
 8003a5c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a5e:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <MX_TIM11_Init+0x40>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <MX_TIM11_Init+0x40>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <MX_TIM11_Init+0x40>)
 8003a6c:	f005 fc1c 	bl	80092a8 <HAL_TIM_Base_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003a76:	f000 f9ef 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000600 	.word	0x20000600
 8003a84:	40014800 	.word	0x40014800

08003a88 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <MX_TIM14_Init+0x40>)
 8003a8e:	4a0f      	ldr	r2, [pc, #60]	; (8003acc <MX_TIM14_Init+0x44>)
 8003a90:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <MX_TIM14_Init+0x40>)
 8003a94:	2204      	movs	r2, #4
 8003a96:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a98:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <MX_TIM14_Init+0x40>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <MX_TIM14_Init+0x40>)
 8003aa0:	f248 323f 	movw	r2, #33599	; 0x833f
 8003aa4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <MX_TIM14_Init+0x40>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <MX_TIM14_Init+0x40>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003ab2:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <MX_TIM14_Init+0x40>)
 8003ab4:	f005 fbf8 	bl	80092a8 <HAL_TIM_Base_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003abe:	f000 f9cb 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	2000077c 	.word	0x2000077c
 8003acc:	40002000 	.word	0x40002000

08003ad0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <MX_USART6_UART_Init+0x50>)
 8003ad8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003adc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ae0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003af6:	220c      	movs	r2, #12
 8003af8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b06:	4805      	ldr	r0, [pc, #20]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003b08:	f006 fd08 	bl	800a51c <HAL_UART_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003b12:	f000 f9a1 	bl	8003e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000738 	.word	0x20000738
 8003b20:	40011400 	.word	0x40011400

08003b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <MX_DMA_Init+0x3c>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	4a0b      	ldr	r2, [pc, #44]	; (8003b60 <MX_DMA_Init+0x3c>)
 8003b34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <MX_DMA_Init+0x3c>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	2038      	movs	r0, #56	; 0x38
 8003b4c:	f002 ff95 	bl	8006a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003b50:	2038      	movs	r0, #56	; 0x38
 8003b52:	f002 ffae 	bl	8006ab2 <HAL_NVIC_EnableIRQ>

}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800

08003b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6a:	f107 0314 	add.w	r3, r7, #20
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	4b69      	ldr	r3, [pc, #420]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a68      	ldr	r2, [pc, #416]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003b84:	f043 0304 	orr.w	r3, r3, #4
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b66      	ldr	r3, [pc, #408]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	4b62      	ldr	r3, [pc, #392]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	4a61      	ldr	r2, [pc, #388]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba6:	4b5f      	ldr	r3, [pc, #380]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	4a5a      	ldr	r2, [pc, #360]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc2:	4b58      	ldr	r3, [pc, #352]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	4b54      	ldr	r3, [pc, #336]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	4a53      	ldr	r2, [pc, #332]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bde:	4b51      	ldr	r3, [pc, #324]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	607b      	str	r3, [r7, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	4b4d      	ldr	r3, [pc, #308]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a4c      	ldr	r2, [pc, #304]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003bf4:	f043 0308 	orr.w	r3, r3, #8
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b4a      	ldr	r3, [pc, #296]	; (8003d24 <MX_GPIO_Init+0x1c0>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003c06:	2200      	movs	r2, #0
 8003c08:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8003c0c:	4846      	ldr	r0, [pc, #280]	; (8003d28 <MX_GPIO_Init+0x1c4>)
 8003c0e:	f003 ffd3 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8003c12:	2200      	movs	r2, #0
 8003c14:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003c18:	4844      	ldr	r0, [pc, #272]	; (8003d2c <MX_GPIO_Init+0x1c8>)
 8003c1a:	f003 ffcd 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003c24:	4842      	ldr	r0, [pc, #264]	; (8003d30 <MX_GPIO_Init+0x1cc>)
 8003c26:	f003 ffc7 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2104      	movs	r1, #4
 8003c2e:	4841      	ldr	r0, [pc, #260]	; (8003d34 <MX_GPIO_Init+0x1d0>)
 8003c30:	f003 ffc2 	bl	8007bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8003c34:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c46:	f107 0314 	add.w	r3, r7, #20
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4836      	ldr	r0, [pc, #216]	; (8003d28 <MX_GPIO_Init+0x1c4>)
 8003c4e:	f003 fdff 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8003c52:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8003c56:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c60:	f107 0314 	add.w	r3, r7, #20
 8003c64:	4619      	mov	r1, r3
 8003c66:	4830      	ldr	r0, [pc, #192]	; (8003d28 <MX_GPIO_Init+0x1c4>)
 8003c68:	f003 fdf2 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8003c6c:	f640 0304 	movw	r3, #2052	; 0x804
 8003c70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c7a:	f107 0314 	add.w	r3, r7, #20
 8003c7e:	4619      	mov	r1, r3
 8003c80:	482a      	ldr	r0, [pc, #168]	; (8003d2c <MX_GPIO_Init+0x1c8>)
 8003c82:	f003 fde5 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8003c86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c94:	2300      	movs	r3, #0
 8003c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4823      	ldr	r0, [pc, #140]	; (8003d2c <MX_GPIO_Init+0x1c8>)
 8003ca0:	f003 fdd6 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8003ca4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003caa:	2301      	movs	r3, #1
 8003cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb6:	f107 0314 	add.w	r3, r7, #20
 8003cba:	4619      	mov	r1, r3
 8003cbc:	481c      	ldr	r0, [pc, #112]	; (8003d30 <MX_GPIO_Init+0x1cc>)
 8003cbe:	f003 fdc7 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8003cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4816      	ldr	r0, [pc, #88]	; (8003d30 <MX_GPIO_Init+0x1cc>)
 8003cd8:	f003 fdba 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cea:	2300      	movs	r3, #0
 8003cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf2:	f107 0314 	add.w	r3, r7, #20
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	480d      	ldr	r0, [pc, #52]	; (8003d30 <MX_GPIO_Init+0x1cc>)
 8003cfa:	f003 fda9 	bl	8007850 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8003cfe:	2304      	movs	r3, #4
 8003d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d02:	2301      	movs	r3, #1
 8003d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8003d0e:	f107 0314 	add.w	r3, r7, #20
 8003d12:	4619      	mov	r1, r3
 8003d14:	4807      	ldr	r0, [pc, #28]	; (8003d34 <MX_GPIO_Init+0x1d0>)
 8003d16:	f003 fd9b 	bl	8007850 <HAL_GPIO_Init>

}
 8003d1a:	bf00      	nop
 8003d1c:	3728      	adds	r7, #40	; 0x28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023800 	.word	0x40023800
 8003d28:	40020800 	.word	0x40020800
 8003d2c:	40020400 	.word	0x40020400
 8003d30:	40020000 	.word	0x40020000
 8003d34:	40020c00 	.word	0x40020c00

08003d38 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  #if USE_LED
  led_init();
 8003d3c:	f7fd fb00 	bl	8001340 <led_init>
  #endif
  flash_init();
 8003d40:	f7fe ffbe 	bl	8002cc0 <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 8003d44:	f001 f92c 	bl	8004fa0 <tim11_init>
  /* encoder_init */
  tim10_init();
 8003d48:	f001 f856 	bl	8004df8 <tim10_init>
  /* tim7 */
  tim7_init();
 8003d4c:	f001 fa42 	bl	80051d4 <tim7_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8003d50:	f001 f940 	bl	8004fd4 <tim6_init>
  /* imu のバイアス補正のための初期�? */
  // if(rotary_read_playmode() == motor_free)
    // imu_revision_init();
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <running_start>:

void running_start()
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  #if USE_LED
  led_start();
 8003d5c:	f7fd fb06 	bl	800136c <led_start>
  #endif
  HAL_Delay(1000);
 8003d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d64:	f002 f92a 	bl	8005fbc <HAL_Delay>
  led_write_rgb(0b100);
 8003d68:	2004      	movs	r0, #4
 8003d6a:	f7fd fb63 	bl	8001434 <led_write_rgb>
  HAL_Delay(1000);
 8003d6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d72:	f002 f923 	bl	8005fbc <HAL_Delay>
  led_write_led(0b01, 0b01);
 8003d76:	2101      	movs	r1, #1
 8003d78:	2001      	movs	r0, #1
 8003d7a:	f7fd fb9b 	bl	80014b4 <led_write_led>
  HAL_Delay(1000);
 8003d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d82:	f002 f91b 	bl	8005fbc <HAL_Delay>
  led_write_led(0b10, 0b10);
 8003d86:	2102      	movs	r1, #2
 8003d88:	2002      	movs	r0, #2
 8003d8a:	f7fd fb93 	bl	80014b4 <led_write_led>
  HAL_Delay(1000);
 8003d8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d92:	f002 f913 	bl	8005fbc <HAL_Delay>
  led_write_led(0b11, 0b00);
 8003d96:	2100      	movs	r1, #0
 8003d98:	2003      	movs	r0, #3
 8003d9a:	f7fd fb8b 	bl	80014b4 <led_write_led>
  led_write_rgb(0b010);
 8003d9e:	2002      	movs	r0, #2
 8003da0:	f7fd fb48 	bl	8001434 <led_write_rgb>
  #if D_TIM7
  printf("main.c > running_start() > ");
  #endif
  tim7_start();
 8003da4:	f001 fa26 	bl	80051f4 <tim7_start>
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 8003da8:	f001 f850 	bl	8004e4c <tim10_start>
  /* analogmin/max = analogdata.min/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 8003dac:	f001 f924 	bl	8004ff8 <tim6_start>
  /* imu のバイアス補正のための準備 */
  // if(rotary_read_playmode() == motor_free)
    // imu_revision_start();
}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <running_stop>:

void running_stop()
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  #if USE_LED
  led_stop();
 8003db8:	f7fd fae3 	bl	8001382 <led_stop>
  #endif
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8003dbc:	f001 f934 	bl	8005028 <tim6_stop>
  /* tim7 */
  tim7_stop();
 8003dc0:	f001 fa40 	bl	8005244 <tim7_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8003dc4:	f001 f870 	bl	8004ea8 <tim10_stop>
  /* imu バイアス補正のための終�? */
  // if(rotary_read_playmode() == motor_free)
    // imu_revision_stop();
  led_write_rgb(0b001);
 8003dc8:	2001      	movs	r0, #1
 8003dca:	f7fd fb33 	bl	8001434 <led_write_rgb>
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <main_print_while>:

void main_print_while()
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
	printf("////////////////////////////// WHILE //////////////////////////////\n\r");
 8003dd8:	4815      	ldr	r0, [pc, #84]	; (8003e30 <main_print_while+0x5c>)
 8003dda:	f007 fd31 	bl	800b840 <iprintf>
  rotary_print_playmode();
 8003dde:	f7fd fc11 	bl	8001604 <rotary_print_playmode>
	print_rotary_value();
 8003de2:	f000 f91d 	bl	8004020 <print_rotary_value>
  if(rotary_read() < 4)
 8003de6:	f7fd fbc3 	bl	8001570 <rotary_read>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d804      	bhi.n	8003dfa <main_print_while+0x26>
  {
    led_write_led(0b11, 0b10);
 8003df0:	2102      	movs	r1, #2
 8003df2:	2003      	movs	r0, #3
 8003df4:	f7fd fb5e 	bl	80014b4 <led_write_led>
  }
  else
  {
    led_write_led(0b11, 0b00);
  }
}
 8003df8:	e017      	b.n	8003e2a <main_print_while+0x56>
  else if(rotary_read() < 8)
 8003dfa:	f7fd fbb9 	bl	8001570 <rotary_read>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b07      	cmp	r3, #7
 8003e02:	d804      	bhi.n	8003e0e <main_print_while+0x3a>
    led_write_led(0b11, 0b01);
 8003e04:	2101      	movs	r1, #1
 8003e06:	2003      	movs	r0, #3
 8003e08:	f7fd fb54 	bl	80014b4 <led_write_led>
}
 8003e0c:	e00d      	b.n	8003e2a <main_print_while+0x56>
  else if(rotary_read() == 15)
 8003e0e:	f7fd fbaf 	bl	8001570 <rotary_read>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b0f      	cmp	r3, #15
 8003e16:	d104      	bne.n	8003e22 <main_print_while+0x4e>
    led_write_led(0b11, 0b11);
 8003e18:	2103      	movs	r1, #3
 8003e1a:	2003      	movs	r0, #3
 8003e1c:	f7fd fb4a 	bl	80014b4 <led_write_led>
}
 8003e20:	e003      	b.n	8003e2a <main_print_while+0x56>
    led_write_led(0b11, 0b00);
 8003e22:	2100      	movs	r1, #0
 8003e24:	2003      	movs	r0, #3
 8003e26:	f7fd fb45 	bl	80014b4 <led_write_led>
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	08010434 	.word	0x08010434

08003e34 <main_main>:

void main_main()
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  main_d_print();
 8003e38:	f000 f802 	bl	8003e40 <main_d_print>
	tim7_main();
	#endif
	#if D_TIM6_WHILE
	tim6_main();
	#endif
}
 8003e3c:	bf00      	nop
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <main_d_print>:

void main_d_print()
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  revision_print();
 8003e44:	f000 f8fa 	bl	800403c <revision_print>
  tim10_d_print();
 8003e48:	f001 f89c 	bl	8004f84 <tim10_d_print>
  tim7_d_print();
 8003e4c:	f001 faf8 	bl	8005440 <tim7_d_print>
  tim6_d_print();
 8003e50:	f001 f9ba 	bl	80051c8 <tim6_d_print>
}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e5c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003e5e:	e7fe      	b.n	8003e5e <Error_Handler+0x6>

08003e60 <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003e64:	2000      	movs	r0, #0
 8003e66:	f000 f827 	bl	8003eb8 <motor_enable>
}
 8003e6a:	bf00      	nop
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <motor_start>:

void motor_start()
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8003e74:	2100      	movs	r1, #0
 8003e76:	4806      	ldr	r0, [pc, #24]	; (8003e90 <motor_start+0x20>)
 8003e78:	f005 fb54 	bl	8009524 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003e7c:	2104      	movs	r1, #4
 8003e7e:	4804      	ldr	r0, [pc, #16]	; (8003e90 <motor_start+0x20>)
 8003e80:	f005 fb50 	bl	8009524 <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8003e84:	2001      	movs	r0, #1
 8003e86:	f000 f817 	bl	8003eb8 <motor_enable>
#endif
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	2000048c 	.word	0x2000048c

08003e94 <motor_stop>:

void motor_stop()
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f000 f80d 	bl	8003eb8 <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8003e9e:	2104      	movs	r1, #4
 8003ea0:	4804      	ldr	r0, [pc, #16]	; (8003eb4 <motor_stop+0x20>)
 8003ea2:	f005 fc07 	bl	80096b4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	4802      	ldr	r0, [pc, #8]	; (8003eb4 <motor_stop+0x20>)
 8003eaa:	f005 fc03 	bl	80096b4 <HAL_TIM_PWM_Stop>
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000048c 	.word	0x2000048c

08003eb8 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <motor_enable+0x28>)
 8003ed2:	701a      	strb	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	2001dd4c 	.word	0x2001dd4c

08003ee4 <motor_read_enable>:

char motor_read_enable()
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
    return enable;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <motor_read_enable+0x14>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	2001dd4c 	.word	0x2001dd4c

08003efc <motor_set>:

void motor_set(float motor_left_, float motor_right_)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	ed87 0a01 	vstr	s0, [r7, #4]
 8003f06:	edc7 0a00 	vstr	s1, [r7]
    if(motor_left_ < 0)
 8003f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f16:	d50b      	bpl.n	8003f30 <motor_set+0x34>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2104      	movs	r1, #4
 8003f1c:	4831      	ldr	r0, [pc, #196]	; (8003fe4 <motor_set+0xe8>)
 8003f1e:	f003 fe4b 	bl	8007bb8 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8003f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f26:	eef1 7a67 	vneg.f32	s15, s15
 8003f2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f2e:	e004      	b.n	8003f3a <motor_set+0x3e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8003f30:	2201      	movs	r2, #1
 8003f32:	2104      	movs	r1, #4
 8003f34:	482b      	ldr	r0, [pc, #172]	; (8003fe4 <motor_set+0xe8>)
 8003f36:	f003 fe3f 	bl	8007bb8 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8003f3a:	edd7 7a00 	vldr	s15, [r7]
 8003f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f46:	d50c      	bpl.n	8003f62 <motor_set+0x66>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f4e:	4826      	ldr	r0, [pc, #152]	; (8003fe8 <motor_set+0xec>)
 8003f50:	f003 fe32 	bl	8007bb8 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8003f54:	edd7 7a00 	vldr	s15, [r7]
 8003f58:	eef1 7a67 	vneg.f32	s15, s15
 8003f5c:	edc7 7a00 	vstr	s15, [r7]
 8003f60:	e005      	b.n	8003f6e <motor_set+0x72>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003f62:	2200      	movs	r2, #0
 8003f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f68:	481f      	ldr	r0, [pc, #124]	; (8003fe8 <motor_set+0xec>)
 8003f6a:	f003 fe25 	bl	8007bb8 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 8003f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f72:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003fec <motor_set+0xf0>
 8003f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7e:	dd01      	ble.n	8003f84 <motor_set+0x88>
 8003f80:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <motor_set+0xf4>)
 8003f82:	e000      	b.n	8003f86 <motor_set+0x8a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	607b      	str	r3, [r7, #4]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 8003f88:	edd7 7a00 	vldr	s15, [r7]
 8003f8c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003fec <motor_set+0xf0>
 8003f90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f98:	dd01      	ble.n	8003f9e <motor_set+0xa2>
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <motor_set+0xf4>)
 8003f9c:	e000      	b.n	8003fa0 <motor_set+0xa4>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	603b      	str	r3, [r7, #0]

    if(!enable)
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <motor_set+0xf8>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <motor_set+0xba>
    {
        motor_left_ = 0;
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	607b      	str	r3, [r7, #4]
        motor_right_ = 0;
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	603b      	str	r3, [r7, #0]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <motor_set+0xfc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fc2:	ee17 2a90 	vmov	r2, s15
 8003fc6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <motor_set+0xfc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	edd7 7a00 	vldr	s15, [r7]
 8003fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd4:	ee17 2a90 	vmov	r2, s15
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40020c00 	.word	0x40020c00
 8003fe8:	40020800 	.word	0x40020800
 8003fec:	447a0000 	.word	0x447a0000
 8003ff0:	447a0000 	.word	0x447a0000
 8003ff4:	2001dd4c 	.word	0x2001dd4c
 8003ff8:	2000048c 	.word	0x2000048c

08003ffc <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8004004:	1d39      	adds	r1, r7, #4
 8004006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800400a:	2201      	movs	r2, #1
 800400c:	4803      	ldr	r0, [pc, #12]	; (800401c <__io_putchar+0x20>)
 800400e:	f006 fad2 	bl	800a5b6 <HAL_UART_Transmit>
	return ch;
 8004012:	687b      	ldr	r3, [r7, #4]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20000738 	.word	0x20000738

08004020 <print_rotary_value>:

void print_rotary_value()
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8004024:	f7fd fa98 	bl	8001558 <rotary_read_value>
 8004028:	4603      	mov	r3, r0
 800402a:	4619      	mov	r1, r3
 800402c:	4802      	ldr	r0, [pc, #8]	; (8004038 <print_rotary_value+0x18>)
 800402e:	f007 fc07 	bl	800b840 <iprintf>
}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	0801047c 	.word	0x0801047c

0800403c <revision_print>:
        imu_revision_count = imu_revision_count + 1;
	}
}

void revision_print()
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
    #if IMU_REVISION
    imu_revision_print();
    #endif
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <section_length_set_sampling_time_ms>:
//! update 周期
float samplingtime_s;

//! update 周期を設定する
void section_length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	4603      	mov	r3, r0
 8004054:	80fb      	strh	r3, [r7, #6]
    samplingtime_s = samplingtime_ms / (float) 1000;
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	ee07 3a90 	vmov	s15, r3
 800405c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004060:	eddf 6a06 	vldr	s13, [pc, #24]	; 800407c <section_length_set_sampling_time_ms+0x30>
 8004064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004068:	4b05      	ldr	r3, [pc, #20]	; (8004080 <section_length_set_sampling_time_ms+0x34>)
 800406a:	edc3 7a00 	vstr	s15, [r3]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	447a0000 	.word	0x447a0000
 8004080:	2001dd54 	.word	0x2001dd54

08004084 <section_length_init>:

void section_length_init(unsigned short int samplingtime_ms)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	80fb      	strh	r3, [r7, #6]
    section_length_set_sampling_time_ms(samplingtime_ms);
 800408e:	88fb      	ldrh	r3, [r7, #6]
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff ffdb 	bl	800404c <section_length_set_sampling_time_ms>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <section_length_start>:

void section_length_start()
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	af00      	add	r7, sp, #0
    section_length_reset();
 80040a2:	f000 f80d 	bl	80040c0 <section_length_reset>
    section_length_buffer_reset();
 80040a6:	f000 f81f 	bl	80040e8 <section_length_buffer_reset>
    length_start();
 80040aa:	f7fe feaf 	bl	8002e0c <length_start>
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <section_length_stop>:

void section_length_stop()
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	af00      	add	r7, sp, #0
    length_stop();
 80040b6:	f7fe febb 	bl	8002e30 <length_stop>
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <section_length_reset>:
{
    length_fin();
}

void section_length_reset()
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
    section_length_right = 0;
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <section_length_reset+0x20>)
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
    section_length_left = 0;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <section_length_reset+0x24>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	2001dd50 	.word	0x2001dd50
 80040e4:	2001dd58 	.word	0x2001dd58

080040e8 <section_length_buffer_reset>:

void section_length_buffer_reset()
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = 0;
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <section_length_buffer_reset+0x20>)
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
    section_length_buffer_global_right = 0;
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <section_length_buffer_reset+0x24>)
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	2001dd60 	.word	0x2001dd60
 800410c:	2001dd5c 	.word	0x2001dd5c

08004110 <section_length_read>:

//! 現在点区間長を返す
float section_length_read()
{
 8004110:	b580      	push	{r7, lr}
 8004112:	ed2d 8b02 	vpush	{d8}
 8004116:	af00      	add	r7, sp, #0
    return (section_length_read_left() + section_length_read_right()) / 2;
 8004118:	f000 f814 	bl	8004144 <section_length_read_left>
 800411c:	eeb0 8a40 	vmov.f32	s16, s0
 8004120:	f000 f81e 	bl	8004160 <section_length_read_right>
 8004124:	eef0 7a40 	vmov.f32	s15, s0
 8004128:	ee78 7a27 	vadd.f32	s15, s16, s15
 800412c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004130:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004134:	eef0 7a66 	vmov.f32	s15, s13
}
 8004138:	eeb0 0a67 	vmov.f32	s0, s15
 800413c:	46bd      	mov	sp, r7
 800413e:	ecbd 8b02 	vpop	{d8}
 8004142:	bd80      	pop	{r7, pc}

08004144 <section_length_read_left>:

float section_length_read_left()
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
    return section_length_left;
 8004148:	4b04      	ldr	r3, [pc, #16]	; (800415c <section_length_read_left+0x18>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	ee07 3a90 	vmov	s15, r3
}
 8004150:	eeb0 0a67 	vmov.f32	s0, s15
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	2001dd58 	.word	0x2001dd58

08004160 <section_length_read_right>:

float section_length_read_right()
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
    return section_length_right;
 8004164:	4b04      	ldr	r3, [pc, #16]	; (8004178 <section_length_read_right+0x18>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	ee07 3a90 	vmov	s15, r3
}
 800416c:	eeb0 0a67 	vmov.f32	s0, s15
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	2001dd50 	.word	0x2001dd50

0800417c <section_length_set_buffer>:
 * }
 * 
 */
//! 区間開始点を現在点の世界長にする
void section_length_set_buffer()
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = length_read_left();
 8004180:	f7fe fe90 	bl	8002ea4 <length_read_left>
 8004184:	eef0 7a40 	vmov.f32	s15, s0
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <section_length_set_buffer+0x34>)
 800418a:	edc3 7a00 	vstr	s15, [r3]
    section_length_buffer_global_right = length_read_right();
 800418e:	f7fe fe97 	bl	8002ec0 <length_read_right>
 8004192:	eef0 7a40 	vmov.f32	s15, s0
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <section_length_set_buffer+0x38>)
 8004198:	edc3 7a00 	vstr	s15, [r3]
    section_length_left = 0;
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <section_length_set_buffer+0x3c>)
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
    section_length_right = 0;
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <section_length_set_buffer+0x40>)
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	2001dd60 	.word	0x2001dd60
 80041b4:	2001dd5c 	.word	0x2001dd5c
 80041b8:	2001dd58 	.word	0x2001dd58
 80041bc:	2001dd50 	.word	0x2001dd50

080041c0 <section_length_update>:

void section_length_update()
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
    //! 区間開始点から現在点の区間長を計算
    section_length_left = length_read_left() - section_length_buffer_global_left;
 80041c4:	f7fe fe6e 	bl	8002ea4 <length_read_left>
 80041c8:	eeb0 7a40 	vmov.f32	s14, s0
 80041cc:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <section_length_update+0x38>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <section_length_update+0x3c>)
 80041d8:	edc3 7a00 	vstr	s15, [r3]
    section_length_right = length_read_right() - section_length_buffer_global_right;
 80041dc:	f7fe fe70 	bl	8002ec0 <length_read_right>
 80041e0:	eeb0 7a40 	vmov.f32	s14, s0
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <section_length_update+0x40>)
 80041e6:	edd3 7a00 	vldr	s15, [r3]
 80041ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <section_length_update+0x44>)
 80041f0:	edc3 7a00 	vstr	s15, [r3]
}
 80041f4:	bf00      	nop
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	2001dd60 	.word	0x2001dd60
 80041fc:	2001dd58 	.word	0x2001dd58
 8004200:	2001dd5c 	.word	0x2001dd5c
 8004204:	2001dd50 	.word	0x2001dd50

08004208 <section_length_d_print>:

void section_length_d_print()
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
    #if D_SECTION_LENGTH
    printf("section_length = %10.2f\r\n", section_length_read());
    #endif
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <sidesensor_read>:
unsigned char subsensbuf, marker, sidedeltacount, rightmarkercount;
SideSensorState markerstate, markerstate_volatile;
char sidesensor_start_or_stop;

uint8_t sidesensor_read()
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 8004222:	2104      	movs	r1, #4
 8004224:	4810      	ldr	r0, [pc, #64]	; (8004268 <sidesensor_read+0x50>)
 8004226:	f003 fcaf 	bl	8007b88 <HAL_GPIO_ReadPin>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	b2da      	uxtb	r2, r3
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	4413      	add	r3, r2
 800423c:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 800423e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004242:	4809      	ldr	r0, [pc, #36]	; (8004268 <sidesensor_read+0x50>)
 8004244:	f003 fca0 	bl	8007b88 <HAL_GPIO_ReadPin>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <sidesensor_read+0x3a>
 800424e:	2302      	movs	r3, #2
 8004250:	e000      	b.n	8004254 <sidesensor_read+0x3c>
 8004252:	2300      	movs	r3, #0
 8004254:	b2da      	uxtb	r2, r3
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	4413      	add	r3, r2
 800425a:	71fb      	strb	r3, [r7, #7]

    return subsens;
 800425c:	79fb      	ldrb	r3, [r7, #7]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40020400 	.word	0x40020400

0800426c <sidesensor_init>:

void sidesensor_init()
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
	/* sidesensor_init */
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <sidesensor_start>:

void sidesensor_start()
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
    marker = 0;
 8004280:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <sidesensor_start+0x34>)
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <sidesensor_start+0x38>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <sidesensor_start+0x3c>)
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <sidesensor_start+0x40>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
	markerstate = none;
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <sidesensor_start+0x44>)
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = none;
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <sidesensor_start+0x48>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	2001dd67 	.word	0x2001dd67
 80042b4:	2001dd64 	.word	0x2001dd64
 80042b8:	2001dd65 	.word	0x2001dd65
 80042bc:	2001dd6a 	.word	0x2001dd6a
 80042c0:	2001dd66 	.word	0x2001dd66
 80042c4:	2001dd68 	.word	0x2001dd68

080042c8 <sidesensor_stop>:

void sidesensor_stop()
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 80042cc:	bf00      	nop
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <sidesensor_read_markerstate>:

SideSensorState sidesensor_read_markerstate()
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
	return markerstate;
 80042dc:	4b03      	ldr	r3, [pc, #12]	; (80042ec <sidesensor_read_markerstate+0x14>)
 80042de:	781b      	ldrb	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	2001dd66 	.word	0x2001dd66

080042f0 <sidesensor_read_markerstate_volatile>:

SideSensorState sidesensor_read_markerstate_volatile()
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
	return markerstate_volatile;
 80042f4:	4b03      	ldr	r3, [pc, #12]	; (8004304 <sidesensor_read_markerstate_volatile+0x14>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	2001dd68 	.word	0x2001dd68

08004308 <sidesensor_right>:

void sidesensor_right()
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
    if(rightmarkercount == 1 - 1)
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <sidesensor_right+0x44>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <sidesensor_right+0x1a>
    {
        // start
		markerstate_volatile = straight;
 8004314:	4b0e      	ldr	r3, [pc, #56]	; (8004350 <sidesensor_right+0x48>)
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
		markerstate = straight;
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <sidesensor_right+0x4c>)
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e009      	b.n	8004336 <sidesensor_right+0x2e>
    }
    else if(rightmarkercount == 2 - 1)
 8004322:	4b0a      	ldr	r3, [pc, #40]	; (800434c <sidesensor_right+0x44>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d105      	bne.n	8004336 <sidesensor_right+0x2e>
    {
        // stop
		markerstate_volatile = stop;
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <sidesensor_right+0x48>)
 800432c:	2203      	movs	r2, #3
 800432e:	701a      	strb	r2, [r3, #0]
		markerstate = stop;
 8004330:	4b08      	ldr	r3, [pc, #32]	; (8004354 <sidesensor_right+0x4c>)
 8004332:	2203      	movs	r2, #3
 8004334:	701a      	strb	r2, [r3, #0]
    }
    rightmarkercount++;
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <sidesensor_right+0x44>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	3301      	adds	r3, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b03      	ldr	r3, [pc, #12]	; (800434c <sidesensor_right+0x44>)
 8004340:	701a      	strb	r2, [r3, #0]
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	2001dd6a 	.word	0x2001dd6a
 8004350:	2001dd68 	.word	0x2001dd68
 8004354:	2001dd66 	.word	0x2001dd66

08004358 <sidesensor_left>:

void sidesensor_left()
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <sidesensor_left+0x1c>)
 800435e:	2204      	movs	r2, #4
 8004360:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = curve;
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <sidesensor_left+0x20>)
 8004364:	2204      	movs	r2, #4
 8004366:	701a      	strb	r2, [r3, #0]
}
 8004368:	bf00      	nop
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	2001dd66 	.word	0x2001dd66
 8004378:	2001dd68 	.word	0x2001dd68

0800437c <sidesensor_cross>:

void sidesensor_cross()
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <sidesensor_cross+0x1c>)
 8004382:	2205      	movs	r2, #5
 8004384:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = cross;
 8004386:	4b05      	ldr	r3, [pc, #20]	; (800439c <sidesensor_cross+0x20>)
 8004388:	2205      	movs	r2, #5
 800438a:	701a      	strb	r2, [r3, #0]
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	2001dd66 	.word	0x2001dd66
 800439c:	2001dd68 	.word	0x2001dd68

080043a0 <sidesensor_main>:
	markerstate = straight;
	markerstate_volatile = straight;
}

void sidesensor_main()
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 80043a6:	f7ff ff37 	bl	8004218 <sidesensor_read>
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
	markerstate_volatile = none;
 80043ae:	4b28      	ldr	r3, [pc, #160]	; (8004450 <sidesensor_main+0xb0>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]

	if(subsens != subsensbuf)
 80043b4:	4b27      	ldr	r3, [pc, #156]	; (8004454 <sidesensor_main+0xb4>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	79fa      	ldrb	r2, [r7, #7]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d044      	beq.n	8004448 <sidesensor_main+0xa8>
	{
		subsensbuf = subsens;
 80043be:	4a25      	ldr	r2, [pc, #148]	; (8004454 <sidesensor_main+0xb4>)
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 80043c4:	79fa      	ldrb	r2, [r7, #7]
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <sidesensor_main+0xb8>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	4b22      	ldr	r3, [pc, #136]	; (800445c <sidesensor_main+0xbc>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <sidesensor_main+0xbc>)
 80043dc:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d12b      	bne.n	800443c <sidesensor_main+0x9c>
 80043e4:	4b1c      	ldr	r3, [pc, #112]	; (8004458 <sidesensor_main+0xb8>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d027      	beq.n	800443c <sidesensor_main+0x9c>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <sidesensor_main+0xbc>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 80043f6:	4b19      	ldr	r3, [pc, #100]	; (800445c <sidesensor_main+0xbc>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	109b      	asrs	r3, r3, #2
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8004404:	797b      	ldrb	r3, [r7, #5]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10e      	bne.n	8004428 <sidesensor_main+0x88>
			{
				if (first == 0b01)
 800440a:	79bb      	ldrb	r3, [r7, #6]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d102      	bne.n	8004416 <sidesensor_main+0x76>
				{
					// right -> start / stop
                    sidesensor_right();
 8004410:	f7ff ff7a 	bl	8004308 <sidesensor_right>
 8004414:	e00a      	b.n	800442c <sidesensor_main+0x8c>
				}
				else if (first == 0b10)
 8004416:	79bb      	ldrb	r3, [r7, #6]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d102      	bne.n	8004422 <sidesensor_main+0x82>
				{
					// left -> curve
                    sidesensor_left();
 800441c:	f7ff ff9c 	bl	8004358 <sidesensor_left>
 8004420:	e004      	b.n	800442c <sidesensor_main+0x8c>
				}
				else
				{
					// cross
                    sidesensor_cross();
 8004422:	f7ff ffab 	bl	800437c <sidesensor_cross>
 8004426:	e001      	b.n	800442c <sidesensor_main+0x8c>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8004428:	f7ff ffa8 	bl	800437c <sidesensor_cross>
			}
			sidedeltacount = 0;
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <sidesensor_main+0xb8>)
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <sidesensor_main+0xbc>)
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
		{
 8004438:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 800443a:	e005      	b.n	8004448 <sidesensor_main+0xa8>
			sidedeltacount++;
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <sidesensor_main+0xb8>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	4b04      	ldr	r3, [pc, #16]	; (8004458 <sidesensor_main+0xb8>)
 8004446:	701a      	strb	r2, [r3, #0]
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	2001dd68 	.word	0x2001dd68
 8004454:	2001dd64 	.word	0x2001dd64
 8004458:	2001dd65 	.word	0x2001dd65
 800445c:	2001dd67 	.word	0x2001dd67

08004460 <slow_start>:
    /* slow_init */
    slow_started = 0;
}

void slow_start()
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
    /* slow_start */

    /* 初期設定されている値を一旦保存する */
    PID *slow_default_pid_pointer;
    slow_default_pid_pointer = velotrace_read_values();
 8004466:	f001 fc1d 	bl	8005ca4 <velotrace_read_values>
 800446a:	6078      	str	r0, [r7, #4]
    slow_default_pid.target = slow_default_pid_pointer -> target;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <slow_start+0x80>)
 8004472:	6013      	str	r3, [r2, #0]
    slow_default_pid_pointer = tracer_read_values();
 8004474:	f001 f9c4 	bl	8005800 <tracer_read_values>
 8004478:	6078      	str	r0, [r7, #4]
    slow_default_pid.kp = slow_default_pid_pointer->kp;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <slow_start+0x80>)
 8004480:	6053      	str	r3, [r2, #4]
    slow_default_pid.ki = slow_default_pid_pointer->ki;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <slow_start+0x80>)
 8004488:	6093      	str	r3, [r2, #8]
    slow_default_pid.kd = slow_default_pid_pointer->kd;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	4a14      	ldr	r2, [pc, #80]	; (80044e0 <slow_start+0x80>)
 8004490:	60d3      	str	r3, [r2, #12]

    /* slow 実行時の PID パラメータ */
    slow_pid.target = SLOW_VELOTRACE_TARGET;
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <slow_start+0x84>)
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <slow_start+0x88>)
 8004496:	601a      	str	r2, [r3, #0]
    slow_pid.kp = SLOW_TRACE_KP;
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <slow_start+0x84>)
 800449a:	4a14      	ldr	r2, [pc, #80]	; (80044ec <slow_start+0x8c>)
 800449c:	605a      	str	r2, [r3, #4]
    slow_pid.ki = SLOW_TRACE_KI;
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <slow_start+0x84>)
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
    slow_pid.kd = SLOW_TRACE_KD;
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <slow_start+0x84>)
 80044a8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80044ac:	60da      	str	r2, [r3, #12]

    /* 初期化 */
    length_start();
 80044ae:	f7fe fcad 	bl	8002e0c <length_start>
    tracer_start();
 80044b2:	f001 f84d 	bl	8005550 <tracer_start>
    velotrace_start();
 80044b6:	f001 fa43 	bl	8005940 <velotrace_start>
    slowinglength = 0;
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <slow_start+0x90>)
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
    slow_enable = 1;
 80044c2:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <slow_start+0x94>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
    //! スロースタートを始めたタイミングでの世界長を取り出す
    slow_start_point_global_length = length_read();
 80044c8:	f7fe fcd2 	bl	8002e70 <length_read>
 80044cc:	eef0 7a40 	vmov.f32	s15, s0
 80044d0:	4b09      	ldr	r3, [pc, #36]	; (80044f8 <slow_start+0x98>)
 80044d2:	edc3 7a00 	vstr	s15, [r3]
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	2001dd88 	.word	0x2001dd88
 80044e4:	2001dd74 	.word	0x2001dd74
 80044e8:	3e99999a 	.word	0x3e99999a
 80044ec:	40400000 	.word	0x40400000
 80044f0:	2001dd98 	.word	0x2001dd98
 80044f4:	2001dd71 	.word	0x2001dd71
 80044f8:	2001dd6c 	.word	0x2001dd6c

080044fc <slow_print_default_pid>:
{
    return sigmoid(x, SLOW_SIGMOID_A, SLOW_LENGTH / 2);
}

void slow_print_default_pid()
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
#if D_SLOW
    // printf("slow > kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", slow_default_pid.kp, slow_default_pid.ki, slow_default_pid.kd);
    printf("slow > target = %7.2f\r\n", slow_default_pid.target);
#endif
}
 8004500:	bf00      	nop
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	607b      	str	r3, [r7, #4]
 8004516:	4b12      	ldr	r3, [pc, #72]	; (8004560 <HAL_MspInit+0x54>)
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	4a11      	ldr	r2, [pc, #68]	; (8004560 <HAL_MspInit+0x54>)
 800451c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004520:	6453      	str	r3, [r2, #68]	; 0x44
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <HAL_MspInit+0x54>)
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452a:	607b      	str	r3, [r7, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_MspInit+0x54>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HAL_MspInit+0x54>)
 8004538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453c:	6413      	str	r3, [r2, #64]	; 0x40
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <HAL_MspInit+0x54>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 800454a:	2200      	movs	r2, #0
 800454c:	210f      	movs	r1, #15
 800454e:	f06f 0003 	mvn.w	r0, #3
 8004552:	f002 fa92 	bl	8006a7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004556:	bf00      	nop
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40023800 	.word	0x40023800

08004564 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08c      	sub	sp, #48	; 0x30
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456c:	f107 031c 	add.w	r3, r7, #28
 8004570:	2200      	movs	r2, #0
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	605a      	str	r2, [r3, #4]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	60da      	str	r2, [r3, #12]
 800457a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a49      	ldr	r2, [pc, #292]	; (80046a8 <HAL_ADC_MspInit+0x144>)
 8004582:	4293      	cmp	r3, r2
 8004584:	f040 808c 	bne.w	80046a0 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_ADC_MspInit+0x148>)
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	4a46      	ldr	r2, [pc, #280]	; (80046ac <HAL_ADC_MspInit+0x148>)
 8004592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004596:	6453      	str	r3, [r2, #68]	; 0x44
 8004598:	4b44      	ldr	r3, [pc, #272]	; (80046ac <HAL_ADC_MspInit+0x148>)
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	4b40      	ldr	r3, [pc, #256]	; (80046ac <HAL_ADC_MspInit+0x148>)
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	4a3f      	ldr	r2, [pc, #252]	; (80046ac <HAL_ADC_MspInit+0x148>)
 80045ae:	f043 0304 	orr.w	r3, r3, #4
 80045b2:	6313      	str	r3, [r2, #48]	; 0x30
 80045b4:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <HAL_ADC_MspInit+0x148>)
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c0:	2300      	movs	r3, #0
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	4b39      	ldr	r3, [pc, #228]	; (80046ac <HAL_ADC_MspInit+0x148>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	4a38      	ldr	r2, [pc, #224]	; (80046ac <HAL_ADC_MspInit+0x148>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	6313      	str	r3, [r2, #48]	; 0x30
 80045d0:	4b36      	ldr	r3, [pc, #216]	; (80046ac <HAL_ADC_MspInit+0x148>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	4b32      	ldr	r3, [pc, #200]	; (80046ac <HAL_ADC_MspInit+0x148>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	4a31      	ldr	r2, [pc, #196]	; (80046ac <HAL_ADC_MspInit+0x148>)
 80045e6:	f043 0302 	orr.w	r3, r3, #2
 80045ea:	6313      	str	r3, [r2, #48]	; 0x30
 80045ec:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <HAL_ADC_MspInit+0x148>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80045f8:	233f      	movs	r3, #63	; 0x3f
 80045fa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045fc:	2303      	movs	r3, #3
 80045fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004600:	2300      	movs	r3, #0
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004604:	f107 031c 	add.w	r3, r7, #28
 8004608:	4619      	mov	r1, r3
 800460a:	4829      	ldr	r0, [pc, #164]	; (80046b0 <HAL_ADC_MspInit+0x14c>)
 800460c:	f003 f920 	bl	8007850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004610:	23ff      	movs	r3, #255	; 0xff
 8004612:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004614:	2303      	movs	r3, #3
 8004616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800461c:	f107 031c 	add.w	r3, r7, #28
 8004620:	4619      	mov	r1, r3
 8004622:	4824      	ldr	r0, [pc, #144]	; (80046b4 <HAL_ADC_MspInit+0x150>)
 8004624:	f003 f914 	bl	8007850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004628:	2303      	movs	r3, #3
 800462a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800462c:	2303      	movs	r3, #3
 800462e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004630:	2300      	movs	r3, #0
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004634:	f107 031c 	add.w	r3, r7, #28
 8004638:	4619      	mov	r1, r3
 800463a:	481f      	ldr	r0, [pc, #124]	; (80046b8 <HAL_ADC_MspInit+0x154>)
 800463c:	f003 f908 	bl	8007850 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004640:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <HAL_ADC_MspInit+0x158>)
 8004642:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <HAL_ADC_MspInit+0x15c>)
 8004644:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <HAL_ADC_MspInit+0x158>)
 8004648:	2200      	movs	r2, #0
 800464a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800464c:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <HAL_ADC_MspInit+0x158>)
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <HAL_ADC_MspInit+0x158>)
 8004654:	2200      	movs	r2, #0
 8004656:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004658:	4b18      	ldr	r3, [pc, #96]	; (80046bc <HAL_ADC_MspInit+0x158>)
 800465a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800465e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004660:	4b16      	ldr	r3, [pc, #88]	; (80046bc <HAL_ADC_MspInit+0x158>)
 8004662:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004666:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004668:	4b14      	ldr	r3, [pc, #80]	; (80046bc <HAL_ADC_MspInit+0x158>)
 800466a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800466e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004670:	4b12      	ldr	r3, [pc, #72]	; (80046bc <HAL_ADC_MspInit+0x158>)
 8004672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004676:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004678:	4b10      	ldr	r3, [pc, #64]	; (80046bc <HAL_ADC_MspInit+0x158>)
 800467a:	2200      	movs	r2, #0
 800467c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <HAL_ADC_MspInit+0x158>)
 8004680:	2200      	movs	r2, #0
 8004682:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004684:	480d      	ldr	r0, [pc, #52]	; (80046bc <HAL_ADC_MspInit+0x158>)
 8004686:	f002 fa2f 	bl	8006ae8 <HAL_DMA_Init>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8004690:	f7ff fbe2 	bl	8003e58 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <HAL_ADC_MspInit+0x158>)
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
 800469a:	4a08      	ldr	r2, [pc, #32]	; (80046bc <HAL_ADC_MspInit+0x158>)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80046a0:	bf00      	nop
 80046a2:	3730      	adds	r7, #48	; 0x30
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40012000 	.word	0x40012000
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40020800 	.word	0x40020800
 80046b4:	40020000 	.word	0x40020000
 80046b8:	40020400 	.word	0x40020400
 80046bc:	20000648 	.word	0x20000648
 80046c0:	40026410 	.word	0x40026410

080046c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08a      	sub	sp, #40	; 0x28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046cc:	f107 0314 	add.w	r3, r7, #20
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	609a      	str	r2, [r3, #8]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a19      	ldr	r2, [pc, #100]	; (8004748 <HAL_I2C_MspInit+0x84>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d12c      	bne.n	8004740 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
 80046ea:	4b18      	ldr	r3, [pc, #96]	; (800474c <HAL_I2C_MspInit+0x88>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_I2C_MspInit+0x88>)
 80046f0:	f043 0302 	orr.w	r3, r3, #2
 80046f4:	6313      	str	r3, [r2, #48]	; 0x30
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <HAL_I2C_MspInit+0x88>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004708:	2312      	movs	r3, #18
 800470a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800470c:	2301      	movs	r3, #1
 800470e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004710:	2303      	movs	r3, #3
 8004712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004714:	2304      	movs	r3, #4
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004718:	f107 0314 	add.w	r3, r7, #20
 800471c:	4619      	mov	r1, r3
 800471e:	480c      	ldr	r0, [pc, #48]	; (8004750 <HAL_I2C_MspInit+0x8c>)
 8004720:	f003 f896 	bl	8007850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004724:	2300      	movs	r3, #0
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <HAL_I2C_MspInit+0x88>)
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	4a07      	ldr	r2, [pc, #28]	; (800474c <HAL_I2C_MspInit+0x88>)
 800472e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004732:	6413      	str	r3, [r2, #64]	; 0x40
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_I2C_MspInit+0x88>)
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004740:	bf00      	nop
 8004742:	3728      	adds	r7, #40	; 0x28
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40005400 	.word	0x40005400
 800474c:	40023800 	.word	0x40023800
 8004750:	40020400 	.word	0x40020400

08004754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800475c:	f107 0314 	add.w	r3, r7, #20
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_SPI_MspInit+0x84>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d12c      	bne.n	80047d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	4b18      	ldr	r3, [pc, #96]	; (80047dc <HAL_SPI_MspInit+0x88>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	4a17      	ldr	r2, [pc, #92]	; (80047dc <HAL_SPI_MspInit+0x88>)
 8004780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
 8004786:	4b15      	ldr	r3, [pc, #84]	; (80047dc <HAL_SPI_MspInit+0x88>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <HAL_SPI_MspInit+0x88>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479a:	4a10      	ldr	r2, [pc, #64]	; (80047dc <HAL_SPI_MspInit+0x88>)
 800479c:	f043 0302 	orr.w	r3, r3, #2
 80047a0:	6313      	str	r3, [r2, #48]	; 0x30
 80047a2:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <HAL_SPI_MspInit+0x88>)
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80047ae:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80047b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b4:	2302      	movs	r3, #2
 80047b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047bc:	2303      	movs	r3, #3
 80047be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80047c0:	2305      	movs	r3, #5
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c4:	f107 0314 	add.w	r3, r7, #20
 80047c8:	4619      	mov	r1, r3
 80047ca:	4805      	ldr	r0, [pc, #20]	; (80047e0 <HAL_SPI_MspInit+0x8c>)
 80047cc:	f003 f840 	bl	8007850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80047d0:	bf00      	nop
 80047d2:	3728      	adds	r7, #40	; 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40003800 	.word	0x40003800
 80047dc:	40023800 	.word	0x40023800
 80047e0:	40020400 	.word	0x40020400

080047e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08c      	sub	sp, #48	; 0x30
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ec:	f107 031c 	add.w	r3, r7, #28
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	605a      	str	r2, [r3, #4]
 80047f6:	609a      	str	r2, [r3, #8]
 80047f8:	60da      	str	r2, [r3, #12]
 80047fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a3e      	ldr	r2, [pc, #248]	; (80048fc <HAL_TIM_Encoder_MspInit+0x118>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d13d      	bne.n	8004882 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	4b3d      	ldr	r3, [pc, #244]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	4a3c      	ldr	r2, [pc, #240]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6453      	str	r3, [r2, #68]	; 0x44
 8004816:	4b3a      	ldr	r3, [pc, #232]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	4b36      	ldr	r3, [pc, #216]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	4a35      	ldr	r2, [pc, #212]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	6313      	str	r3, [r2, #48]	; 0x30
 8004832:	4b33      	ldr	r3, [pc, #204]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 800483e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004844:	2302      	movs	r3, #2
 8004846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004848:	2300      	movs	r3, #0
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484c:	2300      	movs	r3, #0
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004850:	2301      	movs	r3, #1
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004854:	f107 031c 	add.w	r3, r7, #28
 8004858:	4619      	mov	r1, r3
 800485a:	482a      	ldr	r0, [pc, #168]	; (8004904 <HAL_TIM_Encoder_MspInit+0x120>)
 800485c:	f002 fff8 	bl	8007850 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8004860:	2200      	movs	r2, #0
 8004862:	2101      	movs	r1, #1
 8004864:	2019      	movs	r0, #25
 8004866:	f002 f908 	bl	8006a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800486a:	2019      	movs	r0, #25
 800486c:	f002 f921 	bl	8006ab2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8004870:	2200      	movs	r2, #0
 8004872:	2101      	movs	r1, #1
 8004874:	201a      	movs	r0, #26
 8004876:	f002 f900 	bl	8006a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800487a:	201a      	movs	r0, #26
 800487c:	f002 f919 	bl	8006ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004880:	e038      	b.n	80048f4 <HAL_TIM_Encoder_MspInit+0x110>
  else if(htim_encoder->Instance==TIM3)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a20      	ldr	r2, [pc, #128]	; (8004908 <HAL_TIM_Encoder_MspInit+0x124>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d133      	bne.n	80048f4 <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	4a1a      	ldr	r2, [pc, #104]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 8004896:	f043 0302 	orr.w	r3, r3, #2
 800489a:	6413      	str	r3, [r2, #64]	; 0x40
 800489c:	4b18      	ldr	r3, [pc, #96]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	4b14      	ldr	r3, [pc, #80]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	4a13      	ldr	r2, [pc, #76]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 80048b2:	f043 0302 	orr.w	r3, r3, #2
 80048b6:	6313      	str	r3, [r2, #48]	; 0x30
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_TIM_Encoder_MspInit+0x11c>)
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 80048c4:	2330      	movs	r3, #48	; 0x30
 80048c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c8:	2302      	movs	r3, #2
 80048ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80048d4:	2302      	movs	r3, #2
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d8:	f107 031c 	add.w	r3, r7, #28
 80048dc:	4619      	mov	r1, r3
 80048de:	480b      	ldr	r0, [pc, #44]	; (800490c <HAL_TIM_Encoder_MspInit+0x128>)
 80048e0:	f002 ffb6 	bl	8007850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80048e4:	2200      	movs	r2, #0
 80048e6:	2101      	movs	r1, #1
 80048e8:	201d      	movs	r0, #29
 80048ea:	f002 f8c6 	bl	8006a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048ee:	201d      	movs	r0, #29
 80048f0:	f002 f8df 	bl	8006ab2 <HAL_NVIC_EnableIRQ>
}
 80048f4:	bf00      	nop
 80048f6:	3730      	adds	r7, #48	; 0x30
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40010000 	.word	0x40010000
 8004900:	40023800 	.word	0x40023800
 8004904:	40020000 	.word	0x40020000
 8004908:	40000400 	.word	0x40000400
 800490c:	40020400 	.word	0x40020400

08004910 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <HAL_TIM_PWM_MspInit+0x48>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d115      	bne.n	800494e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <HAL_TIM_PWM_MspInit+0x4c>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	4a0c      	ldr	r2, [pc, #48]	; (800495c <HAL_TIM_PWM_MspInit+0x4c>)
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	6413      	str	r3, [r2, #64]	; 0x40
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <HAL_TIM_PWM_MspInit+0x4c>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800493e:	2200      	movs	r2, #0
 8004940:	2101      	movs	r1, #1
 8004942:	201e      	movs	r0, #30
 8004944:	f002 f899 	bl	8006a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004948:	201e      	movs	r0, #30
 800494a:	f002 f8b2 	bl	8006ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40000800 	.word	0x40000800
 800495c:	40023800 	.word	0x40023800

08004960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a42      	ldr	r2, [pc, #264]	; (8004a78 <HAL_TIM_Base_MspInit+0x118>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d116      	bne.n	80049a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	4b41      	ldr	r3, [pc, #260]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	4a40      	ldr	r2, [pc, #256]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 800497c:	f043 0310 	orr.w	r3, r3, #16
 8004980:	6413      	str	r3, [r2, #64]	; 0x40
 8004982:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800498e:	2200      	movs	r2, #0
 8004990:	2101      	movs	r1, #1
 8004992:	2036      	movs	r0, #54	; 0x36
 8004994:	f002 f871 	bl	8006a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004998:	2036      	movs	r0, #54	; 0x36
 800499a:	f002 f88a 	bl	8006ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800499e:	e066      	b.n	8004a6e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a36      	ldr	r2, [pc, #216]	; (8004a80 <HAL_TIM_Base_MspInit+0x120>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d116      	bne.n	80049d8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	4b33      	ldr	r3, [pc, #204]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	4a32      	ldr	r2, [pc, #200]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 80049b4:	f043 0320 	orr.w	r3, r3, #32
 80049b8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ba:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80049c6:	2200      	movs	r2, #0
 80049c8:	2101      	movs	r1, #1
 80049ca:	2037      	movs	r0, #55	; 0x37
 80049cc:	f002 f855 	bl	8006a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80049d0:	2037      	movs	r0, #55	; 0x37
 80049d2:	f002 f86e 	bl	8006ab2 <HAL_NVIC_EnableIRQ>
}
 80049d6:	e04a      	b.n	8004a6e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <HAL_TIM_Base_MspInit+0x124>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d116      	bne.n	8004a10 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	4a24      	ldr	r2, [pc, #144]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 80049ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049f0:	6453      	str	r3, [r2, #68]	; 0x44
 80049f2:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80049fe:	2200      	movs	r2, #0
 8004a00:	2101      	movs	r1, #1
 8004a02:	2019      	movs	r0, #25
 8004a04:	f002 f839 	bl	8006a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004a08:	2019      	movs	r0, #25
 8004a0a:	f002 f852 	bl	8006ab2 <HAL_NVIC_EnableIRQ>
}
 8004a0e:	e02e      	b.n	8004a6e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a1c      	ldr	r2, [pc, #112]	; (8004a88 <HAL_TIM_Base_MspInit+0x128>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d116      	bne.n	8004a48 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	4a16      	ldr	r2, [pc, #88]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 8004a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a28:	6453      	str	r3, [r2, #68]	; 0x44
 8004a2a:	4b14      	ldr	r3, [pc, #80]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 1, 0);
 8004a36:	2200      	movs	r2, #0
 8004a38:	2101      	movs	r1, #1
 8004a3a:	201a      	movs	r0, #26
 8004a3c:	f002 f81d 	bl	8006a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004a40:	201a      	movs	r0, #26
 8004a42:	f002 f836 	bl	8006ab2 <HAL_NVIC_EnableIRQ>
}
 8004a46:	e012      	b.n	8004a6e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a0f      	ldr	r2, [pc, #60]	; (8004a8c <HAL_TIM_Base_MspInit+0x12c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10d      	bne.n	8004a6e <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 8004a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a60:	6413      	str	r3, [r2, #64]	; 0x40
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_TIM_Base_MspInit+0x11c>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	bf00      	nop
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40001000 	.word	0x40001000
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40001400 	.word	0x40001400
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014800 	.word	0x40014800
 8004a8c:	40002000 	.word	0x40002000

08004a90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	f107 030c 	add.w	r3, r7, #12
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <HAL_TIM_MspPostInit+0x68>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d11d      	bne.n	8004aee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_TIM_MspPostInit+0x6c>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	4a10      	ldr	r2, [pc, #64]	; (8004afc <HAL_TIM_MspPostInit+0x6c>)
 8004abc:	f043 0302 	orr.w	r3, r3, #2
 8004ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <HAL_TIM_MspPostInit+0x6c>)
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8004ace:	23c0      	movs	r3, #192	; 0xc0
 8004ad0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ae2:	f107 030c 	add.w	r3, r7, #12
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4805      	ldr	r0, [pc, #20]	; (8004b00 <HAL_TIM_MspPostInit+0x70>)
 8004aea:	f002 feb1 	bl	8007850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004aee:	bf00      	nop
 8004af0:	3720      	adds	r7, #32
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40000800 	.word	0x40000800
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40020400 	.word	0x40020400

08004b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b08a      	sub	sp, #40	; 0x28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0c:	f107 0314 	add.w	r3, r7, #20
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	605a      	str	r2, [r3, #4]
 8004b16:	609a      	str	r2, [r3, #8]
 8004b18:	60da      	str	r2, [r3, #12]
 8004b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <HAL_UART_MspInit+0x84>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d12b      	bne.n	8004b7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <HAL_UART_MspInit+0x88>)
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2e:	4a17      	ldr	r2, [pc, #92]	; (8004b8c <HAL_UART_MspInit+0x88>)
 8004b30:	f043 0320 	orr.w	r3, r3, #32
 8004b34:	6453      	str	r3, [r2, #68]	; 0x44
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <HAL_UART_MspInit+0x88>)
 8004b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	4b11      	ldr	r3, [pc, #68]	; (8004b8c <HAL_UART_MspInit+0x88>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <HAL_UART_MspInit+0x88>)
 8004b4c:	f043 0304 	orr.w	r3, r3, #4
 8004b50:	6313      	str	r3, [r2, #48]	; 0x30
 8004b52:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <HAL_UART_MspInit+0x88>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b5e:	23c0      	movs	r3, #192	; 0xc0
 8004b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b62:	2302      	movs	r3, #2
 8004b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004b6e:	2308      	movs	r3, #8
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	4619      	mov	r1, r3
 8004b78:	4805      	ldr	r0, [pc, #20]	; (8004b90 <HAL_UART_MspInit+0x8c>)
 8004b7a:	f002 fe69 	bl	8007850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004b7e:	bf00      	nop
 8004b80:	3728      	adds	r7, #40	; 0x28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40011400 	.word	0x40011400
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40020800 	.word	0x40020800

08004b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b98:	e7fe      	b.n	8004b98 <NMI_Handler+0x4>

08004b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b9e:	e7fe      	b.n	8004b9e <HardFault_Handler+0x4>

08004ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ba4:	e7fe      	b.n	8004ba4 <MemManage_Handler+0x4>

08004ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004baa:	e7fe      	b.n	8004baa <BusFault_Handler+0x4>

08004bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bb0:	e7fe      	b.n	8004bb0 <UsageFault_Handler+0x4>

08004bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bd2:	bf00      	nop
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004be0:	f001 f9cc 	bl	8005f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004be4:	bf00      	nop
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004bec:	4803      	ldr	r0, [pc, #12]	; (8004bfc <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004bee:	f004 ff9c 	bl	8009b2a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004bf2:	4803      	ldr	r0, [pc, #12]	; (8004c00 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004bf4:	f004 ff99 	bl	8009b2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004bf8:	bf00      	nop
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	200006f0 	.word	0x200006f0
 8004c00:	20000528 	.word	0x20000528

08004c04 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c08:	4803      	ldr	r0, [pc, #12]	; (8004c18 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004c0a:	f004 ff8e 	bl	8009b2a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004c0e:	4803      	ldr	r0, [pc, #12]	; (8004c1c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004c10:	f004 ff8b 	bl	8009b2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004c14:	bf00      	nop
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	200006f0 	.word	0x200006f0
 8004c1c:	20000600 	.word	0x20000600

08004c20 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004c24:	4802      	ldr	r0, [pc, #8]	; (8004c30 <TIM3_IRQHandler+0x10>)
 8004c26:	f004 ff80 	bl	8009b2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004c2a:	bf00      	nop
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000570 	.word	0x20000570

08004c34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004c38:	4802      	ldr	r0, [pc, #8]	; (8004c44 <TIM4_IRQHandler+0x10>)
 8004c3a:	f004 ff76 	bl	8009b2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	2000048c 	.word	0x2000048c

08004c48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c4c:	4802      	ldr	r0, [pc, #8]	; (8004c58 <TIM6_DAC_IRQHandler+0x10>)
 8004c4e:	f004 ff6c 	bl	8009b2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	200006a8 	.word	0x200006a8

08004c5c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004c60:	4802      	ldr	r0, [pc, #8]	; (8004c6c <TIM7_IRQHandler+0x10>)
 8004c62:	f004 ff62 	bl	8009b2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004c66:	bf00      	nop
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200007c4 	.word	0x200007c4

08004c70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c74:	4802      	ldr	r0, [pc, #8]	; (8004c80 <DMA2_Stream0_IRQHandler+0x10>)
 8004c76:	f002 f8ad 	bl	8006dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000648 	.word	0x20000648

08004c84 <_read>:
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e00a      	b.n	8004cac <_read+0x28>
 8004c96:	f3af 8000 	nop.w
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	60ba      	str	r2, [r7, #8]
 8004ca2:	b2ca      	uxtb	r2, r1
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	dbf0      	blt.n	8004c96 <_read+0x12>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <_write>:
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b086      	sub	sp, #24
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e009      	b.n	8004ce4 <_write+0x26>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	60ba      	str	r2, [r7, #8]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff f98f 	bl	8003ffc <__io_putchar>
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	dbf1      	blt.n	8004cd0 <_write+0x12>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <_close>:
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <_fstat>:
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d1e:	605a      	str	r2, [r3, #4]
 8004d20:	2300      	movs	r3, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <_isatty>:
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	2301      	movs	r3, #1
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <_lseek>:
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	2300      	movs	r3, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
	...

08004d60 <_sbrk>:
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	4a14      	ldr	r2, [pc, #80]	; (8004dbc <_sbrk+0x5c>)
 8004d6a:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <_sbrk+0x60>)
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <_sbrk+0x64>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <_sbrk+0x22>
 8004d7c:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <_sbrk+0x64>)
 8004d7e:	4a12      	ldr	r2, [pc, #72]	; (8004dc8 <_sbrk+0x68>)
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <_sbrk+0x64>)
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4413      	add	r3, r2
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d207      	bcs.n	8004da0 <_sbrk+0x40>
 8004d90:	f005 feda 	bl	800ab48 <__errno>
 8004d94:	4603      	mov	r3, r0
 8004d96:	220c      	movs	r2, #12
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9e:	e009      	b.n	8004db4 <_sbrk+0x54>
 8004da0:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <_sbrk+0x64>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <_sbrk+0x64>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4413      	add	r3, r2
 8004dae:	4a05      	ldr	r2, [pc, #20]	; (8004dc4 <_sbrk+0x64>)
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20020000 	.word	0x20020000
 8004dc0:	00000400 	.word	0x00000400
 8004dc4:	20000200 	.word	0x20000200
 8004dc8:	2001de50 	.word	0x2001de50

08004dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <SystemInit+0x28>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <SystemInit+0x28>)
 8004dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004de0:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <SystemInit+0x28>)
 8004de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004de6:	609a      	str	r2, [r3, #8]
#endif
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	e000ed00 	.word	0xe000ed00

08004df8 <tim10_init>:
float samplingtime_s;
uint32_t __debug_tim10_count__, __debug_tim10_count_2__;

/* only use in main.c */
void tim10_init()
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
	samplingtime_s = TIM10_TIME_MS / (float) 1000;
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	; (8004e3c <tim10_init+0x44>)
 8004dfe:	4a10      	ldr	r2, [pc, #64]	; (8004e40 <tim10_init+0x48>)
 8004e00:	601a      	str	r2, [r3, #0]
	samplingtime_ms = TIM10_TIME_MS;
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <tim10_init+0x4c>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
	length_init(samplingtime_ms);
 8004e08:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <tim10_init+0x4c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fd ffe8 	bl	8002de4 <length_init>
	section_length_init(samplingtime_ms);
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <tim10_init+0x4c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff f932 	bl	8004084 <section_length_init>
	course_init(samplingtime_ms);
 8004e20:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <tim10_init+0x4c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fc ff90 	bl	8001d4c <course_init>
	velotrace_init(1);
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	f000 fd71 	bl	8005914 <velotrace_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8004e32:	4805      	ldr	r0, [pc, #20]	; (8004e48 <tim10_init+0x50>)
 8004e34:	f004 faf8 	bl	8009428 <HAL_TIM_Base_Stop_IT>
}
 8004e38:	bf00      	nop
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	2001dd54 	.word	0x2001dd54
 8004e40:	3a83126f 	.word	0x3a83126f
 8004e44:	2001ddb0 	.word	0x2001ddb0
 8004e48:	20000528 	.word	0x20000528

08004e4c <tim10_start>:

void tim10_start()
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
	tim10_left = 0;
 8004e50:	4b10      	ldr	r3, [pc, #64]	; (8004e94 <tim10_start+0x48>)
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
	tim10_right = 0;
 8004e58:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <tim10_start+0x4c>)
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
	__debug_tim10_count__ = 0;
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <tim10_start+0x50>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
	__debug_tim10_count_2__ = 0;
 8004e66:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <tim10_start+0x54>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
	course_start();
 8004e6c:	f7fc ff82 	bl	8001d74 <course_start>
	length_start();
 8004e70:	f7fd ffcc 	bl	8002e0c <length_start>
	section_length_start();
 8004e74:	f7ff f913 	bl	800409e <section_length_start>
	velotrace_start();
 8004e78:	f000 fd62 	bl	8005940 <velotrace_start>
	slow_start(velotrace_read_values());
 8004e7c:	f000 ff12 	bl	8005ca4 <velotrace_read_values>
 8004e80:	4603      	mov	r3, r0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff faec 	bl	8004460 <slow_start>
	HAL_TIM_Base_Start_IT(&htim10);
 8004e88:	4806      	ldr	r0, [pc, #24]	; (8004ea4 <tim10_start+0x58>)
 8004e8a:	f004 fa5d 	bl	8009348 <HAL_TIM_Base_Start_IT>
}
 8004e8e:	bf00      	nop
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	2001dda8 	.word	0x2001dda8
 8004e98:	2001ddb4 	.word	0x2001ddb4
 8004e9c:	2001dd9c 	.word	0x2001dd9c
 8004ea0:	2001dda4 	.word	0x2001dda4
 8004ea4:	20000528 	.word	0x20000528

08004ea8 <tim10_stop>:

void tim10_stop()
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 8004eac:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <tim10_stop+0x20>)
 8004eae:	f004 fabb 	bl	8009428 <HAL_TIM_Base_Stop_IT>
	velotrace_stop();
 8004eb2:	f000 fdeb 	bl	8005a8c <velotrace_stop>
	section_length_stop();
 8004eb6:	f7ff f8fc 	bl	80040b2 <section_length_stop>
	length_stop();
 8004eba:	f7fd ffb9 	bl	8002e30 <length_stop>
	course_stop();
 8004ebe:	f7fc ff8d 	bl	8001ddc <course_stop>
}
 8004ec2:	bf00      	nop
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000528 	.word	0x20000528

08004ecc <tim10_main>:
	section_length_fin();
	HAL_TIM_Base_Stop_IT(&htim10);
}

void tim10_main()
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
	PlayMode rrpm;
	//! 角度をアップデートし続ける
	course_update_section_degree();
 8004ed2:	f7fc ffa5 	bl	8001e20 <course_update_section_degree>
	//! 長さをアップデートし続ける
	length_update();
 8004ed6:	f7fe f837 	bl	8002f48 <length_update>
	//! 区間長をアップデートし続ける
	section_length_update();
 8004eda:	f7ff f971 	bl	80041c0 <section_length_update>
	//! 速度制御の指令値をアップデートし続ける
	tim10_update_values();
 8004ede:	f000 f81b 	bl	8004f18 <tim10_update_values>
	rrpm = rotary_read_playmode();
 8004ee2:	f7fc fb21 	bl	8001528 <rotary_read_playmode>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
	__debug_tim10_count_2__ = __debug_tim10_count_2__ + 1;
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <tim10_main+0x48>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	4a08      	ldr	r2, [pc, #32]	; (8004f14 <tim10_main+0x48>)
 8004ef2:	6013      	str	r3, [r2, #0]
			course_state_function();
			__debug_tim10_count__ = __debug_tim10_count__ + 1;
		}
	}
#endif
	if(rotary_read_playmode() == velotrace_tuning_2)
 8004ef4:	f7fc fb18 	bl	8001528 <rotary_read_playmode>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b07      	cmp	r3, #7
 8004efc:	d106      	bne.n	8004f0c <tim10_main+0x40>
	{
		if(virtual_marker_read_markerstate() == straight)
 8004efe:	f000 ffa1 	bl	8005e44 <virtual_marker_read_markerstate>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <tim10_main+0x40>
		{
			velotrace_gain_tuning();
 8004f08:	f000 ff4c 	bl	8005da4 <velotrace_gain_tuning>
		}
	}
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	2001dda4 	.word	0x2001dda4

08004f18 <tim10_update_values>:

//! tim10_main でのみ呼び出されるべき関数
//! 速度制御の指令値を更新する
void tim10_update_values()
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
	{
		slow_main();
	}
#endif

	tim10_left  = velotrace_solve(velocity_read());
 8004f1c:	f7fd ffde 	bl	8002edc <velocity_read>
 8004f20:	eef0 7a40 	vmov.f32	s15, s0
 8004f24:	eeb0 0a67 	vmov.f32	s0, s15
 8004f28:	f000 fec6 	bl	8005cb8 <velotrace_solve>
 8004f2c:	eef0 7a40 	vmov.f32	s15, s0
 8004f30:	4b04      	ldr	r3, [pc, #16]	; (8004f44 <tim10_update_values+0x2c>)
 8004f32:	edc3 7a00 	vstr	s15, [r3]
	tim10_right = tim10_left;
 8004f36:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <tim10_update_values+0x2c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a03      	ldr	r2, [pc, #12]	; (8004f48 <tim10_update_values+0x30>)
 8004f3c:	6013      	str	r3, [r2, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	2001dda8 	.word	0x2001dda8
 8004f48:	2001ddb4 	.word	0x2001ddb4

08004f4c <tim10_read_left>:

float tim10_read_left()
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
	return tim10_left;
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <tim10_read_left+0x18>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	ee07 3a90 	vmov	s15, r3
}
 8004f58:	eeb0 0a67 	vmov.f32	s0, s15
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	2001dda8 	.word	0x2001dda8

08004f68 <tim10_read_right>:

float tim10_read_right()
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
	return tim10_right;
 8004f6c:	4b04      	ldr	r3, [pc, #16]	; (8004f80 <tim10_read_right+0x18>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	ee07 3a90 	vmov	s15, r3
}
 8004f74:	eeb0 0a67 	vmov.f32	s0, s15
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	2001ddb4 	.word	0x2001ddb4

08004f84 <tim10_d_print>:

void tim10_d_print()
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
#if D_TIM10
	// printf("tim10_left = %f, tim10_right = %f\r\n", tim10_left, tim10_right);
	printf("__debug_tim10_count  __ = %16ld\r\n__debug_tim10_count_2__ = %16ld\r\n", __debug_tim10_count__, __debug_tim10_count_2__);
#endif
	length_d_print();
 8004f88:	f7fe f82c 	bl	8002fe4 <length_d_print>
	course_d_print();
 8004f8c:	f7fd f896 	bl	80020bc <course_d_print>
	velotrace_print_values();
 8004f90:	f000 ff00 	bl	8005d94 <velotrace_print_values>
	section_length_d_print();
 8004f94:	f7ff f938 	bl	8004208 <section_length_d_print>
	slow_print_default_pid();
 8004f98:	f7ff fab0 	bl	80044fc <slow_print_default_pid>
}
 8004f9c:	bf00      	nop
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
    switch_init();
 8004fa4:	f7fc fbc0 	bl	8001728 <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8004fa8:	4803      	ldr	r0, [pc, #12]	; (8004fb8 <tim11_init+0x18>)
 8004faa:	f004 f9cd 	bl	8009348 <HAL_TIM_Base_Start_IT>
    rotary_init();
 8004fae:	f7fc faa7 	bl	8001500 <rotary_init>
}
 8004fb2:	bf00      	nop
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000600 	.word	0x20000600

08004fbc <tim11_main>:

void tim11_main()
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
    //! 1ms
    time_update_ms(1);
 8004fc0:	2001      	movs	r0, #1
 8004fc2:	f000 fa65 	bl	8005490 <time_update_ms>
    switch_enter();
 8004fc6:	f7fc fbfe 	bl	80017c6 <switch_enter>
    rotary_set_value();
 8004fca:	f7fc fab9 	bl	8001540 <rotary_set_value>
}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <tim6_init>:

SideSensorState tim6_markerstate_before;
uint8_t debug_num;

void tim6_init()
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
    motor_init();
 8004fd8:	f7fe ff42 	bl	8003e60 <motor_init>
    virtual_marker_init();
 8004fdc:	f000 ff02 	bl	8005de4 <virtual_marker_init>
    HAL_TIM_Base_Stop_IT(&htim6);
 8004fe0:	4803      	ldr	r0, [pc, #12]	; (8004ff0 <tim6_init+0x1c>)
 8004fe2:	f004 fa21 	bl	8009428 <HAL_TIM_Base_Stop_IT>
    debug_num = 0;
 8004fe6:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <tim6_init+0x20>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
}
 8004fec:	bf00      	nop
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	200006a8 	.word	0x200006a8
 8004ff4:	2001ddb9 	.word	0x2001ddb9

08004ff8 <tim6_start>:

void tim6_start()
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
#if D_TIM6
    leftmotor = 0;
    rightmotor = 0;
#endif
    virtual_marker_start();
 8004ffc:	f000 fef8 	bl	8005df0 <virtual_marker_start>
    fixed_section_start();
 8005000:	f7fd fd70 	bl	8002ae4 <fixed_section_start>
    motor_start();
 8005004:	f7fe ff34 	bl	8003e70 <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8005008:	4805      	ldr	r0, [pc, #20]	; (8005020 <tim6_start+0x28>)
 800500a:	f004 f99d 	bl	8009348 <HAL_TIM_Base_Start_IT>
    debug_num += 0b1;
 800500e:	4b05      	ldr	r3, [pc, #20]	; (8005024 <tim6_start+0x2c>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	3301      	adds	r3, #1
 8005014:	b2da      	uxtb	r2, r3
 8005016:	4b03      	ldr	r3, [pc, #12]	; (8005024 <tim6_start+0x2c>)
 8005018:	701a      	strb	r2, [r3, #0]
}
 800501a:	bf00      	nop
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	200006a8 	.word	0x200006a8
 8005024:	2001ddb9 	.word	0x2001ddb9

08005028 <tim6_stop>:

void tim6_stop()
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
    motor_stop();
 800502c:	f7fe ff32 	bl	8003e94 <motor_stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 8005030:	4807      	ldr	r0, [pc, #28]	; (8005050 <tim6_stop+0x28>)
 8005032:	f004 f9f9 	bl	8009428 <HAL_TIM_Base_Stop_IT>
    course_stop();
 8005036:	f7fc fed1 	bl	8001ddc <course_stop>
    virtual_marker_stop();
 800503a:	f000 fee9 	bl	8005e10 <virtual_marker_stop>
    debug_num += 0b10;
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <tim6_stop+0x2c>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	3302      	adds	r3, #2
 8005044:	b2da      	uxtb	r2, r3
 8005046:	4b03      	ldr	r3, [pc, #12]	; (8005054 <tim6_stop+0x2c>)
 8005048:	701a      	strb	r2, [r3, #0]
}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	200006a8 	.word	0x200006a8
 8005054:	2001ddb9 	.word	0x2001ddb9

08005058 <tim6_main>:

void tim6_main()
{
 8005058:	b580      	push	{r7, lr}
 800505a:	ed2d 8b02 	vpush	{d8}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
    #endif
    SideSensorState markerstate;
    SideSensorState markerstate_volatile;
    PlayMode playmode;

    playmode = rotary_read_playmode();
 8005062:	f7fc fa61 	bl	8001528 <rotary_read_playmode>
 8005066:	4603      	mov	r3, r0
 8005068:	71fb      	strb	r3, [r7, #7]

    //! コース状態の把握
    //! ここ以降 virtual_marker_read_markerstate() / virtual_marker_read_markerstate_volatile() で読みだせる
    virtual_marker_main();
 800506a:	f000 fec9 	bl	8005e00 <virtual_marker_main>
    //! 格納されるのは直前のマーカの状態であり、区間中はリセットされないことに注意すべし！
    markerstate = virtual_marker_read_markerstate();
 800506e:	f000 fee9 	bl	8005e44 <virtual_marker_read_markerstate>
 8005072:	4603      	mov	r3, r0
 8005074:	71bb      	strb	r3, [r7, #6]
    //! 格納されるのは現在マーカを読んだか読んでないか、次に virtual_marker_main() が来た時に変化することに注意
    markerstate_volatile = virtual_marker_read_markerstate_volatile();
 8005076:	f000 fef1 	bl	8005e5c <virtual_marker_read_markerstate_volatile>
 800507a:	4603      	mov	r3, r0
 800507c:	717b      	strb	r3, [r7, #5]

    debug_num = 0;
 800507e:	4b4f      	ldr	r3, [pc, #316]	; (80051bc <tim6_main+0x164>)
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
    debug_num += 0b100;
 8005084:	4b4d      	ldr	r3, [pc, #308]	; (80051bc <tim6_main+0x164>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	3304      	adds	r3, #4
 800508a:	b2da      	uxtb	r2, r3
 800508c:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <tim6_main+0x164>)
 800508e:	701a      	strb	r2, [r3, #0]
    if(motor_read_enable() && playmode != motor_free)
 8005090:	f7fe ff28 	bl	8003ee4 <motor_read_enable>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d05e      	beq.n	8005158 <tim6_main+0x100>
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	2b04      	cmp	r3, #4
 800509e:	d05b      	beq.n	8005158 <tim6_main+0x100>
    {
        #if !(TRACER_TUNING || VELOTRACE_TUNING)
        switch(playmode)
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d002      	beq.n	80050ac <tim6_main+0x54>
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d01b      	beq.n	80050e2 <tim6_main+0x8a>
 80050aa:	e035      	b.n	8005118 <tim6_main+0xc0>
        {
            case tracer_tuning:
                leftmotor   = 0 + tim7_read_left();
 80050ac:	f000 f9ac 	bl	8005408 <tim7_read_left>
 80050b0:	eeb0 7a40 	vmov.f32	s14, s0
 80050b4:	eddf 7a42 	vldr	s15, [pc, #264]	; 80051c0 <tim6_main+0x168>
 80050b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050bc:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = 0 + tim7_read_right();
 80050c0:	f000 f9b0 	bl	8005424 <tim7_read_right>
 80050c4:	eeb0 7a40 	vmov.f32	s14, s0
 80050c8:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80051c0 <tim6_main+0x168>
 80050cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050d0:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b1000;
 80050d4:	4b39      	ldr	r3, [pc, #228]	; (80051bc <tim6_main+0x164>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	3308      	adds	r3, #8
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	4b37      	ldr	r3, [pc, #220]	; (80051bc <tim6_main+0x164>)
 80050de:	701a      	strb	r2, [r3, #0]
                break;
 80050e0:	e039      	b.n	8005156 <tim6_main+0xfe>
            case velotrace_tuning:
                leftmotor   = tim10_read_left() + 0;
 80050e2:	f7ff ff33 	bl	8004f4c <tim10_read_left>
 80050e6:	eeb0 7a40 	vmov.f32	s14, s0
 80050ea:	eddf 7a35 	vldr	s15, [pc, #212]	; 80051c0 <tim6_main+0x168>
 80050ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050f2:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + 0;
 80050f6:	f7ff ff37 	bl	8004f68 <tim10_read_right>
 80050fa:	eeb0 7a40 	vmov.f32	s14, s0
 80050fe:	eddf 7a30 	vldr	s15, [pc, #192]	; 80051c0 <tim6_main+0x168>
 8005102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005106:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b10000;
 800510a:	4b2c      	ldr	r3, [pc, #176]	; (80051bc <tim6_main+0x164>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	3310      	adds	r3, #16
 8005110:	b2da      	uxtb	r2, r3
 8005112:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <tim6_main+0x164>)
 8005114:	701a      	strb	r2, [r3, #0]
                break;
 8005116:	e01e      	b.n	8005156 <tim6_main+0xfe>
            default:
                leftmotor   = tim10_read_left() + tim7_read_left();
 8005118:	f7ff ff18 	bl	8004f4c <tim10_read_left>
 800511c:	eeb0 8a40 	vmov.f32	s16, s0
 8005120:	f000 f972 	bl	8005408 <tim7_read_left>
 8005124:	eef0 7a40 	vmov.f32	s15, s0
 8005128:	ee78 7a27 	vadd.f32	s15, s16, s15
 800512c:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + tim7_read_right();
 8005130:	f7ff ff1a 	bl	8004f68 <tim10_read_right>
 8005134:	eeb0 8a40 	vmov.f32	s16, s0
 8005138:	f000 f974 	bl	8005424 <tim7_read_right>
 800513c:	eef0 7a40 	vmov.f32	s15, s0
 8005140:	ee78 7a27 	vadd.f32	s15, s16, s15
 8005144:	edc7 7a02 	vstr	s15, [r7, #8]
                debug_num += 0b100000;
 8005148:	4b1c      	ldr	r3, [pc, #112]	; (80051bc <tim6_main+0x164>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	3320      	adds	r3, #32
 800514e:	b2da      	uxtb	r2, r3
 8005150:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <tim6_main+0x164>)
 8005152:	701a      	strb	r2, [r3, #0]
                break;
 8005154:	bf00      	nop
        #if VELOTRACE_TUNING && TRACER_TUNING
        leftmotor  =  tim10_read_left() +  tim7_read_left();
        rightmotor = tim10_read_right() + tim7_read_right();
        #endif
		#endif	/* !(TRACER_TUNING || VELOTRACE_TUNING) */
    }
 8005156:	e00b      	b.n	8005170 <tim6_main+0x118>
    else
    {
        leftmotor = 0;
 8005158:	f04f 0300 	mov.w	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
        rightmotor = 0;
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	60bb      	str	r3, [r7, #8]
        debug_num += 0b1000000;
 8005164:	4b15      	ldr	r3, [pc, #84]	; (80051bc <tim6_main+0x164>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	3340      	adds	r3, #64	; 0x40
 800516a:	b2da      	uxtb	r2, r3
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <tim6_main+0x164>)
 800516e:	701a      	strb	r2, [r3, #0]
            }
        }
    }
#else
    //! 距離が COURSE_SAMPLING_LENGTH になっていたら course_state_function() を実行する関数
    fixed_section_main();
 8005170:	f7fd fcc0 	bl	8002af4 <fixed_section_main>
#endif

    switch(markerstate)
 8005174:	79bb      	ldrb	r3, [r7, #6]
 8005176:	2b03      	cmp	r3, #3
 8005178:	d10a      	bne.n	8005190 <tim6_main+0x138>
    {
        case stop:
            switch_reset_enter();
 800517a:	f7fc fac9 	bl	8001710 <switch_reset_enter>
            tim6_stop();
 800517e:	f7ff ff53 	bl	8005028 <tim6_stop>
            motor_set(0, 0);
 8005182:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80051c0 <tim6_main+0x168>
 8005186:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80051c0 <tim6_main+0x168>
 800518a:	f7fe feb7 	bl	8003efc <motor_set>
            break;
 800518e:	e00c      	b.n	80051aa <tim6_main+0x152>
        default:
            debug_num += 0b10000000;
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <tim6_main+0x164>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	3b80      	subs	r3, #128	; 0x80
 8005196:	b2da      	uxtb	r2, r3
 8005198:	4b08      	ldr	r3, [pc, #32]	; (80051bc <tim6_main+0x164>)
 800519a:	701a      	strb	r2, [r3, #0]
            motor_set(leftmotor, rightmotor);
 800519c:	edd7 0a02 	vldr	s1, [r7, #8]
 80051a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80051a4:	f7fe feaa 	bl	8003efc <motor_set>
            break;
 80051a8:	bf00      	nop
    }

    tim6_markerstate_before = markerstate;
 80051aa:	4a06      	ldr	r2, [pc, #24]	; (80051c4 <tim6_main+0x16c>)
 80051ac:	79bb      	ldrb	r3, [r7, #6]
 80051ae:	7013      	strb	r3, [r2, #0]
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	ecbd 8b02 	vpop	{d8}
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	2001ddb9 	.word	0x2001ddb9
 80051c0:	00000000 	.word	0x00000000
 80051c4:	2001ddb8 	.word	0x2001ddb8

080051c8 <tim6_d_print>:

void tim6_d_print()
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
    printf("tim6.c > debug_num = ");
    print_bin(debug_num);
    printf("\r\n");
    printf("tim6.c > tim6_d_print() > motor_enable = %1d, leftmotor = %5.3f, rightmotor = %5.3f\r\n", motor_read_enable(), leftmotor, rightmotor); 
    #endif
    virtual_marker_d_print();
 80051cc:	f000 fe52 	bl	8005e74 <virtual_marker_d_print>
}
 80051d0:	bf00      	nop
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <tim7_init>:
#if D_TIM7
unsigned char i_count, i_start;
#endif

void tim7_init()
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
    /* init */
    #if D_TIM7
    printf("tim7.c > tim7_init() > ");
    #endif
    analog_init();
 80051d8:	f7fc fc66 	bl	8001aa8 <analog_init>
    tracer_init(TIM7_TIME_MS);
 80051dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80051e0:	f000 f99a 	bl	8005518 <tracer_init>
    HAL_TIM_Base_Stop_IT(&htim7);
 80051e4:	4802      	ldr	r0, [pc, #8]	; (80051f0 <tim7_init+0x1c>)
 80051e6:	f004 f91f 	bl	8009428 <HAL_TIM_Base_Stop_IT>
}
 80051ea:	bf00      	nop
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	200007c4 	.word	0x200007c4

080051f4 <tim7_start>:

void tim7_start()
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
    /* start */
    #if D_TIM7
    printf("tim7.c > tim7_start() > ");
    #endif
    tim7_set_emergency(0);
 80051f8:	2000      	movs	r0, #0
 80051fa:	f000 f8f5 	bl	80053e8 <tim7_set_emergency>
    tim7_left = 0;
 80051fe:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <tim7_start+0x3c>)
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
    tim7_right = 0;
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <tim7_start+0x40>)
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
    analog_set_from_flash(analogdata.min, analogdata.max);
 800520e:	490a      	ldr	r1, [pc, #40]	; (8005238 <tim7_start+0x44>)
 8005210:	480a      	ldr	r0, [pc, #40]	; (800523c <tim7_start+0x48>)
 8005212:	f7fc fbb3 	bl	800197c <analog_set_from_flash>
    analog_set_analogmode(analogmode_short);
 8005216:	200c      	movs	r0, #12
 8005218:	f7fc fbea 	bl	80019f0 <analog_set_analogmode>

    analog_start();
 800521c:	f7fc fc56 	bl	8001acc <analog_start>
    tracer_start();
 8005220:	f000 f996 	bl	8005550 <tracer_start>
    HAL_TIM_Base_Start_IT(&htim7);
 8005224:	4806      	ldr	r0, [pc, #24]	; (8005240 <tim7_start+0x4c>)
 8005226:	f004 f88f 	bl	8009348 <HAL_TIM_Base_Start_IT>
}
 800522a:	bf00      	nop
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	2001ddc4 	.word	0x2001ddc4
 8005234:	2001ddbc 	.word	0x2001ddbc
 8005238:	20012194 	.word	0x20012194
 800523c:	20012174 	.word	0x20012174
 8005240:	200007c4 	.word	0x200007c4

08005244 <tim7_stop>:

void tim7_stop()
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
    /* stop */
    #if D_TIM7
    printf("tim7.c > tim7_stop() > ");
    #endif
    HAL_TIM_Base_Stop_IT(&htim7);
 8005248:	4804      	ldr	r0, [pc, #16]	; (800525c <tim7_stop+0x18>)
 800524a:	f004 f8ed 	bl	8009428 <HAL_TIM_Base_Stop_IT>
    tracer_stop();
 800524e:	f000 f9c7 	bl	80055e0 <tracer_stop>
    analog_stop();
 8005252:	f7fc fc41 	bl	8001ad8 <analog_stop>
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200007c4 	.word	0x200007c4

08005260 <tim7_main>:

void tim7_main()
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
    /* main */
    int direction;

    direction = tim7_read_direction();
 8005266:	f000 f819 	bl	800529c <tim7_read_direction>
 800526a:	6078      	str	r0, [r7, #4]
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("direction = %5d\r\n", direction);
    #endif

    tim7_left   =   tracer_solve(direction);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fad1 	bl	8005814 <tracer_solve>
 8005272:	eef0 7a40 	vmov.f32	s15, s0
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <tim7_main+0x34>)
 8005278:	edc3 7a00 	vstr	s15, [r3]
    tim7_right  = - tim7_left;
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <tim7_main+0x34>)
 800527e:	edd3 7a00 	vldr	s15, [r3]
 8005282:	eef1 7a67 	vneg.f32	s15, s15
 8005286:	4b04      	ldr	r3, [pc, #16]	; (8005298 <tim7_main+0x38>)
 8005288:	edc3 7a00 	vstr	s15, [r3]

    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("tim7_left = %7.2f, tim7_right = %7.2f\r\n", tim7_left, tim7_right);
    #endif
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	2001ddc4 	.word	0x2001ddc4
 8005298:	2001ddbc 	.word	0x2001ddbc

0800529c <tim7_read_direction>:

/* this method is private */
int tim7_read_direction()
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
    uint16_t short_middle;
	#if !D_TIM7
    unsigned char i_count, i_start;
	#endif

    analogl = 0;
 80052a2:	2300      	movs	r3, #0
 80052a4:	81fb      	strh	r3, [r7, #14]
    analogr = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	81bb      	strh	r3, [r7, #12]

    switch(analog_read_analogmode())
 80052aa:	f7fc fbb1 	bl	8001a10 <analog_read_analogmode>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d834      	bhi.n	800531e <tim7_read_direction+0x82>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <tim7_read_direction+0x20>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	0800531f 	.word	0x0800531f
 80052c0:	0800531f 	.word	0x0800531f
 80052c4:	0800531f 	.word	0x0800531f
 80052c8:	0800531f 	.word	0x0800531f
 80052cc:	0800530b 	.word	0x0800530b
 80052d0:	0800531f 	.word	0x0800531f
 80052d4:	0800531f 	.word	0x0800531f
 80052d8:	0800531f 	.word	0x0800531f
 80052dc:	0800531f 	.word	0x0800531f
 80052e0:	0800531f 	.word	0x0800531f
 80052e4:	0800531f 	.word	0x0800531f
 80052e8:	0800531f 	.word	0x0800531f
 80052ec:	08005301 	.word	0x08005301
 80052f0:	0800531f 	.word	0x0800531f
 80052f4:	0800531f 	.word	0x0800531f
 80052f8:	0800531f 	.word	0x0800531f
 80052fc:	08005315 	.word	0x08005315
    {
        case analogmode_calibrating:
            break;
        case analogmode_short:
            i_count = 12;
 8005300:	230c      	movs	r3, #12
 8005302:	727b      	strb	r3, [r7, #9]
            i_start = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	723b      	strb	r3, [r7, #8]
            break;
 8005308:	e00a      	b.n	8005320 <tim7_read_direction+0x84>
        case analogmode_long:
            i_count = 4;
 800530a:	2304      	movs	r3, #4
 800530c:	727b      	strb	r3, [r7, #9]
            i_start = 12;
 800530e:	230c      	movs	r3, #12
 8005310:	723b      	strb	r3, [r7, #8]
            break;
 8005312:	e005      	b.n	8005320 <tim7_read_direction+0x84>
        case analogmode_all:
            i_count = 16;
 8005314:	2310      	movs	r3, #16
 8005316:	727b      	strb	r3, [r7, #9]
            i_start = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	723b      	strb	r3, [r7, #8]
            break;
 800531c:	e000      	b.n	8005320 <tim7_read_direction+0x84>
        default:
            /* unknown analogmode ... x_x */
            break;
 800531e:	bf00      	nop
    }

    for(unsigned char i = i_start; i < (i_count + i_start); i++)
 8005320:	7a3b      	ldrb	r3, [r7, #8]
 8005322:	71fb      	strb	r3, [r7, #7]
 8005324:	e022      	b.n	800536c <tim7_read_direction+0xd0>
    {
        #if D_TIM7_WHILE
        printf("tim7.c > tim7_main() > for() > ");
        printf("i = %2d", i);
        #endif
        if(i % 2 == 0)
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <tim7_read_direction+0xaa>
        {
            #if D_TIM7_WHILE
            printf("  odd\r\n");
            #endif
            analogl += analog_sensor_get(i);
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	4618      	mov	r0, r3
 8005336:	f7fc fbf7 	bl	8001b28 <analog_sensor_get>
 800533a:	4603      	mov	r3, r0
 800533c:	461a      	mov	r2, r3
 800533e:	89fb      	ldrh	r3, [r7, #14]
 8005340:	4413      	add	r3, r2
 8005342:	81fb      	strh	r3, [r7, #14]
 8005344:	e008      	b.n	8005358 <tim7_read_direction+0xbc>
        else
        {
            #if D_TIM7_WHILE
            printf(" even\r\n");
            #endif
            analogr += analog_sensor_get(i);
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	4618      	mov	r0, r3
 800534a:	f7fc fbed 	bl	8001b28 <analog_sensor_get>
 800534e:	4603      	mov	r3, r0
 8005350:	461a      	mov	r2, r3
 8005352:	89bb      	ldrh	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	81bb      	strh	r3, [r7, #12]
        }
        if(i < SHORT_MIDDLE_SENSOR)
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	2b05      	cmp	r3, #5
 800535c:	d803      	bhi.n	8005366 <tim7_read_direction+0xca>
        {
            short_middle = analogl + analogr;
 800535e:	89fa      	ldrh	r2, [r7, #14]
 8005360:	89bb      	ldrh	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	817b      	strh	r3, [r7, #10]
    for(unsigned char i = i_start; i < (i_count + i_start); i++)
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	3301      	adds	r3, #1
 800536a:	71fb      	strb	r3, [r7, #7]
 800536c:	79fa      	ldrb	r2, [r7, #7]
 800536e:	7a79      	ldrb	r1, [r7, #9]
 8005370:	7a3b      	ldrb	r3, [r7, #8]
 8005372:	440b      	add	r3, r1
 8005374:	429a      	cmp	r2, r3
 8005376:	dbd6      	blt.n	8005326 <tim7_read_direction+0x8a>
    {
    	// tim7_main_emergency();
    }

    //if(short_middle <= CLOSS_IGNORE_THRESHOLD * SHORT_MIDDLE_SENSOR && virtual_marker_read_markerstate() == cross)
    if(short_middle <= CLOSS_IGNORE_THRESHOLD * SHORT_MIDDLE_SENSOR)
 8005378:	897b      	ldrh	r3, [r7, #10]
 800537a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800537e:	4293      	cmp	r3, r2
 8005380:	d824      	bhi.n	80053cc <tim7_read_direction+0x130>
    {
        /* 交差判定 */
        analogl = 3 * (analog_sensor_get(12) + analog_sensor_get(14));
 8005382:	200c      	movs	r0, #12
 8005384:	f7fc fbd0 	bl	8001b28 <analog_sensor_get>
 8005388:	4603      	mov	r3, r0
 800538a:	461c      	mov	r4, r3
 800538c:	200e      	movs	r0, #14
 800538e:	f7fc fbcb 	bl	8001b28 <analog_sensor_get>
 8005392:	4603      	mov	r3, r0
 8005394:	4423      	add	r3, r4
 8005396:	b29b      	uxth	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	0052      	lsls	r2, r2, #1
 800539c:	4413      	add	r3, r2
 800539e:	81fb      	strh	r3, [r7, #14]
        analogr = 3 * (analog_sensor_get(13) + analog_sensor_get(15));
 80053a0:	200d      	movs	r0, #13
 80053a2:	f7fc fbc1 	bl	8001b28 <analog_sensor_get>
 80053a6:	4603      	mov	r3, r0
 80053a8:	461c      	mov	r4, r3
 80053aa:	200f      	movs	r0, #15
 80053ac:	f7fc fbbc 	bl	8001b28 <analog_sensor_get>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4423      	add	r3, r4
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	0052      	lsls	r2, r2, #1
 80053ba:	4413      	add	r3, r2
 80053bc:	81bb      	strh	r3, [r7, #12]
        /* 長い方のゲイン値にする */
        tim7_tracer_set_gain_long();
 80053be:	f000 f84d 	bl	800545c <tim7_tracer_set_gain_long>
        led_write_led(0b11, 0b10);
 80053c2:	2102      	movs	r1, #2
 80053c4:	2003      	movs	r0, #3
 80053c6:	f7fc f875 	bl	80014b4 <led_write_led>
 80053ca:	e005      	b.n	80053d8 <tim7_read_direction+0x13c>
    }
    else
    {
        /* その他判定 */
        /* 短い方のゲイン値にする（戻すって言った方が正しいかも） */
        tim7_tracer_set_gain_short();
 80053cc:	f000 f840 	bl	8005450 <tim7_tracer_set_gain_short>
        led_write_led(0b11, 0b01);
 80053d0:	2101      	movs	r1, #1
 80053d2:	2003      	movs	r0, #3
 80053d4:	f7fc f86e 	bl	80014b4 <led_write_led>
#if D_TIM7_WHILE
	printf("tim7.c > tim7_main() > ");
	printf("analogl = %5d, analogr = %5d\r\n", analogl, analogr);
#endif

    return analogl - analogr;
 80053d8:	89fa      	ldrh	r2, [r7, #14]
 80053da:	89bb      	ldrh	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd90      	pop	{r4, r7, pc}
 80053e6:	bf00      	nop

080053e8 <tim7_set_emergency>:
{
	switch_reset_enter();
}

void tim7_set_emergency(char emergency_)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	71fb      	strb	r3, [r7, #7]
    tim7_emergency = emergency_;
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <tim7_set_emergency+0x1c>)
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	7013      	strb	r3, [r2, #0]
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	2001ddc0 	.word	0x2001ddc0

08005408 <tim7_read_left>:
{
    return tim7_emergency;
}

float tim7_read_left()
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c >  tim7_read_left() >  tim7_left = %7.2f\r\n", tim7_left);
    #endif
    return tim7_left;
 800540c:	4b04      	ldr	r3, [pc, #16]	; (8005420 <tim7_read_left+0x18>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	ee07 3a90 	vmov	s15, r3
}
 8005414:	eeb0 0a67 	vmov.f32	s0, s15
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	2001ddc4 	.word	0x2001ddc4

08005424 <tim7_read_right>:

float tim7_read_right()
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_read_right() > tim7_right = %7.2f\r\n", tim7_right);
    #endif
    return tim7_right;
 8005428:	4b04      	ldr	r3, [pc, #16]	; (800543c <tim7_read_right+0x18>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	ee07 3a90 	vmov	s15, r3
}
 8005430:	eeb0 0a67 	vmov.f32	s0, s15
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	2001ddbc 	.word	0x2001ddbc

08005440 <tim7_d_print>:

void tim7_d_print()
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
#if D_TIM7
    printf("tim7_left = %f, tim7_right = %f\r\n", tim7_left, tim7_right);
#endif
    analog_d_print();
 8005444:	f7fc fa38 	bl	80018b8 <analog_d_print>
    tracer_print_values();
 8005448:	f000 fa5c 	bl	8005904 <tracer_print_values>
}
 800544c:	bf00      	nop
 800544e:	bd80      	pop	{r7, pc}

08005450 <tim7_tracer_set_gain_short>:

void tim7_tracer_set_gain_short()
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
    tracer_set_gain_default();
 8005454:	f000 f9a6 	bl	80057a4 <tracer_set_gain_default>
}
 8005458:	bf00      	nop
 800545a:	bd80      	pop	{r7, pc}

0800545c <tim7_tracer_set_gain_long>:

void tim7_tracer_set_gain_long()
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
    float kp, ki, kd;
    kp = TIM7_LONG_KP;
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <tim7_tracer_set_gain_long+0x2c>)
 8005464:	60fb      	str	r3, [r7, #12]
    ki = TIM7_LONG_KI;
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]
    kd = TIM7_LONG_KD;
 800546c:	4b07      	ldr	r3, [pc, #28]	; (800548c <tim7_tracer_set_gain_long+0x30>)
 800546e:	607b      	str	r3, [r7, #4]
    tracer_set_gain_direct(kp, ki, kd);
 8005470:	ed97 1a01 	vldr	s2, [r7, #4]
 8005474:	edd7 0a02 	vldr	s1, [r7, #8]
 8005478:	ed97 0a03 	vldr	s0, [r7, #12]
 800547c:	f000 f8ec 	bl	8005658 <tracer_set_gain_direct>
}
 8005480:	bf00      	nop
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	3e4ccccd 	.word	0x3e4ccccd
 800548c:	3b9374bc 	.word	0x3b9374bc

08005490 <time_update_ms>:
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	80fb      	strh	r3, [r7, #6]
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	4a08      	ldr	r2, [pc, #32]	; (80054c0 <time_update_ms+0x30>)
 800549e:	4619      	mov	r1, r3
 80054a0:	4808      	ldr	r0, [pc, #32]	; (80054c4 <time_update_ms+0x34>)
 80054a2:	f000 f813 	bl	80054cc <time_countup>
 80054a6:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <time_update_ms+0x34>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	4a05      	ldr	r2, [pc, #20]	; (80054c8 <time_update_ms+0x38>)
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	00602160 	.word	0x00602160
 80054c4:	2001ddd0 	.word	0x2001ddd0
 80054c8:	2001ddcc 	.word	0x2001ddcc

080054cc <time_countup>:
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	460b      	mov	r3, r1
 80054d6:	607a      	str	r2, [r7, #4]
 80054d8:	817b      	strh	r3, [r7, #10]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	897b      	ldrh	r3, [r7, #10]
 80054e0:	4413      	add	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d809      	bhi.n	80054fc <time_countup+0x30>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	4b09      	ldr	r3, [pc, #36]	; (8005514 <time_countup+0x48>)
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	3301      	adds	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	4b07      	ldr	r3, [pc, #28]	; (8005514 <time_countup+0x48>)
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	e005      	b.n	8005508 <time_countup+0x3c>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	897b      	ldrh	r3, [r7, #10]
 8005502:	441a      	add	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	bf00      	nop
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	2001ddc8 	.word	0x2001ddc8

08005518 <tracer_init>:
PID tracer_pid;
PID tracer_default;
uint8_t tracer_started;

void tracer_init(float samplingtime_ms)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_started = 0;
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <tracer_init+0x30>)
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
    tracer_sampling_time_ms = samplingtime_ms;
 8005528:	edd7 7a01 	vldr	s15, [r7, #4]
 800552c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005530:	ee17 3a90 	vmov	r3, s15
 8005534:	b29a      	uxth	r2, r3
 8005536:	4b05      	ldr	r3, [pc, #20]	; (800554c <tracer_init+0x34>)
 8005538:	801a      	strh	r2, [r3, #0]
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	2001dde4 	.word	0x2001dde4
 800554c:	2001ddf0 	.word	0x2001ddf0

08005550 <tracer_start>:

void tracer_start()
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
    if(tracer_started <= 0)
 8005556:	4b1f      	ldr	r3, [pc, #124]	; (80055d4 <tracer_start+0x84>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d133      	bne.n	80055c6 <tracer_start+0x76>
    {
        float kp, ki, kd;
        tracer_s_error = 0;
 800555e:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <tracer_start+0x88>)
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
        tracer_before_error = 0;
 8005566:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <tracer_start+0x8c>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
        kp = tracer_calc_gain_kp(rotary_read_value());
 800556c:	f7fb fff4 	bl	8001558 <rotary_read_value>
 8005570:	4603      	mov	r3, r0
 8005572:	b29b      	uxth	r3, r3
 8005574:	4618      	mov	r0, r3
 8005576:	f000 f8ad 	bl	80056d4 <tracer_calc_gain_kp>
 800557a:	ed87 0a03 	vstr	s0, [r7, #12]
        ki = tracer_calc_gain_ki(rotary_read_value());
 800557e:	f7fb ffeb 	bl	8001558 <rotary_read_value>
 8005582:	4603      	mov	r3, r0
 8005584:	b29b      	uxth	r3, r3
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f8c6 	bl	8005718 <tracer_calc_gain_ki>
 800558c:	ed87 0a02 	vstr	s0, [r7, #8]
        kd = tracer_calc_gain_kd(rotary_read_value());
 8005590:	f7fb ffe2 	bl	8001558 <rotary_read_value>
 8005594:	4603      	mov	r3, r0
 8005596:	b29b      	uxth	r3, r3
 8005598:	4618      	mov	r0, r3
 800559a:	f000 f8df 	bl	800575c <tracer_calc_gain_kd>
 800559e:	ed87 0a01 	vstr	s0, [r7, #4]
        tracer_set_default_now_gain(kp, ki, kd);
 80055a2:	ed97 1a01 	vldr	s2, [r7, #4]
 80055a6:	edd7 0a02 	vldr	s1, [r7, #8]
 80055aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80055ae:	f000 f909 	bl	80057c4 <tracer_set_default_now_gain>
        tracer_set_target_zero();
 80055b2:	f000 f86b 	bl	800568c <tracer_set_target_zero>
        tracer_set_gain_direct(kp, ki, kd);
 80055b6:	ed97 1a01 	vldr	s2, [r7, #4]
 80055ba:	edd7 0a02 	vldr	s1, [r7, #8]
 80055be:	ed97 0a03 	vldr	s0, [r7, #12]
 80055c2:	f000 f849 	bl	8005658 <tracer_set_gain_direct>
    #if D_TRACER
        printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", kp, ki, kd);
        print_pid(&tracer_pid);
    #endif
    }
    tracer_started = 1;
 80055c6:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <tracer_start+0x84>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
}
 80055cc:	bf00      	nop
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	2001dde4 	.word	0x2001dde4
 80055d8:	2001ddec 	.word	0x2001ddec
 80055dc:	2001dde8 	.word	0x2001dde8

080055e0 <tracer_stop>:

void tracer_stop()
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
    tracer_set_gain_zero();
 80055e4:	f000 f860 	bl	80056a8 <tracer_set_gain_zero>
    tracer_started = 0;
 80055e8:	4b02      	ldr	r3, [pc, #8]	; (80055f4 <tracer_stop+0x14>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]
}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	2001dde4 	.word	0x2001dde4

080055f8 <tracer_set_gain_kp_direct>:
{
    tracer_set_gain_kd_direct(tracer_calc_gain_kd(i));
}

void tracer_set_gain_kp_direct(float kp)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.kp = kp;
 8005602:	4a04      	ldr	r2, [pc, #16]	; (8005614 <tracer_set_gain_kp_direct+0x1c>)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6053      	str	r3, [r2, #4]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	2001ddd4 	.word	0x2001ddd4

08005618 <tracer_set_gain_ki_direct>:

void tracer_set_gain_ki_direct(float ki)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.ki = ki;
 8005622:	4a04      	ldr	r2, [pc, #16]	; (8005634 <tracer_set_gain_ki_direct+0x1c>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6093      	str	r3, [r2, #8]
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	2001ddd4 	.word	0x2001ddd4

08005638 <tracer_set_gain_kd_direct>:

void tracer_set_gain_kd_direct(float kd)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	ed87 0a01 	vstr	s0, [r7, #4]
    tracer_pid.kd = kd;
 8005642:	4a04      	ldr	r2, [pc, #16]	; (8005654 <tracer_set_gain_kd_direct+0x1c>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60d3      	str	r3, [r2, #12]
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	2001ddd4 	.word	0x2001ddd4

08005658 <tracer_set_gain_direct>:

void tracer_set_gain_direct(float kp, float ki, float kd)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005662:	edc7 0a02 	vstr	s1, [r7, #8]
 8005666:	ed87 1a01 	vstr	s2, [r7, #4]
    tracer_set_gain_kp_direct(kp);
 800566a:	ed97 0a03 	vldr	s0, [r7, #12]
 800566e:	f7ff ffc3 	bl	80055f8 <tracer_set_gain_kp_direct>
    tracer_set_gain_ki_direct(ki);
 8005672:	ed97 0a02 	vldr	s0, [r7, #8]
 8005676:	f7ff ffcf 	bl	8005618 <tracer_set_gain_ki_direct>
    tracer_set_gain_kd_direct(kd);
 800567a:	ed97 0a01 	vldr	s0, [r7, #4]
 800567e:	f7ff ffdb 	bl	8005638 <tracer_set_gain_kd_direct>
}
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <tracer_set_target_zero>:

/* kp ki kd set zero */
void tracer_set_target_zero()
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
    tracer_pid.target = 0;
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <tracer_set_target_zero+0x18>)
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
}
 8005698:	bf00      	nop
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	2001ddd4 	.word	0x2001ddd4

080056a8 <tracer_set_gain_zero>:

void tracer_set_gain_zero()
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
    tracer_pid.kp = 0;
 80056ac:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <tracer_set_gain_zero+0x28>)
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	605a      	str	r2, [r3, #4]
    tracer_pid.ki = 0;
 80056b4:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <tracer_set_gain_zero+0x28>)
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	609a      	str	r2, [r3, #8]
    tracer_pid.kd = 0;
 80056bc:	4b04      	ldr	r3, [pc, #16]	; (80056d0 <tracer_set_gain_zero+0x28>)
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	60da      	str	r2, [r3, #12]
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	2001ddd4 	.word	0x2001ddd4

080056d4 <tracer_calc_gain_kp>:

/* calclate pid values from rotary value */
float tracer_calc_gain_kp(unsigned short int i)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KP_MAX - TRACER_KP_MIN) / (float) (TRACER_STEP_SIZE - 1);
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	f1c3 030f 	rsb	r3, r3, #15
 80056e4:	ee07 3a90 	vmov	s15, r3
 80056e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056ec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005714 <tracer_calc_gain_kp+0x40>
 80056f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056f4:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80056f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005700:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005704:	eeb0 0a67 	vmov.f32	s0, s15
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	00000000 	.word	0x00000000

08005718 <tracer_calc_gain_ki>:

float tracer_calc_gain_ki(unsigned short int i)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KI_MAX - TRACER_KI_MIN) / (float) (TRACER_STEP_SIZE - 1);
 8005722:	88fb      	ldrh	r3, [r7, #6]
 8005724:	f1c3 030f 	rsb	r3, r3, #15
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005730:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005758 <tracer_calc_gain_ki+0x40>
 8005734:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005738:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800573c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005740:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005758 <tracer_calc_gain_ki+0x40>
 8005744:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005748:	eeb0 0a67 	vmov.f32	s0, s15
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	00000000 	.word	0x00000000

0800575c <tracer_calc_gain_kd>:

float tracer_calc_gain_kd(unsigned short int i)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KD_MAX - TRACER_KD_MIN) / (float) (TRACER_STEP_SIZE - 1);
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	f1c3 030f 	rsb	r3, r3, #15
 800576c:	ee07 3a90 	vmov	s15, r3
 8005770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005774:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800579c <tracer_calc_gain_kd+0x40>
 8005778:	ee27 7a87 	vmul.f32	s14, s15, s14
 800577c:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005784:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80057a0 <tracer_calc_gain_kd+0x44>
 8005788:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800578c:	eeb0 0a67 	vmov.f32	s0, s15
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	00000000 	.word	0x00000000
 80057a0:	3c656042 	.word	0x3c656042

080057a4 <tracer_set_gain_default>:

/* set default */
void tracer_set_gain_default()
{
 80057a4:	b490      	push	{r4, r7}
 80057a6:	af00      	add	r7, sp, #0
    tracer_pid = tracer_default;
 80057a8:	4a04      	ldr	r2, [pc, #16]	; (80057bc <tracer_set_gain_default+0x18>)
 80057aa:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <tracer_set_gain_default+0x1c>)
 80057ac:	4614      	mov	r4, r2
 80057ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80057b4:	bf00      	nop
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc90      	pop	{r4, r7}
 80057ba:	4770      	bx	lr
 80057bc:	2001ddd4 	.word	0x2001ddd4
 80057c0:	2001ddf4 	.word	0x2001ddf4

080057c4 <tracer_set_default_now_gain>:

void tracer_set_default_now_gain(float kp, float ki, float kd)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80057ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80057d2:	ed87 1a01 	vstr	s2, [r7, #4]
    tracer_default.target = 0;
 80057d6:	4b09      	ldr	r3, [pc, #36]	; (80057fc <tracer_set_default_now_gain+0x38>)
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
    tracer_default.kp = kp;
 80057de:	4a07      	ldr	r2, [pc, #28]	; (80057fc <tracer_set_default_now_gain+0x38>)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6053      	str	r3, [r2, #4]
    tracer_default.ki = ki;
 80057e4:	4a05      	ldr	r2, [pc, #20]	; (80057fc <tracer_set_default_now_gain+0x38>)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6093      	str	r3, [r2, #8]
    tracer_default.kd = kd;
 80057ea:	4a04      	ldr	r2, [pc, #16]	; (80057fc <tracer_set_default_now_gain+0x38>)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	60d3      	str	r3, [r2, #12]
}
 80057f0:	bf00      	nop
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	2001ddf4 	.word	0x2001ddf4

08005800 <tracer_read_values>:
    tracer_pid.ki = _pid->ki;
    tracer_pid.kd = _pid->kd;
}

PID* tracer_read_values()
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
    return &tracer_pid;
 8005804:	4b02      	ldr	r3, [pc, #8]	; (8005810 <tracer_read_values+0x10>)
}
 8005806:	4618      	mov	r0, r3
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	2001ddd4 	.word	0x2001ddd4

08005814 <tracer_solve>:

float tracer_solve(int reference_)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("reference_ = %5d\r\n", reference_);
    #endif

    error = reference_ - tracer_pid.target;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005826:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <tracer_solve+0xdc>)
 8005828:	edd3 7a00 	vldr	s15, [r3]
 800582c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005834:	ee17 3a90 	vmov	r3, s15
 8005838:	617b      	str	r3, [r7, #20]

    d_error = (error - tracer_before_error) / (float) (tracer_sampling_time_ms / (float) 1000);
 800583a:	4b2e      	ldr	r3, [pc, #184]	; (80058f4 <tracer_solve+0xe0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800584a:	4b2b      	ldr	r3, [pc, #172]	; (80058f8 <tracer_solve+0xe4>)
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005856:	ed9f 6a29 	vldr	s12, [pc, #164]	; 80058fc <tracer_solve+0xe8>
 800585a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800585e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005862:	edc7 7a04 	vstr	s15, [r7, #16]
    tracer_s_error += error * (float) (tracer_sampling_time_ms / (float) 1000);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005870:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <tracer_solve+0xe4>)
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	ee07 3a90 	vmov	s15, r3
 8005878:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800587c:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 80058fc <tracer_solve+0xe8>
 8005880:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005888:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <tracer_solve+0xec>)
 800588a:	edd3 7a00 	vldr	s15, [r3]
 800588e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005892:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <tracer_solve+0xec>)
 8005894:	edc3 7a00 	vstr	s15, [r3]

    result = tracer_pid.kp * error + tracer_pid.ki * tracer_s_error + tracer_pid.kd * d_error;
 8005898:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <tracer_solve+0xdc>)
 800589a:	ed93 7a01 	vldr	s14, [r3, #4]
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	ee07 3a90 	vmov	s15, r3
 80058a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <tracer_solve+0xdc>)
 80058ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80058b2:	4b13      	ldr	r3, [pc, #76]	; (8005900 <tracer_solve+0xec>)
 80058b4:	edd3 7a00 	vldr	s15, [r3]
 80058b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <tracer_solve+0xdc>)
 80058c2:	edd3 6a03 	vldr	s13, [r3, #12]
 80058c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80058ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80058ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058d2:	edc7 7a03 	vstr	s15, [r7, #12]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("%7.2f = %7.2f * %5d + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, tracer_pid.kp, error, tracer_pid.ki, tracer_s_error, tracer_pid.kd, d_error);
    #endif

    tracer_before_error = error;
 80058d6:	4a07      	ldr	r2, [pc, #28]	; (80058f4 <tracer_solve+0xe0>)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	6013      	str	r3, [r2, #0]

    return result;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	ee07 3a90 	vmov	s15, r3
}
 80058e2:	eeb0 0a67 	vmov.f32	s0, s15
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	2001ddd4 	.word	0x2001ddd4
 80058f4:	2001dde8 	.word	0x2001dde8
 80058f8:	2001ddf0 	.word	0x2001ddf0
 80058fc:	447a0000 	.word	0x447a0000
 8005900:	2001ddec 	.word	0x2001ddec

08005904 <tracer_print_values>:

void tracer_print_values()
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
#if D_TRACER
    printf("trac > kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
#endif
}
 8005908:	bf00      	nop
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
	...

08005914 <velotrace_init>:
PID velotrace_pid;
uint8_t velotrace_started;

/* pre setting */
void velotrace_init(uint16_t samplingtime_ms)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	80fb      	strh	r3, [r7, #6]
    velotrace_started = 0;
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <velotrace_init+0x24>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
    velotrace_sampling_time_ms = samplingtime_ms;
 8005924:	4a05      	ldr	r2, [pc, #20]	; (800593c <velotrace_init+0x28>)
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	8013      	strh	r3, [r2, #0]
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	2001de0e 	.word	0x2001de0e
 800593c:	2001de04 	.word	0x2001de04

08005940 <velotrace_start>:

void velotrace_start()
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
    if(velotrace_started <= 0)
 8005946:	4b4b      	ldr	r3, [pc, #300]	; (8005a74 <velotrace_start+0x134>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f040 808a 	bne.w	8005a64 <velotrace_start+0x124>
    {
        float target, kp, ki, kd;
        #if D_VELOTRACE
        printf("velotrace_sampling_time_ms = 1, velotrace_s_error = 0, velotrace_before_error = 0\r\n");
        #endif
        velotrace_s_error = 0;
 8005950:	4b49      	ldr	r3, [pc, #292]	; (8005a78 <velotrace_start+0x138>)
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
        velotrace_before_error = 0;
 8005958:	4b48      	ldr	r3, [pc, #288]	; (8005a7c <velotrace_start+0x13c>)
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
        velotrace_gain_tuning_time_ms = 0;
 8005960:	4b47      	ldr	r3, [pc, #284]	; (8005a80 <velotrace_start+0x140>)
 8005962:	2200      	movs	r2, #0
 8005964:	801a      	strh	r2, [r3, #0]
        switch(rotary_read_playmode())
 8005966:	f7fb fddf 	bl	8001528 <rotary_read_playmode>
 800596a:	4603      	mov	r3, r0
 800596c:	3b01      	subs	r3, #1
 800596e:	2b06      	cmp	r3, #6
 8005970:	d85f      	bhi.n	8005a32 <velotrace_start+0xf2>
 8005972:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <velotrace_start+0x38>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	08005995 	.word	0x08005995
 800597c:	08005995 	.word	0x08005995
 8005980:	08005a33 	.word	0x08005a33
 8005984:	08005a33 	.word	0x08005a33
 8005988:	08005a33 	.word	0x08005a33
 800598c:	080059ab 	.word	0x080059ab
 8005990:	080059e9 	.word	0x080059e9
                target = velotrace_calc_target(rotary_read_value());
                kp = velotrace_calc_gain_kp(rotary_read_value());
                ki = velotrace_calc_gain_ki(rotary_read_value());
                kd = velotrace_calc_gain_kd(rotary_read_value());
                */
                target = 1;
 8005994:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005998:	60fb      	str	r3, [r7, #12]
                kp = 1000;
 800599a:	4b3a      	ldr	r3, [pc, #232]	; (8005a84 <velotrace_start+0x144>)
 800599c:	60bb      	str	r3, [r7, #8]
                ki = 100;
 800599e:	4b3a      	ldr	r3, [pc, #232]	; (8005a88 <velotrace_start+0x148>)
 80059a0:	607b      	str	r3, [r7, #4]
                kd = 0;
 80059a2:	f04f 0300 	mov.w	r3, #0
 80059a6:	603b      	str	r3, [r7, #0]
                break;
 80059a8:	e050      	b.n	8005a4c <velotrace_start+0x10c>
            case velotrace_tuning:
                target = 0;
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
                kp = velotrace_calc_gain_kp(rotary_read_value());
 80059b0:	f7fb fdd2 	bl	8001558 <rotary_read_value>
 80059b4:	4603      	mov	r3, r0
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 f909 	bl	8005bd0 <velotrace_calc_gain_kp>
 80059be:	ed87 0a02 	vstr	s0, [r7, #8]
                ki = velotrace_calc_gain_ki(rotary_read_value());
 80059c2:	f7fb fdc9 	bl	8001558 <rotary_read_value>
 80059c6:	4603      	mov	r3, r0
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f924 	bl	8005c18 <velotrace_calc_gain_ki>
 80059d0:	ed87 0a01 	vstr	s0, [r7, #4]
                kd = velotrace_calc_gain_kd(rotary_read_value());
 80059d4:	f7fb fdc0 	bl	8001558 <rotary_read_value>
 80059d8:	4603      	mov	r3, r0
 80059da:	b29b      	uxth	r3, r3
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 f93f 	bl	8005c60 <velotrace_calc_gain_kd>
 80059e2:	ed87 0a00 	vstr	s0, [r7]
                break;
 80059e6:	e031      	b.n	8005a4c <velotrace_start+0x10c>
            case velotrace_tuning_2:
                target = velotrace_calc_target(rotary_read_value());
 80059e8:	f7fb fdb6 	bl	8001558 <rotary_read_value>
 80059ec:	4603      	mov	r3, r0
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 f8cf 	bl	8005b94 <velotrace_calc_target>
 80059f6:	ed87 0a03 	vstr	s0, [r7, #12]
                kp = velotrace_calc_gain_kp(rotary_read_value());
 80059fa:	f7fb fdad 	bl	8001558 <rotary_read_value>
 80059fe:	4603      	mov	r3, r0
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f8e4 	bl	8005bd0 <velotrace_calc_gain_kp>
 8005a08:	ed87 0a02 	vstr	s0, [r7, #8]
                ki = velotrace_calc_gain_ki(rotary_read_value());
 8005a0c:	f7fb fda4 	bl	8001558 <rotary_read_value>
 8005a10:	4603      	mov	r3, r0
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f8ff 	bl	8005c18 <velotrace_calc_gain_ki>
 8005a1a:	ed87 0a01 	vstr	s0, [r7, #4]
                kd = velotrace_calc_gain_kd(rotary_read_value());
 8005a1e:	f7fb fd9b 	bl	8001558 <rotary_read_value>
 8005a22:	4603      	mov	r3, r0
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f91a 	bl	8005c60 <velotrace_calc_gain_kd>
 8005a2c:	ed87 0a00 	vstr	s0, [r7]
                break;
 8005a30:	e00c      	b.n	8005a4c <velotrace_start+0x10c>
            case tracer_tuning:
            default:
                target = 0;
 8005a32:	f04f 0300 	mov.w	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
                kp = 0;
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	60bb      	str	r3, [r7, #8]
                ki = 0;
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	607b      	str	r3, [r7, #4]
                kd = 0;
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	603b      	str	r3, [r7, #0]
                break;
 8005a4a:	bf00      	nop
        }
        velotrace_set_target_direct(target);
 8005a4c:	ed97 0a03 	vldr	s0, [r7, #12]
 8005a50:	f000 f82a 	bl	8005aa8 <velotrace_set_target_direct>
        velotrace_set_gain_direct(kp, ki, kd);
 8005a54:	ed97 1a00 	vldr	s2, [r7]
 8005a58:	edd7 0a01 	vldr	s1, [r7, #4]
 8005a5c:	ed97 0a02 	vldr	s0, [r7, #8]
 8005a60:	f000 f862 	bl	8005b28 <velotrace_set_gain_direct>
    }
    velotrace_started = 1;
 8005a64:	4b03      	ldr	r3, [pc, #12]	; (8005a74 <velotrace_start+0x134>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	2001de0e 	.word	0x2001de0e
 8005a78:	2001de10 	.word	0x2001de10
 8005a7c:	2001de08 	.word	0x2001de08
 8005a80:	2001de0c 	.word	0x2001de0c
 8005a84:	447a0000 	.word	0x447a0000
 8005a88:	42c80000 	.word	0x42c80000

08005a8c <velotrace_stop>:

void velotrace_stop()
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
    velotrace_set_target_zero();
 8005a90:	f000 f864 	bl	8005b5c <velotrace_set_target_zero>
    velotrace_set_gain_zero();
 8005a94:	f000 f86c 	bl	8005b70 <velotrace_set_gain_zero>
    velotrace_started = 0;
 8005a98:	4b02      	ldr	r3, [pc, #8]	; (8005aa4 <velotrace_stop+0x18>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	2001de0e 	.word	0x2001de0e

08005aa8 <velotrace_set_target_direct>:
{
    velotrace_pid.target = velotrace_calc_target(i);
}

void velotrace_set_target_direct(float target)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.target = target;
 8005ab2:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <velotrace_set_target_direct+0x1c>)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6013      	str	r3, [r2, #0]
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	2001de14 	.word	0x2001de14

08005ac8 <velotrace_set_gain_kp_direct>:
{
    velotrace_set_gain_kd_direct(velotrace_calc_gain_kd(i));
}

void velotrace_set_gain_kp_direct(float kp)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kp = kp;
 8005ad2:	4a04      	ldr	r2, [pc, #16]	; (8005ae4 <velotrace_set_gain_kp_direct+0x1c>)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6053      	str	r3, [r2, #4]
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	2001de14 	.word	0x2001de14

08005ae8 <velotrace_set_gain_ki_direct>:

void velotrace_set_gain_ki_direct(float ki)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.ki = ki;
 8005af2:	4a04      	ldr	r2, [pc, #16]	; (8005b04 <velotrace_set_gain_ki_direct+0x1c>)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6093      	str	r3, [r2, #8]
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	2001de14 	.word	0x2001de14

08005b08 <velotrace_set_gain_kd_direct>:

void velotrace_set_gain_kd_direct(float kd)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kd = kd;
 8005b12:	4a04      	ldr	r2, [pc, #16]	; (8005b24 <velotrace_set_gain_kd_direct+0x1c>)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60d3      	str	r3, [r2, #12]
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	2001de14 	.word	0x2001de14

08005b28 <velotrace_set_gain_direct>:

void velotrace_set_gain_direct(float kp, float ki, float kd)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8005b32:	edc7 0a02 	vstr	s1, [r7, #8]
 8005b36:	ed87 1a01 	vstr	s2, [r7, #4]
    velotrace_set_gain_kp_direct(kp);
 8005b3a:	ed97 0a03 	vldr	s0, [r7, #12]
 8005b3e:	f7ff ffc3 	bl	8005ac8 <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(ki);
 8005b42:	ed97 0a02 	vldr	s0, [r7, #8]
 8005b46:	f7ff ffcf 	bl	8005ae8 <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(kd);
 8005b4a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b4e:	f7ff ffdb 	bl	8005b08 <velotrace_set_gain_kd_direct>
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <velotrace_set_target_zero>:

/* target kp ki kd set zero */
void velotrace_set_target_zero()
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
    velotrace_set_target_direct(0);
 8005b60:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005b6c <velotrace_set_target_zero+0x10>
 8005b64:	f7ff ffa0 	bl	8005aa8 <velotrace_set_target_direct>
}
 8005b68:	bf00      	nop
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	00000000 	.word	0x00000000

08005b70 <velotrace_set_gain_zero>:

void velotrace_set_gain_zero()
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
    velotrace_set_gain_kp_direct(0);
 8005b74:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005b90 <velotrace_set_gain_zero+0x20>
 8005b78:	f7ff ffa6 	bl	8005ac8 <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(0);
 8005b7c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8005b90 <velotrace_set_gain_zero+0x20>
 8005b80:	f7ff ffb2 	bl	8005ae8 <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(0);
 8005b84:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005b90 <velotrace_set_gain_zero+0x20>
 8005b88:	f7ff ffbe 	bl	8005b08 <velotrace_set_gain_kd_direct>
}
 8005b8c:	bf00      	nop
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	00000000 	.word	0x00000000

08005b94 <velotrace_calc_target>:

/* calclate pid values from rotary value */
float velotrace_calc_target(unsigned short int i)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	f1c3 030f 	rsb	r3, r3, #15
 8005ba4:	ee07 3a90 	vmov	s15, r3
 8005ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005bb0:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bb8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <velotrace_calc_gain_kp>:

float velotrace_calc_gain_kp(unsigned short int i)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	f1c3 030f 	rsb	r3, r3, #15
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005c10 <velotrace_calc_gain_kp+0x40>
 8005bec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bf0:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bf8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005c14 <velotrace_calc_gain_kp+0x44>
 8005bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005c00:	eeb0 0a67 	vmov.f32	s0, s15
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	00000000 	.word	0x00000000
 8005c14:	447a0000 	.word	0x447a0000

08005c18 <velotrace_calc_gain_ki>:

float velotrace_calc_gain_ki(unsigned short int i)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	f1c3 030f 	rsb	r3, r3, #15
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c30:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005c58 <velotrace_calc_gain_ki+0x40>
 8005c34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c38:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005c3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c40:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005c5c <velotrace_calc_gain_ki+0x44>
 8005c44:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005c48:	eeb0 0a67 	vmov.f32	s0, s15
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	00000000 	.word	0x00000000
 8005c5c:	42c80000 	.word	0x42c80000

08005c60 <velotrace_calc_gain_kd>:

float velotrace_calc_gain_kd(unsigned short int i)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	f1c3 030f 	rsb	r3, r3, #15
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c78:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005ca0 <velotrace_calc_gain_kd+0x40>
 8005c7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005c80:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005c84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c88:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ca0 <velotrace_calc_gain_kd+0x40>
 8005c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005c90:	eeb0 0a67 	vmov.f32	s0, s15
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	00000000 	.word	0x00000000

08005ca4 <velotrace_read_values>:
    velotrace_pid.ki = _pid->ki;
    velotrace_pid.kd = _pid->kd;
}

PID* velotrace_read_values()
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
    return &velotrace_pid;
 8005ca8:	4b02      	ldr	r3, [pc, #8]	; (8005cb4 <velotrace_read_values+0x10>)
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	2001de14 	.word	0x2001de14

08005cb8 <velotrace_solve>:

float velotrace_solve(float reference_)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	ed87 0a01 	vstr	s0, [r7, #4]
    float error;
    float d_error;
    float result;

    error = reference_ - velotrace_pid.target;
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <velotrace_solve+0xc8>)
 8005cc4:	edd3 7a00 	vldr	s15, [r3]
 8005cc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8005ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cd0:	edc7 7a05 	vstr	s15, [r7, #20]

    d_error = (error - velotrace_before_error) / (float) (velotrace_sampling_time_ms / (float) 1000);
 8005cd4:	4b2b      	ldr	r3, [pc, #172]	; (8005d84 <velotrace_solve+0xcc>)
 8005cd6:	edd3 7a00 	vldr	s15, [r3]
 8005cda:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cde:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005ce2:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <velotrace_solve+0xd0>)
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cee:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8005d8c <velotrace_solve+0xd4>
 8005cf2:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8005cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cfa:	edc7 7a04 	vstr	s15, [r7, #16]
    velotrace_s_error += error * (float) (velotrace_sampling_time_ms / (float) 1000);
 8005cfe:	4b22      	ldr	r3, [pc, #136]	; (8005d88 <velotrace_solve+0xd0>)
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d0a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005d8c <velotrace_solve+0xd4>
 8005d0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005d12:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d1a:	4b1d      	ldr	r3, [pc, #116]	; (8005d90 <velotrace_solve+0xd8>)
 8005d1c:	edd3 7a00 	vldr	s15, [r3]
 8005d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d24:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <velotrace_solve+0xd8>)
 8005d26:	edc3 7a00 	vstr	s15, [r3]

    result = - (velotrace_pid.kp * error + velotrace_pid.ki * velotrace_s_error + velotrace_pid.kd * d_error);
 8005d2a:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <velotrace_solve+0xc8>)
 8005d2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d38:	4b11      	ldr	r3, [pc, #68]	; (8005d80 <velotrace_solve+0xc8>)
 8005d3a:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d3e:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <velotrace_solve+0xd8>)
 8005d40:	edd3 7a00 	vldr	s15, [r3]
 8005d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <velotrace_solve+0xc8>)
 8005d4e:	edd3 6a03 	vldr	s13, [r3, #12]
 8005d52:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d5e:	eef1 7a67 	vneg.f32	s15, s15
 8005d62:	edc7 7a03 	vstr	s15, [r7, #12]
    printf("velotrace_solve()\r\n");
    printf("reference_ - velotrace_pid.target = %7.2f - %7.2f = %7.2f\r\n", reference_, velotrace_pid.target, reference_ - velotrace_pid.target);
    printf("%7.2f = %7.2f * %7.2f + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, velotrace_pid.kp, error, velotrace_pid.ki, velotrace_s_error, velotrace_pid.kd, d_error);
    #endif

    velotrace_before_error = error;
 8005d66:	4a07      	ldr	r2, [pc, #28]	; (8005d84 <velotrace_solve+0xcc>)
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	6013      	str	r3, [r2, #0]

    return result;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	ee07 3a90 	vmov	s15, r3
}
 8005d72:	eeb0 0a67 	vmov.f32	s0, s15
 8005d76:	371c      	adds	r7, #28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	2001de14 	.word	0x2001de14
 8005d84:	2001de08 	.word	0x2001de08
 8005d88:	2001de04 	.word	0x2001de04
 8005d8c:	447a0000 	.word	0x447a0000
 8005d90:	2001de10 	.word	0x2001de10

08005d94 <velotrace_print_values>:

void velotrace_print_values()
{
 8005d94:	b480      	push	{r7}
 8005d96:	af00      	add	r7, sp, #0
#if D_VELOTRACE
	printf("velo > target = %5.3f\r\n", velotrace_read_target());
	//! printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_calc_gain_kp(rotary_read_value()), velotrace_calc_gain_ki(rotary_read_value()), velotrace_calc_gain_kd(rotary_read_value()));
#endif
}
 8005d98:	bf00      	nop
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <velotrace_gain_tuning>:

void velotrace_gain_tuning()
{
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
    //! 右センサを読んでからの時間を格納する
    velotrace_gain_tuning_time_ms += velotrace_sampling_time_ms;
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <velotrace_gain_tuning+0x34>)
 8005daa:	881a      	ldrh	r2, [r3, #0]
 8005dac:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <velotrace_gain_tuning+0x38>)
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	4413      	add	r3, r2
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <velotrace_gain_tuning+0x34>)
 8005db6:	801a      	strh	r2, [r3, #0]
    //! 停止時間になったら
    if(velotrace_gain_tuning_time_ms >= VELOTRACE_GAIN_TUNING_STOP_TIME_MS)
 8005db8:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <velotrace_gain_tuning+0x34>)
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d903      	bls.n	8005dcc <velotrace_gain_tuning+0x28>
    {
        //! 速度の目標値をゼロにする
        velotrace_pid.target = 0;
 8005dc4:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <velotrace_gain_tuning+0x3c>)
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
    }
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	2001de0c 	.word	0x2001de0c
 8005ddc:	2001de04 	.word	0x2001de04
 8005de0:	2001de14 	.word	0x2001de14

08005de4 <virtual_marker_init>:
#include "virtual_marker.h"

SideSensorState virtual_marker_state, virtual_marker_state_volatile;

void virtual_marker_init()
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	af00      	add	r7, sp, #0
    sidesensor_init();
 8005de8:	f7fe fa40 	bl	800426c <sidesensor_init>
}
 8005dec:	bf00      	nop
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <virtual_marker_start>:

void virtual_marker_start()
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
    sidesensor_start();
 8005df4:	f7fe fa42 	bl	800427c <sidesensor_start>
    virtual_marker_set();
 8005df8:	f000 f810 	bl	8005e1c <virtual_marker_set>
}
 8005dfc:	bf00      	nop
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <virtual_marker_main>:

void virtual_marker_main()
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
    /* virtual_main */
    sidesensor_main();
 8005e04:	f7fe facc 	bl	80043a0 <sidesensor_main>
    virtual_marker_set();
 8005e08:	f000 f808 	bl	8005e1c <virtual_marker_set>
}
 8005e0c:	bf00      	nop
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <virtual_marker_stop>:

void virtual_marker_stop()
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
    sidesensor_stop();
 8005e14:	f7fe fa58 	bl	80042c8 <sidesensor_stop>
}
 8005e18:	bf00      	nop
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <virtual_marker_set>:

void virtual_marker_set()
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
    virtual_marker_state = sidesensor_read_markerstate();
 8005e20:	f7fe fa5a 	bl	80042d8 <sidesensor_read_markerstate>
 8005e24:	4603      	mov	r3, r0
 8005e26:	461a      	mov	r2, r3
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <virtual_marker_set+0x20>)
 8005e2a:	701a      	strb	r2, [r3, #0]
    virtual_marker_state_volatile = sidesensor_read_markerstate_volatile();
 8005e2c:	f7fe fa60 	bl	80042f0 <sidesensor_read_markerstate_volatile>
 8005e30:	4603      	mov	r3, r0
 8005e32:	461a      	mov	r2, r3
 8005e34:	4b02      	ldr	r3, [pc, #8]	; (8005e40 <virtual_marker_set+0x24>)
 8005e36:	701a      	strb	r2, [r3, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	2001de25 	.word	0x2001de25
 8005e40:	2001de24 	.word	0x2001de24

08005e44 <virtual_marker_read_markerstate>:

SideSensorState virtual_marker_read_markerstate()
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
    return virtual_marker_state;
 8005e48:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <virtual_marker_read_markerstate+0x14>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	2001de25 	.word	0x2001de25

08005e5c <virtual_marker_read_markerstate_volatile>:

SideSensorState virtual_marker_read_markerstate_volatile()
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
    if(course_read_section_degree() / course_read_sampling_count() >= THRESHOLD_YAW_CURVE_OR_STRAIGHT)
    {
        virtual_marker_state_volatile = curve;
    }
    */
    return virtual_marker_state_volatile;
 8005e60:	4b03      	ldr	r3, [pc, #12]	; (8005e70 <virtual_marker_read_markerstate_volatile+0x14>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	2001de24 	.word	0x2001de24

08005e74 <virtual_marker_d_print>:

void virtual_marker_d_print()
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0

}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
	...

08005e84 <Reset_Handler>:
 8005e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ebc <LoopFillZerobss+0x14>
 8005e88:	2100      	movs	r1, #0
 8005e8a:	e003      	b.n	8005e94 <LoopCopyDataInit>

08005e8c <CopyDataInit>:
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ec0 <LoopFillZerobss+0x18>)
 8005e8e:	585b      	ldr	r3, [r3, r1]
 8005e90:	5043      	str	r3, [r0, r1]
 8005e92:	3104      	adds	r1, #4

08005e94 <LoopCopyDataInit>:
 8005e94:	480b      	ldr	r0, [pc, #44]	; (8005ec4 <LoopFillZerobss+0x1c>)
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <LoopFillZerobss+0x20>)
 8005e98:	1842      	adds	r2, r0, r1
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d3f6      	bcc.n	8005e8c <CopyDataInit>
 8005e9e:	4a0b      	ldr	r2, [pc, #44]	; (8005ecc <LoopFillZerobss+0x24>)
 8005ea0:	e002      	b.n	8005ea8 <LoopFillZerobss>

08005ea2 <FillZerobss>:
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f842 3b04 	str.w	r3, [r2], #4

08005ea8 <LoopFillZerobss>:
 8005ea8:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <LoopFillZerobss+0x28>)
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d3f9      	bcc.n	8005ea2 <FillZerobss>
 8005eae:	f7fe ff8d 	bl	8004dcc <SystemInit>
 8005eb2:	f004 fe4f 	bl	800ab54 <__libc_init_array>
 8005eb6:	f7fd f8c7 	bl	8003048 <main>
 8005eba:	4770      	bx	lr
 8005ebc:	20020000 	.word	0x20020000
 8005ec0:	080108c8 	.word	0x080108c8
 8005ec4:	20000000 	.word	0x20000000
 8005ec8:	200001e0 	.word	0x200001e0
 8005ecc:	200001e0 	.word	0x200001e0
 8005ed0:	2001de50 	.word	0x2001de50

08005ed4 <ADC_IRQHandler>:
 8005ed4:	e7fe      	b.n	8005ed4 <ADC_IRQHandler>
	...

08005ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005edc:	4b0e      	ldr	r3, [pc, #56]	; (8005f18 <HAL_Init+0x40>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a0d      	ldr	r2, [pc, #52]	; (8005f18 <HAL_Init+0x40>)
 8005ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <HAL_Init+0x40>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a0a      	ldr	r2, [pc, #40]	; (8005f18 <HAL_Init+0x40>)
 8005eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ef4:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <HAL_Init+0x40>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a07      	ldr	r2, [pc, #28]	; (8005f18 <HAL_Init+0x40>)
 8005efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f00:	2003      	movs	r0, #3
 8005f02:	f000 fdaf 	bl	8006a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f06:	2000      	movs	r0, #0
 8005f08:	f000 f808 	bl	8005f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f0c:	f7fe fafe 	bl	800450c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	40023c00 	.word	0x40023c00

08005f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f24:	4b12      	ldr	r3, [pc, #72]	; (8005f70 <HAL_InitTick+0x54>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <HAL_InitTick+0x58>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fdc7 	bl	8006ace <HAL_SYSTICK_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e00e      	b.n	8005f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b0f      	cmp	r3, #15
 8005f4e:	d80a      	bhi.n	8005f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005f50:	2200      	movs	r2, #0
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	f000 fd8f 	bl	8006a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f5c:	4a06      	ldr	r2, [pc, #24]	; (8005f78 <HAL_InitTick+0x5c>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e000      	b.n	8005f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20000000 	.word	0x20000000
 8005f74:	20000008 	.word	0x20000008
 8005f78:	20000004 	.word	0x20000004

08005f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f80:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <HAL_IncTick+0x20>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_IncTick+0x24>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	4a04      	ldr	r2, [pc, #16]	; (8005fa0 <HAL_IncTick+0x24>)
 8005f8e:	6013      	str	r3, [r2, #0]
}
 8005f90:	bf00      	nop
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	20000008 	.word	0x20000008
 8005fa0:	2001de28 	.word	0x2001de28

08005fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8005fa8:	4b03      	ldr	r3, [pc, #12]	; (8005fb8 <HAL_GetTick+0x14>)
 8005faa:	681b      	ldr	r3, [r3, #0]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	2001de28 	.word	0x2001de28

08005fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005fc4:	f7ff ffee 	bl	8005fa4 <HAL_GetTick>
 8005fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d005      	beq.n	8005fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005fd6:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <HAL_Delay+0x40>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005fe2:	bf00      	nop
 8005fe4:	f7ff ffde 	bl	8005fa4 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d8f7      	bhi.n	8005fe4 <HAL_Delay+0x28>
  {
  }
}
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20000008 	.word	0x20000008

08006000 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e033      	b.n	800607e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d109      	bne.n	8006032 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fe faa0 	bl	8004564 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f003 0310 	and.w	r3, r3, #16
 800603a:	2b00      	cmp	r3, #0
 800603c:	d118      	bne.n	8006070 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006046:	f023 0302 	bic.w	r3, r3, #2
 800604a:	f043 0202 	orr.w	r2, r3, #2
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fab8 	bl	80065c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	f043 0201 	orr.w	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	641a      	str	r2, [r3, #64]	; 0x40
 800606e:	e001      	b.n	8006074 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800607c:	7bfb      	ldrb	r3, [r7, #15]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_ADC_Start_DMA+0x1e>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e0e9      	b.n	800627a <HAL_ADC_Start_DMA+0x1f2>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d018      	beq.n	80060ee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80060cc:	4b6d      	ldr	r3, [pc, #436]	; (8006284 <HAL_ADC_Start_DMA+0x1fc>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a6d      	ldr	r2, [pc, #436]	; (8006288 <HAL_ADC_Start_DMA+0x200>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	0c9a      	lsrs	r2, r3, #18
 80060d8:	4613      	mov	r3, r2
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4413      	add	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80060e0:	e002      	b.n	80060e8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f9      	bne.n	80060e2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fc:	d107      	bne.n	800610e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800610c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b01      	cmp	r3, #1
 800611a:	f040 80a1 	bne.w	8006260 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006126:	f023 0301 	bic.w	r3, r3, #1
 800612a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006144:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006148:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615c:	d106      	bne.n	800616c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	f023 0206 	bic.w	r2, r3, #6
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	645a      	str	r2, [r3, #68]	; 0x44
 800616a:	e002      	b.n	8006172 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800617a:	4b44      	ldr	r3, [pc, #272]	; (800628c <HAL_ADC_Start_DMA+0x204>)
 800617c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006182:	4a43      	ldr	r2, [pc, #268]	; (8006290 <HAL_ADC_Start_DMA+0x208>)
 8006184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	4a42      	ldr	r2, [pc, #264]	; (8006294 <HAL_ADC_Start_DMA+0x20c>)
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	4a41      	ldr	r2, [pc, #260]	; (8006298 <HAL_ADC_Start_DMA+0x210>)
 8006194:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800619e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80061ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	334c      	adds	r3, #76	; 0x4c
 80061ca:	4619      	mov	r1, r3
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f000 fd38 	bl	8006c44 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d12a      	bne.n	8006236 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a2d      	ldr	r2, [pc, #180]	; (800629c <HAL_ADC_Start_DMA+0x214>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d015      	beq.n	8006216 <HAL_ADC_Start_DMA+0x18e>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a2c      	ldr	r2, [pc, #176]	; (80062a0 <HAL_ADC_Start_DMA+0x218>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d105      	bne.n	8006200 <HAL_ADC_Start_DMA+0x178>
 80061f4:	4b25      	ldr	r3, [pc, #148]	; (800628c <HAL_ADC_Start_DMA+0x204>)
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a27      	ldr	r2, [pc, #156]	; (80062a4 <HAL_ADC_Start_DMA+0x21c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d136      	bne.n	8006278 <HAL_ADC_Start_DMA+0x1f0>
 800620a:	4b20      	ldr	r3, [pc, #128]	; (800628c <HAL_ADC_Start_DMA+0x204>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2b0f      	cmp	r3, #15
 8006214:	d830      	bhi.n	8006278 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d129      	bne.n	8006278 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006232:	609a      	str	r2, [r3, #8]
 8006234:	e020      	b.n	8006278 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a18      	ldr	r2, [pc, #96]	; (800629c <HAL_ADC_Start_DMA+0x214>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d11b      	bne.n	8006278 <HAL_ADC_Start_DMA+0x1f0>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d114      	bne.n	8006278 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800625c:	609a      	str	r2, [r3, #8]
 800625e:	e00b      	b.n	8006278 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006264:	f043 0210 	orr.w	r2, r3, #16
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006270:	f043 0201 	orr.w	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000000 	.word	0x20000000
 8006288:	431bde83 	.word	0x431bde83
 800628c:	40012300 	.word	0x40012300
 8006290:	080067c1 	.word	0x080067c1
 8006294:	0800687b 	.word	0x0800687b
 8006298:	08006897 	.word	0x08006897
 800629c:	40012000 	.word	0x40012000
 80062a0:	40012100 	.word	0x40012100
 80062a4:	40012200 	.word	0x40012200

080062a8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_ADC_Stop_DMA+0x1a>
 80062be:	2302      	movs	r3, #2
 80062c0:	e048      	b.n	8006354 <HAL_ADC_Stop_DMA+0xac>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d130      	bne.n	800634a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062f6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d10f      	bne.n	8006326 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fcf2 	bl	8006cf4 <HAL_DMA_Abort>
 8006310:	4603      	mov	r3, r0
 8006312:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006334:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800633e:	f023 0301 	bic.w	r3, r3, #1
 8006342:	f043 0201 	orr.w	r2, r3, #1
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006352:	7bfb      	ldrb	r3, [r7, #15]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_ADC_ConfigChannel+0x1c>
 800639c:	2302      	movs	r3, #2
 800639e:	e105      	b.n	80065ac <HAL_ADC_ConfigChannel+0x228>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b09      	cmp	r3, #9
 80063ae:	d925      	bls.n	80063fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68d9      	ldr	r1, [r3, #12]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	461a      	mov	r2, r3
 80063be:	4613      	mov	r3, r2
 80063c0:	005b      	lsls	r3, r3, #1
 80063c2:	4413      	add	r3, r2
 80063c4:	3b1e      	subs	r3, #30
 80063c6:	2207      	movs	r2, #7
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	43da      	mvns	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	400a      	ands	r2, r1
 80063d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68d9      	ldr	r1, [r3, #12]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	4618      	mov	r0, r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	4403      	add	r3, r0
 80063ee:	3b1e      	subs	r3, #30
 80063f0:	409a      	lsls	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e022      	b.n	8006442 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6919      	ldr	r1, [r3, #16]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	2207      	movs	r2, #7
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	43da      	mvns	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	400a      	ands	r2, r1
 800641e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6919      	ldr	r1, [r3, #16]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	4618      	mov	r0, r3
 8006432:	4603      	mov	r3, r0
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4403      	add	r3, r0
 8006438:	409a      	lsls	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b06      	cmp	r3, #6
 8006448:	d824      	bhi.n	8006494 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	3b05      	subs	r3, #5
 800645c:	221f      	movs	r2, #31
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43da      	mvns	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	400a      	ands	r2, r1
 800646a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	4618      	mov	r0, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	3b05      	subs	r3, #5
 8006486:	fa00 f203 	lsl.w	r2, r0, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	635a      	str	r2, [r3, #52]	; 0x34
 8006492:	e04c      	b.n	800652e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b0c      	cmp	r3, #12
 800649a:	d824      	bhi.n	80064e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	3b23      	subs	r3, #35	; 0x23
 80064ae:	221f      	movs	r2, #31
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	43da      	mvns	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	400a      	ands	r2, r1
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	4618      	mov	r0, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	3b23      	subs	r3, #35	; 0x23
 80064d8:	fa00 f203 	lsl.w	r2, r0, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
 80064e4:	e023      	b.n	800652e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	3b41      	subs	r3, #65	; 0x41
 80064f8:	221f      	movs	r2, #31
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43da      	mvns	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	400a      	ands	r2, r1
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	4618      	mov	r0, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	3b41      	subs	r3, #65	; 0x41
 8006522:	fa00 f203 	lsl.w	r2, r0, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800652e:	4b22      	ldr	r3, [pc, #136]	; (80065b8 <HAL_ADC_ConfigChannel+0x234>)
 8006530:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a21      	ldr	r2, [pc, #132]	; (80065bc <HAL_ADC_ConfigChannel+0x238>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d109      	bne.n	8006550 <HAL_ADC_ConfigChannel+0x1cc>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b12      	cmp	r3, #18
 8006542:	d105      	bne.n	8006550 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a19      	ldr	r2, [pc, #100]	; (80065bc <HAL_ADC_ConfigChannel+0x238>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d123      	bne.n	80065a2 <HAL_ADC_ConfigChannel+0x21e>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b10      	cmp	r3, #16
 8006560:	d003      	beq.n	800656a <HAL_ADC_ConfigChannel+0x1e6>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b11      	cmp	r3, #17
 8006568:	d11b      	bne.n	80065a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b10      	cmp	r3, #16
 800657c:	d111      	bne.n	80065a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800657e:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <HAL_ADC_ConfigChannel+0x23c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a10      	ldr	r2, [pc, #64]	; (80065c4 <HAL_ADC_ConfigChannel+0x240>)
 8006584:	fba2 2303 	umull	r2, r3, r2, r3
 8006588:	0c9a      	lsrs	r2, r3, #18
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006594:	e002      	b.n	800659c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	3b01      	subs	r3, #1
 800659a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f9      	bne.n	8006596 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3714      	adds	r7, #20
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	40012300 	.word	0x40012300
 80065bc:	40012000 	.word	0x40012000
 80065c0:	20000000 	.word	0x20000000
 80065c4:	431bde83 	.word	0x431bde83

080065c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80065d0:	4b79      	ldr	r3, [pc, #484]	; (80067b8 <ADC_Init+0x1f0>)
 80065d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6859      	ldr	r1, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	021a      	lsls	r2, r3, #8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6859      	ldr	r1, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6899      	ldr	r1, [r3, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	4a58      	ldr	r2, [pc, #352]	; (80067bc <ADC_Init+0x1f4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d022      	beq.n	80066a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800666e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6899      	ldr	r1, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006690:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6899      	ldr	r1, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	609a      	str	r2, [r3, #8]
 80066a4:	e00f      	b.n	80066c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80066c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0202 	bic.w	r2, r2, #2
 80066d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6899      	ldr	r1, [r3, #8]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	7e1b      	ldrb	r3, [r3, #24]
 80066e0:	005a      	lsls	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d01b      	beq.n	800672c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006702:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685a      	ldr	r2, [r3, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006712:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	3b01      	subs	r3, #1
 8006720:	035a      	lsls	r2, r3, #13
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	e007      	b.n	800673c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800673a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800674a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	3b01      	subs	r3, #1
 8006758:	051a      	lsls	r2, r3, #20
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6899      	ldr	r1, [r3, #8]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800677e:	025a      	lsls	r2, r3, #9
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006796:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6899      	ldr	r1, [r3, #8]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	029a      	lsls	r2, r3, #10
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	609a      	str	r2, [r3, #8]
}
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	40012300 	.word	0x40012300
 80067bc:	0f000001 	.word	0x0f000001

080067c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d13c      	bne.n	8006854 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d12b      	bne.n	800684c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d127      	bne.n	800684c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006806:	2b00      	cmp	r3, #0
 8006808:	d006      	beq.n	8006818 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006814:	2b00      	cmp	r3, #0
 8006816:	d119      	bne.n	800684c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0220 	bic.w	r2, r2, #32
 8006826:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d105      	bne.n	800684c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	f043 0201 	orr.w	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7fb f9d7 	bl	8001c00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006852:	e00e      	b.n	8006872 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	f003 0310 	and.w	r3, r3, #16
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f7ff fd85 	bl	8006370 <HAL_ADC_ErrorCallback>
}
 8006866:	e004      	b.n	8006872 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006886:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7ff fd67 	bl	800635c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2240      	movs	r2, #64	; 0x40
 80068a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ae:	f043 0204 	orr.w	r2, r3, #4
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff fd5a 	bl	8006370 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068bc:	bf00      	nop
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068d4:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <__NVIC_SetPriorityGrouping+0x44>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068e0:	4013      	ands	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068f6:	4a04      	ldr	r2, [pc, #16]	; (8006908 <__NVIC_SetPriorityGrouping+0x44>)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	60d3      	str	r3, [r2, #12]
}
 80068fc:	bf00      	nop
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	e000ed00 	.word	0xe000ed00

0800690c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006910:	4b04      	ldr	r3, [pc, #16]	; (8006924 <__NVIC_GetPriorityGrouping+0x18>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	f003 0307 	and.w	r3, r3, #7
}
 800691a:	4618      	mov	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	e000ed00 	.word	0xe000ed00

08006928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006936:	2b00      	cmp	r3, #0
 8006938:	db0b      	blt.n	8006952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	f003 021f 	and.w	r2, r3, #31
 8006940:	4907      	ldr	r1, [pc, #28]	; (8006960 <__NVIC_EnableIRQ+0x38>)
 8006942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	2001      	movs	r0, #1
 800694a:	fa00 f202 	lsl.w	r2, r0, r2
 800694e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	e000e100 	.word	0xe000e100

08006964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	6039      	str	r1, [r7, #0]
 800696e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006974:	2b00      	cmp	r3, #0
 8006976:	db0a      	blt.n	800698e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	490c      	ldr	r1, [pc, #48]	; (80069b0 <__NVIC_SetPriority+0x4c>)
 800697e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006982:	0112      	lsls	r2, r2, #4
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	440b      	add	r3, r1
 8006988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800698c:	e00a      	b.n	80069a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	b2da      	uxtb	r2, r3
 8006992:	4908      	ldr	r1, [pc, #32]	; (80069b4 <__NVIC_SetPriority+0x50>)
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	3b04      	subs	r3, #4
 800699c:	0112      	lsls	r2, r2, #4
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	440b      	add	r3, r1
 80069a2:	761a      	strb	r2, [r3, #24]
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	e000e100 	.word	0xe000e100
 80069b4:	e000ed00 	.word	0xe000ed00

080069b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b089      	sub	sp, #36	; 0x24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	f1c3 0307 	rsb	r3, r3, #7
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	bf28      	it	cs
 80069d6:	2304      	movcs	r3, #4
 80069d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	3304      	adds	r3, #4
 80069de:	2b06      	cmp	r3, #6
 80069e0:	d902      	bls.n	80069e8 <NVIC_EncodePriority+0x30>
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	3b03      	subs	r3, #3
 80069e6:	e000      	b.n	80069ea <NVIC_EncodePriority+0x32>
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069ec:	f04f 32ff 	mov.w	r2, #4294967295
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	43da      	mvns	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	401a      	ands	r2, r3
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a00:	f04f 31ff 	mov.w	r1, #4294967295
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0a:	43d9      	mvns	r1, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a10:	4313      	orrs	r3, r2
         );
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3724      	adds	r7, #36	; 0x24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
	...

08006a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a30:	d301      	bcc.n	8006a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a32:	2301      	movs	r3, #1
 8006a34:	e00f      	b.n	8006a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a36:	4a0a      	ldr	r2, [pc, #40]	; (8006a60 <SysTick_Config+0x40>)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a3e:	210f      	movs	r1, #15
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	f7ff ff8e 	bl	8006964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <SysTick_Config+0x40>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a4e:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <SysTick_Config+0x40>)
 8006a50:	2207      	movs	r2, #7
 8006a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	e000e010 	.word	0xe000e010

08006a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff ff29 	bl	80068c4 <__NVIC_SetPriorityGrouping>
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b086      	sub	sp, #24
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	4603      	mov	r3, r0
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
 8006a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a8c:	f7ff ff3e 	bl	800690c <__NVIC_GetPriorityGrouping>
 8006a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	6978      	ldr	r0, [r7, #20]
 8006a98:	f7ff ff8e 	bl	80069b8 <NVIC_EncodePriority>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff ff5d 	bl	8006964 <__NVIC_SetPriority>
}
 8006aaa:	bf00      	nop
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	4603      	mov	r3, r0
 8006aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff ff31 	bl	8006928 <__NVIC_EnableIRQ>
}
 8006ac6:	bf00      	nop
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7ff ffa2 	bl	8006a20 <SysTick_Config>
 8006adc:	4603      	mov	r3, r0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006af4:	f7ff fa56 	bl	8005fa4 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e099      	b.n	8006c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f022 0201 	bic.w	r2, r2, #1
 8006b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b24:	e00f      	b.n	8006b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b26:	f7ff fa3d 	bl	8005fa4 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b05      	cmp	r3, #5
 8006b32:	d908      	bls.n	8006b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2220      	movs	r2, #32
 8006b38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e078      	b.n	8006c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e8      	bne.n	8006b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4b38      	ldr	r3, [pc, #224]	; (8006c40 <HAL_DMA_Init+0x158>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d107      	bne.n	8006bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f023 0307 	bic.w	r3, r3, #7
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d117      	bne.n	8006c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00e      	beq.n	8006c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 fadf 	bl	80071b0 <DMA_CheckFifoParam>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2240      	movs	r2, #64	; 0x40
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006c06:	2301      	movs	r3, #1
 8006c08:	e016      	b.n	8006c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa96 	bl	8007144 <DMA_CalcBaseAndBitshift>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c20:	223f      	movs	r2, #63	; 0x3f
 8006c22:	409a      	lsls	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	f010803f 	.word	0xf010803f

08006c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <HAL_DMA_Start_IT+0x26>
 8006c66:	2302      	movs	r3, #2
 8006c68:	e040      	b.n	8006cec <HAL_DMA_Start_IT+0xa8>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d12f      	bne.n	8006cde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2202      	movs	r2, #2
 8006c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fa28 	bl	80070e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9c:	223f      	movs	r2, #63	; 0x3f
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0216 	orr.w	r2, r2, #22
 8006cb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d007      	beq.n	8006ccc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0208 	orr.w	r2, r2, #8
 8006cca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0201 	orr.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	e005      	b.n	8006cea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006d02:	f7ff f94f 	bl	8005fa4 <HAL_GetTick>
 8006d06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d008      	beq.n	8006d26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2280      	movs	r2, #128	; 0x80
 8006d18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e052      	b.n	8006dcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0216 	bic.w	r2, r2, #22
 8006d34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695a      	ldr	r2, [r3, #20]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <HAL_DMA_Abort+0x62>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0208 	bic.w	r2, r2, #8
 8006d64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0201 	bic.w	r2, r2, #1
 8006d74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d76:	e013      	b.n	8006da0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d78:	f7ff f914 	bl	8005fa4 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	d90c      	bls.n	8006da0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2203      	movs	r2, #3
 8006d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e015      	b.n	8006dcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e4      	bne.n	8006d78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db2:	223f      	movs	r2, #63	; 0x3f
 8006db4:	409a      	lsls	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006de0:	4b92      	ldr	r3, [pc, #584]	; (800702c <HAL_DMA_IRQHandler+0x258>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a92      	ldr	r2, [pc, #584]	; (8007030 <HAL_DMA_IRQHandler+0x25c>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	0a9b      	lsrs	r3, r3, #10
 8006dec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfe:	2208      	movs	r2, #8
 8006e00:	409a      	lsls	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4013      	ands	r3, r2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d01a      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d013      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0204 	bic.w	r2, r2, #4
 8006e26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	409a      	lsls	r2, r3
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e38:	f043 0201 	orr.w	r2, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e44:	2201      	movs	r2, #1
 8006e46:	409a      	lsls	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d012      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e62:	2201      	movs	r2, #1
 8006e64:	409a      	lsls	r2, r3
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	f043 0202 	orr.w	r2, r3, #2
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	409a      	lsls	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d012      	beq.n	8006eac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e98:	2204      	movs	r2, #4
 8006e9a:	409a      	lsls	r2, r3
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea4:	f043 0204 	orr.w	r2, r3, #4
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb0:	2210      	movs	r2, #16
 8006eb2:	409a      	lsls	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d043      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d03c      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ece:	2210      	movs	r2, #16
 8006ed0:	409a      	lsls	r2, r3
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d018      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d108      	bne.n	8006f04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d024      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
 8006f02:	e01f      	b.n	8006f44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d01b      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
 8006f14:	e016      	b.n	8006f44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d107      	bne.n	8006f34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0208 	bic.w	r2, r2, #8
 8006f32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f48:	2220      	movs	r2, #32
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 808e 	beq.w	8007072 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0310 	and.w	r3, r3, #16
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8086 	beq.w	8007072 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	409a      	lsls	r2, r3
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b05      	cmp	r3, #5
 8006f7c:	d136      	bne.n	8006fec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0216 	bic.w	r2, r2, #22
 8006f8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695a      	ldr	r2, [r3, #20]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d103      	bne.n	8006fae <HAL_DMA_IRQHandler+0x1da>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d007      	beq.n	8006fbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0208 	bic.w	r2, r2, #8
 8006fbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fc2:	223f      	movs	r2, #63	; 0x3f
 8006fc4:	409a      	lsls	r2, r3
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d07d      	beq.n	80070de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
        }
        return;
 8006fea:	e078      	b.n	80070de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01c      	beq.n	8007034 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d108      	bne.n	800701a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700c:	2b00      	cmp	r3, #0
 800700e:	d030      	beq.n	8007072 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
 8007018:	e02b      	b.n	8007072 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d027      	beq.n	8007072 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
 800702a:	e022      	b.n	8007072 <HAL_DMA_IRQHandler+0x29e>
 800702c:	20000000 	.word	0x20000000
 8007030:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10f      	bne.n	8007062 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0210 	bic.w	r2, r2, #16
 8007050:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007076:	2b00      	cmp	r3, #0
 8007078:	d032      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d022      	beq.n	80070cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2205      	movs	r2, #5
 800708a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	3301      	adds	r3, #1
 80070a2:	60bb      	str	r3, [r7, #8]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d307      	bcc.n	80070ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f2      	bne.n	800709e <HAL_DMA_IRQHandler+0x2ca>
 80070b8:	e000      	b.n	80070bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80070ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	4798      	blx	r3
 80070dc:	e000      	b.n	80070e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80070de:	bf00      	nop
    }
  }
}
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop

080070e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007104:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d108      	bne.n	8007128 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007126:	e007      	b.n	8007138 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	60da      	str	r2, [r3, #12]
}
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	b2db      	uxtb	r3, r3
 8007152:	3b10      	subs	r3, #16
 8007154:	4a14      	ldr	r2, [pc, #80]	; (80071a8 <DMA_CalcBaseAndBitshift+0x64>)
 8007156:	fba2 2303 	umull	r2, r3, r2, r3
 800715a:	091b      	lsrs	r3, r3, #4
 800715c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800715e:	4a13      	ldr	r2, [pc, #76]	; (80071ac <DMA_CalcBaseAndBitshift+0x68>)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b03      	cmp	r3, #3
 8007170:	d909      	bls.n	8007186 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800717a:	f023 0303 	bic.w	r3, r3, #3
 800717e:	1d1a      	adds	r2, r3, #4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	659a      	str	r2, [r3, #88]	; 0x58
 8007184:	e007      	b.n	8007196 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800718e:	f023 0303 	bic.w	r3, r3, #3
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	aaaaaaab 	.word	0xaaaaaaab
 80071ac:	08010548 	.word	0x08010548

080071b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d11f      	bne.n	800720a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d855      	bhi.n	800727c <DMA_CheckFifoParam+0xcc>
 80071d0:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <DMA_CheckFifoParam+0x28>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	080071e9 	.word	0x080071e9
 80071dc:	080071fb 	.word	0x080071fb
 80071e0:	080071e9 	.word	0x080071e9
 80071e4:	0800727d 	.word	0x0800727d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d045      	beq.n	8007280 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071f8:	e042      	b.n	8007280 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007202:	d13f      	bne.n	8007284 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007208:	e03c      	b.n	8007284 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007212:	d121      	bne.n	8007258 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b03      	cmp	r3, #3
 8007218:	d836      	bhi.n	8007288 <DMA_CheckFifoParam+0xd8>
 800721a:	a201      	add	r2, pc, #4	; (adr r2, 8007220 <DMA_CheckFifoParam+0x70>)
 800721c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007220:	08007231 	.word	0x08007231
 8007224:	08007237 	.word	0x08007237
 8007228:	08007231 	.word	0x08007231
 800722c:	08007249 	.word	0x08007249
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
      break;
 8007234:	e02f      	b.n	8007296 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d024      	beq.n	800728c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007246:	e021      	b.n	800728c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007250:	d11e      	bne.n	8007290 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007256:	e01b      	b.n	8007290 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d902      	bls.n	8007264 <DMA_CheckFifoParam+0xb4>
 800725e:	2b03      	cmp	r3, #3
 8007260:	d003      	beq.n	800726a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007262:	e018      	b.n	8007296 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	73fb      	strb	r3, [r7, #15]
      break;
 8007268:	e015      	b.n	8007296 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	73fb      	strb	r3, [r7, #15]
      break;
 800727a:	e00b      	b.n	8007294 <DMA_CheckFifoParam+0xe4>
      break;
 800727c:	bf00      	nop
 800727e:	e00a      	b.n	8007296 <DMA_CheckFifoParam+0xe6>
      break;
 8007280:	bf00      	nop
 8007282:	e008      	b.n	8007296 <DMA_CheckFifoParam+0xe6>
      break;
 8007284:	bf00      	nop
 8007286:	e006      	b.n	8007296 <DMA_CheckFifoParam+0xe6>
      break;
 8007288:	bf00      	nop
 800728a:	e004      	b.n	8007296 <DMA_CheckFifoParam+0xe6>
      break;
 800728c:	bf00      	nop
 800728e:	e002      	b.n	8007296 <DMA_CheckFifoParam+0xe6>
      break;   
 8007290:	bf00      	nop
 8007292:	e000      	b.n	8007296 <DMA_CheckFifoParam+0xe6>
      break;
 8007294:	bf00      	nop
    }
  } 
  
  return status; 
 8007296:	7bfb      	ldrb	r3, [r7, #15]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80072b6:	4b23      	ldr	r3, [pc, #140]	; (8007344 <HAL_FLASH_Program+0xa0>)
 80072b8:	7e1b      	ldrb	r3, [r3, #24]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d101      	bne.n	80072c2 <HAL_FLASH_Program+0x1e>
 80072be:	2302      	movs	r3, #2
 80072c0:	e03b      	b.n	800733a <HAL_FLASH_Program+0x96>
 80072c2:	4b20      	ldr	r3, [pc, #128]	; (8007344 <HAL_FLASH_Program+0xa0>)
 80072c4:	2201      	movs	r2, #1
 80072c6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80072c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80072cc:	f000 f870 	bl	80073b0 <FLASH_WaitForLastOperation>
 80072d0:	4603      	mov	r3, r0
 80072d2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d12b      	bne.n	8007332 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d105      	bne.n	80072ec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80072e0:	783b      	ldrb	r3, [r7, #0]
 80072e2:	4619      	mov	r1, r3
 80072e4:	68b8      	ldr	r0, [r7, #8]
 80072e6:	f000 f919 	bl	800751c <FLASH_Program_Byte>
 80072ea:	e016      	b.n	800731a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d105      	bne.n	80072fe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80072f2:	883b      	ldrh	r3, [r7, #0]
 80072f4:	4619      	mov	r1, r3
 80072f6:	68b8      	ldr	r0, [r7, #8]
 80072f8:	f000 f8ec 	bl	80074d4 <FLASH_Program_HalfWord>
 80072fc:	e00d      	b.n	800731a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b02      	cmp	r3, #2
 8007302:	d105      	bne.n	8007310 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	4619      	mov	r1, r3
 8007308:	68b8      	ldr	r0, [r7, #8]
 800730a:	f000 f8c1 	bl	8007490 <FLASH_Program_Word>
 800730e:	e004      	b.n	800731a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007314:	68b8      	ldr	r0, [r7, #8]
 8007316:	f000 f88b 	bl	8007430 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800731a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800731e:	f000 f847 	bl	80073b0 <FLASH_WaitForLastOperation>
 8007322:	4603      	mov	r3, r0
 8007324:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007326:	4b08      	ldr	r3, [pc, #32]	; (8007348 <HAL_FLASH_Program+0xa4>)
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	4a07      	ldr	r2, [pc, #28]	; (8007348 <HAL_FLASH_Program+0xa4>)
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007332:	4b04      	ldr	r3, [pc, #16]	; (8007344 <HAL_FLASH_Program+0xa0>)
 8007334:	2200      	movs	r2, #0
 8007336:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3718      	adds	r7, #24
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	2001de2c 	.word	0x2001de2c
 8007348:	40023c00 	.word	0x40023c00

0800734c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007356:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <HAL_FLASH_Unlock+0x38>)
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da0b      	bge.n	8007376 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800735e:	4b09      	ldr	r3, [pc, #36]	; (8007384 <HAL_FLASH_Unlock+0x38>)
 8007360:	4a09      	ldr	r2, [pc, #36]	; (8007388 <HAL_FLASH_Unlock+0x3c>)
 8007362:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007364:	4b07      	ldr	r3, [pc, #28]	; (8007384 <HAL_FLASH_Unlock+0x38>)
 8007366:	4a09      	ldr	r2, [pc, #36]	; (800738c <HAL_FLASH_Unlock+0x40>)
 8007368:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800736a:	4b06      	ldr	r3, [pc, #24]	; (8007384 <HAL_FLASH_Unlock+0x38>)
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	da01      	bge.n	8007376 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007376:	79fb      	ldrb	r3, [r7, #7]
}
 8007378:	4618      	mov	r0, r3
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	40023c00 	.word	0x40023c00
 8007388:	45670123 	.word	0x45670123
 800738c:	cdef89ab 	.word	0xcdef89ab

08007390 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <HAL_FLASH_Lock+0x1c>)
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	4a04      	ldr	r2, [pc, #16]	; (80073ac <HAL_FLASH_Lock+0x1c>)
 800739a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800739e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	40023c00 	.word	0x40023c00

080073b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80073bc:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <FLASH_WaitForLastOperation+0x78>)
 80073be:	2200      	movs	r2, #0
 80073c0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80073c2:	f7fe fdef 	bl	8005fa4 <HAL_GetTick>
 80073c6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80073c8:	e010      	b.n	80073ec <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d0:	d00c      	beq.n	80073ec <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d007      	beq.n	80073e8 <FLASH_WaitForLastOperation+0x38>
 80073d8:	f7fe fde4 	bl	8005fa4 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d201      	bcs.n	80073ec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e019      	b.n	8007420 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80073ec:	4b0f      	ldr	r3, [pc, #60]	; (800742c <FLASH_WaitForLastOperation+0x7c>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1e8      	bne.n	80073ca <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80073f8:	4b0c      	ldr	r3, [pc, #48]	; (800742c <FLASH_WaitForLastOperation+0x7c>)
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007404:	4b09      	ldr	r3, [pc, #36]	; (800742c <FLASH_WaitForLastOperation+0x7c>)
 8007406:	2201      	movs	r2, #1
 8007408:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800740a:	4b08      	ldr	r3, [pc, #32]	; (800742c <FLASH_WaitForLastOperation+0x7c>)
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007416:	f000 f8a3 	bl	8007560 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e000      	b.n	8007420 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
  
}  
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	2001de2c 	.word	0x2001de2c
 800742c:	40023c00 	.word	0x40023c00

08007430 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007430:	b490      	push	{r4, r7}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800743c:	4b13      	ldr	r3, [pc, #76]	; (800748c <FLASH_Program_DoubleWord+0x5c>)
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	4a12      	ldr	r2, [pc, #72]	; (800748c <FLASH_Program_DoubleWord+0x5c>)
 8007442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007446:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007448:	4b10      	ldr	r3, [pc, #64]	; (800748c <FLASH_Program_DoubleWord+0x5c>)
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	4a0f      	ldr	r2, [pc, #60]	; (800748c <FLASH_Program_DoubleWord+0x5c>)
 800744e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007452:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007454:	4b0d      	ldr	r3, [pc, #52]	; (800748c <FLASH_Program_DoubleWord+0x5c>)
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	4a0c      	ldr	r2, [pc, #48]	; (800748c <FLASH_Program_DoubleWord+0x5c>)
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8007466:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800746a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	f04f 0400 	mov.w	r4, #0
 8007476:	0013      	movs	r3, r2
 8007478:	2400      	movs	r4, #0
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	3204      	adds	r2, #4
 800747e:	6013      	str	r3, [r2, #0]
}
 8007480:	bf00      	nop
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bc90      	pop	{r4, r7}
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40023c00 	.word	0x40023c00

08007490 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800749a:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <FLASH_Program_Word+0x40>)
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <FLASH_Program_Word+0x40>)
 80074a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80074a6:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <FLASH_Program_Word+0x40>)
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <FLASH_Program_Word+0x40>)
 80074ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80074b2:	4b07      	ldr	r3, [pc, #28]	; (80074d0 <FLASH_Program_Word+0x40>)
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	4a06      	ldr	r2, [pc, #24]	; (80074d0 <FLASH_Program_Word+0x40>)
 80074b8:	f043 0301 	orr.w	r3, r3, #1
 80074bc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	601a      	str	r2, [r3, #0]
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	40023c00 	.word	0x40023c00

080074d4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80074e0:	4b0d      	ldr	r3, [pc, #52]	; (8007518 <FLASH_Program_HalfWord+0x44>)
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	4a0c      	ldr	r2, [pc, #48]	; (8007518 <FLASH_Program_HalfWord+0x44>)
 80074e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80074ec:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <FLASH_Program_HalfWord+0x44>)
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	4a09      	ldr	r2, [pc, #36]	; (8007518 <FLASH_Program_HalfWord+0x44>)
 80074f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80074f8:	4b07      	ldr	r3, [pc, #28]	; (8007518 <FLASH_Program_HalfWord+0x44>)
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	4a06      	ldr	r2, [pc, #24]	; (8007518 <FLASH_Program_HalfWord+0x44>)
 80074fe:	f043 0301 	orr.w	r3, r3, #1
 8007502:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	887a      	ldrh	r2, [r7, #2]
 8007508:	801a      	strh	r2, [r3, #0]
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40023c00 	.word	0x40023c00

0800751c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007528:	4b0c      	ldr	r3, [pc, #48]	; (800755c <FLASH_Program_Byte+0x40>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	4a0b      	ldr	r2, [pc, #44]	; (800755c <FLASH_Program_Byte+0x40>)
 800752e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007532:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007534:	4b09      	ldr	r3, [pc, #36]	; (800755c <FLASH_Program_Byte+0x40>)
 8007536:	4a09      	ldr	r2, [pc, #36]	; (800755c <FLASH_Program_Byte+0x40>)
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800753c:	4b07      	ldr	r3, [pc, #28]	; (800755c <FLASH_Program_Byte+0x40>)
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	4a06      	ldr	r2, [pc, #24]	; (800755c <FLASH_Program_Byte+0x40>)
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	78fa      	ldrb	r2, [r7, #3]
 800754c:	701a      	strb	r2, [r3, #0]
}
 800754e:	bf00      	nop
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40023c00 	.word	0x40023c00

08007560 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007564:	4b27      	ldr	r3, [pc, #156]	; (8007604 <FLASH_SetErrorCode+0xa4>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f003 0310 	and.w	r3, r3, #16
 800756c:	2b00      	cmp	r3, #0
 800756e:	d008      	beq.n	8007582 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007570:	4b25      	ldr	r3, [pc, #148]	; (8007608 <FLASH_SetErrorCode+0xa8>)
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	f043 0310 	orr.w	r3, r3, #16
 8007578:	4a23      	ldr	r2, [pc, #140]	; (8007608 <FLASH_SetErrorCode+0xa8>)
 800757a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800757c:	4b21      	ldr	r3, [pc, #132]	; (8007604 <FLASH_SetErrorCode+0xa4>)
 800757e:	2210      	movs	r2, #16
 8007580:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007582:	4b20      	ldr	r3, [pc, #128]	; (8007604 <FLASH_SetErrorCode+0xa4>)
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800758e:	4b1e      	ldr	r3, [pc, #120]	; (8007608 <FLASH_SetErrorCode+0xa8>)
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f043 0308 	orr.w	r3, r3, #8
 8007596:	4a1c      	ldr	r2, [pc, #112]	; (8007608 <FLASH_SetErrorCode+0xa8>)
 8007598:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800759a:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <FLASH_SetErrorCode+0xa4>)
 800759c:	2220      	movs	r2, #32
 800759e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80075a0:	4b18      	ldr	r3, [pc, #96]	; (8007604 <FLASH_SetErrorCode+0xa4>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80075ac:	4b16      	ldr	r3, [pc, #88]	; (8007608 <FLASH_SetErrorCode+0xa8>)
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	f043 0304 	orr.w	r3, r3, #4
 80075b4:	4a14      	ldr	r2, [pc, #80]	; (8007608 <FLASH_SetErrorCode+0xa8>)
 80075b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80075b8:	4b12      	ldr	r3, [pc, #72]	; (8007604 <FLASH_SetErrorCode+0xa4>)
 80075ba:	2240      	movs	r2, #64	; 0x40
 80075bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <FLASH_SetErrorCode+0xa4>)
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d008      	beq.n	80075dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80075ca:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <FLASH_SetErrorCode+0xa8>)
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	f043 0302 	orr.w	r3, r3, #2
 80075d2:	4a0d      	ldr	r2, [pc, #52]	; (8007608 <FLASH_SetErrorCode+0xa8>)
 80075d4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80075d6:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <FLASH_SetErrorCode+0xa4>)
 80075d8:	2280      	movs	r2, #128	; 0x80
 80075da:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80075dc:	4b09      	ldr	r3, [pc, #36]	; (8007604 <FLASH_SetErrorCode+0xa4>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80075e8:	4b07      	ldr	r3, [pc, #28]	; (8007608 <FLASH_SetErrorCode+0xa8>)
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	f043 0320 	orr.w	r3, r3, #32
 80075f0:	4a05      	ldr	r2, [pc, #20]	; (8007608 <FLASH_SetErrorCode+0xa8>)
 80075f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80075f4:	4b03      	ldr	r3, [pc, #12]	; (8007604 <FLASH_SetErrorCode+0xa4>)
 80075f6:	2202      	movs	r2, #2
 80075f8:	60da      	str	r2, [r3, #12]
  }
}
 80075fa:	bf00      	nop
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	40023c00 	.word	0x40023c00
 8007608:	2001de2c 	.word	0x2001de2c

0800760c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800761e:	4b31      	ldr	r3, [pc, #196]	; (80076e4 <HAL_FLASHEx_Erase+0xd8>)
 8007620:	7e1b      	ldrb	r3, [r3, #24]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_FLASHEx_Erase+0x1e>
 8007626:	2302      	movs	r3, #2
 8007628:	e058      	b.n	80076dc <HAL_FLASHEx_Erase+0xd0>
 800762a:	4b2e      	ldr	r3, [pc, #184]	; (80076e4 <HAL_FLASHEx_Erase+0xd8>)
 800762c:	2201      	movs	r2, #1
 800762e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007630:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007634:	f7ff febc 	bl	80073b0 <FLASH_WaitForLastOperation>
 8007638:	4603      	mov	r3, r0
 800763a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d148      	bne.n	80076d4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	f04f 32ff 	mov.w	r2, #4294967295
 8007648:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d115      	bne.n	800767e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	b2da      	uxtb	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	f000 f844 	bl	80076ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007664:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007668:	f7ff fea2 	bl	80073b0 <FLASH_WaitForLastOperation>
 800766c:	4603      	mov	r3, r0
 800766e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007670:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <HAL_FLASHEx_Erase+0xdc>)
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	4a1c      	ldr	r2, [pc, #112]	; (80076e8 <HAL_FLASHEx_Erase+0xdc>)
 8007676:	f023 0304 	bic.w	r3, r3, #4
 800767a:	6113      	str	r3, [r2, #16]
 800767c:	e028      	b.n	80076d0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	60bb      	str	r3, [r7, #8]
 8007684:	e01c      	b.n	80076c0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	4619      	mov	r1, r3
 800768e:	68b8      	ldr	r0, [r7, #8]
 8007690:	f000 f850 	bl	8007734 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007694:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007698:	f7ff fe8a 	bl	80073b0 <FLASH_WaitForLastOperation>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80076a0:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <HAL_FLASHEx_Erase+0xdc>)
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <HAL_FLASHEx_Erase+0xdc>)
 80076a6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80076aa:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	601a      	str	r2, [r3, #0]
          break;
 80076b8:	e00a      	b.n	80076d0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	3301      	adds	r3, #1
 80076be:	60bb      	str	r3, [r7, #8]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	4413      	add	r3, r2
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d3da      	bcc.n	8007686 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80076d0:	f000 f878 	bl	80077c4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80076d4:	4b03      	ldr	r3, [pc, #12]	; (80076e4 <HAL_FLASHEx_Erase+0xd8>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	761a      	strb	r2, [r3, #24]

  return status;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	2001de2c 	.word	0x2001de2c
 80076e8:	40023c00 	.word	0x40023c00

080076ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <FLASH_MassErase+0x44>)
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	4a0c      	ldr	r2, [pc, #48]	; (8007730 <FLASH_MassErase+0x44>)
 80076fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007702:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007704:	4b0a      	ldr	r3, [pc, #40]	; (8007730 <FLASH_MassErase+0x44>)
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	4a09      	ldr	r2, [pc, #36]	; (8007730 <FLASH_MassErase+0x44>)
 800770a:	f043 0304 	orr.w	r3, r3, #4
 800770e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007710:	4b07      	ldr	r3, [pc, #28]	; (8007730 <FLASH_MassErase+0x44>)
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	4313      	orrs	r3, r2
 800771a:	4a05      	ldr	r2, [pc, #20]	; (8007730 <FLASH_MassErase+0x44>)
 800771c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007720:	6113      	str	r3, [r2, #16]
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40023c00 	.word	0x40023c00

08007734 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	e010      	b.n	8007772 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d103      	bne.n	800775e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	e009      	b.n	8007772 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d103      	bne.n	800776c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007764:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	e002      	b.n	8007772 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800776c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007770:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007772:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <FLASH_Erase_Sector+0x8c>)
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	4a12      	ldr	r2, [pc, #72]	; (80077c0 <FLASH_Erase_Sector+0x8c>)
 8007778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800777c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800777e:	4b10      	ldr	r3, [pc, #64]	; (80077c0 <FLASH_Erase_Sector+0x8c>)
 8007780:	691a      	ldr	r2, [r3, #16]
 8007782:	490f      	ldr	r1, [pc, #60]	; (80077c0 <FLASH_Erase_Sector+0x8c>)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4313      	orrs	r3, r2
 8007788:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800778a:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <FLASH_Erase_Sector+0x8c>)
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	4a0c      	ldr	r2, [pc, #48]	; (80077c0 <FLASH_Erase_Sector+0x8c>)
 8007790:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007794:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007796:	4b0a      	ldr	r3, [pc, #40]	; (80077c0 <FLASH_Erase_Sector+0x8c>)
 8007798:	691a      	ldr	r2, [r3, #16]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	4313      	orrs	r3, r2
 80077a0:	4a07      	ldr	r2, [pc, #28]	; (80077c0 <FLASH_Erase_Sector+0x8c>)
 80077a2:	f043 0302 	orr.w	r3, r3, #2
 80077a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80077a8:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <FLASH_Erase_Sector+0x8c>)
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	4a04      	ldr	r2, [pc, #16]	; (80077c0 <FLASH_Erase_Sector+0x8c>)
 80077ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b2:	6113      	str	r3, [r2, #16]
}
 80077b4:	bf00      	nop
 80077b6:	3714      	adds	r7, #20
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	40023c00 	.word	0x40023c00

080077c4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80077c8:	4b20      	ldr	r3, [pc, #128]	; (800784c <FLASH_FlushCaches+0x88>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d017      	beq.n	8007804 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80077d4:	4b1d      	ldr	r3, [pc, #116]	; (800784c <FLASH_FlushCaches+0x88>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1c      	ldr	r2, [pc, #112]	; (800784c <FLASH_FlushCaches+0x88>)
 80077da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077de:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80077e0:	4b1a      	ldr	r3, [pc, #104]	; (800784c <FLASH_FlushCaches+0x88>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a19      	ldr	r2, [pc, #100]	; (800784c <FLASH_FlushCaches+0x88>)
 80077e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	4b17      	ldr	r3, [pc, #92]	; (800784c <FLASH_FlushCaches+0x88>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a16      	ldr	r2, [pc, #88]	; (800784c <FLASH_FlushCaches+0x88>)
 80077f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077f6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80077f8:	4b14      	ldr	r3, [pc, #80]	; (800784c <FLASH_FlushCaches+0x88>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a13      	ldr	r2, [pc, #76]	; (800784c <FLASH_FlushCaches+0x88>)
 80077fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007802:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007804:	4b11      	ldr	r3, [pc, #68]	; (800784c <FLASH_FlushCaches+0x88>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800780c:	2b00      	cmp	r3, #0
 800780e:	d017      	beq.n	8007840 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007810:	4b0e      	ldr	r3, [pc, #56]	; (800784c <FLASH_FlushCaches+0x88>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a0d      	ldr	r2, [pc, #52]	; (800784c <FLASH_FlushCaches+0x88>)
 8007816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800781a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800781c:	4b0b      	ldr	r3, [pc, #44]	; (800784c <FLASH_FlushCaches+0x88>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a0a      	ldr	r2, [pc, #40]	; (800784c <FLASH_FlushCaches+0x88>)
 8007822:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	4b08      	ldr	r3, [pc, #32]	; (800784c <FLASH_FlushCaches+0x88>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a07      	ldr	r2, [pc, #28]	; (800784c <FLASH_FlushCaches+0x88>)
 800782e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007832:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <FLASH_FlushCaches+0x88>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a04      	ldr	r2, [pc, #16]	; (800784c <FLASH_FlushCaches+0x88>)
 800783a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800783e:	6013      	str	r3, [r2, #0]
  }
}
 8007840:	bf00      	nop
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40023c00 	.word	0x40023c00

08007850 <HAL_GPIO_Init>:
 8007850:	b480      	push	{r7}
 8007852:	b089      	sub	sp, #36	; 0x24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]
 800785e:	2300      	movs	r3, #0
 8007860:	613b      	str	r3, [r7, #16]
 8007862:	2300      	movs	r3, #0
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	2300      	movs	r3, #0
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	e16b      	b.n	8007b44 <HAL_GPIO_Init+0x2f4>
 800786c:	2201      	movs	r2, #1
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	617b      	str	r3, [r7, #20]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4013      	ands	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	429a      	cmp	r2, r3
 8007886:	f040 815a 	bne.w	8007b3e <HAL_GPIO_Init+0x2ee>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	2b01      	cmp	r3, #1
 8007894:	d005      	beq.n	80078a2 <HAL_GPIO_Init+0x52>
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d130      	bne.n	8007904 <HAL_GPIO_Init+0xb4>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	2203      	movs	r2, #3
 80078ae:	fa02 f303 	lsl.w	r3, r2, r3
 80078b2:	43db      	mvns	r3, r3
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	4013      	ands	r3, r2
 80078b8:	61bb      	str	r3, [r7, #24]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	fa02 f303 	lsl.w	r3, r2, r3
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	61bb      	str	r3, [r7, #24]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	609a      	str	r2, [r3, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	61bb      	str	r3, [r7, #24]
 80078d8:	2201      	movs	r2, #1
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	fa02 f303 	lsl.w	r3, r2, r3
 80078e0:	43db      	mvns	r3, r3
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	4013      	ands	r3, r2
 80078e6:	61bb      	str	r3, [r7, #24]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	091b      	lsrs	r3, r3, #4
 80078ee:	f003 0201 	and.w	r2, r3, #1
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	fa02 f303 	lsl.w	r3, r2, r3
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	61bb      	str	r3, [r7, #24]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	605a      	str	r2, [r3, #4]
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f003 0303 	and.w	r3, r3, #3
 800790c:	2b03      	cmp	r3, #3
 800790e:	d017      	beq.n	8007940 <HAL_GPIO_Init+0xf0>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	2203      	movs	r2, #3
 800791c:	fa02 f303 	lsl.w	r3, r2, r3
 8007920:	43db      	mvns	r3, r3
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	4013      	ands	r3, r2
 8007926:	61bb      	str	r3, [r7, #24]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	4313      	orrs	r3, r2
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	60da      	str	r2, [r3, #12]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d123      	bne.n	8007994 <HAL_GPIO_Init+0x144>
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	08da      	lsrs	r2, r3, #3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3208      	adds	r2, #8
 8007954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	220f      	movs	r2, #15
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	43db      	mvns	r3, r3
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	4013      	ands	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	fa02 f303 	lsl.w	r3, r2, r3
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	4313      	orrs	r3, r2
 8007984:	61bb      	str	r3, [r7, #24]
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	08da      	lsrs	r2, r3, #3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3208      	adds	r2, #8
 800798e:	69b9      	ldr	r1, [r7, #24]
 8007990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	61bb      	str	r3, [r7, #24]
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	2203      	movs	r2, #3
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	43db      	mvns	r3, r3
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	4013      	ands	r3, r2
 80079aa:	61bb      	str	r3, [r7, #24]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f003 0203 	and.w	r2, r3, #3
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	fa02 f303 	lsl.w	r3, r2, r3
 80079bc:	69ba      	ldr	r2, [r7, #24]
 80079be:	4313      	orrs	r3, r2
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80b4 	beq.w	8007b3e <HAL_GPIO_Init+0x2ee>
 80079d6:	2300      	movs	r3, #0
 80079d8:	60fb      	str	r3, [r7, #12]
 80079da:	4b60      	ldr	r3, [pc, #384]	; (8007b5c <HAL_GPIO_Init+0x30c>)
 80079dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079de:	4a5f      	ldr	r2, [pc, #380]	; (8007b5c <HAL_GPIO_Init+0x30c>)
 80079e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079e4:	6453      	str	r3, [r2, #68]	; 0x44
 80079e6:	4b5d      	ldr	r3, [pc, #372]	; (8007b5c <HAL_GPIO_Init+0x30c>)
 80079e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ee:	60fb      	str	r3, [r7, #12]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a5b      	ldr	r2, [pc, #364]	; (8007b60 <HAL_GPIO_Init+0x310>)
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	089b      	lsrs	r3, r3, #2
 80079f8:	3302      	adds	r3, #2
 80079fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	220f      	movs	r2, #15
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	4013      	ands	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a52      	ldr	r2, [pc, #328]	; (8007b64 <HAL_GPIO_Init+0x314>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d02b      	beq.n	8007a76 <HAL_GPIO_Init+0x226>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a51      	ldr	r2, [pc, #324]	; (8007b68 <HAL_GPIO_Init+0x318>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d025      	beq.n	8007a72 <HAL_GPIO_Init+0x222>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a50      	ldr	r2, [pc, #320]	; (8007b6c <HAL_GPIO_Init+0x31c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d01f      	beq.n	8007a6e <HAL_GPIO_Init+0x21e>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4a4f      	ldr	r2, [pc, #316]	; (8007b70 <HAL_GPIO_Init+0x320>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d019      	beq.n	8007a6a <HAL_GPIO_Init+0x21a>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a4e      	ldr	r2, [pc, #312]	; (8007b74 <HAL_GPIO_Init+0x324>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d013      	beq.n	8007a66 <HAL_GPIO_Init+0x216>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a4d      	ldr	r2, [pc, #308]	; (8007b78 <HAL_GPIO_Init+0x328>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00d      	beq.n	8007a62 <HAL_GPIO_Init+0x212>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a4c      	ldr	r2, [pc, #304]	; (8007b7c <HAL_GPIO_Init+0x32c>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d007      	beq.n	8007a5e <HAL_GPIO_Init+0x20e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a4b      	ldr	r2, [pc, #300]	; (8007b80 <HAL_GPIO_Init+0x330>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d101      	bne.n	8007a5a <HAL_GPIO_Init+0x20a>
 8007a56:	2307      	movs	r3, #7
 8007a58:	e00e      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a5a:	2308      	movs	r3, #8
 8007a5c:	e00c      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a5e:	2306      	movs	r3, #6
 8007a60:	e00a      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a62:	2305      	movs	r3, #5
 8007a64:	e008      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a66:	2304      	movs	r3, #4
 8007a68:	e006      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e004      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e002      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a72:	2301      	movs	r3, #1
 8007a74:	e000      	b.n	8007a78 <HAL_GPIO_Init+0x228>
 8007a76:	2300      	movs	r3, #0
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	f002 0203 	and.w	r2, r2, #3
 8007a7e:	0092      	lsls	r2, r2, #2
 8007a80:	4093      	lsls	r3, r2
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
 8007a88:	4935      	ldr	r1, [pc, #212]	; (8007b60 <HAL_GPIO_Init+0x310>)
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	089b      	lsrs	r3, r3, #2
 8007a8e:	3302      	adds	r3, #2
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007a96:	4b3b      	ldr	r3, [pc, #236]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	61bb      	str	r3, [r7, #24]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	43db      	mvns	r3, r3
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	61bb      	str	r3, [r7, #24]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d003      	beq.n	8007aba <HAL_GPIO_Init+0x26a>
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	4a32      	ldr	r2, [pc, #200]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	4b30      	ldr	r3, [pc, #192]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	61bb      	str	r3, [r7, #24]
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	69ba      	ldr	r2, [r7, #24]
 8007acc:	4013      	ands	r3, r2
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_GPIO_Init+0x294>
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	61bb      	str	r3, [r7, #24]
 8007ae4:	4a27      	ldr	r2, [pc, #156]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	6053      	str	r3, [r2, #4]
 8007aea:	4b26      	ldr	r3, [pc, #152]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	61bb      	str	r3, [r7, #24]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	43db      	mvns	r3, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4013      	ands	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d003      	beq.n	8007b0e <HAL_GPIO_Init+0x2be>
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	4a1d      	ldr	r2, [pc, #116]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	6093      	str	r3, [r2, #8]
 8007b14:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	43db      	mvns	r3, r3
 8007b1e:	69ba      	ldr	r2, [r7, #24]
 8007b20:	4013      	ands	r3, r2
 8007b22:	61bb      	str	r3, [r7, #24]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_GPIO_Init+0x2e8>
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
 8007b38:	4a12      	ldr	r2, [pc, #72]	; (8007b84 <HAL_GPIO_Init+0x334>)
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	60d3      	str	r3, [r2, #12]
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	3301      	adds	r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	2b0f      	cmp	r3, #15
 8007b48:	f67f ae90 	bls.w	800786c <HAL_GPIO_Init+0x1c>
 8007b4c:	bf00      	nop
 8007b4e:	bf00      	nop
 8007b50:	3724      	adds	r7, #36	; 0x24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	40023800 	.word	0x40023800
 8007b60:	40013800 	.word	0x40013800
 8007b64:	40020000 	.word	0x40020000
 8007b68:	40020400 	.word	0x40020400
 8007b6c:	40020800 	.word	0x40020800
 8007b70:	40020c00 	.word	0x40020c00
 8007b74:	40021000 	.word	0x40021000
 8007b78:	40021400 	.word	0x40021400
 8007b7c:	40021800 	.word	0x40021800
 8007b80:	40021c00 	.word	0x40021c00
 8007b84:	40013c00 	.word	0x40013c00

08007b88 <HAL_GPIO_ReadPin>:
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	807b      	strh	r3, [r7, #2]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691a      	ldr	r2, [r3, #16]
 8007b98:	887b      	ldrh	r3, [r7, #2]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d002      	beq.n	8007ba6 <HAL_GPIO_ReadPin+0x1e>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	73fb      	strb	r3, [r7, #15]
 8007ba4:	e001      	b.n	8007baa <HAL_GPIO_ReadPin+0x22>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73fb      	strb	r3, [r7, #15]
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_GPIO_WritePin>:
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	807b      	strh	r3, [r7, #2]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	707b      	strb	r3, [r7, #1]
 8007bc8:	787b      	ldrb	r3, [r7, #1]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_GPIO_WritePin+0x1e>
 8007bce:	887a      	ldrh	r2, [r7, #2]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	619a      	str	r2, [r3, #24]
 8007bd4:	e003      	b.n	8007bde <HAL_GPIO_WritePin+0x26>
 8007bd6:	887b      	ldrh	r3, [r7, #2]
 8007bd8:	041a      	lsls	r2, r3, #16
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	619a      	str	r2, [r3, #24]
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <HAL_I2C_Init>:
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <HAL_I2C_Init+0x12>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e12b      	b.n	8007e56 <HAL_I2C_Init+0x26a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <HAL_I2C_Init+0x2c>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fc fd56 	bl	80046c4 <HAL_I2C_MspInit>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2224      	movs	r2, #36	; 0x24
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	f000 fd5a 	bl	8008708 <HAL_RCC_GetPCLK1Freq>
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	4a81      	ldr	r2, [pc, #516]	; (8007e60 <HAL_I2C_Init+0x274>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d807      	bhi.n	8007c70 <HAL_I2C_Init+0x84>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4a80      	ldr	r2, [pc, #512]	; (8007e64 <HAL_I2C_Init+0x278>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	bf94      	ite	ls
 8007c68:	2301      	movls	r3, #1
 8007c6a:	2300      	movhi	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	e006      	b.n	8007c7e <HAL_I2C_Init+0x92>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a7d      	ldr	r2, [pc, #500]	; (8007e68 <HAL_I2C_Init+0x27c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	bf94      	ite	ls
 8007c78:	2301      	movls	r3, #1
 8007c7a:	2300      	movhi	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <HAL_I2C_Init+0x9a>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e0e7      	b.n	8007e56 <HAL_I2C_Init+0x26a>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4a78      	ldr	r2, [pc, #480]	; (8007e6c <HAL_I2C_Init+0x280>)
 8007c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8e:	0c9b      	lsrs	r3, r3, #18
 8007c90:	60bb      	str	r3, [r7, #8]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6a1b      	ldr	r3, [r3, #32]
 8007cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	4a6a      	ldr	r2, [pc, #424]	; (8007e60 <HAL_I2C_Init+0x274>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d802      	bhi.n	8007cc0 <HAL_I2C_Init+0xd4>
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	e009      	b.n	8007cd4 <HAL_I2C_Init+0xe8>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
 8007cca:	4a69      	ldr	r2, [pc, #420]	; (8007e70 <HAL_I2C_Init+0x284>)
 8007ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd0:	099b      	lsrs	r3, r3, #6
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	6812      	ldr	r2, [r2, #0]
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	6213      	str	r3, [r2, #32]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	495c      	ldr	r1, [pc, #368]	; (8007e60 <HAL_I2C_Init+0x274>)
 8007cf0:	428b      	cmp	r3, r1
 8007cf2:	d819      	bhi.n	8007d28 <HAL_I2C_Init+0x13c>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	1e59      	subs	r1, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d02:	1c59      	adds	r1, r3, #1
 8007d04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007d08:	400b      	ands	r3, r1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_I2C_Init+0x138>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	1e59      	subs	r1, r3, #1
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d22:	e051      	b.n	8007dc8 <HAL_I2C_Init+0x1dc>
 8007d24:	2304      	movs	r3, #4
 8007d26:	e04f      	b.n	8007dc8 <HAL_I2C_Init+0x1dc>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d111      	bne.n	8007d54 <HAL_I2C_Init+0x168>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	1e58      	subs	r0, r3, #1
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6859      	ldr	r1, [r3, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	440b      	add	r3, r1
 8007d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d42:	3301      	adds	r3, #1
 8007d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	bf0c      	ite	eq
 8007d4c:	2301      	moveq	r3, #1
 8007d4e:	2300      	movne	r3, #0
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	e012      	b.n	8007d7a <HAL_I2C_Init+0x18e>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	1e58      	subs	r0, r3, #1
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6859      	ldr	r1, [r3, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	440b      	add	r3, r1
 8007d62:	0099      	lsls	r1, r3, #2
 8007d64:	440b      	add	r3, r1
 8007d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <HAL_I2C_Init+0x196>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e022      	b.n	8007dc8 <HAL_I2C_Init+0x1dc>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10e      	bne.n	8007da8 <HAL_I2C_Init+0x1bc>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1e58      	subs	r0, r3, #1
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6859      	ldr	r1, [r3, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	440b      	add	r3, r1
 8007d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007da6:	e00f      	b.n	8007dc8 <HAL_I2C_Init+0x1dc>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	1e58      	subs	r0, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6859      	ldr	r1, [r3, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	0099      	lsls	r1, r3, #2
 8007db8:	440b      	add	r3, r1
 8007dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	6809      	ldr	r1, [r1, #0]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	61cb      	str	r3, [r1, #28]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	69da      	ldr	r2, [r3, #28]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	6911      	ldr	r1, [r2, #16]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68d2      	ldr	r2, [r2, #12]
 8007e02:	4311      	orrs	r1, r2
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6812      	ldr	r2, [r2, #0]
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	6093      	str	r3, [r2, #8]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	695a      	ldr	r2, [r3, #20]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	60da      	str	r2, [r3, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	641a      	str	r2, [r3, #64]	; 0x40
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	631a      	str	r2, [r3, #48]	; 0x30
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e54:	2300      	movs	r3, #0
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	000186a0 	.word	0x000186a0
 8007e64:	001e847f 	.word	0x001e847f
 8007e68:	003d08ff 	.word	0x003d08ff
 8007e6c:	431bde83 	.word	0x431bde83
 8007e70:	10624dd3 	.word	0x10624dd3

08007e74 <HAL_RCC_OscConfig>:
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d101      	bne.n	8007e86 <HAL_RCC_OscConfig+0x12>
 8007e82:	2301      	movs	r3, #1
 8007e84:	e264      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0301 	and.w	r3, r3, #1
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d075      	beq.n	8007f7e <HAL_RCC_OscConfig+0x10a>
 8007e92:	4ba3      	ldr	r3, [pc, #652]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f003 030c 	and.w	r3, r3, #12
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d00c      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x44>
 8007e9e:	4ba0      	ldr	r3, [pc, #640]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f003 030c 	and.w	r3, r3, #12
 8007ea6:	2b08      	cmp	r3, #8
 8007ea8:	d112      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x5c>
 8007eaa:	4b9d      	ldr	r3, [pc, #628]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eb6:	d10b      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x5c>
 8007eb8:	4b99      	ldr	r3, [pc, #612]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d05b      	beq.n	8007f7c <HAL_RCC_OscConfig+0x108>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d157      	bne.n	8007f7c <HAL_RCC_OscConfig+0x108>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e23f      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed8:	d106      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x74>
 8007eda:	4b91      	ldr	r3, [pc, #580]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a90      	ldr	r2, [pc, #576]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ee4:	6013      	str	r3, [r2, #0]
 8007ee6:	e01d      	b.n	8007f24 <HAL_RCC_OscConfig+0xb0>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ef0:	d10c      	bne.n	8007f0c <HAL_RCC_OscConfig+0x98>
 8007ef2:	4b8b      	ldr	r3, [pc, #556]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a8a      	ldr	r2, [pc, #552]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	4b88      	ldr	r3, [pc, #544]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a87      	ldr	r2, [pc, #540]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	e00b      	b.n	8007f24 <HAL_RCC_OscConfig+0xb0>
 8007f0c:	4b84      	ldr	r3, [pc, #528]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a83      	ldr	r2, [pc, #524]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	4b81      	ldr	r3, [pc, #516]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a80      	ldr	r2, [pc, #512]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d013      	beq.n	8007f54 <HAL_RCC_OscConfig+0xe0>
 8007f2c:	f7fe f83a 	bl	8005fa4 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0xd2>
 8007f34:	f7fe f836 	bl	8005fa4 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b64      	cmp	r3, #100	; 0x64
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0xd2>
 8007f42:	2303      	movs	r3, #3
 8007f44:	e204      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 8007f46:	4b76      	ldr	r3, [pc, #472]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f0      	beq.n	8007f34 <HAL_RCC_OscConfig+0xc0>
 8007f52:	e014      	b.n	8007f7e <HAL_RCC_OscConfig+0x10a>
 8007f54:	f7fe f826 	bl	8005fa4 <HAL_GetTick>
 8007f58:	6138      	str	r0, [r7, #16]
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0xfa>
 8007f5c:	f7fe f822 	bl	8005fa4 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b64      	cmp	r3, #100	; 0x64
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0xfa>
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e1f0      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 8007f6e:	4b6c      	ldr	r3, [pc, #432]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1f0      	bne.n	8007f5c <HAL_RCC_OscConfig+0xe8>
 8007f7a:	e000      	b.n	8007f7e <HAL_RCC_OscConfig+0x10a>
 8007f7c:	bf00      	nop
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d063      	beq.n	8008052 <HAL_RCC_OscConfig+0x1de>
 8007f8a:	4b65      	ldr	r3, [pc, #404]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 030c 	and.w	r3, r3, #12
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00b      	beq.n	8007fae <HAL_RCC_OscConfig+0x13a>
 8007f96:	4b62      	ldr	r3, [pc, #392]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f003 030c 	and.w	r3, r3, #12
 8007f9e:	2b08      	cmp	r3, #8
 8007fa0:	d11c      	bne.n	8007fdc <HAL_RCC_OscConfig+0x168>
 8007fa2:	4b5f      	ldr	r3, [pc, #380]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d116      	bne.n	8007fdc <HAL_RCC_OscConfig+0x168>
 8007fae:	4b5c      	ldr	r3, [pc, #368]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d005      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x152>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d001      	beq.n	8007fc6 <HAL_RCC_OscConfig+0x152>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e1c4      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 8007fc6:	4b56      	ldr	r3, [pc, #344]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	00db      	lsls	r3, r3, #3
 8007fd4:	4952      	ldr	r1, [pc, #328]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	600b      	str	r3, [r1, #0]
 8007fda:	e03a      	b.n	8008052 <HAL_RCC_OscConfig+0x1de>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d020      	beq.n	8008026 <HAL_RCC_OscConfig+0x1b2>
 8007fe4:	4b4f      	ldr	r3, [pc, #316]	; (8008124 <HAL_RCC_OscConfig+0x2b0>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	f7fd ffdb 	bl	8005fa4 <HAL_GetTick>
 8007fee:	6138      	str	r0, [r7, #16]
 8007ff0:	e008      	b.n	8008004 <HAL_RCC_OscConfig+0x190>
 8007ff2:	f7fd ffd7 	bl	8005fa4 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d901      	bls.n	8008004 <HAL_RCC_OscConfig+0x190>
 8008000:	2303      	movs	r3, #3
 8008002:	e1a5      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 8008004:	4b46      	ldr	r3, [pc, #280]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d0f0      	beq.n	8007ff2 <HAL_RCC_OscConfig+0x17e>
 8008010:	4b43      	ldr	r3, [pc, #268]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	4940      	ldr	r1, [pc, #256]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8008020:	4313      	orrs	r3, r2
 8008022:	600b      	str	r3, [r1, #0]
 8008024:	e015      	b.n	8008052 <HAL_RCC_OscConfig+0x1de>
 8008026:	4b3f      	ldr	r3, [pc, #252]	; (8008124 <HAL_RCC_OscConfig+0x2b0>)
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	f7fd ffba 	bl	8005fa4 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0x1d2>
 8008034:	f7fd ffb6 	bl	8005fa4 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x1d2>
 8008042:	2303      	movs	r3, #3
 8008044:	e184      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 8008046:	4b36      	ldr	r3, [pc, #216]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f0      	bne.n	8008034 <HAL_RCC_OscConfig+0x1c0>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d030      	beq.n	80080c0 <HAL_RCC_OscConfig+0x24c>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d016      	beq.n	8008094 <HAL_RCC_OscConfig+0x220>
 8008066:	4b30      	ldr	r3, [pc, #192]	; (8008128 <HAL_RCC_OscConfig+0x2b4>)
 8008068:	2201      	movs	r2, #1
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	f7fd ff9a 	bl	8005fa4 <HAL_GetTick>
 8008070:	6138      	str	r0, [r7, #16]
 8008072:	e008      	b.n	8008086 <HAL_RCC_OscConfig+0x212>
 8008074:	f7fd ff96 	bl	8005fa4 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x212>
 8008082:	2303      	movs	r3, #3
 8008084:	e164      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 8008086:	4b26      	ldr	r3, [pc, #152]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 8008088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f0      	beq.n	8008074 <HAL_RCC_OscConfig+0x200>
 8008092:	e015      	b.n	80080c0 <HAL_RCC_OscConfig+0x24c>
 8008094:	4b24      	ldr	r3, [pc, #144]	; (8008128 <HAL_RCC_OscConfig+0x2b4>)
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	f7fd ff83 	bl	8005fa4 <HAL_GetTick>
 800809e:	6138      	str	r0, [r7, #16]
 80080a0:	e008      	b.n	80080b4 <HAL_RCC_OscConfig+0x240>
 80080a2:	f7fd ff7f 	bl	8005fa4 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d901      	bls.n	80080b4 <HAL_RCC_OscConfig+0x240>
 80080b0:	2303      	movs	r3, #3
 80080b2:	e14d      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 80080b4:	4b1a      	ldr	r3, [pc, #104]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 80080b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b8:	f003 0302 	and.w	r3, r3, #2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1f0      	bne.n	80080a2 <HAL_RCC_OscConfig+0x22e>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 80a0 	beq.w	800820e <HAL_RCC_OscConfig+0x39a>
 80080ce:	2300      	movs	r3, #0
 80080d0:	75fb      	strb	r3, [r7, #23]
 80080d2:	4b13      	ldr	r3, [pc, #76]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10f      	bne.n	80080fe <HAL_RCC_OscConfig+0x28a>
 80080de:	2300      	movs	r3, #0
 80080e0:	60bb      	str	r3, [r7, #8]
 80080e2:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	4a0e      	ldr	r2, [pc, #56]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 80080e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ec:	6413      	str	r3, [r2, #64]	; 0x40
 80080ee:	4b0c      	ldr	r3, [pc, #48]	; (8008120 <HAL_RCC_OscConfig+0x2ac>)
 80080f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080f6:	60bb      	str	r3, [r7, #8]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
 80080fe:	4b0b      	ldr	r3, [pc, #44]	; (800812c <HAL_RCC_OscConfig+0x2b8>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008106:	2b00      	cmp	r3, #0
 8008108:	d121      	bne.n	800814e <HAL_RCC_OscConfig+0x2da>
 800810a:	4b08      	ldr	r3, [pc, #32]	; (800812c <HAL_RCC_OscConfig+0x2b8>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a07      	ldr	r2, [pc, #28]	; (800812c <HAL_RCC_OscConfig+0x2b8>)
 8008110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	f7fd ff45 	bl	8005fa4 <HAL_GetTick>
 800811a:	6138      	str	r0, [r7, #16]
 800811c:	e011      	b.n	8008142 <HAL_RCC_OscConfig+0x2ce>
 800811e:	bf00      	nop
 8008120:	40023800 	.word	0x40023800
 8008124:	42470000 	.word	0x42470000
 8008128:	42470e80 	.word	0x42470e80
 800812c:	40007000 	.word	0x40007000
 8008130:	f7fd ff38 	bl	8005fa4 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x2ce>
 800813e:	2303      	movs	r3, #3
 8008140:	e106      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 8008142:	4b85      	ldr	r3, [pc, #532]	; (8008358 <HAL_RCC_OscConfig+0x4e4>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0x2bc>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d106      	bne.n	8008164 <HAL_RCC_OscConfig+0x2f0>
 8008156:	4b81      	ldr	r3, [pc, #516]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 8008158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815a:	4a80      	ldr	r2, [pc, #512]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 800815c:	f043 0301 	orr.w	r3, r3, #1
 8008160:	6713      	str	r3, [r2, #112]	; 0x70
 8008162:	e01c      	b.n	800819e <HAL_RCC_OscConfig+0x32a>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	2b05      	cmp	r3, #5
 800816a:	d10c      	bne.n	8008186 <HAL_RCC_OscConfig+0x312>
 800816c:	4b7b      	ldr	r3, [pc, #492]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 800816e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008170:	4a7a      	ldr	r2, [pc, #488]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 8008172:	f043 0304 	orr.w	r3, r3, #4
 8008176:	6713      	str	r3, [r2, #112]	; 0x70
 8008178:	4b78      	ldr	r3, [pc, #480]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 800817a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817c:	4a77      	ldr	r2, [pc, #476]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	6713      	str	r3, [r2, #112]	; 0x70
 8008184:	e00b      	b.n	800819e <HAL_RCC_OscConfig+0x32a>
 8008186:	4b75      	ldr	r3, [pc, #468]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 8008188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818a:	4a74      	ldr	r2, [pc, #464]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 800818c:	f023 0301 	bic.w	r3, r3, #1
 8008190:	6713      	str	r3, [r2, #112]	; 0x70
 8008192:	4b72      	ldr	r3, [pc, #456]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	4a71      	ldr	r2, [pc, #452]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 8008198:	f023 0304 	bic.w	r3, r3, #4
 800819c:	6713      	str	r3, [r2, #112]	; 0x70
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d015      	beq.n	80081d2 <HAL_RCC_OscConfig+0x35e>
 80081a6:	f7fd fefd 	bl	8005fa4 <HAL_GetTick>
 80081aa:	6138      	str	r0, [r7, #16]
 80081ac:	e00a      	b.n	80081c4 <HAL_RCC_OscConfig+0x350>
 80081ae:	f7fd fef9 	bl	8005fa4 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081bc:	4293      	cmp	r3, r2
 80081be:	d901      	bls.n	80081c4 <HAL_RCC_OscConfig+0x350>
 80081c0:	2303      	movs	r3, #3
 80081c2:	e0c5      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 80081c4:	4b65      	ldr	r3, [pc, #404]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 80081c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0ee      	beq.n	80081ae <HAL_RCC_OscConfig+0x33a>
 80081d0:	e014      	b.n	80081fc <HAL_RCC_OscConfig+0x388>
 80081d2:	f7fd fee7 	bl	8005fa4 <HAL_GetTick>
 80081d6:	6138      	str	r0, [r7, #16]
 80081d8:	e00a      	b.n	80081f0 <HAL_RCC_OscConfig+0x37c>
 80081da:	f7fd fee3 	bl	8005fa4 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d901      	bls.n	80081f0 <HAL_RCC_OscConfig+0x37c>
 80081ec:	2303      	movs	r3, #3
 80081ee:	e0af      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 80081f0:	4b5a      	ldr	r3, [pc, #360]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 80081f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1ee      	bne.n	80081da <HAL_RCC_OscConfig+0x366>
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d105      	bne.n	800820e <HAL_RCC_OscConfig+0x39a>
 8008202:	4b56      	ldr	r3, [pc, #344]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	4a55      	ldr	r2, [pc, #340]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 8008208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800820c:	6413      	str	r3, [r2, #64]	; 0x40
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 809b 	beq.w	800834e <HAL_RCC_OscConfig+0x4da>
 8008218:	4b50      	ldr	r3, [pc, #320]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	f003 030c 	and.w	r3, r3, #12
 8008220:	2b08      	cmp	r3, #8
 8008222:	d05c      	beq.n	80082de <HAL_RCC_OscConfig+0x46a>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d141      	bne.n	80082b0 <HAL_RCC_OscConfig+0x43c>
 800822c:	4b4c      	ldr	r3, [pc, #304]	; (8008360 <HAL_RCC_OscConfig+0x4ec>)
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	f7fd feb7 	bl	8005fa4 <HAL_GetTick>
 8008236:	6138      	str	r0, [r7, #16]
 8008238:	e008      	b.n	800824c <HAL_RCC_OscConfig+0x3d8>
 800823a:	f7fd feb3 	bl	8005fa4 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d901      	bls.n	800824c <HAL_RCC_OscConfig+0x3d8>
 8008248:	2303      	movs	r3, #3
 800824a:	e081      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 800824c:	4b43      	ldr	r3, [pc, #268]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f0      	bne.n	800823a <HAL_RCC_OscConfig+0x3c6>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	431a      	orrs	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	019b      	lsls	r3, r3, #6
 8008268:	431a      	orrs	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	085b      	lsrs	r3, r3, #1
 8008270:	3b01      	subs	r3, #1
 8008272:	041b      	lsls	r3, r3, #16
 8008274:	431a      	orrs	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827a:	061b      	lsls	r3, r3, #24
 800827c:	4937      	ldr	r1, [pc, #220]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 800827e:	4313      	orrs	r3, r2
 8008280:	604b      	str	r3, [r1, #4]
 8008282:	4b37      	ldr	r3, [pc, #220]	; (8008360 <HAL_RCC_OscConfig+0x4ec>)
 8008284:	2201      	movs	r2, #1
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	f7fd fe8c 	bl	8005fa4 <HAL_GetTick>
 800828c:	6138      	str	r0, [r7, #16]
 800828e:	e008      	b.n	80082a2 <HAL_RCC_OscConfig+0x42e>
 8008290:	f7fd fe88 	bl	8005fa4 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d901      	bls.n	80082a2 <HAL_RCC_OscConfig+0x42e>
 800829e:	2303      	movs	r3, #3
 80082a0:	e056      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 80082a2:	4b2e      	ldr	r3, [pc, #184]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0f0      	beq.n	8008290 <HAL_RCC_OscConfig+0x41c>
 80082ae:	e04e      	b.n	800834e <HAL_RCC_OscConfig+0x4da>
 80082b0:	4b2b      	ldr	r3, [pc, #172]	; (8008360 <HAL_RCC_OscConfig+0x4ec>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	f7fd fe75 	bl	8005fa4 <HAL_GetTick>
 80082ba:	6138      	str	r0, [r7, #16]
 80082bc:	e008      	b.n	80082d0 <HAL_RCC_OscConfig+0x45c>
 80082be:	f7fd fe71 	bl	8005fa4 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <HAL_RCC_OscConfig+0x45c>
 80082cc:	2303      	movs	r3, #3
 80082ce:	e03f      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 80082d0:	4b22      	ldr	r3, [pc, #136]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1f0      	bne.n	80082be <HAL_RCC_OscConfig+0x44a>
 80082dc:	e037      	b.n	800834e <HAL_RCC_OscConfig+0x4da>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_RCC_OscConfig+0x476>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e032      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 80082ea:	4b1c      	ldr	r3, [pc, #112]	; (800835c <HAL_RCC_OscConfig+0x4e8>)
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d028      	beq.n	800834a <HAL_RCC_OscConfig+0x4d6>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	429a      	cmp	r2, r3
 8008304:	d121      	bne.n	800834a <HAL_RCC_OscConfig+0x4d6>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	429a      	cmp	r2, r3
 8008312:	d11a      	bne.n	800834a <HAL_RCC_OscConfig+0x4d6>
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800831a:	4013      	ands	r3, r2
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008320:	0192      	lsls	r2, r2, #6
 8008322:	4293      	cmp	r3, r2
 8008324:	d111      	bne.n	800834a <HAL_RCC_OscConfig+0x4d6>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	085b      	lsrs	r3, r3, #1
 8008332:	3b01      	subs	r3, #1
 8008334:	041b      	lsls	r3, r3, #16
 8008336:	429a      	cmp	r2, r3
 8008338:	d107      	bne.n	800834a <HAL_RCC_OscConfig+0x4d6>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	061b      	lsls	r3, r3, #24
 8008346:	429a      	cmp	r2, r3
 8008348:	d001      	beq.n	800834e <HAL_RCC_OscConfig+0x4da>
 800834a:	2301      	movs	r3, #1
 800834c:	e000      	b.n	8008350 <HAL_RCC_OscConfig+0x4dc>
 800834e:	2300      	movs	r3, #0
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40007000 	.word	0x40007000
 800835c:	40023800 	.word	0x40023800
 8008360:	42470060 	.word	0x42470060

08008364 <HAL_RCC_ClockConfig>:
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <HAL_RCC_ClockConfig+0x14>
 8008374:	2301      	movs	r3, #1
 8008376:	e0cc      	b.n	8008512 <HAL_RCC_ClockConfig+0x1ae>
 8008378:	4b68      	ldr	r3, [pc, #416]	; (800851c <HAL_RCC_ClockConfig+0x1b8>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0307 	and.w	r3, r3, #7
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	429a      	cmp	r2, r3
 8008384:	d90c      	bls.n	80083a0 <HAL_RCC_ClockConfig+0x3c>
 8008386:	4b65      	ldr	r3, [pc, #404]	; (800851c <HAL_RCC_ClockConfig+0x1b8>)
 8008388:	683a      	ldr	r2, [r7, #0]
 800838a:	b2d2      	uxtb	r2, r2
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	4b63      	ldr	r3, [pc, #396]	; (800851c <HAL_RCC_ClockConfig+0x1b8>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d001      	beq.n	80083a0 <HAL_RCC_ClockConfig+0x3c>
 800839c:	2301      	movs	r3, #1
 800839e:	e0b8      	b.n	8008512 <HAL_RCC_ClockConfig+0x1ae>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d020      	beq.n	80083ee <HAL_RCC_ClockConfig+0x8a>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d005      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x60>
 80083b8:	4b59      	ldr	r3, [pc, #356]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	4a58      	ldr	r2, [pc, #352]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80083be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80083c2:	6093      	str	r3, [r2, #8]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <HAL_RCC_ClockConfig+0x78>
 80083d0:	4b53      	ldr	r3, [pc, #332]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	4a52      	ldr	r2, [pc, #328]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80083d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80083da:	6093      	str	r3, [r2, #8]
 80083dc:	4b50      	ldr	r3, [pc, #320]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	494d      	ldr	r1, [pc, #308]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	608b      	str	r3, [r1, #8]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d044      	beq.n	8008484 <HAL_RCC_ClockConfig+0x120>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d107      	bne.n	8008412 <HAL_RCC_ClockConfig+0xae>
 8008402:	4b47      	ldr	r3, [pc, #284]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d119      	bne.n	8008442 <HAL_RCC_ClockConfig+0xde>
 800840e:	2301      	movs	r3, #1
 8008410:	e07f      	b.n	8008512 <HAL_RCC_ClockConfig+0x1ae>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d003      	beq.n	8008422 <HAL_RCC_ClockConfig+0xbe>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	2b03      	cmp	r3, #3
 8008420:	d107      	bne.n	8008432 <HAL_RCC_ClockConfig+0xce>
 8008422:	4b3f      	ldr	r3, [pc, #252]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <HAL_RCC_ClockConfig+0xde>
 800842e:	2301      	movs	r3, #1
 8008430:	e06f      	b.n	8008512 <HAL_RCC_ClockConfig+0x1ae>
 8008432:	4b3b      	ldr	r3, [pc, #236]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_RCC_ClockConfig+0xde>
 800843e:	2301      	movs	r3, #1
 8008440:	e067      	b.n	8008512 <HAL_RCC_ClockConfig+0x1ae>
 8008442:	4b37      	ldr	r3, [pc, #220]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f023 0203 	bic.w	r2, r3, #3
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	4934      	ldr	r1, [pc, #208]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 8008450:	4313      	orrs	r3, r2
 8008452:	608b      	str	r3, [r1, #8]
 8008454:	f7fd fda6 	bl	8005fa4 <HAL_GetTick>
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	e00a      	b.n	8008472 <HAL_RCC_ClockConfig+0x10e>
 800845c:	f7fd fda2 	bl	8005fa4 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	f241 3288 	movw	r2, #5000	; 0x1388
 800846a:	4293      	cmp	r3, r2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_ClockConfig+0x10e>
 800846e:	2303      	movs	r3, #3
 8008470:	e04f      	b.n	8008512 <HAL_RCC_ClockConfig+0x1ae>
 8008472:	4b2b      	ldr	r3, [pc, #172]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f003 020c 	and.w	r2, r3, #12
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	429a      	cmp	r2, r3
 8008482:	d1eb      	bne.n	800845c <HAL_RCC_ClockConfig+0xf8>
 8008484:	4b25      	ldr	r3, [pc, #148]	; (800851c <HAL_RCC_ClockConfig+0x1b8>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0307 	and.w	r3, r3, #7
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d20c      	bcs.n	80084ac <HAL_RCC_ClockConfig+0x148>
 8008492:	4b22      	ldr	r3, [pc, #136]	; (800851c <HAL_RCC_ClockConfig+0x1b8>)
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	4b20      	ldr	r3, [pc, #128]	; (800851c <HAL_RCC_ClockConfig+0x1b8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d001      	beq.n	80084ac <HAL_RCC_ClockConfig+0x148>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e032      	b.n	8008512 <HAL_RCC_ClockConfig+0x1ae>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d008      	beq.n	80084ca <HAL_RCC_ClockConfig+0x166>
 80084b8:	4b19      	ldr	r3, [pc, #100]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	4916      	ldr	r1, [pc, #88]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	608b      	str	r3, [r1, #8]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0308 	and.w	r3, r3, #8
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <HAL_RCC_ClockConfig+0x186>
 80084d6:	4b12      	ldr	r3, [pc, #72]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	490e      	ldr	r1, [pc, #56]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	608b      	str	r3, [r1, #8]
 80084ea:	f000 f821 	bl	8008530 <HAL_RCC_GetSysClockFreq>
 80084ee:	4602      	mov	r2, r0
 80084f0:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <HAL_RCC_ClockConfig+0x1bc>)
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	091b      	lsrs	r3, r3, #4
 80084f6:	f003 030f 	and.w	r3, r3, #15
 80084fa:	490a      	ldr	r1, [pc, #40]	; (8008524 <HAL_RCC_ClockConfig+0x1c0>)
 80084fc:	5ccb      	ldrb	r3, [r1, r3]
 80084fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008502:	4a09      	ldr	r2, [pc, #36]	; (8008528 <HAL_RCC_ClockConfig+0x1c4>)
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	4b09      	ldr	r3, [pc, #36]	; (800852c <HAL_RCC_ClockConfig+0x1c8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4618      	mov	r0, r3
 800850c:	f7fd fd06 	bl	8005f1c <HAL_InitTick>
 8008510:	2300      	movs	r3, #0
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	40023c00 	.word	0x40023c00
 8008520:	40023800 	.word	0x40023800
 8008524:	08010530 	.word	0x08010530
 8008528:	20000000 	.word	0x20000000
 800852c:	20000004 	.word	0x20000004

08008530 <HAL_RCC_GetSysClockFreq>:
 8008530:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	2300      	movs	r3, #0
 800853a:	607b      	str	r3, [r7, #4]
 800853c:	2300      	movs	r3, #0
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	2300      	movs	r3, #0
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	2300      	movs	r3, #0
 8008546:	60bb      	str	r3, [r7, #8]
 8008548:	4b67      	ldr	r3, [pc, #412]	; (80086e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f003 030c 	and.w	r3, r3, #12
 8008550:	2b08      	cmp	r3, #8
 8008552:	d00d      	beq.n	8008570 <HAL_RCC_GetSysClockFreq+0x40>
 8008554:	2b08      	cmp	r3, #8
 8008556:	f200 80bd 	bhi.w	80086d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <HAL_RCC_GetSysClockFreq+0x34>
 800855e:	2b04      	cmp	r3, #4
 8008560:	d003      	beq.n	800856a <HAL_RCC_GetSysClockFreq+0x3a>
 8008562:	e0b7      	b.n	80086d4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008564:	4b61      	ldr	r3, [pc, #388]	; (80086ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008566:	60bb      	str	r3, [r7, #8]
 8008568:	e0b7      	b.n	80086da <HAL_RCC_GetSysClockFreq+0x1aa>
 800856a:	4b60      	ldr	r3, [pc, #384]	; (80086ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 800856c:	60bb      	str	r3, [r7, #8]
 800856e:	e0b4      	b.n	80086da <HAL_RCC_GetSysClockFreq+0x1aa>
 8008570:	4b5d      	ldr	r3, [pc, #372]	; (80086e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008578:	607b      	str	r3, [r7, #4]
 800857a:	4b5b      	ldr	r3, [pc, #364]	; (80086e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d04d      	beq.n	8008622 <HAL_RCC_GetSysClockFreq+0xf2>
 8008586:	4b58      	ldr	r3, [pc, #352]	; (80086e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	099b      	lsrs	r3, r3, #6
 800858c:	461a      	mov	r2, r3
 800858e:	f04f 0300 	mov.w	r3, #0
 8008592:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008596:	f04f 0100 	mov.w	r1, #0
 800859a:	ea02 0800 	and.w	r8, r2, r0
 800859e:	ea03 0901 	and.w	r9, r3, r1
 80085a2:	4640      	mov	r0, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	f04f 0200 	mov.w	r2, #0
 80085aa:	f04f 0300 	mov.w	r3, #0
 80085ae:	014b      	lsls	r3, r1, #5
 80085b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80085b4:	0142      	lsls	r2, r0, #5
 80085b6:	4610      	mov	r0, r2
 80085b8:	4619      	mov	r1, r3
 80085ba:	ebb0 0008 	subs.w	r0, r0, r8
 80085be:	eb61 0109 	sbc.w	r1, r1, r9
 80085c2:	f04f 0200 	mov.w	r2, #0
 80085c6:	f04f 0300 	mov.w	r3, #0
 80085ca:	018b      	lsls	r3, r1, #6
 80085cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80085d0:	0182      	lsls	r2, r0, #6
 80085d2:	1a12      	subs	r2, r2, r0
 80085d4:	eb63 0301 	sbc.w	r3, r3, r1
 80085d8:	f04f 0000 	mov.w	r0, #0
 80085dc:	f04f 0100 	mov.w	r1, #0
 80085e0:	00d9      	lsls	r1, r3, #3
 80085e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085e6:	00d0      	lsls	r0, r2, #3
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	eb12 0208 	adds.w	r2, r2, r8
 80085f0:	eb43 0309 	adc.w	r3, r3, r9
 80085f4:	f04f 0000 	mov.w	r0, #0
 80085f8:	f04f 0100 	mov.w	r1, #0
 80085fc:	0299      	lsls	r1, r3, #10
 80085fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008602:	0290      	lsls	r0, r2, #10
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4610      	mov	r0, r2
 800860a:	4619      	mov	r1, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	461a      	mov	r2, r3
 8008610:	f04f 0300 	mov.w	r3, #0
 8008614:	f7f8 fb38 	bl	8000c88 <__aeabi_uldivmod>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4613      	mov	r3, r2
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	e04a      	b.n	80086b8 <HAL_RCC_GetSysClockFreq+0x188>
 8008622:	4b31      	ldr	r3, [pc, #196]	; (80086e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	099b      	lsrs	r3, r3, #6
 8008628:	461a      	mov	r2, r3
 800862a:	f04f 0300 	mov.w	r3, #0
 800862e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008632:	f04f 0100 	mov.w	r1, #0
 8008636:	ea02 0400 	and.w	r4, r2, r0
 800863a:	ea03 0501 	and.w	r5, r3, r1
 800863e:	4620      	mov	r0, r4
 8008640:	4629      	mov	r1, r5
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	014b      	lsls	r3, r1, #5
 800864c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008650:	0142      	lsls	r2, r0, #5
 8008652:	4610      	mov	r0, r2
 8008654:	4619      	mov	r1, r3
 8008656:	1b00      	subs	r0, r0, r4
 8008658:	eb61 0105 	sbc.w	r1, r1, r5
 800865c:	f04f 0200 	mov.w	r2, #0
 8008660:	f04f 0300 	mov.w	r3, #0
 8008664:	018b      	lsls	r3, r1, #6
 8008666:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800866a:	0182      	lsls	r2, r0, #6
 800866c:	1a12      	subs	r2, r2, r0
 800866e:	eb63 0301 	sbc.w	r3, r3, r1
 8008672:	f04f 0000 	mov.w	r0, #0
 8008676:	f04f 0100 	mov.w	r1, #0
 800867a:	00d9      	lsls	r1, r3, #3
 800867c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008680:	00d0      	lsls	r0, r2, #3
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	1912      	adds	r2, r2, r4
 8008688:	eb45 0303 	adc.w	r3, r5, r3
 800868c:	f04f 0000 	mov.w	r0, #0
 8008690:	f04f 0100 	mov.w	r1, #0
 8008694:	0299      	lsls	r1, r3, #10
 8008696:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800869a:	0290      	lsls	r0, r2, #10
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4610      	mov	r0, r2
 80086a2:	4619      	mov	r1, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	461a      	mov	r2, r3
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	f7f8 faec 	bl	8000c88 <__aeabi_uldivmod>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	4613      	mov	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
 80086b8:	4b0b      	ldr	r3, [pc, #44]	; (80086e8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	0c1b      	lsrs	r3, r3, #16
 80086be:	f003 0303 	and.w	r3, r3, #3
 80086c2:	3301      	adds	r3, #1
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	603b      	str	r3, [r7, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d0:	60bb      	str	r3, [r7, #8]
 80086d2:	e002      	b.n	80086da <HAL_RCC_GetSysClockFreq+0x1aa>
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <HAL_RCC_GetSysClockFreq+0x1bc>)
 80086d6:	60bb      	str	r3, [r7, #8]
 80086d8:	bf00      	nop
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80086e6:	bf00      	nop
 80086e8:	40023800 	.word	0x40023800
 80086ec:	00f42400 	.word	0x00f42400

080086f0 <HAL_RCC_GetHCLKFreq>:
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	4b03      	ldr	r3, [pc, #12]	; (8008704 <HAL_RCC_GetHCLKFreq+0x14>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20000000 	.word	0x20000000

08008708 <HAL_RCC_GetPCLK1Freq>:
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
 800870c:	f7ff fff0 	bl	80086f0 <HAL_RCC_GetHCLKFreq>
 8008710:	4602      	mov	r2, r0
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	0a9b      	lsrs	r3, r3, #10
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	4903      	ldr	r1, [pc, #12]	; (800872c <HAL_RCC_GetPCLK1Freq+0x24>)
 800871e:	5ccb      	ldrb	r3, [r1, r3]
 8008720:	fa22 f303 	lsr.w	r3, r2, r3
 8008724:	4618      	mov	r0, r3
 8008726:	bd80      	pop	{r7, pc}
 8008728:	40023800 	.word	0x40023800
 800872c:	08010540 	.word	0x08010540

08008730 <HAL_RCC_GetPCLK2Freq>:
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
 8008734:	f7ff ffdc 	bl	80086f0 <HAL_RCC_GetHCLKFreq>
 8008738:	4602      	mov	r2, r0
 800873a:	4b05      	ldr	r3, [pc, #20]	; (8008750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	0b5b      	lsrs	r3, r3, #13
 8008740:	f003 0307 	and.w	r3, r3, #7
 8008744:	4903      	ldr	r1, [pc, #12]	; (8008754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008746:	5ccb      	ldrb	r3, [r1, r3]
 8008748:	fa22 f303 	lsr.w	r3, r2, r3
 800874c:	4618      	mov	r0, r3
 800874e:	bd80      	pop	{r7, pc}
 8008750:	40023800 	.word	0x40023800
 8008754:	08010540 	.word	0x08010540

08008758 <HAL_SPI_Init>:
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d101      	bne.n	800876a <HAL_SPI_Init+0x12>
 8008766:	2301      	movs	r3, #1
 8008768:	e07b      	b.n	8008862 <HAL_SPI_Init+0x10a>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876e:	2b00      	cmp	r3, #0
 8008770:	d108      	bne.n	8008784 <HAL_SPI_Init+0x2c>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800877a:	d009      	beq.n	8008790 <HAL_SPI_Init+0x38>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	61da      	str	r2, [r3, #28]
 8008782:	e005      	b.n	8008790 <HAL_SPI_Init+0x38>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	611a      	str	r2, [r3, #16]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	615a      	str	r2, [r3, #20]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	629a      	str	r2, [r3, #40]	; 0x28
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <HAL_SPI_Init+0x58>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fb ffd2 	bl	8004754 <HAL_SPI_MspInit>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80087d8:	431a      	orrs	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087e2:	431a      	orrs	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	431a      	orrs	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800880a:	431a      	orrs	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008814:	ea42 0103 	orr.w	r1, r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	0c1b      	lsrs	r3, r3, #16
 800882e:	f003 0104 	and.w	r1, r3, #4
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	f003 0210 	and.w	r2, r3, #16
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	430a      	orrs	r2, r1
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69da      	ldr	r2, [r3, #28]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008850:	61da      	str	r2, [r3, #28]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	655a      	str	r2, [r3, #84]	; 0x54
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008860:	2300      	movs	r3, #0
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_SPI_Transmit>:
 800886a:	b580      	push	{r7, lr}
 800886c:	b088      	sub	sp, #32
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	603b      	str	r3, [r7, #0]
 8008876:	4613      	mov	r3, r2
 8008878:	80fb      	strh	r3, [r7, #6]
 800887a:	2300      	movs	r3, #0
 800887c:	77fb      	strb	r3, [r7, #31]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_SPI_Transmit+0x22>
 8008888:	2302      	movs	r3, #2
 800888a:	e126      	b.n	8008ada <HAL_SPI_Transmit+0x270>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008894:	f7fd fb86 	bl	8005fa4 <HAL_GetTick>
 8008898:	61b8      	str	r0, [r7, #24]
 800889a:	88fb      	ldrh	r3, [r7, #6]
 800889c:	82fb      	strh	r3, [r7, #22]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d002      	beq.n	80088b0 <HAL_SPI_Transmit+0x46>
 80088aa:	2302      	movs	r3, #2
 80088ac:	77fb      	strb	r3, [r7, #31]
 80088ae:	e10b      	b.n	8008ac8 <HAL_SPI_Transmit+0x25e>
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_SPI_Transmit+0x52>
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <HAL_SPI_Transmit+0x58>
 80088bc:	2301      	movs	r3, #1
 80088be:	77fb      	strb	r3, [r7, #31]
 80088c0:	e102      	b.n	8008ac8 <HAL_SPI_Transmit+0x25e>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2203      	movs	r2, #3
 80088c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	655a      	str	r2, [r3, #84]	; 0x54
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	631a      	str	r2, [r3, #48]	; 0x30
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	88fa      	ldrh	r2, [r7, #6]
 80088da:	869a      	strh	r2, [r3, #52]	; 0x34
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	88fa      	ldrh	r2, [r7, #6]
 80088e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	639a      	str	r2, [r3, #56]	; 0x38
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	879a      	strh	r2, [r3, #60]	; 0x3c
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	645a      	str	r2, [r3, #68]	; 0x44
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	641a      	str	r2, [r3, #64]	; 0x40
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008908:	d10f      	bne.n	800892a <HAL_SPI_Transmit+0xc0>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008934:	2b40      	cmp	r3, #64	; 0x40
 8008936:	d007      	beq.n	8008948 <HAL_SPI_Transmit+0xde>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008950:	d14b      	bne.n	80089ea <HAL_SPI_Transmit+0x180>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_SPI_Transmit+0xf6>
 800895a:	8afb      	ldrh	r3, [r7, #22]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d13e      	bne.n	80089de <HAL_SPI_Transmit+0x174>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008964:	881a      	ldrh	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	60da      	str	r2, [r3, #12]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008970:	1c9a      	adds	r2, r3, #2
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	631a      	str	r2, [r3, #48]	; 0x30
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800897a:	b29b      	uxth	r3, r3
 800897c:	3b01      	subs	r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	86da      	strh	r2, [r3, #54]	; 0x36
 8008984:	e02b      	b.n	80089de <HAL_SPI_Transmit+0x174>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b02      	cmp	r3, #2
 8008992:	d112      	bne.n	80089ba <HAL_SPI_Transmit+0x150>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008998:	881a      	ldrh	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60da      	str	r2, [r3, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a4:	1c9a      	adds	r2, r3, #2
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	631a      	str	r2, [r3, #48]	; 0x30
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3b01      	subs	r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80089b8:	e011      	b.n	80089de <HAL_SPI_Transmit+0x174>
 80089ba:	f7fd faf3 	bl	8005fa4 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d803      	bhi.n	80089d2 <HAL_SPI_Transmit+0x168>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d0:	d102      	bne.n	80089d8 <HAL_SPI_Transmit+0x16e>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d102      	bne.n	80089de <HAL_SPI_Transmit+0x174>
 80089d8:	2303      	movs	r3, #3
 80089da:	77fb      	strb	r3, [r7, #31]
 80089dc:	e074      	b.n	8008ac8 <HAL_SPI_Transmit+0x25e>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1ce      	bne.n	8008986 <HAL_SPI_Transmit+0x11c>
 80089e8:	e04c      	b.n	8008a84 <HAL_SPI_Transmit+0x21a>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <HAL_SPI_Transmit+0x18e>
 80089f2:	8afb      	ldrh	r3, [r7, #22]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d140      	bne.n	8008a7a <HAL_SPI_Transmit+0x210>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	330c      	adds	r3, #12
 8008a02:	7812      	ldrb	r2, [r2, #0]
 8008a04:	701a      	strb	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a1e:	e02c      	b.n	8008a7a <HAL_SPI_Transmit+0x210>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f003 0302 	and.w	r3, r3, #2
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d113      	bne.n	8008a56 <HAL_SPI_Transmit+0x1ec>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	330c      	adds	r3, #12
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	701a      	strb	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	631a      	str	r2, [r3, #48]	; 0x30
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a54:	e011      	b.n	8008a7a <HAL_SPI_Transmit+0x210>
 8008a56:	f7fd faa5 	bl	8005fa4 <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d803      	bhi.n	8008a6e <HAL_SPI_Transmit+0x204>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6c:	d102      	bne.n	8008a74 <HAL_SPI_Transmit+0x20a>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d102      	bne.n	8008a7a <HAL_SPI_Transmit+0x210>
 8008a74:	2303      	movs	r3, #3
 8008a76:	77fb      	strb	r3, [r7, #31]
 8008a78:	e026      	b.n	8008ac8 <HAL_SPI_Transmit+0x25e>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1cd      	bne.n	8008a20 <HAL_SPI_Transmit+0x1b6>
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 fbcb 	bl	8009224 <SPI_EndRxTxTransaction>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d002      	beq.n	8008a9a <HAL_SPI_Transmit+0x230>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2220      	movs	r2, #32
 8008a98:	655a      	str	r2, [r3, #84]	; 0x54
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <HAL_SPI_Transmit+0x24e>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	613b      	str	r3, [r7, #16]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	613b      	str	r3, [r7, #16]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	613b      	str	r3, [r7, #16]
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <HAL_SPI_Transmit+0x25c>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	77fb      	strb	r3, [r7, #31]
 8008ac4:	e000      	b.n	8008ac8 <HAL_SPI_Transmit+0x25e>
 8008ac6:	bf00      	nop
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008ad8:	7ffb      	ldrb	r3, [r7, #31]
 8008ada:	4618      	mov	r0, r3
 8008adc:	3720      	adds	r7, #32
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <HAL_SPI_Receive>:
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b088      	sub	sp, #32
 8008ae6:	af02      	add	r7, sp, #8
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	603b      	str	r3, [r7, #0]
 8008aee:	4613      	mov	r3, r2
 8008af0:	80fb      	strh	r3, [r7, #6]
 8008af2:	2300      	movs	r3, #0
 8008af4:	75fb      	strb	r3, [r7, #23]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008afe:	d112      	bne.n	8008b26 <HAL_SPI_Receive+0x44>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10e      	bne.n	8008b26 <HAL_SPI_Receive+0x44>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008b10:	88fa      	ldrh	r2, [r7, #6]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	4613      	mov	r3, r2
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	68b9      	ldr	r1, [r7, #8]
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 f8f1 	bl	8008d04 <HAL_SPI_TransmitReceive>
 8008b22:	4603      	mov	r3, r0
 8008b24:	e0ea      	b.n	8008cfc <HAL_SPI_Receive+0x21a>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d101      	bne.n	8008b34 <HAL_SPI_Receive+0x52>
 8008b30:	2302      	movs	r3, #2
 8008b32:	e0e3      	b.n	8008cfc <HAL_SPI_Receive+0x21a>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008b3c:	f7fd fa32 	bl	8005fa4 <HAL_GetTick>
 8008b40:	6138      	str	r0, [r7, #16]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d002      	beq.n	8008b54 <HAL_SPI_Receive+0x72>
 8008b4e:	2302      	movs	r3, #2
 8008b50:	75fb      	strb	r3, [r7, #23]
 8008b52:	e0ca      	b.n	8008cea <HAL_SPI_Receive+0x208>
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <HAL_SPI_Receive+0x7e>
 8008b5a:	88fb      	ldrh	r3, [r7, #6]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d102      	bne.n	8008b66 <HAL_SPI_Receive+0x84>
 8008b60:	2301      	movs	r3, #1
 8008b62:	75fb      	strb	r3, [r7, #23]
 8008b64:	e0c1      	b.n	8008cea <HAL_SPI_Receive+0x208>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2204      	movs	r2, #4
 8008b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	655a      	str	r2, [r3, #84]	; 0x54
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	88fa      	ldrh	r2, [r7, #6]
 8008b7e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	88fa      	ldrh	r2, [r7, #6]
 8008b84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	869a      	strh	r2, [r3, #52]	; 0x34
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	645a      	str	r2, [r3, #68]	; 0x44
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bac:	d10f      	bne.n	8008bce <HAL_SPI_Receive+0xec>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bbc:	601a      	str	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bcc:	601a      	str	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd8:	2b40      	cmp	r3, #64	; 0x40
 8008bda:	d007      	beq.n	8008bec <HAL_SPI_Receive+0x10a>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d162      	bne.n	8008cba <HAL_SPI_Receive+0x1d8>
 8008bf4:	e02e      	b.n	8008c54 <HAL_SPI_Receive+0x172>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d115      	bne.n	8008c30 <HAL_SPI_Receive+0x14e>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f103 020c 	add.w	r2, r3, #12
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	b2d2      	uxtb	r2, r2
 8008c14:	701a      	strb	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c2e:	e011      	b.n	8008c54 <HAL_SPI_Receive+0x172>
 8008c30:	f7fd f9b8 	bl	8005fa4 <HAL_GetTick>
 8008c34:	4602      	mov	r2, r0
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d803      	bhi.n	8008c48 <HAL_SPI_Receive+0x166>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c46:	d102      	bne.n	8008c4e <HAL_SPI_Receive+0x16c>
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d102      	bne.n	8008c54 <HAL_SPI_Receive+0x172>
 8008c4e:	2303      	movs	r3, #3
 8008c50:	75fb      	strb	r3, [r7, #23]
 8008c52:	e04a      	b.n	8008cea <HAL_SPI_Receive+0x208>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1cb      	bne.n	8008bf6 <HAL_SPI_Receive+0x114>
 8008c5e:	e031      	b.n	8008cc4 <HAL_SPI_Receive+0x1e2>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d113      	bne.n	8008c96 <HAL_SPI_Receive+0x1b4>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68da      	ldr	r2, [r3, #12]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	b292      	uxth	r2, r2
 8008c7a:	801a      	strh	r2, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	1c9a      	adds	r2, r3, #2
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	639a      	str	r2, [r3, #56]	; 0x38
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c94:	e011      	b.n	8008cba <HAL_SPI_Receive+0x1d8>
 8008c96:	f7fd f985 	bl	8005fa4 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d803      	bhi.n	8008cae <HAL_SPI_Receive+0x1cc>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cac:	d102      	bne.n	8008cb4 <HAL_SPI_Receive+0x1d2>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d102      	bne.n	8008cba <HAL_SPI_Receive+0x1d8>
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	75fb      	strb	r3, [r7, #23]
 8008cb8:	e017      	b.n	8008cea <HAL_SPI_Receive+0x208>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1cd      	bne.n	8008c60 <HAL_SPI_Receive+0x17e>
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 fa45 	bl	8009158 <SPI_EndRxTransaction>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <HAL_SPI_Receive+0x1f8>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	655a      	str	r2, [r3, #84]	; 0x54
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <HAL_SPI_Receive+0x206>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]
 8008ce6:	e000      	b.n	8008cea <HAL_SPI_Receive+0x208>
 8008ce8:	bf00      	nop
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3718      	adds	r7, #24
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <HAL_SPI_TransmitReceive>:
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b08c      	sub	sp, #48	; 0x30
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	607a      	str	r2, [r7, #4]
 8008d10:	807b      	strh	r3, [r7, #2]
 8008d12:	2301      	movs	r3, #1
 8008d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d16:	2300      	movs	r3, #0
 8008d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <HAL_SPI_TransmitReceive+0x26>
 8008d26:	2302      	movs	r3, #2
 8008d28:	e18a      	b.n	8009040 <HAL_SPI_TransmitReceive+0x33c>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008d32:	f7fd f937 	bl	8005fa4 <HAL_GetTick>
 8008d36:	6278      	str	r0, [r7, #36]	; 0x24
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	61fb      	str	r3, [r7, #28]
 8008d48:	887b      	ldrh	r3, [r7, #2]
 8008d4a:	837b      	strh	r3, [r7, #26]
 8008d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d00f      	beq.n	8008d74 <HAL_SPI_TransmitReceive+0x70>
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d5a:	d107      	bne.n	8008d6c <HAL_SPI_TransmitReceive+0x68>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d103      	bne.n	8008d6c <HAL_SPI_TransmitReceive+0x68>
 8008d64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	d003      	beq.n	8008d74 <HAL_SPI_TransmitReceive+0x70>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d72:	e15b      	b.n	800902c <HAL_SPI_TransmitReceive+0x328>
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d005      	beq.n	8008d86 <HAL_SPI_TransmitReceive+0x82>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <HAL_SPI_TransmitReceive+0x82>
 8008d80:	887b      	ldrh	r3, [r7, #2]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d103      	bne.n	8008d8e <HAL_SPI_TransmitReceive+0x8a>
 8008d86:	2301      	movs	r3, #1
 8008d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d8c:	e14e      	b.n	800902c <HAL_SPI_TransmitReceive+0x328>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d003      	beq.n	8008da2 <HAL_SPI_TransmitReceive+0x9e>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2205      	movs	r2, #5
 8008d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	655a      	str	r2, [r3, #84]	; 0x54
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	639a      	str	r2, [r3, #56]	; 0x38
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	887a      	ldrh	r2, [r7, #2]
 8008db2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	887a      	ldrh	r2, [r7, #2]
 8008db8:	879a      	strh	r2, [r3, #60]	; 0x3c
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	887a      	ldrh	r2, [r7, #2]
 8008dc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	887a      	ldrh	r2, [r7, #2]
 8008dca:	869a      	strh	r2, [r3, #52]	; 0x34
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	641a      	str	r2, [r3, #64]	; 0x40
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	645a      	str	r2, [r3, #68]	; 0x44
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de2:	2b40      	cmp	r3, #64	; 0x40
 8008de4:	d007      	beq.n	8008df6 <HAL_SPI_TransmitReceive+0xf2>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dfe:	d178      	bne.n	8008ef2 <HAL_SPI_TransmitReceive+0x1ee>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <HAL_SPI_TransmitReceive+0x10a>
 8008e08:	8b7b      	ldrh	r3, [r7, #26]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d166      	bne.n	8008edc <HAL_SPI_TransmitReceive+0x1d8>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e12:	881a      	ldrh	r2, [r3, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	60da      	str	r2, [r3, #12]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1e:	1c9a      	adds	r2, r3, #2
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e32:	e053      	b.n	8008edc <HAL_SPI_TransmitReceive+0x1d8>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 0302 	and.w	r3, r3, #2
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d11b      	bne.n	8008e7a <HAL_SPI_TransmitReceive+0x176>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d016      	beq.n	8008e7a <HAL_SPI_TransmitReceive+0x176>
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d113      	bne.n	8008e7a <HAL_SPI_TransmitReceive+0x176>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	881a      	ldrh	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60da      	str	r2, [r3, #12]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e62:	1c9a      	adds	r2, r3, #2
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	631a      	str	r2, [r3, #48]	; 0x30
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e76:	2300      	movs	r3, #0
 8008e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f003 0301 	and.w	r3, r3, #1
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d119      	bne.n	8008ebc <HAL_SPI_TransmitReceive+0x1b8>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d014      	beq.n	8008ebc <HAL_SPI_TransmitReceive+0x1b8>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68da      	ldr	r2, [r3, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	b292      	uxth	r2, r2
 8008e9e:	801a      	strh	r2, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	1c9a      	adds	r2, r3, #2
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	639a      	str	r2, [r3, #56]	; 0x38
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008eb8:	2301      	movs	r3, #1
 8008eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ebc:	f7fd f872 	bl	8005fa4 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d807      	bhi.n	8008edc <HAL_SPI_TransmitReceive+0x1d8>
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed2:	d003      	beq.n	8008edc <HAL_SPI_TransmitReceive+0x1d8>
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eda:	e0a7      	b.n	800902c <HAL_SPI_TransmitReceive+0x328>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1a6      	bne.n	8008e34 <HAL_SPI_TransmitReceive+0x130>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1a1      	bne.n	8008e34 <HAL_SPI_TransmitReceive+0x130>
 8008ef0:	e07c      	b.n	8008fec <HAL_SPI_TransmitReceive+0x2e8>
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <HAL_SPI_TransmitReceive+0x1fc>
 8008efa:	8b7b      	ldrh	r3, [r7, #26]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d16b      	bne.n	8008fd8 <HAL_SPI_TransmitReceive+0x2d4>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	330c      	adds	r3, #12
 8008f0a:	7812      	ldrb	r2, [r2, #0]
 8008f0c:	701a      	strb	r2, [r3, #0]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	631a      	str	r2, [r3, #48]	; 0x30
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f26:	e057      	b.n	8008fd8 <HAL_SPI_TransmitReceive+0x2d4>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d11c      	bne.n	8008f70 <HAL_SPI_TransmitReceive+0x26c>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d017      	beq.n	8008f70 <HAL_SPI_TransmitReceive+0x26c>
 8008f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d114      	bne.n	8008f70 <HAL_SPI_TransmitReceive+0x26c>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	330c      	adds	r3, #12
 8008f50:	7812      	ldrb	r2, [r2, #0]
 8008f52:	701a      	strb	r2, [r3, #0]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f58:	1c5a      	adds	r2, r3, #1
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d119      	bne.n	8008fb2 <HAL_SPI_TransmitReceive+0x2ae>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d014      	beq.n	8008fb2 <HAL_SPI_TransmitReceive+0x2ae>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	b2d2      	uxtb	r2, r2
 8008f94:	701a      	strb	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fae:	2301      	movs	r3, #1
 8008fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fb2:	f7fc fff7 	bl	8005fa4 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d803      	bhi.n	8008fca <HAL_SPI_TransmitReceive+0x2c6>
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc8:	d102      	bne.n	8008fd0 <HAL_SPI_TransmitReceive+0x2cc>
 8008fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d103      	bne.n	8008fd8 <HAL_SPI_TransmitReceive+0x2d4>
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fd6:	e029      	b.n	800902c <HAL_SPI_TransmitReceive+0x328>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1a2      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x224>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d19d      	bne.n	8008f28 <HAL_SPI_TransmitReceive+0x224>
 8008fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 f917 	bl	8009224 <SPI_EndRxTxTransaction>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d006      	beq.n	800900a <HAL_SPI_TransmitReceive+0x306>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2220      	movs	r2, #32
 8009006:	655a      	str	r2, [r3, #84]	; 0x54
 8009008:	e010      	b.n	800902c <HAL_SPI_TransmitReceive+0x328>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10b      	bne.n	800902a <HAL_SPI_TransmitReceive+0x326>
 8009012:	2300      	movs	r3, #0
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	617b      	str	r3, [r7, #20]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	e000      	b.n	800902c <HAL_SPI_TransmitReceive+0x328>
 800902a:	bf00      	nop
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800903c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009040:	4618      	mov	r0, r3
 8009042:	3730      	adds	r7, #48	; 0x30
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <SPI_WaitFlagStateUntilTimeout>:
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	4613      	mov	r3, r2
 8009056:	71fb      	strb	r3, [r7, #7]
 8009058:	f7fc ffa4 	bl	8005fa4 <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	1a9b      	subs	r3, r3, r2
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	4413      	add	r3, r2
 8009066:	61fb      	str	r3, [r7, #28]
 8009068:	f7fc ff9c 	bl	8005fa4 <HAL_GetTick>
 800906c:	61b8      	str	r0, [r7, #24]
 800906e:	4b39      	ldr	r3, [pc, #228]	; (8009154 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	015b      	lsls	r3, r3, #5
 8009074:	0d1b      	lsrs	r3, r3, #20
 8009076:	69fa      	ldr	r2, [r7, #28]
 8009078:	fb02 f303 	mul.w	r3, r2, r3
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	e054      	b.n	800912a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009086:	d050      	beq.n	800912a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8009088:	f7fc ff8c 	bl	8005fa4 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	69fa      	ldr	r2, [r7, #28]
 8009094:	429a      	cmp	r2, r3
 8009096:	d902      	bls.n	800909e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d13d      	bne.n	800911a <SPI_WaitFlagStateUntilTimeout+0xd2>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090ac:	605a      	str	r2, [r3, #4]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090b6:	d111      	bne.n	80090dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c0:	d004      	beq.n	80090cc <SPI_WaitFlagStateUntilTimeout+0x84>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ca:	d107      	bne.n	80090dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090e4:	d10f      	bne.n	8009106 <SPI_WaitFlagStateUntilTimeout+0xbe>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090f4:	601a      	str	r2, [r3, #0]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2201      	movs	r2, #1
 800910a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009116:	2303      	movs	r3, #3
 8009118:	e017      	b.n	800914a <SPI_WaitFlagStateUntilTimeout+0x102>
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8009120:	2300      	movs	r3, #0
 8009122:	61fb      	str	r3, [r7, #28]
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	3b01      	subs	r3, #1
 8009128:	617b      	str	r3, [r7, #20]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	4013      	ands	r3, r2
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	429a      	cmp	r2, r3
 8009138:	bf0c      	ite	eq
 800913a:	2301      	moveq	r3, #1
 800913c:	2300      	movne	r3, #0
 800913e:	b2db      	uxtb	r3, r3
 8009140:	461a      	mov	r2, r3
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	429a      	cmp	r2, r3
 8009146:	d19b      	bne.n	8009080 <SPI_WaitFlagStateUntilTimeout+0x38>
 8009148:	2300      	movs	r3, #0
 800914a:	4618      	mov	r0, r3
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000000 	.word	0x20000000

08009158 <SPI_EndRxTransaction>:
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af02      	add	r7, sp, #8
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800916c:	d111      	bne.n	8009192 <SPI_EndRxTransaction+0x3a>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009176:	d004      	beq.n	8009182 <SPI_EndRxTransaction+0x2a>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009180:	d107      	bne.n	8009192 <SPI_EndRxTransaction+0x3a>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800919a:	d12a      	bne.n	80091f2 <SPI_EndRxTransaction+0x9a>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091a4:	d012      	beq.n	80091cc <SPI_EndRxTransaction+0x74>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2180      	movs	r1, #128	; 0x80
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f7ff ff49 	bl	8009048 <SPI_WaitFlagStateUntilTimeout>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d02d      	beq.n	8009218 <SPI_EndRxTransaction+0xc0>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c0:	f043 0220 	orr.w	r2, r3, #32
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	655a      	str	r2, [r3, #84]	; 0x54
 80091c8:	2303      	movs	r3, #3
 80091ca:	e026      	b.n	800921a <SPI_EndRxTransaction+0xc2>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2200      	movs	r2, #0
 80091d4:	2101      	movs	r1, #1
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f7ff ff36 	bl	8009048 <SPI_WaitFlagStateUntilTimeout>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d01a      	beq.n	8009218 <SPI_EndRxTransaction+0xc0>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e6:	f043 0220 	orr.w	r2, r3, #32
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	655a      	str	r2, [r3, #84]	; 0x54
 80091ee:	2303      	movs	r3, #3
 80091f0:	e013      	b.n	800921a <SPI_EndRxTransaction+0xc2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2200      	movs	r2, #0
 80091fa:	2101      	movs	r1, #1
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f7ff ff23 	bl	8009048 <SPI_WaitFlagStateUntilTimeout>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d007      	beq.n	8009218 <SPI_EndRxTransaction+0xc0>
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800920c:	f043 0220 	orr.w	r2, r3, #32
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	655a      	str	r2, [r3, #84]	; 0x54
 8009214:	2303      	movs	r3, #3
 8009216:	e000      	b.n	800921a <SPI_EndRxTransaction+0xc2>
 8009218:	2300      	movs	r3, #0
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
	...

08009224 <SPI_EndRxTxTransaction>:
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af02      	add	r7, sp, #8
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	4b1b      	ldr	r3, [pc, #108]	; (80092a0 <SPI_EndRxTxTransaction+0x7c>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a1b      	ldr	r2, [pc, #108]	; (80092a4 <SPI_EndRxTxTransaction+0x80>)
 8009236:	fba2 2303 	umull	r2, r3, r2, r3
 800923a:	0d5b      	lsrs	r3, r3, #21
 800923c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009240:	fb02 f303 	mul.w	r3, r2, r3
 8009244:	617b      	str	r3, [r7, #20]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800924e:	d112      	bne.n	8009276 <SPI_EndRxTxTransaction+0x52>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2200      	movs	r2, #0
 8009258:	2180      	movs	r1, #128	; 0x80
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f7ff fef4 	bl	8009048 <SPI_WaitFlagStateUntilTimeout>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d016      	beq.n	8009294 <SPI_EndRxTxTransaction+0x70>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800926a:	f043 0220 	orr.w	r2, r3, #32
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	655a      	str	r2, [r3, #84]	; 0x54
 8009272:	2303      	movs	r3, #3
 8009274:	e00f      	b.n	8009296 <SPI_EndRxTxTransaction+0x72>
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <SPI_EndRxTxTransaction+0x6e>
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	3b01      	subs	r3, #1
 8009280:	617b      	str	r3, [r7, #20]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928c:	2b80      	cmp	r3, #128	; 0x80
 800928e:	d0f2      	beq.n	8009276 <SPI_EndRxTxTransaction+0x52>
 8009290:	e000      	b.n	8009294 <SPI_EndRxTxTransaction+0x70>
 8009292:	bf00      	nop
 8009294:	2300      	movs	r3, #0
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20000000 	.word	0x20000000
 80092a4:	165e9f81 	.word	0x165e9f81

080092a8 <HAL_TIM_Base_Init>:
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <HAL_TIM_Base_Init+0x12>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e041      	b.n	800933e <HAL_TIM_Base_Init+0x96>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <HAL_TIM_Base_Init+0x2c>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7fb fb46 	bl	8004960 <HAL_TIM_Base_MspInit>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2202      	movs	r2, #2
 80092d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4619      	mov	r1, r3
 80092e6:	4610      	mov	r0, r2
 80092e8:	f000 fe12 	bl	8009f10 <TIM_Base_SetConfig>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800933c:	2300      	movs	r3, #0
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
	...

08009348 <HAL_TIM_Base_Start_IT>:
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b01      	cmp	r3, #1
 800935a:	d001      	beq.n	8009360 <HAL_TIM_Base_Start_IT+0x18>
 800935c:	2301      	movs	r3, #1
 800935e:	e04e      	b.n	80093fe <HAL_TIM_Base_Start_IT+0xb6>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f042 0201 	orr.w	r2, r2, #1
 8009376:	60da      	str	r2, [r3, #12]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a23      	ldr	r2, [pc, #140]	; (800940c <HAL_TIM_Base_Start_IT+0xc4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d022      	beq.n	80093c8 <HAL_TIM_Base_Start_IT+0x80>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800938a:	d01d      	beq.n	80093c8 <HAL_TIM_Base_Start_IT+0x80>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1f      	ldr	r2, [pc, #124]	; (8009410 <HAL_TIM_Base_Start_IT+0xc8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d018      	beq.n	80093c8 <HAL_TIM_Base_Start_IT+0x80>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a1e      	ldr	r2, [pc, #120]	; (8009414 <HAL_TIM_Base_Start_IT+0xcc>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d013      	beq.n	80093c8 <HAL_TIM_Base_Start_IT+0x80>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a1c      	ldr	r2, [pc, #112]	; (8009418 <HAL_TIM_Base_Start_IT+0xd0>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00e      	beq.n	80093c8 <HAL_TIM_Base_Start_IT+0x80>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a1b      	ldr	r2, [pc, #108]	; (800941c <HAL_TIM_Base_Start_IT+0xd4>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d009      	beq.n	80093c8 <HAL_TIM_Base_Start_IT+0x80>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a19      	ldr	r2, [pc, #100]	; (8009420 <HAL_TIM_Base_Start_IT+0xd8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d004      	beq.n	80093c8 <HAL_TIM_Base_Start_IT+0x80>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a18      	ldr	r2, [pc, #96]	; (8009424 <HAL_TIM_Base_Start_IT+0xdc>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d111      	bne.n	80093ec <HAL_TIM_Base_Start_IT+0xa4>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 0307 	and.w	r3, r3, #7
 80093d2:	60fb      	str	r3, [r7, #12]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b06      	cmp	r3, #6
 80093d8:	d010      	beq.n	80093fc <HAL_TIM_Base_Start_IT+0xb4>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f042 0201 	orr.w	r2, r2, #1
 80093e8:	601a      	str	r2, [r3, #0]
 80093ea:	e007      	b.n	80093fc <HAL_TIM_Base_Start_IT+0xb4>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0201 	orr.w	r2, r2, #1
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	2300      	movs	r3, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	40010000 	.word	0x40010000
 8009410:	40000400 	.word	0x40000400
 8009414:	40000800 	.word	0x40000800
 8009418:	40000c00 	.word	0x40000c00
 800941c:	40010400 	.word	0x40010400
 8009420:	40014000 	.word	0x40014000
 8009424:	40001800 	.word	0x40001800

08009428 <HAL_TIM_Base_Stop_IT>:
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68da      	ldr	r2, [r3, #12]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 0201 	bic.w	r2, r2, #1
 800943e:	60da      	str	r2, [r3, #12]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6a1a      	ldr	r2, [r3, #32]
 8009446:	f241 1311 	movw	r3, #4369	; 0x1111
 800944a:	4013      	ands	r3, r2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10f      	bne.n	8009470 <HAL_TIM_Base_Stop_IT+0x48>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6a1a      	ldr	r2, [r3, #32]
 8009456:	f240 4344 	movw	r3, #1092	; 0x444
 800945a:	4013      	ands	r3, r2
 800945c:	2b00      	cmp	r3, #0
 800945e:	d107      	bne.n	8009470 <HAL_TIM_Base_Stop_IT+0x48>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0201 	bic.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009478:	2300      	movs	r3, #0
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <HAL_TIM_PWM_Init>:
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <HAL_TIM_PWM_Init+0x12>
 8009494:	2301      	movs	r3, #1
 8009496:	e041      	b.n	800951c <HAL_TIM_PWM_Init+0x96>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d106      	bne.n	80094b2 <HAL_TIM_PWM_Init+0x2c>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7fb fa2f 	bl	8004910 <HAL_TIM_PWM_MspInit>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2202      	movs	r2, #2
 80094b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	3304      	adds	r3, #4
 80094c2:	4619      	mov	r1, r3
 80094c4:	4610      	mov	r0, r2
 80094c6:	f000 fd23 	bl	8009f10 <TIM_Base_SetConfig>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800951a:	2300      	movs	r3, #0
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <HAL_TIM_PWM_Start>:
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d109      	bne.n	8009548 <HAL_TIM_PWM_Start+0x24>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b01      	cmp	r3, #1
 800953e:	bf14      	ite	ne
 8009540:	2301      	movne	r3, #1
 8009542:	2300      	moveq	r3, #0
 8009544:	b2db      	uxtb	r3, r3
 8009546:	e022      	b.n	800958e <HAL_TIM_PWM_Start+0x6a>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2b04      	cmp	r3, #4
 800954c:	d109      	bne.n	8009562 <HAL_TIM_PWM_Start+0x3e>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b01      	cmp	r3, #1
 8009558:	bf14      	ite	ne
 800955a:	2301      	movne	r3, #1
 800955c:	2300      	moveq	r3, #0
 800955e:	b2db      	uxtb	r3, r3
 8009560:	e015      	b.n	800958e <HAL_TIM_PWM_Start+0x6a>
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b08      	cmp	r3, #8
 8009566:	d109      	bne.n	800957c <HAL_TIM_PWM_Start+0x58>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b01      	cmp	r3, #1
 8009572:	bf14      	ite	ne
 8009574:	2301      	movne	r3, #1
 8009576:	2300      	moveq	r3, #0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	e008      	b.n	800958e <HAL_TIM_PWM_Start+0x6a>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009582:	b2db      	uxtb	r3, r3
 8009584:	2b01      	cmp	r3, #1
 8009586:	bf14      	ite	ne
 8009588:	2301      	movne	r3, #1
 800958a:	2300      	moveq	r3, #0
 800958c:	b2db      	uxtb	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <HAL_TIM_PWM_Start+0x72>
 8009592:	2301      	movs	r3, #1
 8009594:	e07c      	b.n	8009690 <HAL_TIM_PWM_Start+0x16c>
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d104      	bne.n	80095a6 <HAL_TIM_PWM_Start+0x82>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80095a4:	e013      	b.n	80095ce <HAL_TIM_PWM_Start+0xaa>
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b04      	cmp	r3, #4
 80095aa:	d104      	bne.n	80095b6 <HAL_TIM_PWM_Start+0x92>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80095b4:	e00b      	b.n	80095ce <HAL_TIM_PWM_Start+0xaa>
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d104      	bne.n	80095c6 <HAL_TIM_PWM_Start+0xa2>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2202      	movs	r2, #2
 80095c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80095c4:	e003      	b.n	80095ce <HAL_TIM_PWM_Start+0xaa>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2201      	movs	r2, #1
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 feea 	bl	800a3b0 <TIM_CCxChannelCmd>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a2d      	ldr	r2, [pc, #180]	; (8009698 <HAL_TIM_PWM_Start+0x174>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d004      	beq.n	80095f0 <HAL_TIM_PWM_Start+0xcc>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a2c      	ldr	r2, [pc, #176]	; (800969c <HAL_TIM_PWM_Start+0x178>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d101      	bne.n	80095f4 <HAL_TIM_PWM_Start+0xd0>
 80095f0:	2301      	movs	r3, #1
 80095f2:	e000      	b.n	80095f6 <HAL_TIM_PWM_Start+0xd2>
 80095f4:	2300      	movs	r3, #0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d007      	beq.n	800960a <HAL_TIM_PWM_Start+0xe6>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009608:	645a      	str	r2, [r3, #68]	; 0x44
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a22      	ldr	r2, [pc, #136]	; (8009698 <HAL_TIM_PWM_Start+0x174>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d022      	beq.n	800965a <HAL_TIM_PWM_Start+0x136>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800961c:	d01d      	beq.n	800965a <HAL_TIM_PWM_Start+0x136>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a1f      	ldr	r2, [pc, #124]	; (80096a0 <HAL_TIM_PWM_Start+0x17c>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d018      	beq.n	800965a <HAL_TIM_PWM_Start+0x136>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a1d      	ldr	r2, [pc, #116]	; (80096a4 <HAL_TIM_PWM_Start+0x180>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d013      	beq.n	800965a <HAL_TIM_PWM_Start+0x136>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a1c      	ldr	r2, [pc, #112]	; (80096a8 <HAL_TIM_PWM_Start+0x184>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d00e      	beq.n	800965a <HAL_TIM_PWM_Start+0x136>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a16      	ldr	r2, [pc, #88]	; (800969c <HAL_TIM_PWM_Start+0x178>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d009      	beq.n	800965a <HAL_TIM_PWM_Start+0x136>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a18      	ldr	r2, [pc, #96]	; (80096ac <HAL_TIM_PWM_Start+0x188>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d004      	beq.n	800965a <HAL_TIM_PWM_Start+0x136>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a16      	ldr	r2, [pc, #88]	; (80096b0 <HAL_TIM_PWM_Start+0x18c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d111      	bne.n	800967e <HAL_TIM_PWM_Start+0x15a>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	60fb      	str	r3, [r7, #12]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b06      	cmp	r3, #6
 800966a:	d010      	beq.n	800968e <HAL_TIM_PWM_Start+0x16a>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 0201 	orr.w	r2, r2, #1
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	e007      	b.n	800968e <HAL_TIM_PWM_Start+0x16a>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f042 0201 	orr.w	r2, r2, #1
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	2300      	movs	r3, #0
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	40010000 	.word	0x40010000
 800969c:	40010400 	.word	0x40010400
 80096a0:	40000400 	.word	0x40000400
 80096a4:	40000800 	.word	0x40000800
 80096a8:	40000c00 	.word	0x40000c00
 80096ac:	40014000 	.word	0x40014000
 80096b0:	40001800 	.word	0x40001800

080096b4 <HAL_TIM_PWM_Stop>:
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2200      	movs	r2, #0
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 fe72 	bl	800a3b0 <TIM_CCxChannelCmd>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a2e      	ldr	r2, [pc, #184]	; (800978c <HAL_TIM_PWM_Stop+0xd8>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d004      	beq.n	80096e0 <HAL_TIM_PWM_Stop+0x2c>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a2d      	ldr	r2, [pc, #180]	; (8009790 <HAL_TIM_PWM_Stop+0xdc>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d101      	bne.n	80096e4 <HAL_TIM_PWM_Stop+0x30>
 80096e0:	2301      	movs	r3, #1
 80096e2:	e000      	b.n	80096e6 <HAL_TIM_PWM_Stop+0x32>
 80096e4:	2300      	movs	r3, #0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d017      	beq.n	800971a <HAL_TIM_PWM_Stop+0x66>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6a1a      	ldr	r2, [r3, #32]
 80096f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80096f4:	4013      	ands	r3, r2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10f      	bne.n	800971a <HAL_TIM_PWM_Stop+0x66>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6a1a      	ldr	r2, [r3, #32]
 8009700:	f240 4344 	movw	r3, #1092	; 0x444
 8009704:	4013      	ands	r3, r2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d107      	bne.n	800971a <HAL_TIM_PWM_Stop+0x66>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009718:	645a      	str	r2, [r3, #68]	; 0x44
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6a1a      	ldr	r2, [r3, #32]
 8009720:	f241 1311 	movw	r3, #4369	; 0x1111
 8009724:	4013      	ands	r3, r2
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10f      	bne.n	800974a <HAL_TIM_PWM_Stop+0x96>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6a1a      	ldr	r2, [r3, #32]
 8009730:	f240 4344 	movw	r3, #1092	; 0x444
 8009734:	4013      	ands	r3, r2
 8009736:	2b00      	cmp	r3, #0
 8009738:	d107      	bne.n	800974a <HAL_TIM_PWM_Stop+0x96>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 0201 	bic.w	r2, r2, #1
 8009748:	601a      	str	r2, [r3, #0]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d104      	bne.n	800975a <HAL_TIM_PWM_Stop+0xa6>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009758:	e013      	b.n	8009782 <HAL_TIM_PWM_Stop+0xce>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b04      	cmp	r3, #4
 800975e:	d104      	bne.n	800976a <HAL_TIM_PWM_Stop+0xb6>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009768:	e00b      	b.n	8009782 <HAL_TIM_PWM_Stop+0xce>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b08      	cmp	r3, #8
 800976e:	d104      	bne.n	800977a <HAL_TIM_PWM_Stop+0xc6>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009778:	e003      	b.n	8009782 <HAL_TIM_PWM_Stop+0xce>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009782:	2300      	movs	r3, #0
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	40010000 	.word	0x40010000
 8009790:	40010400 	.word	0x40010400

08009794 <HAL_TIM_Encoder_Init>:
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <HAL_TIM_Encoder_Init+0x14>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e097      	b.n	80098d8 <HAL_TIM_Encoder_Init+0x144>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d106      	bne.n	80097c2 <HAL_TIM_Encoder_Init+0x2e>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7fb f811 	bl	80047e4 <HAL_TIM_Encoder_MspInit>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2202      	movs	r2, #2
 80097c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6812      	ldr	r2, [r2, #0]
 80097d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097d8:	f023 0307 	bic.w	r3, r3, #7
 80097dc:	6093      	str	r3, [r2, #8]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	3304      	adds	r3, #4
 80097e6:	4619      	mov	r1, r3
 80097e8:	4610      	mov	r0, r2
 80097ea:	f000 fb91 	bl	8009f10 <TIM_Base_SetConfig>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	617b      	str	r3, [r7, #20]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	613b      	str	r3, [r7, #16]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	60fb      	str	r3, [r7, #12]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009816:	f023 0303 	bic.w	r3, r3, #3
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	689a      	ldr	r2, [r3, #8]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	021b      	lsls	r3, r3, #8
 8009826:	4313      	orrs	r3, r2
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	4313      	orrs	r3, r2
 800982c:	613b      	str	r3, [r7, #16]
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009834:	f023 030c 	bic.w	r3, r3, #12
 8009838:	613b      	str	r3, [r7, #16]
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009840:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009844:	613b      	str	r3, [r7, #16]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68da      	ldr	r2, [r3, #12]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	69db      	ldr	r3, [r3, #28]
 800984e:	021b      	lsls	r3, r3, #8
 8009850:	4313      	orrs	r3, r2
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	4313      	orrs	r3, r2
 8009856:	613b      	str	r3, [r7, #16]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	011a      	lsls	r2, r3, #4
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	031b      	lsls	r3, r3, #12
 8009864:	4313      	orrs	r3, r2
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	4313      	orrs	r3, r2
 800986a:	613b      	str	r3, [r7, #16]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	011b      	lsls	r3, r3, #4
 8009886:	4313      	orrs	r3, r2
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	609a      	str	r2, [r3, #8]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	619a      	str	r2, [r3, #24]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	621a      	str	r2, [r3, #32]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80098d6:	2300      	movs	r3, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <HAL_TIM_Encoder_Start>:
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098f0:	73fb      	strb	r3, [r7, #15]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098f8:	73bb      	strb	r3, [r7, #14]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009900:	737b      	strb	r3, [r7, #13]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009908:	733b      	strb	r3, [r7, #12]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d110      	bne.n	8009932 <HAL_TIM_Encoder_Start+0x52>
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d102      	bne.n	800991c <HAL_TIM_Encoder_Start+0x3c>
 8009916:	7b7b      	ldrb	r3, [r7, #13]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d001      	beq.n	8009920 <HAL_TIM_Encoder_Start+0x40>
 800991c:	2301      	movs	r3, #1
 800991e:	e069      	b.n	80099f4 <HAL_TIM_Encoder_Start+0x114>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009930:	e031      	b.n	8009996 <HAL_TIM_Encoder_Start+0xb6>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b04      	cmp	r3, #4
 8009936:	d110      	bne.n	800995a <HAL_TIM_Encoder_Start+0x7a>
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d102      	bne.n	8009944 <HAL_TIM_Encoder_Start+0x64>
 800993e:	7b3b      	ldrb	r3, [r7, #12]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d001      	beq.n	8009948 <HAL_TIM_Encoder_Start+0x68>
 8009944:	2301      	movs	r3, #1
 8009946:	e055      	b.n	80099f4 <HAL_TIM_Encoder_Start+0x114>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2202      	movs	r2, #2
 8009954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009958:	e01d      	b.n	8009996 <HAL_TIM_Encoder_Start+0xb6>
 800995a:	7bfb      	ldrb	r3, [r7, #15]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d108      	bne.n	8009972 <HAL_TIM_Encoder_Start+0x92>
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d105      	bne.n	8009972 <HAL_TIM_Encoder_Start+0x92>
 8009966:	7b7b      	ldrb	r3, [r7, #13]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d102      	bne.n	8009972 <HAL_TIM_Encoder_Start+0x92>
 800996c:	7b3b      	ldrb	r3, [r7, #12]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d001      	beq.n	8009976 <HAL_TIM_Encoder_Start+0x96>
 8009972:	2301      	movs	r3, #1
 8009974:	e03e      	b.n	80099f4 <HAL_TIM_Encoder_Start+0x114>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2202      	movs	r2, #2
 800997a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2202      	movs	r2, #2
 8009982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2202      	movs	r2, #2
 800998a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2202      	movs	r2, #2
 8009992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <HAL_TIM_Encoder_Start+0xc4>
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2b04      	cmp	r3, #4
 80099a0:	d008      	beq.n	80099b4 <HAL_TIM_Encoder_Start+0xd4>
 80099a2:	e00f      	b.n	80099c4 <HAL_TIM_Encoder_Start+0xe4>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2201      	movs	r2, #1
 80099aa:	2100      	movs	r1, #0
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 fcff 	bl	800a3b0 <TIM_CCxChannelCmd>
 80099b2:	e016      	b.n	80099e2 <HAL_TIM_Encoder_Start+0x102>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2201      	movs	r2, #1
 80099ba:	2104      	movs	r1, #4
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fcf7 	bl	800a3b0 <TIM_CCxChannelCmd>
 80099c2:	e00e      	b.n	80099e2 <HAL_TIM_Encoder_Start+0x102>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2201      	movs	r2, #1
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 fcef 	bl	800a3b0 <TIM_CCxChannelCmd>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2201      	movs	r2, #1
 80099d8:	2104      	movs	r1, #4
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 fce8 	bl	800a3b0 <TIM_CCxChannelCmd>
 80099e0:	bf00      	nop
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f042 0201 	orr.w	r2, r2, #1
 80099f0:	601a      	str	r2, [r3, #0]
 80099f2:	2300      	movs	r3, #0
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <HAL_TIM_Encoder_Stop>:
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d003      	beq.n	8009a14 <HAL_TIM_Encoder_Stop+0x18>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b04      	cmp	r3, #4
 8009a10:	d008      	beq.n	8009a24 <HAL_TIM_Encoder_Stop+0x28>
 8009a12:	e00f      	b.n	8009a34 <HAL_TIM_Encoder_Stop+0x38>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fcc7 	bl	800a3b0 <TIM_CCxChannelCmd>
 8009a22:	e016      	b.n	8009a52 <HAL_TIM_Encoder_Stop+0x56>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2104      	movs	r1, #4
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 fcbf 	bl	800a3b0 <TIM_CCxChannelCmd>
 8009a32:	e00e      	b.n	8009a52 <HAL_TIM_Encoder_Stop+0x56>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 fcb7 	bl	800a3b0 <TIM_CCxChannelCmd>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2200      	movs	r2, #0
 8009a48:	2104      	movs	r1, #4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 fcb0 	bl	800a3b0 <TIM_CCxChannelCmd>
 8009a50:	bf00      	nop
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6a1a      	ldr	r2, [r3, #32]
 8009a58:	f241 1311 	movw	r3, #4369	; 0x1111
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10f      	bne.n	8009a82 <HAL_TIM_Encoder_Stop+0x86>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6a1a      	ldr	r2, [r3, #32]
 8009a68:	f240 4344 	movw	r3, #1092	; 0x444
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d107      	bne.n	8009a82 <HAL_TIM_Encoder_Stop+0x86>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0201 	bic.w	r2, r2, #1
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <HAL_TIM_Encoder_Stop+0x92>
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b04      	cmp	r3, #4
 8009a8c:	d138      	bne.n	8009b00 <HAL_TIM_Encoder_Stop+0x104>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d104      	bne.n	8009a9e <HAL_TIM_Encoder_Stop+0xa2>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a9c:	e013      	b.n	8009ac6 <HAL_TIM_Encoder_Stop+0xca>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d104      	bne.n	8009aae <HAL_TIM_Encoder_Stop+0xb2>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aac:	e00b      	b.n	8009ac6 <HAL_TIM_Encoder_Stop+0xca>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d104      	bne.n	8009abe <HAL_TIM_Encoder_Stop+0xc2>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009abc:	e003      	b.n	8009ac6 <HAL_TIM_Encoder_Stop+0xca>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d104      	bne.n	8009ad6 <HAL_TIM_Encoder_Stop+0xda>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ad4:	e024      	b.n	8009b20 <HAL_TIM_Encoder_Stop+0x124>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	2b04      	cmp	r3, #4
 8009ada:	d104      	bne.n	8009ae6 <HAL_TIM_Encoder_Stop+0xea>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ae4:	e01c      	b.n	8009b20 <HAL_TIM_Encoder_Stop+0x124>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2b08      	cmp	r3, #8
 8009aea:	d104      	bne.n	8009af6 <HAL_TIM_Encoder_Stop+0xfa>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009af4:	e014      	b.n	8009b20 <HAL_TIM_Encoder_Stop+0x124>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009afe:	e00f      	b.n	8009b20 <HAL_TIM_Encoder_Stop+0x124>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b20:	2300      	movs	r3, #0
 8009b22:	4618      	mov	r0, r3
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}

08009b2a <HAL_TIM_IRQHandler>:
 8009b2a:	b580      	push	{r7, lr}
 8009b2c:	b082      	sub	sp, #8
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	6078      	str	r0, [r7, #4]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d122      	bne.n	8009b86 <HAL_TIM_IRQHandler+0x5c>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f003 0302 	and.w	r3, r3, #2
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d11b      	bne.n	8009b86 <HAL_TIM_IRQHandler+0x5c>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f06f 0202 	mvn.w	r2, #2
 8009b56:	611a      	str	r2, [r3, #16]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	771a      	strb	r2, [r3, #28]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	f003 0303 	and.w	r3, r3, #3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d003      	beq.n	8009b74 <HAL_TIM_IRQHandler+0x4a>
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f9b1 	bl	8009ed4 <HAL_TIM_IC_CaptureCallback>
 8009b72:	e005      	b.n	8009b80 <HAL_TIM_IRQHandler+0x56>
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f9a3 	bl	8009ec0 <HAL_TIM_OC_DelayElapsedCallback>
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f9b4 	bl	8009ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	771a      	strb	r2, [r3, #28]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d122      	bne.n	8009bda <HAL_TIM_IRQHandler+0xb0>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	f003 0304 	and.w	r3, r3, #4
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d11b      	bne.n	8009bda <HAL_TIM_IRQHandler+0xb0>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f06f 0204 	mvn.w	r2, #4
 8009baa:	611a      	str	r2, [r3, #16]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2202      	movs	r2, #2
 8009bb0:	771a      	strb	r2, [r3, #28]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d003      	beq.n	8009bc8 <HAL_TIM_IRQHandler+0x9e>
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f987 	bl	8009ed4 <HAL_TIM_IC_CaptureCallback>
 8009bc6:	e005      	b.n	8009bd4 <HAL_TIM_IRQHandler+0xaa>
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f979 	bl	8009ec0 <HAL_TIM_OC_DelayElapsedCallback>
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f98a 	bl	8009ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	771a      	strb	r2, [r3, #28]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	f003 0308 	and.w	r3, r3, #8
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	d122      	bne.n	8009c2e <HAL_TIM_IRQHandler+0x104>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	f003 0308 	and.w	r3, r3, #8
 8009bf2:	2b08      	cmp	r3, #8
 8009bf4:	d11b      	bne.n	8009c2e <HAL_TIM_IRQHandler+0x104>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f06f 0208 	mvn.w	r2, #8
 8009bfe:	611a      	str	r2, [r3, #16]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2204      	movs	r2, #4
 8009c04:	771a      	strb	r2, [r3, #28]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	69db      	ldr	r3, [r3, #28]
 8009c0c:	f003 0303 	and.w	r3, r3, #3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d003      	beq.n	8009c1c <HAL_TIM_IRQHandler+0xf2>
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f95d 	bl	8009ed4 <HAL_TIM_IC_CaptureCallback>
 8009c1a:	e005      	b.n	8009c28 <HAL_TIM_IRQHandler+0xfe>
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f94f 	bl	8009ec0 <HAL_TIM_OC_DelayElapsedCallback>
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f960 	bl	8009ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	771a      	strb	r2, [r3, #28]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	691b      	ldr	r3, [r3, #16]
 8009c34:	f003 0310 	and.w	r3, r3, #16
 8009c38:	2b10      	cmp	r3, #16
 8009c3a:	d122      	bne.n	8009c82 <HAL_TIM_IRQHandler+0x158>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	f003 0310 	and.w	r3, r3, #16
 8009c46:	2b10      	cmp	r3, #16
 8009c48:	d11b      	bne.n	8009c82 <HAL_TIM_IRQHandler+0x158>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f06f 0210 	mvn.w	r2, #16
 8009c52:	611a      	str	r2, [r3, #16]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2208      	movs	r2, #8
 8009c58:	771a      	strb	r2, [r3, #28]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <HAL_TIM_IRQHandler+0x146>
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f933 	bl	8009ed4 <HAL_TIM_IC_CaptureCallback>
 8009c6e:	e005      	b.n	8009c7c <HAL_TIM_IRQHandler+0x152>
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f925 	bl	8009ec0 <HAL_TIM_OC_DelayElapsedCallback>
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f936 	bl	8009ee8 <HAL_TIM_PWM_PulseFinishedCallback>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	771a      	strb	r2, [r3, #28]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d10e      	bne.n	8009cae <HAL_TIM_IRQHandler+0x184>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d107      	bne.n	8009cae <HAL_TIM_IRQHandler+0x184>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f06f 0201 	mvn.w	r2, #1
 8009ca6:	611a      	str	r2, [r3, #16]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7f9 f9a3 	bl	8002ff4 <HAL_TIM_PeriodElapsedCallback>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb8:	2b80      	cmp	r3, #128	; 0x80
 8009cba:	d10e      	bne.n	8009cda <HAL_TIM_IRQHandler+0x1b0>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc6:	2b80      	cmp	r3, #128	; 0x80
 8009cc8:	d107      	bne.n	8009cda <HAL_TIM_IRQHandler+0x1b0>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cd2:	611a      	str	r2, [r3, #16]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fc17 	bl	800a508 <HAL_TIMEx_BreakCallback>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce4:	2b40      	cmp	r3, #64	; 0x40
 8009ce6:	d10e      	bne.n	8009d06 <HAL_TIM_IRQHandler+0x1dc>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf2:	2b40      	cmp	r3, #64	; 0x40
 8009cf4:	d107      	bne.n	8009d06 <HAL_TIM_IRQHandler+0x1dc>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cfe:	611a      	str	r2, [r3, #16]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f8fb 	bl	8009efc <HAL_TIM_TriggerCallback>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b20      	cmp	r3, #32
 8009d12:	d10e      	bne.n	8009d32 <HAL_TIM_IRQHandler+0x208>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b20      	cmp	r3, #32
 8009d20:	d107      	bne.n	8009d32 <HAL_TIM_IRQHandler+0x208>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f06f 0220 	mvn.w	r2, #32
 8009d2a:	611a      	str	r2, [r3, #16]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fbe1 	bl	800a4f4 <HAL_TIMEx_CommutCallback>
 8009d32:	bf00      	nop
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <HAL_TIM_PWM_ConfigChannel>:
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	75fb      	strb	r3, [r7, #23]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d101      	bne.n	8009d5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d56:	2302      	movs	r3, #2
 8009d58:	e0ae      	b.n	8009eb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b0c      	cmp	r3, #12
 8009d66:	f200 809f 	bhi.w	8009ea8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d6a:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d70:	08009da5 	.word	0x08009da5
 8009d74:	08009ea9 	.word	0x08009ea9
 8009d78:	08009ea9 	.word	0x08009ea9
 8009d7c:	08009ea9 	.word	0x08009ea9
 8009d80:	08009de5 	.word	0x08009de5
 8009d84:	08009ea9 	.word	0x08009ea9
 8009d88:	08009ea9 	.word	0x08009ea9
 8009d8c:	08009ea9 	.word	0x08009ea9
 8009d90:	08009e27 	.word	0x08009e27
 8009d94:	08009ea9 	.word	0x08009ea9
 8009d98:	08009ea9 	.word	0x08009ea9
 8009d9c:	08009ea9 	.word	0x08009ea9
 8009da0:	08009e67 	.word	0x08009e67
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68b9      	ldr	r1, [r7, #8]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 f950 	bl	800a050 <TIM_OC1_SetConfig>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f042 0208 	orr.w	r2, r2, #8
 8009dbe:	619a      	str	r2, [r3, #24]
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	699a      	ldr	r2, [r3, #24]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f022 0204 	bic.w	r2, r2, #4
 8009dce:	619a      	str	r2, [r3, #24]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6999      	ldr	r1, [r3, #24]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	691a      	ldr	r2, [r3, #16]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	430a      	orrs	r2, r1
 8009de0:	619a      	str	r2, [r3, #24]
 8009de2:	e064      	b.n	8009eae <HAL_TIM_PWM_ConfigChannel+0x172>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68b9      	ldr	r1, [r7, #8]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 f9a0 	bl	800a130 <TIM_OC2_SetConfig>
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	699a      	ldr	r2, [r3, #24]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dfe:	619a      	str	r2, [r3, #24]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	699a      	ldr	r2, [r3, #24]
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e0e:	619a      	str	r2, [r3, #24]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6999      	ldr	r1, [r3, #24]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	021a      	lsls	r2, r3, #8
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	619a      	str	r2, [r3, #24]
 8009e24:	e043      	b.n	8009eae <HAL_TIM_PWM_ConfigChannel+0x172>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 f9f5 	bl	800a21c <TIM_OC3_SetConfig>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69da      	ldr	r2, [r3, #28]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f042 0208 	orr.w	r2, r2, #8
 8009e40:	61da      	str	r2, [r3, #28]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	69da      	ldr	r2, [r3, #28]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f022 0204 	bic.w	r2, r2, #4
 8009e50:	61da      	str	r2, [r3, #28]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	69d9      	ldr	r1, [r3, #28]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	691a      	ldr	r2, [r3, #16]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	430a      	orrs	r2, r1
 8009e62:	61da      	str	r2, [r3, #28]
 8009e64:	e023      	b.n	8009eae <HAL_TIM_PWM_ConfigChannel+0x172>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68b9      	ldr	r1, [r7, #8]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 fa49 	bl	800a304 <TIM_OC4_SetConfig>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	69da      	ldr	r2, [r3, #28]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e80:	61da      	str	r2, [r3, #28]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	69da      	ldr	r2, [r3, #28]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e90:	61da      	str	r2, [r3, #28]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69d9      	ldr	r1, [r3, #28]
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	691b      	ldr	r3, [r3, #16]
 8009e9c:	021a      	lsls	r2, r3, #8
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	61da      	str	r2, [r3, #28]
 8009ea6:	e002      	b.n	8009eae <HAL_TIM_PWM_ConfigChannel+0x172>
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	75fb      	strb	r3, [r7, #23]
 8009eac:	bf00      	nop
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009eb6:	7dfb      	ldrb	r3, [r7, #23]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <HAL_TIM_OC_DelayElapsedCallback>:
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <HAL_TIM_IC_CaptureCallback>:
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	bf00      	nop
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <HAL_TIM_TriggerCallback>:
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	bf00      	nop
 8009f06:	370c      	adds	r7, #12
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <TIM_Base_SetConfig>:
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	60fb      	str	r3, [r7, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a40      	ldr	r2, [pc, #256]	; (800a024 <TIM_Base_SetConfig+0x114>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d013      	beq.n	8009f50 <TIM_Base_SetConfig+0x40>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2e:	d00f      	beq.n	8009f50 <TIM_Base_SetConfig+0x40>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a3d      	ldr	r2, [pc, #244]	; (800a028 <TIM_Base_SetConfig+0x118>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d00b      	beq.n	8009f50 <TIM_Base_SetConfig+0x40>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a3c      	ldr	r2, [pc, #240]	; (800a02c <TIM_Base_SetConfig+0x11c>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d007      	beq.n	8009f50 <TIM_Base_SetConfig+0x40>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a3b      	ldr	r2, [pc, #236]	; (800a030 <TIM_Base_SetConfig+0x120>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d003      	beq.n	8009f50 <TIM_Base_SetConfig+0x40>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	4a3a      	ldr	r2, [pc, #232]	; (800a034 <TIM_Base_SetConfig+0x124>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d108      	bne.n	8009f62 <TIM_Base_SetConfig+0x52>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4a2f      	ldr	r2, [pc, #188]	; (800a024 <TIM_Base_SetConfig+0x114>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d02b      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f70:	d027      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a2c      	ldr	r2, [pc, #176]	; (800a028 <TIM_Base_SetConfig+0x118>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d023      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a2b      	ldr	r2, [pc, #172]	; (800a02c <TIM_Base_SetConfig+0x11c>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d01f      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a2a      	ldr	r2, [pc, #168]	; (800a030 <TIM_Base_SetConfig+0x120>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d01b      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a29      	ldr	r2, [pc, #164]	; (800a034 <TIM_Base_SetConfig+0x124>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d017      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a28      	ldr	r2, [pc, #160]	; (800a038 <TIM_Base_SetConfig+0x128>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d013      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a27      	ldr	r2, [pc, #156]	; (800a03c <TIM_Base_SetConfig+0x12c>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00f      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a26      	ldr	r2, [pc, #152]	; (800a040 <TIM_Base_SetConfig+0x130>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00b      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a25      	ldr	r2, [pc, #148]	; (800a044 <TIM_Base_SetConfig+0x134>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d007      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a24      	ldr	r2, [pc, #144]	; (800a048 <TIM_Base_SetConfig+0x138>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d003      	beq.n	8009fc2 <TIM_Base_SetConfig+0xb2>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a23      	ldr	r2, [pc, #140]	; (800a04c <TIM_Base_SetConfig+0x13c>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d108      	bne.n	8009fd4 <TIM_Base_SetConfig+0xc4>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60fb      	str	r3, [r7, #12]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a0a      	ldr	r2, [pc, #40]	; (800a024 <TIM_Base_SetConfig+0x114>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d003      	beq.n	800a008 <TIM_Base_SetConfig+0xf8>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a0c      	ldr	r2, [pc, #48]	; (800a034 <TIM_Base_SetConfig+0x124>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d103      	bne.n	800a010 <TIM_Base_SetConfig+0x100>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	691a      	ldr	r2, [r3, #16]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	631a      	str	r2, [r3, #48]	; 0x30
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	615a      	str	r2, [r3, #20]
 800a016:	bf00      	nop
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	40010000 	.word	0x40010000
 800a028:	40000400 	.word	0x40000400
 800a02c:	40000800 	.word	0x40000800
 800a030:	40000c00 	.word	0x40000c00
 800a034:	40010400 	.word	0x40010400
 800a038:	40014000 	.word	0x40014000
 800a03c:	40014400 	.word	0x40014400
 800a040:	40014800 	.word	0x40014800
 800a044:	40001800 	.word	0x40001800
 800a048:	40001c00 	.word	0x40001c00
 800a04c:	40002000 	.word	0x40002000

0800a050 <TIM_OC1_SetConfig>:
 800a050:	b480      	push	{r7}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	f023 0201 	bic.w	r2, r3, #1
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	621a      	str	r2, [r3, #32]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a1b      	ldr	r3, [r3, #32]
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	613b      	str	r3, [r7, #16]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	60fb      	str	r3, [r7, #12]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07e:	60fb      	str	r3, [r7, #12]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0303 	bic.w	r3, r3, #3
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	4313      	orrs	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	f023 0302 	bic.w	r3, r3, #2
 800a098:	617b      	str	r3, [r7, #20]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a20      	ldr	r2, [pc, #128]	; (800a128 <TIM_OC1_SetConfig+0xd8>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d003      	beq.n	800a0b4 <TIM_OC1_SetConfig+0x64>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a1f      	ldr	r2, [pc, #124]	; (800a12c <TIM_OC1_SetConfig+0xdc>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d10c      	bne.n	800a0ce <TIM_OC1_SetConfig+0x7e>
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f023 0308 	bic.w	r3, r3, #8
 800a0ba:	617b      	str	r3, [r7, #20]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	617b      	str	r3, [r7, #20]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	f023 0304 	bic.w	r3, r3, #4
 800a0cc:	617b      	str	r3, [r7, #20]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a15      	ldr	r2, [pc, #84]	; (800a128 <TIM_OC1_SetConfig+0xd8>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d003      	beq.n	800a0de <TIM_OC1_SetConfig+0x8e>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a14      	ldr	r2, [pc, #80]	; (800a12c <TIM_OC1_SetConfig+0xdc>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d111      	bne.n	800a102 <TIM_OC1_SetConfig+0xb2>
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e4:	613b      	str	r3, [r7, #16]
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0ec:	613b      	str	r3, [r7, #16]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	613b      	str	r3, [r7, #16]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	693a      	ldr	r2, [r7, #16]
 800a106:	605a      	str	r2, [r3, #4]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	619a      	str	r2, [r3, #24]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	635a      	str	r2, [r3, #52]	; 0x34
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	621a      	str	r2, [r3, #32]
 800a11c:	bf00      	nop
 800a11e:	371c      	adds	r7, #28
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr
 800a128:	40010000 	.word	0x40010000
 800a12c:	40010400 	.word	0x40010400

0800a130 <TIM_OC2_SetConfig>:
 800a130:	b480      	push	{r7}
 800a132:	b087      	sub	sp, #28
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a1b      	ldr	r3, [r3, #32]
 800a13e:	f023 0210 	bic.w	r2, r3, #16
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	621a      	str	r2, [r3, #32]
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	613b      	str	r3, [r7, #16]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	021b      	lsls	r3, r3, #8
 800a16e:	68fa      	ldr	r2, [r7, #12]
 800a170:	4313      	orrs	r3, r2
 800a172:	60fb      	str	r3, [r7, #12]
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	f023 0320 	bic.w	r3, r3, #32
 800a17a:	617b      	str	r3, [r7, #20]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	011b      	lsls	r3, r3, #4
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	4313      	orrs	r3, r2
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a22      	ldr	r2, [pc, #136]	; (800a214 <TIM_OC2_SetConfig+0xe4>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d003      	beq.n	800a198 <TIM_OC2_SetConfig+0x68>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a21      	ldr	r2, [pc, #132]	; (800a218 <TIM_OC2_SetConfig+0xe8>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d10d      	bne.n	800a1b4 <TIM_OC2_SetConfig+0x84>
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a19e:	617b      	str	r3, [r7, #20]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	011b      	lsls	r3, r3, #4
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1b2:	617b      	str	r3, [r7, #20]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a17      	ldr	r2, [pc, #92]	; (800a214 <TIM_OC2_SetConfig+0xe4>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d003      	beq.n	800a1c4 <TIM_OC2_SetConfig+0x94>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a16      	ldr	r2, [pc, #88]	; (800a218 <TIM_OC2_SetConfig+0xe8>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d113      	bne.n	800a1ec <TIM_OC2_SetConfig+0xbc>
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ca:	613b      	str	r3, [r7, #16]
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1d2:	613b      	str	r3, [r7, #16]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	613b      	str	r3, [r7, #16]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	613b      	str	r3, [r7, #16]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	605a      	str	r2, [r3, #4]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	619a      	str	r2, [r3, #24]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	639a      	str	r2, [r3, #56]	; 0x38
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	621a      	str	r2, [r3, #32]
 800a206:	bf00      	nop
 800a208:	371c      	adds	r7, #28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	40010000 	.word	0x40010000
 800a218:	40010400 	.word	0x40010400

0800a21c <TIM_OC3_SetConfig>:
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	621a      	str	r2, [r3, #32]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	613b      	str	r3, [r7, #16]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a24a:	60fb      	str	r3, [r7, #12]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0303 	bic.w	r3, r3, #3
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	60fb      	str	r3, [r7, #12]
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	021b      	lsls	r3, r3, #8
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	4313      	orrs	r3, r2
 800a270:	617b      	str	r3, [r7, #20]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a21      	ldr	r2, [pc, #132]	; (800a2fc <TIM_OC3_SetConfig+0xe0>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d003      	beq.n	800a282 <TIM_OC3_SetConfig+0x66>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a20      	ldr	r2, [pc, #128]	; (800a300 <TIM_OC3_SetConfig+0xe4>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d10d      	bne.n	800a29e <TIM_OC3_SetConfig+0x82>
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	021b      	lsls	r3, r3, #8
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	4313      	orrs	r3, r2
 800a294:	617b      	str	r3, [r7, #20]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a29c:	617b      	str	r3, [r7, #20]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a16      	ldr	r2, [pc, #88]	; (800a2fc <TIM_OC3_SetConfig+0xe0>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d003      	beq.n	800a2ae <TIM_OC3_SetConfig+0x92>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a15      	ldr	r2, [pc, #84]	; (800a300 <TIM_OC3_SetConfig+0xe4>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d113      	bne.n	800a2d6 <TIM_OC3_SetConfig+0xba>
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2b4:	613b      	str	r3, [r7, #16]
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2bc:	613b      	str	r3, [r7, #16]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	011b      	lsls	r3, r3, #4
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	613b      	str	r3, [r7, #16]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	011b      	lsls	r3, r3, #4
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	613b      	str	r3, [r7, #16]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	605a      	str	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	61da      	str	r2, [r3, #28]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	685a      	ldr	r2, [r3, #4]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	63da      	str	r2, [r3, #60]	; 0x3c
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	621a      	str	r2, [r3, #32]
 800a2f0:	bf00      	nop
 800a2f2:	371c      	adds	r7, #28
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr
 800a2fc:	40010000 	.word	0x40010000
 800a300:	40010400 	.word	0x40010400

0800a304 <TIM_OC4_SetConfig>:
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	621a      	str	r2, [r3, #32]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	613b      	str	r3, [r7, #16]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	617b      	str	r3, [r7, #20]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a332:	60fb      	str	r3, [r7, #12]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a33a:	60fb      	str	r3, [r7, #12]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	021b      	lsls	r3, r3, #8
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4313      	orrs	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a34e:	613b      	str	r3, [r7, #16]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	031b      	lsls	r3, r3, #12
 800a356:	693a      	ldr	r2, [r7, #16]
 800a358:	4313      	orrs	r3, r2
 800a35a:	613b      	str	r3, [r7, #16]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a12      	ldr	r2, [pc, #72]	; (800a3a8 <TIM_OC4_SetConfig+0xa4>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d003      	beq.n	800a36c <TIM_OC4_SetConfig+0x68>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a11      	ldr	r2, [pc, #68]	; (800a3ac <TIM_OC4_SetConfig+0xa8>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d109      	bne.n	800a380 <TIM_OC4_SetConfig+0x7c>
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	019b      	lsls	r3, r3, #6
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	605a      	str	r2, [r3, #4]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	61da      	str	r2, [r3, #28]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	641a      	str	r2, [r3, #64]	; 0x40
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	621a      	str	r2, [r3, #32]
 800a39a:	bf00      	nop
 800a39c:	371c      	adds	r7, #28
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	40010000 	.word	0x40010000
 800a3ac:	40010400 	.word	0x40010400

0800a3b0 <TIM_CCxChannelCmd>:
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	f003 031f 	and.w	r3, r3, #31
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a1a      	ldr	r2, [r3, #32]
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	43db      	mvns	r3, r3
 800a3d2:	401a      	ands	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	621a      	str	r2, [r3, #32]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6a1a      	ldr	r2, [r3, #32]
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	f003 031f 	and.w	r3, r3, #31
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e8:	431a      	orrs	r2, r3
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	621a      	str	r2, [r3, #32]
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
	...

0800a3fc <HAL_TIMEx_MasterConfigSynchronization>:
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d101      	bne.n	800a414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a410:	2302      	movs	r3, #2
 800a412:	e05a      	b.n	800a4ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2202      	movs	r2, #2
 800a420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	60bb      	str	r3, [r7, #8]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	4313      	orrs	r3, r2
 800a444:	60fb      	str	r3, [r7, #12]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	605a      	str	r2, [r3, #4]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a21      	ldr	r2, [pc, #132]	; (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d022      	beq.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a460:	d01d      	beq.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a1d      	ldr	r2, [pc, #116]	; (800a4dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d018      	beq.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a1b      	ldr	r2, [pc, #108]	; (800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d013      	beq.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4a1a      	ldr	r2, [pc, #104]	; (800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d00e      	beq.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a18      	ldr	r2, [pc, #96]	; (800a4e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d009      	beq.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a17      	ldr	r2, [pc, #92]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d004      	beq.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	4a15      	ldr	r2, [pc, #84]	; (800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d10c      	bne.n	800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4a4:	60bb      	str	r3, [r7, #8]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	60bb      	str	r3, [r7, #8]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	609a      	str	r2, [r3, #8]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	40010000 	.word	0x40010000
 800a4dc:	40000400 	.word	0x40000400
 800a4e0:	40000800 	.word	0x40000800
 800a4e4:	40000c00 	.word	0x40000c00
 800a4e8:	40010400 	.word	0x40010400
 800a4ec:	40014000 	.word	0x40014000
 800a4f0:	40001800 	.word	0x40001800

0800a4f4 <HAL_TIMEx_CommutCallback>:
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_TIMEx_BreakCallback>:
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_UART_Init>:
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <HAL_UART_Init+0x12>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e03f      	b.n	800a5ae <HAL_UART_Init+0x92>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d106      	bne.n	800a548 <HAL_UART_Init+0x2c>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7fa fade 	bl	8004b04 <HAL_UART_MspInit>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2224      	movs	r2, #36	; 0x24
 800a54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a55e:	60da      	str	r2, [r3, #12]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f929 	bl	800a7b8 <UART_SetConfig>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	691a      	ldr	r2, [r3, #16]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a574:	611a      	str	r2, [r3, #16]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	695a      	ldr	r2, [r3, #20]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a584:	615a      	str	r2, [r3, #20]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68da      	ldr	r2, [r3, #12]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a594:	60da      	str	r2, [r3, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	641a      	str	r2, [r3, #64]	; 0x40
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <HAL_UART_Transmit>:
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b08a      	sub	sp, #40	; 0x28
 800a5ba:	af02      	add	r7, sp, #8
 800a5bc:	60f8      	str	r0, [r7, #12]
 800a5be:	60b9      	str	r1, [r7, #8]
 800a5c0:	603b      	str	r3, [r7, #0]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	80fb      	strh	r3, [r7, #6]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	617b      	str	r3, [r7, #20]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	d17c      	bne.n	800a6d0 <HAL_UART_Transmit+0x11a>
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <HAL_UART_Transmit+0x2c>
 800a5dc:	88fb      	ldrh	r3, [r7, #6]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <HAL_UART_Transmit+0x30>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e075      	b.n	800a6d2 <HAL_UART_Transmit+0x11c>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d101      	bne.n	800a5f4 <HAL_UART_Transmit+0x3e>
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	e06e      	b.n	800a6d2 <HAL_UART_Transmit+0x11c>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	641a      	str	r2, [r3, #64]	; 0x40
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2221      	movs	r2, #33	; 0x21
 800a606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a60a:	f7fb fccb 	bl	8005fa4 <HAL_GetTick>
 800a60e:	6178      	str	r0, [r7, #20]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	88fa      	ldrh	r2, [r7, #6]
 800a614:	849a      	strh	r2, [r3, #36]	; 0x24
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	88fa      	ldrh	r2, [r7, #6]
 800a61a:	84da      	strh	r2, [r3, #38]	; 0x26
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a624:	d108      	bne.n	800a638 <HAL_UART_Transmit+0x82>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d104      	bne.n	800a638 <HAL_UART_Transmit+0x82>
 800a62e:	2300      	movs	r3, #0
 800a630:	61fb      	str	r3, [r7, #28]
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	61bb      	str	r3, [r7, #24]
 800a636:	e003      	b.n	800a640 <HAL_UART_Transmit+0x8a>
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	61fb      	str	r3, [r7, #28]
 800a63c:	2300      	movs	r3, #0
 800a63e:	61bb      	str	r3, [r7, #24]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a648:	e02a      	b.n	800a6a0 <HAL_UART_Transmit+0xea>
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2200      	movs	r2, #0
 800a652:	2180      	movs	r1, #128	; 0x80
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f000 f840 	bl	800a6da <UART_WaitOnFlagUntilTimeout>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <HAL_UART_Transmit+0xae>
 800a660:	2303      	movs	r3, #3
 800a662:	e036      	b.n	800a6d2 <HAL_UART_Transmit+0x11c>
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d10b      	bne.n	800a682 <HAL_UART_Transmit+0xcc>
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a678:	605a      	str	r2, [r3, #4]
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	3302      	adds	r3, #2
 800a67e:	61bb      	str	r3, [r7, #24]
 800a680:	e007      	b.n	800a692 <HAL_UART_Transmit+0xdc>
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	781a      	ldrb	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	605a      	str	r2, [r3, #4]
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	3301      	adds	r3, #1
 800a690:	61fb      	str	r3, [r7, #28]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a696:	b29b      	uxth	r3, r3
 800a698:	3b01      	subs	r3, #1
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	84da      	strh	r2, [r3, #38]	; 0x26
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1cf      	bne.n	800a64a <HAL_UART_Transmit+0x94>
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2140      	movs	r1, #64	; 0x40
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 f810 	bl	800a6da <UART_WaitOnFlagUntilTimeout>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d001      	beq.n	800a6c4 <HAL_UART_Transmit+0x10e>
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e006      	b.n	800a6d2 <HAL_UART_Transmit+0x11c>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	e000      	b.n	800a6d2 <HAL_UART_Transmit+0x11c>
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3720      	adds	r7, #32
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <UART_WaitOnFlagUntilTimeout>:
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b090      	sub	sp, #64	; 0x40
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	60f8      	str	r0, [r7, #12]
 800a6e2:	60b9      	str	r1, [r7, #8]
 800a6e4:	603b      	str	r3, [r7, #0]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	71fb      	strb	r3, [r7, #7]
 800a6ea:	e050      	b.n	800a78e <UART_WaitOnFlagUntilTimeout+0xb4>
 800a6ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f2:	d04c      	beq.n	800a78e <UART_WaitOnFlagUntilTimeout+0xb4>
 800a6f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d007      	beq.n	800a70a <UART_WaitOnFlagUntilTimeout+0x30>
 800a6fa:	f7fb fc53 	bl	8005fa4 <HAL_GetTick>
 800a6fe:	4602      	mov	r2, r0
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	1ad3      	subs	r3, r2, r3
 800a704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a706:	429a      	cmp	r2, r3
 800a708:	d241      	bcs.n	800a78e <UART_WaitOnFlagUntilTimeout+0xb4>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	330c      	adds	r3, #12
 800a710:	62bb      	str	r3, [r7, #40]	; 0x28
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	627b      	str	r3, [r7, #36]	; 0x24
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	330c      	adds	r3, #12
 800a728:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a72a:	637a      	str	r2, [r7, #52]	; 0x34
 800a72c:	633b      	str	r3, [r7, #48]	; 0x30
 800a72e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a732:	e841 2300 	strex	r3, r2, [r1]
 800a736:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1e5      	bne.n	800a70a <UART_WaitOnFlagUntilTimeout+0x30>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3314      	adds	r3, #20
 800a744:	617b      	str	r3, [r7, #20]
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	e853 3f00 	ldrex	r3, [r3]
 800a74c:	613b      	str	r3, [r7, #16]
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f023 0301 	bic.w	r3, r3, #1
 800a754:	63bb      	str	r3, [r7, #56]	; 0x38
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	3314      	adds	r3, #20
 800a75c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a75e:	623a      	str	r2, [r7, #32]
 800a760:	61fb      	str	r3, [r7, #28]
 800a762:	69f9      	ldr	r1, [r7, #28]
 800a764:	6a3a      	ldr	r2, [r7, #32]
 800a766:	e841 2300 	strex	r3, r2, [r1]
 800a76a:	61bb      	str	r3, [r7, #24]
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1e5      	bne.n	800a73e <UART_WaitOnFlagUntilTimeout+0x64>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2220      	movs	r2, #32
 800a776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2220      	movs	r2, #32
 800a77e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a78a:	2303      	movs	r3, #3
 800a78c:	e00f      	b.n	800a7ae <UART_WaitOnFlagUntilTimeout+0xd4>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	4013      	ands	r3, r2
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	bf0c      	ite	eq
 800a79e:	2301      	moveq	r3, #1
 800a7a0:	2300      	movne	r3, #0
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	79fb      	ldrb	r3, [r7, #7]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d09f      	beq.n	800a6ec <UART_WaitOnFlagUntilTimeout+0x12>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3740      	adds	r7, #64	; 0x40
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
	...

0800a7b8 <UART_SetConfig>:
 800a7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7bc:	b09f      	sub	sp, #124	; 0x7c
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	66f8      	str	r0, [r7, #108]	; 0x6c
 800a7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a7cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ce:	68d9      	ldr	r1, [r3, #12]
 800a7d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	ea40 0301 	orr.w	r3, r0, r1
 800a7d8:	6113      	str	r3, [r2, #16]
 800a7da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7dc:	689a      	ldr	r2, [r3, #8]
 800a7de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7e6:	695b      	ldr	r3, [r3, #20]
 800a7e8:	431a      	orrs	r2, r3
 800a7ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	673b      	str	r3, [r7, #112]	; 0x70
 800a7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a7fc:	f021 010c 	bic.w	r1, r1, #12
 800a800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a806:	430b      	orrs	r3, r1
 800a808:	60d3      	str	r3, [r2, #12]
 800a80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a816:	6999      	ldr	r1, [r3, #24]
 800a818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	ea40 0301 	orr.w	r3, r0, r1
 800a820:	6153      	str	r3, [r2, #20]
 800a822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	4bc5      	ldr	r3, [pc, #788]	; (800ab3c <UART_SetConfig+0x384>)
 800a828:	429a      	cmp	r2, r3
 800a82a:	d004      	beq.n	800a836 <UART_SetConfig+0x7e>
 800a82c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	4bc3      	ldr	r3, [pc, #780]	; (800ab40 <UART_SetConfig+0x388>)
 800a832:	429a      	cmp	r2, r3
 800a834:	d103      	bne.n	800a83e <UART_SetConfig+0x86>
 800a836:	f7fd ff7b 	bl	8008730 <HAL_RCC_GetPCLK2Freq>
 800a83a:	6778      	str	r0, [r7, #116]	; 0x74
 800a83c:	e002      	b.n	800a844 <UART_SetConfig+0x8c>
 800a83e:	f7fd ff63 	bl	8008708 <HAL_RCC_GetPCLK1Freq>
 800a842:	6778      	str	r0, [r7, #116]	; 0x74
 800a844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a84c:	f040 80b6 	bne.w	800a9bc <UART_SetConfig+0x204>
 800a850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a852:	461c      	mov	r4, r3
 800a854:	f04f 0500 	mov.w	r5, #0
 800a858:	4622      	mov	r2, r4
 800a85a:	462b      	mov	r3, r5
 800a85c:	1891      	adds	r1, r2, r2
 800a85e:	6439      	str	r1, [r7, #64]	; 0x40
 800a860:	415b      	adcs	r3, r3
 800a862:	647b      	str	r3, [r7, #68]	; 0x44
 800a864:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a868:	1912      	adds	r2, r2, r4
 800a86a:	eb45 0303 	adc.w	r3, r5, r3
 800a86e:	f04f 0000 	mov.w	r0, #0
 800a872:	f04f 0100 	mov.w	r1, #0
 800a876:	00d9      	lsls	r1, r3, #3
 800a878:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a87c:	00d0      	lsls	r0, r2, #3
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	1911      	adds	r1, r2, r4
 800a884:	6639      	str	r1, [r7, #96]	; 0x60
 800a886:	416b      	adcs	r3, r5
 800a888:	667b      	str	r3, [r7, #100]	; 0x64
 800a88a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	461a      	mov	r2, r3
 800a890:	f04f 0300 	mov.w	r3, #0
 800a894:	1891      	adds	r1, r2, r2
 800a896:	63b9      	str	r1, [r7, #56]	; 0x38
 800a898:	415b      	adcs	r3, r3
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a89c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a8a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a8a4:	f7f6 f9f0 	bl	8000c88 <__aeabi_uldivmod>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4ba5      	ldr	r3, [pc, #660]	; (800ab44 <UART_SetConfig+0x38c>)
 800a8ae:	fba3 2302 	umull	r2, r3, r3, r2
 800a8b2:	095b      	lsrs	r3, r3, #5
 800a8b4:	011e      	lsls	r6, r3, #4
 800a8b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8b8:	461c      	mov	r4, r3
 800a8ba:	f04f 0500 	mov.w	r5, #0
 800a8be:	4622      	mov	r2, r4
 800a8c0:	462b      	mov	r3, r5
 800a8c2:	1891      	adds	r1, r2, r2
 800a8c4:	6339      	str	r1, [r7, #48]	; 0x30
 800a8c6:	415b      	adcs	r3, r3
 800a8c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a8ce:	1912      	adds	r2, r2, r4
 800a8d0:	eb45 0303 	adc.w	r3, r5, r3
 800a8d4:	f04f 0000 	mov.w	r0, #0
 800a8d8:	f04f 0100 	mov.w	r1, #0
 800a8dc:	00d9      	lsls	r1, r3, #3
 800a8de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a8e2:	00d0      	lsls	r0, r2, #3
 800a8e4:	4602      	mov	r2, r0
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	1911      	adds	r1, r2, r4
 800a8ea:	65b9      	str	r1, [r7, #88]	; 0x58
 800a8ec:	416b      	adcs	r3, r5
 800a8ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a8f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f04f 0300 	mov.w	r3, #0
 800a8fa:	1891      	adds	r1, r2, r2
 800a8fc:	62b9      	str	r1, [r7, #40]	; 0x28
 800a8fe:	415b      	adcs	r3, r3
 800a900:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a906:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a90a:	f7f6 f9bd 	bl	8000c88 <__aeabi_uldivmod>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	4b8c      	ldr	r3, [pc, #560]	; (800ab44 <UART_SetConfig+0x38c>)
 800a914:	fba3 1302 	umull	r1, r3, r3, r2
 800a918:	095b      	lsrs	r3, r3, #5
 800a91a:	2164      	movs	r1, #100	; 0x64
 800a91c:	fb01 f303 	mul.w	r3, r1, r3
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	00db      	lsls	r3, r3, #3
 800a924:	3332      	adds	r3, #50	; 0x32
 800a926:	4a87      	ldr	r2, [pc, #540]	; (800ab44 <UART_SetConfig+0x38c>)
 800a928:	fba2 2303 	umull	r2, r3, r2, r3
 800a92c:	095b      	lsrs	r3, r3, #5
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a934:	441e      	add	r6, r3
 800a936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a938:	4618      	mov	r0, r3
 800a93a:	f04f 0100 	mov.w	r1, #0
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	1894      	adds	r4, r2, r2
 800a944:	623c      	str	r4, [r7, #32]
 800a946:	415b      	adcs	r3, r3
 800a948:	627b      	str	r3, [r7, #36]	; 0x24
 800a94a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a94e:	1812      	adds	r2, r2, r0
 800a950:	eb41 0303 	adc.w	r3, r1, r3
 800a954:	f04f 0400 	mov.w	r4, #0
 800a958:	f04f 0500 	mov.w	r5, #0
 800a95c:	00dd      	lsls	r5, r3, #3
 800a95e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a962:	00d4      	lsls	r4, r2, #3
 800a964:	4622      	mov	r2, r4
 800a966:	462b      	mov	r3, r5
 800a968:	1814      	adds	r4, r2, r0
 800a96a:	653c      	str	r4, [r7, #80]	; 0x50
 800a96c:	414b      	adcs	r3, r1
 800a96e:	657b      	str	r3, [r7, #84]	; 0x54
 800a970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	461a      	mov	r2, r3
 800a976:	f04f 0300 	mov.w	r3, #0
 800a97a:	1891      	adds	r1, r2, r2
 800a97c:	61b9      	str	r1, [r7, #24]
 800a97e:	415b      	adcs	r3, r3
 800a980:	61fb      	str	r3, [r7, #28]
 800a982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a986:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a98a:	f7f6 f97d 	bl	8000c88 <__aeabi_uldivmod>
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
 800a992:	4b6c      	ldr	r3, [pc, #432]	; (800ab44 <UART_SetConfig+0x38c>)
 800a994:	fba3 1302 	umull	r1, r3, r3, r2
 800a998:	095b      	lsrs	r3, r3, #5
 800a99a:	2164      	movs	r1, #100	; 0x64
 800a99c:	fb01 f303 	mul.w	r3, r1, r3
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	3332      	adds	r3, #50	; 0x32
 800a9a6:	4a67      	ldr	r2, [pc, #412]	; (800ab44 <UART_SetConfig+0x38c>)
 800a9a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ac:	095b      	lsrs	r3, r3, #5
 800a9ae:	f003 0207 	and.w	r2, r3, #7
 800a9b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4432      	add	r2, r6
 800a9b8:	609a      	str	r2, [r3, #8]
 800a9ba:	e0b9      	b.n	800ab30 <UART_SetConfig+0x378>
 800a9bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9be:	461c      	mov	r4, r3
 800a9c0:	f04f 0500 	mov.w	r5, #0
 800a9c4:	4622      	mov	r2, r4
 800a9c6:	462b      	mov	r3, r5
 800a9c8:	1891      	adds	r1, r2, r2
 800a9ca:	6139      	str	r1, [r7, #16]
 800a9cc:	415b      	adcs	r3, r3
 800a9ce:	617b      	str	r3, [r7, #20]
 800a9d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a9d4:	1912      	adds	r2, r2, r4
 800a9d6:	eb45 0303 	adc.w	r3, r5, r3
 800a9da:	f04f 0000 	mov.w	r0, #0
 800a9de:	f04f 0100 	mov.w	r1, #0
 800a9e2:	00d9      	lsls	r1, r3, #3
 800a9e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a9e8:	00d0      	lsls	r0, r2, #3
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	eb12 0804 	adds.w	r8, r2, r4
 800a9f2:	eb43 0905 	adc.w	r9, r3, r5
 800a9f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f04f 0100 	mov.w	r1, #0
 800aa00:	f04f 0200 	mov.w	r2, #0
 800aa04:	f04f 0300 	mov.w	r3, #0
 800aa08:	008b      	lsls	r3, r1, #2
 800aa0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa0e:	0082      	lsls	r2, r0, #2
 800aa10:	4640      	mov	r0, r8
 800aa12:	4649      	mov	r1, r9
 800aa14:	f7f6 f938 	bl	8000c88 <__aeabi_uldivmod>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	4b49      	ldr	r3, [pc, #292]	; (800ab44 <UART_SetConfig+0x38c>)
 800aa1e:	fba3 2302 	umull	r2, r3, r3, r2
 800aa22:	095b      	lsrs	r3, r3, #5
 800aa24:	011e      	lsls	r6, r3, #4
 800aa26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f04f 0100 	mov.w	r1, #0
 800aa2e:	4602      	mov	r2, r0
 800aa30:	460b      	mov	r3, r1
 800aa32:	1894      	adds	r4, r2, r2
 800aa34:	60bc      	str	r4, [r7, #8]
 800aa36:	415b      	adcs	r3, r3
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa3e:	1812      	adds	r2, r2, r0
 800aa40:	eb41 0303 	adc.w	r3, r1, r3
 800aa44:	f04f 0400 	mov.w	r4, #0
 800aa48:	f04f 0500 	mov.w	r5, #0
 800aa4c:	00dd      	lsls	r5, r3, #3
 800aa4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aa52:	00d4      	lsls	r4, r2, #3
 800aa54:	4622      	mov	r2, r4
 800aa56:	462b      	mov	r3, r5
 800aa58:	1814      	adds	r4, r2, r0
 800aa5a:	64bc      	str	r4, [r7, #72]	; 0x48
 800aa5c:	414b      	adcs	r3, r1
 800aa5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f04f 0100 	mov.w	r1, #0
 800aa6a:	f04f 0200 	mov.w	r2, #0
 800aa6e:	f04f 0300 	mov.w	r3, #0
 800aa72:	008b      	lsls	r3, r1, #2
 800aa74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aa78:	0082      	lsls	r2, r0, #2
 800aa7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800aa7e:	f7f6 f903 	bl	8000c88 <__aeabi_uldivmod>
 800aa82:	4602      	mov	r2, r0
 800aa84:	460b      	mov	r3, r1
 800aa86:	4b2f      	ldr	r3, [pc, #188]	; (800ab44 <UART_SetConfig+0x38c>)
 800aa88:	fba3 1302 	umull	r1, r3, r3, r2
 800aa8c:	095b      	lsrs	r3, r3, #5
 800aa8e:	2164      	movs	r1, #100	; 0x64
 800aa90:	fb01 f303 	mul.w	r3, r1, r3
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	3332      	adds	r3, #50	; 0x32
 800aa9a:	4a2a      	ldr	r2, [pc, #168]	; (800ab44 <UART_SetConfig+0x38c>)
 800aa9c:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa0:	095b      	lsrs	r3, r3, #5
 800aaa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaa6:	441e      	add	r6, r3
 800aaa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f04f 0100 	mov.w	r1, #0
 800aab0:	4602      	mov	r2, r0
 800aab2:	460b      	mov	r3, r1
 800aab4:	1894      	adds	r4, r2, r2
 800aab6:	603c      	str	r4, [r7, #0]
 800aab8:	415b      	adcs	r3, r3
 800aaba:	607b      	str	r3, [r7, #4]
 800aabc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac0:	1812      	adds	r2, r2, r0
 800aac2:	eb41 0303 	adc.w	r3, r1, r3
 800aac6:	f04f 0400 	mov.w	r4, #0
 800aaca:	f04f 0500 	mov.w	r5, #0
 800aace:	00dd      	lsls	r5, r3, #3
 800aad0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aad4:	00d4      	lsls	r4, r2, #3
 800aad6:	4622      	mov	r2, r4
 800aad8:	462b      	mov	r3, r5
 800aada:	eb12 0a00 	adds.w	sl, r2, r0
 800aade:	eb43 0b01 	adc.w	fp, r3, r1
 800aae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f04f 0100 	mov.w	r1, #0
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	f04f 0300 	mov.w	r3, #0
 800aaf4:	008b      	lsls	r3, r1, #2
 800aaf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aafa:	0082      	lsls	r2, r0, #2
 800aafc:	4650      	mov	r0, sl
 800aafe:	4659      	mov	r1, fp
 800ab00:	f7f6 f8c2 	bl	8000c88 <__aeabi_uldivmod>
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4b0e      	ldr	r3, [pc, #56]	; (800ab44 <UART_SetConfig+0x38c>)
 800ab0a:	fba3 1302 	umull	r1, r3, r3, r2
 800ab0e:	095b      	lsrs	r3, r3, #5
 800ab10:	2164      	movs	r1, #100	; 0x64
 800ab12:	fb01 f303 	mul.w	r3, r1, r3
 800ab16:	1ad3      	subs	r3, r2, r3
 800ab18:	011b      	lsls	r3, r3, #4
 800ab1a:	3332      	adds	r3, #50	; 0x32
 800ab1c:	4a09      	ldr	r2, [pc, #36]	; (800ab44 <UART_SetConfig+0x38c>)
 800ab1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab22:	095b      	lsrs	r3, r3, #5
 800ab24:	f003 020f 	and.w	r2, r3, #15
 800ab28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4432      	add	r2, r6
 800ab2e:	609a      	str	r2, [r3, #8]
 800ab30:	bf00      	nop
 800ab32:	377c      	adds	r7, #124	; 0x7c
 800ab34:	46bd      	mov	sp, r7
 800ab36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab3a:	bf00      	nop
 800ab3c:	40011000 	.word	0x40011000
 800ab40:	40011400 	.word	0x40011400
 800ab44:	51eb851f 	.word	0x51eb851f

0800ab48 <__errno>:
 800ab48:	4b01      	ldr	r3, [pc, #4]	; (800ab50 <__errno+0x8>)
 800ab4a:	6818      	ldr	r0, [r3, #0]
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	2000000c 	.word	0x2000000c

0800ab54 <__libc_init_array>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	4e0d      	ldr	r6, [pc, #52]	; (800ab8c <__libc_init_array+0x38>)
 800ab58:	4c0d      	ldr	r4, [pc, #52]	; (800ab90 <__libc_init_array+0x3c>)
 800ab5a:	1ba4      	subs	r4, r4, r6
 800ab5c:	10a4      	asrs	r4, r4, #2
 800ab5e:	2500      	movs	r5, #0
 800ab60:	42a5      	cmp	r5, r4
 800ab62:	d109      	bne.n	800ab78 <__libc_init_array+0x24>
 800ab64:	4e0b      	ldr	r6, [pc, #44]	; (800ab94 <__libc_init_array+0x40>)
 800ab66:	4c0c      	ldr	r4, [pc, #48]	; (800ab98 <__libc_init_array+0x44>)
 800ab68:	f005 fb10 	bl	801018c <_init>
 800ab6c:	1ba4      	subs	r4, r4, r6
 800ab6e:	10a4      	asrs	r4, r4, #2
 800ab70:	2500      	movs	r5, #0
 800ab72:	42a5      	cmp	r5, r4
 800ab74:	d105      	bne.n	800ab82 <__libc_init_array+0x2e>
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab7c:	4798      	blx	r3
 800ab7e:	3501      	adds	r5, #1
 800ab80:	e7ee      	b.n	800ab60 <__libc_init_array+0xc>
 800ab82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ab86:	4798      	blx	r3
 800ab88:	3501      	adds	r5, #1
 800ab8a:	e7f2      	b.n	800ab72 <__libc_init_array+0x1e>
 800ab8c:	080108c0 	.word	0x080108c0
 800ab90:	080108c0 	.word	0x080108c0
 800ab94:	080108c0 	.word	0x080108c0
 800ab98:	080108c4 	.word	0x080108c4

0800ab9c <memcpy>:
 800ab9c:	b510      	push	{r4, lr}
 800ab9e:	1e43      	subs	r3, r0, #1
 800aba0:	440a      	add	r2, r1
 800aba2:	4291      	cmp	r1, r2
 800aba4:	d100      	bne.n	800aba8 <memcpy+0xc>
 800aba6:	bd10      	pop	{r4, pc}
 800aba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abb0:	e7f7      	b.n	800aba2 <memcpy+0x6>

0800abb2 <memset>:
 800abb2:	4402      	add	r2, r0
 800abb4:	4603      	mov	r3, r0
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d100      	bne.n	800abbc <memset+0xa>
 800abba:	4770      	bx	lr
 800abbc:	f803 1b01 	strb.w	r1, [r3], #1
 800abc0:	e7f9      	b.n	800abb6 <memset+0x4>

0800abc2 <__cvt>:
 800abc2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc6:	ec55 4b10 	vmov	r4, r5, d0
 800abca:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800abcc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800abd0:	2d00      	cmp	r5, #0
 800abd2:	460e      	mov	r6, r1
 800abd4:	4691      	mov	r9, r2
 800abd6:	4619      	mov	r1, r3
 800abd8:	bfb8      	it	lt
 800abda:	4622      	movlt	r2, r4
 800abdc:	462b      	mov	r3, r5
 800abde:	f027 0720 	bic.w	r7, r7, #32
 800abe2:	bfbb      	ittet	lt
 800abe4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800abe8:	461d      	movlt	r5, r3
 800abea:	2300      	movge	r3, #0
 800abec:	232d      	movlt	r3, #45	; 0x2d
 800abee:	bfb8      	it	lt
 800abf0:	4614      	movlt	r4, r2
 800abf2:	2f46      	cmp	r7, #70	; 0x46
 800abf4:	700b      	strb	r3, [r1, #0]
 800abf6:	d004      	beq.n	800ac02 <__cvt+0x40>
 800abf8:	2f45      	cmp	r7, #69	; 0x45
 800abfa:	d100      	bne.n	800abfe <__cvt+0x3c>
 800abfc:	3601      	adds	r6, #1
 800abfe:	2102      	movs	r1, #2
 800ac00:	e000      	b.n	800ac04 <__cvt+0x42>
 800ac02:	2103      	movs	r1, #3
 800ac04:	ab03      	add	r3, sp, #12
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	ab02      	add	r3, sp, #8
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	4632      	mov	r2, r6
 800ac0e:	4653      	mov	r3, sl
 800ac10:	ec45 4b10 	vmov	d0, r4, r5
 800ac14:	f001 feb4 	bl	800c980 <_dtoa_r>
 800ac18:	2f47      	cmp	r7, #71	; 0x47
 800ac1a:	4680      	mov	r8, r0
 800ac1c:	d102      	bne.n	800ac24 <__cvt+0x62>
 800ac1e:	f019 0f01 	tst.w	r9, #1
 800ac22:	d026      	beq.n	800ac72 <__cvt+0xb0>
 800ac24:	2f46      	cmp	r7, #70	; 0x46
 800ac26:	eb08 0906 	add.w	r9, r8, r6
 800ac2a:	d111      	bne.n	800ac50 <__cvt+0x8e>
 800ac2c:	f898 3000 	ldrb.w	r3, [r8]
 800ac30:	2b30      	cmp	r3, #48	; 0x30
 800ac32:	d10a      	bne.n	800ac4a <__cvt+0x88>
 800ac34:	2200      	movs	r2, #0
 800ac36:	2300      	movs	r3, #0
 800ac38:	4620      	mov	r0, r4
 800ac3a:	4629      	mov	r1, r5
 800ac3c:	f7f5 ff44 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac40:	b918      	cbnz	r0, 800ac4a <__cvt+0x88>
 800ac42:	f1c6 0601 	rsb	r6, r6, #1
 800ac46:	f8ca 6000 	str.w	r6, [sl]
 800ac4a:	f8da 3000 	ldr.w	r3, [sl]
 800ac4e:	4499      	add	r9, r3
 800ac50:	2200      	movs	r2, #0
 800ac52:	2300      	movs	r3, #0
 800ac54:	4620      	mov	r0, r4
 800ac56:	4629      	mov	r1, r5
 800ac58:	f7f5 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac5c:	b938      	cbnz	r0, 800ac6e <__cvt+0xac>
 800ac5e:	2230      	movs	r2, #48	; 0x30
 800ac60:	9b03      	ldr	r3, [sp, #12]
 800ac62:	454b      	cmp	r3, r9
 800ac64:	d205      	bcs.n	800ac72 <__cvt+0xb0>
 800ac66:	1c59      	adds	r1, r3, #1
 800ac68:	9103      	str	r1, [sp, #12]
 800ac6a:	701a      	strb	r2, [r3, #0]
 800ac6c:	e7f8      	b.n	800ac60 <__cvt+0x9e>
 800ac6e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac72:	9b03      	ldr	r3, [sp, #12]
 800ac74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac76:	eba3 0308 	sub.w	r3, r3, r8
 800ac7a:	4640      	mov	r0, r8
 800ac7c:	6013      	str	r3, [r2, #0]
 800ac7e:	b004      	add	sp, #16
 800ac80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ac84 <__exponent>:
 800ac84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac86:	2900      	cmp	r1, #0
 800ac88:	4604      	mov	r4, r0
 800ac8a:	bfba      	itte	lt
 800ac8c:	4249      	neglt	r1, r1
 800ac8e:	232d      	movlt	r3, #45	; 0x2d
 800ac90:	232b      	movge	r3, #43	; 0x2b
 800ac92:	2909      	cmp	r1, #9
 800ac94:	f804 2b02 	strb.w	r2, [r4], #2
 800ac98:	7043      	strb	r3, [r0, #1]
 800ac9a:	dd20      	ble.n	800acde <__exponent+0x5a>
 800ac9c:	f10d 0307 	add.w	r3, sp, #7
 800aca0:	461f      	mov	r7, r3
 800aca2:	260a      	movs	r6, #10
 800aca4:	fb91 f5f6 	sdiv	r5, r1, r6
 800aca8:	fb06 1115 	mls	r1, r6, r5, r1
 800acac:	3130      	adds	r1, #48	; 0x30
 800acae:	2d09      	cmp	r5, #9
 800acb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800acb4:	f103 32ff 	add.w	r2, r3, #4294967295
 800acb8:	4629      	mov	r1, r5
 800acba:	dc09      	bgt.n	800acd0 <__exponent+0x4c>
 800acbc:	3130      	adds	r1, #48	; 0x30
 800acbe:	3b02      	subs	r3, #2
 800acc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800acc4:	42bb      	cmp	r3, r7
 800acc6:	4622      	mov	r2, r4
 800acc8:	d304      	bcc.n	800acd4 <__exponent+0x50>
 800acca:	1a10      	subs	r0, r2, r0
 800accc:	b003      	add	sp, #12
 800acce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd0:	4613      	mov	r3, r2
 800acd2:	e7e7      	b.n	800aca4 <__exponent+0x20>
 800acd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acd8:	f804 2b01 	strb.w	r2, [r4], #1
 800acdc:	e7f2      	b.n	800acc4 <__exponent+0x40>
 800acde:	2330      	movs	r3, #48	; 0x30
 800ace0:	4419      	add	r1, r3
 800ace2:	7083      	strb	r3, [r0, #2]
 800ace4:	1d02      	adds	r2, r0, #4
 800ace6:	70c1      	strb	r1, [r0, #3]
 800ace8:	e7ef      	b.n	800acca <__exponent+0x46>
	...

0800acec <_printf_float>:
 800acec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf0:	b08d      	sub	sp, #52	; 0x34
 800acf2:	460c      	mov	r4, r1
 800acf4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800acf8:	4616      	mov	r6, r2
 800acfa:	461f      	mov	r7, r3
 800acfc:	4605      	mov	r5, r0
 800acfe:	f003 f89d 	bl	800de3c <_localeconv_r>
 800ad02:	6803      	ldr	r3, [r0, #0]
 800ad04:	9304      	str	r3, [sp, #16]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f5 fa62 	bl	80001d0 <strlen>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad10:	f8d8 3000 	ldr.w	r3, [r8]
 800ad14:	9005      	str	r0, [sp, #20]
 800ad16:	3307      	adds	r3, #7
 800ad18:	f023 0307 	bic.w	r3, r3, #7
 800ad1c:	f103 0208 	add.w	r2, r3, #8
 800ad20:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad24:	f8d4 b000 	ldr.w	fp, [r4]
 800ad28:	f8c8 2000 	str.w	r2, [r8]
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ad34:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ad38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad3c:	9307      	str	r3, [sp, #28]
 800ad3e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad42:	f04f 32ff 	mov.w	r2, #4294967295
 800ad46:	4ba7      	ldr	r3, [pc, #668]	; (800afe4 <_printf_float+0x2f8>)
 800ad48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad4c:	f7f5 feee 	bl	8000b2c <__aeabi_dcmpun>
 800ad50:	bb70      	cbnz	r0, 800adb0 <_printf_float+0xc4>
 800ad52:	f04f 32ff 	mov.w	r2, #4294967295
 800ad56:	4ba3      	ldr	r3, [pc, #652]	; (800afe4 <_printf_float+0x2f8>)
 800ad58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad5c:	f7f5 fec8 	bl	8000af0 <__aeabi_dcmple>
 800ad60:	bb30      	cbnz	r0, 800adb0 <_printf_float+0xc4>
 800ad62:	2200      	movs	r2, #0
 800ad64:	2300      	movs	r3, #0
 800ad66:	4640      	mov	r0, r8
 800ad68:	4649      	mov	r1, r9
 800ad6a:	f7f5 feb7 	bl	8000adc <__aeabi_dcmplt>
 800ad6e:	b110      	cbz	r0, 800ad76 <_printf_float+0x8a>
 800ad70:	232d      	movs	r3, #45	; 0x2d
 800ad72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad76:	4a9c      	ldr	r2, [pc, #624]	; (800afe8 <_printf_float+0x2fc>)
 800ad78:	4b9c      	ldr	r3, [pc, #624]	; (800afec <_printf_float+0x300>)
 800ad7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ad7e:	bf8c      	ite	hi
 800ad80:	4690      	movhi	r8, r2
 800ad82:	4698      	movls	r8, r3
 800ad84:	2303      	movs	r3, #3
 800ad86:	f02b 0204 	bic.w	r2, fp, #4
 800ad8a:	6123      	str	r3, [r4, #16]
 800ad8c:	6022      	str	r2, [r4, #0]
 800ad8e:	f04f 0900 	mov.w	r9, #0
 800ad92:	9700      	str	r7, [sp, #0]
 800ad94:	4633      	mov	r3, r6
 800ad96:	aa0b      	add	r2, sp, #44	; 0x2c
 800ad98:	4621      	mov	r1, r4
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	f000 f9e6 	bl	800b16c <_printf_common>
 800ada0:	3001      	adds	r0, #1
 800ada2:	f040 808d 	bne.w	800aec0 <_printf_float+0x1d4>
 800ada6:	f04f 30ff 	mov.w	r0, #4294967295
 800adaa:	b00d      	add	sp, #52	; 0x34
 800adac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb0:	4642      	mov	r2, r8
 800adb2:	464b      	mov	r3, r9
 800adb4:	4640      	mov	r0, r8
 800adb6:	4649      	mov	r1, r9
 800adb8:	f7f5 feb8 	bl	8000b2c <__aeabi_dcmpun>
 800adbc:	b110      	cbz	r0, 800adc4 <_printf_float+0xd8>
 800adbe:	4a8c      	ldr	r2, [pc, #560]	; (800aff0 <_printf_float+0x304>)
 800adc0:	4b8c      	ldr	r3, [pc, #560]	; (800aff4 <_printf_float+0x308>)
 800adc2:	e7da      	b.n	800ad7a <_printf_float+0x8e>
 800adc4:	6861      	ldr	r1, [r4, #4]
 800adc6:	1c4b      	adds	r3, r1, #1
 800adc8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800adcc:	a80a      	add	r0, sp, #40	; 0x28
 800adce:	d13e      	bne.n	800ae4e <_printf_float+0x162>
 800add0:	2306      	movs	r3, #6
 800add2:	6063      	str	r3, [r4, #4]
 800add4:	2300      	movs	r3, #0
 800add6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800adda:	ab09      	add	r3, sp, #36	; 0x24
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	ec49 8b10 	vmov	d0, r8, r9
 800ade2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ade6:	6022      	str	r2, [r4, #0]
 800ade8:	f8cd a004 	str.w	sl, [sp, #4]
 800adec:	6861      	ldr	r1, [r4, #4]
 800adee:	4628      	mov	r0, r5
 800adf0:	f7ff fee7 	bl	800abc2 <__cvt>
 800adf4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800adf8:	2b47      	cmp	r3, #71	; 0x47
 800adfa:	4680      	mov	r8, r0
 800adfc:	d109      	bne.n	800ae12 <_printf_float+0x126>
 800adfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae00:	1cd8      	adds	r0, r3, #3
 800ae02:	db02      	blt.n	800ae0a <_printf_float+0x11e>
 800ae04:	6862      	ldr	r2, [r4, #4]
 800ae06:	4293      	cmp	r3, r2
 800ae08:	dd47      	ble.n	800ae9a <_printf_float+0x1ae>
 800ae0a:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae0e:	fa5f fa8a 	uxtb.w	sl, sl
 800ae12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ae16:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae18:	d824      	bhi.n	800ae64 <_printf_float+0x178>
 800ae1a:	3901      	subs	r1, #1
 800ae1c:	4652      	mov	r2, sl
 800ae1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae22:	9109      	str	r1, [sp, #36]	; 0x24
 800ae24:	f7ff ff2e 	bl	800ac84 <__exponent>
 800ae28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae2a:	1813      	adds	r3, r2, r0
 800ae2c:	2a01      	cmp	r2, #1
 800ae2e:	4681      	mov	r9, r0
 800ae30:	6123      	str	r3, [r4, #16]
 800ae32:	dc02      	bgt.n	800ae3a <_printf_float+0x14e>
 800ae34:	6822      	ldr	r2, [r4, #0]
 800ae36:	07d1      	lsls	r1, r2, #31
 800ae38:	d501      	bpl.n	800ae3e <_printf_float+0x152>
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	6123      	str	r3, [r4, #16]
 800ae3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d0a5      	beq.n	800ad92 <_printf_float+0xa6>
 800ae46:	232d      	movs	r3, #45	; 0x2d
 800ae48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae4c:	e7a1      	b.n	800ad92 <_printf_float+0xa6>
 800ae4e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ae52:	f000 8177 	beq.w	800b144 <_printf_float+0x458>
 800ae56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ae5a:	d1bb      	bne.n	800add4 <_printf_float+0xe8>
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	d1b9      	bne.n	800add4 <_printf_float+0xe8>
 800ae60:	2301      	movs	r3, #1
 800ae62:	e7b6      	b.n	800add2 <_printf_float+0xe6>
 800ae64:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ae68:	d119      	bne.n	800ae9e <_printf_float+0x1b2>
 800ae6a:	2900      	cmp	r1, #0
 800ae6c:	6863      	ldr	r3, [r4, #4]
 800ae6e:	dd0c      	ble.n	800ae8a <_printf_float+0x19e>
 800ae70:	6121      	str	r1, [r4, #16]
 800ae72:	b913      	cbnz	r3, 800ae7a <_printf_float+0x18e>
 800ae74:	6822      	ldr	r2, [r4, #0]
 800ae76:	07d2      	lsls	r2, r2, #31
 800ae78:	d502      	bpl.n	800ae80 <_printf_float+0x194>
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	440b      	add	r3, r1
 800ae7e:	6123      	str	r3, [r4, #16]
 800ae80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae82:	65a3      	str	r3, [r4, #88]	; 0x58
 800ae84:	f04f 0900 	mov.w	r9, #0
 800ae88:	e7d9      	b.n	800ae3e <_printf_float+0x152>
 800ae8a:	b913      	cbnz	r3, 800ae92 <_printf_float+0x1a6>
 800ae8c:	6822      	ldr	r2, [r4, #0]
 800ae8e:	07d0      	lsls	r0, r2, #31
 800ae90:	d501      	bpl.n	800ae96 <_printf_float+0x1aa>
 800ae92:	3302      	adds	r3, #2
 800ae94:	e7f3      	b.n	800ae7e <_printf_float+0x192>
 800ae96:	2301      	movs	r3, #1
 800ae98:	e7f1      	b.n	800ae7e <_printf_float+0x192>
 800ae9a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ae9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aea2:	4293      	cmp	r3, r2
 800aea4:	db05      	blt.n	800aeb2 <_printf_float+0x1c6>
 800aea6:	6822      	ldr	r2, [r4, #0]
 800aea8:	6123      	str	r3, [r4, #16]
 800aeaa:	07d1      	lsls	r1, r2, #31
 800aeac:	d5e8      	bpl.n	800ae80 <_printf_float+0x194>
 800aeae:	3301      	adds	r3, #1
 800aeb0:	e7e5      	b.n	800ae7e <_printf_float+0x192>
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	bfd4      	ite	le
 800aeb6:	f1c3 0302 	rsble	r3, r3, #2
 800aeba:	2301      	movgt	r3, #1
 800aebc:	4413      	add	r3, r2
 800aebe:	e7de      	b.n	800ae7e <_printf_float+0x192>
 800aec0:	6823      	ldr	r3, [r4, #0]
 800aec2:	055a      	lsls	r2, r3, #21
 800aec4:	d407      	bmi.n	800aed6 <_printf_float+0x1ea>
 800aec6:	6923      	ldr	r3, [r4, #16]
 800aec8:	4642      	mov	r2, r8
 800aeca:	4631      	mov	r1, r6
 800aecc:	4628      	mov	r0, r5
 800aece:	47b8      	blx	r7
 800aed0:	3001      	adds	r0, #1
 800aed2:	d12b      	bne.n	800af2c <_printf_float+0x240>
 800aed4:	e767      	b.n	800ada6 <_printf_float+0xba>
 800aed6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800aeda:	f240 80dc 	bls.w	800b096 <_printf_float+0x3aa>
 800aede:	2200      	movs	r2, #0
 800aee0:	2300      	movs	r3, #0
 800aee2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aee6:	f7f5 fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d033      	beq.n	800af56 <_printf_float+0x26a>
 800aeee:	2301      	movs	r3, #1
 800aef0:	4a41      	ldr	r2, [pc, #260]	; (800aff8 <_printf_float+0x30c>)
 800aef2:	4631      	mov	r1, r6
 800aef4:	4628      	mov	r0, r5
 800aef6:	47b8      	blx	r7
 800aef8:	3001      	adds	r0, #1
 800aefa:	f43f af54 	beq.w	800ada6 <_printf_float+0xba>
 800aefe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af02:	429a      	cmp	r2, r3
 800af04:	db02      	blt.n	800af0c <_printf_float+0x220>
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	07d8      	lsls	r0, r3, #31
 800af0a:	d50f      	bpl.n	800af2c <_printf_float+0x240>
 800af0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af10:	4631      	mov	r1, r6
 800af12:	4628      	mov	r0, r5
 800af14:	47b8      	blx	r7
 800af16:	3001      	adds	r0, #1
 800af18:	f43f af45 	beq.w	800ada6 <_printf_float+0xba>
 800af1c:	f04f 0800 	mov.w	r8, #0
 800af20:	f104 091a 	add.w	r9, r4, #26
 800af24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af26:	3b01      	subs	r3, #1
 800af28:	4543      	cmp	r3, r8
 800af2a:	dc09      	bgt.n	800af40 <_printf_float+0x254>
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	079b      	lsls	r3, r3, #30
 800af30:	f100 8103 	bmi.w	800b13a <_printf_float+0x44e>
 800af34:	68e0      	ldr	r0, [r4, #12]
 800af36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af38:	4298      	cmp	r0, r3
 800af3a:	bfb8      	it	lt
 800af3c:	4618      	movlt	r0, r3
 800af3e:	e734      	b.n	800adaa <_printf_float+0xbe>
 800af40:	2301      	movs	r3, #1
 800af42:	464a      	mov	r2, r9
 800af44:	4631      	mov	r1, r6
 800af46:	4628      	mov	r0, r5
 800af48:	47b8      	blx	r7
 800af4a:	3001      	adds	r0, #1
 800af4c:	f43f af2b 	beq.w	800ada6 <_printf_float+0xba>
 800af50:	f108 0801 	add.w	r8, r8, #1
 800af54:	e7e6      	b.n	800af24 <_printf_float+0x238>
 800af56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dc2b      	bgt.n	800afb4 <_printf_float+0x2c8>
 800af5c:	2301      	movs	r3, #1
 800af5e:	4a26      	ldr	r2, [pc, #152]	; (800aff8 <_printf_float+0x30c>)
 800af60:	4631      	mov	r1, r6
 800af62:	4628      	mov	r0, r5
 800af64:	47b8      	blx	r7
 800af66:	3001      	adds	r0, #1
 800af68:	f43f af1d 	beq.w	800ada6 <_printf_float+0xba>
 800af6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6e:	b923      	cbnz	r3, 800af7a <_printf_float+0x28e>
 800af70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af72:	b913      	cbnz	r3, 800af7a <_printf_float+0x28e>
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	07d9      	lsls	r1, r3, #31
 800af78:	d5d8      	bpl.n	800af2c <_printf_float+0x240>
 800af7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af7e:	4631      	mov	r1, r6
 800af80:	4628      	mov	r0, r5
 800af82:	47b8      	blx	r7
 800af84:	3001      	adds	r0, #1
 800af86:	f43f af0e 	beq.w	800ada6 <_printf_float+0xba>
 800af8a:	f04f 0900 	mov.w	r9, #0
 800af8e:	f104 0a1a 	add.w	sl, r4, #26
 800af92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af94:	425b      	negs	r3, r3
 800af96:	454b      	cmp	r3, r9
 800af98:	dc01      	bgt.n	800af9e <_printf_float+0x2b2>
 800af9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af9c:	e794      	b.n	800aec8 <_printf_float+0x1dc>
 800af9e:	2301      	movs	r3, #1
 800afa0:	4652      	mov	r2, sl
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	47b8      	blx	r7
 800afa8:	3001      	adds	r0, #1
 800afaa:	f43f aefc 	beq.w	800ada6 <_printf_float+0xba>
 800afae:	f109 0901 	add.w	r9, r9, #1
 800afb2:	e7ee      	b.n	800af92 <_printf_float+0x2a6>
 800afb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afb8:	429a      	cmp	r2, r3
 800afba:	bfa8      	it	ge
 800afbc:	461a      	movge	r2, r3
 800afbe:	2a00      	cmp	r2, #0
 800afc0:	4691      	mov	r9, r2
 800afc2:	dd07      	ble.n	800afd4 <_printf_float+0x2e8>
 800afc4:	4613      	mov	r3, r2
 800afc6:	4631      	mov	r1, r6
 800afc8:	4642      	mov	r2, r8
 800afca:	4628      	mov	r0, r5
 800afcc:	47b8      	blx	r7
 800afce:	3001      	adds	r0, #1
 800afd0:	f43f aee9 	beq.w	800ada6 <_printf_float+0xba>
 800afd4:	f104 031a 	add.w	r3, r4, #26
 800afd8:	f04f 0b00 	mov.w	fp, #0
 800afdc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800afe0:	9306      	str	r3, [sp, #24]
 800afe2:	e015      	b.n	800b010 <_printf_float+0x324>
 800afe4:	7fefffff 	.word	0x7fefffff
 800afe8:	08010558 	.word	0x08010558
 800afec:	08010554 	.word	0x08010554
 800aff0:	08010560 	.word	0x08010560
 800aff4:	0801055c 	.word	0x0801055c
 800aff8:	08010564 	.word	0x08010564
 800affc:	2301      	movs	r3, #1
 800affe:	9a06      	ldr	r2, [sp, #24]
 800b000:	4631      	mov	r1, r6
 800b002:	4628      	mov	r0, r5
 800b004:	47b8      	blx	r7
 800b006:	3001      	adds	r0, #1
 800b008:	f43f aecd 	beq.w	800ada6 <_printf_float+0xba>
 800b00c:	f10b 0b01 	add.w	fp, fp, #1
 800b010:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b014:	ebaa 0309 	sub.w	r3, sl, r9
 800b018:	455b      	cmp	r3, fp
 800b01a:	dcef      	bgt.n	800affc <_printf_float+0x310>
 800b01c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b020:	429a      	cmp	r2, r3
 800b022:	44d0      	add	r8, sl
 800b024:	db15      	blt.n	800b052 <_printf_float+0x366>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	07da      	lsls	r2, r3, #31
 800b02a:	d412      	bmi.n	800b052 <_printf_float+0x366>
 800b02c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b02e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b030:	eba3 020a 	sub.w	r2, r3, sl
 800b034:	eba3 0a01 	sub.w	sl, r3, r1
 800b038:	4592      	cmp	sl, r2
 800b03a:	bfa8      	it	ge
 800b03c:	4692      	movge	sl, r2
 800b03e:	f1ba 0f00 	cmp.w	sl, #0
 800b042:	dc0e      	bgt.n	800b062 <_printf_float+0x376>
 800b044:	f04f 0800 	mov.w	r8, #0
 800b048:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b04c:	f104 091a 	add.w	r9, r4, #26
 800b050:	e019      	b.n	800b086 <_printf_float+0x39a>
 800b052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b056:	4631      	mov	r1, r6
 800b058:	4628      	mov	r0, r5
 800b05a:	47b8      	blx	r7
 800b05c:	3001      	adds	r0, #1
 800b05e:	d1e5      	bne.n	800b02c <_printf_float+0x340>
 800b060:	e6a1      	b.n	800ada6 <_printf_float+0xba>
 800b062:	4653      	mov	r3, sl
 800b064:	4642      	mov	r2, r8
 800b066:	4631      	mov	r1, r6
 800b068:	4628      	mov	r0, r5
 800b06a:	47b8      	blx	r7
 800b06c:	3001      	adds	r0, #1
 800b06e:	d1e9      	bne.n	800b044 <_printf_float+0x358>
 800b070:	e699      	b.n	800ada6 <_printf_float+0xba>
 800b072:	2301      	movs	r3, #1
 800b074:	464a      	mov	r2, r9
 800b076:	4631      	mov	r1, r6
 800b078:	4628      	mov	r0, r5
 800b07a:	47b8      	blx	r7
 800b07c:	3001      	adds	r0, #1
 800b07e:	f43f ae92 	beq.w	800ada6 <_printf_float+0xba>
 800b082:	f108 0801 	add.w	r8, r8, #1
 800b086:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b08a:	1a9b      	subs	r3, r3, r2
 800b08c:	eba3 030a 	sub.w	r3, r3, sl
 800b090:	4543      	cmp	r3, r8
 800b092:	dcee      	bgt.n	800b072 <_printf_float+0x386>
 800b094:	e74a      	b.n	800af2c <_printf_float+0x240>
 800b096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b098:	2a01      	cmp	r2, #1
 800b09a:	dc01      	bgt.n	800b0a0 <_printf_float+0x3b4>
 800b09c:	07db      	lsls	r3, r3, #31
 800b09e:	d53a      	bpl.n	800b116 <_printf_float+0x42a>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	4642      	mov	r2, r8
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	47b8      	blx	r7
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	f43f ae7b 	beq.w	800ada6 <_printf_float+0xba>
 800b0b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0b4:	4631      	mov	r1, r6
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	47b8      	blx	r7
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	f108 0801 	add.w	r8, r8, #1
 800b0c0:	f43f ae71 	beq.w	800ada6 <_printf_float+0xba>
 800b0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f103 3aff 	add.w	sl, r3, #4294967295
 800b0cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f7f5 fcf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0d6:	b9c8      	cbnz	r0, 800b10c <_printf_float+0x420>
 800b0d8:	4653      	mov	r3, sl
 800b0da:	4642      	mov	r2, r8
 800b0dc:	4631      	mov	r1, r6
 800b0de:	4628      	mov	r0, r5
 800b0e0:	47b8      	blx	r7
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	d10e      	bne.n	800b104 <_printf_float+0x418>
 800b0e6:	e65e      	b.n	800ada6 <_printf_float+0xba>
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4652      	mov	r2, sl
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	47b8      	blx	r7
 800b0f2:	3001      	adds	r0, #1
 800b0f4:	f43f ae57 	beq.w	800ada6 <_printf_float+0xba>
 800b0f8:	f108 0801 	add.w	r8, r8, #1
 800b0fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0fe:	3b01      	subs	r3, #1
 800b100:	4543      	cmp	r3, r8
 800b102:	dcf1      	bgt.n	800b0e8 <_printf_float+0x3fc>
 800b104:	464b      	mov	r3, r9
 800b106:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b10a:	e6de      	b.n	800aeca <_printf_float+0x1de>
 800b10c:	f04f 0800 	mov.w	r8, #0
 800b110:	f104 0a1a 	add.w	sl, r4, #26
 800b114:	e7f2      	b.n	800b0fc <_printf_float+0x410>
 800b116:	2301      	movs	r3, #1
 800b118:	e7df      	b.n	800b0da <_printf_float+0x3ee>
 800b11a:	2301      	movs	r3, #1
 800b11c:	464a      	mov	r2, r9
 800b11e:	4631      	mov	r1, r6
 800b120:	4628      	mov	r0, r5
 800b122:	47b8      	blx	r7
 800b124:	3001      	adds	r0, #1
 800b126:	f43f ae3e 	beq.w	800ada6 <_printf_float+0xba>
 800b12a:	f108 0801 	add.w	r8, r8, #1
 800b12e:	68e3      	ldr	r3, [r4, #12]
 800b130:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b132:	1a9b      	subs	r3, r3, r2
 800b134:	4543      	cmp	r3, r8
 800b136:	dcf0      	bgt.n	800b11a <_printf_float+0x42e>
 800b138:	e6fc      	b.n	800af34 <_printf_float+0x248>
 800b13a:	f04f 0800 	mov.w	r8, #0
 800b13e:	f104 0919 	add.w	r9, r4, #25
 800b142:	e7f4      	b.n	800b12e <_printf_float+0x442>
 800b144:	2900      	cmp	r1, #0
 800b146:	f43f ae8b 	beq.w	800ae60 <_printf_float+0x174>
 800b14a:	2300      	movs	r3, #0
 800b14c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b150:	ab09      	add	r3, sp, #36	; 0x24
 800b152:	9300      	str	r3, [sp, #0]
 800b154:	ec49 8b10 	vmov	d0, r8, r9
 800b158:	6022      	str	r2, [r4, #0]
 800b15a:	f8cd a004 	str.w	sl, [sp, #4]
 800b15e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b162:	4628      	mov	r0, r5
 800b164:	f7ff fd2d 	bl	800abc2 <__cvt>
 800b168:	4680      	mov	r8, r0
 800b16a:	e648      	b.n	800adfe <_printf_float+0x112>

0800b16c <_printf_common>:
 800b16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b170:	4691      	mov	r9, r2
 800b172:	461f      	mov	r7, r3
 800b174:	688a      	ldr	r2, [r1, #8]
 800b176:	690b      	ldr	r3, [r1, #16]
 800b178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b17c:	4293      	cmp	r3, r2
 800b17e:	bfb8      	it	lt
 800b180:	4613      	movlt	r3, r2
 800b182:	f8c9 3000 	str.w	r3, [r9]
 800b186:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b18a:	4606      	mov	r6, r0
 800b18c:	460c      	mov	r4, r1
 800b18e:	b112      	cbz	r2, 800b196 <_printf_common+0x2a>
 800b190:	3301      	adds	r3, #1
 800b192:	f8c9 3000 	str.w	r3, [r9]
 800b196:	6823      	ldr	r3, [r4, #0]
 800b198:	0699      	lsls	r1, r3, #26
 800b19a:	bf42      	ittt	mi
 800b19c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b1a0:	3302      	addmi	r3, #2
 800b1a2:	f8c9 3000 	strmi.w	r3, [r9]
 800b1a6:	6825      	ldr	r5, [r4, #0]
 800b1a8:	f015 0506 	ands.w	r5, r5, #6
 800b1ac:	d107      	bne.n	800b1be <_printf_common+0x52>
 800b1ae:	f104 0a19 	add.w	sl, r4, #25
 800b1b2:	68e3      	ldr	r3, [r4, #12]
 800b1b4:	f8d9 2000 	ldr.w	r2, [r9]
 800b1b8:	1a9b      	subs	r3, r3, r2
 800b1ba:	42ab      	cmp	r3, r5
 800b1bc:	dc28      	bgt.n	800b210 <_printf_common+0xa4>
 800b1be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b1c2:	6822      	ldr	r2, [r4, #0]
 800b1c4:	3300      	adds	r3, #0
 800b1c6:	bf18      	it	ne
 800b1c8:	2301      	movne	r3, #1
 800b1ca:	0692      	lsls	r2, r2, #26
 800b1cc:	d42d      	bmi.n	800b22a <_printf_common+0xbe>
 800b1ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1d2:	4639      	mov	r1, r7
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	47c0      	blx	r8
 800b1d8:	3001      	adds	r0, #1
 800b1da:	d020      	beq.n	800b21e <_printf_common+0xb2>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	68e5      	ldr	r5, [r4, #12]
 800b1e0:	f8d9 2000 	ldr.w	r2, [r9]
 800b1e4:	f003 0306 	and.w	r3, r3, #6
 800b1e8:	2b04      	cmp	r3, #4
 800b1ea:	bf08      	it	eq
 800b1ec:	1aad      	subeq	r5, r5, r2
 800b1ee:	68a3      	ldr	r3, [r4, #8]
 800b1f0:	6922      	ldr	r2, [r4, #16]
 800b1f2:	bf0c      	ite	eq
 800b1f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1f8:	2500      	movne	r5, #0
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	bfc4      	itt	gt
 800b1fe:	1a9b      	subgt	r3, r3, r2
 800b200:	18ed      	addgt	r5, r5, r3
 800b202:	f04f 0900 	mov.w	r9, #0
 800b206:	341a      	adds	r4, #26
 800b208:	454d      	cmp	r5, r9
 800b20a:	d11a      	bne.n	800b242 <_printf_common+0xd6>
 800b20c:	2000      	movs	r0, #0
 800b20e:	e008      	b.n	800b222 <_printf_common+0xb6>
 800b210:	2301      	movs	r3, #1
 800b212:	4652      	mov	r2, sl
 800b214:	4639      	mov	r1, r7
 800b216:	4630      	mov	r0, r6
 800b218:	47c0      	blx	r8
 800b21a:	3001      	adds	r0, #1
 800b21c:	d103      	bne.n	800b226 <_printf_common+0xba>
 800b21e:	f04f 30ff 	mov.w	r0, #4294967295
 800b222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b226:	3501      	adds	r5, #1
 800b228:	e7c3      	b.n	800b1b2 <_printf_common+0x46>
 800b22a:	18e1      	adds	r1, r4, r3
 800b22c:	1c5a      	adds	r2, r3, #1
 800b22e:	2030      	movs	r0, #48	; 0x30
 800b230:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b234:	4422      	add	r2, r4
 800b236:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b23a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b23e:	3302      	adds	r3, #2
 800b240:	e7c5      	b.n	800b1ce <_printf_common+0x62>
 800b242:	2301      	movs	r3, #1
 800b244:	4622      	mov	r2, r4
 800b246:	4639      	mov	r1, r7
 800b248:	4630      	mov	r0, r6
 800b24a:	47c0      	blx	r8
 800b24c:	3001      	adds	r0, #1
 800b24e:	d0e6      	beq.n	800b21e <_printf_common+0xb2>
 800b250:	f109 0901 	add.w	r9, r9, #1
 800b254:	e7d8      	b.n	800b208 <_printf_common+0x9c>
	...

0800b258 <_printf_i>:
 800b258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b25c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b260:	460c      	mov	r4, r1
 800b262:	7e09      	ldrb	r1, [r1, #24]
 800b264:	b085      	sub	sp, #20
 800b266:	296e      	cmp	r1, #110	; 0x6e
 800b268:	4617      	mov	r7, r2
 800b26a:	4606      	mov	r6, r0
 800b26c:	4698      	mov	r8, r3
 800b26e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b270:	f000 80b3 	beq.w	800b3da <_printf_i+0x182>
 800b274:	d822      	bhi.n	800b2bc <_printf_i+0x64>
 800b276:	2963      	cmp	r1, #99	; 0x63
 800b278:	d036      	beq.n	800b2e8 <_printf_i+0x90>
 800b27a:	d80a      	bhi.n	800b292 <_printf_i+0x3a>
 800b27c:	2900      	cmp	r1, #0
 800b27e:	f000 80b9 	beq.w	800b3f4 <_printf_i+0x19c>
 800b282:	2958      	cmp	r1, #88	; 0x58
 800b284:	f000 8083 	beq.w	800b38e <_printf_i+0x136>
 800b288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b28c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b290:	e032      	b.n	800b2f8 <_printf_i+0xa0>
 800b292:	2964      	cmp	r1, #100	; 0x64
 800b294:	d001      	beq.n	800b29a <_printf_i+0x42>
 800b296:	2969      	cmp	r1, #105	; 0x69
 800b298:	d1f6      	bne.n	800b288 <_printf_i+0x30>
 800b29a:	6820      	ldr	r0, [r4, #0]
 800b29c:	6813      	ldr	r3, [r2, #0]
 800b29e:	0605      	lsls	r5, r0, #24
 800b2a0:	f103 0104 	add.w	r1, r3, #4
 800b2a4:	d52a      	bpl.n	800b2fc <_printf_i+0xa4>
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6011      	str	r1, [r2, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	da03      	bge.n	800b2b6 <_printf_i+0x5e>
 800b2ae:	222d      	movs	r2, #45	; 0x2d
 800b2b0:	425b      	negs	r3, r3
 800b2b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b2b6:	486f      	ldr	r0, [pc, #444]	; (800b474 <_printf_i+0x21c>)
 800b2b8:	220a      	movs	r2, #10
 800b2ba:	e039      	b.n	800b330 <_printf_i+0xd8>
 800b2bc:	2973      	cmp	r1, #115	; 0x73
 800b2be:	f000 809d 	beq.w	800b3fc <_printf_i+0x1a4>
 800b2c2:	d808      	bhi.n	800b2d6 <_printf_i+0x7e>
 800b2c4:	296f      	cmp	r1, #111	; 0x6f
 800b2c6:	d020      	beq.n	800b30a <_printf_i+0xb2>
 800b2c8:	2970      	cmp	r1, #112	; 0x70
 800b2ca:	d1dd      	bne.n	800b288 <_printf_i+0x30>
 800b2cc:	6823      	ldr	r3, [r4, #0]
 800b2ce:	f043 0320 	orr.w	r3, r3, #32
 800b2d2:	6023      	str	r3, [r4, #0]
 800b2d4:	e003      	b.n	800b2de <_printf_i+0x86>
 800b2d6:	2975      	cmp	r1, #117	; 0x75
 800b2d8:	d017      	beq.n	800b30a <_printf_i+0xb2>
 800b2da:	2978      	cmp	r1, #120	; 0x78
 800b2dc:	d1d4      	bne.n	800b288 <_printf_i+0x30>
 800b2de:	2378      	movs	r3, #120	; 0x78
 800b2e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2e4:	4864      	ldr	r0, [pc, #400]	; (800b478 <_printf_i+0x220>)
 800b2e6:	e055      	b.n	800b394 <_printf_i+0x13c>
 800b2e8:	6813      	ldr	r3, [r2, #0]
 800b2ea:	1d19      	adds	r1, r3, #4
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6011      	str	r1, [r2, #0]
 800b2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e08c      	b.n	800b416 <_printf_i+0x1be>
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	6011      	str	r1, [r2, #0]
 800b300:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b304:	bf18      	it	ne
 800b306:	b21b      	sxthne	r3, r3
 800b308:	e7cf      	b.n	800b2aa <_printf_i+0x52>
 800b30a:	6813      	ldr	r3, [r2, #0]
 800b30c:	6825      	ldr	r5, [r4, #0]
 800b30e:	1d18      	adds	r0, r3, #4
 800b310:	6010      	str	r0, [r2, #0]
 800b312:	0628      	lsls	r0, r5, #24
 800b314:	d501      	bpl.n	800b31a <_printf_i+0xc2>
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	e002      	b.n	800b320 <_printf_i+0xc8>
 800b31a:	0668      	lsls	r0, r5, #25
 800b31c:	d5fb      	bpl.n	800b316 <_printf_i+0xbe>
 800b31e:	881b      	ldrh	r3, [r3, #0]
 800b320:	4854      	ldr	r0, [pc, #336]	; (800b474 <_printf_i+0x21c>)
 800b322:	296f      	cmp	r1, #111	; 0x6f
 800b324:	bf14      	ite	ne
 800b326:	220a      	movne	r2, #10
 800b328:	2208      	moveq	r2, #8
 800b32a:	2100      	movs	r1, #0
 800b32c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b330:	6865      	ldr	r5, [r4, #4]
 800b332:	60a5      	str	r5, [r4, #8]
 800b334:	2d00      	cmp	r5, #0
 800b336:	f2c0 8095 	blt.w	800b464 <_printf_i+0x20c>
 800b33a:	6821      	ldr	r1, [r4, #0]
 800b33c:	f021 0104 	bic.w	r1, r1, #4
 800b340:	6021      	str	r1, [r4, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d13d      	bne.n	800b3c2 <_printf_i+0x16a>
 800b346:	2d00      	cmp	r5, #0
 800b348:	f040 808e 	bne.w	800b468 <_printf_i+0x210>
 800b34c:	4665      	mov	r5, ip
 800b34e:	2a08      	cmp	r2, #8
 800b350:	d10b      	bne.n	800b36a <_printf_i+0x112>
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	07db      	lsls	r3, r3, #31
 800b356:	d508      	bpl.n	800b36a <_printf_i+0x112>
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	bfde      	ittt	le
 800b360:	2330      	movle	r3, #48	; 0x30
 800b362:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b366:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b36a:	ebac 0305 	sub.w	r3, ip, r5
 800b36e:	6123      	str	r3, [r4, #16]
 800b370:	f8cd 8000 	str.w	r8, [sp]
 800b374:	463b      	mov	r3, r7
 800b376:	aa03      	add	r2, sp, #12
 800b378:	4621      	mov	r1, r4
 800b37a:	4630      	mov	r0, r6
 800b37c:	f7ff fef6 	bl	800b16c <_printf_common>
 800b380:	3001      	adds	r0, #1
 800b382:	d14d      	bne.n	800b420 <_printf_i+0x1c8>
 800b384:	f04f 30ff 	mov.w	r0, #4294967295
 800b388:	b005      	add	sp, #20
 800b38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b38e:	4839      	ldr	r0, [pc, #228]	; (800b474 <_printf_i+0x21c>)
 800b390:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b394:	6813      	ldr	r3, [r2, #0]
 800b396:	6821      	ldr	r1, [r4, #0]
 800b398:	1d1d      	adds	r5, r3, #4
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6015      	str	r5, [r2, #0]
 800b39e:	060a      	lsls	r2, r1, #24
 800b3a0:	d50b      	bpl.n	800b3ba <_printf_i+0x162>
 800b3a2:	07ca      	lsls	r2, r1, #31
 800b3a4:	bf44      	itt	mi
 800b3a6:	f041 0120 	orrmi.w	r1, r1, #32
 800b3aa:	6021      	strmi	r1, [r4, #0]
 800b3ac:	b91b      	cbnz	r3, 800b3b6 <_printf_i+0x15e>
 800b3ae:	6822      	ldr	r2, [r4, #0]
 800b3b0:	f022 0220 	bic.w	r2, r2, #32
 800b3b4:	6022      	str	r2, [r4, #0]
 800b3b6:	2210      	movs	r2, #16
 800b3b8:	e7b7      	b.n	800b32a <_printf_i+0xd2>
 800b3ba:	064d      	lsls	r5, r1, #25
 800b3bc:	bf48      	it	mi
 800b3be:	b29b      	uxthmi	r3, r3
 800b3c0:	e7ef      	b.n	800b3a2 <_printf_i+0x14a>
 800b3c2:	4665      	mov	r5, ip
 800b3c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3c8:	fb02 3311 	mls	r3, r2, r1, r3
 800b3cc:	5cc3      	ldrb	r3, [r0, r3]
 800b3ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	2900      	cmp	r1, #0
 800b3d6:	d1f5      	bne.n	800b3c4 <_printf_i+0x16c>
 800b3d8:	e7b9      	b.n	800b34e <_printf_i+0xf6>
 800b3da:	6813      	ldr	r3, [r2, #0]
 800b3dc:	6825      	ldr	r5, [r4, #0]
 800b3de:	6961      	ldr	r1, [r4, #20]
 800b3e0:	1d18      	adds	r0, r3, #4
 800b3e2:	6010      	str	r0, [r2, #0]
 800b3e4:	0628      	lsls	r0, r5, #24
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	d501      	bpl.n	800b3ee <_printf_i+0x196>
 800b3ea:	6019      	str	r1, [r3, #0]
 800b3ec:	e002      	b.n	800b3f4 <_printf_i+0x19c>
 800b3ee:	066a      	lsls	r2, r5, #25
 800b3f0:	d5fb      	bpl.n	800b3ea <_printf_i+0x192>
 800b3f2:	8019      	strh	r1, [r3, #0]
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	6123      	str	r3, [r4, #16]
 800b3f8:	4665      	mov	r5, ip
 800b3fa:	e7b9      	b.n	800b370 <_printf_i+0x118>
 800b3fc:	6813      	ldr	r3, [r2, #0]
 800b3fe:	1d19      	adds	r1, r3, #4
 800b400:	6011      	str	r1, [r2, #0]
 800b402:	681d      	ldr	r5, [r3, #0]
 800b404:	6862      	ldr	r2, [r4, #4]
 800b406:	2100      	movs	r1, #0
 800b408:	4628      	mov	r0, r5
 800b40a:	f7f4 fee9 	bl	80001e0 <memchr>
 800b40e:	b108      	cbz	r0, 800b414 <_printf_i+0x1bc>
 800b410:	1b40      	subs	r0, r0, r5
 800b412:	6060      	str	r0, [r4, #4]
 800b414:	6863      	ldr	r3, [r4, #4]
 800b416:	6123      	str	r3, [r4, #16]
 800b418:	2300      	movs	r3, #0
 800b41a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b41e:	e7a7      	b.n	800b370 <_printf_i+0x118>
 800b420:	6923      	ldr	r3, [r4, #16]
 800b422:	462a      	mov	r2, r5
 800b424:	4639      	mov	r1, r7
 800b426:	4630      	mov	r0, r6
 800b428:	47c0      	blx	r8
 800b42a:	3001      	adds	r0, #1
 800b42c:	d0aa      	beq.n	800b384 <_printf_i+0x12c>
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	079b      	lsls	r3, r3, #30
 800b432:	d413      	bmi.n	800b45c <_printf_i+0x204>
 800b434:	68e0      	ldr	r0, [r4, #12]
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	4298      	cmp	r0, r3
 800b43a:	bfb8      	it	lt
 800b43c:	4618      	movlt	r0, r3
 800b43e:	e7a3      	b.n	800b388 <_printf_i+0x130>
 800b440:	2301      	movs	r3, #1
 800b442:	464a      	mov	r2, r9
 800b444:	4639      	mov	r1, r7
 800b446:	4630      	mov	r0, r6
 800b448:	47c0      	blx	r8
 800b44a:	3001      	adds	r0, #1
 800b44c:	d09a      	beq.n	800b384 <_printf_i+0x12c>
 800b44e:	3501      	adds	r5, #1
 800b450:	68e3      	ldr	r3, [r4, #12]
 800b452:	9a03      	ldr	r2, [sp, #12]
 800b454:	1a9b      	subs	r3, r3, r2
 800b456:	42ab      	cmp	r3, r5
 800b458:	dcf2      	bgt.n	800b440 <_printf_i+0x1e8>
 800b45a:	e7eb      	b.n	800b434 <_printf_i+0x1dc>
 800b45c:	2500      	movs	r5, #0
 800b45e:	f104 0919 	add.w	r9, r4, #25
 800b462:	e7f5      	b.n	800b450 <_printf_i+0x1f8>
 800b464:	2b00      	cmp	r3, #0
 800b466:	d1ac      	bne.n	800b3c2 <_printf_i+0x16a>
 800b468:	7803      	ldrb	r3, [r0, #0]
 800b46a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b46e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b472:	e76c      	b.n	800b34e <_printf_i+0xf6>
 800b474:	08010566 	.word	0x08010566
 800b478:	08010577 	.word	0x08010577

0800b47c <_scanf_float>:
 800b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	469a      	mov	sl, r3
 800b482:	688b      	ldr	r3, [r1, #8]
 800b484:	4616      	mov	r6, r2
 800b486:	1e5a      	subs	r2, r3, #1
 800b488:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b48c:	b087      	sub	sp, #28
 800b48e:	bf83      	ittte	hi
 800b490:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b494:	189b      	addhi	r3, r3, r2
 800b496:	9301      	strhi	r3, [sp, #4]
 800b498:	2300      	movls	r3, #0
 800b49a:	bf86      	itte	hi
 800b49c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b4a0:	608b      	strhi	r3, [r1, #8]
 800b4a2:	9301      	strls	r3, [sp, #4]
 800b4a4:	680b      	ldr	r3, [r1, #0]
 800b4a6:	4688      	mov	r8, r1
 800b4a8:	f04f 0b00 	mov.w	fp, #0
 800b4ac:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b4b0:	f848 3b1c 	str.w	r3, [r8], #28
 800b4b4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b4b8:	4607      	mov	r7, r0
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	4645      	mov	r5, r8
 800b4be:	465a      	mov	r2, fp
 800b4c0:	46d9      	mov	r9, fp
 800b4c2:	f8cd b008 	str.w	fp, [sp, #8]
 800b4c6:	68a1      	ldr	r1, [r4, #8]
 800b4c8:	b181      	cbz	r1, 800b4ec <_scanf_float+0x70>
 800b4ca:	6833      	ldr	r3, [r6, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	2b49      	cmp	r3, #73	; 0x49
 800b4d0:	d071      	beq.n	800b5b6 <_scanf_float+0x13a>
 800b4d2:	d84d      	bhi.n	800b570 <_scanf_float+0xf4>
 800b4d4:	2b39      	cmp	r3, #57	; 0x39
 800b4d6:	d840      	bhi.n	800b55a <_scanf_float+0xde>
 800b4d8:	2b31      	cmp	r3, #49	; 0x31
 800b4da:	f080 8088 	bcs.w	800b5ee <_scanf_float+0x172>
 800b4de:	2b2d      	cmp	r3, #45	; 0x2d
 800b4e0:	f000 8090 	beq.w	800b604 <_scanf_float+0x188>
 800b4e4:	d815      	bhi.n	800b512 <_scanf_float+0x96>
 800b4e6:	2b2b      	cmp	r3, #43	; 0x2b
 800b4e8:	f000 808c 	beq.w	800b604 <_scanf_float+0x188>
 800b4ec:	f1b9 0f00 	cmp.w	r9, #0
 800b4f0:	d003      	beq.n	800b4fa <_scanf_float+0x7e>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	3a01      	subs	r2, #1
 800b4fc:	2a01      	cmp	r2, #1
 800b4fe:	f200 80ea 	bhi.w	800b6d6 <_scanf_float+0x25a>
 800b502:	4545      	cmp	r5, r8
 800b504:	f200 80dc 	bhi.w	800b6c0 <_scanf_float+0x244>
 800b508:	2601      	movs	r6, #1
 800b50a:	4630      	mov	r0, r6
 800b50c:	b007      	add	sp, #28
 800b50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b512:	2b2e      	cmp	r3, #46	; 0x2e
 800b514:	f000 809f 	beq.w	800b656 <_scanf_float+0x1da>
 800b518:	2b30      	cmp	r3, #48	; 0x30
 800b51a:	d1e7      	bne.n	800b4ec <_scanf_float+0x70>
 800b51c:	6820      	ldr	r0, [r4, #0]
 800b51e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b522:	d064      	beq.n	800b5ee <_scanf_float+0x172>
 800b524:	9b01      	ldr	r3, [sp, #4]
 800b526:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b52a:	6020      	str	r0, [r4, #0]
 800b52c:	f109 0901 	add.w	r9, r9, #1
 800b530:	b11b      	cbz	r3, 800b53a <_scanf_float+0xbe>
 800b532:	3b01      	subs	r3, #1
 800b534:	3101      	adds	r1, #1
 800b536:	9301      	str	r3, [sp, #4]
 800b538:	60a1      	str	r1, [r4, #8]
 800b53a:	68a3      	ldr	r3, [r4, #8]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	60a3      	str	r3, [r4, #8]
 800b540:	6923      	ldr	r3, [r4, #16]
 800b542:	3301      	adds	r3, #1
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	6873      	ldr	r3, [r6, #4]
 800b548:	3b01      	subs	r3, #1
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	6073      	str	r3, [r6, #4]
 800b54e:	f340 80ac 	ble.w	800b6aa <_scanf_float+0x22e>
 800b552:	6833      	ldr	r3, [r6, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	6033      	str	r3, [r6, #0]
 800b558:	e7b5      	b.n	800b4c6 <_scanf_float+0x4a>
 800b55a:	2b45      	cmp	r3, #69	; 0x45
 800b55c:	f000 8085 	beq.w	800b66a <_scanf_float+0x1ee>
 800b560:	2b46      	cmp	r3, #70	; 0x46
 800b562:	d06a      	beq.n	800b63a <_scanf_float+0x1be>
 800b564:	2b41      	cmp	r3, #65	; 0x41
 800b566:	d1c1      	bne.n	800b4ec <_scanf_float+0x70>
 800b568:	2a01      	cmp	r2, #1
 800b56a:	d1bf      	bne.n	800b4ec <_scanf_float+0x70>
 800b56c:	2202      	movs	r2, #2
 800b56e:	e046      	b.n	800b5fe <_scanf_float+0x182>
 800b570:	2b65      	cmp	r3, #101	; 0x65
 800b572:	d07a      	beq.n	800b66a <_scanf_float+0x1ee>
 800b574:	d818      	bhi.n	800b5a8 <_scanf_float+0x12c>
 800b576:	2b54      	cmp	r3, #84	; 0x54
 800b578:	d066      	beq.n	800b648 <_scanf_float+0x1cc>
 800b57a:	d811      	bhi.n	800b5a0 <_scanf_float+0x124>
 800b57c:	2b4e      	cmp	r3, #78	; 0x4e
 800b57e:	d1b5      	bne.n	800b4ec <_scanf_float+0x70>
 800b580:	2a00      	cmp	r2, #0
 800b582:	d146      	bne.n	800b612 <_scanf_float+0x196>
 800b584:	f1b9 0f00 	cmp.w	r9, #0
 800b588:	d145      	bne.n	800b616 <_scanf_float+0x19a>
 800b58a:	6821      	ldr	r1, [r4, #0]
 800b58c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b590:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b594:	d13f      	bne.n	800b616 <_scanf_float+0x19a>
 800b596:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b59a:	6021      	str	r1, [r4, #0]
 800b59c:	2201      	movs	r2, #1
 800b59e:	e02e      	b.n	800b5fe <_scanf_float+0x182>
 800b5a0:	2b59      	cmp	r3, #89	; 0x59
 800b5a2:	d01e      	beq.n	800b5e2 <_scanf_float+0x166>
 800b5a4:	2b61      	cmp	r3, #97	; 0x61
 800b5a6:	e7de      	b.n	800b566 <_scanf_float+0xea>
 800b5a8:	2b6e      	cmp	r3, #110	; 0x6e
 800b5aa:	d0e9      	beq.n	800b580 <_scanf_float+0x104>
 800b5ac:	d815      	bhi.n	800b5da <_scanf_float+0x15e>
 800b5ae:	2b66      	cmp	r3, #102	; 0x66
 800b5b0:	d043      	beq.n	800b63a <_scanf_float+0x1be>
 800b5b2:	2b69      	cmp	r3, #105	; 0x69
 800b5b4:	d19a      	bne.n	800b4ec <_scanf_float+0x70>
 800b5b6:	f1bb 0f00 	cmp.w	fp, #0
 800b5ba:	d138      	bne.n	800b62e <_scanf_float+0x1b2>
 800b5bc:	f1b9 0f00 	cmp.w	r9, #0
 800b5c0:	d197      	bne.n	800b4f2 <_scanf_float+0x76>
 800b5c2:	6821      	ldr	r1, [r4, #0]
 800b5c4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b5c8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b5cc:	d195      	bne.n	800b4fa <_scanf_float+0x7e>
 800b5ce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b5d2:	6021      	str	r1, [r4, #0]
 800b5d4:	f04f 0b01 	mov.w	fp, #1
 800b5d8:	e011      	b.n	800b5fe <_scanf_float+0x182>
 800b5da:	2b74      	cmp	r3, #116	; 0x74
 800b5dc:	d034      	beq.n	800b648 <_scanf_float+0x1cc>
 800b5de:	2b79      	cmp	r3, #121	; 0x79
 800b5e0:	d184      	bne.n	800b4ec <_scanf_float+0x70>
 800b5e2:	f1bb 0f07 	cmp.w	fp, #7
 800b5e6:	d181      	bne.n	800b4ec <_scanf_float+0x70>
 800b5e8:	f04f 0b08 	mov.w	fp, #8
 800b5ec:	e007      	b.n	800b5fe <_scanf_float+0x182>
 800b5ee:	eb12 0f0b 	cmn.w	r2, fp
 800b5f2:	f47f af7b 	bne.w	800b4ec <_scanf_float+0x70>
 800b5f6:	6821      	ldr	r1, [r4, #0]
 800b5f8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b5fc:	6021      	str	r1, [r4, #0]
 800b5fe:	702b      	strb	r3, [r5, #0]
 800b600:	3501      	adds	r5, #1
 800b602:	e79a      	b.n	800b53a <_scanf_float+0xbe>
 800b604:	6821      	ldr	r1, [r4, #0]
 800b606:	0608      	lsls	r0, r1, #24
 800b608:	f57f af70 	bpl.w	800b4ec <_scanf_float+0x70>
 800b60c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b610:	e7f4      	b.n	800b5fc <_scanf_float+0x180>
 800b612:	2a02      	cmp	r2, #2
 800b614:	d047      	beq.n	800b6a6 <_scanf_float+0x22a>
 800b616:	f1bb 0f01 	cmp.w	fp, #1
 800b61a:	d003      	beq.n	800b624 <_scanf_float+0x1a8>
 800b61c:	f1bb 0f04 	cmp.w	fp, #4
 800b620:	f47f af64 	bne.w	800b4ec <_scanf_float+0x70>
 800b624:	f10b 0b01 	add.w	fp, fp, #1
 800b628:	fa5f fb8b 	uxtb.w	fp, fp
 800b62c:	e7e7      	b.n	800b5fe <_scanf_float+0x182>
 800b62e:	f1bb 0f03 	cmp.w	fp, #3
 800b632:	d0f7      	beq.n	800b624 <_scanf_float+0x1a8>
 800b634:	f1bb 0f05 	cmp.w	fp, #5
 800b638:	e7f2      	b.n	800b620 <_scanf_float+0x1a4>
 800b63a:	f1bb 0f02 	cmp.w	fp, #2
 800b63e:	f47f af55 	bne.w	800b4ec <_scanf_float+0x70>
 800b642:	f04f 0b03 	mov.w	fp, #3
 800b646:	e7da      	b.n	800b5fe <_scanf_float+0x182>
 800b648:	f1bb 0f06 	cmp.w	fp, #6
 800b64c:	f47f af4e 	bne.w	800b4ec <_scanf_float+0x70>
 800b650:	f04f 0b07 	mov.w	fp, #7
 800b654:	e7d3      	b.n	800b5fe <_scanf_float+0x182>
 800b656:	6821      	ldr	r1, [r4, #0]
 800b658:	0588      	lsls	r0, r1, #22
 800b65a:	f57f af47 	bpl.w	800b4ec <_scanf_float+0x70>
 800b65e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b662:	6021      	str	r1, [r4, #0]
 800b664:	f8cd 9008 	str.w	r9, [sp, #8]
 800b668:	e7c9      	b.n	800b5fe <_scanf_float+0x182>
 800b66a:	6821      	ldr	r1, [r4, #0]
 800b66c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b670:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b674:	d006      	beq.n	800b684 <_scanf_float+0x208>
 800b676:	0548      	lsls	r0, r1, #21
 800b678:	f57f af38 	bpl.w	800b4ec <_scanf_float+0x70>
 800b67c:	f1b9 0f00 	cmp.w	r9, #0
 800b680:	f43f af3b 	beq.w	800b4fa <_scanf_float+0x7e>
 800b684:	0588      	lsls	r0, r1, #22
 800b686:	bf58      	it	pl
 800b688:	9802      	ldrpl	r0, [sp, #8]
 800b68a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b68e:	bf58      	it	pl
 800b690:	eba9 0000 	subpl.w	r0, r9, r0
 800b694:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b698:	bf58      	it	pl
 800b69a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b69e:	6021      	str	r1, [r4, #0]
 800b6a0:	f04f 0900 	mov.w	r9, #0
 800b6a4:	e7ab      	b.n	800b5fe <_scanf_float+0x182>
 800b6a6:	2203      	movs	r2, #3
 800b6a8:	e7a9      	b.n	800b5fe <_scanf_float+0x182>
 800b6aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b6ae:	9205      	str	r2, [sp, #20]
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	4798      	blx	r3
 800b6b6:	9a05      	ldr	r2, [sp, #20]
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	f43f af04 	beq.w	800b4c6 <_scanf_float+0x4a>
 800b6be:	e715      	b.n	800b4ec <_scanf_float+0x70>
 800b6c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b6c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b6c8:	4632      	mov	r2, r6
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	4798      	blx	r3
 800b6ce:	6923      	ldr	r3, [r4, #16]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	6123      	str	r3, [r4, #16]
 800b6d4:	e715      	b.n	800b502 <_scanf_float+0x86>
 800b6d6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b6da:	2b06      	cmp	r3, #6
 800b6dc:	d80a      	bhi.n	800b6f4 <_scanf_float+0x278>
 800b6de:	f1bb 0f02 	cmp.w	fp, #2
 800b6e2:	d968      	bls.n	800b7b6 <_scanf_float+0x33a>
 800b6e4:	f1ab 0b03 	sub.w	fp, fp, #3
 800b6e8:	fa5f fb8b 	uxtb.w	fp, fp
 800b6ec:	eba5 0b0b 	sub.w	fp, r5, fp
 800b6f0:	455d      	cmp	r5, fp
 800b6f2:	d14b      	bne.n	800b78c <_scanf_float+0x310>
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	05da      	lsls	r2, r3, #23
 800b6f8:	d51f      	bpl.n	800b73a <_scanf_float+0x2be>
 800b6fa:	055b      	lsls	r3, r3, #21
 800b6fc:	d468      	bmi.n	800b7d0 <_scanf_float+0x354>
 800b6fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b702:	6923      	ldr	r3, [r4, #16]
 800b704:	2965      	cmp	r1, #101	; 0x65
 800b706:	f103 33ff 	add.w	r3, r3, #4294967295
 800b70a:	f105 3bff 	add.w	fp, r5, #4294967295
 800b70e:	6123      	str	r3, [r4, #16]
 800b710:	d00d      	beq.n	800b72e <_scanf_float+0x2b2>
 800b712:	2945      	cmp	r1, #69	; 0x45
 800b714:	d00b      	beq.n	800b72e <_scanf_float+0x2b2>
 800b716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b71a:	4632      	mov	r2, r6
 800b71c:	4638      	mov	r0, r7
 800b71e:	4798      	blx	r3
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b726:	3b01      	subs	r3, #1
 800b728:	f1a5 0b02 	sub.w	fp, r5, #2
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b732:	4632      	mov	r2, r6
 800b734:	4638      	mov	r0, r7
 800b736:	4798      	blx	r3
 800b738:	465d      	mov	r5, fp
 800b73a:	6826      	ldr	r6, [r4, #0]
 800b73c:	f016 0610 	ands.w	r6, r6, #16
 800b740:	d17a      	bne.n	800b838 <_scanf_float+0x3bc>
 800b742:	702e      	strb	r6, [r5, #0]
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b74a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b74e:	d142      	bne.n	800b7d6 <_scanf_float+0x35a>
 800b750:	9b02      	ldr	r3, [sp, #8]
 800b752:	eba9 0303 	sub.w	r3, r9, r3
 800b756:	425a      	negs	r2, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d149      	bne.n	800b7f0 <_scanf_float+0x374>
 800b75c:	2200      	movs	r2, #0
 800b75e:	4641      	mov	r1, r8
 800b760:	4638      	mov	r0, r7
 800b762:	f000 ff21 	bl	800c5a8 <_strtod_r>
 800b766:	6825      	ldr	r5, [r4, #0]
 800b768:	f8da 3000 	ldr.w	r3, [sl]
 800b76c:	f015 0f02 	tst.w	r5, #2
 800b770:	f103 0204 	add.w	r2, r3, #4
 800b774:	ec59 8b10 	vmov	r8, r9, d0
 800b778:	f8ca 2000 	str.w	r2, [sl]
 800b77c:	d043      	beq.n	800b806 <_scanf_float+0x38a>
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	e9c3 8900 	strd	r8, r9, [r3]
 800b784:	68e3      	ldr	r3, [r4, #12]
 800b786:	3301      	adds	r3, #1
 800b788:	60e3      	str	r3, [r4, #12]
 800b78a:	e6be      	b.n	800b50a <_scanf_float+0x8e>
 800b78c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b790:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b794:	4632      	mov	r2, r6
 800b796:	4638      	mov	r0, r7
 800b798:	4798      	blx	r3
 800b79a:	6923      	ldr	r3, [r4, #16]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	6123      	str	r3, [r4, #16]
 800b7a0:	e7a6      	b.n	800b6f0 <_scanf_float+0x274>
 800b7a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7a6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b7aa:	4632      	mov	r2, r6
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	4798      	blx	r3
 800b7b0:	6923      	ldr	r3, [r4, #16]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	6123      	str	r3, [r4, #16]
 800b7b6:	4545      	cmp	r5, r8
 800b7b8:	d8f3      	bhi.n	800b7a2 <_scanf_float+0x326>
 800b7ba:	e6a5      	b.n	800b508 <_scanf_float+0x8c>
 800b7bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b7c4:	4632      	mov	r2, r6
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	4798      	blx	r3
 800b7ca:	6923      	ldr	r3, [r4, #16]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	6123      	str	r3, [r4, #16]
 800b7d0:	4545      	cmp	r5, r8
 800b7d2:	d8f3      	bhi.n	800b7bc <_scanf_float+0x340>
 800b7d4:	e698      	b.n	800b508 <_scanf_float+0x8c>
 800b7d6:	9b03      	ldr	r3, [sp, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0bf      	beq.n	800b75c <_scanf_float+0x2e0>
 800b7dc:	9904      	ldr	r1, [sp, #16]
 800b7de:	230a      	movs	r3, #10
 800b7e0:	4632      	mov	r2, r6
 800b7e2:	3101      	adds	r1, #1
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f000 ff6b 	bl	800c6c0 <_strtol_r>
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	9d04      	ldr	r5, [sp, #16]
 800b7ee:	1ac2      	subs	r2, r0, r3
 800b7f0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b7f4:	429d      	cmp	r5, r3
 800b7f6:	bf28      	it	cs
 800b7f8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b7fc:	490f      	ldr	r1, [pc, #60]	; (800b83c <_scanf_float+0x3c0>)
 800b7fe:	4628      	mov	r0, r5
 800b800:	f000 f8a0 	bl	800b944 <siprintf>
 800b804:	e7aa      	b.n	800b75c <_scanf_float+0x2e0>
 800b806:	f015 0504 	ands.w	r5, r5, #4
 800b80a:	d1b8      	bne.n	800b77e <_scanf_float+0x302>
 800b80c:	681f      	ldr	r7, [r3, #0]
 800b80e:	ee10 2a10 	vmov	r2, s0
 800b812:	464b      	mov	r3, r9
 800b814:	ee10 0a10 	vmov	r0, s0
 800b818:	4649      	mov	r1, r9
 800b81a:	f7f5 f987 	bl	8000b2c <__aeabi_dcmpun>
 800b81e:	b128      	cbz	r0, 800b82c <_scanf_float+0x3b0>
 800b820:	4628      	mov	r0, r5
 800b822:	f000 f889 	bl	800b938 <nanf>
 800b826:	ed87 0a00 	vstr	s0, [r7]
 800b82a:	e7ab      	b.n	800b784 <_scanf_float+0x308>
 800b82c:	4640      	mov	r0, r8
 800b82e:	4649      	mov	r1, r9
 800b830:	f7f5 f9da 	bl	8000be8 <__aeabi_d2f>
 800b834:	6038      	str	r0, [r7, #0]
 800b836:	e7a5      	b.n	800b784 <_scanf_float+0x308>
 800b838:	2600      	movs	r6, #0
 800b83a:	e666      	b.n	800b50a <_scanf_float+0x8e>
 800b83c:	08010588 	.word	0x08010588

0800b840 <iprintf>:
 800b840:	b40f      	push	{r0, r1, r2, r3}
 800b842:	4b0a      	ldr	r3, [pc, #40]	; (800b86c <iprintf+0x2c>)
 800b844:	b513      	push	{r0, r1, r4, lr}
 800b846:	681c      	ldr	r4, [r3, #0]
 800b848:	b124      	cbz	r4, 800b854 <iprintf+0x14>
 800b84a:	69a3      	ldr	r3, [r4, #24]
 800b84c:	b913      	cbnz	r3, 800b854 <iprintf+0x14>
 800b84e:	4620      	mov	r0, r4
 800b850:	f001 ff3e 	bl	800d6d0 <__sinit>
 800b854:	ab05      	add	r3, sp, #20
 800b856:	9a04      	ldr	r2, [sp, #16]
 800b858:	68a1      	ldr	r1, [r4, #8]
 800b85a:	9301      	str	r3, [sp, #4]
 800b85c:	4620      	mov	r0, r4
 800b85e:	f003 f9ab 	bl	800ebb8 <_vfiprintf_r>
 800b862:	b002      	add	sp, #8
 800b864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b868:	b004      	add	sp, #16
 800b86a:	4770      	bx	lr
 800b86c:	2000000c 	.word	0x2000000c

0800b870 <_puts_r>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	460e      	mov	r6, r1
 800b874:	4605      	mov	r5, r0
 800b876:	b118      	cbz	r0, 800b880 <_puts_r+0x10>
 800b878:	6983      	ldr	r3, [r0, #24]
 800b87a:	b90b      	cbnz	r3, 800b880 <_puts_r+0x10>
 800b87c:	f001 ff28 	bl	800d6d0 <__sinit>
 800b880:	69ab      	ldr	r3, [r5, #24]
 800b882:	68ac      	ldr	r4, [r5, #8]
 800b884:	b913      	cbnz	r3, 800b88c <_puts_r+0x1c>
 800b886:	4628      	mov	r0, r5
 800b888:	f001 ff22 	bl	800d6d0 <__sinit>
 800b88c:	4b23      	ldr	r3, [pc, #140]	; (800b91c <_puts_r+0xac>)
 800b88e:	429c      	cmp	r4, r3
 800b890:	d117      	bne.n	800b8c2 <_puts_r+0x52>
 800b892:	686c      	ldr	r4, [r5, #4]
 800b894:	89a3      	ldrh	r3, [r4, #12]
 800b896:	071b      	lsls	r3, r3, #28
 800b898:	d51d      	bpl.n	800b8d6 <_puts_r+0x66>
 800b89a:	6923      	ldr	r3, [r4, #16]
 800b89c:	b1db      	cbz	r3, 800b8d6 <_puts_r+0x66>
 800b89e:	3e01      	subs	r6, #1
 800b8a0:	68a3      	ldr	r3, [r4, #8]
 800b8a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b8a6:	3b01      	subs	r3, #1
 800b8a8:	60a3      	str	r3, [r4, #8]
 800b8aa:	b9e9      	cbnz	r1, 800b8e8 <_puts_r+0x78>
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	da2e      	bge.n	800b90e <_puts_r+0x9e>
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	210a      	movs	r1, #10
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	f000 ff15 	bl	800c6e4 <__swbuf_r>
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	d011      	beq.n	800b8e2 <_puts_r+0x72>
 800b8be:	200a      	movs	r0, #10
 800b8c0:	e011      	b.n	800b8e6 <_puts_r+0x76>
 800b8c2:	4b17      	ldr	r3, [pc, #92]	; (800b920 <_puts_r+0xb0>)
 800b8c4:	429c      	cmp	r4, r3
 800b8c6:	d101      	bne.n	800b8cc <_puts_r+0x5c>
 800b8c8:	68ac      	ldr	r4, [r5, #8]
 800b8ca:	e7e3      	b.n	800b894 <_puts_r+0x24>
 800b8cc:	4b15      	ldr	r3, [pc, #84]	; (800b924 <_puts_r+0xb4>)
 800b8ce:	429c      	cmp	r4, r3
 800b8d0:	bf08      	it	eq
 800b8d2:	68ec      	ldreq	r4, [r5, #12]
 800b8d4:	e7de      	b.n	800b894 <_puts_r+0x24>
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4628      	mov	r0, r5
 800b8da:	f000 ff55 	bl	800c788 <__swsetup_r>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	d0dd      	beq.n	800b89e <_puts_r+0x2e>
 800b8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e6:	bd70      	pop	{r4, r5, r6, pc}
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	da04      	bge.n	800b8f6 <_puts_r+0x86>
 800b8ec:	69a2      	ldr	r2, [r4, #24]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	dc06      	bgt.n	800b900 <_puts_r+0x90>
 800b8f2:	290a      	cmp	r1, #10
 800b8f4:	d004      	beq.n	800b900 <_puts_r+0x90>
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	1c5a      	adds	r2, r3, #1
 800b8fa:	6022      	str	r2, [r4, #0]
 800b8fc:	7019      	strb	r1, [r3, #0]
 800b8fe:	e7cf      	b.n	800b8a0 <_puts_r+0x30>
 800b900:	4622      	mov	r2, r4
 800b902:	4628      	mov	r0, r5
 800b904:	f000 feee 	bl	800c6e4 <__swbuf_r>
 800b908:	3001      	adds	r0, #1
 800b90a:	d1c9      	bne.n	800b8a0 <_puts_r+0x30>
 800b90c:	e7e9      	b.n	800b8e2 <_puts_r+0x72>
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	200a      	movs	r0, #10
 800b912:	1c5a      	adds	r2, r3, #1
 800b914:	6022      	str	r2, [r4, #0]
 800b916:	7018      	strb	r0, [r3, #0]
 800b918:	e7e5      	b.n	800b8e6 <_puts_r+0x76>
 800b91a:	bf00      	nop
 800b91c:	08010610 	.word	0x08010610
 800b920:	08010630 	.word	0x08010630
 800b924:	080105f0 	.word	0x080105f0

0800b928 <puts>:
 800b928:	4b02      	ldr	r3, [pc, #8]	; (800b934 <puts+0xc>)
 800b92a:	4601      	mov	r1, r0
 800b92c:	6818      	ldr	r0, [r3, #0]
 800b92e:	f7ff bf9f 	b.w	800b870 <_puts_r>
 800b932:	bf00      	nop
 800b934:	2000000c 	.word	0x2000000c

0800b938 <nanf>:
 800b938:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b940 <nanf+0x8>
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	7fc00000 	.word	0x7fc00000

0800b944 <siprintf>:
 800b944:	b40e      	push	{r1, r2, r3}
 800b946:	b500      	push	{lr}
 800b948:	b09c      	sub	sp, #112	; 0x70
 800b94a:	ab1d      	add	r3, sp, #116	; 0x74
 800b94c:	9002      	str	r0, [sp, #8]
 800b94e:	9006      	str	r0, [sp, #24]
 800b950:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b954:	4809      	ldr	r0, [pc, #36]	; (800b97c <siprintf+0x38>)
 800b956:	9107      	str	r1, [sp, #28]
 800b958:	9104      	str	r1, [sp, #16]
 800b95a:	4909      	ldr	r1, [pc, #36]	; (800b980 <siprintf+0x3c>)
 800b95c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b960:	9105      	str	r1, [sp, #20]
 800b962:	6800      	ldr	r0, [r0, #0]
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	a902      	add	r1, sp, #8
 800b968:	f003 f804 	bl	800e974 <_svfiprintf_r>
 800b96c:	9b02      	ldr	r3, [sp, #8]
 800b96e:	2200      	movs	r2, #0
 800b970:	701a      	strb	r2, [r3, #0]
 800b972:	b01c      	add	sp, #112	; 0x70
 800b974:	f85d eb04 	ldr.w	lr, [sp], #4
 800b978:	b003      	add	sp, #12
 800b97a:	4770      	bx	lr
 800b97c:	2000000c 	.word	0x2000000c
 800b980:	ffff0208 	.word	0xffff0208

0800b984 <sulp>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	4604      	mov	r4, r0
 800b988:	460d      	mov	r5, r1
 800b98a:	ec45 4b10 	vmov	d0, r4, r5
 800b98e:	4616      	mov	r6, r2
 800b990:	f002 fdac 	bl	800e4ec <__ulp>
 800b994:	ec51 0b10 	vmov	r0, r1, d0
 800b998:	b17e      	cbz	r6, 800b9ba <sulp+0x36>
 800b99a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b99e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	dd09      	ble.n	800b9ba <sulp+0x36>
 800b9a6:	051b      	lsls	r3, r3, #20
 800b9a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b9ac:	2400      	movs	r4, #0
 800b9ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	462b      	mov	r3, r5
 800b9b6:	f7f4 fe1f 	bl	80005f8 <__aeabi_dmul>
 800b9ba:	bd70      	pop	{r4, r5, r6, pc}
 800b9bc:	0000      	movs	r0, r0
	...

0800b9c0 <_strtod_l>:
 800b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	461f      	mov	r7, r3
 800b9c6:	b0a1      	sub	sp, #132	; 0x84
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4681      	mov	r9, r0
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	460e      	mov	r6, r1
 800b9d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b9d2:	931c      	str	r3, [sp, #112]	; 0x70
 800b9d4:	f002 fa2f 	bl	800de36 <__localeconv_l>
 800b9d8:	4680      	mov	r8, r0
 800b9da:	6800      	ldr	r0, [r0, #0]
 800b9dc:	f7f4 fbf8 	bl	80001d0 <strlen>
 800b9e0:	f04f 0a00 	mov.w	sl, #0
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	f04f 0b00 	mov.w	fp, #0
 800b9ea:	961b      	str	r6, [sp, #108]	; 0x6c
 800b9ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b9ee:	781a      	ldrb	r2, [r3, #0]
 800b9f0:	2a0d      	cmp	r2, #13
 800b9f2:	d832      	bhi.n	800ba5a <_strtod_l+0x9a>
 800b9f4:	2a09      	cmp	r2, #9
 800b9f6:	d236      	bcs.n	800ba66 <_strtod_l+0xa6>
 800b9f8:	2a00      	cmp	r2, #0
 800b9fa:	d03e      	beq.n	800ba7a <_strtod_l+0xba>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	930d      	str	r3, [sp, #52]	; 0x34
 800ba00:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ba02:	782b      	ldrb	r3, [r5, #0]
 800ba04:	2b30      	cmp	r3, #48	; 0x30
 800ba06:	f040 80ac 	bne.w	800bb62 <_strtod_l+0x1a2>
 800ba0a:	786b      	ldrb	r3, [r5, #1]
 800ba0c:	2b58      	cmp	r3, #88	; 0x58
 800ba0e:	d001      	beq.n	800ba14 <_strtod_l+0x54>
 800ba10:	2b78      	cmp	r3, #120	; 0x78
 800ba12:	d167      	bne.n	800bae4 <_strtod_l+0x124>
 800ba14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba16:	9301      	str	r3, [sp, #4]
 800ba18:	ab1c      	add	r3, sp, #112	; 0x70
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	9702      	str	r7, [sp, #8]
 800ba1e:	ab1d      	add	r3, sp, #116	; 0x74
 800ba20:	4a88      	ldr	r2, [pc, #544]	; (800bc44 <_strtod_l+0x284>)
 800ba22:	a91b      	add	r1, sp, #108	; 0x6c
 800ba24:	4648      	mov	r0, r9
 800ba26:	f001 ff2c 	bl	800d882 <__gethex>
 800ba2a:	f010 0407 	ands.w	r4, r0, #7
 800ba2e:	4606      	mov	r6, r0
 800ba30:	d005      	beq.n	800ba3e <_strtod_l+0x7e>
 800ba32:	2c06      	cmp	r4, #6
 800ba34:	d12b      	bne.n	800ba8e <_strtod_l+0xce>
 800ba36:	3501      	adds	r5, #1
 800ba38:	2300      	movs	r3, #0
 800ba3a:	951b      	str	r5, [sp, #108]	; 0x6c
 800ba3c:	930d      	str	r3, [sp, #52]	; 0x34
 800ba3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f040 859a 	bne.w	800c57a <_strtod_l+0xbba>
 800ba46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba48:	b1e3      	cbz	r3, 800ba84 <_strtod_l+0xc4>
 800ba4a:	4652      	mov	r2, sl
 800ba4c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ba50:	ec43 2b10 	vmov	d0, r2, r3
 800ba54:	b021      	add	sp, #132	; 0x84
 800ba56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5a:	2a2b      	cmp	r2, #43	; 0x2b
 800ba5c:	d015      	beq.n	800ba8a <_strtod_l+0xca>
 800ba5e:	2a2d      	cmp	r2, #45	; 0x2d
 800ba60:	d004      	beq.n	800ba6c <_strtod_l+0xac>
 800ba62:	2a20      	cmp	r2, #32
 800ba64:	d1ca      	bne.n	800b9fc <_strtod_l+0x3c>
 800ba66:	3301      	adds	r3, #1
 800ba68:	931b      	str	r3, [sp, #108]	; 0x6c
 800ba6a:	e7bf      	b.n	800b9ec <_strtod_l+0x2c>
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	920d      	str	r2, [sp, #52]	; 0x34
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	921b      	str	r2, [sp, #108]	; 0x6c
 800ba74:	785b      	ldrb	r3, [r3, #1]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1c2      	bne.n	800ba00 <_strtod_l+0x40>
 800ba7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba7c:	961b      	str	r6, [sp, #108]	; 0x6c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f040 8579 	bne.w	800c576 <_strtod_l+0xbb6>
 800ba84:	4652      	mov	r2, sl
 800ba86:	465b      	mov	r3, fp
 800ba88:	e7e2      	b.n	800ba50 <_strtod_l+0x90>
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	e7ef      	b.n	800ba6e <_strtod_l+0xae>
 800ba8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ba90:	b13a      	cbz	r2, 800baa2 <_strtod_l+0xe2>
 800ba92:	2135      	movs	r1, #53	; 0x35
 800ba94:	a81e      	add	r0, sp, #120	; 0x78
 800ba96:	f002 fe21 	bl	800e6dc <__copybits>
 800ba9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba9c:	4648      	mov	r0, r9
 800ba9e:	f002 fa8d 	bl	800dfbc <_Bfree>
 800baa2:	3c01      	subs	r4, #1
 800baa4:	2c04      	cmp	r4, #4
 800baa6:	d806      	bhi.n	800bab6 <_strtod_l+0xf6>
 800baa8:	e8df f004 	tbb	[pc, r4]
 800baac:	1714030a 	.word	0x1714030a
 800bab0:	0a          	.byte	0x0a
 800bab1:	00          	.byte	0x00
 800bab2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800bab6:	0730      	lsls	r0, r6, #28
 800bab8:	d5c1      	bpl.n	800ba3e <_strtod_l+0x7e>
 800baba:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800babe:	e7be      	b.n	800ba3e <_strtod_l+0x7e>
 800bac0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800bac4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bac6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800baca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bace:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bad2:	e7f0      	b.n	800bab6 <_strtod_l+0xf6>
 800bad4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bc48 <_strtod_l+0x288>
 800bad8:	e7ed      	b.n	800bab6 <_strtod_l+0xf6>
 800bada:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bade:	f04f 3aff 	mov.w	sl, #4294967295
 800bae2:	e7e8      	b.n	800bab6 <_strtod_l+0xf6>
 800bae4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	921b      	str	r2, [sp, #108]	; 0x6c
 800baea:	785b      	ldrb	r3, [r3, #1]
 800baec:	2b30      	cmp	r3, #48	; 0x30
 800baee:	d0f9      	beq.n	800bae4 <_strtod_l+0x124>
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d0a4      	beq.n	800ba3e <_strtod_l+0x7e>
 800baf4:	2301      	movs	r3, #1
 800baf6:	2500      	movs	r5, #0
 800baf8:	9306      	str	r3, [sp, #24]
 800bafa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bafc:	9308      	str	r3, [sp, #32]
 800bafe:	9507      	str	r5, [sp, #28]
 800bb00:	9505      	str	r5, [sp, #20]
 800bb02:	220a      	movs	r2, #10
 800bb04:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bb06:	7807      	ldrb	r7, [r0, #0]
 800bb08:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bb0c:	b2d9      	uxtb	r1, r3
 800bb0e:	2909      	cmp	r1, #9
 800bb10:	d929      	bls.n	800bb66 <_strtod_l+0x1a6>
 800bb12:	4622      	mov	r2, r4
 800bb14:	f8d8 1000 	ldr.w	r1, [r8]
 800bb18:	f003 f9b7 	bl	800ee8a <strncmp>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d031      	beq.n	800bb84 <_strtod_l+0x1c4>
 800bb20:	2000      	movs	r0, #0
 800bb22:	9c05      	ldr	r4, [sp, #20]
 800bb24:	9004      	str	r0, [sp, #16]
 800bb26:	463b      	mov	r3, r7
 800bb28:	4602      	mov	r2, r0
 800bb2a:	2b65      	cmp	r3, #101	; 0x65
 800bb2c:	d001      	beq.n	800bb32 <_strtod_l+0x172>
 800bb2e:	2b45      	cmp	r3, #69	; 0x45
 800bb30:	d114      	bne.n	800bb5c <_strtod_l+0x19c>
 800bb32:	b924      	cbnz	r4, 800bb3e <_strtod_l+0x17e>
 800bb34:	b910      	cbnz	r0, 800bb3c <_strtod_l+0x17c>
 800bb36:	9b06      	ldr	r3, [sp, #24]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d09e      	beq.n	800ba7a <_strtod_l+0xba>
 800bb3c:	2400      	movs	r4, #0
 800bb3e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bb40:	1c73      	adds	r3, r6, #1
 800bb42:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb44:	7873      	ldrb	r3, [r6, #1]
 800bb46:	2b2b      	cmp	r3, #43	; 0x2b
 800bb48:	d078      	beq.n	800bc3c <_strtod_l+0x27c>
 800bb4a:	2b2d      	cmp	r3, #45	; 0x2d
 800bb4c:	d070      	beq.n	800bc30 <_strtod_l+0x270>
 800bb4e:	f04f 0c00 	mov.w	ip, #0
 800bb52:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bb56:	2f09      	cmp	r7, #9
 800bb58:	d97c      	bls.n	800bc54 <_strtod_l+0x294>
 800bb5a:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb5c:	f04f 0e00 	mov.w	lr, #0
 800bb60:	e09a      	b.n	800bc98 <_strtod_l+0x2d8>
 800bb62:	2300      	movs	r3, #0
 800bb64:	e7c7      	b.n	800baf6 <_strtod_l+0x136>
 800bb66:	9905      	ldr	r1, [sp, #20]
 800bb68:	2908      	cmp	r1, #8
 800bb6a:	bfdd      	ittte	le
 800bb6c:	9907      	ldrle	r1, [sp, #28]
 800bb6e:	fb02 3301 	mlale	r3, r2, r1, r3
 800bb72:	9307      	strle	r3, [sp, #28]
 800bb74:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bb78:	9b05      	ldr	r3, [sp, #20]
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	9305      	str	r3, [sp, #20]
 800bb80:	901b      	str	r0, [sp, #108]	; 0x6c
 800bb82:	e7bf      	b.n	800bb04 <_strtod_l+0x144>
 800bb84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb86:	191a      	adds	r2, r3, r4
 800bb88:	921b      	str	r2, [sp, #108]	; 0x6c
 800bb8a:	9a05      	ldr	r2, [sp, #20]
 800bb8c:	5d1b      	ldrb	r3, [r3, r4]
 800bb8e:	2a00      	cmp	r2, #0
 800bb90:	d037      	beq.n	800bc02 <_strtod_l+0x242>
 800bb92:	9c05      	ldr	r4, [sp, #20]
 800bb94:	4602      	mov	r2, r0
 800bb96:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bb9a:	2909      	cmp	r1, #9
 800bb9c:	d913      	bls.n	800bbc6 <_strtod_l+0x206>
 800bb9e:	2101      	movs	r1, #1
 800bba0:	9104      	str	r1, [sp, #16]
 800bba2:	e7c2      	b.n	800bb2a <_strtod_l+0x16a>
 800bba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	921b      	str	r2, [sp, #108]	; 0x6c
 800bbaa:	785b      	ldrb	r3, [r3, #1]
 800bbac:	3001      	adds	r0, #1
 800bbae:	2b30      	cmp	r3, #48	; 0x30
 800bbb0:	d0f8      	beq.n	800bba4 <_strtod_l+0x1e4>
 800bbb2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bbb6:	2a08      	cmp	r2, #8
 800bbb8:	f200 84e4 	bhi.w	800c584 <_strtod_l+0xbc4>
 800bbbc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bbbe:	9208      	str	r2, [sp, #32]
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bbca:	f100 0101 	add.w	r1, r0, #1
 800bbce:	d012      	beq.n	800bbf6 <_strtod_l+0x236>
 800bbd0:	440a      	add	r2, r1
 800bbd2:	eb00 0c04 	add.w	ip, r0, r4
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	270a      	movs	r7, #10
 800bbda:	458c      	cmp	ip, r1
 800bbdc:	d113      	bne.n	800bc06 <_strtod_l+0x246>
 800bbde:	1821      	adds	r1, r4, r0
 800bbe0:	2908      	cmp	r1, #8
 800bbe2:	f104 0401 	add.w	r4, r4, #1
 800bbe6:	4404      	add	r4, r0
 800bbe8:	dc19      	bgt.n	800bc1e <_strtod_l+0x25e>
 800bbea:	9b07      	ldr	r3, [sp, #28]
 800bbec:	210a      	movs	r1, #10
 800bbee:	fb01 e303 	mla	r3, r1, r3, lr
 800bbf2:	9307      	str	r3, [sp, #28]
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bbf8:	1c58      	adds	r0, r3, #1
 800bbfa:	901b      	str	r0, [sp, #108]	; 0x6c
 800bbfc:	785b      	ldrb	r3, [r3, #1]
 800bbfe:	4608      	mov	r0, r1
 800bc00:	e7c9      	b.n	800bb96 <_strtod_l+0x1d6>
 800bc02:	9805      	ldr	r0, [sp, #20]
 800bc04:	e7d3      	b.n	800bbae <_strtod_l+0x1ee>
 800bc06:	2908      	cmp	r1, #8
 800bc08:	f101 0101 	add.w	r1, r1, #1
 800bc0c:	dc03      	bgt.n	800bc16 <_strtod_l+0x256>
 800bc0e:	9b07      	ldr	r3, [sp, #28]
 800bc10:	437b      	muls	r3, r7
 800bc12:	9307      	str	r3, [sp, #28]
 800bc14:	e7e1      	b.n	800bbda <_strtod_l+0x21a>
 800bc16:	2910      	cmp	r1, #16
 800bc18:	bfd8      	it	le
 800bc1a:	437d      	mulle	r5, r7
 800bc1c:	e7dd      	b.n	800bbda <_strtod_l+0x21a>
 800bc1e:	2c10      	cmp	r4, #16
 800bc20:	bfdc      	itt	le
 800bc22:	210a      	movle	r1, #10
 800bc24:	fb01 e505 	mlale	r5, r1, r5, lr
 800bc28:	e7e4      	b.n	800bbf4 <_strtod_l+0x234>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	9304      	str	r3, [sp, #16]
 800bc2e:	e781      	b.n	800bb34 <_strtod_l+0x174>
 800bc30:	f04f 0c01 	mov.w	ip, #1
 800bc34:	1cb3      	adds	r3, r6, #2
 800bc36:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc38:	78b3      	ldrb	r3, [r6, #2]
 800bc3a:	e78a      	b.n	800bb52 <_strtod_l+0x192>
 800bc3c:	f04f 0c00 	mov.w	ip, #0
 800bc40:	e7f8      	b.n	800bc34 <_strtod_l+0x274>
 800bc42:	bf00      	nop
 800bc44:	08010590 	.word	0x08010590
 800bc48:	7ff00000 	.word	0x7ff00000
 800bc4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc4e:	1c5f      	adds	r7, r3, #1
 800bc50:	971b      	str	r7, [sp, #108]	; 0x6c
 800bc52:	785b      	ldrb	r3, [r3, #1]
 800bc54:	2b30      	cmp	r3, #48	; 0x30
 800bc56:	d0f9      	beq.n	800bc4c <_strtod_l+0x28c>
 800bc58:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800bc5c:	2f08      	cmp	r7, #8
 800bc5e:	f63f af7d 	bhi.w	800bb5c <_strtod_l+0x19c>
 800bc62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bc66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc68:	930a      	str	r3, [sp, #40]	; 0x28
 800bc6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc6c:	1c5f      	adds	r7, r3, #1
 800bc6e:	971b      	str	r7, [sp, #108]	; 0x6c
 800bc70:	785b      	ldrb	r3, [r3, #1]
 800bc72:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800bc76:	f1b8 0f09 	cmp.w	r8, #9
 800bc7a:	d937      	bls.n	800bcec <_strtod_l+0x32c>
 800bc7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bc7e:	1a7f      	subs	r7, r7, r1
 800bc80:	2f08      	cmp	r7, #8
 800bc82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bc86:	dc37      	bgt.n	800bcf8 <_strtod_l+0x338>
 800bc88:	45be      	cmp	lr, r7
 800bc8a:	bfa8      	it	ge
 800bc8c:	46be      	movge	lr, r7
 800bc8e:	f1bc 0f00 	cmp.w	ip, #0
 800bc92:	d001      	beq.n	800bc98 <_strtod_l+0x2d8>
 800bc94:	f1ce 0e00 	rsb	lr, lr, #0
 800bc98:	2c00      	cmp	r4, #0
 800bc9a:	d151      	bne.n	800bd40 <_strtod_l+0x380>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	f47f aece 	bne.w	800ba3e <_strtod_l+0x7e>
 800bca2:	9a06      	ldr	r2, [sp, #24]
 800bca4:	2a00      	cmp	r2, #0
 800bca6:	f47f aeca 	bne.w	800ba3e <_strtod_l+0x7e>
 800bcaa:	9a04      	ldr	r2, [sp, #16]
 800bcac:	2a00      	cmp	r2, #0
 800bcae:	f47f aee4 	bne.w	800ba7a <_strtod_l+0xba>
 800bcb2:	2b4e      	cmp	r3, #78	; 0x4e
 800bcb4:	d027      	beq.n	800bd06 <_strtod_l+0x346>
 800bcb6:	dc21      	bgt.n	800bcfc <_strtod_l+0x33c>
 800bcb8:	2b49      	cmp	r3, #73	; 0x49
 800bcba:	f47f aede 	bne.w	800ba7a <_strtod_l+0xba>
 800bcbe:	49a0      	ldr	r1, [pc, #640]	; (800bf40 <_strtod_l+0x580>)
 800bcc0:	a81b      	add	r0, sp, #108	; 0x6c
 800bcc2:	f002 f811 	bl	800dce8 <__match>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	f43f aed7 	beq.w	800ba7a <_strtod_l+0xba>
 800bccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcce:	499d      	ldr	r1, [pc, #628]	; (800bf44 <_strtod_l+0x584>)
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	a81b      	add	r0, sp, #108	; 0x6c
 800bcd4:	931b      	str	r3, [sp, #108]	; 0x6c
 800bcd6:	f002 f807 	bl	800dce8 <__match>
 800bcda:	b910      	cbnz	r0, 800bce2 <_strtod_l+0x322>
 800bcdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcde:	3301      	adds	r3, #1
 800bce0:	931b      	str	r3, [sp, #108]	; 0x6c
 800bce2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800bf58 <_strtod_l+0x598>
 800bce6:	f04f 0a00 	mov.w	sl, #0
 800bcea:	e6a8      	b.n	800ba3e <_strtod_l+0x7e>
 800bcec:	210a      	movs	r1, #10
 800bcee:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bcf2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bcf6:	e7b8      	b.n	800bc6a <_strtod_l+0x2aa>
 800bcf8:	46be      	mov	lr, r7
 800bcfa:	e7c8      	b.n	800bc8e <_strtod_l+0x2ce>
 800bcfc:	2b69      	cmp	r3, #105	; 0x69
 800bcfe:	d0de      	beq.n	800bcbe <_strtod_l+0x2fe>
 800bd00:	2b6e      	cmp	r3, #110	; 0x6e
 800bd02:	f47f aeba 	bne.w	800ba7a <_strtod_l+0xba>
 800bd06:	4990      	ldr	r1, [pc, #576]	; (800bf48 <_strtod_l+0x588>)
 800bd08:	a81b      	add	r0, sp, #108	; 0x6c
 800bd0a:	f001 ffed 	bl	800dce8 <__match>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	f43f aeb3 	beq.w	800ba7a <_strtod_l+0xba>
 800bd14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	2b28      	cmp	r3, #40	; 0x28
 800bd1a:	d10e      	bne.n	800bd3a <_strtod_l+0x37a>
 800bd1c:	aa1e      	add	r2, sp, #120	; 0x78
 800bd1e:	498b      	ldr	r1, [pc, #556]	; (800bf4c <_strtod_l+0x58c>)
 800bd20:	a81b      	add	r0, sp, #108	; 0x6c
 800bd22:	f001 fff5 	bl	800dd10 <__hexnan>
 800bd26:	2805      	cmp	r0, #5
 800bd28:	d107      	bne.n	800bd3a <_strtod_l+0x37a>
 800bd2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bd2c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800bd30:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bd34:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bd38:	e681      	b.n	800ba3e <_strtod_l+0x7e>
 800bd3a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800bf60 <_strtod_l+0x5a0>
 800bd3e:	e7d2      	b.n	800bce6 <_strtod_l+0x326>
 800bd40:	ebae 0302 	sub.w	r3, lr, r2
 800bd44:	9306      	str	r3, [sp, #24]
 800bd46:	9b05      	ldr	r3, [sp, #20]
 800bd48:	9807      	ldr	r0, [sp, #28]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	bf08      	it	eq
 800bd4e:	4623      	moveq	r3, r4
 800bd50:	2c10      	cmp	r4, #16
 800bd52:	9305      	str	r3, [sp, #20]
 800bd54:	46a0      	mov	r8, r4
 800bd56:	bfa8      	it	ge
 800bd58:	f04f 0810 	movge.w	r8, #16
 800bd5c:	f7f4 fbd2 	bl	8000504 <__aeabi_ui2d>
 800bd60:	2c09      	cmp	r4, #9
 800bd62:	4682      	mov	sl, r0
 800bd64:	468b      	mov	fp, r1
 800bd66:	dc13      	bgt.n	800bd90 <_strtod_l+0x3d0>
 800bd68:	9b06      	ldr	r3, [sp, #24]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f43f ae67 	beq.w	800ba3e <_strtod_l+0x7e>
 800bd70:	9b06      	ldr	r3, [sp, #24]
 800bd72:	dd7a      	ble.n	800be6a <_strtod_l+0x4aa>
 800bd74:	2b16      	cmp	r3, #22
 800bd76:	dc61      	bgt.n	800be3c <_strtod_l+0x47c>
 800bd78:	4a75      	ldr	r2, [pc, #468]	; (800bf50 <_strtod_l+0x590>)
 800bd7a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800bd7e:	e9de 0100 	ldrd	r0, r1, [lr]
 800bd82:	4652      	mov	r2, sl
 800bd84:	465b      	mov	r3, fp
 800bd86:	f7f4 fc37 	bl	80005f8 <__aeabi_dmul>
 800bd8a:	4682      	mov	sl, r0
 800bd8c:	468b      	mov	fp, r1
 800bd8e:	e656      	b.n	800ba3e <_strtod_l+0x7e>
 800bd90:	4b6f      	ldr	r3, [pc, #444]	; (800bf50 <_strtod_l+0x590>)
 800bd92:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bd96:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bd9a:	f7f4 fc2d 	bl	80005f8 <__aeabi_dmul>
 800bd9e:	4606      	mov	r6, r0
 800bda0:	4628      	mov	r0, r5
 800bda2:	460f      	mov	r7, r1
 800bda4:	f7f4 fbae 	bl	8000504 <__aeabi_ui2d>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	460b      	mov	r3, r1
 800bdac:	4630      	mov	r0, r6
 800bdae:	4639      	mov	r1, r7
 800bdb0:	f7f4 fa6c 	bl	800028c <__adddf3>
 800bdb4:	2c0f      	cmp	r4, #15
 800bdb6:	4682      	mov	sl, r0
 800bdb8:	468b      	mov	fp, r1
 800bdba:	ddd5      	ble.n	800bd68 <_strtod_l+0x3a8>
 800bdbc:	9b06      	ldr	r3, [sp, #24]
 800bdbe:	eba4 0808 	sub.w	r8, r4, r8
 800bdc2:	4498      	add	r8, r3
 800bdc4:	f1b8 0f00 	cmp.w	r8, #0
 800bdc8:	f340 8096 	ble.w	800bef8 <_strtod_l+0x538>
 800bdcc:	f018 030f 	ands.w	r3, r8, #15
 800bdd0:	d00a      	beq.n	800bde8 <_strtod_l+0x428>
 800bdd2:	495f      	ldr	r1, [pc, #380]	; (800bf50 <_strtod_l+0x590>)
 800bdd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bdd8:	4652      	mov	r2, sl
 800bdda:	465b      	mov	r3, fp
 800bddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bde0:	f7f4 fc0a 	bl	80005f8 <__aeabi_dmul>
 800bde4:	4682      	mov	sl, r0
 800bde6:	468b      	mov	fp, r1
 800bde8:	f038 080f 	bics.w	r8, r8, #15
 800bdec:	d073      	beq.n	800bed6 <_strtod_l+0x516>
 800bdee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bdf2:	dd47      	ble.n	800be84 <_strtod_l+0x4c4>
 800bdf4:	2400      	movs	r4, #0
 800bdf6:	46a0      	mov	r8, r4
 800bdf8:	9407      	str	r4, [sp, #28]
 800bdfa:	9405      	str	r4, [sp, #20]
 800bdfc:	2322      	movs	r3, #34	; 0x22
 800bdfe:	f8df b158 	ldr.w	fp, [pc, #344]	; 800bf58 <_strtod_l+0x598>
 800be02:	f8c9 3000 	str.w	r3, [r9]
 800be06:	f04f 0a00 	mov.w	sl, #0
 800be0a:	9b07      	ldr	r3, [sp, #28]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f43f ae16 	beq.w	800ba3e <_strtod_l+0x7e>
 800be12:	991c      	ldr	r1, [sp, #112]	; 0x70
 800be14:	4648      	mov	r0, r9
 800be16:	f002 f8d1 	bl	800dfbc <_Bfree>
 800be1a:	9905      	ldr	r1, [sp, #20]
 800be1c:	4648      	mov	r0, r9
 800be1e:	f002 f8cd 	bl	800dfbc <_Bfree>
 800be22:	4641      	mov	r1, r8
 800be24:	4648      	mov	r0, r9
 800be26:	f002 f8c9 	bl	800dfbc <_Bfree>
 800be2a:	9907      	ldr	r1, [sp, #28]
 800be2c:	4648      	mov	r0, r9
 800be2e:	f002 f8c5 	bl	800dfbc <_Bfree>
 800be32:	4621      	mov	r1, r4
 800be34:	4648      	mov	r0, r9
 800be36:	f002 f8c1 	bl	800dfbc <_Bfree>
 800be3a:	e600      	b.n	800ba3e <_strtod_l+0x7e>
 800be3c:	9a06      	ldr	r2, [sp, #24]
 800be3e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800be42:	4293      	cmp	r3, r2
 800be44:	dbba      	blt.n	800bdbc <_strtod_l+0x3fc>
 800be46:	4d42      	ldr	r5, [pc, #264]	; (800bf50 <_strtod_l+0x590>)
 800be48:	f1c4 040f 	rsb	r4, r4, #15
 800be4c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800be50:	4652      	mov	r2, sl
 800be52:	465b      	mov	r3, fp
 800be54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be58:	f7f4 fbce 	bl	80005f8 <__aeabi_dmul>
 800be5c:	9b06      	ldr	r3, [sp, #24]
 800be5e:	1b1c      	subs	r4, r3, r4
 800be60:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800be64:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be68:	e78d      	b.n	800bd86 <_strtod_l+0x3c6>
 800be6a:	f113 0f16 	cmn.w	r3, #22
 800be6e:	dba5      	blt.n	800bdbc <_strtod_l+0x3fc>
 800be70:	4a37      	ldr	r2, [pc, #220]	; (800bf50 <_strtod_l+0x590>)
 800be72:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800be76:	e9d2 2300 	ldrd	r2, r3, [r2]
 800be7a:	4650      	mov	r0, sl
 800be7c:	4659      	mov	r1, fp
 800be7e:	f7f4 fce5 	bl	800084c <__aeabi_ddiv>
 800be82:	e782      	b.n	800bd8a <_strtod_l+0x3ca>
 800be84:	2300      	movs	r3, #0
 800be86:	4e33      	ldr	r6, [pc, #204]	; (800bf54 <_strtod_l+0x594>)
 800be88:	ea4f 1828 	mov.w	r8, r8, asr #4
 800be8c:	4650      	mov	r0, sl
 800be8e:	4659      	mov	r1, fp
 800be90:	461d      	mov	r5, r3
 800be92:	f1b8 0f01 	cmp.w	r8, #1
 800be96:	dc21      	bgt.n	800bedc <_strtod_l+0x51c>
 800be98:	b10b      	cbz	r3, 800be9e <_strtod_l+0x4de>
 800be9a:	4682      	mov	sl, r0
 800be9c:	468b      	mov	fp, r1
 800be9e:	4b2d      	ldr	r3, [pc, #180]	; (800bf54 <_strtod_l+0x594>)
 800bea0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bea4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bea8:	4652      	mov	r2, sl
 800beaa:	465b      	mov	r3, fp
 800beac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800beb0:	f7f4 fba2 	bl	80005f8 <__aeabi_dmul>
 800beb4:	4b28      	ldr	r3, [pc, #160]	; (800bf58 <_strtod_l+0x598>)
 800beb6:	460a      	mov	r2, r1
 800beb8:	400b      	ands	r3, r1
 800beba:	4928      	ldr	r1, [pc, #160]	; (800bf5c <_strtod_l+0x59c>)
 800bebc:	428b      	cmp	r3, r1
 800bebe:	4682      	mov	sl, r0
 800bec0:	d898      	bhi.n	800bdf4 <_strtod_l+0x434>
 800bec2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bec6:	428b      	cmp	r3, r1
 800bec8:	bf86      	itte	hi
 800beca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bf64 <_strtod_l+0x5a4>
 800bece:	f04f 3aff 	movhi.w	sl, #4294967295
 800bed2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bed6:	2300      	movs	r3, #0
 800bed8:	9304      	str	r3, [sp, #16]
 800beda:	e077      	b.n	800bfcc <_strtod_l+0x60c>
 800bedc:	f018 0f01 	tst.w	r8, #1
 800bee0:	d006      	beq.n	800bef0 <_strtod_l+0x530>
 800bee2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	f7f4 fb85 	bl	80005f8 <__aeabi_dmul>
 800beee:	2301      	movs	r3, #1
 800bef0:	3501      	adds	r5, #1
 800bef2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bef6:	e7cc      	b.n	800be92 <_strtod_l+0x4d2>
 800bef8:	d0ed      	beq.n	800bed6 <_strtod_l+0x516>
 800befa:	f1c8 0800 	rsb	r8, r8, #0
 800befe:	f018 020f 	ands.w	r2, r8, #15
 800bf02:	d00a      	beq.n	800bf1a <_strtod_l+0x55a>
 800bf04:	4b12      	ldr	r3, [pc, #72]	; (800bf50 <_strtod_l+0x590>)
 800bf06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf0a:	4650      	mov	r0, sl
 800bf0c:	4659      	mov	r1, fp
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	f7f4 fc9b 	bl	800084c <__aeabi_ddiv>
 800bf16:	4682      	mov	sl, r0
 800bf18:	468b      	mov	fp, r1
 800bf1a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bf1e:	d0da      	beq.n	800bed6 <_strtod_l+0x516>
 800bf20:	f1b8 0f1f 	cmp.w	r8, #31
 800bf24:	dd20      	ble.n	800bf68 <_strtod_l+0x5a8>
 800bf26:	2400      	movs	r4, #0
 800bf28:	46a0      	mov	r8, r4
 800bf2a:	9407      	str	r4, [sp, #28]
 800bf2c:	9405      	str	r4, [sp, #20]
 800bf2e:	2322      	movs	r3, #34	; 0x22
 800bf30:	f04f 0a00 	mov.w	sl, #0
 800bf34:	f04f 0b00 	mov.w	fp, #0
 800bf38:	f8c9 3000 	str.w	r3, [r9]
 800bf3c:	e765      	b.n	800be0a <_strtod_l+0x44a>
 800bf3e:	bf00      	nop
 800bf40:	08010559 	.word	0x08010559
 800bf44:	080105e3 	.word	0x080105e3
 800bf48:	08010561 	.word	0x08010561
 800bf4c:	080105a4 	.word	0x080105a4
 800bf50:	08010688 	.word	0x08010688
 800bf54:	08010660 	.word	0x08010660
 800bf58:	7ff00000 	.word	0x7ff00000
 800bf5c:	7ca00000 	.word	0x7ca00000
 800bf60:	fff80000 	.word	0xfff80000
 800bf64:	7fefffff 	.word	0x7fefffff
 800bf68:	f018 0310 	ands.w	r3, r8, #16
 800bf6c:	bf18      	it	ne
 800bf6e:	236a      	movne	r3, #106	; 0x6a
 800bf70:	4da0      	ldr	r5, [pc, #640]	; (800c1f4 <_strtod_l+0x834>)
 800bf72:	9304      	str	r3, [sp, #16]
 800bf74:	4650      	mov	r0, sl
 800bf76:	4659      	mov	r1, fp
 800bf78:	2300      	movs	r3, #0
 800bf7a:	f1b8 0f00 	cmp.w	r8, #0
 800bf7e:	f300 810a 	bgt.w	800c196 <_strtod_l+0x7d6>
 800bf82:	b10b      	cbz	r3, 800bf88 <_strtod_l+0x5c8>
 800bf84:	4682      	mov	sl, r0
 800bf86:	468b      	mov	fp, r1
 800bf88:	9b04      	ldr	r3, [sp, #16]
 800bf8a:	b1bb      	cbz	r3, 800bfbc <_strtod_l+0x5fc>
 800bf8c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bf90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	4659      	mov	r1, fp
 800bf98:	dd10      	ble.n	800bfbc <_strtod_l+0x5fc>
 800bf9a:	2b1f      	cmp	r3, #31
 800bf9c:	f340 8107 	ble.w	800c1ae <_strtod_l+0x7ee>
 800bfa0:	2b34      	cmp	r3, #52	; 0x34
 800bfa2:	bfde      	ittt	le
 800bfa4:	3b20      	suble	r3, #32
 800bfa6:	f04f 32ff 	movle.w	r2, #4294967295
 800bfaa:	fa02 f303 	lslle.w	r3, r2, r3
 800bfae:	f04f 0a00 	mov.w	sl, #0
 800bfb2:	bfcc      	ite	gt
 800bfb4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bfb8:	ea03 0b01 	andle.w	fp, r3, r1
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	4650      	mov	r0, sl
 800bfc2:	4659      	mov	r1, fp
 800bfc4:	f7f4 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d1ac      	bne.n	800bf26 <_strtod_l+0x566>
 800bfcc:	9b07      	ldr	r3, [sp, #28]
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	9a05      	ldr	r2, [sp, #20]
 800bfd2:	9908      	ldr	r1, [sp, #32]
 800bfd4:	4623      	mov	r3, r4
 800bfd6:	4648      	mov	r0, r9
 800bfd8:	f002 f842 	bl	800e060 <__s2b>
 800bfdc:	9007      	str	r0, [sp, #28]
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	f43f af08 	beq.w	800bdf4 <_strtod_l+0x434>
 800bfe4:	9a06      	ldr	r2, [sp, #24]
 800bfe6:	9b06      	ldr	r3, [sp, #24]
 800bfe8:	2a00      	cmp	r2, #0
 800bfea:	f1c3 0300 	rsb	r3, r3, #0
 800bfee:	bfa8      	it	ge
 800bff0:	2300      	movge	r3, #0
 800bff2:	930e      	str	r3, [sp, #56]	; 0x38
 800bff4:	2400      	movs	r4, #0
 800bff6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bffa:	9316      	str	r3, [sp, #88]	; 0x58
 800bffc:	46a0      	mov	r8, r4
 800bffe:	9b07      	ldr	r3, [sp, #28]
 800c000:	4648      	mov	r0, r9
 800c002:	6859      	ldr	r1, [r3, #4]
 800c004:	f001 ffa6 	bl	800df54 <_Balloc>
 800c008:	9005      	str	r0, [sp, #20]
 800c00a:	2800      	cmp	r0, #0
 800c00c:	f43f aef6 	beq.w	800bdfc <_strtod_l+0x43c>
 800c010:	9b07      	ldr	r3, [sp, #28]
 800c012:	691a      	ldr	r2, [r3, #16]
 800c014:	3202      	adds	r2, #2
 800c016:	f103 010c 	add.w	r1, r3, #12
 800c01a:	0092      	lsls	r2, r2, #2
 800c01c:	300c      	adds	r0, #12
 800c01e:	f7fe fdbd 	bl	800ab9c <memcpy>
 800c022:	aa1e      	add	r2, sp, #120	; 0x78
 800c024:	a91d      	add	r1, sp, #116	; 0x74
 800c026:	ec4b ab10 	vmov	d0, sl, fp
 800c02a:	4648      	mov	r0, r9
 800c02c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c030:	f002 fad2 	bl	800e5d8 <__d2b>
 800c034:	901c      	str	r0, [sp, #112]	; 0x70
 800c036:	2800      	cmp	r0, #0
 800c038:	f43f aee0 	beq.w	800bdfc <_strtod_l+0x43c>
 800c03c:	2101      	movs	r1, #1
 800c03e:	4648      	mov	r0, r9
 800c040:	f002 f89a 	bl	800e178 <__i2b>
 800c044:	4680      	mov	r8, r0
 800c046:	2800      	cmp	r0, #0
 800c048:	f43f aed8 	beq.w	800bdfc <_strtod_l+0x43c>
 800c04c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c04e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c050:	2e00      	cmp	r6, #0
 800c052:	bfab      	itete	ge
 800c054:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c056:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c058:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c05a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c05c:	bfac      	ite	ge
 800c05e:	18f7      	addge	r7, r6, r3
 800c060:	1b9d      	sublt	r5, r3, r6
 800c062:	9b04      	ldr	r3, [sp, #16]
 800c064:	1af6      	subs	r6, r6, r3
 800c066:	4416      	add	r6, r2
 800c068:	4b63      	ldr	r3, [pc, #396]	; (800c1f8 <_strtod_l+0x838>)
 800c06a:	3e01      	subs	r6, #1
 800c06c:	429e      	cmp	r6, r3
 800c06e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c072:	f280 80af 	bge.w	800c1d4 <_strtod_l+0x814>
 800c076:	1b9b      	subs	r3, r3, r6
 800c078:	2b1f      	cmp	r3, #31
 800c07a:	eba2 0203 	sub.w	r2, r2, r3
 800c07e:	f04f 0101 	mov.w	r1, #1
 800c082:	f300 809b 	bgt.w	800c1bc <_strtod_l+0x7fc>
 800c086:	fa01 f303 	lsl.w	r3, r1, r3
 800c08a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c08c:	2300      	movs	r3, #0
 800c08e:	930a      	str	r3, [sp, #40]	; 0x28
 800c090:	18be      	adds	r6, r7, r2
 800c092:	9b04      	ldr	r3, [sp, #16]
 800c094:	42b7      	cmp	r7, r6
 800c096:	4415      	add	r5, r2
 800c098:	441d      	add	r5, r3
 800c09a:	463b      	mov	r3, r7
 800c09c:	bfa8      	it	ge
 800c09e:	4633      	movge	r3, r6
 800c0a0:	42ab      	cmp	r3, r5
 800c0a2:	bfa8      	it	ge
 800c0a4:	462b      	movge	r3, r5
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	bfc2      	ittt	gt
 800c0aa:	1af6      	subgt	r6, r6, r3
 800c0ac:	1aed      	subgt	r5, r5, r3
 800c0ae:	1aff      	subgt	r7, r7, r3
 800c0b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0b2:	b1bb      	cbz	r3, 800c0e4 <_strtod_l+0x724>
 800c0b4:	4641      	mov	r1, r8
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	4648      	mov	r0, r9
 800c0ba:	f002 f8fd 	bl	800e2b8 <__pow5mult>
 800c0be:	4680      	mov	r8, r0
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	f43f ae9b 	beq.w	800bdfc <_strtod_l+0x43c>
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c0ca:	4648      	mov	r0, r9
 800c0cc:	f002 f85d 	bl	800e18a <__multiply>
 800c0d0:	900c      	str	r0, [sp, #48]	; 0x30
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	f43f ae92 	beq.w	800bdfc <_strtod_l+0x43c>
 800c0d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c0da:	4648      	mov	r0, r9
 800c0dc:	f001 ff6e 	bl	800dfbc <_Bfree>
 800c0e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0e2:	931c      	str	r3, [sp, #112]	; 0x70
 800c0e4:	2e00      	cmp	r6, #0
 800c0e6:	dc7a      	bgt.n	800c1de <_strtod_l+0x81e>
 800c0e8:	9b06      	ldr	r3, [sp, #24]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	dd08      	ble.n	800c100 <_strtod_l+0x740>
 800c0ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c0f0:	9905      	ldr	r1, [sp, #20]
 800c0f2:	4648      	mov	r0, r9
 800c0f4:	f002 f8e0 	bl	800e2b8 <__pow5mult>
 800c0f8:	9005      	str	r0, [sp, #20]
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	f43f ae7e 	beq.w	800bdfc <_strtod_l+0x43c>
 800c100:	2d00      	cmp	r5, #0
 800c102:	dd08      	ble.n	800c116 <_strtod_l+0x756>
 800c104:	462a      	mov	r2, r5
 800c106:	9905      	ldr	r1, [sp, #20]
 800c108:	4648      	mov	r0, r9
 800c10a:	f002 f923 	bl	800e354 <__lshift>
 800c10e:	9005      	str	r0, [sp, #20]
 800c110:	2800      	cmp	r0, #0
 800c112:	f43f ae73 	beq.w	800bdfc <_strtod_l+0x43c>
 800c116:	2f00      	cmp	r7, #0
 800c118:	dd08      	ble.n	800c12c <_strtod_l+0x76c>
 800c11a:	4641      	mov	r1, r8
 800c11c:	463a      	mov	r2, r7
 800c11e:	4648      	mov	r0, r9
 800c120:	f002 f918 	bl	800e354 <__lshift>
 800c124:	4680      	mov	r8, r0
 800c126:	2800      	cmp	r0, #0
 800c128:	f43f ae68 	beq.w	800bdfc <_strtod_l+0x43c>
 800c12c:	9a05      	ldr	r2, [sp, #20]
 800c12e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c130:	4648      	mov	r0, r9
 800c132:	f002 f97d 	bl	800e430 <__mdiff>
 800c136:	4604      	mov	r4, r0
 800c138:	2800      	cmp	r0, #0
 800c13a:	f43f ae5f 	beq.w	800bdfc <_strtod_l+0x43c>
 800c13e:	68c3      	ldr	r3, [r0, #12]
 800c140:	930c      	str	r3, [sp, #48]	; 0x30
 800c142:	2300      	movs	r3, #0
 800c144:	60c3      	str	r3, [r0, #12]
 800c146:	4641      	mov	r1, r8
 800c148:	f002 f958 	bl	800e3fc <__mcmp>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	da55      	bge.n	800c1fc <_strtod_l+0x83c>
 800c150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c152:	b9e3      	cbnz	r3, 800c18e <_strtod_l+0x7ce>
 800c154:	f1ba 0f00 	cmp.w	sl, #0
 800c158:	d119      	bne.n	800c18e <_strtod_l+0x7ce>
 800c15a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c15e:	b9b3      	cbnz	r3, 800c18e <_strtod_l+0x7ce>
 800c160:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c164:	0d1b      	lsrs	r3, r3, #20
 800c166:	051b      	lsls	r3, r3, #20
 800c168:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c16c:	d90f      	bls.n	800c18e <_strtod_l+0x7ce>
 800c16e:	6963      	ldr	r3, [r4, #20]
 800c170:	b913      	cbnz	r3, 800c178 <_strtod_l+0x7b8>
 800c172:	6923      	ldr	r3, [r4, #16]
 800c174:	2b01      	cmp	r3, #1
 800c176:	dd0a      	ble.n	800c18e <_strtod_l+0x7ce>
 800c178:	4621      	mov	r1, r4
 800c17a:	2201      	movs	r2, #1
 800c17c:	4648      	mov	r0, r9
 800c17e:	f002 f8e9 	bl	800e354 <__lshift>
 800c182:	4641      	mov	r1, r8
 800c184:	4604      	mov	r4, r0
 800c186:	f002 f939 	bl	800e3fc <__mcmp>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	dc67      	bgt.n	800c25e <_strtod_l+0x89e>
 800c18e:	9b04      	ldr	r3, [sp, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d171      	bne.n	800c278 <_strtod_l+0x8b8>
 800c194:	e63d      	b.n	800be12 <_strtod_l+0x452>
 800c196:	f018 0f01 	tst.w	r8, #1
 800c19a:	d004      	beq.n	800c1a6 <_strtod_l+0x7e6>
 800c19c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1a0:	f7f4 fa2a 	bl	80005f8 <__aeabi_dmul>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c1aa:	3508      	adds	r5, #8
 800c1ac:	e6e5      	b.n	800bf7a <_strtod_l+0x5ba>
 800c1ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b6:	ea03 0a0a 	and.w	sl, r3, sl
 800c1ba:	e6ff      	b.n	800bfbc <_strtod_l+0x5fc>
 800c1bc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c1c0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c1c4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c1c8:	36e2      	adds	r6, #226	; 0xe2
 800c1ca:	fa01 f306 	lsl.w	r3, r1, r6
 800c1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d0:	910f      	str	r1, [sp, #60]	; 0x3c
 800c1d2:	e75d      	b.n	800c090 <_strtod_l+0x6d0>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d8:	2301      	movs	r3, #1
 800c1da:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1dc:	e758      	b.n	800c090 <_strtod_l+0x6d0>
 800c1de:	4632      	mov	r2, r6
 800c1e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c1e2:	4648      	mov	r0, r9
 800c1e4:	f002 f8b6 	bl	800e354 <__lshift>
 800c1e8:	901c      	str	r0, [sp, #112]	; 0x70
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	f47f af7c 	bne.w	800c0e8 <_strtod_l+0x728>
 800c1f0:	e604      	b.n	800bdfc <_strtod_l+0x43c>
 800c1f2:	bf00      	nop
 800c1f4:	080105b8 	.word	0x080105b8
 800c1f8:	fffffc02 	.word	0xfffffc02
 800c1fc:	465d      	mov	r5, fp
 800c1fe:	f040 8086 	bne.w	800c30e <_strtod_l+0x94e>
 800c202:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c204:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c208:	b32a      	cbz	r2, 800c256 <_strtod_l+0x896>
 800c20a:	4aaf      	ldr	r2, [pc, #700]	; (800c4c8 <_strtod_l+0xb08>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d153      	bne.n	800c2b8 <_strtod_l+0x8f8>
 800c210:	9b04      	ldr	r3, [sp, #16]
 800c212:	4650      	mov	r0, sl
 800c214:	b1d3      	cbz	r3, 800c24c <_strtod_l+0x88c>
 800c216:	4aad      	ldr	r2, [pc, #692]	; (800c4cc <_strtod_l+0xb0c>)
 800c218:	402a      	ands	r2, r5
 800c21a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c21e:	f04f 31ff 	mov.w	r1, #4294967295
 800c222:	d816      	bhi.n	800c252 <_strtod_l+0x892>
 800c224:	0d12      	lsrs	r2, r2, #20
 800c226:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c22a:	fa01 f303 	lsl.w	r3, r1, r3
 800c22e:	4298      	cmp	r0, r3
 800c230:	d142      	bne.n	800c2b8 <_strtod_l+0x8f8>
 800c232:	4ba7      	ldr	r3, [pc, #668]	; (800c4d0 <_strtod_l+0xb10>)
 800c234:	429d      	cmp	r5, r3
 800c236:	d102      	bne.n	800c23e <_strtod_l+0x87e>
 800c238:	3001      	adds	r0, #1
 800c23a:	f43f addf 	beq.w	800bdfc <_strtod_l+0x43c>
 800c23e:	4ba3      	ldr	r3, [pc, #652]	; (800c4cc <_strtod_l+0xb0c>)
 800c240:	402b      	ands	r3, r5
 800c242:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c246:	f04f 0a00 	mov.w	sl, #0
 800c24a:	e7a0      	b.n	800c18e <_strtod_l+0x7ce>
 800c24c:	f04f 33ff 	mov.w	r3, #4294967295
 800c250:	e7ed      	b.n	800c22e <_strtod_l+0x86e>
 800c252:	460b      	mov	r3, r1
 800c254:	e7eb      	b.n	800c22e <_strtod_l+0x86e>
 800c256:	bb7b      	cbnz	r3, 800c2b8 <_strtod_l+0x8f8>
 800c258:	f1ba 0f00 	cmp.w	sl, #0
 800c25c:	d12c      	bne.n	800c2b8 <_strtod_l+0x8f8>
 800c25e:	9904      	ldr	r1, [sp, #16]
 800c260:	4a9a      	ldr	r2, [pc, #616]	; (800c4cc <_strtod_l+0xb0c>)
 800c262:	465b      	mov	r3, fp
 800c264:	b1f1      	cbz	r1, 800c2a4 <_strtod_l+0x8e4>
 800c266:	ea02 010b 	and.w	r1, r2, fp
 800c26a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c26e:	dc19      	bgt.n	800c2a4 <_strtod_l+0x8e4>
 800c270:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c274:	f77f ae5b 	ble.w	800bf2e <_strtod_l+0x56e>
 800c278:	4a96      	ldr	r2, [pc, #600]	; (800c4d4 <_strtod_l+0xb14>)
 800c27a:	2300      	movs	r3, #0
 800c27c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c280:	4650      	mov	r0, sl
 800c282:	4659      	mov	r1, fp
 800c284:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c288:	f7f4 f9b6 	bl	80005f8 <__aeabi_dmul>
 800c28c:	4682      	mov	sl, r0
 800c28e:	468b      	mov	fp, r1
 800c290:	2900      	cmp	r1, #0
 800c292:	f47f adbe 	bne.w	800be12 <_strtod_l+0x452>
 800c296:	2800      	cmp	r0, #0
 800c298:	f47f adbb 	bne.w	800be12 <_strtod_l+0x452>
 800c29c:	2322      	movs	r3, #34	; 0x22
 800c29e:	f8c9 3000 	str.w	r3, [r9]
 800c2a2:	e5b6      	b.n	800be12 <_strtod_l+0x452>
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c2aa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c2ae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c2b2:	f04f 3aff 	mov.w	sl, #4294967295
 800c2b6:	e76a      	b.n	800c18e <_strtod_l+0x7ce>
 800c2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2ba:	b193      	cbz	r3, 800c2e2 <_strtod_l+0x922>
 800c2bc:	422b      	tst	r3, r5
 800c2be:	f43f af66 	beq.w	800c18e <_strtod_l+0x7ce>
 800c2c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2c4:	9a04      	ldr	r2, [sp, #16]
 800c2c6:	4650      	mov	r0, sl
 800c2c8:	4659      	mov	r1, fp
 800c2ca:	b173      	cbz	r3, 800c2ea <_strtod_l+0x92a>
 800c2cc:	f7ff fb5a 	bl	800b984 <sulp>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2d8:	f7f3 ffd8 	bl	800028c <__adddf3>
 800c2dc:	4682      	mov	sl, r0
 800c2de:	468b      	mov	fp, r1
 800c2e0:	e755      	b.n	800c18e <_strtod_l+0x7ce>
 800c2e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2e4:	ea13 0f0a 	tst.w	r3, sl
 800c2e8:	e7e9      	b.n	800c2be <_strtod_l+0x8fe>
 800c2ea:	f7ff fb4b 	bl	800b984 <sulp>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2f6:	f7f3 ffc7 	bl	8000288 <__aeabi_dsub>
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4682      	mov	sl, r0
 800c300:	468b      	mov	fp, r1
 800c302:	f7f4 fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c306:	2800      	cmp	r0, #0
 800c308:	f47f ae11 	bne.w	800bf2e <_strtod_l+0x56e>
 800c30c:	e73f      	b.n	800c18e <_strtod_l+0x7ce>
 800c30e:	4641      	mov	r1, r8
 800c310:	4620      	mov	r0, r4
 800c312:	f002 f9b0 	bl	800e676 <__ratio>
 800c316:	ec57 6b10 	vmov	r6, r7, d0
 800c31a:	2200      	movs	r2, #0
 800c31c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c320:	ee10 0a10 	vmov	r0, s0
 800c324:	4639      	mov	r1, r7
 800c326:	f7f4 fbe3 	bl	8000af0 <__aeabi_dcmple>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d077      	beq.n	800c41e <_strtod_l+0xa5e>
 800c32e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c330:	2b00      	cmp	r3, #0
 800c332:	d04a      	beq.n	800c3ca <_strtod_l+0xa0a>
 800c334:	4b68      	ldr	r3, [pc, #416]	; (800c4d8 <_strtod_l+0xb18>)
 800c336:	2200      	movs	r2, #0
 800c338:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c33c:	4f66      	ldr	r7, [pc, #408]	; (800c4d8 <_strtod_l+0xb18>)
 800c33e:	2600      	movs	r6, #0
 800c340:	4b62      	ldr	r3, [pc, #392]	; (800c4cc <_strtod_l+0xb0c>)
 800c342:	402b      	ands	r3, r5
 800c344:	930f      	str	r3, [sp, #60]	; 0x3c
 800c346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c348:	4b64      	ldr	r3, [pc, #400]	; (800c4dc <_strtod_l+0xb1c>)
 800c34a:	429a      	cmp	r2, r3
 800c34c:	f040 80ce 	bne.w	800c4ec <_strtod_l+0xb2c>
 800c350:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c354:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c358:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c35c:	ec4b ab10 	vmov	d0, sl, fp
 800c360:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c364:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c368:	f002 f8c0 	bl	800e4ec <__ulp>
 800c36c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c370:	ec53 2b10 	vmov	r2, r3, d0
 800c374:	f7f4 f940 	bl	80005f8 <__aeabi_dmul>
 800c378:	4652      	mov	r2, sl
 800c37a:	465b      	mov	r3, fp
 800c37c:	f7f3 ff86 	bl	800028c <__adddf3>
 800c380:	460b      	mov	r3, r1
 800c382:	4952      	ldr	r1, [pc, #328]	; (800c4cc <_strtod_l+0xb0c>)
 800c384:	4a56      	ldr	r2, [pc, #344]	; (800c4e0 <_strtod_l+0xb20>)
 800c386:	4019      	ands	r1, r3
 800c388:	4291      	cmp	r1, r2
 800c38a:	4682      	mov	sl, r0
 800c38c:	d95b      	bls.n	800c446 <_strtod_l+0xa86>
 800c38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c390:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c394:	4293      	cmp	r3, r2
 800c396:	d103      	bne.n	800c3a0 <_strtod_l+0x9e0>
 800c398:	9b08      	ldr	r3, [sp, #32]
 800c39a:	3301      	adds	r3, #1
 800c39c:	f43f ad2e 	beq.w	800bdfc <_strtod_l+0x43c>
 800c3a0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c4d0 <_strtod_l+0xb10>
 800c3a4:	f04f 3aff 	mov.w	sl, #4294967295
 800c3a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c3aa:	4648      	mov	r0, r9
 800c3ac:	f001 fe06 	bl	800dfbc <_Bfree>
 800c3b0:	9905      	ldr	r1, [sp, #20]
 800c3b2:	4648      	mov	r0, r9
 800c3b4:	f001 fe02 	bl	800dfbc <_Bfree>
 800c3b8:	4641      	mov	r1, r8
 800c3ba:	4648      	mov	r0, r9
 800c3bc:	f001 fdfe 	bl	800dfbc <_Bfree>
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	4648      	mov	r0, r9
 800c3c4:	f001 fdfa 	bl	800dfbc <_Bfree>
 800c3c8:	e619      	b.n	800bffe <_strtod_l+0x63e>
 800c3ca:	f1ba 0f00 	cmp.w	sl, #0
 800c3ce:	d11a      	bne.n	800c406 <_strtod_l+0xa46>
 800c3d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3d4:	b9eb      	cbnz	r3, 800c412 <_strtod_l+0xa52>
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	4b3f      	ldr	r3, [pc, #252]	; (800c4d8 <_strtod_l+0xb18>)
 800c3da:	4630      	mov	r0, r6
 800c3dc:	4639      	mov	r1, r7
 800c3de:	f7f4 fb7d 	bl	8000adc <__aeabi_dcmplt>
 800c3e2:	b9c8      	cbnz	r0, 800c418 <_strtod_l+0xa58>
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	4639      	mov	r1, r7
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	4b3e      	ldr	r3, [pc, #248]	; (800c4e4 <_strtod_l+0xb24>)
 800c3ec:	f7f4 f904 	bl	80005f8 <__aeabi_dmul>
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	460f      	mov	r7, r1
 800c3f4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c3f8:	9618      	str	r6, [sp, #96]	; 0x60
 800c3fa:	9319      	str	r3, [sp, #100]	; 0x64
 800c3fc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c400:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c404:	e79c      	b.n	800c340 <_strtod_l+0x980>
 800c406:	f1ba 0f01 	cmp.w	sl, #1
 800c40a:	d102      	bne.n	800c412 <_strtod_l+0xa52>
 800c40c:	2d00      	cmp	r5, #0
 800c40e:	f43f ad8e 	beq.w	800bf2e <_strtod_l+0x56e>
 800c412:	2200      	movs	r2, #0
 800c414:	4b34      	ldr	r3, [pc, #208]	; (800c4e8 <_strtod_l+0xb28>)
 800c416:	e78f      	b.n	800c338 <_strtod_l+0x978>
 800c418:	2600      	movs	r6, #0
 800c41a:	4f32      	ldr	r7, [pc, #200]	; (800c4e4 <_strtod_l+0xb24>)
 800c41c:	e7ea      	b.n	800c3f4 <_strtod_l+0xa34>
 800c41e:	4b31      	ldr	r3, [pc, #196]	; (800c4e4 <_strtod_l+0xb24>)
 800c420:	4630      	mov	r0, r6
 800c422:	4639      	mov	r1, r7
 800c424:	2200      	movs	r2, #0
 800c426:	f7f4 f8e7 	bl	80005f8 <__aeabi_dmul>
 800c42a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c42c:	4606      	mov	r6, r0
 800c42e:	460f      	mov	r7, r1
 800c430:	b933      	cbnz	r3, 800c440 <_strtod_l+0xa80>
 800c432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c436:	9010      	str	r0, [sp, #64]	; 0x40
 800c438:	9311      	str	r3, [sp, #68]	; 0x44
 800c43a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c43e:	e7df      	b.n	800c400 <_strtod_l+0xa40>
 800c440:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c444:	e7f9      	b.n	800c43a <_strtod_l+0xa7a>
 800c446:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c44a:	9b04      	ldr	r3, [sp, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1ab      	bne.n	800c3a8 <_strtod_l+0x9e8>
 800c450:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c454:	0d1b      	lsrs	r3, r3, #20
 800c456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c458:	051b      	lsls	r3, r3, #20
 800c45a:	429a      	cmp	r2, r3
 800c45c:	465d      	mov	r5, fp
 800c45e:	d1a3      	bne.n	800c3a8 <_strtod_l+0x9e8>
 800c460:	4639      	mov	r1, r7
 800c462:	4630      	mov	r0, r6
 800c464:	f7f4 fb78 	bl	8000b58 <__aeabi_d2iz>
 800c468:	f7f4 f85c 	bl	8000524 <__aeabi_i2d>
 800c46c:	460b      	mov	r3, r1
 800c46e:	4602      	mov	r2, r0
 800c470:	4639      	mov	r1, r7
 800c472:	4630      	mov	r0, r6
 800c474:	f7f3 ff08 	bl	8000288 <__aeabi_dsub>
 800c478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c47a:	4606      	mov	r6, r0
 800c47c:	460f      	mov	r7, r1
 800c47e:	b933      	cbnz	r3, 800c48e <_strtod_l+0xace>
 800c480:	f1ba 0f00 	cmp.w	sl, #0
 800c484:	d103      	bne.n	800c48e <_strtod_l+0xace>
 800c486:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c48a:	2d00      	cmp	r5, #0
 800c48c:	d06d      	beq.n	800c56a <_strtod_l+0xbaa>
 800c48e:	a30a      	add	r3, pc, #40	; (adr r3, 800c4b8 <_strtod_l+0xaf8>)
 800c490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c494:	4630      	mov	r0, r6
 800c496:	4639      	mov	r1, r7
 800c498:	f7f4 fb20 	bl	8000adc <__aeabi_dcmplt>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	f47f acb8 	bne.w	800be12 <_strtod_l+0x452>
 800c4a2:	a307      	add	r3, pc, #28	; (adr r3, 800c4c0 <_strtod_l+0xb00>)
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	f7f4 fb34 	bl	8000b18 <__aeabi_dcmpgt>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	f43f af79 	beq.w	800c3a8 <_strtod_l+0x9e8>
 800c4b6:	e4ac      	b.n	800be12 <_strtod_l+0x452>
 800c4b8:	94a03595 	.word	0x94a03595
 800c4bc:	3fdfffff 	.word	0x3fdfffff
 800c4c0:	35afe535 	.word	0x35afe535
 800c4c4:	3fe00000 	.word	0x3fe00000
 800c4c8:	000fffff 	.word	0x000fffff
 800c4cc:	7ff00000 	.word	0x7ff00000
 800c4d0:	7fefffff 	.word	0x7fefffff
 800c4d4:	39500000 	.word	0x39500000
 800c4d8:	3ff00000 	.word	0x3ff00000
 800c4dc:	7fe00000 	.word	0x7fe00000
 800c4e0:	7c9fffff 	.word	0x7c9fffff
 800c4e4:	3fe00000 	.word	0x3fe00000
 800c4e8:	bff00000 	.word	0xbff00000
 800c4ec:	9b04      	ldr	r3, [sp, #16]
 800c4ee:	b333      	cbz	r3, 800c53e <_strtod_l+0xb7e>
 800c4f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4f2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c4f6:	d822      	bhi.n	800c53e <_strtod_l+0xb7e>
 800c4f8:	a327      	add	r3, pc, #156	; (adr r3, 800c598 <_strtod_l+0xbd8>)
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	4630      	mov	r0, r6
 800c500:	4639      	mov	r1, r7
 800c502:	f7f4 faf5 	bl	8000af0 <__aeabi_dcmple>
 800c506:	b1a0      	cbz	r0, 800c532 <_strtod_l+0xb72>
 800c508:	4639      	mov	r1, r7
 800c50a:	4630      	mov	r0, r6
 800c50c:	f7f4 fb4c 	bl	8000ba8 <__aeabi_d2uiz>
 800c510:	2800      	cmp	r0, #0
 800c512:	bf08      	it	eq
 800c514:	2001      	moveq	r0, #1
 800c516:	f7f3 fff5 	bl	8000504 <__aeabi_ui2d>
 800c51a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c51c:	4606      	mov	r6, r0
 800c51e:	460f      	mov	r7, r1
 800c520:	bb03      	cbnz	r3, 800c564 <_strtod_l+0xba4>
 800c522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c526:	9012      	str	r0, [sp, #72]	; 0x48
 800c528:	9313      	str	r3, [sp, #76]	; 0x4c
 800c52a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c52e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c534:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c536:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c53a:	1a9b      	subs	r3, r3, r2
 800c53c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c53e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c542:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c546:	f001 ffd1 	bl	800e4ec <__ulp>
 800c54a:	4650      	mov	r0, sl
 800c54c:	ec53 2b10 	vmov	r2, r3, d0
 800c550:	4659      	mov	r1, fp
 800c552:	f7f4 f851 	bl	80005f8 <__aeabi_dmul>
 800c556:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c55a:	f7f3 fe97 	bl	800028c <__adddf3>
 800c55e:	4682      	mov	sl, r0
 800c560:	468b      	mov	fp, r1
 800c562:	e772      	b.n	800c44a <_strtod_l+0xa8a>
 800c564:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c568:	e7df      	b.n	800c52a <_strtod_l+0xb6a>
 800c56a:	a30d      	add	r3, pc, #52	; (adr r3, 800c5a0 <_strtod_l+0xbe0>)
 800c56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c570:	f7f4 fab4 	bl	8000adc <__aeabi_dcmplt>
 800c574:	e79c      	b.n	800c4b0 <_strtod_l+0xaf0>
 800c576:	2300      	movs	r3, #0
 800c578:	930d      	str	r3, [sp, #52]	; 0x34
 800c57a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c57c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c57e:	6013      	str	r3, [r2, #0]
 800c580:	f7ff ba61 	b.w	800ba46 <_strtod_l+0x86>
 800c584:	2b65      	cmp	r3, #101	; 0x65
 800c586:	f04f 0200 	mov.w	r2, #0
 800c58a:	f43f ab4e 	beq.w	800bc2a <_strtod_l+0x26a>
 800c58e:	2101      	movs	r1, #1
 800c590:	4614      	mov	r4, r2
 800c592:	9104      	str	r1, [sp, #16]
 800c594:	f7ff bacb 	b.w	800bb2e <_strtod_l+0x16e>
 800c598:	ffc00000 	.word	0xffc00000
 800c59c:	41dfffff 	.word	0x41dfffff
 800c5a0:	94a03595 	.word	0x94a03595
 800c5a4:	3fcfffff 	.word	0x3fcfffff

0800c5a8 <_strtod_r>:
 800c5a8:	4b05      	ldr	r3, [pc, #20]	; (800c5c0 <_strtod_r+0x18>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	b410      	push	{r4}
 800c5ae:	6a1b      	ldr	r3, [r3, #32]
 800c5b0:	4c04      	ldr	r4, [pc, #16]	; (800c5c4 <_strtod_r+0x1c>)
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	bf08      	it	eq
 800c5b6:	4623      	moveq	r3, r4
 800c5b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5bc:	f7ff ba00 	b.w	800b9c0 <_strtod_l>
 800c5c0:	2000000c 	.word	0x2000000c
 800c5c4:	20000070 	.word	0x20000070

0800c5c8 <_strtol_l.isra.0>:
 800c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	4680      	mov	r8, r0
 800c5ce:	4689      	mov	r9, r1
 800c5d0:	4692      	mov	sl, r2
 800c5d2:	461e      	mov	r6, r3
 800c5d4:	460f      	mov	r7, r1
 800c5d6:	463d      	mov	r5, r7
 800c5d8:	9808      	ldr	r0, [sp, #32]
 800c5da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5de:	f001 fc27 	bl	800de30 <__locale_ctype_ptr_l>
 800c5e2:	4420      	add	r0, r4
 800c5e4:	7843      	ldrb	r3, [r0, #1]
 800c5e6:	f013 0308 	ands.w	r3, r3, #8
 800c5ea:	d132      	bne.n	800c652 <_strtol_l.isra.0+0x8a>
 800c5ec:	2c2d      	cmp	r4, #45	; 0x2d
 800c5ee:	d132      	bne.n	800c656 <_strtol_l.isra.0+0x8e>
 800c5f0:	787c      	ldrb	r4, [r7, #1]
 800c5f2:	1cbd      	adds	r5, r7, #2
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	2e00      	cmp	r6, #0
 800c5f8:	d05d      	beq.n	800c6b6 <_strtol_l.isra.0+0xee>
 800c5fa:	2e10      	cmp	r6, #16
 800c5fc:	d109      	bne.n	800c612 <_strtol_l.isra.0+0x4a>
 800c5fe:	2c30      	cmp	r4, #48	; 0x30
 800c600:	d107      	bne.n	800c612 <_strtol_l.isra.0+0x4a>
 800c602:	782b      	ldrb	r3, [r5, #0]
 800c604:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c608:	2b58      	cmp	r3, #88	; 0x58
 800c60a:	d14f      	bne.n	800c6ac <_strtol_l.isra.0+0xe4>
 800c60c:	786c      	ldrb	r4, [r5, #1]
 800c60e:	2610      	movs	r6, #16
 800c610:	3502      	adds	r5, #2
 800c612:	2a00      	cmp	r2, #0
 800c614:	bf14      	ite	ne
 800c616:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c61a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c61e:	2700      	movs	r7, #0
 800c620:	fbb1 fcf6 	udiv	ip, r1, r6
 800c624:	4638      	mov	r0, r7
 800c626:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c62a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c62e:	2b09      	cmp	r3, #9
 800c630:	d817      	bhi.n	800c662 <_strtol_l.isra.0+0x9a>
 800c632:	461c      	mov	r4, r3
 800c634:	42a6      	cmp	r6, r4
 800c636:	dd23      	ble.n	800c680 <_strtol_l.isra.0+0xb8>
 800c638:	1c7b      	adds	r3, r7, #1
 800c63a:	d007      	beq.n	800c64c <_strtol_l.isra.0+0x84>
 800c63c:	4584      	cmp	ip, r0
 800c63e:	d31c      	bcc.n	800c67a <_strtol_l.isra.0+0xb2>
 800c640:	d101      	bne.n	800c646 <_strtol_l.isra.0+0x7e>
 800c642:	45a6      	cmp	lr, r4
 800c644:	db19      	blt.n	800c67a <_strtol_l.isra.0+0xb2>
 800c646:	fb00 4006 	mla	r0, r0, r6, r4
 800c64a:	2701      	movs	r7, #1
 800c64c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c650:	e7eb      	b.n	800c62a <_strtol_l.isra.0+0x62>
 800c652:	462f      	mov	r7, r5
 800c654:	e7bf      	b.n	800c5d6 <_strtol_l.isra.0+0xe>
 800c656:	2c2b      	cmp	r4, #43	; 0x2b
 800c658:	bf04      	itt	eq
 800c65a:	1cbd      	addeq	r5, r7, #2
 800c65c:	787c      	ldrbeq	r4, [r7, #1]
 800c65e:	461a      	mov	r2, r3
 800c660:	e7c9      	b.n	800c5f6 <_strtol_l.isra.0+0x2e>
 800c662:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c666:	2b19      	cmp	r3, #25
 800c668:	d801      	bhi.n	800c66e <_strtol_l.isra.0+0xa6>
 800c66a:	3c37      	subs	r4, #55	; 0x37
 800c66c:	e7e2      	b.n	800c634 <_strtol_l.isra.0+0x6c>
 800c66e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c672:	2b19      	cmp	r3, #25
 800c674:	d804      	bhi.n	800c680 <_strtol_l.isra.0+0xb8>
 800c676:	3c57      	subs	r4, #87	; 0x57
 800c678:	e7dc      	b.n	800c634 <_strtol_l.isra.0+0x6c>
 800c67a:	f04f 37ff 	mov.w	r7, #4294967295
 800c67e:	e7e5      	b.n	800c64c <_strtol_l.isra.0+0x84>
 800c680:	1c7b      	adds	r3, r7, #1
 800c682:	d108      	bne.n	800c696 <_strtol_l.isra.0+0xce>
 800c684:	2322      	movs	r3, #34	; 0x22
 800c686:	f8c8 3000 	str.w	r3, [r8]
 800c68a:	4608      	mov	r0, r1
 800c68c:	f1ba 0f00 	cmp.w	sl, #0
 800c690:	d107      	bne.n	800c6a2 <_strtol_l.isra.0+0xda>
 800c692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c696:	b102      	cbz	r2, 800c69a <_strtol_l.isra.0+0xd2>
 800c698:	4240      	negs	r0, r0
 800c69a:	f1ba 0f00 	cmp.w	sl, #0
 800c69e:	d0f8      	beq.n	800c692 <_strtol_l.isra.0+0xca>
 800c6a0:	b10f      	cbz	r7, 800c6a6 <_strtol_l.isra.0+0xde>
 800c6a2:	f105 39ff 	add.w	r9, r5, #4294967295
 800c6a6:	f8ca 9000 	str.w	r9, [sl]
 800c6aa:	e7f2      	b.n	800c692 <_strtol_l.isra.0+0xca>
 800c6ac:	2430      	movs	r4, #48	; 0x30
 800c6ae:	2e00      	cmp	r6, #0
 800c6b0:	d1af      	bne.n	800c612 <_strtol_l.isra.0+0x4a>
 800c6b2:	2608      	movs	r6, #8
 800c6b4:	e7ad      	b.n	800c612 <_strtol_l.isra.0+0x4a>
 800c6b6:	2c30      	cmp	r4, #48	; 0x30
 800c6b8:	d0a3      	beq.n	800c602 <_strtol_l.isra.0+0x3a>
 800c6ba:	260a      	movs	r6, #10
 800c6bc:	e7a9      	b.n	800c612 <_strtol_l.isra.0+0x4a>
	...

0800c6c0 <_strtol_r>:
 800c6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6c2:	4c06      	ldr	r4, [pc, #24]	; (800c6dc <_strtol_r+0x1c>)
 800c6c4:	4d06      	ldr	r5, [pc, #24]	; (800c6e0 <_strtol_r+0x20>)
 800c6c6:	6824      	ldr	r4, [r4, #0]
 800c6c8:	6a24      	ldr	r4, [r4, #32]
 800c6ca:	2c00      	cmp	r4, #0
 800c6cc:	bf08      	it	eq
 800c6ce:	462c      	moveq	r4, r5
 800c6d0:	9400      	str	r4, [sp, #0]
 800c6d2:	f7ff ff79 	bl	800c5c8 <_strtol_l.isra.0>
 800c6d6:	b003      	add	sp, #12
 800c6d8:	bd30      	pop	{r4, r5, pc}
 800c6da:	bf00      	nop
 800c6dc:	2000000c 	.word	0x2000000c
 800c6e0:	20000070 	.word	0x20000070

0800c6e4 <__swbuf_r>:
 800c6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e6:	460e      	mov	r6, r1
 800c6e8:	4614      	mov	r4, r2
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	b118      	cbz	r0, 800c6f6 <__swbuf_r+0x12>
 800c6ee:	6983      	ldr	r3, [r0, #24]
 800c6f0:	b90b      	cbnz	r3, 800c6f6 <__swbuf_r+0x12>
 800c6f2:	f000 ffed 	bl	800d6d0 <__sinit>
 800c6f6:	4b21      	ldr	r3, [pc, #132]	; (800c77c <__swbuf_r+0x98>)
 800c6f8:	429c      	cmp	r4, r3
 800c6fa:	d12a      	bne.n	800c752 <__swbuf_r+0x6e>
 800c6fc:	686c      	ldr	r4, [r5, #4]
 800c6fe:	69a3      	ldr	r3, [r4, #24]
 800c700:	60a3      	str	r3, [r4, #8]
 800c702:	89a3      	ldrh	r3, [r4, #12]
 800c704:	071a      	lsls	r2, r3, #28
 800c706:	d52e      	bpl.n	800c766 <__swbuf_r+0x82>
 800c708:	6923      	ldr	r3, [r4, #16]
 800c70a:	b363      	cbz	r3, 800c766 <__swbuf_r+0x82>
 800c70c:	6923      	ldr	r3, [r4, #16]
 800c70e:	6820      	ldr	r0, [r4, #0]
 800c710:	1ac0      	subs	r0, r0, r3
 800c712:	6963      	ldr	r3, [r4, #20]
 800c714:	b2f6      	uxtb	r6, r6
 800c716:	4283      	cmp	r3, r0
 800c718:	4637      	mov	r7, r6
 800c71a:	dc04      	bgt.n	800c726 <__swbuf_r+0x42>
 800c71c:	4621      	mov	r1, r4
 800c71e:	4628      	mov	r0, r5
 800c720:	f000 ff6c 	bl	800d5fc <_fflush_r>
 800c724:	bb28      	cbnz	r0, 800c772 <__swbuf_r+0x8e>
 800c726:	68a3      	ldr	r3, [r4, #8]
 800c728:	3b01      	subs	r3, #1
 800c72a:	60a3      	str	r3, [r4, #8]
 800c72c:	6823      	ldr	r3, [r4, #0]
 800c72e:	1c5a      	adds	r2, r3, #1
 800c730:	6022      	str	r2, [r4, #0]
 800c732:	701e      	strb	r6, [r3, #0]
 800c734:	6963      	ldr	r3, [r4, #20]
 800c736:	3001      	adds	r0, #1
 800c738:	4283      	cmp	r3, r0
 800c73a:	d004      	beq.n	800c746 <__swbuf_r+0x62>
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	07db      	lsls	r3, r3, #31
 800c740:	d519      	bpl.n	800c776 <__swbuf_r+0x92>
 800c742:	2e0a      	cmp	r6, #10
 800c744:	d117      	bne.n	800c776 <__swbuf_r+0x92>
 800c746:	4621      	mov	r1, r4
 800c748:	4628      	mov	r0, r5
 800c74a:	f000 ff57 	bl	800d5fc <_fflush_r>
 800c74e:	b190      	cbz	r0, 800c776 <__swbuf_r+0x92>
 800c750:	e00f      	b.n	800c772 <__swbuf_r+0x8e>
 800c752:	4b0b      	ldr	r3, [pc, #44]	; (800c780 <__swbuf_r+0x9c>)
 800c754:	429c      	cmp	r4, r3
 800c756:	d101      	bne.n	800c75c <__swbuf_r+0x78>
 800c758:	68ac      	ldr	r4, [r5, #8]
 800c75a:	e7d0      	b.n	800c6fe <__swbuf_r+0x1a>
 800c75c:	4b09      	ldr	r3, [pc, #36]	; (800c784 <__swbuf_r+0xa0>)
 800c75e:	429c      	cmp	r4, r3
 800c760:	bf08      	it	eq
 800c762:	68ec      	ldreq	r4, [r5, #12]
 800c764:	e7cb      	b.n	800c6fe <__swbuf_r+0x1a>
 800c766:	4621      	mov	r1, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	f000 f80d 	bl	800c788 <__swsetup_r>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d0cc      	beq.n	800c70c <__swbuf_r+0x28>
 800c772:	f04f 37ff 	mov.w	r7, #4294967295
 800c776:	4638      	mov	r0, r7
 800c778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c77a:	bf00      	nop
 800c77c:	08010610 	.word	0x08010610
 800c780:	08010630 	.word	0x08010630
 800c784:	080105f0 	.word	0x080105f0

0800c788 <__swsetup_r>:
 800c788:	4b32      	ldr	r3, [pc, #200]	; (800c854 <__swsetup_r+0xcc>)
 800c78a:	b570      	push	{r4, r5, r6, lr}
 800c78c:	681d      	ldr	r5, [r3, #0]
 800c78e:	4606      	mov	r6, r0
 800c790:	460c      	mov	r4, r1
 800c792:	b125      	cbz	r5, 800c79e <__swsetup_r+0x16>
 800c794:	69ab      	ldr	r3, [r5, #24]
 800c796:	b913      	cbnz	r3, 800c79e <__swsetup_r+0x16>
 800c798:	4628      	mov	r0, r5
 800c79a:	f000 ff99 	bl	800d6d0 <__sinit>
 800c79e:	4b2e      	ldr	r3, [pc, #184]	; (800c858 <__swsetup_r+0xd0>)
 800c7a0:	429c      	cmp	r4, r3
 800c7a2:	d10f      	bne.n	800c7c4 <__swsetup_r+0x3c>
 800c7a4:	686c      	ldr	r4, [r5, #4]
 800c7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	0715      	lsls	r5, r2, #28
 800c7ae:	d42c      	bmi.n	800c80a <__swsetup_r+0x82>
 800c7b0:	06d0      	lsls	r0, r2, #27
 800c7b2:	d411      	bmi.n	800c7d8 <__swsetup_r+0x50>
 800c7b4:	2209      	movs	r2, #9
 800c7b6:	6032      	str	r2, [r6, #0]
 800c7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7bc:	81a3      	strh	r3, [r4, #12]
 800c7be:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c2:	e03e      	b.n	800c842 <__swsetup_r+0xba>
 800c7c4:	4b25      	ldr	r3, [pc, #148]	; (800c85c <__swsetup_r+0xd4>)
 800c7c6:	429c      	cmp	r4, r3
 800c7c8:	d101      	bne.n	800c7ce <__swsetup_r+0x46>
 800c7ca:	68ac      	ldr	r4, [r5, #8]
 800c7cc:	e7eb      	b.n	800c7a6 <__swsetup_r+0x1e>
 800c7ce:	4b24      	ldr	r3, [pc, #144]	; (800c860 <__swsetup_r+0xd8>)
 800c7d0:	429c      	cmp	r4, r3
 800c7d2:	bf08      	it	eq
 800c7d4:	68ec      	ldreq	r4, [r5, #12]
 800c7d6:	e7e6      	b.n	800c7a6 <__swsetup_r+0x1e>
 800c7d8:	0751      	lsls	r1, r2, #29
 800c7da:	d512      	bpl.n	800c802 <__swsetup_r+0x7a>
 800c7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7de:	b141      	cbz	r1, 800c7f2 <__swsetup_r+0x6a>
 800c7e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7e4:	4299      	cmp	r1, r3
 800c7e6:	d002      	beq.n	800c7ee <__swsetup_r+0x66>
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f001 ffc1 	bl	800e770 <_free_r>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	6363      	str	r3, [r4, #52]	; 0x34
 800c7f2:	89a3      	ldrh	r3, [r4, #12]
 800c7f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c7f8:	81a3      	strh	r3, [r4, #12]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	6063      	str	r3, [r4, #4]
 800c7fe:	6923      	ldr	r3, [r4, #16]
 800c800:	6023      	str	r3, [r4, #0]
 800c802:	89a3      	ldrh	r3, [r4, #12]
 800c804:	f043 0308 	orr.w	r3, r3, #8
 800c808:	81a3      	strh	r3, [r4, #12]
 800c80a:	6923      	ldr	r3, [r4, #16]
 800c80c:	b94b      	cbnz	r3, 800c822 <__swsetup_r+0x9a>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c818:	d003      	beq.n	800c822 <__swsetup_r+0x9a>
 800c81a:	4621      	mov	r1, r4
 800c81c:	4630      	mov	r0, r6
 800c81e:	f001 fb3f 	bl	800dea0 <__smakebuf_r>
 800c822:	89a2      	ldrh	r2, [r4, #12]
 800c824:	f012 0301 	ands.w	r3, r2, #1
 800c828:	d00c      	beq.n	800c844 <__swsetup_r+0xbc>
 800c82a:	2300      	movs	r3, #0
 800c82c:	60a3      	str	r3, [r4, #8]
 800c82e:	6963      	ldr	r3, [r4, #20]
 800c830:	425b      	negs	r3, r3
 800c832:	61a3      	str	r3, [r4, #24]
 800c834:	6923      	ldr	r3, [r4, #16]
 800c836:	b953      	cbnz	r3, 800c84e <__swsetup_r+0xc6>
 800c838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c83c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c840:	d1ba      	bne.n	800c7b8 <__swsetup_r+0x30>
 800c842:	bd70      	pop	{r4, r5, r6, pc}
 800c844:	0792      	lsls	r2, r2, #30
 800c846:	bf58      	it	pl
 800c848:	6963      	ldrpl	r3, [r4, #20]
 800c84a:	60a3      	str	r3, [r4, #8]
 800c84c:	e7f2      	b.n	800c834 <__swsetup_r+0xac>
 800c84e:	2000      	movs	r0, #0
 800c850:	e7f7      	b.n	800c842 <__swsetup_r+0xba>
 800c852:	bf00      	nop
 800c854:	2000000c 	.word	0x2000000c
 800c858:	08010610 	.word	0x08010610
 800c85c:	08010630 	.word	0x08010630
 800c860:	080105f0 	.word	0x080105f0

0800c864 <quorem>:
 800c864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c868:	6903      	ldr	r3, [r0, #16]
 800c86a:	690c      	ldr	r4, [r1, #16]
 800c86c:	42a3      	cmp	r3, r4
 800c86e:	4680      	mov	r8, r0
 800c870:	f2c0 8082 	blt.w	800c978 <quorem+0x114>
 800c874:	3c01      	subs	r4, #1
 800c876:	f101 0714 	add.w	r7, r1, #20
 800c87a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c87e:	f100 0614 	add.w	r6, r0, #20
 800c882:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c886:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c88a:	eb06 030c 	add.w	r3, r6, ip
 800c88e:	3501      	adds	r5, #1
 800c890:	eb07 090c 	add.w	r9, r7, ip
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	fbb0 f5f5 	udiv	r5, r0, r5
 800c89a:	b395      	cbz	r5, 800c902 <quorem+0x9e>
 800c89c:	f04f 0a00 	mov.w	sl, #0
 800c8a0:	4638      	mov	r0, r7
 800c8a2:	46b6      	mov	lr, r6
 800c8a4:	46d3      	mov	fp, sl
 800c8a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8aa:	b293      	uxth	r3, r2
 800c8ac:	fb05 a303 	mla	r3, r5, r3, sl
 800c8b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	ebab 0303 	sub.w	r3, fp, r3
 800c8ba:	0c12      	lsrs	r2, r2, #16
 800c8bc:	f8de b000 	ldr.w	fp, [lr]
 800c8c0:	fb05 a202 	mla	r2, r5, r2, sl
 800c8c4:	fa13 f38b 	uxtah	r3, r3, fp
 800c8c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c8cc:	fa1f fb82 	uxth.w	fp, r2
 800c8d0:	f8de 2000 	ldr.w	r2, [lr]
 800c8d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c8d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8e2:	4581      	cmp	r9, r0
 800c8e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c8e8:	f84e 3b04 	str.w	r3, [lr], #4
 800c8ec:	d2db      	bcs.n	800c8a6 <quorem+0x42>
 800c8ee:	f856 300c 	ldr.w	r3, [r6, ip]
 800c8f2:	b933      	cbnz	r3, 800c902 <quorem+0x9e>
 800c8f4:	9b01      	ldr	r3, [sp, #4]
 800c8f6:	3b04      	subs	r3, #4
 800c8f8:	429e      	cmp	r6, r3
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	d330      	bcc.n	800c960 <quorem+0xfc>
 800c8fe:	f8c8 4010 	str.w	r4, [r8, #16]
 800c902:	4640      	mov	r0, r8
 800c904:	f001 fd7a 	bl	800e3fc <__mcmp>
 800c908:	2800      	cmp	r0, #0
 800c90a:	db25      	blt.n	800c958 <quorem+0xf4>
 800c90c:	3501      	adds	r5, #1
 800c90e:	4630      	mov	r0, r6
 800c910:	f04f 0c00 	mov.w	ip, #0
 800c914:	f857 2b04 	ldr.w	r2, [r7], #4
 800c918:	f8d0 e000 	ldr.w	lr, [r0]
 800c91c:	b293      	uxth	r3, r2
 800c91e:	ebac 0303 	sub.w	r3, ip, r3
 800c922:	0c12      	lsrs	r2, r2, #16
 800c924:	fa13 f38e 	uxtah	r3, r3, lr
 800c928:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c92c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c930:	b29b      	uxth	r3, r3
 800c932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c936:	45b9      	cmp	r9, r7
 800c938:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c93c:	f840 3b04 	str.w	r3, [r0], #4
 800c940:	d2e8      	bcs.n	800c914 <quorem+0xb0>
 800c942:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c946:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c94a:	b92a      	cbnz	r2, 800c958 <quorem+0xf4>
 800c94c:	3b04      	subs	r3, #4
 800c94e:	429e      	cmp	r6, r3
 800c950:	461a      	mov	r2, r3
 800c952:	d30b      	bcc.n	800c96c <quorem+0x108>
 800c954:	f8c8 4010 	str.w	r4, [r8, #16]
 800c958:	4628      	mov	r0, r5
 800c95a:	b003      	add	sp, #12
 800c95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c960:	6812      	ldr	r2, [r2, #0]
 800c962:	3b04      	subs	r3, #4
 800c964:	2a00      	cmp	r2, #0
 800c966:	d1ca      	bne.n	800c8fe <quorem+0x9a>
 800c968:	3c01      	subs	r4, #1
 800c96a:	e7c5      	b.n	800c8f8 <quorem+0x94>
 800c96c:	6812      	ldr	r2, [r2, #0]
 800c96e:	3b04      	subs	r3, #4
 800c970:	2a00      	cmp	r2, #0
 800c972:	d1ef      	bne.n	800c954 <quorem+0xf0>
 800c974:	3c01      	subs	r4, #1
 800c976:	e7ea      	b.n	800c94e <quorem+0xea>
 800c978:	2000      	movs	r0, #0
 800c97a:	e7ee      	b.n	800c95a <quorem+0xf6>
 800c97c:	0000      	movs	r0, r0
	...

0800c980 <_dtoa_r>:
 800c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	ec57 6b10 	vmov	r6, r7, d0
 800c988:	b097      	sub	sp, #92	; 0x5c
 800c98a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c98c:	9106      	str	r1, [sp, #24]
 800c98e:	4604      	mov	r4, r0
 800c990:	920b      	str	r2, [sp, #44]	; 0x2c
 800c992:	9312      	str	r3, [sp, #72]	; 0x48
 800c994:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c998:	e9cd 6700 	strd	r6, r7, [sp]
 800c99c:	b93d      	cbnz	r5, 800c9ae <_dtoa_r+0x2e>
 800c99e:	2010      	movs	r0, #16
 800c9a0:	f001 fabe 	bl	800df20 <malloc>
 800c9a4:	6260      	str	r0, [r4, #36]	; 0x24
 800c9a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c9aa:	6005      	str	r5, [r0, #0]
 800c9ac:	60c5      	str	r5, [r0, #12]
 800c9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9b0:	6819      	ldr	r1, [r3, #0]
 800c9b2:	b151      	cbz	r1, 800c9ca <_dtoa_r+0x4a>
 800c9b4:	685a      	ldr	r2, [r3, #4]
 800c9b6:	604a      	str	r2, [r1, #4]
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	4093      	lsls	r3, r2
 800c9bc:	608b      	str	r3, [r1, #8]
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f001 fafc 	bl	800dfbc <_Bfree>
 800c9c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	601a      	str	r2, [r3, #0]
 800c9ca:	1e3b      	subs	r3, r7, #0
 800c9cc:	bfbb      	ittet	lt
 800c9ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c9d2:	9301      	strlt	r3, [sp, #4]
 800c9d4:	2300      	movge	r3, #0
 800c9d6:	2201      	movlt	r2, #1
 800c9d8:	bfac      	ite	ge
 800c9da:	f8c8 3000 	strge.w	r3, [r8]
 800c9de:	f8c8 2000 	strlt.w	r2, [r8]
 800c9e2:	4baf      	ldr	r3, [pc, #700]	; (800cca0 <_dtoa_r+0x320>)
 800c9e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c9e8:	ea33 0308 	bics.w	r3, r3, r8
 800c9ec:	d114      	bne.n	800ca18 <_dtoa_r+0x98>
 800c9ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	9b00      	ldr	r3, [sp, #0]
 800c9f8:	b923      	cbnz	r3, 800ca04 <_dtoa_r+0x84>
 800c9fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	f000 8542 	beq.w	800d488 <_dtoa_r+0xb08>
 800ca04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca06:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ccb4 <_dtoa_r+0x334>
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 8544 	beq.w	800d498 <_dtoa_r+0xb18>
 800ca10:	f10b 0303 	add.w	r3, fp, #3
 800ca14:	f000 bd3e 	b.w	800d494 <_dtoa_r+0xb14>
 800ca18:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	2300      	movs	r3, #0
 800ca20:	4630      	mov	r0, r6
 800ca22:	4639      	mov	r1, r7
 800ca24:	f7f4 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca28:	4681      	mov	r9, r0
 800ca2a:	b168      	cbz	r0, 800ca48 <_dtoa_r+0xc8>
 800ca2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ca2e:	2301      	movs	r3, #1
 800ca30:	6013      	str	r3, [r2, #0]
 800ca32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f000 8524 	beq.w	800d482 <_dtoa_r+0xb02>
 800ca3a:	4b9a      	ldr	r3, [pc, #616]	; (800cca4 <_dtoa_r+0x324>)
 800ca3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca3e:	f103 3bff 	add.w	fp, r3, #4294967295
 800ca42:	6013      	str	r3, [r2, #0]
 800ca44:	f000 bd28 	b.w	800d498 <_dtoa_r+0xb18>
 800ca48:	aa14      	add	r2, sp, #80	; 0x50
 800ca4a:	a915      	add	r1, sp, #84	; 0x54
 800ca4c:	ec47 6b10 	vmov	d0, r6, r7
 800ca50:	4620      	mov	r0, r4
 800ca52:	f001 fdc1 	bl	800e5d8 <__d2b>
 800ca56:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ca5a:	9004      	str	r0, [sp, #16]
 800ca5c:	2d00      	cmp	r5, #0
 800ca5e:	d07c      	beq.n	800cb5a <_dtoa_r+0x1da>
 800ca60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca64:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ca68:	46b2      	mov	sl, r6
 800ca6a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ca6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ca72:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ca76:	2200      	movs	r2, #0
 800ca78:	4b8b      	ldr	r3, [pc, #556]	; (800cca8 <_dtoa_r+0x328>)
 800ca7a:	4650      	mov	r0, sl
 800ca7c:	4659      	mov	r1, fp
 800ca7e:	f7f3 fc03 	bl	8000288 <__aeabi_dsub>
 800ca82:	a381      	add	r3, pc, #516	; (adr r3, 800cc88 <_dtoa_r+0x308>)
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	f7f3 fdb6 	bl	80005f8 <__aeabi_dmul>
 800ca8c:	a380      	add	r3, pc, #512	; (adr r3, 800cc90 <_dtoa_r+0x310>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	f7f3 fbfb 	bl	800028c <__adddf3>
 800ca96:	4606      	mov	r6, r0
 800ca98:	4628      	mov	r0, r5
 800ca9a:	460f      	mov	r7, r1
 800ca9c:	f7f3 fd42 	bl	8000524 <__aeabi_i2d>
 800caa0:	a37d      	add	r3, pc, #500	; (adr r3, 800cc98 <_dtoa_r+0x318>)
 800caa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa6:	f7f3 fda7 	bl	80005f8 <__aeabi_dmul>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	4630      	mov	r0, r6
 800cab0:	4639      	mov	r1, r7
 800cab2:	f7f3 fbeb 	bl	800028c <__adddf3>
 800cab6:	4606      	mov	r6, r0
 800cab8:	460f      	mov	r7, r1
 800caba:	f7f4 f84d 	bl	8000b58 <__aeabi_d2iz>
 800cabe:	2200      	movs	r2, #0
 800cac0:	4682      	mov	sl, r0
 800cac2:	2300      	movs	r3, #0
 800cac4:	4630      	mov	r0, r6
 800cac6:	4639      	mov	r1, r7
 800cac8:	f7f4 f808 	bl	8000adc <__aeabi_dcmplt>
 800cacc:	b148      	cbz	r0, 800cae2 <_dtoa_r+0x162>
 800cace:	4650      	mov	r0, sl
 800cad0:	f7f3 fd28 	bl	8000524 <__aeabi_i2d>
 800cad4:	4632      	mov	r2, r6
 800cad6:	463b      	mov	r3, r7
 800cad8:	f7f3 fff6 	bl	8000ac8 <__aeabi_dcmpeq>
 800cadc:	b908      	cbnz	r0, 800cae2 <_dtoa_r+0x162>
 800cade:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cae2:	f1ba 0f16 	cmp.w	sl, #22
 800cae6:	d859      	bhi.n	800cb9c <_dtoa_r+0x21c>
 800cae8:	4970      	ldr	r1, [pc, #448]	; (800ccac <_dtoa_r+0x32c>)
 800caea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800caee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caf6:	f7f4 f80f 	bl	8000b18 <__aeabi_dcmpgt>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d050      	beq.n	800cba0 <_dtoa_r+0x220>
 800cafe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb02:	2300      	movs	r3, #0
 800cb04:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb08:	1b5d      	subs	r5, r3, r5
 800cb0a:	f1b5 0801 	subs.w	r8, r5, #1
 800cb0e:	bf49      	itett	mi
 800cb10:	f1c5 0301 	rsbmi	r3, r5, #1
 800cb14:	2300      	movpl	r3, #0
 800cb16:	9305      	strmi	r3, [sp, #20]
 800cb18:	f04f 0800 	movmi.w	r8, #0
 800cb1c:	bf58      	it	pl
 800cb1e:	9305      	strpl	r3, [sp, #20]
 800cb20:	f1ba 0f00 	cmp.w	sl, #0
 800cb24:	db3e      	blt.n	800cba4 <_dtoa_r+0x224>
 800cb26:	2300      	movs	r3, #0
 800cb28:	44d0      	add	r8, sl
 800cb2a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cb2e:	9307      	str	r3, [sp, #28]
 800cb30:	9b06      	ldr	r3, [sp, #24]
 800cb32:	2b09      	cmp	r3, #9
 800cb34:	f200 8090 	bhi.w	800cc58 <_dtoa_r+0x2d8>
 800cb38:	2b05      	cmp	r3, #5
 800cb3a:	bfc4      	itt	gt
 800cb3c:	3b04      	subgt	r3, #4
 800cb3e:	9306      	strgt	r3, [sp, #24]
 800cb40:	9b06      	ldr	r3, [sp, #24]
 800cb42:	f1a3 0302 	sub.w	r3, r3, #2
 800cb46:	bfcc      	ite	gt
 800cb48:	2500      	movgt	r5, #0
 800cb4a:	2501      	movle	r5, #1
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	f200 808f 	bhi.w	800cc70 <_dtoa_r+0x2f0>
 800cb52:	e8df f003 	tbb	[pc, r3]
 800cb56:	7f7d      	.short	0x7f7d
 800cb58:	7131      	.short	0x7131
 800cb5a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cb5e:	441d      	add	r5, r3
 800cb60:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cb64:	2820      	cmp	r0, #32
 800cb66:	dd13      	ble.n	800cb90 <_dtoa_r+0x210>
 800cb68:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cb6c:	9b00      	ldr	r3, [sp, #0]
 800cb6e:	fa08 f800 	lsl.w	r8, r8, r0
 800cb72:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cb76:	fa23 f000 	lsr.w	r0, r3, r0
 800cb7a:	ea48 0000 	orr.w	r0, r8, r0
 800cb7e:	f7f3 fcc1 	bl	8000504 <__aeabi_ui2d>
 800cb82:	2301      	movs	r3, #1
 800cb84:	4682      	mov	sl, r0
 800cb86:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cb8a:	3d01      	subs	r5, #1
 800cb8c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cb8e:	e772      	b.n	800ca76 <_dtoa_r+0xf6>
 800cb90:	9b00      	ldr	r3, [sp, #0]
 800cb92:	f1c0 0020 	rsb	r0, r0, #32
 800cb96:	fa03 f000 	lsl.w	r0, r3, r0
 800cb9a:	e7f0      	b.n	800cb7e <_dtoa_r+0x1fe>
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e7b1      	b.n	800cb04 <_dtoa_r+0x184>
 800cba0:	900f      	str	r0, [sp, #60]	; 0x3c
 800cba2:	e7b0      	b.n	800cb06 <_dtoa_r+0x186>
 800cba4:	9b05      	ldr	r3, [sp, #20]
 800cba6:	eba3 030a 	sub.w	r3, r3, sl
 800cbaa:	9305      	str	r3, [sp, #20]
 800cbac:	f1ca 0300 	rsb	r3, sl, #0
 800cbb0:	9307      	str	r3, [sp, #28]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	930e      	str	r3, [sp, #56]	; 0x38
 800cbb6:	e7bb      	b.n	800cb30 <_dtoa_r+0x1b0>
 800cbb8:	2301      	movs	r3, #1
 800cbba:	930a      	str	r3, [sp, #40]	; 0x28
 800cbbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	dd59      	ble.n	800cc76 <_dtoa_r+0x2f6>
 800cbc2:	9302      	str	r3, [sp, #8]
 800cbc4:	4699      	mov	r9, r3
 800cbc6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cbc8:	2200      	movs	r2, #0
 800cbca:	6072      	str	r2, [r6, #4]
 800cbcc:	2204      	movs	r2, #4
 800cbce:	f102 0014 	add.w	r0, r2, #20
 800cbd2:	4298      	cmp	r0, r3
 800cbd4:	6871      	ldr	r1, [r6, #4]
 800cbd6:	d953      	bls.n	800cc80 <_dtoa_r+0x300>
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f001 f9bb 	bl	800df54 <_Balloc>
 800cbde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbe0:	6030      	str	r0, [r6, #0]
 800cbe2:	f1b9 0f0e 	cmp.w	r9, #14
 800cbe6:	f8d3 b000 	ldr.w	fp, [r3]
 800cbea:	f200 80e6 	bhi.w	800cdba <_dtoa_r+0x43a>
 800cbee:	2d00      	cmp	r5, #0
 800cbf0:	f000 80e3 	beq.w	800cdba <_dtoa_r+0x43a>
 800cbf4:	ed9d 7b00 	vldr	d7, [sp]
 800cbf8:	f1ba 0f00 	cmp.w	sl, #0
 800cbfc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cc00:	dd74      	ble.n	800ccec <_dtoa_r+0x36c>
 800cc02:	4a2a      	ldr	r2, [pc, #168]	; (800ccac <_dtoa_r+0x32c>)
 800cc04:	f00a 030f 	and.w	r3, sl, #15
 800cc08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc0c:	ed93 7b00 	vldr	d7, [r3]
 800cc10:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cc14:	06f0      	lsls	r0, r6, #27
 800cc16:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cc1a:	d565      	bpl.n	800cce8 <_dtoa_r+0x368>
 800cc1c:	4b24      	ldr	r3, [pc, #144]	; (800ccb0 <_dtoa_r+0x330>)
 800cc1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cc22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc26:	f7f3 fe11 	bl	800084c <__aeabi_ddiv>
 800cc2a:	e9cd 0100 	strd	r0, r1, [sp]
 800cc2e:	f006 060f 	and.w	r6, r6, #15
 800cc32:	2503      	movs	r5, #3
 800cc34:	4f1e      	ldr	r7, [pc, #120]	; (800ccb0 <_dtoa_r+0x330>)
 800cc36:	e04c      	b.n	800ccd2 <_dtoa_r+0x352>
 800cc38:	2301      	movs	r3, #1
 800cc3a:	930a      	str	r3, [sp, #40]	; 0x28
 800cc3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc3e:	4453      	add	r3, sl
 800cc40:	f103 0901 	add.w	r9, r3, #1
 800cc44:	9302      	str	r3, [sp, #8]
 800cc46:	464b      	mov	r3, r9
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	bfb8      	it	lt
 800cc4c:	2301      	movlt	r3, #1
 800cc4e:	e7ba      	b.n	800cbc6 <_dtoa_r+0x246>
 800cc50:	2300      	movs	r3, #0
 800cc52:	e7b2      	b.n	800cbba <_dtoa_r+0x23a>
 800cc54:	2300      	movs	r3, #0
 800cc56:	e7f0      	b.n	800cc3a <_dtoa_r+0x2ba>
 800cc58:	2501      	movs	r5, #1
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	9306      	str	r3, [sp, #24]
 800cc5e:	950a      	str	r5, [sp, #40]	; 0x28
 800cc60:	f04f 33ff 	mov.w	r3, #4294967295
 800cc64:	9302      	str	r3, [sp, #8]
 800cc66:	4699      	mov	r9, r3
 800cc68:	2200      	movs	r2, #0
 800cc6a:	2312      	movs	r3, #18
 800cc6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc6e:	e7aa      	b.n	800cbc6 <_dtoa_r+0x246>
 800cc70:	2301      	movs	r3, #1
 800cc72:	930a      	str	r3, [sp, #40]	; 0x28
 800cc74:	e7f4      	b.n	800cc60 <_dtoa_r+0x2e0>
 800cc76:	2301      	movs	r3, #1
 800cc78:	9302      	str	r3, [sp, #8]
 800cc7a:	4699      	mov	r9, r3
 800cc7c:	461a      	mov	r2, r3
 800cc7e:	e7f5      	b.n	800cc6c <_dtoa_r+0x2ec>
 800cc80:	3101      	adds	r1, #1
 800cc82:	6071      	str	r1, [r6, #4]
 800cc84:	0052      	lsls	r2, r2, #1
 800cc86:	e7a2      	b.n	800cbce <_dtoa_r+0x24e>
 800cc88:	636f4361 	.word	0x636f4361
 800cc8c:	3fd287a7 	.word	0x3fd287a7
 800cc90:	8b60c8b3 	.word	0x8b60c8b3
 800cc94:	3fc68a28 	.word	0x3fc68a28
 800cc98:	509f79fb 	.word	0x509f79fb
 800cc9c:	3fd34413 	.word	0x3fd34413
 800cca0:	7ff00000 	.word	0x7ff00000
 800cca4:	08010565 	.word	0x08010565
 800cca8:	3ff80000 	.word	0x3ff80000
 800ccac:	08010688 	.word	0x08010688
 800ccb0:	08010660 	.word	0x08010660
 800ccb4:	080105e9 	.word	0x080105e9
 800ccb8:	07f1      	lsls	r1, r6, #31
 800ccba:	d508      	bpl.n	800ccce <_dtoa_r+0x34e>
 800ccbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ccc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccc4:	f7f3 fc98 	bl	80005f8 <__aeabi_dmul>
 800ccc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cccc:	3501      	adds	r5, #1
 800ccce:	1076      	asrs	r6, r6, #1
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	2e00      	cmp	r6, #0
 800ccd4:	d1f0      	bne.n	800ccb8 <_dtoa_r+0x338>
 800ccd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ccda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccde:	f7f3 fdb5 	bl	800084c <__aeabi_ddiv>
 800cce2:	e9cd 0100 	strd	r0, r1, [sp]
 800cce6:	e01a      	b.n	800cd1e <_dtoa_r+0x39e>
 800cce8:	2502      	movs	r5, #2
 800ccea:	e7a3      	b.n	800cc34 <_dtoa_r+0x2b4>
 800ccec:	f000 80a0 	beq.w	800ce30 <_dtoa_r+0x4b0>
 800ccf0:	f1ca 0600 	rsb	r6, sl, #0
 800ccf4:	4b9f      	ldr	r3, [pc, #636]	; (800cf74 <_dtoa_r+0x5f4>)
 800ccf6:	4fa0      	ldr	r7, [pc, #640]	; (800cf78 <_dtoa_r+0x5f8>)
 800ccf8:	f006 020f 	and.w	r2, r6, #15
 800ccfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd08:	f7f3 fc76 	bl	80005f8 <__aeabi_dmul>
 800cd0c:	e9cd 0100 	strd	r0, r1, [sp]
 800cd10:	1136      	asrs	r6, r6, #4
 800cd12:	2300      	movs	r3, #0
 800cd14:	2502      	movs	r5, #2
 800cd16:	2e00      	cmp	r6, #0
 800cd18:	d17f      	bne.n	800ce1a <_dtoa_r+0x49a>
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d1e1      	bne.n	800cce2 <_dtoa_r+0x362>
 800cd1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f000 8087 	beq.w	800ce34 <_dtoa_r+0x4b4>
 800cd26:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	4b93      	ldr	r3, [pc, #588]	; (800cf7c <_dtoa_r+0x5fc>)
 800cd2e:	4630      	mov	r0, r6
 800cd30:	4639      	mov	r1, r7
 800cd32:	f7f3 fed3 	bl	8000adc <__aeabi_dcmplt>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d07c      	beq.n	800ce34 <_dtoa_r+0x4b4>
 800cd3a:	f1b9 0f00 	cmp.w	r9, #0
 800cd3e:	d079      	beq.n	800ce34 <_dtoa_r+0x4b4>
 800cd40:	9b02      	ldr	r3, [sp, #8]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	dd35      	ble.n	800cdb2 <_dtoa_r+0x432>
 800cd46:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cd4a:	9308      	str	r3, [sp, #32]
 800cd4c:	4639      	mov	r1, r7
 800cd4e:	2200      	movs	r2, #0
 800cd50:	4b8b      	ldr	r3, [pc, #556]	; (800cf80 <_dtoa_r+0x600>)
 800cd52:	4630      	mov	r0, r6
 800cd54:	f7f3 fc50 	bl	80005f8 <__aeabi_dmul>
 800cd58:	e9cd 0100 	strd	r0, r1, [sp]
 800cd5c:	9f02      	ldr	r7, [sp, #8]
 800cd5e:	3501      	adds	r5, #1
 800cd60:	4628      	mov	r0, r5
 800cd62:	f7f3 fbdf 	bl	8000524 <__aeabi_i2d>
 800cd66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd6a:	f7f3 fc45 	bl	80005f8 <__aeabi_dmul>
 800cd6e:	2200      	movs	r2, #0
 800cd70:	4b84      	ldr	r3, [pc, #528]	; (800cf84 <_dtoa_r+0x604>)
 800cd72:	f7f3 fa8b 	bl	800028c <__adddf3>
 800cd76:	4605      	mov	r5, r0
 800cd78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cd7c:	2f00      	cmp	r7, #0
 800cd7e:	d15d      	bne.n	800ce3c <_dtoa_r+0x4bc>
 800cd80:	2200      	movs	r2, #0
 800cd82:	4b81      	ldr	r3, [pc, #516]	; (800cf88 <_dtoa_r+0x608>)
 800cd84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd88:	f7f3 fa7e 	bl	8000288 <__aeabi_dsub>
 800cd8c:	462a      	mov	r2, r5
 800cd8e:	4633      	mov	r3, r6
 800cd90:	e9cd 0100 	strd	r0, r1, [sp]
 800cd94:	f7f3 fec0 	bl	8000b18 <__aeabi_dcmpgt>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	f040 8288 	bne.w	800d2ae <_dtoa_r+0x92e>
 800cd9e:	462a      	mov	r2, r5
 800cda0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cda4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cda8:	f7f3 fe98 	bl	8000adc <__aeabi_dcmplt>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	f040 827c 	bne.w	800d2aa <_dtoa_r+0x92a>
 800cdb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cdb6:	e9cd 2300 	strd	r2, r3, [sp]
 800cdba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f2c0 8150 	blt.w	800d062 <_dtoa_r+0x6e2>
 800cdc2:	f1ba 0f0e 	cmp.w	sl, #14
 800cdc6:	f300 814c 	bgt.w	800d062 <_dtoa_r+0x6e2>
 800cdca:	4b6a      	ldr	r3, [pc, #424]	; (800cf74 <_dtoa_r+0x5f4>)
 800cdcc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cdd0:	ed93 7b00 	vldr	d7, [r3]
 800cdd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cddc:	f280 80d8 	bge.w	800cf90 <_dtoa_r+0x610>
 800cde0:	f1b9 0f00 	cmp.w	r9, #0
 800cde4:	f300 80d4 	bgt.w	800cf90 <_dtoa_r+0x610>
 800cde8:	f040 825e 	bne.w	800d2a8 <_dtoa_r+0x928>
 800cdec:	2200      	movs	r2, #0
 800cdee:	4b66      	ldr	r3, [pc, #408]	; (800cf88 <_dtoa_r+0x608>)
 800cdf0:	ec51 0b17 	vmov	r0, r1, d7
 800cdf4:	f7f3 fc00 	bl	80005f8 <__aeabi_dmul>
 800cdf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdfc:	f7f3 fe82 	bl	8000b04 <__aeabi_dcmpge>
 800ce00:	464f      	mov	r7, r9
 800ce02:	464e      	mov	r6, r9
 800ce04:	2800      	cmp	r0, #0
 800ce06:	f040 8234 	bne.w	800d272 <_dtoa_r+0x8f2>
 800ce0a:	2331      	movs	r3, #49	; 0x31
 800ce0c:	f10b 0501 	add.w	r5, fp, #1
 800ce10:	f88b 3000 	strb.w	r3, [fp]
 800ce14:	f10a 0a01 	add.w	sl, sl, #1
 800ce18:	e22f      	b.n	800d27a <_dtoa_r+0x8fa>
 800ce1a:	07f2      	lsls	r2, r6, #31
 800ce1c:	d505      	bpl.n	800ce2a <_dtoa_r+0x4aa>
 800ce1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce22:	f7f3 fbe9 	bl	80005f8 <__aeabi_dmul>
 800ce26:	3501      	adds	r5, #1
 800ce28:	2301      	movs	r3, #1
 800ce2a:	1076      	asrs	r6, r6, #1
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	e772      	b.n	800cd16 <_dtoa_r+0x396>
 800ce30:	2502      	movs	r5, #2
 800ce32:	e774      	b.n	800cd1e <_dtoa_r+0x39e>
 800ce34:	f8cd a020 	str.w	sl, [sp, #32]
 800ce38:	464f      	mov	r7, r9
 800ce3a:	e791      	b.n	800cd60 <_dtoa_r+0x3e0>
 800ce3c:	4b4d      	ldr	r3, [pc, #308]	; (800cf74 <_dtoa_r+0x5f4>)
 800ce3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ce46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d047      	beq.n	800cedc <_dtoa_r+0x55c>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	460b      	mov	r3, r1
 800ce50:	2000      	movs	r0, #0
 800ce52:	494e      	ldr	r1, [pc, #312]	; (800cf8c <_dtoa_r+0x60c>)
 800ce54:	f7f3 fcfa 	bl	800084c <__aeabi_ddiv>
 800ce58:	462a      	mov	r2, r5
 800ce5a:	4633      	mov	r3, r6
 800ce5c:	f7f3 fa14 	bl	8000288 <__aeabi_dsub>
 800ce60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ce64:	465d      	mov	r5, fp
 800ce66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce6a:	f7f3 fe75 	bl	8000b58 <__aeabi_d2iz>
 800ce6e:	4606      	mov	r6, r0
 800ce70:	f7f3 fb58 	bl	8000524 <__aeabi_i2d>
 800ce74:	4602      	mov	r2, r0
 800ce76:	460b      	mov	r3, r1
 800ce78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce7c:	f7f3 fa04 	bl	8000288 <__aeabi_dsub>
 800ce80:	3630      	adds	r6, #48	; 0x30
 800ce82:	f805 6b01 	strb.w	r6, [r5], #1
 800ce86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ce8a:	e9cd 0100 	strd	r0, r1, [sp]
 800ce8e:	f7f3 fe25 	bl	8000adc <__aeabi_dcmplt>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d163      	bne.n	800cf5e <_dtoa_r+0x5de>
 800ce96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce9a:	2000      	movs	r0, #0
 800ce9c:	4937      	ldr	r1, [pc, #220]	; (800cf7c <_dtoa_r+0x5fc>)
 800ce9e:	f7f3 f9f3 	bl	8000288 <__aeabi_dsub>
 800cea2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cea6:	f7f3 fe19 	bl	8000adc <__aeabi_dcmplt>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	f040 80b7 	bne.w	800d01e <_dtoa_r+0x69e>
 800ceb0:	eba5 030b 	sub.w	r3, r5, fp
 800ceb4:	429f      	cmp	r7, r3
 800ceb6:	f77f af7c 	ble.w	800cdb2 <_dtoa_r+0x432>
 800ceba:	2200      	movs	r2, #0
 800cebc:	4b30      	ldr	r3, [pc, #192]	; (800cf80 <_dtoa_r+0x600>)
 800cebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cec2:	f7f3 fb99 	bl	80005f8 <__aeabi_dmul>
 800cec6:	2200      	movs	r2, #0
 800cec8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cecc:	4b2c      	ldr	r3, [pc, #176]	; (800cf80 <_dtoa_r+0x600>)
 800cece:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ced2:	f7f3 fb91 	bl	80005f8 <__aeabi_dmul>
 800ced6:	e9cd 0100 	strd	r0, r1, [sp]
 800ceda:	e7c4      	b.n	800ce66 <_dtoa_r+0x4e6>
 800cedc:	462a      	mov	r2, r5
 800cede:	4633      	mov	r3, r6
 800cee0:	f7f3 fb8a 	bl	80005f8 <__aeabi_dmul>
 800cee4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cee8:	eb0b 0507 	add.w	r5, fp, r7
 800ceec:	465e      	mov	r6, fp
 800ceee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cef2:	f7f3 fe31 	bl	8000b58 <__aeabi_d2iz>
 800cef6:	4607      	mov	r7, r0
 800cef8:	f7f3 fb14 	bl	8000524 <__aeabi_i2d>
 800cefc:	3730      	adds	r7, #48	; 0x30
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf06:	f7f3 f9bf 	bl	8000288 <__aeabi_dsub>
 800cf0a:	f806 7b01 	strb.w	r7, [r6], #1
 800cf0e:	42ae      	cmp	r6, r5
 800cf10:	e9cd 0100 	strd	r0, r1, [sp]
 800cf14:	f04f 0200 	mov.w	r2, #0
 800cf18:	d126      	bne.n	800cf68 <_dtoa_r+0x5e8>
 800cf1a:	4b1c      	ldr	r3, [pc, #112]	; (800cf8c <_dtoa_r+0x60c>)
 800cf1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cf20:	f7f3 f9b4 	bl	800028c <__adddf3>
 800cf24:	4602      	mov	r2, r0
 800cf26:	460b      	mov	r3, r1
 800cf28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf2c:	f7f3 fdf4 	bl	8000b18 <__aeabi_dcmpgt>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d174      	bne.n	800d01e <_dtoa_r+0x69e>
 800cf34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cf38:	2000      	movs	r0, #0
 800cf3a:	4914      	ldr	r1, [pc, #80]	; (800cf8c <_dtoa_r+0x60c>)
 800cf3c:	f7f3 f9a4 	bl	8000288 <__aeabi_dsub>
 800cf40:	4602      	mov	r2, r0
 800cf42:	460b      	mov	r3, r1
 800cf44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf48:	f7f3 fdc8 	bl	8000adc <__aeabi_dcmplt>
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	f43f af30 	beq.w	800cdb2 <_dtoa_r+0x432>
 800cf52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf56:	2b30      	cmp	r3, #48	; 0x30
 800cf58:	f105 32ff 	add.w	r2, r5, #4294967295
 800cf5c:	d002      	beq.n	800cf64 <_dtoa_r+0x5e4>
 800cf5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cf62:	e04a      	b.n	800cffa <_dtoa_r+0x67a>
 800cf64:	4615      	mov	r5, r2
 800cf66:	e7f4      	b.n	800cf52 <_dtoa_r+0x5d2>
 800cf68:	4b05      	ldr	r3, [pc, #20]	; (800cf80 <_dtoa_r+0x600>)
 800cf6a:	f7f3 fb45 	bl	80005f8 <__aeabi_dmul>
 800cf6e:	e9cd 0100 	strd	r0, r1, [sp]
 800cf72:	e7bc      	b.n	800ceee <_dtoa_r+0x56e>
 800cf74:	08010688 	.word	0x08010688
 800cf78:	08010660 	.word	0x08010660
 800cf7c:	3ff00000 	.word	0x3ff00000
 800cf80:	40240000 	.word	0x40240000
 800cf84:	401c0000 	.word	0x401c0000
 800cf88:	40140000 	.word	0x40140000
 800cf8c:	3fe00000 	.word	0x3fe00000
 800cf90:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cf94:	465d      	mov	r5, fp
 800cf96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	4639      	mov	r1, r7
 800cf9e:	f7f3 fc55 	bl	800084c <__aeabi_ddiv>
 800cfa2:	f7f3 fdd9 	bl	8000b58 <__aeabi_d2iz>
 800cfa6:	4680      	mov	r8, r0
 800cfa8:	f7f3 fabc 	bl	8000524 <__aeabi_i2d>
 800cfac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfb0:	f7f3 fb22 	bl	80005f8 <__aeabi_dmul>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	4630      	mov	r0, r6
 800cfba:	4639      	mov	r1, r7
 800cfbc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800cfc0:	f7f3 f962 	bl	8000288 <__aeabi_dsub>
 800cfc4:	f805 6b01 	strb.w	r6, [r5], #1
 800cfc8:	eba5 060b 	sub.w	r6, r5, fp
 800cfcc:	45b1      	cmp	r9, r6
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	d139      	bne.n	800d048 <_dtoa_r+0x6c8>
 800cfd4:	f7f3 f95a 	bl	800028c <__adddf3>
 800cfd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfdc:	4606      	mov	r6, r0
 800cfde:	460f      	mov	r7, r1
 800cfe0:	f7f3 fd9a 	bl	8000b18 <__aeabi_dcmpgt>
 800cfe4:	b9c8      	cbnz	r0, 800d01a <_dtoa_r+0x69a>
 800cfe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfea:	4630      	mov	r0, r6
 800cfec:	4639      	mov	r1, r7
 800cfee:	f7f3 fd6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800cff2:	b110      	cbz	r0, 800cffa <_dtoa_r+0x67a>
 800cff4:	f018 0f01 	tst.w	r8, #1
 800cff8:	d10f      	bne.n	800d01a <_dtoa_r+0x69a>
 800cffa:	9904      	ldr	r1, [sp, #16]
 800cffc:	4620      	mov	r0, r4
 800cffe:	f000 ffdd 	bl	800dfbc <_Bfree>
 800d002:	2300      	movs	r3, #0
 800d004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d006:	702b      	strb	r3, [r5, #0]
 800d008:	f10a 0301 	add.w	r3, sl, #1
 800d00c:	6013      	str	r3, [r2, #0]
 800d00e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d010:	2b00      	cmp	r3, #0
 800d012:	f000 8241 	beq.w	800d498 <_dtoa_r+0xb18>
 800d016:	601d      	str	r5, [r3, #0]
 800d018:	e23e      	b.n	800d498 <_dtoa_r+0xb18>
 800d01a:	f8cd a020 	str.w	sl, [sp, #32]
 800d01e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d022:	2a39      	cmp	r2, #57	; 0x39
 800d024:	f105 33ff 	add.w	r3, r5, #4294967295
 800d028:	d108      	bne.n	800d03c <_dtoa_r+0x6bc>
 800d02a:	459b      	cmp	fp, r3
 800d02c:	d10a      	bne.n	800d044 <_dtoa_r+0x6c4>
 800d02e:	9b08      	ldr	r3, [sp, #32]
 800d030:	3301      	adds	r3, #1
 800d032:	9308      	str	r3, [sp, #32]
 800d034:	2330      	movs	r3, #48	; 0x30
 800d036:	f88b 3000 	strb.w	r3, [fp]
 800d03a:	465b      	mov	r3, fp
 800d03c:	781a      	ldrb	r2, [r3, #0]
 800d03e:	3201      	adds	r2, #1
 800d040:	701a      	strb	r2, [r3, #0]
 800d042:	e78c      	b.n	800cf5e <_dtoa_r+0x5de>
 800d044:	461d      	mov	r5, r3
 800d046:	e7ea      	b.n	800d01e <_dtoa_r+0x69e>
 800d048:	2200      	movs	r2, #0
 800d04a:	4b9b      	ldr	r3, [pc, #620]	; (800d2b8 <_dtoa_r+0x938>)
 800d04c:	f7f3 fad4 	bl	80005f8 <__aeabi_dmul>
 800d050:	2200      	movs	r2, #0
 800d052:	2300      	movs	r3, #0
 800d054:	4606      	mov	r6, r0
 800d056:	460f      	mov	r7, r1
 800d058:	f7f3 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	d09a      	beq.n	800cf96 <_dtoa_r+0x616>
 800d060:	e7cb      	b.n	800cffa <_dtoa_r+0x67a>
 800d062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d064:	2a00      	cmp	r2, #0
 800d066:	f000 808b 	beq.w	800d180 <_dtoa_r+0x800>
 800d06a:	9a06      	ldr	r2, [sp, #24]
 800d06c:	2a01      	cmp	r2, #1
 800d06e:	dc6e      	bgt.n	800d14e <_dtoa_r+0x7ce>
 800d070:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d072:	2a00      	cmp	r2, #0
 800d074:	d067      	beq.n	800d146 <_dtoa_r+0x7c6>
 800d076:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d07a:	9f07      	ldr	r7, [sp, #28]
 800d07c:	9d05      	ldr	r5, [sp, #20]
 800d07e:	9a05      	ldr	r2, [sp, #20]
 800d080:	2101      	movs	r1, #1
 800d082:	441a      	add	r2, r3
 800d084:	4620      	mov	r0, r4
 800d086:	9205      	str	r2, [sp, #20]
 800d088:	4498      	add	r8, r3
 800d08a:	f001 f875 	bl	800e178 <__i2b>
 800d08e:	4606      	mov	r6, r0
 800d090:	2d00      	cmp	r5, #0
 800d092:	dd0c      	ble.n	800d0ae <_dtoa_r+0x72e>
 800d094:	f1b8 0f00 	cmp.w	r8, #0
 800d098:	dd09      	ble.n	800d0ae <_dtoa_r+0x72e>
 800d09a:	4545      	cmp	r5, r8
 800d09c:	9a05      	ldr	r2, [sp, #20]
 800d09e:	462b      	mov	r3, r5
 800d0a0:	bfa8      	it	ge
 800d0a2:	4643      	movge	r3, r8
 800d0a4:	1ad2      	subs	r2, r2, r3
 800d0a6:	9205      	str	r2, [sp, #20]
 800d0a8:	1aed      	subs	r5, r5, r3
 800d0aa:	eba8 0803 	sub.w	r8, r8, r3
 800d0ae:	9b07      	ldr	r3, [sp, #28]
 800d0b0:	b1eb      	cbz	r3, 800d0ee <_dtoa_r+0x76e>
 800d0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d067      	beq.n	800d188 <_dtoa_r+0x808>
 800d0b8:	b18f      	cbz	r7, 800d0de <_dtoa_r+0x75e>
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	463a      	mov	r2, r7
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f001 f8fa 	bl	800e2b8 <__pow5mult>
 800d0c4:	9a04      	ldr	r2, [sp, #16]
 800d0c6:	4601      	mov	r1, r0
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f001 f85d 	bl	800e18a <__multiply>
 800d0d0:	9904      	ldr	r1, [sp, #16]
 800d0d2:	9008      	str	r0, [sp, #32]
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	f000 ff71 	bl	800dfbc <_Bfree>
 800d0da:	9b08      	ldr	r3, [sp, #32]
 800d0dc:	9304      	str	r3, [sp, #16]
 800d0de:	9b07      	ldr	r3, [sp, #28]
 800d0e0:	1bda      	subs	r2, r3, r7
 800d0e2:	d004      	beq.n	800d0ee <_dtoa_r+0x76e>
 800d0e4:	9904      	ldr	r1, [sp, #16]
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f001 f8e6 	bl	800e2b8 <__pow5mult>
 800d0ec:	9004      	str	r0, [sp, #16]
 800d0ee:	2101      	movs	r1, #1
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f001 f841 	bl	800e178 <__i2b>
 800d0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0f8:	4607      	mov	r7, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f000 81d0 	beq.w	800d4a0 <_dtoa_r+0xb20>
 800d100:	461a      	mov	r2, r3
 800d102:	4601      	mov	r1, r0
 800d104:	4620      	mov	r0, r4
 800d106:	f001 f8d7 	bl	800e2b8 <__pow5mult>
 800d10a:	9b06      	ldr	r3, [sp, #24]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	4607      	mov	r7, r0
 800d110:	dc40      	bgt.n	800d194 <_dtoa_r+0x814>
 800d112:	9b00      	ldr	r3, [sp, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d139      	bne.n	800d18c <_dtoa_r+0x80c>
 800d118:	9b01      	ldr	r3, [sp, #4]
 800d11a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d136      	bne.n	800d190 <_dtoa_r+0x810>
 800d122:	9b01      	ldr	r3, [sp, #4]
 800d124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d128:	0d1b      	lsrs	r3, r3, #20
 800d12a:	051b      	lsls	r3, r3, #20
 800d12c:	b12b      	cbz	r3, 800d13a <_dtoa_r+0x7ba>
 800d12e:	9b05      	ldr	r3, [sp, #20]
 800d130:	3301      	adds	r3, #1
 800d132:	9305      	str	r3, [sp, #20]
 800d134:	f108 0801 	add.w	r8, r8, #1
 800d138:	2301      	movs	r3, #1
 800d13a:	9307      	str	r3, [sp, #28]
 800d13c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d12a      	bne.n	800d198 <_dtoa_r+0x818>
 800d142:	2001      	movs	r0, #1
 800d144:	e030      	b.n	800d1a8 <_dtoa_r+0x828>
 800d146:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d148:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d14c:	e795      	b.n	800d07a <_dtoa_r+0x6fa>
 800d14e:	9b07      	ldr	r3, [sp, #28]
 800d150:	f109 37ff 	add.w	r7, r9, #4294967295
 800d154:	42bb      	cmp	r3, r7
 800d156:	bfbf      	itttt	lt
 800d158:	9b07      	ldrlt	r3, [sp, #28]
 800d15a:	9707      	strlt	r7, [sp, #28]
 800d15c:	1afa      	sublt	r2, r7, r3
 800d15e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d160:	bfbb      	ittet	lt
 800d162:	189b      	addlt	r3, r3, r2
 800d164:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d166:	1bdf      	subge	r7, r3, r7
 800d168:	2700      	movlt	r7, #0
 800d16a:	f1b9 0f00 	cmp.w	r9, #0
 800d16e:	bfb5      	itete	lt
 800d170:	9b05      	ldrlt	r3, [sp, #20]
 800d172:	9d05      	ldrge	r5, [sp, #20]
 800d174:	eba3 0509 	sublt.w	r5, r3, r9
 800d178:	464b      	movge	r3, r9
 800d17a:	bfb8      	it	lt
 800d17c:	2300      	movlt	r3, #0
 800d17e:	e77e      	b.n	800d07e <_dtoa_r+0x6fe>
 800d180:	9f07      	ldr	r7, [sp, #28]
 800d182:	9d05      	ldr	r5, [sp, #20]
 800d184:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d186:	e783      	b.n	800d090 <_dtoa_r+0x710>
 800d188:	9a07      	ldr	r2, [sp, #28]
 800d18a:	e7ab      	b.n	800d0e4 <_dtoa_r+0x764>
 800d18c:	2300      	movs	r3, #0
 800d18e:	e7d4      	b.n	800d13a <_dtoa_r+0x7ba>
 800d190:	9b00      	ldr	r3, [sp, #0]
 800d192:	e7d2      	b.n	800d13a <_dtoa_r+0x7ba>
 800d194:	2300      	movs	r3, #0
 800d196:	9307      	str	r3, [sp, #28]
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d19e:	6918      	ldr	r0, [r3, #16]
 800d1a0:	f000 ff9c 	bl	800e0dc <__hi0bits>
 800d1a4:	f1c0 0020 	rsb	r0, r0, #32
 800d1a8:	4440      	add	r0, r8
 800d1aa:	f010 001f 	ands.w	r0, r0, #31
 800d1ae:	d047      	beq.n	800d240 <_dtoa_r+0x8c0>
 800d1b0:	f1c0 0320 	rsb	r3, r0, #32
 800d1b4:	2b04      	cmp	r3, #4
 800d1b6:	dd3b      	ble.n	800d230 <_dtoa_r+0x8b0>
 800d1b8:	9b05      	ldr	r3, [sp, #20]
 800d1ba:	f1c0 001c 	rsb	r0, r0, #28
 800d1be:	4403      	add	r3, r0
 800d1c0:	9305      	str	r3, [sp, #20]
 800d1c2:	4405      	add	r5, r0
 800d1c4:	4480      	add	r8, r0
 800d1c6:	9b05      	ldr	r3, [sp, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	dd05      	ble.n	800d1d8 <_dtoa_r+0x858>
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	9904      	ldr	r1, [sp, #16]
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f001 f8bf 	bl	800e354 <__lshift>
 800d1d6:	9004      	str	r0, [sp, #16]
 800d1d8:	f1b8 0f00 	cmp.w	r8, #0
 800d1dc:	dd05      	ble.n	800d1ea <_dtoa_r+0x86a>
 800d1de:	4639      	mov	r1, r7
 800d1e0:	4642      	mov	r2, r8
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f001 f8b6 	bl	800e354 <__lshift>
 800d1e8:	4607      	mov	r7, r0
 800d1ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1ec:	b353      	cbz	r3, 800d244 <_dtoa_r+0x8c4>
 800d1ee:	4639      	mov	r1, r7
 800d1f0:	9804      	ldr	r0, [sp, #16]
 800d1f2:	f001 f903 	bl	800e3fc <__mcmp>
 800d1f6:	2800      	cmp	r0, #0
 800d1f8:	da24      	bge.n	800d244 <_dtoa_r+0x8c4>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	220a      	movs	r2, #10
 800d1fe:	9904      	ldr	r1, [sp, #16]
 800d200:	4620      	mov	r0, r4
 800d202:	f000 fef2 	bl	800dfea <__multadd>
 800d206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d208:	9004      	str	r0, [sp, #16]
 800d20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f000 814d 	beq.w	800d4ae <_dtoa_r+0xb2e>
 800d214:	2300      	movs	r3, #0
 800d216:	4631      	mov	r1, r6
 800d218:	220a      	movs	r2, #10
 800d21a:	4620      	mov	r0, r4
 800d21c:	f000 fee5 	bl	800dfea <__multadd>
 800d220:	9b02      	ldr	r3, [sp, #8]
 800d222:	2b00      	cmp	r3, #0
 800d224:	4606      	mov	r6, r0
 800d226:	dc4f      	bgt.n	800d2c8 <_dtoa_r+0x948>
 800d228:	9b06      	ldr	r3, [sp, #24]
 800d22a:	2b02      	cmp	r3, #2
 800d22c:	dd4c      	ble.n	800d2c8 <_dtoa_r+0x948>
 800d22e:	e011      	b.n	800d254 <_dtoa_r+0x8d4>
 800d230:	d0c9      	beq.n	800d1c6 <_dtoa_r+0x846>
 800d232:	9a05      	ldr	r2, [sp, #20]
 800d234:	331c      	adds	r3, #28
 800d236:	441a      	add	r2, r3
 800d238:	9205      	str	r2, [sp, #20]
 800d23a:	441d      	add	r5, r3
 800d23c:	4498      	add	r8, r3
 800d23e:	e7c2      	b.n	800d1c6 <_dtoa_r+0x846>
 800d240:	4603      	mov	r3, r0
 800d242:	e7f6      	b.n	800d232 <_dtoa_r+0x8b2>
 800d244:	f1b9 0f00 	cmp.w	r9, #0
 800d248:	dc38      	bgt.n	800d2bc <_dtoa_r+0x93c>
 800d24a:	9b06      	ldr	r3, [sp, #24]
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	dd35      	ble.n	800d2bc <_dtoa_r+0x93c>
 800d250:	f8cd 9008 	str.w	r9, [sp, #8]
 800d254:	9b02      	ldr	r3, [sp, #8]
 800d256:	b963      	cbnz	r3, 800d272 <_dtoa_r+0x8f2>
 800d258:	4639      	mov	r1, r7
 800d25a:	2205      	movs	r2, #5
 800d25c:	4620      	mov	r0, r4
 800d25e:	f000 fec4 	bl	800dfea <__multadd>
 800d262:	4601      	mov	r1, r0
 800d264:	4607      	mov	r7, r0
 800d266:	9804      	ldr	r0, [sp, #16]
 800d268:	f001 f8c8 	bl	800e3fc <__mcmp>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	f73f adcc 	bgt.w	800ce0a <_dtoa_r+0x48a>
 800d272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d274:	465d      	mov	r5, fp
 800d276:	ea6f 0a03 	mvn.w	sl, r3
 800d27a:	f04f 0900 	mov.w	r9, #0
 800d27e:	4639      	mov	r1, r7
 800d280:	4620      	mov	r0, r4
 800d282:	f000 fe9b 	bl	800dfbc <_Bfree>
 800d286:	2e00      	cmp	r6, #0
 800d288:	f43f aeb7 	beq.w	800cffa <_dtoa_r+0x67a>
 800d28c:	f1b9 0f00 	cmp.w	r9, #0
 800d290:	d005      	beq.n	800d29e <_dtoa_r+0x91e>
 800d292:	45b1      	cmp	r9, r6
 800d294:	d003      	beq.n	800d29e <_dtoa_r+0x91e>
 800d296:	4649      	mov	r1, r9
 800d298:	4620      	mov	r0, r4
 800d29a:	f000 fe8f 	bl	800dfbc <_Bfree>
 800d29e:	4631      	mov	r1, r6
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f000 fe8b 	bl	800dfbc <_Bfree>
 800d2a6:	e6a8      	b.n	800cffa <_dtoa_r+0x67a>
 800d2a8:	2700      	movs	r7, #0
 800d2aa:	463e      	mov	r6, r7
 800d2ac:	e7e1      	b.n	800d272 <_dtoa_r+0x8f2>
 800d2ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d2b2:	463e      	mov	r6, r7
 800d2b4:	e5a9      	b.n	800ce0a <_dtoa_r+0x48a>
 800d2b6:	bf00      	nop
 800d2b8:	40240000 	.word	0x40240000
 800d2bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2be:	f8cd 9008 	str.w	r9, [sp, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 80fa 	beq.w	800d4bc <_dtoa_r+0xb3c>
 800d2c8:	2d00      	cmp	r5, #0
 800d2ca:	dd05      	ble.n	800d2d8 <_dtoa_r+0x958>
 800d2cc:	4631      	mov	r1, r6
 800d2ce:	462a      	mov	r2, r5
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f001 f83f 	bl	800e354 <__lshift>
 800d2d6:	4606      	mov	r6, r0
 800d2d8:	9b07      	ldr	r3, [sp, #28]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d04c      	beq.n	800d378 <_dtoa_r+0x9f8>
 800d2de:	6871      	ldr	r1, [r6, #4]
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f000 fe37 	bl	800df54 <_Balloc>
 800d2e6:	6932      	ldr	r2, [r6, #16]
 800d2e8:	3202      	adds	r2, #2
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	0092      	lsls	r2, r2, #2
 800d2ee:	f106 010c 	add.w	r1, r6, #12
 800d2f2:	300c      	adds	r0, #12
 800d2f4:	f7fd fc52 	bl	800ab9c <memcpy>
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	4629      	mov	r1, r5
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f001 f829 	bl	800e354 <__lshift>
 800d302:	9b00      	ldr	r3, [sp, #0]
 800d304:	f8cd b014 	str.w	fp, [sp, #20]
 800d308:	f003 0301 	and.w	r3, r3, #1
 800d30c:	46b1      	mov	r9, r6
 800d30e:	9307      	str	r3, [sp, #28]
 800d310:	4606      	mov	r6, r0
 800d312:	4639      	mov	r1, r7
 800d314:	9804      	ldr	r0, [sp, #16]
 800d316:	f7ff faa5 	bl	800c864 <quorem>
 800d31a:	4649      	mov	r1, r9
 800d31c:	4605      	mov	r5, r0
 800d31e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d322:	9804      	ldr	r0, [sp, #16]
 800d324:	f001 f86a 	bl	800e3fc <__mcmp>
 800d328:	4632      	mov	r2, r6
 800d32a:	9000      	str	r0, [sp, #0]
 800d32c:	4639      	mov	r1, r7
 800d32e:	4620      	mov	r0, r4
 800d330:	f001 f87e 	bl	800e430 <__mdiff>
 800d334:	68c3      	ldr	r3, [r0, #12]
 800d336:	4602      	mov	r2, r0
 800d338:	bb03      	cbnz	r3, 800d37c <_dtoa_r+0x9fc>
 800d33a:	4601      	mov	r1, r0
 800d33c:	9008      	str	r0, [sp, #32]
 800d33e:	9804      	ldr	r0, [sp, #16]
 800d340:	f001 f85c 	bl	800e3fc <__mcmp>
 800d344:	9a08      	ldr	r2, [sp, #32]
 800d346:	4603      	mov	r3, r0
 800d348:	4611      	mov	r1, r2
 800d34a:	4620      	mov	r0, r4
 800d34c:	9308      	str	r3, [sp, #32]
 800d34e:	f000 fe35 	bl	800dfbc <_Bfree>
 800d352:	9b08      	ldr	r3, [sp, #32]
 800d354:	b9a3      	cbnz	r3, 800d380 <_dtoa_r+0xa00>
 800d356:	9a06      	ldr	r2, [sp, #24]
 800d358:	b992      	cbnz	r2, 800d380 <_dtoa_r+0xa00>
 800d35a:	9a07      	ldr	r2, [sp, #28]
 800d35c:	b982      	cbnz	r2, 800d380 <_dtoa_r+0xa00>
 800d35e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d362:	d029      	beq.n	800d3b8 <_dtoa_r+0xa38>
 800d364:	9b00      	ldr	r3, [sp, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	dd01      	ble.n	800d36e <_dtoa_r+0x9ee>
 800d36a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d36e:	9b05      	ldr	r3, [sp, #20]
 800d370:	1c5d      	adds	r5, r3, #1
 800d372:	f883 8000 	strb.w	r8, [r3]
 800d376:	e782      	b.n	800d27e <_dtoa_r+0x8fe>
 800d378:	4630      	mov	r0, r6
 800d37a:	e7c2      	b.n	800d302 <_dtoa_r+0x982>
 800d37c:	2301      	movs	r3, #1
 800d37e:	e7e3      	b.n	800d348 <_dtoa_r+0x9c8>
 800d380:	9a00      	ldr	r2, [sp, #0]
 800d382:	2a00      	cmp	r2, #0
 800d384:	db04      	blt.n	800d390 <_dtoa_r+0xa10>
 800d386:	d125      	bne.n	800d3d4 <_dtoa_r+0xa54>
 800d388:	9a06      	ldr	r2, [sp, #24]
 800d38a:	bb1a      	cbnz	r2, 800d3d4 <_dtoa_r+0xa54>
 800d38c:	9a07      	ldr	r2, [sp, #28]
 800d38e:	bb0a      	cbnz	r2, 800d3d4 <_dtoa_r+0xa54>
 800d390:	2b00      	cmp	r3, #0
 800d392:	ddec      	ble.n	800d36e <_dtoa_r+0x9ee>
 800d394:	2201      	movs	r2, #1
 800d396:	9904      	ldr	r1, [sp, #16]
 800d398:	4620      	mov	r0, r4
 800d39a:	f000 ffdb 	bl	800e354 <__lshift>
 800d39e:	4639      	mov	r1, r7
 800d3a0:	9004      	str	r0, [sp, #16]
 800d3a2:	f001 f82b 	bl	800e3fc <__mcmp>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	dc03      	bgt.n	800d3b2 <_dtoa_r+0xa32>
 800d3aa:	d1e0      	bne.n	800d36e <_dtoa_r+0x9ee>
 800d3ac:	f018 0f01 	tst.w	r8, #1
 800d3b0:	d0dd      	beq.n	800d36e <_dtoa_r+0x9ee>
 800d3b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d3b6:	d1d8      	bne.n	800d36a <_dtoa_r+0x9ea>
 800d3b8:	9b05      	ldr	r3, [sp, #20]
 800d3ba:	9a05      	ldr	r2, [sp, #20]
 800d3bc:	1c5d      	adds	r5, r3, #1
 800d3be:	2339      	movs	r3, #57	; 0x39
 800d3c0:	7013      	strb	r3, [r2, #0]
 800d3c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d3c6:	2b39      	cmp	r3, #57	; 0x39
 800d3c8:	f105 32ff 	add.w	r2, r5, #4294967295
 800d3cc:	d04f      	beq.n	800d46e <_dtoa_r+0xaee>
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	7013      	strb	r3, [r2, #0]
 800d3d2:	e754      	b.n	800d27e <_dtoa_r+0x8fe>
 800d3d4:	9a05      	ldr	r2, [sp, #20]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f102 0501 	add.w	r5, r2, #1
 800d3dc:	dd06      	ble.n	800d3ec <_dtoa_r+0xa6c>
 800d3de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d3e2:	d0e9      	beq.n	800d3b8 <_dtoa_r+0xa38>
 800d3e4:	f108 0801 	add.w	r8, r8, #1
 800d3e8:	9b05      	ldr	r3, [sp, #20]
 800d3ea:	e7c2      	b.n	800d372 <_dtoa_r+0x9f2>
 800d3ec:	9a02      	ldr	r2, [sp, #8]
 800d3ee:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d3f2:	eba5 030b 	sub.w	r3, r5, fp
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d021      	beq.n	800d43e <_dtoa_r+0xabe>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	220a      	movs	r2, #10
 800d3fe:	9904      	ldr	r1, [sp, #16]
 800d400:	4620      	mov	r0, r4
 800d402:	f000 fdf2 	bl	800dfea <__multadd>
 800d406:	45b1      	cmp	r9, r6
 800d408:	9004      	str	r0, [sp, #16]
 800d40a:	f04f 0300 	mov.w	r3, #0
 800d40e:	f04f 020a 	mov.w	r2, #10
 800d412:	4649      	mov	r1, r9
 800d414:	4620      	mov	r0, r4
 800d416:	d105      	bne.n	800d424 <_dtoa_r+0xaa4>
 800d418:	f000 fde7 	bl	800dfea <__multadd>
 800d41c:	4681      	mov	r9, r0
 800d41e:	4606      	mov	r6, r0
 800d420:	9505      	str	r5, [sp, #20]
 800d422:	e776      	b.n	800d312 <_dtoa_r+0x992>
 800d424:	f000 fde1 	bl	800dfea <__multadd>
 800d428:	4631      	mov	r1, r6
 800d42a:	4681      	mov	r9, r0
 800d42c:	2300      	movs	r3, #0
 800d42e:	220a      	movs	r2, #10
 800d430:	4620      	mov	r0, r4
 800d432:	f000 fdda 	bl	800dfea <__multadd>
 800d436:	4606      	mov	r6, r0
 800d438:	e7f2      	b.n	800d420 <_dtoa_r+0xaa0>
 800d43a:	f04f 0900 	mov.w	r9, #0
 800d43e:	2201      	movs	r2, #1
 800d440:	9904      	ldr	r1, [sp, #16]
 800d442:	4620      	mov	r0, r4
 800d444:	f000 ff86 	bl	800e354 <__lshift>
 800d448:	4639      	mov	r1, r7
 800d44a:	9004      	str	r0, [sp, #16]
 800d44c:	f000 ffd6 	bl	800e3fc <__mcmp>
 800d450:	2800      	cmp	r0, #0
 800d452:	dcb6      	bgt.n	800d3c2 <_dtoa_r+0xa42>
 800d454:	d102      	bne.n	800d45c <_dtoa_r+0xadc>
 800d456:	f018 0f01 	tst.w	r8, #1
 800d45a:	d1b2      	bne.n	800d3c2 <_dtoa_r+0xa42>
 800d45c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d460:	2b30      	cmp	r3, #48	; 0x30
 800d462:	f105 32ff 	add.w	r2, r5, #4294967295
 800d466:	f47f af0a 	bne.w	800d27e <_dtoa_r+0x8fe>
 800d46a:	4615      	mov	r5, r2
 800d46c:	e7f6      	b.n	800d45c <_dtoa_r+0xadc>
 800d46e:	4593      	cmp	fp, r2
 800d470:	d105      	bne.n	800d47e <_dtoa_r+0xafe>
 800d472:	2331      	movs	r3, #49	; 0x31
 800d474:	f10a 0a01 	add.w	sl, sl, #1
 800d478:	f88b 3000 	strb.w	r3, [fp]
 800d47c:	e6ff      	b.n	800d27e <_dtoa_r+0x8fe>
 800d47e:	4615      	mov	r5, r2
 800d480:	e79f      	b.n	800d3c2 <_dtoa_r+0xa42>
 800d482:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d4e8 <_dtoa_r+0xb68>
 800d486:	e007      	b.n	800d498 <_dtoa_r+0xb18>
 800d488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d48a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d4ec <_dtoa_r+0xb6c>
 800d48e:	b11b      	cbz	r3, 800d498 <_dtoa_r+0xb18>
 800d490:	f10b 0308 	add.w	r3, fp, #8
 800d494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d496:	6013      	str	r3, [r2, #0]
 800d498:	4658      	mov	r0, fp
 800d49a:	b017      	add	sp, #92	; 0x5c
 800d49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a0:	9b06      	ldr	r3, [sp, #24]
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	f77f ae35 	ble.w	800d112 <_dtoa_r+0x792>
 800d4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4aa:	9307      	str	r3, [sp, #28]
 800d4ac:	e649      	b.n	800d142 <_dtoa_r+0x7c2>
 800d4ae:	9b02      	ldr	r3, [sp, #8]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	dc03      	bgt.n	800d4bc <_dtoa_r+0xb3c>
 800d4b4:	9b06      	ldr	r3, [sp, #24]
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	f73f aecc 	bgt.w	800d254 <_dtoa_r+0x8d4>
 800d4bc:	465d      	mov	r5, fp
 800d4be:	4639      	mov	r1, r7
 800d4c0:	9804      	ldr	r0, [sp, #16]
 800d4c2:	f7ff f9cf 	bl	800c864 <quorem>
 800d4c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d4ca:	f805 8b01 	strb.w	r8, [r5], #1
 800d4ce:	9a02      	ldr	r2, [sp, #8]
 800d4d0:	eba5 030b 	sub.w	r3, r5, fp
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	ddb0      	ble.n	800d43a <_dtoa_r+0xaba>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	220a      	movs	r2, #10
 800d4dc:	9904      	ldr	r1, [sp, #16]
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f000 fd83 	bl	800dfea <__multadd>
 800d4e4:	9004      	str	r0, [sp, #16]
 800d4e6:	e7ea      	b.n	800d4be <_dtoa_r+0xb3e>
 800d4e8:	08010564 	.word	0x08010564
 800d4ec:	080105e0 	.word	0x080105e0

0800d4f0 <__sflush_r>:
 800d4f0:	898a      	ldrh	r2, [r1, #12]
 800d4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f6:	4605      	mov	r5, r0
 800d4f8:	0710      	lsls	r0, r2, #28
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	d458      	bmi.n	800d5b0 <__sflush_r+0xc0>
 800d4fe:	684b      	ldr	r3, [r1, #4]
 800d500:	2b00      	cmp	r3, #0
 800d502:	dc05      	bgt.n	800d510 <__sflush_r+0x20>
 800d504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d506:	2b00      	cmp	r3, #0
 800d508:	dc02      	bgt.n	800d510 <__sflush_r+0x20>
 800d50a:	2000      	movs	r0, #0
 800d50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d512:	2e00      	cmp	r6, #0
 800d514:	d0f9      	beq.n	800d50a <__sflush_r+0x1a>
 800d516:	2300      	movs	r3, #0
 800d518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d51c:	682f      	ldr	r7, [r5, #0]
 800d51e:	6a21      	ldr	r1, [r4, #32]
 800d520:	602b      	str	r3, [r5, #0]
 800d522:	d032      	beq.n	800d58a <__sflush_r+0x9a>
 800d524:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d526:	89a3      	ldrh	r3, [r4, #12]
 800d528:	075a      	lsls	r2, r3, #29
 800d52a:	d505      	bpl.n	800d538 <__sflush_r+0x48>
 800d52c:	6863      	ldr	r3, [r4, #4]
 800d52e:	1ac0      	subs	r0, r0, r3
 800d530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d532:	b10b      	cbz	r3, 800d538 <__sflush_r+0x48>
 800d534:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d536:	1ac0      	subs	r0, r0, r3
 800d538:	2300      	movs	r3, #0
 800d53a:	4602      	mov	r2, r0
 800d53c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d53e:	6a21      	ldr	r1, [r4, #32]
 800d540:	4628      	mov	r0, r5
 800d542:	47b0      	blx	r6
 800d544:	1c43      	adds	r3, r0, #1
 800d546:	89a3      	ldrh	r3, [r4, #12]
 800d548:	d106      	bne.n	800d558 <__sflush_r+0x68>
 800d54a:	6829      	ldr	r1, [r5, #0]
 800d54c:	291d      	cmp	r1, #29
 800d54e:	d848      	bhi.n	800d5e2 <__sflush_r+0xf2>
 800d550:	4a29      	ldr	r2, [pc, #164]	; (800d5f8 <__sflush_r+0x108>)
 800d552:	40ca      	lsrs	r2, r1
 800d554:	07d6      	lsls	r6, r2, #31
 800d556:	d544      	bpl.n	800d5e2 <__sflush_r+0xf2>
 800d558:	2200      	movs	r2, #0
 800d55a:	6062      	str	r2, [r4, #4]
 800d55c:	04d9      	lsls	r1, r3, #19
 800d55e:	6922      	ldr	r2, [r4, #16]
 800d560:	6022      	str	r2, [r4, #0]
 800d562:	d504      	bpl.n	800d56e <__sflush_r+0x7e>
 800d564:	1c42      	adds	r2, r0, #1
 800d566:	d101      	bne.n	800d56c <__sflush_r+0x7c>
 800d568:	682b      	ldr	r3, [r5, #0]
 800d56a:	b903      	cbnz	r3, 800d56e <__sflush_r+0x7e>
 800d56c:	6560      	str	r0, [r4, #84]	; 0x54
 800d56e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d570:	602f      	str	r7, [r5, #0]
 800d572:	2900      	cmp	r1, #0
 800d574:	d0c9      	beq.n	800d50a <__sflush_r+0x1a>
 800d576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d57a:	4299      	cmp	r1, r3
 800d57c:	d002      	beq.n	800d584 <__sflush_r+0x94>
 800d57e:	4628      	mov	r0, r5
 800d580:	f001 f8f6 	bl	800e770 <_free_r>
 800d584:	2000      	movs	r0, #0
 800d586:	6360      	str	r0, [r4, #52]	; 0x34
 800d588:	e7c0      	b.n	800d50c <__sflush_r+0x1c>
 800d58a:	2301      	movs	r3, #1
 800d58c:	4628      	mov	r0, r5
 800d58e:	47b0      	blx	r6
 800d590:	1c41      	adds	r1, r0, #1
 800d592:	d1c8      	bne.n	800d526 <__sflush_r+0x36>
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d0c5      	beq.n	800d526 <__sflush_r+0x36>
 800d59a:	2b1d      	cmp	r3, #29
 800d59c:	d001      	beq.n	800d5a2 <__sflush_r+0xb2>
 800d59e:	2b16      	cmp	r3, #22
 800d5a0:	d101      	bne.n	800d5a6 <__sflush_r+0xb6>
 800d5a2:	602f      	str	r7, [r5, #0]
 800d5a4:	e7b1      	b.n	800d50a <__sflush_r+0x1a>
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5ac:	81a3      	strh	r3, [r4, #12]
 800d5ae:	e7ad      	b.n	800d50c <__sflush_r+0x1c>
 800d5b0:	690f      	ldr	r7, [r1, #16]
 800d5b2:	2f00      	cmp	r7, #0
 800d5b4:	d0a9      	beq.n	800d50a <__sflush_r+0x1a>
 800d5b6:	0793      	lsls	r3, r2, #30
 800d5b8:	680e      	ldr	r6, [r1, #0]
 800d5ba:	bf08      	it	eq
 800d5bc:	694b      	ldreq	r3, [r1, #20]
 800d5be:	600f      	str	r7, [r1, #0]
 800d5c0:	bf18      	it	ne
 800d5c2:	2300      	movne	r3, #0
 800d5c4:	eba6 0807 	sub.w	r8, r6, r7
 800d5c8:	608b      	str	r3, [r1, #8]
 800d5ca:	f1b8 0f00 	cmp.w	r8, #0
 800d5ce:	dd9c      	ble.n	800d50a <__sflush_r+0x1a>
 800d5d0:	4643      	mov	r3, r8
 800d5d2:	463a      	mov	r2, r7
 800d5d4:	6a21      	ldr	r1, [r4, #32]
 800d5d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5d8:	4628      	mov	r0, r5
 800d5da:	47b0      	blx	r6
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	dc06      	bgt.n	800d5ee <__sflush_r+0xfe>
 800d5e0:	89a3      	ldrh	r3, [r4, #12]
 800d5e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5e6:	81a3      	strh	r3, [r4, #12]
 800d5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ec:	e78e      	b.n	800d50c <__sflush_r+0x1c>
 800d5ee:	4407      	add	r7, r0
 800d5f0:	eba8 0800 	sub.w	r8, r8, r0
 800d5f4:	e7e9      	b.n	800d5ca <__sflush_r+0xda>
 800d5f6:	bf00      	nop
 800d5f8:	20400001 	.word	0x20400001

0800d5fc <_fflush_r>:
 800d5fc:	b538      	push	{r3, r4, r5, lr}
 800d5fe:	690b      	ldr	r3, [r1, #16]
 800d600:	4605      	mov	r5, r0
 800d602:	460c      	mov	r4, r1
 800d604:	b1db      	cbz	r3, 800d63e <_fflush_r+0x42>
 800d606:	b118      	cbz	r0, 800d610 <_fflush_r+0x14>
 800d608:	6983      	ldr	r3, [r0, #24]
 800d60a:	b90b      	cbnz	r3, 800d610 <_fflush_r+0x14>
 800d60c:	f000 f860 	bl	800d6d0 <__sinit>
 800d610:	4b0c      	ldr	r3, [pc, #48]	; (800d644 <_fflush_r+0x48>)
 800d612:	429c      	cmp	r4, r3
 800d614:	d109      	bne.n	800d62a <_fflush_r+0x2e>
 800d616:	686c      	ldr	r4, [r5, #4]
 800d618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d61c:	b17b      	cbz	r3, 800d63e <_fflush_r+0x42>
 800d61e:	4621      	mov	r1, r4
 800d620:	4628      	mov	r0, r5
 800d622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d626:	f7ff bf63 	b.w	800d4f0 <__sflush_r>
 800d62a:	4b07      	ldr	r3, [pc, #28]	; (800d648 <_fflush_r+0x4c>)
 800d62c:	429c      	cmp	r4, r3
 800d62e:	d101      	bne.n	800d634 <_fflush_r+0x38>
 800d630:	68ac      	ldr	r4, [r5, #8]
 800d632:	e7f1      	b.n	800d618 <_fflush_r+0x1c>
 800d634:	4b05      	ldr	r3, [pc, #20]	; (800d64c <_fflush_r+0x50>)
 800d636:	429c      	cmp	r4, r3
 800d638:	bf08      	it	eq
 800d63a:	68ec      	ldreq	r4, [r5, #12]
 800d63c:	e7ec      	b.n	800d618 <_fflush_r+0x1c>
 800d63e:	2000      	movs	r0, #0
 800d640:	bd38      	pop	{r3, r4, r5, pc}
 800d642:	bf00      	nop
 800d644:	08010610 	.word	0x08010610
 800d648:	08010630 	.word	0x08010630
 800d64c:	080105f0 	.word	0x080105f0

0800d650 <std>:
 800d650:	2300      	movs	r3, #0
 800d652:	b510      	push	{r4, lr}
 800d654:	4604      	mov	r4, r0
 800d656:	e9c0 3300 	strd	r3, r3, [r0]
 800d65a:	6083      	str	r3, [r0, #8]
 800d65c:	8181      	strh	r1, [r0, #12]
 800d65e:	6643      	str	r3, [r0, #100]	; 0x64
 800d660:	81c2      	strh	r2, [r0, #14]
 800d662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d666:	6183      	str	r3, [r0, #24]
 800d668:	4619      	mov	r1, r3
 800d66a:	2208      	movs	r2, #8
 800d66c:	305c      	adds	r0, #92	; 0x5c
 800d66e:	f7fd faa0 	bl	800abb2 <memset>
 800d672:	4b05      	ldr	r3, [pc, #20]	; (800d688 <std+0x38>)
 800d674:	6263      	str	r3, [r4, #36]	; 0x24
 800d676:	4b05      	ldr	r3, [pc, #20]	; (800d68c <std+0x3c>)
 800d678:	62a3      	str	r3, [r4, #40]	; 0x28
 800d67a:	4b05      	ldr	r3, [pc, #20]	; (800d690 <std+0x40>)
 800d67c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d67e:	4b05      	ldr	r3, [pc, #20]	; (800d694 <std+0x44>)
 800d680:	6224      	str	r4, [r4, #32]
 800d682:	6323      	str	r3, [r4, #48]	; 0x30
 800d684:	bd10      	pop	{r4, pc}
 800d686:	bf00      	nop
 800d688:	0800ee05 	.word	0x0800ee05
 800d68c:	0800ee27 	.word	0x0800ee27
 800d690:	0800ee5f 	.word	0x0800ee5f
 800d694:	0800ee83 	.word	0x0800ee83

0800d698 <_cleanup_r>:
 800d698:	4901      	ldr	r1, [pc, #4]	; (800d6a0 <_cleanup_r+0x8>)
 800d69a:	f000 b885 	b.w	800d7a8 <_fwalk_reent>
 800d69e:	bf00      	nop
 800d6a0:	0800d5fd 	.word	0x0800d5fd

0800d6a4 <__sfmoreglue>:
 800d6a4:	b570      	push	{r4, r5, r6, lr}
 800d6a6:	1e4a      	subs	r2, r1, #1
 800d6a8:	2568      	movs	r5, #104	; 0x68
 800d6aa:	4355      	muls	r5, r2
 800d6ac:	460e      	mov	r6, r1
 800d6ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d6b2:	f001 f8ab 	bl	800e80c <_malloc_r>
 800d6b6:	4604      	mov	r4, r0
 800d6b8:	b140      	cbz	r0, 800d6cc <__sfmoreglue+0x28>
 800d6ba:	2100      	movs	r1, #0
 800d6bc:	e9c0 1600 	strd	r1, r6, [r0]
 800d6c0:	300c      	adds	r0, #12
 800d6c2:	60a0      	str	r0, [r4, #8]
 800d6c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d6c8:	f7fd fa73 	bl	800abb2 <memset>
 800d6cc:	4620      	mov	r0, r4
 800d6ce:	bd70      	pop	{r4, r5, r6, pc}

0800d6d0 <__sinit>:
 800d6d0:	6983      	ldr	r3, [r0, #24]
 800d6d2:	b510      	push	{r4, lr}
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	bb33      	cbnz	r3, 800d726 <__sinit+0x56>
 800d6d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d6dc:	6503      	str	r3, [r0, #80]	; 0x50
 800d6de:	4b12      	ldr	r3, [pc, #72]	; (800d728 <__sinit+0x58>)
 800d6e0:	4a12      	ldr	r2, [pc, #72]	; (800d72c <__sinit+0x5c>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	6282      	str	r2, [r0, #40]	; 0x28
 800d6e6:	4298      	cmp	r0, r3
 800d6e8:	bf04      	itt	eq
 800d6ea:	2301      	moveq	r3, #1
 800d6ec:	6183      	streq	r3, [r0, #24]
 800d6ee:	f000 f81f 	bl	800d730 <__sfp>
 800d6f2:	6060      	str	r0, [r4, #4]
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f000 f81b 	bl	800d730 <__sfp>
 800d6fa:	60a0      	str	r0, [r4, #8]
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f000 f817 	bl	800d730 <__sfp>
 800d702:	2200      	movs	r2, #0
 800d704:	60e0      	str	r0, [r4, #12]
 800d706:	2104      	movs	r1, #4
 800d708:	6860      	ldr	r0, [r4, #4]
 800d70a:	f7ff ffa1 	bl	800d650 <std>
 800d70e:	2201      	movs	r2, #1
 800d710:	2109      	movs	r1, #9
 800d712:	68a0      	ldr	r0, [r4, #8]
 800d714:	f7ff ff9c 	bl	800d650 <std>
 800d718:	2202      	movs	r2, #2
 800d71a:	2112      	movs	r1, #18
 800d71c:	68e0      	ldr	r0, [r4, #12]
 800d71e:	f7ff ff97 	bl	800d650 <std>
 800d722:	2301      	movs	r3, #1
 800d724:	61a3      	str	r3, [r4, #24]
 800d726:	bd10      	pop	{r4, pc}
 800d728:	08010550 	.word	0x08010550
 800d72c:	0800d699 	.word	0x0800d699

0800d730 <__sfp>:
 800d730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d732:	4b1b      	ldr	r3, [pc, #108]	; (800d7a0 <__sfp+0x70>)
 800d734:	681e      	ldr	r6, [r3, #0]
 800d736:	69b3      	ldr	r3, [r6, #24]
 800d738:	4607      	mov	r7, r0
 800d73a:	b913      	cbnz	r3, 800d742 <__sfp+0x12>
 800d73c:	4630      	mov	r0, r6
 800d73e:	f7ff ffc7 	bl	800d6d0 <__sinit>
 800d742:	3648      	adds	r6, #72	; 0x48
 800d744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d748:	3b01      	subs	r3, #1
 800d74a:	d503      	bpl.n	800d754 <__sfp+0x24>
 800d74c:	6833      	ldr	r3, [r6, #0]
 800d74e:	b133      	cbz	r3, 800d75e <__sfp+0x2e>
 800d750:	6836      	ldr	r6, [r6, #0]
 800d752:	e7f7      	b.n	800d744 <__sfp+0x14>
 800d754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d758:	b16d      	cbz	r5, 800d776 <__sfp+0x46>
 800d75a:	3468      	adds	r4, #104	; 0x68
 800d75c:	e7f4      	b.n	800d748 <__sfp+0x18>
 800d75e:	2104      	movs	r1, #4
 800d760:	4638      	mov	r0, r7
 800d762:	f7ff ff9f 	bl	800d6a4 <__sfmoreglue>
 800d766:	6030      	str	r0, [r6, #0]
 800d768:	2800      	cmp	r0, #0
 800d76a:	d1f1      	bne.n	800d750 <__sfp+0x20>
 800d76c:	230c      	movs	r3, #12
 800d76e:	603b      	str	r3, [r7, #0]
 800d770:	4604      	mov	r4, r0
 800d772:	4620      	mov	r0, r4
 800d774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d776:	4b0b      	ldr	r3, [pc, #44]	; (800d7a4 <__sfp+0x74>)
 800d778:	6665      	str	r5, [r4, #100]	; 0x64
 800d77a:	e9c4 5500 	strd	r5, r5, [r4]
 800d77e:	60a5      	str	r5, [r4, #8]
 800d780:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d784:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d788:	2208      	movs	r2, #8
 800d78a:	4629      	mov	r1, r5
 800d78c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d790:	f7fd fa0f 	bl	800abb2 <memset>
 800d794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d79c:	e7e9      	b.n	800d772 <__sfp+0x42>
 800d79e:	bf00      	nop
 800d7a0:	08010550 	.word	0x08010550
 800d7a4:	ffff0001 	.word	0xffff0001

0800d7a8 <_fwalk_reent>:
 800d7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7ac:	4680      	mov	r8, r0
 800d7ae:	4689      	mov	r9, r1
 800d7b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d7b4:	2600      	movs	r6, #0
 800d7b6:	b914      	cbnz	r4, 800d7be <_fwalk_reent+0x16>
 800d7b8:	4630      	mov	r0, r6
 800d7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d7c2:	3f01      	subs	r7, #1
 800d7c4:	d501      	bpl.n	800d7ca <_fwalk_reent+0x22>
 800d7c6:	6824      	ldr	r4, [r4, #0]
 800d7c8:	e7f5      	b.n	800d7b6 <_fwalk_reent+0xe>
 800d7ca:	89ab      	ldrh	r3, [r5, #12]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d907      	bls.n	800d7e0 <_fwalk_reent+0x38>
 800d7d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	d003      	beq.n	800d7e0 <_fwalk_reent+0x38>
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4640      	mov	r0, r8
 800d7dc:	47c8      	blx	r9
 800d7de:	4306      	orrs	r6, r0
 800d7e0:	3568      	adds	r5, #104	; 0x68
 800d7e2:	e7ee      	b.n	800d7c2 <_fwalk_reent+0x1a>

0800d7e4 <rshift>:
 800d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7e6:	6906      	ldr	r6, [r0, #16]
 800d7e8:	114b      	asrs	r3, r1, #5
 800d7ea:	429e      	cmp	r6, r3
 800d7ec:	f100 0414 	add.w	r4, r0, #20
 800d7f0:	dd30      	ble.n	800d854 <rshift+0x70>
 800d7f2:	f011 011f 	ands.w	r1, r1, #31
 800d7f6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d7fa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d7fe:	d108      	bne.n	800d812 <rshift+0x2e>
 800d800:	4621      	mov	r1, r4
 800d802:	42b2      	cmp	r2, r6
 800d804:	460b      	mov	r3, r1
 800d806:	d211      	bcs.n	800d82c <rshift+0x48>
 800d808:	f852 3b04 	ldr.w	r3, [r2], #4
 800d80c:	f841 3b04 	str.w	r3, [r1], #4
 800d810:	e7f7      	b.n	800d802 <rshift+0x1e>
 800d812:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d816:	f1c1 0c20 	rsb	ip, r1, #32
 800d81a:	40cd      	lsrs	r5, r1
 800d81c:	3204      	adds	r2, #4
 800d81e:	4623      	mov	r3, r4
 800d820:	42b2      	cmp	r2, r6
 800d822:	4617      	mov	r7, r2
 800d824:	d30c      	bcc.n	800d840 <rshift+0x5c>
 800d826:	601d      	str	r5, [r3, #0]
 800d828:	b105      	cbz	r5, 800d82c <rshift+0x48>
 800d82a:	3304      	adds	r3, #4
 800d82c:	1b1a      	subs	r2, r3, r4
 800d82e:	42a3      	cmp	r3, r4
 800d830:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d834:	bf08      	it	eq
 800d836:	2300      	moveq	r3, #0
 800d838:	6102      	str	r2, [r0, #16]
 800d83a:	bf08      	it	eq
 800d83c:	6143      	streq	r3, [r0, #20]
 800d83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d840:	683f      	ldr	r7, [r7, #0]
 800d842:	fa07 f70c 	lsl.w	r7, r7, ip
 800d846:	433d      	orrs	r5, r7
 800d848:	f843 5b04 	str.w	r5, [r3], #4
 800d84c:	f852 5b04 	ldr.w	r5, [r2], #4
 800d850:	40cd      	lsrs	r5, r1
 800d852:	e7e5      	b.n	800d820 <rshift+0x3c>
 800d854:	4623      	mov	r3, r4
 800d856:	e7e9      	b.n	800d82c <rshift+0x48>

0800d858 <__hexdig_fun>:
 800d858:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d85c:	2b09      	cmp	r3, #9
 800d85e:	d802      	bhi.n	800d866 <__hexdig_fun+0xe>
 800d860:	3820      	subs	r0, #32
 800d862:	b2c0      	uxtb	r0, r0
 800d864:	4770      	bx	lr
 800d866:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d86a:	2b05      	cmp	r3, #5
 800d86c:	d801      	bhi.n	800d872 <__hexdig_fun+0x1a>
 800d86e:	3847      	subs	r0, #71	; 0x47
 800d870:	e7f7      	b.n	800d862 <__hexdig_fun+0xa>
 800d872:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d876:	2b05      	cmp	r3, #5
 800d878:	d801      	bhi.n	800d87e <__hexdig_fun+0x26>
 800d87a:	3827      	subs	r0, #39	; 0x27
 800d87c:	e7f1      	b.n	800d862 <__hexdig_fun+0xa>
 800d87e:	2000      	movs	r0, #0
 800d880:	4770      	bx	lr

0800d882 <__gethex>:
 800d882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d886:	b08b      	sub	sp, #44	; 0x2c
 800d888:	468a      	mov	sl, r1
 800d88a:	9002      	str	r0, [sp, #8]
 800d88c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d88e:	9306      	str	r3, [sp, #24]
 800d890:	4690      	mov	r8, r2
 800d892:	f000 fad0 	bl	800de36 <__localeconv_l>
 800d896:	6803      	ldr	r3, [r0, #0]
 800d898:	9303      	str	r3, [sp, #12]
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7f2 fc98 	bl	80001d0 <strlen>
 800d8a0:	9b03      	ldr	r3, [sp, #12]
 800d8a2:	9001      	str	r0, [sp, #4]
 800d8a4:	4403      	add	r3, r0
 800d8a6:	f04f 0b00 	mov.w	fp, #0
 800d8aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d8ae:	9307      	str	r3, [sp, #28]
 800d8b0:	f8da 3000 	ldr.w	r3, [sl]
 800d8b4:	3302      	adds	r3, #2
 800d8b6:	461f      	mov	r7, r3
 800d8b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d8bc:	2830      	cmp	r0, #48	; 0x30
 800d8be:	d06c      	beq.n	800d99a <__gethex+0x118>
 800d8c0:	f7ff ffca 	bl	800d858 <__hexdig_fun>
 800d8c4:	4604      	mov	r4, r0
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	d16a      	bne.n	800d9a0 <__gethex+0x11e>
 800d8ca:	9a01      	ldr	r2, [sp, #4]
 800d8cc:	9903      	ldr	r1, [sp, #12]
 800d8ce:	4638      	mov	r0, r7
 800d8d0:	f001 fadb 	bl	800ee8a <strncmp>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d166      	bne.n	800d9a6 <__gethex+0x124>
 800d8d8:	9b01      	ldr	r3, [sp, #4]
 800d8da:	5cf8      	ldrb	r0, [r7, r3]
 800d8dc:	18fe      	adds	r6, r7, r3
 800d8de:	f7ff ffbb 	bl	800d858 <__hexdig_fun>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	d062      	beq.n	800d9ac <__gethex+0x12a>
 800d8e6:	4633      	mov	r3, r6
 800d8e8:	7818      	ldrb	r0, [r3, #0]
 800d8ea:	2830      	cmp	r0, #48	; 0x30
 800d8ec:	461f      	mov	r7, r3
 800d8ee:	f103 0301 	add.w	r3, r3, #1
 800d8f2:	d0f9      	beq.n	800d8e8 <__gethex+0x66>
 800d8f4:	f7ff ffb0 	bl	800d858 <__hexdig_fun>
 800d8f8:	fab0 f580 	clz	r5, r0
 800d8fc:	096d      	lsrs	r5, r5, #5
 800d8fe:	4634      	mov	r4, r6
 800d900:	f04f 0b01 	mov.w	fp, #1
 800d904:	463a      	mov	r2, r7
 800d906:	4616      	mov	r6, r2
 800d908:	3201      	adds	r2, #1
 800d90a:	7830      	ldrb	r0, [r6, #0]
 800d90c:	f7ff ffa4 	bl	800d858 <__hexdig_fun>
 800d910:	2800      	cmp	r0, #0
 800d912:	d1f8      	bne.n	800d906 <__gethex+0x84>
 800d914:	9a01      	ldr	r2, [sp, #4]
 800d916:	9903      	ldr	r1, [sp, #12]
 800d918:	4630      	mov	r0, r6
 800d91a:	f001 fab6 	bl	800ee8a <strncmp>
 800d91e:	b950      	cbnz	r0, 800d936 <__gethex+0xb4>
 800d920:	b954      	cbnz	r4, 800d938 <__gethex+0xb6>
 800d922:	9b01      	ldr	r3, [sp, #4]
 800d924:	18f4      	adds	r4, r6, r3
 800d926:	4622      	mov	r2, r4
 800d928:	4616      	mov	r6, r2
 800d92a:	3201      	adds	r2, #1
 800d92c:	7830      	ldrb	r0, [r6, #0]
 800d92e:	f7ff ff93 	bl	800d858 <__hexdig_fun>
 800d932:	2800      	cmp	r0, #0
 800d934:	d1f8      	bne.n	800d928 <__gethex+0xa6>
 800d936:	b10c      	cbz	r4, 800d93c <__gethex+0xba>
 800d938:	1ba4      	subs	r4, r4, r6
 800d93a:	00a4      	lsls	r4, r4, #2
 800d93c:	7833      	ldrb	r3, [r6, #0]
 800d93e:	2b50      	cmp	r3, #80	; 0x50
 800d940:	d001      	beq.n	800d946 <__gethex+0xc4>
 800d942:	2b70      	cmp	r3, #112	; 0x70
 800d944:	d140      	bne.n	800d9c8 <__gethex+0x146>
 800d946:	7873      	ldrb	r3, [r6, #1]
 800d948:	2b2b      	cmp	r3, #43	; 0x2b
 800d94a:	d031      	beq.n	800d9b0 <__gethex+0x12e>
 800d94c:	2b2d      	cmp	r3, #45	; 0x2d
 800d94e:	d033      	beq.n	800d9b8 <__gethex+0x136>
 800d950:	1c71      	adds	r1, r6, #1
 800d952:	f04f 0900 	mov.w	r9, #0
 800d956:	7808      	ldrb	r0, [r1, #0]
 800d958:	f7ff ff7e 	bl	800d858 <__hexdig_fun>
 800d95c:	1e43      	subs	r3, r0, #1
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	2b18      	cmp	r3, #24
 800d962:	d831      	bhi.n	800d9c8 <__gethex+0x146>
 800d964:	f1a0 0210 	sub.w	r2, r0, #16
 800d968:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d96c:	f7ff ff74 	bl	800d858 <__hexdig_fun>
 800d970:	1e43      	subs	r3, r0, #1
 800d972:	b2db      	uxtb	r3, r3
 800d974:	2b18      	cmp	r3, #24
 800d976:	d922      	bls.n	800d9be <__gethex+0x13c>
 800d978:	f1b9 0f00 	cmp.w	r9, #0
 800d97c:	d000      	beq.n	800d980 <__gethex+0xfe>
 800d97e:	4252      	negs	r2, r2
 800d980:	4414      	add	r4, r2
 800d982:	f8ca 1000 	str.w	r1, [sl]
 800d986:	b30d      	cbz	r5, 800d9cc <__gethex+0x14a>
 800d988:	f1bb 0f00 	cmp.w	fp, #0
 800d98c:	bf0c      	ite	eq
 800d98e:	2706      	moveq	r7, #6
 800d990:	2700      	movne	r7, #0
 800d992:	4638      	mov	r0, r7
 800d994:	b00b      	add	sp, #44	; 0x2c
 800d996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d99a:	f10b 0b01 	add.w	fp, fp, #1
 800d99e:	e78a      	b.n	800d8b6 <__gethex+0x34>
 800d9a0:	2500      	movs	r5, #0
 800d9a2:	462c      	mov	r4, r5
 800d9a4:	e7ae      	b.n	800d904 <__gethex+0x82>
 800d9a6:	463e      	mov	r6, r7
 800d9a8:	2501      	movs	r5, #1
 800d9aa:	e7c7      	b.n	800d93c <__gethex+0xba>
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	e7fb      	b.n	800d9a8 <__gethex+0x126>
 800d9b0:	f04f 0900 	mov.w	r9, #0
 800d9b4:	1cb1      	adds	r1, r6, #2
 800d9b6:	e7ce      	b.n	800d956 <__gethex+0xd4>
 800d9b8:	f04f 0901 	mov.w	r9, #1
 800d9bc:	e7fa      	b.n	800d9b4 <__gethex+0x132>
 800d9be:	230a      	movs	r3, #10
 800d9c0:	fb03 0202 	mla	r2, r3, r2, r0
 800d9c4:	3a10      	subs	r2, #16
 800d9c6:	e7cf      	b.n	800d968 <__gethex+0xe6>
 800d9c8:	4631      	mov	r1, r6
 800d9ca:	e7da      	b.n	800d982 <__gethex+0x100>
 800d9cc:	1bf3      	subs	r3, r6, r7
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	4629      	mov	r1, r5
 800d9d2:	2b07      	cmp	r3, #7
 800d9d4:	dc49      	bgt.n	800da6a <__gethex+0x1e8>
 800d9d6:	9802      	ldr	r0, [sp, #8]
 800d9d8:	f000 fabc 	bl	800df54 <_Balloc>
 800d9dc:	9b01      	ldr	r3, [sp, #4]
 800d9de:	f100 0914 	add.w	r9, r0, #20
 800d9e2:	f04f 0b00 	mov.w	fp, #0
 800d9e6:	f1c3 0301 	rsb	r3, r3, #1
 800d9ea:	4605      	mov	r5, r0
 800d9ec:	f8cd 9010 	str.w	r9, [sp, #16]
 800d9f0:	46da      	mov	sl, fp
 800d9f2:	9308      	str	r3, [sp, #32]
 800d9f4:	42b7      	cmp	r7, r6
 800d9f6:	d33b      	bcc.n	800da70 <__gethex+0x1ee>
 800d9f8:	9804      	ldr	r0, [sp, #16]
 800d9fa:	f840 ab04 	str.w	sl, [r0], #4
 800d9fe:	eba0 0009 	sub.w	r0, r0, r9
 800da02:	1080      	asrs	r0, r0, #2
 800da04:	6128      	str	r0, [r5, #16]
 800da06:	0147      	lsls	r7, r0, #5
 800da08:	4650      	mov	r0, sl
 800da0a:	f000 fb67 	bl	800e0dc <__hi0bits>
 800da0e:	f8d8 6000 	ldr.w	r6, [r8]
 800da12:	1a3f      	subs	r7, r7, r0
 800da14:	42b7      	cmp	r7, r6
 800da16:	dd64      	ble.n	800dae2 <__gethex+0x260>
 800da18:	1bbf      	subs	r7, r7, r6
 800da1a:	4639      	mov	r1, r7
 800da1c:	4628      	mov	r0, r5
 800da1e:	f000 fe77 	bl	800e710 <__any_on>
 800da22:	4682      	mov	sl, r0
 800da24:	b178      	cbz	r0, 800da46 <__gethex+0x1c4>
 800da26:	1e7b      	subs	r3, r7, #1
 800da28:	1159      	asrs	r1, r3, #5
 800da2a:	f003 021f 	and.w	r2, r3, #31
 800da2e:	f04f 0a01 	mov.w	sl, #1
 800da32:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800da36:	fa0a f202 	lsl.w	r2, sl, r2
 800da3a:	420a      	tst	r2, r1
 800da3c:	d003      	beq.n	800da46 <__gethex+0x1c4>
 800da3e:	4553      	cmp	r3, sl
 800da40:	dc46      	bgt.n	800dad0 <__gethex+0x24e>
 800da42:	f04f 0a02 	mov.w	sl, #2
 800da46:	4639      	mov	r1, r7
 800da48:	4628      	mov	r0, r5
 800da4a:	f7ff fecb 	bl	800d7e4 <rshift>
 800da4e:	443c      	add	r4, r7
 800da50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da54:	42a3      	cmp	r3, r4
 800da56:	da52      	bge.n	800dafe <__gethex+0x27c>
 800da58:	4629      	mov	r1, r5
 800da5a:	9802      	ldr	r0, [sp, #8]
 800da5c:	f000 faae 	bl	800dfbc <_Bfree>
 800da60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da62:	2300      	movs	r3, #0
 800da64:	6013      	str	r3, [r2, #0]
 800da66:	27a3      	movs	r7, #163	; 0xa3
 800da68:	e793      	b.n	800d992 <__gethex+0x110>
 800da6a:	3101      	adds	r1, #1
 800da6c:	105b      	asrs	r3, r3, #1
 800da6e:	e7b0      	b.n	800d9d2 <__gethex+0x150>
 800da70:	1e73      	subs	r3, r6, #1
 800da72:	9305      	str	r3, [sp, #20]
 800da74:	9a07      	ldr	r2, [sp, #28]
 800da76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da7a:	4293      	cmp	r3, r2
 800da7c:	d018      	beq.n	800dab0 <__gethex+0x22e>
 800da7e:	f1bb 0f20 	cmp.w	fp, #32
 800da82:	d107      	bne.n	800da94 <__gethex+0x212>
 800da84:	9b04      	ldr	r3, [sp, #16]
 800da86:	f8c3 a000 	str.w	sl, [r3]
 800da8a:	3304      	adds	r3, #4
 800da8c:	f04f 0a00 	mov.w	sl, #0
 800da90:	9304      	str	r3, [sp, #16]
 800da92:	46d3      	mov	fp, sl
 800da94:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800da98:	f7ff fede 	bl	800d858 <__hexdig_fun>
 800da9c:	f000 000f 	and.w	r0, r0, #15
 800daa0:	fa00 f00b 	lsl.w	r0, r0, fp
 800daa4:	ea4a 0a00 	orr.w	sl, sl, r0
 800daa8:	f10b 0b04 	add.w	fp, fp, #4
 800daac:	9b05      	ldr	r3, [sp, #20]
 800daae:	e00d      	b.n	800dacc <__gethex+0x24a>
 800dab0:	9b05      	ldr	r3, [sp, #20]
 800dab2:	9a08      	ldr	r2, [sp, #32]
 800dab4:	4413      	add	r3, r2
 800dab6:	42bb      	cmp	r3, r7
 800dab8:	d3e1      	bcc.n	800da7e <__gethex+0x1fc>
 800daba:	4618      	mov	r0, r3
 800dabc:	9a01      	ldr	r2, [sp, #4]
 800dabe:	9903      	ldr	r1, [sp, #12]
 800dac0:	9309      	str	r3, [sp, #36]	; 0x24
 800dac2:	f001 f9e2 	bl	800ee8a <strncmp>
 800dac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac8:	2800      	cmp	r0, #0
 800daca:	d1d8      	bne.n	800da7e <__gethex+0x1fc>
 800dacc:	461e      	mov	r6, r3
 800dace:	e791      	b.n	800d9f4 <__gethex+0x172>
 800dad0:	1eb9      	subs	r1, r7, #2
 800dad2:	4628      	mov	r0, r5
 800dad4:	f000 fe1c 	bl	800e710 <__any_on>
 800dad8:	2800      	cmp	r0, #0
 800dada:	d0b2      	beq.n	800da42 <__gethex+0x1c0>
 800dadc:	f04f 0a03 	mov.w	sl, #3
 800dae0:	e7b1      	b.n	800da46 <__gethex+0x1c4>
 800dae2:	da09      	bge.n	800daf8 <__gethex+0x276>
 800dae4:	1bf7      	subs	r7, r6, r7
 800dae6:	4629      	mov	r1, r5
 800dae8:	463a      	mov	r2, r7
 800daea:	9802      	ldr	r0, [sp, #8]
 800daec:	f000 fc32 	bl	800e354 <__lshift>
 800daf0:	1be4      	subs	r4, r4, r7
 800daf2:	4605      	mov	r5, r0
 800daf4:	f100 0914 	add.w	r9, r0, #20
 800daf8:	f04f 0a00 	mov.w	sl, #0
 800dafc:	e7a8      	b.n	800da50 <__gethex+0x1ce>
 800dafe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800db02:	42a0      	cmp	r0, r4
 800db04:	dd6a      	ble.n	800dbdc <__gethex+0x35a>
 800db06:	1b04      	subs	r4, r0, r4
 800db08:	42a6      	cmp	r6, r4
 800db0a:	dc2e      	bgt.n	800db6a <__gethex+0x2e8>
 800db0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db10:	2b02      	cmp	r3, #2
 800db12:	d022      	beq.n	800db5a <__gethex+0x2d8>
 800db14:	2b03      	cmp	r3, #3
 800db16:	d024      	beq.n	800db62 <__gethex+0x2e0>
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d115      	bne.n	800db48 <__gethex+0x2c6>
 800db1c:	42a6      	cmp	r6, r4
 800db1e:	d113      	bne.n	800db48 <__gethex+0x2c6>
 800db20:	2e01      	cmp	r6, #1
 800db22:	dc0b      	bgt.n	800db3c <__gethex+0x2ba>
 800db24:	9a06      	ldr	r2, [sp, #24]
 800db26:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	2301      	movs	r3, #1
 800db2e:	612b      	str	r3, [r5, #16]
 800db30:	f8c9 3000 	str.w	r3, [r9]
 800db34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db36:	2762      	movs	r7, #98	; 0x62
 800db38:	601d      	str	r5, [r3, #0]
 800db3a:	e72a      	b.n	800d992 <__gethex+0x110>
 800db3c:	1e71      	subs	r1, r6, #1
 800db3e:	4628      	mov	r0, r5
 800db40:	f000 fde6 	bl	800e710 <__any_on>
 800db44:	2800      	cmp	r0, #0
 800db46:	d1ed      	bne.n	800db24 <__gethex+0x2a2>
 800db48:	4629      	mov	r1, r5
 800db4a:	9802      	ldr	r0, [sp, #8]
 800db4c:	f000 fa36 	bl	800dfbc <_Bfree>
 800db50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db52:	2300      	movs	r3, #0
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	2750      	movs	r7, #80	; 0x50
 800db58:	e71b      	b.n	800d992 <__gethex+0x110>
 800db5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d0e1      	beq.n	800db24 <__gethex+0x2a2>
 800db60:	e7f2      	b.n	800db48 <__gethex+0x2c6>
 800db62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1dd      	bne.n	800db24 <__gethex+0x2a2>
 800db68:	e7ee      	b.n	800db48 <__gethex+0x2c6>
 800db6a:	1e67      	subs	r7, r4, #1
 800db6c:	f1ba 0f00 	cmp.w	sl, #0
 800db70:	d131      	bne.n	800dbd6 <__gethex+0x354>
 800db72:	b127      	cbz	r7, 800db7e <__gethex+0x2fc>
 800db74:	4639      	mov	r1, r7
 800db76:	4628      	mov	r0, r5
 800db78:	f000 fdca 	bl	800e710 <__any_on>
 800db7c:	4682      	mov	sl, r0
 800db7e:	117a      	asrs	r2, r7, #5
 800db80:	2301      	movs	r3, #1
 800db82:	f007 071f 	and.w	r7, r7, #31
 800db86:	fa03 f707 	lsl.w	r7, r3, r7
 800db8a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800db8e:	4621      	mov	r1, r4
 800db90:	421f      	tst	r7, r3
 800db92:	4628      	mov	r0, r5
 800db94:	bf18      	it	ne
 800db96:	f04a 0a02 	orrne.w	sl, sl, #2
 800db9a:	1b36      	subs	r6, r6, r4
 800db9c:	f7ff fe22 	bl	800d7e4 <rshift>
 800dba0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dba4:	2702      	movs	r7, #2
 800dba6:	f1ba 0f00 	cmp.w	sl, #0
 800dbaa:	d048      	beq.n	800dc3e <__gethex+0x3bc>
 800dbac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbb0:	2b02      	cmp	r3, #2
 800dbb2:	d015      	beq.n	800dbe0 <__gethex+0x35e>
 800dbb4:	2b03      	cmp	r3, #3
 800dbb6:	d017      	beq.n	800dbe8 <__gethex+0x366>
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d109      	bne.n	800dbd0 <__gethex+0x34e>
 800dbbc:	f01a 0f02 	tst.w	sl, #2
 800dbc0:	d006      	beq.n	800dbd0 <__gethex+0x34e>
 800dbc2:	f8d9 3000 	ldr.w	r3, [r9]
 800dbc6:	ea4a 0a03 	orr.w	sl, sl, r3
 800dbca:	f01a 0f01 	tst.w	sl, #1
 800dbce:	d10e      	bne.n	800dbee <__gethex+0x36c>
 800dbd0:	f047 0710 	orr.w	r7, r7, #16
 800dbd4:	e033      	b.n	800dc3e <__gethex+0x3bc>
 800dbd6:	f04f 0a01 	mov.w	sl, #1
 800dbda:	e7d0      	b.n	800db7e <__gethex+0x2fc>
 800dbdc:	2701      	movs	r7, #1
 800dbde:	e7e2      	b.n	800dba6 <__gethex+0x324>
 800dbe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbe2:	f1c3 0301 	rsb	r3, r3, #1
 800dbe6:	9315      	str	r3, [sp, #84]	; 0x54
 800dbe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d0f0      	beq.n	800dbd0 <__gethex+0x34e>
 800dbee:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dbf2:	f105 0314 	add.w	r3, r5, #20
 800dbf6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dbfa:	eb03 010a 	add.w	r1, r3, sl
 800dbfe:	f04f 0c00 	mov.w	ip, #0
 800dc02:	4618      	mov	r0, r3
 800dc04:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc08:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc0c:	d01c      	beq.n	800dc48 <__gethex+0x3c6>
 800dc0e:	3201      	adds	r2, #1
 800dc10:	6002      	str	r2, [r0, #0]
 800dc12:	2f02      	cmp	r7, #2
 800dc14:	f105 0314 	add.w	r3, r5, #20
 800dc18:	d138      	bne.n	800dc8c <__gethex+0x40a>
 800dc1a:	f8d8 2000 	ldr.w	r2, [r8]
 800dc1e:	3a01      	subs	r2, #1
 800dc20:	42b2      	cmp	r2, r6
 800dc22:	d10a      	bne.n	800dc3a <__gethex+0x3b8>
 800dc24:	1171      	asrs	r1, r6, #5
 800dc26:	2201      	movs	r2, #1
 800dc28:	f006 061f 	and.w	r6, r6, #31
 800dc2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc30:	fa02 f606 	lsl.w	r6, r2, r6
 800dc34:	421e      	tst	r6, r3
 800dc36:	bf18      	it	ne
 800dc38:	4617      	movne	r7, r2
 800dc3a:	f047 0720 	orr.w	r7, r7, #32
 800dc3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc40:	601d      	str	r5, [r3, #0]
 800dc42:	9b06      	ldr	r3, [sp, #24]
 800dc44:	601c      	str	r4, [r3, #0]
 800dc46:	e6a4      	b.n	800d992 <__gethex+0x110>
 800dc48:	4299      	cmp	r1, r3
 800dc4a:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc4e:	d8d8      	bhi.n	800dc02 <__gethex+0x380>
 800dc50:	68ab      	ldr	r3, [r5, #8]
 800dc52:	4599      	cmp	r9, r3
 800dc54:	db12      	blt.n	800dc7c <__gethex+0x3fa>
 800dc56:	6869      	ldr	r1, [r5, #4]
 800dc58:	9802      	ldr	r0, [sp, #8]
 800dc5a:	3101      	adds	r1, #1
 800dc5c:	f000 f97a 	bl	800df54 <_Balloc>
 800dc60:	692a      	ldr	r2, [r5, #16]
 800dc62:	3202      	adds	r2, #2
 800dc64:	f105 010c 	add.w	r1, r5, #12
 800dc68:	4683      	mov	fp, r0
 800dc6a:	0092      	lsls	r2, r2, #2
 800dc6c:	300c      	adds	r0, #12
 800dc6e:	f7fc ff95 	bl	800ab9c <memcpy>
 800dc72:	4629      	mov	r1, r5
 800dc74:	9802      	ldr	r0, [sp, #8]
 800dc76:	f000 f9a1 	bl	800dfbc <_Bfree>
 800dc7a:	465d      	mov	r5, fp
 800dc7c:	692b      	ldr	r3, [r5, #16]
 800dc7e:	1c5a      	adds	r2, r3, #1
 800dc80:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dc84:	612a      	str	r2, [r5, #16]
 800dc86:	2201      	movs	r2, #1
 800dc88:	615a      	str	r2, [r3, #20]
 800dc8a:	e7c2      	b.n	800dc12 <__gethex+0x390>
 800dc8c:	692a      	ldr	r2, [r5, #16]
 800dc8e:	454a      	cmp	r2, r9
 800dc90:	dd0b      	ble.n	800dcaa <__gethex+0x428>
 800dc92:	2101      	movs	r1, #1
 800dc94:	4628      	mov	r0, r5
 800dc96:	f7ff fda5 	bl	800d7e4 <rshift>
 800dc9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc9e:	3401      	adds	r4, #1
 800dca0:	42a3      	cmp	r3, r4
 800dca2:	f6ff aed9 	blt.w	800da58 <__gethex+0x1d6>
 800dca6:	2701      	movs	r7, #1
 800dca8:	e7c7      	b.n	800dc3a <__gethex+0x3b8>
 800dcaa:	f016 061f 	ands.w	r6, r6, #31
 800dcae:	d0fa      	beq.n	800dca6 <__gethex+0x424>
 800dcb0:	449a      	add	sl, r3
 800dcb2:	f1c6 0620 	rsb	r6, r6, #32
 800dcb6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800dcba:	f000 fa0f 	bl	800e0dc <__hi0bits>
 800dcbe:	42b0      	cmp	r0, r6
 800dcc0:	dbe7      	blt.n	800dc92 <__gethex+0x410>
 800dcc2:	e7f0      	b.n	800dca6 <__gethex+0x424>

0800dcc4 <L_shift>:
 800dcc4:	f1c2 0208 	rsb	r2, r2, #8
 800dcc8:	0092      	lsls	r2, r2, #2
 800dcca:	b570      	push	{r4, r5, r6, lr}
 800dccc:	f1c2 0620 	rsb	r6, r2, #32
 800dcd0:	6843      	ldr	r3, [r0, #4]
 800dcd2:	6804      	ldr	r4, [r0, #0]
 800dcd4:	fa03 f506 	lsl.w	r5, r3, r6
 800dcd8:	432c      	orrs	r4, r5
 800dcda:	40d3      	lsrs	r3, r2
 800dcdc:	6004      	str	r4, [r0, #0]
 800dcde:	f840 3f04 	str.w	r3, [r0, #4]!
 800dce2:	4288      	cmp	r0, r1
 800dce4:	d3f4      	bcc.n	800dcd0 <L_shift+0xc>
 800dce6:	bd70      	pop	{r4, r5, r6, pc}

0800dce8 <__match>:
 800dce8:	b530      	push	{r4, r5, lr}
 800dcea:	6803      	ldr	r3, [r0, #0]
 800dcec:	3301      	adds	r3, #1
 800dcee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcf2:	b914      	cbnz	r4, 800dcfa <__match+0x12>
 800dcf4:	6003      	str	r3, [r0, #0]
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	bd30      	pop	{r4, r5, pc}
 800dcfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dd02:	2d19      	cmp	r5, #25
 800dd04:	bf98      	it	ls
 800dd06:	3220      	addls	r2, #32
 800dd08:	42a2      	cmp	r2, r4
 800dd0a:	d0f0      	beq.n	800dcee <__match+0x6>
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	e7f3      	b.n	800dcf8 <__match+0x10>

0800dd10 <__hexnan>:
 800dd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd14:	680b      	ldr	r3, [r1, #0]
 800dd16:	6801      	ldr	r1, [r0, #0]
 800dd18:	115f      	asrs	r7, r3, #5
 800dd1a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800dd1e:	f013 031f 	ands.w	r3, r3, #31
 800dd22:	b087      	sub	sp, #28
 800dd24:	bf18      	it	ne
 800dd26:	3704      	addne	r7, #4
 800dd28:	2500      	movs	r5, #0
 800dd2a:	1f3e      	subs	r6, r7, #4
 800dd2c:	4682      	mov	sl, r0
 800dd2e:	4690      	mov	r8, r2
 800dd30:	9301      	str	r3, [sp, #4]
 800dd32:	f847 5c04 	str.w	r5, [r7, #-4]
 800dd36:	46b1      	mov	r9, r6
 800dd38:	4634      	mov	r4, r6
 800dd3a:	9502      	str	r5, [sp, #8]
 800dd3c:	46ab      	mov	fp, r5
 800dd3e:	784a      	ldrb	r2, [r1, #1]
 800dd40:	1c4b      	adds	r3, r1, #1
 800dd42:	9303      	str	r3, [sp, #12]
 800dd44:	b342      	cbz	r2, 800dd98 <__hexnan+0x88>
 800dd46:	4610      	mov	r0, r2
 800dd48:	9105      	str	r1, [sp, #20]
 800dd4a:	9204      	str	r2, [sp, #16]
 800dd4c:	f7ff fd84 	bl	800d858 <__hexdig_fun>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d143      	bne.n	800dddc <__hexnan+0xcc>
 800dd54:	9a04      	ldr	r2, [sp, #16]
 800dd56:	9905      	ldr	r1, [sp, #20]
 800dd58:	2a20      	cmp	r2, #32
 800dd5a:	d818      	bhi.n	800dd8e <__hexnan+0x7e>
 800dd5c:	9b02      	ldr	r3, [sp, #8]
 800dd5e:	459b      	cmp	fp, r3
 800dd60:	dd13      	ble.n	800dd8a <__hexnan+0x7a>
 800dd62:	454c      	cmp	r4, r9
 800dd64:	d206      	bcs.n	800dd74 <__hexnan+0x64>
 800dd66:	2d07      	cmp	r5, #7
 800dd68:	dc04      	bgt.n	800dd74 <__hexnan+0x64>
 800dd6a:	462a      	mov	r2, r5
 800dd6c:	4649      	mov	r1, r9
 800dd6e:	4620      	mov	r0, r4
 800dd70:	f7ff ffa8 	bl	800dcc4 <L_shift>
 800dd74:	4544      	cmp	r4, r8
 800dd76:	d944      	bls.n	800de02 <__hexnan+0xf2>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f1a4 0904 	sub.w	r9, r4, #4
 800dd7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd82:	f8cd b008 	str.w	fp, [sp, #8]
 800dd86:	464c      	mov	r4, r9
 800dd88:	461d      	mov	r5, r3
 800dd8a:	9903      	ldr	r1, [sp, #12]
 800dd8c:	e7d7      	b.n	800dd3e <__hexnan+0x2e>
 800dd8e:	2a29      	cmp	r2, #41	; 0x29
 800dd90:	d14a      	bne.n	800de28 <__hexnan+0x118>
 800dd92:	3102      	adds	r1, #2
 800dd94:	f8ca 1000 	str.w	r1, [sl]
 800dd98:	f1bb 0f00 	cmp.w	fp, #0
 800dd9c:	d044      	beq.n	800de28 <__hexnan+0x118>
 800dd9e:	454c      	cmp	r4, r9
 800dda0:	d206      	bcs.n	800ddb0 <__hexnan+0xa0>
 800dda2:	2d07      	cmp	r5, #7
 800dda4:	dc04      	bgt.n	800ddb0 <__hexnan+0xa0>
 800dda6:	462a      	mov	r2, r5
 800dda8:	4649      	mov	r1, r9
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f7ff ff8a 	bl	800dcc4 <L_shift>
 800ddb0:	4544      	cmp	r4, r8
 800ddb2:	d928      	bls.n	800de06 <__hexnan+0xf6>
 800ddb4:	4643      	mov	r3, r8
 800ddb6:	f854 2b04 	ldr.w	r2, [r4], #4
 800ddba:	f843 2b04 	str.w	r2, [r3], #4
 800ddbe:	42a6      	cmp	r6, r4
 800ddc0:	d2f9      	bcs.n	800ddb6 <__hexnan+0xa6>
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f843 2b04 	str.w	r2, [r3], #4
 800ddc8:	429e      	cmp	r6, r3
 800ddca:	d2fb      	bcs.n	800ddc4 <__hexnan+0xb4>
 800ddcc:	6833      	ldr	r3, [r6, #0]
 800ddce:	b91b      	cbnz	r3, 800ddd8 <__hexnan+0xc8>
 800ddd0:	4546      	cmp	r6, r8
 800ddd2:	d127      	bne.n	800de24 <__hexnan+0x114>
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	6033      	str	r3, [r6, #0]
 800ddd8:	2005      	movs	r0, #5
 800ddda:	e026      	b.n	800de2a <__hexnan+0x11a>
 800dddc:	3501      	adds	r5, #1
 800ddde:	2d08      	cmp	r5, #8
 800dde0:	f10b 0b01 	add.w	fp, fp, #1
 800dde4:	dd06      	ble.n	800ddf4 <__hexnan+0xe4>
 800dde6:	4544      	cmp	r4, r8
 800dde8:	d9cf      	bls.n	800dd8a <__hexnan+0x7a>
 800ddea:	2300      	movs	r3, #0
 800ddec:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddf0:	2501      	movs	r5, #1
 800ddf2:	3c04      	subs	r4, #4
 800ddf4:	6822      	ldr	r2, [r4, #0]
 800ddf6:	f000 000f 	and.w	r0, r0, #15
 800ddfa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ddfe:	6020      	str	r0, [r4, #0]
 800de00:	e7c3      	b.n	800dd8a <__hexnan+0x7a>
 800de02:	2508      	movs	r5, #8
 800de04:	e7c1      	b.n	800dd8a <__hexnan+0x7a>
 800de06:	9b01      	ldr	r3, [sp, #4]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d0df      	beq.n	800ddcc <__hexnan+0xbc>
 800de0c:	f04f 32ff 	mov.w	r2, #4294967295
 800de10:	f1c3 0320 	rsb	r3, r3, #32
 800de14:	fa22 f303 	lsr.w	r3, r2, r3
 800de18:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800de1c:	401a      	ands	r2, r3
 800de1e:	f847 2c04 	str.w	r2, [r7, #-4]
 800de22:	e7d3      	b.n	800ddcc <__hexnan+0xbc>
 800de24:	3e04      	subs	r6, #4
 800de26:	e7d1      	b.n	800ddcc <__hexnan+0xbc>
 800de28:	2004      	movs	r0, #4
 800de2a:	b007      	add	sp, #28
 800de2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de30 <__locale_ctype_ptr_l>:
 800de30:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800de34:	4770      	bx	lr

0800de36 <__localeconv_l>:
 800de36:	30f0      	adds	r0, #240	; 0xf0
 800de38:	4770      	bx	lr
	...

0800de3c <_localeconv_r>:
 800de3c:	4b04      	ldr	r3, [pc, #16]	; (800de50 <_localeconv_r+0x14>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6a18      	ldr	r0, [r3, #32]
 800de42:	4b04      	ldr	r3, [pc, #16]	; (800de54 <_localeconv_r+0x18>)
 800de44:	2800      	cmp	r0, #0
 800de46:	bf08      	it	eq
 800de48:	4618      	moveq	r0, r3
 800de4a:	30f0      	adds	r0, #240	; 0xf0
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	2000000c 	.word	0x2000000c
 800de54:	20000070 	.word	0x20000070

0800de58 <__swhatbuf_r>:
 800de58:	b570      	push	{r4, r5, r6, lr}
 800de5a:	460e      	mov	r6, r1
 800de5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de60:	2900      	cmp	r1, #0
 800de62:	b096      	sub	sp, #88	; 0x58
 800de64:	4614      	mov	r4, r2
 800de66:	461d      	mov	r5, r3
 800de68:	da07      	bge.n	800de7a <__swhatbuf_r+0x22>
 800de6a:	2300      	movs	r3, #0
 800de6c:	602b      	str	r3, [r5, #0]
 800de6e:	89b3      	ldrh	r3, [r6, #12]
 800de70:	061a      	lsls	r2, r3, #24
 800de72:	d410      	bmi.n	800de96 <__swhatbuf_r+0x3e>
 800de74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de78:	e00e      	b.n	800de98 <__swhatbuf_r+0x40>
 800de7a:	466a      	mov	r2, sp
 800de7c:	f001 f846 	bl	800ef0c <_fstat_r>
 800de80:	2800      	cmp	r0, #0
 800de82:	dbf2      	blt.n	800de6a <__swhatbuf_r+0x12>
 800de84:	9a01      	ldr	r2, [sp, #4]
 800de86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de8e:	425a      	negs	r2, r3
 800de90:	415a      	adcs	r2, r3
 800de92:	602a      	str	r2, [r5, #0]
 800de94:	e7ee      	b.n	800de74 <__swhatbuf_r+0x1c>
 800de96:	2340      	movs	r3, #64	; 0x40
 800de98:	2000      	movs	r0, #0
 800de9a:	6023      	str	r3, [r4, #0]
 800de9c:	b016      	add	sp, #88	; 0x58
 800de9e:	bd70      	pop	{r4, r5, r6, pc}

0800dea0 <__smakebuf_r>:
 800dea0:	898b      	ldrh	r3, [r1, #12]
 800dea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dea4:	079d      	lsls	r5, r3, #30
 800dea6:	4606      	mov	r6, r0
 800dea8:	460c      	mov	r4, r1
 800deaa:	d507      	bpl.n	800debc <__smakebuf_r+0x1c>
 800deac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	6123      	str	r3, [r4, #16]
 800deb4:	2301      	movs	r3, #1
 800deb6:	6163      	str	r3, [r4, #20]
 800deb8:	b002      	add	sp, #8
 800deba:	bd70      	pop	{r4, r5, r6, pc}
 800debc:	ab01      	add	r3, sp, #4
 800debe:	466a      	mov	r2, sp
 800dec0:	f7ff ffca 	bl	800de58 <__swhatbuf_r>
 800dec4:	9900      	ldr	r1, [sp, #0]
 800dec6:	4605      	mov	r5, r0
 800dec8:	4630      	mov	r0, r6
 800deca:	f000 fc9f 	bl	800e80c <_malloc_r>
 800dece:	b948      	cbnz	r0, 800dee4 <__smakebuf_r+0x44>
 800ded0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ded4:	059a      	lsls	r2, r3, #22
 800ded6:	d4ef      	bmi.n	800deb8 <__smakebuf_r+0x18>
 800ded8:	f023 0303 	bic.w	r3, r3, #3
 800dedc:	f043 0302 	orr.w	r3, r3, #2
 800dee0:	81a3      	strh	r3, [r4, #12]
 800dee2:	e7e3      	b.n	800deac <__smakebuf_r+0xc>
 800dee4:	4b0d      	ldr	r3, [pc, #52]	; (800df1c <__smakebuf_r+0x7c>)
 800dee6:	62b3      	str	r3, [r6, #40]	; 0x28
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	6020      	str	r0, [r4, #0]
 800deec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800def0:	81a3      	strh	r3, [r4, #12]
 800def2:	9b00      	ldr	r3, [sp, #0]
 800def4:	6163      	str	r3, [r4, #20]
 800def6:	9b01      	ldr	r3, [sp, #4]
 800def8:	6120      	str	r0, [r4, #16]
 800defa:	b15b      	cbz	r3, 800df14 <__smakebuf_r+0x74>
 800defc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df00:	4630      	mov	r0, r6
 800df02:	f001 f815 	bl	800ef30 <_isatty_r>
 800df06:	b128      	cbz	r0, 800df14 <__smakebuf_r+0x74>
 800df08:	89a3      	ldrh	r3, [r4, #12]
 800df0a:	f023 0303 	bic.w	r3, r3, #3
 800df0e:	f043 0301 	orr.w	r3, r3, #1
 800df12:	81a3      	strh	r3, [r4, #12]
 800df14:	89a3      	ldrh	r3, [r4, #12]
 800df16:	431d      	orrs	r5, r3
 800df18:	81a5      	strh	r5, [r4, #12]
 800df1a:	e7cd      	b.n	800deb8 <__smakebuf_r+0x18>
 800df1c:	0800d699 	.word	0x0800d699

0800df20 <malloc>:
 800df20:	4b02      	ldr	r3, [pc, #8]	; (800df2c <malloc+0xc>)
 800df22:	4601      	mov	r1, r0
 800df24:	6818      	ldr	r0, [r3, #0]
 800df26:	f000 bc71 	b.w	800e80c <_malloc_r>
 800df2a:	bf00      	nop
 800df2c:	2000000c 	.word	0x2000000c

0800df30 <__ascii_mbtowc>:
 800df30:	b082      	sub	sp, #8
 800df32:	b901      	cbnz	r1, 800df36 <__ascii_mbtowc+0x6>
 800df34:	a901      	add	r1, sp, #4
 800df36:	b142      	cbz	r2, 800df4a <__ascii_mbtowc+0x1a>
 800df38:	b14b      	cbz	r3, 800df4e <__ascii_mbtowc+0x1e>
 800df3a:	7813      	ldrb	r3, [r2, #0]
 800df3c:	600b      	str	r3, [r1, #0]
 800df3e:	7812      	ldrb	r2, [r2, #0]
 800df40:	1c10      	adds	r0, r2, #0
 800df42:	bf18      	it	ne
 800df44:	2001      	movne	r0, #1
 800df46:	b002      	add	sp, #8
 800df48:	4770      	bx	lr
 800df4a:	4610      	mov	r0, r2
 800df4c:	e7fb      	b.n	800df46 <__ascii_mbtowc+0x16>
 800df4e:	f06f 0001 	mvn.w	r0, #1
 800df52:	e7f8      	b.n	800df46 <__ascii_mbtowc+0x16>

0800df54 <_Balloc>:
 800df54:	b570      	push	{r4, r5, r6, lr}
 800df56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df58:	4604      	mov	r4, r0
 800df5a:	460e      	mov	r6, r1
 800df5c:	b93d      	cbnz	r5, 800df6e <_Balloc+0x1a>
 800df5e:	2010      	movs	r0, #16
 800df60:	f7ff ffde 	bl	800df20 <malloc>
 800df64:	6260      	str	r0, [r4, #36]	; 0x24
 800df66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800df6a:	6005      	str	r5, [r0, #0]
 800df6c:	60c5      	str	r5, [r0, #12]
 800df6e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800df70:	68eb      	ldr	r3, [r5, #12]
 800df72:	b183      	cbz	r3, 800df96 <_Balloc+0x42>
 800df74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800df7c:	b9b8      	cbnz	r0, 800dfae <_Balloc+0x5a>
 800df7e:	2101      	movs	r1, #1
 800df80:	fa01 f506 	lsl.w	r5, r1, r6
 800df84:	1d6a      	adds	r2, r5, #5
 800df86:	0092      	lsls	r2, r2, #2
 800df88:	4620      	mov	r0, r4
 800df8a:	f000 fbe2 	bl	800e752 <_calloc_r>
 800df8e:	b160      	cbz	r0, 800dfaa <_Balloc+0x56>
 800df90:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800df94:	e00e      	b.n	800dfb4 <_Balloc+0x60>
 800df96:	2221      	movs	r2, #33	; 0x21
 800df98:	2104      	movs	r1, #4
 800df9a:	4620      	mov	r0, r4
 800df9c:	f000 fbd9 	bl	800e752 <_calloc_r>
 800dfa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfa2:	60e8      	str	r0, [r5, #12]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d1e4      	bne.n	800df74 <_Balloc+0x20>
 800dfaa:	2000      	movs	r0, #0
 800dfac:	bd70      	pop	{r4, r5, r6, pc}
 800dfae:	6802      	ldr	r2, [r0, #0]
 800dfb0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dfba:	e7f7      	b.n	800dfac <_Balloc+0x58>

0800dfbc <_Bfree>:
 800dfbc:	b570      	push	{r4, r5, r6, lr}
 800dfbe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dfc0:	4606      	mov	r6, r0
 800dfc2:	460d      	mov	r5, r1
 800dfc4:	b93c      	cbnz	r4, 800dfd6 <_Bfree+0x1a>
 800dfc6:	2010      	movs	r0, #16
 800dfc8:	f7ff ffaa 	bl	800df20 <malloc>
 800dfcc:	6270      	str	r0, [r6, #36]	; 0x24
 800dfce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dfd2:	6004      	str	r4, [r0, #0]
 800dfd4:	60c4      	str	r4, [r0, #12]
 800dfd6:	b13d      	cbz	r5, 800dfe8 <_Bfree+0x2c>
 800dfd8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dfda:	686a      	ldr	r2, [r5, #4]
 800dfdc:	68db      	ldr	r3, [r3, #12]
 800dfde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dfe2:	6029      	str	r1, [r5, #0]
 800dfe4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800dfe8:	bd70      	pop	{r4, r5, r6, pc}

0800dfea <__multadd>:
 800dfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfee:	690d      	ldr	r5, [r1, #16]
 800dff0:	461f      	mov	r7, r3
 800dff2:	4606      	mov	r6, r0
 800dff4:	460c      	mov	r4, r1
 800dff6:	f101 0c14 	add.w	ip, r1, #20
 800dffa:	2300      	movs	r3, #0
 800dffc:	f8dc 0000 	ldr.w	r0, [ip]
 800e000:	b281      	uxth	r1, r0
 800e002:	fb02 7101 	mla	r1, r2, r1, r7
 800e006:	0c0f      	lsrs	r7, r1, #16
 800e008:	0c00      	lsrs	r0, r0, #16
 800e00a:	fb02 7000 	mla	r0, r2, r0, r7
 800e00e:	b289      	uxth	r1, r1
 800e010:	3301      	adds	r3, #1
 800e012:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e016:	429d      	cmp	r5, r3
 800e018:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e01c:	f84c 1b04 	str.w	r1, [ip], #4
 800e020:	dcec      	bgt.n	800dffc <__multadd+0x12>
 800e022:	b1d7      	cbz	r7, 800e05a <__multadd+0x70>
 800e024:	68a3      	ldr	r3, [r4, #8]
 800e026:	42ab      	cmp	r3, r5
 800e028:	dc12      	bgt.n	800e050 <__multadd+0x66>
 800e02a:	6861      	ldr	r1, [r4, #4]
 800e02c:	4630      	mov	r0, r6
 800e02e:	3101      	adds	r1, #1
 800e030:	f7ff ff90 	bl	800df54 <_Balloc>
 800e034:	6922      	ldr	r2, [r4, #16]
 800e036:	3202      	adds	r2, #2
 800e038:	f104 010c 	add.w	r1, r4, #12
 800e03c:	4680      	mov	r8, r0
 800e03e:	0092      	lsls	r2, r2, #2
 800e040:	300c      	adds	r0, #12
 800e042:	f7fc fdab 	bl	800ab9c <memcpy>
 800e046:	4621      	mov	r1, r4
 800e048:	4630      	mov	r0, r6
 800e04a:	f7ff ffb7 	bl	800dfbc <_Bfree>
 800e04e:	4644      	mov	r4, r8
 800e050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e054:	3501      	adds	r5, #1
 800e056:	615f      	str	r7, [r3, #20]
 800e058:	6125      	str	r5, [r4, #16]
 800e05a:	4620      	mov	r0, r4
 800e05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e060 <__s2b>:
 800e060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e064:	460c      	mov	r4, r1
 800e066:	4615      	mov	r5, r2
 800e068:	461f      	mov	r7, r3
 800e06a:	2209      	movs	r2, #9
 800e06c:	3308      	adds	r3, #8
 800e06e:	4606      	mov	r6, r0
 800e070:	fb93 f3f2 	sdiv	r3, r3, r2
 800e074:	2100      	movs	r1, #0
 800e076:	2201      	movs	r2, #1
 800e078:	429a      	cmp	r2, r3
 800e07a:	db20      	blt.n	800e0be <__s2b+0x5e>
 800e07c:	4630      	mov	r0, r6
 800e07e:	f7ff ff69 	bl	800df54 <_Balloc>
 800e082:	9b08      	ldr	r3, [sp, #32]
 800e084:	6143      	str	r3, [r0, #20]
 800e086:	2d09      	cmp	r5, #9
 800e088:	f04f 0301 	mov.w	r3, #1
 800e08c:	6103      	str	r3, [r0, #16]
 800e08e:	dd19      	ble.n	800e0c4 <__s2b+0x64>
 800e090:	f104 0809 	add.w	r8, r4, #9
 800e094:	46c1      	mov	r9, r8
 800e096:	442c      	add	r4, r5
 800e098:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e09c:	4601      	mov	r1, r0
 800e09e:	3b30      	subs	r3, #48	; 0x30
 800e0a0:	220a      	movs	r2, #10
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	f7ff ffa1 	bl	800dfea <__multadd>
 800e0a8:	45a1      	cmp	r9, r4
 800e0aa:	d1f5      	bne.n	800e098 <__s2b+0x38>
 800e0ac:	eb08 0405 	add.w	r4, r8, r5
 800e0b0:	3c08      	subs	r4, #8
 800e0b2:	1b2d      	subs	r5, r5, r4
 800e0b4:	1963      	adds	r3, r4, r5
 800e0b6:	42bb      	cmp	r3, r7
 800e0b8:	db07      	blt.n	800e0ca <__s2b+0x6a>
 800e0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0be:	0052      	lsls	r2, r2, #1
 800e0c0:	3101      	adds	r1, #1
 800e0c2:	e7d9      	b.n	800e078 <__s2b+0x18>
 800e0c4:	340a      	adds	r4, #10
 800e0c6:	2509      	movs	r5, #9
 800e0c8:	e7f3      	b.n	800e0b2 <__s2b+0x52>
 800e0ca:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e0ce:	4601      	mov	r1, r0
 800e0d0:	3b30      	subs	r3, #48	; 0x30
 800e0d2:	220a      	movs	r2, #10
 800e0d4:	4630      	mov	r0, r6
 800e0d6:	f7ff ff88 	bl	800dfea <__multadd>
 800e0da:	e7eb      	b.n	800e0b4 <__s2b+0x54>

0800e0dc <__hi0bits>:
 800e0dc:	0c02      	lsrs	r2, r0, #16
 800e0de:	0412      	lsls	r2, r2, #16
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	b9b2      	cbnz	r2, 800e112 <__hi0bits+0x36>
 800e0e4:	0403      	lsls	r3, r0, #16
 800e0e6:	2010      	movs	r0, #16
 800e0e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e0ec:	bf04      	itt	eq
 800e0ee:	021b      	lsleq	r3, r3, #8
 800e0f0:	3008      	addeq	r0, #8
 800e0f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e0f6:	bf04      	itt	eq
 800e0f8:	011b      	lsleq	r3, r3, #4
 800e0fa:	3004      	addeq	r0, #4
 800e0fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e100:	bf04      	itt	eq
 800e102:	009b      	lsleq	r3, r3, #2
 800e104:	3002      	addeq	r0, #2
 800e106:	2b00      	cmp	r3, #0
 800e108:	db06      	blt.n	800e118 <__hi0bits+0x3c>
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	d503      	bpl.n	800e116 <__hi0bits+0x3a>
 800e10e:	3001      	adds	r0, #1
 800e110:	4770      	bx	lr
 800e112:	2000      	movs	r0, #0
 800e114:	e7e8      	b.n	800e0e8 <__hi0bits+0xc>
 800e116:	2020      	movs	r0, #32
 800e118:	4770      	bx	lr

0800e11a <__lo0bits>:
 800e11a:	6803      	ldr	r3, [r0, #0]
 800e11c:	f013 0207 	ands.w	r2, r3, #7
 800e120:	4601      	mov	r1, r0
 800e122:	d00b      	beq.n	800e13c <__lo0bits+0x22>
 800e124:	07da      	lsls	r2, r3, #31
 800e126:	d423      	bmi.n	800e170 <__lo0bits+0x56>
 800e128:	0798      	lsls	r0, r3, #30
 800e12a:	bf49      	itett	mi
 800e12c:	085b      	lsrmi	r3, r3, #1
 800e12e:	089b      	lsrpl	r3, r3, #2
 800e130:	2001      	movmi	r0, #1
 800e132:	600b      	strmi	r3, [r1, #0]
 800e134:	bf5c      	itt	pl
 800e136:	600b      	strpl	r3, [r1, #0]
 800e138:	2002      	movpl	r0, #2
 800e13a:	4770      	bx	lr
 800e13c:	b298      	uxth	r0, r3
 800e13e:	b9a8      	cbnz	r0, 800e16c <__lo0bits+0x52>
 800e140:	0c1b      	lsrs	r3, r3, #16
 800e142:	2010      	movs	r0, #16
 800e144:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e148:	bf04      	itt	eq
 800e14a:	0a1b      	lsreq	r3, r3, #8
 800e14c:	3008      	addeq	r0, #8
 800e14e:	071a      	lsls	r2, r3, #28
 800e150:	bf04      	itt	eq
 800e152:	091b      	lsreq	r3, r3, #4
 800e154:	3004      	addeq	r0, #4
 800e156:	079a      	lsls	r2, r3, #30
 800e158:	bf04      	itt	eq
 800e15a:	089b      	lsreq	r3, r3, #2
 800e15c:	3002      	addeq	r0, #2
 800e15e:	07da      	lsls	r2, r3, #31
 800e160:	d402      	bmi.n	800e168 <__lo0bits+0x4e>
 800e162:	085b      	lsrs	r3, r3, #1
 800e164:	d006      	beq.n	800e174 <__lo0bits+0x5a>
 800e166:	3001      	adds	r0, #1
 800e168:	600b      	str	r3, [r1, #0]
 800e16a:	4770      	bx	lr
 800e16c:	4610      	mov	r0, r2
 800e16e:	e7e9      	b.n	800e144 <__lo0bits+0x2a>
 800e170:	2000      	movs	r0, #0
 800e172:	4770      	bx	lr
 800e174:	2020      	movs	r0, #32
 800e176:	4770      	bx	lr

0800e178 <__i2b>:
 800e178:	b510      	push	{r4, lr}
 800e17a:	460c      	mov	r4, r1
 800e17c:	2101      	movs	r1, #1
 800e17e:	f7ff fee9 	bl	800df54 <_Balloc>
 800e182:	2201      	movs	r2, #1
 800e184:	6144      	str	r4, [r0, #20]
 800e186:	6102      	str	r2, [r0, #16]
 800e188:	bd10      	pop	{r4, pc}

0800e18a <__multiply>:
 800e18a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18e:	4614      	mov	r4, r2
 800e190:	690a      	ldr	r2, [r1, #16]
 800e192:	6923      	ldr	r3, [r4, #16]
 800e194:	429a      	cmp	r2, r3
 800e196:	bfb8      	it	lt
 800e198:	460b      	movlt	r3, r1
 800e19a:	4688      	mov	r8, r1
 800e19c:	bfbc      	itt	lt
 800e19e:	46a0      	movlt	r8, r4
 800e1a0:	461c      	movlt	r4, r3
 800e1a2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e1a6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e1aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1b2:	eb07 0609 	add.w	r6, r7, r9
 800e1b6:	42b3      	cmp	r3, r6
 800e1b8:	bfb8      	it	lt
 800e1ba:	3101      	addlt	r1, #1
 800e1bc:	f7ff feca 	bl	800df54 <_Balloc>
 800e1c0:	f100 0514 	add.w	r5, r0, #20
 800e1c4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e1c8:	462b      	mov	r3, r5
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	4573      	cmp	r3, lr
 800e1ce:	d316      	bcc.n	800e1fe <__multiply+0x74>
 800e1d0:	f104 0214 	add.w	r2, r4, #20
 800e1d4:	f108 0114 	add.w	r1, r8, #20
 800e1d8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e1dc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	9b00      	ldr	r3, [sp, #0]
 800e1e4:	9201      	str	r2, [sp, #4]
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d80c      	bhi.n	800e204 <__multiply+0x7a>
 800e1ea:	2e00      	cmp	r6, #0
 800e1ec:	dd03      	ble.n	800e1f6 <__multiply+0x6c>
 800e1ee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d05d      	beq.n	800e2b2 <__multiply+0x128>
 800e1f6:	6106      	str	r6, [r0, #16]
 800e1f8:	b003      	add	sp, #12
 800e1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1fe:	f843 2b04 	str.w	r2, [r3], #4
 800e202:	e7e3      	b.n	800e1cc <__multiply+0x42>
 800e204:	f8b2 b000 	ldrh.w	fp, [r2]
 800e208:	f1bb 0f00 	cmp.w	fp, #0
 800e20c:	d023      	beq.n	800e256 <__multiply+0xcc>
 800e20e:	4689      	mov	r9, r1
 800e210:	46ac      	mov	ip, r5
 800e212:	f04f 0800 	mov.w	r8, #0
 800e216:	f859 4b04 	ldr.w	r4, [r9], #4
 800e21a:	f8dc a000 	ldr.w	sl, [ip]
 800e21e:	b2a3      	uxth	r3, r4
 800e220:	fa1f fa8a 	uxth.w	sl, sl
 800e224:	fb0b a303 	mla	r3, fp, r3, sl
 800e228:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e22c:	f8dc 4000 	ldr.w	r4, [ip]
 800e230:	4443      	add	r3, r8
 800e232:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e236:	fb0b 840a 	mla	r4, fp, sl, r8
 800e23a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e23e:	46e2      	mov	sl, ip
 800e240:	b29b      	uxth	r3, r3
 800e242:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e246:	454f      	cmp	r7, r9
 800e248:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e24c:	f84a 3b04 	str.w	r3, [sl], #4
 800e250:	d82b      	bhi.n	800e2aa <__multiply+0x120>
 800e252:	f8cc 8004 	str.w	r8, [ip, #4]
 800e256:	9b01      	ldr	r3, [sp, #4]
 800e258:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e25c:	3204      	adds	r2, #4
 800e25e:	f1ba 0f00 	cmp.w	sl, #0
 800e262:	d020      	beq.n	800e2a6 <__multiply+0x11c>
 800e264:	682b      	ldr	r3, [r5, #0]
 800e266:	4689      	mov	r9, r1
 800e268:	46a8      	mov	r8, r5
 800e26a:	f04f 0b00 	mov.w	fp, #0
 800e26e:	f8b9 c000 	ldrh.w	ip, [r9]
 800e272:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e276:	fb0a 440c 	mla	r4, sl, ip, r4
 800e27a:	445c      	add	r4, fp
 800e27c:	46c4      	mov	ip, r8
 800e27e:	b29b      	uxth	r3, r3
 800e280:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e284:	f84c 3b04 	str.w	r3, [ip], #4
 800e288:	f859 3b04 	ldr.w	r3, [r9], #4
 800e28c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e290:	0c1b      	lsrs	r3, r3, #16
 800e292:	fb0a b303 	mla	r3, sl, r3, fp
 800e296:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e29a:	454f      	cmp	r7, r9
 800e29c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e2a0:	d805      	bhi.n	800e2ae <__multiply+0x124>
 800e2a2:	f8c8 3004 	str.w	r3, [r8, #4]
 800e2a6:	3504      	adds	r5, #4
 800e2a8:	e79b      	b.n	800e1e2 <__multiply+0x58>
 800e2aa:	46d4      	mov	ip, sl
 800e2ac:	e7b3      	b.n	800e216 <__multiply+0x8c>
 800e2ae:	46e0      	mov	r8, ip
 800e2b0:	e7dd      	b.n	800e26e <__multiply+0xe4>
 800e2b2:	3e01      	subs	r6, #1
 800e2b4:	e799      	b.n	800e1ea <__multiply+0x60>
	...

0800e2b8 <__pow5mult>:
 800e2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2bc:	4615      	mov	r5, r2
 800e2be:	f012 0203 	ands.w	r2, r2, #3
 800e2c2:	4606      	mov	r6, r0
 800e2c4:	460f      	mov	r7, r1
 800e2c6:	d007      	beq.n	800e2d8 <__pow5mult+0x20>
 800e2c8:	3a01      	subs	r2, #1
 800e2ca:	4c21      	ldr	r4, [pc, #132]	; (800e350 <__pow5mult+0x98>)
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2d2:	f7ff fe8a 	bl	800dfea <__multadd>
 800e2d6:	4607      	mov	r7, r0
 800e2d8:	10ad      	asrs	r5, r5, #2
 800e2da:	d035      	beq.n	800e348 <__pow5mult+0x90>
 800e2dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e2de:	b93c      	cbnz	r4, 800e2f0 <__pow5mult+0x38>
 800e2e0:	2010      	movs	r0, #16
 800e2e2:	f7ff fe1d 	bl	800df20 <malloc>
 800e2e6:	6270      	str	r0, [r6, #36]	; 0x24
 800e2e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2ec:	6004      	str	r4, [r0, #0]
 800e2ee:	60c4      	str	r4, [r0, #12]
 800e2f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e2f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2f8:	b94c      	cbnz	r4, 800e30e <__pow5mult+0x56>
 800e2fa:	f240 2171 	movw	r1, #625	; 0x271
 800e2fe:	4630      	mov	r0, r6
 800e300:	f7ff ff3a 	bl	800e178 <__i2b>
 800e304:	2300      	movs	r3, #0
 800e306:	f8c8 0008 	str.w	r0, [r8, #8]
 800e30a:	4604      	mov	r4, r0
 800e30c:	6003      	str	r3, [r0, #0]
 800e30e:	f04f 0800 	mov.w	r8, #0
 800e312:	07eb      	lsls	r3, r5, #31
 800e314:	d50a      	bpl.n	800e32c <__pow5mult+0x74>
 800e316:	4639      	mov	r1, r7
 800e318:	4622      	mov	r2, r4
 800e31a:	4630      	mov	r0, r6
 800e31c:	f7ff ff35 	bl	800e18a <__multiply>
 800e320:	4639      	mov	r1, r7
 800e322:	4681      	mov	r9, r0
 800e324:	4630      	mov	r0, r6
 800e326:	f7ff fe49 	bl	800dfbc <_Bfree>
 800e32a:	464f      	mov	r7, r9
 800e32c:	106d      	asrs	r5, r5, #1
 800e32e:	d00b      	beq.n	800e348 <__pow5mult+0x90>
 800e330:	6820      	ldr	r0, [r4, #0]
 800e332:	b938      	cbnz	r0, 800e344 <__pow5mult+0x8c>
 800e334:	4622      	mov	r2, r4
 800e336:	4621      	mov	r1, r4
 800e338:	4630      	mov	r0, r6
 800e33a:	f7ff ff26 	bl	800e18a <__multiply>
 800e33e:	6020      	str	r0, [r4, #0]
 800e340:	f8c0 8000 	str.w	r8, [r0]
 800e344:	4604      	mov	r4, r0
 800e346:	e7e4      	b.n	800e312 <__pow5mult+0x5a>
 800e348:	4638      	mov	r0, r7
 800e34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e34e:	bf00      	nop
 800e350:	08010750 	.word	0x08010750

0800e354 <__lshift>:
 800e354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e358:	460c      	mov	r4, r1
 800e35a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e35e:	6923      	ldr	r3, [r4, #16]
 800e360:	6849      	ldr	r1, [r1, #4]
 800e362:	eb0a 0903 	add.w	r9, sl, r3
 800e366:	68a3      	ldr	r3, [r4, #8]
 800e368:	4607      	mov	r7, r0
 800e36a:	4616      	mov	r6, r2
 800e36c:	f109 0501 	add.w	r5, r9, #1
 800e370:	42ab      	cmp	r3, r5
 800e372:	db32      	blt.n	800e3da <__lshift+0x86>
 800e374:	4638      	mov	r0, r7
 800e376:	f7ff fded 	bl	800df54 <_Balloc>
 800e37a:	2300      	movs	r3, #0
 800e37c:	4680      	mov	r8, r0
 800e37e:	f100 0114 	add.w	r1, r0, #20
 800e382:	461a      	mov	r2, r3
 800e384:	4553      	cmp	r3, sl
 800e386:	db2b      	blt.n	800e3e0 <__lshift+0x8c>
 800e388:	6920      	ldr	r0, [r4, #16]
 800e38a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e38e:	f104 0314 	add.w	r3, r4, #20
 800e392:	f016 021f 	ands.w	r2, r6, #31
 800e396:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e39a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e39e:	d025      	beq.n	800e3ec <__lshift+0x98>
 800e3a0:	f1c2 0e20 	rsb	lr, r2, #32
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	681e      	ldr	r6, [r3, #0]
 800e3a8:	468a      	mov	sl, r1
 800e3aa:	4096      	lsls	r6, r2
 800e3ac:	4330      	orrs	r0, r6
 800e3ae:	f84a 0b04 	str.w	r0, [sl], #4
 800e3b2:	f853 0b04 	ldr.w	r0, [r3], #4
 800e3b6:	459c      	cmp	ip, r3
 800e3b8:	fa20 f00e 	lsr.w	r0, r0, lr
 800e3bc:	d814      	bhi.n	800e3e8 <__lshift+0x94>
 800e3be:	6048      	str	r0, [r1, #4]
 800e3c0:	b108      	cbz	r0, 800e3c6 <__lshift+0x72>
 800e3c2:	f109 0502 	add.w	r5, r9, #2
 800e3c6:	3d01      	subs	r5, #1
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f8c8 5010 	str.w	r5, [r8, #16]
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	f7ff fdf4 	bl	800dfbc <_Bfree>
 800e3d4:	4640      	mov	r0, r8
 800e3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3da:	3101      	adds	r1, #1
 800e3dc:	005b      	lsls	r3, r3, #1
 800e3de:	e7c7      	b.n	800e370 <__lshift+0x1c>
 800e3e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	e7cd      	b.n	800e384 <__lshift+0x30>
 800e3e8:	4651      	mov	r1, sl
 800e3ea:	e7dc      	b.n	800e3a6 <__lshift+0x52>
 800e3ec:	3904      	subs	r1, #4
 800e3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800e3f6:	459c      	cmp	ip, r3
 800e3f8:	d8f9      	bhi.n	800e3ee <__lshift+0x9a>
 800e3fa:	e7e4      	b.n	800e3c6 <__lshift+0x72>

0800e3fc <__mcmp>:
 800e3fc:	6903      	ldr	r3, [r0, #16]
 800e3fe:	690a      	ldr	r2, [r1, #16]
 800e400:	1a9b      	subs	r3, r3, r2
 800e402:	b530      	push	{r4, r5, lr}
 800e404:	d10c      	bne.n	800e420 <__mcmp+0x24>
 800e406:	0092      	lsls	r2, r2, #2
 800e408:	3014      	adds	r0, #20
 800e40a:	3114      	adds	r1, #20
 800e40c:	1884      	adds	r4, r0, r2
 800e40e:	4411      	add	r1, r2
 800e410:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e414:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e418:	4295      	cmp	r5, r2
 800e41a:	d003      	beq.n	800e424 <__mcmp+0x28>
 800e41c:	d305      	bcc.n	800e42a <__mcmp+0x2e>
 800e41e:	2301      	movs	r3, #1
 800e420:	4618      	mov	r0, r3
 800e422:	bd30      	pop	{r4, r5, pc}
 800e424:	42a0      	cmp	r0, r4
 800e426:	d3f3      	bcc.n	800e410 <__mcmp+0x14>
 800e428:	e7fa      	b.n	800e420 <__mcmp+0x24>
 800e42a:	f04f 33ff 	mov.w	r3, #4294967295
 800e42e:	e7f7      	b.n	800e420 <__mcmp+0x24>

0800e430 <__mdiff>:
 800e430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e434:	460d      	mov	r5, r1
 800e436:	4607      	mov	r7, r0
 800e438:	4611      	mov	r1, r2
 800e43a:	4628      	mov	r0, r5
 800e43c:	4614      	mov	r4, r2
 800e43e:	f7ff ffdd 	bl	800e3fc <__mcmp>
 800e442:	1e06      	subs	r6, r0, #0
 800e444:	d108      	bne.n	800e458 <__mdiff+0x28>
 800e446:	4631      	mov	r1, r6
 800e448:	4638      	mov	r0, r7
 800e44a:	f7ff fd83 	bl	800df54 <_Balloc>
 800e44e:	2301      	movs	r3, #1
 800e450:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e458:	bfa4      	itt	ge
 800e45a:	4623      	movge	r3, r4
 800e45c:	462c      	movge	r4, r5
 800e45e:	4638      	mov	r0, r7
 800e460:	6861      	ldr	r1, [r4, #4]
 800e462:	bfa6      	itte	ge
 800e464:	461d      	movge	r5, r3
 800e466:	2600      	movge	r6, #0
 800e468:	2601      	movlt	r6, #1
 800e46a:	f7ff fd73 	bl	800df54 <_Balloc>
 800e46e:	692b      	ldr	r3, [r5, #16]
 800e470:	60c6      	str	r6, [r0, #12]
 800e472:	6926      	ldr	r6, [r4, #16]
 800e474:	f105 0914 	add.w	r9, r5, #20
 800e478:	f104 0214 	add.w	r2, r4, #20
 800e47c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e480:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e484:	f100 0514 	add.w	r5, r0, #20
 800e488:	f04f 0e00 	mov.w	lr, #0
 800e48c:	f852 ab04 	ldr.w	sl, [r2], #4
 800e490:	f859 4b04 	ldr.w	r4, [r9], #4
 800e494:	fa1e f18a 	uxtah	r1, lr, sl
 800e498:	b2a3      	uxth	r3, r4
 800e49a:	1ac9      	subs	r1, r1, r3
 800e49c:	0c23      	lsrs	r3, r4, #16
 800e49e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e4a2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e4a6:	b289      	uxth	r1, r1
 800e4a8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e4ac:	45c8      	cmp	r8, r9
 800e4ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e4b2:	4694      	mov	ip, r2
 800e4b4:	f845 3b04 	str.w	r3, [r5], #4
 800e4b8:	d8e8      	bhi.n	800e48c <__mdiff+0x5c>
 800e4ba:	45bc      	cmp	ip, r7
 800e4bc:	d304      	bcc.n	800e4c8 <__mdiff+0x98>
 800e4be:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e4c2:	b183      	cbz	r3, 800e4e6 <__mdiff+0xb6>
 800e4c4:	6106      	str	r6, [r0, #16]
 800e4c6:	e7c5      	b.n	800e454 <__mdiff+0x24>
 800e4c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e4cc:	fa1e f381 	uxtah	r3, lr, r1
 800e4d0:	141a      	asrs	r2, r3, #16
 800e4d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e4dc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e4e0:	f845 3b04 	str.w	r3, [r5], #4
 800e4e4:	e7e9      	b.n	800e4ba <__mdiff+0x8a>
 800e4e6:	3e01      	subs	r6, #1
 800e4e8:	e7e9      	b.n	800e4be <__mdiff+0x8e>
	...

0800e4ec <__ulp>:
 800e4ec:	4b12      	ldr	r3, [pc, #72]	; (800e538 <__ulp+0x4c>)
 800e4ee:	ee10 2a90 	vmov	r2, s1
 800e4f2:	401a      	ands	r2, r3
 800e4f4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	dd04      	ble.n	800e506 <__ulp+0x1a>
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	4619      	mov	r1, r3
 800e500:	ec41 0b10 	vmov	d0, r0, r1
 800e504:	4770      	bx	lr
 800e506:	425b      	negs	r3, r3
 800e508:	151b      	asrs	r3, r3, #20
 800e50a:	2b13      	cmp	r3, #19
 800e50c:	f04f 0000 	mov.w	r0, #0
 800e510:	f04f 0100 	mov.w	r1, #0
 800e514:	dc04      	bgt.n	800e520 <__ulp+0x34>
 800e516:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e51a:	fa42 f103 	asr.w	r1, r2, r3
 800e51e:	e7ef      	b.n	800e500 <__ulp+0x14>
 800e520:	3b14      	subs	r3, #20
 800e522:	2b1e      	cmp	r3, #30
 800e524:	f04f 0201 	mov.w	r2, #1
 800e528:	bfda      	itte	le
 800e52a:	f1c3 031f 	rsble	r3, r3, #31
 800e52e:	fa02 f303 	lslle.w	r3, r2, r3
 800e532:	4613      	movgt	r3, r2
 800e534:	4618      	mov	r0, r3
 800e536:	e7e3      	b.n	800e500 <__ulp+0x14>
 800e538:	7ff00000 	.word	0x7ff00000

0800e53c <__b2d>:
 800e53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e53e:	6905      	ldr	r5, [r0, #16]
 800e540:	f100 0714 	add.w	r7, r0, #20
 800e544:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e548:	1f2e      	subs	r6, r5, #4
 800e54a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e54e:	4620      	mov	r0, r4
 800e550:	f7ff fdc4 	bl	800e0dc <__hi0bits>
 800e554:	f1c0 0320 	rsb	r3, r0, #32
 800e558:	280a      	cmp	r0, #10
 800e55a:	600b      	str	r3, [r1, #0]
 800e55c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e5d4 <__b2d+0x98>
 800e560:	dc14      	bgt.n	800e58c <__b2d+0x50>
 800e562:	f1c0 0e0b 	rsb	lr, r0, #11
 800e566:	fa24 f10e 	lsr.w	r1, r4, lr
 800e56a:	42b7      	cmp	r7, r6
 800e56c:	ea41 030c 	orr.w	r3, r1, ip
 800e570:	bf34      	ite	cc
 800e572:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e576:	2100      	movcs	r1, #0
 800e578:	3015      	adds	r0, #21
 800e57a:	fa04 f000 	lsl.w	r0, r4, r0
 800e57e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e582:	ea40 0201 	orr.w	r2, r0, r1
 800e586:	ec43 2b10 	vmov	d0, r2, r3
 800e58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e58c:	42b7      	cmp	r7, r6
 800e58e:	bf3a      	itte	cc
 800e590:	f1a5 0608 	subcc.w	r6, r5, #8
 800e594:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e598:	2100      	movcs	r1, #0
 800e59a:	380b      	subs	r0, #11
 800e59c:	d015      	beq.n	800e5ca <__b2d+0x8e>
 800e59e:	4084      	lsls	r4, r0
 800e5a0:	f1c0 0520 	rsb	r5, r0, #32
 800e5a4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e5a8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e5ac:	42be      	cmp	r6, r7
 800e5ae:	fa21 fc05 	lsr.w	ip, r1, r5
 800e5b2:	ea44 030c 	orr.w	r3, r4, ip
 800e5b6:	bf8c      	ite	hi
 800e5b8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e5bc:	2400      	movls	r4, #0
 800e5be:	fa01 f000 	lsl.w	r0, r1, r0
 800e5c2:	40ec      	lsrs	r4, r5
 800e5c4:	ea40 0204 	orr.w	r2, r0, r4
 800e5c8:	e7dd      	b.n	800e586 <__b2d+0x4a>
 800e5ca:	ea44 030c 	orr.w	r3, r4, ip
 800e5ce:	460a      	mov	r2, r1
 800e5d0:	e7d9      	b.n	800e586 <__b2d+0x4a>
 800e5d2:	bf00      	nop
 800e5d4:	3ff00000 	.word	0x3ff00000

0800e5d8 <__d2b>:
 800e5d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5dc:	460e      	mov	r6, r1
 800e5de:	2101      	movs	r1, #1
 800e5e0:	ec59 8b10 	vmov	r8, r9, d0
 800e5e4:	4615      	mov	r5, r2
 800e5e6:	f7ff fcb5 	bl	800df54 <_Balloc>
 800e5ea:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e5ee:	4607      	mov	r7, r0
 800e5f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5f4:	bb34      	cbnz	r4, 800e644 <__d2b+0x6c>
 800e5f6:	9301      	str	r3, [sp, #4]
 800e5f8:	f1b8 0300 	subs.w	r3, r8, #0
 800e5fc:	d027      	beq.n	800e64e <__d2b+0x76>
 800e5fe:	a802      	add	r0, sp, #8
 800e600:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e604:	f7ff fd89 	bl	800e11a <__lo0bits>
 800e608:	9900      	ldr	r1, [sp, #0]
 800e60a:	b1f0      	cbz	r0, 800e64a <__d2b+0x72>
 800e60c:	9a01      	ldr	r2, [sp, #4]
 800e60e:	f1c0 0320 	rsb	r3, r0, #32
 800e612:	fa02 f303 	lsl.w	r3, r2, r3
 800e616:	430b      	orrs	r3, r1
 800e618:	40c2      	lsrs	r2, r0
 800e61a:	617b      	str	r3, [r7, #20]
 800e61c:	9201      	str	r2, [sp, #4]
 800e61e:	9b01      	ldr	r3, [sp, #4]
 800e620:	61bb      	str	r3, [r7, #24]
 800e622:	2b00      	cmp	r3, #0
 800e624:	bf14      	ite	ne
 800e626:	2102      	movne	r1, #2
 800e628:	2101      	moveq	r1, #1
 800e62a:	6139      	str	r1, [r7, #16]
 800e62c:	b1c4      	cbz	r4, 800e660 <__d2b+0x88>
 800e62e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e632:	4404      	add	r4, r0
 800e634:	6034      	str	r4, [r6, #0]
 800e636:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e63a:	6028      	str	r0, [r5, #0]
 800e63c:	4638      	mov	r0, r7
 800e63e:	b003      	add	sp, #12
 800e640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e648:	e7d5      	b.n	800e5f6 <__d2b+0x1e>
 800e64a:	6179      	str	r1, [r7, #20]
 800e64c:	e7e7      	b.n	800e61e <__d2b+0x46>
 800e64e:	a801      	add	r0, sp, #4
 800e650:	f7ff fd63 	bl	800e11a <__lo0bits>
 800e654:	9b01      	ldr	r3, [sp, #4]
 800e656:	617b      	str	r3, [r7, #20]
 800e658:	2101      	movs	r1, #1
 800e65a:	6139      	str	r1, [r7, #16]
 800e65c:	3020      	adds	r0, #32
 800e65e:	e7e5      	b.n	800e62c <__d2b+0x54>
 800e660:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e664:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e668:	6030      	str	r0, [r6, #0]
 800e66a:	6918      	ldr	r0, [r3, #16]
 800e66c:	f7ff fd36 	bl	800e0dc <__hi0bits>
 800e670:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e674:	e7e1      	b.n	800e63a <__d2b+0x62>

0800e676 <__ratio>:
 800e676:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67a:	4688      	mov	r8, r1
 800e67c:	4669      	mov	r1, sp
 800e67e:	4681      	mov	r9, r0
 800e680:	f7ff ff5c 	bl	800e53c <__b2d>
 800e684:	a901      	add	r1, sp, #4
 800e686:	4640      	mov	r0, r8
 800e688:	ec57 6b10 	vmov	r6, r7, d0
 800e68c:	f7ff ff56 	bl	800e53c <__b2d>
 800e690:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e694:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e698:	eba3 0c02 	sub.w	ip, r3, r2
 800e69c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e6a0:	1a9b      	subs	r3, r3, r2
 800e6a2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e6a6:	ec5b ab10 	vmov	sl, fp, d0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	bfce      	itee	gt
 800e6ae:	463a      	movgt	r2, r7
 800e6b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e6b4:	465a      	movle	r2, fp
 800e6b6:	4659      	mov	r1, fp
 800e6b8:	463d      	mov	r5, r7
 800e6ba:	bfd4      	ite	le
 800e6bc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e6c0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	ee10 2a10 	vmov	r2, s0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	f7f2 f8bd 	bl	800084c <__aeabi_ddiv>
 800e6d2:	ec41 0b10 	vmov	d0, r0, r1
 800e6d6:	b003      	add	sp, #12
 800e6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6dc <__copybits>:
 800e6dc:	3901      	subs	r1, #1
 800e6de:	b510      	push	{r4, lr}
 800e6e0:	1149      	asrs	r1, r1, #5
 800e6e2:	6914      	ldr	r4, [r2, #16]
 800e6e4:	3101      	adds	r1, #1
 800e6e6:	f102 0314 	add.w	r3, r2, #20
 800e6ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e6ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e6f2:	42a3      	cmp	r3, r4
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	d303      	bcc.n	800e700 <__copybits+0x24>
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	428a      	cmp	r2, r1
 800e6fc:	d305      	bcc.n	800e70a <__copybits+0x2e>
 800e6fe:	bd10      	pop	{r4, pc}
 800e700:	f853 2b04 	ldr.w	r2, [r3], #4
 800e704:	f840 2b04 	str.w	r2, [r0], #4
 800e708:	e7f3      	b.n	800e6f2 <__copybits+0x16>
 800e70a:	f842 3b04 	str.w	r3, [r2], #4
 800e70e:	e7f4      	b.n	800e6fa <__copybits+0x1e>

0800e710 <__any_on>:
 800e710:	f100 0214 	add.w	r2, r0, #20
 800e714:	6900      	ldr	r0, [r0, #16]
 800e716:	114b      	asrs	r3, r1, #5
 800e718:	4298      	cmp	r0, r3
 800e71a:	b510      	push	{r4, lr}
 800e71c:	db11      	blt.n	800e742 <__any_on+0x32>
 800e71e:	dd0a      	ble.n	800e736 <__any_on+0x26>
 800e720:	f011 011f 	ands.w	r1, r1, #31
 800e724:	d007      	beq.n	800e736 <__any_on+0x26>
 800e726:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e72a:	fa24 f001 	lsr.w	r0, r4, r1
 800e72e:	fa00 f101 	lsl.w	r1, r0, r1
 800e732:	428c      	cmp	r4, r1
 800e734:	d10b      	bne.n	800e74e <__any_on+0x3e>
 800e736:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d803      	bhi.n	800e746 <__any_on+0x36>
 800e73e:	2000      	movs	r0, #0
 800e740:	bd10      	pop	{r4, pc}
 800e742:	4603      	mov	r3, r0
 800e744:	e7f7      	b.n	800e736 <__any_on+0x26>
 800e746:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e74a:	2900      	cmp	r1, #0
 800e74c:	d0f5      	beq.n	800e73a <__any_on+0x2a>
 800e74e:	2001      	movs	r0, #1
 800e750:	e7f6      	b.n	800e740 <__any_on+0x30>

0800e752 <_calloc_r>:
 800e752:	b538      	push	{r3, r4, r5, lr}
 800e754:	fb02 f401 	mul.w	r4, r2, r1
 800e758:	4621      	mov	r1, r4
 800e75a:	f000 f857 	bl	800e80c <_malloc_r>
 800e75e:	4605      	mov	r5, r0
 800e760:	b118      	cbz	r0, 800e76a <_calloc_r+0x18>
 800e762:	4622      	mov	r2, r4
 800e764:	2100      	movs	r1, #0
 800e766:	f7fc fa24 	bl	800abb2 <memset>
 800e76a:	4628      	mov	r0, r5
 800e76c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e770 <_free_r>:
 800e770:	b538      	push	{r3, r4, r5, lr}
 800e772:	4605      	mov	r5, r0
 800e774:	2900      	cmp	r1, #0
 800e776:	d045      	beq.n	800e804 <_free_r+0x94>
 800e778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e77c:	1f0c      	subs	r4, r1, #4
 800e77e:	2b00      	cmp	r3, #0
 800e780:	bfb8      	it	lt
 800e782:	18e4      	addlt	r4, r4, r3
 800e784:	f000 fc0f 	bl	800efa6 <__malloc_lock>
 800e788:	4a1f      	ldr	r2, [pc, #124]	; (800e808 <_free_r+0x98>)
 800e78a:	6813      	ldr	r3, [r2, #0]
 800e78c:	4610      	mov	r0, r2
 800e78e:	b933      	cbnz	r3, 800e79e <_free_r+0x2e>
 800e790:	6063      	str	r3, [r4, #4]
 800e792:	6014      	str	r4, [r2, #0]
 800e794:	4628      	mov	r0, r5
 800e796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e79a:	f000 bc05 	b.w	800efa8 <__malloc_unlock>
 800e79e:	42a3      	cmp	r3, r4
 800e7a0:	d90c      	bls.n	800e7bc <_free_r+0x4c>
 800e7a2:	6821      	ldr	r1, [r4, #0]
 800e7a4:	1862      	adds	r2, r4, r1
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	bf04      	itt	eq
 800e7aa:	681a      	ldreq	r2, [r3, #0]
 800e7ac:	685b      	ldreq	r3, [r3, #4]
 800e7ae:	6063      	str	r3, [r4, #4]
 800e7b0:	bf04      	itt	eq
 800e7b2:	1852      	addeq	r2, r2, r1
 800e7b4:	6022      	streq	r2, [r4, #0]
 800e7b6:	6004      	str	r4, [r0, #0]
 800e7b8:	e7ec      	b.n	800e794 <_free_r+0x24>
 800e7ba:	4613      	mov	r3, r2
 800e7bc:	685a      	ldr	r2, [r3, #4]
 800e7be:	b10a      	cbz	r2, 800e7c4 <_free_r+0x54>
 800e7c0:	42a2      	cmp	r2, r4
 800e7c2:	d9fa      	bls.n	800e7ba <_free_r+0x4a>
 800e7c4:	6819      	ldr	r1, [r3, #0]
 800e7c6:	1858      	adds	r0, r3, r1
 800e7c8:	42a0      	cmp	r0, r4
 800e7ca:	d10b      	bne.n	800e7e4 <_free_r+0x74>
 800e7cc:	6820      	ldr	r0, [r4, #0]
 800e7ce:	4401      	add	r1, r0
 800e7d0:	1858      	adds	r0, r3, r1
 800e7d2:	4282      	cmp	r2, r0
 800e7d4:	6019      	str	r1, [r3, #0]
 800e7d6:	d1dd      	bne.n	800e794 <_free_r+0x24>
 800e7d8:	6810      	ldr	r0, [r2, #0]
 800e7da:	6852      	ldr	r2, [r2, #4]
 800e7dc:	605a      	str	r2, [r3, #4]
 800e7de:	4401      	add	r1, r0
 800e7e0:	6019      	str	r1, [r3, #0]
 800e7e2:	e7d7      	b.n	800e794 <_free_r+0x24>
 800e7e4:	d902      	bls.n	800e7ec <_free_r+0x7c>
 800e7e6:	230c      	movs	r3, #12
 800e7e8:	602b      	str	r3, [r5, #0]
 800e7ea:	e7d3      	b.n	800e794 <_free_r+0x24>
 800e7ec:	6820      	ldr	r0, [r4, #0]
 800e7ee:	1821      	adds	r1, r4, r0
 800e7f0:	428a      	cmp	r2, r1
 800e7f2:	bf04      	itt	eq
 800e7f4:	6811      	ldreq	r1, [r2, #0]
 800e7f6:	6852      	ldreq	r2, [r2, #4]
 800e7f8:	6062      	str	r2, [r4, #4]
 800e7fa:	bf04      	itt	eq
 800e7fc:	1809      	addeq	r1, r1, r0
 800e7fe:	6021      	streq	r1, [r4, #0]
 800e800:	605c      	str	r4, [r3, #4]
 800e802:	e7c7      	b.n	800e794 <_free_r+0x24>
 800e804:	bd38      	pop	{r3, r4, r5, pc}
 800e806:	bf00      	nop
 800e808:	20000204 	.word	0x20000204

0800e80c <_malloc_r>:
 800e80c:	b570      	push	{r4, r5, r6, lr}
 800e80e:	1ccd      	adds	r5, r1, #3
 800e810:	f025 0503 	bic.w	r5, r5, #3
 800e814:	3508      	adds	r5, #8
 800e816:	2d0c      	cmp	r5, #12
 800e818:	bf38      	it	cc
 800e81a:	250c      	movcc	r5, #12
 800e81c:	2d00      	cmp	r5, #0
 800e81e:	4606      	mov	r6, r0
 800e820:	db01      	blt.n	800e826 <_malloc_r+0x1a>
 800e822:	42a9      	cmp	r1, r5
 800e824:	d903      	bls.n	800e82e <_malloc_r+0x22>
 800e826:	230c      	movs	r3, #12
 800e828:	6033      	str	r3, [r6, #0]
 800e82a:	2000      	movs	r0, #0
 800e82c:	bd70      	pop	{r4, r5, r6, pc}
 800e82e:	f000 fbba 	bl	800efa6 <__malloc_lock>
 800e832:	4a21      	ldr	r2, [pc, #132]	; (800e8b8 <_malloc_r+0xac>)
 800e834:	6814      	ldr	r4, [r2, #0]
 800e836:	4621      	mov	r1, r4
 800e838:	b991      	cbnz	r1, 800e860 <_malloc_r+0x54>
 800e83a:	4c20      	ldr	r4, [pc, #128]	; (800e8bc <_malloc_r+0xb0>)
 800e83c:	6823      	ldr	r3, [r4, #0]
 800e83e:	b91b      	cbnz	r3, 800e848 <_malloc_r+0x3c>
 800e840:	4630      	mov	r0, r6
 800e842:	f000 facf 	bl	800ede4 <_sbrk_r>
 800e846:	6020      	str	r0, [r4, #0]
 800e848:	4629      	mov	r1, r5
 800e84a:	4630      	mov	r0, r6
 800e84c:	f000 faca 	bl	800ede4 <_sbrk_r>
 800e850:	1c43      	adds	r3, r0, #1
 800e852:	d124      	bne.n	800e89e <_malloc_r+0x92>
 800e854:	230c      	movs	r3, #12
 800e856:	6033      	str	r3, [r6, #0]
 800e858:	4630      	mov	r0, r6
 800e85a:	f000 fba5 	bl	800efa8 <__malloc_unlock>
 800e85e:	e7e4      	b.n	800e82a <_malloc_r+0x1e>
 800e860:	680b      	ldr	r3, [r1, #0]
 800e862:	1b5b      	subs	r3, r3, r5
 800e864:	d418      	bmi.n	800e898 <_malloc_r+0x8c>
 800e866:	2b0b      	cmp	r3, #11
 800e868:	d90f      	bls.n	800e88a <_malloc_r+0x7e>
 800e86a:	600b      	str	r3, [r1, #0]
 800e86c:	50cd      	str	r5, [r1, r3]
 800e86e:	18cc      	adds	r4, r1, r3
 800e870:	4630      	mov	r0, r6
 800e872:	f000 fb99 	bl	800efa8 <__malloc_unlock>
 800e876:	f104 000b 	add.w	r0, r4, #11
 800e87a:	1d23      	adds	r3, r4, #4
 800e87c:	f020 0007 	bic.w	r0, r0, #7
 800e880:	1ac3      	subs	r3, r0, r3
 800e882:	d0d3      	beq.n	800e82c <_malloc_r+0x20>
 800e884:	425a      	negs	r2, r3
 800e886:	50e2      	str	r2, [r4, r3]
 800e888:	e7d0      	b.n	800e82c <_malloc_r+0x20>
 800e88a:	428c      	cmp	r4, r1
 800e88c:	684b      	ldr	r3, [r1, #4]
 800e88e:	bf16      	itet	ne
 800e890:	6063      	strne	r3, [r4, #4]
 800e892:	6013      	streq	r3, [r2, #0]
 800e894:	460c      	movne	r4, r1
 800e896:	e7eb      	b.n	800e870 <_malloc_r+0x64>
 800e898:	460c      	mov	r4, r1
 800e89a:	6849      	ldr	r1, [r1, #4]
 800e89c:	e7cc      	b.n	800e838 <_malloc_r+0x2c>
 800e89e:	1cc4      	adds	r4, r0, #3
 800e8a0:	f024 0403 	bic.w	r4, r4, #3
 800e8a4:	42a0      	cmp	r0, r4
 800e8a6:	d005      	beq.n	800e8b4 <_malloc_r+0xa8>
 800e8a8:	1a21      	subs	r1, r4, r0
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	f000 fa9a 	bl	800ede4 <_sbrk_r>
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	d0cf      	beq.n	800e854 <_malloc_r+0x48>
 800e8b4:	6025      	str	r5, [r4, #0]
 800e8b6:	e7db      	b.n	800e870 <_malloc_r+0x64>
 800e8b8:	20000204 	.word	0x20000204
 800e8bc:	20000208 	.word	0x20000208

0800e8c0 <__ssputs_r>:
 800e8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8c4:	688e      	ldr	r6, [r1, #8]
 800e8c6:	429e      	cmp	r6, r3
 800e8c8:	4682      	mov	sl, r0
 800e8ca:	460c      	mov	r4, r1
 800e8cc:	4690      	mov	r8, r2
 800e8ce:	4699      	mov	r9, r3
 800e8d0:	d837      	bhi.n	800e942 <__ssputs_r+0x82>
 800e8d2:	898a      	ldrh	r2, [r1, #12]
 800e8d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8d8:	d031      	beq.n	800e93e <__ssputs_r+0x7e>
 800e8da:	6825      	ldr	r5, [r4, #0]
 800e8dc:	6909      	ldr	r1, [r1, #16]
 800e8de:	1a6f      	subs	r7, r5, r1
 800e8e0:	6965      	ldr	r5, [r4, #20]
 800e8e2:	2302      	movs	r3, #2
 800e8e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8e8:	fb95 f5f3 	sdiv	r5, r5, r3
 800e8ec:	f109 0301 	add.w	r3, r9, #1
 800e8f0:	443b      	add	r3, r7
 800e8f2:	429d      	cmp	r5, r3
 800e8f4:	bf38      	it	cc
 800e8f6:	461d      	movcc	r5, r3
 800e8f8:	0553      	lsls	r3, r2, #21
 800e8fa:	d530      	bpl.n	800e95e <__ssputs_r+0x9e>
 800e8fc:	4629      	mov	r1, r5
 800e8fe:	f7ff ff85 	bl	800e80c <_malloc_r>
 800e902:	4606      	mov	r6, r0
 800e904:	b950      	cbnz	r0, 800e91c <__ssputs_r+0x5c>
 800e906:	230c      	movs	r3, #12
 800e908:	f8ca 3000 	str.w	r3, [sl]
 800e90c:	89a3      	ldrh	r3, [r4, #12]
 800e90e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e912:	81a3      	strh	r3, [r4, #12]
 800e914:	f04f 30ff 	mov.w	r0, #4294967295
 800e918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91c:	463a      	mov	r2, r7
 800e91e:	6921      	ldr	r1, [r4, #16]
 800e920:	f7fc f93c 	bl	800ab9c <memcpy>
 800e924:	89a3      	ldrh	r3, [r4, #12]
 800e926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e92e:	81a3      	strh	r3, [r4, #12]
 800e930:	6126      	str	r6, [r4, #16]
 800e932:	6165      	str	r5, [r4, #20]
 800e934:	443e      	add	r6, r7
 800e936:	1bed      	subs	r5, r5, r7
 800e938:	6026      	str	r6, [r4, #0]
 800e93a:	60a5      	str	r5, [r4, #8]
 800e93c:	464e      	mov	r6, r9
 800e93e:	454e      	cmp	r6, r9
 800e940:	d900      	bls.n	800e944 <__ssputs_r+0x84>
 800e942:	464e      	mov	r6, r9
 800e944:	4632      	mov	r2, r6
 800e946:	4641      	mov	r1, r8
 800e948:	6820      	ldr	r0, [r4, #0]
 800e94a:	f000 fb13 	bl	800ef74 <memmove>
 800e94e:	68a3      	ldr	r3, [r4, #8]
 800e950:	1b9b      	subs	r3, r3, r6
 800e952:	60a3      	str	r3, [r4, #8]
 800e954:	6823      	ldr	r3, [r4, #0]
 800e956:	441e      	add	r6, r3
 800e958:	6026      	str	r6, [r4, #0]
 800e95a:	2000      	movs	r0, #0
 800e95c:	e7dc      	b.n	800e918 <__ssputs_r+0x58>
 800e95e:	462a      	mov	r2, r5
 800e960:	f000 fb23 	bl	800efaa <_realloc_r>
 800e964:	4606      	mov	r6, r0
 800e966:	2800      	cmp	r0, #0
 800e968:	d1e2      	bne.n	800e930 <__ssputs_r+0x70>
 800e96a:	6921      	ldr	r1, [r4, #16]
 800e96c:	4650      	mov	r0, sl
 800e96e:	f7ff feff 	bl	800e770 <_free_r>
 800e972:	e7c8      	b.n	800e906 <__ssputs_r+0x46>

0800e974 <_svfiprintf_r>:
 800e974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e978:	461d      	mov	r5, r3
 800e97a:	898b      	ldrh	r3, [r1, #12]
 800e97c:	061f      	lsls	r7, r3, #24
 800e97e:	b09d      	sub	sp, #116	; 0x74
 800e980:	4680      	mov	r8, r0
 800e982:	460c      	mov	r4, r1
 800e984:	4616      	mov	r6, r2
 800e986:	d50f      	bpl.n	800e9a8 <_svfiprintf_r+0x34>
 800e988:	690b      	ldr	r3, [r1, #16]
 800e98a:	b96b      	cbnz	r3, 800e9a8 <_svfiprintf_r+0x34>
 800e98c:	2140      	movs	r1, #64	; 0x40
 800e98e:	f7ff ff3d 	bl	800e80c <_malloc_r>
 800e992:	6020      	str	r0, [r4, #0]
 800e994:	6120      	str	r0, [r4, #16]
 800e996:	b928      	cbnz	r0, 800e9a4 <_svfiprintf_r+0x30>
 800e998:	230c      	movs	r3, #12
 800e99a:	f8c8 3000 	str.w	r3, [r8]
 800e99e:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a2:	e0c8      	b.n	800eb36 <_svfiprintf_r+0x1c2>
 800e9a4:	2340      	movs	r3, #64	; 0x40
 800e9a6:	6163      	str	r3, [r4, #20]
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ac:	2320      	movs	r3, #32
 800e9ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9b2:	2330      	movs	r3, #48	; 0x30
 800e9b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9b8:	9503      	str	r5, [sp, #12]
 800e9ba:	f04f 0b01 	mov.w	fp, #1
 800e9be:	4637      	mov	r7, r6
 800e9c0:	463d      	mov	r5, r7
 800e9c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e9c6:	b10b      	cbz	r3, 800e9cc <_svfiprintf_r+0x58>
 800e9c8:	2b25      	cmp	r3, #37	; 0x25
 800e9ca:	d13e      	bne.n	800ea4a <_svfiprintf_r+0xd6>
 800e9cc:	ebb7 0a06 	subs.w	sl, r7, r6
 800e9d0:	d00b      	beq.n	800e9ea <_svfiprintf_r+0x76>
 800e9d2:	4653      	mov	r3, sl
 800e9d4:	4632      	mov	r2, r6
 800e9d6:	4621      	mov	r1, r4
 800e9d8:	4640      	mov	r0, r8
 800e9da:	f7ff ff71 	bl	800e8c0 <__ssputs_r>
 800e9de:	3001      	adds	r0, #1
 800e9e0:	f000 80a4 	beq.w	800eb2c <_svfiprintf_r+0x1b8>
 800e9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9e6:	4453      	add	r3, sl
 800e9e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ea:	783b      	ldrb	r3, [r7, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f000 809d 	beq.w	800eb2c <_svfiprintf_r+0x1b8>
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e9f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9fc:	9304      	str	r3, [sp, #16]
 800e9fe:	9307      	str	r3, [sp, #28]
 800ea00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea04:	931a      	str	r3, [sp, #104]	; 0x68
 800ea06:	462f      	mov	r7, r5
 800ea08:	2205      	movs	r2, #5
 800ea0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ea0e:	4850      	ldr	r0, [pc, #320]	; (800eb50 <_svfiprintf_r+0x1dc>)
 800ea10:	f7f1 fbe6 	bl	80001e0 <memchr>
 800ea14:	9b04      	ldr	r3, [sp, #16]
 800ea16:	b9d0      	cbnz	r0, 800ea4e <_svfiprintf_r+0xda>
 800ea18:	06d9      	lsls	r1, r3, #27
 800ea1a:	bf44      	itt	mi
 800ea1c:	2220      	movmi	r2, #32
 800ea1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea22:	071a      	lsls	r2, r3, #28
 800ea24:	bf44      	itt	mi
 800ea26:	222b      	movmi	r2, #43	; 0x2b
 800ea28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea2c:	782a      	ldrb	r2, [r5, #0]
 800ea2e:	2a2a      	cmp	r2, #42	; 0x2a
 800ea30:	d015      	beq.n	800ea5e <_svfiprintf_r+0xea>
 800ea32:	9a07      	ldr	r2, [sp, #28]
 800ea34:	462f      	mov	r7, r5
 800ea36:	2000      	movs	r0, #0
 800ea38:	250a      	movs	r5, #10
 800ea3a:	4639      	mov	r1, r7
 800ea3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea40:	3b30      	subs	r3, #48	; 0x30
 800ea42:	2b09      	cmp	r3, #9
 800ea44:	d94d      	bls.n	800eae2 <_svfiprintf_r+0x16e>
 800ea46:	b1b8      	cbz	r0, 800ea78 <_svfiprintf_r+0x104>
 800ea48:	e00f      	b.n	800ea6a <_svfiprintf_r+0xf6>
 800ea4a:	462f      	mov	r7, r5
 800ea4c:	e7b8      	b.n	800e9c0 <_svfiprintf_r+0x4c>
 800ea4e:	4a40      	ldr	r2, [pc, #256]	; (800eb50 <_svfiprintf_r+0x1dc>)
 800ea50:	1a80      	subs	r0, r0, r2
 800ea52:	fa0b f000 	lsl.w	r0, fp, r0
 800ea56:	4318      	orrs	r0, r3
 800ea58:	9004      	str	r0, [sp, #16]
 800ea5a:	463d      	mov	r5, r7
 800ea5c:	e7d3      	b.n	800ea06 <_svfiprintf_r+0x92>
 800ea5e:	9a03      	ldr	r2, [sp, #12]
 800ea60:	1d11      	adds	r1, r2, #4
 800ea62:	6812      	ldr	r2, [r2, #0]
 800ea64:	9103      	str	r1, [sp, #12]
 800ea66:	2a00      	cmp	r2, #0
 800ea68:	db01      	blt.n	800ea6e <_svfiprintf_r+0xfa>
 800ea6a:	9207      	str	r2, [sp, #28]
 800ea6c:	e004      	b.n	800ea78 <_svfiprintf_r+0x104>
 800ea6e:	4252      	negs	r2, r2
 800ea70:	f043 0302 	orr.w	r3, r3, #2
 800ea74:	9207      	str	r2, [sp, #28]
 800ea76:	9304      	str	r3, [sp, #16]
 800ea78:	783b      	ldrb	r3, [r7, #0]
 800ea7a:	2b2e      	cmp	r3, #46	; 0x2e
 800ea7c:	d10c      	bne.n	800ea98 <_svfiprintf_r+0x124>
 800ea7e:	787b      	ldrb	r3, [r7, #1]
 800ea80:	2b2a      	cmp	r3, #42	; 0x2a
 800ea82:	d133      	bne.n	800eaec <_svfiprintf_r+0x178>
 800ea84:	9b03      	ldr	r3, [sp, #12]
 800ea86:	1d1a      	adds	r2, r3, #4
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	9203      	str	r2, [sp, #12]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	bfb8      	it	lt
 800ea90:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea94:	3702      	adds	r7, #2
 800ea96:	9305      	str	r3, [sp, #20]
 800ea98:	4d2e      	ldr	r5, [pc, #184]	; (800eb54 <_svfiprintf_r+0x1e0>)
 800ea9a:	7839      	ldrb	r1, [r7, #0]
 800ea9c:	2203      	movs	r2, #3
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	f7f1 fb9e 	bl	80001e0 <memchr>
 800eaa4:	b138      	cbz	r0, 800eab6 <_svfiprintf_r+0x142>
 800eaa6:	2340      	movs	r3, #64	; 0x40
 800eaa8:	1b40      	subs	r0, r0, r5
 800eaaa:	fa03 f000 	lsl.w	r0, r3, r0
 800eaae:	9b04      	ldr	r3, [sp, #16]
 800eab0:	4303      	orrs	r3, r0
 800eab2:	3701      	adds	r7, #1
 800eab4:	9304      	str	r3, [sp, #16]
 800eab6:	7839      	ldrb	r1, [r7, #0]
 800eab8:	4827      	ldr	r0, [pc, #156]	; (800eb58 <_svfiprintf_r+0x1e4>)
 800eaba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eabe:	2206      	movs	r2, #6
 800eac0:	1c7e      	adds	r6, r7, #1
 800eac2:	f7f1 fb8d 	bl	80001e0 <memchr>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d038      	beq.n	800eb3c <_svfiprintf_r+0x1c8>
 800eaca:	4b24      	ldr	r3, [pc, #144]	; (800eb5c <_svfiprintf_r+0x1e8>)
 800eacc:	bb13      	cbnz	r3, 800eb14 <_svfiprintf_r+0x1a0>
 800eace:	9b03      	ldr	r3, [sp, #12]
 800ead0:	3307      	adds	r3, #7
 800ead2:	f023 0307 	bic.w	r3, r3, #7
 800ead6:	3308      	adds	r3, #8
 800ead8:	9303      	str	r3, [sp, #12]
 800eada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eadc:	444b      	add	r3, r9
 800eade:	9309      	str	r3, [sp, #36]	; 0x24
 800eae0:	e76d      	b.n	800e9be <_svfiprintf_r+0x4a>
 800eae2:	fb05 3202 	mla	r2, r5, r2, r3
 800eae6:	2001      	movs	r0, #1
 800eae8:	460f      	mov	r7, r1
 800eaea:	e7a6      	b.n	800ea3a <_svfiprintf_r+0xc6>
 800eaec:	2300      	movs	r3, #0
 800eaee:	3701      	adds	r7, #1
 800eaf0:	9305      	str	r3, [sp, #20]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	250a      	movs	r5, #10
 800eaf6:	4638      	mov	r0, r7
 800eaf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eafc:	3a30      	subs	r2, #48	; 0x30
 800eafe:	2a09      	cmp	r2, #9
 800eb00:	d903      	bls.n	800eb0a <_svfiprintf_r+0x196>
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d0c8      	beq.n	800ea98 <_svfiprintf_r+0x124>
 800eb06:	9105      	str	r1, [sp, #20]
 800eb08:	e7c6      	b.n	800ea98 <_svfiprintf_r+0x124>
 800eb0a:	fb05 2101 	mla	r1, r5, r1, r2
 800eb0e:	2301      	movs	r3, #1
 800eb10:	4607      	mov	r7, r0
 800eb12:	e7f0      	b.n	800eaf6 <_svfiprintf_r+0x182>
 800eb14:	ab03      	add	r3, sp, #12
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	4622      	mov	r2, r4
 800eb1a:	4b11      	ldr	r3, [pc, #68]	; (800eb60 <_svfiprintf_r+0x1ec>)
 800eb1c:	a904      	add	r1, sp, #16
 800eb1e:	4640      	mov	r0, r8
 800eb20:	f7fc f8e4 	bl	800acec <_printf_float>
 800eb24:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eb28:	4681      	mov	r9, r0
 800eb2a:	d1d6      	bne.n	800eada <_svfiprintf_r+0x166>
 800eb2c:	89a3      	ldrh	r3, [r4, #12]
 800eb2e:	065b      	lsls	r3, r3, #25
 800eb30:	f53f af35 	bmi.w	800e99e <_svfiprintf_r+0x2a>
 800eb34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb36:	b01d      	add	sp, #116	; 0x74
 800eb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb3c:	ab03      	add	r3, sp, #12
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	4622      	mov	r2, r4
 800eb42:	4b07      	ldr	r3, [pc, #28]	; (800eb60 <_svfiprintf_r+0x1ec>)
 800eb44:	a904      	add	r1, sp, #16
 800eb46:	4640      	mov	r0, r8
 800eb48:	f7fc fb86 	bl	800b258 <_printf_i>
 800eb4c:	e7ea      	b.n	800eb24 <_svfiprintf_r+0x1b0>
 800eb4e:	bf00      	nop
 800eb50:	0801075c 	.word	0x0801075c
 800eb54:	08010762 	.word	0x08010762
 800eb58:	08010766 	.word	0x08010766
 800eb5c:	0800aced 	.word	0x0800aced
 800eb60:	0800e8c1 	.word	0x0800e8c1

0800eb64 <__sfputc_r>:
 800eb64:	6893      	ldr	r3, [r2, #8]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	b410      	push	{r4}
 800eb6c:	6093      	str	r3, [r2, #8]
 800eb6e:	da08      	bge.n	800eb82 <__sfputc_r+0x1e>
 800eb70:	6994      	ldr	r4, [r2, #24]
 800eb72:	42a3      	cmp	r3, r4
 800eb74:	db01      	blt.n	800eb7a <__sfputc_r+0x16>
 800eb76:	290a      	cmp	r1, #10
 800eb78:	d103      	bne.n	800eb82 <__sfputc_r+0x1e>
 800eb7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb7e:	f7fd bdb1 	b.w	800c6e4 <__swbuf_r>
 800eb82:	6813      	ldr	r3, [r2, #0]
 800eb84:	1c58      	adds	r0, r3, #1
 800eb86:	6010      	str	r0, [r2, #0]
 800eb88:	7019      	strb	r1, [r3, #0]
 800eb8a:	4608      	mov	r0, r1
 800eb8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <__sfputs_r>:
 800eb92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	4614      	mov	r4, r2
 800eb9a:	18d5      	adds	r5, r2, r3
 800eb9c:	42ac      	cmp	r4, r5
 800eb9e:	d101      	bne.n	800eba4 <__sfputs_r+0x12>
 800eba0:	2000      	movs	r0, #0
 800eba2:	e007      	b.n	800ebb4 <__sfputs_r+0x22>
 800eba4:	463a      	mov	r2, r7
 800eba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f7ff ffda 	bl	800eb64 <__sfputc_r>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d1f3      	bne.n	800eb9c <__sfputs_r+0xa>
 800ebb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebb8 <_vfiprintf_r>:
 800ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	460c      	mov	r4, r1
 800ebbe:	b09d      	sub	sp, #116	; 0x74
 800ebc0:	4617      	mov	r7, r2
 800ebc2:	461d      	mov	r5, r3
 800ebc4:	4606      	mov	r6, r0
 800ebc6:	b118      	cbz	r0, 800ebd0 <_vfiprintf_r+0x18>
 800ebc8:	6983      	ldr	r3, [r0, #24]
 800ebca:	b90b      	cbnz	r3, 800ebd0 <_vfiprintf_r+0x18>
 800ebcc:	f7fe fd80 	bl	800d6d0 <__sinit>
 800ebd0:	4b7c      	ldr	r3, [pc, #496]	; (800edc4 <_vfiprintf_r+0x20c>)
 800ebd2:	429c      	cmp	r4, r3
 800ebd4:	d158      	bne.n	800ec88 <_vfiprintf_r+0xd0>
 800ebd6:	6874      	ldr	r4, [r6, #4]
 800ebd8:	89a3      	ldrh	r3, [r4, #12]
 800ebda:	0718      	lsls	r0, r3, #28
 800ebdc:	d55e      	bpl.n	800ec9c <_vfiprintf_r+0xe4>
 800ebde:	6923      	ldr	r3, [r4, #16]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d05b      	beq.n	800ec9c <_vfiprintf_r+0xe4>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebe8:	2320      	movs	r3, #32
 800ebea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebee:	2330      	movs	r3, #48	; 0x30
 800ebf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebf4:	9503      	str	r5, [sp, #12]
 800ebf6:	f04f 0b01 	mov.w	fp, #1
 800ebfa:	46b8      	mov	r8, r7
 800ebfc:	4645      	mov	r5, r8
 800ebfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ec02:	b10b      	cbz	r3, 800ec08 <_vfiprintf_r+0x50>
 800ec04:	2b25      	cmp	r3, #37	; 0x25
 800ec06:	d154      	bne.n	800ecb2 <_vfiprintf_r+0xfa>
 800ec08:	ebb8 0a07 	subs.w	sl, r8, r7
 800ec0c:	d00b      	beq.n	800ec26 <_vfiprintf_r+0x6e>
 800ec0e:	4653      	mov	r3, sl
 800ec10:	463a      	mov	r2, r7
 800ec12:	4621      	mov	r1, r4
 800ec14:	4630      	mov	r0, r6
 800ec16:	f7ff ffbc 	bl	800eb92 <__sfputs_r>
 800ec1a:	3001      	adds	r0, #1
 800ec1c:	f000 80c2 	beq.w	800eda4 <_vfiprintf_r+0x1ec>
 800ec20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec22:	4453      	add	r3, sl
 800ec24:	9309      	str	r3, [sp, #36]	; 0x24
 800ec26:	f898 3000 	ldrb.w	r3, [r8]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f000 80ba 	beq.w	800eda4 <_vfiprintf_r+0x1ec>
 800ec30:	2300      	movs	r3, #0
 800ec32:	f04f 32ff 	mov.w	r2, #4294967295
 800ec36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec3a:	9304      	str	r3, [sp, #16]
 800ec3c:	9307      	str	r3, [sp, #28]
 800ec3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec42:	931a      	str	r3, [sp, #104]	; 0x68
 800ec44:	46a8      	mov	r8, r5
 800ec46:	2205      	movs	r2, #5
 800ec48:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ec4c:	485e      	ldr	r0, [pc, #376]	; (800edc8 <_vfiprintf_r+0x210>)
 800ec4e:	f7f1 fac7 	bl	80001e0 <memchr>
 800ec52:	9b04      	ldr	r3, [sp, #16]
 800ec54:	bb78      	cbnz	r0, 800ecb6 <_vfiprintf_r+0xfe>
 800ec56:	06d9      	lsls	r1, r3, #27
 800ec58:	bf44      	itt	mi
 800ec5a:	2220      	movmi	r2, #32
 800ec5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ec60:	071a      	lsls	r2, r3, #28
 800ec62:	bf44      	itt	mi
 800ec64:	222b      	movmi	r2, #43	; 0x2b
 800ec66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ec6a:	782a      	ldrb	r2, [r5, #0]
 800ec6c:	2a2a      	cmp	r2, #42	; 0x2a
 800ec6e:	d02a      	beq.n	800ecc6 <_vfiprintf_r+0x10e>
 800ec70:	9a07      	ldr	r2, [sp, #28]
 800ec72:	46a8      	mov	r8, r5
 800ec74:	2000      	movs	r0, #0
 800ec76:	250a      	movs	r5, #10
 800ec78:	4641      	mov	r1, r8
 800ec7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec7e:	3b30      	subs	r3, #48	; 0x30
 800ec80:	2b09      	cmp	r3, #9
 800ec82:	d969      	bls.n	800ed58 <_vfiprintf_r+0x1a0>
 800ec84:	b360      	cbz	r0, 800ece0 <_vfiprintf_r+0x128>
 800ec86:	e024      	b.n	800ecd2 <_vfiprintf_r+0x11a>
 800ec88:	4b50      	ldr	r3, [pc, #320]	; (800edcc <_vfiprintf_r+0x214>)
 800ec8a:	429c      	cmp	r4, r3
 800ec8c:	d101      	bne.n	800ec92 <_vfiprintf_r+0xda>
 800ec8e:	68b4      	ldr	r4, [r6, #8]
 800ec90:	e7a2      	b.n	800ebd8 <_vfiprintf_r+0x20>
 800ec92:	4b4f      	ldr	r3, [pc, #316]	; (800edd0 <_vfiprintf_r+0x218>)
 800ec94:	429c      	cmp	r4, r3
 800ec96:	bf08      	it	eq
 800ec98:	68f4      	ldreq	r4, [r6, #12]
 800ec9a:	e79d      	b.n	800ebd8 <_vfiprintf_r+0x20>
 800ec9c:	4621      	mov	r1, r4
 800ec9e:	4630      	mov	r0, r6
 800eca0:	f7fd fd72 	bl	800c788 <__swsetup_r>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d09d      	beq.n	800ebe4 <_vfiprintf_r+0x2c>
 800eca8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecac:	b01d      	add	sp, #116	; 0x74
 800ecae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb2:	46a8      	mov	r8, r5
 800ecb4:	e7a2      	b.n	800ebfc <_vfiprintf_r+0x44>
 800ecb6:	4a44      	ldr	r2, [pc, #272]	; (800edc8 <_vfiprintf_r+0x210>)
 800ecb8:	1a80      	subs	r0, r0, r2
 800ecba:	fa0b f000 	lsl.w	r0, fp, r0
 800ecbe:	4318      	orrs	r0, r3
 800ecc0:	9004      	str	r0, [sp, #16]
 800ecc2:	4645      	mov	r5, r8
 800ecc4:	e7be      	b.n	800ec44 <_vfiprintf_r+0x8c>
 800ecc6:	9a03      	ldr	r2, [sp, #12]
 800ecc8:	1d11      	adds	r1, r2, #4
 800ecca:	6812      	ldr	r2, [r2, #0]
 800eccc:	9103      	str	r1, [sp, #12]
 800ecce:	2a00      	cmp	r2, #0
 800ecd0:	db01      	blt.n	800ecd6 <_vfiprintf_r+0x11e>
 800ecd2:	9207      	str	r2, [sp, #28]
 800ecd4:	e004      	b.n	800ece0 <_vfiprintf_r+0x128>
 800ecd6:	4252      	negs	r2, r2
 800ecd8:	f043 0302 	orr.w	r3, r3, #2
 800ecdc:	9207      	str	r2, [sp, #28]
 800ecde:	9304      	str	r3, [sp, #16]
 800ece0:	f898 3000 	ldrb.w	r3, [r8]
 800ece4:	2b2e      	cmp	r3, #46	; 0x2e
 800ece6:	d10e      	bne.n	800ed06 <_vfiprintf_r+0x14e>
 800ece8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ecec:	2b2a      	cmp	r3, #42	; 0x2a
 800ecee:	d138      	bne.n	800ed62 <_vfiprintf_r+0x1aa>
 800ecf0:	9b03      	ldr	r3, [sp, #12]
 800ecf2:	1d1a      	adds	r2, r3, #4
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	9203      	str	r2, [sp, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	bfb8      	it	lt
 800ecfc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed00:	f108 0802 	add.w	r8, r8, #2
 800ed04:	9305      	str	r3, [sp, #20]
 800ed06:	4d33      	ldr	r5, [pc, #204]	; (800edd4 <_vfiprintf_r+0x21c>)
 800ed08:	f898 1000 	ldrb.w	r1, [r8]
 800ed0c:	2203      	movs	r2, #3
 800ed0e:	4628      	mov	r0, r5
 800ed10:	f7f1 fa66 	bl	80001e0 <memchr>
 800ed14:	b140      	cbz	r0, 800ed28 <_vfiprintf_r+0x170>
 800ed16:	2340      	movs	r3, #64	; 0x40
 800ed18:	1b40      	subs	r0, r0, r5
 800ed1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ed1e:	9b04      	ldr	r3, [sp, #16]
 800ed20:	4303      	orrs	r3, r0
 800ed22:	f108 0801 	add.w	r8, r8, #1
 800ed26:	9304      	str	r3, [sp, #16]
 800ed28:	f898 1000 	ldrb.w	r1, [r8]
 800ed2c:	482a      	ldr	r0, [pc, #168]	; (800edd8 <_vfiprintf_r+0x220>)
 800ed2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed32:	2206      	movs	r2, #6
 800ed34:	f108 0701 	add.w	r7, r8, #1
 800ed38:	f7f1 fa52 	bl	80001e0 <memchr>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	d037      	beq.n	800edb0 <_vfiprintf_r+0x1f8>
 800ed40:	4b26      	ldr	r3, [pc, #152]	; (800eddc <_vfiprintf_r+0x224>)
 800ed42:	bb1b      	cbnz	r3, 800ed8c <_vfiprintf_r+0x1d4>
 800ed44:	9b03      	ldr	r3, [sp, #12]
 800ed46:	3307      	adds	r3, #7
 800ed48:	f023 0307 	bic.w	r3, r3, #7
 800ed4c:	3308      	adds	r3, #8
 800ed4e:	9303      	str	r3, [sp, #12]
 800ed50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed52:	444b      	add	r3, r9
 800ed54:	9309      	str	r3, [sp, #36]	; 0x24
 800ed56:	e750      	b.n	800ebfa <_vfiprintf_r+0x42>
 800ed58:	fb05 3202 	mla	r2, r5, r2, r3
 800ed5c:	2001      	movs	r0, #1
 800ed5e:	4688      	mov	r8, r1
 800ed60:	e78a      	b.n	800ec78 <_vfiprintf_r+0xc0>
 800ed62:	2300      	movs	r3, #0
 800ed64:	f108 0801 	add.w	r8, r8, #1
 800ed68:	9305      	str	r3, [sp, #20]
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	250a      	movs	r5, #10
 800ed6e:	4640      	mov	r0, r8
 800ed70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed74:	3a30      	subs	r2, #48	; 0x30
 800ed76:	2a09      	cmp	r2, #9
 800ed78:	d903      	bls.n	800ed82 <_vfiprintf_r+0x1ca>
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d0c3      	beq.n	800ed06 <_vfiprintf_r+0x14e>
 800ed7e:	9105      	str	r1, [sp, #20]
 800ed80:	e7c1      	b.n	800ed06 <_vfiprintf_r+0x14e>
 800ed82:	fb05 2101 	mla	r1, r5, r1, r2
 800ed86:	2301      	movs	r3, #1
 800ed88:	4680      	mov	r8, r0
 800ed8a:	e7f0      	b.n	800ed6e <_vfiprintf_r+0x1b6>
 800ed8c:	ab03      	add	r3, sp, #12
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	4622      	mov	r2, r4
 800ed92:	4b13      	ldr	r3, [pc, #76]	; (800ede0 <_vfiprintf_r+0x228>)
 800ed94:	a904      	add	r1, sp, #16
 800ed96:	4630      	mov	r0, r6
 800ed98:	f7fb ffa8 	bl	800acec <_printf_float>
 800ed9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eda0:	4681      	mov	r9, r0
 800eda2:	d1d5      	bne.n	800ed50 <_vfiprintf_r+0x198>
 800eda4:	89a3      	ldrh	r3, [r4, #12]
 800eda6:	065b      	lsls	r3, r3, #25
 800eda8:	f53f af7e 	bmi.w	800eca8 <_vfiprintf_r+0xf0>
 800edac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edae:	e77d      	b.n	800ecac <_vfiprintf_r+0xf4>
 800edb0:	ab03      	add	r3, sp, #12
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	4622      	mov	r2, r4
 800edb6:	4b0a      	ldr	r3, [pc, #40]	; (800ede0 <_vfiprintf_r+0x228>)
 800edb8:	a904      	add	r1, sp, #16
 800edba:	4630      	mov	r0, r6
 800edbc:	f7fc fa4c 	bl	800b258 <_printf_i>
 800edc0:	e7ec      	b.n	800ed9c <_vfiprintf_r+0x1e4>
 800edc2:	bf00      	nop
 800edc4:	08010610 	.word	0x08010610
 800edc8:	0801075c 	.word	0x0801075c
 800edcc:	08010630 	.word	0x08010630
 800edd0:	080105f0 	.word	0x080105f0
 800edd4:	08010762 	.word	0x08010762
 800edd8:	08010766 	.word	0x08010766
 800eddc:	0800aced 	.word	0x0800aced
 800ede0:	0800eb93 	.word	0x0800eb93

0800ede4 <_sbrk_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4c06      	ldr	r4, [pc, #24]	; (800ee00 <_sbrk_r+0x1c>)
 800ede8:	2300      	movs	r3, #0
 800edea:	4605      	mov	r5, r0
 800edec:	4608      	mov	r0, r1
 800edee:	6023      	str	r3, [r4, #0]
 800edf0:	f7f5 ffb6 	bl	8004d60 <_sbrk>
 800edf4:	1c43      	adds	r3, r0, #1
 800edf6:	d102      	bne.n	800edfe <_sbrk_r+0x1a>
 800edf8:	6823      	ldr	r3, [r4, #0]
 800edfa:	b103      	cbz	r3, 800edfe <_sbrk_r+0x1a>
 800edfc:	602b      	str	r3, [r5, #0]
 800edfe:	bd38      	pop	{r3, r4, r5, pc}
 800ee00:	2001de4c 	.word	0x2001de4c

0800ee04 <__sread>:
 800ee04:	b510      	push	{r4, lr}
 800ee06:	460c      	mov	r4, r1
 800ee08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee0c:	f000 f8f4 	bl	800eff8 <_read_r>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	bfab      	itete	ge
 800ee14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee16:	89a3      	ldrhlt	r3, [r4, #12]
 800ee18:	181b      	addge	r3, r3, r0
 800ee1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee1e:	bfac      	ite	ge
 800ee20:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee22:	81a3      	strhlt	r3, [r4, #12]
 800ee24:	bd10      	pop	{r4, pc}

0800ee26 <__swrite>:
 800ee26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2a:	461f      	mov	r7, r3
 800ee2c:	898b      	ldrh	r3, [r1, #12]
 800ee2e:	05db      	lsls	r3, r3, #23
 800ee30:	4605      	mov	r5, r0
 800ee32:	460c      	mov	r4, r1
 800ee34:	4616      	mov	r6, r2
 800ee36:	d505      	bpl.n	800ee44 <__swrite+0x1e>
 800ee38:	2302      	movs	r3, #2
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee40:	f000 f886 	bl	800ef50 <_lseek_r>
 800ee44:	89a3      	ldrh	r3, [r4, #12]
 800ee46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee4e:	81a3      	strh	r3, [r4, #12]
 800ee50:	4632      	mov	r2, r6
 800ee52:	463b      	mov	r3, r7
 800ee54:	4628      	mov	r0, r5
 800ee56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee5a:	f000 b835 	b.w	800eec8 <_write_r>

0800ee5e <__sseek>:
 800ee5e:	b510      	push	{r4, lr}
 800ee60:	460c      	mov	r4, r1
 800ee62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee66:	f000 f873 	bl	800ef50 <_lseek_r>
 800ee6a:	1c43      	adds	r3, r0, #1
 800ee6c:	89a3      	ldrh	r3, [r4, #12]
 800ee6e:	bf15      	itete	ne
 800ee70:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee7a:	81a3      	strheq	r3, [r4, #12]
 800ee7c:	bf18      	it	ne
 800ee7e:	81a3      	strhne	r3, [r4, #12]
 800ee80:	bd10      	pop	{r4, pc}

0800ee82 <__sclose>:
 800ee82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee86:	f000 b831 	b.w	800eeec <_close_r>

0800ee8a <strncmp>:
 800ee8a:	b510      	push	{r4, lr}
 800ee8c:	b16a      	cbz	r2, 800eeaa <strncmp+0x20>
 800ee8e:	3901      	subs	r1, #1
 800ee90:	1884      	adds	r4, r0, r2
 800ee92:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ee96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d103      	bne.n	800eea6 <strncmp+0x1c>
 800ee9e:	42a0      	cmp	r0, r4
 800eea0:	d001      	beq.n	800eea6 <strncmp+0x1c>
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d1f5      	bne.n	800ee92 <strncmp+0x8>
 800eea6:	1a98      	subs	r0, r3, r2
 800eea8:	bd10      	pop	{r4, pc}
 800eeaa:	4610      	mov	r0, r2
 800eeac:	e7fc      	b.n	800eea8 <strncmp+0x1e>

0800eeae <__ascii_wctomb>:
 800eeae:	b149      	cbz	r1, 800eec4 <__ascii_wctomb+0x16>
 800eeb0:	2aff      	cmp	r2, #255	; 0xff
 800eeb2:	bf85      	ittet	hi
 800eeb4:	238a      	movhi	r3, #138	; 0x8a
 800eeb6:	6003      	strhi	r3, [r0, #0]
 800eeb8:	700a      	strbls	r2, [r1, #0]
 800eeba:	f04f 30ff 	movhi.w	r0, #4294967295
 800eebe:	bf98      	it	ls
 800eec0:	2001      	movls	r0, #1
 800eec2:	4770      	bx	lr
 800eec4:	4608      	mov	r0, r1
 800eec6:	4770      	bx	lr

0800eec8 <_write_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4c07      	ldr	r4, [pc, #28]	; (800eee8 <_write_r+0x20>)
 800eecc:	4605      	mov	r5, r0
 800eece:	4608      	mov	r0, r1
 800eed0:	4611      	mov	r1, r2
 800eed2:	2200      	movs	r2, #0
 800eed4:	6022      	str	r2, [r4, #0]
 800eed6:	461a      	mov	r2, r3
 800eed8:	f7f5 fef1 	bl	8004cbe <_write>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_write_r+0x1e>
 800eee0:	6823      	ldr	r3, [r4, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_write_r+0x1e>
 800eee4:	602b      	str	r3, [r5, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	2001de4c 	.word	0x2001de4c

0800eeec <_close_r>:
 800eeec:	b538      	push	{r3, r4, r5, lr}
 800eeee:	4c06      	ldr	r4, [pc, #24]	; (800ef08 <_close_r+0x1c>)
 800eef0:	2300      	movs	r3, #0
 800eef2:	4605      	mov	r5, r0
 800eef4:	4608      	mov	r0, r1
 800eef6:	6023      	str	r3, [r4, #0]
 800eef8:	f7f5 fefd 	bl	8004cf6 <_close>
 800eefc:	1c43      	adds	r3, r0, #1
 800eefe:	d102      	bne.n	800ef06 <_close_r+0x1a>
 800ef00:	6823      	ldr	r3, [r4, #0]
 800ef02:	b103      	cbz	r3, 800ef06 <_close_r+0x1a>
 800ef04:	602b      	str	r3, [r5, #0]
 800ef06:	bd38      	pop	{r3, r4, r5, pc}
 800ef08:	2001de4c 	.word	0x2001de4c

0800ef0c <_fstat_r>:
 800ef0c:	b538      	push	{r3, r4, r5, lr}
 800ef0e:	4c07      	ldr	r4, [pc, #28]	; (800ef2c <_fstat_r+0x20>)
 800ef10:	2300      	movs	r3, #0
 800ef12:	4605      	mov	r5, r0
 800ef14:	4608      	mov	r0, r1
 800ef16:	4611      	mov	r1, r2
 800ef18:	6023      	str	r3, [r4, #0]
 800ef1a:	f7f5 fef8 	bl	8004d0e <_fstat>
 800ef1e:	1c43      	adds	r3, r0, #1
 800ef20:	d102      	bne.n	800ef28 <_fstat_r+0x1c>
 800ef22:	6823      	ldr	r3, [r4, #0]
 800ef24:	b103      	cbz	r3, 800ef28 <_fstat_r+0x1c>
 800ef26:	602b      	str	r3, [r5, #0]
 800ef28:	bd38      	pop	{r3, r4, r5, pc}
 800ef2a:	bf00      	nop
 800ef2c:	2001de4c 	.word	0x2001de4c

0800ef30 <_isatty_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4c06      	ldr	r4, [pc, #24]	; (800ef4c <_isatty_r+0x1c>)
 800ef34:	2300      	movs	r3, #0
 800ef36:	4605      	mov	r5, r0
 800ef38:	4608      	mov	r0, r1
 800ef3a:	6023      	str	r3, [r4, #0]
 800ef3c:	f7f5 fef7 	bl	8004d2e <_isatty>
 800ef40:	1c43      	adds	r3, r0, #1
 800ef42:	d102      	bne.n	800ef4a <_isatty_r+0x1a>
 800ef44:	6823      	ldr	r3, [r4, #0]
 800ef46:	b103      	cbz	r3, 800ef4a <_isatty_r+0x1a>
 800ef48:	602b      	str	r3, [r5, #0]
 800ef4a:	bd38      	pop	{r3, r4, r5, pc}
 800ef4c:	2001de4c 	.word	0x2001de4c

0800ef50 <_lseek_r>:
 800ef50:	b538      	push	{r3, r4, r5, lr}
 800ef52:	4c07      	ldr	r4, [pc, #28]	; (800ef70 <_lseek_r+0x20>)
 800ef54:	4605      	mov	r5, r0
 800ef56:	4608      	mov	r0, r1
 800ef58:	4611      	mov	r1, r2
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	6022      	str	r2, [r4, #0]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	f7f5 fef0 	bl	8004d44 <_lseek>
 800ef64:	1c43      	adds	r3, r0, #1
 800ef66:	d102      	bne.n	800ef6e <_lseek_r+0x1e>
 800ef68:	6823      	ldr	r3, [r4, #0]
 800ef6a:	b103      	cbz	r3, 800ef6e <_lseek_r+0x1e>
 800ef6c:	602b      	str	r3, [r5, #0]
 800ef6e:	bd38      	pop	{r3, r4, r5, pc}
 800ef70:	2001de4c 	.word	0x2001de4c

0800ef74 <memmove>:
 800ef74:	4288      	cmp	r0, r1
 800ef76:	b510      	push	{r4, lr}
 800ef78:	eb01 0302 	add.w	r3, r1, r2
 800ef7c:	d807      	bhi.n	800ef8e <memmove+0x1a>
 800ef7e:	1e42      	subs	r2, r0, #1
 800ef80:	4299      	cmp	r1, r3
 800ef82:	d00a      	beq.n	800ef9a <memmove+0x26>
 800ef84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef88:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ef8c:	e7f8      	b.n	800ef80 <memmove+0xc>
 800ef8e:	4283      	cmp	r3, r0
 800ef90:	d9f5      	bls.n	800ef7e <memmove+0xa>
 800ef92:	1881      	adds	r1, r0, r2
 800ef94:	1ad2      	subs	r2, r2, r3
 800ef96:	42d3      	cmn	r3, r2
 800ef98:	d100      	bne.n	800ef9c <memmove+0x28>
 800ef9a:	bd10      	pop	{r4, pc}
 800ef9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efa0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800efa4:	e7f7      	b.n	800ef96 <memmove+0x22>

0800efa6 <__malloc_lock>:
 800efa6:	4770      	bx	lr

0800efa8 <__malloc_unlock>:
 800efa8:	4770      	bx	lr

0800efaa <_realloc_r>:
 800efaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efac:	4607      	mov	r7, r0
 800efae:	4614      	mov	r4, r2
 800efb0:	460e      	mov	r6, r1
 800efb2:	b921      	cbnz	r1, 800efbe <_realloc_r+0x14>
 800efb4:	4611      	mov	r1, r2
 800efb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800efba:	f7ff bc27 	b.w	800e80c <_malloc_r>
 800efbe:	b922      	cbnz	r2, 800efca <_realloc_r+0x20>
 800efc0:	f7ff fbd6 	bl	800e770 <_free_r>
 800efc4:	4625      	mov	r5, r4
 800efc6:	4628      	mov	r0, r5
 800efc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efca:	f000 f827 	bl	800f01c <_malloc_usable_size_r>
 800efce:	42a0      	cmp	r0, r4
 800efd0:	d20f      	bcs.n	800eff2 <_realloc_r+0x48>
 800efd2:	4621      	mov	r1, r4
 800efd4:	4638      	mov	r0, r7
 800efd6:	f7ff fc19 	bl	800e80c <_malloc_r>
 800efda:	4605      	mov	r5, r0
 800efdc:	2800      	cmp	r0, #0
 800efde:	d0f2      	beq.n	800efc6 <_realloc_r+0x1c>
 800efe0:	4631      	mov	r1, r6
 800efe2:	4622      	mov	r2, r4
 800efe4:	f7fb fdda 	bl	800ab9c <memcpy>
 800efe8:	4631      	mov	r1, r6
 800efea:	4638      	mov	r0, r7
 800efec:	f7ff fbc0 	bl	800e770 <_free_r>
 800eff0:	e7e9      	b.n	800efc6 <_realloc_r+0x1c>
 800eff2:	4635      	mov	r5, r6
 800eff4:	e7e7      	b.n	800efc6 <_realloc_r+0x1c>
	...

0800eff8 <_read_r>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	4c07      	ldr	r4, [pc, #28]	; (800f018 <_read_r+0x20>)
 800effc:	4605      	mov	r5, r0
 800effe:	4608      	mov	r0, r1
 800f000:	4611      	mov	r1, r2
 800f002:	2200      	movs	r2, #0
 800f004:	6022      	str	r2, [r4, #0]
 800f006:	461a      	mov	r2, r3
 800f008:	f7f5 fe3c 	bl	8004c84 <_read>
 800f00c:	1c43      	adds	r3, r0, #1
 800f00e:	d102      	bne.n	800f016 <_read_r+0x1e>
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	b103      	cbz	r3, 800f016 <_read_r+0x1e>
 800f014:	602b      	str	r3, [r5, #0]
 800f016:	bd38      	pop	{r3, r4, r5, pc}
 800f018:	2001de4c 	.word	0x2001de4c

0800f01c <_malloc_usable_size_r>:
 800f01c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f020:	1f18      	subs	r0, r3, #4
 800f022:	2b00      	cmp	r3, #0
 800f024:	bfbc      	itt	lt
 800f026:	580b      	ldrlt	r3, [r1, r0]
 800f028:	18c0      	addlt	r0, r0, r3
 800f02a:	4770      	bx	lr

0800f02c <pow>:
 800f02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f030:	ed2d 8b04 	vpush	{d8-d9}
 800f034:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800f308 <pow+0x2dc>
 800f038:	b08d      	sub	sp, #52	; 0x34
 800f03a:	ec57 6b10 	vmov	r6, r7, d0
 800f03e:	ec55 4b11 	vmov	r4, r5, d1
 800f042:	f000 f9bd 	bl	800f3c0 <__ieee754_pow>
 800f046:	f999 3000 	ldrsb.w	r3, [r9]
 800f04a:	9300      	str	r3, [sp, #0]
 800f04c:	3301      	adds	r3, #1
 800f04e:	eeb0 8a40 	vmov.f32	s16, s0
 800f052:	eef0 8a60 	vmov.f32	s17, s1
 800f056:	46c8      	mov	r8, r9
 800f058:	d05f      	beq.n	800f11a <pow+0xee>
 800f05a:	4622      	mov	r2, r4
 800f05c:	462b      	mov	r3, r5
 800f05e:	4620      	mov	r0, r4
 800f060:	4629      	mov	r1, r5
 800f062:	f7f1 fd63 	bl	8000b2c <__aeabi_dcmpun>
 800f066:	4683      	mov	fp, r0
 800f068:	2800      	cmp	r0, #0
 800f06a:	d156      	bne.n	800f11a <pow+0xee>
 800f06c:	4632      	mov	r2, r6
 800f06e:	463b      	mov	r3, r7
 800f070:	4630      	mov	r0, r6
 800f072:	4639      	mov	r1, r7
 800f074:	f7f1 fd5a 	bl	8000b2c <__aeabi_dcmpun>
 800f078:	9001      	str	r0, [sp, #4]
 800f07a:	b1e8      	cbz	r0, 800f0b8 <pow+0x8c>
 800f07c:	2200      	movs	r2, #0
 800f07e:	2300      	movs	r3, #0
 800f080:	4620      	mov	r0, r4
 800f082:	4629      	mov	r1, r5
 800f084:	f7f1 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 800f088:	2800      	cmp	r0, #0
 800f08a:	d046      	beq.n	800f11a <pow+0xee>
 800f08c:	2301      	movs	r3, #1
 800f08e:	9302      	str	r3, [sp, #8]
 800f090:	4b96      	ldr	r3, [pc, #600]	; (800f2ec <pow+0x2c0>)
 800f092:	9303      	str	r3, [sp, #12]
 800f094:	4b96      	ldr	r3, [pc, #600]	; (800f2f0 <pow+0x2c4>)
 800f096:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800f09a:	2200      	movs	r2, #0
 800f09c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f0a0:	9b00      	ldr	r3, [sp, #0]
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f0a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800f0ac:	d033      	beq.n	800f116 <pow+0xea>
 800f0ae:	a802      	add	r0, sp, #8
 800f0b0:	f000 ff55 	bl	800ff5e <matherr>
 800f0b4:	bb48      	cbnz	r0, 800f10a <pow+0xde>
 800f0b6:	e05d      	b.n	800f174 <pow+0x148>
 800f0b8:	f04f 0a00 	mov.w	sl, #0
 800f0bc:	f04f 0b00 	mov.w	fp, #0
 800f0c0:	4652      	mov	r2, sl
 800f0c2:	465b      	mov	r3, fp
 800f0c4:	4630      	mov	r0, r6
 800f0c6:	4639      	mov	r1, r7
 800f0c8:	f7f1 fcfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0cc:	ec4b ab19 	vmov	d9, sl, fp
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	d054      	beq.n	800f17e <pow+0x152>
 800f0d4:	4652      	mov	r2, sl
 800f0d6:	465b      	mov	r3, fp
 800f0d8:	4620      	mov	r0, r4
 800f0da:	4629      	mov	r1, r5
 800f0dc:	f7f1 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0e0:	4680      	mov	r8, r0
 800f0e2:	b318      	cbz	r0, 800f12c <pow+0x100>
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	9302      	str	r3, [sp, #8]
 800f0e8:	4b80      	ldr	r3, [pc, #512]	; (800f2ec <pow+0x2c0>)
 800f0ea:	9303      	str	r3, [sp, #12]
 800f0ec:	9b01      	ldr	r3, [sp, #4]
 800f0ee:	930a      	str	r3, [sp, #40]	; 0x28
 800f0f0:	9b00      	ldr	r3, [sp, #0]
 800f0f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f0f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800f0fa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d0d5      	beq.n	800f0ae <pow+0x82>
 800f102:	4b7b      	ldr	r3, [pc, #492]	; (800f2f0 <pow+0x2c4>)
 800f104:	2200      	movs	r2, #0
 800f106:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f10c:	b11b      	cbz	r3, 800f116 <pow+0xea>
 800f10e:	f7fb fd1b 	bl	800ab48 <__errno>
 800f112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f114:	6003      	str	r3, [r0, #0]
 800f116:	ed9d 8b08 	vldr	d8, [sp, #32]
 800f11a:	eeb0 0a48 	vmov.f32	s0, s16
 800f11e:	eef0 0a68 	vmov.f32	s1, s17
 800f122:	b00d      	add	sp, #52	; 0x34
 800f124:	ecbd 8b04 	vpop	{d8-d9}
 800f128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12c:	ec45 4b10 	vmov	d0, r4, r5
 800f130:	f000 ff0d 	bl	800ff4e <finite>
 800f134:	2800      	cmp	r0, #0
 800f136:	d0f0      	beq.n	800f11a <pow+0xee>
 800f138:	4652      	mov	r2, sl
 800f13a:	465b      	mov	r3, fp
 800f13c:	4620      	mov	r0, r4
 800f13e:	4629      	mov	r1, r5
 800f140:	f7f1 fccc 	bl	8000adc <__aeabi_dcmplt>
 800f144:	2800      	cmp	r0, #0
 800f146:	d0e8      	beq.n	800f11a <pow+0xee>
 800f148:	2301      	movs	r3, #1
 800f14a:	9302      	str	r3, [sp, #8]
 800f14c:	4b67      	ldr	r3, [pc, #412]	; (800f2ec <pow+0x2c0>)
 800f14e:	9303      	str	r3, [sp, #12]
 800f150:	f999 3000 	ldrsb.w	r3, [r9]
 800f154:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800f158:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f15c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800f160:	b913      	cbnz	r3, 800f168 <pow+0x13c>
 800f162:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f166:	e7a2      	b.n	800f0ae <pow+0x82>
 800f168:	4962      	ldr	r1, [pc, #392]	; (800f2f4 <pow+0x2c8>)
 800f16a:	2000      	movs	r0, #0
 800f16c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f170:	2b02      	cmp	r3, #2
 800f172:	d19c      	bne.n	800f0ae <pow+0x82>
 800f174:	f7fb fce8 	bl	800ab48 <__errno>
 800f178:	2321      	movs	r3, #33	; 0x21
 800f17a:	6003      	str	r3, [r0, #0]
 800f17c:	e7c5      	b.n	800f10a <pow+0xde>
 800f17e:	eeb0 0a48 	vmov.f32	s0, s16
 800f182:	eef0 0a68 	vmov.f32	s1, s17
 800f186:	f000 fee2 	bl	800ff4e <finite>
 800f18a:	9000      	str	r0, [sp, #0]
 800f18c:	2800      	cmp	r0, #0
 800f18e:	f040 8081 	bne.w	800f294 <pow+0x268>
 800f192:	ec47 6b10 	vmov	d0, r6, r7
 800f196:	f000 feda 	bl	800ff4e <finite>
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d07a      	beq.n	800f294 <pow+0x268>
 800f19e:	ec45 4b10 	vmov	d0, r4, r5
 800f1a2:	f000 fed4 	bl	800ff4e <finite>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d074      	beq.n	800f294 <pow+0x268>
 800f1aa:	ec53 2b18 	vmov	r2, r3, d8
 800f1ae:	ee18 0a10 	vmov	r0, s16
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	f7f1 fcba 	bl	8000b2c <__aeabi_dcmpun>
 800f1b8:	f999 9000 	ldrsb.w	r9, [r9]
 800f1bc:	4b4b      	ldr	r3, [pc, #300]	; (800f2ec <pow+0x2c0>)
 800f1be:	b1b0      	cbz	r0, 800f1ee <pow+0x1c2>
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f1c6:	9b00      	ldr	r3, [sp, #0]
 800f1c8:	930a      	str	r3, [sp, #40]	; 0x28
 800f1ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f1ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800f1d2:	f1b9 0f00 	cmp.w	r9, #0
 800f1d6:	d0c4      	beq.n	800f162 <pow+0x136>
 800f1d8:	4652      	mov	r2, sl
 800f1da:	465b      	mov	r3, fp
 800f1dc:	4650      	mov	r0, sl
 800f1de:	4659      	mov	r1, fp
 800f1e0:	f7f1 fb34 	bl	800084c <__aeabi_ddiv>
 800f1e4:	f1b9 0f02 	cmp.w	r9, #2
 800f1e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f1ec:	e7c1      	b.n	800f172 <pow+0x146>
 800f1ee:	2203      	movs	r2, #3
 800f1f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f1f4:	900a      	str	r0, [sp, #40]	; 0x28
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	4b3e      	ldr	r3, [pc, #248]	; (800f2f8 <pow+0x2cc>)
 800f1fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800f202:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f206:	f7f1 f9f7 	bl	80005f8 <__aeabi_dmul>
 800f20a:	4604      	mov	r4, r0
 800f20c:	460d      	mov	r5, r1
 800f20e:	f1b9 0f00 	cmp.w	r9, #0
 800f212:	d124      	bne.n	800f25e <pow+0x232>
 800f214:	4b39      	ldr	r3, [pc, #228]	; (800f2fc <pow+0x2d0>)
 800f216:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f21a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f21e:	4630      	mov	r0, r6
 800f220:	4652      	mov	r2, sl
 800f222:	465b      	mov	r3, fp
 800f224:	4639      	mov	r1, r7
 800f226:	f7f1 fc59 	bl	8000adc <__aeabi_dcmplt>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d056      	beq.n	800f2dc <pow+0x2b0>
 800f22e:	ec45 4b10 	vmov	d0, r4, r5
 800f232:	f000 fea1 	bl	800ff78 <rint>
 800f236:	4622      	mov	r2, r4
 800f238:	462b      	mov	r3, r5
 800f23a:	ec51 0b10 	vmov	r0, r1, d0
 800f23e:	f7f1 fc43 	bl	8000ac8 <__aeabi_dcmpeq>
 800f242:	b920      	cbnz	r0, 800f24e <pow+0x222>
 800f244:	4b2e      	ldr	r3, [pc, #184]	; (800f300 <pow+0x2d4>)
 800f246:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f24a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f24e:	f998 3000 	ldrsb.w	r3, [r8]
 800f252:	2b02      	cmp	r3, #2
 800f254:	d142      	bne.n	800f2dc <pow+0x2b0>
 800f256:	f7fb fc77 	bl	800ab48 <__errno>
 800f25a:	2322      	movs	r3, #34	; 0x22
 800f25c:	e78d      	b.n	800f17a <pow+0x14e>
 800f25e:	4b29      	ldr	r3, [pc, #164]	; (800f304 <pow+0x2d8>)
 800f260:	2200      	movs	r2, #0
 800f262:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f266:	4630      	mov	r0, r6
 800f268:	4652      	mov	r2, sl
 800f26a:	465b      	mov	r3, fp
 800f26c:	4639      	mov	r1, r7
 800f26e:	f7f1 fc35 	bl	8000adc <__aeabi_dcmplt>
 800f272:	2800      	cmp	r0, #0
 800f274:	d0eb      	beq.n	800f24e <pow+0x222>
 800f276:	ec45 4b10 	vmov	d0, r4, r5
 800f27a:	f000 fe7d 	bl	800ff78 <rint>
 800f27e:	4622      	mov	r2, r4
 800f280:	462b      	mov	r3, r5
 800f282:	ec51 0b10 	vmov	r0, r1, d0
 800f286:	f7f1 fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d1df      	bne.n	800f24e <pow+0x222>
 800f28e:	2200      	movs	r2, #0
 800f290:	4b18      	ldr	r3, [pc, #96]	; (800f2f4 <pow+0x2c8>)
 800f292:	e7da      	b.n	800f24a <pow+0x21e>
 800f294:	2200      	movs	r2, #0
 800f296:	2300      	movs	r3, #0
 800f298:	ec51 0b18 	vmov	r0, r1, d8
 800f29c:	f7f1 fc14 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	f43f af3a 	beq.w	800f11a <pow+0xee>
 800f2a6:	ec47 6b10 	vmov	d0, r6, r7
 800f2aa:	f000 fe50 	bl	800ff4e <finite>
 800f2ae:	2800      	cmp	r0, #0
 800f2b0:	f43f af33 	beq.w	800f11a <pow+0xee>
 800f2b4:	ec45 4b10 	vmov	d0, r4, r5
 800f2b8:	f000 fe49 	bl	800ff4e <finite>
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	f43f af2c 	beq.w	800f11a <pow+0xee>
 800f2c2:	2304      	movs	r3, #4
 800f2c4:	9302      	str	r3, [sp, #8]
 800f2c6:	4b09      	ldr	r3, [pc, #36]	; (800f2ec <pow+0x2c0>)
 800f2c8:	9303      	str	r3, [sp, #12]
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	930a      	str	r3, [sp, #40]	; 0x28
 800f2ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800f2d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800f2d6:	ed8d 9b08 	vstr	d9, [sp, #32]
 800f2da:	e7b8      	b.n	800f24e <pow+0x222>
 800f2dc:	a802      	add	r0, sp, #8
 800f2de:	f000 fe3e 	bl	800ff5e <matherr>
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	f47f af11 	bne.w	800f10a <pow+0xde>
 800f2e8:	e7b5      	b.n	800f256 <pow+0x22a>
 800f2ea:	bf00      	nop
 800f2ec:	0801086e 	.word	0x0801086e
 800f2f0:	3ff00000 	.word	0x3ff00000
 800f2f4:	fff00000 	.word	0xfff00000
 800f2f8:	3fe00000 	.word	0x3fe00000
 800f2fc:	47efffff 	.word	0x47efffff
 800f300:	c7efffff 	.word	0xc7efffff
 800f304:	7ff00000 	.word	0x7ff00000
 800f308:	200001dc 	.word	0x200001dc

0800f30c <sqrt>:
 800f30c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f310:	ed2d 8b02 	vpush	{d8}
 800f314:	b08b      	sub	sp, #44	; 0x2c
 800f316:	ec55 4b10 	vmov	r4, r5, d0
 800f31a:	f000 fd5f 	bl	800fddc <__ieee754_sqrt>
 800f31e:	4b26      	ldr	r3, [pc, #152]	; (800f3b8 <sqrt+0xac>)
 800f320:	eeb0 8a40 	vmov.f32	s16, s0
 800f324:	eef0 8a60 	vmov.f32	s17, s1
 800f328:	f993 6000 	ldrsb.w	r6, [r3]
 800f32c:	1c73      	adds	r3, r6, #1
 800f32e:	d02a      	beq.n	800f386 <sqrt+0x7a>
 800f330:	4622      	mov	r2, r4
 800f332:	462b      	mov	r3, r5
 800f334:	4620      	mov	r0, r4
 800f336:	4629      	mov	r1, r5
 800f338:	f7f1 fbf8 	bl	8000b2c <__aeabi_dcmpun>
 800f33c:	4607      	mov	r7, r0
 800f33e:	bb10      	cbnz	r0, 800f386 <sqrt+0x7a>
 800f340:	f04f 0800 	mov.w	r8, #0
 800f344:	f04f 0900 	mov.w	r9, #0
 800f348:	4642      	mov	r2, r8
 800f34a:	464b      	mov	r3, r9
 800f34c:	4620      	mov	r0, r4
 800f34e:	4629      	mov	r1, r5
 800f350:	f7f1 fbc4 	bl	8000adc <__aeabi_dcmplt>
 800f354:	b1b8      	cbz	r0, 800f386 <sqrt+0x7a>
 800f356:	2301      	movs	r3, #1
 800f358:	9300      	str	r3, [sp, #0]
 800f35a:	4b18      	ldr	r3, [pc, #96]	; (800f3bc <sqrt+0xb0>)
 800f35c:	9301      	str	r3, [sp, #4]
 800f35e:	9708      	str	r7, [sp, #32]
 800f360:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800f364:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f368:	b9b6      	cbnz	r6, 800f398 <sqrt+0x8c>
 800f36a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800f36e:	4668      	mov	r0, sp
 800f370:	f000 fdf5 	bl	800ff5e <matherr>
 800f374:	b1d0      	cbz	r0, 800f3ac <sqrt+0xa0>
 800f376:	9b08      	ldr	r3, [sp, #32]
 800f378:	b11b      	cbz	r3, 800f382 <sqrt+0x76>
 800f37a:	f7fb fbe5 	bl	800ab48 <__errno>
 800f37e:	9b08      	ldr	r3, [sp, #32]
 800f380:	6003      	str	r3, [r0, #0]
 800f382:	ed9d 8b06 	vldr	d8, [sp, #24]
 800f386:	eeb0 0a48 	vmov.f32	s0, s16
 800f38a:	eef0 0a68 	vmov.f32	s1, s17
 800f38e:	b00b      	add	sp, #44	; 0x2c
 800f390:	ecbd 8b02 	vpop	{d8}
 800f394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f398:	4642      	mov	r2, r8
 800f39a:	464b      	mov	r3, r9
 800f39c:	4640      	mov	r0, r8
 800f39e:	4649      	mov	r1, r9
 800f3a0:	f7f1 fa54 	bl	800084c <__aeabi_ddiv>
 800f3a4:	2e02      	cmp	r6, #2
 800f3a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f3aa:	d1e0      	bne.n	800f36e <sqrt+0x62>
 800f3ac:	f7fb fbcc 	bl	800ab48 <__errno>
 800f3b0:	2321      	movs	r3, #33	; 0x21
 800f3b2:	6003      	str	r3, [r0, #0]
 800f3b4:	e7df      	b.n	800f376 <sqrt+0x6a>
 800f3b6:	bf00      	nop
 800f3b8:	200001dc 	.word	0x200001dc
 800f3bc:	08010872 	.word	0x08010872

0800f3c0 <__ieee754_pow>:
 800f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c4:	b091      	sub	sp, #68	; 0x44
 800f3c6:	ed8d 1b00 	vstr	d1, [sp]
 800f3ca:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f3ce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f3d2:	ea58 0302 	orrs.w	r3, r8, r2
 800f3d6:	ec57 6b10 	vmov	r6, r7, d0
 800f3da:	f000 84be 	beq.w	800fd5a <__ieee754_pow+0x99a>
 800f3de:	4b7a      	ldr	r3, [pc, #488]	; (800f5c8 <__ieee754_pow+0x208>)
 800f3e0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f3e4:	429c      	cmp	r4, r3
 800f3e6:	463d      	mov	r5, r7
 800f3e8:	ee10 aa10 	vmov	sl, s0
 800f3ec:	dc09      	bgt.n	800f402 <__ieee754_pow+0x42>
 800f3ee:	d103      	bne.n	800f3f8 <__ieee754_pow+0x38>
 800f3f0:	b93e      	cbnz	r6, 800f402 <__ieee754_pow+0x42>
 800f3f2:	45a0      	cmp	r8, r4
 800f3f4:	dc0d      	bgt.n	800f412 <__ieee754_pow+0x52>
 800f3f6:	e001      	b.n	800f3fc <__ieee754_pow+0x3c>
 800f3f8:	4598      	cmp	r8, r3
 800f3fa:	dc02      	bgt.n	800f402 <__ieee754_pow+0x42>
 800f3fc:	4598      	cmp	r8, r3
 800f3fe:	d10e      	bne.n	800f41e <__ieee754_pow+0x5e>
 800f400:	b16a      	cbz	r2, 800f41e <__ieee754_pow+0x5e>
 800f402:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f406:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f40a:	ea54 030a 	orrs.w	r3, r4, sl
 800f40e:	f000 84a4 	beq.w	800fd5a <__ieee754_pow+0x99a>
 800f412:	486e      	ldr	r0, [pc, #440]	; (800f5cc <__ieee754_pow+0x20c>)
 800f414:	b011      	add	sp, #68	; 0x44
 800f416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41a:	f000 bda5 	b.w	800ff68 <nan>
 800f41e:	2d00      	cmp	r5, #0
 800f420:	da53      	bge.n	800f4ca <__ieee754_pow+0x10a>
 800f422:	4b6b      	ldr	r3, [pc, #428]	; (800f5d0 <__ieee754_pow+0x210>)
 800f424:	4598      	cmp	r8, r3
 800f426:	dc4d      	bgt.n	800f4c4 <__ieee754_pow+0x104>
 800f428:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f42c:	4598      	cmp	r8, r3
 800f42e:	dd4c      	ble.n	800f4ca <__ieee754_pow+0x10a>
 800f430:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f434:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f438:	2b14      	cmp	r3, #20
 800f43a:	dd26      	ble.n	800f48a <__ieee754_pow+0xca>
 800f43c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f440:	fa22 f103 	lsr.w	r1, r2, r3
 800f444:	fa01 f303 	lsl.w	r3, r1, r3
 800f448:	4293      	cmp	r3, r2
 800f44a:	d13e      	bne.n	800f4ca <__ieee754_pow+0x10a>
 800f44c:	f001 0101 	and.w	r1, r1, #1
 800f450:	f1c1 0b02 	rsb	fp, r1, #2
 800f454:	2a00      	cmp	r2, #0
 800f456:	d15b      	bne.n	800f510 <__ieee754_pow+0x150>
 800f458:	4b5b      	ldr	r3, [pc, #364]	; (800f5c8 <__ieee754_pow+0x208>)
 800f45a:	4598      	cmp	r8, r3
 800f45c:	d124      	bne.n	800f4a8 <__ieee754_pow+0xe8>
 800f45e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f462:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f466:	ea53 030a 	orrs.w	r3, r3, sl
 800f46a:	f000 8476 	beq.w	800fd5a <__ieee754_pow+0x99a>
 800f46e:	4b59      	ldr	r3, [pc, #356]	; (800f5d4 <__ieee754_pow+0x214>)
 800f470:	429c      	cmp	r4, r3
 800f472:	dd2d      	ble.n	800f4d0 <__ieee754_pow+0x110>
 800f474:	f1b9 0f00 	cmp.w	r9, #0
 800f478:	f280 8473 	bge.w	800fd62 <__ieee754_pow+0x9a2>
 800f47c:	2000      	movs	r0, #0
 800f47e:	2100      	movs	r1, #0
 800f480:	ec41 0b10 	vmov	d0, r0, r1
 800f484:	b011      	add	sp, #68	; 0x44
 800f486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f48a:	2a00      	cmp	r2, #0
 800f48c:	d13e      	bne.n	800f50c <__ieee754_pow+0x14c>
 800f48e:	f1c3 0314 	rsb	r3, r3, #20
 800f492:	fa48 f103 	asr.w	r1, r8, r3
 800f496:	fa01 f303 	lsl.w	r3, r1, r3
 800f49a:	4543      	cmp	r3, r8
 800f49c:	f040 8469 	bne.w	800fd72 <__ieee754_pow+0x9b2>
 800f4a0:	f001 0101 	and.w	r1, r1, #1
 800f4a4:	f1c1 0b02 	rsb	fp, r1, #2
 800f4a8:	4b4b      	ldr	r3, [pc, #300]	; (800f5d8 <__ieee754_pow+0x218>)
 800f4aa:	4598      	cmp	r8, r3
 800f4ac:	d118      	bne.n	800f4e0 <__ieee754_pow+0x120>
 800f4ae:	f1b9 0f00 	cmp.w	r9, #0
 800f4b2:	f280 845a 	bge.w	800fd6a <__ieee754_pow+0x9aa>
 800f4b6:	4948      	ldr	r1, [pc, #288]	; (800f5d8 <__ieee754_pow+0x218>)
 800f4b8:	4632      	mov	r2, r6
 800f4ba:	463b      	mov	r3, r7
 800f4bc:	2000      	movs	r0, #0
 800f4be:	f7f1 f9c5 	bl	800084c <__aeabi_ddiv>
 800f4c2:	e7dd      	b.n	800f480 <__ieee754_pow+0xc0>
 800f4c4:	f04f 0b02 	mov.w	fp, #2
 800f4c8:	e7c4      	b.n	800f454 <__ieee754_pow+0x94>
 800f4ca:	f04f 0b00 	mov.w	fp, #0
 800f4ce:	e7c1      	b.n	800f454 <__ieee754_pow+0x94>
 800f4d0:	f1b9 0f00 	cmp.w	r9, #0
 800f4d4:	dad2      	bge.n	800f47c <__ieee754_pow+0xbc>
 800f4d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f4da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f4de:	e7cf      	b.n	800f480 <__ieee754_pow+0xc0>
 800f4e0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800f4e4:	d106      	bne.n	800f4f4 <__ieee754_pow+0x134>
 800f4e6:	4632      	mov	r2, r6
 800f4e8:	463b      	mov	r3, r7
 800f4ea:	4610      	mov	r0, r2
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	f7f1 f883 	bl	80005f8 <__aeabi_dmul>
 800f4f2:	e7c5      	b.n	800f480 <__ieee754_pow+0xc0>
 800f4f4:	4b39      	ldr	r3, [pc, #228]	; (800f5dc <__ieee754_pow+0x21c>)
 800f4f6:	4599      	cmp	r9, r3
 800f4f8:	d10a      	bne.n	800f510 <__ieee754_pow+0x150>
 800f4fa:	2d00      	cmp	r5, #0
 800f4fc:	db08      	blt.n	800f510 <__ieee754_pow+0x150>
 800f4fe:	ec47 6b10 	vmov	d0, r6, r7
 800f502:	b011      	add	sp, #68	; 0x44
 800f504:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f508:	f000 bc68 	b.w	800fddc <__ieee754_sqrt>
 800f50c:	f04f 0b00 	mov.w	fp, #0
 800f510:	ec47 6b10 	vmov	d0, r6, r7
 800f514:	f000 fd12 	bl	800ff3c <fabs>
 800f518:	ec51 0b10 	vmov	r0, r1, d0
 800f51c:	f1ba 0f00 	cmp.w	sl, #0
 800f520:	d127      	bne.n	800f572 <__ieee754_pow+0x1b2>
 800f522:	b124      	cbz	r4, 800f52e <__ieee754_pow+0x16e>
 800f524:	4b2c      	ldr	r3, [pc, #176]	; (800f5d8 <__ieee754_pow+0x218>)
 800f526:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d121      	bne.n	800f572 <__ieee754_pow+0x1b2>
 800f52e:	f1b9 0f00 	cmp.w	r9, #0
 800f532:	da05      	bge.n	800f540 <__ieee754_pow+0x180>
 800f534:	4602      	mov	r2, r0
 800f536:	460b      	mov	r3, r1
 800f538:	2000      	movs	r0, #0
 800f53a:	4927      	ldr	r1, [pc, #156]	; (800f5d8 <__ieee754_pow+0x218>)
 800f53c:	f7f1 f986 	bl	800084c <__aeabi_ddiv>
 800f540:	2d00      	cmp	r5, #0
 800f542:	da9d      	bge.n	800f480 <__ieee754_pow+0xc0>
 800f544:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f548:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f54c:	ea54 030b 	orrs.w	r3, r4, fp
 800f550:	d108      	bne.n	800f564 <__ieee754_pow+0x1a4>
 800f552:	4602      	mov	r2, r0
 800f554:	460b      	mov	r3, r1
 800f556:	4610      	mov	r0, r2
 800f558:	4619      	mov	r1, r3
 800f55a:	f7f0 fe95 	bl	8000288 <__aeabi_dsub>
 800f55e:	4602      	mov	r2, r0
 800f560:	460b      	mov	r3, r1
 800f562:	e7ac      	b.n	800f4be <__ieee754_pow+0xfe>
 800f564:	f1bb 0f01 	cmp.w	fp, #1
 800f568:	d18a      	bne.n	800f480 <__ieee754_pow+0xc0>
 800f56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f56e:	4619      	mov	r1, r3
 800f570:	e786      	b.n	800f480 <__ieee754_pow+0xc0>
 800f572:	0fed      	lsrs	r5, r5, #31
 800f574:	1e6b      	subs	r3, r5, #1
 800f576:	930d      	str	r3, [sp, #52]	; 0x34
 800f578:	ea5b 0303 	orrs.w	r3, fp, r3
 800f57c:	d102      	bne.n	800f584 <__ieee754_pow+0x1c4>
 800f57e:	4632      	mov	r2, r6
 800f580:	463b      	mov	r3, r7
 800f582:	e7e8      	b.n	800f556 <__ieee754_pow+0x196>
 800f584:	4b16      	ldr	r3, [pc, #88]	; (800f5e0 <__ieee754_pow+0x220>)
 800f586:	4598      	cmp	r8, r3
 800f588:	f340 80fe 	ble.w	800f788 <__ieee754_pow+0x3c8>
 800f58c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f590:	4598      	cmp	r8, r3
 800f592:	dd0a      	ble.n	800f5aa <__ieee754_pow+0x1ea>
 800f594:	4b0f      	ldr	r3, [pc, #60]	; (800f5d4 <__ieee754_pow+0x214>)
 800f596:	429c      	cmp	r4, r3
 800f598:	dc0d      	bgt.n	800f5b6 <__ieee754_pow+0x1f6>
 800f59a:	f1b9 0f00 	cmp.w	r9, #0
 800f59e:	f6bf af6d 	bge.w	800f47c <__ieee754_pow+0xbc>
 800f5a2:	a307      	add	r3, pc, #28	; (adr r3, 800f5c0 <__ieee754_pow+0x200>)
 800f5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a8:	e79f      	b.n	800f4ea <__ieee754_pow+0x12a>
 800f5aa:	4b0e      	ldr	r3, [pc, #56]	; (800f5e4 <__ieee754_pow+0x224>)
 800f5ac:	429c      	cmp	r4, r3
 800f5ae:	ddf4      	ble.n	800f59a <__ieee754_pow+0x1da>
 800f5b0:	4b09      	ldr	r3, [pc, #36]	; (800f5d8 <__ieee754_pow+0x218>)
 800f5b2:	429c      	cmp	r4, r3
 800f5b4:	dd18      	ble.n	800f5e8 <__ieee754_pow+0x228>
 800f5b6:	f1b9 0f00 	cmp.w	r9, #0
 800f5ba:	dcf2      	bgt.n	800f5a2 <__ieee754_pow+0x1e2>
 800f5bc:	e75e      	b.n	800f47c <__ieee754_pow+0xbc>
 800f5be:	bf00      	nop
 800f5c0:	8800759c 	.word	0x8800759c
 800f5c4:	7e37e43c 	.word	0x7e37e43c
 800f5c8:	7ff00000 	.word	0x7ff00000
 800f5cc:	08010761 	.word	0x08010761
 800f5d0:	433fffff 	.word	0x433fffff
 800f5d4:	3fefffff 	.word	0x3fefffff
 800f5d8:	3ff00000 	.word	0x3ff00000
 800f5dc:	3fe00000 	.word	0x3fe00000
 800f5e0:	41e00000 	.word	0x41e00000
 800f5e4:	3feffffe 	.word	0x3feffffe
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	4b63      	ldr	r3, [pc, #396]	; (800f778 <__ieee754_pow+0x3b8>)
 800f5ec:	f7f0 fe4c 	bl	8000288 <__aeabi_dsub>
 800f5f0:	a355      	add	r3, pc, #340	; (adr r3, 800f748 <__ieee754_pow+0x388>)
 800f5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	460d      	mov	r5, r1
 800f5fa:	f7f0 fffd 	bl	80005f8 <__aeabi_dmul>
 800f5fe:	a354      	add	r3, pc, #336	; (adr r3, 800f750 <__ieee754_pow+0x390>)
 800f600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f604:	4606      	mov	r6, r0
 800f606:	460f      	mov	r7, r1
 800f608:	4620      	mov	r0, r4
 800f60a:	4629      	mov	r1, r5
 800f60c:	f7f0 fff4 	bl	80005f8 <__aeabi_dmul>
 800f610:	2200      	movs	r2, #0
 800f612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f616:	4b59      	ldr	r3, [pc, #356]	; (800f77c <__ieee754_pow+0x3bc>)
 800f618:	4620      	mov	r0, r4
 800f61a:	4629      	mov	r1, r5
 800f61c:	f7f0 ffec 	bl	80005f8 <__aeabi_dmul>
 800f620:	4602      	mov	r2, r0
 800f622:	460b      	mov	r3, r1
 800f624:	a14c      	add	r1, pc, #304	; (adr r1, 800f758 <__ieee754_pow+0x398>)
 800f626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f62a:	f7f0 fe2d 	bl	8000288 <__aeabi_dsub>
 800f62e:	4622      	mov	r2, r4
 800f630:	462b      	mov	r3, r5
 800f632:	f7f0 ffe1 	bl	80005f8 <__aeabi_dmul>
 800f636:	4602      	mov	r2, r0
 800f638:	460b      	mov	r3, r1
 800f63a:	2000      	movs	r0, #0
 800f63c:	4950      	ldr	r1, [pc, #320]	; (800f780 <__ieee754_pow+0x3c0>)
 800f63e:	f7f0 fe23 	bl	8000288 <__aeabi_dsub>
 800f642:	4622      	mov	r2, r4
 800f644:	462b      	mov	r3, r5
 800f646:	4680      	mov	r8, r0
 800f648:	4689      	mov	r9, r1
 800f64a:	4620      	mov	r0, r4
 800f64c:	4629      	mov	r1, r5
 800f64e:	f7f0 ffd3 	bl	80005f8 <__aeabi_dmul>
 800f652:	4602      	mov	r2, r0
 800f654:	460b      	mov	r3, r1
 800f656:	4640      	mov	r0, r8
 800f658:	4649      	mov	r1, r9
 800f65a:	f7f0 ffcd 	bl	80005f8 <__aeabi_dmul>
 800f65e:	a340      	add	r3, pc, #256	; (adr r3, 800f760 <__ieee754_pow+0x3a0>)
 800f660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f664:	f7f0 ffc8 	bl	80005f8 <__aeabi_dmul>
 800f668:	4602      	mov	r2, r0
 800f66a:	460b      	mov	r3, r1
 800f66c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f670:	f7f0 fe0a 	bl	8000288 <__aeabi_dsub>
 800f674:	4602      	mov	r2, r0
 800f676:	460b      	mov	r3, r1
 800f678:	4604      	mov	r4, r0
 800f67a:	460d      	mov	r5, r1
 800f67c:	4630      	mov	r0, r6
 800f67e:	4639      	mov	r1, r7
 800f680:	f7f0 fe04 	bl	800028c <__adddf3>
 800f684:	2000      	movs	r0, #0
 800f686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f68a:	4632      	mov	r2, r6
 800f68c:	463b      	mov	r3, r7
 800f68e:	f7f0 fdfb 	bl	8000288 <__aeabi_dsub>
 800f692:	4602      	mov	r2, r0
 800f694:	460b      	mov	r3, r1
 800f696:	4620      	mov	r0, r4
 800f698:	4629      	mov	r1, r5
 800f69a:	f7f0 fdf5 	bl	8000288 <__aeabi_dsub>
 800f69e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6a0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	4606      	mov	r6, r0
 800f6a8:	460f      	mov	r7, r1
 800f6aa:	f040 81eb 	bne.w	800fa84 <__ieee754_pow+0x6c4>
 800f6ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f768 <__ieee754_pow+0x3a8>
 800f6b2:	e9dd 4500 	ldrd	r4, r5, [sp]
 800f6b6:	2400      	movs	r4, #0
 800f6b8:	4622      	mov	r2, r4
 800f6ba:	462b      	mov	r3, r5
 800f6bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6c4:	f7f0 fde0 	bl	8000288 <__aeabi_dsub>
 800f6c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6cc:	f7f0 ff94 	bl	80005f8 <__aeabi_dmul>
 800f6d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6d4:	4680      	mov	r8, r0
 800f6d6:	4689      	mov	r9, r1
 800f6d8:	4630      	mov	r0, r6
 800f6da:	4639      	mov	r1, r7
 800f6dc:	f7f0 ff8c 	bl	80005f8 <__aeabi_dmul>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	4640      	mov	r0, r8
 800f6e6:	4649      	mov	r1, r9
 800f6e8:	f7f0 fdd0 	bl	800028c <__adddf3>
 800f6ec:	4622      	mov	r2, r4
 800f6ee:	462b      	mov	r3, r5
 800f6f0:	4680      	mov	r8, r0
 800f6f2:	4689      	mov	r9, r1
 800f6f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6f8:	f7f0 ff7e 	bl	80005f8 <__aeabi_dmul>
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	4604      	mov	r4, r0
 800f700:	460d      	mov	r5, r1
 800f702:	4602      	mov	r2, r0
 800f704:	4649      	mov	r1, r9
 800f706:	4640      	mov	r0, r8
 800f708:	e9cd 4500 	strd	r4, r5, [sp]
 800f70c:	f7f0 fdbe 	bl	800028c <__adddf3>
 800f710:	4b1c      	ldr	r3, [pc, #112]	; (800f784 <__ieee754_pow+0x3c4>)
 800f712:	4299      	cmp	r1, r3
 800f714:	4606      	mov	r6, r0
 800f716:	460f      	mov	r7, r1
 800f718:	468b      	mov	fp, r1
 800f71a:	f340 82f7 	ble.w	800fd0c <__ieee754_pow+0x94c>
 800f71e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f722:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f726:	4303      	orrs	r3, r0
 800f728:	f000 81ea 	beq.w	800fb00 <__ieee754_pow+0x740>
 800f72c:	a310      	add	r3, pc, #64	; (adr r3, 800f770 <__ieee754_pow+0x3b0>)
 800f72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f736:	f7f0 ff5f 	bl	80005f8 <__aeabi_dmul>
 800f73a:	a30d      	add	r3, pc, #52	; (adr r3, 800f770 <__ieee754_pow+0x3b0>)
 800f73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f740:	e6d5      	b.n	800f4ee <__ieee754_pow+0x12e>
 800f742:	bf00      	nop
 800f744:	f3af 8000 	nop.w
 800f748:	60000000 	.word	0x60000000
 800f74c:	3ff71547 	.word	0x3ff71547
 800f750:	f85ddf44 	.word	0xf85ddf44
 800f754:	3e54ae0b 	.word	0x3e54ae0b
 800f758:	55555555 	.word	0x55555555
 800f75c:	3fd55555 	.word	0x3fd55555
 800f760:	652b82fe 	.word	0x652b82fe
 800f764:	3ff71547 	.word	0x3ff71547
 800f768:	00000000 	.word	0x00000000
 800f76c:	bff00000 	.word	0xbff00000
 800f770:	8800759c 	.word	0x8800759c
 800f774:	7e37e43c 	.word	0x7e37e43c
 800f778:	3ff00000 	.word	0x3ff00000
 800f77c:	3fd00000 	.word	0x3fd00000
 800f780:	3fe00000 	.word	0x3fe00000
 800f784:	408fffff 	.word	0x408fffff
 800f788:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800f78c:	f04f 0200 	mov.w	r2, #0
 800f790:	da05      	bge.n	800f79e <__ieee754_pow+0x3de>
 800f792:	4bd3      	ldr	r3, [pc, #844]	; (800fae0 <__ieee754_pow+0x720>)
 800f794:	f7f0 ff30 	bl	80005f8 <__aeabi_dmul>
 800f798:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f79c:	460c      	mov	r4, r1
 800f79e:	1523      	asrs	r3, r4, #20
 800f7a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f7a4:	4413      	add	r3, r2
 800f7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7a8:	4bce      	ldr	r3, [pc, #824]	; (800fae4 <__ieee754_pow+0x724>)
 800f7aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f7ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f7b2:	429c      	cmp	r4, r3
 800f7b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f7b8:	dd08      	ble.n	800f7cc <__ieee754_pow+0x40c>
 800f7ba:	4bcb      	ldr	r3, [pc, #812]	; (800fae8 <__ieee754_pow+0x728>)
 800f7bc:	429c      	cmp	r4, r3
 800f7be:	f340 815e 	ble.w	800fa7e <__ieee754_pow+0x6be>
 800f7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f7cc:	f04f 0a00 	mov.w	sl, #0
 800f7d0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f7d4:	930c      	str	r3, [sp, #48]	; 0x30
 800f7d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f7d8:	4bc4      	ldr	r3, [pc, #784]	; (800faec <__ieee754_pow+0x72c>)
 800f7da:	4413      	add	r3, r2
 800f7dc:	ed93 7b00 	vldr	d7, [r3]
 800f7e0:	4629      	mov	r1, r5
 800f7e2:	ec53 2b17 	vmov	r2, r3, d7
 800f7e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f7ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f7ee:	f7f0 fd4b 	bl	8000288 <__aeabi_dsub>
 800f7f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f7f6:	4606      	mov	r6, r0
 800f7f8:	460f      	mov	r7, r1
 800f7fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f7fe:	f7f0 fd45 	bl	800028c <__adddf3>
 800f802:	4602      	mov	r2, r0
 800f804:	460b      	mov	r3, r1
 800f806:	2000      	movs	r0, #0
 800f808:	49b9      	ldr	r1, [pc, #740]	; (800faf0 <__ieee754_pow+0x730>)
 800f80a:	f7f1 f81f 	bl	800084c <__aeabi_ddiv>
 800f80e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f812:	4602      	mov	r2, r0
 800f814:	460b      	mov	r3, r1
 800f816:	4630      	mov	r0, r6
 800f818:	4639      	mov	r1, r7
 800f81a:	f7f0 feed 	bl	80005f8 <__aeabi_dmul>
 800f81e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f822:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f826:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f82a:	2300      	movs	r3, #0
 800f82c:	9302      	str	r3, [sp, #8]
 800f82e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f832:	106d      	asrs	r5, r5, #1
 800f834:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f838:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f83c:	2200      	movs	r2, #0
 800f83e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f842:	4640      	mov	r0, r8
 800f844:	4649      	mov	r1, r9
 800f846:	4614      	mov	r4, r2
 800f848:	461d      	mov	r5, r3
 800f84a:	f7f0 fed5 	bl	80005f8 <__aeabi_dmul>
 800f84e:	4602      	mov	r2, r0
 800f850:	460b      	mov	r3, r1
 800f852:	4630      	mov	r0, r6
 800f854:	4639      	mov	r1, r7
 800f856:	f7f0 fd17 	bl	8000288 <__aeabi_dsub>
 800f85a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f85e:	4606      	mov	r6, r0
 800f860:	460f      	mov	r7, r1
 800f862:	4620      	mov	r0, r4
 800f864:	4629      	mov	r1, r5
 800f866:	f7f0 fd0f 	bl	8000288 <__aeabi_dsub>
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f872:	f7f0 fd09 	bl	8000288 <__aeabi_dsub>
 800f876:	4642      	mov	r2, r8
 800f878:	464b      	mov	r3, r9
 800f87a:	f7f0 febd 	bl	80005f8 <__aeabi_dmul>
 800f87e:	4602      	mov	r2, r0
 800f880:	460b      	mov	r3, r1
 800f882:	4630      	mov	r0, r6
 800f884:	4639      	mov	r1, r7
 800f886:	f7f0 fcff 	bl	8000288 <__aeabi_dsub>
 800f88a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f88e:	f7f0 feb3 	bl	80005f8 <__aeabi_dmul>
 800f892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f896:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f89a:	4610      	mov	r0, r2
 800f89c:	4619      	mov	r1, r3
 800f89e:	f7f0 feab 	bl	80005f8 <__aeabi_dmul>
 800f8a2:	a37b      	add	r3, pc, #492	; (adr r3, 800fa90 <__ieee754_pow+0x6d0>)
 800f8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a8:	4604      	mov	r4, r0
 800f8aa:	460d      	mov	r5, r1
 800f8ac:	f7f0 fea4 	bl	80005f8 <__aeabi_dmul>
 800f8b0:	a379      	add	r3, pc, #484	; (adr r3, 800fa98 <__ieee754_pow+0x6d8>)
 800f8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b6:	f7f0 fce9 	bl	800028c <__adddf3>
 800f8ba:	4622      	mov	r2, r4
 800f8bc:	462b      	mov	r3, r5
 800f8be:	f7f0 fe9b 	bl	80005f8 <__aeabi_dmul>
 800f8c2:	a377      	add	r3, pc, #476	; (adr r3, 800faa0 <__ieee754_pow+0x6e0>)
 800f8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c8:	f7f0 fce0 	bl	800028c <__adddf3>
 800f8cc:	4622      	mov	r2, r4
 800f8ce:	462b      	mov	r3, r5
 800f8d0:	f7f0 fe92 	bl	80005f8 <__aeabi_dmul>
 800f8d4:	a374      	add	r3, pc, #464	; (adr r3, 800faa8 <__ieee754_pow+0x6e8>)
 800f8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8da:	f7f0 fcd7 	bl	800028c <__adddf3>
 800f8de:	4622      	mov	r2, r4
 800f8e0:	462b      	mov	r3, r5
 800f8e2:	f7f0 fe89 	bl	80005f8 <__aeabi_dmul>
 800f8e6:	a372      	add	r3, pc, #456	; (adr r3, 800fab0 <__ieee754_pow+0x6f0>)
 800f8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ec:	f7f0 fcce 	bl	800028c <__adddf3>
 800f8f0:	4622      	mov	r2, r4
 800f8f2:	462b      	mov	r3, r5
 800f8f4:	f7f0 fe80 	bl	80005f8 <__aeabi_dmul>
 800f8f8:	a36f      	add	r3, pc, #444	; (adr r3, 800fab8 <__ieee754_pow+0x6f8>)
 800f8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fe:	f7f0 fcc5 	bl	800028c <__adddf3>
 800f902:	4622      	mov	r2, r4
 800f904:	4606      	mov	r6, r0
 800f906:	460f      	mov	r7, r1
 800f908:	462b      	mov	r3, r5
 800f90a:	4620      	mov	r0, r4
 800f90c:	4629      	mov	r1, r5
 800f90e:	f7f0 fe73 	bl	80005f8 <__aeabi_dmul>
 800f912:	4602      	mov	r2, r0
 800f914:	460b      	mov	r3, r1
 800f916:	4630      	mov	r0, r6
 800f918:	4639      	mov	r1, r7
 800f91a:	f7f0 fe6d 	bl	80005f8 <__aeabi_dmul>
 800f91e:	4642      	mov	r2, r8
 800f920:	4604      	mov	r4, r0
 800f922:	460d      	mov	r5, r1
 800f924:	464b      	mov	r3, r9
 800f926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f92a:	f7f0 fcaf 	bl	800028c <__adddf3>
 800f92e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f932:	f7f0 fe61 	bl	80005f8 <__aeabi_dmul>
 800f936:	4622      	mov	r2, r4
 800f938:	462b      	mov	r3, r5
 800f93a:	f7f0 fca7 	bl	800028c <__adddf3>
 800f93e:	4642      	mov	r2, r8
 800f940:	4606      	mov	r6, r0
 800f942:	460f      	mov	r7, r1
 800f944:	464b      	mov	r3, r9
 800f946:	4640      	mov	r0, r8
 800f948:	4649      	mov	r1, r9
 800f94a:	f7f0 fe55 	bl	80005f8 <__aeabi_dmul>
 800f94e:	2200      	movs	r2, #0
 800f950:	4b68      	ldr	r3, [pc, #416]	; (800faf4 <__ieee754_pow+0x734>)
 800f952:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f956:	f7f0 fc99 	bl	800028c <__adddf3>
 800f95a:	4632      	mov	r2, r6
 800f95c:	463b      	mov	r3, r7
 800f95e:	f7f0 fc95 	bl	800028c <__adddf3>
 800f962:	9802      	ldr	r0, [sp, #8]
 800f964:	460d      	mov	r5, r1
 800f966:	4604      	mov	r4, r0
 800f968:	4602      	mov	r2, r0
 800f96a:	460b      	mov	r3, r1
 800f96c:	4640      	mov	r0, r8
 800f96e:	4649      	mov	r1, r9
 800f970:	f7f0 fe42 	bl	80005f8 <__aeabi_dmul>
 800f974:	2200      	movs	r2, #0
 800f976:	4680      	mov	r8, r0
 800f978:	4689      	mov	r9, r1
 800f97a:	4b5e      	ldr	r3, [pc, #376]	; (800faf4 <__ieee754_pow+0x734>)
 800f97c:	4620      	mov	r0, r4
 800f97e:	4629      	mov	r1, r5
 800f980:	f7f0 fc82 	bl	8000288 <__aeabi_dsub>
 800f984:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f988:	f7f0 fc7e 	bl	8000288 <__aeabi_dsub>
 800f98c:	4602      	mov	r2, r0
 800f98e:	460b      	mov	r3, r1
 800f990:	4630      	mov	r0, r6
 800f992:	4639      	mov	r1, r7
 800f994:	f7f0 fc78 	bl	8000288 <__aeabi_dsub>
 800f998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f99c:	f7f0 fe2c 	bl	80005f8 <__aeabi_dmul>
 800f9a0:	4622      	mov	r2, r4
 800f9a2:	4606      	mov	r6, r0
 800f9a4:	460f      	mov	r7, r1
 800f9a6:	462b      	mov	r3, r5
 800f9a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f9ac:	f7f0 fe24 	bl	80005f8 <__aeabi_dmul>
 800f9b0:	4602      	mov	r2, r0
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	4639      	mov	r1, r7
 800f9b8:	f7f0 fc68 	bl	800028c <__adddf3>
 800f9bc:	4606      	mov	r6, r0
 800f9be:	460f      	mov	r7, r1
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	4640      	mov	r0, r8
 800f9c6:	4649      	mov	r1, r9
 800f9c8:	f7f0 fc60 	bl	800028c <__adddf3>
 800f9cc:	9802      	ldr	r0, [sp, #8]
 800f9ce:	a33c      	add	r3, pc, #240	; (adr r3, 800fac0 <__ieee754_pow+0x700>)
 800f9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	460d      	mov	r5, r1
 800f9d8:	f7f0 fe0e 	bl	80005f8 <__aeabi_dmul>
 800f9dc:	4642      	mov	r2, r8
 800f9de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f9e2:	464b      	mov	r3, r9
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	4629      	mov	r1, r5
 800f9e8:	f7f0 fc4e 	bl	8000288 <__aeabi_dsub>
 800f9ec:	4602      	mov	r2, r0
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	4630      	mov	r0, r6
 800f9f2:	4639      	mov	r1, r7
 800f9f4:	f7f0 fc48 	bl	8000288 <__aeabi_dsub>
 800f9f8:	a333      	add	r3, pc, #204	; (adr r3, 800fac8 <__ieee754_pow+0x708>)
 800f9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fe:	f7f0 fdfb 	bl	80005f8 <__aeabi_dmul>
 800fa02:	a333      	add	r3, pc, #204	; (adr r3, 800fad0 <__ieee754_pow+0x710>)
 800fa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa08:	4606      	mov	r6, r0
 800fa0a:	460f      	mov	r7, r1
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	4629      	mov	r1, r5
 800fa10:	f7f0 fdf2 	bl	80005f8 <__aeabi_dmul>
 800fa14:	4602      	mov	r2, r0
 800fa16:	460b      	mov	r3, r1
 800fa18:	4630      	mov	r0, r6
 800fa1a:	4639      	mov	r1, r7
 800fa1c:	f7f0 fc36 	bl	800028c <__adddf3>
 800fa20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa22:	4b35      	ldr	r3, [pc, #212]	; (800faf8 <__ieee754_pow+0x738>)
 800fa24:	4413      	add	r3, r2
 800fa26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2a:	f7f0 fc2f 	bl	800028c <__adddf3>
 800fa2e:	4604      	mov	r4, r0
 800fa30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa32:	460d      	mov	r5, r1
 800fa34:	f7f0 fd76 	bl	8000524 <__aeabi_i2d>
 800fa38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fa3a:	4b30      	ldr	r3, [pc, #192]	; (800fafc <__ieee754_pow+0x73c>)
 800fa3c:	4413      	add	r3, r2
 800fa3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa42:	4606      	mov	r6, r0
 800fa44:	460f      	mov	r7, r1
 800fa46:	4622      	mov	r2, r4
 800fa48:	462b      	mov	r3, r5
 800fa4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fa4e:	f7f0 fc1d 	bl	800028c <__adddf3>
 800fa52:	4642      	mov	r2, r8
 800fa54:	464b      	mov	r3, r9
 800fa56:	f7f0 fc19 	bl	800028c <__adddf3>
 800fa5a:	4632      	mov	r2, r6
 800fa5c:	463b      	mov	r3, r7
 800fa5e:	f7f0 fc15 	bl	800028c <__adddf3>
 800fa62:	9802      	ldr	r0, [sp, #8]
 800fa64:	4632      	mov	r2, r6
 800fa66:	463b      	mov	r3, r7
 800fa68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa6c:	f7f0 fc0c 	bl	8000288 <__aeabi_dsub>
 800fa70:	4642      	mov	r2, r8
 800fa72:	464b      	mov	r3, r9
 800fa74:	f7f0 fc08 	bl	8000288 <__aeabi_dsub>
 800fa78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa7c:	e607      	b.n	800f68e <__ieee754_pow+0x2ce>
 800fa7e:	f04f 0a01 	mov.w	sl, #1
 800fa82:	e6a5      	b.n	800f7d0 <__ieee754_pow+0x410>
 800fa84:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800fad8 <__ieee754_pow+0x718>
 800fa88:	e613      	b.n	800f6b2 <__ieee754_pow+0x2f2>
 800fa8a:	bf00      	nop
 800fa8c:	f3af 8000 	nop.w
 800fa90:	4a454eef 	.word	0x4a454eef
 800fa94:	3fca7e28 	.word	0x3fca7e28
 800fa98:	93c9db65 	.word	0x93c9db65
 800fa9c:	3fcd864a 	.word	0x3fcd864a
 800faa0:	a91d4101 	.word	0xa91d4101
 800faa4:	3fd17460 	.word	0x3fd17460
 800faa8:	518f264d 	.word	0x518f264d
 800faac:	3fd55555 	.word	0x3fd55555
 800fab0:	db6fabff 	.word	0xdb6fabff
 800fab4:	3fdb6db6 	.word	0x3fdb6db6
 800fab8:	33333303 	.word	0x33333303
 800fabc:	3fe33333 	.word	0x3fe33333
 800fac0:	e0000000 	.word	0xe0000000
 800fac4:	3feec709 	.word	0x3feec709
 800fac8:	dc3a03fd 	.word	0xdc3a03fd
 800facc:	3feec709 	.word	0x3feec709
 800fad0:	145b01f5 	.word	0x145b01f5
 800fad4:	be3e2fe0 	.word	0xbe3e2fe0
 800fad8:	00000000 	.word	0x00000000
 800fadc:	3ff00000 	.word	0x3ff00000
 800fae0:	43400000 	.word	0x43400000
 800fae4:	0003988e 	.word	0x0003988e
 800fae8:	000bb679 	.word	0x000bb679
 800faec:	08010878 	.word	0x08010878
 800faf0:	3ff00000 	.word	0x3ff00000
 800faf4:	40080000 	.word	0x40080000
 800faf8:	08010898 	.word	0x08010898
 800fafc:	08010888 	.word	0x08010888
 800fb00:	a3b4      	add	r3, pc, #720	; (adr r3, 800fdd4 <__ieee754_pow+0xa14>)
 800fb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb06:	4640      	mov	r0, r8
 800fb08:	4649      	mov	r1, r9
 800fb0a:	f7f0 fbbf 	bl	800028c <__adddf3>
 800fb0e:	4622      	mov	r2, r4
 800fb10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb14:	462b      	mov	r3, r5
 800fb16:	4630      	mov	r0, r6
 800fb18:	4639      	mov	r1, r7
 800fb1a:	f7f0 fbb5 	bl	8000288 <__aeabi_dsub>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb26:	f7f0 fff7 	bl	8000b18 <__aeabi_dcmpgt>
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	f47f adfe 	bne.w	800f72c <__ieee754_pow+0x36c>
 800fb30:	4aa3      	ldr	r2, [pc, #652]	; (800fdc0 <__ieee754_pow+0xa00>)
 800fb32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fb36:	4293      	cmp	r3, r2
 800fb38:	f340 810a 	ble.w	800fd50 <__ieee754_pow+0x990>
 800fb3c:	151b      	asrs	r3, r3, #20
 800fb3e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fb42:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fb46:	fa4a f303 	asr.w	r3, sl, r3
 800fb4a:	445b      	add	r3, fp
 800fb4c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fb50:	4e9c      	ldr	r6, [pc, #624]	; (800fdc4 <__ieee754_pow+0xa04>)
 800fb52:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fb56:	4116      	asrs	r6, r2
 800fb58:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fb5c:	2000      	movs	r0, #0
 800fb5e:	ea23 0106 	bic.w	r1, r3, r6
 800fb62:	f1c2 0214 	rsb	r2, r2, #20
 800fb66:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fb6a:	fa4a fa02 	asr.w	sl, sl, r2
 800fb6e:	f1bb 0f00 	cmp.w	fp, #0
 800fb72:	4602      	mov	r2, r0
 800fb74:	460b      	mov	r3, r1
 800fb76:	4620      	mov	r0, r4
 800fb78:	4629      	mov	r1, r5
 800fb7a:	bfb8      	it	lt
 800fb7c:	f1ca 0a00 	rsblt	sl, sl, #0
 800fb80:	f7f0 fb82 	bl	8000288 <__aeabi_dsub>
 800fb84:	e9cd 0100 	strd	r0, r1, [sp]
 800fb88:	4642      	mov	r2, r8
 800fb8a:	464b      	mov	r3, r9
 800fb8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb90:	f7f0 fb7c 	bl	800028c <__adddf3>
 800fb94:	2000      	movs	r0, #0
 800fb96:	a378      	add	r3, pc, #480	; (adr r3, 800fd78 <__ieee754_pow+0x9b8>)
 800fb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9c:	4604      	mov	r4, r0
 800fb9e:	460d      	mov	r5, r1
 800fba0:	f7f0 fd2a 	bl	80005f8 <__aeabi_dmul>
 800fba4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fba8:	4606      	mov	r6, r0
 800fbaa:	460f      	mov	r7, r1
 800fbac:	4620      	mov	r0, r4
 800fbae:	4629      	mov	r1, r5
 800fbb0:	f7f0 fb6a 	bl	8000288 <__aeabi_dsub>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	4640      	mov	r0, r8
 800fbba:	4649      	mov	r1, r9
 800fbbc:	f7f0 fb64 	bl	8000288 <__aeabi_dsub>
 800fbc0:	a36f      	add	r3, pc, #444	; (adr r3, 800fd80 <__ieee754_pow+0x9c0>)
 800fbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc6:	f7f0 fd17 	bl	80005f8 <__aeabi_dmul>
 800fbca:	a36f      	add	r3, pc, #444	; (adr r3, 800fd88 <__ieee754_pow+0x9c8>)
 800fbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd0:	4680      	mov	r8, r0
 800fbd2:	4689      	mov	r9, r1
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	4629      	mov	r1, r5
 800fbd8:	f7f0 fd0e 	bl	80005f8 <__aeabi_dmul>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	460b      	mov	r3, r1
 800fbe0:	4640      	mov	r0, r8
 800fbe2:	4649      	mov	r1, r9
 800fbe4:	f7f0 fb52 	bl	800028c <__adddf3>
 800fbe8:	4604      	mov	r4, r0
 800fbea:	460d      	mov	r5, r1
 800fbec:	4602      	mov	r2, r0
 800fbee:	460b      	mov	r3, r1
 800fbf0:	4630      	mov	r0, r6
 800fbf2:	4639      	mov	r1, r7
 800fbf4:	f7f0 fb4a 	bl	800028c <__adddf3>
 800fbf8:	4632      	mov	r2, r6
 800fbfa:	463b      	mov	r3, r7
 800fbfc:	4680      	mov	r8, r0
 800fbfe:	4689      	mov	r9, r1
 800fc00:	f7f0 fb42 	bl	8000288 <__aeabi_dsub>
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	4620      	mov	r0, r4
 800fc0a:	4629      	mov	r1, r5
 800fc0c:	f7f0 fb3c 	bl	8000288 <__aeabi_dsub>
 800fc10:	4642      	mov	r2, r8
 800fc12:	4606      	mov	r6, r0
 800fc14:	460f      	mov	r7, r1
 800fc16:	464b      	mov	r3, r9
 800fc18:	4640      	mov	r0, r8
 800fc1a:	4649      	mov	r1, r9
 800fc1c:	f7f0 fcec 	bl	80005f8 <__aeabi_dmul>
 800fc20:	a35b      	add	r3, pc, #364	; (adr r3, 800fd90 <__ieee754_pow+0x9d0>)
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	4604      	mov	r4, r0
 800fc28:	460d      	mov	r5, r1
 800fc2a:	f7f0 fce5 	bl	80005f8 <__aeabi_dmul>
 800fc2e:	a35a      	add	r3, pc, #360	; (adr r3, 800fd98 <__ieee754_pow+0x9d8>)
 800fc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc34:	f7f0 fb28 	bl	8000288 <__aeabi_dsub>
 800fc38:	4622      	mov	r2, r4
 800fc3a:	462b      	mov	r3, r5
 800fc3c:	f7f0 fcdc 	bl	80005f8 <__aeabi_dmul>
 800fc40:	a357      	add	r3, pc, #348	; (adr r3, 800fda0 <__ieee754_pow+0x9e0>)
 800fc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc46:	f7f0 fb21 	bl	800028c <__adddf3>
 800fc4a:	4622      	mov	r2, r4
 800fc4c:	462b      	mov	r3, r5
 800fc4e:	f7f0 fcd3 	bl	80005f8 <__aeabi_dmul>
 800fc52:	a355      	add	r3, pc, #340	; (adr r3, 800fda8 <__ieee754_pow+0x9e8>)
 800fc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc58:	f7f0 fb16 	bl	8000288 <__aeabi_dsub>
 800fc5c:	4622      	mov	r2, r4
 800fc5e:	462b      	mov	r3, r5
 800fc60:	f7f0 fcca 	bl	80005f8 <__aeabi_dmul>
 800fc64:	a352      	add	r3, pc, #328	; (adr r3, 800fdb0 <__ieee754_pow+0x9f0>)
 800fc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6a:	f7f0 fb0f 	bl	800028c <__adddf3>
 800fc6e:	4622      	mov	r2, r4
 800fc70:	462b      	mov	r3, r5
 800fc72:	f7f0 fcc1 	bl	80005f8 <__aeabi_dmul>
 800fc76:	4602      	mov	r2, r0
 800fc78:	460b      	mov	r3, r1
 800fc7a:	4640      	mov	r0, r8
 800fc7c:	4649      	mov	r1, r9
 800fc7e:	f7f0 fb03 	bl	8000288 <__aeabi_dsub>
 800fc82:	4604      	mov	r4, r0
 800fc84:	460d      	mov	r5, r1
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	4640      	mov	r0, r8
 800fc8c:	4649      	mov	r1, r9
 800fc8e:	f7f0 fcb3 	bl	80005f8 <__aeabi_dmul>
 800fc92:	2200      	movs	r2, #0
 800fc94:	e9cd 0100 	strd	r0, r1, [sp]
 800fc98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	4629      	mov	r1, r5
 800fca0:	f7f0 faf2 	bl	8000288 <__aeabi_dsub>
 800fca4:	4602      	mov	r2, r0
 800fca6:	460b      	mov	r3, r1
 800fca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcac:	f7f0 fdce 	bl	800084c <__aeabi_ddiv>
 800fcb0:	4632      	mov	r2, r6
 800fcb2:	4604      	mov	r4, r0
 800fcb4:	460d      	mov	r5, r1
 800fcb6:	463b      	mov	r3, r7
 800fcb8:	4640      	mov	r0, r8
 800fcba:	4649      	mov	r1, r9
 800fcbc:	f7f0 fc9c 	bl	80005f8 <__aeabi_dmul>
 800fcc0:	4632      	mov	r2, r6
 800fcc2:	463b      	mov	r3, r7
 800fcc4:	f7f0 fae2 	bl	800028c <__adddf3>
 800fcc8:	4602      	mov	r2, r0
 800fcca:	460b      	mov	r3, r1
 800fccc:	4620      	mov	r0, r4
 800fcce:	4629      	mov	r1, r5
 800fcd0:	f7f0 fada 	bl	8000288 <__aeabi_dsub>
 800fcd4:	4642      	mov	r2, r8
 800fcd6:	464b      	mov	r3, r9
 800fcd8:	f7f0 fad6 	bl	8000288 <__aeabi_dsub>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	2000      	movs	r0, #0
 800fce2:	4939      	ldr	r1, [pc, #228]	; (800fdc8 <__ieee754_pow+0xa08>)
 800fce4:	f7f0 fad0 	bl	8000288 <__aeabi_dsub>
 800fce8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800fcec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	460b      	mov	r3, r1
 800fcf4:	da2f      	bge.n	800fd56 <__ieee754_pow+0x996>
 800fcf6:	4650      	mov	r0, sl
 800fcf8:	ec43 2b10 	vmov	d0, r2, r3
 800fcfc:	f000 f9c0 	bl	8010080 <scalbn>
 800fd00:	ec51 0b10 	vmov	r0, r1, d0
 800fd04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd08:	f7ff bbf1 	b.w	800f4ee <__ieee754_pow+0x12e>
 800fd0c:	4b2f      	ldr	r3, [pc, #188]	; (800fdcc <__ieee754_pow+0xa0c>)
 800fd0e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800fd12:	429e      	cmp	r6, r3
 800fd14:	f77f af0c 	ble.w	800fb30 <__ieee754_pow+0x770>
 800fd18:	4b2d      	ldr	r3, [pc, #180]	; (800fdd0 <__ieee754_pow+0xa10>)
 800fd1a:	440b      	add	r3, r1
 800fd1c:	4303      	orrs	r3, r0
 800fd1e:	d00b      	beq.n	800fd38 <__ieee754_pow+0x978>
 800fd20:	a325      	add	r3, pc, #148	; (adr r3, 800fdb8 <__ieee754_pow+0x9f8>)
 800fd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd2a:	f7f0 fc65 	bl	80005f8 <__aeabi_dmul>
 800fd2e:	a322      	add	r3, pc, #136	; (adr r3, 800fdb8 <__ieee754_pow+0x9f8>)
 800fd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd34:	f7ff bbdb 	b.w	800f4ee <__ieee754_pow+0x12e>
 800fd38:	4622      	mov	r2, r4
 800fd3a:	462b      	mov	r3, r5
 800fd3c:	f7f0 faa4 	bl	8000288 <__aeabi_dsub>
 800fd40:	4642      	mov	r2, r8
 800fd42:	464b      	mov	r3, r9
 800fd44:	f7f0 fede 	bl	8000b04 <__aeabi_dcmpge>
 800fd48:	2800      	cmp	r0, #0
 800fd4a:	f43f aef1 	beq.w	800fb30 <__ieee754_pow+0x770>
 800fd4e:	e7e7      	b.n	800fd20 <__ieee754_pow+0x960>
 800fd50:	f04f 0a00 	mov.w	sl, #0
 800fd54:	e718      	b.n	800fb88 <__ieee754_pow+0x7c8>
 800fd56:	4621      	mov	r1, r4
 800fd58:	e7d4      	b.n	800fd04 <__ieee754_pow+0x944>
 800fd5a:	2000      	movs	r0, #0
 800fd5c:	491a      	ldr	r1, [pc, #104]	; (800fdc8 <__ieee754_pow+0xa08>)
 800fd5e:	f7ff bb8f 	b.w	800f480 <__ieee754_pow+0xc0>
 800fd62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd66:	f7ff bb8b 	b.w	800f480 <__ieee754_pow+0xc0>
 800fd6a:	4630      	mov	r0, r6
 800fd6c:	4639      	mov	r1, r7
 800fd6e:	f7ff bb87 	b.w	800f480 <__ieee754_pow+0xc0>
 800fd72:	4693      	mov	fp, r2
 800fd74:	f7ff bb98 	b.w	800f4a8 <__ieee754_pow+0xe8>
 800fd78:	00000000 	.word	0x00000000
 800fd7c:	3fe62e43 	.word	0x3fe62e43
 800fd80:	fefa39ef 	.word	0xfefa39ef
 800fd84:	3fe62e42 	.word	0x3fe62e42
 800fd88:	0ca86c39 	.word	0x0ca86c39
 800fd8c:	be205c61 	.word	0xbe205c61
 800fd90:	72bea4d0 	.word	0x72bea4d0
 800fd94:	3e663769 	.word	0x3e663769
 800fd98:	c5d26bf1 	.word	0xc5d26bf1
 800fd9c:	3ebbbd41 	.word	0x3ebbbd41
 800fda0:	af25de2c 	.word	0xaf25de2c
 800fda4:	3f11566a 	.word	0x3f11566a
 800fda8:	16bebd93 	.word	0x16bebd93
 800fdac:	3f66c16c 	.word	0x3f66c16c
 800fdb0:	5555553e 	.word	0x5555553e
 800fdb4:	3fc55555 	.word	0x3fc55555
 800fdb8:	c2f8f359 	.word	0xc2f8f359
 800fdbc:	01a56e1f 	.word	0x01a56e1f
 800fdc0:	3fe00000 	.word	0x3fe00000
 800fdc4:	000fffff 	.word	0x000fffff
 800fdc8:	3ff00000 	.word	0x3ff00000
 800fdcc:	4090cbff 	.word	0x4090cbff
 800fdd0:	3f6f3400 	.word	0x3f6f3400
 800fdd4:	652b82fe 	.word	0x652b82fe
 800fdd8:	3c971547 	.word	0x3c971547

0800fddc <__ieee754_sqrt>:
 800fddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde0:	4955      	ldr	r1, [pc, #340]	; (800ff38 <__ieee754_sqrt+0x15c>)
 800fde2:	ec55 4b10 	vmov	r4, r5, d0
 800fde6:	43a9      	bics	r1, r5
 800fde8:	462b      	mov	r3, r5
 800fdea:	462a      	mov	r2, r5
 800fdec:	d112      	bne.n	800fe14 <__ieee754_sqrt+0x38>
 800fdee:	ee10 2a10 	vmov	r2, s0
 800fdf2:	ee10 0a10 	vmov	r0, s0
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	f7f0 fbfe 	bl	80005f8 <__aeabi_dmul>
 800fdfc:	4602      	mov	r2, r0
 800fdfe:	460b      	mov	r3, r1
 800fe00:	4620      	mov	r0, r4
 800fe02:	4629      	mov	r1, r5
 800fe04:	f7f0 fa42 	bl	800028c <__adddf3>
 800fe08:	4604      	mov	r4, r0
 800fe0a:	460d      	mov	r5, r1
 800fe0c:	ec45 4b10 	vmov	d0, r4, r5
 800fe10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe14:	2d00      	cmp	r5, #0
 800fe16:	ee10 0a10 	vmov	r0, s0
 800fe1a:	4621      	mov	r1, r4
 800fe1c:	dc0f      	bgt.n	800fe3e <__ieee754_sqrt+0x62>
 800fe1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fe22:	4330      	orrs	r0, r6
 800fe24:	d0f2      	beq.n	800fe0c <__ieee754_sqrt+0x30>
 800fe26:	b155      	cbz	r5, 800fe3e <__ieee754_sqrt+0x62>
 800fe28:	ee10 2a10 	vmov	r2, s0
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	4629      	mov	r1, r5
 800fe30:	f7f0 fa2a 	bl	8000288 <__aeabi_dsub>
 800fe34:	4602      	mov	r2, r0
 800fe36:	460b      	mov	r3, r1
 800fe38:	f7f0 fd08 	bl	800084c <__aeabi_ddiv>
 800fe3c:	e7e4      	b.n	800fe08 <__ieee754_sqrt+0x2c>
 800fe3e:	151b      	asrs	r3, r3, #20
 800fe40:	d073      	beq.n	800ff2a <__ieee754_sqrt+0x14e>
 800fe42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fe46:	07dd      	lsls	r5, r3, #31
 800fe48:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800fe4c:	bf48      	it	mi
 800fe4e:	0fc8      	lsrmi	r0, r1, #31
 800fe50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800fe54:	bf44      	itt	mi
 800fe56:	0049      	lslmi	r1, r1, #1
 800fe58:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800fe5c:	2500      	movs	r5, #0
 800fe5e:	1058      	asrs	r0, r3, #1
 800fe60:	0fcb      	lsrs	r3, r1, #31
 800fe62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800fe66:	0049      	lsls	r1, r1, #1
 800fe68:	2316      	movs	r3, #22
 800fe6a:	462c      	mov	r4, r5
 800fe6c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800fe70:	19a7      	adds	r7, r4, r6
 800fe72:	4297      	cmp	r7, r2
 800fe74:	bfde      	ittt	le
 800fe76:	19bc      	addle	r4, r7, r6
 800fe78:	1bd2      	suble	r2, r2, r7
 800fe7a:	19ad      	addle	r5, r5, r6
 800fe7c:	0fcf      	lsrs	r7, r1, #31
 800fe7e:	3b01      	subs	r3, #1
 800fe80:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800fe84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fe88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fe8c:	d1f0      	bne.n	800fe70 <__ieee754_sqrt+0x94>
 800fe8e:	f04f 0c20 	mov.w	ip, #32
 800fe92:	469e      	mov	lr, r3
 800fe94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800fe98:	42a2      	cmp	r2, r4
 800fe9a:	eb06 070e 	add.w	r7, r6, lr
 800fe9e:	dc02      	bgt.n	800fea6 <__ieee754_sqrt+0xca>
 800fea0:	d112      	bne.n	800fec8 <__ieee754_sqrt+0xec>
 800fea2:	428f      	cmp	r7, r1
 800fea4:	d810      	bhi.n	800fec8 <__ieee754_sqrt+0xec>
 800fea6:	2f00      	cmp	r7, #0
 800fea8:	eb07 0e06 	add.w	lr, r7, r6
 800feac:	da42      	bge.n	800ff34 <__ieee754_sqrt+0x158>
 800feae:	f1be 0f00 	cmp.w	lr, #0
 800feb2:	db3f      	blt.n	800ff34 <__ieee754_sqrt+0x158>
 800feb4:	f104 0801 	add.w	r8, r4, #1
 800feb8:	1b12      	subs	r2, r2, r4
 800feba:	428f      	cmp	r7, r1
 800febc:	bf88      	it	hi
 800febe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800fec2:	1bc9      	subs	r1, r1, r7
 800fec4:	4433      	add	r3, r6
 800fec6:	4644      	mov	r4, r8
 800fec8:	0052      	lsls	r2, r2, #1
 800feca:	f1bc 0c01 	subs.w	ip, ip, #1
 800fece:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800fed2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800fed6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800feda:	d1dd      	bne.n	800fe98 <__ieee754_sqrt+0xbc>
 800fedc:	430a      	orrs	r2, r1
 800fede:	d006      	beq.n	800feee <__ieee754_sqrt+0x112>
 800fee0:	1c5c      	adds	r4, r3, #1
 800fee2:	bf13      	iteet	ne
 800fee4:	3301      	addne	r3, #1
 800fee6:	3501      	addeq	r5, #1
 800fee8:	4663      	moveq	r3, ip
 800feea:	f023 0301 	bicne.w	r3, r3, #1
 800feee:	106a      	asrs	r2, r5, #1
 800fef0:	085b      	lsrs	r3, r3, #1
 800fef2:	07e9      	lsls	r1, r5, #31
 800fef4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fef8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fefc:	bf48      	it	mi
 800fefe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ff02:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800ff06:	461c      	mov	r4, r3
 800ff08:	e780      	b.n	800fe0c <__ieee754_sqrt+0x30>
 800ff0a:	0aca      	lsrs	r2, r1, #11
 800ff0c:	3815      	subs	r0, #21
 800ff0e:	0549      	lsls	r1, r1, #21
 800ff10:	2a00      	cmp	r2, #0
 800ff12:	d0fa      	beq.n	800ff0a <__ieee754_sqrt+0x12e>
 800ff14:	02d6      	lsls	r6, r2, #11
 800ff16:	d50a      	bpl.n	800ff2e <__ieee754_sqrt+0x152>
 800ff18:	f1c3 0420 	rsb	r4, r3, #32
 800ff1c:	fa21 f404 	lsr.w	r4, r1, r4
 800ff20:	1e5d      	subs	r5, r3, #1
 800ff22:	4099      	lsls	r1, r3
 800ff24:	4322      	orrs	r2, r4
 800ff26:	1b43      	subs	r3, r0, r5
 800ff28:	e78b      	b.n	800fe42 <__ieee754_sqrt+0x66>
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	e7f0      	b.n	800ff10 <__ieee754_sqrt+0x134>
 800ff2e:	0052      	lsls	r2, r2, #1
 800ff30:	3301      	adds	r3, #1
 800ff32:	e7ef      	b.n	800ff14 <__ieee754_sqrt+0x138>
 800ff34:	46a0      	mov	r8, r4
 800ff36:	e7bf      	b.n	800feb8 <__ieee754_sqrt+0xdc>
 800ff38:	7ff00000 	.word	0x7ff00000

0800ff3c <fabs>:
 800ff3c:	ec51 0b10 	vmov	r0, r1, d0
 800ff40:	ee10 2a10 	vmov	r2, s0
 800ff44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ff48:	ec43 2b10 	vmov	d0, r2, r3
 800ff4c:	4770      	bx	lr

0800ff4e <finite>:
 800ff4e:	ee10 3a90 	vmov	r3, s1
 800ff52:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ff56:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ff5a:	0fc0      	lsrs	r0, r0, #31
 800ff5c:	4770      	bx	lr

0800ff5e <matherr>:
 800ff5e:	2000      	movs	r0, #0
 800ff60:	4770      	bx	lr
 800ff62:	0000      	movs	r0, r0
 800ff64:	0000      	movs	r0, r0
	...

0800ff68 <nan>:
 800ff68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ff70 <nan+0x8>
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop
 800ff70:	00000000 	.word	0x00000000
 800ff74:	7ff80000 	.word	0x7ff80000

0800ff78 <rint>:
 800ff78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff7a:	ec51 0b10 	vmov	r0, r1, d0
 800ff7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ff82:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ff86:	2e13      	cmp	r6, #19
 800ff88:	460b      	mov	r3, r1
 800ff8a:	ee10 4a10 	vmov	r4, s0
 800ff8e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800ff92:	dc56      	bgt.n	8010042 <rint+0xca>
 800ff94:	2e00      	cmp	r6, #0
 800ff96:	da2b      	bge.n	800fff0 <rint+0x78>
 800ff98:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ff9c:	4302      	orrs	r2, r0
 800ff9e:	d023      	beq.n	800ffe8 <rint+0x70>
 800ffa0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ffa4:	4302      	orrs	r2, r0
 800ffa6:	4254      	negs	r4, r2
 800ffa8:	4314      	orrs	r4, r2
 800ffaa:	0c4b      	lsrs	r3, r1, #17
 800ffac:	0b24      	lsrs	r4, r4, #12
 800ffae:	045b      	lsls	r3, r3, #17
 800ffb0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800ffb4:	ea44 0103 	orr.w	r1, r4, r3
 800ffb8:	460b      	mov	r3, r1
 800ffba:	492f      	ldr	r1, [pc, #188]	; (8010078 <rint+0x100>)
 800ffbc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800ffc0:	e9d1 6700 	ldrd	r6, r7, [r1]
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	4639      	mov	r1, r7
 800ffc8:	4630      	mov	r0, r6
 800ffca:	f7f0 f95f 	bl	800028c <__adddf3>
 800ffce:	e9cd 0100 	strd	r0, r1, [sp]
 800ffd2:	463b      	mov	r3, r7
 800ffd4:	4632      	mov	r2, r6
 800ffd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffda:	f7f0 f955 	bl	8000288 <__aeabi_dsub>
 800ffde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ffe2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800ffe6:	4639      	mov	r1, r7
 800ffe8:	ec41 0b10 	vmov	d0, r0, r1
 800ffec:	b003      	add	sp, #12
 800ffee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fff0:	4a22      	ldr	r2, [pc, #136]	; (801007c <rint+0x104>)
 800fff2:	4132      	asrs	r2, r6
 800fff4:	ea01 0702 	and.w	r7, r1, r2
 800fff8:	4307      	orrs	r7, r0
 800fffa:	d0f5      	beq.n	800ffe8 <rint+0x70>
 800fffc:	0852      	lsrs	r2, r2, #1
 800fffe:	4011      	ands	r1, r2
 8010000:	430c      	orrs	r4, r1
 8010002:	d00b      	beq.n	801001c <rint+0xa4>
 8010004:	ea23 0202 	bic.w	r2, r3, r2
 8010008:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801000c:	2e13      	cmp	r6, #19
 801000e:	fa43 f306 	asr.w	r3, r3, r6
 8010012:	bf0c      	ite	eq
 8010014:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8010018:	2400      	movne	r4, #0
 801001a:	4313      	orrs	r3, r2
 801001c:	4916      	ldr	r1, [pc, #88]	; (8010078 <rint+0x100>)
 801001e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8010022:	4622      	mov	r2, r4
 8010024:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010028:	4620      	mov	r0, r4
 801002a:	4629      	mov	r1, r5
 801002c:	f7f0 f92e 	bl	800028c <__adddf3>
 8010030:	e9cd 0100 	strd	r0, r1, [sp]
 8010034:	4622      	mov	r2, r4
 8010036:	462b      	mov	r3, r5
 8010038:	e9dd 0100 	ldrd	r0, r1, [sp]
 801003c:	f7f0 f924 	bl	8000288 <__aeabi_dsub>
 8010040:	e7d2      	b.n	800ffe8 <rint+0x70>
 8010042:	2e33      	cmp	r6, #51	; 0x33
 8010044:	dd07      	ble.n	8010056 <rint+0xde>
 8010046:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801004a:	d1cd      	bne.n	800ffe8 <rint+0x70>
 801004c:	ee10 2a10 	vmov	r2, s0
 8010050:	f7f0 f91c 	bl	800028c <__adddf3>
 8010054:	e7c8      	b.n	800ffe8 <rint+0x70>
 8010056:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801005a:	f04f 32ff 	mov.w	r2, #4294967295
 801005e:	40f2      	lsrs	r2, r6
 8010060:	4210      	tst	r0, r2
 8010062:	d0c1      	beq.n	800ffe8 <rint+0x70>
 8010064:	0852      	lsrs	r2, r2, #1
 8010066:	4210      	tst	r0, r2
 8010068:	bf1f      	itttt	ne
 801006a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801006e:	ea20 0202 	bicne.w	r2, r0, r2
 8010072:	4134      	asrne	r4, r6
 8010074:	4314      	orrne	r4, r2
 8010076:	e7d1      	b.n	801001c <rint+0xa4>
 8010078:	080108a8 	.word	0x080108a8
 801007c:	000fffff 	.word	0x000fffff

08010080 <scalbn>:
 8010080:	b570      	push	{r4, r5, r6, lr}
 8010082:	ec55 4b10 	vmov	r4, r5, d0
 8010086:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801008a:	4606      	mov	r6, r0
 801008c:	462b      	mov	r3, r5
 801008e:	b9aa      	cbnz	r2, 80100bc <scalbn+0x3c>
 8010090:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010094:	4323      	orrs	r3, r4
 8010096:	d03b      	beq.n	8010110 <scalbn+0x90>
 8010098:	4b31      	ldr	r3, [pc, #196]	; (8010160 <scalbn+0xe0>)
 801009a:	4629      	mov	r1, r5
 801009c:	2200      	movs	r2, #0
 801009e:	ee10 0a10 	vmov	r0, s0
 80100a2:	f7f0 faa9 	bl	80005f8 <__aeabi_dmul>
 80100a6:	4b2f      	ldr	r3, [pc, #188]	; (8010164 <scalbn+0xe4>)
 80100a8:	429e      	cmp	r6, r3
 80100aa:	4604      	mov	r4, r0
 80100ac:	460d      	mov	r5, r1
 80100ae:	da12      	bge.n	80100d6 <scalbn+0x56>
 80100b0:	a327      	add	r3, pc, #156	; (adr r3, 8010150 <scalbn+0xd0>)
 80100b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b6:	f7f0 fa9f 	bl	80005f8 <__aeabi_dmul>
 80100ba:	e009      	b.n	80100d0 <scalbn+0x50>
 80100bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80100c0:	428a      	cmp	r2, r1
 80100c2:	d10c      	bne.n	80100de <scalbn+0x5e>
 80100c4:	ee10 2a10 	vmov	r2, s0
 80100c8:	4620      	mov	r0, r4
 80100ca:	4629      	mov	r1, r5
 80100cc:	f7f0 f8de 	bl	800028c <__adddf3>
 80100d0:	4604      	mov	r4, r0
 80100d2:	460d      	mov	r5, r1
 80100d4:	e01c      	b.n	8010110 <scalbn+0x90>
 80100d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80100da:	460b      	mov	r3, r1
 80100dc:	3a36      	subs	r2, #54	; 0x36
 80100de:	4432      	add	r2, r6
 80100e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80100e4:	428a      	cmp	r2, r1
 80100e6:	dd0b      	ble.n	8010100 <scalbn+0x80>
 80100e8:	ec45 4b11 	vmov	d1, r4, r5
 80100ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010158 <scalbn+0xd8>
 80100f0:	f000 f83c 	bl	801016c <copysign>
 80100f4:	a318      	add	r3, pc, #96	; (adr r3, 8010158 <scalbn+0xd8>)
 80100f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fa:	ec51 0b10 	vmov	r0, r1, d0
 80100fe:	e7da      	b.n	80100b6 <scalbn+0x36>
 8010100:	2a00      	cmp	r2, #0
 8010102:	dd08      	ble.n	8010116 <scalbn+0x96>
 8010104:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010108:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801010c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010110:	ec45 4b10 	vmov	d0, r4, r5
 8010114:	bd70      	pop	{r4, r5, r6, pc}
 8010116:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801011a:	da0d      	bge.n	8010138 <scalbn+0xb8>
 801011c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010120:	429e      	cmp	r6, r3
 8010122:	ec45 4b11 	vmov	d1, r4, r5
 8010126:	dce1      	bgt.n	80100ec <scalbn+0x6c>
 8010128:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8010150 <scalbn+0xd0>
 801012c:	f000 f81e 	bl	801016c <copysign>
 8010130:	a307      	add	r3, pc, #28	; (adr r3, 8010150 <scalbn+0xd0>)
 8010132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010136:	e7e0      	b.n	80100fa <scalbn+0x7a>
 8010138:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801013c:	3236      	adds	r2, #54	; 0x36
 801013e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010142:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010146:	4620      	mov	r0, r4
 8010148:	4629      	mov	r1, r5
 801014a:	2200      	movs	r2, #0
 801014c:	4b06      	ldr	r3, [pc, #24]	; (8010168 <scalbn+0xe8>)
 801014e:	e7b2      	b.n	80100b6 <scalbn+0x36>
 8010150:	c2f8f359 	.word	0xc2f8f359
 8010154:	01a56e1f 	.word	0x01a56e1f
 8010158:	8800759c 	.word	0x8800759c
 801015c:	7e37e43c 	.word	0x7e37e43c
 8010160:	43500000 	.word	0x43500000
 8010164:	ffff3cb0 	.word	0xffff3cb0
 8010168:	3c900000 	.word	0x3c900000

0801016c <copysign>:
 801016c:	ec51 0b10 	vmov	r0, r1, d0
 8010170:	ee11 0a90 	vmov	r0, s3
 8010174:	ee10 2a10 	vmov	r2, s0
 8010178:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801017c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8010180:	ea41 0300 	orr.w	r3, r1, r0
 8010184:	ec43 2b10 	vmov	d0, r2, r3
 8010188:	4770      	bx	lr
	...

0801018c <_init>:
 801018c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801018e:	bf00      	nop
 8010190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010192:	bc08      	pop	{r3}
 8010194:	469e      	mov	lr, r3
 8010196:	4770      	bx	lr

08010198 <_fini>:
 8010198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801019a:	bf00      	nop
 801019c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801019e:	bc08      	pop	{r3}
 80101a0:	469e      	mov	lr, r3
 80101a2:	4770      	bx	lr
