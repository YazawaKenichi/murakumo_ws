
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e80c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  0800e9a0  0800e9a0  0001e9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f234  0800f234  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f234  0800f234  0001f234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f23c  0800f23c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f23c  0800f23c  0001f23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f240  0800f240  0001f240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000093f8  200001e0  0800f424  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200095d8  0800f424  000295d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fcdf  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000069d7  00000000  00000000  0005feef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e08  00000000  00000000  000668c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b80  00000000  00000000  000686d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002931c  00000000  00000000  0006a250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a4f  00000000  00000000  0009356c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5c88  00000000  00000000  000bafbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190c43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d70  00000000  00000000  00190c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e984 	.word	0x0800e984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e984 	.word	0x0800e984

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <imu_read_byte>:

uint8_t initialized = 0;
Inertial inertial;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <imu_read_byte+0x54>)
 8001008:	f006 f80e 	bl	8007028 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <imu_read_byte+0x58>)
 8001016:	f006 fe60 	bl	8007cda <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <imu_read_byte+0x58>)
 8001024:	f006 ff95 	bl	8007f52 <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <imu_read_byte+0x54>)
 8001030:	f005 fffa 	bl	8007028 <HAL_GPIO_WritePin>
#endif
	return val;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	2000040c 	.word	0x2000040c

08001048 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <imu_write_byte+0x54>)
 800106a:	f005 ffdd 	bl	8007028 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2201      	movs	r2, #1
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <imu_write_byte+0x58>)
 8001078:	f006 fe2f 	bl	8007cda <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 800107c:	1db9      	adds	r1, r7, #6
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <imu_write_byte+0x58>)
 8001084:	f006 fe29 	bl	8007cda <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <imu_write_byte+0x54>)
 8001090:	f005 ffca 	bl	8007028 <HAL_GPIO_WritePin>
#endif
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	2000040c 	.word	0x2000040c

080010a4 <imu_init>:
 * @fn imu_init()
 * @brief 
 * 
 */
void imu_init()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	if(initialized == 0)
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <imu_init+0x54>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d11d      	bne.n	80010ee <imu_init+0x4a>
	{
		printf("Starting SPI2 (IMU)\r\n");
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <imu_init+0x58>)
 80010b4:	f009 fec0 	bl	800ae38 <puts>
		uint8_t wai, ret;
		ret = imu_initialize(&wai);
 80010b8:	1dbb      	adds	r3, r7, #6
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 f826 	bl	800110c <imu_initialize>
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
		printf("who_am_i = %d\r\n", wai);
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	4619      	mov	r1, r3
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <imu_init+0x5c>)
 80010ca:	f009 fe2f 	bl	800ad2c <iprintf>
		if(ret == 1)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d103      	bne.n	80010dc <imu_init+0x38>
		{
			printf("SPI INIT COLLECT!\r\n");
 80010d4:	480b      	ldr	r0, [pc, #44]	; (8001104 <imu_init+0x60>)
 80010d6:	f009 feaf 	bl	800ae38 <puts>
 80010da:	e002      	b.n	80010e2 <imu_init+0x3e>
		}
		else
		{
			printf("SPI INIT FAILURE x_x \r\n");
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <imu_init+0x64>)
 80010de:	f009 feab 	bl	800ae38 <puts>
		}
		initialized = initialized + 1;
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <imu_init+0x54>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <imu_init+0x54>)
 80010ec:	701a      	strb	r2, [r3, #0]
	}
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001fc 	.word	0x200001fc
 80010fc:	0800e9a0 	.word	0x0800e9a0
 8001100:	0800e9b8 	.word	0x0800e9b8
 8001104:	0800e9c8 	.word	0x0800e9c8
 8001108:	0800e9dc 	.word	0x0800e9dc

0800110c <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111a:	4833      	ldr	r0, [pc, #204]	; (80011e8 <imu_initialize+0xdc>)
 800111c:	f005 ff84 	bl	8007028 <HAL_GPIO_WritePin>
	uint8_t who_am_i, ret;
	ret = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

#if	INIT_ZERO
	inertial.linear = vector3_creation(0, 0, 0);
 8001124:	4c31      	ldr	r4, [pc, #196]	; (80011ec <imu_initialize+0xe0>)
 8001126:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80011f0 <imu_initialize+0xe4>
 800112a:	eddf 0a31 	vldr	s1, [pc, #196]	; 80011f0 <imu_initialize+0xe4>
 800112e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80011f0 <imu_initialize+0xe4>
 8001132:	f001 fa91 	bl	8002658 <vector3_creation>
 8001136:	eef0 6a40 	vmov.f32	s13, s0
 800113a:	eeb0 7a60 	vmov.f32	s14, s1
 800113e:	eef0 7a41 	vmov.f32	s15, s2
 8001142:	edc4 6a00 	vstr	s13, [r4]
 8001146:	ed84 7a01 	vstr	s14, [r4, #4]
 800114a:	edc4 7a02 	vstr	s15, [r4, #8]
	inertial.angular = vector3_creation(0, 0, 0);
 800114e:	4c27      	ldr	r4, [pc, #156]	; (80011ec <imu_initialize+0xe0>)
 8001150:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80011f0 <imu_initialize+0xe4>
 8001154:	eddf 0a26 	vldr	s1, [pc, #152]	; 80011f0 <imu_initialize+0xe4>
 8001158:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80011f0 <imu_initialize+0xe4>
 800115c:	f001 fa7c 	bl	8002658 <vector3_creation>
 8001160:	eef0 6a40 	vmov.f32	s13, s0
 8001164:	eeb0 7a60 	vmov.f32	s14, s1
 8001168:	eef0 7a41 	vmov.f32	s15, s2
 800116c:	edc4 6a03 	vstr	s13, [r4, #12]
 8001170:	ed84 7a04 	vstr	s14, [r4, #16]
 8001174:	edc4 7a05 	vstr	s15, [r4, #20]
#endif

	//! User Bank 0 を選択
	imu_write_byte(REG_BANK_SEL, 0x00);
 8001178:	2100      	movs	r1, #0
 800117a:	207f      	movs	r0, #127	; 0x7f
 800117c:	f7ff ff64 	bl	8001048 <imu_write_byte>
	who_am_i = imu_read_byte(0x00);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff ff33 	bl	8000fec <imu_read_byte>
 8001186:	4603      	mov	r3, r0
 8001188:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	7bba      	ldrb	r2, [r7, #14]
 800118e:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	2be0      	cmp	r3, #224	; 0xe0
 8001194:	d11c      	bne.n	80011d0 <imu_initialize+0xc4>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
		//! PWR_MGMT_1 推奨値 1
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 800119a:	2101      	movs	r1, #1
 800119c:	2006      	movs	r0, #6
 800119e:	f7ff ff53 	bl	8001048 <imu_write_byte>
		//! PWR_MGMt_2 推奨値 0
		// imu_write_byte(PWR_MGMT_2, 0x00);
		HAL_Delay(100);
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	f004 f93c 	bl	8005420 <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 80011a8:	2110      	movs	r1, #16
 80011aa:	2003      	movs	r0, #3
 80011ac:	f7ff ff4c 	bl	8001048 <imu_write_byte>
		 * 	10 : User Bank 2 : 加速度と角速度の値の設定ができる
		 * 	11 : User Bank 3 : I2C の設定が行える
		 * 
		 */
		//! User Bank 2 を選択
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 80011b0:	2120      	movs	r1, #32
 80011b2:	207f      	movs	r0, #127	; 0x7f
 80011b4:	f7ff ff48 	bl	8001048 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 9     [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2000 [dps] & bypass ) -> 0b 0000 0110 -> 0x06
		imu_write_byte(0x01, 0x06);
 80011b8:	2106      	movs	r1, #6
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff ff44 	bl	8001048 <imu_write_byte>
		 * 					 0 : bypass gyro DLPF 4.5   [kHz]
		 * 					 1 : enable gyro DLPF 1.125 [kHz]
		 * 
		 */
		//! ( +- 2 [dps] & bypass ) -> 0b 0000 0000 -> 0x06
		imu_write_byte(0x14, 0x00);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2014      	movs	r0, #20
 80011c4:	f7ff ff40 	bl	8001048 <imu_write_byte>

		//! User Bank 0 に戻す
		imu_write_byte(REG_BANK_SEL, 0x00);
 80011c8:	2100      	movs	r1, #0
 80011ca:	207f      	movs	r0, #127	; 0x7f
 80011cc:	f7ff ff3c 	bl	8001048 <imu_write_byte>
	}
#if USE_NCS
	CS_SET;
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <imu_initialize+0xdc>)
 80011d8:	f005 ff26 	bl	8007028 <HAL_GPIO_WritePin>
#endif
	return ret;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40020400 	.word	0x40020400
 80011ec:	20000210 	.word	0x20000210
 80011f0:	00000000 	.word	0x00000000

080011f4 <imu_start>:

void imu_start()
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	/* imu_start */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <imu_stop>:

void imu_stop()
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
#if !USE_NCS
	CS_SET;
#endif
}
 8001206:	bf00      	nop
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <imu_update_gyro>:
 * --- --- --- --- --- --- --- --- --- ---
 * @attention 値を代入したら外部参照変数を呼び出して値を取得することになる
 *
*/
void imu_update_gyro()
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
	float k_gyro;
	int16_t byte_data;
	float tmp;

	k_gyro = (GYRO_RANGE / (float) MAXDATA_RANGE);
 8001216:	4b56      	ldr	r3, [pc, #344]	; (8001370 <imu_update_gyro+0x160>)
 8001218:	60fb      	str	r3, [r7, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 800121a:	2033      	movs	r0, #51	; 0x33
 800121c:	f7ff fee6 	bl	8000fec <imu_read_byte>
 8001220:	4603      	mov	r3, r0
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	b21c      	sxth	r4, r3
 8001226:	2034      	movs	r0, #52	; 0x34
 8001228:	f7ff fee0 	bl	8000fec <imu_read_byte>
 800122c:	4603      	mov	r3, r0
 800122e:	b21b      	sxth	r3, r3
 8001230:	4323      	orrs	r3, r4
 8001232:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 8001234:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001240:	ed97 7a03 	vldr	s14, [r7, #12]
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.x = low_pass_filter(tmp, inertial.angular.x, LPF_RATE);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff f97b 	bl	8000548 <__aeabi_f2d>
 8001252:	4604      	mov	r4, r0
 8001254:	460d      	mov	r5, r1
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <imu_update_gyro+0x164>)
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f974 	bl	8000548 <__aeabi_f2d>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	ed9f 2b40 	vldr	d2, [pc, #256]	; 8001368 <imu_update_gyro+0x158>
 8001268:	ec43 2b11 	vmov	d1, r2, r3
 800126c:	ec45 4b10 	vmov	d0, r4, r5
 8001270:	f001 f9bc 	bl	80025ec <low_pass_filter>
 8001274:	ec53 2b10 	vmov	r2, r3, d0
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	f7ff fcb4 	bl	8000be8 <__aeabi_d2f>
 8001280:	4603      	mov	r3, r0
 8001282:	4a3c      	ldr	r2, [pc, #240]	; (8001374 <imu_update_gyro+0x164>)
 8001284:	60d3      	str	r3, [r2, #12]

	byte_data = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 8001286:	2035      	movs	r0, #53	; 0x35
 8001288:	f7ff feb0 	bl	8000fec <imu_read_byte>
 800128c:	4603      	mov	r3, r0
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21c      	sxth	r4, r3
 8001292:	2036      	movs	r0, #54	; 0x36
 8001294:	f7ff feaa 	bl	8000fec <imu_read_byte>
 8001298:	4603      	mov	r3, r0
 800129a:	b21b      	sxth	r3, r3
 800129c:	4323      	orrs	r3, r4
 800129e:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 80012a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.y = low_pass_filter(tmp, inertial.angular.y, LPF_RATE);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff f945 	bl	8000548 <__aeabi_f2d>
 80012be:	4604      	mov	r4, r0
 80012c0:	460d      	mov	r5, r1
 80012c2:	4b2c      	ldr	r3, [pc, #176]	; (8001374 <imu_update_gyro+0x164>)
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f93e 	bl	8000548 <__aeabi_f2d>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8001368 <imu_update_gyro+0x158>
 80012d4:	ec43 2b11 	vmov	d1, r2, r3
 80012d8:	ec45 4b10 	vmov	d0, r4, r5
 80012dc:	f001 f986 	bl	80025ec <low_pass_filter>
 80012e0:	ec53 2b10 	vmov	r2, r3, d0
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc7e 	bl	8000be8 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a21      	ldr	r2, [pc, #132]	; (8001374 <imu_update_gyro+0x164>)
 80012f0:	6113      	str	r3, [r2, #16]

	byte_data = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 80012f2:	2037      	movs	r0, #55	; 0x37
 80012f4:	f7ff fe7a 	bl	8000fec <imu_read_byte>
 80012f8:	4603      	mov	r3, r0
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21c      	sxth	r4, r3
 80012fe:	2038      	movs	r0, #56	; 0x38
 8001300:	f7ff fe74 	bl	8000fec <imu_read_byte>
 8001304:	4603      	mov	r3, r0
 8001306:	b21b      	sxth	r3, r3
 8001308:	4323      	orrs	r3, r4
 800130a:	817b      	strh	r3, [r7, #10]
	tmp = (float) byte_data * k_gyro;
 800130c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001318:	ed97 7a03 	vldr	s14, [r7, #12]
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	edc7 7a01 	vstr	s15, [r7, #4]
	inertial.angular.z = low_pass_filter(tmp, inertial.angular.z, LPF_RATE);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	4604      	mov	r4, r0
 800132c:	460d      	mov	r5, r1
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <imu_update_gyro+0x164>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f908 	bl	8000548 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	ed9f 2b0a 	vldr	d2, [pc, #40]	; 8001368 <imu_update_gyro+0x158>
 8001340:	ec43 2b11 	vmov	d1, r2, r3
 8001344:	ec45 4b10 	vmov	d0, r4, r5
 8001348:	f001 f950 	bl	80025ec <low_pass_filter>
 800134c:	ec53 2b10 	vmov	r2, r3, d0
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fc48 	bl	8000be8 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <imu_update_gyro+0x164>)
 800135c:	6153      	str	r3, [r2, #20]
	 * 		float y;
	 * 		float z;
	 * } Vector3;
	 * 
	 */
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bdb0      	pop	{r4, r5, r7, pc}
 8001366:	bf00      	nop
 8001368:	40000000 	.word	0x40000000
 800136c:	3fd33333 	.word	0x3fd33333
 8001370:	3d7a0000 	.word	0x3d7a0000
 8001374:	20000210 	.word	0x20000210

08001378 <imu_read_yaw>:
 * @brief 
 * 
 * @return float 
 */
float imu_read_yaw()
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	//! バイアス補正を加味した返り値（ inertial.angular.z はすでに LPF を通されている ）
	return inertial.angular.z - (BIAS_AVERAGE - TRUE_VALUE);
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <imu_read_yaw+0x20>)
 800137e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001382:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800139c <imu_read_yaw+0x24>
 8001386:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800138a:	eeb0 0a67 	vmov.f32	s0, s15
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000210 	.word	0x20000210
 800139c:	3e0a704c 	.word	0x3e0a704c

080013a0 <led_init>:

uint8_t current_value;
uint8_t current_rgb_value;

void led_init()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
    current_value = 0b11;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <led_init+0x24>)
 80013a6:	2203      	movs	r2, #3
 80013a8:	701a      	strb	r2, [r3, #0]
    current_rgb_value = 0b111;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <led_init+0x28>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	701a      	strb	r2, [r3, #0]
    led_write_led(0b11, 0b11);
 80013b0:	2103      	movs	r1, #3
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f8ae 	bl	8001514 <led_write_led>
    led_write_rgb(0b111);
 80013b8:	2007      	movs	r0, #7
 80013ba:	f000 f86b 	bl	8001494 <led_write_rgb>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000228 	.word	0x20000228
 80013c8:	20000229 	.word	0x20000229

080013cc <led_start>:

void led_start()
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b00);
 80013d0:	2100      	movs	r1, #0
 80013d2:	2003      	movs	r0, #3
 80013d4:	f000 f89e 	bl	8001514 <led_write_led>
    led_write_rgb(0b000);
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 f85b 	bl	8001494 <led_write_rgb>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <led_stop>:

void led_stop()
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
    led_write_led(0b11, 0b11);
 80013e6:	2103      	movs	r1, #3
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f893 	bl	8001514 <led_write_led>
    led_write_rgb(0b001);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f000 f850 	bl	8001494 <led_write_rgb>
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <led_write_led1>:
{
    return current_rgb_value;
}

void led_write_led1(uint8_t value_)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = value_ << 0;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	73fb      	strb	r3, [r7, #15]
    led2_value = current_value & 0b10;
 8001406:	4b0d      	ldr	r3, [pc, #52]	; (800143c <led_write_led1+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <led_write_led1+0x48>)
 8001424:	f005 fe00 	bl	8007028 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	4313      	orrs	r3, r2
 800142e:	b2da      	uxtb	r2, r3
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <led_write_led1+0x44>)
 8001432:	701a      	strb	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000228 	.word	0x20000228
 8001440:	40020800 	.word	0x40020800

08001444 <led_write_led2>:

void led_write_led2(uint8_t value_)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
    uint8_t led1_value, led2_value;
    led1_value = current_value & 0b01;
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <led_write_led2+0x48>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
    led2_value = value_ << 1;
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, !value_ ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	461a      	mov	r2, r3
 800146c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001470:	4807      	ldr	r0, [pc, #28]	; (8001490 <led_write_led2+0x4c>)
 8001472:	f005 fdd9 	bl	8007028 <HAL_GPIO_WritePin>
    current_value = led1_value | led2_value;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	4313      	orrs	r3, r2
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b03      	ldr	r3, [pc, #12]	; (800148c <led_write_led2+0x48>)
 8001480:	701a      	strb	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000228 	.word	0x20000228
 8001490:	40020400 	.word	0x40020400

08001494 <led_write_rgb>:

void led_write_rgb(uint8_t rgb_)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (rgb_ & 0b100) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_R ON
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <led_write_rgb+0x74>)
 80014b6:	f005 fdb7 	bl	8007028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (rgb_ & 0b010) ? GPIO_PIN_RESET : GPIO_PIN_SET);	// LED_G ON
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <led_write_rgb+0x74>)
 80014d2:	f005 fda9 	bl	8007028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, (rgb_ & 0b001) ? GPIO_PIN_RESET : GPIO_PIN_SET);// LED_B ON
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014ec:	4807      	ldr	r0, [pc, #28]	; (800150c <led_write_rgb+0x78>)
 80014ee:	f005 fd9b 	bl	8007028 <HAL_GPIO_WritePin>
    current_rgb_value = rgb_ & 0b0111;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <led_write_rgb+0x7c>)
 80014fc:	701a      	strb	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40020000 	.word	0x40020000
 800150c:	40020800 	.word	0x40020800
 8001510:	20000229 	.word	0x20000229

08001514 <led_write_led>:

void led_write_led(uint8_t mask_, uint8_t value_)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	460a      	mov	r2, r1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	4613      	mov	r3, r2
 8001522:	71bb      	strb	r3, [r7, #6]
    if(mask_ & 0b01)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <led_write_led+0x28>
    {
        led_write_led1(0b01 & value_ >> 0);
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff5e 	bl	80013f8 <led_write_led1>
    }
    if(mask_ & 0b10)
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d008      	beq.n	8001558 <led_write_led+0x44>
    {
        led_write_led2(0b10 & value_ >> 1);
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff76 	bl	8001444 <led_write_led2>
    }
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 8001564:	f000 f804 	bl	8001570 <rotary_set_playmode>
    rotary_set_value();
 8001568:	f000 f81a 	bl	80015a0 <rotary_set_value>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <rotary_set_playmode>:

void rotary_set_playmode()
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 8001574:	f000 f82c 	bl	80015d0 <rotary_read>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b01      	ldr	r3, [pc, #4]	; (8001584 <rotary_set_playmode+0x14>)
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000022a 	.word	0x2000022a

08001588 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
    return playmode;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <rotary_read_playmode+0x14>)
 800158e:	781b      	ldrb	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000022a 	.word	0x2000022a

080015a0 <rotary_set_value>:

void rotary_set_value()
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    value = rotary_read();
 80015a4:	f000 f814 	bl	80015d0 <rotary_read>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b01      	ldr	r3, [pc, #4]	; (80015b4 <rotary_set_value+0x14>)
 80015ae:	701a      	strb	r2, [r3, #0]
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000022b 	.word	0x2000022b

080015b8 <rotary_read_value>:

uint8_t rotary_read_value()
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
    return value;
 80015bc:	4b03      	ldr	r3, [pc, #12]	; (80015cc <rotary_read_value+0x14>)
 80015be:	781b      	ldrb	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	2000022b 	.word	0x2000022b

080015d0 <rotary_read>:

uint8_t rotary_read()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 80015da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015de:	481f      	ldr	r0, [pc, #124]	; (800165c <rotary_read+0x8c>)
 80015e0:	f005 fd0a 	bl	8006ff8 <HAL_GPIO_ReadPin>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bf0c      	ite	eq
 80015ea:	2301      	moveq	r3, #1
 80015ec:	2300      	movne	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	4413      	add	r3, r2
 80015f6:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 80015f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015fc:	4817      	ldr	r0, [pc, #92]	; (800165c <rotary_read+0x8c>)
 80015fe:	f005 fcfb 	bl	8006ff8 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <rotary_read+0x3c>
 8001608:	2302      	movs	r3, #2
 800160a:	e000      	b.n	800160e <rotary_read+0x3e>
 800160c:	2300      	movs	r3, #0
 800160e:	b2da      	uxtb	r2, r3
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4413      	add	r3, r2
 8001614:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 8001616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <rotary_read+0x90>)
 800161c:	f005 fcec 	bl	8006ff8 <HAL_GPIO_ReadPin>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <rotary_read+0x5a>
 8001626:	2304      	movs	r3, #4
 8001628:	e000      	b.n	800162c <rotary_read+0x5c>
 800162a:	2300      	movs	r3, #0
 800162c:	b2da      	uxtb	r2, r3
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4413      	add	r3, r2
 8001632:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 8001634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <rotary_read+0x8c>)
 800163a:	f005 fcdd 	bl	8006ff8 <HAL_GPIO_ReadPin>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <rotary_read+0x78>
 8001644:	2308      	movs	r3, #8
 8001646:	e000      	b.n	800164a <rotary_read+0x7a>
 8001648:	2300      	movs	r3, #0
 800164a:	b2da      	uxtb	r2, r3
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	4413      	add	r3, r2
 8001650:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 8001652:	79fb      	ldrb	r3, [r7, #7]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40020800 	.word	0x40020800
 8001660:	40020000 	.word	0x40020000

08001664 <rotary_print_playmode>:

void rotary_print_playmode()
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	printf("playmode = ");
 8001668:	482c      	ldr	r0, [pc, #176]	; (800171c <rotary_print_playmode+0xb8>)
 800166a:	f009 fb5f 	bl	800ad2c <iprintf>
	switch(rotary_read_playmode())
 800166e:	f7ff ff8b 	bl	8001588 <rotary_read_playmode>
 8001672:	4603      	mov	r3, r0
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d847      	bhi.n	8001708 <rotary_print_playmode+0xa4>
 8001678:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <rotary_print_playmode+0x1c>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	080016c1 	.word	0x080016c1
 8001684:	080016c9 	.word	0x080016c9
 8001688:	080016d1 	.word	0x080016d1
 800168c:	080016d9 	.word	0x080016d9
 8001690:	080016e1 	.word	0x080016e1
 8001694:	080016e9 	.word	0x080016e9
 8001698:	080016f1 	.word	0x080016f1
 800169c:	080016f9 	.word	0x080016f9
 80016a0:	08001709 	.word	0x08001709
 80016a4:	08001709 	.word	0x08001709
 80016a8:	08001709 	.word	0x08001709
 80016ac:	08001709 	.word	0x08001709
 80016b0:	08001709 	.word	0x08001709
 80016b4:	08001709 	.word	0x08001709
 80016b8:	08001709 	.word	0x08001709
 80016bc:	08001701 	.word	0x08001701
	{
		case calibration:
			printf("calibration");
 80016c0:	4817      	ldr	r0, [pc, #92]	; (8001720 <rotary_print_playmode+0xbc>)
 80016c2:	f009 fb33 	bl	800ad2c <iprintf>
			break;
 80016c6:	e023      	b.n	8001710 <rotary_print_playmode+0xac>
		case search:
			printf("search");
 80016c8:	4816      	ldr	r0, [pc, #88]	; (8001724 <rotary_print_playmode+0xc0>)
 80016ca:	f009 fb2f 	bl	800ad2c <iprintf>
			break;
 80016ce:	e01f      	b.n	8001710 <rotary_print_playmode+0xac>
		case accel:
			printf("accel");
 80016d0:	4815      	ldr	r0, [pc, #84]	; (8001728 <rotary_print_playmode+0xc4>)
 80016d2:	f009 fb2b 	bl	800ad2c <iprintf>
			break;
 80016d6:	e01b      	b.n	8001710 <rotary_print_playmode+0xac>
		case max_enable:
			printf("max_enable");
 80016d8:	4814      	ldr	r0, [pc, #80]	; (800172c <rotary_print_playmode+0xc8>)
 80016da:	f009 fb27 	bl	800ad2c <iprintf>
			break;
 80016de:	e017      	b.n	8001710 <rotary_print_playmode+0xac>
        case motor_free:
            printf("motor_free");
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <rotary_print_playmode+0xcc>)
 80016e2:	f009 fb23 	bl	800ad2c <iprintf>
            break;
 80016e6:	e013      	b.n	8001710 <rotary_print_playmode+0xac>
		case tracer_tuning:
			printf("tracer_tuning");
 80016e8:	4812      	ldr	r0, [pc, #72]	; (8001734 <rotary_print_playmode+0xd0>)
 80016ea:	f009 fb1f 	bl	800ad2c <iprintf>
			break;
 80016ee:	e00f      	b.n	8001710 <rotary_print_playmode+0xac>
		case velotrace_tuning:
			printf("velotrace_tuning");
 80016f0:	4811      	ldr	r0, [pc, #68]	; (8001738 <rotary_print_playmode+0xd4>)
 80016f2:	f009 fb1b 	bl	800ad2c <iprintf>
			break;
 80016f6:	e00b      	b.n	8001710 <rotary_print_playmode+0xac>
		case banquet:
			printf("banquet");
 80016f8:	4810      	ldr	r0, [pc, #64]	; (800173c <rotary_print_playmode+0xd8>)
 80016fa:	f009 fb17 	bl	800ad2c <iprintf>
			break;
 80016fe:	e007      	b.n	8001710 <rotary_print_playmode+0xac>
		case flash_print:
			printf("flash_print");
 8001700:	480f      	ldr	r0, [pc, #60]	; (8001740 <rotary_print_playmode+0xdc>)
 8001702:	f009 fb13 	bl	800ad2c <iprintf>
			break;
 8001706:	e003      	b.n	8001710 <rotary_print_playmode+0xac>
		default:
			printf("unknown playmode...");
 8001708:	480e      	ldr	r0, [pc, #56]	; (8001744 <rotary_print_playmode+0xe0>)
 800170a:	f009 fb0f 	bl	800ad2c <iprintf>
			break;
 800170e:	bf00      	nop
	}
	printf("\r\n");
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <rotary_print_playmode+0xe4>)
 8001712:	f009 fb91 	bl	800ae38 <puts>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	0800e9f4 	.word	0x0800e9f4
 8001720:	0800ea00 	.word	0x0800ea00
 8001724:	0800ea0c 	.word	0x0800ea0c
 8001728:	0800ea14 	.word	0x0800ea14
 800172c:	0800ea1c 	.word	0x0800ea1c
 8001730:	0800ea28 	.word	0x0800ea28
 8001734:	0800ea34 	.word	0x0800ea34
 8001738:	0800ea44 	.word	0x0800ea44
 800173c:	0800ea58 	.word	0x0800ea58
 8001740:	0800ea60 	.word	0x0800ea60
 8001744:	0800ea6c 	.word	0x0800ea6c
 8001748:	0800ea80 	.word	0x0800ea80

0800174c <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
    enter = 1;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <switch_set_enter+0x14>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	2000022c 	.word	0x2000022c

08001764 <switch_reset_enter>:

void switch_reset_enter()
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
    enter = 0;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <switch_reset_enter+0x14>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	2000022c 	.word	0x2000022c

0800177c <switch_init>:
{
    switch_reset_enter();
}

void switch_init()
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    switch_reset_enter();
 8001780:	f7ff fff0 	bl	8001764 <switch_reset_enter>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <switch_read_enter>:

uint8_t switch_read_enter()
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
    return enter;
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <switch_read_enter+0x14>)
 800178e:	781b      	ldrb	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000022c 	.word	0x2000022c

080017a0 <switch1_read>:

uint8_t switch1_read()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 80017a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <switch1_read+0x20>)
 80017aa:	f005 fc25 	bl	8006ff8 <HAL_GPIO_ReadPin>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40020800 	.word	0x40020800

080017c4 <switch2_read>:

uint8_t switch2_read()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 80017c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <switch2_read+0x20>)
 80017ce:	f005 fc13 	bl	8006ff8 <HAL_GPIO_ReadPin>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
}
 80017de:	4618      	mov	r0, r3
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40020800 	.word	0x40020800

080017e8 <switch_read>:

uint8_t switch_read()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 80017f2:	f7ff ffd5 	bl	80017a0 <switch1_read>
 80017f6:	4603      	mov	r3, r0
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4413      	add	r3, r2
 8001800:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 8001802:	f7ff ffdf 	bl	80017c4 <switch2_read>
 8001806:	4603      	mov	r3, r0
 8001808:	b2da      	uxtb	r2, r3
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4413      	add	r3, r2
 800180e:	71fb      	strb	r3, [r7, #7]

    return value_;
 8001810:	79fb      	ldrb	r3, [r7, #7]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <switch_enter>:

void switch_enter()
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 800181e:	f7ff ffe3 	bl	80017e8 <switch_read>
 8001822:	4603      	mov	r3, r0
 8001824:	2b01      	cmp	r3, #1
 8001826:	d102      	bne.n	800182e <switch_enter+0x14>
    {
        switch_reset_enter();
 8001828:	f7ff ff9c 	bl	8001764 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 800182c:	e006      	b.n	800183c <switch_enter+0x22>
    else if(switch_read() == 0b10)
 800182e:	f7ff ffdb 	bl	80017e8 <switch_read>
 8001832:	4603      	mov	r3, r0
 8001834:	2b02      	cmp	r3, #2
 8001836:	d101      	bne.n	800183c <switch_enter+0x22>
        switch_set_enter();
 8001838:	f7ff ff88 	bl	800174c <switch_set_enter>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 8001840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001844:	b08e      	sub	sp, #56	; 0x38
 8001846:	af0a      	add	r7, sp, #40	; 0x28
 8001848:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 800184a:	482d      	ldr	r0, [pc, #180]	; (8001900 <analog_array_print+0xc0>)
 800184c:	f009 fa6e 	bl	800ad2c <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3318      	adds	r3, #24
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	4619      	mov	r1, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	331c      	adds	r3, #28
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	331e      	adds	r3, #30
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	331a      	adds	r3, #26
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	4603      	mov	r3, r0
 8001872:	4824      	ldr	r0, [pc, #144]	; (8001904 <analog_array_print+0xc4>)
 8001874:	f009 fa5a 	bl	800ad2c <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	469c      	mov	ip, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	3304      	adds	r3, #4
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	469e      	mov	lr, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3308      	adds	r3, #8
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	4698      	mov	r8, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	330c      	adds	r3, #12
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3310      	adds	r3, #16
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3314      	adds	r3, #20
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3316      	adds	r3, #22
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	461c      	mov	r4, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3312      	adds	r3, #18
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	461d      	mov	r5, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	330e      	adds	r3, #14
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	461e      	mov	r6, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	330a      	adds	r3, #10
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3306      	adds	r3, #6
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3302      	adds	r3, #2
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	9308      	str	r3, [sp, #32]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	9307      	str	r3, [sp, #28]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	9306      	str	r3, [sp, #24]
 80018de:	9605      	str	r6, [sp, #20]
 80018e0:	9504      	str	r5, [sp, #16]
 80018e2:	9403      	str	r4, [sp, #12]
 80018e4:	9002      	str	r0, [sp, #8]
 80018e6:	9101      	str	r1, [sp, #4]
 80018e8:	9200      	str	r2, [sp, #0]
 80018ea:	4643      	mov	r3, r8
 80018ec:	4672      	mov	r2, lr
 80018ee:	4661      	mov	r1, ip
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <analog_array_print+0xc8>)
 80018f2:	f009 fa1b 	bl	800ad2c <iprintf>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001900:	0800ea84 	.word	0x0800ea84
 8001904:	0800ea8c 	.word	0x0800ea8c
 8001908:	0800eaa4 	.word	0x0800eaa4

0800190c <analog_d_print>:

	printf("average = %4.2f\r\n\r\n", sum_ / (float) size_);
}

void analog_d_print()
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
#if D_ANALOG
	analog_print_analogmode();
	// analog_rate_array_print();
	analog_array_print(analog);
#endif
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <analog_print_max>:
	analog_print_analogmode();
	analog_array_print(analog);
}

void analog_print_max()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 8001920:	4806      	ldr	r0, [pc, #24]	; (800193c <analog_print_max+0x20>)
 8001922:	f009 fa03 	bl	800ad2c <iprintf>
	printf("analog_print_max\r\n");
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <analog_print_max+0x24>)
 8001928:	f009 fa86 	bl	800ae38 <puts>
	analog_array_print(analogmax);
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <analog_print_max+0x28>)
 800192e:	f7ff ff87 	bl	8001840 <analog_array_print>
	printf(ESC_DEF);
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <analog_print_max+0x2c>)
 8001934:	f009 f9fa 	bl	800ad2c <iprintf>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	0800eb9c 	.word	0x0800eb9c
 8001940:	0800eba4 	.word	0x0800eba4
 8001944:	200003d8 	.word	0x200003d8
 8001948:	0800ebb8 	.word	0x0800ebb8

0800194c <analog_print_min>:

void analog_print_min()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 8001950:	4806      	ldr	r0, [pc, #24]	; (800196c <analog_print_min+0x20>)
 8001952:	f009 f9eb 	bl	800ad2c <iprintf>
	printf("analog_print_min\r\n");
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <analog_print_min+0x24>)
 8001958:	f009 fa6e 	bl	800ae38 <puts>
	analog_array_print(analogmin);
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <analog_print_min+0x28>)
 800195e:	f7ff ff6f 	bl	8001840 <analog_array_print>
	printf(ESC_DEF);
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <analog_print_min+0x2c>)
 8001964:	f009 f9e2 	bl	800ad2c <iprintf>
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	0800ebc0 	.word	0x0800ebc0
 8001970:	0800ebc8 	.word	0x0800ebc8
 8001974:	20000274 	.word	0x20000274
 8001978:	0800ebb8 	.word	0x0800ebb8

0800197c <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af02      	add	r7, sp, #8
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	printf("analog_set_to_flash()\r\n");
 8001986:	482a      	ldr	r0, [pc, #168]	; (8001a30 <analog_set_on_flash+0xb4>)
 8001988:	f009 fa56 	bl	800ae38 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e046      	b.n	8001a20 <analog_set_on_flash+0xa4>
	{
		printf(ESC_MAG);
 8001992:	4828      	ldr	r0, [pc, #160]	; (8001a34 <analog_set_on_flash+0xb8>)
 8001994:	f009 f9ca 	bl	800ad2c <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001998:	4a27      	ldr	r2, [pc, #156]	; (8001a38 <analog_set_on_flash+0xbc>)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	885b      	ldrh	r3, [r3, #2]
 80019a2:	4619      	mov	r1, r3
 80019a4:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <analog_set_on_flash+0xbc>)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3310      	adds	r3, #16
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	885b      	ldrh	r3, [r3, #2]
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	460a      	mov	r2, r1
 80019b6:	68f9      	ldr	r1, [r7, #12]
 80019b8:	4820      	ldr	r0, [pc, #128]	; (8001a3c <analog_set_on_flash+0xc0>)
 80019ba:	f009 f9b7 	bl	800ad2c <iprintf>
		printf(ESC_DEF);
 80019be:	4820      	ldr	r0, [pc, #128]	; (8001a40 <analog_set_on_flash+0xc4>)
 80019c0:	f009 f9b4 	bl	800ad2c <iprintf>
		*(analogmin_ + i) = analogmin[i];
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	491d      	ldr	r1, [pc, #116]	; (8001a44 <analog_set_on_flash+0xc8>)
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80019d4:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	491a      	ldr	r1, [pc, #104]	; (8001a48 <analog_set_on_flash+0xcc>)
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80019e6:	801a      	strh	r2, [r3, #0]
		printf(ESC_GRE);
 80019e8:	4818      	ldr	r0, [pc, #96]	; (8001a4c <analog_set_on_flash+0xd0>)
 80019ea:	f009 f99f 	bl	800ad2c <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 80019ee:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <analog_set_on_flash+0xbc>)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	885b      	ldrh	r3, [r3, #2]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <analog_set_on_flash+0xbc>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3310      	adds	r3, #16
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	885b      	ldrh	r3, [r3, #2]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	480b      	ldr	r0, [pc, #44]	; (8001a3c <analog_set_on_flash+0xc0>)
 8001a10:	f009 f98c 	bl	800ad2c <iprintf>
		printf(ESC_DEF);
 8001a14:	480a      	ldr	r0, [pc, #40]	; (8001a40 <analog_set_on_flash+0xc4>)
 8001a16:	f009 f989 	bl	800ad2c <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b0f      	cmp	r3, #15
 8001a24:	d9b5      	bls.n	8001992 <analog_set_on_flash+0x16>
	}
}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	0800ebdc 	.word	0x0800ebdc
 8001a34:	0800ebf4 	.word	0x0800ebf4
 8001a38:	200007f0 	.word	0x200007f0
 8001a3c:	0800ebfc 	.word	0x0800ebfc
 8001a40:	0800ebb8 	.word	0x0800ebb8
 8001a44:	20000274 	.word	0x20000274
 8001a48:	200003d8 	.word	0x200003d8
 8001a4c:	0800ec38 	.word	0x0800ec38

08001a50 <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	#if D_ANALOG
	printf("analog_set_from_flash()\r\n");
	#endif
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e014      	b.n	8001a8a <analog_set_from_flash+0x3a>
	{
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		#endif
		analogmin[i] = *(analogmin_ + i);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	8819      	ldrh	r1, [r3, #0]
 8001a6a:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <analog_set_from_flash+0x50>)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	8819      	ldrh	r1, [r3, #0]
 8001a7c:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <analog_set_from_flash+0x54>)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d9e7      	bls.n	8001a60 <analog_set_from_flash+0x10>
		#if D_ANALOG
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
		#endif
	}
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000274 	.word	0x20000274
 8001aa4:	200003d8 	.word	0x200003d8

08001aa8 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 8001ab2:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <analog_set_calibrationsize+0x1c>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	7013      	strb	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	20000295 	.word	0x20000295

08001ac8 <analog_set_analogmode>:
{
	return calibrationsize;
}

void analog_set_analogmode(AnalogMode analogmode_)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <analog_set_analogmode+0x1c>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	7013      	strb	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20000294 	.word	0x20000294

08001ae8 <analog_read_analogmode>:

AnalogMode analog_read_analogmode()
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	return analogmode;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <analog_read_analogmode+0x14>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000294 	.word	0x20000294

08001b00 <analog_calibration_start>:

void analog_calibration_start()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	analog_set_analogmode(analogmode_all);
 8001b06:	2010      	movs	r0, #16
 8001b08:	f7ff ffde 	bl	8001ac8 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	e00d      	b.n	8001b2e <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <analog_calibration_start+0x48>)
 8001b16:	2100      	movs	r1, #0
 8001b18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <analog_calibration_start+0x4c>)
 8001b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	71fb      	strb	r3, [r7, #7]
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b0f      	cmp	r3, #15
 8001b32:	d9ee      	bls.n	8001b12 <analog_calibration_start+0x12>
    }
	analog_print_max();
 8001b34:	f7ff fef2 	bl	800191c <analog_print_max>
	analog_print_min();
 8001b38:	f7ff ff08 	bl	800194c <analog_print_min>
	analog_sensor_start();
 8001b3c:	f000 f83e 	bl	8001bbc <analog_sensor_start>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200003d8 	.word	0x200003d8
 8001b4c:	20000274 	.word	0x20000274

08001b50 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(analogmode_all);
 8001b54:	2010      	movs	r0, #16
 8001b56:	f7ff ffb7 	bl	8001ac8 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001b5a:	f000 f829 	bl	8001bb0 <analog_stop>
	analog_print_max();
 8001b5e:	f7ff fedd 	bl	800191c <analog_print_max>
	analog_print_min();
 8001b62:	f7ff fef3 	bl	800194c <analog_print_min>
	/* flashbuffer.analogmin/max = analogmin/max */
	analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8001b66:	4904      	ldr	r1, [pc, #16]	; (8001b78 <analog_calibration_stop+0x28>)
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <analog_calibration_stop+0x2c>)
 8001b6a:	f7ff ff07 	bl	800197c <analog_set_on_flash>
	flash_write();
 8001b6e:	f000 fd17 	bl	80025a0 <flash_write>
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000812 	.word	0x20000812
 8001b7c:	200007f2 	.word	0x200007f2

08001b80 <analog_init>:

void analog_init()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 8001b84:	2010      	movs	r0, #16
 8001b86:	f7ff ff8f 	bl	8001aa8 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <analog_init+0x20>)
 8001b8c:	f003 fc6c 	bl	8005468 <HAL_ADC_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <analog_init+0x1a>
    {
        Error_Handler();
 8001b96:	f001 fdc4 	bl	8003722 <Error_Handler>
    }
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000590 	.word	0x20000590

08001ba4 <analog_start>:

void analog_start()
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("analog_sensor_start()\r\n");
	#endif
	analog_sensor_start();
 8001ba8:	f000 f808 	bl	8001bbc <analog_sensor_start>
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <analog_stop>:

void analog_stop()
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001bb4:	f000 f81a 	bl	8001bec <analog_sensor_stop>
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <analog_sensor_start>:

void analog_sensor_start()
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	#if D_ANALOG
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
	#endif
    sensgettime = 0;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <analog_sensor_start+0x24>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	4906      	ldr	r1, [pc, #24]	; (8001be4 <analog_sensor_start+0x28>)
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <analog_sensor_start+0x2c>)
 8001bcc:	f003 fc90 	bl	80054f0 <HAL_ADC_Start_DMA>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <analog_sensor_start+0x1e>
    {
        Error_Handler();
 8001bd6:	f001 fda4 	bl	8003722 <Error_Handler>
    }
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000250 	.word	0x20000250
 8001be4:	20000254 	.word	0x20000254
 8001be8:	20000590 	.word	0x20000590

08001bec <analog_sensor_stop>:

void analog_sensor_stop()
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <analog_sensor_stop+0x10>)
 8001bf2:	f003 fd8d 	bl	8005710 <HAL_ADC_Stop_DMA>
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000590 	.word	0x20000590

08001c00 <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (float) (analogmax[i] - analogmin[i]);
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <analog_sensor_get+0x74>)
 8001c0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c12:	4619      	mov	r1, r3
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <analog_sensor_get+0x78>)
 8001c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c1c:	1acb      	subs	r3, r1, r3
 8001c1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c22:	fb02 f303 	mul.w	r3, r2, r3
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <analog_sensor_get+0x7c>)
 8001c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c36:	4619      	mov	r1, r3
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <analog_sensor_get+0x78>)
 8001c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c40:	1acb      	subs	r3, r1, r3
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c54:	ee17 2a90 	vmov	r2, s15
 8001c58:	b291      	uxth	r1, r2
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <analog_sensor_get+0x80>)
 8001c5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(float)800, 500);
#endif
	return analograte[i];
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <analog_sensor_get+0x80>)
 8001c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20000230 	.word	0x20000230
 8001c78:	20000274 	.word	0x20000274
 8001c7c:	200003d8 	.word	0x200003d8
 8001c80:	20000298 	.word	0x20000298

08001c84 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001c8c:	f000 f804 	bl	8001c98 <analog_get_and_sort>
#endif
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001c98:	b490      	push	{r4, r7}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001c9e:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <analog_get_and_sort+0x120>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d968      	bls.n	8001d78 <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001ca6:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <analog_get_and_sort+0x120>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001cac:	2300      	movs	r3, #0
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	e05f      	b.n	8001d72 <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	71bb      	strb	r3, [r7, #6]
 8001cb6:	e02d      	b.n	8001d14 <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	717b      	strb	r3, [r7, #5]
 8001cbc:	e023      	b.n	8001d06 <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001cbe:	797b      	ldrb	r3, [r7, #5]
 8001cc0:	1e5a      	subs	r2, r3, #1
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	493d      	ldr	r1, [pc, #244]	; (8001dbc <analog_get_and_sort+0x124>)
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cce:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001cd0:	7978      	ldrb	r0, [r7, #5]
 8001cd2:	79f9      	ldrb	r1, [r7, #7]
 8001cd4:	797b      	ldrb	r3, [r7, #5]
 8001cd6:	1e5a      	subs	r2, r3, #1
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	4c38      	ldr	r4, [pc, #224]	; (8001dbc <analog_get_and_sort+0x124>)
 8001cdc:	0100      	lsls	r0, r0, #4
 8001cde:	4401      	add	r1, r0
 8001ce0:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001ce4:	4935      	ldr	r1, [pc, #212]	; (8001dbc <analog_get_and_sort+0x124>)
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	4413      	add	r3, r2
 8001cea:	4602      	mov	r2, r0
 8001cec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001cf0:	797a      	ldrb	r2, [r7, #5]
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	4931      	ldr	r1, [pc, #196]	; (8001dbc <analog_get_and_sort+0x124>)
 8001cf6:	0112      	lsls	r2, r2, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001d00:	797b      	ldrb	r3, [r7, #5]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	717b      	strb	r3, [r7, #5]
 8001d06:	797a      	ldrb	r2, [r7, #5]
 8001d08:	79bb      	ldrb	r3, [r7, #6]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d8d7      	bhi.n	8001cbe <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001d0e:	79bb      	ldrb	r3, [r7, #6]
 8001d10:	3301      	adds	r3, #1
 8001d12:	71bb      	strb	r3, [r7, #6]
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d9ce      	bls.n	8001cb8 <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	4927      	ldr	r1, [pc, #156]	; (8001dbc <analog_get_and_sort+0x124>)
 8001d20:	3240      	adds	r2, #64	; 0x40
 8001d22:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d26:	4a26      	ldr	r2, [pc, #152]	; (8001dc0 <analog_get_and_sort+0x128>)
 8001d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <analog_get_and_sort+0x12c>)
 8001d30:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <analog_get_and_sort+0x128>)
 8001d38:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	428a      	cmp	r2, r1
 8001d40:	bf38      	it	cc
 8001d42:	460a      	movcc	r2, r1
 8001d44:	b291      	uxth	r1, r2
 8001d46:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <analog_get_and_sort+0x12c>)
 8001d48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <analog_get_and_sort+0x130>)
 8001d50:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <analog_get_and_sort+0x128>)
 8001d58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	428a      	cmp	r2, r1
 8001d60:	bf28      	it	cs
 8001d62:	460a      	movcs	r2, r1
 8001d64:	b291      	uxth	r1, r2
 8001d66:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <analog_get_and_sort+0x130>)
 8001d68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	71fb      	strb	r3, [r7, #7]
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d99c      	bls.n	8001cb2 <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	713b      	strb	r3, [r7, #4]
 8001d7c:	e00f      	b.n	8001d9e <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001d7e:	7939      	ldrb	r1, [r7, #4]
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <analog_get_and_sort+0x120>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	793b      	ldrb	r3, [r7, #4]
 8001d86:	4811      	ldr	r0, [pc, #68]	; (8001dcc <analog_get_and_sort+0x134>)
 8001d88:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001d8c:	490b      	ldr	r1, [pc, #44]	; (8001dbc <analog_get_and_sort+0x124>)
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	4413      	add	r3, r2
 8001d92:	4602      	mov	r2, r0
 8001d94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d98:	793b      	ldrb	r3, [r7, #4]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	713b      	strb	r3, [r7, #4]
 8001d9e:	793b      	ldrb	r3, [r7, #4]
 8001da0:	2b0f      	cmp	r3, #15
 8001da2:	d9ec      	bls.n	8001d7e <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <analog_get_and_sort+0x120>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <analog_get_and_sort+0x120>)
 8001dac:	6013      	str	r3, [r2, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc90      	pop	{r4, r7}
 8001db6:	4770      	bx	lr
 8001db8:	20000250 	.word	0x20000250
 8001dbc:	200002b8 	.word	0x200002b8
 8001dc0:	20000230 	.word	0x20000230
 8001dc4:	200003d8 	.word	0x200003d8
 8001dc8:	20000274 	.word	0x20000274
 8001dcc:	20000254 	.word	0x20000254

08001dd0 <course_init>:
float course_curvature_radius;
float course_update_section_sampling_time_s;
unsigned int __debug_execute_count__;

void course_init(unsigned short int samplingtime_ms)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
	imu_init();
 8001dda:	f7ff f963 	bl	80010a4 <imu_init>
	course_state_count = 0;
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <course_init+0x24>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	801a      	strh	r2, [r3, #0]
	course_set_update_section_freq_ms(samplingtime_ms);
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f862 	bl	8001eb0 <course_set_update_section_freq_ms>
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000404 	.word	0x20000404

08001df8 <course_start>:

void course_start()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	/* course_start */
	course_reset_section_degree();
 8001dfc:	f000 f882 	bl	8001f04 <course_reset_section_degree>
	course_reset_flash();
 8001e00:	f000 fa20 	bl	8002244 <course_reset_flash>
	imu_start();
 8001e04:	f7ff f9f6 	bl	80011f4 <imu_start>
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <course_stop>:

void course_stop()
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	if(rotary_read_playmode() == search || rotary_read_playmode() == motor_free)
 8001e10:	f7ff fbba 	bl	8001588 <rotary_read_playmode>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d004      	beq.n	8001e24 <course_stop+0x18>
 8001e1a:	f7ff fbb5 	bl	8001588 <rotary_read_playmode>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d101      	bne.n	8001e28 <course_stop+0x1c>
	{
		flash_write();
 8001e24:	f000 fbbc 	bl	80025a0 <flash_write>
	}
	imu_stop();
 8001e28:	f7ff f9eb 	bl	8001202 <imu_stop>
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <course_update_section_degree>:
 * 好きな時に course_section_degree をリセットする
 * course_update_section_degree() は course_update_section_sampling_time_s の周期で常に実行され続ける
 * 
 */
void course_update_section_degree()
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
	float tmp;
	imu_update_gyro();
 8001e36:	f7ff f9eb 	bl	8001210 <imu_update_gyro>
	#if D_COURSE_WHILE
	printf("imu_read_yaw() = %7.2lf, course_section_degree = %7.2lf\r\n", imu_read_yaw(), course_section_degree);
	#endif
	tmp = course_section_degree + imu_read_yaw() * course_update_section_sampling_time_s;
 8001e3a:	f7ff fa9d 	bl	8001378 <imu_read_yaw>
 8001e3e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <course_update_section_degree+0x78>)
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <course_update_section_degree+0x7c>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e56:	edc7 7a01 	vstr	s15, [r7, #4]
	course_section_degree = low_pass_filter(tmp, course_section_degree, 0);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe fb74 	bl	8000548 <__aeabi_f2d>
 8001e60:	4604      	mov	r4, r0
 8001e62:	460d      	mov	r5, r1
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <course_update_section_degree+0x7c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb6d 	bl	8000548 <__aeabi_f2d>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	ed9f 2b0b 	vldr	d2, [pc, #44]	; 8001ea0 <course_update_section_degree+0x70>
 8001e76:	ec43 2b11 	vmov	d1, r2, r3
 8001e7a:	ec45 4b10 	vmov	d0, r4, r5
 8001e7e:	f000 fbb5 	bl	80025ec <low_pass_filter>
 8001e82:	ec53 2b10 	vmov	r2, r3, d0
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fead 	bl	8000be8 <__aeabi_d2f>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <course_update_section_degree+0x7c>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9c:	f3af 8000 	nop.w
	...
 8001ea8:	20000400 	.word	0x20000400
 8001eac:	20000408 	.word	0x20000408

08001eb0 <course_set_update_section_freq_ms>:

void course_set_update_section_freq_ms(unsigned short int samplingtime_ms)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80fb      	strh	r3, [r7, #6]
	course_update_section_sampling_time_s = samplingtime_ms / (float) 1000;
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001ee0 <course_set_update_section_freq_ms+0x30>
 8001ec8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <course_set_update_section_freq_ms+0x34>)
 8001ece:	edc3 7a00 	vstr	s15, [r3]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	447a0000 	.word	0x447a0000
 8001ee4:	20000400 	.word	0x20000400

08001ee8 <course_read_section_degree>:

float course_read_section_degree()
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
	return course_section_degree;
 8001eec:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <course_read_section_degree+0x18>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	ee07 3a90 	vmov	s15, r3
}
 8001ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	20000408 	.word	0x20000408

08001f04 <course_reset_section_degree>:

void course_reset_section_degree()
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
	course_section_degree = 0;
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <course_reset_section_degree+0x18>)
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000408 	.word	0x20000408

08001f20 <course_reset>:

void course_reset()
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	course_reset_section_degree();
 8001f24:	f7ff ffee 	bl	8001f04 <course_reset_section_degree>
	section_length_reset();
 8001f28:	f001 fd4e 	bl	80039c8 <section_length_reset>
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <course_read_curvature_radius>:

float course_read_curvature_radius()
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
	return course_curvature_radius;
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <course_read_curvature_radius+0x18>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	ee07 3a90 	vmov	s15, r3
}
 8001f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	200003fc 	.word	0x200003fc

08001f4c <course_read_state_count>:

uint16_t course_read_state_count()
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
    return course_state_count;
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <course_read_state_count+0x14>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20000404 	.word	0x20000404

08001f64 <course_increment_state_count>:

void course_increment_state_count()
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
    course_state_count++;
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <course_increment_state_count+0x1c>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <course_increment_state_count+0x1c>)
 8001f72:	801a      	strh	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000404 	.word	0x20000404
 8001f84:	00000000 	.word	0x00000000

08001f88 <course_calclate_radius>:
 * course_reset()					// 角度と長さ情報をリセットする
 * の順に呼び出す必要がある
 * 
 */
void course_calclate_radius()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
    float curvature_radius;
	float section_degree, section_length;
	float section_radian;

    //! 現在の区間長を取得する */
	section_length = section_length_read();
 8001f8e:	f001 fd43 	bl	8003a18 <section_length_read>
 8001f92:	ed87 0a03 	vstr	s0, [r7, #12]
	//! 現在点を次の区間開始点に設定する
	section_length_set_buffer();
 8001f96:	f001 fd75 	bl	8003a84 <section_length_set_buffer>
	//! 角度を取得する
	section_degree = course_read_section_degree();
 8001f9a:	f7ff ffa5 	bl	8001ee8 <course_read_section_degree>
 8001f9e:	ed87 0a02 	vstr	s0, [r7, #8]

#if MODE_IMU_CALCLATE
	course_section_length = // course_section_length_from_imu
#endif

	section_radian = section_degree * M_PI / (float) 180;
 8001fa2:	68b8      	ldr	r0, [r7, #8]
 8001fa4:	f7fe fad0 	bl	8000548 <__aeabi_f2d>
 8001fa8:	a315      	add	r3, pc, #84	; (adr r3, 8002000 <course_calclate_radius+0x78>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fb23 	bl	80005f8 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <course_calclate_radius+0x70>)
 8001fc0:	f7fe fc44 	bl	800084c <__aeabi_ddiv>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fe0c 	bl	8000be8 <__aeabi_d2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	607b      	str	r3, [r7, #4]
	curvature_radius = section_length / section_radian;
 8001fd4:	edd7 6a03 	vldr	s13, [r7, #12]
 8001fd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe0:	edc7 7a00 	vstr	s15, [r7]
	course_curvature_radius = curvature_radius;
 8001fe4:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <course_calclate_radius+0x74>)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6013      	str	r3, [r2, #0]
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	40668000 	.word	0x40668000
 8001ffc:	200003fc 	.word	0x200003fc
 8002000:	54442d18 	.word	0x54442d18
 8002004:	400921fb 	.word	0x400921fb

08002008 <course_state_function>:
 * 左センサを読んだら、あるいは、一定区間進んだら course_state_function() を実行するようにプログラムする
 * 探索か二次走行かは course_state_function() 関数内で判断する必要がある
 * 
 */
void course_state_function()
{
 8002008:	b590      	push	{r4, r7, lr}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
	if(rotary_read_playmode() == search || rotary_read_playmode() == motor_free )
 800200e:	f7ff fabb 	bl	8001588 <rotary_read_playmode>
 8002012:	4603      	mov	r3, r0
 8002014:	2b01      	cmp	r3, #1
 8002016:	d004      	beq.n	8002022 <course_state_function+0x1a>
 8002018:	f7ff fab6 	bl	8001588 <rotary_read_playmode>
 800201c:	4603      	mov	r3, r0
 800201e:	2b04      	cmp	r3, #4
 8002020:	d126      	bne.n	8002070 <course_state_function+0x68>
	{
		float radius;
		flashbuffer.course_state_count_max = course_read_state_count();
 8002022:	f7ff ff93 	bl	8001f4c <course_read_state_count>
 8002026:	4603      	mov	r3, r0
 8002028:	461a      	mov	r2, r3
 800202a:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <course_state_function+0x90>)
 800202c:	801a      	strh	r2, [r3, #0]
		course_calclate_radius();
 800202e:	f7ff ffab 	bl	8001f88 <course_calclate_radius>
		radius = course_read_curvature_radius();
 8002032:	f7ff ff7d 	bl	8001f30 <course_read_curvature_radius>
 8002036:	ed87 0a01 	vstr	s0, [r7, #4]
		flashbuffer.radius[course_state_count] = radius;
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <course_state_function+0x94>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	4a16      	ldr	r2, [pc, #88]	; (8002098 <course_state_function+0x90>)
 8002040:	3310      	adds	r3, #16
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	3304      	adds	r3, #4
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	601a      	str	r2, [r3, #0]
		flashbuffer.speed[course_state_count] = course_radius2speed(radius);
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <course_state_function+0x94>)
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	461c      	mov	r4, r3
 8002052:	ed97 0a01 	vldr	s0, [r7, #4]
 8002056:	f000 f829 	bl	80020ac <course_radius2speed>
 800205a:	4603      	mov	r3, r0
 800205c:	4619      	mov	r1, r3
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <course_state_function+0x90>)
 8002060:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	4413      	add	r3, r2
 8002068:	460a      	mov	r2, r1
 800206a:	809a      	strh	r2, [r3, #4]
		course_reset();
 800206c:	f7ff ff58 	bl	8001f20 <course_reset>
	}
	if(rotary_read_playmode() == accel)
 8002070:	f7ff fa8a 	bl	8001588 <rotary_read_playmode>
 8002074:	4603      	mov	r3, r0
 8002076:	2b02      	cmp	r3, #2
 8002078:	d107      	bne.n	800208a <course_state_function+0x82>
	{
		float fixed_velocity_target;
		fixed_velocity_target = fixed_speed();
 800207a:	f000 f9d3 	bl	8002424 <fixed_speed>
 800207e:	ed87 0a00 	vstr	s0, [r7]
		velotrace_set_target_direct(fixed_velocity_target);
 8002082:	ed97 0a00 	vldr	s0, [r7]
 8002086:	f002 ffb9 	bl	8004ffc <velotrace_set_target_direct>
	}
	course_increment_state_count();
 800208a:	f7ff ff6b 	bl	8001f64 <course_increment_state_count>
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bd90      	pop	{r4, r7, pc}
 8002096:	bf00      	nop
 8002098:	200007f0 	.word	0x200007f0
 800209c:	20000404 	.word	0x20000404

080020a0 <course_d_print>:

void course_d_print()
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
#if D_COURSE
	//! length.h を書き直す前の状態
	//! printf("length = %7.2lf, degree = %7.2lf, radius = %7.2lf\r\n", length_read(), course_read_section_degree(), course_read_curvature_radius());
	// printf("course_state_function の実行回数 = %d\r\n", __debug_eradiusecute_count__);
#endif
	encoder_d_print();
 80020a4:	f000 f92c 	bl	8002300 <encoder_d_print>
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}

080020ac <course_radius2speed>:

uint16_t course_radius2speed(float radius)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t speed;
	if(radius < 0)
 80020b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c2:	d505      	bpl.n	80020d0 <course_radius2speed+0x24>
	{
		radius = - radius;
 80020c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80020c8:	eef1 7a67 	vneg.f32	s15, s15
 80020cc:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	if(radius < 0.1f) speed = 1.000;
 80020d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020d4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800218c <course_radius2speed+0xe0>
 80020d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e0:	d502      	bpl.n	80020e8 <course_radius2speed+0x3c>
 80020e2:	2301      	movs	r3, #1
 80020e4:	81fb      	strh	r3, [r7, #14]
 80020e6:	e049      	b.n	800217c <course_radius2speed+0xd0>
    else if(radius < 0.25f) speed = 1.000;
 80020e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ec:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80020f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f8:	d502      	bpl.n	8002100 <course_radius2speed+0x54>
 80020fa:	2301      	movs	r3, #1
 80020fc:	81fb      	strh	r3, [r7, #14]
 80020fe:	e03d      	b.n	800217c <course_radius2speed+0xd0>
    else if(radius < 0.5f) speed = 1.000;
 8002100:	edd7 7a01 	vldr	s15, [r7, #4]
 8002104:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800210c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002110:	d502      	bpl.n	8002118 <course_radius2speed+0x6c>
 8002112:	2301      	movs	r3, #1
 8002114:	81fb      	strh	r3, [r7, #14]
 8002116:	e031      	b.n	800217c <course_radius2speed+0xd0>
    else if(radius < 0.75f) speed = 1.000;
 8002118:	edd7 7a01 	vldr	s15, [r7, #4]
 800211c:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8002120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	d502      	bpl.n	8002130 <course_radius2speed+0x84>
 800212a:	2301      	movs	r3, #1
 800212c:	81fb      	strh	r3, [r7, #14]
 800212e:	e025      	b.n	800217c <course_radius2speed+0xd0>
    else if(radius < 1.0f) speed = 1.000;
 8002130:	edd7 7a01 	vldr	s15, [r7, #4]
 8002134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	d502      	bpl.n	8002148 <course_radius2speed+0x9c>
 8002142:	2301      	movs	r3, #1
 8002144:	81fb      	strh	r3, [r7, #14]
 8002146:	e019      	b.n	800217c <course_radius2speed+0xd0>
    else if(radius < 1.5f) speed = 1.000;
 8002148:	edd7 7a01 	vldr	s15, [r7, #4]
 800214c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	d502      	bpl.n	8002160 <course_radius2speed+0xb4>
 800215a:	2301      	movs	r3, #1
 800215c:	81fb      	strh	r3, [r7, #14]
 800215e:	e00d      	b.n	800217c <course_radius2speed+0xd0>
    else if(radius < 2.0f) speed = 1.000;
 8002160:	edd7 7a01 	vldr	s15, [r7, #4]
 8002164:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	d502      	bpl.n	8002178 <course_radius2speed+0xcc>
 8002172:	2301      	movs	r3, #1
 8002174:	81fb      	strh	r3, [r7, #14]
 8002176:	e001      	b.n	800217c <course_radius2speed+0xd0>
    else speed = 1.000;
 8002178:	2301      	movs	r3, #1
 800217a:	81fb      	strh	r3, [r7, #14]
	// speed = - (4238566523291511 * pow(radius, 5)) / (double) 633825300114114700748351602688 + (8582934509267735 * pow(radius, 4)) / (double) 77371252455336267181195264 - (1459060547913519 * pow(radius, 3)) / (double) 2361183241434822606848 + (2682365349594497 * pow(radius, 2)) / (double) 2305843009213693952 + (1737420468106149 * radius) / (double) 4503599627370496 + 7057670738269725 / (double) 8796093022208;
	return speed;
 800217c:	89fb      	ldrh	r3, [r7, #14]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	3dcccccd 	.word	0x3dcccccd

08002190 <course_print_flash>:

void course_print_flash()
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
	uint16_t course_state_size;
	course_state_size = COURSE_STATE_SIZE;
 8002196:	f241 7370 	movw	r3, #6000	; 0x1770
 800219a:	81fb      	strh	r3, [r7, #14]
	//! print flash contents
	while(switch_read_enter())
 800219c:	e043      	b.n	8002226 <course_print_flash+0x96>
	{
		if(course_state_size > 0)
 800219e:	89fb      	ldrh	r3, [r7, #14]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d03c      	beq.n	800221e <course_print_flash+0x8e>
		{
			uint16_t index;
			float print_data;
			index = COURSE_STATE_SIZE - course_state_size;
 80021a4:	89fb      	ldrh	r3, [r7, #14]
 80021a6:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 80021aa:	3310      	adds	r3, #16
 80021ac:	80fb      	strh	r3, [r7, #6]
			switch(rotary_read_value())
 80021ae:	f7ff fa03 	bl	80015b8 <rotary_read_value>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b0e      	cmp	r3, #14
 80021b6:	d00a      	beq.n	80021ce <course_print_flash+0x3e>
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d116      	bne.n	80021ea <course_print_flash+0x5a>
			{
				case 15:
					print_data = flashbuffer.radius[index];
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	4a1f      	ldr	r2, [pc, #124]	; (800223c <course_print_flash+0xac>)
 80021c0:	3310      	adds	r3, #16
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3304      	adds	r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	60bb      	str	r3, [r7, #8]
					break;
 80021cc:	e016      	b.n	80021fc <course_print_flash+0x6c>
				case 14:
					print_data = flashbuffer.speed[index];
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <course_print_flash+0xac>)
 80021d2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	889b      	ldrh	r3, [r3, #4]
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e4:	edc7 7a02 	vstr	s15, [r7, #8]
					break;
 80021e8:	e008      	b.n	80021fc <course_print_flash+0x6c>
				default :
					print_data = flashbuffer.radius[index];
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	4a13      	ldr	r2, [pc, #76]	; (800223c <course_print_flash+0xac>)
 80021ee:	3310      	adds	r3, #16
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	3304      	adds	r3, #4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60bb      	str	r3, [r7, #8]
					break;
 80021fa:	bf00      	nop
			}
			printf("%6d, %8lf\r\n", index, print_data);
 80021fc:	88fc      	ldrh	r4, [r7, #6]
 80021fe:	68b8      	ldr	r0, [r7, #8]
 8002200:	f7fe f9a2 	bl	8000548 <__aeabi_f2d>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4621      	mov	r1, r4
 800220a:	480d      	ldr	r0, [pc, #52]	; (8002240 <course_print_flash+0xb0>)
 800220c:	f008 fd8e 	bl	800ad2c <iprintf>
			course_state_size = course_state_size - 1;
 8002210:	89fb      	ldrh	r3, [r7, #14]
 8002212:	3b01      	subs	r3, #1
 8002214:	81fb      	strh	r3, [r7, #14]
			HAL_Delay(100);
 8002216:	2064      	movs	r0, #100	; 0x64
 8002218:	f003 f902 	bl	8005420 <HAL_Delay>
 800221c:	e003      	b.n	8002226 <course_print_flash+0x96>
		}
		else
		{
			HAL_Delay(1000);
 800221e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002222:	f003 f8fd 	bl	8005420 <HAL_Delay>
	while(switch_read_enter())
 8002226:	f7ff faaf 	bl	8001788 <switch_read_enter>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1b6      	bne.n	800219e <course_print_flash+0xe>
		}
	}
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bd90      	pop	{r4, r7, pc}
 800223a:	bf00      	nop
 800223c:	200007f0 	.word	0x200007f0
 8002240:	0800ec40 	.word	0x0800ec40

08002244 <course_reset_flash>:

void course_reset_flash()
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 800224a:	f241 7370 	movw	r3, #6000	; 0x1770
 800224e:	80fb      	strh	r3, [r7, #6]
 8002250:	e017      	b.n	8002282 <course_reset_flash+0x3e>
	{
		uint16_t index;
		index = COURSE_STATE_SIZE - course_state_size;
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 8002258:	3310      	adds	r3, #16
 800225a:	80bb      	strh	r3, [r7, #4]
		flashbuffer.radius[index] = COURSE_RADIUS_MAX;
 800225c:	88bb      	ldrh	r3, [r7, #4]
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <course_reset_flash+0x54>)
 8002260:	3310      	adds	r3, #16
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	3304      	adds	r3, #4
 8002268:	4a0c      	ldr	r2, [pc, #48]	; (800229c <course_reset_flash+0x58>)
 800226a:	601a      	str	r2, [r3, #0]
		flashbuffer.speed[index] = COURSE_SPEED_DEFAULT;
 800226c:	88bb      	ldrh	r3, [r7, #4]
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <course_reset_flash+0x54>)
 8002270:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	2200      	movs	r2, #0
 800227a:	809a      	strh	r2, [r3, #4]
	for(uint16_t course_state_size = COURSE_STATE_SIZE; course_state_size > 0; course_state_size = course_state_size - 1)
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	3b01      	subs	r3, #1
 8002280:	80fb      	strh	r3, [r7, #6]
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1e4      	bne.n	8002252 <course_reset_flash+0xe>
	}
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	200007f0 	.word	0x200007f0
 800229c:	477fff00 	.word	0x477fff00

080022a0 <encoder_length_left>:
    //! 単位は [ um ]
    return (float) encoder * (float) LENGTHPERPULSE;
}

float encoder_length_left()
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_left() > ");
    printf("encoder_left * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_left, LENGTHPERPULSE, encoder_left * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_left * (float) LENGTHPERPULSE;
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <encoder_length_left+0x28>)
 80022a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022cc <encoder_length_left+0x2c>
 80022b6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80022ba:	eeb0 0a67 	vmov.f32	s0, s15
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	200007e4 	.word	0x200007e4
 80022cc:	41076bf7 	.word	0x41076bf7

080022d0 <encoder_length_right>:

float encoder_length_right()
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_right() > ");
    printf("encoder_right * (float) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_right, LENGTHPERPULSE, encoder_right * (float) LENGTHPERPULSE);
    #endif
    return (float) encoder_right * (float) LENGTHPERPULSE;
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <encoder_length_right+0x28>)
 80022d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022fc <encoder_length_right+0x2c>
 80022e6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80022ea:	eeb0 0a67 	vmov.f32	s0, s15
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	200007ec 	.word	0x200007ec
 80022fc:	41076bf7 	.word	0x41076bf7

08002300 <encoder_d_print>:

void encoder_d_print()
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("encoder.c > encoder_left = %5d, encoder_left = %5d, encoder = %f\r\n", encoder_left, encoder_right, encoder);
    #endif
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <encoder_set>:

/* only read tim10_update_values */
void encoder_set()
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <encoder_set+0x58>)
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	b29b      	uxth	r3, r3
 800231a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800231e:	b29b      	uxth	r3, r3
 8002320:	b21a      	sxth	r2, r3
 8002322:	4b12      	ldr	r3, [pc, #72]	; (800236c <encoder_set+0x5c>)
 8002324:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <encoder_set+0x60>)
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	b29b      	uxth	r3, r3
 800232c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002330:	b29b      	uxth	r3, r3
 8002332:	b21a      	sxth	r2, r3
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <encoder_set+0x64>)
 8002336:	801a      	strh	r2, [r3, #0]
    //! 単位 [ cnt / sampling_time_s ]
    encoder = (encoder_left + encoder_right) / (float) 2;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <encoder_set+0x5c>)
 800233a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233e:	461a      	mov	r2, r3
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <encoder_set+0x64>)
 8002342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002346:	4413      	add	r3, r2
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002350:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <encoder_set+0x68>)
 800235a:	edc3 7a00 	vstr	s15, [r3]
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set() > ");
    printf("encoder_left = %6d, encoder_right = %6d, encoder = %6.1f\r\n", encoder_left, encoder_right, encoder);
    #endif

    encoder_set_middle();
 800235e:	f000 f84d 	bl	80023fc <encoder_set_middle>
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40010000 	.word	0x40010000
 800236c:	200007e4 	.word	0x200007e4
 8002370:	40000400 	.word	0x40000400
 8002374:	200007ec 	.word	0x200007ec
 8002378:	200007e8 	.word	0x200007e8

0800237c <encoder_init>:

void encoder_init()
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
    #endif
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
    encoder_left = 0;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <encoder_start+0x38>)
 8002392:	2200      	movs	r2, #0
 8002394:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <encoder_start+0x3c>)
 8002398:	2200      	movs	r2, #0
 800239a:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <encoder_start+0x40>)
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

    encoder_set_middle();
 80023a4:	f000 f82a 	bl	80023fc <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80023a8:	213c      	movs	r1, #60	; 0x3c
 80023aa:	4809      	ldr	r0, [pc, #36]	; (80023d0 <encoder_start+0x44>)
 80023ac:	f006 fcd0 	bl	8008d50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80023b0:	213c      	movs	r1, #60	; 0x3c
 80023b2:	4808      	ldr	r0, [pc, #32]	; (80023d4 <encoder_start+0x48>)
 80023b4:	f006 fccc 	bl	8008d50 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 80023b8:	4807      	ldr	r0, [pc, #28]	; (80023d8 <encoder_start+0x4c>)
 80023ba:	f006 f9fd 	bl	80087b8 <HAL_TIM_Base_Start_IT>
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200007e4 	.word	0x200007e4
 80023c8:	200007ec 	.word	0x200007ec
 80023cc:	200007e8 	.word	0x200007e8
 80023d0:	200006c8 	.word	0x200006c8
 80023d4:	20000548 	.word	0x20000548
 80023d8:	20000500 	.word	0x20000500

080023dc <encoder_stop>:

void encoder_stop()
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 80023e0:	213c      	movs	r1, #60	; 0x3c
 80023e2:	4804      	ldr	r0, [pc, #16]	; (80023f4 <encoder_stop+0x18>)
 80023e4:	f006 fd42 	bl	8008e6c <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 80023e8:	213c      	movs	r1, #60	; 0x3c
 80023ea:	4803      	ldr	r0, [pc, #12]	; (80023f8 <encoder_stop+0x1c>)
 80023ec:	f006 fd3e 	bl	8008e6c <HAL_TIM_Encoder_Stop>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	200006c8 	.word	0x200006c8
 80023f8:	20000548 	.word	0x20000548

080023fc <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <encoder_set_middle+0x20>)
 8002402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <encoder_set_middle+0x24>)
 800240a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set_middle() > ");
    printf("TIM1 -> CNT = %6lu, TIM3 -> CNT = %6lu\r\n", TIM1->CNT, TIM3->CNT);
    #endif
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40010000 	.word	0x40010000
 8002420:	40000400 	.word	0x40000400

08002424 <fixed_speed>:
 * ( 速度 PID の目標値 ) = fixed_speed();
 * で大丈夫なはず。
 * 
 */
float fixed_speed()
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
    float speed_now, speed_next;
    float accel;
    float speed_target;
    uint16_t course_state_count;

    course_state_count = course_read_state_count();
 800242a:	f7ff fd8f 	bl	8001f4c <course_read_state_count>
 800242e:	4603      	mov	r3, r0
 8002430:	827b      	strh	r3, [r7, #18]
    speed_now = flashbuffer.speed[course_state_count];
 8002432:	8a7b      	ldrh	r3, [r7, #18]
 8002434:	4a2f      	ldr	r2, [pc, #188]	; (80024f4 <fixed_speed+0xd0>)
 8002436:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	889b      	ldrh	r3, [r3, #4]
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002448:	edc7 7a03 	vstr	s15, [r7, #12]
    speed_next = flashbuffer.speed[course_state_count + 1];
 800244c:	8a7b      	ldrh	r3, [r7, #18]
 800244e:	3301      	adds	r3, #1
 8002450:	4a28      	ldr	r2, [pc, #160]	; (80024f4 <fixed_speed+0xd0>)
 8002452:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	889b      	ldrh	r3, [r3, #4]
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002464:	edc7 7a02 	vstr	s15, [r7, #8]
    section_time = COURSE_SAMPLING_LENGTH / (float) (speed_next - speed_now);
 8002468:	ed97 7a02 	vldr	s14, [r7, #8]
 800246c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002470:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002474:	eddf 6a20 	vldr	s13, [pc, #128]	; 80024f8 <fixed_speed+0xd4>
 8002478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800247c:	edc7 7a01 	vstr	s15, [r7, #4]
    accel = (speed_next - speed_now) / section_time;
 8002480:	ed97 7a02 	vldr	s14, [r7, #8]
 8002484:	edd7 7a03 	vldr	s15, [r7, #12]
 8002488:	ee77 6a67 	vsub.f32	s13, s14, s15
 800248c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002494:	edc7 7a00 	vstr	s15, [r7]
    if(accel > ACCEL_MAX)
 8002498:	edd7 7a00 	vldr	s15, [r7]
 800249c:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80024a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a8:	dd07      	ble.n	80024ba <fixed_speed+0x96>
    {
        speed_target = ACCEL_MAX * COURSE_SAMPLING_LENGTH + speed_next;
 80024aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ae:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80024fc <fixed_speed+0xd8>
 80024b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024b6:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    if(accel < - DEACCEL_MAX)
 80024ba:	edd7 7a00 	vldr	s15, [r7]
 80024be:	eebb 7a01 	vmov.f32	s14, #177	; 0xc1880000 -17.0
 80024c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ca:	d508      	bpl.n	80024de <fixed_speed+0xba>
    {
        speed_target = - DEACCEL_MAX * COURSE_SAMPLING_LENGTH + speed_next;
 80024cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80024d0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80024fc <fixed_speed+0xd8>
 80024d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024d8:	edc7 7a05 	vstr	s15, [r7, #20]
 80024dc:	e001      	b.n	80024e2 <fixed_speed+0xbe>
    }
    else
    {
        speed_target = speed_now;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	617b      	str	r3, [r7, #20]
    }

    return speed_target;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	ee07 3a90 	vmov	s15, r3
}
 80024e8:	eeb0 0a67 	vmov.f32	s0, s15
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200007f0 	.word	0x200007f0
 80024f8:	3c23d70a 	.word	0x3c23d70a
 80024fc:	3e2e147b 	.word	0x3e2e147b

08002500 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 800250a:	230b      	movs	r3, #11
 800250c:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 800250e:	2301      	movs	r3, #1
 8002510:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8002512:	2302      	movs	r3, #2
 8002514:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 800251a:	463a      	mov	r2, r7
 800251c:	1d3b      	adds	r3, r7, #4
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f004 faab 	bl	8006a7c <HAL_FLASHEx_Erase>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 800253a:	f004 f93d 	bl	80067b8 <HAL_FLASH_Unlock>
	flash_erase();
 800253e:	f7ff ffdf 	bl	8002500 <flash_erase>

	for (uint32_t add = address; add < (address + size); add++)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	e00e      	b.n	8002566 <flash_writting+0x38>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	6979      	ldr	r1, [r7, #20]
 8002554:	2000      	movs	r0, #0
 8002556:	f004 f8db 	bl	8006710 <HAL_FLASH_Program>
		data++;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3301      	adds	r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	429a      	cmp	r2, r3
 8002570:	d3ea      	bcc.n	8002548 <flash_writting+0x1a>
	}

	HAL_FLASH_Lock();
 8002572:	f004 f943 	bl	80067fc <HAL_FLASH_Lock>
#endif
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4619      	mov	r1, r3
 8002590:	68b8      	ldr	r0, [r7, #8]
 8002592:	f007 fd3b 	bl	800a00c <memcpy>
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <flash_write>:

void flash_write()
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	flash_writting(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <flash_write+0x18>)
 80025a6:	f648 42e4 	movw	r2, #36068	; 0x8ce4
 80025aa:	4904      	ldr	r1, [pc, #16]	; (80025bc <flash_write+0x1c>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ffbe 	bl	800252e <flash_writting>
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	080e0000 	.word	0x080e0000
 80025bc:	200007f0 	.word	0x200007f0

080025c0 <flash_read>:

void flash_read()
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	flash_reading(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <flash_read+0x18>)
 80025c6:	f648 42e4 	movw	r2, #36068	; 0x8ce4
 80025ca:	4904      	ldr	r1, [pc, #16]	; (80025dc <flash_read+0x1c>)
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ffd6 	bl	800257e <flash_reading>
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	080e0000 	.word	0x080e0000
 80025dc:	200007f0 	.word	0x200007f0

080025e0 <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
	flash_read();
 80025e4:	f7ff ffec 	bl	80025c0 <flash_read>
}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}

080025ec <low_pass_filter>:
#include "function.h"

double low_pass_filter(double val, double pre_val, double gamma)
{
 80025ec:	b5b0      	push	{r4, r5, r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	ed87 0b04 	vstr	d0, [r7, #16]
 80025f6:	ed87 1b02 	vstr	d1, [r7, #8]
 80025fa:	ed87 2b00 	vstr	d2, [r7]
	return (double) (gamma * (double) pre_val
 80025fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002602:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002606:	f7fd fff7 	bl	80005f8 <__aeabi_dmul>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4614      	mov	r4, r2
 8002610:	461d      	mov	r5, r3
			+ (double) (1 - gamma) * (double) val);
 8002612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002616:	f04f 0000 	mov.w	r0, #0
 800261a:	490e      	ldr	r1, [pc, #56]	; (8002654 <low_pass_filter+0x68>)
 800261c:	f7fd fe34 	bl	8000288 <__aeabi_dsub>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800262c:	f7fd ffe4 	bl	80005f8 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
	return (double) (gamma * (double) pre_val
 8002634:	4620      	mov	r0, r4
 8002636:	4629      	mov	r1, r5
 8002638:	f7fd fe28 	bl	800028c <__adddf3>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	ec43 2b17 	vmov	d7, r2, r3
}
 8002644:	eeb0 0a47 	vmov.f32	s0, s14
 8002648:	eef0 0a67 	vmov.f32	s1, s15
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bdb0      	pop	{r4, r5, r7, pc}
 8002652:	bf00      	nop
 8002654:	3ff00000 	.word	0x3ff00000

08002658 <vector3_creation>:

    return vector_sum;
}

Vector3 vector3_creation(float x, float y, float z)
{
 8002658:	b480      	push	{r7}
 800265a:	b08f      	sub	sp, #60	; 0x3c
 800265c:	af00      	add	r7, sp, #0
 800265e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002662:	edc7 0a06 	vstr	s1, [r7, #24]
 8002666:	ed87 1a05 	vstr	s2, [r7, #20]
    Vector3 new;
    new.x = x;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	623b      	str	r3, [r7, #32]
    new.y = y;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
    new.z = z;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
    return new;
 8002676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267a:	f107 0220 	add.w	r2, r7, #32
 800267e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002680:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002684:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268a:	ee06 1a90 	vmov	s13, r1
 800268e:	ee07 2a10 	vmov	s14, r2
 8002692:	ee07 3a90 	vmov	s15, r3
}
 8002696:	eeb0 0a66 	vmov.f32	s0, s13
 800269a:	eef0 0a47 	vmov.f32	s1, s14
 800269e:	eeb0 1a67 	vmov.f32	s2, s15
 80026a2:	373c      	adds	r7, #60	; 0x3c
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <length_set_sampling_time_ms>:
float velocity_left, velocity_right;
float length_update_sampling_time_s;
float started;

void length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	80fb      	strh	r3, [r7, #6]
    length_update_sampling_time_s = samplingtime_ms / (float) 1000;
 80026b6:	88fb      	ldrh	r3, [r7, #6]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026c0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80026dc <length_set_sampling_time_ms+0x30>
 80026c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <length_set_sampling_time_ms+0x34>)
 80026ca:	edc3 7a00 	vstr	s15, [r3]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	447a0000 	.word	0x447a0000
 80026e0:	200094d4 	.word	0x200094d4

080026e4 <length_init>:

void length_init(unsigned short int samplingtime_ms)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
    started = 0;
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <length_init+0x28>)
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
    length_set_sampling_time_ms(samplingtime_ms);
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ffd7 	bl	80026ac <length_set_sampling_time_ms>
    encoder_init();
 80026fe:	f7ff fe3d 	bl	800237c <encoder_init>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200094dc 	.word	0x200094dc

08002710 <length_start>:

void length_start()
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
    if(started <= 0)
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <length_start+0x28>)
 8002716:	edd3 7a00 	vldr	s15, [r3]
 800271a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800271e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002722:	d803      	bhi.n	800272c <length_start+0x1c>
    {
        length_reset();
 8002724:	f000 f816 	bl	8002754 <length_reset>
        encoder_start();
 8002728:	f7ff fe30 	bl	800238c <encoder_start>
    }
    started = 1;
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <length_start+0x28>)
 800272e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	200094dc 	.word	0x200094dc

0800273c <length_stop>:

void length_stop()
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
    encoder_stop();
 8002740:	f7ff fe4c 	bl	80023dc <encoder_stop>
    started = 0;
 8002744:	4b02      	ldr	r3, [pc, #8]	; (8002750 <length_stop+0x14>)
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200094dc 	.word	0x200094dc

08002754 <length_reset>:
{
    encoder_fin();
}

void length_reset()
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
    length_left = 0;
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <length_reset+0x20>)
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    length_right = 0;
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <length_reset+0x24>)
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	200094d8 	.word	0x200094d8
 8002778:	200094e8 	.word	0x200094e8

0800277c <length_read>:

float length_read()
{
 800277c:	b580      	push	{r7, lr}
 800277e:	ed2d 8b02 	vpush	{d8}
 8002782:	af00      	add	r7, sp, #0
    return (length_read_left() + length_read_right()) / 2;
 8002784:	f000 f814 	bl	80027b0 <length_read_left>
 8002788:	eeb0 8a40 	vmov.f32	s16, s0
 800278c:	f000 f81e 	bl	80027cc <length_read_right>
 8002790:	eef0 7a40 	vmov.f32	s15, s0
 8002794:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002798:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800279c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027a0:	eef0 7a66 	vmov.f32	s15, s13
}
 80027a4:	eeb0 0a67 	vmov.f32	s0, s15
 80027a8:	46bd      	mov	sp, r7
 80027aa:	ecbd 8b02 	vpop	{d8}
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <length_read_left>:

float length_read_left()
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
    return length_left;
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <length_read_left+0x18>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	ee07 3a90 	vmov	s15, r3
}
 80027bc:	eeb0 0a67 	vmov.f32	s0, s15
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	200094d8 	.word	0x200094d8

080027cc <length_read_right>:

float length_read_right()
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
    return length_right;
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <length_read_right+0x18>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	ee07 3a90 	vmov	s15, r3
}
 80027d8:	eeb0 0a67 	vmov.f32	s0, s15
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	200094e8 	.word	0x200094e8

080027e8 <velocity_read>:

float velocity_read()
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	ed2d 8b02 	vpush	{d8}
 80027ee:	af00      	add	r7, sp, #0
    return (velocity_read_left() + velocity_read_right()) / 2;
 80027f0:	f000 f814 	bl	800281c <velocity_read_left>
 80027f4:	eeb0 8a40 	vmov.f32	s16, s0
 80027f8:	f000 f81e 	bl	8002838 <velocity_read_right>
 80027fc:	eef0 7a40 	vmov.f32	s15, s0
 8002800:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002804:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002808:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800280c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002810:	eeb0 0a67 	vmov.f32	s0, s15
 8002814:	46bd      	mov	sp, r7
 8002816:	ecbd 8b02 	vpop	{d8}
 800281a:	bd80      	pop	{r7, pc}

0800281c <velocity_read_left>:

float velocity_read_left()
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
    return velocity_left;
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <velocity_read_left+0x18>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	ee07 3a90 	vmov	s15, r3
}
 8002828:	eeb0 0a67 	vmov.f32	s0, s15
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	200094e4 	.word	0x200094e4

08002838 <velocity_read_right>:

float velocity_read_right()
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
    return velocity_right;
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <velocity_read_right+0x18>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	ee07 3a90 	vmov	s15, r3
}
 8002844:	eeb0 0a67 	vmov.f32	s0, s15
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	200094e0 	.word	0x200094e0

08002854 <length_update>:

//! エンコーダの値を読み、速度と距離を計算する
void length_update()
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
    float encoder_left, encoder_right;
    float sampling_time_s;
    sampling_time_s = length_update_sampling_time_s;
 800285a:	4b20      	ldr	r3, [pc, #128]	; (80028dc <length_update+0x88>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]
    //! エンコーダの値を読み、中央値に戻す
    encoder_set();
 8002860:	f7ff fd56 	bl	8002310 <encoder_set>
    encoder_left = encoder_length_left();
 8002864:	f7ff fd1c 	bl	80022a0 <encoder_length_left>
 8002868:	ed87 0a02 	vstr	s0, [r7, #8]
    encoder_right = encoder_length_right();
 800286c:	f7ff fd30 	bl	80022d0 <encoder_length_right>
 8002870:	ed87 0a01 	vstr	s0, [r7, #4]
    velocity_left = encoder_left * sampling_time_s;
 8002874:	ed97 7a02 	vldr	s14, [r7, #8]
 8002878:	edd7 7a03 	vldr	s15, [r7, #12]
 800287c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002880:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <length_update+0x8c>)
 8002882:	edc3 7a00 	vstr	s15, [r3]
    velocity_right = encoder_right * sampling_time_s;
 8002886:	ed97 7a01 	vldr	s14, [r7, #4]
 800288a:	edd7 7a03 	vldr	s15, [r7, #12]
 800288e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <length_update+0x90>)
 8002894:	edc3 7a00 	vstr	s15, [r3]
    length_left += velocity_left * sampling_time_s;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <length_update+0x8c>)
 800289a:	ed93 7a00 	vldr	s14, [r3]
 800289e:	edd7 7a03 	vldr	s15, [r7, #12]
 80028a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <length_update+0x94>)
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <length_update+0x94>)
 80028b2:	edc3 7a00 	vstr	s15, [r3]
    length_right += velocity_right * sampling_time_s;
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <length_update+0x90>)
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80028c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <length_update+0x98>)
 80028c6:	edd3 7a00 	vldr	s15, [r3]
 80028ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <length_update+0x98>)
 80028d0:	edc3 7a00 	vstr	s15, [r3]
}
 80028d4:	bf00      	nop
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200094d4 	.word	0x200094d4
 80028e0:	200094e4 	.word	0x200094e4
 80028e4:	200094e0 	.word	0x200094e0
 80028e8:	200094d8 	.word	0x200094d8
 80028ec:	200094e8 	.word	0x200094e8

080028f0 <length_d_print>:

void length_d_print()
{
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af02      	add	r7, sp, #8
    #if D_LENGTH
    printf("length = %10.2f, sampling_time_s = %8.6f\r\n", length_read(), length_update_sampling_time_s);
 80028f6:	f7ff ff41 	bl	800277c <length_read>
 80028fa:	ee10 3a10 	vmov	r3, s0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fe22 	bl	8000548 <__aeabi_f2d>
 8002904:	4604      	mov	r4, r0
 8002906:	460d      	mov	r5, r1
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <length_d_print+0x3c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fe1b 	bl	8000548 <__aeabi_f2d>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	e9cd 2300 	strd	r2, r3, [sp]
 800291a:	4622      	mov	r2, r4
 800291c:	462b      	mov	r3, r5
 800291e:	4804      	ldr	r0, [pc, #16]	; (8002930 <length_d_print+0x40>)
 8002920:	f008 fa04 	bl	800ad2c <iprintf>
    //! printf("velocity = %10.2f\r\n", velocity_read());
    #endif
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	bdb0      	pop	{r4, r5, r7, pc}
 800292a:	bf00      	nop
 800292c:	200094d4 	.word	0x200094d4
 8002930:	0800ec4c 	.word	0x0800ec4c

08002934 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		#if !D_TIM6_WHILE
		tim6_main();
 8002946:	f001 ff9d 	bl	8004884 <tim6_main>
		#endif
	}

	if(htim->Instance == TIM10)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a0c      	ldr	r2, [pc, #48]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d101      	bne.n	8002958 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		#if !D_TIM7_WHILE
		tim7_main();
 8002954:	f002 f880 	bl	8004a58 <tim7_main>
		#endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a08      	ldr	r2, [pc, #32]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    #if !D_TIM10_WHILE
		tim10_main();
 8002962:	f001 fef1 	bl	8004748 <tim10_main>
    #endif
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a06      	ldr	r2, [pc, #24]	; (8002984 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim11_main();
 8002970:	f001 ff52 	bl	8004818 <tim11_main>
	}
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40001000 	.word	0x40001000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800

08002988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800298c:	f002 fcd6 	bl	800533c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002990:	f000 f954 	bl	8002c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002994:	f000 fd76 	bl	8003484 <MX_GPIO_Init>
  MX_DMA_Init();
 8002998:	f000 fd54 	bl	8003444 <MX_DMA_Init>
  MX_ADC1_Init();
 800299c:	f000 f9b8 	bl	8002d10 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80029a0:	f000 fd26 	bl	80033f0 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80029a4:	f000 fc4c 	bl	8003240 <MX_TIM6_Init>
  MX_TIM4_Init();
 80029a8:	f000 fbe6 	bl	8003178 <MX_TIM4_Init>
  MX_TIM1_Init();
 80029ac:	f000 fb38 	bl	8003020 <MX_TIM1_Init>
  MX_TIM3_Init();
 80029b0:	f000 fb8e 	bl	80030d0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80029b4:	f000 fcb0 	bl	8003318 <MX_TIM10_Init>
  MX_TIM11_Init();
 80029b8:	f000 fcd2 	bl	8003360 <MX_TIM11_Init>
  MX_SPI2_Init();
 80029bc:	f000 fafa 	bl	8002fb4 <MX_SPI2_Init>
  MX_I2C1_Init();
 80029c0:	f000 faca 	bl	8002f58 <MX_I2C1_Init>
  MX_TIM14_Init();
 80029c4:	f000 fcf0 	bl	80033a8 <MX_TIM14_Init>
  MX_TIM7_Init();
 80029c8:	f000 fc70 	bl	80032ac <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 80029cc:	4899      	ldr	r0, [pc, #612]	; (8002c34 <main+0x2ac>)
 80029ce:	f008 f9ad 	bl	800ad2c <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 80029d2:	4899      	ldr	r0, [pc, #612]	; (8002c38 <main+0x2b0>)
 80029d4:	f008 fa30 	bl	800ae38 <puts>

  main_init();
 80029d8:	f000 fe3e 	bl	8003658 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 80029dc:	f000 fe7e 	bl	80036dc <main_print_while>

		if(switch_read_enter())
 80029e0:	f7fe fed2 	bl	8001788 <switch_read_enter>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 811c 	beq.w	8002c24 <main+0x29c>
		{
			switch(rotary_read())
 80029ec:	f7fe fdf0 	bl	80015d0 <rotary_read>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	f200 8118 	bhi.w	8002c28 <main+0x2a0>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <main+0x78>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a41 	.word	0x08002a41
 8002a04:	08002a7f 	.word	0x08002a7f
 8002a08:	08002a99 	.word	0x08002a99
 8002a0c:	08002ab3 	.word	0x08002ab3
 8002a10:	08002acd 	.word	0x08002acd
 8002a14:	08002ae7 	.word	0x08002ae7
 8002a18:	08002b01 	.word	0x08002b01
 8002a1c:	08002b1b 	.word	0x08002b1b
 8002a20:	08002b35 	.word	0x08002b35
 8002a24:	08002b4f 	.word	0x08002b4f
 8002a28:	08002b69 	.word	0x08002b69
 8002a2c:	08002b83 	.word	0x08002b83
 8002a30:	08002b9d 	.word	0x08002b9d
 8002a34:	08002bb7 	.word	0x08002bb7
 8002a38:	08002bd1 	.word	0x08002bd1
 8002a3c:	08002bfb 	.word	0x08002bfb
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8002a40:	f7fe fda2 	bl	8001588 <rotary_read_playmode>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10c      	bne.n	8002a64 <main+0xdc>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 8002a4a:	f7ff f859 	bl	8001b00 <analog_calibration_start>

            while(switch_read_enter())
 8002a4e:	e001      	b.n	8002a54 <main+0xcc>
            {
              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_main();
 8002a50:	f000 fe52 	bl	80036f8 <main_main>
            while(switch_read_enter())
 8002a54:	f7fe fe98 	bl	8001788 <switch_read_enter>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f8      	bne.n	8002a50 <main+0xc8>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 8002a5e:	f7ff f877 	bl	8001b50 <analog_calibration_stop>
              main_main();
            }

            running_stop();
          }
          break;	// case 0x00:
 8002a62:	e0e2      	b.n	8002c2a <main+0x2a2>
            running_start();
 8002a64:	f000 fe0f 	bl	8003686 <running_start>
            while(switch_read_enter())
 8002a68:	e001      	b.n	8002a6e <main+0xe6>
              main_main();
 8002a6a:	f000 fe45 	bl	80036f8 <main_main>
            while(switch_read_enter())
 8002a6e:	f7fe fe8b 	bl	8001788 <switch_read_enter>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f8      	bne.n	8002a6a <main+0xe2>
            running_stop();
 8002a78:	f000 fe1c 	bl	80036b4 <running_stop>
          break;	// case 0x00:
 8002a7c:	e0d5      	b.n	8002c2a <main+0x2a2>
        case 0x01:	// 1
          running_start();
 8002a7e:	f000 fe02 	bl	8003686 <running_start>

          while (switch_read_enter())
 8002a82:	e001      	b.n	8002a88 <main+0x100>
          {
            main_main();
 8002a84:	f000 fe38 	bl	80036f8 <main_main>
          while (switch_read_enter())
 8002a88:	f7fe fe7e 	bl	8001788 <switch_read_enter>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f8      	bne.n	8002a84 <main+0xfc>
          }

          running_stop();
 8002a92:	f000 fe0f 	bl	80036b4 <running_stop>
          break;
 8002a96:	e0c8      	b.n	8002c2a <main+0x2a2>
        case 0x02:	// 2
          running_start();
 8002a98:	f000 fdf5 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002a9c:	e001      	b.n	8002aa2 <main+0x11a>
          {
            main_main();
 8002a9e:	f000 fe2b 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002aa2:	f7fe fe71 	bl	8001788 <switch_read_enter>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f8      	bne.n	8002a9e <main+0x116>
          }

          running_stop();
 8002aac:	f000 fe02 	bl	80036b4 <running_stop>
          break;
 8002ab0:	e0bb      	b.n	8002c2a <main+0x2a2>
        case 0x03:	// 3
          running_start();
 8002ab2:	f000 fde8 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002ab6:	e001      	b.n	8002abc <main+0x134>
          {
            main_main();
 8002ab8:	f000 fe1e 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002abc:	f7fe fe64 	bl	8001788 <switch_read_enter>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f8      	bne.n	8002ab8 <main+0x130>
          }

          running_stop();
 8002ac6:	f000 fdf5 	bl	80036b4 <running_stop>
          break;
 8002aca:	e0ae      	b.n	8002c2a <main+0x2a2>
        case 0x04:	// 4
          running_start();
 8002acc:	f000 fddb 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002ad0:	e001      	b.n	8002ad6 <main+0x14e>
          {
            main_main();
 8002ad2:	f000 fe11 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002ad6:	f7fe fe57 	bl	8001788 <switch_read_enter>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f8      	bne.n	8002ad2 <main+0x14a>
          }

          running_stop();
 8002ae0:	f000 fde8 	bl	80036b4 <running_stop>
          break;
 8002ae4:	e0a1      	b.n	8002c2a <main+0x2a2>
        case 0x05:	// 5
          running_start();
 8002ae6:	f000 fdce 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002aea:	e001      	b.n	8002af0 <main+0x168>
          {
            main_main();
 8002aec:	f000 fe04 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002af0:	f7fe fe4a 	bl	8001788 <switch_read_enter>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f8      	bne.n	8002aec <main+0x164>
          }

          running_stop();
 8002afa:	f000 fddb 	bl	80036b4 <running_stop>
          break;
 8002afe:	e094      	b.n	8002c2a <main+0x2a2>
        case 0x06:	// 6
          running_start();
 8002b00:	f000 fdc1 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002b04:	e001      	b.n	8002b0a <main+0x182>
          {
            main_main();
 8002b06:	f000 fdf7 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002b0a:	f7fe fe3d 	bl	8001788 <switch_read_enter>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f8      	bne.n	8002b06 <main+0x17e>
          }

          running_stop();
 8002b14:	f000 fdce 	bl	80036b4 <running_stop>
          break;
 8002b18:	e087      	b.n	8002c2a <main+0x2a2>
        case 0x07:	// 7
          running_start();
 8002b1a:	f000 fdb4 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002b1e:	e001      	b.n	8002b24 <main+0x19c>
          {
            main_main();
 8002b20:	f000 fdea 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002b24:	f7fe fe30 	bl	8001788 <switch_read_enter>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f8      	bne.n	8002b20 <main+0x198>
          }

          running_stop();
 8002b2e:	f000 fdc1 	bl	80036b4 <running_stop>
          break;
 8002b32:	e07a      	b.n	8002c2a <main+0x2a2>
        case 0x08:	// 8
          running_start();
 8002b34:	f000 fda7 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002b38:	e001      	b.n	8002b3e <main+0x1b6>
          {
            main_main();
 8002b3a:	f000 fddd 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002b3e:	f7fe fe23 	bl	8001788 <switch_read_enter>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f8      	bne.n	8002b3a <main+0x1b2>
          }

          running_stop();
 8002b48:	f000 fdb4 	bl	80036b4 <running_stop>
          break;
 8002b4c:	e06d      	b.n	8002c2a <main+0x2a2>
        case 0x09:	// 9
          running_start();
 8002b4e:	f000 fd9a 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002b52:	e001      	b.n	8002b58 <main+0x1d0>
          {
            main_main();
 8002b54:	f000 fdd0 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002b58:	f7fe fe16 	bl	8001788 <switch_read_enter>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f8      	bne.n	8002b54 <main+0x1cc>
          }

          running_stop();
 8002b62:	f000 fda7 	bl	80036b4 <running_stop>
          break;
 8002b66:	e060      	b.n	8002c2a <main+0x2a2>
        case 0x0A:	// A
          running_start();
 8002b68:	f000 fd8d 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002b6c:	e001      	b.n	8002b72 <main+0x1ea>
          {
            main_main();
 8002b6e:	f000 fdc3 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002b72:	f7fe fe09 	bl	8001788 <switch_read_enter>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f8      	bne.n	8002b6e <main+0x1e6>
          }

          running_stop();
 8002b7c:	f000 fd9a 	bl	80036b4 <running_stop>
          break;
 8002b80:	e053      	b.n	8002c2a <main+0x2a2>
        case 0x0B:	// B
          running_start();
 8002b82:	f000 fd80 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002b86:	e001      	b.n	8002b8c <main+0x204>
          {
            main_main();
 8002b88:	f000 fdb6 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002b8c:	f7fe fdfc 	bl	8001788 <switch_read_enter>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f8      	bne.n	8002b88 <main+0x200>
          }

          running_stop();
 8002b96:	f000 fd8d 	bl	80036b4 <running_stop>
          break;
 8002b9a:	e046      	b.n	8002c2a <main+0x2a2>
        case 0x0C:	// C
          running_start();
 8002b9c:	f000 fd73 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002ba0:	e001      	b.n	8002ba6 <main+0x21e>
          {
            main_main();
 8002ba2:	f000 fda9 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002ba6:	f7fe fdef 	bl	8001788 <switch_read_enter>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f8      	bne.n	8002ba2 <main+0x21a>
          }

          running_stop();
 8002bb0:	f000 fd80 	bl	80036b4 <running_stop>
          break;
 8002bb4:	e039      	b.n	8002c2a <main+0x2a2>
        case 0x0D:	// D
          running_start();
 8002bb6:	f000 fd66 	bl	8003686 <running_start>

          while(switch_read_enter())
 8002bba:	e001      	b.n	8002bc0 <main+0x238>
          {
            main_main();
 8002bbc:	f000 fd9c 	bl	80036f8 <main_main>
          while(switch_read_enter())
 8002bc0:	f7fe fde2 	bl	8001788 <switch_read_enter>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f8      	bne.n	8002bbc <main+0x234>
          }

          running_stop();
 8002bca:	f000 fd73 	bl	80036b4 <running_stop>
          break;
 8002bce:	e02c      	b.n	8002c2a <main+0x2a2>
        case 0x0E:	// E
          if(rotary_read_playmode() == flash_print)
 8002bd0:	f7fe fcda 	bl	8001588 <rotary_read_playmode>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b0f      	cmp	r3, #15
 8002bd8:	d102      	bne.n	8002be0 <main+0x258>
          {
            course_print_flash();
 8002bda:	f7ff fad9 	bl	8002190 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8002bde:	e024      	b.n	8002c2a <main+0x2a2>
            running_start();
 8002be0:	f000 fd51 	bl	8003686 <running_start>
            while(switch_read_enter())
 8002be4:	e001      	b.n	8002bea <main+0x262>
              main_main();
 8002be6:	f000 fd87 	bl	80036f8 <main_main>
            while(switch_read_enter())
 8002bea:	f7fe fdcd 	bl	8001788 <switch_read_enter>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f8      	bne.n	8002be6 <main+0x25e>
            running_stop();
 8002bf4:	f000 fd5e 	bl	80036b4 <running_stop>
          break;
 8002bf8:	e017      	b.n	8002c2a <main+0x2a2>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 8002bfa:	f7fe fcc5 	bl	8001588 <rotary_read_playmode>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b0f      	cmp	r3, #15
 8002c02:	d102      	bne.n	8002c0a <main+0x282>
          {
            course_print_flash();
 8002c04:	f7ff fac4 	bl	8002190 <course_print_flash>
              main_main();
            }

            running_stop();
          }
          break;
 8002c08:	e00f      	b.n	8002c2a <main+0x2a2>
            running_start();
 8002c0a:	f000 fd3c 	bl	8003686 <running_start>
            while(switch_read_enter())
 8002c0e:	e001      	b.n	8002c14 <main+0x28c>
              main_main();
 8002c10:	f000 fd72 	bl	80036f8 <main_main>
            while(switch_read_enter())
 8002c14:	f7fe fdb8 	bl	8001788 <switch_read_enter>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f8      	bne.n	8002c10 <main+0x288>
            running_stop();
 8002c1e:	f000 fd49 	bl	80036b4 <running_stop>
          break;
 8002c22:	e002      	b.n	8002c2a <main+0x2a2>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <main+0x2a2>
          break;
 8002c28:	bf00      	nop
    HAL_Delay(500);
 8002c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c2e:	f002 fbf7 	bl	8005420 <HAL_Delay>
    main_print_while();
 8002c32:	e6d3      	b.n	80029dc <main+0x54>
 8002c34:	0800ec78 	.word	0x0800ec78
 8002c38:	0800ec80 	.word	0x0800ec80

08002c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b094      	sub	sp, #80	; 0x50
 8002c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c42:	f107 0320 	add.w	r3, r7, #32
 8002c46:	2230      	movs	r2, #48	; 0x30
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f007 f9ec 	bl	800a028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c50:	f107 030c 	add.w	r3, r7, #12
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <SystemClock_Config+0xcc>)
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <SystemClock_Config+0xcc>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <SystemClock_Config+0xcc>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <SystemClock_Config+0xd0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <SystemClock_Config+0xd0>)
 8002c86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c8a:	6013      	str	r3, [r2, #0]
 8002c8c:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <SystemClock_Config+0xd0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002c9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ca6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cac:	2308      	movs	r3, #8
 8002cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002cb0:	23a8      	movs	r3, #168	; 0xa8
 8002cb2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cb8:	2304      	movs	r3, #4
 8002cba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cbc:	f107 0320 	add.w	r3, r7, #32
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f004 fb0f 	bl	80072e4 <HAL_RCC_OscConfig>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ccc:	f000 fd29 	bl	8003722 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd0:	230f      	movs	r3, #15
 8002cd2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002cdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ce0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	2105      	movs	r1, #5
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f004 fd70 	bl	80077d4 <HAL_RCC_ClockConfig>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002cfa:	f000 fd12 	bl	8003722 <Error_Handler>
  }
}
 8002cfe:	bf00      	nop
 8002d00:	3750      	adds	r7, #80	; 0x50
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000

08002d10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d16:	463b      	mov	r3, r7
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d22:	4b8a      	ldr	r3, [pc, #552]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d24:	4a8a      	ldr	r2, [pc, #552]	; (8002f50 <MX_ADC1_Init+0x240>)
 8002d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d28:	4b88      	ldr	r3, [pc, #544]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d30:	4b86      	ldr	r3, [pc, #536]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002d36:	4b85      	ldr	r3, [pc, #532]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d3c:	4b83      	ldr	r3, [pc, #524]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d42:	4b82      	ldr	r3, [pc, #520]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d4a:	4b80      	ldr	r3, [pc, #512]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d50:	4b7e      	ldr	r3, [pc, #504]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d52:	4a80      	ldr	r2, [pc, #512]	; (8002f54 <MX_ADC1_Init+0x244>)
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d56:	4b7d      	ldr	r3, [pc, #500]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8002d5c:	4b7b      	ldr	r3, [pc, #492]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d5e:	2210      	movs	r2, #16
 8002d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d62:	4b7a      	ldr	r3, [pc, #488]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d6a:	4b78      	ldr	r3, [pc, #480]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d70:	4876      	ldr	r0, [pc, #472]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d72:	f002 fb79 	bl	8005468 <HAL_ADC_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002d7c:	f000 fcd1 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002d80:	2309      	movs	r3, #9
 8002d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d84:	2301      	movs	r3, #1
 8002d86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d8c:	463b      	mov	r3, r7
 8002d8e:	4619      	mov	r1, r3
 8002d90:	486e      	ldr	r0, [pc, #440]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002d92:	f002 fd2b 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002d9c:	f000 fcc1 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002da0:	230a      	movs	r3, #10
 8002da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002da4:	2302      	movs	r3, #2
 8002da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002da8:	463b      	mov	r3, r7
 8002daa:	4619      	mov	r1, r3
 8002dac:	4867      	ldr	r0, [pc, #412]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002dae:	f002 fd1d 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002db8:	f000 fcb3 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dc4:	463b      	mov	r3, r7
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4860      	ldr	r0, [pc, #384]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002dca:	f002 fd0f 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002dd4:	f000 fca5 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002dd8:	230b      	movs	r3, #11
 8002dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002ddc:	2304      	movs	r3, #4
 8002dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de0:	463b      	mov	r3, r7
 8002de2:	4619      	mov	r1, r3
 8002de4:	4859      	ldr	r0, [pc, #356]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002de6:	f002 fd01 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002df0:	f000 fc97 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002df4:	230f      	movs	r3, #15
 8002df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002df8:	2305      	movs	r3, #5
 8002dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002dfc:	463b      	mov	r3, r7
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4852      	ldr	r0, [pc, #328]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002e02:	f002 fcf3 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002e0c:	f000 fc89 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002e10:	230c      	movs	r3, #12
 8002e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8002e14:	2306      	movs	r3, #6
 8002e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e18:	463b      	mov	r3, r7
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	484b      	ldr	r0, [pc, #300]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002e1e:	f002 fce5 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002e28:	f000 fc7b 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002e2c:	230e      	movs	r3, #14
 8002e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002e30:	2307      	movs	r3, #7
 8002e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e34:	463b      	mov	r3, r7
 8002e36:	4619      	mov	r1, r3
 8002e38:	4844      	ldr	r0, [pc, #272]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002e3a:	f002 fcd7 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8002e44:	f000 fc6d 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002e48:	230d      	movs	r3, #13
 8002e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002e4c:	2308      	movs	r3, #8
 8002e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e50:	463b      	mov	r3, r7
 8002e52:	4619      	mov	r1, r3
 8002e54:	483d      	ldr	r0, [pc, #244]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002e56:	f002 fcc9 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002e60:	f000 fc5f 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002e64:	2307      	movs	r3, #7
 8002e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002e68:	2309      	movs	r3, #9
 8002e6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e6c:	463b      	mov	r3, r7
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4836      	ldr	r0, [pc, #216]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002e72:	f002 fcbb 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8002e7c:	f000 fc51 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8002e84:	230a      	movs	r3, #10
 8002e86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e88:	463b      	mov	r3, r7
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	482f      	ldr	r0, [pc, #188]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002e8e:	f002 fcad 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8002e98:	f000 fc43 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002e9c:	2306      	movs	r3, #6
 8002e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8002ea0:	230b      	movs	r3, #11
 8002ea2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ea4:	463b      	mov	r3, r7
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4828      	ldr	r0, [pc, #160]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002eaa:	f002 fc9f 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8002eb4:	f000 fc35 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4821      	ldr	r0, [pc, #132]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002ec6:	f002 fc91 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002ed0:	f000 fc27 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002ed4:	2305      	movs	r3, #5
 8002ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002ed8:	230d      	movs	r3, #13
 8002eda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002edc:	463b      	mov	r3, r7
 8002ede:	4619      	mov	r1, r3
 8002ee0:	481a      	ldr	r0, [pc, #104]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002ee2:	f002 fc83 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8002eec:	f000 fc19 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8002ef4:	230e      	movs	r3, #14
 8002ef6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ef8:	463b      	mov	r3, r7
 8002efa:	4619      	mov	r1, r3
 8002efc:	4813      	ldr	r0, [pc, #76]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002efe:	f002 fc75 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8002f08:	f000 fc0b 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002f10:	230f      	movs	r3, #15
 8002f12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f14:	463b      	mov	r3, r7
 8002f16:	4619      	mov	r1, r3
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002f1a:	f002 fc67 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 8002f24:	f000 fbfd 	bl	8003722 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f30:	463b      	mov	r3, r7
 8002f32:	4619      	mov	r1, r3
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <MX_ADC1_Init+0x23c>)
 8002f36:	f002 fc59 	bl	80057ec <HAL_ADC_ConfigChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8002f40:	f000 fbef 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000590 	.word	0x20000590
 8002f50:	40012000 	.word	0x40012000
 8002f54:	0f000001 	.word	0x0f000001

08002f58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f5c:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f5e:	4a13      	ldr	r2, [pc, #76]	; (8002fac <MX_I2C1_Init+0x54>)
 8002f60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f64:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <MX_I2C1_Init+0x58>)
 8002f66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f94:	4804      	ldr	r0, [pc, #16]	; (8002fa8 <MX_I2C1_Init+0x50>)
 8002f96:	f004 f861 	bl	800705c <HAL_I2C_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fa0:	f000 fbbf 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200004ac 	.word	0x200004ac
 8002fac:	40005400 	.word	0x40005400
 8002fb0:	000186a0 	.word	0x000186a0

08002fb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002fb8:	4b17      	ldr	r3, [pc, #92]	; (8003018 <MX_SPI2_Init+0x64>)
 8002fba:	4a18      	ldr	r2, [pc, #96]	; (800301c <MX_SPI2_Init+0x68>)
 8002fbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002fbe:	4b16      	ldr	r3, [pc, #88]	; (8003018 <MX_SPI2_Init+0x64>)
 8002fc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002fc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <MX_SPI2_Init+0x64>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fcc:	4b12      	ldr	r3, [pc, #72]	; (8003018 <MX_SPI2_Init+0x64>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <MX_SPI2_Init+0x64>)
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	; (8003018 <MX_SPI2_Init+0x64>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <MX_SPI2_Init+0x64>)
 8002fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002fe6:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <MX_SPI2_Init+0x64>)
 8002fe8:	2228      	movs	r2, #40	; 0x28
 8002fea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <MX_SPI2_Init+0x64>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ff2:	4b09      	ldr	r3, [pc, #36]	; (8003018 <MX_SPI2_Init+0x64>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <MX_SPI2_Init+0x64>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <MX_SPI2_Init+0x64>)
 8003000:	220a      	movs	r2, #10
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003004:	4804      	ldr	r0, [pc, #16]	; (8003018 <MX_SPI2_Init+0x64>)
 8003006:	f004 fddf 	bl	8007bc8 <HAL_SPI_Init>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003010:	f000 fb87 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}
 8003018:	2000040c 	.word	0x2000040c
 800301c:	40003800 	.word	0x40003800

08003020 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08c      	sub	sp, #48	; 0x30
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	2224      	movs	r2, #36	; 0x24
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f006 fffa 	bl	800a028 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800303c:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <MX_TIM1_Init+0xa8>)
 800303e:	4a23      	ldr	r2, [pc, #140]	; (80030cc <MX_TIM1_Init+0xac>)
 8003040:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <MX_TIM1_Init+0xa8>)
 8003044:	2200      	movs	r2, #0
 8003046:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003048:	4b1f      	ldr	r3, [pc, #124]	; (80030c8 <MX_TIM1_Init+0xa8>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 800304e:	4b1e      	ldr	r3, [pc, #120]	; (80030c8 <MX_TIM1_Init+0xa8>)
 8003050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003054:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003056:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <MX_TIM1_Init+0xa8>)
 8003058:	2200      	movs	r2, #0
 800305a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800305c:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <MX_TIM1_Init+0xa8>)
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003062:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <MX_TIM1_Init+0xa8>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003068:	2303      	movs	r3, #3
 800306a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003070:	2301      	movs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800307c:	2300      	movs	r3, #0
 800307e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003080:	2301      	movs	r3, #1
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003084:	2300      	movs	r3, #0
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800308c:	f107 030c 	add.w	r3, r7, #12
 8003090:	4619      	mov	r1, r3
 8003092:	480d      	ldr	r0, [pc, #52]	; (80030c8 <MX_TIM1_Init+0xa8>)
 8003094:	f005 fdb6 	bl	8008c04 <HAL_TIM_Encoder_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800309e:	f000 fb40 	bl	8003722 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	4619      	mov	r1, r3
 80030ae:	4806      	ldr	r0, [pc, #24]	; (80030c8 <MX_TIM1_Init+0xa8>)
 80030b0:	f006 fbdc 	bl	800986c <HAL_TIMEx_MasterConfigSynchronization>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80030ba:	f000 fb32 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80030be:	bf00      	nop
 80030c0:	3730      	adds	r7, #48	; 0x30
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200006c8 	.word	0x200006c8
 80030cc:	40010000 	.word	0x40010000

080030d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08c      	sub	sp, #48	; 0x30
 80030d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80030d6:	f107 030c 	add.w	r3, r7, #12
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f006 ffa2 	bl	800a028 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030ec:	4b20      	ldr	r3, [pc, #128]	; (8003170 <MX_TIM3_Init+0xa0>)
 80030ee:	4a21      	ldr	r2, [pc, #132]	; (8003174 <MX_TIM3_Init+0xa4>)
 80030f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80030f2:	4b1f      	ldr	r3, [pc, #124]	; (8003170 <MX_TIM3_Init+0xa0>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f8:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <MX_TIM3_Init+0xa0>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <MX_TIM3_Init+0xa0>)
 8003100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003104:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <MX_TIM3_Init+0xa0>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800310c:	4b18      	ldr	r3, [pc, #96]	; (8003170 <MX_TIM3_Init+0xa0>)
 800310e:	2200      	movs	r2, #0
 8003110:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003112:	2303      	movs	r3, #3
 8003114:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800311a:	2301      	movs	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800311e:	2300      	movs	r3, #0
 8003120:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003122:	2300      	movs	r3, #0
 8003124:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800312a:	2301      	movs	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800312e:	2300      	movs	r3, #0
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003136:	f107 030c 	add.w	r3, r7, #12
 800313a:	4619      	mov	r1, r3
 800313c:	480c      	ldr	r0, [pc, #48]	; (8003170 <MX_TIM3_Init+0xa0>)
 800313e:	f005 fd61 	bl	8008c04 <HAL_TIM_Encoder_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003148:	f000 faeb 	bl	8003722 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800314c:	2300      	movs	r3, #0
 800314e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003154:	1d3b      	adds	r3, r7, #4
 8003156:	4619      	mov	r1, r3
 8003158:	4805      	ldr	r0, [pc, #20]	; (8003170 <MX_TIM3_Init+0xa0>)
 800315a:	f006 fb87 	bl	800986c <HAL_TIMEx_MasterConfigSynchronization>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003164:	f000 fadd 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003168:	bf00      	nop
 800316a:	3730      	adds	r7, #48	; 0x30
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000548 	.word	0x20000548
 8003174:	40000400 	.word	0x40000400

08003178 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800317e:	f107 0320 	add.w	r3, r7, #32
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	60da      	str	r2, [r3, #12]
 8003194:	611a      	str	r2, [r3, #16]
 8003196:	615a      	str	r2, [r3, #20]
 8003198:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800319a:	4b27      	ldr	r3, [pc, #156]	; (8003238 <MX_TIM4_Init+0xc0>)
 800319c:	4a27      	ldr	r2, [pc, #156]	; (800323c <MX_TIM4_Init+0xc4>)
 800319e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 80031a0:	4b25      	ldr	r3, [pc, #148]	; (8003238 <MX_TIM4_Init+0xc0>)
 80031a2:	2202      	movs	r2, #2
 80031a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a6:	4b24      	ldr	r3, [pc, #144]	; (8003238 <MX_TIM4_Init+0xc0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80031ac:	4b22      	ldr	r3, [pc, #136]	; (8003238 <MX_TIM4_Init+0xc0>)
 80031ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80031b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <MX_TIM4_Init+0xc0>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ba:	4b1f      	ldr	r3, [pc, #124]	; (8003238 <MX_TIM4_Init+0xc0>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80031c0:	481d      	ldr	r0, [pc, #116]	; (8003238 <MX_TIM4_Init+0xc0>)
 80031c2:	f005 fb98 	bl	80088f6 <HAL_TIM_PWM_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80031cc:	f000 faa9 	bl	8003722 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031d0:	2300      	movs	r3, #0
 80031d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031d8:	f107 0320 	add.w	r3, r7, #32
 80031dc:	4619      	mov	r1, r3
 80031de:	4816      	ldr	r0, [pc, #88]	; (8003238 <MX_TIM4_Init+0xc0>)
 80031e0:	f006 fb44 	bl	800986c <HAL_TIMEx_MasterConfigSynchronization>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80031ea:	f000 fa9a 	bl	8003722 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ee:	2360      	movs	r3, #96	; 0x60
 80031f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2200      	movs	r2, #0
 8003202:	4619      	mov	r1, r3
 8003204:	480c      	ldr	r0, [pc, #48]	; (8003238 <MX_TIM4_Init+0xc0>)
 8003206:	f005 ffd1 	bl	80091ac <HAL_TIM_PWM_ConfigChannel>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003210:	f000 fa87 	bl	8003722 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	2204      	movs	r2, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4807      	ldr	r0, [pc, #28]	; (8003238 <MX_TIM4_Init+0xc0>)
 800321c:	f005 ffc6 	bl	80091ac <HAL_TIM_PWM_ConfigChannel>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003226:	f000 fa7c 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800322a:	4803      	ldr	r0, [pc, #12]	; (8003238 <MX_TIM4_Init+0xc0>)
 800322c:	f001 f874 	bl	8004318 <HAL_TIM_MspPostInit>

}
 8003230:	bf00      	nop
 8003232:	3728      	adds	r7, #40	; 0x28
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000464 	.word	0x20000464
 800323c:	40000800 	.word	0x40000800

08003240 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003246:	463b      	mov	r3, r7
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <MX_TIM6_Init+0x64>)
 8003250:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <MX_TIM6_Init+0x68>)
 8003252:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <MX_TIM6_Init+0x64>)
 8003256:	2204      	movs	r2, #4
 8003258:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <MX_TIM6_Init+0x64>)
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 33599;
 8003260:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <MX_TIM6_Init+0x64>)
 8003262:	f248 323f 	movw	r2, #33599	; 0x833f
 8003266:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <MX_TIM6_Init+0x64>)
 800326a:	2200      	movs	r2, #0
 800326c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800326e:	480d      	ldr	r0, [pc, #52]	; (80032a4 <MX_TIM6_Init+0x64>)
 8003270:	f005 fa52 	bl	8008718 <HAL_TIM_Base_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800327a:	f000 fa52 	bl	8003722 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003286:	463b      	mov	r3, r7
 8003288:	4619      	mov	r1, r3
 800328a:	4806      	ldr	r0, [pc, #24]	; (80032a4 <MX_TIM6_Init+0x64>)
 800328c:	f006 faee 	bl	800986c <HAL_TIMEx_MasterConfigSynchronization>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003296:	f000 fa44 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000680 	.word	0x20000680
 80032a8:	40001000 	.word	0x40001000

080032ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b2:	463b      	mov	r3, r7
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80032ba:	4b15      	ldr	r3, [pc, #84]	; (8003310 <MX_TIM7_Init+0x64>)
 80032bc:	4a15      	ldr	r2, [pc, #84]	; (8003314 <MX_TIM7_Init+0x68>)
 80032be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <MX_TIM7_Init+0x64>)
 80032c2:	2204      	movs	r2, #4
 80032c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <MX_TIM7_Init+0x64>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33599;
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <MX_TIM7_Init+0x64>)
 80032ce:	f248 323f 	movw	r2, #33599	; 0x833f
 80032d2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <MX_TIM7_Init+0x64>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80032da:	480d      	ldr	r0, [pc, #52]	; (8003310 <MX_TIM7_Init+0x64>)
 80032dc:	f005 fa1c 	bl	8008718 <HAL_TIM_Base_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80032e6:	f000 fa1c 	bl	8003722 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80032f2:	463b      	mov	r3, r7
 80032f4:	4619      	mov	r1, r3
 80032f6:	4806      	ldr	r0, [pc, #24]	; (8003310 <MX_TIM7_Init+0x64>)
 80032f8:	f006 fab8 	bl	800986c <HAL_TIMEx_MasterConfigSynchronization>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003302:	f000 fa0e 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	2000079c 	.word	0x2000079c
 8003314:	40001400 	.word	0x40001400

08003318 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <MX_TIM10_Init+0x40>)
 800331e:	4a0f      	ldr	r2, [pc, #60]	; (800335c <MX_TIM10_Init+0x44>)
 8003320:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8003322:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <MX_TIM10_Init+0x40>)
 8003324:	2204      	movs	r2, #4
 8003326:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <MX_TIM10_Init+0x40>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 800332e:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <MX_TIM10_Init+0x40>)
 8003330:	f248 323f 	movw	r2, #33599	; 0x833f
 8003334:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <MX_TIM10_Init+0x40>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <MX_TIM10_Init+0x40>)
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <MX_TIM10_Init+0x40>)
 8003344:	f005 f9e8 	bl	8008718 <HAL_TIM_Base_Init>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800334e:	f000 f9e8 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000500 	.word	0x20000500
 800335c:	40014400 	.word	0x40014400

08003360 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <MX_TIM11_Init+0x40>)
 8003366:	4a0f      	ldr	r2, [pc, #60]	; (80033a4 <MX_TIM11_Init+0x44>)
 8003368:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <MX_TIM11_Init+0x40>)
 800336c:	2204      	movs	r2, #4
 800336e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <MX_TIM11_Init+0x40>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <MX_TIM11_Init+0x40>)
 8003378:	f248 323f 	movw	r2, #33599	; 0x833f
 800337c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <MX_TIM11_Init+0x40>)
 8003380:	2200      	movs	r2, #0
 8003382:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <MX_TIM11_Init+0x40>)
 8003386:	2200      	movs	r2, #0
 8003388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800338a:	4805      	ldr	r0, [pc, #20]	; (80033a0 <MX_TIM11_Init+0x40>)
 800338c:	f005 f9c4 	bl	8008718 <HAL_TIM_Base_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8003396:	f000 f9c4 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200005d8 	.word	0x200005d8
 80033a4:	40014800 	.word	0x40014800

080033a8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <MX_TIM14_Init+0x40>)
 80033ae:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <MX_TIM14_Init+0x44>)
 80033b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 80033b2:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <MX_TIM14_Init+0x40>)
 80033b4:	2204      	movs	r2, #4
 80033b6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b8:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <MX_TIM14_Init+0x40>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <MX_TIM14_Init+0x40>)
 80033c0:	f248 323f 	movw	r2, #33599	; 0x833f
 80033c4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <MX_TIM14_Init+0x40>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <MX_TIM14_Init+0x40>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80033d2:	4805      	ldr	r0, [pc, #20]	; (80033e8 <MX_TIM14_Init+0x40>)
 80033d4:	f005 f9a0 	bl	8008718 <HAL_TIM_Base_Init>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80033de:	f000 f9a0 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000754 	.word	0x20000754
 80033ec:	40002000 	.word	0x40002000

080033f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <MX_USART6_UART_Init+0x4c>)
 80033f6:	4a12      	ldr	r2, [pc, #72]	; (8003440 <MX_USART6_UART_Init+0x50>)
 80033f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80033fa:	4b10      	ldr	r3, [pc, #64]	; (800343c <MX_USART6_UART_Init+0x4c>)
 80033fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003400:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <MX_USART6_UART_Init+0x4c>)
 8003404:	2200      	movs	r2, #0
 8003406:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <MX_USART6_UART_Init+0x4c>)
 800340a:	2200      	movs	r2, #0
 800340c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800340e:	4b0b      	ldr	r3, [pc, #44]	; (800343c <MX_USART6_UART_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003414:	4b09      	ldr	r3, [pc, #36]	; (800343c <MX_USART6_UART_Init+0x4c>)
 8003416:	220c      	movs	r2, #12
 8003418:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <MX_USART6_UART_Init+0x4c>)
 800341c:	2200      	movs	r2, #0
 800341e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <MX_USART6_UART_Init+0x4c>)
 8003422:	2200      	movs	r2, #0
 8003424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003426:	4805      	ldr	r0, [pc, #20]	; (800343c <MX_USART6_UART_Init+0x4c>)
 8003428:	f006 fab0 	bl	800998c <HAL_UART_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003432:	f000 f976 	bl	8003722 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000710 	.word	0x20000710
 8003440:	40011400 	.word	0x40011400

08003444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <MX_DMA_Init+0x3c>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <MX_DMA_Init+0x3c>)
 8003454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <MX_DMA_Init+0x3c>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	2038      	movs	r0, #56	; 0x38
 800346c:	f002 fd39 	bl	8005ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003470:	2038      	movs	r0, #56	; 0x38
 8003472:	f002 fd52 	bl	8005f1a <HAL_NVIC_EnableIRQ>

}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800

08003484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	4b69      	ldr	r3, [pc, #420]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4a68      	ldr	r2, [pc, #416]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4b66      	ldr	r3, [pc, #408]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	4b62      	ldr	r3, [pc, #392]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4a61      	ldr	r2, [pc, #388]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
 80034c6:	4b5f      	ldr	r3, [pc, #380]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	4b5b      	ldr	r3, [pc, #364]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a5a      	ldr	r2, [pc, #360]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b58      	ldr	r3, [pc, #352]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	4b54      	ldr	r3, [pc, #336]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	4a53      	ldr	r2, [pc, #332]	; (8003644 <MX_GPIO_Init+0x1c0>)
 80034f8:	f043 0302 	orr.w	r3, r3, #2
 80034fc:	6313      	str	r3, [r2, #48]	; 0x30
 80034fe:	4b51      	ldr	r3, [pc, #324]	; (8003644 <MX_GPIO_Init+0x1c0>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4b4d      	ldr	r3, [pc, #308]	; (8003644 <MX_GPIO_Init+0x1c0>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a4c      	ldr	r2, [pc, #304]	; (8003644 <MX_GPIO_Init+0x1c0>)
 8003514:	f043 0308 	orr.w	r3, r3, #8
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <MX_GPIO_Init+0x1c0>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8003526:	2200      	movs	r2, #0
 8003528:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 800352c:	4846      	ldr	r0, [pc, #280]	; (8003648 <MX_GPIO_Init+0x1c4>)
 800352e:	f003 fd7b 	bl	8007028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8003532:	2200      	movs	r2, #0
 8003534:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003538:	4844      	ldr	r0, [pc, #272]	; (800364c <MX_GPIO_Init+0x1c8>)
 800353a:	f003 fd75 	bl	8007028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 800353e:	2200      	movs	r2, #0
 8003540:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8003544:	4842      	ldr	r0, [pc, #264]	; (8003650 <MX_GPIO_Init+0x1cc>)
 8003546:	f003 fd6f 	bl	8007028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 800354a:	2200      	movs	r2, #0
 800354c:	2104      	movs	r1, #4
 800354e:	4841      	ldr	r0, [pc, #260]	; (8003654 <MX_GPIO_Init+0x1d0>)
 8003550:	f003 fd6a 	bl	8007028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8003554:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355a:	2301      	movs	r3, #1
 800355c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	2300      	movs	r3, #0
 8003564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003566:	f107 0314 	add.w	r3, r7, #20
 800356a:	4619      	mov	r1, r3
 800356c:	4836      	ldr	r0, [pc, #216]	; (8003648 <MX_GPIO_Init+0x1c4>)
 800356e:	f003 fba7 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8003572:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8003576:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	4619      	mov	r1, r3
 8003586:	4830      	ldr	r0, [pc, #192]	; (8003648 <MX_GPIO_Init+0x1c4>)
 8003588:	f003 fb9a 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 800358c:	f640 0304 	movw	r3, #2052	; 0x804
 8003590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003592:	2300      	movs	r3, #0
 8003594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800359a:	f107 0314 	add.w	r3, r7, #20
 800359e:	4619      	mov	r1, r3
 80035a0:	482a      	ldr	r0, [pc, #168]	; (800364c <MX_GPIO_Init+0x1c8>)
 80035a2:	f003 fb8d 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 80035a6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ac:	2301      	movs	r3, #1
 80035ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b4:	2300      	movs	r3, #0
 80035b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	4619      	mov	r1, r3
 80035be:	4823      	ldr	r0, [pc, #140]	; (800364c <MX_GPIO_Init+0x1c8>)
 80035c0:	f003 fb7e 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 80035c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ca:	2301      	movs	r3, #1
 80035cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d2:	2300      	movs	r3, #0
 80035d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	4619      	mov	r1, r3
 80035dc:	481c      	ldr	r0, [pc, #112]	; (8003650 <MX_GPIO_Init+0x1cc>)
 80035de:	f003 fb6f 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 80035e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4619      	mov	r1, r3
 80035f6:	4816      	ldr	r0, [pc, #88]	; (8003650 <MX_GPIO_Init+0x1cc>)
 80035f8:	f003 fb62 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80035fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	2300      	movs	r3, #0
 800360c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800360e:	2301      	movs	r3, #1
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	4619      	mov	r1, r3
 8003618:	480d      	ldr	r0, [pc, #52]	; (8003650 <MX_GPIO_Init+0x1cc>)
 800361a:	f003 fb51 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 800361e:	2304      	movs	r3, #4
 8003620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003622:	2301      	movs	r3, #1
 8003624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362a:	2300      	movs	r3, #0
 800362c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 800362e:	f107 0314 	add.w	r3, r7, #20
 8003632:	4619      	mov	r1, r3
 8003634:	4807      	ldr	r0, [pc, #28]	; (8003654 <MX_GPIO_Init+0x1d0>)
 8003636:	f003 fb43 	bl	8006cc0 <HAL_GPIO_Init>

}
 800363a:	bf00      	nop
 800363c:	3728      	adds	r7, #40	; 0x28
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	40020800 	.word	0x40020800
 800364c:	40020400 	.word	0x40020400
 8003650:	40020000 	.word	0x40020000
 8003654:	40020c00 	.word	0x40020c00

08003658 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  #if USE_LED
  led_init();
 800365c:	f7fd fea0 	bl	80013a0 <led_init>
  #endif
  flash_init();
 8003660:	f7fe ffbe 	bl	80025e0 <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 8003664:	f001 f8ca 	bl	80047fc <tim11_init>
  /* encoder_init */
  tim10_init();
 8003668:	f001 f80e 	bl	8004688 <tim10_init>
  /* tim7 */
  tim7_init();
 800366c:	f001 f9a2 	bl	80049b4 <tim7_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8003670:	f001 f8de 	bl	8004830 <tim6_init>
  /* imu のバイアス補正のための初期化 */
  if(rotary_read_playmode() == motor_free)
 8003674:	f7fd ff88 	bl	8001588 <rotary_read_playmode>
 8003678:	4603      	mov	r3, r0
 800367a:	2b04      	cmp	r3, #4
 800367c:	d101      	bne.n	8003682 <main_init+0x2a>
    imu_revision_init();
 800367e:	f000 f943 	bl	8003908 <imu_revision_init>
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}

08003686 <running_start>:

void running_start()
{
 8003686:	b580      	push	{r7, lr}
 8003688:	af00      	add	r7, sp, #0
  HAL_Delay(2500);
 800368a:	f640 10c4 	movw	r0, #2500	; 0x9c4
 800368e:	f001 fec7 	bl	8005420 <HAL_Delay>
  #if USE_LED
  led_start();
 8003692:	f7fd fe9b 	bl	80013cc <led_start>
  #endif
  #if D_TIM7
  printf("main.c > running_start() > ");
  #endif
  tim7_start();
 8003696:	f001 f99d 	bl	80049d4 <tim7_start>
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 800369a:	f001 f81f 	bl	80046dc <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 800369e:	f001 f8d3 	bl	8004848 <tim6_start>
  /* imu のバイアス補正のための準備 */
  if(rotary_read_playmode() == motor_free)
 80036a2:	f7fd ff71 	bl	8001588 <rotary_read_playmode>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d101      	bne.n	80036b0 <running_start+0x2a>
    imu_revision_start();
 80036ac:	f000 f934 	bl	8003918 <imu_revision_start>
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <running_stop>:

void running_stop()
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  #if USE_LED
  led_stop();
 80036b8:	f7fd fe93 	bl	80013e2 <led_stop>
  #endif
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 80036bc:	f001 f8d2 	bl	8004864 <tim6_stop>
  /* tim7 */
  tim7_stop();
 80036c0:	f001 f9bc 	bl	8004a3c <tim7_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 80036c4:	f001 f82e 	bl	8004724 <tim10_stop>
  /* imu バイアス補正のための終了 */
  if(rotary_read_playmode() == motor_free)
 80036c8:	f7fd ff5e 	bl	8001588 <rotary_read_playmode>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d101      	bne.n	80036d6 <running_stop+0x22>
    imu_revision_stop();
 80036d2:	f000 f931 	bl	8003938 <imu_revision_stop>
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <main_print_while>:

void main_print_while()
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
	printf("////////////////////////////// WHILE //////////////////////////////\n\r");
 80036e0:	4804      	ldr	r0, [pc, #16]	; (80036f4 <main_print_while+0x18>)
 80036e2:	f007 fb23 	bl	800ad2c <iprintf>
  rotary_print_playmode();
 80036e6:	f7fd ffbd 	bl	8001664 <rotary_print_playmode>
	print_rotary_value();
 80036ea:	f000 f8ff 	bl	80038ec <print_rotary_value>
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	0800eca0 	.word	0x0800eca0

080036f8 <main_main>:

void main_main()
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  main_d_print();
 80036fc:	f000 f805 	bl	800370a <main_d_print>
	tim7_main();
	#endif
	#if D_TIM6_WHILE
	tim6_main();
	#endif
	HAL_Delay(1);
 8003700:	2001      	movs	r0, #1
 8003702:	f001 fe8d 	bl	8005420 <HAL_Delay>
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}

0800370a <main_d_print>:

void main_d_print()
{
 800370a:	b580      	push	{r7, lr}
 800370c:	af00      	add	r7, sp, #0
  revision_print();
 800370e:	f000 f919 	bl	8003944 <revision_print>
  tim10_d_print();
 8003712:	f001 f867 	bl	80047e4 <tim10_d_print>
  tim7_d_print();
 8003716:	f001 fa55 	bl	8004bc4 <tim7_d_print>
  tim6_d_print();
 800371a:	f001 f945 	bl	80049a8 <tim6_d_print>
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}

08003722 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003722:	b480      	push	{r7}
 8003724:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003726:	b672      	cpsid	i
}
 8003728:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800372a:	e7fe      	b.n	800372a <Error_Handler+0x8>

0800372c <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003730:	2000      	movs	r0, #0
 8003732:	f000 f827 	bl	8003784 <motor_enable>
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <motor_start>:

void motor_start()
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8003740:	2100      	movs	r1, #0
 8003742:	4806      	ldr	r0, [pc, #24]	; (800375c <motor_start+0x20>)
 8003744:	f005 f926 	bl	8008994 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8003748:	2104      	movs	r1, #4
 800374a:	4804      	ldr	r0, [pc, #16]	; (800375c <motor_start+0x20>)
 800374c:	f005 f922 	bl	8008994 <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8003750:	2001      	movs	r0, #1
 8003752:	f000 f817 	bl	8003784 <motor_enable>
#endif
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000464 	.word	0x20000464

08003760 <motor_stop>:

void motor_stop()
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
    motor_enable(0);
 8003764:	2000      	movs	r0, #0
 8003766:	f000 f80d 	bl	8003784 <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 800376a:	2104      	movs	r1, #4
 800376c:	4804      	ldr	r0, [pc, #16]	; (8003780 <motor_stop+0x20>)
 800376e:	f005 f9d9 	bl	8008b24 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8003772:	2100      	movs	r1, #0
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <motor_stop+0x20>)
 8003776:	f005 f9d5 	bl	8008b24 <HAL_TIM_PWM_Stop>
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000464 	.word	0x20000464

08003784 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2b00      	cmp	r3, #0
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <motor_enable+0x28>)
 800379e:	701a      	strb	r2, [r3, #0]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	200094ec 	.word	0x200094ec

080037b0 <motor_read_enable>:

char motor_read_enable()
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
    return enable;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <motor_read_enable+0x14>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	200094ec 	.word	0x200094ec

080037c8 <motor_set>:

void motor_set(float motor_left_, float motor_right_)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80037d2:	edc7 0a00 	vstr	s1, [r7]
    if(motor_left_ < 0)
 80037d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e2:	d50b      	bpl.n	80037fc <motor_set+0x34>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2104      	movs	r1, #4
 80037e8:	4831      	ldr	r0, [pc, #196]	; (80038b0 <motor_set+0xe8>)
 80037ea:	f003 fc1d 	bl	8007028 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 80037ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80037f2:	eef1 7a67 	vneg.f32	s15, s15
 80037f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80037fa:	e004      	b.n	8003806 <motor_set+0x3e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80037fc:	2201      	movs	r2, #1
 80037fe:	2104      	movs	r1, #4
 8003800:	482b      	ldr	r0, [pc, #172]	; (80038b0 <motor_set+0xe8>)
 8003802:	f003 fc11 	bl	8007028 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8003806:	edd7 7a00 	vldr	s15, [r7]
 800380a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d50c      	bpl.n	800382e <motor_set+0x66>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8003814:	2201      	movs	r2, #1
 8003816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800381a:	4826      	ldr	r0, [pc, #152]	; (80038b4 <motor_set+0xec>)
 800381c:	f003 fc04 	bl	8007028 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8003820:	edd7 7a00 	vldr	s15, [r7]
 8003824:	eef1 7a67 	vneg.f32	s15, s15
 8003828:	edc7 7a00 	vstr	s15, [r7]
 800382c:	e005      	b.n	800383a <motor_set+0x72>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800382e:	2200      	movs	r2, #0
 8003830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003834:	481f      	ldr	r0, [pc, #124]	; (80038b4 <motor_set+0xec>)
 8003836:	f003 fbf7 	bl	8007028 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 800383a:	edd7 7a01 	vldr	s15, [r7, #4]
 800383e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80038b8 <motor_set+0xf0>
 8003842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	dd01      	ble.n	8003850 <motor_set+0x88>
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <motor_set+0xf4>)
 800384e:	e000      	b.n	8003852 <motor_set+0x8a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	607b      	str	r3, [r7, #4]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 8003854:	edd7 7a00 	vldr	s15, [r7]
 8003858:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80038b8 <motor_set+0xf0>
 800385c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	dd01      	ble.n	800386a <motor_set+0xa2>
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <motor_set+0xf4>)
 8003868:	e000      	b.n	800386c <motor_set+0xa4>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	603b      	str	r3, [r7, #0]

    if(!enable)
 800386e:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <motor_set+0xf8>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <motor_set+0xba>
    {
        motor_left_ = 0;
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	607b      	str	r3, [r7, #4]
        motor_right_ = 0;
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	603b      	str	r3, [r7, #0]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <motor_set+0xfc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	edd7 7a01 	vldr	s15, [r7, #4]
 800388a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800388e:	ee17 2a90 	vmov	r2, s15
 8003892:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <motor_set+0xfc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	edd7 7a00 	vldr	s15, [r7]
 800389c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038a0:	ee17 2a90 	vmov	r2, s15
 80038a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40020c00 	.word	0x40020c00
 80038b4:	40020800 	.word	0x40020800
 80038b8:	447a0000 	.word	0x447a0000
 80038bc:	447a0000 	.word	0x447a0000
 80038c0:	200094ec 	.word	0x200094ec
 80038c4:	20000464 	.word	0x20000464

080038c8 <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 80038d0:	1d39      	adds	r1, r7, #4
 80038d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038d6:	2201      	movs	r2, #1
 80038d8:	4803      	ldr	r0, [pc, #12]	; (80038e8 <__io_putchar+0x20>)
 80038da:	f006 f8a4 	bl	8009a26 <HAL_UART_Transmit>
	return ch;
 80038de:	687b      	ldr	r3, [r7, #4]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000710 	.word	0x20000710

080038ec <print_rotary_value>:

void print_rotary_value()
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 80038f0:	f7fd fe62 	bl	80015b8 <rotary_read_value>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4619      	mov	r1, r3
 80038f8:	4802      	ldr	r0, [pc, #8]	; (8003904 <print_rotary_value+0x18>)
 80038fa:	f007 fa17 	bl	800ad2c <iprintf>
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	0800ece8 	.word	0x0800ece8

08003908 <imu_revision_init>:
unsigned int imu_revision_count;
float imu_revision_sum;
float imu_revision_average;

void imu_revision_init()
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
    //! course_init() されていることが前提で空関数
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <imu_revision_start>:

void imu_revision_start()
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
    imu_revision_count = 1;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <imu_revision_start+0x1c>)
 800391e:	2201      	movs	r2, #1
 8003920:	601a      	str	r2, [r3, #0]
    course_start();
 8003922:	f7fe fa69 	bl	8001df8 <course_start>
    HAL_Delay(5000);
 8003926:	f241 3088 	movw	r0, #5000	; 0x1388
 800392a:	f001 fd79 	bl	8005420 <HAL_Delay>
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	200094f8 	.word	0x200094f8

08003938 <imu_revision_stop>:

void imu_revision_stop()
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
    course_stop();
 800393c:	f7fe fa66 	bl	8001e0c <course_stop>
}
 8003940:	bf00      	nop
 8003942:	bd80      	pop	{r7, pc}

08003944 <revision_print>:
        imu_revision_count = imu_revision_count + 1;
	}
}

void revision_print()
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
    #if IMU_REVISION
    imu_revision_print();
    #endif
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <section_length_set_sampling_time_ms>:
//! update 周期
float samplingtime_s;

//! update 周期を設定する
void section_length_set_sampling_time_ms(unsigned short int samplingtime_ms)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	80fb      	strh	r3, [r7, #6]
    samplingtime_s = samplingtime_ms / (float) 1000;
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003968:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003984 <section_length_set_sampling_time_ms+0x30>
 800396c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <section_length_set_sampling_time_ms+0x34>)
 8003972:	edc3 7a00 	vstr	s15, [r3]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	447a0000 	.word	0x447a0000
 8003988:	20009500 	.word	0x20009500

0800398c <section_length_init>:

void section_length_init(unsigned short int samplingtime_ms)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	80fb      	strh	r3, [r7, #6]
    section_length_set_sampling_time_ms(samplingtime_ms);
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ffdb 	bl	8003954 <section_length_set_sampling_time_ms>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <section_length_start>:

void section_length_start()
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	af00      	add	r7, sp, #0
    section_length_reset();
 80039aa:	f000 f80d 	bl	80039c8 <section_length_reset>
    section_length_buffer_reset();
 80039ae:	f000 f81f 	bl	80039f0 <section_length_buffer_reset>
    length_start();
 80039b2:	f7fe fead 	bl	8002710 <length_start>
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}

080039ba <section_length_stop>:

void section_length_stop()
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	af00      	add	r7, sp, #0
    length_stop();
 80039be:	f7fe febd 	bl	800273c <length_stop>
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <section_length_reset>:
{
    length_fin();
}

void section_length_reset()
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
    section_length_right = 0;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <section_length_reset+0x20>)
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
    section_length_left = 0;
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <section_length_reset+0x24>)
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	200094fc 	.word	0x200094fc
 80039ec:	20009504 	.word	0x20009504

080039f0 <section_length_buffer_reset>:

void section_length_buffer_reset()
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = 0;
 80039f4:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <section_length_buffer_reset+0x20>)
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
    section_length_buffer_global_right = 0;
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <section_length_buffer_reset+0x24>)
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
}
 8003a04:	bf00      	nop
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	2000950c 	.word	0x2000950c
 8003a14:	20009508 	.word	0x20009508

08003a18 <section_length_read>:

//! 現在点区間長を返す
float section_length_read()
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	ed2d 8b02 	vpush	{d8}
 8003a1e:	af00      	add	r7, sp, #0
    return (section_length_read_left() + section_length_read_right()) / 2;
 8003a20:	f000 f814 	bl	8003a4c <section_length_read_left>
 8003a24:	eeb0 8a40 	vmov.f32	s16, s0
 8003a28:	f000 f81e 	bl	8003a68 <section_length_read_right>
 8003a2c:	eef0 7a40 	vmov.f32	s15, s0
 8003a30:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003a34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a3c:	eef0 7a66 	vmov.f32	s15, s13
}
 8003a40:	eeb0 0a67 	vmov.f32	s0, s15
 8003a44:	46bd      	mov	sp, r7
 8003a46:	ecbd 8b02 	vpop	{d8}
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <section_length_read_left>:

float section_length_read_left()
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
    return section_length_left;
 8003a50:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <section_length_read_left+0x18>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	ee07 3a90 	vmov	s15, r3
}
 8003a58:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	20009504 	.word	0x20009504

08003a68 <section_length_read_right>:

float section_length_read_right()
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
    return section_length_right;
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <section_length_read_right+0x18>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	ee07 3a90 	vmov	s15, r3
}
 8003a74:	eeb0 0a67 	vmov.f32	s0, s15
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	200094fc 	.word	0x200094fc

08003a84 <section_length_set_buffer>:
 * }
 * 
 */
//! 区間開始点を現在点の世界長にする
void section_length_set_buffer()
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
    section_length_buffer_global_left = length_read_left();
 8003a88:	f7fe fe92 	bl	80027b0 <length_read_left>
 8003a8c:	eef0 7a40 	vmov.f32	s15, s0
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <section_length_set_buffer+0x34>)
 8003a92:	edc3 7a00 	vstr	s15, [r3]
    section_length_buffer_global_right = length_read_right();
 8003a96:	f7fe fe99 	bl	80027cc <length_read_right>
 8003a9a:	eef0 7a40 	vmov.f32	s15, s0
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <section_length_set_buffer+0x38>)
 8003aa0:	edc3 7a00 	vstr	s15, [r3]
    section_length_left = 0;
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <section_length_set_buffer+0x3c>)
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
    section_length_right = 0;
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <section_length_set_buffer+0x40>)
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	2000950c 	.word	0x2000950c
 8003abc:	20009508 	.word	0x20009508
 8003ac0:	20009504 	.word	0x20009504
 8003ac4:	200094fc 	.word	0x200094fc

08003ac8 <section_length_update>:

void section_length_update()
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
    //! 区間開始点から現在点の区間長を計算
    section_length_left = length_read_left() - section_length_buffer_global_left;
 8003acc:	f7fe fe70 	bl	80027b0 <length_read_left>
 8003ad0:	eeb0 7a40 	vmov.f32	s14, s0
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <section_length_update+0x38>)
 8003ad6:	edd3 7a00 	vldr	s15, [r3]
 8003ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <section_length_update+0x3c>)
 8003ae0:	edc3 7a00 	vstr	s15, [r3]
    section_length_right = length_read_right() - section_length_buffer_global_right;
 8003ae4:	f7fe fe72 	bl	80027cc <length_read_right>
 8003ae8:	eeb0 7a40 	vmov.f32	s14, s0
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <section_length_update+0x40>)
 8003aee:	edd3 7a00 	vldr	s15, [r3]
 8003af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003af6:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <section_length_update+0x44>)
 8003af8:	edc3 7a00 	vstr	s15, [r3]
}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	2000950c 	.word	0x2000950c
 8003b04:	20009504 	.word	0x20009504
 8003b08:	20009508 	.word	0x20009508
 8003b0c:	200094fc 	.word	0x200094fc

08003b10 <section_length_d_print>:

void section_length_d_print()
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
    #if D_SECTION_LENGTH
    printf("section_length = %10.2f\r\n", section_length_read());
    #endif
}
 8003b14:	bf00      	nop
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <sidesensor_read>:
unsigned char subsensbuf, marker, sidedeltacount, rightmarkercount;
SideSensorState markerstate, markerstate_volatile;
char sidesensor_start_or_stop;

uint8_t sidesensor_read()
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 8003b2a:	2104      	movs	r1, #4
 8003b2c:	4810      	ldr	r0, [pc, #64]	; (8003b70 <sidesensor_read+0x50>)
 8003b2e:	f003 fa63 	bl	8006ff8 <HAL_GPIO_ReadPin>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	79fb      	ldrb	r3, [r7, #7]
 8003b42:	4413      	add	r3, r2
 8003b44:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 8003b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b4a:	4809      	ldr	r0, [pc, #36]	; (8003b70 <sidesensor_read+0x50>)
 8003b4c:	f003 fa54 	bl	8006ff8 <HAL_GPIO_ReadPin>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <sidesensor_read+0x3a>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e000      	b.n	8003b5c <sidesensor_read+0x3c>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	4413      	add	r3, r2
 8003b62:	71fb      	strb	r3, [r7, #7]

    return subsens;
 8003b64:	79fb      	ldrb	r3, [r7, #7]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40020400 	.word	0x40020400

08003b74 <sidesensor_start>:

void sidesensor_start()
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
    marker = 0;
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <sidesensor_start+0x34>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <sidesensor_start+0x38>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 8003b84:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <sidesensor_start+0x3c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 8003b8a:	4b0a      	ldr	r3, [pc, #40]	; (8003bb4 <sidesensor_start+0x40>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
	markerstate = none;
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <sidesensor_start+0x44>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = none;
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <sidesensor_start+0x48>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	20009513 	.word	0x20009513
 8003bac:	20009510 	.word	0x20009510
 8003bb0:	20009511 	.word	0x20009511
 8003bb4:	20009516 	.word	0x20009516
 8003bb8:	20009512 	.word	0x20009512
 8003bbc:	20009514 	.word	0x20009514

08003bc0 <sidesensor_stop>:

void sidesensor_stop()
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 8003bc4:	bf00      	nop
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <sidesensor_read_markerstate>:

SideSensorState sidesensor_read_markerstate()
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
	return markerstate;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <sidesensor_read_markerstate+0x14>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20009512 	.word	0x20009512

08003be8 <sidesensor_read_markerstate_volatile>:

SideSensorState sidesensor_read_markerstate_volatile()
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	return markerstate_volatile;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <sidesensor_read_markerstate_volatile+0x14>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20009514 	.word	0x20009514

08003c00 <sidesensor_right>:

void sidesensor_right()
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
    if(rightmarkercount == 1 - 1)
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <sidesensor_right+0x44>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <sidesensor_right+0x1a>
    {
        // start
		markerstate_volatile = straight;
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <sidesensor_right+0x48>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
		markerstate = straight;
 8003c12:	4b0e      	ldr	r3, [pc, #56]	; (8003c4c <sidesensor_right+0x4c>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e009      	b.n	8003c2e <sidesensor_right+0x2e>
    }
    else if(rightmarkercount == 2 - 1)
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <sidesensor_right+0x44>)
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d105      	bne.n	8003c2e <sidesensor_right+0x2e>
    {
        // stop
		markerstate_volatile = stop;
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <sidesensor_right+0x48>)
 8003c24:	2203      	movs	r2, #3
 8003c26:	701a      	strb	r2, [r3, #0]
		markerstate = stop;
 8003c28:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <sidesensor_right+0x4c>)
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	701a      	strb	r2, [r3, #0]
    }
    rightmarkercount++;
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <sidesensor_right+0x44>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <sidesensor_right+0x44>)
 8003c38:	701a      	strb	r2, [r3, #0]
}
 8003c3a:	bf00      	nop
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	20009516 	.word	0x20009516
 8003c48:	20009514 	.word	0x20009514
 8003c4c:	20009512 	.word	0x20009512

08003c50 <sidesensor_left>:

void sidesensor_left()
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <sidesensor_left+0x1c>)
 8003c56:	2204      	movs	r2, #4
 8003c58:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = curve;
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <sidesensor_left+0x20>)
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	701a      	strb	r2, [r3, #0]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20009512 	.word	0x20009512
 8003c70:	20009514 	.word	0x20009514

08003c74 <sidesensor_cross>:

void sidesensor_cross()
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <sidesensor_cross+0x1c>)
 8003c7a:	2205      	movs	r2, #5
 8003c7c:	701a      	strb	r2, [r3, #0]
	markerstate_volatile = cross;
 8003c7e:	4b05      	ldr	r3, [pc, #20]	; (8003c94 <sidesensor_cross+0x20>)
 8003c80:	2205      	movs	r2, #5
 8003c82:	701a      	strb	r2, [r3, #0]
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20009512 	.word	0x20009512
 8003c94:	20009514 	.word	0x20009514

08003c98 <sidesensor_main>:
	markerstate = straight;
	markerstate_volatile = straight;
}

void sidesensor_main()
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 8003c9e:	f7ff ff3f 	bl	8003b20 <sidesensor_read>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71fb      	strb	r3, [r7, #7]
	markerstate_volatile = none;
 8003ca6:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <sidesensor_main+0xb0>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]

	if(subsens != subsensbuf)
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <sidesensor_main+0xb4>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	79fa      	ldrb	r2, [r7, #7]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d044      	beq.n	8003d40 <sidesensor_main+0xa8>
	{
		subsensbuf = subsens;
 8003cb6:	4a25      	ldr	r2, [pc, #148]	; (8003d4c <sidesensor_main+0xb4>)
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 8003cbc:	79fa      	ldrb	r2, [r7, #7]
 8003cbe:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <sidesensor_main+0xb8>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <sidesensor_main+0xbc>)
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	4413      	add	r3, r2
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <sidesensor_main+0xbc>)
 8003cd4:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d12b      	bne.n	8003d34 <sidesensor_main+0x9c>
 8003cdc:	4b1c      	ldr	r3, [pc, #112]	; (8003d50 <sidesensor_main+0xb8>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d027      	beq.n	8003d34 <sidesensor_main+0x9c>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <sidesensor_main+0xbc>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f003 0303 	and.w	r3, r3, #3
 8003cec:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 8003cee:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <sidesensor_main+0xbc>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	109b      	asrs	r3, r3, #2
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 8003cfc:	797b      	ldrb	r3, [r7, #5]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10e      	bne.n	8003d20 <sidesensor_main+0x88>
			{
				if (first == 0b01)
 8003d02:	79bb      	ldrb	r3, [r7, #6]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d102      	bne.n	8003d0e <sidesensor_main+0x76>
				{
					// right -> start / stop
                    sidesensor_right();
 8003d08:	f7ff ff7a 	bl	8003c00 <sidesensor_right>
 8003d0c:	e00a      	b.n	8003d24 <sidesensor_main+0x8c>
				}
				else if (first == 0b10)
 8003d0e:	79bb      	ldrb	r3, [r7, #6]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d102      	bne.n	8003d1a <sidesensor_main+0x82>
				{
					// left -> curve
                    sidesensor_left();
 8003d14:	f7ff ff9c 	bl	8003c50 <sidesensor_left>
 8003d18:	e004      	b.n	8003d24 <sidesensor_main+0x8c>
				}
				else
				{
					// cross
                    sidesensor_cross();
 8003d1a:	f7ff ffab 	bl	8003c74 <sidesensor_cross>
 8003d1e:	e001      	b.n	8003d24 <sidesensor_main+0x8c>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 8003d20:	f7ff ffa8 	bl	8003c74 <sidesensor_cross>
			}
			sidedeltacount = 0;
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <sidesensor_main+0xb8>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <sidesensor_main+0xbc>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
		{
 8003d30:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 8003d32:	e005      	b.n	8003d40 <sidesensor_main+0xa8>
			sidedeltacount++;
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <sidesensor_main+0xb8>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <sidesensor_main+0xb8>)
 8003d3e:	701a      	strb	r2, [r3, #0]
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20009514 	.word	0x20009514
 8003d4c:	20009510 	.word	0x20009510
 8003d50:	20009511 	.word	0x20009511
 8003d54:	20009513 	.word	0x20009513

08003d58 <sidesensor_d_print>:
			break;
	}
}

void sidesensor_d_print()
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
	#if D_SIDESENSOR
	printf("sidesensor.c > sidesensor_d_print() > ");
	sidesensor_print_sidesensorstate(markerstate);
	#endif
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <slow_start>:
{
    slow_enable = slow_enable_;
}

void slow_start(PID *_pid)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
    /* slow_start */
    slowinglength = 0;
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <slow_start+0x48>)
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
    base_pointer = _pid;
 8003d78:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <slow_start+0x4c>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6013      	str	r3, [r2, #0]
    slow_pid.target = 0;
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <slow_start+0x50>)
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
    slow_pid.kp = 0;
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <slow_start+0x50>)
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	605a      	str	r2, [r3, #4]
    slow_pid.ki = 0;
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <slow_start+0x50>)
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	609a      	str	r2, [r3, #8]
    slow_pid.kd = 0;
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <slow_start+0x50>)
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	60da      	str	r2, [r3, #12]
    slow_enable = 1;
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <slow_start+0x54>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	20009534 	.word	0x20009534
 8003db4:	20009530 	.word	0x20009530
 8003db8:	2000951c 	.word	0x2000951c
 8003dbc:	20009518 	.word	0x20009518

08003dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_MspInit+0x54>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	4a11      	ldr	r2, [pc, #68]	; (8003e14 <HAL_MspInit+0x54>)
 8003dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_MspInit+0x54>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_MspInit+0x54>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <HAL_MspInit+0x54>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_MspInit+0x54>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	603b      	str	r3, [r7, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8003dfe:	2200      	movs	r2, #0
 8003e00:	210f      	movs	r1, #15
 8003e02:	f06f 0003 	mvn.w	r0, #3
 8003e06:	f002 f86c 	bl	8005ee2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800

08003e18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08c      	sub	sp, #48	; 0x30
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e20:	f107 031c 	add.w	r3, r7, #28
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a49      	ldr	r2, [pc, #292]	; (8003f5c <HAL_ADC_MspInit+0x144>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	f040 808c 	bne.w	8003f54 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	4b47      	ldr	r3, [pc, #284]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	4a46      	ldr	r2, [pc, #280]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4a:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4c:	4b44      	ldr	r3, [pc, #272]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	4b40      	ldr	r3, [pc, #256]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	4a3f      	ldr	r2, [pc, #252]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e62:	f043 0304 	orr.w	r3, r3, #4
 8003e66:	6313      	str	r3, [r2, #48]	; 0x30
 8003e68:	4b3d      	ldr	r3, [pc, #244]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	4a38      	ldr	r2, [pc, #224]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	6313      	str	r3, [r2, #48]	; 0x30
 8003e84:	4b36      	ldr	r3, [pc, #216]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	4b32      	ldr	r3, [pc, #200]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	4a31      	ldr	r2, [pc, #196]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea0:	4b2f      	ldr	r3, [pc, #188]	; (8003f60 <HAL_ADC_MspInit+0x148>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003eac:	233f      	movs	r3, #63	; 0x3f
 8003eae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb8:	f107 031c 	add.w	r3, r7, #28
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4829      	ldr	r0, [pc, #164]	; (8003f64 <HAL_ADC_MspInit+0x14c>)
 8003ec0:	f002 fefe 	bl	8006cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003ec4:	23ff      	movs	r3, #255	; 0xff
 8003ec6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed0:	f107 031c 	add.w	r3, r7, #28
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4824      	ldr	r0, [pc, #144]	; (8003f68 <HAL_ADC_MspInit+0x150>)
 8003ed8:	f002 fef2 	bl	8006cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003edc:	2303      	movs	r3, #3
 8003ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee8:	f107 031c 	add.w	r3, r7, #28
 8003eec:	4619      	mov	r1, r3
 8003eee:	481f      	ldr	r0, [pc, #124]	; (8003f6c <HAL_ADC_MspInit+0x154>)
 8003ef0:	f002 fee6 	bl	8006cc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003ef6:	4a1f      	ldr	r2, [pc, #124]	; (8003f74 <HAL_ADC_MspInit+0x15c>)
 8003ef8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f0c:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f14:	4b16      	ldr	r3, [pc, #88]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f1c:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f2a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f38:	480d      	ldr	r0, [pc, #52]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f3a:	f002 f809 	bl	8005f50 <HAL_DMA_Init>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8003f44:	f7ff fbed 	bl	8003722 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8003f4e:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <HAL_ADC_MspInit+0x158>)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f54:	bf00      	nop
 8003f56:	3730      	adds	r7, #48	; 0x30
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40012000 	.word	0x40012000
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40020800 	.word	0x40020800
 8003f68:	40020000 	.word	0x40020000
 8003f6c:	40020400 	.word	0x40020400
 8003f70:	20000620 	.word	0x20000620
 8003f74:	40026410 	.word	0x40026410

08003f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a19      	ldr	r2, [pc, #100]	; (8003ffc <HAL_I2C_MspInit+0x84>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d12c      	bne.n	8003ff4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	4b18      	ldr	r3, [pc, #96]	; (8004000 <HAL_I2C_MspInit+0x88>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	4a17      	ldr	r2, [pc, #92]	; (8004000 <HAL_I2C_MspInit+0x88>)
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003faa:	4b15      	ldr	r3, [pc, #84]	; (8004000 <HAL_I2C_MspInit+0x88>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003fb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fbc:	2312      	movs	r3, #18
 8003fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fc8:	2304      	movs	r3, #4
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	480c      	ldr	r0, [pc, #48]	; (8004004 <HAL_I2C_MspInit+0x8c>)
 8003fd4:	f002 fe74 	bl	8006cc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <HAL_I2C_MspInit+0x88>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	4a07      	ldr	r2, [pc, #28]	; (8004000 <HAL_I2C_MspInit+0x88>)
 8003fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_I2C_MspInit+0x88>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ff4:	bf00      	nop
 8003ff6:	3728      	adds	r7, #40	; 0x28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40005400 	.word	0x40005400
 8004000:	40023800 	.word	0x40023800
 8004004:	40020400 	.word	0x40020400

08004008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a19      	ldr	r2, [pc, #100]	; (800408c <HAL_SPI_MspInit+0x84>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d12c      	bne.n	8004084 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	4b18      	ldr	r3, [pc, #96]	; (8004090 <HAL_SPI_MspInit+0x88>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	4a17      	ldr	r2, [pc, #92]	; (8004090 <HAL_SPI_MspInit+0x88>)
 8004034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
 800403a:	4b15      	ldr	r3, [pc, #84]	; (8004090 <HAL_SPI_MspInit+0x88>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	4b11      	ldr	r3, [pc, #68]	; (8004090 <HAL_SPI_MspInit+0x88>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	4a10      	ldr	r2, [pc, #64]	; (8004090 <HAL_SPI_MspInit+0x88>)
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	6313      	str	r3, [r2, #48]	; 0x30
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <HAL_SPI_MspInit+0x88>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8004062:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8004066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004068:	2302      	movs	r3, #2
 800406a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004070:	2303      	movs	r3, #3
 8004072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004074:	2305      	movs	r3, #5
 8004076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	4619      	mov	r1, r3
 800407e:	4805      	ldr	r0, [pc, #20]	; (8004094 <HAL_SPI_MspInit+0x8c>)
 8004080:	f002 fe1e 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004084:	bf00      	nop
 8004086:	3728      	adds	r7, #40	; 0x28
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40003800 	.word	0x40003800
 8004090:	40023800 	.word	0x40023800
 8004094:	40020400 	.word	0x40020400

08004098 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08c      	sub	sp, #48	; 0x30
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a0:	f107 031c 	add.w	r3, r7, #28
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	605a      	str	r2, [r3, #4]
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	60da      	str	r2, [r3, #12]
 80040ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a3a      	ldr	r2, [pc, #232]	; (80041a0 <HAL_TIM_Encoder_MspInit+0x108>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d13d      	bne.n	8004136 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	4a38      	ldr	r2, [pc, #224]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ca:	4b36      	ldr	r3, [pc, #216]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	4b32      	ldr	r3, [pc, #200]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	4a31      	ldr	r2, [pc, #196]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6313      	str	r3, [r2, #48]	; 0x30
 80040e6:	4b2f      	ldr	r3, [pc, #188]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 80040e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 80040f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f8:	2302      	movs	r3, #2
 80040fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004100:	2300      	movs	r3, #0
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004104:	2301      	movs	r3, #1
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004108:	f107 031c 	add.w	r3, r7, #28
 800410c:	4619      	mov	r1, r3
 800410e:	4826      	ldr	r0, [pc, #152]	; (80041a8 <HAL_TIM_Encoder_MspInit+0x110>)
 8004110:	f002 fdd6 	bl	8006cc0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004114:	2200      	movs	r2, #0
 8004116:	2100      	movs	r1, #0
 8004118:	2019      	movs	r0, #25
 800411a:	f001 fee2 	bl	8005ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800411e:	2019      	movs	r0, #25
 8004120:	f001 fefb 	bl	8005f1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004124:	2200      	movs	r2, #0
 8004126:	2100      	movs	r1, #0
 8004128:	201a      	movs	r0, #26
 800412a:	f001 feda 	bl	8005ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800412e:	201a      	movs	r0, #26
 8004130:	f001 fef3 	bl	8005f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004134:	e030      	b.n	8004198 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <HAL_TIM_Encoder_MspInit+0x114>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d12b      	bne.n	8004198 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	4b17      	ldr	r3, [pc, #92]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800414a:	f043 0302 	orr.w	r3, r3, #2
 800414e:	6413      	str	r3, [r2, #64]	; 0x40
 8004150:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	4b10      	ldr	r3, [pc, #64]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	4a0f      	ldr	r2, [pc, #60]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 8004166:	f043 0302 	orr.w	r3, r3, #2
 800416a:	6313      	str	r3, [r2, #48]	; 0x30
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <HAL_TIM_Encoder_MspInit+0x10c>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 8004178:	2330      	movs	r3, #48	; 0x30
 800417a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417c:	2302      	movs	r3, #2
 800417e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004184:	2300      	movs	r3, #0
 8004186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004188:	2302      	movs	r3, #2
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418c:	f107 031c 	add.w	r3, r7, #28
 8004190:	4619      	mov	r1, r3
 8004192:	4807      	ldr	r0, [pc, #28]	; (80041b0 <HAL_TIM_Encoder_MspInit+0x118>)
 8004194:	f002 fd94 	bl	8006cc0 <HAL_GPIO_Init>
}
 8004198:	bf00      	nop
 800419a:	3730      	adds	r7, #48	; 0x30
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40023800 	.word	0x40023800
 80041a8:	40020000 	.word	0x40020000
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40020400 	.word	0x40020400

080041b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d10d      	bne.n	80041e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <HAL_TIM_PWM_MspInit+0x40>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a09      	ldr	r2, [pc, #36]	; (80041f4 <HAL_TIM_PWM_MspInit+0x40>)
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40
 80041d6:	4b07      	ldr	r3, [pc, #28]	; (80041f4 <HAL_TIM_PWM_MspInit+0x40>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a3e      	ldr	r2, [pc, #248]	; (8004300 <HAL_TIM_Base_MspInit+0x108>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d116      	bne.n	8004238 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
 800420e:	4b3d      	ldr	r3, [pc, #244]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	4a3c      	ldr	r2, [pc, #240]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 8004214:	f043 0310 	orr.w	r3, r3, #16
 8004218:	6413      	str	r3, [r2, #64]	; 0x40
 800421a:	4b3a      	ldr	r3, [pc, #232]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004226:	2200      	movs	r2, #0
 8004228:	2100      	movs	r1, #0
 800422a:	2036      	movs	r0, #54	; 0x36
 800422c:	f001 fe59 	bl	8005ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004230:	2036      	movs	r0, #54	; 0x36
 8004232:	f001 fe72 	bl	8005f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004236:	e05e      	b.n	80042f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a32      	ldr	r2, [pc, #200]	; (8004308 <HAL_TIM_Base_MspInit+0x110>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d10e      	bne.n	8004260 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a2e      	ldr	r2, [pc, #184]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 800424c:	f043 0320 	orr.w	r3, r3, #32
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
 8004252:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	69bb      	ldr	r3, [r7, #24]
}
 800425e:	e04a      	b.n	80042f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a29      	ldr	r2, [pc, #164]	; (800430c <HAL_TIM_Base_MspInit+0x114>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d116      	bne.n	8004298 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	4a24      	ldr	r2, [pc, #144]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 8004274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004278:	6453      	str	r3, [r2, #68]	; 0x44
 800427a:	4b22      	ldr	r3, [pc, #136]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004286:	2200      	movs	r2, #0
 8004288:	2100      	movs	r1, #0
 800428a:	2019      	movs	r0, #25
 800428c:	f001 fe29 	bl	8005ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004290:	2019      	movs	r0, #25
 8004292:	f001 fe42 	bl	8005f1a <HAL_NVIC_EnableIRQ>
}
 8004296:	e02e      	b.n	80042f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <HAL_TIM_Base_MspInit+0x118>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d116      	bne.n	80042d0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	4b17      	ldr	r3, [pc, #92]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	4a16      	ldr	r2, [pc, #88]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 80042ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b0:	6453      	str	r3, [r2, #68]	; 0x44
 80042b2:	4b14      	ldr	r3, [pc, #80]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	201a      	movs	r0, #26
 80042c4:	f001 fe0d 	bl	8005ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80042c8:	201a      	movs	r0, #26
 80042ca:	f001 fe26 	bl	8005f1a <HAL_NVIC_EnableIRQ>
}
 80042ce:	e012      	b.n	80042f6 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM14)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0f      	ldr	r2, [pc, #60]	; (8004314 <HAL_TIM_Base_MspInit+0x11c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d10d      	bne.n	80042f6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_TIM_Base_MspInit+0x10c>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
}
 80042f6:	bf00      	nop
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40001000 	.word	0x40001000
 8004304:	40023800 	.word	0x40023800
 8004308:	40001400 	.word	0x40001400
 800430c:	40014400 	.word	0x40014400
 8004310:	40014800 	.word	0x40014800
 8004314:	40002000 	.word	0x40002000

08004318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004320:	f107 030c 	add.w	r3, r7, #12
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a12      	ldr	r2, [pc, #72]	; (8004380 <HAL_TIM_MspPostInit+0x68>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d11d      	bne.n	8004376 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_TIM_MspPostInit+0x6c>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	4a10      	ldr	r2, [pc, #64]	; (8004384 <HAL_TIM_MspPostInit+0x6c>)
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	6313      	str	r3, [r2, #48]	; 0x30
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <HAL_TIM_MspPostInit+0x6c>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 8004356:	23c0      	movs	r3, #192	; 0xc0
 8004358:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435a:	2302      	movs	r3, #2
 800435c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004366:	2302      	movs	r3, #2
 8004368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436a:	f107 030c 	add.w	r3, r7, #12
 800436e:	4619      	mov	r1, r3
 8004370:	4805      	ldr	r0, [pc, #20]	; (8004388 <HAL_TIM_MspPostInit+0x70>)
 8004372:	f002 fca5 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004376:	bf00      	nop
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40000800 	.word	0x40000800
 8004384:	40023800 	.word	0x40023800
 8004388:	40020400 	.word	0x40020400

0800438c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a19      	ldr	r2, [pc, #100]	; (8004410 <HAL_UART_MspInit+0x84>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d12b      	bne.n	8004406 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	4b18      	ldr	r3, [pc, #96]	; (8004414 <HAL_UART_MspInit+0x88>)
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	4a17      	ldr	r2, [pc, #92]	; (8004414 <HAL_UART_MspInit+0x88>)
 80043b8:	f043 0320 	orr.w	r3, r3, #32
 80043bc:	6453      	str	r3, [r2, #68]	; 0x44
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <HAL_UART_MspInit+0x88>)
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b11      	ldr	r3, [pc, #68]	; (8004414 <HAL_UART_MspInit+0x88>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a10      	ldr	r2, [pc, #64]	; (8004414 <HAL_UART_MspInit+0x88>)
 80043d4:	f043 0304 	orr.w	r3, r3, #4
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_UART_MspInit+0x88>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043e6:	23c0      	movs	r3, #192	; 0xc0
 80043e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ea:	2302      	movs	r3, #2
 80043ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f2:	2303      	movs	r3, #3
 80043f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80043f6:	2308      	movs	r3, #8
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043fa:	f107 0314 	add.w	r3, r7, #20
 80043fe:	4619      	mov	r1, r3
 8004400:	4805      	ldr	r0, [pc, #20]	; (8004418 <HAL_UART_MspInit+0x8c>)
 8004402:	f002 fc5d 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004406:	bf00      	nop
 8004408:	3728      	adds	r7, #40	; 0x28
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40011400 	.word	0x40011400
 8004414:	40023800 	.word	0x40023800
 8004418:	40020800 	.word	0x40020800

0800441c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004420:	e7fe      	b.n	8004420 <NMI_Handler+0x4>

08004422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004422:	b480      	push	{r7}
 8004424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004426:	e7fe      	b.n	8004426 <HardFault_Handler+0x4>

08004428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800442c:	e7fe      	b.n	800442c <MemManage_Handler+0x4>

0800442e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800442e:	b480      	push	{r7}
 8004430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004432:	e7fe      	b.n	8004432 <BusFault_Handler+0x4>

08004434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004438:	e7fe      	b.n	8004438 <UsageFault_Handler+0x4>

0800443a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800443e:	bf00      	nop
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004456:	b480      	push	{r7}
 8004458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800445a:	bf00      	nop
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004468:	f000 ffba 	bl	80053e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800446c:	bf00      	nop
 800446e:	bd80      	pop	{r7, pc}

08004470 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004474:	4803      	ldr	r0, [pc, #12]	; (8004484 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004476:	f004 fd90 	bl	8008f9a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800447a:	4803      	ldr	r0, [pc, #12]	; (8004488 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800447c:	f004 fd8d 	bl	8008f9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004480:	bf00      	nop
 8004482:	bd80      	pop	{r7, pc}
 8004484:	200006c8 	.word	0x200006c8
 8004488:	20000500 	.word	0x20000500

0800448c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004490:	4803      	ldr	r0, [pc, #12]	; (80044a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004492:	f004 fd82 	bl	8008f9a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004496:	4803      	ldr	r0, [pc, #12]	; (80044a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004498:	f004 fd7f 	bl	8008f9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	200006c8 	.word	0x200006c8
 80044a4:	200005d8 	.word	0x200005d8

080044a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044ac:	4802      	ldr	r0, [pc, #8]	; (80044b8 <TIM6_DAC_IRQHandler+0x10>)
 80044ae:	f004 fd74 	bl	8008f9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000680 	.word	0x20000680

080044bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044c0:	4802      	ldr	r0, [pc, #8]	; (80044cc <DMA2_Stream0_IRQHandler+0x10>)
 80044c2:	f001 febb 	bl	800623c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80044c6:	bf00      	nop
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20000620 	.word	0x20000620

080044d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
	return 1;
 80044d4:	2301      	movs	r3, #1
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <_kill>:

int _kill(int pid, int sig)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80044ea:	f005 fd65 	bl	8009fb8 <__errno>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2216      	movs	r2, #22
 80044f2:	601a      	str	r2, [r3, #0]
	return -1;
 80044f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <_exit>:

void _exit (int status)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004508:	f04f 31ff 	mov.w	r1, #4294967295
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ffe7 	bl	80044e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004512:	e7fe      	b.n	8004512 <_exit+0x12>

08004514 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e00a      	b.n	800453c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004526:	f3af 8000 	nop.w
 800452a:	4601      	mov	r1, r0
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	60ba      	str	r2, [r7, #8]
 8004532:	b2ca      	uxtb	r2, r1
 8004534:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	3301      	adds	r3, #1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	dbf0      	blt.n	8004526 <_read+0x12>
	}

return len;
 8004544:	687b      	ldr	r3, [r7, #4]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b086      	sub	sp, #24
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e009      	b.n	8004574 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	60ba      	str	r2, [r7, #8]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff f9ad 	bl	80038c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	3301      	adds	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	429a      	cmp	r2, r3
 800457a:	dbf1      	blt.n	8004560 <_write+0x12>
	}
	return len;
 800457c:	687b      	ldr	r3, [r7, #4]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <_close>:

int _close(int file)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
	return -1;
 800458e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800459e:	b480      	push	{r7}
 80045a0:	b083      	sub	sp, #12
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045ae:	605a      	str	r2, [r3, #4]
	return 0;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <_isatty>:

int _isatty(int file)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
	return 1;
 80045c6:	2301      	movs	r3, #1
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
	return 0;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045f8:	4a14      	ldr	r2, [pc, #80]	; (800464c <_sbrk+0x5c>)
 80045fa:	4b15      	ldr	r3, [pc, #84]	; (8004650 <_sbrk+0x60>)
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004604:	4b13      	ldr	r3, [pc, #76]	; (8004654 <_sbrk+0x64>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <_sbrk+0x64>)
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <_sbrk+0x68>)
 8004610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <_sbrk+0x64>)
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	429a      	cmp	r2, r3
 800461e:	d207      	bcs.n	8004630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004620:	f005 fcca 	bl	8009fb8 <__errno>
 8004624:	4603      	mov	r3, r0
 8004626:	220c      	movs	r2, #12
 8004628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	e009      	b.n	8004644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <_sbrk+0x64>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004636:	4b07      	ldr	r3, [pc, #28]	; (8004654 <_sbrk+0x64>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	4a05      	ldr	r2, [pc, #20]	; (8004654 <_sbrk+0x64>)
 8004640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004642:	68fb      	ldr	r3, [r7, #12]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20020000 	.word	0x20020000
 8004650:	00000400 	.word	0x00000400
 8004654:	20000200 	.word	0x20000200
 8004658:	200095d8 	.word	0x200095d8

0800465c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004660:	4b08      	ldr	r3, [pc, #32]	; (8004684 <SystemInit+0x28>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	4a07      	ldr	r2, [pc, #28]	; (8004684 <SystemInit+0x28>)
 8004668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800466c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004670:	4b04      	ldr	r3, [pc, #16]	; (8004684 <SystemInit+0x28>)
 8004672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004676:	609a      	str	r2, [r3, #8]
#endif
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <tim10_init>:
unsigned int samplingtime_ms;
float samplingtime_s;

/* only use in main.c */
void tim10_init()
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
	samplingtime_s = TIM10_TIME_MS / (float) 1000;
 800468c:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <tim10_init+0x44>)
 800468e:	4a10      	ldr	r2, [pc, #64]	; (80046d0 <tim10_init+0x48>)
 8004690:	601a      	str	r2, [r3, #0]
	samplingtime_ms = TIM10_TIME_MS;
 8004692:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <tim10_init+0x4c>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]
	length_init(samplingtime_ms);
 8004698:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <tim10_init+0x4c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	4618      	mov	r0, r3
 80046a0:	f7fe f820 	bl	80026e4 <length_init>
	section_length_init(samplingtime_ms);
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <tim10_init+0x4c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff f96e 	bl	800398c <section_length_init>
	course_init(samplingtime_ms);
 80046b0:	4b08      	ldr	r3, [pc, #32]	; (80046d4 <tim10_init+0x4c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fd fb8a 	bl	8001dd0 <course_init>
	velotrace_init(1);
 80046bc:	2001      	movs	r0, #1
 80046be:	f000 fc1b 	bl	8004ef8 <velotrace_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 80046c2:	4805      	ldr	r0, [pc, #20]	; (80046d8 <tim10_init+0x50>)
 80046c4:	f004 f8e8 	bl	8008898 <HAL_TIM_Base_Stop_IT>
}
 80046c8:	bf00      	nop
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20009500 	.word	0x20009500
 80046d0:	3a83126f 	.word	0x3a83126f
 80046d4:	20009544 	.word	0x20009544
 80046d8:	20000500 	.word	0x20000500

080046dc <tim10_start>:

void tim10_start()
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
	tim10_left = 0;
 80046e0:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <tim10_start+0x3c>)
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
	tim10_right = 0;
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <tim10_start+0x40>)
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
	course_start();
 80046f0:	f7fd fb82 	bl	8001df8 <course_start>
	length_start();
 80046f4:	f7fe f80c 	bl	8002710 <length_start>
	section_length_start();
 80046f8:	f7ff f955 	bl	80039a6 <section_length_start>
	velotrace_start();
 80046fc:	f000 fc0c 	bl	8004f18 <velotrace_start>
	slow_start(velotrace_read_values());
 8004700:	f000 fd5c 	bl	80051bc <velotrace_read_values>
 8004704:	4603      	mov	r3, r0
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fb2e 	bl	8003d68 <slow_start>
	HAL_TIM_Base_Start_IT(&htim10);
 800470c:	4804      	ldr	r0, [pc, #16]	; (8004720 <tim10_start+0x44>)
 800470e:	f004 f853 	bl	80087b8 <HAL_TIM_Base_Start_IT>
}
 8004712:	bf00      	nop
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	2000953c 	.word	0x2000953c
 800471c:	20009548 	.word	0x20009548
 8004720:	20000500 	.word	0x20000500

08004724 <tim10_stop>:

void tim10_stop()
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 8004728:	4806      	ldr	r0, [pc, #24]	; (8004744 <tim10_stop+0x20>)
 800472a:	f004 f8b5 	bl	8008898 <HAL_TIM_Base_Stop_IT>
	velotrace_stop();
 800472e:	f000 fc5d 	bl	8004fec <velotrace_stop>
	section_length_stop();
 8004732:	f7ff f942 	bl	80039ba <section_length_stop>
	length_stop();
 8004736:	f7fe f801 	bl	800273c <length_stop>
	course_stop();
 800473a:	f7fd fb67 	bl	8001e0c <course_stop>
}
 800473e:	bf00      	nop
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000500 	.word	0x20000500

08004748 <tim10_main>:
	section_length_fin();
	HAL_TIM_Base_Stop_IT(&htim10);
}

void tim10_main()
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
	//! 角度をアップデートし続ける
	course_update_section_degree();
 800474c:	f7fd fb70 	bl	8001e30 <course_update_section_degree>
	//! 長さをアップデートし続ける
	length_update();
 8004750:	f7fe f880 	bl	8002854 <length_update>
	//! 区間長をアップデートし続ける
	section_length_update();
 8004754:	f7ff f9b8 	bl	8003ac8 <section_length_update>
	//! 速度制御の指令値をアップデートし続ける
	tim10_update_values();
 8004758:	f000 f80e 	bl	8004778 <tim10_update_values>
	if(rotary_read_playmode() == velotrace_tuning)
 800475c:	f7fc ff14 	bl	8001588 <rotary_read_playmode>
 8004760:	4603      	mov	r3, r0
 8004762:	2b06      	cmp	r3, #6
 8004764:	d106      	bne.n	8004774 <tim10_main+0x2c>
	{
		if(sidesensor_read_markerstate() == straight)
 8004766:	f7ff fa33 	bl	8003bd0 <sidesensor_read_markerstate>
 800476a:	4603      	mov	r3, r0
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <tim10_main+0x2c>
		{
			velotrace_gain_tuning();
 8004770:	f000 fd9a 	bl	80052a8 <velotrace_gain_tuning>
		}
	}
}
 8004774:	bf00      	nop
 8004776:	bd80      	pop	{r7, pc}

08004778 <tim10_update_values>:

//! tim10_main でのみ呼び出されるべき関数
//! 速度制御の指令値を更新する
void tim10_update_values()
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
		//! slow で設定された目標速度と PID ゲイン値を velotrace に渡す
		velotrace_set_values(slow_read_gain_values());
	}
	#endif

	tim10_left  = velotrace_solve(velocity_read());
 800477c:	f7fe f834 	bl	80027e8 <velocity_read>
 8004780:	eef0 7a40 	vmov.f32	s15, s0
 8004784:	eeb0 0a67 	vmov.f32	s0, s15
 8004788:	f000 fd22 	bl	80051d0 <velotrace_solve>
 800478c:	eef0 7a40 	vmov.f32	s15, s0
 8004790:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <tim10_update_values+0x2c>)
 8004792:	edc3 7a00 	vstr	s15, [r3]
	tim10_right = tim10_left;
 8004796:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <tim10_update_values+0x2c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a03      	ldr	r2, [pc, #12]	; (80047a8 <tim10_update_values+0x30>)
 800479c:	6013      	str	r3, [r2, #0]
}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	2000953c 	.word	0x2000953c
 80047a8:	20009548 	.word	0x20009548

080047ac <tim10_read_left>:
		course_state_function();
	}
 */

float tim10_read_left()
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
	return tim10_left;
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <tim10_read_left+0x18>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	ee07 3a90 	vmov	s15, r3
}
 80047b8:	eeb0 0a67 	vmov.f32	s0, s15
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	2000953c 	.word	0x2000953c

080047c8 <tim10_read_right>:

float tim10_read_right()
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
	return tim10_right;
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <tim10_read_right+0x18>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	ee07 3a90 	vmov	s15, r3
}
 80047d4:	eeb0 0a67 	vmov.f32	s0, s15
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20009548 	.word	0x20009548

080047e4 <tim10_d_print>:

void tim10_d_print()
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
	length_d_print();
 80047e8:	f7fe f882 	bl	80028f0 <length_d_print>
	course_d_print();
 80047ec:	f7fd fc58 	bl	80020a0 <course_d_print>
	velotrace_print_values();
 80047f0:	f000 fd52 	bl	8005298 <velotrace_print_values>
	section_length_d_print();
 80047f4:	f7ff f98c 	bl	8003b10 <section_length_d_print>
}
 80047f8:	bf00      	nop
 80047fa:	bd80      	pop	{r7, pc}

080047fc <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
    switch_init();
 8004800:	f7fc ffbc 	bl	800177c <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8004804:	4803      	ldr	r0, [pc, #12]	; (8004814 <tim11_init+0x18>)
 8004806:	f003 ffd7 	bl	80087b8 <HAL_TIM_Base_Start_IT>
    rotary_init();
 800480a:	f7fc fea9 	bl	8001560 <rotary_init>
}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	200005d8 	.word	0x200005d8

08004818 <tim11_main>:

void tim11_main()
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
    //! 1ms
    time_update_ms(1);
 800481c:	2001      	movs	r0, #1
 800481e:	f000 f9d7 	bl	8004bd0 <time_update_ms>
    switch_enter();
 8004822:	f7fc fffa 	bl	800181a <switch_enter>
    rotary_set_value();
 8004826:	f7fc febb 	bl	80015a0 <rotary_set_value>
}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <tim6_init>:
#endif

SideSensorState tim6_markerstate_before;

void tim6_init()
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
    motor_init();
 8004834:	f7fe ff7a 	bl	800372c <motor_init>
    // sidesensor_init();
    HAL_TIM_Base_Stop_IT(&htim6);
 8004838:	4802      	ldr	r0, [pc, #8]	; (8004844 <tim6_init+0x14>)
 800483a:	f004 f82d 	bl	8008898 <HAL_TIM_Base_Stop_IT>
}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000680 	.word	0x20000680

08004848 <tim6_start>:

void tim6_start()
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
    #if D_TIM6
    leftmotor = 0;
    rightmotor = 0;
    #endif
    sidesensor_start();
 800484c:	f7ff f992 	bl	8003b74 <sidesensor_start>
    motor_start();
 8004850:	f7fe ff74 	bl	800373c <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8004854:	4802      	ldr	r0, [pc, #8]	; (8004860 <tim6_start+0x18>)
 8004856:	f003 ffaf 	bl	80087b8 <HAL_TIM_Base_Start_IT>
}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000680 	.word	0x20000680

08004864 <tim6_stop>:

void tim6_stop()
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
    motor_stop();
 8004868:	f7fe ff7a 	bl	8003760 <motor_stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 800486c:	4804      	ldr	r0, [pc, #16]	; (8004880 <tim6_stop+0x1c>)
 800486e:	f004 f813 	bl	8008898 <HAL_TIM_Base_Stop_IT>
    sidesensor_stop();
 8004872:	f7ff f9a5 	bl	8003bc0 <sidesensor_stop>
    course_stop();
 8004876:	f7fd fac9 	bl	8001e0c <course_stop>
}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000680 	.word	0x20000680

08004884 <tim6_main>:

void tim6_main()
{
 8004884:	b580      	push	{r7, lr}
 8004886:	ed2d 8b02 	vpush	{d8}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
#if LEFT_MARKER_RADIUS
    SideSensorState markerstate_volatile;
#endif
    PlayMode playmode;

    playmode = rotary_read_playmode();
 800488e:	f7fc fe7b 	bl	8001588 <rotary_read_playmode>
 8004892:	4603      	mov	r3, r0
 8004894:	71fb      	strb	r3, [r7, #7]

    //! コース状態の把握
    //! ここ以降 sidesensor_read_markerstate() / sidesensor_read_markerstate_volatile() で読みだせる
    sidesensor_main();
 8004896:	f7ff f9ff 	bl	8003c98 <sidesensor_main>
    //! 格納されるのは直前のマーカの状態であり、区間中はリセットされないことに注意すべし！
    markerstate = sidesensor_read_markerstate();
 800489a:	f7ff f999 	bl	8003bd0 <sidesensor_read_markerstate>
 800489e:	4603      	mov	r3, r0
 80048a0:	71bb      	strb	r3, [r7, #6]
#if LEFT_MARKER_RADIUS
    //! 格納されるのは現在マーカを読んだか読んでないか、次に sidesensor_main() が来た時に変化することに注意
    markerstate_volatile = sidesensor_read_markerstate_volatile();
 80048a2:	f7ff f9a1 	bl	8003be8 <sidesensor_read_markerstate_volatile>
 80048a6:	4603      	mov	r3, r0
 80048a8:	717b      	strb	r3, [r7, #5]
#endif

    if(motor_read_enable() && playmode != motor_free)
 80048aa:	f7fe ff81 	bl	80037b0 <motor_read_enable>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d04c      	beq.n	800494e <tim6_main+0xca>
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d049      	beq.n	800494e <tim6_main+0xca>
    {
        #if !(TRACER_TUNING || VELOTRACE_TUNING)
        switch(playmode)
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	2b05      	cmp	r3, #5
 80048be:	d002      	beq.n	80048c6 <tim6_main+0x42>
 80048c0:	2b06      	cmp	r3, #6
 80048c2:	d015      	beq.n	80048f0 <tim6_main+0x6c>
 80048c4:	e029      	b.n	800491a <tim6_main+0x96>
        {
            case tracer_tuning:
                leftmotor   = 0 + tim7_read_left();
 80048c6:	f000 f961 	bl	8004b8c <tim7_read_left>
 80048ca:	eef0 7a40 	vmov.f32	s15, s0
 80048ce:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80049a0 <tim6_main+0x11c>
 80048d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048d6:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = 0 + tim7_read_right();
 80048da:	f000 f965 	bl	8004ba8 <tim7_read_right>
 80048de:	eef0 7a40 	vmov.f32	s15, s0
 80048e2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80049a0 <tim6_main+0x11c>
 80048e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048ea:	edc7 7a02 	vstr	s15, [r7, #8]
                break;
 80048ee:	e02d      	b.n	800494c <tim6_main+0xc8>
            case velotrace_tuning:
                leftmotor   = tim10_read_left() + 0;
 80048f0:	f7ff ff5c 	bl	80047ac <tim10_read_left>
 80048f4:	eef0 7a40 	vmov.f32	s15, s0
 80048f8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80049a0 <tim6_main+0x11c>
 80048fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004900:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + 0;
 8004904:	f7ff ff60 	bl	80047c8 <tim10_read_right>
 8004908:	eef0 7a40 	vmov.f32	s15, s0
 800490c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80049a0 <tim6_main+0x11c>
 8004910:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004914:	edc7 7a02 	vstr	s15, [r7, #8]
                break;
 8004918:	e018      	b.n	800494c <tim6_main+0xc8>
            default:
                leftmotor   = tim10_read_left() + tim7_read_left();
 800491a:	f7ff ff47 	bl	80047ac <tim10_read_left>
 800491e:	eeb0 8a40 	vmov.f32	s16, s0
 8004922:	f000 f933 	bl	8004b8c <tim7_read_left>
 8004926:	eef0 7a40 	vmov.f32	s15, s0
 800492a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800492e:	edc7 7a03 	vstr	s15, [r7, #12]
                rightmotor  = tim10_read_right() + tim7_read_right();
 8004932:	f7ff ff49 	bl	80047c8 <tim10_read_right>
 8004936:	eeb0 8a40 	vmov.f32	s16, s0
 800493a:	f000 f935 	bl	8004ba8 <tim7_read_right>
 800493e:	eef0 7a40 	vmov.f32	s15, s0
 8004942:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004946:	edc7 7a02 	vstr	s15, [r7, #8]
                break;
 800494a:	bf00      	nop
        switch(playmode)
 800494c:	e005      	b.n	800495a <tim6_main+0xd6>
        #endif
		#endif	/* !(TRACER_TUNING || VELOTRACE_TUNING) */
    }
    else
    {
        leftmotor = 0;
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]
        rightmotor = 0;
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
    }

#if LEFT_MARKER_RADIUS
    //! 一定区間で切るプログラムにするときはいらなくなる処理
    //! 今度は tim10 とかに course_state_function() をいれる必要が出てくる
    if(markerstate_volatile == curve)
 800495a:	797b      	ldrb	r3, [r7, #5]
 800495c:	2b04      	cmp	r3, #4
 800495e:	d101      	bne.n	8004964 <tim6_main+0xe0>
    {
        course_state_function();
 8004960:	f7fd fb52 	bl	8002008 <course_state_function>
#else
    //! 距離が COURSE_SAMPLING_LENGTH になっていたら course_state_function() を実行する関数
    fixed_section_main();
#endif

    switch(markerstate)
 8004964:	79bb      	ldrb	r3, [r7, #6]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d10a      	bne.n	8004980 <tim6_main+0xfc>
    {
        case stop:
            switch_reset_enter();
 800496a:	f7fc fefb 	bl	8001764 <switch_reset_enter>
            tim6_stop();
 800496e:	f7ff ff79 	bl	8004864 <tim6_stop>
            motor_set(leftmotor, rightmotor);
 8004972:	edd7 0a02 	vldr	s1, [r7, #8]
 8004976:	ed97 0a03 	vldr	s0, [r7, #12]
 800497a:	f7fe ff25 	bl	80037c8 <motor_set>
            break;
 800497e:	e006      	b.n	800498e <tim6_main+0x10a>
        default:
            motor_set(leftmotor, rightmotor);
 8004980:	edd7 0a02 	vldr	s1, [r7, #8]
 8004984:	ed97 0a03 	vldr	s0, [r7, #12]
 8004988:	f7fe ff1e 	bl	80037c8 <motor_set>
            break;
 800498c:	bf00      	nop
    }

    tim6_markerstate_before = markerstate;
 800498e:	4a05      	ldr	r2, [pc, #20]	; (80049a4 <tim6_main+0x120>)
 8004990:	79bb      	ldrb	r3, [r7, #6]
 8004992:	7013      	strb	r3, [r2, #0]
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	ecbd 8b02 	vpop	{d8}
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	00000000 	.word	0x00000000
 80049a4:	2000954c 	.word	0x2000954c

080049a8 <tim6_d_print>:

void tim6_d_print()
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
    #if D_TIM6
    printf("tim6.c > tim6_d_print() > leftmotor = %5.3f, rightmotor = %5.3f\r\n", leftmotor, rightmotor); 
    printf("tim6.c > tim6_d_print() > sidesensor_d_print() > ");
    #endif
    sidesensor_d_print();
 80049ac:	f7ff f9d4 	bl	8003d58 <sidesensor_d_print>
}
 80049b0:	bf00      	nop
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <tim7_init>:
#if D_TIM7
unsigned char i_count, i_start;
#endif

void tim7_init()
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
    /* init */
    #if D_TIM7
    printf("tim7.c > tim7_init() > ");
    #endif
    analog_init();
 80049b8:	f7fd f8e2 	bl	8001b80 <analog_init>
    tracer_init(TIM7_TIME_MS);
 80049bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80049c0:	f000 f96e 	bl	8004ca0 <tracer_init>
    HAL_TIM_Base_Stop_IT(&htim7);
 80049c4:	4802      	ldr	r0, [pc, #8]	; (80049d0 <tim7_init+0x1c>)
 80049c6:	f003 ff67 	bl	8008898 <HAL_TIM_Base_Stop_IT>
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	2000079c 	.word	0x2000079c

080049d4 <tim7_start>:

void tim7_start()
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
    /* start */
    #if D_TIM7
    printf("tim7.c > tim7_start() > ");
    #endif
    tim7_set_emergency(0);
 80049d8:	2000      	movs	r0, #0
 80049da:	f000 f8c7 	bl	8004b6c <tim7_set_emergency>
    tim7_left = 0;
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <tim7_start+0x54>)
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
    tim7_right = 0;
 80049e6:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <tim7_start+0x58>)
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 80049ee:	4910      	ldr	r1, [pc, #64]	; (8004a30 <tim7_start+0x5c>)
 80049f0:	4810      	ldr	r0, [pc, #64]	; (8004a34 <tim7_start+0x60>)
 80049f2:	f7fd f82d 	bl	8001a50 <analog_set_from_flash>
    if(rotary_read_playmode() == search)
 80049f6:	f7fc fdc7 	bl	8001588 <rotary_read_playmode>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d103      	bne.n	8004a08 <tim7_start+0x34>
    {
        analog_set_analogmode(analogmode_short);
 8004a00:	200c      	movs	r0, #12
 8004a02:	f7fd f861 	bl	8001ac8 <analog_set_analogmode>
 8004a06:	e002      	b.n	8004a0e <tim7_start+0x3a>
    }
    else
    {
        analog_set_analogmode(analogmode_all);
 8004a08:	2010      	movs	r0, #16
 8004a0a:	f7fd f85d 	bl	8001ac8 <analog_set_analogmode>
    }

    /* 本番直前なので無条件に analogmode_short にする */
    analog_set_analogmode(analogmode_short);
 8004a0e:	200c      	movs	r0, #12
 8004a10:	f7fd f85a 	bl	8001ac8 <analog_set_analogmode>

    analog_start();
 8004a14:	f7fd f8c6 	bl	8001ba4 <analog_start>
    tracer_start();
 8004a18:	f000 f91e 	bl	8004c58 <tracer_start>
    HAL_TIM_Base_Start_IT(&htim7);
 8004a1c:	4806      	ldr	r0, [pc, #24]	; (8004a38 <tim7_start+0x64>)
 8004a1e:	f003 fecb 	bl	80087b8 <HAL_TIM_Base_Start_IT>
}
 8004a22:	bf00      	nop
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20009558 	.word	0x20009558
 8004a2c:	20009550 	.word	0x20009550
 8004a30:	20000812 	.word	0x20000812
 8004a34:	200007f2 	.word	0x200007f2
 8004a38:	2000079c 	.word	0x2000079c

08004a3c <tim7_stop>:

void tim7_stop()
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
    /* stop */
    #if D_TIM7
    printf("tim7.c > tim7_stop() > ");
    #endif
    HAL_TIM_Base_Stop_IT(&htim7);
 8004a40:	4804      	ldr	r0, [pc, #16]	; (8004a54 <tim7_stop+0x18>)
 8004a42:	f003 ff29 	bl	8008898 <HAL_TIM_Base_Stop_IT>
    tracer_stop();
 8004a46:	f000 f923 	bl	8004c90 <tracer_stop>
    analog_stop();
 8004a4a:	f7fd f8b1 	bl	8001bb0 <analog_stop>
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000079c 	.word	0x2000079c

08004a58 <tim7_main>:

void tim7_main()
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
    /* main */
    int direction;

    direction = tim7_read_direction();
 8004a5e:	f000 f819 	bl	8004a94 <tim7_read_direction>
 8004a62:	6078      	str	r0, [r7, #4]
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("analogl = %5d, analogr = %5d, direction = %5d\r\n", analogl, analogr, direction);
    #endif

    tim7_left   =   tracer_solve(direction);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f9eb 	bl	8004e40 <tracer_solve>
 8004a6a:	eef0 7a40 	vmov.f32	s15, s0
 8004a6e:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <tim7_main+0x34>)
 8004a70:	edc3 7a00 	vstr	s15, [r3]
    tim7_right  = - tim7_left;
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <tim7_main+0x34>)
 8004a76:	edd3 7a00 	vldr	s15, [r3]
 8004a7a:	eef1 7a67 	vneg.f32	s15, s15
 8004a7e:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <tim7_main+0x38>)
 8004a80:	edc3 7a00 	vstr	s15, [r3]

    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("tim7_left = %7.2f, tim7_right = %7.2f\r\n", tim7_left, tim7_right);
    #endif
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20009558 	.word	0x20009558
 8004a90:	20009550 	.word	0x20009550

08004a94 <tim7_read_direction>:

/* this method is private */
int tim7_read_direction()
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
    uint16_t analogl, analogr;
	#if !D_TIM7
    unsigned char i_count, i_start;
	#endif

    analogl = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	80fb      	strh	r3, [r7, #6]
    analogr = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	80bb      	strh	r3, [r7, #4]

    switch(analog_read_analogmode())
 8004aa2:	f7fd f821 	bl	8001ae8 <analog_read_analogmode>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b10      	cmp	r3, #16
 8004aaa:	d834      	bhi.n	8004b16 <tim7_read_direction+0x82>
 8004aac:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <tim7_read_direction+0x20>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004b17 	.word	0x08004b17
 8004ab8:	08004b17 	.word	0x08004b17
 8004abc:	08004b17 	.word	0x08004b17
 8004ac0:	08004b17 	.word	0x08004b17
 8004ac4:	08004b03 	.word	0x08004b03
 8004ac8:	08004b17 	.word	0x08004b17
 8004acc:	08004b17 	.word	0x08004b17
 8004ad0:	08004b17 	.word	0x08004b17
 8004ad4:	08004b17 	.word	0x08004b17
 8004ad8:	08004b17 	.word	0x08004b17
 8004adc:	08004b17 	.word	0x08004b17
 8004ae0:	08004b17 	.word	0x08004b17
 8004ae4:	08004af9 	.word	0x08004af9
 8004ae8:	08004b17 	.word	0x08004b17
 8004aec:	08004b17 	.word	0x08004b17
 8004af0:	08004b17 	.word	0x08004b17
 8004af4:	08004b0d 	.word	0x08004b0d
    {
        case analogmode_calibrating:
            break;
        case analogmode_short:
            i_count = 12;
 8004af8:	230c      	movs	r3, #12
 8004afa:	70fb      	strb	r3, [r7, #3]
            i_start = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	70bb      	strb	r3, [r7, #2]
            break;
 8004b00:	e00a      	b.n	8004b18 <tim7_read_direction+0x84>
        case analogmode_long:
            i_count = 4;
 8004b02:	2304      	movs	r3, #4
 8004b04:	70fb      	strb	r3, [r7, #3]
            i_start = 12;
 8004b06:	230c      	movs	r3, #12
 8004b08:	70bb      	strb	r3, [r7, #2]
            break;
 8004b0a:	e005      	b.n	8004b18 <tim7_read_direction+0x84>
        case analogmode_all:
            i_count = 16;
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	70fb      	strb	r3, [r7, #3]
            i_start = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	70bb      	strb	r3, [r7, #2]
            break;
 8004b14:	e000      	b.n	8004b18 <tim7_read_direction+0x84>
        default:
            /* unknown analogmode ... x_x */
            break;
 8004b16:	bf00      	nop
    }

    for(unsigned char i = i_start; i < i_count; i++)
 8004b18:	78bb      	ldrb	r3, [r7, #2]
 8004b1a:	707b      	strb	r3, [r7, #1]
 8004b1c:	e01b      	b.n	8004b56 <tim7_read_direction+0xc2>
    {
        #if D_TIM7_WHILE
        printf("tim7.c > tim7_main() > for() > ");
        printf("i = %2d", i);
        #endif
        if(i % 2 == 0)
 8004b1e:	787b      	ldrb	r3, [r7, #1]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <tim7_read_direction+0xaa>
        {
            #if D_TIM7_WHILE
            printf("  odd\r\n");
            #endif
            analogl += analog_sensor_get(i);
 8004b2a:	787b      	ldrb	r3, [r7, #1]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fd f867 	bl	8001c00 <analog_sensor_get>
 8004b32:	4603      	mov	r3, r0
 8004b34:	461a      	mov	r2, r3
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	4413      	add	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
 8004b3c:	e008      	b.n	8004b50 <tim7_read_direction+0xbc>
        else
        {
            #if D_TIM7_WHILE
            printf(" even\r\n");
            #endif
            analogr += analog_sensor_get(i);
 8004b3e:	787b      	ldrb	r3, [r7, #1]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fd f85d 	bl	8001c00 <analog_sensor_get>
 8004b46:	4603      	mov	r3, r0
 8004b48:	461a      	mov	r2, r3
 8004b4a:	88bb      	ldrh	r3, [r7, #4]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	80bb      	strh	r3, [r7, #4]
    for(unsigned char i = i_start; i < i_count; i++)
 8004b50:	787b      	ldrb	r3, [r7, #1]
 8004b52:	3301      	adds	r3, #1
 8004b54:	707b      	strb	r3, [r7, #1]
 8004b56:	787a      	ldrb	r2, [r7, #1]
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3df      	bcc.n	8004b1e <tim7_read_direction+0x8a>
    if(analogl + analogr >= TIM7_EMERGENCY_THRESHOLD * i_count)
    {
    	// tim7_main_emergency();
    }

    return analogl - analogr;
 8004b5e:	88fa      	ldrh	r2, [r7, #6]
 8004b60:	88bb      	ldrh	r3, [r7, #4]
 8004b62:	1ad3      	subs	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <tim7_set_emergency>:
{
	switch_reset_enter();
}

void tim7_set_emergency(char emergency_)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
    tim7_emergency = emergency_;
 8004b76:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <tim7_set_emergency+0x1c>)
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	7013      	strb	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	20009554 	.word	0x20009554

08004b8c <tim7_read_left>:
{
    return tim7_emergency;
}

float tim7_read_left()
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c >  tim7_read_left() >  tim7_left = %7.2f\r\n", tim7_left);
    #endif
    return tim7_left;
 8004b90:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <tim7_read_left+0x18>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	ee07 3a90 	vmov	s15, r3
}
 8004b98:	eeb0 0a67 	vmov.f32	s0, s15
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	20009558 	.word	0x20009558

08004ba8 <tim7_read_right>:

float tim7_read_right()
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_read_right() > tim7_right = %7.2f\r\n", tim7_right);
    #endif
    return tim7_right;
 8004bac:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <tim7_read_right+0x18>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	ee07 3a90 	vmov	s15, r3
}
 8004bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	20009550 	.word	0x20009550

08004bc4 <tim7_d_print>:

void tim7_d_print()
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
    /* d_print */
    #if D_TIM7
    printf("tim7.c > tim7_d_print() > ");
    printf("i_count = %3d, i_start = %3d\r\n", i_count, i_start);
    #endif
    analog_d_print();
 8004bc8:	f7fc fea0 	bl	800190c <analog_d_print>
}
 8004bcc:	bf00      	nop
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <time_update_ms>:
 * @fn time_update_ms()
 * @brief 1 ms 周期で呼び出される割り込み内で実行する必要がある
 * 
 */
void time_update_ms(unsigned short int step)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	80fb      	strh	r3, [r7, #6]
    /**
     * @brief time_ms が 1 時間（ 3600,000 ミリ秒 ）を超えた時にゼロに戻す
     * 
     */
    time_countup(&time_ms, step, 6300000);
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <time_update_ms+0x30>)
 8004bde:	4619      	mov	r1, r3
 8004be0:	4808      	ldr	r0, [pc, #32]	; (8004c04 <time_update_ms+0x34>)
 8004be2:	f000 f813 	bl	8004c0c <time_countup>
    time_origin = time_ms * 1000;
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <time_update_ms+0x34>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	4a05      	ldr	r2, [pc, #20]	; (8004c08 <time_update_ms+0x38>)
 8004bf4:	6013      	str	r3, [r2, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	00602160 	.word	0x00602160
 8004c04:	20009564 	.word	0x20009564
 8004c08:	20009560 	.word	0x20009560

08004c0c <time_countup>:
    time_ms = 0;
    time_origin = 0;
}

void time_countup(unsigned int *_time, unsigned short int step, unsigned int _time_max)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	460b      	mov	r3, r1
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	817b      	strh	r3, [r7, #10]
    if(*_time + step >= _time_max)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	897b      	ldrh	r3, [r7, #10]
 8004c20:	4413      	add	r3, r2
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d809      	bhi.n	8004c3c <time_countup+0x30>
    {
        *_time = 0;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
        time_reset_count = time_reset_count + 1;
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <time_countup+0x48>)
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <time_countup+0x48>)
 8004c38:	801a      	strh	r2, [r3, #0]
    }
    else
    {
        *_time = *_time + step;
    }
}
 8004c3a:	e005      	b.n	8004c48 <time_countup+0x3c>
        *_time = *_time + step;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	897b      	ldrh	r3, [r7, #10]
 8004c42:	441a      	add	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	2000955c 	.word	0x2000955c

08004c58 <tracer_start>:
float tracer_samplingtime;

PID tracer_pid;

void tracer_start()
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
    tracer_s_error = 0;
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <tracer_start+0x2c>)
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
    tracer_before_error = 0;
 8004c64:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <tracer_start+0x30>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
    tracer_set_gain(rotary_read_value());
 8004c6a:	f7fc fca5 	bl	80015b8 <rotary_read_value>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f8ae 	bl	8004dd4 <tracer_set_gain>
    tracer_set_target(0);
 8004c78:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8004c8c <tracer_start+0x34>
 8004c7c:	f000 f8d0 	bl	8004e20 <tracer_set_target>
    printf("tracer.c > tracer_start > ");
    printf("target = %5.2f\r\n", tracer_pid.target);
    printf("tracer.c > tracer_start > ");
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
    #endif
}
 8004c80:	bf00      	nop
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20009580 	.word	0x20009580
 8004c88:	2000957c 	.word	0x2000957c
 8004c8c:	00000000 	.word	0x00000000

08004c90 <tracer_stop>:

void tracer_stop()
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
    tracer_set_target_zero();
 8004c94:	f000 f822 	bl	8004cdc <tracer_set_target_zero>
    tracer_set_gain_zero();
 8004c98:	f000 f812 	bl	8004cc0 <tracer_set_gain_zero>
}
 8004c9c:	bf00      	nop
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <tracer_init>:

void tracer_init(float samplingtime_ms)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	ed87 0a01 	vstr	s0, [r7, #4]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_init > ");
    printf("sampling_time = 1, tracer_s_error = 0, tracer_before_error = 0\r\n");
    #endif
    tracer_samplingtime = samplingtime_ms;
 8004caa:	4a04      	ldr	r2, [pc, #16]	; (8004cbc <tracer_init+0x1c>)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6013      	str	r3, [r2, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	20009578 	.word	0x20009578

08004cc0 <tracer_set_gain_zero>:

void tracer_set_gain_zero()
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
    tracer_pid.target = 0;
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <tracer_set_gain_zero+0x18>)
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20009568 	.word	0x20009568

08004cdc <tracer_set_target_zero>:

void tracer_set_target_zero()
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
    tracer_pid.kp = 0;
 8004ce0:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <tracer_set_target_zero+0x28>)
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
    tracer_pid.ki = 0;
 8004ce8:	4b06      	ldr	r3, [pc, #24]	; (8004d04 <tracer_set_target_zero+0x28>)
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	609a      	str	r2, [r3, #8]
    tracer_pid.kd = 0;
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <tracer_set_target_zero+0x28>)
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	60da      	str	r2, [r3, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20009568 	.word	0x20009568

08004d08 <tracer_read_gain_kp>:

float tracer_read_gain_kp(unsigned short int i)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KP_MAX - TRACER_KP_MIN) / (float) (TRACER_STEP_SIZE - 1);
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	f1c3 030f 	rsb	r3, r3, #15
 8004d18:	ee07 3a90 	vmov	s15, r3
 8004d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d20:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004d48 <tracer_read_gain_kp+0x40>
 8004d24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d28:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8004d2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d30:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004d48 <tracer_read_gain_kp+0x40>
 8004d34:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8004d38:	eeb0 0a67 	vmov.f32	s0, s15
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	3cf5c28f 	.word	0x3cf5c28f

08004d4c <tracer_read_gain_ki>:

float tracer_read_gain_ki(unsigned short int i)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KI_MAX - TRACER_KI_MIN) / (float) (TRACER_STEP_SIZE - 1);
 8004d56:	88fb      	ldrh	r3, [r7, #6]
 8004d58:	f1c3 030f 	rsb	r3, r3, #15
 8004d5c:	ee07 3a90 	vmov	s15, r3
 8004d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d64:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004d8c <tracer_read_gain_ki+0x40>
 8004d68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d6c:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8004d70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d74:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004d8c <tracer_read_gain_ki+0x40>
 8004d78:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8004d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	00000000 	.word	0x00000000

08004d90 <tracer_read_gain_kd>:

float tracer_read_gain_kd(unsigned short int i)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (float) (TRACER_KD_MAX - TRACER_KD_MIN) / (float) (TRACER_STEP_SIZE - 1);
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	f1c3 030f 	rsb	r3, r3, #15
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004da8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8004dd0 <tracer_read_gain_kd+0x40>
 8004dac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004db0:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8004db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004db8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004dd0 <tracer_read_gain_kd+0x40>
 8004dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8004dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	00000000 	.word	0x00000000

08004dd4 <tracer_set_gain>:

void tracer_set_gain(unsigned short int i)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	80fb      	strh	r3, [r7, #6]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_set_gain() > ");
    #endif
    tracer_pid.kp = tracer_read_gain_kp(i);
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7ff ff91 	bl	8004d08 <tracer_read_gain_kp>
 8004de6:	eef0 7a40 	vmov.f32	s15, s0
 8004dea:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <tracer_set_gain+0x48>)
 8004dec:	edc3 7a01 	vstr	s15, [r3, #4]
    tracer_pid.ki = tracer_read_gain_ki(i);
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff ffaa 	bl	8004d4c <tracer_read_gain_ki>
 8004df8:	eef0 7a40 	vmov.f32	s15, s0
 8004dfc:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <tracer_set_gain+0x48>)
 8004dfe:	edc3 7a02 	vstr	s15, [r3, #8]
    tracer_pid.kd = tracer_read_gain_kd(i);
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ffc3 	bl	8004d90 <tracer_read_gain_kd>
 8004e0a:	eef0 7a40 	vmov.f32	s15, s0
 8004e0e:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <tracer_set_gain+0x48>)
 8004e10:	edc3 7a03 	vstr	s15, [r3, #12]
    #if D_TRACER
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
    #endif
}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20009568 	.word	0x20009568

08004e20 <tracer_set_target>:

void tracer_set_target(float target_)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	ed87 0a01 	vstr	s0, [r7, #4]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_set_target() > ");
    #endif
    tracer_pid.target = target_;
 8004e2a:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <tracer_set_target+0x1c>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6013      	str	r3, [r2, #0]
    #if D_TRACER
    printf("target_ = %5.2f, target = %5.2f\r\n", target_, tracer_pid.target);
    #endif
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	20009568 	.word	0x20009568

08004e40 <tracer_solve>:

float tracer_solve(int reference_)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("reference_ = %5d\r\n", reference_);
    #endif

    error = reference_;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	617b      	str	r3, [r7, #20]

    d_error = (error - tracer_before_error) / (float) tracer_samplingtime;
 8004e4c:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <tracer_solve+0xa8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	ee07 3a90 	vmov	s15, r3
 8004e58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004e5c:	4b23      	ldr	r3, [pc, #140]	; (8004eec <tracer_solve+0xac>)
 8004e5e:	ed93 7a00 	vldr	s14, [r3]
 8004e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e66:	edc7 7a04 	vstr	s15, [r7, #16]
    tracer_s_error += error * (float) tracer_samplingtime;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	ee07 3a90 	vmov	s15, r3
 8004e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e74:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <tracer_solve+0xac>)
 8004e76:	edd3 7a00 	vldr	s15, [r3]
 8004e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <tracer_solve+0xb0>)
 8004e80:	edd3 7a00 	vldr	s15, [r3]
 8004e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e88:	4b19      	ldr	r3, [pc, #100]	; (8004ef0 <tracer_solve+0xb0>)
 8004e8a:	edc3 7a00 	vstr	s15, [r3]

    result = tracer_pid.kp * error + tracer_pid.ki * tracer_s_error + tracer_pid.kd * d_error;
 8004e8e:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <tracer_solve+0xb4>)
 8004e90:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ea2:	4b14      	ldr	r3, [pc, #80]	; (8004ef4 <tracer_solve+0xb4>)
 8004ea4:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ea8:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <tracer_solve+0xb0>)
 8004eaa:	edd3 7a00 	vldr	s15, [r3]
 8004eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004eb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	; (8004ef4 <tracer_solve+0xb4>)
 8004eb8:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ebc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ec8:	edc7 7a03 	vstr	s15, [r7, #12]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("%7.2f = %7.2f * %5d + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, tracer_pid.kp, error, tracer_pid.ki, tracer_s_error, tracer_pid.kd, d_error);
    #endif

    tracer_before_error = error;
 8004ecc:	4a06      	ldr	r2, [pc, #24]	; (8004ee8 <tracer_solve+0xa8>)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	6013      	str	r3, [r2, #0]

    return result;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	ee07 3a90 	vmov	s15, r3
}
 8004ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8004edc:	371c      	adds	r7, #28
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	2000957c 	.word	0x2000957c
 8004eec:	20009578 	.word	0x20009578
 8004ef0:	20009580 	.word	0x20009580
 8004ef4:	20009568 	.word	0x20009568

08004ef8 <velotrace_init>:

PID velotrace_pid;

/* pre setting */
void velotrace_init(uint16_t samplingtime_ms)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	80fb      	strh	r3, [r7, #6]
    velotrace_sampling_time_ms = samplingtime_ms;
 8004f02:	4a04      	ldr	r2, [pc, #16]	; (8004f14 <velotrace_init+0x1c>)
 8004f04:	88fb      	ldrh	r3, [r7, #6]
 8004f06:	8013      	strh	r3, [r2, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	20009584 	.word	0x20009584

08004f18 <velotrace_start>:

void velotrace_start()
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
    float target, kp, ki, kd;
    #if D_VELOTRACE
    printf("velotrace_sampling_time_ms = 1, velotrace_s_error = 0, velotrace_before_error = 0\r\n");
    #endif
    velotrace_s_error = 0;
 8004f1e:	4b2d      	ldr	r3, [pc, #180]	; (8004fd4 <velotrace_start+0xbc>)
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
    velotrace_before_error = 0;
 8004f26:	4b2c      	ldr	r3, [pc, #176]	; (8004fd8 <velotrace_start+0xc0>)
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
    velotrace_gain_tuning_time_ms = 0;
 8004f2e:	4b2b      	ldr	r3, [pc, #172]	; (8004fdc <velotrace_start+0xc4>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	801a      	strh	r2, [r3, #0]
    switch(rotary_read_playmode())
 8004f34:	f7fc fb28 	bl	8001588 <rotary_read_playmode>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	dc02      	bgt.n	8004f44 <velotrace_start+0x2c>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	dc03      	bgt.n	8004f4a <velotrace_start+0x32>
 8004f42:	e02a      	b.n	8004f9a <velotrace_start+0x82>
 8004f44:	2b06      	cmp	r3, #6
 8004f46:	d00a      	beq.n	8004f5e <velotrace_start+0x46>
 8004f48:	e027      	b.n	8004f9a <velotrace_start+0x82>
    {
        case search:
        case accel:
            target = VELOCITY_TARGET_MIN;
 8004f4a:	4b25      	ldr	r3, [pc, #148]	; (8004fe0 <velotrace_start+0xc8>)
 8004f4c:	60fb      	str	r3, [r7, #12]
            kp = 1000;
 8004f4e:	4b25      	ldr	r3, [pc, #148]	; (8004fe4 <velotrace_start+0xcc>)
 8004f50:	60bb      	str	r3, [r7, #8]
            ki = 100;
 8004f52:	4b25      	ldr	r3, [pc, #148]	; (8004fe8 <velotrace_start+0xd0>)
 8004f54:	607b      	str	r3, [r7, #4]
            kd = 0;
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	603b      	str	r3, [r7, #0]
            break;
 8004f5c:	e02a      	b.n	8004fb4 <velotrace_start+0x9c>
        case velotrace_tuning:
            target = VELOCITY_TARGET_MIN;
 8004f5e:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <velotrace_start+0xc8>)
 8004f60:	60fb      	str	r3, [r7, #12]
            kp = velotrace_calc_gain_kp(rotary_read_value());
 8004f62:	f7fc fb29 	bl	80015b8 <rotary_read_value>
 8004f66:	4603      	mov	r3, r0
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 f8bc 	bl	80050e8 <velotrace_calc_gain_kp>
 8004f70:	ed87 0a02 	vstr	s0, [r7, #8]
            ki = velotrace_calc_gain_ki(rotary_read_value());
 8004f74:	f7fc fb20 	bl	80015b8 <rotary_read_value>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f8d7 	bl	8005130 <velotrace_calc_gain_ki>
 8004f82:	ed87 0a01 	vstr	s0, [r7, #4]
            kd = velotrace_calc_gain_kd(rotary_read_value());
 8004f86:	f7fc fb17 	bl	80015b8 <rotary_read_value>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f8f2 	bl	8005178 <velotrace_calc_gain_kd>
 8004f94:	ed87 0a00 	vstr	s0, [r7]
            break;
 8004f98:	e00c      	b.n	8004fb4 <velotrace_start+0x9c>
        case tracer_tuning:
        default:
            target = 0;
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
            kp = 0;
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	60bb      	str	r3, [r7, #8]
            ki = 0;
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	607b      	str	r3, [r7, #4]
            kd = 0;
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	603b      	str	r3, [r7, #0]
            break;
 8004fb2:	bf00      	nop
    }
    velotrace_set_target_direct(target);
 8004fb4:	ed97 0a03 	vldr	s0, [r7, #12]
 8004fb8:	f000 f820 	bl	8004ffc <velotrace_set_target_direct>
    velotrace_set_gain_direct(kp, ki, kd);
 8004fbc:	ed97 1a00 	vldr	s2, [r7]
 8004fc0:	edd7 0a01 	vldr	s1, [r7, #4]
 8004fc4:	ed97 0a02 	vldr	s0, [r7, #8]
 8004fc8:	f000 f858 	bl	800507c <velotrace_set_gain_direct>
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20009590 	.word	0x20009590
 8004fd8:	20009588 	.word	0x20009588
 8004fdc:	2000958c 	.word	0x2000958c
 8004fe0:	3dcccccd 	.word	0x3dcccccd
 8004fe4:	447a0000 	.word	0x447a0000
 8004fe8:	42c80000 	.word	0x42c80000

08004fec <velotrace_stop>:

void velotrace_stop()
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
    velotrace_set_target_zero();
 8004ff0:	f000 f85e 	bl	80050b0 <velotrace_set_target_zero>
    velotrace_set_gain_zero();
 8004ff4:	f000 f866 	bl	80050c4 <velotrace_set_gain_zero>
}
 8004ff8:	bf00      	nop
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <velotrace_set_target_direct>:
{
    velotrace_pid.target = velotrace_calc_target(i);
}

void velotrace_set_target_direct(float target)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.target = target;
 8005006:	4a04      	ldr	r2, [pc, #16]	; (8005018 <velotrace_set_target_direct+0x1c>)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6013      	str	r3, [r2, #0]
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	20009594 	.word	0x20009594

0800501c <velotrace_set_gain_kp_direct>:
{
    velotrace_set_gain_kd_direct(velotrace_calc_gain_kd(i));
}

void velotrace_set_gain_kp_direct(float kp)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kp = kp;
 8005026:	4a04      	ldr	r2, [pc, #16]	; (8005038 <velotrace_set_gain_kp_direct+0x1c>)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6053      	str	r3, [r2, #4]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20009594 	.word	0x20009594

0800503c <velotrace_set_gain_ki_direct>:

void velotrace_set_gain_ki_direct(float ki)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.ki = ki;
 8005046:	4a04      	ldr	r2, [pc, #16]	; (8005058 <velotrace_set_gain_ki_direct+0x1c>)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6093      	str	r3, [r2, #8]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	20009594 	.word	0x20009594

0800505c <velotrace_set_gain_kd_direct>:

void velotrace_set_gain_kd_direct(float kd)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	ed87 0a01 	vstr	s0, [r7, #4]
    velotrace_pid.kd = kd;
 8005066:	4a04      	ldr	r2, [pc, #16]	; (8005078 <velotrace_set_gain_kd_direct+0x1c>)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60d3      	str	r3, [r2, #12]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	20009594 	.word	0x20009594

0800507c <velotrace_set_gain_direct>:

void velotrace_set_gain_direct(float kp, float ki, float kd)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	ed87 0a03 	vstr	s0, [r7, #12]
 8005086:	edc7 0a02 	vstr	s1, [r7, #8]
 800508a:	ed87 1a01 	vstr	s2, [r7, #4]
    velotrace_set_gain_kp_direct(kp);
 800508e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005092:	f7ff ffc3 	bl	800501c <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(ki);
 8005096:	ed97 0a02 	vldr	s0, [r7, #8]
 800509a:	f7ff ffcf 	bl	800503c <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(kd);
 800509e:	ed97 0a01 	vldr	s0, [r7, #4]
 80050a2:	f7ff ffdb 	bl	800505c <velotrace_set_gain_kd_direct>
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <velotrace_set_target_zero>:

/* target kp ki kd set zero */
void velotrace_set_target_zero()
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
    velotrace_set_target_direct(0);
 80050b4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80050c0 <velotrace_set_target_zero+0x10>
 80050b8:	f7ff ffa0 	bl	8004ffc <velotrace_set_target_direct>
}
 80050bc:	bf00      	nop
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	00000000 	.word	0x00000000

080050c4 <velotrace_set_gain_zero>:

void velotrace_set_gain_zero()
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
    velotrace_set_gain_kp_direct(0);
 80050c8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80050e4 <velotrace_set_gain_zero+0x20>
 80050cc:	f7ff ffa6 	bl	800501c <velotrace_set_gain_kp_direct>
    velotrace_set_gain_ki_direct(0);
 80050d0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80050e4 <velotrace_set_gain_zero+0x20>
 80050d4:	f7ff ffb2 	bl	800503c <velotrace_set_gain_ki_direct>
    velotrace_set_gain_kd_direct(0);
 80050d8:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80050e4 <velotrace_set_gain_zero+0x20>
 80050dc:	f7ff ffbe 	bl	800505c <velotrace_set_gain_kd_direct>
}
 80050e0:	bf00      	nop
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	00000000 	.word	0x00000000

080050e8 <velotrace_calc_gain_kp>:
{
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
}

float velotrace_calc_gain_kp(unsigned short int i)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	f1c3 030f 	rsb	r3, r3, #15
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005100:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005128 <velotrace_calc_gain_kp+0x40>
 8005104:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005108:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800510c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005110:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800512c <velotrace_calc_gain_kp+0x44>
 8005114:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005118:	eeb0 0a67 	vmov.f32	s0, s15
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	00000000 	.word	0x00000000
 800512c:	44fa0000 	.word	0x44fa0000

08005130 <velotrace_calc_gain_ki>:

float velotrace_calc_gain_ki(unsigned short int i)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	f1c3 030f 	rsb	r3, r3, #15
 8005140:	ee07 3a90 	vmov	s15, r3
 8005144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005148:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005170 <velotrace_calc_gain_ki+0x40>
 800514c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005150:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8005154:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005158:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005174 <velotrace_calc_gain_ki+0x44>
 800515c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8005160:	eeb0 0a67 	vmov.f32	s0, s15
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	00000000 	.word	0x00000000
 8005174:	43480000 	.word	0x43480000

08005178 <velotrace_calc_gain_kd>:

float velotrace_calc_gain_kd(unsigned short int i)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (float) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (float) (VELOTRACE_STEP_SIZE - 1);
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	f1c3 030f 	rsb	r3, r3, #15
 8005188:	ee07 3a90 	vmov	s15, r3
 800518c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005190:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80051b8 <velotrace_calc_gain_kd+0x40>
 8005194:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005198:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800519c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051a0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80051b8 <velotrace_calc_gain_kd+0x40>
 80051a4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80051a8:	eeb0 0a67 	vmov.f32	s0, s15
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	00000000 	.word	0x00000000

080051bc <velotrace_read_values>:
    velotrace_pid.ki = _pid->ki;
    velotrace_pid.kd = _pid->kd;
}

PID* velotrace_read_values()
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
    return &velotrace_pid;
 80051c0:	4b02      	ldr	r3, [pc, #8]	; (80051cc <velotrace_read_values+0x10>)
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	20009594 	.word	0x20009594

080051d0 <velotrace_solve>:

float velotrace_solve(float reference_)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	ed87 0a01 	vstr	s0, [r7, #4]
    float error;
    float d_error;
    float result;

    error = reference_ - velotrace_pid.target;
 80051da:	4b2b      	ldr	r3, [pc, #172]	; (8005288 <velotrace_solve+0xb8>)
 80051dc:	edd3 7a00 	vldr	s15, [r3]
 80051e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80051e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051e8:	edc7 7a05 	vstr	s15, [r7, #20]

    d_error = (error - velotrace_before_error) / (float) velotrace_sampling_time_ms;
 80051ec:	4b27      	ldr	r3, [pc, #156]	; (800528c <velotrace_solve+0xbc>)
 80051ee:	edd3 7a00 	vldr	s15, [r3]
 80051f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80051f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80051fa:	4b25      	ldr	r3, [pc, #148]	; (8005290 <velotrace_solve+0xc0>)
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800520a:	edc7 7a04 	vstr	s15, [r7, #16]
    velotrace_s_error += error * (float) velotrace_sampling_time_ms;
 800520e:	4b20      	ldr	r3, [pc, #128]	; (8005290 <velotrace_solve+0xc0>)
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800521a:	edd7 7a05 	vldr	s15, [r7, #20]
 800521e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005222:	4b1c      	ldr	r3, [pc, #112]	; (8005294 <velotrace_solve+0xc4>)
 8005224:	edd3 7a00 	vldr	s15, [r3]
 8005228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <velotrace_solve+0xc4>)
 800522e:	edc3 7a00 	vstr	s15, [r3]

    result = - (velotrace_pid.kp * error + velotrace_pid.ki * velotrace_s_error + velotrace_pid.kd * d_error);
 8005232:	4b15      	ldr	r3, [pc, #84]	; (8005288 <velotrace_solve+0xb8>)
 8005234:	ed93 7a01 	vldr	s14, [r3, #4]
 8005238:	edd7 7a05 	vldr	s15, [r7, #20]
 800523c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005240:	4b11      	ldr	r3, [pc, #68]	; (8005288 <velotrace_solve+0xb8>)
 8005242:	edd3 6a02 	vldr	s13, [r3, #8]
 8005246:	4b13      	ldr	r3, [pc, #76]	; (8005294 <velotrace_solve+0xc4>)
 8005248:	edd3 7a00 	vldr	s15, [r3]
 800524c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005254:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <velotrace_solve+0xb8>)
 8005256:	edd3 6a03 	vldr	s13, [r3, #12]
 800525a:	edd7 7a04 	vldr	s15, [r7, #16]
 800525e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005266:	eef1 7a67 	vneg.f32	s15, s15
 800526a:	edc7 7a03 	vstr	s15, [r7, #12]
    printf("velotrace_solve()\r\n");
    printf("reference_ - velotrace_pid.target = %7.2f - %7.2f = %7.2f\r\n", reference_, velotrace_pid.target, reference_ - velotrace_pid.target);
    printf("%7.2f = %7.2f * %7.2f + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, velotrace_pid.kp, error, velotrace_pid.ki, velotrace_s_error, velotrace_pid.kd, d_error);
    #endif

    velotrace_before_error = error;
 800526e:	4a07      	ldr	r2, [pc, #28]	; (800528c <velotrace_solve+0xbc>)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	6013      	str	r3, [r2, #0]

    return result;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	ee07 3a90 	vmov	s15, r3
}
 800527a:	eeb0 0a67 	vmov.f32	s0, s15
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	20009594 	.word	0x20009594
 800528c:	20009588 	.word	0x20009588
 8005290:	20009584 	.word	0x20009584
 8005294:	20009590 	.word	0x20009590

08005298 <velotrace_print_values>:

void velotrace_print_values()
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
#if D_VELOTRACE
	printf("Velotrace\r\n");
	printf("target = %5.3f\r\n", velotrace_read_target());
	//! printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_calc_gain_kp(rotary_read_value()), velotrace_calc_gain_ki(rotary_read_value()), velotrace_calc_gain_kd(rotary_read_value()));
#endif
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <velotrace_gain_tuning>:

void velotrace_gain_tuning()
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
    //! 右センサを読んでからの時間を格納する
    velotrace_gain_tuning_time_ms += velotrace_sampling_time_ms;
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <velotrace_gain_tuning+0x34>)
 80052ae:	881a      	ldrh	r2, [r3, #0]
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <velotrace_gain_tuning+0x38>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	4413      	add	r3, r2
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	4b08      	ldr	r3, [pc, #32]	; (80052dc <velotrace_gain_tuning+0x34>)
 80052ba:	801a      	strh	r2, [r3, #0]
    //! 停止時間になったら
    if(velotrace_gain_tuning_time_ms >= VELOTRACE_GAIN_TUNING_STOP_TIME_MS)
 80052bc:	4b07      	ldr	r3, [pc, #28]	; (80052dc <velotrace_gain_tuning+0x34>)
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d903      	bls.n	80052d0 <velotrace_gain_tuning+0x28>
    {
        //! 速度の目標値をゼロにする
        velotrace_pid.target = 0;
 80052c8:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <velotrace_gain_tuning+0x3c>)
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
    }
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	2000958c 	.word	0x2000958c
 80052e0:	20009584 	.word	0x20009584
 80052e4:	20009594 	.word	0x20009594

080052e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80052e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005320 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80052ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80052ee:	e003      	b.n	80052f8 <LoopCopyDataInit>

080052f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80052f0:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80052f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80052f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80052f6:	3104      	adds	r1, #4

080052f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80052f8:	480b      	ldr	r0, [pc, #44]	; (8005328 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80052fa:	4b0c      	ldr	r3, [pc, #48]	; (800532c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80052fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80052fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005300:	d3f6      	bcc.n	80052f0 <CopyDataInit>
  ldr  r2, =_sbss
 8005302:	4a0b      	ldr	r2, [pc, #44]	; (8005330 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005304:	e002      	b.n	800530c <LoopFillZerobss>

08005306 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005306:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005308:	f842 3b04 	str.w	r3, [r2], #4

0800530c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800530e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005310:	d3f9      	bcc.n	8005306 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005312:	f7ff f9a3 	bl	800465c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005316:	f004 fe55 	bl	8009fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800531a:	f7fd fb35 	bl	8002988 <main>
  bx  lr    
 800531e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005320:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005324:	0800f244 	.word	0x0800f244
  ldr  r0, =_sdata
 8005328:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800532c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8005330:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8005334:	200095d8 	.word	0x200095d8

08005338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005338:	e7fe      	b.n	8005338 <ADC_IRQHandler>
	...

0800533c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <HAL_Init+0x40>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a0d      	ldr	r2, [pc, #52]	; (800537c <HAL_Init+0x40>)
 8005346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800534a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <HAL_Init+0x40>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0a      	ldr	r2, [pc, #40]	; (800537c <HAL_Init+0x40>)
 8005352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_Init+0x40>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a07      	ldr	r2, [pc, #28]	; (800537c <HAL_Init+0x40>)
 800535e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005364:	2003      	movs	r0, #3
 8005366:	f000 fdb1 	bl	8005ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800536a:	2000      	movs	r0, #0
 800536c:	f000 f808 	bl	8005380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005370:	f7fe fd26 	bl	8003dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023c00 	.word	0x40023c00

08005380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005388:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <HAL_InitTick+0x54>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <HAL_InitTick+0x58>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	4619      	mov	r1, r3
 8005392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005396:	fbb3 f3f1 	udiv	r3, r3, r1
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fdc9 	bl	8005f36 <HAL_SYSTICK_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e00e      	b.n	80053cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b0f      	cmp	r3, #15
 80053b2:	d80a      	bhi.n	80053ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053b4:	2200      	movs	r2, #0
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	f000 fd91 	bl	8005ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80053c0:	4a06      	ldr	r2, [pc, #24]	; (80053dc <HAL_InitTick+0x5c>)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3708      	adds	r7, #8
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	20000000 	.word	0x20000000
 80053d8:	20000008 	.word	0x20000008
 80053dc:	20000004 	.word	0x20000004

080053e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <HAL_IncTick+0x20>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_IncTick+0x24>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4413      	add	r3, r2
 80053f0:	4a04      	ldr	r2, [pc, #16]	; (8005404 <HAL_IncTick+0x24>)
 80053f2:	6013      	str	r3, [r2, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	20000008 	.word	0x20000008
 8005404:	200095a4 	.word	0x200095a4

08005408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  return uwTick;
 800540c:	4b03      	ldr	r3, [pc, #12]	; (800541c <HAL_GetTick+0x14>)
 800540e:	681b      	ldr	r3, [r3, #0]
}
 8005410:	4618      	mov	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	200095a4 	.word	0x200095a4

08005420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005428:	f7ff ffee 	bl	8005408 <HAL_GetTick>
 800542c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d005      	beq.n	8005446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800543a:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <HAL_Delay+0x44>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005446:	bf00      	nop
 8005448:	f7ff ffde 	bl	8005408 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	429a      	cmp	r2, r3
 8005456:	d8f7      	bhi.n	8005448 <HAL_Delay+0x28>
  {
  }
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000008 	.word	0x20000008

08005468 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e033      	b.n	80054e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fe fcc6 	bl	8003e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d118      	bne.n	80054d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054ae:	f023 0302 	bic.w	r3, r3, #2
 80054b2:	f043 0202 	orr.w	r2, r3, #2
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fab8 	bl	8005a30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f023 0303 	bic.w	r3, r3, #3
 80054ce:	f043 0201 	orr.w	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
 80054d6:	e001      	b.n	80054dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_ADC_Start_DMA+0x1e>
 800550a:	2302      	movs	r3, #2
 800550c:	e0e9      	b.n	80056e2 <HAL_ADC_Start_DMA+0x1f2>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b01      	cmp	r3, #1
 8005522:	d018      	beq.n	8005556 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005534:	4b6d      	ldr	r3, [pc, #436]	; (80056ec <HAL_ADC_Start_DMA+0x1fc>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a6d      	ldr	r2, [pc, #436]	; (80056f0 <HAL_ADC_Start_DMA+0x200>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	0c9a      	lsrs	r2, r3, #18
 8005540:	4613      	mov	r3, r2
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	4413      	add	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005548:	e002      	b.n	8005550 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	3b01      	subs	r3, #1
 800554e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f9      	bne.n	800554a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005564:	d107      	bne.n	8005576 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005574:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b01      	cmp	r3, #1
 8005582:	f040 80a1 	bne.w	80056c8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80055b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c4:	d106      	bne.n	80055d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	f023 0206 	bic.w	r2, r3, #6
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	645a      	str	r2, [r3, #68]	; 0x44
 80055d2:	e002      	b.n	80055da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055e2:	4b44      	ldr	r3, [pc, #272]	; (80056f4 <HAL_ADC_Start_DMA+0x204>)
 80055e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	4a43      	ldr	r2, [pc, #268]	; (80056f8 <HAL_ADC_Start_DMA+0x208>)
 80055ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	4a42      	ldr	r2, [pc, #264]	; (80056fc <HAL_ADC_Start_DMA+0x20c>)
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	4a41      	ldr	r2, [pc, #260]	; (8005700 <HAL_ADC_Start_DMA+0x210>)
 80055fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005606:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005616:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005626:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	334c      	adds	r3, #76	; 0x4c
 8005632:	4619      	mov	r1, r3
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f000 fd38 	bl	80060ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	2b00      	cmp	r3, #0
 8005646:	d12a      	bne.n	800569e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2d      	ldr	r2, [pc, #180]	; (8005704 <HAL_ADC_Start_DMA+0x214>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d015      	beq.n	800567e <HAL_ADC_Start_DMA+0x18e>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2c      	ldr	r2, [pc, #176]	; (8005708 <HAL_ADC_Start_DMA+0x218>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d105      	bne.n	8005668 <HAL_ADC_Start_DMA+0x178>
 800565c:	4b25      	ldr	r3, [pc, #148]	; (80056f4 <HAL_ADC_Start_DMA+0x204>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a27      	ldr	r2, [pc, #156]	; (800570c <HAL_ADC_Start_DMA+0x21c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d136      	bne.n	80056e0 <HAL_ADC_Start_DMA+0x1f0>
 8005672:	4b20      	ldr	r3, [pc, #128]	; (80056f4 <HAL_ADC_Start_DMA+0x204>)
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	d130      	bne.n	80056e0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d129      	bne.n	80056e0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800569a:	609a      	str	r2, [r3, #8]
 800569c:	e020      	b.n	80056e0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a18      	ldr	r2, [pc, #96]	; (8005704 <HAL_ADC_Start_DMA+0x214>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d11b      	bne.n	80056e0 <HAL_ADC_Start_DMA+0x1f0>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d114      	bne.n	80056e0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056c4:	609a      	str	r2, [r3, #8]
 80056c6:	e00b      	b.n	80056e0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	f043 0210 	orr.w	r2, r3, #16
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d8:	f043 0201 	orr.w	r2, r3, #1
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000000 	.word	0x20000000
 80056f0:	431bde83 	.word	0x431bde83
 80056f4:	40012300 	.word	0x40012300
 80056f8:	08005c29 	.word	0x08005c29
 80056fc:	08005ce3 	.word	0x08005ce3
 8005700:	08005cff 	.word	0x08005cff
 8005704:	40012000 	.word	0x40012000
 8005708:	40012100 	.word	0x40012100
 800570c:	40012200 	.word	0x40012200

08005710 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_ADC_Stop_DMA+0x1a>
 8005726:	2302      	movs	r3, #2
 8005728:	e048      	b.n	80057bc <HAL_ADC_Stop_DMA+0xac>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d130      	bne.n	80057b2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800575e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d10f      	bne.n	800578e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fcf2 	bl	800615c <HAL_DMA_Abort>
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800579c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057a6:	f023 0301 	bic.w	r3, r3, #1
 80057aa:	f043 0201 	orr.w	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x1c>
 8005804:	2302      	movs	r3, #2
 8005806:	e105      	b.n	8005a14 <HAL_ADC_ConfigChannel+0x228>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b09      	cmp	r3, #9
 8005816:	d925      	bls.n	8005864 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68d9      	ldr	r1, [r3, #12]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	461a      	mov	r2, r3
 8005826:	4613      	mov	r3, r2
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	4413      	add	r3, r2
 800582c:	3b1e      	subs	r3, #30
 800582e:	2207      	movs	r2, #7
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	43da      	mvns	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	400a      	ands	r2, r1
 800583c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68d9      	ldr	r1, [r3, #12]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	4618      	mov	r0, r3
 8005850:	4603      	mov	r3, r0
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4403      	add	r3, r0
 8005856:	3b1e      	subs	r3, #30
 8005858:	409a      	lsls	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	60da      	str	r2, [r3, #12]
 8005862:	e022      	b.n	80058aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6919      	ldr	r1, [r3, #16]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	b29b      	uxth	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	4613      	mov	r3, r2
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	4413      	add	r3, r2
 8005878:	2207      	movs	r2, #7
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43da      	mvns	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	400a      	ands	r2, r1
 8005886:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6919      	ldr	r1, [r3, #16]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	b29b      	uxth	r3, r3
 8005898:	4618      	mov	r0, r3
 800589a:	4603      	mov	r3, r0
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	4403      	add	r3, r0
 80058a0:	409a      	lsls	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b06      	cmp	r3, #6
 80058b0:	d824      	bhi.n	80058fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	3b05      	subs	r3, #5
 80058c4:	221f      	movs	r2, #31
 80058c6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ca:	43da      	mvns	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	400a      	ands	r2, r1
 80058d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	4618      	mov	r0, r3
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	3b05      	subs	r3, #5
 80058ee:	fa00 f203 	lsl.w	r2, r0, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	635a      	str	r2, [r3, #52]	; 0x34
 80058fa:	e04c      	b.n	8005996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	d824      	bhi.n	800594e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	3b23      	subs	r3, #35	; 0x23
 8005916:	221f      	movs	r2, #31
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43da      	mvns	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	400a      	ands	r2, r1
 8005924:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	4618      	mov	r0, r3
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685a      	ldr	r2, [r3, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	3b23      	subs	r3, #35	; 0x23
 8005940:	fa00 f203 	lsl.w	r2, r0, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
 800594c:	e023      	b.n	8005996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	4613      	mov	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	3b41      	subs	r3, #65	; 0x41
 8005960:	221f      	movs	r2, #31
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43da      	mvns	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	400a      	ands	r2, r1
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	4618      	mov	r0, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	3b41      	subs	r3, #65	; 0x41
 800598a:	fa00 f203 	lsl.w	r2, r0, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005996:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <HAL_ADC_ConfigChannel+0x234>)
 8005998:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <HAL_ADC_ConfigChannel+0x238>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d109      	bne.n	80059b8 <HAL_ADC_ConfigChannel+0x1cc>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b12      	cmp	r3, #18
 80059aa:	d105      	bne.n	80059b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a19      	ldr	r2, [pc, #100]	; (8005a24 <HAL_ADC_ConfigChannel+0x238>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d123      	bne.n	8005a0a <HAL_ADC_ConfigChannel+0x21e>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d003      	beq.n	80059d2 <HAL_ADC_ConfigChannel+0x1e6>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b11      	cmp	r3, #17
 80059d0:	d11b      	bne.n	8005a0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d111      	bne.n	8005a0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80059e6:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <HAL_ADC_ConfigChannel+0x23c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a10      	ldr	r2, [pc, #64]	; (8005a2c <HAL_ADC_ConfigChannel+0x240>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	0c9a      	lsrs	r2, r3, #18
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80059fc:	e002      	b.n	8005a04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f9      	bne.n	80059fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40012300 	.word	0x40012300
 8005a24:	40012000 	.word	0x40012000
 8005a28:	20000000 	.word	0x20000000
 8005a2c:	431bde83 	.word	0x431bde83

08005a30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a38:	4b79      	ldr	r3, [pc, #484]	; (8005c20 <ADC_Init+0x1f0>)
 8005a3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	431a      	orrs	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6859      	ldr	r1, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	021a      	lsls	r2, r3, #8
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6859      	ldr	r1, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6899      	ldr	r1, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	4a58      	ldr	r2, [pc, #352]	; (8005c24 <ADC_Init+0x1f4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d022      	beq.n	8005b0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ad6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6899      	ldr	r1, [r3, #8]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6899      	ldr	r1, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	e00f      	b.n	8005b2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0202 	bic.w	r2, r2, #2
 8005b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6899      	ldr	r1, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	7e1b      	ldrb	r3, [r3, #24]
 8005b48:	005a      	lsls	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01b      	beq.n	8005b94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005b7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6859      	ldr	r1, [r3, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	3b01      	subs	r3, #1
 8005b88:	035a      	lsls	r2, r3, #13
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	e007      	b.n	8005ba4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	051a      	lsls	r2, r3, #20
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6899      	ldr	r1, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005be6:	025a      	lsls	r2, r3, #9
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6899      	ldr	r1, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	029a      	lsls	r2, r3, #10
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	bf00      	nop
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	40012300 	.word	0x40012300
 8005c24:	0f000001 	.word	0x0f000001

08005c28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d13c      	bne.n	8005cbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d12b      	bne.n	8005cb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d127      	bne.n	8005cb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d006      	beq.n	8005c80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d119      	bne.n	8005cb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0220 	bic.w	r2, r2, #32
 8005c8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	f043 0201 	orr.w	r2, r3, #1
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7fb ffe5 	bl	8001c84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005cba:	e00e      	b.n	8005cda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff fd85 	bl	80057d8 <HAL_ADC_ErrorCallback>
}
 8005cce:	e004      	b.n	8005cda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
}
 8005cda:	bf00      	nop
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff fd67 	bl	80057c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cf6:	bf00      	nop
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2240      	movs	r2, #64	; 0x40
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d16:	f043 0204 	orr.w	r2, r3, #4
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff fd5a 	bl	80057d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <__NVIC_SetPriorityGrouping+0x44>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d5e:	4a04      	ldr	r2, [pc, #16]	; (8005d70 <__NVIC_SetPriorityGrouping+0x44>)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	60d3      	str	r3, [r2, #12]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	e000ed00 	.word	0xe000ed00

08005d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d78:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <__NVIC_GetPriorityGrouping+0x18>)
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	0a1b      	lsrs	r3, r3, #8
 8005d7e:	f003 0307 	and.w	r3, r3, #7
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	e000ed00 	.word	0xe000ed00

08005d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	4603      	mov	r3, r0
 8005d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	db0b      	blt.n	8005dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	f003 021f 	and.w	r2, r3, #31
 8005da8:	4907      	ldr	r1, [pc, #28]	; (8005dc8 <__NVIC_EnableIRQ+0x38>)
 8005daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	2001      	movs	r0, #1
 8005db2:	fa00 f202 	lsl.w	r2, r0, r2
 8005db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	e000e100 	.word	0xe000e100

08005dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	6039      	str	r1, [r7, #0]
 8005dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	db0a      	blt.n	8005df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	490c      	ldr	r1, [pc, #48]	; (8005e18 <__NVIC_SetPriority+0x4c>)
 8005de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dea:	0112      	lsls	r2, r2, #4
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	440b      	add	r3, r1
 8005df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005df4:	e00a      	b.n	8005e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	4908      	ldr	r1, [pc, #32]	; (8005e1c <__NVIC_SetPriority+0x50>)
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	3b04      	subs	r3, #4
 8005e04:	0112      	lsls	r2, r2, #4
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	440b      	add	r3, r1
 8005e0a:	761a      	strb	r2, [r3, #24]
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	e000e100 	.word	0xe000e100
 8005e1c:	e000ed00 	.word	0xe000ed00

08005e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b089      	sub	sp, #36	; 0x24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	f1c3 0307 	rsb	r3, r3, #7
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	bf28      	it	cs
 8005e3e:	2304      	movcs	r3, #4
 8005e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	3304      	adds	r3, #4
 8005e46:	2b06      	cmp	r3, #6
 8005e48:	d902      	bls.n	8005e50 <NVIC_EncodePriority+0x30>
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	3b03      	subs	r3, #3
 8005e4e:	e000      	b.n	8005e52 <NVIC_EncodePriority+0x32>
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e54:	f04f 32ff 	mov.w	r2, #4294967295
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	43da      	mvns	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	401a      	ands	r2, r3
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e68:	f04f 31ff 	mov.w	r1, #4294967295
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e72:	43d9      	mvns	r1, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e78:	4313      	orrs	r3, r2
         );
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3724      	adds	r7, #36	; 0x24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e98:	d301      	bcc.n	8005e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e00f      	b.n	8005ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e9e:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <SysTick_Config+0x40>)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ea6:	210f      	movs	r1, #15
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	f7ff ff8e 	bl	8005dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <SysTick_Config+0x40>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005eb6:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <SysTick_Config+0x40>)
 8005eb8:	2207      	movs	r2, #7
 8005eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	e000e010 	.word	0xe000e010

08005ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff ff29 	bl	8005d2c <__NVIC_SetPriorityGrouping>
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	4603      	mov	r3, r0
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ef4:	f7ff ff3e 	bl	8005d74 <__NVIC_GetPriorityGrouping>
 8005ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	6978      	ldr	r0, [r7, #20]
 8005f00:	f7ff ff8e 	bl	8005e20 <NVIC_EncodePriority>
 8005f04:	4602      	mov	r2, r0
 8005f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff ff5d 	bl	8005dcc <__NVIC_SetPriority>
}
 8005f12:	bf00      	nop
 8005f14:	3718      	adds	r7, #24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	4603      	mov	r3, r0
 8005f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff ff31 	bl	8005d90 <__NVIC_EnableIRQ>
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff ffa2 	bl	8005e88 <SysTick_Config>
 8005f44:	4603      	mov	r3, r0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
	...

08005f50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f5c:	f7ff fa54 	bl	8005408 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e099      	b.n	80060a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f8c:	e00f      	b.n	8005fae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f8e:	f7ff fa3b 	bl	8005408 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b05      	cmp	r3, #5
 8005f9a:	d908      	bls.n	8005fae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e078      	b.n	80060a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e8      	bne.n	8005f8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4b38      	ldr	r3, [pc, #224]	; (80060a8 <HAL_DMA_Init+0x158>)
 8005fc8:	4013      	ands	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006004:	2b04      	cmp	r3, #4
 8006006:	d107      	bne.n	8006018 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	4313      	orrs	r3, r2
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b04      	cmp	r3, #4
 8006040:	d117      	bne.n	8006072 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00e      	beq.n	8006072 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fadf 	bl	8006618 <DMA_CheckFifoParam>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2240      	movs	r2, #64	; 0x40
 8006064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800606e:	2301      	movs	r3, #1
 8006070:	e016      	b.n	80060a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa96 	bl	80065ac <DMA_CalcBaseAndBitshift>
 8006080:	4603      	mov	r3, r0
 8006082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006088:	223f      	movs	r2, #63	; 0x3f
 800608a:	409a      	lsls	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	f010803f 	.word	0xf010803f

080060ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_DMA_Start_IT+0x26>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e040      	b.n	8006154 <HAL_DMA_Start_IT+0xa8>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d12f      	bne.n	8006146 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fa28 	bl	8006550 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006104:	223f      	movs	r2, #63	; 0x3f
 8006106:	409a      	lsls	r2, r3
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0216 	orr.w	r2, r2, #22
 800611a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f042 0208 	orr.w	r2, r2, #8
 8006132:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e005      	b.n	8006152 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800614e:	2302      	movs	r3, #2
 8006150:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006168:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800616a:	f7ff f94d 	bl	8005408 <HAL_GetTick>
 800616e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d008      	beq.n	800618e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2280      	movs	r2, #128	; 0x80
 8006180:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e052      	b.n	8006234 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0216 	bic.w	r2, r2, #22
 800619c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d103      	bne.n	80061be <HAL_DMA_Abort+0x62>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0208 	bic.w	r2, r2, #8
 80061cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0201 	bic.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061de:	e013      	b.n	8006208 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061e0:	f7ff f912 	bl	8005408 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	d90c      	bls.n	8006208 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2220      	movs	r2, #32
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2203      	movs	r2, #3
 80061f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e015      	b.n	8006234 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1e4      	bne.n	80061e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621a:	223f      	movs	r2, #63	; 0x3f
 800621c:	409a      	lsls	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006248:	4b92      	ldr	r3, [pc, #584]	; (8006494 <HAL_DMA_IRQHandler+0x258>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a92      	ldr	r2, [pc, #584]	; (8006498 <HAL_DMA_IRQHandler+0x25c>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	0a9b      	lsrs	r3, r3, #10
 8006254:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800625a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006266:	2208      	movs	r2, #8
 8006268:	409a      	lsls	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4013      	ands	r3, r2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d01a      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d013      	beq.n	80062a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0204 	bic.w	r2, r2, #4
 800628e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006294:	2208      	movs	r2, #8
 8006296:	409a      	lsls	r2, r3
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a0:	f043 0201 	orr.w	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ac:	2201      	movs	r2, #1
 80062ae:	409a      	lsls	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d012      	beq.n	80062de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00b      	beq.n	80062de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ca:	2201      	movs	r2, #1
 80062cc:	409a      	lsls	r2, r3
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062d6:	f043 0202 	orr.w	r2, r3, #2
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e2:	2204      	movs	r2, #4
 80062e4:	409a      	lsls	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d012      	beq.n	8006314 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006300:	2204      	movs	r2, #4
 8006302:	409a      	lsls	r2, r3
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630c:	f043 0204 	orr.w	r2, r3, #4
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006318:	2210      	movs	r2, #16
 800631a:	409a      	lsls	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4013      	ands	r3, r2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d043      	beq.n	80063ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d03c      	beq.n	80063ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006336:	2210      	movs	r2, #16
 8006338:	409a      	lsls	r2, r3
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d018      	beq.n	800637e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d108      	bne.n	800636c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d024      	beq.n	80063ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	4798      	blx	r3
 800636a:	e01f      	b.n	80063ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01b      	beq.n	80063ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
 800637c:	e016      	b.n	80063ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d107      	bne.n	800639c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f022 0208 	bic.w	r2, r2, #8
 800639a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	2220      	movs	r2, #32
 80063b2:	409a      	lsls	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 808e 	beq.w	80064da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8086 	beq.w	80064da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d2:	2220      	movs	r2, #32
 80063d4:	409a      	lsls	r2, r3
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d136      	bne.n	8006454 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 0216 	bic.w	r2, r2, #22
 80063f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695a      	ldr	r2, [r3, #20]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006404:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	2b00      	cmp	r3, #0
 800640c:	d103      	bne.n	8006416 <HAL_DMA_IRQHandler+0x1da>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0208 	bic.w	r2, r2, #8
 8006424:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642a:	223f      	movs	r2, #63	; 0x3f
 800642c:	409a      	lsls	r2, r3
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006446:	2b00      	cmp	r3, #0
 8006448:	d07d      	beq.n	8006546 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
        }
        return;
 8006452:	e078      	b.n	8006546 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d01c      	beq.n	800649c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d108      	bne.n	8006482 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006474:	2b00      	cmp	r3, #0
 8006476:	d030      	beq.n	80064da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
 8006480:	e02b      	b.n	80064da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d027      	beq.n	80064da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
 8006492:	e022      	b.n	80064da <HAL_DMA_IRQHandler+0x29e>
 8006494:	20000000 	.word	0x20000000
 8006498:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10f      	bne.n	80064ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0210 	bic.w	r2, r2, #16
 80064b8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d032      	beq.n	8006548 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d022      	beq.n	8006534 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2205      	movs	r2, #5
 80064f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	3301      	adds	r3, #1
 800650a:	60bb      	str	r3, [r7, #8]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	429a      	cmp	r2, r3
 8006510:	d307      	bcc.n	8006522 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0301 	and.w	r3, r3, #1
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1f2      	bne.n	8006506 <HAL_DMA_IRQHandler+0x2ca>
 8006520:	e000      	b.n	8006524 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006522:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
 8006544:	e000      	b.n	8006548 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006546:	bf00      	nop
    }
  }
}
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop

08006550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800656c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d108      	bne.n	8006590 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800658e:	e007      	b.n	80065a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	60da      	str	r2, [r3, #12]
}
 80065a0:	bf00      	nop
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	3b10      	subs	r3, #16
 80065bc:	4a14      	ldr	r2, [pc, #80]	; (8006610 <DMA_CalcBaseAndBitshift+0x64>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	091b      	lsrs	r3, r3, #4
 80065c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80065c6:	4a13      	ldr	r2, [pc, #76]	; (8006614 <DMA_CalcBaseAndBitshift+0x68>)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d909      	bls.n	80065ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	1d1a      	adds	r2, r3, #4
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	659a      	str	r2, [r3, #88]	; 0x58
 80065ec:	e007      	b.n	80065fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	aaaaaaab 	.word	0xaaaaaaab
 8006614:	0800ed78 	.word	0x0800ed78

08006618 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d11f      	bne.n	8006672 <DMA_CheckFifoParam+0x5a>
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b03      	cmp	r3, #3
 8006636:	d856      	bhi.n	80066e6 <DMA_CheckFifoParam+0xce>
 8006638:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <DMA_CheckFifoParam+0x28>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	08006651 	.word	0x08006651
 8006644:	08006663 	.word	0x08006663
 8006648:	08006651 	.word	0x08006651
 800664c:	080066e7 	.word	0x080066e7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d046      	beq.n	80066ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006660:	e043      	b.n	80066ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006666:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800666a:	d140      	bne.n	80066ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006670:	e03d      	b.n	80066ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667a:	d121      	bne.n	80066c0 <DMA_CheckFifoParam+0xa8>
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b03      	cmp	r3, #3
 8006680:	d837      	bhi.n	80066f2 <DMA_CheckFifoParam+0xda>
 8006682:	a201      	add	r2, pc, #4	; (adr r2, 8006688 <DMA_CheckFifoParam+0x70>)
 8006684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006688:	08006699 	.word	0x08006699
 800668c:	0800669f 	.word	0x0800669f
 8006690:	08006699 	.word	0x08006699
 8006694:	080066b1 	.word	0x080066b1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	73fb      	strb	r3, [r7, #15]
      break;
 800669c:	e030      	b.n	8006700 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d025      	beq.n	80066f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066ae:	e022      	b.n	80066f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066b8:	d11f      	bne.n	80066fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80066be:	e01c      	b.n	80066fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d903      	bls.n	80066ce <DMA_CheckFifoParam+0xb6>
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d003      	beq.n	80066d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80066cc:	e018      	b.n	8006700 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	73fb      	strb	r3, [r7, #15]
      break;
 80066d2:	e015      	b.n	8006700 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00e      	beq.n	80066fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	73fb      	strb	r3, [r7, #15]
      break;
 80066e4:	e00b      	b.n	80066fe <DMA_CheckFifoParam+0xe6>
      break;
 80066e6:	bf00      	nop
 80066e8:	e00a      	b.n	8006700 <DMA_CheckFifoParam+0xe8>
      break;
 80066ea:	bf00      	nop
 80066ec:	e008      	b.n	8006700 <DMA_CheckFifoParam+0xe8>
      break;
 80066ee:	bf00      	nop
 80066f0:	e006      	b.n	8006700 <DMA_CheckFifoParam+0xe8>
      break;
 80066f2:	bf00      	nop
 80066f4:	e004      	b.n	8006700 <DMA_CheckFifoParam+0xe8>
      break;
 80066f6:	bf00      	nop
 80066f8:	e002      	b.n	8006700 <DMA_CheckFifoParam+0xe8>
      break;   
 80066fa:	bf00      	nop
 80066fc:	e000      	b.n	8006700 <DMA_CheckFifoParam+0xe8>
      break;
 80066fe:	bf00      	nop
    }
  } 
  
  return status; 
 8006700:	7bfb      	ldrb	r3, [r7, #15]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop

08006710 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006722:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <HAL_FLASH_Program+0xa0>)
 8006724:	7e1b      	ldrb	r3, [r3, #24]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_FLASH_Program+0x1e>
 800672a:	2302      	movs	r3, #2
 800672c:	e03b      	b.n	80067a6 <HAL_FLASH_Program+0x96>
 800672e:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <HAL_FLASH_Program+0xa0>)
 8006730:	2201      	movs	r2, #1
 8006732:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006734:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006738:	f000 f870 	bl	800681c <FLASH_WaitForLastOperation>
 800673c:	4603      	mov	r3, r0
 800673e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d12b      	bne.n	800679e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d105      	bne.n	8006758 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800674c:	783b      	ldrb	r3, [r7, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	68b8      	ldr	r0, [r7, #8]
 8006752:	f000 f91b 	bl	800698c <FLASH_Program_Byte>
 8006756:	e016      	b.n	8006786 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d105      	bne.n	800676a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800675e:	883b      	ldrh	r3, [r7, #0]
 8006760:	4619      	mov	r1, r3
 8006762:	68b8      	ldr	r0, [r7, #8]
 8006764:	f000 f8ee 	bl	8006944 <FLASH_Program_HalfWord>
 8006768:	e00d      	b.n	8006786 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d105      	bne.n	800677c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	4619      	mov	r1, r3
 8006774:	68b8      	ldr	r0, [r7, #8]
 8006776:	f000 f8c3 	bl	8006900 <FLASH_Program_Word>
 800677a:	e004      	b.n	8006786 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800677c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006780:	68b8      	ldr	r0, [r7, #8]
 8006782:	f000 f88b 	bl	800689c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006786:	f24c 3050 	movw	r0, #50000	; 0xc350
 800678a:	f000 f847 	bl	800681c <FLASH_WaitForLastOperation>
 800678e:	4603      	mov	r3, r0
 8006790:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006792:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <HAL_FLASH_Program+0xa4>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	4a07      	ldr	r2, [pc, #28]	; (80067b4 <HAL_FLASH_Program+0xa4>)
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800679e:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <HAL_FLASH_Program+0xa0>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	200095a8 	.word	0x200095a8
 80067b4:	40023c00 	.word	0x40023c00

080067b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80067c2:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HAL_FLASH_Unlock+0x38>)
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da0b      	bge.n	80067e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <HAL_FLASH_Unlock+0x38>)
 80067cc:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <HAL_FLASH_Unlock+0x3c>)
 80067ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <HAL_FLASH_Unlock+0x38>)
 80067d2:	4a09      	ldr	r2, [pc, #36]	; (80067f8 <HAL_FLASH_Unlock+0x40>)
 80067d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_FLASH_Unlock+0x38>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da01      	bge.n	80067e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80067e2:	79fb      	ldrb	r3, [r7, #7]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	40023c00 	.word	0x40023c00
 80067f4:	45670123 	.word	0x45670123
 80067f8:	cdef89ab 	.word	0xcdef89ab

080067fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_FLASH_Lock+0x1c>)
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	4a04      	ldr	r2, [pc, #16]	; (8006818 <HAL_FLASH_Lock+0x1c>)
 8006806:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800680a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40023c00 	.word	0x40023c00

0800681c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006828:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <FLASH_WaitForLastOperation+0x78>)
 800682a:	2200      	movs	r2, #0
 800682c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800682e:	f7fe fdeb 	bl	8005408 <HAL_GetTick>
 8006832:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006834:	e010      	b.n	8006858 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d00c      	beq.n	8006858 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <FLASH_WaitForLastOperation+0x38>
 8006844:	f7fe fde0 	bl	8005408 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d201      	bcs.n	8006858 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e019      	b.n	800688c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006858:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <FLASH_WaitForLastOperation+0x7c>)
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e8      	bne.n	8006836 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006864:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <FLASH_WaitForLastOperation+0x7c>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <FLASH_WaitForLastOperation+0x7c>)
 8006872:	2201      	movs	r2, #1
 8006874:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006876:	4b08      	ldr	r3, [pc, #32]	; (8006898 <FLASH_WaitForLastOperation+0x7c>)
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006882:	f000 f8a5 	bl	80069d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800688a:	2300      	movs	r3, #0
  
}  
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}
 8006894:	200095a8 	.word	0x200095a8
 8006898:	40023c00 	.word	0x40023c00

0800689c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068a8:	4b14      	ldr	r3, [pc, #80]	; (80068fc <FLASH_Program_DoubleWord+0x60>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	4a13      	ldr	r2, [pc, #76]	; (80068fc <FLASH_Program_DoubleWord+0x60>)
 80068ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80068b4:	4b11      	ldr	r3, [pc, #68]	; (80068fc <FLASH_Program_DoubleWord+0x60>)
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	4a10      	ldr	r2, [pc, #64]	; (80068fc <FLASH_Program_DoubleWord+0x60>)
 80068ba:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80068be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80068c0:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <FLASH_Program_DoubleWord+0x60>)
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <FLASH_Program_DoubleWord+0x60>)
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80068d2:	f3bf 8f6f 	isb	sy
}
 80068d6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80068d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	000a      	movs	r2, r1
 80068e6:	2300      	movs	r3, #0
 80068e8:	68f9      	ldr	r1, [r7, #12]
 80068ea:	3104      	adds	r1, #4
 80068ec:	4613      	mov	r3, r2
 80068ee:	600b      	str	r3, [r1, #0]
}
 80068f0:	bf00      	nop
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	40023c00 	.word	0x40023c00

08006900 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <FLASH_Program_Word+0x40>)
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	4a0c      	ldr	r2, [pc, #48]	; (8006940 <FLASH_Program_Word+0x40>)
 8006910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006914:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006916:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <FLASH_Program_Word+0x40>)
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	4a09      	ldr	r2, [pc, #36]	; (8006940 <FLASH_Program_Word+0x40>)
 800691c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006920:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006922:	4b07      	ldr	r3, [pc, #28]	; (8006940 <FLASH_Program_Word+0x40>)
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	4a06      	ldr	r2, [pc, #24]	; (8006940 <FLASH_Program_Word+0x40>)
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	601a      	str	r2, [r3, #0]
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40023c00 	.word	0x40023c00

08006944 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006950:	4b0d      	ldr	r3, [pc, #52]	; (8006988 <FLASH_Program_HalfWord+0x44>)
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	4a0c      	ldr	r2, [pc, #48]	; (8006988 <FLASH_Program_HalfWord+0x44>)
 8006956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800695c:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <FLASH_Program_HalfWord+0x44>)
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	4a09      	ldr	r2, [pc, #36]	; (8006988 <FLASH_Program_HalfWord+0x44>)
 8006962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006966:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006968:	4b07      	ldr	r3, [pc, #28]	; (8006988 <FLASH_Program_HalfWord+0x44>)
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	4a06      	ldr	r2, [pc, #24]	; (8006988 <FLASH_Program_HalfWord+0x44>)
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	887a      	ldrh	r2, [r7, #2]
 8006978:	801a      	strh	r2, [r3, #0]
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	40023c00 	.word	0x40023c00

0800698c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006998:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <FLASH_Program_Byte+0x40>)
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	4a0b      	ldr	r2, [pc, #44]	; (80069cc <FLASH_Program_Byte+0x40>)
 800699e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80069a4:	4b09      	ldr	r3, [pc, #36]	; (80069cc <FLASH_Program_Byte+0x40>)
 80069a6:	4a09      	ldr	r2, [pc, #36]	; (80069cc <FLASH_Program_Byte+0x40>)
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80069ac:	4b07      	ldr	r3, [pc, #28]	; (80069cc <FLASH_Program_Byte+0x40>)
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	4a06      	ldr	r2, [pc, #24]	; (80069cc <FLASH_Program_Byte+0x40>)
 80069b2:	f043 0301 	orr.w	r3, r3, #1
 80069b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	78fa      	ldrb	r2, [r7, #3]
 80069bc:	701a      	strb	r2, [r3, #0]
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40023c00 	.word	0x40023c00

080069d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80069d4:	4b27      	ldr	r3, [pc, #156]	; (8006a74 <FLASH_SetErrorCode+0xa4>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80069e0:	4b25      	ldr	r3, [pc, #148]	; (8006a78 <FLASH_SetErrorCode+0xa8>)
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	f043 0310 	orr.w	r3, r3, #16
 80069e8:	4a23      	ldr	r2, [pc, #140]	; (8006a78 <FLASH_SetErrorCode+0xa8>)
 80069ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80069ec:	4b21      	ldr	r3, [pc, #132]	; (8006a74 <FLASH_SetErrorCode+0xa4>)
 80069ee:	2210      	movs	r2, #16
 80069f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80069f2:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <FLASH_SetErrorCode+0xa4>)
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d008      	beq.n	8006a10 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80069fe:	4b1e      	ldr	r3, [pc, #120]	; (8006a78 <FLASH_SetErrorCode+0xa8>)
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f043 0308 	orr.w	r3, r3, #8
 8006a06:	4a1c      	ldr	r2, [pc, #112]	; (8006a78 <FLASH_SetErrorCode+0xa8>)
 8006a08:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006a0a:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <FLASH_SetErrorCode+0xa4>)
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006a10:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <FLASH_SetErrorCode+0xa4>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006a1c:	4b16      	ldr	r3, [pc, #88]	; (8006a78 <FLASH_SetErrorCode+0xa8>)
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f043 0304 	orr.w	r3, r3, #4
 8006a24:	4a14      	ldr	r2, [pc, #80]	; (8006a78 <FLASH_SetErrorCode+0xa8>)
 8006a26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006a28:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <FLASH_SetErrorCode+0xa4>)
 8006a2a:	2240      	movs	r2, #64	; 0x40
 8006a2c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006a2e:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <FLASH_SetErrorCode+0xa4>)
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d008      	beq.n	8006a4c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006a3a:	4b0f      	ldr	r3, [pc, #60]	; (8006a78 <FLASH_SetErrorCode+0xa8>)
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f043 0302 	orr.w	r3, r3, #2
 8006a42:	4a0d      	ldr	r2, [pc, #52]	; (8006a78 <FLASH_SetErrorCode+0xa8>)
 8006a44:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006a46:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <FLASH_SetErrorCode+0xa4>)
 8006a48:	2280      	movs	r2, #128	; 0x80
 8006a4a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006a4c:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <FLASH_SetErrorCode+0xa4>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0302 	and.w	r3, r3, #2
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d008      	beq.n	8006a6a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006a58:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <FLASH_SetErrorCode+0xa8>)
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	f043 0320 	orr.w	r3, r3, #32
 8006a60:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <FLASH_SetErrorCode+0xa8>)
 8006a62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006a64:	4b03      	ldr	r3, [pc, #12]	; (8006a74 <FLASH_SetErrorCode+0xa4>)
 8006a66:	2202      	movs	r2, #2
 8006a68:	60da      	str	r2, [r3, #12]
  }
}
 8006a6a:	bf00      	nop
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	40023c00 	.word	0x40023c00
 8006a78:	200095a8 	.word	0x200095a8

08006a7c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006a8e:	4b31      	ldr	r3, [pc, #196]	; (8006b54 <HAL_FLASHEx_Erase+0xd8>)
 8006a90:	7e1b      	ldrb	r3, [r3, #24]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_FLASHEx_Erase+0x1e>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e058      	b.n	8006b4c <HAL_FLASHEx_Erase+0xd0>
 8006a9a:	4b2e      	ldr	r3, [pc, #184]	; (8006b54 <HAL_FLASHEx_Erase+0xd8>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006aa0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006aa4:	f7ff feba 	bl	800681c <FLASH_WaitForLastOperation>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d148      	bne.n	8006b44 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d115      	bne.n	8006aee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	4619      	mov	r1, r3
 8006ace:	4610      	mov	r0, r2
 8006ad0:	f000 f844 	bl	8006b5c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ad4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ad8:	f7ff fea0 	bl	800681c <FLASH_WaitForLastOperation>
 8006adc:	4603      	mov	r3, r0
 8006ade:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006ae0:	4b1d      	ldr	r3, [pc, #116]	; (8006b58 <HAL_FLASHEx_Erase+0xdc>)
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	4a1c      	ldr	r2, [pc, #112]	; (8006b58 <HAL_FLASHEx_Erase+0xdc>)
 8006ae6:	f023 0304 	bic.w	r3, r3, #4
 8006aea:	6113      	str	r3, [r2, #16]
 8006aec:	e028      	b.n	8006b40 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	60bb      	str	r3, [r7, #8]
 8006af4:	e01c      	b.n	8006b30 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	4619      	mov	r1, r3
 8006afe:	68b8      	ldr	r0, [r7, #8]
 8006b00:	f000 f850 	bl	8006ba4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006b08:	f7ff fe88 	bl	800681c <FLASH_WaitForLastOperation>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006b10:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <HAL_FLASHEx_Erase+0xdc>)
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	4a10      	ldr	r2, [pc, #64]	; (8006b58 <HAL_FLASHEx_Erase+0xdc>)
 8006b16:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006b1a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	601a      	str	r2, [r3, #0]
          break;
 8006b28:	e00a      	b.n	8006b40 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	60bb      	str	r3, [r7, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4413      	add	r3, r2
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d3da      	bcc.n	8006af6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006b40:	f000 f878 	bl	8006c34 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006b44:	4b03      	ldr	r3, [pc, #12]	; (8006b54 <HAL_FLASHEx_Erase+0xd8>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	761a      	strb	r2, [r3, #24]

  return status;
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	200095a8 	.word	0x200095a8
 8006b58:	40023c00 	.word	0x40023c00

08006b5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	6039      	str	r1, [r7, #0]
 8006b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006b68:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <FLASH_MassErase+0x44>)
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	4a0c      	ldr	r2, [pc, #48]	; (8006ba0 <FLASH_MassErase+0x44>)
 8006b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006b74:	4b0a      	ldr	r3, [pc, #40]	; (8006ba0 <FLASH_MassErase+0x44>)
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <FLASH_MassErase+0x44>)
 8006b7a:	f043 0304 	orr.w	r3, r3, #4
 8006b7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006b80:	4b07      	ldr	r3, [pc, #28]	; (8006ba0 <FLASH_MassErase+0x44>)
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	4a05      	ldr	r2, [pc, #20]	; (8006ba0 <FLASH_MassErase+0x44>)
 8006b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b90:	6113      	str	r3, [r2, #16]
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40023c00 	.word	0x40023c00

08006ba4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d102      	bne.n	8006bc0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	e010      	b.n	8006be2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d103      	bne.n	8006bce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	e009      	b.n	8006be2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d103      	bne.n	8006bdc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	e002      	b.n	8006be2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006bdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006be0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006be2:	4b13      	ldr	r3, [pc, #76]	; (8006c30 <FLASH_Erase_Sector+0x8c>)
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	4a12      	ldr	r2, [pc, #72]	; (8006c30 <FLASH_Erase_Sector+0x8c>)
 8006be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006bee:	4b10      	ldr	r3, [pc, #64]	; (8006c30 <FLASH_Erase_Sector+0x8c>)
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	490f      	ldr	r1, [pc, #60]	; (8006c30 <FLASH_Erase_Sector+0x8c>)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <FLASH_Erase_Sector+0x8c>)
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <FLASH_Erase_Sector+0x8c>)
 8006c00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006c04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006c06:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <FLASH_Erase_Sector+0x8c>)
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	4a07      	ldr	r2, [pc, #28]	; (8006c30 <FLASH_Erase_Sector+0x8c>)
 8006c12:	f043 0302 	orr.w	r3, r3, #2
 8006c16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006c18:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <FLASH_Erase_Sector+0x8c>)
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <FLASH_Erase_Sector+0x8c>)
 8006c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c22:	6113      	str	r3, [r2, #16]
}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	40023c00 	.word	0x40023c00

08006c34 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006c34:	b480      	push	{r7}
 8006c36:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006c38:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d017      	beq.n	8006c74 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006c44:	4b1d      	ldr	r3, [pc, #116]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1c      	ldr	r2, [pc, #112]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c4e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006c50:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a19      	ldr	r2, [pc, #100]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	4b17      	ldr	r3, [pc, #92]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c66:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c68:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a13      	ldr	r2, [pc, #76]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c72:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006c74:	4b11      	ldr	r3, [pc, #68]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d017      	beq.n	8006cb0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006c80:	4b0e      	ldr	r3, [pc, #56]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a0d      	ldr	r2, [pc, #52]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c8a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a07      	ldr	r2, [pc, #28]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ca2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ca4:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a04      	ldr	r2, [pc, #16]	; (8006cbc <FLASH_FlushCaches+0x88>)
 8006caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cae:	6013      	str	r3, [r2, #0]
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40023c00 	.word	0x40023c00

08006cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b089      	sub	sp, #36	; 0x24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	e16b      	b.n	8006fb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cdc:	2201      	movs	r2, #1
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	4013      	ands	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	f040 815a 	bne.w	8006fae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d005      	beq.n	8006d12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d130      	bne.n	8006d74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	43db      	mvns	r3, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	4013      	ands	r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d48:	2201      	movs	r2, #1
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d50:	43db      	mvns	r3, r3
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	4013      	ands	r3, r2
 8006d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	091b      	lsrs	r3, r3, #4
 8006d5e:	f003 0201 	and.w	r2, r3, #1
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69ba      	ldr	r2, [r7, #24]
 8006d72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d017      	beq.n	8006db0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d90:	43db      	mvns	r3, r3
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	4013      	ands	r3, r2
 8006d96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	69ba      	ldr	r2, [r7, #24]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 0303 	and.w	r3, r3, #3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d123      	bne.n	8006e04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	08da      	lsrs	r2, r3, #3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3208      	adds	r2, #8
 8006dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	220f      	movs	r2, #15
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	43db      	mvns	r3, r3
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	4013      	ands	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	08da      	lsrs	r2, r3, #3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3208      	adds	r2, #8
 8006dfe:	69b9      	ldr	r1, [r7, #24]
 8006e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	2203      	movs	r2, #3
 8006e10:	fa02 f303 	lsl.w	r3, r2, r3
 8006e14:	43db      	mvns	r3, r3
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	4013      	ands	r3, r2
 8006e1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f003 0203 	and.w	r2, r3, #3
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80b4 	beq.w	8006fae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]
 8006e4a:	4b60      	ldr	r3, [pc, #384]	; (8006fcc <HAL_GPIO_Init+0x30c>)
 8006e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4e:	4a5f      	ldr	r2, [pc, #380]	; (8006fcc <HAL_GPIO_Init+0x30c>)
 8006e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e54:	6453      	str	r3, [r2, #68]	; 0x44
 8006e56:	4b5d      	ldr	r3, [pc, #372]	; (8006fcc <HAL_GPIO_Init+0x30c>)
 8006e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e62:	4a5b      	ldr	r2, [pc, #364]	; (8006fd0 <HAL_GPIO_Init+0x310>)
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	089b      	lsrs	r3, r3, #2
 8006e68:	3302      	adds	r3, #2
 8006e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	220f      	movs	r2, #15
 8006e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7e:	43db      	mvns	r3, r3
 8006e80:	69ba      	ldr	r2, [r7, #24]
 8006e82:	4013      	ands	r3, r2
 8006e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a52      	ldr	r2, [pc, #328]	; (8006fd4 <HAL_GPIO_Init+0x314>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d02b      	beq.n	8006ee6 <HAL_GPIO_Init+0x226>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a51      	ldr	r2, [pc, #324]	; (8006fd8 <HAL_GPIO_Init+0x318>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d025      	beq.n	8006ee2 <HAL_GPIO_Init+0x222>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a50      	ldr	r2, [pc, #320]	; (8006fdc <HAL_GPIO_Init+0x31c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d01f      	beq.n	8006ede <HAL_GPIO_Init+0x21e>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a4f      	ldr	r2, [pc, #316]	; (8006fe0 <HAL_GPIO_Init+0x320>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d019      	beq.n	8006eda <HAL_GPIO_Init+0x21a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a4e      	ldr	r2, [pc, #312]	; (8006fe4 <HAL_GPIO_Init+0x324>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <HAL_GPIO_Init+0x216>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a4d      	ldr	r2, [pc, #308]	; (8006fe8 <HAL_GPIO_Init+0x328>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00d      	beq.n	8006ed2 <HAL_GPIO_Init+0x212>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a4c      	ldr	r2, [pc, #304]	; (8006fec <HAL_GPIO_Init+0x32c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d007      	beq.n	8006ece <HAL_GPIO_Init+0x20e>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a4b      	ldr	r2, [pc, #300]	; (8006ff0 <HAL_GPIO_Init+0x330>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d101      	bne.n	8006eca <HAL_GPIO_Init+0x20a>
 8006ec6:	2307      	movs	r3, #7
 8006ec8:	e00e      	b.n	8006ee8 <HAL_GPIO_Init+0x228>
 8006eca:	2308      	movs	r3, #8
 8006ecc:	e00c      	b.n	8006ee8 <HAL_GPIO_Init+0x228>
 8006ece:	2306      	movs	r3, #6
 8006ed0:	e00a      	b.n	8006ee8 <HAL_GPIO_Init+0x228>
 8006ed2:	2305      	movs	r3, #5
 8006ed4:	e008      	b.n	8006ee8 <HAL_GPIO_Init+0x228>
 8006ed6:	2304      	movs	r3, #4
 8006ed8:	e006      	b.n	8006ee8 <HAL_GPIO_Init+0x228>
 8006eda:	2303      	movs	r3, #3
 8006edc:	e004      	b.n	8006ee8 <HAL_GPIO_Init+0x228>
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e002      	b.n	8006ee8 <HAL_GPIO_Init+0x228>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e000      	b.n	8006ee8 <HAL_GPIO_Init+0x228>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	69fa      	ldr	r2, [r7, #28]
 8006eea:	f002 0203 	and.w	r2, r2, #3
 8006eee:	0092      	lsls	r2, r2, #2
 8006ef0:	4093      	lsls	r3, r2
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ef8:	4935      	ldr	r1, [pc, #212]	; (8006fd0 <HAL_GPIO_Init+0x310>)
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	089b      	lsrs	r3, r3, #2
 8006efe:	3302      	adds	r3, #2
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f06:	4b3b      	ldr	r3, [pc, #236]	; (8006ff4 <HAL_GPIO_Init+0x334>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	43db      	mvns	r3, r3
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	4013      	ands	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f2a:	4a32      	ldr	r2, [pc, #200]	; (8006ff4 <HAL_GPIO_Init+0x334>)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006f30:	4b30      	ldr	r3, [pc, #192]	; (8006ff4 <HAL_GPIO_Init+0x334>)
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f54:	4a27      	ldr	r2, [pc, #156]	; (8006ff4 <HAL_GPIO_Init+0x334>)
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f5a:	4b26      	ldr	r3, [pc, #152]	; (8006ff4 <HAL_GPIO_Init+0x334>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	43db      	mvns	r3, r3
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	4013      	ands	r3, r2
 8006f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f7e:	4a1d      	ldr	r2, [pc, #116]	; (8006ff4 <HAL_GPIO_Init+0x334>)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f84:	4b1b      	ldr	r3, [pc, #108]	; (8006ff4 <HAL_GPIO_Init+0x334>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	4013      	ands	r3, r2
 8006f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006fa8:	4a12      	ldr	r2, [pc, #72]	; (8006ff4 <HAL_GPIO_Init+0x334>)
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	61fb      	str	r3, [r7, #28]
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b0f      	cmp	r3, #15
 8006fb8:	f67f ae90 	bls.w	8006cdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	bf00      	nop
 8006fc0:	3724      	adds	r7, #36	; 0x24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	40013800 	.word	0x40013800
 8006fd4:	40020000 	.word	0x40020000
 8006fd8:	40020400 	.word	0x40020400
 8006fdc:	40020800 	.word	0x40020800
 8006fe0:	40020c00 	.word	0x40020c00
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	40021400 	.word	0x40021400
 8006fec:	40021800 	.word	0x40021800
 8006ff0:	40021c00 	.word	0x40021c00
 8006ff4:	40013c00 	.word	0x40013c00

08006ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	887b      	ldrh	r3, [r7, #2]
 800700a:	4013      	ands	r3, r2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007010:	2301      	movs	r3, #1
 8007012:	73fb      	strb	r3, [r7, #15]
 8007014:	e001      	b.n	800701a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	807b      	strh	r3, [r7, #2]
 8007034:	4613      	mov	r3, r2
 8007036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007038:	787b      	ldrb	r3, [r7, #1]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800703e:	887a      	ldrh	r2, [r7, #2]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007044:	e003      	b.n	800704e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007046:	887b      	ldrh	r3, [r7, #2]
 8007048:	041a      	lsls	r2, r3, #16
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	619a      	str	r2, [r3, #24]
}
 800704e:	bf00      	nop
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
	...

0800705c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e12b      	b.n	80072c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fc ff78 	bl	8003f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2224      	movs	r2, #36	; 0x24
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 0201 	bic.w	r2, r2, #1
 800709e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80070c0:	f000 fd5a 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 80070c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	4a81      	ldr	r2, [pc, #516]	; (80072d0 <HAL_I2C_Init+0x274>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d807      	bhi.n	80070e0 <HAL_I2C_Init+0x84>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a80      	ldr	r2, [pc, #512]	; (80072d4 <HAL_I2C_Init+0x278>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	bf94      	ite	ls
 80070d8:	2301      	movls	r3, #1
 80070da:	2300      	movhi	r3, #0
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	e006      	b.n	80070ee <HAL_I2C_Init+0x92>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4a7d      	ldr	r2, [pc, #500]	; (80072d8 <HAL_I2C_Init+0x27c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	bf94      	ite	ls
 80070e8:	2301      	movls	r3, #1
 80070ea:	2300      	movhi	r3, #0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e0e7      	b.n	80072c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4a78      	ldr	r2, [pc, #480]	; (80072dc <HAL_I2C_Init+0x280>)
 80070fa:	fba2 2303 	umull	r2, r3, r2, r3
 80070fe:	0c9b      	lsrs	r3, r3, #18
 8007100:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	430a      	orrs	r2, r1
 8007114:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	4a6a      	ldr	r2, [pc, #424]	; (80072d0 <HAL_I2C_Init+0x274>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d802      	bhi.n	8007130 <HAL_I2C_Init+0xd4>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	3301      	adds	r3, #1
 800712e:	e009      	b.n	8007144 <HAL_I2C_Init+0xe8>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	4a69      	ldr	r2, [pc, #420]	; (80072e0 <HAL_I2C_Init+0x284>)
 800713c:	fba2 2303 	umull	r2, r3, r2, r3
 8007140:	099b      	lsrs	r3, r3, #6
 8007142:	3301      	adds	r3, #1
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	430b      	orrs	r3, r1
 800714a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007156:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	495c      	ldr	r1, [pc, #368]	; (80072d0 <HAL_I2C_Init+0x274>)
 8007160:	428b      	cmp	r3, r1
 8007162:	d819      	bhi.n	8007198 <HAL_I2C_Init+0x13c>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	1e59      	subs	r1, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007172:	1c59      	adds	r1, r3, #1
 8007174:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007178:	400b      	ands	r3, r1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <HAL_I2C_Init+0x138>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1e59      	subs	r1, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	005b      	lsls	r3, r3, #1
 8007188:	fbb1 f3f3 	udiv	r3, r1, r3
 800718c:	3301      	adds	r3, #1
 800718e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007192:	e051      	b.n	8007238 <HAL_I2C_Init+0x1dc>
 8007194:	2304      	movs	r3, #4
 8007196:	e04f      	b.n	8007238 <HAL_I2C_Init+0x1dc>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d111      	bne.n	80071c4 <HAL_I2C_Init+0x168>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	1e58      	subs	r0, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6859      	ldr	r1, [r3, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	005b      	lsls	r3, r3, #1
 80071ac:	440b      	add	r3, r1
 80071ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80071b2:	3301      	adds	r3, #1
 80071b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	bf0c      	ite	eq
 80071bc:	2301      	moveq	r3, #1
 80071be:	2300      	movne	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	e012      	b.n	80071ea <HAL_I2C_Init+0x18e>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	1e58      	subs	r0, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6859      	ldr	r1, [r3, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	0099      	lsls	r1, r3, #2
 80071d4:	440b      	add	r3, r1
 80071d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80071da:	3301      	adds	r3, #1
 80071dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	bf0c      	ite	eq
 80071e4:	2301      	moveq	r3, #1
 80071e6:	2300      	movne	r3, #0
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <HAL_I2C_Init+0x196>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e022      	b.n	8007238 <HAL_I2C_Init+0x1dc>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10e      	bne.n	8007218 <HAL_I2C_Init+0x1bc>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	1e58      	subs	r0, r3, #1
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6859      	ldr	r1, [r3, #4]
 8007202:	460b      	mov	r3, r1
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	440b      	add	r3, r1
 8007208:	fbb0 f3f3 	udiv	r3, r0, r3
 800720c:	3301      	adds	r3, #1
 800720e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007216:	e00f      	b.n	8007238 <HAL_I2C_Init+0x1dc>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	1e58      	subs	r0, r3, #1
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6859      	ldr	r1, [r3, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	440b      	add	r3, r1
 8007226:	0099      	lsls	r1, r3, #2
 8007228:	440b      	add	r3, r1
 800722a:	fbb0 f3f3 	udiv	r3, r0, r3
 800722e:	3301      	adds	r3, #1
 8007230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007234:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	6809      	ldr	r1, [r1, #0]
 800723c:	4313      	orrs	r3, r2
 800723e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69da      	ldr	r2, [r3, #28]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6911      	ldr	r1, [r2, #16]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68d2      	ldr	r2, [r2, #12]
 8007272:	4311      	orrs	r1, r2
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	430b      	orrs	r3, r1
 800727a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695a      	ldr	r2, [r3, #20]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	000186a0 	.word	0x000186a0
 80072d4:	001e847f 	.word	0x001e847f
 80072d8:	003d08ff 	.word	0x003d08ff
 80072dc:	431bde83 	.word	0x431bde83
 80072e0:	10624dd3 	.word	0x10624dd3

080072e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e264      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d075      	beq.n	80073ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007302:	4ba3      	ldr	r3, [pc, #652]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f003 030c 	and.w	r3, r3, #12
 800730a:	2b04      	cmp	r3, #4
 800730c:	d00c      	beq.n	8007328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800730e:	4ba0      	ldr	r3, [pc, #640]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007316:	2b08      	cmp	r3, #8
 8007318:	d112      	bne.n	8007340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800731a:	4b9d      	ldr	r3, [pc, #628]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007326:	d10b      	bne.n	8007340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007328:	4b99      	ldr	r3, [pc, #612]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d05b      	beq.n	80073ec <HAL_RCC_OscConfig+0x108>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d157      	bne.n	80073ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e23f      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007348:	d106      	bne.n	8007358 <HAL_RCC_OscConfig+0x74>
 800734a:	4b91      	ldr	r3, [pc, #580]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a90      	ldr	r2, [pc, #576]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007354:	6013      	str	r3, [r2, #0]
 8007356:	e01d      	b.n	8007394 <HAL_RCC_OscConfig+0xb0>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007360:	d10c      	bne.n	800737c <HAL_RCC_OscConfig+0x98>
 8007362:	4b8b      	ldr	r3, [pc, #556]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a8a      	ldr	r2, [pc, #552]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	4b88      	ldr	r3, [pc, #544]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a87      	ldr	r2, [pc, #540]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	e00b      	b.n	8007394 <HAL_RCC_OscConfig+0xb0>
 800737c:	4b84      	ldr	r3, [pc, #528]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a83      	ldr	r2, [pc, #524]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	4b81      	ldr	r3, [pc, #516]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a80      	ldr	r2, [pc, #512]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 800738e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d013      	beq.n	80073c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800739c:	f7fe f834 	bl	8005408 <HAL_GetTick>
 80073a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a2:	e008      	b.n	80073b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073a4:	f7fe f830 	bl	8005408 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b64      	cmp	r3, #100	; 0x64
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e204      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073b6:	4b76      	ldr	r3, [pc, #472]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d0f0      	beq.n	80073a4 <HAL_RCC_OscConfig+0xc0>
 80073c2:	e014      	b.n	80073ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c4:	f7fe f820 	bl	8005408 <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073cc:	f7fe f81c 	bl	8005408 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b64      	cmp	r3, #100	; 0x64
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e1f0      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073de:	4b6c      	ldr	r3, [pc, #432]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1f0      	bne.n	80073cc <HAL_RCC_OscConfig+0xe8>
 80073ea:	e000      	b.n	80073ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d063      	beq.n	80074c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073fa:	4b65      	ldr	r3, [pc, #404]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f003 030c 	and.w	r3, r3, #12
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00b      	beq.n	800741e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007406:	4b62      	ldr	r3, [pc, #392]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800740e:	2b08      	cmp	r3, #8
 8007410:	d11c      	bne.n	800744c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007412:	4b5f      	ldr	r3, [pc, #380]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d116      	bne.n	800744c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800741e:	4b5c      	ldr	r3, [pc, #368]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <HAL_RCC_OscConfig+0x152>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d001      	beq.n	8007436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e1c4      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007436:	4b56      	ldr	r3, [pc, #344]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	691b      	ldr	r3, [r3, #16]
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	4952      	ldr	r1, [pc, #328]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007446:	4313      	orrs	r3, r2
 8007448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800744a:	e03a      	b.n	80074c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d020      	beq.n	8007496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007454:	4b4f      	ldr	r3, [pc, #316]	; (8007594 <HAL_RCC_OscConfig+0x2b0>)
 8007456:	2201      	movs	r2, #1
 8007458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745a:	f7fd ffd5 	bl	8005408 <HAL_GetTick>
 800745e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007460:	e008      	b.n	8007474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007462:	f7fd ffd1 	bl	8005408 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e1a5      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007474:	4b46      	ldr	r3, [pc, #280]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0f0      	beq.n	8007462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007480:	4b43      	ldr	r3, [pc, #268]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	00db      	lsls	r3, r3, #3
 800748e:	4940      	ldr	r1, [pc, #256]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007490:	4313      	orrs	r3, r2
 8007492:	600b      	str	r3, [r1, #0]
 8007494:	e015      	b.n	80074c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007496:	4b3f      	ldr	r3, [pc, #252]	; (8007594 <HAL_RCC_OscConfig+0x2b0>)
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749c:	f7fd ffb4 	bl	8005408 <HAL_GetTick>
 80074a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074a2:	e008      	b.n	80074b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074a4:	f7fd ffb0 	bl	8005408 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e184      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074b6:	4b36      	ldr	r3, [pc, #216]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f0      	bne.n	80074a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0308 	and.w	r3, r3, #8
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d030      	beq.n	8007530 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d016      	beq.n	8007504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074d6:	4b30      	ldr	r3, [pc, #192]	; (8007598 <HAL_RCC_OscConfig+0x2b4>)
 80074d8:	2201      	movs	r2, #1
 80074da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074dc:	f7fd ff94 	bl	8005408 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074e2:	e008      	b.n	80074f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074e4:	f7fd ff90 	bl	8005408 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e164      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074f6:	4b26      	ldr	r3, [pc, #152]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 80074f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f0      	beq.n	80074e4 <HAL_RCC_OscConfig+0x200>
 8007502:	e015      	b.n	8007530 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007504:	4b24      	ldr	r3, [pc, #144]	; (8007598 <HAL_RCC_OscConfig+0x2b4>)
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800750a:	f7fd ff7d 	bl	8005408 <HAL_GetTick>
 800750e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007510:	e008      	b.n	8007524 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007512:	f7fd ff79 	bl	8005408 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	d901      	bls.n	8007524 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e14d      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007524:	4b1a      	ldr	r3, [pc, #104]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007528:	f003 0302 	and.w	r3, r3, #2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1f0      	bne.n	8007512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 80a0 	beq.w	800767e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800753e:	2300      	movs	r3, #0
 8007540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10f      	bne.n	800756e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800754e:	2300      	movs	r3, #0
 8007550:	60bb      	str	r3, [r7, #8]
 8007552:	4b0f      	ldr	r3, [pc, #60]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	4a0e      	ldr	r2, [pc, #56]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800755c:	6413      	str	r3, [r2, #64]	; 0x40
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <HAL_RCC_OscConfig+0x2ac>)
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007566:	60bb      	str	r3, [r7, #8]
 8007568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800756a:	2301      	movs	r3, #1
 800756c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800756e:	4b0b      	ldr	r3, [pc, #44]	; (800759c <HAL_RCC_OscConfig+0x2b8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007576:	2b00      	cmp	r3, #0
 8007578:	d121      	bne.n	80075be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800757a:	4b08      	ldr	r3, [pc, #32]	; (800759c <HAL_RCC_OscConfig+0x2b8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a07      	ldr	r2, [pc, #28]	; (800759c <HAL_RCC_OscConfig+0x2b8>)
 8007580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007586:	f7fd ff3f 	bl	8005408 <HAL_GetTick>
 800758a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800758c:	e011      	b.n	80075b2 <HAL_RCC_OscConfig+0x2ce>
 800758e:	bf00      	nop
 8007590:	40023800 	.word	0x40023800
 8007594:	42470000 	.word	0x42470000
 8007598:	42470e80 	.word	0x42470e80
 800759c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a0:	f7fd ff32 	bl	8005408 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e106      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075b2:	4b85      	ldr	r3, [pc, #532]	; (80077c8 <HAL_RCC_OscConfig+0x4e4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0f0      	beq.n	80075a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d106      	bne.n	80075d4 <HAL_RCC_OscConfig+0x2f0>
 80075c6:	4b81      	ldr	r3, [pc, #516]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ca:	4a80      	ldr	r2, [pc, #512]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 80075cc:	f043 0301 	orr.w	r3, r3, #1
 80075d0:	6713      	str	r3, [r2, #112]	; 0x70
 80075d2:	e01c      	b.n	800760e <HAL_RCC_OscConfig+0x32a>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	2b05      	cmp	r3, #5
 80075da:	d10c      	bne.n	80075f6 <HAL_RCC_OscConfig+0x312>
 80075dc:	4b7b      	ldr	r3, [pc, #492]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 80075de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e0:	4a7a      	ldr	r2, [pc, #488]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 80075e2:	f043 0304 	orr.w	r3, r3, #4
 80075e6:	6713      	str	r3, [r2, #112]	; 0x70
 80075e8:	4b78      	ldr	r3, [pc, #480]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 80075ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ec:	4a77      	ldr	r2, [pc, #476]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 80075ee:	f043 0301 	orr.w	r3, r3, #1
 80075f2:	6713      	str	r3, [r2, #112]	; 0x70
 80075f4:	e00b      	b.n	800760e <HAL_RCC_OscConfig+0x32a>
 80075f6:	4b75      	ldr	r3, [pc, #468]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 80075f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fa:	4a74      	ldr	r2, [pc, #464]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 80075fc:	f023 0301 	bic.w	r3, r3, #1
 8007600:	6713      	str	r3, [r2, #112]	; 0x70
 8007602:	4b72      	ldr	r3, [pc, #456]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 8007604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007606:	4a71      	ldr	r2, [pc, #452]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 8007608:	f023 0304 	bic.w	r3, r3, #4
 800760c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d015      	beq.n	8007642 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007616:	f7fd fef7 	bl	8005408 <HAL_GetTick>
 800761a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800761c:	e00a      	b.n	8007634 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800761e:	f7fd fef3 	bl	8005408 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	f241 3288 	movw	r2, #5000	; 0x1388
 800762c:	4293      	cmp	r3, r2
 800762e:	d901      	bls.n	8007634 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e0c5      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007634:	4b65      	ldr	r3, [pc, #404]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 8007636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0ee      	beq.n	800761e <HAL_RCC_OscConfig+0x33a>
 8007640:	e014      	b.n	800766c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007642:	f7fd fee1 	bl	8005408 <HAL_GetTick>
 8007646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007648:	e00a      	b.n	8007660 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800764a:	f7fd fedd 	bl	8005408 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	f241 3288 	movw	r2, #5000	; 0x1388
 8007658:	4293      	cmp	r3, r2
 800765a:	d901      	bls.n	8007660 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e0af      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007660:	4b5a      	ldr	r3, [pc, #360]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 8007662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1ee      	bne.n	800764a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d105      	bne.n	800767e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007672:	4b56      	ldr	r3, [pc, #344]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	4a55      	ldr	r2, [pc, #340]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 8007678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800767c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 809b 	beq.w	80077be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007688:	4b50      	ldr	r3, [pc, #320]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 030c 	and.w	r3, r3, #12
 8007690:	2b08      	cmp	r3, #8
 8007692:	d05c      	beq.n	800774e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d141      	bne.n	8007720 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800769c:	4b4c      	ldr	r3, [pc, #304]	; (80077d0 <HAL_RCC_OscConfig+0x4ec>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a2:	f7fd feb1 	bl	8005408 <HAL_GetTick>
 80076a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076a8:	e008      	b.n	80076bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076aa:	f7fd fead 	bl	8005408 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e081      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076bc:	4b43      	ldr	r3, [pc, #268]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1f0      	bne.n	80076aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69da      	ldr	r2, [r3, #28]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	431a      	orrs	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	019b      	lsls	r3, r3, #6
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	3b01      	subs	r3, #1
 80076e2:	041b      	lsls	r3, r3, #16
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ea:	061b      	lsls	r3, r3, #24
 80076ec:	4937      	ldr	r1, [pc, #220]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076f2:	4b37      	ldr	r3, [pc, #220]	; (80077d0 <HAL_RCC_OscConfig+0x4ec>)
 80076f4:	2201      	movs	r2, #1
 80076f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f8:	f7fd fe86 	bl	8005408 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007700:	f7fd fe82 	bl	8005408 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b02      	cmp	r3, #2
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e056      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007712:	4b2e      	ldr	r3, [pc, #184]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCC_OscConfig+0x41c>
 800771e:	e04e      	b.n	80077be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007720:	4b2b      	ldr	r3, [pc, #172]	; (80077d0 <HAL_RCC_OscConfig+0x4ec>)
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007726:	f7fd fe6f 	bl	8005408 <HAL_GetTick>
 800772a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800772c:	e008      	b.n	8007740 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800772e:	f7fd fe6b 	bl	8005408 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d901      	bls.n	8007740 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	e03f      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007740:	4b22      	ldr	r3, [pc, #136]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1f0      	bne.n	800772e <HAL_RCC_OscConfig+0x44a>
 800774c:	e037      	b.n	80077be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d101      	bne.n	800775a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e032      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800775a:	4b1c      	ldr	r3, [pc, #112]	; (80077cc <HAL_RCC_OscConfig+0x4e8>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d028      	beq.n	80077ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007772:	429a      	cmp	r2, r3
 8007774:	d121      	bne.n	80077ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007780:	429a      	cmp	r2, r3
 8007782:	d11a      	bne.n	80077ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800778a:	4013      	ands	r3, r2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007790:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007792:	4293      	cmp	r3, r2
 8007794:	d111      	bne.n	80077ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a0:	085b      	lsrs	r3, r3, #1
 80077a2:	3b01      	subs	r3, #1
 80077a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d107      	bne.n	80077ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d001      	beq.n	80077be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40007000 	.word	0x40007000
 80077cc:	40023800 	.word	0x40023800
 80077d0:	42470060 	.word	0x42470060

080077d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e0cc      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077e8:	4b68      	ldr	r3, [pc, #416]	; (800798c <HAL_RCC_ClockConfig+0x1b8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d90c      	bls.n	8007810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f6:	4b65      	ldr	r3, [pc, #404]	; (800798c <HAL_RCC_ClockConfig+0x1b8>)
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	b2d2      	uxtb	r2, r2
 80077fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fe:	4b63      	ldr	r3, [pc, #396]	; (800798c <HAL_RCC_ClockConfig+0x1b8>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	429a      	cmp	r2, r3
 800780a:	d001      	beq.n	8007810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e0b8      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0302 	and.w	r3, r3, #2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d020      	beq.n	800785e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d005      	beq.n	8007834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007828:	4b59      	ldr	r3, [pc, #356]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	4a58      	ldr	r2, [pc, #352]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 800782e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007840:	4b53      	ldr	r3, [pc, #332]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	4a52      	ldr	r2, [pc, #328]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 8007846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800784a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800784c:	4b50      	ldr	r3, [pc, #320]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	494d      	ldr	r1, [pc, #308]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 800785a:	4313      	orrs	r3, r2
 800785c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d044      	beq.n	80078f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	2b01      	cmp	r3, #1
 8007870:	d107      	bne.n	8007882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007872:	4b47      	ldr	r3, [pc, #284]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d119      	bne.n	80078b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e07f      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d003      	beq.n	8007892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800788e:	2b03      	cmp	r3, #3
 8007890:	d107      	bne.n	80078a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007892:	4b3f      	ldr	r3, [pc, #252]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d109      	bne.n	80078b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e06f      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078a2:	4b3b      	ldr	r3, [pc, #236]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e067      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078b2:	4b37      	ldr	r3, [pc, #220]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f023 0203 	bic.w	r2, r3, #3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	4934      	ldr	r1, [pc, #208]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078c4:	f7fd fda0 	bl	8005408 <HAL_GetTick>
 80078c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ca:	e00a      	b.n	80078e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078cc:	f7fd fd9c 	bl	8005408 <HAL_GetTick>
 80078d0:	4602      	mov	r2, r0
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1ad3      	subs	r3, r2, r3
 80078d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078da:	4293      	cmp	r3, r2
 80078dc:	d901      	bls.n	80078e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e04f      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e2:	4b2b      	ldr	r3, [pc, #172]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f003 020c 	and.w	r2, r3, #12
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d1eb      	bne.n	80078cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078f4:	4b25      	ldr	r3, [pc, #148]	; (800798c <HAL_RCC_ClockConfig+0x1b8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d20c      	bcs.n	800791c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007902:	4b22      	ldr	r3, [pc, #136]	; (800798c <HAL_RCC_ClockConfig+0x1b8>)
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800790a:	4b20      	ldr	r3, [pc, #128]	; (800798c <HAL_RCC_ClockConfig+0x1b8>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0307 	and.w	r3, r3, #7
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	d001      	beq.n	800791c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e032      	b.n	8007982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007928:	4b19      	ldr	r3, [pc, #100]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	4916      	ldr	r1, [pc, #88]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	4313      	orrs	r3, r2
 8007938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0308 	and.w	r3, r3, #8
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007946:	4b12      	ldr	r3, [pc, #72]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	490e      	ldr	r1, [pc, #56]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 8007956:	4313      	orrs	r3, r2
 8007958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800795a:	f000 f821 	bl	80079a0 <HAL_RCC_GetSysClockFreq>
 800795e:	4602      	mov	r2, r0
 8007960:	4b0b      	ldr	r3, [pc, #44]	; (8007990 <HAL_RCC_ClockConfig+0x1bc>)
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	091b      	lsrs	r3, r3, #4
 8007966:	f003 030f 	and.w	r3, r3, #15
 800796a:	490a      	ldr	r1, [pc, #40]	; (8007994 <HAL_RCC_ClockConfig+0x1c0>)
 800796c:	5ccb      	ldrb	r3, [r1, r3]
 800796e:	fa22 f303 	lsr.w	r3, r2, r3
 8007972:	4a09      	ldr	r2, [pc, #36]	; (8007998 <HAL_RCC_ClockConfig+0x1c4>)
 8007974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <HAL_RCC_ClockConfig+0x1c8>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4618      	mov	r0, r3
 800797c:	f7fd fd00 	bl	8005380 <HAL_InitTick>

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	40023c00 	.word	0x40023c00
 8007990:	40023800 	.word	0x40023800
 8007994:	0800ed60 	.word	0x0800ed60
 8007998:	20000000 	.word	0x20000000
 800799c:	20000004 	.word	0x20000004

080079a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	2300      	movs	r3, #0
 80079b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b8:	4b67      	ldr	r3, [pc, #412]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f003 030c 	and.w	r3, r3, #12
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d00d      	beq.n	80079e0 <HAL_RCC_GetSysClockFreq+0x40>
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	f200 80bd 	bhi.w	8007b44 <HAL_RCC_GetSysClockFreq+0x1a4>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <HAL_RCC_GetSysClockFreq+0x34>
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d003      	beq.n	80079da <HAL_RCC_GetSysClockFreq+0x3a>
 80079d2:	e0b7      	b.n	8007b44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079d4:	4b61      	ldr	r3, [pc, #388]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80079d6:	60bb      	str	r3, [r7, #8]
       break;
 80079d8:	e0b7      	b.n	8007b4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079da:	4b60      	ldr	r3, [pc, #384]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80079dc:	60bb      	str	r3, [r7, #8]
      break;
 80079de:	e0b4      	b.n	8007b4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079e0:	4b5d      	ldr	r3, [pc, #372]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079ea:	4b5b      	ldr	r3, [pc, #364]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d04d      	beq.n	8007a92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079f6:	4b58      	ldr	r3, [pc, #352]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	099b      	lsrs	r3, r3, #6
 80079fc:	461a      	mov	r2, r3
 80079fe:	f04f 0300 	mov.w	r3, #0
 8007a02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a06:	f04f 0100 	mov.w	r1, #0
 8007a0a:	ea02 0800 	and.w	r8, r2, r0
 8007a0e:	ea03 0901 	and.w	r9, r3, r1
 8007a12:	4640      	mov	r0, r8
 8007a14:	4649      	mov	r1, r9
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	014b      	lsls	r3, r1, #5
 8007a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a24:	0142      	lsls	r2, r0, #5
 8007a26:	4610      	mov	r0, r2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	ebb0 0008 	subs.w	r0, r0, r8
 8007a2e:	eb61 0109 	sbc.w	r1, r1, r9
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	f04f 0300 	mov.w	r3, #0
 8007a3a:	018b      	lsls	r3, r1, #6
 8007a3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a40:	0182      	lsls	r2, r0, #6
 8007a42:	1a12      	subs	r2, r2, r0
 8007a44:	eb63 0301 	sbc.w	r3, r3, r1
 8007a48:	f04f 0000 	mov.w	r0, #0
 8007a4c:	f04f 0100 	mov.w	r1, #0
 8007a50:	00d9      	lsls	r1, r3, #3
 8007a52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a56:	00d0      	lsls	r0, r2, #3
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	eb12 0208 	adds.w	r2, r2, r8
 8007a60:	eb43 0309 	adc.w	r3, r3, r9
 8007a64:	f04f 0000 	mov.w	r0, #0
 8007a68:	f04f 0100 	mov.w	r1, #0
 8007a6c:	0299      	lsls	r1, r3, #10
 8007a6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007a72:	0290      	lsls	r0, r2, #10
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	f7f9 f900 	bl	8000c88 <__aeabi_uldivmod>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e04a      	b.n	8007b28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a92:	4b31      	ldr	r3, [pc, #196]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	099b      	lsrs	r3, r3, #6
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007aa2:	f04f 0100 	mov.w	r1, #0
 8007aa6:	ea02 0400 	and.w	r4, r2, r0
 8007aaa:	ea03 0501 	and.w	r5, r3, r1
 8007aae:	4620      	mov	r0, r4
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	f04f 0200 	mov.w	r2, #0
 8007ab6:	f04f 0300 	mov.w	r3, #0
 8007aba:	014b      	lsls	r3, r1, #5
 8007abc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007ac0:	0142      	lsls	r2, r0, #5
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	1b00      	subs	r0, r0, r4
 8007ac8:	eb61 0105 	sbc.w	r1, r1, r5
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	018b      	lsls	r3, r1, #6
 8007ad6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007ada:	0182      	lsls	r2, r0, #6
 8007adc:	1a12      	subs	r2, r2, r0
 8007ade:	eb63 0301 	sbc.w	r3, r3, r1
 8007ae2:	f04f 0000 	mov.w	r0, #0
 8007ae6:	f04f 0100 	mov.w	r1, #0
 8007aea:	00d9      	lsls	r1, r3, #3
 8007aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007af0:	00d0      	lsls	r0, r2, #3
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	1912      	adds	r2, r2, r4
 8007af8:	eb45 0303 	adc.w	r3, r5, r3
 8007afc:	f04f 0000 	mov.w	r0, #0
 8007b00:	f04f 0100 	mov.w	r1, #0
 8007b04:	0299      	lsls	r1, r3, #10
 8007b06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007b0a:	0290      	lsls	r0, r2, #10
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4610      	mov	r0, r2
 8007b12:	4619      	mov	r1, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f04f 0300 	mov.w	r3, #0
 8007b1c:	f7f9 f8b4 	bl	8000c88 <__aeabi_uldivmod>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4613      	mov	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b28:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	0c1b      	lsrs	r3, r3, #16
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	3301      	adds	r3, #1
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b40:	60bb      	str	r3, [r7, #8]
      break;
 8007b42:	e002      	b.n	8007b4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b44:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007b46:	60bb      	str	r3, [r7, #8]
      break;
 8007b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007b56:	bf00      	nop
 8007b58:	40023800 	.word	0x40023800
 8007b5c:	00f42400 	.word	0x00f42400

08007b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b64:	4b03      	ldr	r3, [pc, #12]	; (8007b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b66:	681b      	ldr	r3, [r3, #0]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	20000000 	.word	0x20000000

08007b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b7c:	f7ff fff0 	bl	8007b60 <HAL_RCC_GetHCLKFreq>
 8007b80:	4602      	mov	r2, r0
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	0a9b      	lsrs	r3, r3, #10
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	4903      	ldr	r1, [pc, #12]	; (8007b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b8e:	5ccb      	ldrb	r3, [r1, r3]
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	0800ed70 	.word	0x0800ed70

08007ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ba4:	f7ff ffdc 	bl	8007b60 <HAL_RCC_GetHCLKFreq>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	0b5b      	lsrs	r3, r3, #13
 8007bb0:	f003 0307 	and.w	r3, r3, #7
 8007bb4:	4903      	ldr	r1, [pc, #12]	; (8007bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bb6:	5ccb      	ldrb	r3, [r1, r3]
 8007bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	40023800 	.word	0x40023800
 8007bc4:	0800ed70 	.word	0x0800ed70

08007bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e07b      	b.n	8007cd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d108      	bne.n	8007bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bea:	d009      	beq.n	8007c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	61da      	str	r2, [r3, #28]
 8007bf2:	e005      	b.n	8007c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fc f9f4 	bl	8004008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c70:	431a      	orrs	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c84:	ea42 0103 	orr.w	r1, r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	f003 0104 	and.w	r1, r3, #4
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca6:	f003 0210 	and.w	r2, r3, #16
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69da      	ldr	r2, [r3, #28]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b088      	sub	sp, #32
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	60f8      	str	r0, [r7, #12]
 8007ce2:	60b9      	str	r1, [r7, #8]
 8007ce4:	603b      	str	r3, [r7, #0]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_SPI_Transmit+0x22>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e126      	b.n	8007f4a <HAL_SPI_Transmit+0x270>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d04:	f7fd fb80 	bl	8005408 <HAL_GetTick>
 8007d08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d002      	beq.n	8007d20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d1e:	e10b      	b.n	8007f38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <HAL_SPI_Transmit+0x52>
 8007d26:	88fb      	ldrh	r3, [r7, #6]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d102      	bne.n	8007d32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d30:	e102      	b.n	8007f38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2203      	movs	r2, #3
 8007d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	88fa      	ldrh	r2, [r7, #6]
 8007d4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d78:	d10f      	bne.n	8007d9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d007      	beq.n	8007db8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc0:	d14b      	bne.n	8007e5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_SPI_Transmit+0xf6>
 8007dca:	8afb      	ldrh	r3, [r7, #22]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d13e      	bne.n	8007e4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd4:	881a      	ldrh	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de0:	1c9a      	adds	r2, r3, #2
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007df4:	e02b      	b.n	8007e4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d112      	bne.n	8007e2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	881a      	ldrh	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	1c9a      	adds	r2, r3, #2
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	3b01      	subs	r3, #1
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e28:	e011      	b.n	8007e4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e2a:	f7fd faed 	bl	8005408 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d803      	bhi.n	8007e42 <HAL_SPI_Transmit+0x168>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e40:	d102      	bne.n	8007e48 <HAL_SPI_Transmit+0x16e>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d102      	bne.n	8007e4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e4c:	e074      	b.n	8007f38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1ce      	bne.n	8007df6 <HAL_SPI_Transmit+0x11c>
 8007e58:	e04c      	b.n	8007ef4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_SPI_Transmit+0x18e>
 8007e62:	8afb      	ldrh	r3, [r7, #22]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d140      	bne.n	8007eea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	330c      	adds	r3, #12
 8007e72:	7812      	ldrb	r2, [r2, #0]
 8007e74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007e8e:	e02c      	b.n	8007eea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d113      	bne.n	8007ec6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	7812      	ldrb	r2, [r2, #0]
 8007eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ec4:	e011      	b.n	8007eea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ec6:	f7fd fa9f 	bl	8005408 <HAL_GetTick>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d803      	bhi.n	8007ede <HAL_SPI_Transmit+0x204>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007edc:	d102      	bne.n	8007ee4 <HAL_SPI_Transmit+0x20a>
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d102      	bne.n	8007eea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ee8:	e026      	b.n	8007f38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1cd      	bne.n	8007e90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fbcb 	bl	8008694 <SPI_EndRxTxTransaction>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2220      	movs	r2, #32
 8007f08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10a      	bne.n	8007f28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f12:	2300      	movs	r3, #0
 8007f14:	613b      	str	r3, [r7, #16]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	613b      	str	r3, [r7, #16]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	613b      	str	r3, [r7, #16]
 8007f26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	77fb      	strb	r3, [r7, #31]
 8007f34:	e000      	b.n	8007f38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007f36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3720      	adds	r7, #32
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b088      	sub	sp, #32
 8007f56:	af02      	add	r7, sp, #8
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	603b      	str	r3, [r7, #0]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f6e:	d112      	bne.n	8007f96 <HAL_SPI_Receive+0x44>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10e      	bne.n	8007f96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2204      	movs	r2, #4
 8007f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f80:	88fa      	ldrh	r2, [r7, #6]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	4613      	mov	r3, r2
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f8f1 	bl	8008174 <HAL_SPI_TransmitReceive>
 8007f92:	4603      	mov	r3, r0
 8007f94:	e0ea      	b.n	800816c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_SPI_Receive+0x52>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e0e3      	b.n	800816c <HAL_SPI_Receive+0x21a>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fac:	f7fd fa2c 	bl	8005408 <HAL_GetTick>
 8007fb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d002      	beq.n	8007fc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fc2:	e0ca      	b.n	800815a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <HAL_SPI_Receive+0x7e>
 8007fca:	88fb      	ldrh	r3, [r7, #6]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fd4:	e0c1      	b.n	800815a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2204      	movs	r2, #4
 8007fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	88fa      	ldrh	r2, [r7, #6]
 8007fee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	88fa      	ldrh	r2, [r7, #6]
 8007ff4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800801c:	d10f      	bne.n	800803e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800802c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800803c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008048:	2b40      	cmp	r3, #64	; 0x40
 800804a:	d007      	beq.n	800805c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800805a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d162      	bne.n	800812a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008064:	e02e      	b.n	80080c4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b01      	cmp	r3, #1
 8008072:	d115      	bne.n	80080a0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f103 020c 	add.w	r2, r3, #12
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	7812      	ldrb	r2, [r2, #0]
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008094:	b29b      	uxth	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800809e:	e011      	b.n	80080c4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080a0:	f7fd f9b2 	bl	8005408 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d803      	bhi.n	80080b8 <HAL_SPI_Receive+0x166>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d102      	bne.n	80080be <HAL_SPI_Receive+0x16c>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80080c2:	e04a      	b.n	800815a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1cb      	bne.n	8008066 <HAL_SPI_Receive+0x114>
 80080ce:	e031      	b.n	8008134 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d113      	bne.n	8008106 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68da      	ldr	r2, [r3, #12]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	b292      	uxth	r2, r2
 80080ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f0:	1c9a      	adds	r2, r3, #2
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29a      	uxth	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008104:	e011      	b.n	800812a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008106:	f7fd f97f 	bl	8005408 <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d803      	bhi.n	800811e <HAL_SPI_Receive+0x1cc>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811c:	d102      	bne.n	8008124 <HAL_SPI_Receive+0x1d2>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008128:	e017      	b.n	800815a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800812e:	b29b      	uxth	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1cd      	bne.n	80080d0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 fa45 	bl	80085c8 <SPI_EndRxTransaction>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2220      	movs	r2, #32
 8008148:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	75fb      	strb	r3, [r7, #23]
 8008156:	e000      	b.n	800815a <HAL_SPI_Receive+0x208>
  }

error :
 8008158:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800816a:	7dfb      	ldrb	r3, [r7, #23]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b08c      	sub	sp, #48	; 0x30
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
 8008180:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008182:	2301      	movs	r3, #1
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008192:	2b01      	cmp	r3, #1
 8008194:	d101      	bne.n	800819a <HAL_SPI_TransmitReceive+0x26>
 8008196:	2302      	movs	r3, #2
 8008198:	e18a      	b.n	80084b0 <HAL_SPI_TransmitReceive+0x33c>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081a2:	f7fd f931 	bl	8005408 <HAL_GetTick>
 80081a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081b8:	887b      	ldrh	r3, [r7, #2]
 80081ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d00f      	beq.n	80081e4 <HAL_SPI_TransmitReceive+0x70>
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ca:	d107      	bne.n	80081dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d103      	bne.n	80081dc <HAL_SPI_TransmitReceive+0x68>
 80081d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d003      	beq.n	80081e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80081dc:	2302      	movs	r3, #2
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081e2:	e15b      	b.n	800849c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <HAL_SPI_TransmitReceive+0x82>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <HAL_SPI_TransmitReceive+0x82>
 80081f0:	887b      	ldrh	r3, [r7, #2]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081fc:	e14e      	b.n	800849c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b04      	cmp	r3, #4
 8008208:	d003      	beq.n	8008212 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2205      	movs	r2, #5
 800820e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	887a      	ldrh	r2, [r7, #2]
 8008222:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	887a      	ldrh	r2, [r7, #2]
 8008228:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	887a      	ldrh	r2, [r7, #2]
 8008234:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	887a      	ldrh	r2, [r7, #2]
 800823a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008252:	2b40      	cmp	r3, #64	; 0x40
 8008254:	d007      	beq.n	8008266 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008264:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800826e:	d178      	bne.n	8008362 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <HAL_SPI_TransmitReceive+0x10a>
 8008278:	8b7b      	ldrh	r3, [r7, #26]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d166      	bne.n	800834c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008282:	881a      	ldrh	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828e:	1c9a      	adds	r2, r3, #2
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008298:	b29b      	uxth	r3, r3
 800829a:	3b01      	subs	r3, #1
 800829c:	b29a      	uxth	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082a2:	e053      	b.n	800834c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d11b      	bne.n	80082ea <HAL_SPI_TransmitReceive+0x176>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d016      	beq.n	80082ea <HAL_SPI_TransmitReceive+0x176>
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d113      	bne.n	80082ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	881a      	ldrh	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	1c9a      	adds	r2, r3, #2
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082dc:	b29b      	uxth	r3, r3
 80082de:	3b01      	subs	r3, #1
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082e6:	2300      	movs	r3, #0
 80082e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d119      	bne.n	800832c <HAL_SPI_TransmitReceive+0x1b8>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d014      	beq.n	800832c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830c:	b292      	uxth	r2, r2
 800830e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	1c9a      	adds	r2, r3, #2
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008328:	2301      	movs	r3, #1
 800832a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800832c:	f7fd f86c 	bl	8005408 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008338:	429a      	cmp	r2, r3
 800833a:	d807      	bhi.n	800834c <HAL_SPI_TransmitReceive+0x1d8>
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008342:	d003      	beq.n	800834c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800834a:	e0a7      	b.n	800849c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008350:	b29b      	uxth	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1a6      	bne.n	80082a4 <HAL_SPI_TransmitReceive+0x130>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800835a:	b29b      	uxth	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1a1      	bne.n	80082a4 <HAL_SPI_TransmitReceive+0x130>
 8008360:	e07c      	b.n	800845c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <HAL_SPI_TransmitReceive+0x1fc>
 800836a:	8b7b      	ldrh	r3, [r7, #26]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d16b      	bne.n	8008448 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	330c      	adds	r3, #12
 800837a:	7812      	ldrb	r2, [r2, #0]
 800837c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800838c:	b29b      	uxth	r3, r3
 800838e:	3b01      	subs	r3, #1
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008396:	e057      	b.n	8008448 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d11c      	bne.n	80083e0 <HAL_SPI_TransmitReceive+0x26c>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d017      	beq.n	80083e0 <HAL_SPI_TransmitReceive+0x26c>
 80083b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d114      	bne.n	80083e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	330c      	adds	r3, #12
 80083c0:	7812      	ldrb	r2, [r2, #0]
 80083c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d119      	bne.n	8008422 <HAL_SPI_TransmitReceive+0x2ae>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d014      	beq.n	8008422 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008414:	b29b      	uxth	r3, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	b29a      	uxth	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800841e:	2301      	movs	r3, #1
 8008420:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008422:	f7fc fff1 	bl	8005408 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800842e:	429a      	cmp	r2, r3
 8008430:	d803      	bhi.n	800843a <HAL_SPI_TransmitReceive+0x2c6>
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008438:	d102      	bne.n	8008440 <HAL_SPI_TransmitReceive+0x2cc>
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008446:	e029      	b.n	800849c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800844c:	b29b      	uxth	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1a2      	bne.n	8008398 <HAL_SPI_TransmitReceive+0x224>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d19d      	bne.n	8008398 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800845c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800845e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 f917 	bl	8008694 <SPI_EndRxTxTransaction>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d006      	beq.n	800847a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2220      	movs	r2, #32
 8008476:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008478:	e010      	b.n	800849c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10b      	bne.n	800849a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008482:	2300      	movs	r3, #0
 8008484:	617b      	str	r3, [r7, #20]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	617b      	str	r3, [r7, #20]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	e000      	b.n	800849c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800849a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3730      	adds	r7, #48	; 0x30
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	603b      	str	r3, [r7, #0]
 80084c4:	4613      	mov	r3, r2
 80084c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80084c8:	f7fc ff9e 	bl	8005408 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80084d8:	f7fc ff96 	bl	8005408 <HAL_GetTick>
 80084dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80084de:	4b39      	ldr	r3, [pc, #228]	; (80085c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	015b      	lsls	r3, r3, #5
 80084e4:	0d1b      	lsrs	r3, r3, #20
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	fb02 f303 	mul.w	r3, r2, r3
 80084ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084ee:	e054      	b.n	800859a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f6:	d050      	beq.n	800859a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084f8:	f7fc ff86 	bl	8005408 <HAL_GetTick>
 80084fc:	4602      	mov	r2, r0
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	429a      	cmp	r2, r3
 8008506:	d902      	bls.n	800850e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d13d      	bne.n	800858a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800851c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008526:	d111      	bne.n	800854c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008530:	d004      	beq.n	800853c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800853a:	d107      	bne.n	800854c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800854a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008554:	d10f      	bne.n	8008576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2201      	movs	r2, #1
 800857a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e017      	b.n	80085ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	3b01      	subs	r3, #1
 8008598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4013      	ands	r3, r2
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	bf0c      	ite	eq
 80085aa:	2301      	moveq	r3, #1
 80085ac:	2300      	movne	r3, #0
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d19b      	bne.n	80084f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3720      	adds	r7, #32
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000000 	.word	0x20000000

080085c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085dc:	d111      	bne.n	8008602 <SPI_EndRxTransaction+0x3a>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e6:	d004      	beq.n	80085f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085f0:	d107      	bne.n	8008602 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008600:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800860a:	d12a      	bne.n	8008662 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008614:	d012      	beq.n	800863c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2200      	movs	r2, #0
 800861e:	2180      	movs	r1, #128	; 0x80
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f7ff ff49 	bl	80084b8 <SPI_WaitFlagStateUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d02d      	beq.n	8008688 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008630:	f043 0220 	orr.w	r2, r3, #32
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e026      	b.n	800868a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	2200      	movs	r2, #0
 8008644:	2101      	movs	r1, #1
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff ff36 	bl	80084b8 <SPI_WaitFlagStateUntilTimeout>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01a      	beq.n	8008688 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008656:	f043 0220 	orr.w	r2, r3, #32
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e013      	b.n	800868a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2200      	movs	r2, #0
 800866a:	2101      	movs	r1, #1
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7ff ff23 	bl	80084b8 <SPI_WaitFlagStateUntilTimeout>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d007      	beq.n	8008688 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800867c:	f043 0220 	orr.w	r2, r3, #32
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e000      	b.n	800868a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af02      	add	r7, sp, #8
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086a0:	4b1b      	ldr	r3, [pc, #108]	; (8008710 <SPI_EndRxTxTransaction+0x7c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1b      	ldr	r2, [pc, #108]	; (8008714 <SPI_EndRxTxTransaction+0x80>)
 80086a6:	fba2 2303 	umull	r2, r3, r2, r3
 80086aa:	0d5b      	lsrs	r3, r3, #21
 80086ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086b0:	fb02 f303 	mul.w	r3, r2, r3
 80086b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086be:	d112      	bne.n	80086e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	2180      	movs	r1, #128	; 0x80
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7ff fef4 	bl	80084b8 <SPI_WaitFlagStateUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d016      	beq.n	8008704 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086da:	f043 0220 	orr.w	r2, r3, #32
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e00f      	b.n	8008706 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fc:	2b80      	cmp	r3, #128	; 0x80
 80086fe:	d0f2      	beq.n	80086e6 <SPI_EndRxTxTransaction+0x52>
 8008700:	e000      	b.n	8008704 <SPI_EndRxTxTransaction+0x70>
        break;
 8008702:	bf00      	nop
  }

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3718      	adds	r7, #24
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	20000000 	.word	0x20000000
 8008714:	165e9f81 	.word	0x165e9f81

08008718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e041      	b.n	80087ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d106      	bne.n	8008744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7fb fd5a 	bl	80041f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3304      	adds	r3, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f000 fe12 	bl	8009380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d001      	beq.n	80087d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e04e      	b.n	800886e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0201 	orr.w	r2, r2, #1
 80087e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a23      	ldr	r2, [pc, #140]	; (800887c <HAL_TIM_Base_Start_IT+0xc4>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d022      	beq.n	8008838 <HAL_TIM_Base_Start_IT+0x80>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087fa:	d01d      	beq.n	8008838 <HAL_TIM_Base_Start_IT+0x80>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a1f      	ldr	r2, [pc, #124]	; (8008880 <HAL_TIM_Base_Start_IT+0xc8>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d018      	beq.n	8008838 <HAL_TIM_Base_Start_IT+0x80>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a1e      	ldr	r2, [pc, #120]	; (8008884 <HAL_TIM_Base_Start_IT+0xcc>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d013      	beq.n	8008838 <HAL_TIM_Base_Start_IT+0x80>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1c      	ldr	r2, [pc, #112]	; (8008888 <HAL_TIM_Base_Start_IT+0xd0>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d00e      	beq.n	8008838 <HAL_TIM_Base_Start_IT+0x80>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a1b      	ldr	r2, [pc, #108]	; (800888c <HAL_TIM_Base_Start_IT+0xd4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d009      	beq.n	8008838 <HAL_TIM_Base_Start_IT+0x80>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a19      	ldr	r2, [pc, #100]	; (8008890 <HAL_TIM_Base_Start_IT+0xd8>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d004      	beq.n	8008838 <HAL_TIM_Base_Start_IT+0x80>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a18      	ldr	r2, [pc, #96]	; (8008894 <HAL_TIM_Base_Start_IT+0xdc>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d111      	bne.n	800885c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f003 0307 	and.w	r3, r3, #7
 8008842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2b06      	cmp	r3, #6
 8008848:	d010      	beq.n	800886c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f042 0201 	orr.w	r2, r2, #1
 8008858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800885a:	e007      	b.n	800886c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0201 	orr.w	r2, r2, #1
 800886a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	40010000 	.word	0x40010000
 8008880:	40000400 	.word	0x40000400
 8008884:	40000800 	.word	0x40000800
 8008888:	40000c00 	.word	0x40000c00
 800888c:	40010400 	.word	0x40010400
 8008890:	40014000 	.word	0x40014000
 8008894:	40001800 	.word	0x40001800

08008898 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f022 0201 	bic.w	r2, r2, #1
 80088ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6a1a      	ldr	r2, [r3, #32]
 80088b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80088ba:	4013      	ands	r3, r2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10f      	bne.n	80088e0 <HAL_TIM_Base_Stop_IT+0x48>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6a1a      	ldr	r2, [r3, #32]
 80088c6:	f240 4344 	movw	r3, #1092	; 0x444
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d107      	bne.n	80088e0 <HAL_TIM_Base_Stop_IT+0x48>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0201 	bic.w	r2, r2, #1
 80088de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d101      	bne.n	8008908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e041      	b.n	800898c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d106      	bne.n	8008922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f7fb fc49 	bl	80041b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2202      	movs	r2, #2
 8008926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3304      	adds	r3, #4
 8008932:	4619      	mov	r1, r3
 8008934:	4610      	mov	r0, r2
 8008936:	f000 fd23 	bl	8009380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d109      	bne.n	80089b8 <HAL_TIM_PWM_Start+0x24>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	bf14      	ite	ne
 80089b0:	2301      	movne	r3, #1
 80089b2:	2300      	moveq	r3, #0
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	e022      	b.n	80089fe <HAL_TIM_PWM_Start+0x6a>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d109      	bne.n	80089d2 <HAL_TIM_PWM_Start+0x3e>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	bf14      	ite	ne
 80089ca:	2301      	movne	r3, #1
 80089cc:	2300      	moveq	r3, #0
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	e015      	b.n	80089fe <HAL_TIM_PWM_Start+0x6a>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b08      	cmp	r3, #8
 80089d6:	d109      	bne.n	80089ec <HAL_TIM_PWM_Start+0x58>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	e008      	b.n	80089fe <HAL_TIM_PWM_Start+0x6a>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	bf14      	ite	ne
 80089f8:	2301      	movne	r3, #1
 80089fa:	2300      	moveq	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e07c      	b.n	8008b00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d104      	bne.n	8008a16 <HAL_TIM_PWM_Start+0x82>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a14:	e013      	b.n	8008a3e <HAL_TIM_PWM_Start+0xaa>
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d104      	bne.n	8008a26 <HAL_TIM_PWM_Start+0x92>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a24:	e00b      	b.n	8008a3e <HAL_TIM_PWM_Start+0xaa>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d104      	bne.n	8008a36 <HAL_TIM_PWM_Start+0xa2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a34:	e003      	b.n	8008a3e <HAL_TIM_PWM_Start+0xaa>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2202      	movs	r2, #2
 8008a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2201      	movs	r2, #1
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 feea 	bl	8009820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a2d      	ldr	r2, [pc, #180]	; (8008b08 <HAL_TIM_PWM_Start+0x174>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d004      	beq.n	8008a60 <HAL_TIM_PWM_Start+0xcc>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a2c      	ldr	r2, [pc, #176]	; (8008b0c <HAL_TIM_PWM_Start+0x178>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d101      	bne.n	8008a64 <HAL_TIM_PWM_Start+0xd0>
 8008a60:	2301      	movs	r3, #1
 8008a62:	e000      	b.n	8008a66 <HAL_TIM_PWM_Start+0xd2>
 8008a64:	2300      	movs	r3, #0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a22      	ldr	r2, [pc, #136]	; (8008b08 <HAL_TIM_PWM_Start+0x174>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d022      	beq.n	8008aca <HAL_TIM_PWM_Start+0x136>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8c:	d01d      	beq.n	8008aca <HAL_TIM_PWM_Start+0x136>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a1f      	ldr	r2, [pc, #124]	; (8008b10 <HAL_TIM_PWM_Start+0x17c>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d018      	beq.n	8008aca <HAL_TIM_PWM_Start+0x136>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a1d      	ldr	r2, [pc, #116]	; (8008b14 <HAL_TIM_PWM_Start+0x180>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d013      	beq.n	8008aca <HAL_TIM_PWM_Start+0x136>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a1c      	ldr	r2, [pc, #112]	; (8008b18 <HAL_TIM_PWM_Start+0x184>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00e      	beq.n	8008aca <HAL_TIM_PWM_Start+0x136>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a16      	ldr	r2, [pc, #88]	; (8008b0c <HAL_TIM_PWM_Start+0x178>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d009      	beq.n	8008aca <HAL_TIM_PWM_Start+0x136>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a18      	ldr	r2, [pc, #96]	; (8008b1c <HAL_TIM_PWM_Start+0x188>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d004      	beq.n	8008aca <HAL_TIM_PWM_Start+0x136>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a16      	ldr	r2, [pc, #88]	; (8008b20 <HAL_TIM_PWM_Start+0x18c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d111      	bne.n	8008aee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f003 0307 	and.w	r3, r3, #7
 8008ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b06      	cmp	r3, #6
 8008ada:	d010      	beq.n	8008afe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f042 0201 	orr.w	r2, r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aec:	e007      	b.n	8008afe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f042 0201 	orr.w	r2, r2, #1
 8008afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	40010000 	.word	0x40010000
 8008b0c:	40010400 	.word	0x40010400
 8008b10:	40000400 	.word	0x40000400
 8008b14:	40000800 	.word	0x40000800
 8008b18:	40000c00 	.word	0x40000c00
 8008b1c:	40014000 	.word	0x40014000
 8008b20:	40001800 	.word	0x40001800

08008b24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2200      	movs	r2, #0
 8008b34:	6839      	ldr	r1, [r7, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fe72 	bl	8009820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a2e      	ldr	r2, [pc, #184]	; (8008bfc <HAL_TIM_PWM_Stop+0xd8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d004      	beq.n	8008b50 <HAL_TIM_PWM_Stop+0x2c>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a2d      	ldr	r2, [pc, #180]	; (8008c00 <HAL_TIM_PWM_Stop+0xdc>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d101      	bne.n	8008b54 <HAL_TIM_PWM_Stop+0x30>
 8008b50:	2301      	movs	r3, #1
 8008b52:	e000      	b.n	8008b56 <HAL_TIM_PWM_Stop+0x32>
 8008b54:	2300      	movs	r3, #0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d017      	beq.n	8008b8a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6a1a      	ldr	r2, [r3, #32]
 8008b60:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b64:	4013      	ands	r3, r2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10f      	bne.n	8008b8a <HAL_TIM_PWM_Stop+0x66>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6a1a      	ldr	r2, [r3, #32]
 8008b70:	f240 4344 	movw	r3, #1092	; 0x444
 8008b74:	4013      	ands	r3, r2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d107      	bne.n	8008b8a <HAL_TIM_PWM_Stop+0x66>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6a1a      	ldr	r2, [r3, #32]
 8008b90:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b94:	4013      	ands	r3, r2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10f      	bne.n	8008bba <HAL_TIM_PWM_Stop+0x96>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6a1a      	ldr	r2, [r3, #32]
 8008ba0:	f240 4344 	movw	r3, #1092	; 0x444
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d107      	bne.n	8008bba <HAL_TIM_PWM_Stop+0x96>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0201 	bic.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d104      	bne.n	8008bca <HAL_TIM_PWM_Stop+0xa6>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bc8:	e013      	b.n	8008bf2 <HAL_TIM_PWM_Stop+0xce>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d104      	bne.n	8008bda <HAL_TIM_PWM_Stop+0xb6>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bd8:	e00b      	b.n	8008bf2 <HAL_TIM_PWM_Stop+0xce>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d104      	bne.n	8008bea <HAL_TIM_PWM_Stop+0xc6>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008be8:	e003      	b.n	8008bf2 <HAL_TIM_PWM_Stop+0xce>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	40010400 	.word	0x40010400

08008c04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e097      	b.n	8008d48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d106      	bne.n	8008c32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7fb fa33 	bl	8004098 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2202      	movs	r2, #2
 8008c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	6812      	ldr	r2, [r2, #0]
 8008c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c48:	f023 0307 	bic.w	r3, r3, #7
 8008c4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3304      	adds	r3, #4
 8008c56:	4619      	mov	r1, r3
 8008c58:	4610      	mov	r0, r2
 8008c5a:	f000 fb91 	bl	8009380 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c86:	f023 0303 	bic.w	r3, r3, #3
 8008c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	689a      	ldr	r2, [r3, #8]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	4313      	orrs	r3, r2
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008ca4:	f023 030c 	bic.w	r3, r3, #12
 8008ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68da      	ldr	r2, [r3, #12]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	021b      	lsls	r3, r3, #8
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	011a      	lsls	r2, r3, #4
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	031b      	lsls	r3, r3, #12
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008ce2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008cea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	011b      	lsls	r3, r3, #4
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d110      	bne.n	8008da2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d102      	bne.n	8008d8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008d86:	7b7b      	ldrb	r3, [r7, #13]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d001      	beq.n	8008d90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e069      	b.n	8008e64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008da0:	e031      	b.n	8008e06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d110      	bne.n	8008dca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d102      	bne.n	8008db4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008dae:	7b3b      	ldrb	r3, [r7, #12]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d001      	beq.n	8008db8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e055      	b.n	8008e64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008dc8:	e01d      	b.n	8008e06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d108      	bne.n	8008de2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d105      	bne.n	8008de2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dd6:	7b7b      	ldrb	r3, [r7, #13]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d102      	bne.n	8008de2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ddc:	7b3b      	ldrb	r3, [r7, #12]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d001      	beq.n	8008de6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e03e      	b.n	8008e64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2202      	movs	r2, #2
 8008dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2202      	movs	r2, #2
 8008df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2202      	movs	r2, #2
 8008dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <HAL_TIM_Encoder_Start+0xc4>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d008      	beq.n	8008e24 <HAL_TIM_Encoder_Start+0xd4>
 8008e12:	e00f      	b.n	8008e34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fcff 	bl	8009820 <TIM_CCxChannelCmd>
      break;
 8008e22:	e016      	b.n	8008e52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	2104      	movs	r1, #4
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 fcf7 	bl	8009820 <TIM_CCxChannelCmd>
      break;
 8008e32:	e00e      	b.n	8008e52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fcef 	bl	8009820 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2201      	movs	r2, #1
 8008e48:	2104      	movs	r1, #4
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 fce8 	bl	8009820 <TIM_CCxChannelCmd>
      break;
 8008e50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f042 0201 	orr.w	r2, r2, #1
 8008e60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <HAL_TIM_Encoder_Stop+0x18>
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	d008      	beq.n	8008e94 <HAL_TIM_Encoder_Stop+0x28>
 8008e82:	e00f      	b.n	8008ea4 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f000 fcc7 	bl	8009820 <TIM_CCxChannelCmd>
      break;
 8008e92:	e016      	b.n	8008ec2 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	2104      	movs	r1, #4
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f000 fcbf 	bl	8009820 <TIM_CCxChannelCmd>
      break;
 8008ea2:	e00e      	b.n	8008ec2 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2100      	movs	r1, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 fcb7 	bl	8009820 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2104      	movs	r1, #4
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 fcb0 	bl	8009820 <TIM_CCxChannelCmd>
      break;
 8008ec0:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6a1a      	ldr	r2, [r3, #32]
 8008ec8:	f241 1311 	movw	r3, #4369	; 0x1111
 8008ecc:	4013      	ands	r3, r2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10f      	bne.n	8008ef2 <HAL_TIM_Encoder_Stop+0x86>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6a1a      	ldr	r2, [r3, #32]
 8008ed8:	f240 4344 	movw	r3, #1092	; 0x444
 8008edc:	4013      	ands	r3, r2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d107      	bne.n	8008ef2 <HAL_TIM_Encoder_Stop+0x86>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 0201 	bic.w	r2, r2, #1
 8008ef0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <HAL_TIM_Encoder_Stop+0x92>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d138      	bne.n	8008f70 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d104      	bne.n	8008f0e <HAL_TIM_Encoder_Stop+0xa2>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f0c:	e013      	b.n	8008f36 <HAL_TIM_Encoder_Stop+0xca>
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b04      	cmp	r3, #4
 8008f12:	d104      	bne.n	8008f1e <HAL_TIM_Encoder_Stop+0xb2>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f1c:	e00b      	b.n	8008f36 <HAL_TIM_Encoder_Stop+0xca>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d104      	bne.n	8008f2e <HAL_TIM_Encoder_Stop+0xc2>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f2c:	e003      	b.n	8008f36 <HAL_TIM_Encoder_Stop+0xca>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d104      	bne.n	8008f46 <HAL_TIM_Encoder_Stop+0xda>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f44:	e024      	b.n	8008f90 <HAL_TIM_Encoder_Stop+0x124>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d104      	bne.n	8008f56 <HAL_TIM_Encoder_Stop+0xea>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f54:	e01c      	b.n	8008f90 <HAL_TIM_Encoder_Stop+0x124>
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b08      	cmp	r3, #8
 8008f5a:	d104      	bne.n	8008f66 <HAL_TIM_Encoder_Stop+0xfa>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f64:	e014      	b.n	8008f90 <HAL_TIM_Encoder_Stop+0x124>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f6e:	e00f      	b.n	8008f90 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d122      	bne.n	8008ff6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	f003 0302 	and.w	r3, r3, #2
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d11b      	bne.n	8008ff6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f06f 0202 	mvn.w	r2, #2
 8008fc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	f003 0303 	and.w	r3, r3, #3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f9b1 	bl	8009344 <HAL_TIM_IC_CaptureCallback>
 8008fe2:	e005      	b.n	8008ff0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f9a3 	bl	8009330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f9b4 	bl	8009358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b04      	cmp	r3, #4
 8009002:	d122      	bne.n	800904a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	f003 0304 	and.w	r3, r3, #4
 800900e:	2b04      	cmp	r3, #4
 8009010:	d11b      	bne.n	800904a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f06f 0204 	mvn.w	r2, #4
 800901a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f987 	bl	8009344 <HAL_TIM_IC_CaptureCallback>
 8009036:	e005      	b.n	8009044 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f979 	bl	8009330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f98a 	bl	8009358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	f003 0308 	and.w	r3, r3, #8
 8009054:	2b08      	cmp	r3, #8
 8009056:	d122      	bne.n	800909e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f003 0308 	and.w	r3, r3, #8
 8009062:	2b08      	cmp	r3, #8
 8009064:	d11b      	bne.n	800909e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f06f 0208 	mvn.w	r2, #8
 800906e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2204      	movs	r2, #4
 8009074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	f003 0303 	and.w	r3, r3, #3
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f95d 	bl	8009344 <HAL_TIM_IC_CaptureCallback>
 800908a:	e005      	b.n	8009098 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f94f 	bl	8009330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f960 	bl	8009358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f003 0310 	and.w	r3, r3, #16
 80090a8:	2b10      	cmp	r3, #16
 80090aa:	d122      	bne.n	80090f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f003 0310 	and.w	r3, r3, #16
 80090b6:	2b10      	cmp	r3, #16
 80090b8:	d11b      	bne.n	80090f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f06f 0210 	mvn.w	r2, #16
 80090c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2208      	movs	r2, #8
 80090c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f933 	bl	8009344 <HAL_TIM_IC_CaptureCallback>
 80090de:	e005      	b.n	80090ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f925 	bl	8009330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f936 	bl	8009358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d10e      	bne.n	800911e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b01      	cmp	r3, #1
 800910c:	d107      	bne.n	800911e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f06f 0201 	mvn.w	r2, #1
 8009116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7f9 fc0b 	bl	8002934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009128:	2b80      	cmp	r3, #128	; 0x80
 800912a:	d10e      	bne.n	800914a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009136:	2b80      	cmp	r3, #128	; 0x80
 8009138:	d107      	bne.n	800914a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fc17 	bl	8009978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009154:	2b40      	cmp	r3, #64	; 0x40
 8009156:	d10e      	bne.n	8009176 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009162:	2b40      	cmp	r3, #64	; 0x40
 8009164:	d107      	bne.n	8009176 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800916e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f8fb 	bl	800936c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	f003 0320 	and.w	r3, r3, #32
 8009180:	2b20      	cmp	r3, #32
 8009182:	d10e      	bne.n	80091a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f003 0320 	and.w	r3, r3, #32
 800918e:	2b20      	cmp	r3, #32
 8009190:	d107      	bne.n	80091a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f06f 0220 	mvn.w	r2, #32
 800919a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fbe1 	bl	8009964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e0ae      	b.n	8009328 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b0c      	cmp	r3, #12
 80091d6:	f200 809f 	bhi.w	8009318 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80091da:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e0:	08009215 	.word	0x08009215
 80091e4:	08009319 	.word	0x08009319
 80091e8:	08009319 	.word	0x08009319
 80091ec:	08009319 	.word	0x08009319
 80091f0:	08009255 	.word	0x08009255
 80091f4:	08009319 	.word	0x08009319
 80091f8:	08009319 	.word	0x08009319
 80091fc:	08009319 	.word	0x08009319
 8009200:	08009297 	.word	0x08009297
 8009204:	08009319 	.word	0x08009319
 8009208:	08009319 	.word	0x08009319
 800920c:	08009319 	.word	0x08009319
 8009210:	080092d7 	.word	0x080092d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68b9      	ldr	r1, [r7, #8]
 800921a:	4618      	mov	r0, r3
 800921c:	f000 f950 	bl	80094c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	699a      	ldr	r2, [r3, #24]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0208 	orr.w	r2, r2, #8
 800922e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	699a      	ldr	r2, [r3, #24]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f022 0204 	bic.w	r2, r2, #4
 800923e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6999      	ldr	r1, [r3, #24]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	691a      	ldr	r2, [r3, #16]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	619a      	str	r2, [r3, #24]
      break;
 8009252:	e064      	b.n	800931e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	4618      	mov	r0, r3
 800925c:	f000 f9a0 	bl	80095a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	699a      	ldr	r2, [r3, #24]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800926e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	699a      	ldr	r2, [r3, #24]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800927e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6999      	ldr	r1, [r3, #24]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	021a      	lsls	r2, r3, #8
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	619a      	str	r2, [r3, #24]
      break;
 8009294:	e043      	b.n	800931e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68b9      	ldr	r1, [r7, #8]
 800929c:	4618      	mov	r0, r3
 800929e:	f000 f9f5 	bl	800968c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	69da      	ldr	r2, [r3, #28]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f042 0208 	orr.w	r2, r2, #8
 80092b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	69da      	ldr	r2, [r3, #28]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 0204 	bic.w	r2, r2, #4
 80092c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	69d9      	ldr	r1, [r3, #28]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	691a      	ldr	r2, [r3, #16]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	61da      	str	r2, [r3, #28]
      break;
 80092d4:	e023      	b.n	800931e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68b9      	ldr	r1, [r7, #8]
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 fa49 	bl	8009774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	69da      	ldr	r2, [r3, #28]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	69da      	ldr	r2, [r3, #28]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	69d9      	ldr	r1, [r3, #28]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	021a      	lsls	r2, r3, #8
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	61da      	str	r2, [r3, #28]
      break;
 8009316:	e002      	b.n	800931e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	75fb      	strb	r3, [r7, #23]
      break;
 800931c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009326:	7dfb      	ldrb	r3, [r7, #23]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3718      	adds	r7, #24
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a40      	ldr	r2, [pc, #256]	; (8009494 <TIM_Base_SetConfig+0x114>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d013      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800939e:	d00f      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a3d      	ldr	r2, [pc, #244]	; (8009498 <TIM_Base_SetConfig+0x118>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d00b      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a3c      	ldr	r2, [pc, #240]	; (800949c <TIM_Base_SetConfig+0x11c>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d007      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a3b      	ldr	r2, [pc, #236]	; (80094a0 <TIM_Base_SetConfig+0x120>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d003      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a3a      	ldr	r2, [pc, #232]	; (80094a4 <TIM_Base_SetConfig+0x124>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d108      	bne.n	80093d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a2f      	ldr	r2, [pc, #188]	; (8009494 <TIM_Base_SetConfig+0x114>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d02b      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e0:	d027      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a2c      	ldr	r2, [pc, #176]	; (8009498 <TIM_Base_SetConfig+0x118>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d023      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a2b      	ldr	r2, [pc, #172]	; (800949c <TIM_Base_SetConfig+0x11c>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d01f      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a2a      	ldr	r2, [pc, #168]	; (80094a0 <TIM_Base_SetConfig+0x120>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d01b      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a29      	ldr	r2, [pc, #164]	; (80094a4 <TIM_Base_SetConfig+0x124>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d017      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a28      	ldr	r2, [pc, #160]	; (80094a8 <TIM_Base_SetConfig+0x128>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d013      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a27      	ldr	r2, [pc, #156]	; (80094ac <TIM_Base_SetConfig+0x12c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00f      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a26      	ldr	r2, [pc, #152]	; (80094b0 <TIM_Base_SetConfig+0x130>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00b      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a25      	ldr	r2, [pc, #148]	; (80094b4 <TIM_Base_SetConfig+0x134>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d007      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a24      	ldr	r2, [pc, #144]	; (80094b8 <TIM_Base_SetConfig+0x138>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d003      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a23      	ldr	r2, [pc, #140]	; (80094bc <TIM_Base_SetConfig+0x13c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d108      	bne.n	8009444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	4313      	orrs	r3, r2
 8009442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	4313      	orrs	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a0a      	ldr	r2, [pc, #40]	; (8009494 <TIM_Base_SetConfig+0x114>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_Base_SetConfig+0xf8>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a0c      	ldr	r2, [pc, #48]	; (80094a4 <TIM_Base_SetConfig+0x124>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d103      	bne.n	8009480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	691a      	ldr	r2, [r3, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	615a      	str	r2, [r3, #20]
}
 8009486:	bf00      	nop
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	40010000 	.word	0x40010000
 8009498:	40000400 	.word	0x40000400
 800949c:	40000800 	.word	0x40000800
 80094a0:	40000c00 	.word	0x40000c00
 80094a4:	40010400 	.word	0x40010400
 80094a8:	40014000 	.word	0x40014000
 80094ac:	40014400 	.word	0x40014400
 80094b0:	40014800 	.word	0x40014800
 80094b4:	40001800 	.word	0x40001800
 80094b8:	40001c00 	.word	0x40001c00
 80094bc:	40002000 	.word	0x40002000

080094c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f023 0201 	bic.w	r2, r3, #1
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f023 0303 	bic.w	r3, r3, #3
 80094f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	4313      	orrs	r3, r2
 8009500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f023 0302 	bic.w	r3, r3, #2
 8009508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	4313      	orrs	r3, r2
 8009512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a20      	ldr	r2, [pc, #128]	; (8009598 <TIM_OC1_SetConfig+0xd8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d003      	beq.n	8009524 <TIM_OC1_SetConfig+0x64>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a1f      	ldr	r2, [pc, #124]	; (800959c <TIM_OC1_SetConfig+0xdc>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d10c      	bne.n	800953e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f023 0308 	bic.w	r3, r3, #8
 800952a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	4313      	orrs	r3, r2
 8009534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f023 0304 	bic.w	r3, r3, #4
 800953c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a15      	ldr	r2, [pc, #84]	; (8009598 <TIM_OC1_SetConfig+0xd8>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d003      	beq.n	800954e <TIM_OC1_SetConfig+0x8e>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a14      	ldr	r2, [pc, #80]	; (800959c <TIM_OC1_SetConfig+0xdc>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d111      	bne.n	8009572 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800955c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	4313      	orrs	r3, r2
 8009566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	4313      	orrs	r3, r2
 8009570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	621a      	str	r2, [r3, #32]
}
 800958c:	bf00      	nop
 800958e:	371c      	adds	r7, #28
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	40010000 	.word	0x40010000
 800959c:	40010400 	.word	0x40010400

080095a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	f023 0210 	bic.w	r2, r3, #16
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	021b      	lsls	r3, r3, #8
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f023 0320 	bic.w	r3, r3, #32
 80095ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	011b      	lsls	r3, r3, #4
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a22      	ldr	r2, [pc, #136]	; (8009684 <TIM_OC2_SetConfig+0xe4>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d003      	beq.n	8009608 <TIM_OC2_SetConfig+0x68>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a21      	ldr	r2, [pc, #132]	; (8009688 <TIM_OC2_SetConfig+0xe8>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d10d      	bne.n	8009624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800960e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	011b      	lsls	r3, r3, #4
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	4313      	orrs	r3, r2
 800961a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a17      	ldr	r2, [pc, #92]	; (8009684 <TIM_OC2_SetConfig+0xe4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d003      	beq.n	8009634 <TIM_OC2_SetConfig+0x94>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a16      	ldr	r2, [pc, #88]	; (8009688 <TIM_OC2_SetConfig+0xe8>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d113      	bne.n	800965c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800963a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	4313      	orrs	r3, r2
 800964e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	4313      	orrs	r3, r2
 800965a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	621a      	str	r2, [r3, #32]
}
 8009676:	bf00      	nop
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	40010000 	.word	0x40010000
 8009688:	40010400 	.word	0x40010400

0800968c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f023 0303 	bic.w	r3, r3, #3
 80096c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80096d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	021b      	lsls	r3, r3, #8
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	4313      	orrs	r3, r2
 80096e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	4a21      	ldr	r2, [pc, #132]	; (800976c <TIM_OC3_SetConfig+0xe0>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d003      	beq.n	80096f2 <TIM_OC3_SetConfig+0x66>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4a20      	ldr	r2, [pc, #128]	; (8009770 <TIM_OC3_SetConfig+0xe4>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d10d      	bne.n	800970e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	021b      	lsls	r3, r3, #8
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	4313      	orrs	r3, r2
 8009704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800970c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a16      	ldr	r2, [pc, #88]	; (800976c <TIM_OC3_SetConfig+0xe0>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d003      	beq.n	800971e <TIM_OC3_SetConfig+0x92>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a15      	ldr	r2, [pc, #84]	; (8009770 <TIM_OC3_SetConfig+0xe4>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d113      	bne.n	8009746 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800972c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	011b      	lsls	r3, r3, #4
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	4313      	orrs	r3, r2
 8009738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	011b      	lsls	r3, r3, #4
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	4313      	orrs	r3, r2
 8009744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	621a      	str	r2, [r3, #32]
}
 8009760:	bf00      	nop
 8009762:	371c      	adds	r7, #28
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	40010000 	.word	0x40010000
 8009770:	40010400 	.word	0x40010400

08009774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a1b      	ldr	r3, [r3, #32]
 800978e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	031b      	lsls	r3, r3, #12
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a12      	ldr	r2, [pc, #72]	; (8009818 <TIM_OC4_SetConfig+0xa4>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d003      	beq.n	80097dc <TIM_OC4_SetConfig+0x68>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a11      	ldr	r2, [pc, #68]	; (800981c <TIM_OC4_SetConfig+0xa8>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d109      	bne.n	80097f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	019b      	lsls	r3, r3, #6
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	621a      	str	r2, [r3, #32]
}
 800980a:	bf00      	nop
 800980c:	371c      	adds	r7, #28
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	40010000 	.word	0x40010000
 800981c:	40010400 	.word	0x40010400

08009820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f003 031f 	and.w	r3, r3, #31
 8009832:	2201      	movs	r2, #1
 8009834:	fa02 f303 	lsl.w	r3, r2, r3
 8009838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6a1a      	ldr	r2, [r3, #32]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	43db      	mvns	r3, r3
 8009842:	401a      	ands	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6a1a      	ldr	r2, [r3, #32]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f003 031f 	and.w	r3, r3, #31
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	fa01 f303 	lsl.w	r3, r1, r3
 8009858:	431a      	orrs	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	621a      	str	r2, [r3, #32]
}
 800985e:	bf00      	nop
 8009860:	371c      	adds	r7, #28
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
	...

0800986c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800987c:	2b01      	cmp	r3, #1
 800987e:	d101      	bne.n	8009884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009880:	2302      	movs	r3, #2
 8009882:	e05a      	b.n	800993a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2202      	movs	r2, #2
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a21      	ldr	r2, [pc, #132]	; (8009948 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d022      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d0:	d01d      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a1d      	ldr	r2, [pc, #116]	; (800994c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d018      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a1b      	ldr	r2, [pc, #108]	; (8009950 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d013      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a1a      	ldr	r2, [pc, #104]	; (8009954 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d00e      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a18      	ldr	r2, [pc, #96]	; (8009958 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d009      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a17      	ldr	r2, [pc, #92]	; (800995c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d004      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a15      	ldr	r2, [pc, #84]	; (8009960 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d10c      	bne.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	4313      	orrs	r3, r2
 800991e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	40010000 	.word	0x40010000
 800994c:	40000400 	.word	0x40000400
 8009950:	40000800 	.word	0x40000800
 8009954:	40000c00 	.word	0x40000c00
 8009958:	40010400 	.word	0x40010400
 800995c:	40014000 	.word	0x40014000
 8009960:	40001800 	.word	0x40001800

08009964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d101      	bne.n	800999e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e03f      	b.n	8009a1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d106      	bne.n	80099b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7fa fcea 	bl	800438c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2224      	movs	r2, #36	; 0x24
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f929 	bl	8009c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	691a      	ldr	r2, [r3, #16]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80099e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	695a      	ldr	r2, [r3, #20]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68da      	ldr	r2, [r3, #12]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2220      	movs	r2, #32
 8009a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2220      	movs	r2, #32
 8009a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b08a      	sub	sp, #40	; 0x28
 8009a2a:	af02      	add	r7, sp, #8
 8009a2c:	60f8      	str	r0, [r7, #12]
 8009a2e:	60b9      	str	r1, [r7, #8]
 8009a30:	603b      	str	r3, [r7, #0]
 8009a32:	4613      	mov	r3, r2
 8009a34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a36:	2300      	movs	r3, #0
 8009a38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	d17c      	bne.n	8009b40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <HAL_UART_Transmit+0x2c>
 8009a4c:	88fb      	ldrh	r3, [r7, #6]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e075      	b.n	8009b42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d101      	bne.n	8009a64 <HAL_UART_Transmit+0x3e>
 8009a60:	2302      	movs	r3, #2
 8009a62:	e06e      	b.n	8009b42 <HAL_UART_Transmit+0x11c>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2221      	movs	r2, #33	; 0x21
 8009a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a7a:	f7fb fcc5 	bl	8005408 <HAL_GetTick>
 8009a7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	88fa      	ldrh	r2, [r7, #6]
 8009a84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	88fa      	ldrh	r2, [r7, #6]
 8009a8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a94:	d108      	bne.n	8009aa8 <HAL_UART_Transmit+0x82>
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d104      	bne.n	8009aa8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	e003      	b.n	8009ab0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009aac:	2300      	movs	r3, #0
 8009aae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009ab8:	e02a      	b.n	8009b10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	2180      	movs	r1, #128	; 0x80
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 f840 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009ad0:	2303      	movs	r3, #3
 8009ad2:	e036      	b.n	8009b42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10b      	bne.n	8009af2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	461a      	mov	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ae8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	3302      	adds	r3, #2
 8009aee:	61bb      	str	r3, [r7, #24]
 8009af0:	e007      	b.n	8009b02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	781a      	ldrb	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	3301      	adds	r3, #1
 8009b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1cf      	bne.n	8009aba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2200      	movs	r2, #0
 8009b22:	2140      	movs	r1, #64	; 0x40
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 f810 	bl	8009b4a <UART_WaitOnFlagUntilTimeout>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e006      	b.n	8009b42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2220      	movs	r2, #32
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	e000      	b.n	8009b42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009b40:	2302      	movs	r3, #2
  }
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3720      	adds	r7, #32
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}

08009b4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b090      	sub	sp, #64	; 0x40
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	603b      	str	r3, [r7, #0]
 8009b56:	4613      	mov	r3, r2
 8009b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b5a:	e050      	b.n	8009bfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b62:	d04c      	beq.n	8009bfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d007      	beq.n	8009b7a <UART_WaitOnFlagUntilTimeout+0x30>
 8009b6a:	f7fb fc4d 	bl	8005408 <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d241      	bcs.n	8009bfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	330c      	adds	r3, #12
 8009b80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	330c      	adds	r3, #12
 8009b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b9a:	637a      	str	r2, [r7, #52]	; 0x34
 8009b9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e5      	bne.n	8009b7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3314      	adds	r3, #20
 8009bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	f023 0301 	bic.w	r3, r3, #1
 8009bc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3314      	adds	r3, #20
 8009bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bce:	623a      	str	r2, [r7, #32]
 8009bd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	69f9      	ldr	r1, [r7, #28]
 8009bd4:	6a3a      	ldr	r2, [r7, #32]
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bdc:	69bb      	ldr	r3, [r7, #24]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e5      	bne.n	8009bae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2220      	movs	r2, #32
 8009bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e00f      	b.n	8009c1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	4013      	ands	r3, r2
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	bf0c      	ite	eq
 8009c0e:	2301      	moveq	r3, #1
 8009c10:	2300      	movne	r3, #0
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	461a      	mov	r2, r3
 8009c16:	79fb      	ldrb	r3, [r7, #7]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d09f      	beq.n	8009b5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3740      	adds	r7, #64	; 0x40
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
	...

08009c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2c:	b09f      	sub	sp, #124	; 0x7c
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c3e:	68d9      	ldr	r1, [r3, #12]
 8009c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	ea40 0301 	orr.w	r3, r0, r1
 8009c48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c4c:	689a      	ldr	r2, [r3, #8]
 8009c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	431a      	orrs	r2, r3
 8009c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	431a      	orrs	r2, r3
 8009c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c6c:	f021 010c 	bic.w	r1, r1, #12
 8009c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c76:	430b      	orrs	r3, r1
 8009c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c86:	6999      	ldr	r1, [r3, #24]
 8009c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	ea40 0301 	orr.w	r3, r0, r1
 8009c90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	4bc5      	ldr	r3, [pc, #788]	; (8009fac <UART_SetConfig+0x384>)
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d004      	beq.n	8009ca6 <UART_SetConfig+0x7e>
 8009c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	4bc3      	ldr	r3, [pc, #780]	; (8009fb0 <UART_SetConfig+0x388>)
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d103      	bne.n	8009cae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ca6:	f7fd ff7b 	bl	8007ba0 <HAL_RCC_GetPCLK2Freq>
 8009caa:	6778      	str	r0, [r7, #116]	; 0x74
 8009cac:	e002      	b.n	8009cb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cae:	f7fd ff63 	bl	8007b78 <HAL_RCC_GetPCLK1Freq>
 8009cb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cbc:	f040 80b6 	bne.w	8009e2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cc2:	461c      	mov	r4, r3
 8009cc4:	f04f 0500 	mov.w	r5, #0
 8009cc8:	4622      	mov	r2, r4
 8009cca:	462b      	mov	r3, r5
 8009ccc:	1891      	adds	r1, r2, r2
 8009cce:	6439      	str	r1, [r7, #64]	; 0x40
 8009cd0:	415b      	adcs	r3, r3
 8009cd2:	647b      	str	r3, [r7, #68]	; 0x44
 8009cd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009cd8:	1912      	adds	r2, r2, r4
 8009cda:	eb45 0303 	adc.w	r3, r5, r3
 8009cde:	f04f 0000 	mov.w	r0, #0
 8009ce2:	f04f 0100 	mov.w	r1, #0
 8009ce6:	00d9      	lsls	r1, r3, #3
 8009ce8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009cec:	00d0      	lsls	r0, r2, #3
 8009cee:	4602      	mov	r2, r0
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	1911      	adds	r1, r2, r4
 8009cf4:	6639      	str	r1, [r7, #96]	; 0x60
 8009cf6:	416b      	adcs	r3, r5
 8009cf8:	667b      	str	r3, [r7, #100]	; 0x64
 8009cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f04f 0300 	mov.w	r3, #0
 8009d04:	1891      	adds	r1, r2, r2
 8009d06:	63b9      	str	r1, [r7, #56]	; 0x38
 8009d08:	415b      	adcs	r3, r3
 8009d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009d14:	f7f6 ffb8 	bl	8000c88 <__aeabi_uldivmod>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4ba5      	ldr	r3, [pc, #660]	; (8009fb4 <UART_SetConfig+0x38c>)
 8009d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8009d22:	095b      	lsrs	r3, r3, #5
 8009d24:	011e      	lsls	r6, r3, #4
 8009d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d28:	461c      	mov	r4, r3
 8009d2a:	f04f 0500 	mov.w	r5, #0
 8009d2e:	4622      	mov	r2, r4
 8009d30:	462b      	mov	r3, r5
 8009d32:	1891      	adds	r1, r2, r2
 8009d34:	6339      	str	r1, [r7, #48]	; 0x30
 8009d36:	415b      	adcs	r3, r3
 8009d38:	637b      	str	r3, [r7, #52]	; 0x34
 8009d3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d3e:	1912      	adds	r2, r2, r4
 8009d40:	eb45 0303 	adc.w	r3, r5, r3
 8009d44:	f04f 0000 	mov.w	r0, #0
 8009d48:	f04f 0100 	mov.w	r1, #0
 8009d4c:	00d9      	lsls	r1, r3, #3
 8009d4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009d52:	00d0      	lsls	r0, r2, #3
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	1911      	adds	r1, r2, r4
 8009d5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d5c:	416b      	adcs	r3, r5
 8009d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	461a      	mov	r2, r3
 8009d66:	f04f 0300 	mov.w	r3, #0
 8009d6a:	1891      	adds	r1, r2, r2
 8009d6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009d6e:	415b      	adcs	r3, r3
 8009d70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009d7a:	f7f6 ff85 	bl	8000c88 <__aeabi_uldivmod>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4b8c      	ldr	r3, [pc, #560]	; (8009fb4 <UART_SetConfig+0x38c>)
 8009d84:	fba3 1302 	umull	r1, r3, r3, r2
 8009d88:	095b      	lsrs	r3, r3, #5
 8009d8a:	2164      	movs	r1, #100	; 0x64
 8009d8c:	fb01 f303 	mul.w	r3, r1, r3
 8009d90:	1ad3      	subs	r3, r2, r3
 8009d92:	00db      	lsls	r3, r3, #3
 8009d94:	3332      	adds	r3, #50	; 0x32
 8009d96:	4a87      	ldr	r2, [pc, #540]	; (8009fb4 <UART_SetConfig+0x38c>)
 8009d98:	fba2 2303 	umull	r2, r3, r2, r3
 8009d9c:	095b      	lsrs	r3, r3, #5
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009da4:	441e      	add	r6, r3
 8009da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009da8:	4618      	mov	r0, r3
 8009daa:	f04f 0100 	mov.w	r1, #0
 8009dae:	4602      	mov	r2, r0
 8009db0:	460b      	mov	r3, r1
 8009db2:	1894      	adds	r4, r2, r2
 8009db4:	623c      	str	r4, [r7, #32]
 8009db6:	415b      	adcs	r3, r3
 8009db8:	627b      	str	r3, [r7, #36]	; 0x24
 8009dba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009dbe:	1812      	adds	r2, r2, r0
 8009dc0:	eb41 0303 	adc.w	r3, r1, r3
 8009dc4:	f04f 0400 	mov.w	r4, #0
 8009dc8:	f04f 0500 	mov.w	r5, #0
 8009dcc:	00dd      	lsls	r5, r3, #3
 8009dce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009dd2:	00d4      	lsls	r4, r2, #3
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	462b      	mov	r3, r5
 8009dd8:	1814      	adds	r4, r2, r0
 8009dda:	653c      	str	r4, [r7, #80]	; 0x50
 8009ddc:	414b      	adcs	r3, r1
 8009dde:	657b      	str	r3, [r7, #84]	; 0x54
 8009de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	461a      	mov	r2, r3
 8009de6:	f04f 0300 	mov.w	r3, #0
 8009dea:	1891      	adds	r1, r2, r2
 8009dec:	61b9      	str	r1, [r7, #24]
 8009dee:	415b      	adcs	r3, r3
 8009df0:	61fb      	str	r3, [r7, #28]
 8009df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009df6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009dfa:	f7f6 ff45 	bl	8000c88 <__aeabi_uldivmod>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	460b      	mov	r3, r1
 8009e02:	4b6c      	ldr	r3, [pc, #432]	; (8009fb4 <UART_SetConfig+0x38c>)
 8009e04:	fba3 1302 	umull	r1, r3, r3, r2
 8009e08:	095b      	lsrs	r3, r3, #5
 8009e0a:	2164      	movs	r1, #100	; 0x64
 8009e0c:	fb01 f303 	mul.w	r3, r1, r3
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	3332      	adds	r3, #50	; 0x32
 8009e16:	4a67      	ldr	r2, [pc, #412]	; (8009fb4 <UART_SetConfig+0x38c>)
 8009e18:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1c:	095b      	lsrs	r3, r3, #5
 8009e1e:	f003 0207 	and.w	r2, r3, #7
 8009e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4432      	add	r2, r6
 8009e28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e2a:	e0b9      	b.n	8009fa0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e2e:	461c      	mov	r4, r3
 8009e30:	f04f 0500 	mov.w	r5, #0
 8009e34:	4622      	mov	r2, r4
 8009e36:	462b      	mov	r3, r5
 8009e38:	1891      	adds	r1, r2, r2
 8009e3a:	6139      	str	r1, [r7, #16]
 8009e3c:	415b      	adcs	r3, r3
 8009e3e:	617b      	str	r3, [r7, #20]
 8009e40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e44:	1912      	adds	r2, r2, r4
 8009e46:	eb45 0303 	adc.w	r3, r5, r3
 8009e4a:	f04f 0000 	mov.w	r0, #0
 8009e4e:	f04f 0100 	mov.w	r1, #0
 8009e52:	00d9      	lsls	r1, r3, #3
 8009e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e58:	00d0      	lsls	r0, r2, #3
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	460b      	mov	r3, r1
 8009e5e:	eb12 0804 	adds.w	r8, r2, r4
 8009e62:	eb43 0905 	adc.w	r9, r3, r5
 8009e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f04f 0100 	mov.w	r1, #0
 8009e70:	f04f 0200 	mov.w	r2, #0
 8009e74:	f04f 0300 	mov.w	r3, #0
 8009e78:	008b      	lsls	r3, r1, #2
 8009e7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e7e:	0082      	lsls	r2, r0, #2
 8009e80:	4640      	mov	r0, r8
 8009e82:	4649      	mov	r1, r9
 8009e84:	f7f6 ff00 	bl	8000c88 <__aeabi_uldivmod>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4b49      	ldr	r3, [pc, #292]	; (8009fb4 <UART_SetConfig+0x38c>)
 8009e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8009e92:	095b      	lsrs	r3, r3, #5
 8009e94:	011e      	lsls	r6, r3, #4
 8009e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f04f 0100 	mov.w	r1, #0
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	1894      	adds	r4, r2, r2
 8009ea4:	60bc      	str	r4, [r7, #8]
 8009ea6:	415b      	adcs	r3, r3
 8009ea8:	60fb      	str	r3, [r7, #12]
 8009eaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009eae:	1812      	adds	r2, r2, r0
 8009eb0:	eb41 0303 	adc.w	r3, r1, r3
 8009eb4:	f04f 0400 	mov.w	r4, #0
 8009eb8:	f04f 0500 	mov.w	r5, #0
 8009ebc:	00dd      	lsls	r5, r3, #3
 8009ebe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009ec2:	00d4      	lsls	r4, r2, #3
 8009ec4:	4622      	mov	r2, r4
 8009ec6:	462b      	mov	r3, r5
 8009ec8:	1814      	adds	r4, r2, r0
 8009eca:	64bc      	str	r4, [r7, #72]	; 0x48
 8009ecc:	414b      	adcs	r3, r1
 8009ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f04f 0100 	mov.w	r1, #0
 8009eda:	f04f 0200 	mov.w	r2, #0
 8009ede:	f04f 0300 	mov.w	r3, #0
 8009ee2:	008b      	lsls	r3, r1, #2
 8009ee4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009ee8:	0082      	lsls	r2, r0, #2
 8009eea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009eee:	f7f6 fecb 	bl	8000c88 <__aeabi_uldivmod>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	4b2f      	ldr	r3, [pc, #188]	; (8009fb4 <UART_SetConfig+0x38c>)
 8009ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8009efc:	095b      	lsrs	r3, r3, #5
 8009efe:	2164      	movs	r1, #100	; 0x64
 8009f00:	fb01 f303 	mul.w	r3, r1, r3
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	011b      	lsls	r3, r3, #4
 8009f08:	3332      	adds	r3, #50	; 0x32
 8009f0a:	4a2a      	ldr	r2, [pc, #168]	; (8009fb4 <UART_SetConfig+0x38c>)
 8009f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f10:	095b      	lsrs	r3, r3, #5
 8009f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f16:	441e      	add	r6, r3
 8009f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f04f 0100 	mov.w	r1, #0
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	1894      	adds	r4, r2, r2
 8009f26:	603c      	str	r4, [r7, #0]
 8009f28:	415b      	adcs	r3, r3
 8009f2a:	607b      	str	r3, [r7, #4]
 8009f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f30:	1812      	adds	r2, r2, r0
 8009f32:	eb41 0303 	adc.w	r3, r1, r3
 8009f36:	f04f 0400 	mov.w	r4, #0
 8009f3a:	f04f 0500 	mov.w	r5, #0
 8009f3e:	00dd      	lsls	r5, r3, #3
 8009f40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f44:	00d4      	lsls	r4, r2, #3
 8009f46:	4622      	mov	r2, r4
 8009f48:	462b      	mov	r3, r5
 8009f4a:	eb12 0a00 	adds.w	sl, r2, r0
 8009f4e:	eb43 0b01 	adc.w	fp, r3, r1
 8009f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f04f 0100 	mov.w	r1, #0
 8009f5c:	f04f 0200 	mov.w	r2, #0
 8009f60:	f04f 0300 	mov.w	r3, #0
 8009f64:	008b      	lsls	r3, r1, #2
 8009f66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f6a:	0082      	lsls	r2, r0, #2
 8009f6c:	4650      	mov	r0, sl
 8009f6e:	4659      	mov	r1, fp
 8009f70:	f7f6 fe8a 	bl	8000c88 <__aeabi_uldivmod>
 8009f74:	4602      	mov	r2, r0
 8009f76:	460b      	mov	r3, r1
 8009f78:	4b0e      	ldr	r3, [pc, #56]	; (8009fb4 <UART_SetConfig+0x38c>)
 8009f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8009f7e:	095b      	lsrs	r3, r3, #5
 8009f80:	2164      	movs	r1, #100	; 0x64
 8009f82:	fb01 f303 	mul.w	r3, r1, r3
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	3332      	adds	r3, #50	; 0x32
 8009f8c:	4a09      	ldr	r2, [pc, #36]	; (8009fb4 <UART_SetConfig+0x38c>)
 8009f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f92:	095b      	lsrs	r3, r3, #5
 8009f94:	f003 020f 	and.w	r2, r3, #15
 8009f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4432      	add	r2, r6
 8009f9e:	609a      	str	r2, [r3, #8]
}
 8009fa0:	bf00      	nop
 8009fa2:	377c      	adds	r7, #124	; 0x7c
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009faa:	bf00      	nop
 8009fac:	40011000 	.word	0x40011000
 8009fb0:	40011400 	.word	0x40011400
 8009fb4:	51eb851f 	.word	0x51eb851f

08009fb8 <__errno>:
 8009fb8:	4b01      	ldr	r3, [pc, #4]	; (8009fc0 <__errno+0x8>)
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	2000000c 	.word	0x2000000c

08009fc4 <__libc_init_array>:
 8009fc4:	b570      	push	{r4, r5, r6, lr}
 8009fc6:	4d0d      	ldr	r5, [pc, #52]	; (8009ffc <__libc_init_array+0x38>)
 8009fc8:	4c0d      	ldr	r4, [pc, #52]	; (800a000 <__libc_init_array+0x3c>)
 8009fca:	1b64      	subs	r4, r4, r5
 8009fcc:	10a4      	asrs	r4, r4, #2
 8009fce:	2600      	movs	r6, #0
 8009fd0:	42a6      	cmp	r6, r4
 8009fd2:	d109      	bne.n	8009fe8 <__libc_init_array+0x24>
 8009fd4:	4d0b      	ldr	r5, [pc, #44]	; (800a004 <__libc_init_array+0x40>)
 8009fd6:	4c0c      	ldr	r4, [pc, #48]	; (800a008 <__libc_init_array+0x44>)
 8009fd8:	f004 fcd4 	bl	800e984 <_init>
 8009fdc:	1b64      	subs	r4, r4, r5
 8009fde:	10a4      	asrs	r4, r4, #2
 8009fe0:	2600      	movs	r6, #0
 8009fe2:	42a6      	cmp	r6, r4
 8009fe4:	d105      	bne.n	8009ff2 <__libc_init_array+0x2e>
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}
 8009fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fec:	4798      	blx	r3
 8009fee:	3601      	adds	r6, #1
 8009ff0:	e7ee      	b.n	8009fd0 <__libc_init_array+0xc>
 8009ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ff6:	4798      	blx	r3
 8009ff8:	3601      	adds	r6, #1
 8009ffa:	e7f2      	b.n	8009fe2 <__libc_init_array+0x1e>
 8009ffc:	0800f23c 	.word	0x0800f23c
 800a000:	0800f23c 	.word	0x0800f23c
 800a004:	0800f23c 	.word	0x0800f23c
 800a008:	0800f240 	.word	0x0800f240

0800a00c <memcpy>:
 800a00c:	440a      	add	r2, r1
 800a00e:	4291      	cmp	r1, r2
 800a010:	f100 33ff 	add.w	r3, r0, #4294967295
 800a014:	d100      	bne.n	800a018 <memcpy+0xc>
 800a016:	4770      	bx	lr
 800a018:	b510      	push	{r4, lr}
 800a01a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a01e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a022:	4291      	cmp	r1, r2
 800a024:	d1f9      	bne.n	800a01a <memcpy+0xe>
 800a026:	bd10      	pop	{r4, pc}

0800a028 <memset>:
 800a028:	4402      	add	r2, r0
 800a02a:	4603      	mov	r3, r0
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d100      	bne.n	800a032 <memset+0xa>
 800a030:	4770      	bx	lr
 800a032:	f803 1b01 	strb.w	r1, [r3], #1
 800a036:	e7f9      	b.n	800a02c <memset+0x4>

0800a038 <__cvt>:
 800a038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a03c:	ec55 4b10 	vmov	r4, r5, d0
 800a040:	2d00      	cmp	r5, #0
 800a042:	460e      	mov	r6, r1
 800a044:	4619      	mov	r1, r3
 800a046:	462b      	mov	r3, r5
 800a048:	bfbb      	ittet	lt
 800a04a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a04e:	461d      	movlt	r5, r3
 800a050:	2300      	movge	r3, #0
 800a052:	232d      	movlt	r3, #45	; 0x2d
 800a054:	700b      	strb	r3, [r1, #0]
 800a056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a058:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a05c:	4691      	mov	r9, r2
 800a05e:	f023 0820 	bic.w	r8, r3, #32
 800a062:	bfbc      	itt	lt
 800a064:	4622      	movlt	r2, r4
 800a066:	4614      	movlt	r4, r2
 800a068:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a06c:	d005      	beq.n	800a07a <__cvt+0x42>
 800a06e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a072:	d100      	bne.n	800a076 <__cvt+0x3e>
 800a074:	3601      	adds	r6, #1
 800a076:	2102      	movs	r1, #2
 800a078:	e000      	b.n	800a07c <__cvt+0x44>
 800a07a:	2103      	movs	r1, #3
 800a07c:	ab03      	add	r3, sp, #12
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	ab02      	add	r3, sp, #8
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	ec45 4b10 	vmov	d0, r4, r5
 800a088:	4653      	mov	r3, sl
 800a08a:	4632      	mov	r2, r6
 800a08c:	f001 ff04 	bl	800be98 <_dtoa_r>
 800a090:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a094:	4607      	mov	r7, r0
 800a096:	d102      	bne.n	800a09e <__cvt+0x66>
 800a098:	f019 0f01 	tst.w	r9, #1
 800a09c:	d022      	beq.n	800a0e4 <__cvt+0xac>
 800a09e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0a2:	eb07 0906 	add.w	r9, r7, r6
 800a0a6:	d110      	bne.n	800a0ca <__cvt+0x92>
 800a0a8:	783b      	ldrb	r3, [r7, #0]
 800a0aa:	2b30      	cmp	r3, #48	; 0x30
 800a0ac:	d10a      	bne.n	800a0c4 <__cvt+0x8c>
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7f6 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0ba:	b918      	cbnz	r0, 800a0c4 <__cvt+0x8c>
 800a0bc:	f1c6 0601 	rsb	r6, r6, #1
 800a0c0:	f8ca 6000 	str.w	r6, [sl]
 800a0c4:	f8da 3000 	ldr.w	r3, [sl]
 800a0c8:	4499      	add	r9, r3
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7f6 fcf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0d6:	b108      	cbz	r0, 800a0dc <__cvt+0xa4>
 800a0d8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a0dc:	2230      	movs	r2, #48	; 0x30
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	454b      	cmp	r3, r9
 800a0e2:	d307      	bcc.n	800a0f4 <__cvt+0xbc>
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0e8:	1bdb      	subs	r3, r3, r7
 800a0ea:	4638      	mov	r0, r7
 800a0ec:	6013      	str	r3, [r2, #0]
 800a0ee:	b004      	add	sp, #16
 800a0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f4:	1c59      	adds	r1, r3, #1
 800a0f6:	9103      	str	r1, [sp, #12]
 800a0f8:	701a      	strb	r2, [r3, #0]
 800a0fa:	e7f0      	b.n	800a0de <__cvt+0xa6>

0800a0fc <__exponent>:
 800a0fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0fe:	4603      	mov	r3, r0
 800a100:	2900      	cmp	r1, #0
 800a102:	bfb8      	it	lt
 800a104:	4249      	neglt	r1, r1
 800a106:	f803 2b02 	strb.w	r2, [r3], #2
 800a10a:	bfb4      	ite	lt
 800a10c:	222d      	movlt	r2, #45	; 0x2d
 800a10e:	222b      	movge	r2, #43	; 0x2b
 800a110:	2909      	cmp	r1, #9
 800a112:	7042      	strb	r2, [r0, #1]
 800a114:	dd2a      	ble.n	800a16c <__exponent+0x70>
 800a116:	f10d 0407 	add.w	r4, sp, #7
 800a11a:	46a4      	mov	ip, r4
 800a11c:	270a      	movs	r7, #10
 800a11e:	46a6      	mov	lr, r4
 800a120:	460a      	mov	r2, r1
 800a122:	fb91 f6f7 	sdiv	r6, r1, r7
 800a126:	fb07 1516 	mls	r5, r7, r6, r1
 800a12a:	3530      	adds	r5, #48	; 0x30
 800a12c:	2a63      	cmp	r2, #99	; 0x63
 800a12e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a132:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a136:	4631      	mov	r1, r6
 800a138:	dcf1      	bgt.n	800a11e <__exponent+0x22>
 800a13a:	3130      	adds	r1, #48	; 0x30
 800a13c:	f1ae 0502 	sub.w	r5, lr, #2
 800a140:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a144:	1c44      	adds	r4, r0, #1
 800a146:	4629      	mov	r1, r5
 800a148:	4561      	cmp	r1, ip
 800a14a:	d30a      	bcc.n	800a162 <__exponent+0x66>
 800a14c:	f10d 0209 	add.w	r2, sp, #9
 800a150:	eba2 020e 	sub.w	r2, r2, lr
 800a154:	4565      	cmp	r5, ip
 800a156:	bf88      	it	hi
 800a158:	2200      	movhi	r2, #0
 800a15a:	4413      	add	r3, r2
 800a15c:	1a18      	subs	r0, r3, r0
 800a15e:	b003      	add	sp, #12
 800a160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a162:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a166:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a16a:	e7ed      	b.n	800a148 <__exponent+0x4c>
 800a16c:	2330      	movs	r3, #48	; 0x30
 800a16e:	3130      	adds	r1, #48	; 0x30
 800a170:	7083      	strb	r3, [r0, #2]
 800a172:	70c1      	strb	r1, [r0, #3]
 800a174:	1d03      	adds	r3, r0, #4
 800a176:	e7f1      	b.n	800a15c <__exponent+0x60>

0800a178 <_printf_float>:
 800a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17c:	ed2d 8b02 	vpush	{d8}
 800a180:	b08d      	sub	sp, #52	; 0x34
 800a182:	460c      	mov	r4, r1
 800a184:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a188:	4616      	mov	r6, r2
 800a18a:	461f      	mov	r7, r3
 800a18c:	4605      	mov	r5, r0
 800a18e:	f003 f995 	bl	800d4bc <_localeconv_r>
 800a192:	f8d0 a000 	ldr.w	sl, [r0]
 800a196:	4650      	mov	r0, sl
 800a198:	f7f6 f81a 	bl	80001d0 <strlen>
 800a19c:	2300      	movs	r3, #0
 800a19e:	930a      	str	r3, [sp, #40]	; 0x28
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	9305      	str	r3, [sp, #20]
 800a1a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a1ac:	3307      	adds	r3, #7
 800a1ae:	f023 0307 	bic.w	r3, r3, #7
 800a1b2:	f103 0208 	add.w	r2, r3, #8
 800a1b6:	f8c8 2000 	str.w	r2, [r8]
 800a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a1c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a1c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1ca:	9307      	str	r3, [sp, #28]
 800a1cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1d0:	ee08 0a10 	vmov	s16, r0
 800a1d4:	4b9f      	ldr	r3, [pc, #636]	; (800a454 <_printf_float+0x2dc>)
 800a1d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1da:	f04f 32ff 	mov.w	r2, #4294967295
 800a1de:	f7f6 fca5 	bl	8000b2c <__aeabi_dcmpun>
 800a1e2:	bb88      	cbnz	r0, 800a248 <_printf_float+0xd0>
 800a1e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1e8:	4b9a      	ldr	r3, [pc, #616]	; (800a454 <_printf_float+0x2dc>)
 800a1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ee:	f7f6 fc7f 	bl	8000af0 <__aeabi_dcmple>
 800a1f2:	bb48      	cbnz	r0, 800a248 <_printf_float+0xd0>
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	4649      	mov	r1, r9
 800a1fc:	f7f6 fc6e 	bl	8000adc <__aeabi_dcmplt>
 800a200:	b110      	cbz	r0, 800a208 <_printf_float+0x90>
 800a202:	232d      	movs	r3, #45	; 0x2d
 800a204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a208:	4b93      	ldr	r3, [pc, #588]	; (800a458 <_printf_float+0x2e0>)
 800a20a:	4894      	ldr	r0, [pc, #592]	; (800a45c <_printf_float+0x2e4>)
 800a20c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a210:	bf94      	ite	ls
 800a212:	4698      	movls	r8, r3
 800a214:	4680      	movhi	r8, r0
 800a216:	2303      	movs	r3, #3
 800a218:	6123      	str	r3, [r4, #16]
 800a21a:	9b05      	ldr	r3, [sp, #20]
 800a21c:	f023 0204 	bic.w	r2, r3, #4
 800a220:	6022      	str	r2, [r4, #0]
 800a222:	f04f 0900 	mov.w	r9, #0
 800a226:	9700      	str	r7, [sp, #0]
 800a228:	4633      	mov	r3, r6
 800a22a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a22c:	4621      	mov	r1, r4
 800a22e:	4628      	mov	r0, r5
 800a230:	f000 f9d8 	bl	800a5e4 <_printf_common>
 800a234:	3001      	adds	r0, #1
 800a236:	f040 8090 	bne.w	800a35a <_printf_float+0x1e2>
 800a23a:	f04f 30ff 	mov.w	r0, #4294967295
 800a23e:	b00d      	add	sp, #52	; 0x34
 800a240:	ecbd 8b02 	vpop	{d8}
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	4642      	mov	r2, r8
 800a24a:	464b      	mov	r3, r9
 800a24c:	4640      	mov	r0, r8
 800a24e:	4649      	mov	r1, r9
 800a250:	f7f6 fc6c 	bl	8000b2c <__aeabi_dcmpun>
 800a254:	b140      	cbz	r0, 800a268 <_printf_float+0xf0>
 800a256:	464b      	mov	r3, r9
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bfbc      	itt	lt
 800a25c:	232d      	movlt	r3, #45	; 0x2d
 800a25e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a262:	487f      	ldr	r0, [pc, #508]	; (800a460 <_printf_float+0x2e8>)
 800a264:	4b7f      	ldr	r3, [pc, #508]	; (800a464 <_printf_float+0x2ec>)
 800a266:	e7d1      	b.n	800a20c <_printf_float+0x94>
 800a268:	6863      	ldr	r3, [r4, #4]
 800a26a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a26e:	9206      	str	r2, [sp, #24]
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	d13f      	bne.n	800a2f4 <_printf_float+0x17c>
 800a274:	2306      	movs	r3, #6
 800a276:	6063      	str	r3, [r4, #4]
 800a278:	9b05      	ldr	r3, [sp, #20]
 800a27a:	6861      	ldr	r1, [r4, #4]
 800a27c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a280:	2300      	movs	r3, #0
 800a282:	9303      	str	r3, [sp, #12]
 800a284:	ab0a      	add	r3, sp, #40	; 0x28
 800a286:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a28a:	ab09      	add	r3, sp, #36	; 0x24
 800a28c:	ec49 8b10 	vmov	d0, r8, r9
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	6022      	str	r2, [r4, #0]
 800a294:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a298:	4628      	mov	r0, r5
 800a29a:	f7ff fecd 	bl	800a038 <__cvt>
 800a29e:	9b06      	ldr	r3, [sp, #24]
 800a2a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2a2:	2b47      	cmp	r3, #71	; 0x47
 800a2a4:	4680      	mov	r8, r0
 800a2a6:	d108      	bne.n	800a2ba <_printf_float+0x142>
 800a2a8:	1cc8      	adds	r0, r1, #3
 800a2aa:	db02      	blt.n	800a2b2 <_printf_float+0x13a>
 800a2ac:	6863      	ldr	r3, [r4, #4]
 800a2ae:	4299      	cmp	r1, r3
 800a2b0:	dd41      	ble.n	800a336 <_printf_float+0x1be>
 800a2b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a2b6:	fa5f fb8b 	uxtb.w	fp, fp
 800a2ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2be:	d820      	bhi.n	800a302 <_printf_float+0x18a>
 800a2c0:	3901      	subs	r1, #1
 800a2c2:	465a      	mov	r2, fp
 800a2c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a2c8:	9109      	str	r1, [sp, #36]	; 0x24
 800a2ca:	f7ff ff17 	bl	800a0fc <__exponent>
 800a2ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d0:	1813      	adds	r3, r2, r0
 800a2d2:	2a01      	cmp	r2, #1
 800a2d4:	4681      	mov	r9, r0
 800a2d6:	6123      	str	r3, [r4, #16]
 800a2d8:	dc02      	bgt.n	800a2e0 <_printf_float+0x168>
 800a2da:	6822      	ldr	r2, [r4, #0]
 800a2dc:	07d2      	lsls	r2, r2, #31
 800a2de:	d501      	bpl.n	800a2e4 <_printf_float+0x16c>
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	6123      	str	r3, [r4, #16]
 800a2e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d09c      	beq.n	800a226 <_printf_float+0xae>
 800a2ec:	232d      	movs	r3, #45	; 0x2d
 800a2ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2f2:	e798      	b.n	800a226 <_printf_float+0xae>
 800a2f4:	9a06      	ldr	r2, [sp, #24]
 800a2f6:	2a47      	cmp	r2, #71	; 0x47
 800a2f8:	d1be      	bne.n	800a278 <_printf_float+0x100>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1bc      	bne.n	800a278 <_printf_float+0x100>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e7b9      	b.n	800a276 <_printf_float+0xfe>
 800a302:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a306:	d118      	bne.n	800a33a <_printf_float+0x1c2>
 800a308:	2900      	cmp	r1, #0
 800a30a:	6863      	ldr	r3, [r4, #4]
 800a30c:	dd0b      	ble.n	800a326 <_printf_float+0x1ae>
 800a30e:	6121      	str	r1, [r4, #16]
 800a310:	b913      	cbnz	r3, 800a318 <_printf_float+0x1a0>
 800a312:	6822      	ldr	r2, [r4, #0]
 800a314:	07d0      	lsls	r0, r2, #31
 800a316:	d502      	bpl.n	800a31e <_printf_float+0x1a6>
 800a318:	3301      	adds	r3, #1
 800a31a:	440b      	add	r3, r1
 800a31c:	6123      	str	r3, [r4, #16]
 800a31e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a320:	f04f 0900 	mov.w	r9, #0
 800a324:	e7de      	b.n	800a2e4 <_printf_float+0x16c>
 800a326:	b913      	cbnz	r3, 800a32e <_printf_float+0x1b6>
 800a328:	6822      	ldr	r2, [r4, #0]
 800a32a:	07d2      	lsls	r2, r2, #31
 800a32c:	d501      	bpl.n	800a332 <_printf_float+0x1ba>
 800a32e:	3302      	adds	r3, #2
 800a330:	e7f4      	b.n	800a31c <_printf_float+0x1a4>
 800a332:	2301      	movs	r3, #1
 800a334:	e7f2      	b.n	800a31c <_printf_float+0x1a4>
 800a336:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a33c:	4299      	cmp	r1, r3
 800a33e:	db05      	blt.n	800a34c <_printf_float+0x1d4>
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	6121      	str	r1, [r4, #16]
 800a344:	07d8      	lsls	r0, r3, #31
 800a346:	d5ea      	bpl.n	800a31e <_printf_float+0x1a6>
 800a348:	1c4b      	adds	r3, r1, #1
 800a34a:	e7e7      	b.n	800a31c <_printf_float+0x1a4>
 800a34c:	2900      	cmp	r1, #0
 800a34e:	bfd4      	ite	le
 800a350:	f1c1 0202 	rsble	r2, r1, #2
 800a354:	2201      	movgt	r2, #1
 800a356:	4413      	add	r3, r2
 800a358:	e7e0      	b.n	800a31c <_printf_float+0x1a4>
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	055a      	lsls	r2, r3, #21
 800a35e:	d407      	bmi.n	800a370 <_printf_float+0x1f8>
 800a360:	6923      	ldr	r3, [r4, #16]
 800a362:	4642      	mov	r2, r8
 800a364:	4631      	mov	r1, r6
 800a366:	4628      	mov	r0, r5
 800a368:	47b8      	blx	r7
 800a36a:	3001      	adds	r0, #1
 800a36c:	d12c      	bne.n	800a3c8 <_printf_float+0x250>
 800a36e:	e764      	b.n	800a23a <_printf_float+0xc2>
 800a370:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a374:	f240 80e0 	bls.w	800a538 <_printf_float+0x3c0>
 800a378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a37c:	2200      	movs	r2, #0
 800a37e:	2300      	movs	r3, #0
 800a380:	f7f6 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a384:	2800      	cmp	r0, #0
 800a386:	d034      	beq.n	800a3f2 <_printf_float+0x27a>
 800a388:	4a37      	ldr	r2, [pc, #220]	; (800a468 <_printf_float+0x2f0>)
 800a38a:	2301      	movs	r3, #1
 800a38c:	4631      	mov	r1, r6
 800a38e:	4628      	mov	r0, r5
 800a390:	47b8      	blx	r7
 800a392:	3001      	adds	r0, #1
 800a394:	f43f af51 	beq.w	800a23a <_printf_float+0xc2>
 800a398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a39c:	429a      	cmp	r2, r3
 800a39e:	db02      	blt.n	800a3a6 <_printf_float+0x22e>
 800a3a0:	6823      	ldr	r3, [r4, #0]
 800a3a2:	07d8      	lsls	r0, r3, #31
 800a3a4:	d510      	bpl.n	800a3c8 <_printf_float+0x250>
 800a3a6:	ee18 3a10 	vmov	r3, s16
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b8      	blx	r7
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	f43f af41 	beq.w	800a23a <_printf_float+0xc2>
 800a3b8:	f04f 0800 	mov.w	r8, #0
 800a3bc:	f104 091a 	add.w	r9, r4, #26
 800a3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	4543      	cmp	r3, r8
 800a3c6:	dc09      	bgt.n	800a3dc <_printf_float+0x264>
 800a3c8:	6823      	ldr	r3, [r4, #0]
 800a3ca:	079b      	lsls	r3, r3, #30
 800a3cc:	f100 8105 	bmi.w	800a5da <_printf_float+0x462>
 800a3d0:	68e0      	ldr	r0, [r4, #12]
 800a3d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3d4:	4298      	cmp	r0, r3
 800a3d6:	bfb8      	it	lt
 800a3d8:	4618      	movlt	r0, r3
 800a3da:	e730      	b.n	800a23e <_printf_float+0xc6>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	464a      	mov	r2, r9
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	47b8      	blx	r7
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	f43f af27 	beq.w	800a23a <_printf_float+0xc2>
 800a3ec:	f108 0801 	add.w	r8, r8, #1
 800a3f0:	e7e6      	b.n	800a3c0 <_printf_float+0x248>
 800a3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dc39      	bgt.n	800a46c <_printf_float+0x2f4>
 800a3f8:	4a1b      	ldr	r2, [pc, #108]	; (800a468 <_printf_float+0x2f0>)
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b8      	blx	r7
 800a402:	3001      	adds	r0, #1
 800a404:	f43f af19 	beq.w	800a23a <_printf_float+0xc2>
 800a408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a40c:	4313      	orrs	r3, r2
 800a40e:	d102      	bne.n	800a416 <_printf_float+0x29e>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	07d9      	lsls	r1, r3, #31
 800a414:	d5d8      	bpl.n	800a3c8 <_printf_float+0x250>
 800a416:	ee18 3a10 	vmov	r3, s16
 800a41a:	4652      	mov	r2, sl
 800a41c:	4631      	mov	r1, r6
 800a41e:	4628      	mov	r0, r5
 800a420:	47b8      	blx	r7
 800a422:	3001      	adds	r0, #1
 800a424:	f43f af09 	beq.w	800a23a <_printf_float+0xc2>
 800a428:	f04f 0900 	mov.w	r9, #0
 800a42c:	f104 0a1a 	add.w	sl, r4, #26
 800a430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a432:	425b      	negs	r3, r3
 800a434:	454b      	cmp	r3, r9
 800a436:	dc01      	bgt.n	800a43c <_printf_float+0x2c4>
 800a438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a43a:	e792      	b.n	800a362 <_printf_float+0x1ea>
 800a43c:	2301      	movs	r3, #1
 800a43e:	4652      	mov	r2, sl
 800a440:	4631      	mov	r1, r6
 800a442:	4628      	mov	r0, r5
 800a444:	47b8      	blx	r7
 800a446:	3001      	adds	r0, #1
 800a448:	f43f aef7 	beq.w	800a23a <_printf_float+0xc2>
 800a44c:	f109 0901 	add.w	r9, r9, #1
 800a450:	e7ee      	b.n	800a430 <_printf_float+0x2b8>
 800a452:	bf00      	nop
 800a454:	7fefffff 	.word	0x7fefffff
 800a458:	0800ed84 	.word	0x0800ed84
 800a45c:	0800ed88 	.word	0x0800ed88
 800a460:	0800ed90 	.word	0x0800ed90
 800a464:	0800ed8c 	.word	0x0800ed8c
 800a468:	0800ed94 	.word	0x0800ed94
 800a46c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a46e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a470:	429a      	cmp	r2, r3
 800a472:	bfa8      	it	ge
 800a474:	461a      	movge	r2, r3
 800a476:	2a00      	cmp	r2, #0
 800a478:	4691      	mov	r9, r2
 800a47a:	dc37      	bgt.n	800a4ec <_printf_float+0x374>
 800a47c:	f04f 0b00 	mov.w	fp, #0
 800a480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a484:	f104 021a 	add.w	r2, r4, #26
 800a488:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a48a:	9305      	str	r3, [sp, #20]
 800a48c:	eba3 0309 	sub.w	r3, r3, r9
 800a490:	455b      	cmp	r3, fp
 800a492:	dc33      	bgt.n	800a4fc <_printf_float+0x384>
 800a494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a498:	429a      	cmp	r2, r3
 800a49a:	db3b      	blt.n	800a514 <_printf_float+0x39c>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	07da      	lsls	r2, r3, #31
 800a4a0:	d438      	bmi.n	800a514 <_printf_float+0x39c>
 800a4a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4a4:	9b05      	ldr	r3, [sp, #20]
 800a4a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	eba2 0901 	sub.w	r9, r2, r1
 800a4ae:	4599      	cmp	r9, r3
 800a4b0:	bfa8      	it	ge
 800a4b2:	4699      	movge	r9, r3
 800a4b4:	f1b9 0f00 	cmp.w	r9, #0
 800a4b8:	dc35      	bgt.n	800a526 <_printf_float+0x3ae>
 800a4ba:	f04f 0800 	mov.w	r8, #0
 800a4be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4c2:	f104 0a1a 	add.w	sl, r4, #26
 800a4c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4ca:	1a9b      	subs	r3, r3, r2
 800a4cc:	eba3 0309 	sub.w	r3, r3, r9
 800a4d0:	4543      	cmp	r3, r8
 800a4d2:	f77f af79 	ble.w	800a3c8 <_printf_float+0x250>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	4652      	mov	r2, sl
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4628      	mov	r0, r5
 800a4de:	47b8      	blx	r7
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	f43f aeaa 	beq.w	800a23a <_printf_float+0xc2>
 800a4e6:	f108 0801 	add.w	r8, r8, #1
 800a4ea:	e7ec      	b.n	800a4c6 <_printf_float+0x34e>
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	4631      	mov	r1, r6
 800a4f0:	4642      	mov	r2, r8
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b8      	blx	r7
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d1c0      	bne.n	800a47c <_printf_float+0x304>
 800a4fa:	e69e      	b.n	800a23a <_printf_float+0xc2>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	4631      	mov	r1, r6
 800a500:	4628      	mov	r0, r5
 800a502:	9205      	str	r2, [sp, #20]
 800a504:	47b8      	blx	r7
 800a506:	3001      	adds	r0, #1
 800a508:	f43f ae97 	beq.w	800a23a <_printf_float+0xc2>
 800a50c:	9a05      	ldr	r2, [sp, #20]
 800a50e:	f10b 0b01 	add.w	fp, fp, #1
 800a512:	e7b9      	b.n	800a488 <_printf_float+0x310>
 800a514:	ee18 3a10 	vmov	r3, s16
 800a518:	4652      	mov	r2, sl
 800a51a:	4631      	mov	r1, r6
 800a51c:	4628      	mov	r0, r5
 800a51e:	47b8      	blx	r7
 800a520:	3001      	adds	r0, #1
 800a522:	d1be      	bne.n	800a4a2 <_printf_float+0x32a>
 800a524:	e689      	b.n	800a23a <_printf_float+0xc2>
 800a526:	9a05      	ldr	r2, [sp, #20]
 800a528:	464b      	mov	r3, r9
 800a52a:	4442      	add	r2, r8
 800a52c:	4631      	mov	r1, r6
 800a52e:	4628      	mov	r0, r5
 800a530:	47b8      	blx	r7
 800a532:	3001      	adds	r0, #1
 800a534:	d1c1      	bne.n	800a4ba <_printf_float+0x342>
 800a536:	e680      	b.n	800a23a <_printf_float+0xc2>
 800a538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a53a:	2a01      	cmp	r2, #1
 800a53c:	dc01      	bgt.n	800a542 <_printf_float+0x3ca>
 800a53e:	07db      	lsls	r3, r3, #31
 800a540:	d538      	bpl.n	800a5b4 <_printf_float+0x43c>
 800a542:	2301      	movs	r3, #1
 800a544:	4642      	mov	r2, r8
 800a546:	4631      	mov	r1, r6
 800a548:	4628      	mov	r0, r5
 800a54a:	47b8      	blx	r7
 800a54c:	3001      	adds	r0, #1
 800a54e:	f43f ae74 	beq.w	800a23a <_printf_float+0xc2>
 800a552:	ee18 3a10 	vmov	r3, s16
 800a556:	4652      	mov	r2, sl
 800a558:	4631      	mov	r1, r6
 800a55a:	4628      	mov	r0, r5
 800a55c:	47b8      	blx	r7
 800a55e:	3001      	adds	r0, #1
 800a560:	f43f ae6b 	beq.w	800a23a <_printf_float+0xc2>
 800a564:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a568:	2200      	movs	r2, #0
 800a56a:	2300      	movs	r3, #0
 800a56c:	f7f6 faac 	bl	8000ac8 <__aeabi_dcmpeq>
 800a570:	b9d8      	cbnz	r0, 800a5aa <_printf_float+0x432>
 800a572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a574:	f108 0201 	add.w	r2, r8, #1
 800a578:	3b01      	subs	r3, #1
 800a57a:	4631      	mov	r1, r6
 800a57c:	4628      	mov	r0, r5
 800a57e:	47b8      	blx	r7
 800a580:	3001      	adds	r0, #1
 800a582:	d10e      	bne.n	800a5a2 <_printf_float+0x42a>
 800a584:	e659      	b.n	800a23a <_printf_float+0xc2>
 800a586:	2301      	movs	r3, #1
 800a588:	4652      	mov	r2, sl
 800a58a:	4631      	mov	r1, r6
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b8      	blx	r7
 800a590:	3001      	adds	r0, #1
 800a592:	f43f ae52 	beq.w	800a23a <_printf_float+0xc2>
 800a596:	f108 0801 	add.w	r8, r8, #1
 800a59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a59c:	3b01      	subs	r3, #1
 800a59e:	4543      	cmp	r3, r8
 800a5a0:	dcf1      	bgt.n	800a586 <_printf_float+0x40e>
 800a5a2:	464b      	mov	r3, r9
 800a5a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a5a8:	e6dc      	b.n	800a364 <_printf_float+0x1ec>
 800a5aa:	f04f 0800 	mov.w	r8, #0
 800a5ae:	f104 0a1a 	add.w	sl, r4, #26
 800a5b2:	e7f2      	b.n	800a59a <_printf_float+0x422>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	4642      	mov	r2, r8
 800a5b8:	e7df      	b.n	800a57a <_printf_float+0x402>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	464a      	mov	r2, r9
 800a5be:	4631      	mov	r1, r6
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	47b8      	blx	r7
 800a5c4:	3001      	adds	r0, #1
 800a5c6:	f43f ae38 	beq.w	800a23a <_printf_float+0xc2>
 800a5ca:	f108 0801 	add.w	r8, r8, #1
 800a5ce:	68e3      	ldr	r3, [r4, #12]
 800a5d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5d2:	1a5b      	subs	r3, r3, r1
 800a5d4:	4543      	cmp	r3, r8
 800a5d6:	dcf0      	bgt.n	800a5ba <_printf_float+0x442>
 800a5d8:	e6fa      	b.n	800a3d0 <_printf_float+0x258>
 800a5da:	f04f 0800 	mov.w	r8, #0
 800a5de:	f104 0919 	add.w	r9, r4, #25
 800a5e2:	e7f4      	b.n	800a5ce <_printf_float+0x456>

0800a5e4 <_printf_common>:
 800a5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e8:	4616      	mov	r6, r2
 800a5ea:	4699      	mov	r9, r3
 800a5ec:	688a      	ldr	r2, [r1, #8]
 800a5ee:	690b      	ldr	r3, [r1, #16]
 800a5f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	bfb8      	it	lt
 800a5f8:	4613      	movlt	r3, r2
 800a5fa:	6033      	str	r3, [r6, #0]
 800a5fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a600:	4607      	mov	r7, r0
 800a602:	460c      	mov	r4, r1
 800a604:	b10a      	cbz	r2, 800a60a <_printf_common+0x26>
 800a606:	3301      	adds	r3, #1
 800a608:	6033      	str	r3, [r6, #0]
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	0699      	lsls	r1, r3, #26
 800a60e:	bf42      	ittt	mi
 800a610:	6833      	ldrmi	r3, [r6, #0]
 800a612:	3302      	addmi	r3, #2
 800a614:	6033      	strmi	r3, [r6, #0]
 800a616:	6825      	ldr	r5, [r4, #0]
 800a618:	f015 0506 	ands.w	r5, r5, #6
 800a61c:	d106      	bne.n	800a62c <_printf_common+0x48>
 800a61e:	f104 0a19 	add.w	sl, r4, #25
 800a622:	68e3      	ldr	r3, [r4, #12]
 800a624:	6832      	ldr	r2, [r6, #0]
 800a626:	1a9b      	subs	r3, r3, r2
 800a628:	42ab      	cmp	r3, r5
 800a62a:	dc26      	bgt.n	800a67a <_printf_common+0x96>
 800a62c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a630:	1e13      	subs	r3, r2, #0
 800a632:	6822      	ldr	r2, [r4, #0]
 800a634:	bf18      	it	ne
 800a636:	2301      	movne	r3, #1
 800a638:	0692      	lsls	r2, r2, #26
 800a63a:	d42b      	bmi.n	800a694 <_printf_common+0xb0>
 800a63c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a640:	4649      	mov	r1, r9
 800a642:	4638      	mov	r0, r7
 800a644:	47c0      	blx	r8
 800a646:	3001      	adds	r0, #1
 800a648:	d01e      	beq.n	800a688 <_printf_common+0xa4>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	68e5      	ldr	r5, [r4, #12]
 800a64e:	6832      	ldr	r2, [r6, #0]
 800a650:	f003 0306 	and.w	r3, r3, #6
 800a654:	2b04      	cmp	r3, #4
 800a656:	bf08      	it	eq
 800a658:	1aad      	subeq	r5, r5, r2
 800a65a:	68a3      	ldr	r3, [r4, #8]
 800a65c:	6922      	ldr	r2, [r4, #16]
 800a65e:	bf0c      	ite	eq
 800a660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a664:	2500      	movne	r5, #0
 800a666:	4293      	cmp	r3, r2
 800a668:	bfc4      	itt	gt
 800a66a:	1a9b      	subgt	r3, r3, r2
 800a66c:	18ed      	addgt	r5, r5, r3
 800a66e:	2600      	movs	r6, #0
 800a670:	341a      	adds	r4, #26
 800a672:	42b5      	cmp	r5, r6
 800a674:	d11a      	bne.n	800a6ac <_printf_common+0xc8>
 800a676:	2000      	movs	r0, #0
 800a678:	e008      	b.n	800a68c <_printf_common+0xa8>
 800a67a:	2301      	movs	r3, #1
 800a67c:	4652      	mov	r2, sl
 800a67e:	4649      	mov	r1, r9
 800a680:	4638      	mov	r0, r7
 800a682:	47c0      	blx	r8
 800a684:	3001      	adds	r0, #1
 800a686:	d103      	bne.n	800a690 <_printf_common+0xac>
 800a688:	f04f 30ff 	mov.w	r0, #4294967295
 800a68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a690:	3501      	adds	r5, #1
 800a692:	e7c6      	b.n	800a622 <_printf_common+0x3e>
 800a694:	18e1      	adds	r1, r4, r3
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	2030      	movs	r0, #48	; 0x30
 800a69a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a69e:	4422      	add	r2, r4
 800a6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6a8:	3302      	adds	r3, #2
 800a6aa:	e7c7      	b.n	800a63c <_printf_common+0x58>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	4622      	mov	r2, r4
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	47c0      	blx	r8
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	d0e6      	beq.n	800a688 <_printf_common+0xa4>
 800a6ba:	3601      	adds	r6, #1
 800a6bc:	e7d9      	b.n	800a672 <_printf_common+0x8e>
	...

0800a6c0 <_printf_i>:
 800a6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	4691      	mov	r9, r2
 800a6c8:	7e27      	ldrb	r7, [r4, #24]
 800a6ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a6cc:	2f78      	cmp	r7, #120	; 0x78
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	469a      	mov	sl, r3
 800a6d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6d6:	d807      	bhi.n	800a6e8 <_printf_i+0x28>
 800a6d8:	2f62      	cmp	r7, #98	; 0x62
 800a6da:	d80a      	bhi.n	800a6f2 <_printf_i+0x32>
 800a6dc:	2f00      	cmp	r7, #0
 800a6de:	f000 80d8 	beq.w	800a892 <_printf_i+0x1d2>
 800a6e2:	2f58      	cmp	r7, #88	; 0x58
 800a6e4:	f000 80a3 	beq.w	800a82e <_printf_i+0x16e>
 800a6e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a6ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6f0:	e03a      	b.n	800a768 <_printf_i+0xa8>
 800a6f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6f6:	2b15      	cmp	r3, #21
 800a6f8:	d8f6      	bhi.n	800a6e8 <_printf_i+0x28>
 800a6fa:	a001      	add	r0, pc, #4	; (adr r0, 800a700 <_printf_i+0x40>)
 800a6fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a700:	0800a759 	.word	0x0800a759
 800a704:	0800a76d 	.word	0x0800a76d
 800a708:	0800a6e9 	.word	0x0800a6e9
 800a70c:	0800a6e9 	.word	0x0800a6e9
 800a710:	0800a6e9 	.word	0x0800a6e9
 800a714:	0800a6e9 	.word	0x0800a6e9
 800a718:	0800a76d 	.word	0x0800a76d
 800a71c:	0800a6e9 	.word	0x0800a6e9
 800a720:	0800a6e9 	.word	0x0800a6e9
 800a724:	0800a6e9 	.word	0x0800a6e9
 800a728:	0800a6e9 	.word	0x0800a6e9
 800a72c:	0800a879 	.word	0x0800a879
 800a730:	0800a79d 	.word	0x0800a79d
 800a734:	0800a85b 	.word	0x0800a85b
 800a738:	0800a6e9 	.word	0x0800a6e9
 800a73c:	0800a6e9 	.word	0x0800a6e9
 800a740:	0800a89b 	.word	0x0800a89b
 800a744:	0800a6e9 	.word	0x0800a6e9
 800a748:	0800a79d 	.word	0x0800a79d
 800a74c:	0800a6e9 	.word	0x0800a6e9
 800a750:	0800a6e9 	.word	0x0800a6e9
 800a754:	0800a863 	.word	0x0800a863
 800a758:	680b      	ldr	r3, [r1, #0]
 800a75a:	1d1a      	adds	r2, r3, #4
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	600a      	str	r2, [r1, #0]
 800a760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a768:	2301      	movs	r3, #1
 800a76a:	e0a3      	b.n	800a8b4 <_printf_i+0x1f4>
 800a76c:	6825      	ldr	r5, [r4, #0]
 800a76e:	6808      	ldr	r0, [r1, #0]
 800a770:	062e      	lsls	r6, r5, #24
 800a772:	f100 0304 	add.w	r3, r0, #4
 800a776:	d50a      	bpl.n	800a78e <_printf_i+0xce>
 800a778:	6805      	ldr	r5, [r0, #0]
 800a77a:	600b      	str	r3, [r1, #0]
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	da03      	bge.n	800a788 <_printf_i+0xc8>
 800a780:	232d      	movs	r3, #45	; 0x2d
 800a782:	426d      	negs	r5, r5
 800a784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a788:	485e      	ldr	r0, [pc, #376]	; (800a904 <_printf_i+0x244>)
 800a78a:	230a      	movs	r3, #10
 800a78c:	e019      	b.n	800a7c2 <_printf_i+0x102>
 800a78e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a792:	6805      	ldr	r5, [r0, #0]
 800a794:	600b      	str	r3, [r1, #0]
 800a796:	bf18      	it	ne
 800a798:	b22d      	sxthne	r5, r5
 800a79a:	e7ef      	b.n	800a77c <_printf_i+0xbc>
 800a79c:	680b      	ldr	r3, [r1, #0]
 800a79e:	6825      	ldr	r5, [r4, #0]
 800a7a0:	1d18      	adds	r0, r3, #4
 800a7a2:	6008      	str	r0, [r1, #0]
 800a7a4:	0628      	lsls	r0, r5, #24
 800a7a6:	d501      	bpl.n	800a7ac <_printf_i+0xec>
 800a7a8:	681d      	ldr	r5, [r3, #0]
 800a7aa:	e002      	b.n	800a7b2 <_printf_i+0xf2>
 800a7ac:	0669      	lsls	r1, r5, #25
 800a7ae:	d5fb      	bpl.n	800a7a8 <_printf_i+0xe8>
 800a7b0:	881d      	ldrh	r5, [r3, #0]
 800a7b2:	4854      	ldr	r0, [pc, #336]	; (800a904 <_printf_i+0x244>)
 800a7b4:	2f6f      	cmp	r7, #111	; 0x6f
 800a7b6:	bf0c      	ite	eq
 800a7b8:	2308      	moveq	r3, #8
 800a7ba:	230a      	movne	r3, #10
 800a7bc:	2100      	movs	r1, #0
 800a7be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7c2:	6866      	ldr	r6, [r4, #4]
 800a7c4:	60a6      	str	r6, [r4, #8]
 800a7c6:	2e00      	cmp	r6, #0
 800a7c8:	bfa2      	ittt	ge
 800a7ca:	6821      	ldrge	r1, [r4, #0]
 800a7cc:	f021 0104 	bicge.w	r1, r1, #4
 800a7d0:	6021      	strge	r1, [r4, #0]
 800a7d2:	b90d      	cbnz	r5, 800a7d8 <_printf_i+0x118>
 800a7d4:	2e00      	cmp	r6, #0
 800a7d6:	d04d      	beq.n	800a874 <_printf_i+0x1b4>
 800a7d8:	4616      	mov	r6, r2
 800a7da:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7de:	fb03 5711 	mls	r7, r3, r1, r5
 800a7e2:	5dc7      	ldrb	r7, [r0, r7]
 800a7e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7e8:	462f      	mov	r7, r5
 800a7ea:	42bb      	cmp	r3, r7
 800a7ec:	460d      	mov	r5, r1
 800a7ee:	d9f4      	bls.n	800a7da <_printf_i+0x11a>
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d10b      	bne.n	800a80c <_printf_i+0x14c>
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	07df      	lsls	r7, r3, #31
 800a7f8:	d508      	bpl.n	800a80c <_printf_i+0x14c>
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	6861      	ldr	r1, [r4, #4]
 800a7fe:	4299      	cmp	r1, r3
 800a800:	bfde      	ittt	le
 800a802:	2330      	movle	r3, #48	; 0x30
 800a804:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a808:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a80c:	1b92      	subs	r2, r2, r6
 800a80e:	6122      	str	r2, [r4, #16]
 800a810:	f8cd a000 	str.w	sl, [sp]
 800a814:	464b      	mov	r3, r9
 800a816:	aa03      	add	r2, sp, #12
 800a818:	4621      	mov	r1, r4
 800a81a:	4640      	mov	r0, r8
 800a81c:	f7ff fee2 	bl	800a5e4 <_printf_common>
 800a820:	3001      	adds	r0, #1
 800a822:	d14c      	bne.n	800a8be <_printf_i+0x1fe>
 800a824:	f04f 30ff 	mov.w	r0, #4294967295
 800a828:	b004      	add	sp, #16
 800a82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a82e:	4835      	ldr	r0, [pc, #212]	; (800a904 <_printf_i+0x244>)
 800a830:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	680e      	ldr	r6, [r1, #0]
 800a838:	061f      	lsls	r7, r3, #24
 800a83a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a83e:	600e      	str	r6, [r1, #0]
 800a840:	d514      	bpl.n	800a86c <_printf_i+0x1ac>
 800a842:	07d9      	lsls	r1, r3, #31
 800a844:	bf44      	itt	mi
 800a846:	f043 0320 	orrmi.w	r3, r3, #32
 800a84a:	6023      	strmi	r3, [r4, #0]
 800a84c:	b91d      	cbnz	r5, 800a856 <_printf_i+0x196>
 800a84e:	6823      	ldr	r3, [r4, #0]
 800a850:	f023 0320 	bic.w	r3, r3, #32
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	2310      	movs	r3, #16
 800a858:	e7b0      	b.n	800a7bc <_printf_i+0xfc>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	f043 0320 	orr.w	r3, r3, #32
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	2378      	movs	r3, #120	; 0x78
 800a864:	4828      	ldr	r0, [pc, #160]	; (800a908 <_printf_i+0x248>)
 800a866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a86a:	e7e3      	b.n	800a834 <_printf_i+0x174>
 800a86c:	065e      	lsls	r6, r3, #25
 800a86e:	bf48      	it	mi
 800a870:	b2ad      	uxthmi	r5, r5
 800a872:	e7e6      	b.n	800a842 <_printf_i+0x182>
 800a874:	4616      	mov	r6, r2
 800a876:	e7bb      	b.n	800a7f0 <_printf_i+0x130>
 800a878:	680b      	ldr	r3, [r1, #0]
 800a87a:	6826      	ldr	r6, [r4, #0]
 800a87c:	6960      	ldr	r0, [r4, #20]
 800a87e:	1d1d      	adds	r5, r3, #4
 800a880:	600d      	str	r5, [r1, #0]
 800a882:	0635      	lsls	r5, r6, #24
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	d501      	bpl.n	800a88c <_printf_i+0x1cc>
 800a888:	6018      	str	r0, [r3, #0]
 800a88a:	e002      	b.n	800a892 <_printf_i+0x1d2>
 800a88c:	0671      	lsls	r1, r6, #25
 800a88e:	d5fb      	bpl.n	800a888 <_printf_i+0x1c8>
 800a890:	8018      	strh	r0, [r3, #0]
 800a892:	2300      	movs	r3, #0
 800a894:	6123      	str	r3, [r4, #16]
 800a896:	4616      	mov	r6, r2
 800a898:	e7ba      	b.n	800a810 <_printf_i+0x150>
 800a89a:	680b      	ldr	r3, [r1, #0]
 800a89c:	1d1a      	adds	r2, r3, #4
 800a89e:	600a      	str	r2, [r1, #0]
 800a8a0:	681e      	ldr	r6, [r3, #0]
 800a8a2:	6862      	ldr	r2, [r4, #4]
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f7f5 fc9a 	bl	80001e0 <memchr>
 800a8ac:	b108      	cbz	r0, 800a8b2 <_printf_i+0x1f2>
 800a8ae:	1b80      	subs	r0, r0, r6
 800a8b0:	6060      	str	r0, [r4, #4]
 800a8b2:	6863      	ldr	r3, [r4, #4]
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8bc:	e7a8      	b.n	800a810 <_printf_i+0x150>
 800a8be:	6923      	ldr	r3, [r4, #16]
 800a8c0:	4632      	mov	r2, r6
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	4640      	mov	r0, r8
 800a8c6:	47d0      	blx	sl
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d0ab      	beq.n	800a824 <_printf_i+0x164>
 800a8cc:	6823      	ldr	r3, [r4, #0]
 800a8ce:	079b      	lsls	r3, r3, #30
 800a8d0:	d413      	bmi.n	800a8fa <_printf_i+0x23a>
 800a8d2:	68e0      	ldr	r0, [r4, #12]
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	4298      	cmp	r0, r3
 800a8d8:	bfb8      	it	lt
 800a8da:	4618      	movlt	r0, r3
 800a8dc:	e7a4      	b.n	800a828 <_printf_i+0x168>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	4632      	mov	r2, r6
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	47d0      	blx	sl
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d09b      	beq.n	800a824 <_printf_i+0x164>
 800a8ec:	3501      	adds	r5, #1
 800a8ee:	68e3      	ldr	r3, [r4, #12]
 800a8f0:	9903      	ldr	r1, [sp, #12]
 800a8f2:	1a5b      	subs	r3, r3, r1
 800a8f4:	42ab      	cmp	r3, r5
 800a8f6:	dcf2      	bgt.n	800a8de <_printf_i+0x21e>
 800a8f8:	e7eb      	b.n	800a8d2 <_printf_i+0x212>
 800a8fa:	2500      	movs	r5, #0
 800a8fc:	f104 0619 	add.w	r6, r4, #25
 800a900:	e7f5      	b.n	800a8ee <_printf_i+0x22e>
 800a902:	bf00      	nop
 800a904:	0800ed96 	.word	0x0800ed96
 800a908:	0800eda7 	.word	0x0800eda7

0800a90c <_scanf_float>:
 800a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a910:	b087      	sub	sp, #28
 800a912:	4617      	mov	r7, r2
 800a914:	9303      	str	r3, [sp, #12]
 800a916:	688b      	ldr	r3, [r1, #8]
 800a918:	1e5a      	subs	r2, r3, #1
 800a91a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a91e:	bf83      	ittte	hi
 800a920:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a924:	195b      	addhi	r3, r3, r5
 800a926:	9302      	strhi	r3, [sp, #8]
 800a928:	2300      	movls	r3, #0
 800a92a:	bf86      	itte	hi
 800a92c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a930:	608b      	strhi	r3, [r1, #8]
 800a932:	9302      	strls	r3, [sp, #8]
 800a934:	680b      	ldr	r3, [r1, #0]
 800a936:	468b      	mov	fp, r1
 800a938:	2500      	movs	r5, #0
 800a93a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a93e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a942:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a946:	4680      	mov	r8, r0
 800a948:	460c      	mov	r4, r1
 800a94a:	465e      	mov	r6, fp
 800a94c:	46aa      	mov	sl, r5
 800a94e:	46a9      	mov	r9, r5
 800a950:	9501      	str	r5, [sp, #4]
 800a952:	68a2      	ldr	r2, [r4, #8]
 800a954:	b152      	cbz	r2, 800a96c <_scanf_float+0x60>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	2b4e      	cmp	r3, #78	; 0x4e
 800a95c:	d864      	bhi.n	800aa28 <_scanf_float+0x11c>
 800a95e:	2b40      	cmp	r3, #64	; 0x40
 800a960:	d83c      	bhi.n	800a9dc <_scanf_float+0xd0>
 800a962:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a966:	b2c8      	uxtb	r0, r1
 800a968:	280e      	cmp	r0, #14
 800a96a:	d93a      	bls.n	800a9e2 <_scanf_float+0xd6>
 800a96c:	f1b9 0f00 	cmp.w	r9, #0
 800a970:	d003      	beq.n	800a97a <_scanf_float+0x6e>
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a97e:	f1ba 0f01 	cmp.w	sl, #1
 800a982:	f200 8113 	bhi.w	800abac <_scanf_float+0x2a0>
 800a986:	455e      	cmp	r6, fp
 800a988:	f200 8105 	bhi.w	800ab96 <_scanf_float+0x28a>
 800a98c:	2501      	movs	r5, #1
 800a98e:	4628      	mov	r0, r5
 800a990:	b007      	add	sp, #28
 800a992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a996:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a99a:	2a0d      	cmp	r2, #13
 800a99c:	d8e6      	bhi.n	800a96c <_scanf_float+0x60>
 800a99e:	a101      	add	r1, pc, #4	; (adr r1, 800a9a4 <_scanf_float+0x98>)
 800a9a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a9a4:	0800aae3 	.word	0x0800aae3
 800a9a8:	0800a96d 	.word	0x0800a96d
 800a9ac:	0800a96d 	.word	0x0800a96d
 800a9b0:	0800a96d 	.word	0x0800a96d
 800a9b4:	0800ab43 	.word	0x0800ab43
 800a9b8:	0800ab1b 	.word	0x0800ab1b
 800a9bc:	0800a96d 	.word	0x0800a96d
 800a9c0:	0800a96d 	.word	0x0800a96d
 800a9c4:	0800aaf1 	.word	0x0800aaf1
 800a9c8:	0800a96d 	.word	0x0800a96d
 800a9cc:	0800a96d 	.word	0x0800a96d
 800a9d0:	0800a96d 	.word	0x0800a96d
 800a9d4:	0800a96d 	.word	0x0800a96d
 800a9d8:	0800aaa9 	.word	0x0800aaa9
 800a9dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a9e0:	e7db      	b.n	800a99a <_scanf_float+0x8e>
 800a9e2:	290e      	cmp	r1, #14
 800a9e4:	d8c2      	bhi.n	800a96c <_scanf_float+0x60>
 800a9e6:	a001      	add	r0, pc, #4	; (adr r0, 800a9ec <_scanf_float+0xe0>)
 800a9e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a9ec:	0800aa9b 	.word	0x0800aa9b
 800a9f0:	0800a96d 	.word	0x0800a96d
 800a9f4:	0800aa9b 	.word	0x0800aa9b
 800a9f8:	0800ab2f 	.word	0x0800ab2f
 800a9fc:	0800a96d 	.word	0x0800a96d
 800aa00:	0800aa49 	.word	0x0800aa49
 800aa04:	0800aa85 	.word	0x0800aa85
 800aa08:	0800aa85 	.word	0x0800aa85
 800aa0c:	0800aa85 	.word	0x0800aa85
 800aa10:	0800aa85 	.word	0x0800aa85
 800aa14:	0800aa85 	.word	0x0800aa85
 800aa18:	0800aa85 	.word	0x0800aa85
 800aa1c:	0800aa85 	.word	0x0800aa85
 800aa20:	0800aa85 	.word	0x0800aa85
 800aa24:	0800aa85 	.word	0x0800aa85
 800aa28:	2b6e      	cmp	r3, #110	; 0x6e
 800aa2a:	d809      	bhi.n	800aa40 <_scanf_float+0x134>
 800aa2c:	2b60      	cmp	r3, #96	; 0x60
 800aa2e:	d8b2      	bhi.n	800a996 <_scanf_float+0x8a>
 800aa30:	2b54      	cmp	r3, #84	; 0x54
 800aa32:	d077      	beq.n	800ab24 <_scanf_float+0x218>
 800aa34:	2b59      	cmp	r3, #89	; 0x59
 800aa36:	d199      	bne.n	800a96c <_scanf_float+0x60>
 800aa38:	2d07      	cmp	r5, #7
 800aa3a:	d197      	bne.n	800a96c <_scanf_float+0x60>
 800aa3c:	2508      	movs	r5, #8
 800aa3e:	e029      	b.n	800aa94 <_scanf_float+0x188>
 800aa40:	2b74      	cmp	r3, #116	; 0x74
 800aa42:	d06f      	beq.n	800ab24 <_scanf_float+0x218>
 800aa44:	2b79      	cmp	r3, #121	; 0x79
 800aa46:	e7f6      	b.n	800aa36 <_scanf_float+0x12a>
 800aa48:	6821      	ldr	r1, [r4, #0]
 800aa4a:	05c8      	lsls	r0, r1, #23
 800aa4c:	d51a      	bpl.n	800aa84 <_scanf_float+0x178>
 800aa4e:	9b02      	ldr	r3, [sp, #8]
 800aa50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aa54:	6021      	str	r1, [r4, #0]
 800aa56:	f109 0901 	add.w	r9, r9, #1
 800aa5a:	b11b      	cbz	r3, 800aa64 <_scanf_float+0x158>
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	3201      	adds	r2, #1
 800aa60:	9302      	str	r3, [sp, #8]
 800aa62:	60a2      	str	r2, [r4, #8]
 800aa64:	68a3      	ldr	r3, [r4, #8]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	60a3      	str	r3, [r4, #8]
 800aa6a:	6923      	ldr	r3, [r4, #16]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	6123      	str	r3, [r4, #16]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3b01      	subs	r3, #1
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	607b      	str	r3, [r7, #4]
 800aa78:	f340 8084 	ble.w	800ab84 <_scanf_float+0x278>
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	603b      	str	r3, [r7, #0]
 800aa82:	e766      	b.n	800a952 <_scanf_float+0x46>
 800aa84:	eb1a 0f05 	cmn.w	sl, r5
 800aa88:	f47f af70 	bne.w	800a96c <_scanf_float+0x60>
 800aa8c:	6822      	ldr	r2, [r4, #0]
 800aa8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aa92:	6022      	str	r2, [r4, #0]
 800aa94:	f806 3b01 	strb.w	r3, [r6], #1
 800aa98:	e7e4      	b.n	800aa64 <_scanf_float+0x158>
 800aa9a:	6822      	ldr	r2, [r4, #0]
 800aa9c:	0610      	lsls	r0, r2, #24
 800aa9e:	f57f af65 	bpl.w	800a96c <_scanf_float+0x60>
 800aaa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aaa6:	e7f4      	b.n	800aa92 <_scanf_float+0x186>
 800aaa8:	f1ba 0f00 	cmp.w	sl, #0
 800aaac:	d10e      	bne.n	800aacc <_scanf_float+0x1c0>
 800aaae:	f1b9 0f00 	cmp.w	r9, #0
 800aab2:	d10e      	bne.n	800aad2 <_scanf_float+0x1c6>
 800aab4:	6822      	ldr	r2, [r4, #0]
 800aab6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aaba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aabe:	d108      	bne.n	800aad2 <_scanf_float+0x1c6>
 800aac0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aac4:	6022      	str	r2, [r4, #0]
 800aac6:	f04f 0a01 	mov.w	sl, #1
 800aaca:	e7e3      	b.n	800aa94 <_scanf_float+0x188>
 800aacc:	f1ba 0f02 	cmp.w	sl, #2
 800aad0:	d055      	beq.n	800ab7e <_scanf_float+0x272>
 800aad2:	2d01      	cmp	r5, #1
 800aad4:	d002      	beq.n	800aadc <_scanf_float+0x1d0>
 800aad6:	2d04      	cmp	r5, #4
 800aad8:	f47f af48 	bne.w	800a96c <_scanf_float+0x60>
 800aadc:	3501      	adds	r5, #1
 800aade:	b2ed      	uxtb	r5, r5
 800aae0:	e7d8      	b.n	800aa94 <_scanf_float+0x188>
 800aae2:	f1ba 0f01 	cmp.w	sl, #1
 800aae6:	f47f af41 	bne.w	800a96c <_scanf_float+0x60>
 800aaea:	f04f 0a02 	mov.w	sl, #2
 800aaee:	e7d1      	b.n	800aa94 <_scanf_float+0x188>
 800aaf0:	b97d      	cbnz	r5, 800ab12 <_scanf_float+0x206>
 800aaf2:	f1b9 0f00 	cmp.w	r9, #0
 800aaf6:	f47f af3c 	bne.w	800a972 <_scanf_float+0x66>
 800aafa:	6822      	ldr	r2, [r4, #0]
 800aafc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ab00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ab04:	f47f af39 	bne.w	800a97a <_scanf_float+0x6e>
 800ab08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab0c:	6022      	str	r2, [r4, #0]
 800ab0e:	2501      	movs	r5, #1
 800ab10:	e7c0      	b.n	800aa94 <_scanf_float+0x188>
 800ab12:	2d03      	cmp	r5, #3
 800ab14:	d0e2      	beq.n	800aadc <_scanf_float+0x1d0>
 800ab16:	2d05      	cmp	r5, #5
 800ab18:	e7de      	b.n	800aad8 <_scanf_float+0x1cc>
 800ab1a:	2d02      	cmp	r5, #2
 800ab1c:	f47f af26 	bne.w	800a96c <_scanf_float+0x60>
 800ab20:	2503      	movs	r5, #3
 800ab22:	e7b7      	b.n	800aa94 <_scanf_float+0x188>
 800ab24:	2d06      	cmp	r5, #6
 800ab26:	f47f af21 	bne.w	800a96c <_scanf_float+0x60>
 800ab2a:	2507      	movs	r5, #7
 800ab2c:	e7b2      	b.n	800aa94 <_scanf_float+0x188>
 800ab2e:	6822      	ldr	r2, [r4, #0]
 800ab30:	0591      	lsls	r1, r2, #22
 800ab32:	f57f af1b 	bpl.w	800a96c <_scanf_float+0x60>
 800ab36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ab3a:	6022      	str	r2, [r4, #0]
 800ab3c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ab40:	e7a8      	b.n	800aa94 <_scanf_float+0x188>
 800ab42:	6822      	ldr	r2, [r4, #0]
 800ab44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ab48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ab4c:	d006      	beq.n	800ab5c <_scanf_float+0x250>
 800ab4e:	0550      	lsls	r0, r2, #21
 800ab50:	f57f af0c 	bpl.w	800a96c <_scanf_float+0x60>
 800ab54:	f1b9 0f00 	cmp.w	r9, #0
 800ab58:	f43f af0f 	beq.w	800a97a <_scanf_float+0x6e>
 800ab5c:	0591      	lsls	r1, r2, #22
 800ab5e:	bf58      	it	pl
 800ab60:	9901      	ldrpl	r1, [sp, #4]
 800ab62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab66:	bf58      	it	pl
 800ab68:	eba9 0101 	subpl.w	r1, r9, r1
 800ab6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ab70:	bf58      	it	pl
 800ab72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ab76:	6022      	str	r2, [r4, #0]
 800ab78:	f04f 0900 	mov.w	r9, #0
 800ab7c:	e78a      	b.n	800aa94 <_scanf_float+0x188>
 800ab7e:	f04f 0a03 	mov.w	sl, #3
 800ab82:	e787      	b.n	800aa94 <_scanf_float+0x188>
 800ab84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab88:	4639      	mov	r1, r7
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	4798      	blx	r3
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	f43f aedf 	beq.w	800a952 <_scanf_float+0x46>
 800ab94:	e6ea      	b.n	800a96c <_scanf_float+0x60>
 800ab96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab9e:	463a      	mov	r2, r7
 800aba0:	4640      	mov	r0, r8
 800aba2:	4798      	blx	r3
 800aba4:	6923      	ldr	r3, [r4, #16]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	6123      	str	r3, [r4, #16]
 800abaa:	e6ec      	b.n	800a986 <_scanf_float+0x7a>
 800abac:	1e6b      	subs	r3, r5, #1
 800abae:	2b06      	cmp	r3, #6
 800abb0:	d825      	bhi.n	800abfe <_scanf_float+0x2f2>
 800abb2:	2d02      	cmp	r5, #2
 800abb4:	d836      	bhi.n	800ac24 <_scanf_float+0x318>
 800abb6:	455e      	cmp	r6, fp
 800abb8:	f67f aee8 	bls.w	800a98c <_scanf_float+0x80>
 800abbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800abc4:	463a      	mov	r2, r7
 800abc6:	4640      	mov	r0, r8
 800abc8:	4798      	blx	r3
 800abca:	6923      	ldr	r3, [r4, #16]
 800abcc:	3b01      	subs	r3, #1
 800abce:	6123      	str	r3, [r4, #16]
 800abd0:	e7f1      	b.n	800abb6 <_scanf_float+0x2aa>
 800abd2:	9802      	ldr	r0, [sp, #8]
 800abd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abd8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800abdc:	9002      	str	r0, [sp, #8]
 800abde:	463a      	mov	r2, r7
 800abe0:	4640      	mov	r0, r8
 800abe2:	4798      	blx	r3
 800abe4:	6923      	ldr	r3, [r4, #16]
 800abe6:	3b01      	subs	r3, #1
 800abe8:	6123      	str	r3, [r4, #16]
 800abea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abee:	fa5f fa8a 	uxtb.w	sl, sl
 800abf2:	f1ba 0f02 	cmp.w	sl, #2
 800abf6:	d1ec      	bne.n	800abd2 <_scanf_float+0x2c6>
 800abf8:	3d03      	subs	r5, #3
 800abfa:	b2ed      	uxtb	r5, r5
 800abfc:	1b76      	subs	r6, r6, r5
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	05da      	lsls	r2, r3, #23
 800ac02:	d52f      	bpl.n	800ac64 <_scanf_float+0x358>
 800ac04:	055b      	lsls	r3, r3, #21
 800ac06:	d510      	bpl.n	800ac2a <_scanf_float+0x31e>
 800ac08:	455e      	cmp	r6, fp
 800ac0a:	f67f aebf 	bls.w	800a98c <_scanf_float+0x80>
 800ac0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac16:	463a      	mov	r2, r7
 800ac18:	4640      	mov	r0, r8
 800ac1a:	4798      	blx	r3
 800ac1c:	6923      	ldr	r3, [r4, #16]
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	6123      	str	r3, [r4, #16]
 800ac22:	e7f1      	b.n	800ac08 <_scanf_float+0x2fc>
 800ac24:	46aa      	mov	sl, r5
 800ac26:	9602      	str	r6, [sp, #8]
 800ac28:	e7df      	b.n	800abea <_scanf_float+0x2de>
 800ac2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ac2e:	6923      	ldr	r3, [r4, #16]
 800ac30:	2965      	cmp	r1, #101	; 0x65
 800ac32:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac36:	f106 35ff 	add.w	r5, r6, #4294967295
 800ac3a:	6123      	str	r3, [r4, #16]
 800ac3c:	d00c      	beq.n	800ac58 <_scanf_float+0x34c>
 800ac3e:	2945      	cmp	r1, #69	; 0x45
 800ac40:	d00a      	beq.n	800ac58 <_scanf_float+0x34c>
 800ac42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac46:	463a      	mov	r2, r7
 800ac48:	4640      	mov	r0, r8
 800ac4a:	4798      	blx	r3
 800ac4c:	6923      	ldr	r3, [r4, #16]
 800ac4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ac52:	3b01      	subs	r3, #1
 800ac54:	1eb5      	subs	r5, r6, #2
 800ac56:	6123      	str	r3, [r4, #16]
 800ac58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac5c:	463a      	mov	r2, r7
 800ac5e:	4640      	mov	r0, r8
 800ac60:	4798      	blx	r3
 800ac62:	462e      	mov	r6, r5
 800ac64:	6825      	ldr	r5, [r4, #0]
 800ac66:	f015 0510 	ands.w	r5, r5, #16
 800ac6a:	d158      	bne.n	800ad1e <_scanf_float+0x412>
 800ac6c:	7035      	strb	r5, [r6, #0]
 800ac6e:	6823      	ldr	r3, [r4, #0]
 800ac70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac78:	d11c      	bne.n	800acb4 <_scanf_float+0x3a8>
 800ac7a:	9b01      	ldr	r3, [sp, #4]
 800ac7c:	454b      	cmp	r3, r9
 800ac7e:	eba3 0209 	sub.w	r2, r3, r9
 800ac82:	d124      	bne.n	800acce <_scanf_float+0x3c2>
 800ac84:	2200      	movs	r2, #0
 800ac86:	4659      	mov	r1, fp
 800ac88:	4640      	mov	r0, r8
 800ac8a:	f000 ff2b 	bl	800bae4 <_strtod_r>
 800ac8e:	9b03      	ldr	r3, [sp, #12]
 800ac90:	6821      	ldr	r1, [r4, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f011 0f02 	tst.w	r1, #2
 800ac98:	ec57 6b10 	vmov	r6, r7, d0
 800ac9c:	f103 0204 	add.w	r2, r3, #4
 800aca0:	d020      	beq.n	800ace4 <_scanf_float+0x3d8>
 800aca2:	9903      	ldr	r1, [sp, #12]
 800aca4:	600a      	str	r2, [r1, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	e9c3 6700 	strd	r6, r7, [r3]
 800acac:	68e3      	ldr	r3, [r4, #12]
 800acae:	3301      	adds	r3, #1
 800acb0:	60e3      	str	r3, [r4, #12]
 800acb2:	e66c      	b.n	800a98e <_scanf_float+0x82>
 800acb4:	9b04      	ldr	r3, [sp, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d0e4      	beq.n	800ac84 <_scanf_float+0x378>
 800acba:	9905      	ldr	r1, [sp, #20]
 800acbc:	230a      	movs	r3, #10
 800acbe:	462a      	mov	r2, r5
 800acc0:	3101      	adds	r1, #1
 800acc2:	4640      	mov	r0, r8
 800acc4:	f000 ff98 	bl	800bbf8 <_strtol_r>
 800acc8:	9b04      	ldr	r3, [sp, #16]
 800acca:	9e05      	ldr	r6, [sp, #20]
 800accc:	1ac2      	subs	r2, r0, r3
 800acce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800acd2:	429e      	cmp	r6, r3
 800acd4:	bf28      	it	cs
 800acd6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800acda:	4912      	ldr	r1, [pc, #72]	; (800ad24 <_scanf_float+0x418>)
 800acdc:	4630      	mov	r0, r6
 800acde:	f000 f8b9 	bl	800ae54 <siprintf>
 800ace2:	e7cf      	b.n	800ac84 <_scanf_float+0x378>
 800ace4:	f011 0f04 	tst.w	r1, #4
 800ace8:	9903      	ldr	r1, [sp, #12]
 800acea:	600a      	str	r2, [r1, #0]
 800acec:	d1db      	bne.n	800aca6 <_scanf_float+0x39a>
 800acee:	f8d3 8000 	ldr.w	r8, [r3]
 800acf2:	ee10 2a10 	vmov	r2, s0
 800acf6:	ee10 0a10 	vmov	r0, s0
 800acfa:	463b      	mov	r3, r7
 800acfc:	4639      	mov	r1, r7
 800acfe:	f7f5 ff15 	bl	8000b2c <__aeabi_dcmpun>
 800ad02:	b128      	cbz	r0, 800ad10 <_scanf_float+0x404>
 800ad04:	4808      	ldr	r0, [pc, #32]	; (800ad28 <_scanf_float+0x41c>)
 800ad06:	f000 f89f 	bl	800ae48 <nanf>
 800ad0a:	ed88 0a00 	vstr	s0, [r8]
 800ad0e:	e7cd      	b.n	800acac <_scanf_float+0x3a0>
 800ad10:	4630      	mov	r0, r6
 800ad12:	4639      	mov	r1, r7
 800ad14:	f7f5 ff68 	bl	8000be8 <__aeabi_d2f>
 800ad18:	f8c8 0000 	str.w	r0, [r8]
 800ad1c:	e7c6      	b.n	800acac <_scanf_float+0x3a0>
 800ad1e:	2500      	movs	r5, #0
 800ad20:	e635      	b.n	800a98e <_scanf_float+0x82>
 800ad22:	bf00      	nop
 800ad24:	0800edb8 	.word	0x0800edb8
 800ad28:	0800f230 	.word	0x0800f230

0800ad2c <iprintf>:
 800ad2c:	b40f      	push	{r0, r1, r2, r3}
 800ad2e:	4b0a      	ldr	r3, [pc, #40]	; (800ad58 <iprintf+0x2c>)
 800ad30:	b513      	push	{r0, r1, r4, lr}
 800ad32:	681c      	ldr	r4, [r3, #0]
 800ad34:	b124      	cbz	r4, 800ad40 <iprintf+0x14>
 800ad36:	69a3      	ldr	r3, [r4, #24]
 800ad38:	b913      	cbnz	r3, 800ad40 <iprintf+0x14>
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f001 ffb2 	bl	800cca4 <__sinit>
 800ad40:	ab05      	add	r3, sp, #20
 800ad42:	9a04      	ldr	r2, [sp, #16]
 800ad44:	68a1      	ldr	r1, [r4, #8]
 800ad46:	9301      	str	r3, [sp, #4]
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f003 fb37 	bl	800e3bc <_vfiprintf_r>
 800ad4e:	b002      	add	sp, #8
 800ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad54:	b004      	add	sp, #16
 800ad56:	4770      	bx	lr
 800ad58:	2000000c 	.word	0x2000000c

0800ad5c <_puts_r>:
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	460e      	mov	r6, r1
 800ad60:	4605      	mov	r5, r0
 800ad62:	b118      	cbz	r0, 800ad6c <_puts_r+0x10>
 800ad64:	6983      	ldr	r3, [r0, #24]
 800ad66:	b90b      	cbnz	r3, 800ad6c <_puts_r+0x10>
 800ad68:	f001 ff9c 	bl	800cca4 <__sinit>
 800ad6c:	69ab      	ldr	r3, [r5, #24]
 800ad6e:	68ac      	ldr	r4, [r5, #8]
 800ad70:	b913      	cbnz	r3, 800ad78 <_puts_r+0x1c>
 800ad72:	4628      	mov	r0, r5
 800ad74:	f001 ff96 	bl	800cca4 <__sinit>
 800ad78:	4b2c      	ldr	r3, [pc, #176]	; (800ae2c <_puts_r+0xd0>)
 800ad7a:	429c      	cmp	r4, r3
 800ad7c:	d120      	bne.n	800adc0 <_puts_r+0x64>
 800ad7e:	686c      	ldr	r4, [r5, #4]
 800ad80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad82:	07db      	lsls	r3, r3, #31
 800ad84:	d405      	bmi.n	800ad92 <_puts_r+0x36>
 800ad86:	89a3      	ldrh	r3, [r4, #12]
 800ad88:	0598      	lsls	r0, r3, #22
 800ad8a:	d402      	bmi.n	800ad92 <_puts_r+0x36>
 800ad8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad8e:	f002 fb9a 	bl	800d4c6 <__retarget_lock_acquire_recursive>
 800ad92:	89a3      	ldrh	r3, [r4, #12]
 800ad94:	0719      	lsls	r1, r3, #28
 800ad96:	d51d      	bpl.n	800add4 <_puts_r+0x78>
 800ad98:	6923      	ldr	r3, [r4, #16]
 800ad9a:	b1db      	cbz	r3, 800add4 <_puts_r+0x78>
 800ad9c:	3e01      	subs	r6, #1
 800ad9e:	68a3      	ldr	r3, [r4, #8]
 800ada0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ada4:	3b01      	subs	r3, #1
 800ada6:	60a3      	str	r3, [r4, #8]
 800ada8:	bb39      	cbnz	r1, 800adfa <_puts_r+0x9e>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	da38      	bge.n	800ae20 <_puts_r+0xc4>
 800adae:	4622      	mov	r2, r4
 800adb0:	210a      	movs	r1, #10
 800adb2:	4628      	mov	r0, r5
 800adb4:	f000 ff22 	bl	800bbfc <__swbuf_r>
 800adb8:	3001      	adds	r0, #1
 800adba:	d011      	beq.n	800ade0 <_puts_r+0x84>
 800adbc:	250a      	movs	r5, #10
 800adbe:	e011      	b.n	800ade4 <_puts_r+0x88>
 800adc0:	4b1b      	ldr	r3, [pc, #108]	; (800ae30 <_puts_r+0xd4>)
 800adc2:	429c      	cmp	r4, r3
 800adc4:	d101      	bne.n	800adca <_puts_r+0x6e>
 800adc6:	68ac      	ldr	r4, [r5, #8]
 800adc8:	e7da      	b.n	800ad80 <_puts_r+0x24>
 800adca:	4b1a      	ldr	r3, [pc, #104]	; (800ae34 <_puts_r+0xd8>)
 800adcc:	429c      	cmp	r4, r3
 800adce:	bf08      	it	eq
 800add0:	68ec      	ldreq	r4, [r5, #12]
 800add2:	e7d5      	b.n	800ad80 <_puts_r+0x24>
 800add4:	4621      	mov	r1, r4
 800add6:	4628      	mov	r0, r5
 800add8:	f000 ff62 	bl	800bca0 <__swsetup_r>
 800addc:	2800      	cmp	r0, #0
 800adde:	d0dd      	beq.n	800ad9c <_puts_r+0x40>
 800ade0:	f04f 35ff 	mov.w	r5, #4294967295
 800ade4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ade6:	07da      	lsls	r2, r3, #31
 800ade8:	d405      	bmi.n	800adf6 <_puts_r+0x9a>
 800adea:	89a3      	ldrh	r3, [r4, #12]
 800adec:	059b      	lsls	r3, r3, #22
 800adee:	d402      	bmi.n	800adf6 <_puts_r+0x9a>
 800adf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adf2:	f002 fb69 	bl	800d4c8 <__retarget_lock_release_recursive>
 800adf6:	4628      	mov	r0, r5
 800adf8:	bd70      	pop	{r4, r5, r6, pc}
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	da04      	bge.n	800ae08 <_puts_r+0xac>
 800adfe:	69a2      	ldr	r2, [r4, #24]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	dc06      	bgt.n	800ae12 <_puts_r+0xb6>
 800ae04:	290a      	cmp	r1, #10
 800ae06:	d004      	beq.n	800ae12 <_puts_r+0xb6>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	1c5a      	adds	r2, r3, #1
 800ae0c:	6022      	str	r2, [r4, #0]
 800ae0e:	7019      	strb	r1, [r3, #0]
 800ae10:	e7c5      	b.n	800ad9e <_puts_r+0x42>
 800ae12:	4622      	mov	r2, r4
 800ae14:	4628      	mov	r0, r5
 800ae16:	f000 fef1 	bl	800bbfc <__swbuf_r>
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	d1bf      	bne.n	800ad9e <_puts_r+0x42>
 800ae1e:	e7df      	b.n	800ade0 <_puts_r+0x84>
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	250a      	movs	r5, #10
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	6022      	str	r2, [r4, #0]
 800ae28:	701d      	strb	r5, [r3, #0]
 800ae2a:	e7db      	b.n	800ade4 <_puts_r+0x88>
 800ae2c:	0800efc8 	.word	0x0800efc8
 800ae30:	0800efe8 	.word	0x0800efe8
 800ae34:	0800efa8 	.word	0x0800efa8

0800ae38 <puts>:
 800ae38:	4b02      	ldr	r3, [pc, #8]	; (800ae44 <puts+0xc>)
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	6818      	ldr	r0, [r3, #0]
 800ae3e:	f7ff bf8d 	b.w	800ad5c <_puts_r>
 800ae42:	bf00      	nop
 800ae44:	2000000c 	.word	0x2000000c

0800ae48 <nanf>:
 800ae48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae50 <nanf+0x8>
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	7fc00000 	.word	0x7fc00000

0800ae54 <siprintf>:
 800ae54:	b40e      	push	{r1, r2, r3}
 800ae56:	b500      	push	{lr}
 800ae58:	b09c      	sub	sp, #112	; 0x70
 800ae5a:	ab1d      	add	r3, sp, #116	; 0x74
 800ae5c:	9002      	str	r0, [sp, #8]
 800ae5e:	9006      	str	r0, [sp, #24]
 800ae60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae64:	4809      	ldr	r0, [pc, #36]	; (800ae8c <siprintf+0x38>)
 800ae66:	9107      	str	r1, [sp, #28]
 800ae68:	9104      	str	r1, [sp, #16]
 800ae6a:	4909      	ldr	r1, [pc, #36]	; (800ae90 <siprintf+0x3c>)
 800ae6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae70:	9105      	str	r1, [sp, #20]
 800ae72:	6800      	ldr	r0, [r0, #0]
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	a902      	add	r1, sp, #8
 800ae78:	f003 f976 	bl	800e168 <_svfiprintf_r>
 800ae7c:	9b02      	ldr	r3, [sp, #8]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	701a      	strb	r2, [r3, #0]
 800ae82:	b01c      	add	sp, #112	; 0x70
 800ae84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae88:	b003      	add	sp, #12
 800ae8a:	4770      	bx	lr
 800ae8c:	2000000c 	.word	0x2000000c
 800ae90:	ffff0208 	.word	0xffff0208

0800ae94 <sulp>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	4604      	mov	r4, r0
 800ae98:	460d      	mov	r5, r1
 800ae9a:	ec45 4b10 	vmov	d0, r4, r5
 800ae9e:	4616      	mov	r6, r2
 800aea0:	f002 fefe 	bl	800dca0 <__ulp>
 800aea4:	ec51 0b10 	vmov	r0, r1, d0
 800aea8:	b17e      	cbz	r6, 800aeca <sulp+0x36>
 800aeaa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aeae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	dd09      	ble.n	800aeca <sulp+0x36>
 800aeb6:	051b      	lsls	r3, r3, #20
 800aeb8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aebc:	2400      	movs	r4, #0
 800aebe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aec2:	4622      	mov	r2, r4
 800aec4:	462b      	mov	r3, r5
 800aec6:	f7f5 fb97 	bl	80005f8 <__aeabi_dmul>
 800aeca:	bd70      	pop	{r4, r5, r6, pc}
 800aecc:	0000      	movs	r0, r0
	...

0800aed0 <_strtod_l>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	b0a3      	sub	sp, #140	; 0x8c
 800aed6:	461f      	mov	r7, r3
 800aed8:	2300      	movs	r3, #0
 800aeda:	931e      	str	r3, [sp, #120]	; 0x78
 800aedc:	4ba4      	ldr	r3, [pc, #656]	; (800b170 <_strtod_l+0x2a0>)
 800aede:	9219      	str	r2, [sp, #100]	; 0x64
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	9307      	str	r3, [sp, #28]
 800aee4:	4604      	mov	r4, r0
 800aee6:	4618      	mov	r0, r3
 800aee8:	4688      	mov	r8, r1
 800aeea:	f7f5 f971 	bl	80001d0 <strlen>
 800aeee:	f04f 0a00 	mov.w	sl, #0
 800aef2:	4605      	mov	r5, r0
 800aef4:	f04f 0b00 	mov.w	fp, #0
 800aef8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800aefc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aefe:	781a      	ldrb	r2, [r3, #0]
 800af00:	2a2b      	cmp	r2, #43	; 0x2b
 800af02:	d04c      	beq.n	800af9e <_strtod_l+0xce>
 800af04:	d839      	bhi.n	800af7a <_strtod_l+0xaa>
 800af06:	2a0d      	cmp	r2, #13
 800af08:	d832      	bhi.n	800af70 <_strtod_l+0xa0>
 800af0a:	2a08      	cmp	r2, #8
 800af0c:	d832      	bhi.n	800af74 <_strtod_l+0xa4>
 800af0e:	2a00      	cmp	r2, #0
 800af10:	d03c      	beq.n	800af8c <_strtod_l+0xbc>
 800af12:	2300      	movs	r3, #0
 800af14:	930e      	str	r3, [sp, #56]	; 0x38
 800af16:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800af18:	7833      	ldrb	r3, [r6, #0]
 800af1a:	2b30      	cmp	r3, #48	; 0x30
 800af1c:	f040 80b4 	bne.w	800b088 <_strtod_l+0x1b8>
 800af20:	7873      	ldrb	r3, [r6, #1]
 800af22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af26:	2b58      	cmp	r3, #88	; 0x58
 800af28:	d16c      	bne.n	800b004 <_strtod_l+0x134>
 800af2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	ab1e      	add	r3, sp, #120	; 0x78
 800af30:	9702      	str	r7, [sp, #8]
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	4a8f      	ldr	r2, [pc, #572]	; (800b174 <_strtod_l+0x2a4>)
 800af36:	ab1f      	add	r3, sp, #124	; 0x7c
 800af38:	a91d      	add	r1, sp, #116	; 0x74
 800af3a:	4620      	mov	r0, r4
 800af3c:	f001 ffb6 	bl	800ceac <__gethex>
 800af40:	f010 0707 	ands.w	r7, r0, #7
 800af44:	4605      	mov	r5, r0
 800af46:	d005      	beq.n	800af54 <_strtod_l+0x84>
 800af48:	2f06      	cmp	r7, #6
 800af4a:	d12a      	bne.n	800afa2 <_strtod_l+0xd2>
 800af4c:	3601      	adds	r6, #1
 800af4e:	2300      	movs	r3, #0
 800af50:	961d      	str	r6, [sp, #116]	; 0x74
 800af52:	930e      	str	r3, [sp, #56]	; 0x38
 800af54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af56:	2b00      	cmp	r3, #0
 800af58:	f040 8596 	bne.w	800ba88 <_strtod_l+0xbb8>
 800af5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af5e:	b1db      	cbz	r3, 800af98 <_strtod_l+0xc8>
 800af60:	4652      	mov	r2, sl
 800af62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af66:	ec43 2b10 	vmov	d0, r2, r3
 800af6a:	b023      	add	sp, #140	; 0x8c
 800af6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af70:	2a20      	cmp	r2, #32
 800af72:	d1ce      	bne.n	800af12 <_strtod_l+0x42>
 800af74:	3301      	adds	r3, #1
 800af76:	931d      	str	r3, [sp, #116]	; 0x74
 800af78:	e7c0      	b.n	800aefc <_strtod_l+0x2c>
 800af7a:	2a2d      	cmp	r2, #45	; 0x2d
 800af7c:	d1c9      	bne.n	800af12 <_strtod_l+0x42>
 800af7e:	2201      	movs	r2, #1
 800af80:	920e      	str	r2, [sp, #56]	; 0x38
 800af82:	1c5a      	adds	r2, r3, #1
 800af84:	921d      	str	r2, [sp, #116]	; 0x74
 800af86:	785b      	ldrb	r3, [r3, #1]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1c4      	bne.n	800af16 <_strtod_l+0x46>
 800af8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af8e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800af92:	2b00      	cmp	r3, #0
 800af94:	f040 8576 	bne.w	800ba84 <_strtod_l+0xbb4>
 800af98:	4652      	mov	r2, sl
 800af9a:	465b      	mov	r3, fp
 800af9c:	e7e3      	b.n	800af66 <_strtod_l+0x96>
 800af9e:	2200      	movs	r2, #0
 800afa0:	e7ee      	b.n	800af80 <_strtod_l+0xb0>
 800afa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800afa4:	b13a      	cbz	r2, 800afb6 <_strtod_l+0xe6>
 800afa6:	2135      	movs	r1, #53	; 0x35
 800afa8:	a820      	add	r0, sp, #128	; 0x80
 800afaa:	f002 ff84 	bl	800deb6 <__copybits>
 800afae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800afb0:	4620      	mov	r0, r4
 800afb2:	f002 fb49 	bl	800d648 <_Bfree>
 800afb6:	3f01      	subs	r7, #1
 800afb8:	2f05      	cmp	r7, #5
 800afba:	d807      	bhi.n	800afcc <_strtod_l+0xfc>
 800afbc:	e8df f007 	tbb	[pc, r7]
 800afc0:	1d180b0e 	.word	0x1d180b0e
 800afc4:	030e      	.short	0x030e
 800afc6:	f04f 0b00 	mov.w	fp, #0
 800afca:	46da      	mov	sl, fp
 800afcc:	0728      	lsls	r0, r5, #28
 800afce:	d5c1      	bpl.n	800af54 <_strtod_l+0x84>
 800afd0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800afd4:	e7be      	b.n	800af54 <_strtod_l+0x84>
 800afd6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800afda:	e7f7      	b.n	800afcc <_strtod_l+0xfc>
 800afdc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800afe0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800afe2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800afe6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800afea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800afee:	e7ed      	b.n	800afcc <_strtod_l+0xfc>
 800aff0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b178 <_strtod_l+0x2a8>
 800aff4:	f04f 0a00 	mov.w	sl, #0
 800aff8:	e7e8      	b.n	800afcc <_strtod_l+0xfc>
 800affa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800affe:	f04f 3aff 	mov.w	sl, #4294967295
 800b002:	e7e3      	b.n	800afcc <_strtod_l+0xfc>
 800b004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	921d      	str	r2, [sp, #116]	; 0x74
 800b00a:	785b      	ldrb	r3, [r3, #1]
 800b00c:	2b30      	cmp	r3, #48	; 0x30
 800b00e:	d0f9      	beq.n	800b004 <_strtod_l+0x134>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d09f      	beq.n	800af54 <_strtod_l+0x84>
 800b014:	2301      	movs	r3, #1
 800b016:	f04f 0900 	mov.w	r9, #0
 800b01a:	9304      	str	r3, [sp, #16]
 800b01c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b01e:	930a      	str	r3, [sp, #40]	; 0x28
 800b020:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b024:	464f      	mov	r7, r9
 800b026:	220a      	movs	r2, #10
 800b028:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b02a:	7806      	ldrb	r6, [r0, #0]
 800b02c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b030:	b2d9      	uxtb	r1, r3
 800b032:	2909      	cmp	r1, #9
 800b034:	d92a      	bls.n	800b08c <_strtod_l+0x1bc>
 800b036:	9907      	ldr	r1, [sp, #28]
 800b038:	462a      	mov	r2, r5
 800b03a:	f003 fb4c 	bl	800e6d6 <strncmp>
 800b03e:	b398      	cbz	r0, 800b0a8 <_strtod_l+0x1d8>
 800b040:	2000      	movs	r0, #0
 800b042:	4633      	mov	r3, r6
 800b044:	463d      	mov	r5, r7
 800b046:	9007      	str	r0, [sp, #28]
 800b048:	4602      	mov	r2, r0
 800b04a:	2b65      	cmp	r3, #101	; 0x65
 800b04c:	d001      	beq.n	800b052 <_strtod_l+0x182>
 800b04e:	2b45      	cmp	r3, #69	; 0x45
 800b050:	d118      	bne.n	800b084 <_strtod_l+0x1b4>
 800b052:	b91d      	cbnz	r5, 800b05c <_strtod_l+0x18c>
 800b054:	9b04      	ldr	r3, [sp, #16]
 800b056:	4303      	orrs	r3, r0
 800b058:	d098      	beq.n	800af8c <_strtod_l+0xbc>
 800b05a:	2500      	movs	r5, #0
 800b05c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b060:	f108 0301 	add.w	r3, r8, #1
 800b064:	931d      	str	r3, [sp, #116]	; 0x74
 800b066:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b06a:	2b2b      	cmp	r3, #43	; 0x2b
 800b06c:	d075      	beq.n	800b15a <_strtod_l+0x28a>
 800b06e:	2b2d      	cmp	r3, #45	; 0x2d
 800b070:	d07b      	beq.n	800b16a <_strtod_l+0x29a>
 800b072:	f04f 0c00 	mov.w	ip, #0
 800b076:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b07a:	2909      	cmp	r1, #9
 800b07c:	f240 8082 	bls.w	800b184 <_strtod_l+0x2b4>
 800b080:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b084:	2600      	movs	r6, #0
 800b086:	e09d      	b.n	800b1c4 <_strtod_l+0x2f4>
 800b088:	2300      	movs	r3, #0
 800b08a:	e7c4      	b.n	800b016 <_strtod_l+0x146>
 800b08c:	2f08      	cmp	r7, #8
 800b08e:	bfd8      	it	le
 800b090:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b092:	f100 0001 	add.w	r0, r0, #1
 800b096:	bfda      	itte	le
 800b098:	fb02 3301 	mlale	r3, r2, r1, r3
 800b09c:	9309      	strle	r3, [sp, #36]	; 0x24
 800b09e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b0a2:	3701      	adds	r7, #1
 800b0a4:	901d      	str	r0, [sp, #116]	; 0x74
 800b0a6:	e7bf      	b.n	800b028 <_strtod_l+0x158>
 800b0a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0aa:	195a      	adds	r2, r3, r5
 800b0ac:	921d      	str	r2, [sp, #116]	; 0x74
 800b0ae:	5d5b      	ldrb	r3, [r3, r5]
 800b0b0:	2f00      	cmp	r7, #0
 800b0b2:	d037      	beq.n	800b124 <_strtod_l+0x254>
 800b0b4:	9007      	str	r0, [sp, #28]
 800b0b6:	463d      	mov	r5, r7
 800b0b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b0bc:	2a09      	cmp	r2, #9
 800b0be:	d912      	bls.n	800b0e6 <_strtod_l+0x216>
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	e7c2      	b.n	800b04a <_strtod_l+0x17a>
 800b0c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	921d      	str	r2, [sp, #116]	; 0x74
 800b0ca:	785b      	ldrb	r3, [r3, #1]
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	2b30      	cmp	r3, #48	; 0x30
 800b0d0:	d0f8      	beq.n	800b0c4 <_strtod_l+0x1f4>
 800b0d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b0d6:	2a08      	cmp	r2, #8
 800b0d8:	f200 84db 	bhi.w	800ba92 <_strtod_l+0xbc2>
 800b0dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b0de:	9007      	str	r0, [sp, #28]
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	920a      	str	r2, [sp, #40]	; 0x28
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	3b30      	subs	r3, #48	; 0x30
 800b0e8:	f100 0201 	add.w	r2, r0, #1
 800b0ec:	d014      	beq.n	800b118 <_strtod_l+0x248>
 800b0ee:	9907      	ldr	r1, [sp, #28]
 800b0f0:	4411      	add	r1, r2
 800b0f2:	9107      	str	r1, [sp, #28]
 800b0f4:	462a      	mov	r2, r5
 800b0f6:	eb00 0e05 	add.w	lr, r0, r5
 800b0fa:	210a      	movs	r1, #10
 800b0fc:	4572      	cmp	r2, lr
 800b0fe:	d113      	bne.n	800b128 <_strtod_l+0x258>
 800b100:	182a      	adds	r2, r5, r0
 800b102:	2a08      	cmp	r2, #8
 800b104:	f105 0501 	add.w	r5, r5, #1
 800b108:	4405      	add	r5, r0
 800b10a:	dc1c      	bgt.n	800b146 <_strtod_l+0x276>
 800b10c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b10e:	220a      	movs	r2, #10
 800b110:	fb02 3301 	mla	r3, r2, r1, r3
 800b114:	9309      	str	r3, [sp, #36]	; 0x24
 800b116:	2200      	movs	r2, #0
 800b118:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b11a:	1c59      	adds	r1, r3, #1
 800b11c:	911d      	str	r1, [sp, #116]	; 0x74
 800b11e:	785b      	ldrb	r3, [r3, #1]
 800b120:	4610      	mov	r0, r2
 800b122:	e7c9      	b.n	800b0b8 <_strtod_l+0x1e8>
 800b124:	4638      	mov	r0, r7
 800b126:	e7d2      	b.n	800b0ce <_strtod_l+0x1fe>
 800b128:	2a08      	cmp	r2, #8
 800b12a:	dc04      	bgt.n	800b136 <_strtod_l+0x266>
 800b12c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b12e:	434e      	muls	r6, r1
 800b130:	9609      	str	r6, [sp, #36]	; 0x24
 800b132:	3201      	adds	r2, #1
 800b134:	e7e2      	b.n	800b0fc <_strtod_l+0x22c>
 800b136:	f102 0c01 	add.w	ip, r2, #1
 800b13a:	f1bc 0f10 	cmp.w	ip, #16
 800b13e:	bfd8      	it	le
 800b140:	fb01 f909 	mulle.w	r9, r1, r9
 800b144:	e7f5      	b.n	800b132 <_strtod_l+0x262>
 800b146:	2d10      	cmp	r5, #16
 800b148:	bfdc      	itt	le
 800b14a:	220a      	movle	r2, #10
 800b14c:	fb02 3909 	mlale	r9, r2, r9, r3
 800b150:	e7e1      	b.n	800b116 <_strtod_l+0x246>
 800b152:	2300      	movs	r3, #0
 800b154:	9307      	str	r3, [sp, #28]
 800b156:	2201      	movs	r2, #1
 800b158:	e77c      	b.n	800b054 <_strtod_l+0x184>
 800b15a:	f04f 0c00 	mov.w	ip, #0
 800b15e:	f108 0302 	add.w	r3, r8, #2
 800b162:	931d      	str	r3, [sp, #116]	; 0x74
 800b164:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b168:	e785      	b.n	800b076 <_strtod_l+0x1a6>
 800b16a:	f04f 0c01 	mov.w	ip, #1
 800b16e:	e7f6      	b.n	800b15e <_strtod_l+0x28e>
 800b170:	0800f074 	.word	0x0800f074
 800b174:	0800edc0 	.word	0x0800edc0
 800b178:	7ff00000 	.word	0x7ff00000
 800b17c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b17e:	1c59      	adds	r1, r3, #1
 800b180:	911d      	str	r1, [sp, #116]	; 0x74
 800b182:	785b      	ldrb	r3, [r3, #1]
 800b184:	2b30      	cmp	r3, #48	; 0x30
 800b186:	d0f9      	beq.n	800b17c <_strtod_l+0x2ac>
 800b188:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b18c:	2908      	cmp	r1, #8
 800b18e:	f63f af79 	bhi.w	800b084 <_strtod_l+0x1b4>
 800b192:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b196:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b198:	9308      	str	r3, [sp, #32]
 800b19a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b19c:	1c59      	adds	r1, r3, #1
 800b19e:	911d      	str	r1, [sp, #116]	; 0x74
 800b1a0:	785b      	ldrb	r3, [r3, #1]
 800b1a2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b1a6:	2e09      	cmp	r6, #9
 800b1a8:	d937      	bls.n	800b21a <_strtod_l+0x34a>
 800b1aa:	9e08      	ldr	r6, [sp, #32]
 800b1ac:	1b89      	subs	r1, r1, r6
 800b1ae:	2908      	cmp	r1, #8
 800b1b0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b1b4:	dc02      	bgt.n	800b1bc <_strtod_l+0x2ec>
 800b1b6:	4576      	cmp	r6, lr
 800b1b8:	bfa8      	it	ge
 800b1ba:	4676      	movge	r6, lr
 800b1bc:	f1bc 0f00 	cmp.w	ip, #0
 800b1c0:	d000      	beq.n	800b1c4 <_strtod_l+0x2f4>
 800b1c2:	4276      	negs	r6, r6
 800b1c4:	2d00      	cmp	r5, #0
 800b1c6:	d14f      	bne.n	800b268 <_strtod_l+0x398>
 800b1c8:	9904      	ldr	r1, [sp, #16]
 800b1ca:	4301      	orrs	r1, r0
 800b1cc:	f47f aec2 	bne.w	800af54 <_strtod_l+0x84>
 800b1d0:	2a00      	cmp	r2, #0
 800b1d2:	f47f aedb 	bne.w	800af8c <_strtod_l+0xbc>
 800b1d6:	2b69      	cmp	r3, #105	; 0x69
 800b1d8:	d027      	beq.n	800b22a <_strtod_l+0x35a>
 800b1da:	dc24      	bgt.n	800b226 <_strtod_l+0x356>
 800b1dc:	2b49      	cmp	r3, #73	; 0x49
 800b1de:	d024      	beq.n	800b22a <_strtod_l+0x35a>
 800b1e0:	2b4e      	cmp	r3, #78	; 0x4e
 800b1e2:	f47f aed3 	bne.w	800af8c <_strtod_l+0xbc>
 800b1e6:	499e      	ldr	r1, [pc, #632]	; (800b460 <_strtod_l+0x590>)
 800b1e8:	a81d      	add	r0, sp, #116	; 0x74
 800b1ea:	f002 f8b7 	bl	800d35c <__match>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	f43f aecc 	beq.w	800af8c <_strtod_l+0xbc>
 800b1f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	2b28      	cmp	r3, #40	; 0x28
 800b1fa:	d12d      	bne.n	800b258 <_strtod_l+0x388>
 800b1fc:	4999      	ldr	r1, [pc, #612]	; (800b464 <_strtod_l+0x594>)
 800b1fe:	aa20      	add	r2, sp, #128	; 0x80
 800b200:	a81d      	add	r0, sp, #116	; 0x74
 800b202:	f002 f8bf 	bl	800d384 <__hexnan>
 800b206:	2805      	cmp	r0, #5
 800b208:	d126      	bne.n	800b258 <_strtod_l+0x388>
 800b20a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b20c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b210:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b214:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b218:	e69c      	b.n	800af54 <_strtod_l+0x84>
 800b21a:	210a      	movs	r1, #10
 800b21c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b220:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b224:	e7b9      	b.n	800b19a <_strtod_l+0x2ca>
 800b226:	2b6e      	cmp	r3, #110	; 0x6e
 800b228:	e7db      	b.n	800b1e2 <_strtod_l+0x312>
 800b22a:	498f      	ldr	r1, [pc, #572]	; (800b468 <_strtod_l+0x598>)
 800b22c:	a81d      	add	r0, sp, #116	; 0x74
 800b22e:	f002 f895 	bl	800d35c <__match>
 800b232:	2800      	cmp	r0, #0
 800b234:	f43f aeaa 	beq.w	800af8c <_strtod_l+0xbc>
 800b238:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b23a:	498c      	ldr	r1, [pc, #560]	; (800b46c <_strtod_l+0x59c>)
 800b23c:	3b01      	subs	r3, #1
 800b23e:	a81d      	add	r0, sp, #116	; 0x74
 800b240:	931d      	str	r3, [sp, #116]	; 0x74
 800b242:	f002 f88b 	bl	800d35c <__match>
 800b246:	b910      	cbnz	r0, 800b24e <_strtod_l+0x37e>
 800b248:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b24a:	3301      	adds	r3, #1
 800b24c:	931d      	str	r3, [sp, #116]	; 0x74
 800b24e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b47c <_strtod_l+0x5ac>
 800b252:	f04f 0a00 	mov.w	sl, #0
 800b256:	e67d      	b.n	800af54 <_strtod_l+0x84>
 800b258:	4885      	ldr	r0, [pc, #532]	; (800b470 <_strtod_l+0x5a0>)
 800b25a:	f003 f9e1 	bl	800e620 <nan>
 800b25e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b262:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b266:	e675      	b.n	800af54 <_strtod_l+0x84>
 800b268:	9b07      	ldr	r3, [sp, #28]
 800b26a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b26c:	1af3      	subs	r3, r6, r3
 800b26e:	2f00      	cmp	r7, #0
 800b270:	bf08      	it	eq
 800b272:	462f      	moveq	r7, r5
 800b274:	2d10      	cmp	r5, #16
 800b276:	9308      	str	r3, [sp, #32]
 800b278:	46a8      	mov	r8, r5
 800b27a:	bfa8      	it	ge
 800b27c:	f04f 0810 	movge.w	r8, #16
 800b280:	f7f5 f940 	bl	8000504 <__aeabi_ui2d>
 800b284:	2d09      	cmp	r5, #9
 800b286:	4682      	mov	sl, r0
 800b288:	468b      	mov	fp, r1
 800b28a:	dd13      	ble.n	800b2b4 <_strtod_l+0x3e4>
 800b28c:	4b79      	ldr	r3, [pc, #484]	; (800b474 <_strtod_l+0x5a4>)
 800b28e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b292:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b296:	f7f5 f9af 	bl	80005f8 <__aeabi_dmul>
 800b29a:	4682      	mov	sl, r0
 800b29c:	4648      	mov	r0, r9
 800b29e:	468b      	mov	fp, r1
 800b2a0:	f7f5 f930 	bl	8000504 <__aeabi_ui2d>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	4650      	mov	r0, sl
 800b2aa:	4659      	mov	r1, fp
 800b2ac:	f7f4 ffee 	bl	800028c <__adddf3>
 800b2b0:	4682      	mov	sl, r0
 800b2b2:	468b      	mov	fp, r1
 800b2b4:	2d0f      	cmp	r5, #15
 800b2b6:	dc38      	bgt.n	800b32a <_strtod_l+0x45a>
 800b2b8:	9b08      	ldr	r3, [sp, #32]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f43f ae4a 	beq.w	800af54 <_strtod_l+0x84>
 800b2c0:	dd24      	ble.n	800b30c <_strtod_l+0x43c>
 800b2c2:	2b16      	cmp	r3, #22
 800b2c4:	dc0b      	bgt.n	800b2de <_strtod_l+0x40e>
 800b2c6:	4d6b      	ldr	r5, [pc, #428]	; (800b474 <_strtod_l+0x5a4>)
 800b2c8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b2cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b2d0:	4652      	mov	r2, sl
 800b2d2:	465b      	mov	r3, fp
 800b2d4:	f7f5 f990 	bl	80005f8 <__aeabi_dmul>
 800b2d8:	4682      	mov	sl, r0
 800b2da:	468b      	mov	fp, r1
 800b2dc:	e63a      	b.n	800af54 <_strtod_l+0x84>
 800b2de:	9a08      	ldr	r2, [sp, #32]
 800b2e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	db20      	blt.n	800b32a <_strtod_l+0x45a>
 800b2e8:	4c62      	ldr	r4, [pc, #392]	; (800b474 <_strtod_l+0x5a4>)
 800b2ea:	f1c5 050f 	rsb	r5, r5, #15
 800b2ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	465b      	mov	r3, fp
 800b2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2fa:	f7f5 f97d 	bl	80005f8 <__aeabi_dmul>
 800b2fe:	9b08      	ldr	r3, [sp, #32]
 800b300:	1b5d      	subs	r5, r3, r5
 800b302:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b306:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b30a:	e7e3      	b.n	800b2d4 <_strtod_l+0x404>
 800b30c:	9b08      	ldr	r3, [sp, #32]
 800b30e:	3316      	adds	r3, #22
 800b310:	db0b      	blt.n	800b32a <_strtod_l+0x45a>
 800b312:	9b07      	ldr	r3, [sp, #28]
 800b314:	4a57      	ldr	r2, [pc, #348]	; (800b474 <_strtod_l+0x5a4>)
 800b316:	1b9e      	subs	r6, r3, r6
 800b318:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b31c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b320:	4650      	mov	r0, sl
 800b322:	4659      	mov	r1, fp
 800b324:	f7f5 fa92 	bl	800084c <__aeabi_ddiv>
 800b328:	e7d6      	b.n	800b2d8 <_strtod_l+0x408>
 800b32a:	9b08      	ldr	r3, [sp, #32]
 800b32c:	eba5 0808 	sub.w	r8, r5, r8
 800b330:	4498      	add	r8, r3
 800b332:	f1b8 0f00 	cmp.w	r8, #0
 800b336:	dd71      	ble.n	800b41c <_strtod_l+0x54c>
 800b338:	f018 030f 	ands.w	r3, r8, #15
 800b33c:	d00a      	beq.n	800b354 <_strtod_l+0x484>
 800b33e:	494d      	ldr	r1, [pc, #308]	; (800b474 <_strtod_l+0x5a4>)
 800b340:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b344:	4652      	mov	r2, sl
 800b346:	465b      	mov	r3, fp
 800b348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b34c:	f7f5 f954 	bl	80005f8 <__aeabi_dmul>
 800b350:	4682      	mov	sl, r0
 800b352:	468b      	mov	fp, r1
 800b354:	f038 080f 	bics.w	r8, r8, #15
 800b358:	d04d      	beq.n	800b3f6 <_strtod_l+0x526>
 800b35a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b35e:	dd22      	ble.n	800b3a6 <_strtod_l+0x4d6>
 800b360:	2500      	movs	r5, #0
 800b362:	462e      	mov	r6, r5
 800b364:	9509      	str	r5, [sp, #36]	; 0x24
 800b366:	9507      	str	r5, [sp, #28]
 800b368:	2322      	movs	r3, #34	; 0x22
 800b36a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b47c <_strtod_l+0x5ac>
 800b36e:	6023      	str	r3, [r4, #0]
 800b370:	f04f 0a00 	mov.w	sl, #0
 800b374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b376:	2b00      	cmp	r3, #0
 800b378:	f43f adec 	beq.w	800af54 <_strtod_l+0x84>
 800b37c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b37e:	4620      	mov	r0, r4
 800b380:	f002 f962 	bl	800d648 <_Bfree>
 800b384:	9907      	ldr	r1, [sp, #28]
 800b386:	4620      	mov	r0, r4
 800b388:	f002 f95e 	bl	800d648 <_Bfree>
 800b38c:	4631      	mov	r1, r6
 800b38e:	4620      	mov	r0, r4
 800b390:	f002 f95a 	bl	800d648 <_Bfree>
 800b394:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b396:	4620      	mov	r0, r4
 800b398:	f002 f956 	bl	800d648 <_Bfree>
 800b39c:	4629      	mov	r1, r5
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f002 f952 	bl	800d648 <_Bfree>
 800b3a4:	e5d6      	b.n	800af54 <_strtod_l+0x84>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b3ac:	4650      	mov	r0, sl
 800b3ae:	4659      	mov	r1, fp
 800b3b0:	4699      	mov	r9, r3
 800b3b2:	f1b8 0f01 	cmp.w	r8, #1
 800b3b6:	dc21      	bgt.n	800b3fc <_strtod_l+0x52c>
 800b3b8:	b10b      	cbz	r3, 800b3be <_strtod_l+0x4ee>
 800b3ba:	4682      	mov	sl, r0
 800b3bc:	468b      	mov	fp, r1
 800b3be:	4b2e      	ldr	r3, [pc, #184]	; (800b478 <_strtod_l+0x5a8>)
 800b3c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b3c4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b3c8:	4652      	mov	r2, sl
 800b3ca:	465b      	mov	r3, fp
 800b3cc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b3d0:	f7f5 f912 	bl	80005f8 <__aeabi_dmul>
 800b3d4:	4b29      	ldr	r3, [pc, #164]	; (800b47c <_strtod_l+0x5ac>)
 800b3d6:	460a      	mov	r2, r1
 800b3d8:	400b      	ands	r3, r1
 800b3da:	4929      	ldr	r1, [pc, #164]	; (800b480 <_strtod_l+0x5b0>)
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	4682      	mov	sl, r0
 800b3e0:	d8be      	bhi.n	800b360 <_strtod_l+0x490>
 800b3e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b3e6:	428b      	cmp	r3, r1
 800b3e8:	bf86      	itte	hi
 800b3ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b484 <_strtod_l+0x5b4>
 800b3ee:	f04f 3aff 	movhi.w	sl, #4294967295
 800b3f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	e081      	b.n	800b500 <_strtod_l+0x630>
 800b3fc:	f018 0f01 	tst.w	r8, #1
 800b400:	d007      	beq.n	800b412 <_strtod_l+0x542>
 800b402:	4b1d      	ldr	r3, [pc, #116]	; (800b478 <_strtod_l+0x5a8>)
 800b404:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40c:	f7f5 f8f4 	bl	80005f8 <__aeabi_dmul>
 800b410:	2301      	movs	r3, #1
 800b412:	f109 0901 	add.w	r9, r9, #1
 800b416:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b41a:	e7ca      	b.n	800b3b2 <_strtod_l+0x4e2>
 800b41c:	d0eb      	beq.n	800b3f6 <_strtod_l+0x526>
 800b41e:	f1c8 0800 	rsb	r8, r8, #0
 800b422:	f018 020f 	ands.w	r2, r8, #15
 800b426:	d00a      	beq.n	800b43e <_strtod_l+0x56e>
 800b428:	4b12      	ldr	r3, [pc, #72]	; (800b474 <_strtod_l+0x5a4>)
 800b42a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b42e:	4650      	mov	r0, sl
 800b430:	4659      	mov	r1, fp
 800b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b436:	f7f5 fa09 	bl	800084c <__aeabi_ddiv>
 800b43a:	4682      	mov	sl, r0
 800b43c:	468b      	mov	fp, r1
 800b43e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b442:	d0d8      	beq.n	800b3f6 <_strtod_l+0x526>
 800b444:	f1b8 0f1f 	cmp.w	r8, #31
 800b448:	dd1e      	ble.n	800b488 <_strtod_l+0x5b8>
 800b44a:	2500      	movs	r5, #0
 800b44c:	462e      	mov	r6, r5
 800b44e:	9509      	str	r5, [sp, #36]	; 0x24
 800b450:	9507      	str	r5, [sp, #28]
 800b452:	2322      	movs	r3, #34	; 0x22
 800b454:	f04f 0a00 	mov.w	sl, #0
 800b458:	f04f 0b00 	mov.w	fp, #0
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	e789      	b.n	800b374 <_strtod_l+0x4a4>
 800b460:	0800ed91 	.word	0x0800ed91
 800b464:	0800edd4 	.word	0x0800edd4
 800b468:	0800ed89 	.word	0x0800ed89
 800b46c:	0800ef14 	.word	0x0800ef14
 800b470:	0800f230 	.word	0x0800f230
 800b474:	0800f110 	.word	0x0800f110
 800b478:	0800f0e8 	.word	0x0800f0e8
 800b47c:	7ff00000 	.word	0x7ff00000
 800b480:	7ca00000 	.word	0x7ca00000
 800b484:	7fefffff 	.word	0x7fefffff
 800b488:	f018 0310 	ands.w	r3, r8, #16
 800b48c:	bf18      	it	ne
 800b48e:	236a      	movne	r3, #106	; 0x6a
 800b490:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b848 <_strtod_l+0x978>
 800b494:	9304      	str	r3, [sp, #16]
 800b496:	4650      	mov	r0, sl
 800b498:	4659      	mov	r1, fp
 800b49a:	2300      	movs	r3, #0
 800b49c:	f018 0f01 	tst.w	r8, #1
 800b4a0:	d004      	beq.n	800b4ac <_strtod_l+0x5dc>
 800b4a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b4a6:	f7f5 f8a7 	bl	80005f8 <__aeabi_dmul>
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b4b0:	f109 0908 	add.w	r9, r9, #8
 800b4b4:	d1f2      	bne.n	800b49c <_strtod_l+0x5cc>
 800b4b6:	b10b      	cbz	r3, 800b4bc <_strtod_l+0x5ec>
 800b4b8:	4682      	mov	sl, r0
 800b4ba:	468b      	mov	fp, r1
 800b4bc:	9b04      	ldr	r3, [sp, #16]
 800b4be:	b1bb      	cbz	r3, 800b4f0 <_strtod_l+0x620>
 800b4c0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b4c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	4659      	mov	r1, fp
 800b4cc:	dd10      	ble.n	800b4f0 <_strtod_l+0x620>
 800b4ce:	2b1f      	cmp	r3, #31
 800b4d0:	f340 8128 	ble.w	800b724 <_strtod_l+0x854>
 800b4d4:	2b34      	cmp	r3, #52	; 0x34
 800b4d6:	bfde      	ittt	le
 800b4d8:	3b20      	suble	r3, #32
 800b4da:	f04f 32ff 	movle.w	r2, #4294967295
 800b4de:	fa02 f303 	lslle.w	r3, r2, r3
 800b4e2:	f04f 0a00 	mov.w	sl, #0
 800b4e6:	bfcc      	ite	gt
 800b4e8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b4ec:	ea03 0b01 	andle.w	fp, r3, r1
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	4650      	mov	r0, sl
 800b4f6:	4659      	mov	r1, fp
 800b4f8:	f7f5 fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d1a4      	bne.n	800b44a <_strtod_l+0x57a>
 800b500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b506:	462b      	mov	r3, r5
 800b508:	463a      	mov	r2, r7
 800b50a:	4620      	mov	r0, r4
 800b50c:	f002 f908 	bl	800d720 <__s2b>
 800b510:	9009      	str	r0, [sp, #36]	; 0x24
 800b512:	2800      	cmp	r0, #0
 800b514:	f43f af24 	beq.w	800b360 <_strtod_l+0x490>
 800b518:	9b07      	ldr	r3, [sp, #28]
 800b51a:	1b9e      	subs	r6, r3, r6
 800b51c:	9b08      	ldr	r3, [sp, #32]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bfb4      	ite	lt
 800b522:	4633      	movlt	r3, r6
 800b524:	2300      	movge	r3, #0
 800b526:	9310      	str	r3, [sp, #64]	; 0x40
 800b528:	9b08      	ldr	r3, [sp, #32]
 800b52a:	2500      	movs	r5, #0
 800b52c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b530:	9318      	str	r3, [sp, #96]	; 0x60
 800b532:	462e      	mov	r6, r5
 800b534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b536:	4620      	mov	r0, r4
 800b538:	6859      	ldr	r1, [r3, #4]
 800b53a:	f002 f845 	bl	800d5c8 <_Balloc>
 800b53e:	9007      	str	r0, [sp, #28]
 800b540:	2800      	cmp	r0, #0
 800b542:	f43f af11 	beq.w	800b368 <_strtod_l+0x498>
 800b546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b548:	691a      	ldr	r2, [r3, #16]
 800b54a:	3202      	adds	r2, #2
 800b54c:	f103 010c 	add.w	r1, r3, #12
 800b550:	0092      	lsls	r2, r2, #2
 800b552:	300c      	adds	r0, #12
 800b554:	f7fe fd5a 	bl	800a00c <memcpy>
 800b558:	ec4b ab10 	vmov	d0, sl, fp
 800b55c:	aa20      	add	r2, sp, #128	; 0x80
 800b55e:	a91f      	add	r1, sp, #124	; 0x7c
 800b560:	4620      	mov	r0, r4
 800b562:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b566:	f002 fc17 	bl	800dd98 <__d2b>
 800b56a:	901e      	str	r0, [sp, #120]	; 0x78
 800b56c:	2800      	cmp	r0, #0
 800b56e:	f43f aefb 	beq.w	800b368 <_strtod_l+0x498>
 800b572:	2101      	movs	r1, #1
 800b574:	4620      	mov	r0, r4
 800b576:	f002 f96d 	bl	800d854 <__i2b>
 800b57a:	4606      	mov	r6, r0
 800b57c:	2800      	cmp	r0, #0
 800b57e:	f43f aef3 	beq.w	800b368 <_strtod_l+0x498>
 800b582:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b584:	9904      	ldr	r1, [sp, #16]
 800b586:	2b00      	cmp	r3, #0
 800b588:	bfab      	itete	ge
 800b58a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b58c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b58e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b590:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b594:	bfac      	ite	ge
 800b596:	eb03 0902 	addge.w	r9, r3, r2
 800b59a:	1ad7      	sublt	r7, r2, r3
 800b59c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b59e:	eba3 0801 	sub.w	r8, r3, r1
 800b5a2:	4490      	add	r8, r2
 800b5a4:	4ba3      	ldr	r3, [pc, #652]	; (800b834 <_strtod_l+0x964>)
 800b5a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b5aa:	4598      	cmp	r8, r3
 800b5ac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b5b0:	f280 80cc 	bge.w	800b74c <_strtod_l+0x87c>
 800b5b4:	eba3 0308 	sub.w	r3, r3, r8
 800b5b8:	2b1f      	cmp	r3, #31
 800b5ba:	eba2 0203 	sub.w	r2, r2, r3
 800b5be:	f04f 0101 	mov.w	r1, #1
 800b5c2:	f300 80b6 	bgt.w	800b732 <_strtod_l+0x862>
 800b5c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ca:	9311      	str	r3, [sp, #68]	; 0x44
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b5d0:	eb09 0802 	add.w	r8, r9, r2
 800b5d4:	9b04      	ldr	r3, [sp, #16]
 800b5d6:	45c1      	cmp	r9, r8
 800b5d8:	4417      	add	r7, r2
 800b5da:	441f      	add	r7, r3
 800b5dc:	464b      	mov	r3, r9
 800b5de:	bfa8      	it	ge
 800b5e0:	4643      	movge	r3, r8
 800b5e2:	42bb      	cmp	r3, r7
 800b5e4:	bfa8      	it	ge
 800b5e6:	463b      	movge	r3, r7
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	bfc2      	ittt	gt
 800b5ec:	eba8 0803 	subgt.w	r8, r8, r3
 800b5f0:	1aff      	subgt	r7, r7, r3
 800b5f2:	eba9 0903 	subgt.w	r9, r9, r3
 800b5f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	dd17      	ble.n	800b62c <_strtod_l+0x75c>
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	461a      	mov	r2, r3
 800b600:	4620      	mov	r0, r4
 800b602:	f002 f9e3 	bl	800d9cc <__pow5mult>
 800b606:	4606      	mov	r6, r0
 800b608:	2800      	cmp	r0, #0
 800b60a:	f43f aead 	beq.w	800b368 <_strtod_l+0x498>
 800b60e:	4601      	mov	r1, r0
 800b610:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b612:	4620      	mov	r0, r4
 800b614:	f002 f934 	bl	800d880 <__multiply>
 800b618:	900f      	str	r0, [sp, #60]	; 0x3c
 800b61a:	2800      	cmp	r0, #0
 800b61c:	f43f aea4 	beq.w	800b368 <_strtod_l+0x498>
 800b620:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b622:	4620      	mov	r0, r4
 800b624:	f002 f810 	bl	800d648 <_Bfree>
 800b628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b62a:	931e      	str	r3, [sp, #120]	; 0x78
 800b62c:	f1b8 0f00 	cmp.w	r8, #0
 800b630:	f300 8091 	bgt.w	800b756 <_strtod_l+0x886>
 800b634:	9b08      	ldr	r3, [sp, #32]
 800b636:	2b00      	cmp	r3, #0
 800b638:	dd08      	ble.n	800b64c <_strtod_l+0x77c>
 800b63a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b63c:	9907      	ldr	r1, [sp, #28]
 800b63e:	4620      	mov	r0, r4
 800b640:	f002 f9c4 	bl	800d9cc <__pow5mult>
 800b644:	9007      	str	r0, [sp, #28]
 800b646:	2800      	cmp	r0, #0
 800b648:	f43f ae8e 	beq.w	800b368 <_strtod_l+0x498>
 800b64c:	2f00      	cmp	r7, #0
 800b64e:	dd08      	ble.n	800b662 <_strtod_l+0x792>
 800b650:	9907      	ldr	r1, [sp, #28]
 800b652:	463a      	mov	r2, r7
 800b654:	4620      	mov	r0, r4
 800b656:	f002 fa13 	bl	800da80 <__lshift>
 800b65a:	9007      	str	r0, [sp, #28]
 800b65c:	2800      	cmp	r0, #0
 800b65e:	f43f ae83 	beq.w	800b368 <_strtod_l+0x498>
 800b662:	f1b9 0f00 	cmp.w	r9, #0
 800b666:	dd08      	ble.n	800b67a <_strtod_l+0x7aa>
 800b668:	4631      	mov	r1, r6
 800b66a:	464a      	mov	r2, r9
 800b66c:	4620      	mov	r0, r4
 800b66e:	f002 fa07 	bl	800da80 <__lshift>
 800b672:	4606      	mov	r6, r0
 800b674:	2800      	cmp	r0, #0
 800b676:	f43f ae77 	beq.w	800b368 <_strtod_l+0x498>
 800b67a:	9a07      	ldr	r2, [sp, #28]
 800b67c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b67e:	4620      	mov	r0, r4
 800b680:	f002 fa86 	bl	800db90 <__mdiff>
 800b684:	4605      	mov	r5, r0
 800b686:	2800      	cmp	r0, #0
 800b688:	f43f ae6e 	beq.w	800b368 <_strtod_l+0x498>
 800b68c:	68c3      	ldr	r3, [r0, #12]
 800b68e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b690:	2300      	movs	r3, #0
 800b692:	60c3      	str	r3, [r0, #12]
 800b694:	4631      	mov	r1, r6
 800b696:	f002 fa5f 	bl	800db58 <__mcmp>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	da65      	bge.n	800b76a <_strtod_l+0x89a>
 800b69e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6a0:	ea53 030a 	orrs.w	r3, r3, sl
 800b6a4:	f040 8087 	bne.w	800b7b6 <_strtod_l+0x8e6>
 800b6a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f040 8082 	bne.w	800b7b6 <_strtod_l+0x8e6>
 800b6b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6b6:	0d1b      	lsrs	r3, r3, #20
 800b6b8:	051b      	lsls	r3, r3, #20
 800b6ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b6be:	d97a      	bls.n	800b7b6 <_strtod_l+0x8e6>
 800b6c0:	696b      	ldr	r3, [r5, #20]
 800b6c2:	b913      	cbnz	r3, 800b6ca <_strtod_l+0x7fa>
 800b6c4:	692b      	ldr	r3, [r5, #16]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	dd75      	ble.n	800b7b6 <_strtod_l+0x8e6>
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f002 f9d6 	bl	800da80 <__lshift>
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	f002 fa3e 	bl	800db58 <__mcmp>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	dd6a      	ble.n	800b7b6 <_strtod_l+0x8e6>
 800b6e0:	9904      	ldr	r1, [sp, #16]
 800b6e2:	4a55      	ldr	r2, [pc, #340]	; (800b838 <_strtod_l+0x968>)
 800b6e4:	465b      	mov	r3, fp
 800b6e6:	2900      	cmp	r1, #0
 800b6e8:	f000 8085 	beq.w	800b7f6 <_strtod_l+0x926>
 800b6ec:	ea02 010b 	and.w	r1, r2, fp
 800b6f0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b6f4:	dc7f      	bgt.n	800b7f6 <_strtod_l+0x926>
 800b6f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b6fa:	f77f aeaa 	ble.w	800b452 <_strtod_l+0x582>
 800b6fe:	4a4f      	ldr	r2, [pc, #316]	; (800b83c <_strtod_l+0x96c>)
 800b700:	2300      	movs	r3, #0
 800b702:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800b706:	4650      	mov	r0, sl
 800b708:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800b70c:	4659      	mov	r1, fp
 800b70e:	f7f4 ff73 	bl	80005f8 <__aeabi_dmul>
 800b712:	460b      	mov	r3, r1
 800b714:	4303      	orrs	r3, r0
 800b716:	bf08      	it	eq
 800b718:	2322      	moveq	r3, #34	; 0x22
 800b71a:	4682      	mov	sl, r0
 800b71c:	468b      	mov	fp, r1
 800b71e:	bf08      	it	eq
 800b720:	6023      	streq	r3, [r4, #0]
 800b722:	e62b      	b.n	800b37c <_strtod_l+0x4ac>
 800b724:	f04f 32ff 	mov.w	r2, #4294967295
 800b728:	fa02 f303 	lsl.w	r3, r2, r3
 800b72c:	ea03 0a0a 	and.w	sl, r3, sl
 800b730:	e6de      	b.n	800b4f0 <_strtod_l+0x620>
 800b732:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b736:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b73a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b73e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b742:	fa01 f308 	lsl.w	r3, r1, r8
 800b746:	930c      	str	r3, [sp, #48]	; 0x30
 800b748:	9111      	str	r1, [sp, #68]	; 0x44
 800b74a:	e741      	b.n	800b5d0 <_strtod_l+0x700>
 800b74c:	2300      	movs	r3, #0
 800b74e:	930c      	str	r3, [sp, #48]	; 0x30
 800b750:	2301      	movs	r3, #1
 800b752:	9311      	str	r3, [sp, #68]	; 0x44
 800b754:	e73c      	b.n	800b5d0 <_strtod_l+0x700>
 800b756:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b758:	4642      	mov	r2, r8
 800b75a:	4620      	mov	r0, r4
 800b75c:	f002 f990 	bl	800da80 <__lshift>
 800b760:	901e      	str	r0, [sp, #120]	; 0x78
 800b762:	2800      	cmp	r0, #0
 800b764:	f47f af66 	bne.w	800b634 <_strtod_l+0x764>
 800b768:	e5fe      	b.n	800b368 <_strtod_l+0x498>
 800b76a:	465f      	mov	r7, fp
 800b76c:	d16e      	bne.n	800b84c <_strtod_l+0x97c>
 800b76e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b770:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b774:	b342      	cbz	r2, 800b7c8 <_strtod_l+0x8f8>
 800b776:	4a32      	ldr	r2, [pc, #200]	; (800b840 <_strtod_l+0x970>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d128      	bne.n	800b7ce <_strtod_l+0x8fe>
 800b77c:	9b04      	ldr	r3, [sp, #16]
 800b77e:	4650      	mov	r0, sl
 800b780:	b1eb      	cbz	r3, 800b7be <_strtod_l+0x8ee>
 800b782:	4a2d      	ldr	r2, [pc, #180]	; (800b838 <_strtod_l+0x968>)
 800b784:	403a      	ands	r2, r7
 800b786:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b78a:	f04f 31ff 	mov.w	r1, #4294967295
 800b78e:	d819      	bhi.n	800b7c4 <_strtod_l+0x8f4>
 800b790:	0d12      	lsrs	r2, r2, #20
 800b792:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b796:	fa01 f303 	lsl.w	r3, r1, r3
 800b79a:	4298      	cmp	r0, r3
 800b79c:	d117      	bne.n	800b7ce <_strtod_l+0x8fe>
 800b79e:	4b29      	ldr	r3, [pc, #164]	; (800b844 <_strtod_l+0x974>)
 800b7a0:	429f      	cmp	r7, r3
 800b7a2:	d102      	bne.n	800b7aa <_strtod_l+0x8da>
 800b7a4:	3001      	adds	r0, #1
 800b7a6:	f43f addf 	beq.w	800b368 <_strtod_l+0x498>
 800b7aa:	4b23      	ldr	r3, [pc, #140]	; (800b838 <_strtod_l+0x968>)
 800b7ac:	403b      	ands	r3, r7
 800b7ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b7b2:	f04f 0a00 	mov.w	sl, #0
 800b7b6:	9b04      	ldr	r3, [sp, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1a0      	bne.n	800b6fe <_strtod_l+0x82e>
 800b7bc:	e5de      	b.n	800b37c <_strtod_l+0x4ac>
 800b7be:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c2:	e7ea      	b.n	800b79a <_strtod_l+0x8ca>
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	e7e8      	b.n	800b79a <_strtod_l+0x8ca>
 800b7c8:	ea53 030a 	orrs.w	r3, r3, sl
 800b7cc:	d088      	beq.n	800b6e0 <_strtod_l+0x810>
 800b7ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7d0:	b1db      	cbz	r3, 800b80a <_strtod_l+0x93a>
 800b7d2:	423b      	tst	r3, r7
 800b7d4:	d0ef      	beq.n	800b7b6 <_strtod_l+0x8e6>
 800b7d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7d8:	9a04      	ldr	r2, [sp, #16]
 800b7da:	4650      	mov	r0, sl
 800b7dc:	4659      	mov	r1, fp
 800b7de:	b1c3      	cbz	r3, 800b812 <_strtod_l+0x942>
 800b7e0:	f7ff fb58 	bl	800ae94 <sulp>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7ec:	f7f4 fd4e 	bl	800028c <__adddf3>
 800b7f0:	4682      	mov	sl, r0
 800b7f2:	468b      	mov	fp, r1
 800b7f4:	e7df      	b.n	800b7b6 <_strtod_l+0x8e6>
 800b7f6:	4013      	ands	r3, r2
 800b7f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b7fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b800:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b804:	f04f 3aff 	mov.w	sl, #4294967295
 800b808:	e7d5      	b.n	800b7b6 <_strtod_l+0x8e6>
 800b80a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b80c:	ea13 0f0a 	tst.w	r3, sl
 800b810:	e7e0      	b.n	800b7d4 <_strtod_l+0x904>
 800b812:	f7ff fb3f 	bl	800ae94 <sulp>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b81e:	f7f4 fd33 	bl	8000288 <__aeabi_dsub>
 800b822:	2200      	movs	r2, #0
 800b824:	2300      	movs	r3, #0
 800b826:	4682      	mov	sl, r0
 800b828:	468b      	mov	fp, r1
 800b82a:	f7f5 f94d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b82e:	2800      	cmp	r0, #0
 800b830:	d0c1      	beq.n	800b7b6 <_strtod_l+0x8e6>
 800b832:	e60e      	b.n	800b452 <_strtod_l+0x582>
 800b834:	fffffc02 	.word	0xfffffc02
 800b838:	7ff00000 	.word	0x7ff00000
 800b83c:	39500000 	.word	0x39500000
 800b840:	000fffff 	.word	0x000fffff
 800b844:	7fefffff 	.word	0x7fefffff
 800b848:	0800ede8 	.word	0x0800ede8
 800b84c:	4631      	mov	r1, r6
 800b84e:	4628      	mov	r0, r5
 800b850:	f002 fafe 	bl	800de50 <__ratio>
 800b854:	ec59 8b10 	vmov	r8, r9, d0
 800b858:	ee10 0a10 	vmov	r0, s0
 800b85c:	2200      	movs	r2, #0
 800b85e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b862:	4649      	mov	r1, r9
 800b864:	f7f5 f944 	bl	8000af0 <__aeabi_dcmple>
 800b868:	2800      	cmp	r0, #0
 800b86a:	d07c      	beq.n	800b966 <_strtod_l+0xa96>
 800b86c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d04c      	beq.n	800b90c <_strtod_l+0xa3c>
 800b872:	4b95      	ldr	r3, [pc, #596]	; (800bac8 <_strtod_l+0xbf8>)
 800b874:	2200      	movs	r2, #0
 800b876:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b87a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bac8 <_strtod_l+0xbf8>
 800b87e:	f04f 0800 	mov.w	r8, #0
 800b882:	4b92      	ldr	r3, [pc, #584]	; (800bacc <_strtod_l+0xbfc>)
 800b884:	403b      	ands	r3, r7
 800b886:	9311      	str	r3, [sp, #68]	; 0x44
 800b888:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b88a:	4b91      	ldr	r3, [pc, #580]	; (800bad0 <_strtod_l+0xc00>)
 800b88c:	429a      	cmp	r2, r3
 800b88e:	f040 80b2 	bne.w	800b9f6 <_strtod_l+0xb26>
 800b892:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b89a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b89e:	ec4b ab10 	vmov	d0, sl, fp
 800b8a2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b8a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b8aa:	f002 f9f9 	bl	800dca0 <__ulp>
 800b8ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b8b2:	ec53 2b10 	vmov	r2, r3, d0
 800b8b6:	f7f4 fe9f 	bl	80005f8 <__aeabi_dmul>
 800b8ba:	4652      	mov	r2, sl
 800b8bc:	465b      	mov	r3, fp
 800b8be:	f7f4 fce5 	bl	800028c <__adddf3>
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4981      	ldr	r1, [pc, #516]	; (800bacc <_strtod_l+0xbfc>)
 800b8c6:	4a83      	ldr	r2, [pc, #524]	; (800bad4 <_strtod_l+0xc04>)
 800b8c8:	4019      	ands	r1, r3
 800b8ca:	4291      	cmp	r1, r2
 800b8cc:	4682      	mov	sl, r0
 800b8ce:	d95e      	bls.n	800b98e <_strtod_l+0xabe>
 800b8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d103      	bne.n	800b8e2 <_strtod_l+0xa12>
 800b8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8dc:	3301      	adds	r3, #1
 800b8de:	f43f ad43 	beq.w	800b368 <_strtod_l+0x498>
 800b8e2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800bae0 <_strtod_l+0xc10>
 800b8e6:	f04f 3aff 	mov.w	sl, #4294967295
 800b8ea:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f001 feab 	bl	800d648 <_Bfree>
 800b8f2:	9907      	ldr	r1, [sp, #28]
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f001 fea7 	bl	800d648 <_Bfree>
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f001 fea3 	bl	800d648 <_Bfree>
 800b902:	4629      	mov	r1, r5
 800b904:	4620      	mov	r0, r4
 800b906:	f001 fe9f 	bl	800d648 <_Bfree>
 800b90a:	e613      	b.n	800b534 <_strtod_l+0x664>
 800b90c:	f1ba 0f00 	cmp.w	sl, #0
 800b910:	d11b      	bne.n	800b94a <_strtod_l+0xa7a>
 800b912:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b916:	b9f3      	cbnz	r3, 800b956 <_strtod_l+0xa86>
 800b918:	4b6b      	ldr	r3, [pc, #428]	; (800bac8 <_strtod_l+0xbf8>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	4640      	mov	r0, r8
 800b91e:	4649      	mov	r1, r9
 800b920:	f7f5 f8dc 	bl	8000adc <__aeabi_dcmplt>
 800b924:	b9d0      	cbnz	r0, 800b95c <_strtod_l+0xa8c>
 800b926:	4640      	mov	r0, r8
 800b928:	4649      	mov	r1, r9
 800b92a:	4b6b      	ldr	r3, [pc, #428]	; (800bad8 <_strtod_l+0xc08>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	f7f4 fe63 	bl	80005f8 <__aeabi_dmul>
 800b932:	4680      	mov	r8, r0
 800b934:	4689      	mov	r9, r1
 800b936:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b93a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b93e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b940:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b944:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b948:	e79b      	b.n	800b882 <_strtod_l+0x9b2>
 800b94a:	f1ba 0f01 	cmp.w	sl, #1
 800b94e:	d102      	bne.n	800b956 <_strtod_l+0xa86>
 800b950:	2f00      	cmp	r7, #0
 800b952:	f43f ad7e 	beq.w	800b452 <_strtod_l+0x582>
 800b956:	4b61      	ldr	r3, [pc, #388]	; (800badc <_strtod_l+0xc0c>)
 800b958:	2200      	movs	r2, #0
 800b95a:	e78c      	b.n	800b876 <_strtod_l+0x9a6>
 800b95c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bad8 <_strtod_l+0xc08>
 800b960:	f04f 0800 	mov.w	r8, #0
 800b964:	e7e7      	b.n	800b936 <_strtod_l+0xa66>
 800b966:	4b5c      	ldr	r3, [pc, #368]	; (800bad8 <_strtod_l+0xc08>)
 800b968:	4640      	mov	r0, r8
 800b96a:	4649      	mov	r1, r9
 800b96c:	2200      	movs	r2, #0
 800b96e:	f7f4 fe43 	bl	80005f8 <__aeabi_dmul>
 800b972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b974:	4680      	mov	r8, r0
 800b976:	4689      	mov	r9, r1
 800b978:	b933      	cbnz	r3, 800b988 <_strtod_l+0xab8>
 800b97a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b97e:	9012      	str	r0, [sp, #72]	; 0x48
 800b980:	9313      	str	r3, [sp, #76]	; 0x4c
 800b982:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b986:	e7dd      	b.n	800b944 <_strtod_l+0xa74>
 800b988:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b98c:	e7f9      	b.n	800b982 <_strtod_l+0xab2>
 800b98e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b992:	9b04      	ldr	r3, [sp, #16]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1a8      	bne.n	800b8ea <_strtod_l+0xa1a>
 800b998:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b99c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b99e:	0d1b      	lsrs	r3, r3, #20
 800b9a0:	051b      	lsls	r3, r3, #20
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d1a1      	bne.n	800b8ea <_strtod_l+0xa1a>
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	4649      	mov	r1, r9
 800b9aa:	f7f5 f985 	bl	8000cb8 <__aeabi_d2lz>
 800b9ae:	f7f4 fdf5 	bl	800059c <__aeabi_l2d>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	4640      	mov	r0, r8
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	f7f4 fc65 	bl	8000288 <__aeabi_dsub>
 800b9be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b9c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9c4:	ea43 030a 	orr.w	r3, r3, sl
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	4680      	mov	r8, r0
 800b9cc:	4689      	mov	r9, r1
 800b9ce:	d053      	beq.n	800ba78 <_strtod_l+0xba8>
 800b9d0:	a335      	add	r3, pc, #212	; (adr r3, 800baa8 <_strtod_l+0xbd8>)
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	f7f5 f881 	bl	8000adc <__aeabi_dcmplt>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	f47f acce 	bne.w	800b37c <_strtod_l+0x4ac>
 800b9e0:	a333      	add	r3, pc, #204	; (adr r3, 800bab0 <_strtod_l+0xbe0>)
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	4640      	mov	r0, r8
 800b9e8:	4649      	mov	r1, r9
 800b9ea:	f7f5 f895 	bl	8000b18 <__aeabi_dcmpgt>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	f43f af7b 	beq.w	800b8ea <_strtod_l+0xa1a>
 800b9f4:	e4c2      	b.n	800b37c <_strtod_l+0x4ac>
 800b9f6:	9b04      	ldr	r3, [sp, #16]
 800b9f8:	b333      	cbz	r3, 800ba48 <_strtod_l+0xb78>
 800b9fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba00:	d822      	bhi.n	800ba48 <_strtod_l+0xb78>
 800ba02:	a32d      	add	r3, pc, #180	; (adr r3, 800bab8 <_strtod_l+0xbe8>)
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	4640      	mov	r0, r8
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f7f5 f870 	bl	8000af0 <__aeabi_dcmple>
 800ba10:	b1a0      	cbz	r0, 800ba3c <_strtod_l+0xb6c>
 800ba12:	4649      	mov	r1, r9
 800ba14:	4640      	mov	r0, r8
 800ba16:	f7f5 f8c7 	bl	8000ba8 <__aeabi_d2uiz>
 800ba1a:	2801      	cmp	r0, #1
 800ba1c:	bf38      	it	cc
 800ba1e:	2001      	movcc	r0, #1
 800ba20:	f7f4 fd70 	bl	8000504 <__aeabi_ui2d>
 800ba24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba26:	4680      	mov	r8, r0
 800ba28:	4689      	mov	r9, r1
 800ba2a:	bb13      	cbnz	r3, 800ba72 <_strtod_l+0xba2>
 800ba2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba30:	9014      	str	r0, [sp, #80]	; 0x50
 800ba32:	9315      	str	r3, [sp, #84]	; 0x54
 800ba34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ba38:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800ba3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba44:	1a9b      	subs	r3, r3, r2
 800ba46:	930d      	str	r3, [sp, #52]	; 0x34
 800ba48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba4c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ba50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ba54:	f002 f924 	bl	800dca0 <__ulp>
 800ba58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba5c:	ec53 2b10 	vmov	r2, r3, d0
 800ba60:	f7f4 fdca 	bl	80005f8 <__aeabi_dmul>
 800ba64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ba68:	f7f4 fc10 	bl	800028c <__adddf3>
 800ba6c:	4682      	mov	sl, r0
 800ba6e:	468b      	mov	fp, r1
 800ba70:	e78f      	b.n	800b992 <_strtod_l+0xac2>
 800ba72:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800ba76:	e7dd      	b.n	800ba34 <_strtod_l+0xb64>
 800ba78:	a311      	add	r3, pc, #68	; (adr r3, 800bac0 <_strtod_l+0xbf0>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	f7f5 f82d 	bl	8000adc <__aeabi_dcmplt>
 800ba82:	e7b4      	b.n	800b9ee <_strtod_l+0xb1e>
 800ba84:	2300      	movs	r3, #0
 800ba86:	930e      	str	r3, [sp, #56]	; 0x38
 800ba88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ba8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba8c:	6013      	str	r3, [r2, #0]
 800ba8e:	f7ff ba65 	b.w	800af5c <_strtod_l+0x8c>
 800ba92:	2b65      	cmp	r3, #101	; 0x65
 800ba94:	f43f ab5d 	beq.w	800b152 <_strtod_l+0x282>
 800ba98:	2b45      	cmp	r3, #69	; 0x45
 800ba9a:	f43f ab5a 	beq.w	800b152 <_strtod_l+0x282>
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f7ff bb92 	b.w	800b1c8 <_strtod_l+0x2f8>
 800baa4:	f3af 8000 	nop.w
 800baa8:	94a03595 	.word	0x94a03595
 800baac:	3fdfffff 	.word	0x3fdfffff
 800bab0:	35afe535 	.word	0x35afe535
 800bab4:	3fe00000 	.word	0x3fe00000
 800bab8:	ffc00000 	.word	0xffc00000
 800babc:	41dfffff 	.word	0x41dfffff
 800bac0:	94a03595 	.word	0x94a03595
 800bac4:	3fcfffff 	.word	0x3fcfffff
 800bac8:	3ff00000 	.word	0x3ff00000
 800bacc:	7ff00000 	.word	0x7ff00000
 800bad0:	7fe00000 	.word	0x7fe00000
 800bad4:	7c9fffff 	.word	0x7c9fffff
 800bad8:	3fe00000 	.word	0x3fe00000
 800badc:	bff00000 	.word	0xbff00000
 800bae0:	7fefffff 	.word	0x7fefffff

0800bae4 <_strtod_r>:
 800bae4:	4b01      	ldr	r3, [pc, #4]	; (800baec <_strtod_r+0x8>)
 800bae6:	f7ff b9f3 	b.w	800aed0 <_strtod_l>
 800baea:	bf00      	nop
 800baec:	20000074 	.word	0x20000074

0800baf0 <_strtol_l.isra.0>:
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baf6:	d001      	beq.n	800bafc <_strtol_l.isra.0+0xc>
 800baf8:	2b24      	cmp	r3, #36	; 0x24
 800bafa:	d906      	bls.n	800bb0a <_strtol_l.isra.0+0x1a>
 800bafc:	f7fe fa5c 	bl	8009fb8 <__errno>
 800bb00:	2316      	movs	r3, #22
 800bb02:	6003      	str	r3, [r0, #0]
 800bb04:	2000      	movs	r0, #0
 800bb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0a:	4f3a      	ldr	r7, [pc, #232]	; (800bbf4 <_strtol_l.isra.0+0x104>)
 800bb0c:	468e      	mov	lr, r1
 800bb0e:	4676      	mov	r6, lr
 800bb10:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bb14:	5de5      	ldrb	r5, [r4, r7]
 800bb16:	f015 0508 	ands.w	r5, r5, #8
 800bb1a:	d1f8      	bne.n	800bb0e <_strtol_l.isra.0+0x1e>
 800bb1c:	2c2d      	cmp	r4, #45	; 0x2d
 800bb1e:	d134      	bne.n	800bb8a <_strtol_l.isra.0+0x9a>
 800bb20:	f89e 4000 	ldrb.w	r4, [lr]
 800bb24:	f04f 0801 	mov.w	r8, #1
 800bb28:	f106 0e02 	add.w	lr, r6, #2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d05c      	beq.n	800bbea <_strtol_l.isra.0+0xfa>
 800bb30:	2b10      	cmp	r3, #16
 800bb32:	d10c      	bne.n	800bb4e <_strtol_l.isra.0+0x5e>
 800bb34:	2c30      	cmp	r4, #48	; 0x30
 800bb36:	d10a      	bne.n	800bb4e <_strtol_l.isra.0+0x5e>
 800bb38:	f89e 4000 	ldrb.w	r4, [lr]
 800bb3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bb40:	2c58      	cmp	r4, #88	; 0x58
 800bb42:	d14d      	bne.n	800bbe0 <_strtol_l.isra.0+0xf0>
 800bb44:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800bb48:	2310      	movs	r3, #16
 800bb4a:	f10e 0e02 	add.w	lr, lr, #2
 800bb4e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800bb52:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bb56:	2600      	movs	r6, #0
 800bb58:	fbbc f9f3 	udiv	r9, ip, r3
 800bb5c:	4635      	mov	r5, r6
 800bb5e:	fb03 ca19 	mls	sl, r3, r9, ip
 800bb62:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800bb66:	2f09      	cmp	r7, #9
 800bb68:	d818      	bhi.n	800bb9c <_strtol_l.isra.0+0xac>
 800bb6a:	463c      	mov	r4, r7
 800bb6c:	42a3      	cmp	r3, r4
 800bb6e:	dd24      	ble.n	800bbba <_strtol_l.isra.0+0xca>
 800bb70:	2e00      	cmp	r6, #0
 800bb72:	db1f      	blt.n	800bbb4 <_strtol_l.isra.0+0xc4>
 800bb74:	45a9      	cmp	r9, r5
 800bb76:	d31d      	bcc.n	800bbb4 <_strtol_l.isra.0+0xc4>
 800bb78:	d101      	bne.n	800bb7e <_strtol_l.isra.0+0x8e>
 800bb7a:	45a2      	cmp	sl, r4
 800bb7c:	db1a      	blt.n	800bbb4 <_strtol_l.isra.0+0xc4>
 800bb7e:	fb05 4503 	mla	r5, r5, r3, r4
 800bb82:	2601      	movs	r6, #1
 800bb84:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800bb88:	e7eb      	b.n	800bb62 <_strtol_l.isra.0+0x72>
 800bb8a:	2c2b      	cmp	r4, #43	; 0x2b
 800bb8c:	bf08      	it	eq
 800bb8e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800bb92:	46a8      	mov	r8, r5
 800bb94:	bf08      	it	eq
 800bb96:	f106 0e02 	addeq.w	lr, r6, #2
 800bb9a:	e7c7      	b.n	800bb2c <_strtol_l.isra.0+0x3c>
 800bb9c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800bba0:	2f19      	cmp	r7, #25
 800bba2:	d801      	bhi.n	800bba8 <_strtol_l.isra.0+0xb8>
 800bba4:	3c37      	subs	r4, #55	; 0x37
 800bba6:	e7e1      	b.n	800bb6c <_strtol_l.isra.0+0x7c>
 800bba8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800bbac:	2f19      	cmp	r7, #25
 800bbae:	d804      	bhi.n	800bbba <_strtol_l.isra.0+0xca>
 800bbb0:	3c57      	subs	r4, #87	; 0x57
 800bbb2:	e7db      	b.n	800bb6c <_strtol_l.isra.0+0x7c>
 800bbb4:	f04f 36ff 	mov.w	r6, #4294967295
 800bbb8:	e7e4      	b.n	800bb84 <_strtol_l.isra.0+0x94>
 800bbba:	2e00      	cmp	r6, #0
 800bbbc:	da05      	bge.n	800bbca <_strtol_l.isra.0+0xda>
 800bbbe:	2322      	movs	r3, #34	; 0x22
 800bbc0:	6003      	str	r3, [r0, #0]
 800bbc2:	4665      	mov	r5, ip
 800bbc4:	b942      	cbnz	r2, 800bbd8 <_strtol_l.isra.0+0xe8>
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	e79d      	b.n	800bb06 <_strtol_l.isra.0+0x16>
 800bbca:	f1b8 0f00 	cmp.w	r8, #0
 800bbce:	d000      	beq.n	800bbd2 <_strtol_l.isra.0+0xe2>
 800bbd0:	426d      	negs	r5, r5
 800bbd2:	2a00      	cmp	r2, #0
 800bbd4:	d0f7      	beq.n	800bbc6 <_strtol_l.isra.0+0xd6>
 800bbd6:	b10e      	cbz	r6, 800bbdc <_strtol_l.isra.0+0xec>
 800bbd8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800bbdc:	6011      	str	r1, [r2, #0]
 800bbde:	e7f2      	b.n	800bbc6 <_strtol_l.isra.0+0xd6>
 800bbe0:	2430      	movs	r4, #48	; 0x30
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1b3      	bne.n	800bb4e <_strtol_l.isra.0+0x5e>
 800bbe6:	2308      	movs	r3, #8
 800bbe8:	e7b1      	b.n	800bb4e <_strtol_l.isra.0+0x5e>
 800bbea:	2c30      	cmp	r4, #48	; 0x30
 800bbec:	d0a4      	beq.n	800bb38 <_strtol_l.isra.0+0x48>
 800bbee:	230a      	movs	r3, #10
 800bbf0:	e7ad      	b.n	800bb4e <_strtol_l.isra.0+0x5e>
 800bbf2:	bf00      	nop
 800bbf4:	0800ee11 	.word	0x0800ee11

0800bbf8 <_strtol_r>:
 800bbf8:	f7ff bf7a 	b.w	800baf0 <_strtol_l.isra.0>

0800bbfc <__swbuf_r>:
 800bbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfe:	460e      	mov	r6, r1
 800bc00:	4614      	mov	r4, r2
 800bc02:	4605      	mov	r5, r0
 800bc04:	b118      	cbz	r0, 800bc0e <__swbuf_r+0x12>
 800bc06:	6983      	ldr	r3, [r0, #24]
 800bc08:	b90b      	cbnz	r3, 800bc0e <__swbuf_r+0x12>
 800bc0a:	f001 f84b 	bl	800cca4 <__sinit>
 800bc0e:	4b21      	ldr	r3, [pc, #132]	; (800bc94 <__swbuf_r+0x98>)
 800bc10:	429c      	cmp	r4, r3
 800bc12:	d12b      	bne.n	800bc6c <__swbuf_r+0x70>
 800bc14:	686c      	ldr	r4, [r5, #4]
 800bc16:	69a3      	ldr	r3, [r4, #24]
 800bc18:	60a3      	str	r3, [r4, #8]
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	071a      	lsls	r2, r3, #28
 800bc1e:	d52f      	bpl.n	800bc80 <__swbuf_r+0x84>
 800bc20:	6923      	ldr	r3, [r4, #16]
 800bc22:	b36b      	cbz	r3, 800bc80 <__swbuf_r+0x84>
 800bc24:	6923      	ldr	r3, [r4, #16]
 800bc26:	6820      	ldr	r0, [r4, #0]
 800bc28:	1ac0      	subs	r0, r0, r3
 800bc2a:	6963      	ldr	r3, [r4, #20]
 800bc2c:	b2f6      	uxtb	r6, r6
 800bc2e:	4283      	cmp	r3, r0
 800bc30:	4637      	mov	r7, r6
 800bc32:	dc04      	bgt.n	800bc3e <__swbuf_r+0x42>
 800bc34:	4621      	mov	r1, r4
 800bc36:	4628      	mov	r0, r5
 800bc38:	f000 ffa0 	bl	800cb7c <_fflush_r>
 800bc3c:	bb30      	cbnz	r0, 800bc8c <__swbuf_r+0x90>
 800bc3e:	68a3      	ldr	r3, [r4, #8]
 800bc40:	3b01      	subs	r3, #1
 800bc42:	60a3      	str	r3, [r4, #8]
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	1c5a      	adds	r2, r3, #1
 800bc48:	6022      	str	r2, [r4, #0]
 800bc4a:	701e      	strb	r6, [r3, #0]
 800bc4c:	6963      	ldr	r3, [r4, #20]
 800bc4e:	3001      	adds	r0, #1
 800bc50:	4283      	cmp	r3, r0
 800bc52:	d004      	beq.n	800bc5e <__swbuf_r+0x62>
 800bc54:	89a3      	ldrh	r3, [r4, #12]
 800bc56:	07db      	lsls	r3, r3, #31
 800bc58:	d506      	bpl.n	800bc68 <__swbuf_r+0x6c>
 800bc5a:	2e0a      	cmp	r6, #10
 800bc5c:	d104      	bne.n	800bc68 <__swbuf_r+0x6c>
 800bc5e:	4621      	mov	r1, r4
 800bc60:	4628      	mov	r0, r5
 800bc62:	f000 ff8b 	bl	800cb7c <_fflush_r>
 800bc66:	b988      	cbnz	r0, 800bc8c <__swbuf_r+0x90>
 800bc68:	4638      	mov	r0, r7
 800bc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc6c:	4b0a      	ldr	r3, [pc, #40]	; (800bc98 <__swbuf_r+0x9c>)
 800bc6e:	429c      	cmp	r4, r3
 800bc70:	d101      	bne.n	800bc76 <__swbuf_r+0x7a>
 800bc72:	68ac      	ldr	r4, [r5, #8]
 800bc74:	e7cf      	b.n	800bc16 <__swbuf_r+0x1a>
 800bc76:	4b09      	ldr	r3, [pc, #36]	; (800bc9c <__swbuf_r+0xa0>)
 800bc78:	429c      	cmp	r4, r3
 800bc7a:	bf08      	it	eq
 800bc7c:	68ec      	ldreq	r4, [r5, #12]
 800bc7e:	e7ca      	b.n	800bc16 <__swbuf_r+0x1a>
 800bc80:	4621      	mov	r1, r4
 800bc82:	4628      	mov	r0, r5
 800bc84:	f000 f80c 	bl	800bca0 <__swsetup_r>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d0cb      	beq.n	800bc24 <__swbuf_r+0x28>
 800bc8c:	f04f 37ff 	mov.w	r7, #4294967295
 800bc90:	e7ea      	b.n	800bc68 <__swbuf_r+0x6c>
 800bc92:	bf00      	nop
 800bc94:	0800efc8 	.word	0x0800efc8
 800bc98:	0800efe8 	.word	0x0800efe8
 800bc9c:	0800efa8 	.word	0x0800efa8

0800bca0 <__swsetup_r>:
 800bca0:	4b32      	ldr	r3, [pc, #200]	; (800bd6c <__swsetup_r+0xcc>)
 800bca2:	b570      	push	{r4, r5, r6, lr}
 800bca4:	681d      	ldr	r5, [r3, #0]
 800bca6:	4606      	mov	r6, r0
 800bca8:	460c      	mov	r4, r1
 800bcaa:	b125      	cbz	r5, 800bcb6 <__swsetup_r+0x16>
 800bcac:	69ab      	ldr	r3, [r5, #24]
 800bcae:	b913      	cbnz	r3, 800bcb6 <__swsetup_r+0x16>
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	f000 fff7 	bl	800cca4 <__sinit>
 800bcb6:	4b2e      	ldr	r3, [pc, #184]	; (800bd70 <__swsetup_r+0xd0>)
 800bcb8:	429c      	cmp	r4, r3
 800bcba:	d10f      	bne.n	800bcdc <__swsetup_r+0x3c>
 800bcbc:	686c      	ldr	r4, [r5, #4]
 800bcbe:	89a3      	ldrh	r3, [r4, #12]
 800bcc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcc4:	0719      	lsls	r1, r3, #28
 800bcc6:	d42c      	bmi.n	800bd22 <__swsetup_r+0x82>
 800bcc8:	06dd      	lsls	r5, r3, #27
 800bcca:	d411      	bmi.n	800bcf0 <__swsetup_r+0x50>
 800bccc:	2309      	movs	r3, #9
 800bcce:	6033      	str	r3, [r6, #0]
 800bcd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bcd4:	81a3      	strh	r3, [r4, #12]
 800bcd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcda:	e03e      	b.n	800bd5a <__swsetup_r+0xba>
 800bcdc:	4b25      	ldr	r3, [pc, #148]	; (800bd74 <__swsetup_r+0xd4>)
 800bcde:	429c      	cmp	r4, r3
 800bce0:	d101      	bne.n	800bce6 <__swsetup_r+0x46>
 800bce2:	68ac      	ldr	r4, [r5, #8]
 800bce4:	e7eb      	b.n	800bcbe <__swsetup_r+0x1e>
 800bce6:	4b24      	ldr	r3, [pc, #144]	; (800bd78 <__swsetup_r+0xd8>)
 800bce8:	429c      	cmp	r4, r3
 800bcea:	bf08      	it	eq
 800bcec:	68ec      	ldreq	r4, [r5, #12]
 800bcee:	e7e6      	b.n	800bcbe <__swsetup_r+0x1e>
 800bcf0:	0758      	lsls	r0, r3, #29
 800bcf2:	d512      	bpl.n	800bd1a <__swsetup_r+0x7a>
 800bcf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcf6:	b141      	cbz	r1, 800bd0a <__swsetup_r+0x6a>
 800bcf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcfc:	4299      	cmp	r1, r3
 800bcfe:	d002      	beq.n	800bd06 <__swsetup_r+0x66>
 800bd00:	4630      	mov	r0, r6
 800bd02:	f002 f92b 	bl	800df5c <_free_r>
 800bd06:	2300      	movs	r3, #0
 800bd08:	6363      	str	r3, [r4, #52]	; 0x34
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd10:	81a3      	strh	r3, [r4, #12]
 800bd12:	2300      	movs	r3, #0
 800bd14:	6063      	str	r3, [r4, #4]
 800bd16:	6923      	ldr	r3, [r4, #16]
 800bd18:	6023      	str	r3, [r4, #0]
 800bd1a:	89a3      	ldrh	r3, [r4, #12]
 800bd1c:	f043 0308 	orr.w	r3, r3, #8
 800bd20:	81a3      	strh	r3, [r4, #12]
 800bd22:	6923      	ldr	r3, [r4, #16]
 800bd24:	b94b      	cbnz	r3, 800bd3a <__swsetup_r+0x9a>
 800bd26:	89a3      	ldrh	r3, [r4, #12]
 800bd28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd30:	d003      	beq.n	800bd3a <__swsetup_r+0x9a>
 800bd32:	4621      	mov	r1, r4
 800bd34:	4630      	mov	r0, r6
 800bd36:	f001 fbed 	bl	800d514 <__smakebuf_r>
 800bd3a:	89a0      	ldrh	r0, [r4, #12]
 800bd3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd40:	f010 0301 	ands.w	r3, r0, #1
 800bd44:	d00a      	beq.n	800bd5c <__swsetup_r+0xbc>
 800bd46:	2300      	movs	r3, #0
 800bd48:	60a3      	str	r3, [r4, #8]
 800bd4a:	6963      	ldr	r3, [r4, #20]
 800bd4c:	425b      	negs	r3, r3
 800bd4e:	61a3      	str	r3, [r4, #24]
 800bd50:	6923      	ldr	r3, [r4, #16]
 800bd52:	b943      	cbnz	r3, 800bd66 <__swsetup_r+0xc6>
 800bd54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd58:	d1ba      	bne.n	800bcd0 <__swsetup_r+0x30>
 800bd5a:	bd70      	pop	{r4, r5, r6, pc}
 800bd5c:	0781      	lsls	r1, r0, #30
 800bd5e:	bf58      	it	pl
 800bd60:	6963      	ldrpl	r3, [r4, #20]
 800bd62:	60a3      	str	r3, [r4, #8]
 800bd64:	e7f4      	b.n	800bd50 <__swsetup_r+0xb0>
 800bd66:	2000      	movs	r0, #0
 800bd68:	e7f7      	b.n	800bd5a <__swsetup_r+0xba>
 800bd6a:	bf00      	nop
 800bd6c:	2000000c 	.word	0x2000000c
 800bd70:	0800efc8 	.word	0x0800efc8
 800bd74:	0800efe8 	.word	0x0800efe8
 800bd78:	0800efa8 	.word	0x0800efa8

0800bd7c <quorem>:
 800bd7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd80:	6903      	ldr	r3, [r0, #16]
 800bd82:	690c      	ldr	r4, [r1, #16]
 800bd84:	42a3      	cmp	r3, r4
 800bd86:	4607      	mov	r7, r0
 800bd88:	f2c0 8081 	blt.w	800be8e <quorem+0x112>
 800bd8c:	3c01      	subs	r4, #1
 800bd8e:	f101 0814 	add.w	r8, r1, #20
 800bd92:	f100 0514 	add.w	r5, r0, #20
 800bd96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd9a:	9301      	str	r3, [sp, #4]
 800bd9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bda0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bda4:	3301      	adds	r3, #1
 800bda6:	429a      	cmp	r2, r3
 800bda8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bdac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bdb0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bdb4:	d331      	bcc.n	800be1a <quorem+0x9e>
 800bdb6:	f04f 0e00 	mov.w	lr, #0
 800bdba:	4640      	mov	r0, r8
 800bdbc:	46ac      	mov	ip, r5
 800bdbe:	46f2      	mov	sl, lr
 800bdc0:	f850 2b04 	ldr.w	r2, [r0], #4
 800bdc4:	b293      	uxth	r3, r2
 800bdc6:	fb06 e303 	mla	r3, r6, r3, lr
 800bdca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	ebaa 0303 	sub.w	r3, sl, r3
 800bdd4:	0c12      	lsrs	r2, r2, #16
 800bdd6:	f8dc a000 	ldr.w	sl, [ip]
 800bdda:	fb06 e202 	mla	r2, r6, r2, lr
 800bdde:	fa13 f38a 	uxtah	r3, r3, sl
 800bde2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bde6:	fa1f fa82 	uxth.w	sl, r2
 800bdea:	f8dc 2000 	ldr.w	r2, [ip]
 800bdee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bdf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdfc:	4581      	cmp	r9, r0
 800bdfe:	f84c 3b04 	str.w	r3, [ip], #4
 800be02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be06:	d2db      	bcs.n	800bdc0 <quorem+0x44>
 800be08:	f855 300b 	ldr.w	r3, [r5, fp]
 800be0c:	b92b      	cbnz	r3, 800be1a <quorem+0x9e>
 800be0e:	9b01      	ldr	r3, [sp, #4]
 800be10:	3b04      	subs	r3, #4
 800be12:	429d      	cmp	r5, r3
 800be14:	461a      	mov	r2, r3
 800be16:	d32e      	bcc.n	800be76 <quorem+0xfa>
 800be18:	613c      	str	r4, [r7, #16]
 800be1a:	4638      	mov	r0, r7
 800be1c:	f001 fe9c 	bl	800db58 <__mcmp>
 800be20:	2800      	cmp	r0, #0
 800be22:	db24      	blt.n	800be6e <quorem+0xf2>
 800be24:	3601      	adds	r6, #1
 800be26:	4628      	mov	r0, r5
 800be28:	f04f 0c00 	mov.w	ip, #0
 800be2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800be30:	f8d0 e000 	ldr.w	lr, [r0]
 800be34:	b293      	uxth	r3, r2
 800be36:	ebac 0303 	sub.w	r3, ip, r3
 800be3a:	0c12      	lsrs	r2, r2, #16
 800be3c:	fa13 f38e 	uxtah	r3, r3, lr
 800be40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800be44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be48:	b29b      	uxth	r3, r3
 800be4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be4e:	45c1      	cmp	r9, r8
 800be50:	f840 3b04 	str.w	r3, [r0], #4
 800be54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800be58:	d2e8      	bcs.n	800be2c <quorem+0xb0>
 800be5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be62:	b922      	cbnz	r2, 800be6e <quorem+0xf2>
 800be64:	3b04      	subs	r3, #4
 800be66:	429d      	cmp	r5, r3
 800be68:	461a      	mov	r2, r3
 800be6a:	d30a      	bcc.n	800be82 <quorem+0x106>
 800be6c:	613c      	str	r4, [r7, #16]
 800be6e:	4630      	mov	r0, r6
 800be70:	b003      	add	sp, #12
 800be72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be76:	6812      	ldr	r2, [r2, #0]
 800be78:	3b04      	subs	r3, #4
 800be7a:	2a00      	cmp	r2, #0
 800be7c:	d1cc      	bne.n	800be18 <quorem+0x9c>
 800be7e:	3c01      	subs	r4, #1
 800be80:	e7c7      	b.n	800be12 <quorem+0x96>
 800be82:	6812      	ldr	r2, [r2, #0]
 800be84:	3b04      	subs	r3, #4
 800be86:	2a00      	cmp	r2, #0
 800be88:	d1f0      	bne.n	800be6c <quorem+0xf0>
 800be8a:	3c01      	subs	r4, #1
 800be8c:	e7eb      	b.n	800be66 <quorem+0xea>
 800be8e:	2000      	movs	r0, #0
 800be90:	e7ee      	b.n	800be70 <quorem+0xf4>
 800be92:	0000      	movs	r0, r0
 800be94:	0000      	movs	r0, r0
	...

0800be98 <_dtoa_r>:
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	ed2d 8b02 	vpush	{d8}
 800bea0:	ec57 6b10 	vmov	r6, r7, d0
 800bea4:	b095      	sub	sp, #84	; 0x54
 800bea6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bea8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800beac:	9105      	str	r1, [sp, #20]
 800beae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800beb2:	4604      	mov	r4, r0
 800beb4:	9209      	str	r2, [sp, #36]	; 0x24
 800beb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb8:	b975      	cbnz	r5, 800bed8 <_dtoa_r+0x40>
 800beba:	2010      	movs	r0, #16
 800bebc:	f001 fb6a 	bl	800d594 <malloc>
 800bec0:	4602      	mov	r2, r0
 800bec2:	6260      	str	r0, [r4, #36]	; 0x24
 800bec4:	b920      	cbnz	r0, 800bed0 <_dtoa_r+0x38>
 800bec6:	4bb2      	ldr	r3, [pc, #712]	; (800c190 <_dtoa_r+0x2f8>)
 800bec8:	21ea      	movs	r1, #234	; 0xea
 800beca:	48b2      	ldr	r0, [pc, #712]	; (800c194 <_dtoa_r+0x2fc>)
 800becc:	f002 fc34 	bl	800e738 <__assert_func>
 800bed0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bed4:	6005      	str	r5, [r0, #0]
 800bed6:	60c5      	str	r5, [r0, #12]
 800bed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beda:	6819      	ldr	r1, [r3, #0]
 800bedc:	b151      	cbz	r1, 800bef4 <_dtoa_r+0x5c>
 800bede:	685a      	ldr	r2, [r3, #4]
 800bee0:	604a      	str	r2, [r1, #4]
 800bee2:	2301      	movs	r3, #1
 800bee4:	4093      	lsls	r3, r2
 800bee6:	608b      	str	r3, [r1, #8]
 800bee8:	4620      	mov	r0, r4
 800beea:	f001 fbad 	bl	800d648 <_Bfree>
 800beee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bef0:	2200      	movs	r2, #0
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	1e3b      	subs	r3, r7, #0
 800bef6:	bfb9      	ittee	lt
 800bef8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800befc:	9303      	strlt	r3, [sp, #12]
 800befe:	2300      	movge	r3, #0
 800bf00:	f8c8 3000 	strge.w	r3, [r8]
 800bf04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bf08:	4ba3      	ldr	r3, [pc, #652]	; (800c198 <_dtoa_r+0x300>)
 800bf0a:	bfbc      	itt	lt
 800bf0c:	2201      	movlt	r2, #1
 800bf0e:	f8c8 2000 	strlt.w	r2, [r8]
 800bf12:	ea33 0309 	bics.w	r3, r3, r9
 800bf16:	d11b      	bne.n	800bf50 <_dtoa_r+0xb8>
 800bf18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf1e:	6013      	str	r3, [r2, #0]
 800bf20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf24:	4333      	orrs	r3, r6
 800bf26:	f000 857a 	beq.w	800ca1e <_dtoa_r+0xb86>
 800bf2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf2c:	b963      	cbnz	r3, 800bf48 <_dtoa_r+0xb0>
 800bf2e:	4b9b      	ldr	r3, [pc, #620]	; (800c19c <_dtoa_r+0x304>)
 800bf30:	e024      	b.n	800bf7c <_dtoa_r+0xe4>
 800bf32:	4b9b      	ldr	r3, [pc, #620]	; (800c1a0 <_dtoa_r+0x308>)
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	3308      	adds	r3, #8
 800bf38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	9800      	ldr	r0, [sp, #0]
 800bf3e:	b015      	add	sp, #84	; 0x54
 800bf40:	ecbd 8b02 	vpop	{d8}
 800bf44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf48:	4b94      	ldr	r3, [pc, #592]	; (800c19c <_dtoa_r+0x304>)
 800bf4a:	9300      	str	r3, [sp, #0]
 800bf4c:	3303      	adds	r3, #3
 800bf4e:	e7f3      	b.n	800bf38 <_dtoa_r+0xa0>
 800bf50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf54:	2200      	movs	r2, #0
 800bf56:	ec51 0b17 	vmov	r0, r1, d7
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bf60:	f7f4 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf64:	4680      	mov	r8, r0
 800bf66:	b158      	cbz	r0, 800bf80 <_dtoa_r+0xe8>
 800bf68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	6013      	str	r3, [r2, #0]
 800bf6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 8551 	beq.w	800ca18 <_dtoa_r+0xb80>
 800bf76:	488b      	ldr	r0, [pc, #556]	; (800c1a4 <_dtoa_r+0x30c>)
 800bf78:	6018      	str	r0, [r3, #0]
 800bf7a:	1e43      	subs	r3, r0, #1
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	e7dd      	b.n	800bf3c <_dtoa_r+0xa4>
 800bf80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bf84:	aa12      	add	r2, sp, #72	; 0x48
 800bf86:	a913      	add	r1, sp, #76	; 0x4c
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f001 ff05 	bl	800dd98 <__d2b>
 800bf8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bf92:	4683      	mov	fp, r0
 800bf94:	2d00      	cmp	r5, #0
 800bf96:	d07c      	beq.n	800c092 <_dtoa_r+0x1fa>
 800bf98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800bf9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bfa2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800bfa6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bfaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bfae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bfb2:	4b7d      	ldr	r3, [pc, #500]	; (800c1a8 <_dtoa_r+0x310>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	4639      	mov	r1, r7
 800bfba:	f7f4 f965 	bl	8000288 <__aeabi_dsub>
 800bfbe:	a36e      	add	r3, pc, #440	; (adr r3, 800c178 <_dtoa_r+0x2e0>)
 800bfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc4:	f7f4 fb18 	bl	80005f8 <__aeabi_dmul>
 800bfc8:	a36d      	add	r3, pc, #436	; (adr r3, 800c180 <_dtoa_r+0x2e8>)
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f7f4 f95d 	bl	800028c <__adddf3>
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	460f      	mov	r7, r1
 800bfd8:	f7f4 faa4 	bl	8000524 <__aeabi_i2d>
 800bfdc:	a36a      	add	r3, pc, #424	; (adr r3, 800c188 <_dtoa_r+0x2f0>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	f7f4 fb09 	bl	80005f8 <__aeabi_dmul>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	460b      	mov	r3, r1
 800bfea:	4630      	mov	r0, r6
 800bfec:	4639      	mov	r1, r7
 800bfee:	f7f4 f94d 	bl	800028c <__adddf3>
 800bff2:	4606      	mov	r6, r0
 800bff4:	460f      	mov	r7, r1
 800bff6:	f7f4 fdaf 	bl	8000b58 <__aeabi_d2iz>
 800bffa:	2200      	movs	r2, #0
 800bffc:	4682      	mov	sl, r0
 800bffe:	2300      	movs	r3, #0
 800c000:	4630      	mov	r0, r6
 800c002:	4639      	mov	r1, r7
 800c004:	f7f4 fd6a 	bl	8000adc <__aeabi_dcmplt>
 800c008:	b148      	cbz	r0, 800c01e <_dtoa_r+0x186>
 800c00a:	4650      	mov	r0, sl
 800c00c:	f7f4 fa8a 	bl	8000524 <__aeabi_i2d>
 800c010:	4632      	mov	r2, r6
 800c012:	463b      	mov	r3, r7
 800c014:	f7f4 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 800c018:	b908      	cbnz	r0, 800c01e <_dtoa_r+0x186>
 800c01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c01e:	f1ba 0f16 	cmp.w	sl, #22
 800c022:	d854      	bhi.n	800c0ce <_dtoa_r+0x236>
 800c024:	4b61      	ldr	r3, [pc, #388]	; (800c1ac <_dtoa_r+0x314>)
 800c026:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c032:	f7f4 fd53 	bl	8000adc <__aeabi_dcmplt>
 800c036:	2800      	cmp	r0, #0
 800c038:	d04b      	beq.n	800c0d2 <_dtoa_r+0x23a>
 800c03a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c03e:	2300      	movs	r3, #0
 800c040:	930e      	str	r3, [sp, #56]	; 0x38
 800c042:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c044:	1b5d      	subs	r5, r3, r5
 800c046:	1e6b      	subs	r3, r5, #1
 800c048:	9304      	str	r3, [sp, #16]
 800c04a:	bf43      	ittte	mi
 800c04c:	2300      	movmi	r3, #0
 800c04e:	f1c5 0801 	rsbmi	r8, r5, #1
 800c052:	9304      	strmi	r3, [sp, #16]
 800c054:	f04f 0800 	movpl.w	r8, #0
 800c058:	f1ba 0f00 	cmp.w	sl, #0
 800c05c:	db3b      	blt.n	800c0d6 <_dtoa_r+0x23e>
 800c05e:	9b04      	ldr	r3, [sp, #16]
 800c060:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c064:	4453      	add	r3, sl
 800c066:	9304      	str	r3, [sp, #16]
 800c068:	2300      	movs	r3, #0
 800c06a:	9306      	str	r3, [sp, #24]
 800c06c:	9b05      	ldr	r3, [sp, #20]
 800c06e:	2b09      	cmp	r3, #9
 800c070:	d869      	bhi.n	800c146 <_dtoa_r+0x2ae>
 800c072:	2b05      	cmp	r3, #5
 800c074:	bfc4      	itt	gt
 800c076:	3b04      	subgt	r3, #4
 800c078:	9305      	strgt	r3, [sp, #20]
 800c07a:	9b05      	ldr	r3, [sp, #20]
 800c07c:	f1a3 0302 	sub.w	r3, r3, #2
 800c080:	bfcc      	ite	gt
 800c082:	2500      	movgt	r5, #0
 800c084:	2501      	movle	r5, #1
 800c086:	2b03      	cmp	r3, #3
 800c088:	d869      	bhi.n	800c15e <_dtoa_r+0x2c6>
 800c08a:	e8df f003 	tbb	[pc, r3]
 800c08e:	4e2c      	.short	0x4e2c
 800c090:	5a4c      	.short	0x5a4c
 800c092:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c096:	441d      	add	r5, r3
 800c098:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c09c:	2b20      	cmp	r3, #32
 800c09e:	bfc1      	itttt	gt
 800c0a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c0a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c0a8:	fa09 f303 	lslgt.w	r3, r9, r3
 800c0ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c0b0:	bfda      	itte	le
 800c0b2:	f1c3 0320 	rsble	r3, r3, #32
 800c0b6:	fa06 f003 	lslle.w	r0, r6, r3
 800c0ba:	4318      	orrgt	r0, r3
 800c0bc:	f7f4 fa22 	bl	8000504 <__aeabi_ui2d>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c0c8:	3d01      	subs	r5, #1
 800c0ca:	9310      	str	r3, [sp, #64]	; 0x40
 800c0cc:	e771      	b.n	800bfb2 <_dtoa_r+0x11a>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e7b6      	b.n	800c040 <_dtoa_r+0x1a8>
 800c0d2:	900e      	str	r0, [sp, #56]	; 0x38
 800c0d4:	e7b5      	b.n	800c042 <_dtoa_r+0x1aa>
 800c0d6:	f1ca 0300 	rsb	r3, sl, #0
 800c0da:	9306      	str	r3, [sp, #24]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	eba8 080a 	sub.w	r8, r8, sl
 800c0e2:	930d      	str	r3, [sp, #52]	; 0x34
 800c0e4:	e7c2      	b.n	800c06c <_dtoa_r+0x1d4>
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	9308      	str	r3, [sp, #32]
 800c0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dc39      	bgt.n	800c164 <_dtoa_r+0x2cc>
 800c0f0:	f04f 0901 	mov.w	r9, #1
 800c0f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c0f8:	464b      	mov	r3, r9
 800c0fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c0fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c100:	2200      	movs	r2, #0
 800c102:	6042      	str	r2, [r0, #4]
 800c104:	2204      	movs	r2, #4
 800c106:	f102 0614 	add.w	r6, r2, #20
 800c10a:	429e      	cmp	r6, r3
 800c10c:	6841      	ldr	r1, [r0, #4]
 800c10e:	d92f      	bls.n	800c170 <_dtoa_r+0x2d8>
 800c110:	4620      	mov	r0, r4
 800c112:	f001 fa59 	bl	800d5c8 <_Balloc>
 800c116:	9000      	str	r0, [sp, #0]
 800c118:	2800      	cmp	r0, #0
 800c11a:	d14b      	bne.n	800c1b4 <_dtoa_r+0x31c>
 800c11c:	4b24      	ldr	r3, [pc, #144]	; (800c1b0 <_dtoa_r+0x318>)
 800c11e:	4602      	mov	r2, r0
 800c120:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c124:	e6d1      	b.n	800beca <_dtoa_r+0x32>
 800c126:	2301      	movs	r3, #1
 800c128:	e7de      	b.n	800c0e8 <_dtoa_r+0x250>
 800c12a:	2300      	movs	r3, #0
 800c12c:	9308      	str	r3, [sp, #32]
 800c12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c130:	eb0a 0903 	add.w	r9, sl, r3
 800c134:	f109 0301 	add.w	r3, r9, #1
 800c138:	2b01      	cmp	r3, #1
 800c13a:	9301      	str	r3, [sp, #4]
 800c13c:	bfb8      	it	lt
 800c13e:	2301      	movlt	r3, #1
 800c140:	e7dd      	b.n	800c0fe <_dtoa_r+0x266>
 800c142:	2301      	movs	r3, #1
 800c144:	e7f2      	b.n	800c12c <_dtoa_r+0x294>
 800c146:	2501      	movs	r5, #1
 800c148:	2300      	movs	r3, #0
 800c14a:	9305      	str	r3, [sp, #20]
 800c14c:	9508      	str	r5, [sp, #32]
 800c14e:	f04f 39ff 	mov.w	r9, #4294967295
 800c152:	2200      	movs	r2, #0
 800c154:	f8cd 9004 	str.w	r9, [sp, #4]
 800c158:	2312      	movs	r3, #18
 800c15a:	9209      	str	r2, [sp, #36]	; 0x24
 800c15c:	e7cf      	b.n	800c0fe <_dtoa_r+0x266>
 800c15e:	2301      	movs	r3, #1
 800c160:	9308      	str	r3, [sp, #32]
 800c162:	e7f4      	b.n	800c14e <_dtoa_r+0x2b6>
 800c164:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c168:	f8cd 9004 	str.w	r9, [sp, #4]
 800c16c:	464b      	mov	r3, r9
 800c16e:	e7c6      	b.n	800c0fe <_dtoa_r+0x266>
 800c170:	3101      	adds	r1, #1
 800c172:	6041      	str	r1, [r0, #4]
 800c174:	0052      	lsls	r2, r2, #1
 800c176:	e7c6      	b.n	800c106 <_dtoa_r+0x26e>
 800c178:	636f4361 	.word	0x636f4361
 800c17c:	3fd287a7 	.word	0x3fd287a7
 800c180:	8b60c8b3 	.word	0x8b60c8b3
 800c184:	3fc68a28 	.word	0x3fc68a28
 800c188:	509f79fb 	.word	0x509f79fb
 800c18c:	3fd34413 	.word	0x3fd34413
 800c190:	0800ef1e 	.word	0x0800ef1e
 800c194:	0800ef35 	.word	0x0800ef35
 800c198:	7ff00000 	.word	0x7ff00000
 800c19c:	0800ef1a 	.word	0x0800ef1a
 800c1a0:	0800ef11 	.word	0x0800ef11
 800c1a4:	0800ed95 	.word	0x0800ed95
 800c1a8:	3ff80000 	.word	0x3ff80000
 800c1ac:	0800f110 	.word	0x0800f110
 800c1b0:	0800ef94 	.word	0x0800ef94
 800c1b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c1b6:	9a00      	ldr	r2, [sp, #0]
 800c1b8:	601a      	str	r2, [r3, #0]
 800c1ba:	9b01      	ldr	r3, [sp, #4]
 800c1bc:	2b0e      	cmp	r3, #14
 800c1be:	f200 80ad 	bhi.w	800c31c <_dtoa_r+0x484>
 800c1c2:	2d00      	cmp	r5, #0
 800c1c4:	f000 80aa 	beq.w	800c31c <_dtoa_r+0x484>
 800c1c8:	f1ba 0f00 	cmp.w	sl, #0
 800c1cc:	dd36      	ble.n	800c23c <_dtoa_r+0x3a4>
 800c1ce:	4ac3      	ldr	r2, [pc, #780]	; (800c4dc <_dtoa_r+0x644>)
 800c1d0:	f00a 030f 	and.w	r3, sl, #15
 800c1d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c1d8:	ed93 7b00 	vldr	d7, [r3]
 800c1dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c1e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c1e4:	eeb0 8a47 	vmov.f32	s16, s14
 800c1e8:	eef0 8a67 	vmov.f32	s17, s15
 800c1ec:	d016      	beq.n	800c21c <_dtoa_r+0x384>
 800c1ee:	4bbc      	ldr	r3, [pc, #752]	; (800c4e0 <_dtoa_r+0x648>)
 800c1f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c1f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1f8:	f7f4 fb28 	bl	800084c <__aeabi_ddiv>
 800c1fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c200:	f007 070f 	and.w	r7, r7, #15
 800c204:	2503      	movs	r5, #3
 800c206:	4eb6      	ldr	r6, [pc, #728]	; (800c4e0 <_dtoa_r+0x648>)
 800c208:	b957      	cbnz	r7, 800c220 <_dtoa_r+0x388>
 800c20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c20e:	ec53 2b18 	vmov	r2, r3, d8
 800c212:	f7f4 fb1b 	bl	800084c <__aeabi_ddiv>
 800c216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c21a:	e029      	b.n	800c270 <_dtoa_r+0x3d8>
 800c21c:	2502      	movs	r5, #2
 800c21e:	e7f2      	b.n	800c206 <_dtoa_r+0x36e>
 800c220:	07f9      	lsls	r1, r7, #31
 800c222:	d508      	bpl.n	800c236 <_dtoa_r+0x39e>
 800c224:	ec51 0b18 	vmov	r0, r1, d8
 800c228:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c22c:	f7f4 f9e4 	bl	80005f8 <__aeabi_dmul>
 800c230:	ec41 0b18 	vmov	d8, r0, r1
 800c234:	3501      	adds	r5, #1
 800c236:	107f      	asrs	r7, r7, #1
 800c238:	3608      	adds	r6, #8
 800c23a:	e7e5      	b.n	800c208 <_dtoa_r+0x370>
 800c23c:	f000 80a6 	beq.w	800c38c <_dtoa_r+0x4f4>
 800c240:	f1ca 0600 	rsb	r6, sl, #0
 800c244:	4ba5      	ldr	r3, [pc, #660]	; (800c4dc <_dtoa_r+0x644>)
 800c246:	4fa6      	ldr	r7, [pc, #664]	; (800c4e0 <_dtoa_r+0x648>)
 800c248:	f006 020f 	and.w	r2, r6, #15
 800c24c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c258:	f7f4 f9ce 	bl	80005f8 <__aeabi_dmul>
 800c25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c260:	1136      	asrs	r6, r6, #4
 800c262:	2300      	movs	r3, #0
 800c264:	2502      	movs	r5, #2
 800c266:	2e00      	cmp	r6, #0
 800c268:	f040 8085 	bne.w	800c376 <_dtoa_r+0x4de>
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1d2      	bne.n	800c216 <_dtoa_r+0x37e>
 800c270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 808c 	beq.w	800c390 <_dtoa_r+0x4f8>
 800c278:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c27c:	4b99      	ldr	r3, [pc, #612]	; (800c4e4 <_dtoa_r+0x64c>)
 800c27e:	2200      	movs	r2, #0
 800c280:	4630      	mov	r0, r6
 800c282:	4639      	mov	r1, r7
 800c284:	f7f4 fc2a 	bl	8000adc <__aeabi_dcmplt>
 800c288:	2800      	cmp	r0, #0
 800c28a:	f000 8081 	beq.w	800c390 <_dtoa_r+0x4f8>
 800c28e:	9b01      	ldr	r3, [sp, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d07d      	beq.n	800c390 <_dtoa_r+0x4f8>
 800c294:	f1b9 0f00 	cmp.w	r9, #0
 800c298:	dd3c      	ble.n	800c314 <_dtoa_r+0x47c>
 800c29a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c29e:	9307      	str	r3, [sp, #28]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	4b91      	ldr	r3, [pc, #580]	; (800c4e8 <_dtoa_r+0x650>)
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	f7f4 f9a6 	bl	80005f8 <__aeabi_dmul>
 800c2ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2b0:	3501      	adds	r5, #1
 800c2b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c2b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	f7f4 f932 	bl	8000524 <__aeabi_i2d>
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	463b      	mov	r3, r7
 800c2c4:	f7f4 f998 	bl	80005f8 <__aeabi_dmul>
 800c2c8:	4b88      	ldr	r3, [pc, #544]	; (800c4ec <_dtoa_r+0x654>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f7f3 ffde 	bl	800028c <__adddf3>
 800c2d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c2d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2d8:	9303      	str	r3, [sp, #12]
 800c2da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d15c      	bne.n	800c39a <_dtoa_r+0x502>
 800c2e0:	4b83      	ldr	r3, [pc, #524]	; (800c4f0 <_dtoa_r+0x658>)
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	4639      	mov	r1, r7
 800c2e8:	f7f3 ffce 	bl	8000288 <__aeabi_dsub>
 800c2ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2f0:	4606      	mov	r6, r0
 800c2f2:	460f      	mov	r7, r1
 800c2f4:	f7f4 fc10 	bl	8000b18 <__aeabi_dcmpgt>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	f040 8296 	bne.w	800c82a <_dtoa_r+0x992>
 800c2fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c302:	4630      	mov	r0, r6
 800c304:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c308:	4639      	mov	r1, r7
 800c30a:	f7f4 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800c30e:	2800      	cmp	r0, #0
 800c310:	f040 8288 	bne.w	800c824 <_dtoa_r+0x98c>
 800c314:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c318:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c31c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f2c0 8158 	blt.w	800c5d4 <_dtoa_r+0x73c>
 800c324:	f1ba 0f0e 	cmp.w	sl, #14
 800c328:	f300 8154 	bgt.w	800c5d4 <_dtoa_r+0x73c>
 800c32c:	4b6b      	ldr	r3, [pc, #428]	; (800c4dc <_dtoa_r+0x644>)
 800c32e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c332:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f280 80e3 	bge.w	800c504 <_dtoa_r+0x66c>
 800c33e:	9b01      	ldr	r3, [sp, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	f300 80df 	bgt.w	800c504 <_dtoa_r+0x66c>
 800c346:	f040 826d 	bne.w	800c824 <_dtoa_r+0x98c>
 800c34a:	4b69      	ldr	r3, [pc, #420]	; (800c4f0 <_dtoa_r+0x658>)
 800c34c:	2200      	movs	r2, #0
 800c34e:	4640      	mov	r0, r8
 800c350:	4649      	mov	r1, r9
 800c352:	f7f4 f951 	bl	80005f8 <__aeabi_dmul>
 800c356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c35a:	f7f4 fbd3 	bl	8000b04 <__aeabi_dcmpge>
 800c35e:	9e01      	ldr	r6, [sp, #4]
 800c360:	4637      	mov	r7, r6
 800c362:	2800      	cmp	r0, #0
 800c364:	f040 8243 	bne.w	800c7ee <_dtoa_r+0x956>
 800c368:	9d00      	ldr	r5, [sp, #0]
 800c36a:	2331      	movs	r3, #49	; 0x31
 800c36c:	f805 3b01 	strb.w	r3, [r5], #1
 800c370:	f10a 0a01 	add.w	sl, sl, #1
 800c374:	e23f      	b.n	800c7f6 <_dtoa_r+0x95e>
 800c376:	07f2      	lsls	r2, r6, #31
 800c378:	d505      	bpl.n	800c386 <_dtoa_r+0x4ee>
 800c37a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c37e:	f7f4 f93b 	bl	80005f8 <__aeabi_dmul>
 800c382:	3501      	adds	r5, #1
 800c384:	2301      	movs	r3, #1
 800c386:	1076      	asrs	r6, r6, #1
 800c388:	3708      	adds	r7, #8
 800c38a:	e76c      	b.n	800c266 <_dtoa_r+0x3ce>
 800c38c:	2502      	movs	r5, #2
 800c38e:	e76f      	b.n	800c270 <_dtoa_r+0x3d8>
 800c390:	9b01      	ldr	r3, [sp, #4]
 800c392:	f8cd a01c 	str.w	sl, [sp, #28]
 800c396:	930c      	str	r3, [sp, #48]	; 0x30
 800c398:	e78d      	b.n	800c2b6 <_dtoa_r+0x41e>
 800c39a:	9900      	ldr	r1, [sp, #0]
 800c39c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c39e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3a0:	4b4e      	ldr	r3, [pc, #312]	; (800c4dc <_dtoa_r+0x644>)
 800c3a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3a6:	4401      	add	r1, r0
 800c3a8:	9102      	str	r1, [sp, #8]
 800c3aa:	9908      	ldr	r1, [sp, #32]
 800c3ac:	eeb0 8a47 	vmov.f32	s16, s14
 800c3b0:	eef0 8a67 	vmov.f32	s17, s15
 800c3b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3bc:	2900      	cmp	r1, #0
 800c3be:	d045      	beq.n	800c44c <_dtoa_r+0x5b4>
 800c3c0:	494c      	ldr	r1, [pc, #304]	; (800c4f4 <_dtoa_r+0x65c>)
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	f7f4 fa42 	bl	800084c <__aeabi_ddiv>
 800c3c8:	ec53 2b18 	vmov	r2, r3, d8
 800c3cc:	f7f3 ff5c 	bl	8000288 <__aeabi_dsub>
 800c3d0:	9d00      	ldr	r5, [sp, #0]
 800c3d2:	ec41 0b18 	vmov	d8, r0, r1
 800c3d6:	4639      	mov	r1, r7
 800c3d8:	4630      	mov	r0, r6
 800c3da:	f7f4 fbbd 	bl	8000b58 <__aeabi_d2iz>
 800c3de:	900c      	str	r0, [sp, #48]	; 0x30
 800c3e0:	f7f4 f8a0 	bl	8000524 <__aeabi_i2d>
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	460b      	mov	r3, r1
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	4639      	mov	r1, r7
 800c3ec:	f7f3 ff4c 	bl	8000288 <__aeabi_dsub>
 800c3f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3f2:	3330      	adds	r3, #48	; 0x30
 800c3f4:	f805 3b01 	strb.w	r3, [r5], #1
 800c3f8:	ec53 2b18 	vmov	r2, r3, d8
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	460f      	mov	r7, r1
 800c400:	f7f4 fb6c 	bl	8000adc <__aeabi_dcmplt>
 800c404:	2800      	cmp	r0, #0
 800c406:	d165      	bne.n	800c4d4 <_dtoa_r+0x63c>
 800c408:	4632      	mov	r2, r6
 800c40a:	463b      	mov	r3, r7
 800c40c:	4935      	ldr	r1, [pc, #212]	; (800c4e4 <_dtoa_r+0x64c>)
 800c40e:	2000      	movs	r0, #0
 800c410:	f7f3 ff3a 	bl	8000288 <__aeabi_dsub>
 800c414:	ec53 2b18 	vmov	r2, r3, d8
 800c418:	f7f4 fb60 	bl	8000adc <__aeabi_dcmplt>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	f040 80b9 	bne.w	800c594 <_dtoa_r+0x6fc>
 800c422:	9b02      	ldr	r3, [sp, #8]
 800c424:	429d      	cmp	r5, r3
 800c426:	f43f af75 	beq.w	800c314 <_dtoa_r+0x47c>
 800c42a:	4b2f      	ldr	r3, [pc, #188]	; (800c4e8 <_dtoa_r+0x650>)
 800c42c:	ec51 0b18 	vmov	r0, r1, d8
 800c430:	2200      	movs	r2, #0
 800c432:	f7f4 f8e1 	bl	80005f8 <__aeabi_dmul>
 800c436:	4b2c      	ldr	r3, [pc, #176]	; (800c4e8 <_dtoa_r+0x650>)
 800c438:	ec41 0b18 	vmov	d8, r0, r1
 800c43c:	2200      	movs	r2, #0
 800c43e:	4630      	mov	r0, r6
 800c440:	4639      	mov	r1, r7
 800c442:	f7f4 f8d9 	bl	80005f8 <__aeabi_dmul>
 800c446:	4606      	mov	r6, r0
 800c448:	460f      	mov	r7, r1
 800c44a:	e7c4      	b.n	800c3d6 <_dtoa_r+0x53e>
 800c44c:	ec51 0b17 	vmov	r0, r1, d7
 800c450:	f7f4 f8d2 	bl	80005f8 <__aeabi_dmul>
 800c454:	9b02      	ldr	r3, [sp, #8]
 800c456:	9d00      	ldr	r5, [sp, #0]
 800c458:	930c      	str	r3, [sp, #48]	; 0x30
 800c45a:	ec41 0b18 	vmov	d8, r0, r1
 800c45e:	4639      	mov	r1, r7
 800c460:	4630      	mov	r0, r6
 800c462:	f7f4 fb79 	bl	8000b58 <__aeabi_d2iz>
 800c466:	9011      	str	r0, [sp, #68]	; 0x44
 800c468:	f7f4 f85c 	bl	8000524 <__aeabi_i2d>
 800c46c:	4602      	mov	r2, r0
 800c46e:	460b      	mov	r3, r1
 800c470:	4630      	mov	r0, r6
 800c472:	4639      	mov	r1, r7
 800c474:	f7f3 ff08 	bl	8000288 <__aeabi_dsub>
 800c478:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c47a:	3330      	adds	r3, #48	; 0x30
 800c47c:	f805 3b01 	strb.w	r3, [r5], #1
 800c480:	9b02      	ldr	r3, [sp, #8]
 800c482:	429d      	cmp	r5, r3
 800c484:	4606      	mov	r6, r0
 800c486:	460f      	mov	r7, r1
 800c488:	f04f 0200 	mov.w	r2, #0
 800c48c:	d134      	bne.n	800c4f8 <_dtoa_r+0x660>
 800c48e:	4b19      	ldr	r3, [pc, #100]	; (800c4f4 <_dtoa_r+0x65c>)
 800c490:	ec51 0b18 	vmov	r0, r1, d8
 800c494:	f7f3 fefa 	bl	800028c <__adddf3>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	4630      	mov	r0, r6
 800c49e:	4639      	mov	r1, r7
 800c4a0:	f7f4 fb3a 	bl	8000b18 <__aeabi_dcmpgt>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d175      	bne.n	800c594 <_dtoa_r+0x6fc>
 800c4a8:	ec53 2b18 	vmov	r2, r3, d8
 800c4ac:	4911      	ldr	r1, [pc, #68]	; (800c4f4 <_dtoa_r+0x65c>)
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	f7f3 feea 	bl	8000288 <__aeabi_dsub>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	4639      	mov	r1, r7
 800c4bc:	f7f4 fb0e 	bl	8000adc <__aeabi_dcmplt>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	f43f af27 	beq.w	800c314 <_dtoa_r+0x47c>
 800c4c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c4c8:	1e6b      	subs	r3, r5, #1
 800c4ca:	930c      	str	r3, [sp, #48]	; 0x30
 800c4cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c4d0:	2b30      	cmp	r3, #48	; 0x30
 800c4d2:	d0f8      	beq.n	800c4c6 <_dtoa_r+0x62e>
 800c4d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c4d8:	e04a      	b.n	800c570 <_dtoa_r+0x6d8>
 800c4da:	bf00      	nop
 800c4dc:	0800f110 	.word	0x0800f110
 800c4e0:	0800f0e8 	.word	0x0800f0e8
 800c4e4:	3ff00000 	.word	0x3ff00000
 800c4e8:	40240000 	.word	0x40240000
 800c4ec:	401c0000 	.word	0x401c0000
 800c4f0:	40140000 	.word	0x40140000
 800c4f4:	3fe00000 	.word	0x3fe00000
 800c4f8:	4baf      	ldr	r3, [pc, #700]	; (800c7b8 <_dtoa_r+0x920>)
 800c4fa:	f7f4 f87d 	bl	80005f8 <__aeabi_dmul>
 800c4fe:	4606      	mov	r6, r0
 800c500:	460f      	mov	r7, r1
 800c502:	e7ac      	b.n	800c45e <_dtoa_r+0x5c6>
 800c504:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c508:	9d00      	ldr	r5, [sp, #0]
 800c50a:	4642      	mov	r2, r8
 800c50c:	464b      	mov	r3, r9
 800c50e:	4630      	mov	r0, r6
 800c510:	4639      	mov	r1, r7
 800c512:	f7f4 f99b 	bl	800084c <__aeabi_ddiv>
 800c516:	f7f4 fb1f 	bl	8000b58 <__aeabi_d2iz>
 800c51a:	9002      	str	r0, [sp, #8]
 800c51c:	f7f4 f802 	bl	8000524 <__aeabi_i2d>
 800c520:	4642      	mov	r2, r8
 800c522:	464b      	mov	r3, r9
 800c524:	f7f4 f868 	bl	80005f8 <__aeabi_dmul>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4630      	mov	r0, r6
 800c52e:	4639      	mov	r1, r7
 800c530:	f7f3 feaa 	bl	8000288 <__aeabi_dsub>
 800c534:	9e02      	ldr	r6, [sp, #8]
 800c536:	9f01      	ldr	r7, [sp, #4]
 800c538:	3630      	adds	r6, #48	; 0x30
 800c53a:	f805 6b01 	strb.w	r6, [r5], #1
 800c53e:	9e00      	ldr	r6, [sp, #0]
 800c540:	1bae      	subs	r6, r5, r6
 800c542:	42b7      	cmp	r7, r6
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	d137      	bne.n	800c5ba <_dtoa_r+0x722>
 800c54a:	f7f3 fe9f 	bl	800028c <__adddf3>
 800c54e:	4642      	mov	r2, r8
 800c550:	464b      	mov	r3, r9
 800c552:	4606      	mov	r6, r0
 800c554:	460f      	mov	r7, r1
 800c556:	f7f4 fadf 	bl	8000b18 <__aeabi_dcmpgt>
 800c55a:	b9c8      	cbnz	r0, 800c590 <_dtoa_r+0x6f8>
 800c55c:	4642      	mov	r2, r8
 800c55e:	464b      	mov	r3, r9
 800c560:	4630      	mov	r0, r6
 800c562:	4639      	mov	r1, r7
 800c564:	f7f4 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c568:	b110      	cbz	r0, 800c570 <_dtoa_r+0x6d8>
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	07d9      	lsls	r1, r3, #31
 800c56e:	d40f      	bmi.n	800c590 <_dtoa_r+0x6f8>
 800c570:	4620      	mov	r0, r4
 800c572:	4659      	mov	r1, fp
 800c574:	f001 f868 	bl	800d648 <_Bfree>
 800c578:	2300      	movs	r3, #0
 800c57a:	702b      	strb	r3, [r5, #0]
 800c57c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c57e:	f10a 0001 	add.w	r0, sl, #1
 800c582:	6018      	str	r0, [r3, #0]
 800c584:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c586:	2b00      	cmp	r3, #0
 800c588:	f43f acd8 	beq.w	800bf3c <_dtoa_r+0xa4>
 800c58c:	601d      	str	r5, [r3, #0]
 800c58e:	e4d5      	b.n	800bf3c <_dtoa_r+0xa4>
 800c590:	f8cd a01c 	str.w	sl, [sp, #28]
 800c594:	462b      	mov	r3, r5
 800c596:	461d      	mov	r5, r3
 800c598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c59c:	2a39      	cmp	r2, #57	; 0x39
 800c59e:	d108      	bne.n	800c5b2 <_dtoa_r+0x71a>
 800c5a0:	9a00      	ldr	r2, [sp, #0]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d1f7      	bne.n	800c596 <_dtoa_r+0x6fe>
 800c5a6:	9a07      	ldr	r2, [sp, #28]
 800c5a8:	9900      	ldr	r1, [sp, #0]
 800c5aa:	3201      	adds	r2, #1
 800c5ac:	9207      	str	r2, [sp, #28]
 800c5ae:	2230      	movs	r2, #48	; 0x30
 800c5b0:	700a      	strb	r2, [r1, #0]
 800c5b2:	781a      	ldrb	r2, [r3, #0]
 800c5b4:	3201      	adds	r2, #1
 800c5b6:	701a      	strb	r2, [r3, #0]
 800c5b8:	e78c      	b.n	800c4d4 <_dtoa_r+0x63c>
 800c5ba:	4b7f      	ldr	r3, [pc, #508]	; (800c7b8 <_dtoa_r+0x920>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f7f4 f81b 	bl	80005f8 <__aeabi_dmul>
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	460f      	mov	r7, r1
 800c5ca:	f7f4 fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d09b      	beq.n	800c50a <_dtoa_r+0x672>
 800c5d2:	e7cd      	b.n	800c570 <_dtoa_r+0x6d8>
 800c5d4:	9a08      	ldr	r2, [sp, #32]
 800c5d6:	2a00      	cmp	r2, #0
 800c5d8:	f000 80c4 	beq.w	800c764 <_dtoa_r+0x8cc>
 800c5dc:	9a05      	ldr	r2, [sp, #20]
 800c5de:	2a01      	cmp	r2, #1
 800c5e0:	f300 80a8 	bgt.w	800c734 <_dtoa_r+0x89c>
 800c5e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c5e6:	2a00      	cmp	r2, #0
 800c5e8:	f000 80a0 	beq.w	800c72c <_dtoa_r+0x894>
 800c5ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c5f0:	9e06      	ldr	r6, [sp, #24]
 800c5f2:	4645      	mov	r5, r8
 800c5f4:	9a04      	ldr	r2, [sp, #16]
 800c5f6:	2101      	movs	r1, #1
 800c5f8:	441a      	add	r2, r3
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	4498      	add	r8, r3
 800c5fe:	9204      	str	r2, [sp, #16]
 800c600:	f001 f928 	bl	800d854 <__i2b>
 800c604:	4607      	mov	r7, r0
 800c606:	2d00      	cmp	r5, #0
 800c608:	dd0b      	ble.n	800c622 <_dtoa_r+0x78a>
 800c60a:	9b04      	ldr	r3, [sp, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	dd08      	ble.n	800c622 <_dtoa_r+0x78a>
 800c610:	42ab      	cmp	r3, r5
 800c612:	9a04      	ldr	r2, [sp, #16]
 800c614:	bfa8      	it	ge
 800c616:	462b      	movge	r3, r5
 800c618:	eba8 0803 	sub.w	r8, r8, r3
 800c61c:	1aed      	subs	r5, r5, r3
 800c61e:	1ad3      	subs	r3, r2, r3
 800c620:	9304      	str	r3, [sp, #16]
 800c622:	9b06      	ldr	r3, [sp, #24]
 800c624:	b1fb      	cbz	r3, 800c666 <_dtoa_r+0x7ce>
 800c626:	9b08      	ldr	r3, [sp, #32]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f000 809f 	beq.w	800c76c <_dtoa_r+0x8d4>
 800c62e:	2e00      	cmp	r6, #0
 800c630:	dd11      	ble.n	800c656 <_dtoa_r+0x7be>
 800c632:	4639      	mov	r1, r7
 800c634:	4632      	mov	r2, r6
 800c636:	4620      	mov	r0, r4
 800c638:	f001 f9c8 	bl	800d9cc <__pow5mult>
 800c63c:	465a      	mov	r2, fp
 800c63e:	4601      	mov	r1, r0
 800c640:	4607      	mov	r7, r0
 800c642:	4620      	mov	r0, r4
 800c644:	f001 f91c 	bl	800d880 <__multiply>
 800c648:	4659      	mov	r1, fp
 800c64a:	9007      	str	r0, [sp, #28]
 800c64c:	4620      	mov	r0, r4
 800c64e:	f000 fffb 	bl	800d648 <_Bfree>
 800c652:	9b07      	ldr	r3, [sp, #28]
 800c654:	469b      	mov	fp, r3
 800c656:	9b06      	ldr	r3, [sp, #24]
 800c658:	1b9a      	subs	r2, r3, r6
 800c65a:	d004      	beq.n	800c666 <_dtoa_r+0x7ce>
 800c65c:	4659      	mov	r1, fp
 800c65e:	4620      	mov	r0, r4
 800c660:	f001 f9b4 	bl	800d9cc <__pow5mult>
 800c664:	4683      	mov	fp, r0
 800c666:	2101      	movs	r1, #1
 800c668:	4620      	mov	r0, r4
 800c66a:	f001 f8f3 	bl	800d854 <__i2b>
 800c66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c670:	2b00      	cmp	r3, #0
 800c672:	4606      	mov	r6, r0
 800c674:	dd7c      	ble.n	800c770 <_dtoa_r+0x8d8>
 800c676:	461a      	mov	r2, r3
 800c678:	4601      	mov	r1, r0
 800c67a:	4620      	mov	r0, r4
 800c67c:	f001 f9a6 	bl	800d9cc <__pow5mult>
 800c680:	9b05      	ldr	r3, [sp, #20]
 800c682:	2b01      	cmp	r3, #1
 800c684:	4606      	mov	r6, r0
 800c686:	dd76      	ble.n	800c776 <_dtoa_r+0x8de>
 800c688:	2300      	movs	r3, #0
 800c68a:	9306      	str	r3, [sp, #24]
 800c68c:	6933      	ldr	r3, [r6, #16]
 800c68e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c692:	6918      	ldr	r0, [r3, #16]
 800c694:	f001 f88e 	bl	800d7b4 <__hi0bits>
 800c698:	f1c0 0020 	rsb	r0, r0, #32
 800c69c:	9b04      	ldr	r3, [sp, #16]
 800c69e:	4418      	add	r0, r3
 800c6a0:	f010 001f 	ands.w	r0, r0, #31
 800c6a4:	f000 8086 	beq.w	800c7b4 <_dtoa_r+0x91c>
 800c6a8:	f1c0 0320 	rsb	r3, r0, #32
 800c6ac:	2b04      	cmp	r3, #4
 800c6ae:	dd7f      	ble.n	800c7b0 <_dtoa_r+0x918>
 800c6b0:	f1c0 001c 	rsb	r0, r0, #28
 800c6b4:	9b04      	ldr	r3, [sp, #16]
 800c6b6:	4403      	add	r3, r0
 800c6b8:	4480      	add	r8, r0
 800c6ba:	4405      	add	r5, r0
 800c6bc:	9304      	str	r3, [sp, #16]
 800c6be:	f1b8 0f00 	cmp.w	r8, #0
 800c6c2:	dd05      	ble.n	800c6d0 <_dtoa_r+0x838>
 800c6c4:	4659      	mov	r1, fp
 800c6c6:	4642      	mov	r2, r8
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f001 f9d9 	bl	800da80 <__lshift>
 800c6ce:	4683      	mov	fp, r0
 800c6d0:	9b04      	ldr	r3, [sp, #16]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	dd05      	ble.n	800c6e2 <_dtoa_r+0x84a>
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	461a      	mov	r2, r3
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f001 f9d0 	bl	800da80 <__lshift>
 800c6e0:	4606      	mov	r6, r0
 800c6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d069      	beq.n	800c7bc <_dtoa_r+0x924>
 800c6e8:	4631      	mov	r1, r6
 800c6ea:	4658      	mov	r0, fp
 800c6ec:	f001 fa34 	bl	800db58 <__mcmp>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	da63      	bge.n	800c7bc <_dtoa_r+0x924>
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	4659      	mov	r1, fp
 800c6f8:	220a      	movs	r2, #10
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 ffc6 	bl	800d68c <__multadd>
 800c700:	9b08      	ldr	r3, [sp, #32]
 800c702:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c706:	4683      	mov	fp, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 818f 	beq.w	800ca2c <_dtoa_r+0xb94>
 800c70e:	4639      	mov	r1, r7
 800c710:	2300      	movs	r3, #0
 800c712:	220a      	movs	r2, #10
 800c714:	4620      	mov	r0, r4
 800c716:	f000 ffb9 	bl	800d68c <__multadd>
 800c71a:	f1b9 0f00 	cmp.w	r9, #0
 800c71e:	4607      	mov	r7, r0
 800c720:	f300 808e 	bgt.w	800c840 <_dtoa_r+0x9a8>
 800c724:	9b05      	ldr	r3, [sp, #20]
 800c726:	2b02      	cmp	r3, #2
 800c728:	dc50      	bgt.n	800c7cc <_dtoa_r+0x934>
 800c72a:	e089      	b.n	800c840 <_dtoa_r+0x9a8>
 800c72c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c72e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c732:	e75d      	b.n	800c5f0 <_dtoa_r+0x758>
 800c734:	9b01      	ldr	r3, [sp, #4]
 800c736:	1e5e      	subs	r6, r3, #1
 800c738:	9b06      	ldr	r3, [sp, #24]
 800c73a:	42b3      	cmp	r3, r6
 800c73c:	bfbf      	itttt	lt
 800c73e:	9b06      	ldrlt	r3, [sp, #24]
 800c740:	9606      	strlt	r6, [sp, #24]
 800c742:	1af2      	sublt	r2, r6, r3
 800c744:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c746:	bfb6      	itet	lt
 800c748:	189b      	addlt	r3, r3, r2
 800c74a:	1b9e      	subge	r6, r3, r6
 800c74c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c74e:	9b01      	ldr	r3, [sp, #4]
 800c750:	bfb8      	it	lt
 800c752:	2600      	movlt	r6, #0
 800c754:	2b00      	cmp	r3, #0
 800c756:	bfb5      	itete	lt
 800c758:	eba8 0503 	sublt.w	r5, r8, r3
 800c75c:	9b01      	ldrge	r3, [sp, #4]
 800c75e:	2300      	movlt	r3, #0
 800c760:	4645      	movge	r5, r8
 800c762:	e747      	b.n	800c5f4 <_dtoa_r+0x75c>
 800c764:	9e06      	ldr	r6, [sp, #24]
 800c766:	9f08      	ldr	r7, [sp, #32]
 800c768:	4645      	mov	r5, r8
 800c76a:	e74c      	b.n	800c606 <_dtoa_r+0x76e>
 800c76c:	9a06      	ldr	r2, [sp, #24]
 800c76e:	e775      	b.n	800c65c <_dtoa_r+0x7c4>
 800c770:	9b05      	ldr	r3, [sp, #20]
 800c772:	2b01      	cmp	r3, #1
 800c774:	dc18      	bgt.n	800c7a8 <_dtoa_r+0x910>
 800c776:	9b02      	ldr	r3, [sp, #8]
 800c778:	b9b3      	cbnz	r3, 800c7a8 <_dtoa_r+0x910>
 800c77a:	9b03      	ldr	r3, [sp, #12]
 800c77c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c780:	b9a3      	cbnz	r3, 800c7ac <_dtoa_r+0x914>
 800c782:	9b03      	ldr	r3, [sp, #12]
 800c784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c788:	0d1b      	lsrs	r3, r3, #20
 800c78a:	051b      	lsls	r3, r3, #20
 800c78c:	b12b      	cbz	r3, 800c79a <_dtoa_r+0x902>
 800c78e:	9b04      	ldr	r3, [sp, #16]
 800c790:	3301      	adds	r3, #1
 800c792:	9304      	str	r3, [sp, #16]
 800c794:	f108 0801 	add.w	r8, r8, #1
 800c798:	2301      	movs	r3, #1
 800c79a:	9306      	str	r3, [sp, #24]
 800c79c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f47f af74 	bne.w	800c68c <_dtoa_r+0x7f4>
 800c7a4:	2001      	movs	r0, #1
 800c7a6:	e779      	b.n	800c69c <_dtoa_r+0x804>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e7f6      	b.n	800c79a <_dtoa_r+0x902>
 800c7ac:	9b02      	ldr	r3, [sp, #8]
 800c7ae:	e7f4      	b.n	800c79a <_dtoa_r+0x902>
 800c7b0:	d085      	beq.n	800c6be <_dtoa_r+0x826>
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	301c      	adds	r0, #28
 800c7b6:	e77d      	b.n	800c6b4 <_dtoa_r+0x81c>
 800c7b8:	40240000 	.word	0x40240000
 800c7bc:	9b01      	ldr	r3, [sp, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	dc38      	bgt.n	800c834 <_dtoa_r+0x99c>
 800c7c2:	9b05      	ldr	r3, [sp, #20]
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	dd35      	ble.n	800c834 <_dtoa_r+0x99c>
 800c7c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c7cc:	f1b9 0f00 	cmp.w	r9, #0
 800c7d0:	d10d      	bne.n	800c7ee <_dtoa_r+0x956>
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	464b      	mov	r3, r9
 800c7d6:	2205      	movs	r2, #5
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f000 ff57 	bl	800d68c <__multadd>
 800c7de:	4601      	mov	r1, r0
 800c7e0:	4606      	mov	r6, r0
 800c7e2:	4658      	mov	r0, fp
 800c7e4:	f001 f9b8 	bl	800db58 <__mcmp>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	f73f adbd 	bgt.w	800c368 <_dtoa_r+0x4d0>
 800c7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f0:	9d00      	ldr	r5, [sp, #0]
 800c7f2:	ea6f 0a03 	mvn.w	sl, r3
 800c7f6:	f04f 0800 	mov.w	r8, #0
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	f000 ff23 	bl	800d648 <_Bfree>
 800c802:	2f00      	cmp	r7, #0
 800c804:	f43f aeb4 	beq.w	800c570 <_dtoa_r+0x6d8>
 800c808:	f1b8 0f00 	cmp.w	r8, #0
 800c80c:	d005      	beq.n	800c81a <_dtoa_r+0x982>
 800c80e:	45b8      	cmp	r8, r7
 800c810:	d003      	beq.n	800c81a <_dtoa_r+0x982>
 800c812:	4641      	mov	r1, r8
 800c814:	4620      	mov	r0, r4
 800c816:	f000 ff17 	bl	800d648 <_Bfree>
 800c81a:	4639      	mov	r1, r7
 800c81c:	4620      	mov	r0, r4
 800c81e:	f000 ff13 	bl	800d648 <_Bfree>
 800c822:	e6a5      	b.n	800c570 <_dtoa_r+0x6d8>
 800c824:	2600      	movs	r6, #0
 800c826:	4637      	mov	r7, r6
 800c828:	e7e1      	b.n	800c7ee <_dtoa_r+0x956>
 800c82a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c82c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c830:	4637      	mov	r7, r6
 800c832:	e599      	b.n	800c368 <_dtoa_r+0x4d0>
 800c834:	9b08      	ldr	r3, [sp, #32]
 800c836:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f000 80fd 	beq.w	800ca3a <_dtoa_r+0xba2>
 800c840:	2d00      	cmp	r5, #0
 800c842:	dd05      	ble.n	800c850 <_dtoa_r+0x9b8>
 800c844:	4639      	mov	r1, r7
 800c846:	462a      	mov	r2, r5
 800c848:	4620      	mov	r0, r4
 800c84a:	f001 f919 	bl	800da80 <__lshift>
 800c84e:	4607      	mov	r7, r0
 800c850:	9b06      	ldr	r3, [sp, #24]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d05c      	beq.n	800c910 <_dtoa_r+0xa78>
 800c856:	6879      	ldr	r1, [r7, #4]
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 feb5 	bl	800d5c8 <_Balloc>
 800c85e:	4605      	mov	r5, r0
 800c860:	b928      	cbnz	r0, 800c86e <_dtoa_r+0x9d6>
 800c862:	4b80      	ldr	r3, [pc, #512]	; (800ca64 <_dtoa_r+0xbcc>)
 800c864:	4602      	mov	r2, r0
 800c866:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c86a:	f7ff bb2e 	b.w	800beca <_dtoa_r+0x32>
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	3202      	adds	r2, #2
 800c872:	0092      	lsls	r2, r2, #2
 800c874:	f107 010c 	add.w	r1, r7, #12
 800c878:	300c      	adds	r0, #12
 800c87a:	f7fd fbc7 	bl	800a00c <memcpy>
 800c87e:	2201      	movs	r2, #1
 800c880:	4629      	mov	r1, r5
 800c882:	4620      	mov	r0, r4
 800c884:	f001 f8fc 	bl	800da80 <__lshift>
 800c888:	9b00      	ldr	r3, [sp, #0]
 800c88a:	3301      	adds	r3, #1
 800c88c:	9301      	str	r3, [sp, #4]
 800c88e:	9b00      	ldr	r3, [sp, #0]
 800c890:	444b      	add	r3, r9
 800c892:	9307      	str	r3, [sp, #28]
 800c894:	9b02      	ldr	r3, [sp, #8]
 800c896:	f003 0301 	and.w	r3, r3, #1
 800c89a:	46b8      	mov	r8, r7
 800c89c:	9306      	str	r3, [sp, #24]
 800c89e:	4607      	mov	r7, r0
 800c8a0:	9b01      	ldr	r3, [sp, #4]
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	4658      	mov	r0, fp
 800c8a8:	9302      	str	r3, [sp, #8]
 800c8aa:	f7ff fa67 	bl	800bd7c <quorem>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	3330      	adds	r3, #48	; 0x30
 800c8b2:	9004      	str	r0, [sp, #16]
 800c8b4:	4641      	mov	r1, r8
 800c8b6:	4658      	mov	r0, fp
 800c8b8:	9308      	str	r3, [sp, #32]
 800c8ba:	f001 f94d 	bl	800db58 <__mcmp>
 800c8be:	463a      	mov	r2, r7
 800c8c0:	4681      	mov	r9, r0
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f001 f963 	bl	800db90 <__mdiff>
 800c8ca:	68c2      	ldr	r2, [r0, #12]
 800c8cc:	9b08      	ldr	r3, [sp, #32]
 800c8ce:	4605      	mov	r5, r0
 800c8d0:	bb02      	cbnz	r2, 800c914 <_dtoa_r+0xa7c>
 800c8d2:	4601      	mov	r1, r0
 800c8d4:	4658      	mov	r0, fp
 800c8d6:	f001 f93f 	bl	800db58 <__mcmp>
 800c8da:	9b08      	ldr	r3, [sp, #32]
 800c8dc:	4602      	mov	r2, r0
 800c8de:	4629      	mov	r1, r5
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c8e6:	f000 feaf 	bl	800d648 <_Bfree>
 800c8ea:	9b05      	ldr	r3, [sp, #20]
 800c8ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8ee:	9d01      	ldr	r5, [sp, #4]
 800c8f0:	ea43 0102 	orr.w	r1, r3, r2
 800c8f4:	9b06      	ldr	r3, [sp, #24]
 800c8f6:	430b      	orrs	r3, r1
 800c8f8:	9b08      	ldr	r3, [sp, #32]
 800c8fa:	d10d      	bne.n	800c918 <_dtoa_r+0xa80>
 800c8fc:	2b39      	cmp	r3, #57	; 0x39
 800c8fe:	d029      	beq.n	800c954 <_dtoa_r+0xabc>
 800c900:	f1b9 0f00 	cmp.w	r9, #0
 800c904:	dd01      	ble.n	800c90a <_dtoa_r+0xa72>
 800c906:	9b04      	ldr	r3, [sp, #16]
 800c908:	3331      	adds	r3, #49	; 0x31
 800c90a:	9a02      	ldr	r2, [sp, #8]
 800c90c:	7013      	strb	r3, [r2, #0]
 800c90e:	e774      	b.n	800c7fa <_dtoa_r+0x962>
 800c910:	4638      	mov	r0, r7
 800c912:	e7b9      	b.n	800c888 <_dtoa_r+0x9f0>
 800c914:	2201      	movs	r2, #1
 800c916:	e7e2      	b.n	800c8de <_dtoa_r+0xa46>
 800c918:	f1b9 0f00 	cmp.w	r9, #0
 800c91c:	db06      	blt.n	800c92c <_dtoa_r+0xa94>
 800c91e:	9905      	ldr	r1, [sp, #20]
 800c920:	ea41 0909 	orr.w	r9, r1, r9
 800c924:	9906      	ldr	r1, [sp, #24]
 800c926:	ea59 0101 	orrs.w	r1, r9, r1
 800c92a:	d120      	bne.n	800c96e <_dtoa_r+0xad6>
 800c92c:	2a00      	cmp	r2, #0
 800c92e:	ddec      	ble.n	800c90a <_dtoa_r+0xa72>
 800c930:	4659      	mov	r1, fp
 800c932:	2201      	movs	r2, #1
 800c934:	4620      	mov	r0, r4
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	f001 f8a2 	bl	800da80 <__lshift>
 800c93c:	4631      	mov	r1, r6
 800c93e:	4683      	mov	fp, r0
 800c940:	f001 f90a 	bl	800db58 <__mcmp>
 800c944:	2800      	cmp	r0, #0
 800c946:	9b01      	ldr	r3, [sp, #4]
 800c948:	dc02      	bgt.n	800c950 <_dtoa_r+0xab8>
 800c94a:	d1de      	bne.n	800c90a <_dtoa_r+0xa72>
 800c94c:	07da      	lsls	r2, r3, #31
 800c94e:	d5dc      	bpl.n	800c90a <_dtoa_r+0xa72>
 800c950:	2b39      	cmp	r3, #57	; 0x39
 800c952:	d1d8      	bne.n	800c906 <_dtoa_r+0xa6e>
 800c954:	9a02      	ldr	r2, [sp, #8]
 800c956:	2339      	movs	r3, #57	; 0x39
 800c958:	7013      	strb	r3, [r2, #0]
 800c95a:	462b      	mov	r3, r5
 800c95c:	461d      	mov	r5, r3
 800c95e:	3b01      	subs	r3, #1
 800c960:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c964:	2a39      	cmp	r2, #57	; 0x39
 800c966:	d050      	beq.n	800ca0a <_dtoa_r+0xb72>
 800c968:	3201      	adds	r2, #1
 800c96a:	701a      	strb	r2, [r3, #0]
 800c96c:	e745      	b.n	800c7fa <_dtoa_r+0x962>
 800c96e:	2a00      	cmp	r2, #0
 800c970:	dd03      	ble.n	800c97a <_dtoa_r+0xae2>
 800c972:	2b39      	cmp	r3, #57	; 0x39
 800c974:	d0ee      	beq.n	800c954 <_dtoa_r+0xabc>
 800c976:	3301      	adds	r3, #1
 800c978:	e7c7      	b.n	800c90a <_dtoa_r+0xa72>
 800c97a:	9a01      	ldr	r2, [sp, #4]
 800c97c:	9907      	ldr	r1, [sp, #28]
 800c97e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c982:	428a      	cmp	r2, r1
 800c984:	d02a      	beq.n	800c9dc <_dtoa_r+0xb44>
 800c986:	4659      	mov	r1, fp
 800c988:	2300      	movs	r3, #0
 800c98a:	220a      	movs	r2, #10
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 fe7d 	bl	800d68c <__multadd>
 800c992:	45b8      	cmp	r8, r7
 800c994:	4683      	mov	fp, r0
 800c996:	f04f 0300 	mov.w	r3, #0
 800c99a:	f04f 020a 	mov.w	r2, #10
 800c99e:	4641      	mov	r1, r8
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	d107      	bne.n	800c9b4 <_dtoa_r+0xb1c>
 800c9a4:	f000 fe72 	bl	800d68c <__multadd>
 800c9a8:	4680      	mov	r8, r0
 800c9aa:	4607      	mov	r7, r0
 800c9ac:	9b01      	ldr	r3, [sp, #4]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	9301      	str	r3, [sp, #4]
 800c9b2:	e775      	b.n	800c8a0 <_dtoa_r+0xa08>
 800c9b4:	f000 fe6a 	bl	800d68c <__multadd>
 800c9b8:	4639      	mov	r1, r7
 800c9ba:	4680      	mov	r8, r0
 800c9bc:	2300      	movs	r3, #0
 800c9be:	220a      	movs	r2, #10
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f000 fe63 	bl	800d68c <__multadd>
 800c9c6:	4607      	mov	r7, r0
 800c9c8:	e7f0      	b.n	800c9ac <_dtoa_r+0xb14>
 800c9ca:	f1b9 0f00 	cmp.w	r9, #0
 800c9ce:	9a00      	ldr	r2, [sp, #0]
 800c9d0:	bfcc      	ite	gt
 800c9d2:	464d      	movgt	r5, r9
 800c9d4:	2501      	movle	r5, #1
 800c9d6:	4415      	add	r5, r2
 800c9d8:	f04f 0800 	mov.w	r8, #0
 800c9dc:	4659      	mov	r1, fp
 800c9de:	2201      	movs	r2, #1
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	9301      	str	r3, [sp, #4]
 800c9e4:	f001 f84c 	bl	800da80 <__lshift>
 800c9e8:	4631      	mov	r1, r6
 800c9ea:	4683      	mov	fp, r0
 800c9ec:	f001 f8b4 	bl	800db58 <__mcmp>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	dcb2      	bgt.n	800c95a <_dtoa_r+0xac2>
 800c9f4:	d102      	bne.n	800c9fc <_dtoa_r+0xb64>
 800c9f6:	9b01      	ldr	r3, [sp, #4]
 800c9f8:	07db      	lsls	r3, r3, #31
 800c9fa:	d4ae      	bmi.n	800c95a <_dtoa_r+0xac2>
 800c9fc:	462b      	mov	r3, r5
 800c9fe:	461d      	mov	r5, r3
 800ca00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca04:	2a30      	cmp	r2, #48	; 0x30
 800ca06:	d0fa      	beq.n	800c9fe <_dtoa_r+0xb66>
 800ca08:	e6f7      	b.n	800c7fa <_dtoa_r+0x962>
 800ca0a:	9a00      	ldr	r2, [sp, #0]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d1a5      	bne.n	800c95c <_dtoa_r+0xac4>
 800ca10:	f10a 0a01 	add.w	sl, sl, #1
 800ca14:	2331      	movs	r3, #49	; 0x31
 800ca16:	e779      	b.n	800c90c <_dtoa_r+0xa74>
 800ca18:	4b13      	ldr	r3, [pc, #76]	; (800ca68 <_dtoa_r+0xbd0>)
 800ca1a:	f7ff baaf 	b.w	800bf7c <_dtoa_r+0xe4>
 800ca1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f47f aa86 	bne.w	800bf32 <_dtoa_r+0x9a>
 800ca26:	4b11      	ldr	r3, [pc, #68]	; (800ca6c <_dtoa_r+0xbd4>)
 800ca28:	f7ff baa8 	b.w	800bf7c <_dtoa_r+0xe4>
 800ca2c:	f1b9 0f00 	cmp.w	r9, #0
 800ca30:	dc03      	bgt.n	800ca3a <_dtoa_r+0xba2>
 800ca32:	9b05      	ldr	r3, [sp, #20]
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	f73f aec9 	bgt.w	800c7cc <_dtoa_r+0x934>
 800ca3a:	9d00      	ldr	r5, [sp, #0]
 800ca3c:	4631      	mov	r1, r6
 800ca3e:	4658      	mov	r0, fp
 800ca40:	f7ff f99c 	bl	800bd7c <quorem>
 800ca44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ca48:	f805 3b01 	strb.w	r3, [r5], #1
 800ca4c:	9a00      	ldr	r2, [sp, #0]
 800ca4e:	1aaa      	subs	r2, r5, r2
 800ca50:	4591      	cmp	r9, r2
 800ca52:	ddba      	ble.n	800c9ca <_dtoa_r+0xb32>
 800ca54:	4659      	mov	r1, fp
 800ca56:	2300      	movs	r3, #0
 800ca58:	220a      	movs	r2, #10
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f000 fe16 	bl	800d68c <__multadd>
 800ca60:	4683      	mov	fp, r0
 800ca62:	e7eb      	b.n	800ca3c <_dtoa_r+0xba4>
 800ca64:	0800ef94 	.word	0x0800ef94
 800ca68:	0800ed94 	.word	0x0800ed94
 800ca6c:	0800ef11 	.word	0x0800ef11

0800ca70 <__sflush_r>:
 800ca70:	898a      	ldrh	r2, [r1, #12]
 800ca72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca76:	4605      	mov	r5, r0
 800ca78:	0710      	lsls	r0, r2, #28
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	d458      	bmi.n	800cb30 <__sflush_r+0xc0>
 800ca7e:	684b      	ldr	r3, [r1, #4]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	dc05      	bgt.n	800ca90 <__sflush_r+0x20>
 800ca84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	dc02      	bgt.n	800ca90 <__sflush_r+0x20>
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca92:	2e00      	cmp	r6, #0
 800ca94:	d0f9      	beq.n	800ca8a <__sflush_r+0x1a>
 800ca96:	2300      	movs	r3, #0
 800ca98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca9c:	682f      	ldr	r7, [r5, #0]
 800ca9e:	602b      	str	r3, [r5, #0]
 800caa0:	d032      	beq.n	800cb08 <__sflush_r+0x98>
 800caa2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800caa4:	89a3      	ldrh	r3, [r4, #12]
 800caa6:	075a      	lsls	r2, r3, #29
 800caa8:	d505      	bpl.n	800cab6 <__sflush_r+0x46>
 800caaa:	6863      	ldr	r3, [r4, #4]
 800caac:	1ac0      	subs	r0, r0, r3
 800caae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cab0:	b10b      	cbz	r3, 800cab6 <__sflush_r+0x46>
 800cab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cab4:	1ac0      	subs	r0, r0, r3
 800cab6:	2300      	movs	r3, #0
 800cab8:	4602      	mov	r2, r0
 800caba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cabc:	6a21      	ldr	r1, [r4, #32]
 800cabe:	4628      	mov	r0, r5
 800cac0:	47b0      	blx	r6
 800cac2:	1c43      	adds	r3, r0, #1
 800cac4:	89a3      	ldrh	r3, [r4, #12]
 800cac6:	d106      	bne.n	800cad6 <__sflush_r+0x66>
 800cac8:	6829      	ldr	r1, [r5, #0]
 800caca:	291d      	cmp	r1, #29
 800cacc:	d82c      	bhi.n	800cb28 <__sflush_r+0xb8>
 800cace:	4a2a      	ldr	r2, [pc, #168]	; (800cb78 <__sflush_r+0x108>)
 800cad0:	40ca      	lsrs	r2, r1
 800cad2:	07d6      	lsls	r6, r2, #31
 800cad4:	d528      	bpl.n	800cb28 <__sflush_r+0xb8>
 800cad6:	2200      	movs	r2, #0
 800cad8:	6062      	str	r2, [r4, #4]
 800cada:	04d9      	lsls	r1, r3, #19
 800cadc:	6922      	ldr	r2, [r4, #16]
 800cade:	6022      	str	r2, [r4, #0]
 800cae0:	d504      	bpl.n	800caec <__sflush_r+0x7c>
 800cae2:	1c42      	adds	r2, r0, #1
 800cae4:	d101      	bne.n	800caea <__sflush_r+0x7a>
 800cae6:	682b      	ldr	r3, [r5, #0]
 800cae8:	b903      	cbnz	r3, 800caec <__sflush_r+0x7c>
 800caea:	6560      	str	r0, [r4, #84]	; 0x54
 800caec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800caee:	602f      	str	r7, [r5, #0]
 800caf0:	2900      	cmp	r1, #0
 800caf2:	d0ca      	beq.n	800ca8a <__sflush_r+0x1a>
 800caf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800caf8:	4299      	cmp	r1, r3
 800cafa:	d002      	beq.n	800cb02 <__sflush_r+0x92>
 800cafc:	4628      	mov	r0, r5
 800cafe:	f001 fa2d 	bl	800df5c <_free_r>
 800cb02:	2000      	movs	r0, #0
 800cb04:	6360      	str	r0, [r4, #52]	; 0x34
 800cb06:	e7c1      	b.n	800ca8c <__sflush_r+0x1c>
 800cb08:	6a21      	ldr	r1, [r4, #32]
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	47b0      	blx	r6
 800cb10:	1c41      	adds	r1, r0, #1
 800cb12:	d1c7      	bne.n	800caa4 <__sflush_r+0x34>
 800cb14:	682b      	ldr	r3, [r5, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d0c4      	beq.n	800caa4 <__sflush_r+0x34>
 800cb1a:	2b1d      	cmp	r3, #29
 800cb1c:	d001      	beq.n	800cb22 <__sflush_r+0xb2>
 800cb1e:	2b16      	cmp	r3, #22
 800cb20:	d101      	bne.n	800cb26 <__sflush_r+0xb6>
 800cb22:	602f      	str	r7, [r5, #0]
 800cb24:	e7b1      	b.n	800ca8a <__sflush_r+0x1a>
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb2c:	81a3      	strh	r3, [r4, #12]
 800cb2e:	e7ad      	b.n	800ca8c <__sflush_r+0x1c>
 800cb30:	690f      	ldr	r7, [r1, #16]
 800cb32:	2f00      	cmp	r7, #0
 800cb34:	d0a9      	beq.n	800ca8a <__sflush_r+0x1a>
 800cb36:	0793      	lsls	r3, r2, #30
 800cb38:	680e      	ldr	r6, [r1, #0]
 800cb3a:	bf08      	it	eq
 800cb3c:	694b      	ldreq	r3, [r1, #20]
 800cb3e:	600f      	str	r7, [r1, #0]
 800cb40:	bf18      	it	ne
 800cb42:	2300      	movne	r3, #0
 800cb44:	eba6 0807 	sub.w	r8, r6, r7
 800cb48:	608b      	str	r3, [r1, #8]
 800cb4a:	f1b8 0f00 	cmp.w	r8, #0
 800cb4e:	dd9c      	ble.n	800ca8a <__sflush_r+0x1a>
 800cb50:	6a21      	ldr	r1, [r4, #32]
 800cb52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb54:	4643      	mov	r3, r8
 800cb56:	463a      	mov	r2, r7
 800cb58:	4628      	mov	r0, r5
 800cb5a:	47b0      	blx	r6
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	dc06      	bgt.n	800cb6e <__sflush_r+0xfe>
 800cb60:	89a3      	ldrh	r3, [r4, #12]
 800cb62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb66:	81a3      	strh	r3, [r4, #12]
 800cb68:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6c:	e78e      	b.n	800ca8c <__sflush_r+0x1c>
 800cb6e:	4407      	add	r7, r0
 800cb70:	eba8 0800 	sub.w	r8, r8, r0
 800cb74:	e7e9      	b.n	800cb4a <__sflush_r+0xda>
 800cb76:	bf00      	nop
 800cb78:	20400001 	.word	0x20400001

0800cb7c <_fflush_r>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	690b      	ldr	r3, [r1, #16]
 800cb80:	4605      	mov	r5, r0
 800cb82:	460c      	mov	r4, r1
 800cb84:	b913      	cbnz	r3, 800cb8c <_fflush_r+0x10>
 800cb86:	2500      	movs	r5, #0
 800cb88:	4628      	mov	r0, r5
 800cb8a:	bd38      	pop	{r3, r4, r5, pc}
 800cb8c:	b118      	cbz	r0, 800cb96 <_fflush_r+0x1a>
 800cb8e:	6983      	ldr	r3, [r0, #24]
 800cb90:	b90b      	cbnz	r3, 800cb96 <_fflush_r+0x1a>
 800cb92:	f000 f887 	bl	800cca4 <__sinit>
 800cb96:	4b14      	ldr	r3, [pc, #80]	; (800cbe8 <_fflush_r+0x6c>)
 800cb98:	429c      	cmp	r4, r3
 800cb9a:	d11b      	bne.n	800cbd4 <_fflush_r+0x58>
 800cb9c:	686c      	ldr	r4, [r5, #4]
 800cb9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d0ef      	beq.n	800cb86 <_fflush_r+0xa>
 800cba6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cba8:	07d0      	lsls	r0, r2, #31
 800cbaa:	d404      	bmi.n	800cbb6 <_fflush_r+0x3a>
 800cbac:	0599      	lsls	r1, r3, #22
 800cbae:	d402      	bmi.n	800cbb6 <_fflush_r+0x3a>
 800cbb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbb2:	f000 fc88 	bl	800d4c6 <__retarget_lock_acquire_recursive>
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	4621      	mov	r1, r4
 800cbba:	f7ff ff59 	bl	800ca70 <__sflush_r>
 800cbbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbc0:	07da      	lsls	r2, r3, #31
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	d4e0      	bmi.n	800cb88 <_fflush_r+0xc>
 800cbc6:	89a3      	ldrh	r3, [r4, #12]
 800cbc8:	059b      	lsls	r3, r3, #22
 800cbca:	d4dd      	bmi.n	800cb88 <_fflush_r+0xc>
 800cbcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbce:	f000 fc7b 	bl	800d4c8 <__retarget_lock_release_recursive>
 800cbd2:	e7d9      	b.n	800cb88 <_fflush_r+0xc>
 800cbd4:	4b05      	ldr	r3, [pc, #20]	; (800cbec <_fflush_r+0x70>)
 800cbd6:	429c      	cmp	r4, r3
 800cbd8:	d101      	bne.n	800cbde <_fflush_r+0x62>
 800cbda:	68ac      	ldr	r4, [r5, #8]
 800cbdc:	e7df      	b.n	800cb9e <_fflush_r+0x22>
 800cbde:	4b04      	ldr	r3, [pc, #16]	; (800cbf0 <_fflush_r+0x74>)
 800cbe0:	429c      	cmp	r4, r3
 800cbe2:	bf08      	it	eq
 800cbe4:	68ec      	ldreq	r4, [r5, #12]
 800cbe6:	e7da      	b.n	800cb9e <_fflush_r+0x22>
 800cbe8:	0800efc8 	.word	0x0800efc8
 800cbec:	0800efe8 	.word	0x0800efe8
 800cbf0:	0800efa8 	.word	0x0800efa8

0800cbf4 <std>:
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	b510      	push	{r4, lr}
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	e9c0 3300 	strd	r3, r3, [r0]
 800cbfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc02:	6083      	str	r3, [r0, #8]
 800cc04:	8181      	strh	r1, [r0, #12]
 800cc06:	6643      	str	r3, [r0, #100]	; 0x64
 800cc08:	81c2      	strh	r2, [r0, #14]
 800cc0a:	6183      	str	r3, [r0, #24]
 800cc0c:	4619      	mov	r1, r3
 800cc0e:	2208      	movs	r2, #8
 800cc10:	305c      	adds	r0, #92	; 0x5c
 800cc12:	f7fd fa09 	bl	800a028 <memset>
 800cc16:	4b05      	ldr	r3, [pc, #20]	; (800cc2c <std+0x38>)
 800cc18:	6263      	str	r3, [r4, #36]	; 0x24
 800cc1a:	4b05      	ldr	r3, [pc, #20]	; (800cc30 <std+0x3c>)
 800cc1c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc1e:	4b05      	ldr	r3, [pc, #20]	; (800cc34 <std+0x40>)
 800cc20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc22:	4b05      	ldr	r3, [pc, #20]	; (800cc38 <std+0x44>)
 800cc24:	6224      	str	r4, [r4, #32]
 800cc26:	6323      	str	r3, [r4, #48]	; 0x30
 800cc28:	bd10      	pop	{r4, pc}
 800cc2a:	bf00      	nop
 800cc2c:	0800e651 	.word	0x0800e651
 800cc30:	0800e673 	.word	0x0800e673
 800cc34:	0800e6ab 	.word	0x0800e6ab
 800cc38:	0800e6cf 	.word	0x0800e6cf

0800cc3c <_cleanup_r>:
 800cc3c:	4901      	ldr	r1, [pc, #4]	; (800cc44 <_cleanup_r+0x8>)
 800cc3e:	f000 b8af 	b.w	800cda0 <_fwalk_reent>
 800cc42:	bf00      	nop
 800cc44:	0800cb7d 	.word	0x0800cb7d

0800cc48 <__sfmoreglue>:
 800cc48:	b570      	push	{r4, r5, r6, lr}
 800cc4a:	1e4a      	subs	r2, r1, #1
 800cc4c:	2568      	movs	r5, #104	; 0x68
 800cc4e:	4355      	muls	r5, r2
 800cc50:	460e      	mov	r6, r1
 800cc52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc56:	f001 f9d1 	bl	800dffc <_malloc_r>
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	b140      	cbz	r0, 800cc70 <__sfmoreglue+0x28>
 800cc5e:	2100      	movs	r1, #0
 800cc60:	e9c0 1600 	strd	r1, r6, [r0]
 800cc64:	300c      	adds	r0, #12
 800cc66:	60a0      	str	r0, [r4, #8]
 800cc68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc6c:	f7fd f9dc 	bl	800a028 <memset>
 800cc70:	4620      	mov	r0, r4
 800cc72:	bd70      	pop	{r4, r5, r6, pc}

0800cc74 <__sfp_lock_acquire>:
 800cc74:	4801      	ldr	r0, [pc, #4]	; (800cc7c <__sfp_lock_acquire+0x8>)
 800cc76:	f000 bc26 	b.w	800d4c6 <__retarget_lock_acquire_recursive>
 800cc7a:	bf00      	nop
 800cc7c:	200095d0 	.word	0x200095d0

0800cc80 <__sfp_lock_release>:
 800cc80:	4801      	ldr	r0, [pc, #4]	; (800cc88 <__sfp_lock_release+0x8>)
 800cc82:	f000 bc21 	b.w	800d4c8 <__retarget_lock_release_recursive>
 800cc86:	bf00      	nop
 800cc88:	200095d0 	.word	0x200095d0

0800cc8c <__sinit_lock_acquire>:
 800cc8c:	4801      	ldr	r0, [pc, #4]	; (800cc94 <__sinit_lock_acquire+0x8>)
 800cc8e:	f000 bc1a 	b.w	800d4c6 <__retarget_lock_acquire_recursive>
 800cc92:	bf00      	nop
 800cc94:	200095cb 	.word	0x200095cb

0800cc98 <__sinit_lock_release>:
 800cc98:	4801      	ldr	r0, [pc, #4]	; (800cca0 <__sinit_lock_release+0x8>)
 800cc9a:	f000 bc15 	b.w	800d4c8 <__retarget_lock_release_recursive>
 800cc9e:	bf00      	nop
 800cca0:	200095cb 	.word	0x200095cb

0800cca4 <__sinit>:
 800cca4:	b510      	push	{r4, lr}
 800cca6:	4604      	mov	r4, r0
 800cca8:	f7ff fff0 	bl	800cc8c <__sinit_lock_acquire>
 800ccac:	69a3      	ldr	r3, [r4, #24]
 800ccae:	b11b      	cbz	r3, 800ccb8 <__sinit+0x14>
 800ccb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccb4:	f7ff bff0 	b.w	800cc98 <__sinit_lock_release>
 800ccb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ccbc:	6523      	str	r3, [r4, #80]	; 0x50
 800ccbe:	4b13      	ldr	r3, [pc, #76]	; (800cd0c <__sinit+0x68>)
 800ccc0:	4a13      	ldr	r2, [pc, #76]	; (800cd10 <__sinit+0x6c>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ccc6:	42a3      	cmp	r3, r4
 800ccc8:	bf04      	itt	eq
 800ccca:	2301      	moveq	r3, #1
 800cccc:	61a3      	streq	r3, [r4, #24]
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f000 f820 	bl	800cd14 <__sfp>
 800ccd4:	6060      	str	r0, [r4, #4]
 800ccd6:	4620      	mov	r0, r4
 800ccd8:	f000 f81c 	bl	800cd14 <__sfp>
 800ccdc:	60a0      	str	r0, [r4, #8]
 800ccde:	4620      	mov	r0, r4
 800cce0:	f000 f818 	bl	800cd14 <__sfp>
 800cce4:	2200      	movs	r2, #0
 800cce6:	60e0      	str	r0, [r4, #12]
 800cce8:	2104      	movs	r1, #4
 800ccea:	6860      	ldr	r0, [r4, #4]
 800ccec:	f7ff ff82 	bl	800cbf4 <std>
 800ccf0:	68a0      	ldr	r0, [r4, #8]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	2109      	movs	r1, #9
 800ccf6:	f7ff ff7d 	bl	800cbf4 <std>
 800ccfa:	68e0      	ldr	r0, [r4, #12]
 800ccfc:	2202      	movs	r2, #2
 800ccfe:	2112      	movs	r1, #18
 800cd00:	f7ff ff78 	bl	800cbf4 <std>
 800cd04:	2301      	movs	r3, #1
 800cd06:	61a3      	str	r3, [r4, #24]
 800cd08:	e7d2      	b.n	800ccb0 <__sinit+0xc>
 800cd0a:	bf00      	nop
 800cd0c:	0800ed80 	.word	0x0800ed80
 800cd10:	0800cc3d 	.word	0x0800cc3d

0800cd14 <__sfp>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	4607      	mov	r7, r0
 800cd18:	f7ff ffac 	bl	800cc74 <__sfp_lock_acquire>
 800cd1c:	4b1e      	ldr	r3, [pc, #120]	; (800cd98 <__sfp+0x84>)
 800cd1e:	681e      	ldr	r6, [r3, #0]
 800cd20:	69b3      	ldr	r3, [r6, #24]
 800cd22:	b913      	cbnz	r3, 800cd2a <__sfp+0x16>
 800cd24:	4630      	mov	r0, r6
 800cd26:	f7ff ffbd 	bl	800cca4 <__sinit>
 800cd2a:	3648      	adds	r6, #72	; 0x48
 800cd2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	d503      	bpl.n	800cd3c <__sfp+0x28>
 800cd34:	6833      	ldr	r3, [r6, #0]
 800cd36:	b30b      	cbz	r3, 800cd7c <__sfp+0x68>
 800cd38:	6836      	ldr	r6, [r6, #0]
 800cd3a:	e7f7      	b.n	800cd2c <__sfp+0x18>
 800cd3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd40:	b9d5      	cbnz	r5, 800cd78 <__sfp+0x64>
 800cd42:	4b16      	ldr	r3, [pc, #88]	; (800cd9c <__sfp+0x88>)
 800cd44:	60e3      	str	r3, [r4, #12]
 800cd46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd4a:	6665      	str	r5, [r4, #100]	; 0x64
 800cd4c:	f000 fbba 	bl	800d4c4 <__retarget_lock_init_recursive>
 800cd50:	f7ff ff96 	bl	800cc80 <__sfp_lock_release>
 800cd54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd5c:	6025      	str	r5, [r4, #0]
 800cd5e:	61a5      	str	r5, [r4, #24]
 800cd60:	2208      	movs	r2, #8
 800cd62:	4629      	mov	r1, r5
 800cd64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd68:	f7fd f95e 	bl	800a028 <memset>
 800cd6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd74:	4620      	mov	r0, r4
 800cd76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd78:	3468      	adds	r4, #104	; 0x68
 800cd7a:	e7d9      	b.n	800cd30 <__sfp+0x1c>
 800cd7c:	2104      	movs	r1, #4
 800cd7e:	4638      	mov	r0, r7
 800cd80:	f7ff ff62 	bl	800cc48 <__sfmoreglue>
 800cd84:	4604      	mov	r4, r0
 800cd86:	6030      	str	r0, [r6, #0]
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d1d5      	bne.n	800cd38 <__sfp+0x24>
 800cd8c:	f7ff ff78 	bl	800cc80 <__sfp_lock_release>
 800cd90:	230c      	movs	r3, #12
 800cd92:	603b      	str	r3, [r7, #0]
 800cd94:	e7ee      	b.n	800cd74 <__sfp+0x60>
 800cd96:	bf00      	nop
 800cd98:	0800ed80 	.word	0x0800ed80
 800cd9c:	ffff0001 	.word	0xffff0001

0800cda0 <_fwalk_reent>:
 800cda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cda4:	4606      	mov	r6, r0
 800cda6:	4688      	mov	r8, r1
 800cda8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdac:	2700      	movs	r7, #0
 800cdae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdb2:	f1b9 0901 	subs.w	r9, r9, #1
 800cdb6:	d505      	bpl.n	800cdc4 <_fwalk_reent+0x24>
 800cdb8:	6824      	ldr	r4, [r4, #0]
 800cdba:	2c00      	cmp	r4, #0
 800cdbc:	d1f7      	bne.n	800cdae <_fwalk_reent+0xe>
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdc4:	89ab      	ldrh	r3, [r5, #12]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d907      	bls.n	800cdda <_fwalk_reent+0x3a>
 800cdca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	d003      	beq.n	800cdda <_fwalk_reent+0x3a>
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	47c0      	blx	r8
 800cdd8:	4307      	orrs	r7, r0
 800cdda:	3568      	adds	r5, #104	; 0x68
 800cddc:	e7e9      	b.n	800cdb2 <_fwalk_reent+0x12>

0800cdde <rshift>:
 800cdde:	6903      	ldr	r3, [r0, #16]
 800cde0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cde4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cde8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cdec:	f100 0414 	add.w	r4, r0, #20
 800cdf0:	dd45      	ble.n	800ce7e <rshift+0xa0>
 800cdf2:	f011 011f 	ands.w	r1, r1, #31
 800cdf6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cdfa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cdfe:	d10c      	bne.n	800ce1a <rshift+0x3c>
 800ce00:	f100 0710 	add.w	r7, r0, #16
 800ce04:	4629      	mov	r1, r5
 800ce06:	42b1      	cmp	r1, r6
 800ce08:	d334      	bcc.n	800ce74 <rshift+0x96>
 800ce0a:	1a9b      	subs	r3, r3, r2
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	1eea      	subs	r2, r5, #3
 800ce10:	4296      	cmp	r6, r2
 800ce12:	bf38      	it	cc
 800ce14:	2300      	movcc	r3, #0
 800ce16:	4423      	add	r3, r4
 800ce18:	e015      	b.n	800ce46 <rshift+0x68>
 800ce1a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce1e:	f1c1 0820 	rsb	r8, r1, #32
 800ce22:	40cf      	lsrs	r7, r1
 800ce24:	f105 0e04 	add.w	lr, r5, #4
 800ce28:	46a1      	mov	r9, r4
 800ce2a:	4576      	cmp	r6, lr
 800ce2c:	46f4      	mov	ip, lr
 800ce2e:	d815      	bhi.n	800ce5c <rshift+0x7e>
 800ce30:	1a9b      	subs	r3, r3, r2
 800ce32:	009a      	lsls	r2, r3, #2
 800ce34:	3a04      	subs	r2, #4
 800ce36:	3501      	adds	r5, #1
 800ce38:	42ae      	cmp	r6, r5
 800ce3a:	bf38      	it	cc
 800ce3c:	2200      	movcc	r2, #0
 800ce3e:	18a3      	adds	r3, r4, r2
 800ce40:	50a7      	str	r7, [r4, r2]
 800ce42:	b107      	cbz	r7, 800ce46 <rshift+0x68>
 800ce44:	3304      	adds	r3, #4
 800ce46:	1b1a      	subs	r2, r3, r4
 800ce48:	42a3      	cmp	r3, r4
 800ce4a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce4e:	bf08      	it	eq
 800ce50:	2300      	moveq	r3, #0
 800ce52:	6102      	str	r2, [r0, #16]
 800ce54:	bf08      	it	eq
 800ce56:	6143      	streq	r3, [r0, #20]
 800ce58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce5c:	f8dc c000 	ldr.w	ip, [ip]
 800ce60:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce64:	ea4c 0707 	orr.w	r7, ip, r7
 800ce68:	f849 7b04 	str.w	r7, [r9], #4
 800ce6c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce70:	40cf      	lsrs	r7, r1
 800ce72:	e7da      	b.n	800ce2a <rshift+0x4c>
 800ce74:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce78:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce7c:	e7c3      	b.n	800ce06 <rshift+0x28>
 800ce7e:	4623      	mov	r3, r4
 800ce80:	e7e1      	b.n	800ce46 <rshift+0x68>

0800ce82 <__hexdig_fun>:
 800ce82:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce86:	2b09      	cmp	r3, #9
 800ce88:	d802      	bhi.n	800ce90 <__hexdig_fun+0xe>
 800ce8a:	3820      	subs	r0, #32
 800ce8c:	b2c0      	uxtb	r0, r0
 800ce8e:	4770      	bx	lr
 800ce90:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce94:	2b05      	cmp	r3, #5
 800ce96:	d801      	bhi.n	800ce9c <__hexdig_fun+0x1a>
 800ce98:	3847      	subs	r0, #71	; 0x47
 800ce9a:	e7f7      	b.n	800ce8c <__hexdig_fun+0xa>
 800ce9c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cea0:	2b05      	cmp	r3, #5
 800cea2:	d801      	bhi.n	800cea8 <__hexdig_fun+0x26>
 800cea4:	3827      	subs	r0, #39	; 0x27
 800cea6:	e7f1      	b.n	800ce8c <__hexdig_fun+0xa>
 800cea8:	2000      	movs	r0, #0
 800ceaa:	4770      	bx	lr

0800ceac <__gethex>:
 800ceac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb0:	ed2d 8b02 	vpush	{d8}
 800ceb4:	b089      	sub	sp, #36	; 0x24
 800ceb6:	ee08 0a10 	vmov	s16, r0
 800ceba:	9304      	str	r3, [sp, #16]
 800cebc:	4bbc      	ldr	r3, [pc, #752]	; (800d1b0 <__gethex+0x304>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	4618      	mov	r0, r3
 800cec4:	468b      	mov	fp, r1
 800cec6:	4690      	mov	r8, r2
 800cec8:	f7f3 f982 	bl	80001d0 <strlen>
 800cecc:	9b01      	ldr	r3, [sp, #4]
 800cece:	f8db 2000 	ldr.w	r2, [fp]
 800ced2:	4403      	add	r3, r0
 800ced4:	4682      	mov	sl, r0
 800ced6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ceda:	9305      	str	r3, [sp, #20]
 800cedc:	1c93      	adds	r3, r2, #2
 800cede:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cee2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cee6:	32fe      	adds	r2, #254	; 0xfe
 800cee8:	18d1      	adds	r1, r2, r3
 800ceea:	461f      	mov	r7, r3
 800ceec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cef0:	9100      	str	r1, [sp, #0]
 800cef2:	2830      	cmp	r0, #48	; 0x30
 800cef4:	d0f8      	beq.n	800cee8 <__gethex+0x3c>
 800cef6:	f7ff ffc4 	bl	800ce82 <__hexdig_fun>
 800cefa:	4604      	mov	r4, r0
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d13a      	bne.n	800cf76 <__gethex+0xca>
 800cf00:	9901      	ldr	r1, [sp, #4]
 800cf02:	4652      	mov	r2, sl
 800cf04:	4638      	mov	r0, r7
 800cf06:	f001 fbe6 	bl	800e6d6 <strncmp>
 800cf0a:	4605      	mov	r5, r0
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d168      	bne.n	800cfe2 <__gethex+0x136>
 800cf10:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cf14:	eb07 060a 	add.w	r6, r7, sl
 800cf18:	f7ff ffb3 	bl	800ce82 <__hexdig_fun>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	d062      	beq.n	800cfe6 <__gethex+0x13a>
 800cf20:	4633      	mov	r3, r6
 800cf22:	7818      	ldrb	r0, [r3, #0]
 800cf24:	2830      	cmp	r0, #48	; 0x30
 800cf26:	461f      	mov	r7, r3
 800cf28:	f103 0301 	add.w	r3, r3, #1
 800cf2c:	d0f9      	beq.n	800cf22 <__gethex+0x76>
 800cf2e:	f7ff ffa8 	bl	800ce82 <__hexdig_fun>
 800cf32:	2301      	movs	r3, #1
 800cf34:	fab0 f480 	clz	r4, r0
 800cf38:	0964      	lsrs	r4, r4, #5
 800cf3a:	4635      	mov	r5, r6
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	463a      	mov	r2, r7
 800cf40:	4616      	mov	r6, r2
 800cf42:	3201      	adds	r2, #1
 800cf44:	7830      	ldrb	r0, [r6, #0]
 800cf46:	f7ff ff9c 	bl	800ce82 <__hexdig_fun>
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d1f8      	bne.n	800cf40 <__gethex+0x94>
 800cf4e:	9901      	ldr	r1, [sp, #4]
 800cf50:	4652      	mov	r2, sl
 800cf52:	4630      	mov	r0, r6
 800cf54:	f001 fbbf 	bl	800e6d6 <strncmp>
 800cf58:	b980      	cbnz	r0, 800cf7c <__gethex+0xd0>
 800cf5a:	b94d      	cbnz	r5, 800cf70 <__gethex+0xc4>
 800cf5c:	eb06 050a 	add.w	r5, r6, sl
 800cf60:	462a      	mov	r2, r5
 800cf62:	4616      	mov	r6, r2
 800cf64:	3201      	adds	r2, #1
 800cf66:	7830      	ldrb	r0, [r6, #0]
 800cf68:	f7ff ff8b 	bl	800ce82 <__hexdig_fun>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d1f8      	bne.n	800cf62 <__gethex+0xb6>
 800cf70:	1bad      	subs	r5, r5, r6
 800cf72:	00ad      	lsls	r5, r5, #2
 800cf74:	e004      	b.n	800cf80 <__gethex+0xd4>
 800cf76:	2400      	movs	r4, #0
 800cf78:	4625      	mov	r5, r4
 800cf7a:	e7e0      	b.n	800cf3e <__gethex+0x92>
 800cf7c:	2d00      	cmp	r5, #0
 800cf7e:	d1f7      	bne.n	800cf70 <__gethex+0xc4>
 800cf80:	7833      	ldrb	r3, [r6, #0]
 800cf82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cf86:	2b50      	cmp	r3, #80	; 0x50
 800cf88:	d13b      	bne.n	800d002 <__gethex+0x156>
 800cf8a:	7873      	ldrb	r3, [r6, #1]
 800cf8c:	2b2b      	cmp	r3, #43	; 0x2b
 800cf8e:	d02c      	beq.n	800cfea <__gethex+0x13e>
 800cf90:	2b2d      	cmp	r3, #45	; 0x2d
 800cf92:	d02e      	beq.n	800cff2 <__gethex+0x146>
 800cf94:	1c71      	adds	r1, r6, #1
 800cf96:	f04f 0900 	mov.w	r9, #0
 800cf9a:	7808      	ldrb	r0, [r1, #0]
 800cf9c:	f7ff ff71 	bl	800ce82 <__hexdig_fun>
 800cfa0:	1e43      	subs	r3, r0, #1
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	2b18      	cmp	r3, #24
 800cfa6:	d82c      	bhi.n	800d002 <__gethex+0x156>
 800cfa8:	f1a0 0210 	sub.w	r2, r0, #16
 800cfac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cfb0:	f7ff ff67 	bl	800ce82 <__hexdig_fun>
 800cfb4:	1e43      	subs	r3, r0, #1
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b18      	cmp	r3, #24
 800cfba:	d91d      	bls.n	800cff8 <__gethex+0x14c>
 800cfbc:	f1b9 0f00 	cmp.w	r9, #0
 800cfc0:	d000      	beq.n	800cfc4 <__gethex+0x118>
 800cfc2:	4252      	negs	r2, r2
 800cfc4:	4415      	add	r5, r2
 800cfc6:	f8cb 1000 	str.w	r1, [fp]
 800cfca:	b1e4      	cbz	r4, 800d006 <__gethex+0x15a>
 800cfcc:	9b00      	ldr	r3, [sp, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	bf14      	ite	ne
 800cfd2:	2700      	movne	r7, #0
 800cfd4:	2706      	moveq	r7, #6
 800cfd6:	4638      	mov	r0, r7
 800cfd8:	b009      	add	sp, #36	; 0x24
 800cfda:	ecbd 8b02 	vpop	{d8}
 800cfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfe2:	463e      	mov	r6, r7
 800cfe4:	4625      	mov	r5, r4
 800cfe6:	2401      	movs	r4, #1
 800cfe8:	e7ca      	b.n	800cf80 <__gethex+0xd4>
 800cfea:	f04f 0900 	mov.w	r9, #0
 800cfee:	1cb1      	adds	r1, r6, #2
 800cff0:	e7d3      	b.n	800cf9a <__gethex+0xee>
 800cff2:	f04f 0901 	mov.w	r9, #1
 800cff6:	e7fa      	b.n	800cfee <__gethex+0x142>
 800cff8:	230a      	movs	r3, #10
 800cffa:	fb03 0202 	mla	r2, r3, r2, r0
 800cffe:	3a10      	subs	r2, #16
 800d000:	e7d4      	b.n	800cfac <__gethex+0x100>
 800d002:	4631      	mov	r1, r6
 800d004:	e7df      	b.n	800cfc6 <__gethex+0x11a>
 800d006:	1bf3      	subs	r3, r6, r7
 800d008:	3b01      	subs	r3, #1
 800d00a:	4621      	mov	r1, r4
 800d00c:	2b07      	cmp	r3, #7
 800d00e:	dc0b      	bgt.n	800d028 <__gethex+0x17c>
 800d010:	ee18 0a10 	vmov	r0, s16
 800d014:	f000 fad8 	bl	800d5c8 <_Balloc>
 800d018:	4604      	mov	r4, r0
 800d01a:	b940      	cbnz	r0, 800d02e <__gethex+0x182>
 800d01c:	4b65      	ldr	r3, [pc, #404]	; (800d1b4 <__gethex+0x308>)
 800d01e:	4602      	mov	r2, r0
 800d020:	21de      	movs	r1, #222	; 0xde
 800d022:	4865      	ldr	r0, [pc, #404]	; (800d1b8 <__gethex+0x30c>)
 800d024:	f001 fb88 	bl	800e738 <__assert_func>
 800d028:	3101      	adds	r1, #1
 800d02a:	105b      	asrs	r3, r3, #1
 800d02c:	e7ee      	b.n	800d00c <__gethex+0x160>
 800d02e:	f100 0914 	add.w	r9, r0, #20
 800d032:	f04f 0b00 	mov.w	fp, #0
 800d036:	f1ca 0301 	rsb	r3, sl, #1
 800d03a:	f8cd 9008 	str.w	r9, [sp, #8]
 800d03e:	f8cd b000 	str.w	fp, [sp]
 800d042:	9306      	str	r3, [sp, #24]
 800d044:	42b7      	cmp	r7, r6
 800d046:	d340      	bcc.n	800d0ca <__gethex+0x21e>
 800d048:	9802      	ldr	r0, [sp, #8]
 800d04a:	9b00      	ldr	r3, [sp, #0]
 800d04c:	f840 3b04 	str.w	r3, [r0], #4
 800d050:	eba0 0009 	sub.w	r0, r0, r9
 800d054:	1080      	asrs	r0, r0, #2
 800d056:	0146      	lsls	r6, r0, #5
 800d058:	6120      	str	r0, [r4, #16]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 fbaa 	bl	800d7b4 <__hi0bits>
 800d060:	1a30      	subs	r0, r6, r0
 800d062:	f8d8 6000 	ldr.w	r6, [r8]
 800d066:	42b0      	cmp	r0, r6
 800d068:	dd63      	ble.n	800d132 <__gethex+0x286>
 800d06a:	1b87      	subs	r7, r0, r6
 800d06c:	4639      	mov	r1, r7
 800d06e:	4620      	mov	r0, r4
 800d070:	f000 ff44 	bl	800defc <__any_on>
 800d074:	4682      	mov	sl, r0
 800d076:	b1a8      	cbz	r0, 800d0a4 <__gethex+0x1f8>
 800d078:	1e7b      	subs	r3, r7, #1
 800d07a:	1159      	asrs	r1, r3, #5
 800d07c:	f003 021f 	and.w	r2, r3, #31
 800d080:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d084:	f04f 0a01 	mov.w	sl, #1
 800d088:	fa0a f202 	lsl.w	r2, sl, r2
 800d08c:	420a      	tst	r2, r1
 800d08e:	d009      	beq.n	800d0a4 <__gethex+0x1f8>
 800d090:	4553      	cmp	r3, sl
 800d092:	dd05      	ble.n	800d0a0 <__gethex+0x1f4>
 800d094:	1eb9      	subs	r1, r7, #2
 800d096:	4620      	mov	r0, r4
 800d098:	f000 ff30 	bl	800defc <__any_on>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d145      	bne.n	800d12c <__gethex+0x280>
 800d0a0:	f04f 0a02 	mov.w	sl, #2
 800d0a4:	4639      	mov	r1, r7
 800d0a6:	4620      	mov	r0, r4
 800d0a8:	f7ff fe99 	bl	800cdde <rshift>
 800d0ac:	443d      	add	r5, r7
 800d0ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0b2:	42ab      	cmp	r3, r5
 800d0b4:	da4c      	bge.n	800d150 <__gethex+0x2a4>
 800d0b6:	ee18 0a10 	vmov	r0, s16
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	f000 fac4 	bl	800d648 <_Bfree>
 800d0c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	6013      	str	r3, [r2, #0]
 800d0c6:	27a3      	movs	r7, #163	; 0xa3
 800d0c8:	e785      	b.n	800cfd6 <__gethex+0x12a>
 800d0ca:	1e73      	subs	r3, r6, #1
 800d0cc:	9a05      	ldr	r2, [sp, #20]
 800d0ce:	9303      	str	r3, [sp, #12]
 800d0d0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d019      	beq.n	800d10c <__gethex+0x260>
 800d0d8:	f1bb 0f20 	cmp.w	fp, #32
 800d0dc:	d107      	bne.n	800d0ee <__gethex+0x242>
 800d0de:	9b02      	ldr	r3, [sp, #8]
 800d0e0:	9a00      	ldr	r2, [sp, #0]
 800d0e2:	f843 2b04 	str.w	r2, [r3], #4
 800d0e6:	9302      	str	r3, [sp, #8]
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	469b      	mov	fp, r3
 800d0ee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d0f2:	f7ff fec6 	bl	800ce82 <__hexdig_fun>
 800d0f6:	9b00      	ldr	r3, [sp, #0]
 800d0f8:	f000 000f 	and.w	r0, r0, #15
 800d0fc:	fa00 f00b 	lsl.w	r0, r0, fp
 800d100:	4303      	orrs	r3, r0
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	f10b 0b04 	add.w	fp, fp, #4
 800d108:	9b03      	ldr	r3, [sp, #12]
 800d10a:	e00d      	b.n	800d128 <__gethex+0x27c>
 800d10c:	9b03      	ldr	r3, [sp, #12]
 800d10e:	9a06      	ldr	r2, [sp, #24]
 800d110:	4413      	add	r3, r2
 800d112:	42bb      	cmp	r3, r7
 800d114:	d3e0      	bcc.n	800d0d8 <__gethex+0x22c>
 800d116:	4618      	mov	r0, r3
 800d118:	9901      	ldr	r1, [sp, #4]
 800d11a:	9307      	str	r3, [sp, #28]
 800d11c:	4652      	mov	r2, sl
 800d11e:	f001 fada 	bl	800e6d6 <strncmp>
 800d122:	9b07      	ldr	r3, [sp, #28]
 800d124:	2800      	cmp	r0, #0
 800d126:	d1d7      	bne.n	800d0d8 <__gethex+0x22c>
 800d128:	461e      	mov	r6, r3
 800d12a:	e78b      	b.n	800d044 <__gethex+0x198>
 800d12c:	f04f 0a03 	mov.w	sl, #3
 800d130:	e7b8      	b.n	800d0a4 <__gethex+0x1f8>
 800d132:	da0a      	bge.n	800d14a <__gethex+0x29e>
 800d134:	1a37      	subs	r7, r6, r0
 800d136:	4621      	mov	r1, r4
 800d138:	ee18 0a10 	vmov	r0, s16
 800d13c:	463a      	mov	r2, r7
 800d13e:	f000 fc9f 	bl	800da80 <__lshift>
 800d142:	1bed      	subs	r5, r5, r7
 800d144:	4604      	mov	r4, r0
 800d146:	f100 0914 	add.w	r9, r0, #20
 800d14a:	f04f 0a00 	mov.w	sl, #0
 800d14e:	e7ae      	b.n	800d0ae <__gethex+0x202>
 800d150:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d154:	42a8      	cmp	r0, r5
 800d156:	dd72      	ble.n	800d23e <__gethex+0x392>
 800d158:	1b45      	subs	r5, r0, r5
 800d15a:	42ae      	cmp	r6, r5
 800d15c:	dc36      	bgt.n	800d1cc <__gethex+0x320>
 800d15e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d162:	2b02      	cmp	r3, #2
 800d164:	d02a      	beq.n	800d1bc <__gethex+0x310>
 800d166:	2b03      	cmp	r3, #3
 800d168:	d02c      	beq.n	800d1c4 <__gethex+0x318>
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d115      	bne.n	800d19a <__gethex+0x2ee>
 800d16e:	42ae      	cmp	r6, r5
 800d170:	d113      	bne.n	800d19a <__gethex+0x2ee>
 800d172:	2e01      	cmp	r6, #1
 800d174:	d10b      	bne.n	800d18e <__gethex+0x2e2>
 800d176:	9a04      	ldr	r2, [sp, #16]
 800d178:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d17c:	6013      	str	r3, [r2, #0]
 800d17e:	2301      	movs	r3, #1
 800d180:	6123      	str	r3, [r4, #16]
 800d182:	f8c9 3000 	str.w	r3, [r9]
 800d186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d188:	2762      	movs	r7, #98	; 0x62
 800d18a:	601c      	str	r4, [r3, #0]
 800d18c:	e723      	b.n	800cfd6 <__gethex+0x12a>
 800d18e:	1e71      	subs	r1, r6, #1
 800d190:	4620      	mov	r0, r4
 800d192:	f000 feb3 	bl	800defc <__any_on>
 800d196:	2800      	cmp	r0, #0
 800d198:	d1ed      	bne.n	800d176 <__gethex+0x2ca>
 800d19a:	ee18 0a10 	vmov	r0, s16
 800d19e:	4621      	mov	r1, r4
 800d1a0:	f000 fa52 	bl	800d648 <_Bfree>
 800d1a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	6013      	str	r3, [r2, #0]
 800d1aa:	2750      	movs	r7, #80	; 0x50
 800d1ac:	e713      	b.n	800cfd6 <__gethex+0x12a>
 800d1ae:	bf00      	nop
 800d1b0:	0800f074 	.word	0x0800f074
 800d1b4:	0800ef94 	.word	0x0800ef94
 800d1b8:	0800f008 	.word	0x0800f008
 800d1bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1eb      	bne.n	800d19a <__gethex+0x2ee>
 800d1c2:	e7d8      	b.n	800d176 <__gethex+0x2ca>
 800d1c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1d5      	bne.n	800d176 <__gethex+0x2ca>
 800d1ca:	e7e6      	b.n	800d19a <__gethex+0x2ee>
 800d1cc:	1e6f      	subs	r7, r5, #1
 800d1ce:	f1ba 0f00 	cmp.w	sl, #0
 800d1d2:	d131      	bne.n	800d238 <__gethex+0x38c>
 800d1d4:	b127      	cbz	r7, 800d1e0 <__gethex+0x334>
 800d1d6:	4639      	mov	r1, r7
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f000 fe8f 	bl	800defc <__any_on>
 800d1de:	4682      	mov	sl, r0
 800d1e0:	117b      	asrs	r3, r7, #5
 800d1e2:	2101      	movs	r1, #1
 800d1e4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d1e8:	f007 071f 	and.w	r7, r7, #31
 800d1ec:	fa01 f707 	lsl.w	r7, r1, r7
 800d1f0:	421f      	tst	r7, r3
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	bf18      	it	ne
 800d1f8:	f04a 0a02 	orrne.w	sl, sl, #2
 800d1fc:	1b76      	subs	r6, r6, r5
 800d1fe:	f7ff fdee 	bl	800cdde <rshift>
 800d202:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d206:	2702      	movs	r7, #2
 800d208:	f1ba 0f00 	cmp.w	sl, #0
 800d20c:	d048      	beq.n	800d2a0 <__gethex+0x3f4>
 800d20e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d212:	2b02      	cmp	r3, #2
 800d214:	d015      	beq.n	800d242 <__gethex+0x396>
 800d216:	2b03      	cmp	r3, #3
 800d218:	d017      	beq.n	800d24a <__gethex+0x39e>
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d109      	bne.n	800d232 <__gethex+0x386>
 800d21e:	f01a 0f02 	tst.w	sl, #2
 800d222:	d006      	beq.n	800d232 <__gethex+0x386>
 800d224:	f8d9 0000 	ldr.w	r0, [r9]
 800d228:	ea4a 0a00 	orr.w	sl, sl, r0
 800d22c:	f01a 0f01 	tst.w	sl, #1
 800d230:	d10e      	bne.n	800d250 <__gethex+0x3a4>
 800d232:	f047 0710 	orr.w	r7, r7, #16
 800d236:	e033      	b.n	800d2a0 <__gethex+0x3f4>
 800d238:	f04f 0a01 	mov.w	sl, #1
 800d23c:	e7d0      	b.n	800d1e0 <__gethex+0x334>
 800d23e:	2701      	movs	r7, #1
 800d240:	e7e2      	b.n	800d208 <__gethex+0x35c>
 800d242:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d244:	f1c3 0301 	rsb	r3, r3, #1
 800d248:	9315      	str	r3, [sp, #84]	; 0x54
 800d24a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d0f0      	beq.n	800d232 <__gethex+0x386>
 800d250:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d254:	f104 0314 	add.w	r3, r4, #20
 800d258:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d25c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d260:	f04f 0c00 	mov.w	ip, #0
 800d264:	4618      	mov	r0, r3
 800d266:	f853 2b04 	ldr.w	r2, [r3], #4
 800d26a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d26e:	d01c      	beq.n	800d2aa <__gethex+0x3fe>
 800d270:	3201      	adds	r2, #1
 800d272:	6002      	str	r2, [r0, #0]
 800d274:	2f02      	cmp	r7, #2
 800d276:	f104 0314 	add.w	r3, r4, #20
 800d27a:	d13f      	bne.n	800d2fc <__gethex+0x450>
 800d27c:	f8d8 2000 	ldr.w	r2, [r8]
 800d280:	3a01      	subs	r2, #1
 800d282:	42b2      	cmp	r2, r6
 800d284:	d10a      	bne.n	800d29c <__gethex+0x3f0>
 800d286:	1171      	asrs	r1, r6, #5
 800d288:	2201      	movs	r2, #1
 800d28a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d28e:	f006 061f 	and.w	r6, r6, #31
 800d292:	fa02 f606 	lsl.w	r6, r2, r6
 800d296:	421e      	tst	r6, r3
 800d298:	bf18      	it	ne
 800d29a:	4617      	movne	r7, r2
 800d29c:	f047 0720 	orr.w	r7, r7, #32
 800d2a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d2a2:	601c      	str	r4, [r3, #0]
 800d2a4:	9b04      	ldr	r3, [sp, #16]
 800d2a6:	601d      	str	r5, [r3, #0]
 800d2a8:	e695      	b.n	800cfd6 <__gethex+0x12a>
 800d2aa:	4299      	cmp	r1, r3
 800d2ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800d2b0:	d8d8      	bhi.n	800d264 <__gethex+0x3b8>
 800d2b2:	68a3      	ldr	r3, [r4, #8]
 800d2b4:	459b      	cmp	fp, r3
 800d2b6:	db19      	blt.n	800d2ec <__gethex+0x440>
 800d2b8:	6861      	ldr	r1, [r4, #4]
 800d2ba:	ee18 0a10 	vmov	r0, s16
 800d2be:	3101      	adds	r1, #1
 800d2c0:	f000 f982 	bl	800d5c8 <_Balloc>
 800d2c4:	4681      	mov	r9, r0
 800d2c6:	b918      	cbnz	r0, 800d2d0 <__gethex+0x424>
 800d2c8:	4b1a      	ldr	r3, [pc, #104]	; (800d334 <__gethex+0x488>)
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	2184      	movs	r1, #132	; 0x84
 800d2ce:	e6a8      	b.n	800d022 <__gethex+0x176>
 800d2d0:	6922      	ldr	r2, [r4, #16]
 800d2d2:	3202      	adds	r2, #2
 800d2d4:	f104 010c 	add.w	r1, r4, #12
 800d2d8:	0092      	lsls	r2, r2, #2
 800d2da:	300c      	adds	r0, #12
 800d2dc:	f7fc fe96 	bl	800a00c <memcpy>
 800d2e0:	4621      	mov	r1, r4
 800d2e2:	ee18 0a10 	vmov	r0, s16
 800d2e6:	f000 f9af 	bl	800d648 <_Bfree>
 800d2ea:	464c      	mov	r4, r9
 800d2ec:	6923      	ldr	r3, [r4, #16]
 800d2ee:	1c5a      	adds	r2, r3, #1
 800d2f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2f4:	6122      	str	r2, [r4, #16]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	615a      	str	r2, [r3, #20]
 800d2fa:	e7bb      	b.n	800d274 <__gethex+0x3c8>
 800d2fc:	6922      	ldr	r2, [r4, #16]
 800d2fe:	455a      	cmp	r2, fp
 800d300:	dd0b      	ble.n	800d31a <__gethex+0x46e>
 800d302:	2101      	movs	r1, #1
 800d304:	4620      	mov	r0, r4
 800d306:	f7ff fd6a 	bl	800cdde <rshift>
 800d30a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d30e:	3501      	adds	r5, #1
 800d310:	42ab      	cmp	r3, r5
 800d312:	f6ff aed0 	blt.w	800d0b6 <__gethex+0x20a>
 800d316:	2701      	movs	r7, #1
 800d318:	e7c0      	b.n	800d29c <__gethex+0x3f0>
 800d31a:	f016 061f 	ands.w	r6, r6, #31
 800d31e:	d0fa      	beq.n	800d316 <__gethex+0x46a>
 800d320:	449a      	add	sl, r3
 800d322:	f1c6 0620 	rsb	r6, r6, #32
 800d326:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d32a:	f000 fa43 	bl	800d7b4 <__hi0bits>
 800d32e:	42b0      	cmp	r0, r6
 800d330:	dbe7      	blt.n	800d302 <__gethex+0x456>
 800d332:	e7f0      	b.n	800d316 <__gethex+0x46a>
 800d334:	0800ef94 	.word	0x0800ef94

0800d338 <L_shift>:
 800d338:	f1c2 0208 	rsb	r2, r2, #8
 800d33c:	0092      	lsls	r2, r2, #2
 800d33e:	b570      	push	{r4, r5, r6, lr}
 800d340:	f1c2 0620 	rsb	r6, r2, #32
 800d344:	6843      	ldr	r3, [r0, #4]
 800d346:	6804      	ldr	r4, [r0, #0]
 800d348:	fa03 f506 	lsl.w	r5, r3, r6
 800d34c:	432c      	orrs	r4, r5
 800d34e:	40d3      	lsrs	r3, r2
 800d350:	6004      	str	r4, [r0, #0]
 800d352:	f840 3f04 	str.w	r3, [r0, #4]!
 800d356:	4288      	cmp	r0, r1
 800d358:	d3f4      	bcc.n	800d344 <L_shift+0xc>
 800d35a:	bd70      	pop	{r4, r5, r6, pc}

0800d35c <__match>:
 800d35c:	b530      	push	{r4, r5, lr}
 800d35e:	6803      	ldr	r3, [r0, #0]
 800d360:	3301      	adds	r3, #1
 800d362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d366:	b914      	cbnz	r4, 800d36e <__match+0x12>
 800d368:	6003      	str	r3, [r0, #0]
 800d36a:	2001      	movs	r0, #1
 800d36c:	bd30      	pop	{r4, r5, pc}
 800d36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d372:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d376:	2d19      	cmp	r5, #25
 800d378:	bf98      	it	ls
 800d37a:	3220      	addls	r2, #32
 800d37c:	42a2      	cmp	r2, r4
 800d37e:	d0f0      	beq.n	800d362 <__match+0x6>
 800d380:	2000      	movs	r0, #0
 800d382:	e7f3      	b.n	800d36c <__match+0x10>

0800d384 <__hexnan>:
 800d384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d388:	680b      	ldr	r3, [r1, #0]
 800d38a:	6801      	ldr	r1, [r0, #0]
 800d38c:	115e      	asrs	r6, r3, #5
 800d38e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d392:	f013 031f 	ands.w	r3, r3, #31
 800d396:	b087      	sub	sp, #28
 800d398:	bf18      	it	ne
 800d39a:	3604      	addne	r6, #4
 800d39c:	2500      	movs	r5, #0
 800d39e:	1f37      	subs	r7, r6, #4
 800d3a0:	4682      	mov	sl, r0
 800d3a2:	4690      	mov	r8, r2
 800d3a4:	9301      	str	r3, [sp, #4]
 800d3a6:	f846 5c04 	str.w	r5, [r6, #-4]
 800d3aa:	46b9      	mov	r9, r7
 800d3ac:	463c      	mov	r4, r7
 800d3ae:	9502      	str	r5, [sp, #8]
 800d3b0:	46ab      	mov	fp, r5
 800d3b2:	784a      	ldrb	r2, [r1, #1]
 800d3b4:	1c4b      	adds	r3, r1, #1
 800d3b6:	9303      	str	r3, [sp, #12]
 800d3b8:	b342      	cbz	r2, 800d40c <__hexnan+0x88>
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	9105      	str	r1, [sp, #20]
 800d3be:	9204      	str	r2, [sp, #16]
 800d3c0:	f7ff fd5f 	bl	800ce82 <__hexdig_fun>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d14f      	bne.n	800d468 <__hexnan+0xe4>
 800d3c8:	9a04      	ldr	r2, [sp, #16]
 800d3ca:	9905      	ldr	r1, [sp, #20]
 800d3cc:	2a20      	cmp	r2, #32
 800d3ce:	d818      	bhi.n	800d402 <__hexnan+0x7e>
 800d3d0:	9b02      	ldr	r3, [sp, #8]
 800d3d2:	459b      	cmp	fp, r3
 800d3d4:	dd13      	ble.n	800d3fe <__hexnan+0x7a>
 800d3d6:	454c      	cmp	r4, r9
 800d3d8:	d206      	bcs.n	800d3e8 <__hexnan+0x64>
 800d3da:	2d07      	cmp	r5, #7
 800d3dc:	dc04      	bgt.n	800d3e8 <__hexnan+0x64>
 800d3de:	462a      	mov	r2, r5
 800d3e0:	4649      	mov	r1, r9
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f7ff ffa8 	bl	800d338 <L_shift>
 800d3e8:	4544      	cmp	r4, r8
 800d3ea:	d950      	bls.n	800d48e <__hexnan+0x10a>
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	f1a4 0904 	sub.w	r9, r4, #4
 800d3f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3f6:	f8cd b008 	str.w	fp, [sp, #8]
 800d3fa:	464c      	mov	r4, r9
 800d3fc:	461d      	mov	r5, r3
 800d3fe:	9903      	ldr	r1, [sp, #12]
 800d400:	e7d7      	b.n	800d3b2 <__hexnan+0x2e>
 800d402:	2a29      	cmp	r2, #41	; 0x29
 800d404:	d156      	bne.n	800d4b4 <__hexnan+0x130>
 800d406:	3102      	adds	r1, #2
 800d408:	f8ca 1000 	str.w	r1, [sl]
 800d40c:	f1bb 0f00 	cmp.w	fp, #0
 800d410:	d050      	beq.n	800d4b4 <__hexnan+0x130>
 800d412:	454c      	cmp	r4, r9
 800d414:	d206      	bcs.n	800d424 <__hexnan+0xa0>
 800d416:	2d07      	cmp	r5, #7
 800d418:	dc04      	bgt.n	800d424 <__hexnan+0xa0>
 800d41a:	462a      	mov	r2, r5
 800d41c:	4649      	mov	r1, r9
 800d41e:	4620      	mov	r0, r4
 800d420:	f7ff ff8a 	bl	800d338 <L_shift>
 800d424:	4544      	cmp	r4, r8
 800d426:	d934      	bls.n	800d492 <__hexnan+0x10e>
 800d428:	f1a8 0204 	sub.w	r2, r8, #4
 800d42c:	4623      	mov	r3, r4
 800d42e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d432:	f842 1f04 	str.w	r1, [r2, #4]!
 800d436:	429f      	cmp	r7, r3
 800d438:	d2f9      	bcs.n	800d42e <__hexnan+0xaa>
 800d43a:	1b3b      	subs	r3, r7, r4
 800d43c:	f023 0303 	bic.w	r3, r3, #3
 800d440:	3304      	adds	r3, #4
 800d442:	3401      	adds	r4, #1
 800d444:	3e03      	subs	r6, #3
 800d446:	42b4      	cmp	r4, r6
 800d448:	bf88      	it	hi
 800d44a:	2304      	movhi	r3, #4
 800d44c:	4443      	add	r3, r8
 800d44e:	2200      	movs	r2, #0
 800d450:	f843 2b04 	str.w	r2, [r3], #4
 800d454:	429f      	cmp	r7, r3
 800d456:	d2fb      	bcs.n	800d450 <__hexnan+0xcc>
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	b91b      	cbnz	r3, 800d464 <__hexnan+0xe0>
 800d45c:	4547      	cmp	r7, r8
 800d45e:	d127      	bne.n	800d4b0 <__hexnan+0x12c>
 800d460:	2301      	movs	r3, #1
 800d462:	603b      	str	r3, [r7, #0]
 800d464:	2005      	movs	r0, #5
 800d466:	e026      	b.n	800d4b6 <__hexnan+0x132>
 800d468:	3501      	adds	r5, #1
 800d46a:	2d08      	cmp	r5, #8
 800d46c:	f10b 0b01 	add.w	fp, fp, #1
 800d470:	dd06      	ble.n	800d480 <__hexnan+0xfc>
 800d472:	4544      	cmp	r4, r8
 800d474:	d9c3      	bls.n	800d3fe <__hexnan+0x7a>
 800d476:	2300      	movs	r3, #0
 800d478:	f844 3c04 	str.w	r3, [r4, #-4]
 800d47c:	2501      	movs	r5, #1
 800d47e:	3c04      	subs	r4, #4
 800d480:	6822      	ldr	r2, [r4, #0]
 800d482:	f000 000f 	and.w	r0, r0, #15
 800d486:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d48a:	6022      	str	r2, [r4, #0]
 800d48c:	e7b7      	b.n	800d3fe <__hexnan+0x7a>
 800d48e:	2508      	movs	r5, #8
 800d490:	e7b5      	b.n	800d3fe <__hexnan+0x7a>
 800d492:	9b01      	ldr	r3, [sp, #4]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d0df      	beq.n	800d458 <__hexnan+0xd4>
 800d498:	f04f 32ff 	mov.w	r2, #4294967295
 800d49c:	f1c3 0320 	rsb	r3, r3, #32
 800d4a0:	fa22 f303 	lsr.w	r3, r2, r3
 800d4a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d4a8:	401a      	ands	r2, r3
 800d4aa:	f846 2c04 	str.w	r2, [r6, #-4]
 800d4ae:	e7d3      	b.n	800d458 <__hexnan+0xd4>
 800d4b0:	3f04      	subs	r7, #4
 800d4b2:	e7d1      	b.n	800d458 <__hexnan+0xd4>
 800d4b4:	2004      	movs	r0, #4
 800d4b6:	b007      	add	sp, #28
 800d4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4bc <_localeconv_r>:
 800d4bc:	4800      	ldr	r0, [pc, #0]	; (800d4c0 <_localeconv_r+0x4>)
 800d4be:	4770      	bx	lr
 800d4c0:	20000164 	.word	0x20000164

0800d4c4 <__retarget_lock_init_recursive>:
 800d4c4:	4770      	bx	lr

0800d4c6 <__retarget_lock_acquire_recursive>:
 800d4c6:	4770      	bx	lr

0800d4c8 <__retarget_lock_release_recursive>:
 800d4c8:	4770      	bx	lr

0800d4ca <__swhatbuf_r>:
 800d4ca:	b570      	push	{r4, r5, r6, lr}
 800d4cc:	460e      	mov	r6, r1
 800d4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4d2:	2900      	cmp	r1, #0
 800d4d4:	b096      	sub	sp, #88	; 0x58
 800d4d6:	4614      	mov	r4, r2
 800d4d8:	461d      	mov	r5, r3
 800d4da:	da07      	bge.n	800d4ec <__swhatbuf_r+0x22>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	602b      	str	r3, [r5, #0]
 800d4e0:	89b3      	ldrh	r3, [r6, #12]
 800d4e2:	061a      	lsls	r2, r3, #24
 800d4e4:	d410      	bmi.n	800d508 <__swhatbuf_r+0x3e>
 800d4e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4ea:	e00e      	b.n	800d50a <__swhatbuf_r+0x40>
 800d4ec:	466a      	mov	r2, sp
 800d4ee:	f001 f963 	bl	800e7b8 <_fstat_r>
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	dbf2      	blt.n	800d4dc <__swhatbuf_r+0x12>
 800d4f6:	9a01      	ldr	r2, [sp, #4]
 800d4f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d4fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d500:	425a      	negs	r2, r3
 800d502:	415a      	adcs	r2, r3
 800d504:	602a      	str	r2, [r5, #0]
 800d506:	e7ee      	b.n	800d4e6 <__swhatbuf_r+0x1c>
 800d508:	2340      	movs	r3, #64	; 0x40
 800d50a:	2000      	movs	r0, #0
 800d50c:	6023      	str	r3, [r4, #0]
 800d50e:	b016      	add	sp, #88	; 0x58
 800d510:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d514 <__smakebuf_r>:
 800d514:	898b      	ldrh	r3, [r1, #12]
 800d516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d518:	079d      	lsls	r5, r3, #30
 800d51a:	4606      	mov	r6, r0
 800d51c:	460c      	mov	r4, r1
 800d51e:	d507      	bpl.n	800d530 <__smakebuf_r+0x1c>
 800d520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d524:	6023      	str	r3, [r4, #0]
 800d526:	6123      	str	r3, [r4, #16]
 800d528:	2301      	movs	r3, #1
 800d52a:	6163      	str	r3, [r4, #20]
 800d52c:	b002      	add	sp, #8
 800d52e:	bd70      	pop	{r4, r5, r6, pc}
 800d530:	ab01      	add	r3, sp, #4
 800d532:	466a      	mov	r2, sp
 800d534:	f7ff ffc9 	bl	800d4ca <__swhatbuf_r>
 800d538:	9900      	ldr	r1, [sp, #0]
 800d53a:	4605      	mov	r5, r0
 800d53c:	4630      	mov	r0, r6
 800d53e:	f000 fd5d 	bl	800dffc <_malloc_r>
 800d542:	b948      	cbnz	r0, 800d558 <__smakebuf_r+0x44>
 800d544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d548:	059a      	lsls	r2, r3, #22
 800d54a:	d4ef      	bmi.n	800d52c <__smakebuf_r+0x18>
 800d54c:	f023 0303 	bic.w	r3, r3, #3
 800d550:	f043 0302 	orr.w	r3, r3, #2
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	e7e3      	b.n	800d520 <__smakebuf_r+0xc>
 800d558:	4b0d      	ldr	r3, [pc, #52]	; (800d590 <__smakebuf_r+0x7c>)
 800d55a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	6020      	str	r0, [r4, #0]
 800d560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d564:	81a3      	strh	r3, [r4, #12]
 800d566:	9b00      	ldr	r3, [sp, #0]
 800d568:	6163      	str	r3, [r4, #20]
 800d56a:	9b01      	ldr	r3, [sp, #4]
 800d56c:	6120      	str	r0, [r4, #16]
 800d56e:	b15b      	cbz	r3, 800d588 <__smakebuf_r+0x74>
 800d570:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d574:	4630      	mov	r0, r6
 800d576:	f001 f931 	bl	800e7dc <_isatty_r>
 800d57a:	b128      	cbz	r0, 800d588 <__smakebuf_r+0x74>
 800d57c:	89a3      	ldrh	r3, [r4, #12]
 800d57e:	f023 0303 	bic.w	r3, r3, #3
 800d582:	f043 0301 	orr.w	r3, r3, #1
 800d586:	81a3      	strh	r3, [r4, #12]
 800d588:	89a0      	ldrh	r0, [r4, #12]
 800d58a:	4305      	orrs	r5, r0
 800d58c:	81a5      	strh	r5, [r4, #12]
 800d58e:	e7cd      	b.n	800d52c <__smakebuf_r+0x18>
 800d590:	0800cc3d 	.word	0x0800cc3d

0800d594 <malloc>:
 800d594:	4b02      	ldr	r3, [pc, #8]	; (800d5a0 <malloc+0xc>)
 800d596:	4601      	mov	r1, r0
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	f000 bd2f 	b.w	800dffc <_malloc_r>
 800d59e:	bf00      	nop
 800d5a0:	2000000c 	.word	0x2000000c

0800d5a4 <__ascii_mbtowc>:
 800d5a4:	b082      	sub	sp, #8
 800d5a6:	b901      	cbnz	r1, 800d5aa <__ascii_mbtowc+0x6>
 800d5a8:	a901      	add	r1, sp, #4
 800d5aa:	b142      	cbz	r2, 800d5be <__ascii_mbtowc+0x1a>
 800d5ac:	b14b      	cbz	r3, 800d5c2 <__ascii_mbtowc+0x1e>
 800d5ae:	7813      	ldrb	r3, [r2, #0]
 800d5b0:	600b      	str	r3, [r1, #0]
 800d5b2:	7812      	ldrb	r2, [r2, #0]
 800d5b4:	1e10      	subs	r0, r2, #0
 800d5b6:	bf18      	it	ne
 800d5b8:	2001      	movne	r0, #1
 800d5ba:	b002      	add	sp, #8
 800d5bc:	4770      	bx	lr
 800d5be:	4610      	mov	r0, r2
 800d5c0:	e7fb      	b.n	800d5ba <__ascii_mbtowc+0x16>
 800d5c2:	f06f 0001 	mvn.w	r0, #1
 800d5c6:	e7f8      	b.n	800d5ba <__ascii_mbtowc+0x16>

0800d5c8 <_Balloc>:
 800d5c8:	b570      	push	{r4, r5, r6, lr}
 800d5ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	460d      	mov	r5, r1
 800d5d0:	b976      	cbnz	r6, 800d5f0 <_Balloc+0x28>
 800d5d2:	2010      	movs	r0, #16
 800d5d4:	f7ff ffde 	bl	800d594 <malloc>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	6260      	str	r0, [r4, #36]	; 0x24
 800d5dc:	b920      	cbnz	r0, 800d5e8 <_Balloc+0x20>
 800d5de:	4b18      	ldr	r3, [pc, #96]	; (800d640 <_Balloc+0x78>)
 800d5e0:	4818      	ldr	r0, [pc, #96]	; (800d644 <_Balloc+0x7c>)
 800d5e2:	2166      	movs	r1, #102	; 0x66
 800d5e4:	f001 f8a8 	bl	800e738 <__assert_func>
 800d5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5ec:	6006      	str	r6, [r0, #0]
 800d5ee:	60c6      	str	r6, [r0, #12]
 800d5f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d5f2:	68f3      	ldr	r3, [r6, #12]
 800d5f4:	b183      	cbz	r3, 800d618 <_Balloc+0x50>
 800d5f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5fe:	b9b8      	cbnz	r0, 800d630 <_Balloc+0x68>
 800d600:	2101      	movs	r1, #1
 800d602:	fa01 f605 	lsl.w	r6, r1, r5
 800d606:	1d72      	adds	r2, r6, #5
 800d608:	0092      	lsls	r2, r2, #2
 800d60a:	4620      	mov	r0, r4
 800d60c:	f000 fc97 	bl	800df3e <_calloc_r>
 800d610:	b160      	cbz	r0, 800d62c <_Balloc+0x64>
 800d612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d616:	e00e      	b.n	800d636 <_Balloc+0x6e>
 800d618:	2221      	movs	r2, #33	; 0x21
 800d61a:	2104      	movs	r1, #4
 800d61c:	4620      	mov	r0, r4
 800d61e:	f000 fc8e 	bl	800df3e <_calloc_r>
 800d622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d624:	60f0      	str	r0, [r6, #12]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d1e4      	bne.n	800d5f6 <_Balloc+0x2e>
 800d62c:	2000      	movs	r0, #0
 800d62e:	bd70      	pop	{r4, r5, r6, pc}
 800d630:	6802      	ldr	r2, [r0, #0]
 800d632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d636:	2300      	movs	r3, #0
 800d638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d63c:	e7f7      	b.n	800d62e <_Balloc+0x66>
 800d63e:	bf00      	nop
 800d640:	0800ef1e 	.word	0x0800ef1e
 800d644:	0800f088 	.word	0x0800f088

0800d648 <_Bfree>:
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d64c:	4605      	mov	r5, r0
 800d64e:	460c      	mov	r4, r1
 800d650:	b976      	cbnz	r6, 800d670 <_Bfree+0x28>
 800d652:	2010      	movs	r0, #16
 800d654:	f7ff ff9e 	bl	800d594 <malloc>
 800d658:	4602      	mov	r2, r0
 800d65a:	6268      	str	r0, [r5, #36]	; 0x24
 800d65c:	b920      	cbnz	r0, 800d668 <_Bfree+0x20>
 800d65e:	4b09      	ldr	r3, [pc, #36]	; (800d684 <_Bfree+0x3c>)
 800d660:	4809      	ldr	r0, [pc, #36]	; (800d688 <_Bfree+0x40>)
 800d662:	218a      	movs	r1, #138	; 0x8a
 800d664:	f001 f868 	bl	800e738 <__assert_func>
 800d668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d66c:	6006      	str	r6, [r0, #0]
 800d66e:	60c6      	str	r6, [r0, #12]
 800d670:	b13c      	cbz	r4, 800d682 <_Bfree+0x3a>
 800d672:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d674:	6862      	ldr	r2, [r4, #4]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d67c:	6021      	str	r1, [r4, #0]
 800d67e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d682:	bd70      	pop	{r4, r5, r6, pc}
 800d684:	0800ef1e 	.word	0x0800ef1e
 800d688:	0800f088 	.word	0x0800f088

0800d68c <__multadd>:
 800d68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d690:	690e      	ldr	r6, [r1, #16]
 800d692:	4607      	mov	r7, r0
 800d694:	4698      	mov	r8, r3
 800d696:	460c      	mov	r4, r1
 800d698:	f101 0014 	add.w	r0, r1, #20
 800d69c:	2300      	movs	r3, #0
 800d69e:	6805      	ldr	r5, [r0, #0]
 800d6a0:	b2a9      	uxth	r1, r5
 800d6a2:	fb02 8101 	mla	r1, r2, r1, r8
 800d6a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d6aa:	0c2d      	lsrs	r5, r5, #16
 800d6ac:	fb02 c505 	mla	r5, r2, r5, ip
 800d6b0:	b289      	uxth	r1, r1
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d6b8:	429e      	cmp	r6, r3
 800d6ba:	f840 1b04 	str.w	r1, [r0], #4
 800d6be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d6c2:	dcec      	bgt.n	800d69e <__multadd+0x12>
 800d6c4:	f1b8 0f00 	cmp.w	r8, #0
 800d6c8:	d022      	beq.n	800d710 <__multadd+0x84>
 800d6ca:	68a3      	ldr	r3, [r4, #8]
 800d6cc:	42b3      	cmp	r3, r6
 800d6ce:	dc19      	bgt.n	800d704 <__multadd+0x78>
 800d6d0:	6861      	ldr	r1, [r4, #4]
 800d6d2:	4638      	mov	r0, r7
 800d6d4:	3101      	adds	r1, #1
 800d6d6:	f7ff ff77 	bl	800d5c8 <_Balloc>
 800d6da:	4605      	mov	r5, r0
 800d6dc:	b928      	cbnz	r0, 800d6ea <__multadd+0x5e>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	4b0d      	ldr	r3, [pc, #52]	; (800d718 <__multadd+0x8c>)
 800d6e2:	480e      	ldr	r0, [pc, #56]	; (800d71c <__multadd+0x90>)
 800d6e4:	21b5      	movs	r1, #181	; 0xb5
 800d6e6:	f001 f827 	bl	800e738 <__assert_func>
 800d6ea:	6922      	ldr	r2, [r4, #16]
 800d6ec:	3202      	adds	r2, #2
 800d6ee:	f104 010c 	add.w	r1, r4, #12
 800d6f2:	0092      	lsls	r2, r2, #2
 800d6f4:	300c      	adds	r0, #12
 800d6f6:	f7fc fc89 	bl	800a00c <memcpy>
 800d6fa:	4621      	mov	r1, r4
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	f7ff ffa3 	bl	800d648 <_Bfree>
 800d702:	462c      	mov	r4, r5
 800d704:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d708:	3601      	adds	r6, #1
 800d70a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d70e:	6126      	str	r6, [r4, #16]
 800d710:	4620      	mov	r0, r4
 800d712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d716:	bf00      	nop
 800d718:	0800ef94 	.word	0x0800ef94
 800d71c:	0800f088 	.word	0x0800f088

0800d720 <__s2b>:
 800d720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d724:	460c      	mov	r4, r1
 800d726:	4615      	mov	r5, r2
 800d728:	461f      	mov	r7, r3
 800d72a:	2209      	movs	r2, #9
 800d72c:	3308      	adds	r3, #8
 800d72e:	4606      	mov	r6, r0
 800d730:	fb93 f3f2 	sdiv	r3, r3, r2
 800d734:	2100      	movs	r1, #0
 800d736:	2201      	movs	r2, #1
 800d738:	429a      	cmp	r2, r3
 800d73a:	db09      	blt.n	800d750 <__s2b+0x30>
 800d73c:	4630      	mov	r0, r6
 800d73e:	f7ff ff43 	bl	800d5c8 <_Balloc>
 800d742:	b940      	cbnz	r0, 800d756 <__s2b+0x36>
 800d744:	4602      	mov	r2, r0
 800d746:	4b19      	ldr	r3, [pc, #100]	; (800d7ac <__s2b+0x8c>)
 800d748:	4819      	ldr	r0, [pc, #100]	; (800d7b0 <__s2b+0x90>)
 800d74a:	21ce      	movs	r1, #206	; 0xce
 800d74c:	f000 fff4 	bl	800e738 <__assert_func>
 800d750:	0052      	lsls	r2, r2, #1
 800d752:	3101      	adds	r1, #1
 800d754:	e7f0      	b.n	800d738 <__s2b+0x18>
 800d756:	9b08      	ldr	r3, [sp, #32]
 800d758:	6143      	str	r3, [r0, #20]
 800d75a:	2d09      	cmp	r5, #9
 800d75c:	f04f 0301 	mov.w	r3, #1
 800d760:	6103      	str	r3, [r0, #16]
 800d762:	dd16      	ble.n	800d792 <__s2b+0x72>
 800d764:	f104 0909 	add.w	r9, r4, #9
 800d768:	46c8      	mov	r8, r9
 800d76a:	442c      	add	r4, r5
 800d76c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d770:	4601      	mov	r1, r0
 800d772:	3b30      	subs	r3, #48	; 0x30
 800d774:	220a      	movs	r2, #10
 800d776:	4630      	mov	r0, r6
 800d778:	f7ff ff88 	bl	800d68c <__multadd>
 800d77c:	45a0      	cmp	r8, r4
 800d77e:	d1f5      	bne.n	800d76c <__s2b+0x4c>
 800d780:	f1a5 0408 	sub.w	r4, r5, #8
 800d784:	444c      	add	r4, r9
 800d786:	1b2d      	subs	r5, r5, r4
 800d788:	1963      	adds	r3, r4, r5
 800d78a:	42bb      	cmp	r3, r7
 800d78c:	db04      	blt.n	800d798 <__s2b+0x78>
 800d78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d792:	340a      	adds	r4, #10
 800d794:	2509      	movs	r5, #9
 800d796:	e7f6      	b.n	800d786 <__s2b+0x66>
 800d798:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d79c:	4601      	mov	r1, r0
 800d79e:	3b30      	subs	r3, #48	; 0x30
 800d7a0:	220a      	movs	r2, #10
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f7ff ff72 	bl	800d68c <__multadd>
 800d7a8:	e7ee      	b.n	800d788 <__s2b+0x68>
 800d7aa:	bf00      	nop
 800d7ac:	0800ef94 	.word	0x0800ef94
 800d7b0:	0800f088 	.word	0x0800f088

0800d7b4 <__hi0bits>:
 800d7b4:	0c03      	lsrs	r3, r0, #16
 800d7b6:	041b      	lsls	r3, r3, #16
 800d7b8:	b9d3      	cbnz	r3, 800d7f0 <__hi0bits+0x3c>
 800d7ba:	0400      	lsls	r0, r0, #16
 800d7bc:	2310      	movs	r3, #16
 800d7be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d7c2:	bf04      	itt	eq
 800d7c4:	0200      	lsleq	r0, r0, #8
 800d7c6:	3308      	addeq	r3, #8
 800d7c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d7cc:	bf04      	itt	eq
 800d7ce:	0100      	lsleq	r0, r0, #4
 800d7d0:	3304      	addeq	r3, #4
 800d7d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d7d6:	bf04      	itt	eq
 800d7d8:	0080      	lsleq	r0, r0, #2
 800d7da:	3302      	addeq	r3, #2
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	db05      	blt.n	800d7ec <__hi0bits+0x38>
 800d7e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d7e4:	f103 0301 	add.w	r3, r3, #1
 800d7e8:	bf08      	it	eq
 800d7ea:	2320      	moveq	r3, #32
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	4770      	bx	lr
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	e7e4      	b.n	800d7be <__hi0bits+0xa>

0800d7f4 <__lo0bits>:
 800d7f4:	6803      	ldr	r3, [r0, #0]
 800d7f6:	f013 0207 	ands.w	r2, r3, #7
 800d7fa:	4601      	mov	r1, r0
 800d7fc:	d00b      	beq.n	800d816 <__lo0bits+0x22>
 800d7fe:	07da      	lsls	r2, r3, #31
 800d800:	d424      	bmi.n	800d84c <__lo0bits+0x58>
 800d802:	0798      	lsls	r0, r3, #30
 800d804:	bf49      	itett	mi
 800d806:	085b      	lsrmi	r3, r3, #1
 800d808:	089b      	lsrpl	r3, r3, #2
 800d80a:	2001      	movmi	r0, #1
 800d80c:	600b      	strmi	r3, [r1, #0]
 800d80e:	bf5c      	itt	pl
 800d810:	600b      	strpl	r3, [r1, #0]
 800d812:	2002      	movpl	r0, #2
 800d814:	4770      	bx	lr
 800d816:	b298      	uxth	r0, r3
 800d818:	b9b0      	cbnz	r0, 800d848 <__lo0bits+0x54>
 800d81a:	0c1b      	lsrs	r3, r3, #16
 800d81c:	2010      	movs	r0, #16
 800d81e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d822:	bf04      	itt	eq
 800d824:	0a1b      	lsreq	r3, r3, #8
 800d826:	3008      	addeq	r0, #8
 800d828:	071a      	lsls	r2, r3, #28
 800d82a:	bf04      	itt	eq
 800d82c:	091b      	lsreq	r3, r3, #4
 800d82e:	3004      	addeq	r0, #4
 800d830:	079a      	lsls	r2, r3, #30
 800d832:	bf04      	itt	eq
 800d834:	089b      	lsreq	r3, r3, #2
 800d836:	3002      	addeq	r0, #2
 800d838:	07da      	lsls	r2, r3, #31
 800d83a:	d403      	bmi.n	800d844 <__lo0bits+0x50>
 800d83c:	085b      	lsrs	r3, r3, #1
 800d83e:	f100 0001 	add.w	r0, r0, #1
 800d842:	d005      	beq.n	800d850 <__lo0bits+0x5c>
 800d844:	600b      	str	r3, [r1, #0]
 800d846:	4770      	bx	lr
 800d848:	4610      	mov	r0, r2
 800d84a:	e7e8      	b.n	800d81e <__lo0bits+0x2a>
 800d84c:	2000      	movs	r0, #0
 800d84e:	4770      	bx	lr
 800d850:	2020      	movs	r0, #32
 800d852:	4770      	bx	lr

0800d854 <__i2b>:
 800d854:	b510      	push	{r4, lr}
 800d856:	460c      	mov	r4, r1
 800d858:	2101      	movs	r1, #1
 800d85a:	f7ff feb5 	bl	800d5c8 <_Balloc>
 800d85e:	4602      	mov	r2, r0
 800d860:	b928      	cbnz	r0, 800d86e <__i2b+0x1a>
 800d862:	4b05      	ldr	r3, [pc, #20]	; (800d878 <__i2b+0x24>)
 800d864:	4805      	ldr	r0, [pc, #20]	; (800d87c <__i2b+0x28>)
 800d866:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d86a:	f000 ff65 	bl	800e738 <__assert_func>
 800d86e:	2301      	movs	r3, #1
 800d870:	6144      	str	r4, [r0, #20]
 800d872:	6103      	str	r3, [r0, #16]
 800d874:	bd10      	pop	{r4, pc}
 800d876:	bf00      	nop
 800d878:	0800ef94 	.word	0x0800ef94
 800d87c:	0800f088 	.word	0x0800f088

0800d880 <__multiply>:
 800d880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d884:	4614      	mov	r4, r2
 800d886:	690a      	ldr	r2, [r1, #16]
 800d888:	6923      	ldr	r3, [r4, #16]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	bfb8      	it	lt
 800d88e:	460b      	movlt	r3, r1
 800d890:	460d      	mov	r5, r1
 800d892:	bfbc      	itt	lt
 800d894:	4625      	movlt	r5, r4
 800d896:	461c      	movlt	r4, r3
 800d898:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d89c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d8a0:	68ab      	ldr	r3, [r5, #8]
 800d8a2:	6869      	ldr	r1, [r5, #4]
 800d8a4:	eb0a 0709 	add.w	r7, sl, r9
 800d8a8:	42bb      	cmp	r3, r7
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	bfb8      	it	lt
 800d8ae:	3101      	addlt	r1, #1
 800d8b0:	f7ff fe8a 	bl	800d5c8 <_Balloc>
 800d8b4:	b930      	cbnz	r0, 800d8c4 <__multiply+0x44>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	4b42      	ldr	r3, [pc, #264]	; (800d9c4 <__multiply+0x144>)
 800d8ba:	4843      	ldr	r0, [pc, #268]	; (800d9c8 <__multiply+0x148>)
 800d8bc:	f240 115d 	movw	r1, #349	; 0x15d
 800d8c0:	f000 ff3a 	bl	800e738 <__assert_func>
 800d8c4:	f100 0614 	add.w	r6, r0, #20
 800d8c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d8cc:	4633      	mov	r3, r6
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	4543      	cmp	r3, r8
 800d8d2:	d31e      	bcc.n	800d912 <__multiply+0x92>
 800d8d4:	f105 0c14 	add.w	ip, r5, #20
 800d8d8:	f104 0314 	add.w	r3, r4, #20
 800d8dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d8e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d8e4:	9202      	str	r2, [sp, #8]
 800d8e6:	ebac 0205 	sub.w	r2, ip, r5
 800d8ea:	3a15      	subs	r2, #21
 800d8ec:	f022 0203 	bic.w	r2, r2, #3
 800d8f0:	3204      	adds	r2, #4
 800d8f2:	f105 0115 	add.w	r1, r5, #21
 800d8f6:	458c      	cmp	ip, r1
 800d8f8:	bf38      	it	cc
 800d8fa:	2204      	movcc	r2, #4
 800d8fc:	9201      	str	r2, [sp, #4]
 800d8fe:	9a02      	ldr	r2, [sp, #8]
 800d900:	9303      	str	r3, [sp, #12]
 800d902:	429a      	cmp	r2, r3
 800d904:	d808      	bhi.n	800d918 <__multiply+0x98>
 800d906:	2f00      	cmp	r7, #0
 800d908:	dc55      	bgt.n	800d9b6 <__multiply+0x136>
 800d90a:	6107      	str	r7, [r0, #16]
 800d90c:	b005      	add	sp, #20
 800d90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d912:	f843 2b04 	str.w	r2, [r3], #4
 800d916:	e7db      	b.n	800d8d0 <__multiply+0x50>
 800d918:	f8b3 a000 	ldrh.w	sl, [r3]
 800d91c:	f1ba 0f00 	cmp.w	sl, #0
 800d920:	d020      	beq.n	800d964 <__multiply+0xe4>
 800d922:	f105 0e14 	add.w	lr, r5, #20
 800d926:	46b1      	mov	r9, r6
 800d928:	2200      	movs	r2, #0
 800d92a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d92e:	f8d9 b000 	ldr.w	fp, [r9]
 800d932:	b2a1      	uxth	r1, r4
 800d934:	fa1f fb8b 	uxth.w	fp, fp
 800d938:	fb0a b101 	mla	r1, sl, r1, fp
 800d93c:	4411      	add	r1, r2
 800d93e:	f8d9 2000 	ldr.w	r2, [r9]
 800d942:	0c24      	lsrs	r4, r4, #16
 800d944:	0c12      	lsrs	r2, r2, #16
 800d946:	fb0a 2404 	mla	r4, sl, r4, r2
 800d94a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d94e:	b289      	uxth	r1, r1
 800d950:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d954:	45f4      	cmp	ip, lr
 800d956:	f849 1b04 	str.w	r1, [r9], #4
 800d95a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d95e:	d8e4      	bhi.n	800d92a <__multiply+0xaa>
 800d960:	9901      	ldr	r1, [sp, #4]
 800d962:	5072      	str	r2, [r6, r1]
 800d964:	9a03      	ldr	r2, [sp, #12]
 800d966:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d96a:	3304      	adds	r3, #4
 800d96c:	f1b9 0f00 	cmp.w	r9, #0
 800d970:	d01f      	beq.n	800d9b2 <__multiply+0x132>
 800d972:	6834      	ldr	r4, [r6, #0]
 800d974:	f105 0114 	add.w	r1, r5, #20
 800d978:	46b6      	mov	lr, r6
 800d97a:	f04f 0a00 	mov.w	sl, #0
 800d97e:	880a      	ldrh	r2, [r1, #0]
 800d980:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d984:	fb09 b202 	mla	r2, r9, r2, fp
 800d988:	4492      	add	sl, r2
 800d98a:	b2a4      	uxth	r4, r4
 800d98c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d990:	f84e 4b04 	str.w	r4, [lr], #4
 800d994:	f851 4b04 	ldr.w	r4, [r1], #4
 800d998:	f8be 2000 	ldrh.w	r2, [lr]
 800d99c:	0c24      	lsrs	r4, r4, #16
 800d99e:	fb09 2404 	mla	r4, r9, r4, r2
 800d9a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d9a6:	458c      	cmp	ip, r1
 800d9a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d9ac:	d8e7      	bhi.n	800d97e <__multiply+0xfe>
 800d9ae:	9a01      	ldr	r2, [sp, #4]
 800d9b0:	50b4      	str	r4, [r6, r2]
 800d9b2:	3604      	adds	r6, #4
 800d9b4:	e7a3      	b.n	800d8fe <__multiply+0x7e>
 800d9b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d1a5      	bne.n	800d90a <__multiply+0x8a>
 800d9be:	3f01      	subs	r7, #1
 800d9c0:	e7a1      	b.n	800d906 <__multiply+0x86>
 800d9c2:	bf00      	nop
 800d9c4:	0800ef94 	.word	0x0800ef94
 800d9c8:	0800f088 	.word	0x0800f088

0800d9cc <__pow5mult>:
 800d9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9d0:	4615      	mov	r5, r2
 800d9d2:	f012 0203 	ands.w	r2, r2, #3
 800d9d6:	4606      	mov	r6, r0
 800d9d8:	460f      	mov	r7, r1
 800d9da:	d007      	beq.n	800d9ec <__pow5mult+0x20>
 800d9dc:	4c25      	ldr	r4, [pc, #148]	; (800da74 <__pow5mult+0xa8>)
 800d9de:	3a01      	subs	r2, #1
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9e6:	f7ff fe51 	bl	800d68c <__multadd>
 800d9ea:	4607      	mov	r7, r0
 800d9ec:	10ad      	asrs	r5, r5, #2
 800d9ee:	d03d      	beq.n	800da6c <__pow5mult+0xa0>
 800d9f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9f2:	b97c      	cbnz	r4, 800da14 <__pow5mult+0x48>
 800d9f4:	2010      	movs	r0, #16
 800d9f6:	f7ff fdcd 	bl	800d594 <malloc>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	6270      	str	r0, [r6, #36]	; 0x24
 800d9fe:	b928      	cbnz	r0, 800da0c <__pow5mult+0x40>
 800da00:	4b1d      	ldr	r3, [pc, #116]	; (800da78 <__pow5mult+0xac>)
 800da02:	481e      	ldr	r0, [pc, #120]	; (800da7c <__pow5mult+0xb0>)
 800da04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da08:	f000 fe96 	bl	800e738 <__assert_func>
 800da0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da10:	6004      	str	r4, [r0, #0]
 800da12:	60c4      	str	r4, [r0, #12]
 800da14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da1c:	b94c      	cbnz	r4, 800da32 <__pow5mult+0x66>
 800da1e:	f240 2171 	movw	r1, #625	; 0x271
 800da22:	4630      	mov	r0, r6
 800da24:	f7ff ff16 	bl	800d854 <__i2b>
 800da28:	2300      	movs	r3, #0
 800da2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800da2e:	4604      	mov	r4, r0
 800da30:	6003      	str	r3, [r0, #0]
 800da32:	f04f 0900 	mov.w	r9, #0
 800da36:	07eb      	lsls	r3, r5, #31
 800da38:	d50a      	bpl.n	800da50 <__pow5mult+0x84>
 800da3a:	4639      	mov	r1, r7
 800da3c:	4622      	mov	r2, r4
 800da3e:	4630      	mov	r0, r6
 800da40:	f7ff ff1e 	bl	800d880 <__multiply>
 800da44:	4639      	mov	r1, r7
 800da46:	4680      	mov	r8, r0
 800da48:	4630      	mov	r0, r6
 800da4a:	f7ff fdfd 	bl	800d648 <_Bfree>
 800da4e:	4647      	mov	r7, r8
 800da50:	106d      	asrs	r5, r5, #1
 800da52:	d00b      	beq.n	800da6c <__pow5mult+0xa0>
 800da54:	6820      	ldr	r0, [r4, #0]
 800da56:	b938      	cbnz	r0, 800da68 <__pow5mult+0x9c>
 800da58:	4622      	mov	r2, r4
 800da5a:	4621      	mov	r1, r4
 800da5c:	4630      	mov	r0, r6
 800da5e:	f7ff ff0f 	bl	800d880 <__multiply>
 800da62:	6020      	str	r0, [r4, #0]
 800da64:	f8c0 9000 	str.w	r9, [r0]
 800da68:	4604      	mov	r4, r0
 800da6a:	e7e4      	b.n	800da36 <__pow5mult+0x6a>
 800da6c:	4638      	mov	r0, r7
 800da6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da72:	bf00      	nop
 800da74:	0800f1d8 	.word	0x0800f1d8
 800da78:	0800ef1e 	.word	0x0800ef1e
 800da7c:	0800f088 	.word	0x0800f088

0800da80 <__lshift>:
 800da80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da84:	460c      	mov	r4, r1
 800da86:	6849      	ldr	r1, [r1, #4]
 800da88:	6923      	ldr	r3, [r4, #16]
 800da8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da8e:	68a3      	ldr	r3, [r4, #8]
 800da90:	4607      	mov	r7, r0
 800da92:	4691      	mov	r9, r2
 800da94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da98:	f108 0601 	add.w	r6, r8, #1
 800da9c:	42b3      	cmp	r3, r6
 800da9e:	db0b      	blt.n	800dab8 <__lshift+0x38>
 800daa0:	4638      	mov	r0, r7
 800daa2:	f7ff fd91 	bl	800d5c8 <_Balloc>
 800daa6:	4605      	mov	r5, r0
 800daa8:	b948      	cbnz	r0, 800dabe <__lshift+0x3e>
 800daaa:	4602      	mov	r2, r0
 800daac:	4b28      	ldr	r3, [pc, #160]	; (800db50 <__lshift+0xd0>)
 800daae:	4829      	ldr	r0, [pc, #164]	; (800db54 <__lshift+0xd4>)
 800dab0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dab4:	f000 fe40 	bl	800e738 <__assert_func>
 800dab8:	3101      	adds	r1, #1
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	e7ee      	b.n	800da9c <__lshift+0x1c>
 800dabe:	2300      	movs	r3, #0
 800dac0:	f100 0114 	add.w	r1, r0, #20
 800dac4:	f100 0210 	add.w	r2, r0, #16
 800dac8:	4618      	mov	r0, r3
 800daca:	4553      	cmp	r3, sl
 800dacc:	db33      	blt.n	800db36 <__lshift+0xb6>
 800dace:	6920      	ldr	r0, [r4, #16]
 800dad0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dad4:	f104 0314 	add.w	r3, r4, #20
 800dad8:	f019 091f 	ands.w	r9, r9, #31
 800dadc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dae0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dae4:	d02b      	beq.n	800db3e <__lshift+0xbe>
 800dae6:	f1c9 0e20 	rsb	lr, r9, #32
 800daea:	468a      	mov	sl, r1
 800daec:	2200      	movs	r2, #0
 800daee:	6818      	ldr	r0, [r3, #0]
 800daf0:	fa00 f009 	lsl.w	r0, r0, r9
 800daf4:	4302      	orrs	r2, r0
 800daf6:	f84a 2b04 	str.w	r2, [sl], #4
 800dafa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dafe:	459c      	cmp	ip, r3
 800db00:	fa22 f20e 	lsr.w	r2, r2, lr
 800db04:	d8f3      	bhi.n	800daee <__lshift+0x6e>
 800db06:	ebac 0304 	sub.w	r3, ip, r4
 800db0a:	3b15      	subs	r3, #21
 800db0c:	f023 0303 	bic.w	r3, r3, #3
 800db10:	3304      	adds	r3, #4
 800db12:	f104 0015 	add.w	r0, r4, #21
 800db16:	4584      	cmp	ip, r0
 800db18:	bf38      	it	cc
 800db1a:	2304      	movcc	r3, #4
 800db1c:	50ca      	str	r2, [r1, r3]
 800db1e:	b10a      	cbz	r2, 800db24 <__lshift+0xa4>
 800db20:	f108 0602 	add.w	r6, r8, #2
 800db24:	3e01      	subs	r6, #1
 800db26:	4638      	mov	r0, r7
 800db28:	612e      	str	r6, [r5, #16]
 800db2a:	4621      	mov	r1, r4
 800db2c:	f7ff fd8c 	bl	800d648 <_Bfree>
 800db30:	4628      	mov	r0, r5
 800db32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db36:	f842 0f04 	str.w	r0, [r2, #4]!
 800db3a:	3301      	adds	r3, #1
 800db3c:	e7c5      	b.n	800daca <__lshift+0x4a>
 800db3e:	3904      	subs	r1, #4
 800db40:	f853 2b04 	ldr.w	r2, [r3], #4
 800db44:	f841 2f04 	str.w	r2, [r1, #4]!
 800db48:	459c      	cmp	ip, r3
 800db4a:	d8f9      	bhi.n	800db40 <__lshift+0xc0>
 800db4c:	e7ea      	b.n	800db24 <__lshift+0xa4>
 800db4e:	bf00      	nop
 800db50:	0800ef94 	.word	0x0800ef94
 800db54:	0800f088 	.word	0x0800f088

0800db58 <__mcmp>:
 800db58:	b530      	push	{r4, r5, lr}
 800db5a:	6902      	ldr	r2, [r0, #16]
 800db5c:	690c      	ldr	r4, [r1, #16]
 800db5e:	1b12      	subs	r2, r2, r4
 800db60:	d10e      	bne.n	800db80 <__mcmp+0x28>
 800db62:	f100 0314 	add.w	r3, r0, #20
 800db66:	3114      	adds	r1, #20
 800db68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db78:	42a5      	cmp	r5, r4
 800db7a:	d003      	beq.n	800db84 <__mcmp+0x2c>
 800db7c:	d305      	bcc.n	800db8a <__mcmp+0x32>
 800db7e:	2201      	movs	r2, #1
 800db80:	4610      	mov	r0, r2
 800db82:	bd30      	pop	{r4, r5, pc}
 800db84:	4283      	cmp	r3, r0
 800db86:	d3f3      	bcc.n	800db70 <__mcmp+0x18>
 800db88:	e7fa      	b.n	800db80 <__mcmp+0x28>
 800db8a:	f04f 32ff 	mov.w	r2, #4294967295
 800db8e:	e7f7      	b.n	800db80 <__mcmp+0x28>

0800db90 <__mdiff>:
 800db90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db94:	460c      	mov	r4, r1
 800db96:	4606      	mov	r6, r0
 800db98:	4611      	mov	r1, r2
 800db9a:	4620      	mov	r0, r4
 800db9c:	4617      	mov	r7, r2
 800db9e:	f7ff ffdb 	bl	800db58 <__mcmp>
 800dba2:	1e05      	subs	r5, r0, #0
 800dba4:	d110      	bne.n	800dbc8 <__mdiff+0x38>
 800dba6:	4629      	mov	r1, r5
 800dba8:	4630      	mov	r0, r6
 800dbaa:	f7ff fd0d 	bl	800d5c8 <_Balloc>
 800dbae:	b930      	cbnz	r0, 800dbbe <__mdiff+0x2e>
 800dbb0:	4b39      	ldr	r3, [pc, #228]	; (800dc98 <__mdiff+0x108>)
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	f240 2132 	movw	r1, #562	; 0x232
 800dbb8:	4838      	ldr	r0, [pc, #224]	; (800dc9c <__mdiff+0x10c>)
 800dbba:	f000 fdbd 	bl	800e738 <__assert_func>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc8:	bfa4      	itt	ge
 800dbca:	463b      	movge	r3, r7
 800dbcc:	4627      	movge	r7, r4
 800dbce:	4630      	mov	r0, r6
 800dbd0:	6879      	ldr	r1, [r7, #4]
 800dbd2:	bfa6      	itte	ge
 800dbd4:	461c      	movge	r4, r3
 800dbd6:	2500      	movge	r5, #0
 800dbd8:	2501      	movlt	r5, #1
 800dbda:	f7ff fcf5 	bl	800d5c8 <_Balloc>
 800dbde:	b920      	cbnz	r0, 800dbea <__mdiff+0x5a>
 800dbe0:	4b2d      	ldr	r3, [pc, #180]	; (800dc98 <__mdiff+0x108>)
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dbe8:	e7e6      	b.n	800dbb8 <__mdiff+0x28>
 800dbea:	693e      	ldr	r6, [r7, #16]
 800dbec:	60c5      	str	r5, [r0, #12]
 800dbee:	6925      	ldr	r5, [r4, #16]
 800dbf0:	f107 0114 	add.w	r1, r7, #20
 800dbf4:	f104 0914 	add.w	r9, r4, #20
 800dbf8:	f100 0e14 	add.w	lr, r0, #20
 800dbfc:	f107 0210 	add.w	r2, r7, #16
 800dc00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dc04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dc08:	46f2      	mov	sl, lr
 800dc0a:	2700      	movs	r7, #0
 800dc0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc14:	fa1f f883 	uxth.w	r8, r3
 800dc18:	fa17 f78b 	uxtah	r7, r7, fp
 800dc1c:	0c1b      	lsrs	r3, r3, #16
 800dc1e:	eba7 0808 	sub.w	r8, r7, r8
 800dc22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc2a:	fa1f f888 	uxth.w	r8, r8
 800dc2e:	141f      	asrs	r7, r3, #16
 800dc30:	454d      	cmp	r5, r9
 800dc32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc36:	f84a 3b04 	str.w	r3, [sl], #4
 800dc3a:	d8e7      	bhi.n	800dc0c <__mdiff+0x7c>
 800dc3c:	1b2b      	subs	r3, r5, r4
 800dc3e:	3b15      	subs	r3, #21
 800dc40:	f023 0303 	bic.w	r3, r3, #3
 800dc44:	3304      	adds	r3, #4
 800dc46:	3415      	adds	r4, #21
 800dc48:	42a5      	cmp	r5, r4
 800dc4a:	bf38      	it	cc
 800dc4c:	2304      	movcc	r3, #4
 800dc4e:	4419      	add	r1, r3
 800dc50:	4473      	add	r3, lr
 800dc52:	469e      	mov	lr, r3
 800dc54:	460d      	mov	r5, r1
 800dc56:	4565      	cmp	r5, ip
 800dc58:	d30e      	bcc.n	800dc78 <__mdiff+0xe8>
 800dc5a:	f10c 0203 	add.w	r2, ip, #3
 800dc5e:	1a52      	subs	r2, r2, r1
 800dc60:	f022 0203 	bic.w	r2, r2, #3
 800dc64:	3903      	subs	r1, #3
 800dc66:	458c      	cmp	ip, r1
 800dc68:	bf38      	it	cc
 800dc6a:	2200      	movcc	r2, #0
 800dc6c:	441a      	add	r2, r3
 800dc6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dc72:	b17b      	cbz	r3, 800dc94 <__mdiff+0x104>
 800dc74:	6106      	str	r6, [r0, #16]
 800dc76:	e7a5      	b.n	800dbc4 <__mdiff+0x34>
 800dc78:	f855 8b04 	ldr.w	r8, [r5], #4
 800dc7c:	fa17 f488 	uxtah	r4, r7, r8
 800dc80:	1422      	asrs	r2, r4, #16
 800dc82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dc86:	b2a4      	uxth	r4, r4
 800dc88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dc8c:	f84e 4b04 	str.w	r4, [lr], #4
 800dc90:	1417      	asrs	r7, r2, #16
 800dc92:	e7e0      	b.n	800dc56 <__mdiff+0xc6>
 800dc94:	3e01      	subs	r6, #1
 800dc96:	e7ea      	b.n	800dc6e <__mdiff+0xde>
 800dc98:	0800ef94 	.word	0x0800ef94
 800dc9c:	0800f088 	.word	0x0800f088

0800dca0 <__ulp>:
 800dca0:	b082      	sub	sp, #8
 800dca2:	ed8d 0b00 	vstr	d0, [sp]
 800dca6:	9b01      	ldr	r3, [sp, #4]
 800dca8:	4912      	ldr	r1, [pc, #72]	; (800dcf4 <__ulp+0x54>)
 800dcaa:	4019      	ands	r1, r3
 800dcac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dcb0:	2900      	cmp	r1, #0
 800dcb2:	dd05      	ble.n	800dcc0 <__ulp+0x20>
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	ec43 2b10 	vmov	d0, r2, r3
 800dcbc:	b002      	add	sp, #8
 800dcbe:	4770      	bx	lr
 800dcc0:	4249      	negs	r1, r1
 800dcc2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dcc6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dcca:	f04f 0200 	mov.w	r2, #0
 800dcce:	f04f 0300 	mov.w	r3, #0
 800dcd2:	da04      	bge.n	800dcde <__ulp+0x3e>
 800dcd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dcd8:	fa41 f300 	asr.w	r3, r1, r0
 800dcdc:	e7ec      	b.n	800dcb8 <__ulp+0x18>
 800dcde:	f1a0 0114 	sub.w	r1, r0, #20
 800dce2:	291e      	cmp	r1, #30
 800dce4:	bfda      	itte	le
 800dce6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dcea:	fa20 f101 	lsrle.w	r1, r0, r1
 800dcee:	2101      	movgt	r1, #1
 800dcf0:	460a      	mov	r2, r1
 800dcf2:	e7e1      	b.n	800dcb8 <__ulp+0x18>
 800dcf4:	7ff00000 	.word	0x7ff00000

0800dcf8 <__b2d>:
 800dcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcfa:	6905      	ldr	r5, [r0, #16]
 800dcfc:	f100 0714 	add.w	r7, r0, #20
 800dd00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dd04:	1f2e      	subs	r6, r5, #4
 800dd06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f7ff fd52 	bl	800d7b4 <__hi0bits>
 800dd10:	f1c0 0320 	rsb	r3, r0, #32
 800dd14:	280a      	cmp	r0, #10
 800dd16:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dd94 <__b2d+0x9c>
 800dd1a:	600b      	str	r3, [r1, #0]
 800dd1c:	dc14      	bgt.n	800dd48 <__b2d+0x50>
 800dd1e:	f1c0 0e0b 	rsb	lr, r0, #11
 800dd22:	fa24 f10e 	lsr.w	r1, r4, lr
 800dd26:	42b7      	cmp	r7, r6
 800dd28:	ea41 030c 	orr.w	r3, r1, ip
 800dd2c:	bf34      	ite	cc
 800dd2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd32:	2100      	movcs	r1, #0
 800dd34:	3015      	adds	r0, #21
 800dd36:	fa04 f000 	lsl.w	r0, r4, r0
 800dd3a:	fa21 f10e 	lsr.w	r1, r1, lr
 800dd3e:	ea40 0201 	orr.w	r2, r0, r1
 800dd42:	ec43 2b10 	vmov	d0, r2, r3
 800dd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd48:	42b7      	cmp	r7, r6
 800dd4a:	bf3a      	itte	cc
 800dd4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd50:	f1a5 0608 	subcc.w	r6, r5, #8
 800dd54:	2100      	movcs	r1, #0
 800dd56:	380b      	subs	r0, #11
 800dd58:	d017      	beq.n	800dd8a <__b2d+0x92>
 800dd5a:	f1c0 0c20 	rsb	ip, r0, #32
 800dd5e:	fa04 f500 	lsl.w	r5, r4, r0
 800dd62:	42be      	cmp	r6, r7
 800dd64:	fa21 f40c 	lsr.w	r4, r1, ip
 800dd68:	ea45 0504 	orr.w	r5, r5, r4
 800dd6c:	bf8c      	ite	hi
 800dd6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dd72:	2400      	movls	r4, #0
 800dd74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dd78:	fa01 f000 	lsl.w	r0, r1, r0
 800dd7c:	fa24 f40c 	lsr.w	r4, r4, ip
 800dd80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd84:	ea40 0204 	orr.w	r2, r0, r4
 800dd88:	e7db      	b.n	800dd42 <__b2d+0x4a>
 800dd8a:	ea44 030c 	orr.w	r3, r4, ip
 800dd8e:	460a      	mov	r2, r1
 800dd90:	e7d7      	b.n	800dd42 <__b2d+0x4a>
 800dd92:	bf00      	nop
 800dd94:	3ff00000 	.word	0x3ff00000

0800dd98 <__d2b>:
 800dd98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd9c:	4689      	mov	r9, r1
 800dd9e:	2101      	movs	r1, #1
 800dda0:	ec57 6b10 	vmov	r6, r7, d0
 800dda4:	4690      	mov	r8, r2
 800dda6:	f7ff fc0f 	bl	800d5c8 <_Balloc>
 800ddaa:	4604      	mov	r4, r0
 800ddac:	b930      	cbnz	r0, 800ddbc <__d2b+0x24>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	4b25      	ldr	r3, [pc, #148]	; (800de48 <__d2b+0xb0>)
 800ddb2:	4826      	ldr	r0, [pc, #152]	; (800de4c <__d2b+0xb4>)
 800ddb4:	f240 310a 	movw	r1, #778	; 0x30a
 800ddb8:	f000 fcbe 	bl	800e738 <__assert_func>
 800ddbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ddc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ddc4:	bb35      	cbnz	r5, 800de14 <__d2b+0x7c>
 800ddc6:	2e00      	cmp	r6, #0
 800ddc8:	9301      	str	r3, [sp, #4]
 800ddca:	d028      	beq.n	800de1e <__d2b+0x86>
 800ddcc:	4668      	mov	r0, sp
 800ddce:	9600      	str	r6, [sp, #0]
 800ddd0:	f7ff fd10 	bl	800d7f4 <__lo0bits>
 800ddd4:	9900      	ldr	r1, [sp, #0]
 800ddd6:	b300      	cbz	r0, 800de1a <__d2b+0x82>
 800ddd8:	9a01      	ldr	r2, [sp, #4]
 800ddda:	f1c0 0320 	rsb	r3, r0, #32
 800ddde:	fa02 f303 	lsl.w	r3, r2, r3
 800dde2:	430b      	orrs	r3, r1
 800dde4:	40c2      	lsrs	r2, r0
 800dde6:	6163      	str	r3, [r4, #20]
 800dde8:	9201      	str	r2, [sp, #4]
 800ddea:	9b01      	ldr	r3, [sp, #4]
 800ddec:	61a3      	str	r3, [r4, #24]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	bf14      	ite	ne
 800ddf2:	2202      	movne	r2, #2
 800ddf4:	2201      	moveq	r2, #1
 800ddf6:	6122      	str	r2, [r4, #16]
 800ddf8:	b1d5      	cbz	r5, 800de30 <__d2b+0x98>
 800ddfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddfe:	4405      	add	r5, r0
 800de00:	f8c9 5000 	str.w	r5, [r9]
 800de04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de08:	f8c8 0000 	str.w	r0, [r8]
 800de0c:	4620      	mov	r0, r4
 800de0e:	b003      	add	sp, #12
 800de10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de18:	e7d5      	b.n	800ddc6 <__d2b+0x2e>
 800de1a:	6161      	str	r1, [r4, #20]
 800de1c:	e7e5      	b.n	800ddea <__d2b+0x52>
 800de1e:	a801      	add	r0, sp, #4
 800de20:	f7ff fce8 	bl	800d7f4 <__lo0bits>
 800de24:	9b01      	ldr	r3, [sp, #4]
 800de26:	6163      	str	r3, [r4, #20]
 800de28:	2201      	movs	r2, #1
 800de2a:	6122      	str	r2, [r4, #16]
 800de2c:	3020      	adds	r0, #32
 800de2e:	e7e3      	b.n	800ddf8 <__d2b+0x60>
 800de30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de38:	f8c9 0000 	str.w	r0, [r9]
 800de3c:	6918      	ldr	r0, [r3, #16]
 800de3e:	f7ff fcb9 	bl	800d7b4 <__hi0bits>
 800de42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de46:	e7df      	b.n	800de08 <__d2b+0x70>
 800de48:	0800ef94 	.word	0x0800ef94
 800de4c:	0800f088 	.word	0x0800f088

0800de50 <__ratio>:
 800de50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de54:	4688      	mov	r8, r1
 800de56:	4669      	mov	r1, sp
 800de58:	4681      	mov	r9, r0
 800de5a:	f7ff ff4d 	bl	800dcf8 <__b2d>
 800de5e:	a901      	add	r1, sp, #4
 800de60:	4640      	mov	r0, r8
 800de62:	ec55 4b10 	vmov	r4, r5, d0
 800de66:	f7ff ff47 	bl	800dcf8 <__b2d>
 800de6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de72:	eba3 0c02 	sub.w	ip, r3, r2
 800de76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de7a:	1a9b      	subs	r3, r3, r2
 800de7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800de80:	ec51 0b10 	vmov	r0, r1, d0
 800de84:	2b00      	cmp	r3, #0
 800de86:	bfd6      	itet	le
 800de88:	460a      	movle	r2, r1
 800de8a:	462a      	movgt	r2, r5
 800de8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de90:	468b      	mov	fp, r1
 800de92:	462f      	mov	r7, r5
 800de94:	bfd4      	ite	le
 800de96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800de9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de9e:	4620      	mov	r0, r4
 800dea0:	ee10 2a10 	vmov	r2, s0
 800dea4:	465b      	mov	r3, fp
 800dea6:	4639      	mov	r1, r7
 800dea8:	f7f2 fcd0 	bl	800084c <__aeabi_ddiv>
 800deac:	ec41 0b10 	vmov	d0, r0, r1
 800deb0:	b003      	add	sp, #12
 800deb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800deb6 <__copybits>:
 800deb6:	3901      	subs	r1, #1
 800deb8:	b570      	push	{r4, r5, r6, lr}
 800deba:	1149      	asrs	r1, r1, #5
 800debc:	6914      	ldr	r4, [r2, #16]
 800debe:	3101      	adds	r1, #1
 800dec0:	f102 0314 	add.w	r3, r2, #20
 800dec4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dec8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800decc:	1f05      	subs	r5, r0, #4
 800dece:	42a3      	cmp	r3, r4
 800ded0:	d30c      	bcc.n	800deec <__copybits+0x36>
 800ded2:	1aa3      	subs	r3, r4, r2
 800ded4:	3b11      	subs	r3, #17
 800ded6:	f023 0303 	bic.w	r3, r3, #3
 800deda:	3211      	adds	r2, #17
 800dedc:	42a2      	cmp	r2, r4
 800dede:	bf88      	it	hi
 800dee0:	2300      	movhi	r3, #0
 800dee2:	4418      	add	r0, r3
 800dee4:	2300      	movs	r3, #0
 800dee6:	4288      	cmp	r0, r1
 800dee8:	d305      	bcc.n	800def6 <__copybits+0x40>
 800deea:	bd70      	pop	{r4, r5, r6, pc}
 800deec:	f853 6b04 	ldr.w	r6, [r3], #4
 800def0:	f845 6f04 	str.w	r6, [r5, #4]!
 800def4:	e7eb      	b.n	800dece <__copybits+0x18>
 800def6:	f840 3b04 	str.w	r3, [r0], #4
 800defa:	e7f4      	b.n	800dee6 <__copybits+0x30>

0800defc <__any_on>:
 800defc:	f100 0214 	add.w	r2, r0, #20
 800df00:	6900      	ldr	r0, [r0, #16]
 800df02:	114b      	asrs	r3, r1, #5
 800df04:	4298      	cmp	r0, r3
 800df06:	b510      	push	{r4, lr}
 800df08:	db11      	blt.n	800df2e <__any_on+0x32>
 800df0a:	dd0a      	ble.n	800df22 <__any_on+0x26>
 800df0c:	f011 011f 	ands.w	r1, r1, #31
 800df10:	d007      	beq.n	800df22 <__any_on+0x26>
 800df12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800df16:	fa24 f001 	lsr.w	r0, r4, r1
 800df1a:	fa00 f101 	lsl.w	r1, r0, r1
 800df1e:	428c      	cmp	r4, r1
 800df20:	d10b      	bne.n	800df3a <__any_on+0x3e>
 800df22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df26:	4293      	cmp	r3, r2
 800df28:	d803      	bhi.n	800df32 <__any_on+0x36>
 800df2a:	2000      	movs	r0, #0
 800df2c:	bd10      	pop	{r4, pc}
 800df2e:	4603      	mov	r3, r0
 800df30:	e7f7      	b.n	800df22 <__any_on+0x26>
 800df32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df36:	2900      	cmp	r1, #0
 800df38:	d0f5      	beq.n	800df26 <__any_on+0x2a>
 800df3a:	2001      	movs	r0, #1
 800df3c:	e7f6      	b.n	800df2c <__any_on+0x30>

0800df3e <_calloc_r>:
 800df3e:	b513      	push	{r0, r1, r4, lr}
 800df40:	434a      	muls	r2, r1
 800df42:	4611      	mov	r1, r2
 800df44:	9201      	str	r2, [sp, #4]
 800df46:	f000 f859 	bl	800dffc <_malloc_r>
 800df4a:	4604      	mov	r4, r0
 800df4c:	b118      	cbz	r0, 800df56 <_calloc_r+0x18>
 800df4e:	9a01      	ldr	r2, [sp, #4]
 800df50:	2100      	movs	r1, #0
 800df52:	f7fc f869 	bl	800a028 <memset>
 800df56:	4620      	mov	r0, r4
 800df58:	b002      	add	sp, #8
 800df5a:	bd10      	pop	{r4, pc}

0800df5c <_free_r>:
 800df5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df5e:	2900      	cmp	r1, #0
 800df60:	d048      	beq.n	800dff4 <_free_r+0x98>
 800df62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df66:	9001      	str	r0, [sp, #4]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f1a1 0404 	sub.w	r4, r1, #4
 800df6e:	bfb8      	it	lt
 800df70:	18e4      	addlt	r4, r4, r3
 800df72:	f000 fc6f 	bl	800e854 <__malloc_lock>
 800df76:	4a20      	ldr	r2, [pc, #128]	; (800dff8 <_free_r+0x9c>)
 800df78:	9801      	ldr	r0, [sp, #4]
 800df7a:	6813      	ldr	r3, [r2, #0]
 800df7c:	4615      	mov	r5, r2
 800df7e:	b933      	cbnz	r3, 800df8e <_free_r+0x32>
 800df80:	6063      	str	r3, [r4, #4]
 800df82:	6014      	str	r4, [r2, #0]
 800df84:	b003      	add	sp, #12
 800df86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df8a:	f000 bc69 	b.w	800e860 <__malloc_unlock>
 800df8e:	42a3      	cmp	r3, r4
 800df90:	d90b      	bls.n	800dfaa <_free_r+0x4e>
 800df92:	6821      	ldr	r1, [r4, #0]
 800df94:	1862      	adds	r2, r4, r1
 800df96:	4293      	cmp	r3, r2
 800df98:	bf04      	itt	eq
 800df9a:	681a      	ldreq	r2, [r3, #0]
 800df9c:	685b      	ldreq	r3, [r3, #4]
 800df9e:	6063      	str	r3, [r4, #4]
 800dfa0:	bf04      	itt	eq
 800dfa2:	1852      	addeq	r2, r2, r1
 800dfa4:	6022      	streq	r2, [r4, #0]
 800dfa6:	602c      	str	r4, [r5, #0]
 800dfa8:	e7ec      	b.n	800df84 <_free_r+0x28>
 800dfaa:	461a      	mov	r2, r3
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	b10b      	cbz	r3, 800dfb4 <_free_r+0x58>
 800dfb0:	42a3      	cmp	r3, r4
 800dfb2:	d9fa      	bls.n	800dfaa <_free_r+0x4e>
 800dfb4:	6811      	ldr	r1, [r2, #0]
 800dfb6:	1855      	adds	r5, r2, r1
 800dfb8:	42a5      	cmp	r5, r4
 800dfba:	d10b      	bne.n	800dfd4 <_free_r+0x78>
 800dfbc:	6824      	ldr	r4, [r4, #0]
 800dfbe:	4421      	add	r1, r4
 800dfc0:	1854      	adds	r4, r2, r1
 800dfc2:	42a3      	cmp	r3, r4
 800dfc4:	6011      	str	r1, [r2, #0]
 800dfc6:	d1dd      	bne.n	800df84 <_free_r+0x28>
 800dfc8:	681c      	ldr	r4, [r3, #0]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	6053      	str	r3, [r2, #4]
 800dfce:	4421      	add	r1, r4
 800dfd0:	6011      	str	r1, [r2, #0]
 800dfd2:	e7d7      	b.n	800df84 <_free_r+0x28>
 800dfd4:	d902      	bls.n	800dfdc <_free_r+0x80>
 800dfd6:	230c      	movs	r3, #12
 800dfd8:	6003      	str	r3, [r0, #0]
 800dfda:	e7d3      	b.n	800df84 <_free_r+0x28>
 800dfdc:	6825      	ldr	r5, [r4, #0]
 800dfde:	1961      	adds	r1, r4, r5
 800dfe0:	428b      	cmp	r3, r1
 800dfe2:	bf04      	itt	eq
 800dfe4:	6819      	ldreq	r1, [r3, #0]
 800dfe6:	685b      	ldreq	r3, [r3, #4]
 800dfe8:	6063      	str	r3, [r4, #4]
 800dfea:	bf04      	itt	eq
 800dfec:	1949      	addeq	r1, r1, r5
 800dfee:	6021      	streq	r1, [r4, #0]
 800dff0:	6054      	str	r4, [r2, #4]
 800dff2:	e7c7      	b.n	800df84 <_free_r+0x28>
 800dff4:	b003      	add	sp, #12
 800dff6:	bd30      	pop	{r4, r5, pc}
 800dff8:	20000204 	.word	0x20000204

0800dffc <_malloc_r>:
 800dffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffe:	1ccd      	adds	r5, r1, #3
 800e000:	f025 0503 	bic.w	r5, r5, #3
 800e004:	3508      	adds	r5, #8
 800e006:	2d0c      	cmp	r5, #12
 800e008:	bf38      	it	cc
 800e00a:	250c      	movcc	r5, #12
 800e00c:	2d00      	cmp	r5, #0
 800e00e:	4606      	mov	r6, r0
 800e010:	db01      	blt.n	800e016 <_malloc_r+0x1a>
 800e012:	42a9      	cmp	r1, r5
 800e014:	d903      	bls.n	800e01e <_malloc_r+0x22>
 800e016:	230c      	movs	r3, #12
 800e018:	6033      	str	r3, [r6, #0]
 800e01a:	2000      	movs	r0, #0
 800e01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e01e:	f000 fc19 	bl	800e854 <__malloc_lock>
 800e022:	4921      	ldr	r1, [pc, #132]	; (800e0a8 <_malloc_r+0xac>)
 800e024:	680a      	ldr	r2, [r1, #0]
 800e026:	4614      	mov	r4, r2
 800e028:	b99c      	cbnz	r4, 800e052 <_malloc_r+0x56>
 800e02a:	4f20      	ldr	r7, [pc, #128]	; (800e0ac <_malloc_r+0xb0>)
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	b923      	cbnz	r3, 800e03a <_malloc_r+0x3e>
 800e030:	4621      	mov	r1, r4
 800e032:	4630      	mov	r0, r6
 800e034:	f000 fafc 	bl	800e630 <_sbrk_r>
 800e038:	6038      	str	r0, [r7, #0]
 800e03a:	4629      	mov	r1, r5
 800e03c:	4630      	mov	r0, r6
 800e03e:	f000 faf7 	bl	800e630 <_sbrk_r>
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	d123      	bne.n	800e08e <_malloc_r+0x92>
 800e046:	230c      	movs	r3, #12
 800e048:	6033      	str	r3, [r6, #0]
 800e04a:	4630      	mov	r0, r6
 800e04c:	f000 fc08 	bl	800e860 <__malloc_unlock>
 800e050:	e7e3      	b.n	800e01a <_malloc_r+0x1e>
 800e052:	6823      	ldr	r3, [r4, #0]
 800e054:	1b5b      	subs	r3, r3, r5
 800e056:	d417      	bmi.n	800e088 <_malloc_r+0x8c>
 800e058:	2b0b      	cmp	r3, #11
 800e05a:	d903      	bls.n	800e064 <_malloc_r+0x68>
 800e05c:	6023      	str	r3, [r4, #0]
 800e05e:	441c      	add	r4, r3
 800e060:	6025      	str	r5, [r4, #0]
 800e062:	e004      	b.n	800e06e <_malloc_r+0x72>
 800e064:	6863      	ldr	r3, [r4, #4]
 800e066:	42a2      	cmp	r2, r4
 800e068:	bf0c      	ite	eq
 800e06a:	600b      	streq	r3, [r1, #0]
 800e06c:	6053      	strne	r3, [r2, #4]
 800e06e:	4630      	mov	r0, r6
 800e070:	f000 fbf6 	bl	800e860 <__malloc_unlock>
 800e074:	f104 000b 	add.w	r0, r4, #11
 800e078:	1d23      	adds	r3, r4, #4
 800e07a:	f020 0007 	bic.w	r0, r0, #7
 800e07e:	1ac2      	subs	r2, r0, r3
 800e080:	d0cc      	beq.n	800e01c <_malloc_r+0x20>
 800e082:	1a1b      	subs	r3, r3, r0
 800e084:	50a3      	str	r3, [r4, r2]
 800e086:	e7c9      	b.n	800e01c <_malloc_r+0x20>
 800e088:	4622      	mov	r2, r4
 800e08a:	6864      	ldr	r4, [r4, #4]
 800e08c:	e7cc      	b.n	800e028 <_malloc_r+0x2c>
 800e08e:	1cc4      	adds	r4, r0, #3
 800e090:	f024 0403 	bic.w	r4, r4, #3
 800e094:	42a0      	cmp	r0, r4
 800e096:	d0e3      	beq.n	800e060 <_malloc_r+0x64>
 800e098:	1a21      	subs	r1, r4, r0
 800e09a:	4630      	mov	r0, r6
 800e09c:	f000 fac8 	bl	800e630 <_sbrk_r>
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	d1dd      	bne.n	800e060 <_malloc_r+0x64>
 800e0a4:	e7cf      	b.n	800e046 <_malloc_r+0x4a>
 800e0a6:	bf00      	nop
 800e0a8:	20000204 	.word	0x20000204
 800e0ac:	20000208 	.word	0x20000208

0800e0b0 <__ssputs_r>:
 800e0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b4:	688e      	ldr	r6, [r1, #8]
 800e0b6:	429e      	cmp	r6, r3
 800e0b8:	4682      	mov	sl, r0
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	4690      	mov	r8, r2
 800e0be:	461f      	mov	r7, r3
 800e0c0:	d838      	bhi.n	800e134 <__ssputs_r+0x84>
 800e0c2:	898a      	ldrh	r2, [r1, #12]
 800e0c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0c8:	d032      	beq.n	800e130 <__ssputs_r+0x80>
 800e0ca:	6825      	ldr	r5, [r4, #0]
 800e0cc:	6909      	ldr	r1, [r1, #16]
 800e0ce:	eba5 0901 	sub.w	r9, r5, r1
 800e0d2:	6965      	ldr	r5, [r4, #20]
 800e0d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e0d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0dc:	3301      	adds	r3, #1
 800e0de:	444b      	add	r3, r9
 800e0e0:	106d      	asrs	r5, r5, #1
 800e0e2:	429d      	cmp	r5, r3
 800e0e4:	bf38      	it	cc
 800e0e6:	461d      	movcc	r5, r3
 800e0e8:	0553      	lsls	r3, r2, #21
 800e0ea:	d531      	bpl.n	800e150 <__ssputs_r+0xa0>
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f7ff ff85 	bl	800dffc <_malloc_r>
 800e0f2:	4606      	mov	r6, r0
 800e0f4:	b950      	cbnz	r0, 800e10c <__ssputs_r+0x5c>
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	f8ca 3000 	str.w	r3, [sl]
 800e0fc:	89a3      	ldrh	r3, [r4, #12]
 800e0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e102:	81a3      	strh	r3, [r4, #12]
 800e104:	f04f 30ff 	mov.w	r0, #4294967295
 800e108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e10c:	6921      	ldr	r1, [r4, #16]
 800e10e:	464a      	mov	r2, r9
 800e110:	f7fb ff7c 	bl	800a00c <memcpy>
 800e114:	89a3      	ldrh	r3, [r4, #12]
 800e116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e11a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e11e:	81a3      	strh	r3, [r4, #12]
 800e120:	6126      	str	r6, [r4, #16]
 800e122:	6165      	str	r5, [r4, #20]
 800e124:	444e      	add	r6, r9
 800e126:	eba5 0509 	sub.w	r5, r5, r9
 800e12a:	6026      	str	r6, [r4, #0]
 800e12c:	60a5      	str	r5, [r4, #8]
 800e12e:	463e      	mov	r6, r7
 800e130:	42be      	cmp	r6, r7
 800e132:	d900      	bls.n	800e136 <__ssputs_r+0x86>
 800e134:	463e      	mov	r6, r7
 800e136:	4632      	mov	r2, r6
 800e138:	6820      	ldr	r0, [r4, #0]
 800e13a:	4641      	mov	r1, r8
 800e13c:	f000 fb70 	bl	800e820 <memmove>
 800e140:	68a3      	ldr	r3, [r4, #8]
 800e142:	6822      	ldr	r2, [r4, #0]
 800e144:	1b9b      	subs	r3, r3, r6
 800e146:	4432      	add	r2, r6
 800e148:	60a3      	str	r3, [r4, #8]
 800e14a:	6022      	str	r2, [r4, #0]
 800e14c:	2000      	movs	r0, #0
 800e14e:	e7db      	b.n	800e108 <__ssputs_r+0x58>
 800e150:	462a      	mov	r2, r5
 800e152:	f000 fb8b 	bl	800e86c <_realloc_r>
 800e156:	4606      	mov	r6, r0
 800e158:	2800      	cmp	r0, #0
 800e15a:	d1e1      	bne.n	800e120 <__ssputs_r+0x70>
 800e15c:	6921      	ldr	r1, [r4, #16]
 800e15e:	4650      	mov	r0, sl
 800e160:	f7ff fefc 	bl	800df5c <_free_r>
 800e164:	e7c7      	b.n	800e0f6 <__ssputs_r+0x46>
	...

0800e168 <_svfiprintf_r>:
 800e168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e16c:	4698      	mov	r8, r3
 800e16e:	898b      	ldrh	r3, [r1, #12]
 800e170:	061b      	lsls	r3, r3, #24
 800e172:	b09d      	sub	sp, #116	; 0x74
 800e174:	4607      	mov	r7, r0
 800e176:	460d      	mov	r5, r1
 800e178:	4614      	mov	r4, r2
 800e17a:	d50e      	bpl.n	800e19a <_svfiprintf_r+0x32>
 800e17c:	690b      	ldr	r3, [r1, #16]
 800e17e:	b963      	cbnz	r3, 800e19a <_svfiprintf_r+0x32>
 800e180:	2140      	movs	r1, #64	; 0x40
 800e182:	f7ff ff3b 	bl	800dffc <_malloc_r>
 800e186:	6028      	str	r0, [r5, #0]
 800e188:	6128      	str	r0, [r5, #16]
 800e18a:	b920      	cbnz	r0, 800e196 <_svfiprintf_r+0x2e>
 800e18c:	230c      	movs	r3, #12
 800e18e:	603b      	str	r3, [r7, #0]
 800e190:	f04f 30ff 	mov.w	r0, #4294967295
 800e194:	e0d1      	b.n	800e33a <_svfiprintf_r+0x1d2>
 800e196:	2340      	movs	r3, #64	; 0x40
 800e198:	616b      	str	r3, [r5, #20]
 800e19a:	2300      	movs	r3, #0
 800e19c:	9309      	str	r3, [sp, #36]	; 0x24
 800e19e:	2320      	movs	r3, #32
 800e1a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1a8:	2330      	movs	r3, #48	; 0x30
 800e1aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e354 <_svfiprintf_r+0x1ec>
 800e1ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1b2:	f04f 0901 	mov.w	r9, #1
 800e1b6:	4623      	mov	r3, r4
 800e1b8:	469a      	mov	sl, r3
 800e1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1be:	b10a      	cbz	r2, 800e1c4 <_svfiprintf_r+0x5c>
 800e1c0:	2a25      	cmp	r2, #37	; 0x25
 800e1c2:	d1f9      	bne.n	800e1b8 <_svfiprintf_r+0x50>
 800e1c4:	ebba 0b04 	subs.w	fp, sl, r4
 800e1c8:	d00b      	beq.n	800e1e2 <_svfiprintf_r+0x7a>
 800e1ca:	465b      	mov	r3, fp
 800e1cc:	4622      	mov	r2, r4
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	4638      	mov	r0, r7
 800e1d2:	f7ff ff6d 	bl	800e0b0 <__ssputs_r>
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	f000 80aa 	beq.w	800e330 <_svfiprintf_r+0x1c8>
 800e1dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1de:	445a      	add	r2, fp
 800e1e0:	9209      	str	r2, [sp, #36]	; 0x24
 800e1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	f000 80a2 	beq.w	800e330 <_svfiprintf_r+0x1c8>
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1f6:	f10a 0a01 	add.w	sl, sl, #1
 800e1fa:	9304      	str	r3, [sp, #16]
 800e1fc:	9307      	str	r3, [sp, #28]
 800e1fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e202:	931a      	str	r3, [sp, #104]	; 0x68
 800e204:	4654      	mov	r4, sl
 800e206:	2205      	movs	r2, #5
 800e208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e20c:	4851      	ldr	r0, [pc, #324]	; (800e354 <_svfiprintf_r+0x1ec>)
 800e20e:	f7f1 ffe7 	bl	80001e0 <memchr>
 800e212:	9a04      	ldr	r2, [sp, #16]
 800e214:	b9d8      	cbnz	r0, 800e24e <_svfiprintf_r+0xe6>
 800e216:	06d0      	lsls	r0, r2, #27
 800e218:	bf44      	itt	mi
 800e21a:	2320      	movmi	r3, #32
 800e21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e220:	0711      	lsls	r1, r2, #28
 800e222:	bf44      	itt	mi
 800e224:	232b      	movmi	r3, #43	; 0x2b
 800e226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e22a:	f89a 3000 	ldrb.w	r3, [sl]
 800e22e:	2b2a      	cmp	r3, #42	; 0x2a
 800e230:	d015      	beq.n	800e25e <_svfiprintf_r+0xf6>
 800e232:	9a07      	ldr	r2, [sp, #28]
 800e234:	4654      	mov	r4, sl
 800e236:	2000      	movs	r0, #0
 800e238:	f04f 0c0a 	mov.w	ip, #10
 800e23c:	4621      	mov	r1, r4
 800e23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e242:	3b30      	subs	r3, #48	; 0x30
 800e244:	2b09      	cmp	r3, #9
 800e246:	d94e      	bls.n	800e2e6 <_svfiprintf_r+0x17e>
 800e248:	b1b0      	cbz	r0, 800e278 <_svfiprintf_r+0x110>
 800e24a:	9207      	str	r2, [sp, #28]
 800e24c:	e014      	b.n	800e278 <_svfiprintf_r+0x110>
 800e24e:	eba0 0308 	sub.w	r3, r0, r8
 800e252:	fa09 f303 	lsl.w	r3, r9, r3
 800e256:	4313      	orrs	r3, r2
 800e258:	9304      	str	r3, [sp, #16]
 800e25a:	46a2      	mov	sl, r4
 800e25c:	e7d2      	b.n	800e204 <_svfiprintf_r+0x9c>
 800e25e:	9b03      	ldr	r3, [sp, #12]
 800e260:	1d19      	adds	r1, r3, #4
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	9103      	str	r1, [sp, #12]
 800e266:	2b00      	cmp	r3, #0
 800e268:	bfbb      	ittet	lt
 800e26a:	425b      	neglt	r3, r3
 800e26c:	f042 0202 	orrlt.w	r2, r2, #2
 800e270:	9307      	strge	r3, [sp, #28]
 800e272:	9307      	strlt	r3, [sp, #28]
 800e274:	bfb8      	it	lt
 800e276:	9204      	strlt	r2, [sp, #16]
 800e278:	7823      	ldrb	r3, [r4, #0]
 800e27a:	2b2e      	cmp	r3, #46	; 0x2e
 800e27c:	d10c      	bne.n	800e298 <_svfiprintf_r+0x130>
 800e27e:	7863      	ldrb	r3, [r4, #1]
 800e280:	2b2a      	cmp	r3, #42	; 0x2a
 800e282:	d135      	bne.n	800e2f0 <_svfiprintf_r+0x188>
 800e284:	9b03      	ldr	r3, [sp, #12]
 800e286:	1d1a      	adds	r2, r3, #4
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	9203      	str	r2, [sp, #12]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	bfb8      	it	lt
 800e290:	f04f 33ff 	movlt.w	r3, #4294967295
 800e294:	3402      	adds	r4, #2
 800e296:	9305      	str	r3, [sp, #20]
 800e298:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e364 <_svfiprintf_r+0x1fc>
 800e29c:	7821      	ldrb	r1, [r4, #0]
 800e29e:	2203      	movs	r2, #3
 800e2a0:	4650      	mov	r0, sl
 800e2a2:	f7f1 ff9d 	bl	80001e0 <memchr>
 800e2a6:	b140      	cbz	r0, 800e2ba <_svfiprintf_r+0x152>
 800e2a8:	2340      	movs	r3, #64	; 0x40
 800e2aa:	eba0 000a 	sub.w	r0, r0, sl
 800e2ae:	fa03 f000 	lsl.w	r0, r3, r0
 800e2b2:	9b04      	ldr	r3, [sp, #16]
 800e2b4:	4303      	orrs	r3, r0
 800e2b6:	3401      	adds	r4, #1
 800e2b8:	9304      	str	r3, [sp, #16]
 800e2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2be:	4826      	ldr	r0, [pc, #152]	; (800e358 <_svfiprintf_r+0x1f0>)
 800e2c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2c4:	2206      	movs	r2, #6
 800e2c6:	f7f1 ff8b 	bl	80001e0 <memchr>
 800e2ca:	2800      	cmp	r0, #0
 800e2cc:	d038      	beq.n	800e340 <_svfiprintf_r+0x1d8>
 800e2ce:	4b23      	ldr	r3, [pc, #140]	; (800e35c <_svfiprintf_r+0x1f4>)
 800e2d0:	bb1b      	cbnz	r3, 800e31a <_svfiprintf_r+0x1b2>
 800e2d2:	9b03      	ldr	r3, [sp, #12]
 800e2d4:	3307      	adds	r3, #7
 800e2d6:	f023 0307 	bic.w	r3, r3, #7
 800e2da:	3308      	adds	r3, #8
 800e2dc:	9303      	str	r3, [sp, #12]
 800e2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2e0:	4433      	add	r3, r6
 800e2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e2e4:	e767      	b.n	800e1b6 <_svfiprintf_r+0x4e>
 800e2e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2ea:	460c      	mov	r4, r1
 800e2ec:	2001      	movs	r0, #1
 800e2ee:	e7a5      	b.n	800e23c <_svfiprintf_r+0xd4>
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	3401      	adds	r4, #1
 800e2f4:	9305      	str	r3, [sp, #20]
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	f04f 0c0a 	mov.w	ip, #10
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e302:	3a30      	subs	r2, #48	; 0x30
 800e304:	2a09      	cmp	r2, #9
 800e306:	d903      	bls.n	800e310 <_svfiprintf_r+0x1a8>
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d0c5      	beq.n	800e298 <_svfiprintf_r+0x130>
 800e30c:	9105      	str	r1, [sp, #20]
 800e30e:	e7c3      	b.n	800e298 <_svfiprintf_r+0x130>
 800e310:	fb0c 2101 	mla	r1, ip, r1, r2
 800e314:	4604      	mov	r4, r0
 800e316:	2301      	movs	r3, #1
 800e318:	e7f0      	b.n	800e2fc <_svfiprintf_r+0x194>
 800e31a:	ab03      	add	r3, sp, #12
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	462a      	mov	r2, r5
 800e320:	4b0f      	ldr	r3, [pc, #60]	; (800e360 <_svfiprintf_r+0x1f8>)
 800e322:	a904      	add	r1, sp, #16
 800e324:	4638      	mov	r0, r7
 800e326:	f7fb ff27 	bl	800a178 <_printf_float>
 800e32a:	1c42      	adds	r2, r0, #1
 800e32c:	4606      	mov	r6, r0
 800e32e:	d1d6      	bne.n	800e2de <_svfiprintf_r+0x176>
 800e330:	89ab      	ldrh	r3, [r5, #12]
 800e332:	065b      	lsls	r3, r3, #25
 800e334:	f53f af2c 	bmi.w	800e190 <_svfiprintf_r+0x28>
 800e338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e33a:	b01d      	add	sp, #116	; 0x74
 800e33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e340:	ab03      	add	r3, sp, #12
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	462a      	mov	r2, r5
 800e346:	4b06      	ldr	r3, [pc, #24]	; (800e360 <_svfiprintf_r+0x1f8>)
 800e348:	a904      	add	r1, sp, #16
 800e34a:	4638      	mov	r0, r7
 800e34c:	f7fc f9b8 	bl	800a6c0 <_printf_i>
 800e350:	e7eb      	b.n	800e32a <_svfiprintf_r+0x1c2>
 800e352:	bf00      	nop
 800e354:	0800f1e4 	.word	0x0800f1e4
 800e358:	0800f1ee 	.word	0x0800f1ee
 800e35c:	0800a179 	.word	0x0800a179
 800e360:	0800e0b1 	.word	0x0800e0b1
 800e364:	0800f1ea 	.word	0x0800f1ea

0800e368 <__sfputc_r>:
 800e368:	6893      	ldr	r3, [r2, #8]
 800e36a:	3b01      	subs	r3, #1
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	b410      	push	{r4}
 800e370:	6093      	str	r3, [r2, #8]
 800e372:	da08      	bge.n	800e386 <__sfputc_r+0x1e>
 800e374:	6994      	ldr	r4, [r2, #24]
 800e376:	42a3      	cmp	r3, r4
 800e378:	db01      	blt.n	800e37e <__sfputc_r+0x16>
 800e37a:	290a      	cmp	r1, #10
 800e37c:	d103      	bne.n	800e386 <__sfputc_r+0x1e>
 800e37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e382:	f7fd bc3b 	b.w	800bbfc <__swbuf_r>
 800e386:	6813      	ldr	r3, [r2, #0]
 800e388:	1c58      	adds	r0, r3, #1
 800e38a:	6010      	str	r0, [r2, #0]
 800e38c:	7019      	strb	r1, [r3, #0]
 800e38e:	4608      	mov	r0, r1
 800e390:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e394:	4770      	bx	lr

0800e396 <__sfputs_r>:
 800e396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e398:	4606      	mov	r6, r0
 800e39a:	460f      	mov	r7, r1
 800e39c:	4614      	mov	r4, r2
 800e39e:	18d5      	adds	r5, r2, r3
 800e3a0:	42ac      	cmp	r4, r5
 800e3a2:	d101      	bne.n	800e3a8 <__sfputs_r+0x12>
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	e007      	b.n	800e3b8 <__sfputs_r+0x22>
 800e3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3ac:	463a      	mov	r2, r7
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	f7ff ffda 	bl	800e368 <__sfputc_r>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d1f3      	bne.n	800e3a0 <__sfputs_r+0xa>
 800e3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e3bc <_vfiprintf_r>:
 800e3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c0:	460d      	mov	r5, r1
 800e3c2:	b09d      	sub	sp, #116	; 0x74
 800e3c4:	4614      	mov	r4, r2
 800e3c6:	4698      	mov	r8, r3
 800e3c8:	4606      	mov	r6, r0
 800e3ca:	b118      	cbz	r0, 800e3d4 <_vfiprintf_r+0x18>
 800e3cc:	6983      	ldr	r3, [r0, #24]
 800e3ce:	b90b      	cbnz	r3, 800e3d4 <_vfiprintf_r+0x18>
 800e3d0:	f7fe fc68 	bl	800cca4 <__sinit>
 800e3d4:	4b89      	ldr	r3, [pc, #548]	; (800e5fc <_vfiprintf_r+0x240>)
 800e3d6:	429d      	cmp	r5, r3
 800e3d8:	d11b      	bne.n	800e412 <_vfiprintf_r+0x56>
 800e3da:	6875      	ldr	r5, [r6, #4]
 800e3dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3de:	07d9      	lsls	r1, r3, #31
 800e3e0:	d405      	bmi.n	800e3ee <_vfiprintf_r+0x32>
 800e3e2:	89ab      	ldrh	r3, [r5, #12]
 800e3e4:	059a      	lsls	r2, r3, #22
 800e3e6:	d402      	bmi.n	800e3ee <_vfiprintf_r+0x32>
 800e3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3ea:	f7ff f86c 	bl	800d4c6 <__retarget_lock_acquire_recursive>
 800e3ee:	89ab      	ldrh	r3, [r5, #12]
 800e3f0:	071b      	lsls	r3, r3, #28
 800e3f2:	d501      	bpl.n	800e3f8 <_vfiprintf_r+0x3c>
 800e3f4:	692b      	ldr	r3, [r5, #16]
 800e3f6:	b9eb      	cbnz	r3, 800e434 <_vfiprintf_r+0x78>
 800e3f8:	4629      	mov	r1, r5
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f7fd fc50 	bl	800bca0 <__swsetup_r>
 800e400:	b1c0      	cbz	r0, 800e434 <_vfiprintf_r+0x78>
 800e402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e404:	07dc      	lsls	r4, r3, #31
 800e406:	d50e      	bpl.n	800e426 <_vfiprintf_r+0x6a>
 800e408:	f04f 30ff 	mov.w	r0, #4294967295
 800e40c:	b01d      	add	sp, #116	; 0x74
 800e40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e412:	4b7b      	ldr	r3, [pc, #492]	; (800e600 <_vfiprintf_r+0x244>)
 800e414:	429d      	cmp	r5, r3
 800e416:	d101      	bne.n	800e41c <_vfiprintf_r+0x60>
 800e418:	68b5      	ldr	r5, [r6, #8]
 800e41a:	e7df      	b.n	800e3dc <_vfiprintf_r+0x20>
 800e41c:	4b79      	ldr	r3, [pc, #484]	; (800e604 <_vfiprintf_r+0x248>)
 800e41e:	429d      	cmp	r5, r3
 800e420:	bf08      	it	eq
 800e422:	68f5      	ldreq	r5, [r6, #12]
 800e424:	e7da      	b.n	800e3dc <_vfiprintf_r+0x20>
 800e426:	89ab      	ldrh	r3, [r5, #12]
 800e428:	0598      	lsls	r0, r3, #22
 800e42a:	d4ed      	bmi.n	800e408 <_vfiprintf_r+0x4c>
 800e42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e42e:	f7ff f84b 	bl	800d4c8 <__retarget_lock_release_recursive>
 800e432:	e7e9      	b.n	800e408 <_vfiprintf_r+0x4c>
 800e434:	2300      	movs	r3, #0
 800e436:	9309      	str	r3, [sp, #36]	; 0x24
 800e438:	2320      	movs	r3, #32
 800e43a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e442:	2330      	movs	r3, #48	; 0x30
 800e444:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e608 <_vfiprintf_r+0x24c>
 800e448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e44c:	f04f 0901 	mov.w	r9, #1
 800e450:	4623      	mov	r3, r4
 800e452:	469a      	mov	sl, r3
 800e454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e458:	b10a      	cbz	r2, 800e45e <_vfiprintf_r+0xa2>
 800e45a:	2a25      	cmp	r2, #37	; 0x25
 800e45c:	d1f9      	bne.n	800e452 <_vfiprintf_r+0x96>
 800e45e:	ebba 0b04 	subs.w	fp, sl, r4
 800e462:	d00b      	beq.n	800e47c <_vfiprintf_r+0xc0>
 800e464:	465b      	mov	r3, fp
 800e466:	4622      	mov	r2, r4
 800e468:	4629      	mov	r1, r5
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ff93 	bl	800e396 <__sfputs_r>
 800e470:	3001      	adds	r0, #1
 800e472:	f000 80aa 	beq.w	800e5ca <_vfiprintf_r+0x20e>
 800e476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e478:	445a      	add	r2, fp
 800e47a:	9209      	str	r2, [sp, #36]	; 0x24
 800e47c:	f89a 3000 	ldrb.w	r3, [sl]
 800e480:	2b00      	cmp	r3, #0
 800e482:	f000 80a2 	beq.w	800e5ca <_vfiprintf_r+0x20e>
 800e486:	2300      	movs	r3, #0
 800e488:	f04f 32ff 	mov.w	r2, #4294967295
 800e48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e490:	f10a 0a01 	add.w	sl, sl, #1
 800e494:	9304      	str	r3, [sp, #16]
 800e496:	9307      	str	r3, [sp, #28]
 800e498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e49c:	931a      	str	r3, [sp, #104]	; 0x68
 800e49e:	4654      	mov	r4, sl
 800e4a0:	2205      	movs	r2, #5
 800e4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a6:	4858      	ldr	r0, [pc, #352]	; (800e608 <_vfiprintf_r+0x24c>)
 800e4a8:	f7f1 fe9a 	bl	80001e0 <memchr>
 800e4ac:	9a04      	ldr	r2, [sp, #16]
 800e4ae:	b9d8      	cbnz	r0, 800e4e8 <_vfiprintf_r+0x12c>
 800e4b0:	06d1      	lsls	r1, r2, #27
 800e4b2:	bf44      	itt	mi
 800e4b4:	2320      	movmi	r3, #32
 800e4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4ba:	0713      	lsls	r3, r2, #28
 800e4bc:	bf44      	itt	mi
 800e4be:	232b      	movmi	r3, #43	; 0x2b
 800e4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ca:	d015      	beq.n	800e4f8 <_vfiprintf_r+0x13c>
 800e4cc:	9a07      	ldr	r2, [sp, #28]
 800e4ce:	4654      	mov	r4, sl
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	f04f 0c0a 	mov.w	ip, #10
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4dc:	3b30      	subs	r3, #48	; 0x30
 800e4de:	2b09      	cmp	r3, #9
 800e4e0:	d94e      	bls.n	800e580 <_vfiprintf_r+0x1c4>
 800e4e2:	b1b0      	cbz	r0, 800e512 <_vfiprintf_r+0x156>
 800e4e4:	9207      	str	r2, [sp, #28]
 800e4e6:	e014      	b.n	800e512 <_vfiprintf_r+0x156>
 800e4e8:	eba0 0308 	sub.w	r3, r0, r8
 800e4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	9304      	str	r3, [sp, #16]
 800e4f4:	46a2      	mov	sl, r4
 800e4f6:	e7d2      	b.n	800e49e <_vfiprintf_r+0xe2>
 800e4f8:	9b03      	ldr	r3, [sp, #12]
 800e4fa:	1d19      	adds	r1, r3, #4
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	9103      	str	r1, [sp, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	bfbb      	ittet	lt
 800e504:	425b      	neglt	r3, r3
 800e506:	f042 0202 	orrlt.w	r2, r2, #2
 800e50a:	9307      	strge	r3, [sp, #28]
 800e50c:	9307      	strlt	r3, [sp, #28]
 800e50e:	bfb8      	it	lt
 800e510:	9204      	strlt	r2, [sp, #16]
 800e512:	7823      	ldrb	r3, [r4, #0]
 800e514:	2b2e      	cmp	r3, #46	; 0x2e
 800e516:	d10c      	bne.n	800e532 <_vfiprintf_r+0x176>
 800e518:	7863      	ldrb	r3, [r4, #1]
 800e51a:	2b2a      	cmp	r3, #42	; 0x2a
 800e51c:	d135      	bne.n	800e58a <_vfiprintf_r+0x1ce>
 800e51e:	9b03      	ldr	r3, [sp, #12]
 800e520:	1d1a      	adds	r2, r3, #4
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	9203      	str	r2, [sp, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	bfb8      	it	lt
 800e52a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e52e:	3402      	adds	r4, #2
 800e530:	9305      	str	r3, [sp, #20]
 800e532:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e618 <_vfiprintf_r+0x25c>
 800e536:	7821      	ldrb	r1, [r4, #0]
 800e538:	2203      	movs	r2, #3
 800e53a:	4650      	mov	r0, sl
 800e53c:	f7f1 fe50 	bl	80001e0 <memchr>
 800e540:	b140      	cbz	r0, 800e554 <_vfiprintf_r+0x198>
 800e542:	2340      	movs	r3, #64	; 0x40
 800e544:	eba0 000a 	sub.w	r0, r0, sl
 800e548:	fa03 f000 	lsl.w	r0, r3, r0
 800e54c:	9b04      	ldr	r3, [sp, #16]
 800e54e:	4303      	orrs	r3, r0
 800e550:	3401      	adds	r4, #1
 800e552:	9304      	str	r3, [sp, #16]
 800e554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e558:	482c      	ldr	r0, [pc, #176]	; (800e60c <_vfiprintf_r+0x250>)
 800e55a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e55e:	2206      	movs	r2, #6
 800e560:	f7f1 fe3e 	bl	80001e0 <memchr>
 800e564:	2800      	cmp	r0, #0
 800e566:	d03f      	beq.n	800e5e8 <_vfiprintf_r+0x22c>
 800e568:	4b29      	ldr	r3, [pc, #164]	; (800e610 <_vfiprintf_r+0x254>)
 800e56a:	bb1b      	cbnz	r3, 800e5b4 <_vfiprintf_r+0x1f8>
 800e56c:	9b03      	ldr	r3, [sp, #12]
 800e56e:	3307      	adds	r3, #7
 800e570:	f023 0307 	bic.w	r3, r3, #7
 800e574:	3308      	adds	r3, #8
 800e576:	9303      	str	r3, [sp, #12]
 800e578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e57a:	443b      	add	r3, r7
 800e57c:	9309      	str	r3, [sp, #36]	; 0x24
 800e57e:	e767      	b.n	800e450 <_vfiprintf_r+0x94>
 800e580:	fb0c 3202 	mla	r2, ip, r2, r3
 800e584:	460c      	mov	r4, r1
 800e586:	2001      	movs	r0, #1
 800e588:	e7a5      	b.n	800e4d6 <_vfiprintf_r+0x11a>
 800e58a:	2300      	movs	r3, #0
 800e58c:	3401      	adds	r4, #1
 800e58e:	9305      	str	r3, [sp, #20]
 800e590:	4619      	mov	r1, r3
 800e592:	f04f 0c0a 	mov.w	ip, #10
 800e596:	4620      	mov	r0, r4
 800e598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e59c:	3a30      	subs	r2, #48	; 0x30
 800e59e:	2a09      	cmp	r2, #9
 800e5a0:	d903      	bls.n	800e5aa <_vfiprintf_r+0x1ee>
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0c5      	beq.n	800e532 <_vfiprintf_r+0x176>
 800e5a6:	9105      	str	r1, [sp, #20]
 800e5a8:	e7c3      	b.n	800e532 <_vfiprintf_r+0x176>
 800e5aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	e7f0      	b.n	800e596 <_vfiprintf_r+0x1da>
 800e5b4:	ab03      	add	r3, sp, #12
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	462a      	mov	r2, r5
 800e5ba:	4b16      	ldr	r3, [pc, #88]	; (800e614 <_vfiprintf_r+0x258>)
 800e5bc:	a904      	add	r1, sp, #16
 800e5be:	4630      	mov	r0, r6
 800e5c0:	f7fb fdda 	bl	800a178 <_printf_float>
 800e5c4:	4607      	mov	r7, r0
 800e5c6:	1c78      	adds	r0, r7, #1
 800e5c8:	d1d6      	bne.n	800e578 <_vfiprintf_r+0x1bc>
 800e5ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5cc:	07d9      	lsls	r1, r3, #31
 800e5ce:	d405      	bmi.n	800e5dc <_vfiprintf_r+0x220>
 800e5d0:	89ab      	ldrh	r3, [r5, #12]
 800e5d2:	059a      	lsls	r2, r3, #22
 800e5d4:	d402      	bmi.n	800e5dc <_vfiprintf_r+0x220>
 800e5d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5d8:	f7fe ff76 	bl	800d4c8 <__retarget_lock_release_recursive>
 800e5dc:	89ab      	ldrh	r3, [r5, #12]
 800e5de:	065b      	lsls	r3, r3, #25
 800e5e0:	f53f af12 	bmi.w	800e408 <_vfiprintf_r+0x4c>
 800e5e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5e6:	e711      	b.n	800e40c <_vfiprintf_r+0x50>
 800e5e8:	ab03      	add	r3, sp, #12
 800e5ea:	9300      	str	r3, [sp, #0]
 800e5ec:	462a      	mov	r2, r5
 800e5ee:	4b09      	ldr	r3, [pc, #36]	; (800e614 <_vfiprintf_r+0x258>)
 800e5f0:	a904      	add	r1, sp, #16
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f7fc f864 	bl	800a6c0 <_printf_i>
 800e5f8:	e7e4      	b.n	800e5c4 <_vfiprintf_r+0x208>
 800e5fa:	bf00      	nop
 800e5fc:	0800efc8 	.word	0x0800efc8
 800e600:	0800efe8 	.word	0x0800efe8
 800e604:	0800efa8 	.word	0x0800efa8
 800e608:	0800f1e4 	.word	0x0800f1e4
 800e60c:	0800f1ee 	.word	0x0800f1ee
 800e610:	0800a179 	.word	0x0800a179
 800e614:	0800e397 	.word	0x0800e397
 800e618:	0800f1ea 	.word	0x0800f1ea
 800e61c:	00000000 	.word	0x00000000

0800e620 <nan>:
 800e620:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e628 <nan+0x8>
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	00000000 	.word	0x00000000
 800e62c:	7ff80000 	.word	0x7ff80000

0800e630 <_sbrk_r>:
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	4d06      	ldr	r5, [pc, #24]	; (800e64c <_sbrk_r+0x1c>)
 800e634:	2300      	movs	r3, #0
 800e636:	4604      	mov	r4, r0
 800e638:	4608      	mov	r0, r1
 800e63a:	602b      	str	r3, [r5, #0]
 800e63c:	f7f5 ffd8 	bl	80045f0 <_sbrk>
 800e640:	1c43      	adds	r3, r0, #1
 800e642:	d102      	bne.n	800e64a <_sbrk_r+0x1a>
 800e644:	682b      	ldr	r3, [r5, #0]
 800e646:	b103      	cbz	r3, 800e64a <_sbrk_r+0x1a>
 800e648:	6023      	str	r3, [r4, #0]
 800e64a:	bd38      	pop	{r3, r4, r5, pc}
 800e64c:	200095d4 	.word	0x200095d4

0800e650 <__sread>:
 800e650:	b510      	push	{r4, lr}
 800e652:	460c      	mov	r4, r1
 800e654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e658:	f000 f92e 	bl	800e8b8 <_read_r>
 800e65c:	2800      	cmp	r0, #0
 800e65e:	bfab      	itete	ge
 800e660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e662:	89a3      	ldrhlt	r3, [r4, #12]
 800e664:	181b      	addge	r3, r3, r0
 800e666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e66a:	bfac      	ite	ge
 800e66c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e66e:	81a3      	strhlt	r3, [r4, #12]
 800e670:	bd10      	pop	{r4, pc}

0800e672 <__swrite>:
 800e672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e676:	461f      	mov	r7, r3
 800e678:	898b      	ldrh	r3, [r1, #12]
 800e67a:	05db      	lsls	r3, r3, #23
 800e67c:	4605      	mov	r5, r0
 800e67e:	460c      	mov	r4, r1
 800e680:	4616      	mov	r6, r2
 800e682:	d505      	bpl.n	800e690 <__swrite+0x1e>
 800e684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e688:	2302      	movs	r3, #2
 800e68a:	2200      	movs	r2, #0
 800e68c:	f000 f8b6 	bl	800e7fc <_lseek_r>
 800e690:	89a3      	ldrh	r3, [r4, #12]
 800e692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e69a:	81a3      	strh	r3, [r4, #12]
 800e69c:	4632      	mov	r2, r6
 800e69e:	463b      	mov	r3, r7
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a6:	f000 b835 	b.w	800e714 <_write_r>

0800e6aa <__sseek>:
 800e6aa:	b510      	push	{r4, lr}
 800e6ac:	460c      	mov	r4, r1
 800e6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b2:	f000 f8a3 	bl	800e7fc <_lseek_r>
 800e6b6:	1c43      	adds	r3, r0, #1
 800e6b8:	89a3      	ldrh	r3, [r4, #12]
 800e6ba:	bf15      	itete	ne
 800e6bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e6be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e6c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e6c6:	81a3      	strheq	r3, [r4, #12]
 800e6c8:	bf18      	it	ne
 800e6ca:	81a3      	strhne	r3, [r4, #12]
 800e6cc:	bd10      	pop	{r4, pc}

0800e6ce <__sclose>:
 800e6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6d2:	f000 b84f 	b.w	800e774 <_close_r>

0800e6d6 <strncmp>:
 800e6d6:	b510      	push	{r4, lr}
 800e6d8:	b16a      	cbz	r2, 800e6f6 <strncmp+0x20>
 800e6da:	3901      	subs	r1, #1
 800e6dc:	1884      	adds	r4, r0, r2
 800e6de:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e6e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d103      	bne.n	800e6f2 <strncmp+0x1c>
 800e6ea:	42a0      	cmp	r0, r4
 800e6ec:	d001      	beq.n	800e6f2 <strncmp+0x1c>
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d1f5      	bne.n	800e6de <strncmp+0x8>
 800e6f2:	1a98      	subs	r0, r3, r2
 800e6f4:	bd10      	pop	{r4, pc}
 800e6f6:	4610      	mov	r0, r2
 800e6f8:	e7fc      	b.n	800e6f4 <strncmp+0x1e>

0800e6fa <__ascii_wctomb>:
 800e6fa:	b149      	cbz	r1, 800e710 <__ascii_wctomb+0x16>
 800e6fc:	2aff      	cmp	r2, #255	; 0xff
 800e6fe:	bf85      	ittet	hi
 800e700:	238a      	movhi	r3, #138	; 0x8a
 800e702:	6003      	strhi	r3, [r0, #0]
 800e704:	700a      	strbls	r2, [r1, #0]
 800e706:	f04f 30ff 	movhi.w	r0, #4294967295
 800e70a:	bf98      	it	ls
 800e70c:	2001      	movls	r0, #1
 800e70e:	4770      	bx	lr
 800e710:	4608      	mov	r0, r1
 800e712:	4770      	bx	lr

0800e714 <_write_r>:
 800e714:	b538      	push	{r3, r4, r5, lr}
 800e716:	4d07      	ldr	r5, [pc, #28]	; (800e734 <_write_r+0x20>)
 800e718:	4604      	mov	r4, r0
 800e71a:	4608      	mov	r0, r1
 800e71c:	4611      	mov	r1, r2
 800e71e:	2200      	movs	r2, #0
 800e720:	602a      	str	r2, [r5, #0]
 800e722:	461a      	mov	r2, r3
 800e724:	f7f5 ff13 	bl	800454e <_write>
 800e728:	1c43      	adds	r3, r0, #1
 800e72a:	d102      	bne.n	800e732 <_write_r+0x1e>
 800e72c:	682b      	ldr	r3, [r5, #0]
 800e72e:	b103      	cbz	r3, 800e732 <_write_r+0x1e>
 800e730:	6023      	str	r3, [r4, #0]
 800e732:	bd38      	pop	{r3, r4, r5, pc}
 800e734:	200095d4 	.word	0x200095d4

0800e738 <__assert_func>:
 800e738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e73a:	4614      	mov	r4, r2
 800e73c:	461a      	mov	r2, r3
 800e73e:	4b09      	ldr	r3, [pc, #36]	; (800e764 <__assert_func+0x2c>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4605      	mov	r5, r0
 800e744:	68d8      	ldr	r0, [r3, #12]
 800e746:	b14c      	cbz	r4, 800e75c <__assert_func+0x24>
 800e748:	4b07      	ldr	r3, [pc, #28]	; (800e768 <__assert_func+0x30>)
 800e74a:	9100      	str	r1, [sp, #0]
 800e74c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e750:	4906      	ldr	r1, [pc, #24]	; (800e76c <__assert_func+0x34>)
 800e752:	462b      	mov	r3, r5
 800e754:	f000 f81e 	bl	800e794 <fiprintf>
 800e758:	f000 f8c0 	bl	800e8dc <abort>
 800e75c:	4b04      	ldr	r3, [pc, #16]	; (800e770 <__assert_func+0x38>)
 800e75e:	461c      	mov	r4, r3
 800e760:	e7f3      	b.n	800e74a <__assert_func+0x12>
 800e762:	bf00      	nop
 800e764:	2000000c 	.word	0x2000000c
 800e768:	0800f1f5 	.word	0x0800f1f5
 800e76c:	0800f202 	.word	0x0800f202
 800e770:	0800f230 	.word	0x0800f230

0800e774 <_close_r>:
 800e774:	b538      	push	{r3, r4, r5, lr}
 800e776:	4d06      	ldr	r5, [pc, #24]	; (800e790 <_close_r+0x1c>)
 800e778:	2300      	movs	r3, #0
 800e77a:	4604      	mov	r4, r0
 800e77c:	4608      	mov	r0, r1
 800e77e:	602b      	str	r3, [r5, #0]
 800e780:	f7f5 ff01 	bl	8004586 <_close>
 800e784:	1c43      	adds	r3, r0, #1
 800e786:	d102      	bne.n	800e78e <_close_r+0x1a>
 800e788:	682b      	ldr	r3, [r5, #0]
 800e78a:	b103      	cbz	r3, 800e78e <_close_r+0x1a>
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	bd38      	pop	{r3, r4, r5, pc}
 800e790:	200095d4 	.word	0x200095d4

0800e794 <fiprintf>:
 800e794:	b40e      	push	{r1, r2, r3}
 800e796:	b503      	push	{r0, r1, lr}
 800e798:	4601      	mov	r1, r0
 800e79a:	ab03      	add	r3, sp, #12
 800e79c:	4805      	ldr	r0, [pc, #20]	; (800e7b4 <fiprintf+0x20>)
 800e79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7a2:	6800      	ldr	r0, [r0, #0]
 800e7a4:	9301      	str	r3, [sp, #4]
 800e7a6:	f7ff fe09 	bl	800e3bc <_vfiprintf_r>
 800e7aa:	b002      	add	sp, #8
 800e7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7b0:	b003      	add	sp, #12
 800e7b2:	4770      	bx	lr
 800e7b4:	2000000c 	.word	0x2000000c

0800e7b8 <_fstat_r>:
 800e7b8:	b538      	push	{r3, r4, r5, lr}
 800e7ba:	4d07      	ldr	r5, [pc, #28]	; (800e7d8 <_fstat_r+0x20>)
 800e7bc:	2300      	movs	r3, #0
 800e7be:	4604      	mov	r4, r0
 800e7c0:	4608      	mov	r0, r1
 800e7c2:	4611      	mov	r1, r2
 800e7c4:	602b      	str	r3, [r5, #0]
 800e7c6:	f7f5 feea 	bl	800459e <_fstat>
 800e7ca:	1c43      	adds	r3, r0, #1
 800e7cc:	d102      	bne.n	800e7d4 <_fstat_r+0x1c>
 800e7ce:	682b      	ldr	r3, [r5, #0]
 800e7d0:	b103      	cbz	r3, 800e7d4 <_fstat_r+0x1c>
 800e7d2:	6023      	str	r3, [r4, #0]
 800e7d4:	bd38      	pop	{r3, r4, r5, pc}
 800e7d6:	bf00      	nop
 800e7d8:	200095d4 	.word	0x200095d4

0800e7dc <_isatty_r>:
 800e7dc:	b538      	push	{r3, r4, r5, lr}
 800e7de:	4d06      	ldr	r5, [pc, #24]	; (800e7f8 <_isatty_r+0x1c>)
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	4608      	mov	r0, r1
 800e7e6:	602b      	str	r3, [r5, #0]
 800e7e8:	f7f5 fee9 	bl	80045be <_isatty>
 800e7ec:	1c43      	adds	r3, r0, #1
 800e7ee:	d102      	bne.n	800e7f6 <_isatty_r+0x1a>
 800e7f0:	682b      	ldr	r3, [r5, #0]
 800e7f2:	b103      	cbz	r3, 800e7f6 <_isatty_r+0x1a>
 800e7f4:	6023      	str	r3, [r4, #0]
 800e7f6:	bd38      	pop	{r3, r4, r5, pc}
 800e7f8:	200095d4 	.word	0x200095d4

0800e7fc <_lseek_r>:
 800e7fc:	b538      	push	{r3, r4, r5, lr}
 800e7fe:	4d07      	ldr	r5, [pc, #28]	; (800e81c <_lseek_r+0x20>)
 800e800:	4604      	mov	r4, r0
 800e802:	4608      	mov	r0, r1
 800e804:	4611      	mov	r1, r2
 800e806:	2200      	movs	r2, #0
 800e808:	602a      	str	r2, [r5, #0]
 800e80a:	461a      	mov	r2, r3
 800e80c:	f7f5 fee2 	bl	80045d4 <_lseek>
 800e810:	1c43      	adds	r3, r0, #1
 800e812:	d102      	bne.n	800e81a <_lseek_r+0x1e>
 800e814:	682b      	ldr	r3, [r5, #0]
 800e816:	b103      	cbz	r3, 800e81a <_lseek_r+0x1e>
 800e818:	6023      	str	r3, [r4, #0]
 800e81a:	bd38      	pop	{r3, r4, r5, pc}
 800e81c:	200095d4 	.word	0x200095d4

0800e820 <memmove>:
 800e820:	4288      	cmp	r0, r1
 800e822:	b510      	push	{r4, lr}
 800e824:	eb01 0402 	add.w	r4, r1, r2
 800e828:	d902      	bls.n	800e830 <memmove+0x10>
 800e82a:	4284      	cmp	r4, r0
 800e82c:	4623      	mov	r3, r4
 800e82e:	d807      	bhi.n	800e840 <memmove+0x20>
 800e830:	1e43      	subs	r3, r0, #1
 800e832:	42a1      	cmp	r1, r4
 800e834:	d008      	beq.n	800e848 <memmove+0x28>
 800e836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e83e:	e7f8      	b.n	800e832 <memmove+0x12>
 800e840:	4402      	add	r2, r0
 800e842:	4601      	mov	r1, r0
 800e844:	428a      	cmp	r2, r1
 800e846:	d100      	bne.n	800e84a <memmove+0x2a>
 800e848:	bd10      	pop	{r4, pc}
 800e84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e852:	e7f7      	b.n	800e844 <memmove+0x24>

0800e854 <__malloc_lock>:
 800e854:	4801      	ldr	r0, [pc, #4]	; (800e85c <__malloc_lock+0x8>)
 800e856:	f7fe be36 	b.w	800d4c6 <__retarget_lock_acquire_recursive>
 800e85a:	bf00      	nop
 800e85c:	200095cc 	.word	0x200095cc

0800e860 <__malloc_unlock>:
 800e860:	4801      	ldr	r0, [pc, #4]	; (800e868 <__malloc_unlock+0x8>)
 800e862:	f7fe be31 	b.w	800d4c8 <__retarget_lock_release_recursive>
 800e866:	bf00      	nop
 800e868:	200095cc 	.word	0x200095cc

0800e86c <_realloc_r>:
 800e86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e86e:	4607      	mov	r7, r0
 800e870:	4614      	mov	r4, r2
 800e872:	460e      	mov	r6, r1
 800e874:	b921      	cbnz	r1, 800e880 <_realloc_r+0x14>
 800e876:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e87a:	4611      	mov	r1, r2
 800e87c:	f7ff bbbe 	b.w	800dffc <_malloc_r>
 800e880:	b922      	cbnz	r2, 800e88c <_realloc_r+0x20>
 800e882:	f7ff fb6b 	bl	800df5c <_free_r>
 800e886:	4625      	mov	r5, r4
 800e888:	4628      	mov	r0, r5
 800e88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e88c:	f000 f82d 	bl	800e8ea <_malloc_usable_size_r>
 800e890:	42a0      	cmp	r0, r4
 800e892:	d20f      	bcs.n	800e8b4 <_realloc_r+0x48>
 800e894:	4621      	mov	r1, r4
 800e896:	4638      	mov	r0, r7
 800e898:	f7ff fbb0 	bl	800dffc <_malloc_r>
 800e89c:	4605      	mov	r5, r0
 800e89e:	2800      	cmp	r0, #0
 800e8a0:	d0f2      	beq.n	800e888 <_realloc_r+0x1c>
 800e8a2:	4631      	mov	r1, r6
 800e8a4:	4622      	mov	r2, r4
 800e8a6:	f7fb fbb1 	bl	800a00c <memcpy>
 800e8aa:	4631      	mov	r1, r6
 800e8ac:	4638      	mov	r0, r7
 800e8ae:	f7ff fb55 	bl	800df5c <_free_r>
 800e8b2:	e7e9      	b.n	800e888 <_realloc_r+0x1c>
 800e8b4:	4635      	mov	r5, r6
 800e8b6:	e7e7      	b.n	800e888 <_realloc_r+0x1c>

0800e8b8 <_read_r>:
 800e8b8:	b538      	push	{r3, r4, r5, lr}
 800e8ba:	4d07      	ldr	r5, [pc, #28]	; (800e8d8 <_read_r+0x20>)
 800e8bc:	4604      	mov	r4, r0
 800e8be:	4608      	mov	r0, r1
 800e8c0:	4611      	mov	r1, r2
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	602a      	str	r2, [r5, #0]
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	f7f5 fe24 	bl	8004514 <_read>
 800e8cc:	1c43      	adds	r3, r0, #1
 800e8ce:	d102      	bne.n	800e8d6 <_read_r+0x1e>
 800e8d0:	682b      	ldr	r3, [r5, #0]
 800e8d2:	b103      	cbz	r3, 800e8d6 <_read_r+0x1e>
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	bd38      	pop	{r3, r4, r5, pc}
 800e8d8:	200095d4 	.word	0x200095d4

0800e8dc <abort>:
 800e8dc:	b508      	push	{r3, lr}
 800e8de:	2006      	movs	r0, #6
 800e8e0:	f000 f834 	bl	800e94c <raise>
 800e8e4:	2001      	movs	r0, #1
 800e8e6:	f7f5 fe0b 	bl	8004500 <_exit>

0800e8ea <_malloc_usable_size_r>:
 800e8ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ee:	1f18      	subs	r0, r3, #4
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	bfbc      	itt	lt
 800e8f4:	580b      	ldrlt	r3, [r1, r0]
 800e8f6:	18c0      	addlt	r0, r0, r3
 800e8f8:	4770      	bx	lr

0800e8fa <_raise_r>:
 800e8fa:	291f      	cmp	r1, #31
 800e8fc:	b538      	push	{r3, r4, r5, lr}
 800e8fe:	4604      	mov	r4, r0
 800e900:	460d      	mov	r5, r1
 800e902:	d904      	bls.n	800e90e <_raise_r+0x14>
 800e904:	2316      	movs	r3, #22
 800e906:	6003      	str	r3, [r0, #0]
 800e908:	f04f 30ff 	mov.w	r0, #4294967295
 800e90c:	bd38      	pop	{r3, r4, r5, pc}
 800e90e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e910:	b112      	cbz	r2, 800e918 <_raise_r+0x1e>
 800e912:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e916:	b94b      	cbnz	r3, 800e92c <_raise_r+0x32>
 800e918:	4620      	mov	r0, r4
 800e91a:	f000 f831 	bl	800e980 <_getpid_r>
 800e91e:	462a      	mov	r2, r5
 800e920:	4601      	mov	r1, r0
 800e922:	4620      	mov	r0, r4
 800e924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e928:	f000 b818 	b.w	800e95c <_kill_r>
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d00a      	beq.n	800e946 <_raise_r+0x4c>
 800e930:	1c59      	adds	r1, r3, #1
 800e932:	d103      	bne.n	800e93c <_raise_r+0x42>
 800e934:	2316      	movs	r3, #22
 800e936:	6003      	str	r3, [r0, #0]
 800e938:	2001      	movs	r0, #1
 800e93a:	e7e7      	b.n	800e90c <_raise_r+0x12>
 800e93c:	2400      	movs	r4, #0
 800e93e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e942:	4628      	mov	r0, r5
 800e944:	4798      	blx	r3
 800e946:	2000      	movs	r0, #0
 800e948:	e7e0      	b.n	800e90c <_raise_r+0x12>
	...

0800e94c <raise>:
 800e94c:	4b02      	ldr	r3, [pc, #8]	; (800e958 <raise+0xc>)
 800e94e:	4601      	mov	r1, r0
 800e950:	6818      	ldr	r0, [r3, #0]
 800e952:	f7ff bfd2 	b.w	800e8fa <_raise_r>
 800e956:	bf00      	nop
 800e958:	2000000c 	.word	0x2000000c

0800e95c <_kill_r>:
 800e95c:	b538      	push	{r3, r4, r5, lr}
 800e95e:	4d07      	ldr	r5, [pc, #28]	; (800e97c <_kill_r+0x20>)
 800e960:	2300      	movs	r3, #0
 800e962:	4604      	mov	r4, r0
 800e964:	4608      	mov	r0, r1
 800e966:	4611      	mov	r1, r2
 800e968:	602b      	str	r3, [r5, #0]
 800e96a:	f7f5 fdb9 	bl	80044e0 <_kill>
 800e96e:	1c43      	adds	r3, r0, #1
 800e970:	d102      	bne.n	800e978 <_kill_r+0x1c>
 800e972:	682b      	ldr	r3, [r5, #0]
 800e974:	b103      	cbz	r3, 800e978 <_kill_r+0x1c>
 800e976:	6023      	str	r3, [r4, #0]
 800e978:	bd38      	pop	{r3, r4, r5, pc}
 800e97a:	bf00      	nop
 800e97c:	200095d4 	.word	0x200095d4

0800e980 <_getpid_r>:
 800e980:	f7f5 bda6 	b.w	80044d0 <_getpid>

0800e984 <_init>:
 800e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e986:	bf00      	nop
 800e988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e98a:	bc08      	pop	{r3}
 800e98c:	469e      	mov	lr, r3
 800e98e:	4770      	bx	lr

0800e990 <_fini>:
 800e990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e992:	bf00      	nop
 800e994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e996:	bc08      	pop	{r3}
 800e998:	469e      	mov	lr, r3
 800e99a:	4770      	bx	lr
