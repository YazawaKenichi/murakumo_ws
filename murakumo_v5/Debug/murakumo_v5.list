
murakumo_v5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e024  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  0800e1b8  0800e1b8  0001e1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecdc  0800ecdc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ecdc  0800ecdc  0001ecdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ece4  0800ece4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ece4  0800ece4  0001ece4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ece8  0800ece8  0001ece8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ecec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000794  200001e0  0800eecc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  0800eecc  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036b0f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005517  00000000  00000000  00056d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0005c238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001868  00000000  00000000  0005dc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002807d  00000000  00000000  0005f4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000233a9  00000000  00000000  0008756d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5108  00000000  00000000  000aa916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017fa1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c0  00000000  00000000  0017fa74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e19c 	.word	0x0800e19c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800e19c 	.word	0x0800e19c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <imu_read_byte>:
volatile Inertial inertial_offset;

Coordinate COORDINATE_ZERO;

uint8_t imu_read_byte( uint8_t reg )
{ 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
#if USE_NCS
	CS_RESET;
 8001000:	2200      	movs	r2, #0
 8001002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <imu_read_byte+0x54>)
 8001008:	f005 fc1c 	bl	8006844 <HAL_GPIO_WritePin>
#endif
	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	; (8001044 <imu_read_byte+0x58>)
 8001016:	f006 fa6e 	bl	80074f6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &val, 1, 100);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	4808      	ldr	r0, [pc, #32]	; (8001044 <imu_read_byte+0x58>)
 8001024:	f006 fba3 	bl	800776e <HAL_SPI_Receive>
#if USE_NCS
	CS_SET;
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <imu_read_byte+0x54>)
 8001030:	f005 fc08 	bl	8006844 <HAL_GPIO_WritePin>
#endif

	return val;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020400 	.word	0x40020400
 8001044:	20000408 	.word	0x20000408

08001048 <imu_write_byte>:

void imu_write_byte(uint8_t reg, uint8_t val)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	4613      	mov	r3, r2
 8001056:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800105e:	b2db      	uxtb	r3, r3
 8001060:	73fb      	strb	r3, [r7, #15]

#if USE_NCS
	CS_RESET;
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <imu_write_byte+0x54>)
 800106a:	f005 fbeb 	bl	8006844 <HAL_GPIO_WritePin>
#endif

	HAL_SPI_Transmit(&hspi2, &ret, 1, 100);
 800106e:	f107 010f 	add.w	r1, r7, #15
 8001072:	2364      	movs	r3, #100	; 0x64
 8001074:	2201      	movs	r2, #1
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <imu_write_byte+0x58>)
 8001078:	f006 fa3d 	bl	80074f6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &val, 1, 100);
 800107c:	1db9      	adds	r1, r7, #6
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	2201      	movs	r2, #1
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <imu_write_byte+0x58>)
 8001084:	f006 fa37 	bl	80074f6 <HAL_SPI_Transmit>

#if USE_NCS
	CS_SET;
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <imu_write_byte+0x54>)
 8001090:	f005 fbd8 	bl	8006844 <HAL_GPIO_WritePin>
#endif
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020400 	.word	0x40020400
 80010a0:	20000408 	.word	0x20000408

080010a4 <imu_init>:

void imu_init()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	printf("Starting SPI2 (IMU)\r\n");
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <imu_init+0x40>)
 80010ac:	f009 fad2 	bl	800a654 <puts>
	uint8_t wai, ret;
	ret = imu_initialize(&wai);
 80010b0:	1dbb      	adds	r3, r7, #6
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f820 	bl	80010f8 <imu_initialize>
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
	printf("who_am_i = %d\r\n", wai);
 80010bc:	79bb      	ldrb	r3, [r7, #6]
 80010be:	4619      	mov	r1, r3
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <imu_init+0x44>)
 80010c2:	f009 fa41 	bl	800a548 <iprintf>
	if(ret == 1)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d103      	bne.n	80010d4 <imu_init+0x30>
	{
		printf("SPI INIT COLLECT!\r\n");
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <imu_init+0x48>)
 80010ce:	f009 fac1 	bl	800a654 <puts>
	}
	else
	{
		printf("SPI INIT FAILURE x_x \r\n");
	}
}
 80010d2:	e002      	b.n	80010da <imu_init+0x36>
		printf("SPI INIT FAILURE x_x \r\n");
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <imu_init+0x4c>)
 80010d6:	f009 fabd 	bl	800a654 <puts>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	0800e1b8 	.word	0x0800e1b8
 80010e8:	0800e1d0 	.word	0x0800e1d0
 80010ec:	0800e1e0 	.word	0x0800e1e0
 80010f0:	0800e1f4 	.word	0x0800e1f4
 80010f4:	00000000 	.word	0x00000000

080010f8 <imu_initialize>:

uint8_t imu_initialize(uint8_t* wai)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	CS_RESET;
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001106:	4834      	ldr	r0, [pc, #208]	; (80011d8 <imu_initialize+0xe0>)
 8001108:	f005 fb9c 	bl	8006844 <HAL_GPIO_WritePin>
	uint8_t who_am_i,ret;
	ret = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

	COORDINATE_ZERO.x = 0;
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <imu_initialize+0xe4>)
 8001112:	2200      	movs	r2, #0
 8001114:	801a      	strh	r2, [r3, #0]
	COORDINATE_ZERO.y = 0;
 8001116:	4b31      	ldr	r3, [pc, #196]	; (80011dc <imu_initialize+0xe4>)
 8001118:	2200      	movs	r2, #0
 800111a:	805a      	strh	r2, [r3, #2]
	COORDINATE_ZERO.z = 0;
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <imu_initialize+0xe4>)
 800111e:	2200      	movs	r2, #0
 8001120:	809a      	strh	r2, [r3, #4]

	RADPERDEG = ((double) M_PI / (double) 180);
 8001122:	492f      	ldr	r1, [pc, #188]	; (80011e0 <imu_initialize+0xe8>)
 8001124:	a32a      	add	r3, pc, #168	; (adr r3, 80011d0 <imu_initialize+0xd8>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	e9c1 2300 	strd	r2, r3, [r1]

#if	INIT_ZERO
	inertial.accel = COORDINATE_ZERO;
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <imu_initialize+0xec>)
 8001130:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <imu_initialize+0xe4>)
 8001132:	6811      	ldr	r1, [r2, #0]
 8001134:	6019      	str	r1, [r3, #0]
 8001136:	8892      	ldrh	r2, [r2, #4]
 8001138:	809a      	strh	r2, [r3, #4]
	inertial.gyro = COORDINATE_ZERO;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <imu_initialize+0xec>)
 800113c:	4a27      	ldr	r2, [pc, #156]	; (80011dc <imu_initialize+0xe4>)
 800113e:	3306      	adds	r3, #6
 8001140:	6811      	ldr	r1, [r2, #0]
 8001142:	6019      	str	r1, [r3, #0]
 8001144:	8892      	ldrh	r2, [r2, #4]
 8001146:	809a      	strh	r2, [r3, #4]
	displacement.position = COORDINATE_ZERO;
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <imu_initialize+0xf0>)
 800114a:	4a24      	ldr	r2, [pc, #144]	; (80011dc <imu_initialize+0xe4>)
 800114c:	6811      	ldr	r1, [r2, #0]
 800114e:	6019      	str	r1, [r3, #0]
 8001150:	8892      	ldrh	r2, [r2, #4]
 8001152:	809a      	strh	r2, [r3, #4]
	displacement.theta = COORDINATE_ZERO;
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <imu_initialize+0xf0>)
 8001156:	4a21      	ldr	r2, [pc, #132]	; (80011dc <imu_initialize+0xe4>)
 8001158:	3306      	adds	r3, #6
 800115a:	6811      	ldr	r1, [r2, #0]
 800115c:	6019      	str	r1, [r3, #0]
 800115e:	8892      	ldrh	r2, [r2, #4]
 8001160:	809a      	strh	r2, [r3, #4]
#endif

	who_am_i = imu_read_byte(0x00);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff ff42 	bl	8000fec <imu_read_byte>
 8001168:	4603      	mov	r3, r0
 800116a:	73bb      	strb	r3, [r7, #14]
	*wai = who_am_i;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7bba      	ldrb	r2, [r7, #14]
 8001170:	701a      	strb	r2, [r3, #0]
	if(who_am_i == 0xE0)
 8001172:	7bbb      	ldrb	r3, [r7, #14]
 8001174:	2be0      	cmp	r3, #224	; 0xe0
 8001176:	d11e      	bne.n	80011b6 <imu_initialize+0xbe>
	{	// ICM-20648 is 0xE0
		ret = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
		imu_write_byte(PWR_MGMT_1, 0x01);	//PWR_MGMT_1
 800117c:	2101      	movs	r1, #1
 800117e:	2006      	movs	r0, #6
 8001180:	f7ff ff62 	bl	8001048 <imu_write_byte>
		HAL_Delay(100);
 8001184:	2064      	movs	r0, #100	; 0x64
 8001186:	f003 fd59 	bl	8004c3c <HAL_Delay>
		imu_write_byte(USER_CTRL, 0x10);	//USER_CTRL
 800118a:	2110      	movs	r1, #16
 800118c:	2003      	movs	r0, #3
 800118e:	f7ff ff5b 	bl	8001048 <imu_write_byte>
		imu_write_byte(REG_BANK_SEL, 0x20);	//USER_BANK2
 8001192:	2120      	movs	r1, #32
 8001194:	207f      	movs	r0, #127	; 0x7f
 8001196:	f7ff ff57 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x01,0x06);	//range±2000dps DLPF disable	// range+-2000
		// igc8810
		imu_write_byte(0x01, 0x07);	//range±2000dps DLPF enable DLPFCFG = 0
 800119a:	2107      	movs	r1, #7
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff ff53 	bl	8001048 <imu_write_byte>
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		//write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		// igc8810
		imu_write_byte(0x14, 0x00);	//range±2g
 80011a2:	2100      	movs	r1, #0
 80011a4:	2014      	movs	r0, #20
 80011a6:	f7ff ff4f 	bl	8001048 <imu_write_byte>
		// shimotoriharuki
		//write_byte(0x14,0x06);	// range+-16
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		imu_write_byte(REG_BANK_SEL, 0x00);	//USER_BANK0
 80011aa:	2100      	movs	r1, #0
 80011ac:	207f      	movs	r0, #127	; 0x7f
 80011ae:	f7ff ff4b 	bl	8001048 <imu_write_byte>
		imu_set_offset();
 80011b2:	f000 f81b 	bl	80011ec <imu_set_offset>
	}
#if USE_NCS
	CS_SET;
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <imu_initialize+0xe0>)
 80011be:	f005 fb41 	bl	8006844 <HAL_GPIO_WritePin>
#endif
	return ret;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	f3af 8000 	nop.w
 80011d0:	a2529d39 	.word	0xa2529d39
 80011d4:	3f91df46 	.word	0x3f91df46
 80011d8:	40020400 	.word	0x40020400
 80011dc:	20000210 	.word	0x20000210
 80011e0:	20000208 	.word	0x20000208
 80011e4:	20000230 	.word	0x20000230
 80011e8:	20000224 	.word	0x20000224

080011ec <imu_set_offset>:
	CS_SET;
#endif
}

void imu_set_offset()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	imu_read();
 80011f0:	f000 f80e 	bl	8001210 <imu_read>
	inertial_offset = inertial;
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <imu_set_offset+0x1c>)
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <imu_set_offset+0x20>)
 80011f8:	6810      	ldr	r0, [r2, #0]
 80011fa:	6851      	ldr	r1, [r2, #4]
 80011fc:	6892      	ldr	r2, [r2, #8]
 80011fe:	6018      	str	r0, [r3, #0]
 8001200:	6059      	str	r1, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000218 	.word	0x20000218
 800120c:	20000230 	.word	0x20000230

08001210 <imu_read>:

void imu_read()
{
 8001210:	b598      	push	{r3, r4, r7, lr}
 8001212:	af00      	add	r7, sp, #0
	inertial.accel.x = ((int16_t)imu_read_byte(ACCEL_XOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_XOUT_L));
 8001214:	202d      	movs	r0, #45	; 0x2d
 8001216:	f7ff fee9 	bl	8000fec <imu_read_byte>
 800121a:	4603      	mov	r3, r0
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21c      	sxth	r4, r3
 8001220:	202e      	movs	r0, #46	; 0x2e
 8001222:	f7ff fee3 	bl	8000fec <imu_read_byte>
 8001226:	4603      	mov	r3, r0
 8001228:	b21b      	sxth	r3, r3
 800122a:	4323      	orrs	r3, r4
 800122c:	b21a      	sxth	r2, r3
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <imu_read+0xbc>)
 8001230:	801a      	strh	r2, [r3, #0]
	inertial.accel.y = ((int16_t)imu_read_byte(ACCEL_YOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_YOUT_L));
 8001232:	202f      	movs	r0, #47	; 0x2f
 8001234:	f7ff feda 	bl	8000fec <imu_read_byte>
 8001238:	4603      	mov	r3, r0
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21c      	sxth	r4, r3
 800123e:	2030      	movs	r0, #48	; 0x30
 8001240:	f7ff fed4 	bl	8000fec <imu_read_byte>
 8001244:	4603      	mov	r3, r0
 8001246:	b21b      	sxth	r3, r3
 8001248:	4323      	orrs	r3, r4
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <imu_read+0xbc>)
 800124e:	805a      	strh	r2, [r3, #2]
	inertial.accel.z = ((int16_t)imu_read_byte(ACCEL_ZOUT_H) << 8) | ((int16_t)imu_read_byte(ACCEL_ZOUT_L));
 8001250:	2031      	movs	r0, #49	; 0x31
 8001252:	f7ff fecb 	bl	8000fec <imu_read_byte>
 8001256:	4603      	mov	r3, r0
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21c      	sxth	r4, r3
 800125c:	2032      	movs	r0, #50	; 0x32
 800125e:	f7ff fec5 	bl	8000fec <imu_read_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	b21b      	sxth	r3, r3
 8001266:	4323      	orrs	r3, r4
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b18      	ldr	r3, [pc, #96]	; (80012cc <imu_read+0xbc>)
 800126c:	809a      	strh	r2, [r3, #4]
	inertial.gyro.x = ((int16_t)imu_read_byte(GYRO_XOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_XOUT_L));
 800126e:	2033      	movs	r0, #51	; 0x33
 8001270:	f7ff febc 	bl	8000fec <imu_read_byte>
 8001274:	4603      	mov	r3, r0
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21c      	sxth	r4, r3
 800127a:	2034      	movs	r0, #52	; 0x34
 800127c:	f7ff feb6 	bl	8000fec <imu_read_byte>
 8001280:	4603      	mov	r3, r0
 8001282:	b21b      	sxth	r3, r3
 8001284:	4323      	orrs	r3, r4
 8001286:	b21a      	sxth	r2, r3
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <imu_read+0xbc>)
 800128a:	80da      	strh	r2, [r3, #6]
	inertial.gyro.y = ((int16_t)imu_read_byte(GYRO_YOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_YOUT_L));
 800128c:	2035      	movs	r0, #53	; 0x35
 800128e:	f7ff fead 	bl	8000fec <imu_read_byte>
 8001292:	4603      	mov	r3, r0
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21c      	sxth	r4, r3
 8001298:	2036      	movs	r0, #54	; 0x36
 800129a:	f7ff fea7 	bl	8000fec <imu_read_byte>
 800129e:	4603      	mov	r3, r0
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4323      	orrs	r3, r4
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <imu_read+0xbc>)
 80012a8:	811a      	strh	r2, [r3, #8]
	inertial.gyro.z = ((int16_t)imu_read_byte(GYRO_ZOUT_H) << 8) | ((int16_t)imu_read_byte(GYRO_ZOUT_L));
 80012aa:	2037      	movs	r0, #55	; 0x37
 80012ac:	f7ff fe9e 	bl	8000fec <imu_read_byte>
 80012b0:	4603      	mov	r3, r0
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b21c      	sxth	r4, r3
 80012b6:	2038      	movs	r0, #56	; 0x38
 80012b8:	f7ff fe98 	bl	8000fec <imu_read_byte>
 80012bc:	4603      	mov	r3, r0
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4323      	orrs	r3, r4
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	4b01      	ldr	r3, [pc, #4]	; (80012cc <imu_read+0xbc>)
 80012c6:	815a      	strh	r2, [r3, #10]
}
 80012c8:	bf00      	nop
 80012ca:	bd98      	pop	{r3, r4, r7, pc}
 80012cc:	20000230 	.word	0x20000230

080012d0 <rotary_init>:

PlayMode playmode;
uint8_t value;

void rotary_init()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    rotary_set_playmode();
 80012d4:	f000 f804 	bl	80012e0 <rotary_set_playmode>
    rotary_set_value();
 80012d8:	f000 f81a 	bl	8001310 <rotary_set_value>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <rotary_set_playmode>:

void rotary_set_playmode()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    playmode = rotary_read();
 80012e4:	f000 f82c 	bl	8001340 <rotary_read>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b01      	ldr	r3, [pc, #4]	; (80012f4 <rotary_set_playmode+0x14>)
 80012ee:	701a      	strb	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000023c 	.word	0x2000023c

080012f8 <rotary_read_playmode>:

PlayMode rotary_read_playmode()
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
    return playmode;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <rotary_read_playmode+0x14>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000023c 	.word	0x2000023c

08001310 <rotary_set_value>:

void rotary_set_value()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    value = rotary_read();
 8001314:	f000 f814 	bl	8001340 <rotary_read>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b01      	ldr	r3, [pc, #4]	; (8001324 <rotary_set_value+0x14>)
 800131e:	701a      	strb	r2, [r3, #0]
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000023d 	.word	0x2000023d

08001328 <rotary_read_value>:

uint8_t rotary_read_value()
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
    return value;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <rotary_read_value+0x14>)
 800132e:	781b      	ldrb	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000023d 	.word	0x2000023d

08001340 <rotary_read>:

uint8_t rotary_read()
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
    uint8_t rotary_value_ = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]

    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_12) ? 0 : 1) << 0;
 800134a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <rotary_read+0x8c>)
 8001350:	f005 fa60 	bl	8006814 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	bf0c      	ite	eq
 800135a:	2301      	moveq	r3, #1
 800135c:	2300      	movne	r3, #0
 800135e:	b2db      	uxtb	r3, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4413      	add	r3, r2
 8001366:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) ? 0 : 1) << 1;
 8001368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136c:	4817      	ldr	r0, [pc, #92]	; (80013cc <rotary_read+0x8c>)
 800136e:	f005 fa51 	bl	8006814 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <rotary_read+0x3c>
 8001378:	2302      	movs	r3, #2
 800137a:	e000      	b.n	800137e <rotary_read+0x3e>
 800137c:	2300      	movs	r3, #0
 800137e:	b2da      	uxtb	r2, r3
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	4413      	add	r3, r2
 8001384:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) ? 0 : 1) << 2;
 8001386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <rotary_read+0x90>)
 800138c:	f005 fa42 	bl	8006814 <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <rotary_read+0x5a>
 8001396:	2304      	movs	r3, #4
 8001398:	e000      	b.n	800139c <rotary_read+0x5c>
 800139a:	2300      	movs	r3, #0
 800139c:	b2da      	uxtb	r2, r3
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	4413      	add	r3, r2
 80013a2:	71fb      	strb	r3, [r7, #7]
    rotary_value_ += (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) ? 0 : 1) << 3;
 80013a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a8:	4808      	ldr	r0, [pc, #32]	; (80013cc <rotary_read+0x8c>)
 80013aa:	f005 fa33 	bl	8006814 <HAL_GPIO_ReadPin>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <rotary_read+0x78>
 80013b4:	2308      	movs	r3, #8
 80013b6:	e000      	b.n	80013ba <rotary_read+0x7a>
 80013b8:	2300      	movs	r3, #0
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4413      	add	r3, r2
 80013c0:	71fb      	strb	r3, [r7, #7]

    return rotary_value_;
 80013c2:	79fb      	ldrb	r3, [r7, #7]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020000 	.word	0x40020000

080013d4 <rotary_print_playmode>:

void rotary_print_playmode()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	printf("playmode = ");
 80013d8:	482c      	ldr	r0, [pc, #176]	; (800148c <rotary_print_playmode+0xb8>)
 80013da:	f009 f8b5 	bl	800a548 <iprintf>
	switch(rotary_read_playmode())
 80013de:	f7ff ff8b 	bl	80012f8 <rotary_read_playmode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b0f      	cmp	r3, #15
 80013e6:	d847      	bhi.n	8001478 <rotary_print_playmode+0xa4>
 80013e8:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <rotary_print_playmode+0x1c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001431 	.word	0x08001431
 80013f4:	08001439 	.word	0x08001439
 80013f8:	08001441 	.word	0x08001441
 80013fc:	08001449 	.word	0x08001449
 8001400:	08001451 	.word	0x08001451
 8001404:	08001459 	.word	0x08001459
 8001408:	08001461 	.word	0x08001461
 800140c:	08001469 	.word	0x08001469
 8001410:	08001479 	.word	0x08001479
 8001414:	08001479 	.word	0x08001479
 8001418:	08001479 	.word	0x08001479
 800141c:	08001479 	.word	0x08001479
 8001420:	08001479 	.word	0x08001479
 8001424:	08001479 	.word	0x08001479
 8001428:	08001479 	.word	0x08001479
 800142c:	08001471 	.word	0x08001471
	{
		case calibration:
			printf("calibration");
 8001430:	4817      	ldr	r0, [pc, #92]	; (8001490 <rotary_print_playmode+0xbc>)
 8001432:	f009 f889 	bl	800a548 <iprintf>
			break;
 8001436:	e023      	b.n	8001480 <rotary_print_playmode+0xac>
		case search:
			printf("search");
 8001438:	4816      	ldr	r0, [pc, #88]	; (8001494 <rotary_print_playmode+0xc0>)
 800143a:	f009 f885 	bl	800a548 <iprintf>
			break;
 800143e:	e01f      	b.n	8001480 <rotary_print_playmode+0xac>
		case accel:
			printf("accel");
 8001440:	4815      	ldr	r0, [pc, #84]	; (8001498 <rotary_print_playmode+0xc4>)
 8001442:	f009 f881 	bl	800a548 <iprintf>
			break;
 8001446:	e01b      	b.n	8001480 <rotary_print_playmode+0xac>
		case max_enable:
			printf("max_enable");
 8001448:	4814      	ldr	r0, [pc, #80]	; (800149c <rotary_print_playmode+0xc8>)
 800144a:	f009 f87d 	bl	800a548 <iprintf>
			break;
 800144e:	e017      	b.n	8001480 <rotary_print_playmode+0xac>
        case motor_free:
            printf("motor_free");
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <rotary_print_playmode+0xcc>)
 8001452:	f009 f879 	bl	800a548 <iprintf>
            break;
 8001456:	e013      	b.n	8001480 <rotary_print_playmode+0xac>
		case tracer_tuning:
			printf("tracer_tuning");
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <rotary_print_playmode+0xd0>)
 800145a:	f009 f875 	bl	800a548 <iprintf>
			break;
 800145e:	e00f      	b.n	8001480 <rotary_print_playmode+0xac>
		case velotrace_tuning:
			printf("velotrace_tuning");
 8001460:	4811      	ldr	r0, [pc, #68]	; (80014a8 <rotary_print_playmode+0xd4>)
 8001462:	f009 f871 	bl	800a548 <iprintf>
			break;
 8001466:	e00b      	b.n	8001480 <rotary_print_playmode+0xac>
		case banquet:
			printf("banquet");
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <rotary_print_playmode+0xd8>)
 800146a:	f009 f86d 	bl	800a548 <iprintf>
			break;
 800146e:	e007      	b.n	8001480 <rotary_print_playmode+0xac>
		case flash_print:
			printf("flash_print");
 8001470:	480f      	ldr	r0, [pc, #60]	; (80014b0 <rotary_print_playmode+0xdc>)
 8001472:	f009 f869 	bl	800a548 <iprintf>
			break;
 8001476:	e003      	b.n	8001480 <rotary_print_playmode+0xac>
		default:
			printf("unknown playmode...");
 8001478:	480e      	ldr	r0, [pc, #56]	; (80014b4 <rotary_print_playmode+0xe0>)
 800147a:	f009 f865 	bl	800a548 <iprintf>
			break;
 800147e:	bf00      	nop
	}
	printf("\r\n");
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <rotary_print_playmode+0xe4>)
 8001482:	f009 f8e7 	bl	800a654 <puts>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	0800e20c 	.word	0x0800e20c
 8001490:	0800e218 	.word	0x0800e218
 8001494:	0800e224 	.word	0x0800e224
 8001498:	0800e22c 	.word	0x0800e22c
 800149c:	0800e234 	.word	0x0800e234
 80014a0:	0800e240 	.word	0x0800e240
 80014a4:	0800e24c 	.word	0x0800e24c
 80014a8:	0800e25c 	.word	0x0800e25c
 80014ac:	0800e270 	.word	0x0800e270
 80014b0:	0800e278 	.word	0x0800e278
 80014b4:	0800e284 	.word	0x0800e284
 80014b8:	0800e298 	.word	0x0800e298

080014bc <switch_set_enter>:
#include "Switch.h"

uint8_t enter;

void switch_set_enter()
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
    enter = 1;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <switch_set_enter+0x14>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	701a      	strb	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	2000023e 	.word	0x2000023e

080014d4 <switch_reset_enter>:

void switch_reset_enter()
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
    enter = 0;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <switch_reset_enter+0x14>)
 80014da:	2200      	movs	r2, #0
 80014dc:	701a      	strb	r2, [r3, #0]
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	2000023e 	.word	0x2000023e

080014ec <switch_init>:
{
    switch_reset_enter();
}

void switch_init()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    switch_reset_enter();
 80014f0:	f7ff fff0 	bl	80014d4 <switch_reset_enter>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <switch_read_enter>:

uint8_t switch_read_enter()
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
    return enter;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <switch_read_enter+0x14>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	2000023e 	.word	0x2000023e

08001510 <switch1_read>:

uint8_t switch1_read()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) ? 0 : 1;
 8001514:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <switch1_read+0x20>)
 800151a:	f005 f97b 	bl	8006814 <HAL_GPIO_ReadPin>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40020800 	.word	0x40020800

08001534 <switch2_read>:

uint8_t switch2_read()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) ? 0 : 1;
 8001538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <switch2_read+0x20>)
 800153e:	f005 f969 	bl	8006814 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
}
 800154e:	4618      	mov	r0, r3
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020800 	.word	0x40020800

08001558 <switch_read>:

uint8_t switch_read()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
    uint8_t value_ = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	71fb      	strb	r3, [r7, #7]

    value_ += switch1_read() << 1;
 8001562:	f7ff ffd5 	bl	8001510 <switch1_read>
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	4413      	add	r3, r2
 8001570:	71fb      	strb	r3, [r7, #7]
    value_ += switch2_read() << 0;
 8001572:	f7ff ffdf 	bl	8001534 <switch2_read>
 8001576:	4603      	mov	r3, r0
 8001578:	b2da      	uxtb	r2, r3
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	4413      	add	r3, r2
 800157e:	71fb      	strb	r3, [r7, #7]

    return value_;
 8001580:	79fb      	ldrb	r3, [r7, #7]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <switch_enter>:

void switch_enter()
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
    if(switch_read() == 0b01)
 800158e:	f7ff ffe3 	bl	8001558 <switch_read>
 8001592:	4603      	mov	r3, r0
 8001594:	2b01      	cmp	r3, #1
 8001596:	d102      	bne.n	800159e <switch_enter+0x14>
    {
        switch_reset_enter();
 8001598:	f7ff ff9c 	bl	80014d4 <switch_reset_enter>
    }
    else if(switch_read() == 0b10)
    {
        switch_set_enter();
    }
}
 800159c:	e006      	b.n	80015ac <switch_enter+0x22>
    else if(switch_read() == 0b10)
 800159e:	f7ff ffdb 	bl	8001558 <switch_read>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d101      	bne.n	80015ac <switch_enter+0x22>
        switch_set_enter();
 80015a8:	f7ff ff88 	bl	80014bc <switch_set_enter>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <analog_array_print>:
uint16_t analogbuffers[SENSGETCOUNT][CALIBRATIONSIZE];

AnalogMode analogmode;

void analog_array_print(uint16_t *analog_)
{
 80015b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b4:	b08e      	sub	sp, #56	; 0x38
 80015b6:	af0a      	add	r7, sp, #40	; 0x28
 80015b8:	60f8      	str	r0, [r7, #12]
	printf("\x1b[24C");	// Cursor move right *24
 80015ba:	482d      	ldr	r0, [pc, #180]	; (8001670 <analog_array_print+0xc0>)
 80015bc:	f008 ffc4 	bl	800a548 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", *(analog_ + 12), *(analog_ + 14), *(analog_ + 15), *(analog_ + 13));
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3318      	adds	r3, #24
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	331c      	adds	r3, #28
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	331e      	adds	r3, #30
 80015d4:	881b      	ldrh	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	331a      	adds	r3, #26
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	4603      	mov	r3, r0
 80015e2:	4824      	ldr	r0, [pc, #144]	; (8001674 <analog_array_print+0xc4>)
 80015e4:	f008 ffb0 	bl	800a548 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", *(analog_ + 0), *(analog_ + 2), *(analog_ + 4), *(analog_ + 6), *(analog_ + 8), *(analog_ + 10), *(analog_ + 11), *(analog_ + 9), *(analog_ + 7), *(analog_ + 5), *(analog_ + 3), *(analog_ + 1));
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	469c      	mov	ip, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3304      	adds	r3, #4
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	469e      	mov	lr, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3308      	adds	r3, #8
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	4698      	mov	r8, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	330c      	adds	r3, #12
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3310      	adds	r3, #16
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3314      	adds	r3, #20
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3316      	adds	r3, #22
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	461c      	mov	r4, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3312      	adds	r3, #18
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	461d      	mov	r5, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	330e      	adds	r3, #14
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	461e      	mov	r6, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	330a      	adds	r3, #10
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3306      	adds	r3, #6
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3302      	adds	r3, #2
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	9308      	str	r3, [sp, #32]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	9307      	str	r3, [sp, #28]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	9306      	str	r3, [sp, #24]
 800164e:	9605      	str	r6, [sp, #20]
 8001650:	9504      	str	r5, [sp, #16]
 8001652:	9403      	str	r4, [sp, #12]
 8001654:	9002      	str	r0, [sp, #8]
 8001656:	9101      	str	r1, [sp, #4]
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	4643      	mov	r3, r8
 800165c:	4672      	mov	r2, lr
 800165e:	4661      	mov	r1, ip
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <analog_array_print+0xc8>)
 8001662:	f008 ff71 	bl	800a548 <iprintf>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001670:	0800e29c 	.word	0x0800e29c
 8001674:	0800e2a4 	.word	0x0800e2a4
 8001678:	0800e2bc 	.word	0x0800e2bc

0800167c <analog_rate_array_print>:

void analog_rate_array_print()
{
 800167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001680:	b092      	sub	sp, #72	; 0x48
 8001682:	af0a      	add	r7, sp, #40	; 0x28
	printf("\r\n");
 8001684:	4850      	ldr	r0, [pc, #320]	; (80017c8 <analog_rate_array_print+0x14c>)
 8001686:	f008 ffe5 	bl	800a654 <puts>
	printf("\x1b[24C");	// Cursor move right *24
 800168a:	4850      	ldr	r0, [pc, #320]	; (80017cc <analog_rate_array_print+0x150>)
 800168c:	f008 ff5c 	bl	800a548 <iprintf>
	printf("%4d, %4d | %4d, %4d\r\n", analog_sensor_get(12), analog_sensor_get(14), analog_sensor_get(15), analog_sensor_get(13));
 8001690:	200c      	movs	r0, #12
 8001692:	f000 faab 	bl	8001bec <analog_sensor_get>
 8001696:	4603      	mov	r3, r0
 8001698:	461c      	mov	r4, r3
 800169a:	200e      	movs	r0, #14
 800169c:	f000 faa6 	bl	8001bec <analog_sensor_get>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461d      	mov	r5, r3
 80016a4:	200f      	movs	r0, #15
 80016a6:	f000 faa1 	bl	8001bec <analog_sensor_get>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461e      	mov	r6, r3
 80016ae:	200d      	movs	r0, #13
 80016b0:	f000 fa9c 	bl	8001bec <analog_sensor_get>
 80016b4:	4603      	mov	r3, r0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	4633      	mov	r3, r6
 80016ba:	462a      	mov	r2, r5
 80016bc:	4621      	mov	r1, r4
 80016be:	4844      	ldr	r0, [pc, #272]	; (80017d0 <analog_rate_array_print+0x154>)
 80016c0:	f008 ff42 	bl	800a548 <iprintf>
	printf("%4d, %4d, %4d, %4d, %4d, %4d | %4d, %4d, %4d, %4d, %4d, %4d\r\n", analog_sensor_get(0), analog_sensor_get(2), analog_sensor_get(4), analog_sensor_get(6), analog_sensor_get(8), analog_sensor_get(10), analog_sensor_get(11), analog_sensor_get(9), analog_sensor_get(7), analog_sensor_get(5), analog_sensor_get(3), analog_sensor_get(1));
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 fa91 	bl	8001bec <analog_sensor_get>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4698      	mov	r8, r3
 80016ce:	2002      	movs	r0, #2
 80016d0:	f000 fa8c 	bl	8001bec <analog_sensor_get>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4699      	mov	r9, r3
 80016d8:	2004      	movs	r0, #4
 80016da:	f000 fa87 	bl	8001bec <analog_sensor_get>
 80016de:	4603      	mov	r3, r0
 80016e0:	469a      	mov	sl, r3
 80016e2:	2006      	movs	r0, #6
 80016e4:	f000 fa82 	bl	8001bec <analog_sensor_get>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461c      	mov	r4, r3
 80016ec:	2008      	movs	r0, #8
 80016ee:	f000 fa7d 	bl	8001bec <analog_sensor_get>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461d      	mov	r5, r3
 80016f6:	200a      	movs	r0, #10
 80016f8:	f000 fa78 	bl	8001bec <analog_sensor_get>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461e      	mov	r6, r3
 8001700:	200b      	movs	r0, #11
 8001702:	f000 fa73 	bl	8001bec <analog_sensor_get>
 8001706:	4603      	mov	r3, r0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	2009      	movs	r0, #9
 800170c:	f000 fa6e 	bl	8001bec <analog_sensor_get>
 8001710:	4603      	mov	r3, r0
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	2007      	movs	r0, #7
 8001716:	f000 fa69 	bl	8001bec <analog_sensor_get>
 800171a:	4603      	mov	r3, r0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	2005      	movs	r0, #5
 8001720:	f000 fa64 	bl	8001bec <analog_sensor_get>
 8001724:	4603      	mov	r3, r0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	2003      	movs	r0, #3
 800172a:	f000 fa5f 	bl	8001bec <analog_sensor_get>
 800172e:	4603      	mov	r3, r0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	2001      	movs	r0, #1
 8001734:	f000 fa5a 	bl	8001bec <analog_sensor_get>
 8001738:	4603      	mov	r3, r0
 800173a:	9308      	str	r3, [sp, #32]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	9207      	str	r2, [sp, #28]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	9206      	str	r2, [sp, #24]
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	9205      	str	r2, [sp, #20]
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	9204      	str	r2, [sp, #16]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	9303      	str	r3, [sp, #12]
 8001750:	9602      	str	r6, [sp, #8]
 8001752:	9501      	str	r5, [sp, #4]
 8001754:	9400      	str	r4, [sp, #0]
 8001756:	4653      	mov	r3, sl
 8001758:	464a      	mov	r2, r9
 800175a:	4641      	mov	r1, r8
 800175c:	481d      	ldr	r0, [pc, #116]	; (80017d4 <analog_rate_array_print+0x158>)
 800175e:	f008 fef3 	bl	800a548 <iprintf>
	printf("\r\n");
 8001762:	4819      	ldr	r0, [pc, #100]	; (80017c8 <analog_rate_array_print+0x14c>)
 8001764:	f008 ff76 	bl	800a654 <puts>

	uint16_t sum_, size_;

	sum_ = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	83fb      	strh	r3, [r7, #30]
	size_ = 16;
 800176c:	2310      	movs	r3, #16
 800176e:	837b      	strh	r3, [r7, #26]

	for(unsigned char i; i < size_; i++)
 8001770:	e00b      	b.n	800178a <analog_rate_array_print+0x10e>
	{
		sum_ += analog_sensor_get(i);
 8001772:	7f7b      	ldrb	r3, [r7, #29]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 fa39 	bl	8001bec <analog_sensor_get>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	4413      	add	r3, r2
 8001782:	83fb      	strh	r3, [r7, #30]
	for(unsigned char i; i < size_; i++)
 8001784:	7f7b      	ldrb	r3, [r7, #29]
 8001786:	3301      	adds	r3, #1
 8001788:	777b      	strb	r3, [r7, #29]
 800178a:	7f7b      	ldrb	r3, [r7, #29]
 800178c:	b29b      	uxth	r3, r3
 800178e:	8b7a      	ldrh	r2, [r7, #26]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8ee      	bhi.n	8001772 <analog_rate_array_print+0xf6>
	}

	printf("average = %4.2f\r\n\r\n", sum_ / (double) size_);
 8001794:	8bfb      	ldrh	r3, [r7, #30]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fec4 	bl	8000524 <__aeabi_i2d>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	8b7b      	ldrh	r3, [r7, #26]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe feae 	bl	8000504 <__aeabi_ui2d>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4620      	mov	r0, r4
 80017ae:	4629      	mov	r1, r5
 80017b0:	f7ff f84c 	bl	800084c <__aeabi_ddiv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <analog_rate_array_print+0x15c>)
 80017ba:	f008 fec5 	bl	800a548 <iprintf>
}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017c8:	0800e2fc 	.word	0x0800e2fc
 80017cc:	0800e29c 	.word	0x0800e29c
 80017d0:	0800e2a4 	.word	0x0800e2a4
 80017d4:	0800e2bc 	.word	0x0800e2bc
 80017d8:	0800e300 	.word	0x0800e300

080017dc <analog_d_print>:

void analog_d_print()
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	analog_print_analogmode();
 80017e0:	f000 f804 	bl	80017ec <analog_print_analogmode>
	analog_rate_array_print();
 80017e4:	f7ff ff4a 	bl	800167c <analog_rate_array_print>
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}

080017ec <analog_print_analogmode>:

void analog_print_analogmode()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	printf("analogmode = ");
 80017f0:	4823      	ldr	r0, [pc, #140]	; (8001880 <analog_print_analogmode+0x94>)
 80017f2:	f008 fea9 	bl	800a548 <iprintf>
	switch(analog_read_analogmode())
 80017f6:	f000 f963 	bl	8001ac0 <analog_read_analogmode>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b10      	cmp	r3, #16
 80017fe:	d835      	bhi.n	800186c <analog_print_analogmode+0x80>
 8001800:	a201      	add	r2, pc, #4	; (adr r2, 8001808 <analog_print_analogmode+0x1c>)
 8001802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001806:	bf00      	nop
 8001808:	0800184d 	.word	0x0800184d
 800180c:	0800186d 	.word	0x0800186d
 8001810:	0800186d 	.word	0x0800186d
 8001814:	0800186d 	.word	0x0800186d
 8001818:	08001855 	.word	0x08001855
 800181c:	0800186d 	.word	0x0800186d
 8001820:	0800186d 	.word	0x0800186d
 8001824:	0800186d 	.word	0x0800186d
 8001828:	0800186d 	.word	0x0800186d
 800182c:	0800186d 	.word	0x0800186d
 8001830:	0800186d 	.word	0x0800186d
 8001834:	0800186d 	.word	0x0800186d
 8001838:	0800185d 	.word	0x0800185d
 800183c:	0800186d 	.word	0x0800186d
 8001840:	0800186d 	.word	0x0800186d
 8001844:	0800186d 	.word	0x0800186d
 8001848:	08001865 	.word	0x08001865
	{
		case analogmode_calibrating:
			printf("analogmode_calibrating\r\n");
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <analog_print_analogmode+0x98>)
 800184e:	f008 ff01 	bl	800a654 <puts>
			break;
 8001852:	e00f      	b.n	8001874 <analog_print_analogmode+0x88>
		case analogmode_long:
			printf("analogmode_long\r\n");
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <analog_print_analogmode+0x9c>)
 8001856:	f008 fefd 	bl	800a654 <puts>
			break;
 800185a:	e00b      	b.n	8001874 <analog_print_analogmode+0x88>
		case analogmode_short:
			printf("analogmode_short\r\n");
 800185c:	480b      	ldr	r0, [pc, #44]	; (800188c <analog_print_analogmode+0xa0>)
 800185e:	f008 fef9 	bl	800a654 <puts>
			break;
 8001862:	e007      	b.n	8001874 <analog_print_analogmode+0x88>
		case analogmode_all:
			printf("analogmode_all\r\n");
 8001864:	480a      	ldr	r0, [pc, #40]	; (8001890 <analog_print_analogmode+0xa4>)
 8001866:	f008 fef5 	bl	800a654 <puts>
			break;
 800186a:	e003      	b.n	8001874 <analog_print_analogmode+0x88>
		default:
			printf("Unknown analogmode ... \r\n");
 800186c:	4809      	ldr	r0, [pc, #36]	; (8001894 <analog_print_analogmode+0xa8>)
 800186e:	f008 fef1 	bl	800a654 <puts>
			break;
 8001872:	bf00      	nop
	}
	printf("\r\n");
 8001874:	4808      	ldr	r0, [pc, #32]	; (8001898 <analog_print_analogmode+0xac>)
 8001876:	f008 feed 	bl	800a654 <puts>
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	0800e314 	.word	0x0800e314
 8001884:	0800e324 	.word	0x0800e324
 8001888:	0800e33c 	.word	0x0800e33c
 800188c:	0800e350 	.word	0x0800e350
 8001890:	0800e364 	.word	0x0800e364
 8001894:	0800e374 	.word	0x0800e374
 8001898:	0800e2fc 	.word	0x0800e2fc

0800189c <analog_print_max>:
	analog_print_analogmode();
	analog_array_print(analog);
}

void analog_print_max()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	printf(ESC_RED);
 80018a0:	4806      	ldr	r0, [pc, #24]	; (80018bc <analog_print_max+0x20>)
 80018a2:	f008 fe51 	bl	800a548 <iprintf>
	printf("analog_print_max\r\n");
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <analog_print_max+0x24>)
 80018a8:	f008 fed4 	bl	800a654 <puts>
	analog_array_print(analogmax);
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <analog_print_max+0x28>)
 80018ae:	f7ff fe7f 	bl	80015b0 <analog_array_print>
	printf(ESC_DEF);
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <analog_print_max+0x2c>)
 80018b4:	f008 fe48 	bl	800a548 <iprintf>
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	0800e3b4 	.word	0x0800e3b4
 80018c0:	0800e3bc 	.word	0x0800e3bc
 80018c4:	200003e8 	.word	0x200003e8
 80018c8:	0800e3d0 	.word	0x0800e3d0

080018cc <analog_print_min>:

void analog_print_min()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	printf(ESC_CYA);
 80018d0:	4806      	ldr	r0, [pc, #24]	; (80018ec <analog_print_min+0x20>)
 80018d2:	f008 fe39 	bl	800a548 <iprintf>
	printf("analog_print_min\r\n");
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <analog_print_min+0x24>)
 80018d8:	f008 febc 	bl	800a654 <puts>
	analog_array_print(analogmin);
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <analog_print_min+0x28>)
 80018de:	f7ff fe67 	bl	80015b0 <analog_array_print>
	printf(ESC_DEF);
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <analog_print_min+0x2c>)
 80018e4:	f008 fe30 	bl	800a548 <iprintf>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	0800e3d8 	.word	0x0800e3d8
 80018f0:	0800e3e0 	.word	0x0800e3e0
 80018f4:	20000284 	.word	0x20000284
 80018f8:	0800e3d0 	.word	0x0800e3d0

080018fc <analog_set_on_flash>:

void analog_set_on_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
	printf("analog_set_to_flash()\r\n");
 8001906:	482a      	ldr	r0, [pc, #168]	; (80019b0 <analog_set_on_flash+0xb4>)
 8001908:	f008 fea4 	bl	800a654 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e046      	b.n	80019a0 <analog_set_on_flash+0xa4>
	{
		printf(ESC_MAG);
 8001912:	4828      	ldr	r0, [pc, #160]	; (80019b4 <analog_set_on_flash+0xb8>)
 8001914:	f008 fe18 	bl	800a548 <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001918:	4a27      	ldr	r2, [pc, #156]	; (80019b8 <analog_set_on_flash+0xbc>)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	885b      	ldrh	r3, [r3, #2]
 8001922:	4619      	mov	r1, r3
 8001924:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <analog_set_on_flash+0xbc>)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3310      	adds	r3, #16
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	885b      	ldrh	r3, [r3, #2]
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	460a      	mov	r2, r1
 8001936:	68f9      	ldr	r1, [r7, #12]
 8001938:	4820      	ldr	r0, [pc, #128]	; (80019bc <analog_set_on_flash+0xc0>)
 800193a:	f008 fe05 	bl	800a548 <iprintf>
		printf(ESC_DEF);
 800193e:	4820      	ldr	r0, [pc, #128]	; (80019c0 <analog_set_on_flash+0xc4>)
 8001940:	f008 fe02 	bl	800a548 <iprintf>
		*(analogmin_ + i) = analogmin[i];
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	4413      	add	r3, r2
 800194c:	491d      	ldr	r1, [pc, #116]	; (80019c4 <analog_set_on_flash+0xc8>)
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001954:	801a      	strh	r2, [r3, #0]
		*(analogmax_ + i) = analogmax[i];
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	4413      	add	r3, r2
 800195e:	491a      	ldr	r1, [pc, #104]	; (80019c8 <analog_set_on_flash+0xcc>)
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001966:	801a      	strh	r2, [r3, #0]
		printf(ESC_GRE);
 8001968:	4818      	ldr	r0, [pc, #96]	; (80019cc <analog_set_on_flash+0xd0>)
 800196a:	f008 fded 	bl	800a548 <iprintf>
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <analog_set_on_flash+0xbc>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4413      	add	r3, r2
 8001976:	885b      	ldrh	r3, [r3, #2]
 8001978:	4619      	mov	r1, r3
 800197a:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <analog_set_on_flash+0xbc>)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3310      	adds	r3, #16
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	885b      	ldrh	r3, [r3, #2]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	460a      	mov	r2, r1
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	480b      	ldr	r0, [pc, #44]	; (80019bc <analog_set_on_flash+0xc0>)
 8001990:	f008 fdda 	bl	800a548 <iprintf>
		printf(ESC_DEF);
 8001994:	480a      	ldr	r0, [pc, #40]	; (80019c0 <analog_set_on_flash+0xc4>)
 8001996:	f008 fdd7 	bl	800a548 <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	d9b5      	bls.n	8001912 <analog_set_on_flash+0x16>
	}
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	0800e3f4 	.word	0x0800e3f4
 80019b4:	0800e40c 	.word	0x0800e40c
 80019b8:	200007f8 	.word	0x200007f8
 80019bc:	0800e414 	.word	0x0800e414
 80019c0:	0800e3d0 	.word	0x0800e3d0
 80019c4:	20000284 	.word	0x20000284
 80019c8:	200003e8 	.word	0x200003e8
 80019cc:	0800e450 	.word	0x0800e450

080019d0 <analog_set_from_flash>:

void analog_set_from_flash(uint16_t *analogmin_, uint16_t *analogmax_)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af02      	add	r7, sp, #8
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
	printf("analog_set_from_flash()\r\n");
 80019da:	4824      	ldr	r0, [pc, #144]	; (8001a6c <analog_set_from_flash+0x9c>)
 80019dc:	f008 fe3a 	bl	800a654 <puts>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e03a      	b.n	8001a5c <analog_set_from_flash+0x8c>
	{
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 80019e6:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <analog_set_from_flash+0xa0>)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	885b      	ldrh	r3, [r3, #2]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <analog_set_from_flash+0xa0>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3310      	adds	r3, #16
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	4413      	add	r3, r2
 80019fc:	885b      	ldrh	r3, [r3, #2]
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	460a      	mov	r2, r1
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	481b      	ldr	r0, [pc, #108]	; (8001a74 <analog_set_from_flash+0xa4>)
 8001a08:	f008 fd9e 	bl	800a548 <iprintf>
		analogmin[i] = *(analogmin_ + i);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	8819      	ldrh	r1, [r3, #0]
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <analog_set_from_flash+0xa8>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		analogmax[i] = *(analogmax_ + i);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	4413      	add	r3, r2
 8001a26:	8819      	ldrh	r1, [r3, #0]
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <analog_set_from_flash+0xac>)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		printf("flash.analogmin[%2d] = %5d, flash.analogmax[%2d] = %5d\r\n", i, flashbuffer.analogmin[i], i, flashbuffer.analogmax[i]);
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <analog_set_from_flash+0xa0>)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	885b      	ldrh	r3, [r3, #2]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <analog_set_from_flash+0xa0>)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3310      	adds	r3, #16
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	885b      	ldrh	r3, [r3, #2]
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	4808      	ldr	r0, [pc, #32]	; (8001a74 <analog_set_from_flash+0xa4>)
 8001a52:	f008 fd79 	bl	800a548 <iprintf>
	for(unsigned int i = 0; i < CALIBRATIONSIZE; i++)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b0f      	cmp	r3, #15
 8001a60:	d9c1      	bls.n	80019e6 <analog_set_from_flash+0x16>
	}
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	0800e458 	.word	0x0800e458
 8001a70:	200007f8 	.word	0x200007f8
 8001a74:	0800e414 	.word	0x0800e414
 8001a78:	20000284 	.word	0x20000284
 8001a7c:	200003e8 	.word	0x200003e8

08001a80 <analog_set_calibrationsize>:

void analog_set_calibrationsize(uint8_t calibrationsize_)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	calibrationsize = calibrationsize_;
 8001a8a:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <analog_set_calibrationsize+0x1c>)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	7013      	strb	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	200002a5 	.word	0x200002a5

08001aa0 <analog_set_analogmode>:
{
	return calibrationsize;
}

void analog_set_analogmode(AnalogMode analogmode_)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	analogmode = analogmode_;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <analog_set_analogmode+0x1c>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	7013      	strb	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	200002a4 	.word	0x200002a4

08001ac0 <analog_read_analogmode>:

AnalogMode analog_read_analogmode()
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	return analogmode;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <analog_read_analogmode+0x14>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200002a4 	.word	0x200002a4

08001ad8 <analog_calibration_start>:

void analog_calibration_start()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	analog_set_analogmode(analogmode_all);
 8001ade:	2010      	movs	r0, #16
 8001ae0:	f7ff ffde 	bl	8001aa0 <analog_set_analogmode>
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	e00d      	b.n	8001b06 <analog_calibration_start+0x2e>
    {
        analogmax[i] = 0;
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <analog_calibration_start+0x48>)
 8001aee:	2100      	movs	r1, #0
 8001af0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        analogmin[i] = 4096;
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <analog_calibration_start+0x4c>)
 8001af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001afc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(unsigned char i = 0; CALIBRATIONSIZE > i; i++)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	3301      	adds	r3, #1
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d9ee      	bls.n	8001aea <analog_calibration_start+0x12>
    }
	analog_print_max();
 8001b0c:	f7ff fec6 	bl	800189c <analog_print_max>
	analog_print_min();
 8001b10:	f7ff fedc 	bl	80018cc <analog_print_min>
	analog_sensor_start();
 8001b14:	f000 f844 	bl	8001ba0 <analog_sensor_start>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200003e8 	.word	0x200003e8
 8001b24:	20000284 	.word	0x20000284

08001b28 <analog_calibration_stop>:

void analog_calibration_stop()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	/* analog_calibration_stop */
	analog_set_analogmode(analogmode_all);
 8001b2c:	2010      	movs	r0, #16
 8001b2e:	f7ff ffb7 	bl	8001aa0 <analog_set_analogmode>
	/* HAL_ADC_Stop_DMA */
	analog_stop();
 8001b32:	f000 f82f 	bl	8001b94 <analog_stop>
	analog_print_max();
 8001b36:	f7ff feb1 	bl	800189c <analog_print_max>
	analog_print_min();
 8001b3a:	f7ff fec7 	bl	80018cc <analog_print_min>
	/* flashbuffer.analogmin/max = analogmin/max */
	analog_set_on_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8001b3e:	4904      	ldr	r1, [pc, #16]	; (8001b50 <analog_calibration_stop+0x28>)
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <analog_calibration_stop+0x2c>)
 8001b42:	f7ff fedb 	bl	80018fc <analog_set_on_flash>
	flash_write();
 8001b46:	f000 fa77 	bl	8002038 <flash_write>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000081a 	.word	0x2000081a
 8001b54:	200007fa 	.word	0x200007fa

08001b58 <analog_init>:

void analog_init()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	analog_set_calibrationsize(CALIBRATIONSIZE);
 8001b5c:	2010      	movs	r0, #16
 8001b5e:	f7ff ff8f 	bl	8001a80 <analog_set_calibrationsize>
    if(HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <analog_init+0x20>)
 8001b64:	f003 f88e 	bl	8004c84 <HAL_ADC_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <analog_init+0x1a>
    {
        Error_Handler();
 8001b6e:	f001 f969 	bl	8002e44 <Error_Handler>
    }
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000058c 	.word	0x2000058c

08001b7c <analog_start>:

void analog_start()
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	printf("analog_sensor_start()\r\n");
 8001b80:	4803      	ldr	r0, [pc, #12]	; (8001b90 <analog_start+0x14>)
 8001b82:	f008 fd67 	bl	800a654 <puts>
	analog_sensor_start();
 8001b86:	f000 f80b 	bl	8001ba0 <analog_sensor_start>
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	0800e474 	.word	0x0800e474

08001b94 <analog_stop>:

void analog_stop()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	analog_sensor_stop();
 8001b98:	f000 f81e 	bl	8001bd8 <analog_sensor_stop>
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <analog_sensor_start>:

void analog_sensor_start()
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
	printf("sensgettime = 0\r\nHAL_ADC_Start_DMA()\r\n");
 8001ba4:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <analog_sensor_start+0x28>)
 8001ba6:	f008 fd55 	bl	800a654 <puts>
    sensgettime = 0;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <analog_sensor_start+0x2c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t*) analograw, CALIBRATIONSIZE) != HAL_OK)
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <analog_sensor_start+0x30>)
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <analog_sensor_start+0x34>)
 8001bb6:	f003 f8a9 	bl	8004d0c <HAL_ADC_Start_DMA>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <analog_sensor_start+0x24>
    {
        Error_Handler();
 8001bc0:	f001 f940 	bl	8002e44 <Error_Handler>
    }
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	0800e48c 	.word	0x0800e48c
 8001bcc:	20000260 	.word	0x20000260
 8001bd0:	20000264 	.word	0x20000264
 8001bd4:	2000058c 	.word	0x2000058c

08001bd8 <analog_sensor_stop>:

void analog_sensor_stop()
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <analog_sensor_stop+0x10>)
 8001bde:	f003 f9a5 	bl	8004f2c <HAL_ADC_Stop_DMA>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000058c 	.word	0x2000058c

08001bec <analog_sensor_get>:

uint16_t analog_sensor_get(unsigned char i)
{
 8001bec:	b5b0      	push	{r4, r5, r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	analograte[i] = 1000 * (analog[i] - analogmin[i]) / (double) (analogmax[i] - analogmin[i]);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <analog_sensor_get+0x80>)
 8001bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bfe:	4619      	mov	r1, r3
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <analog_sensor_get+0x84>)
 8001c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c08:	1acb      	subs	r3, r1, r3
 8001c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc86 	bl	8000524 <__aeabi_i2d>
 8001c18:	4604      	mov	r4, r0
 8001c1a:	460d      	mov	r5, r1
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4a15      	ldr	r2, [pc, #84]	; (8001c74 <analog_sensor_get+0x88>)
 8001c20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c24:	4619      	mov	r1, r3
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <analog_sensor_get+0x84>)
 8001c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c2e:	1acb      	subs	r3, r1, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc77 	bl	8000524 <__aeabi_i2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	f7fe fe05 	bl	800084c <__aeabi_ddiv>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	79fc      	ldrb	r4, [r7, #7]
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe ffac 	bl	8000ba8 <__aeabi_d2uiz>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <analog_sensor_get+0x8c>)
 8001c56:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
#if USE_SIGMOID_TRACE
	analograte[i] = 1000 * sigmoid(analograte[i], (16 - i)/(double)800, 500);
#endif
	return analograte[i];
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <analog_sensor_get+0x8c>)
 8001c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000240 	.word	0x20000240
 8001c70:	20000284 	.word	0x20000284
 8001c74:	200003e8 	.word	0x200003e8
 8001c78:	200002a8 	.word	0x200002a8

08001c7c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
#if !ANALOG_CALIBRATION_IN_WHILE
	analog_get_and_sort();
 8001c84:	f000 f804 	bl	8001c90 <analog_get_and_sort>
#endif
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <analog_get_and_sort>:

void analog_get_and_sort()
{
 8001c90:	b490      	push	{r4, r7}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
    /* sort */
	if(sensgettime >= SENSGETCOUNT)
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <analog_get_and_sort+0x120>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d968      	bls.n	8001d70 <analog_get_and_sort+0xe0>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("sensgettime >= SENSGETCOUNT\r\n");
		#endif
		sensgettime = 0;
 8001c9e:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <analog_get_and_sort+0x120>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	71fb      	strb	r3, [r7, #7]
 8001ca8:	e05f      	b.n	8001d6a <analog_get_and_sort+0xda>
        {
			/* main sort */
			#if ANALOG_CALIBRATION_IN_WHILE
			// printf("main sort\r\n");
			#endif
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	71bb      	strb	r3, [r7, #6]
 8001cae:	e02d      	b.n	8001d0c <analog_get_and_sort+0x7c>
            {
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	717b      	strb	r3, [r7, #5]
 8001cb4:	e023      	b.n	8001cfe <analog_get_and_sort+0x6e>
                {
					uint16_t analogbuffer = analogbuffers[alphaindex - 1][index];
 8001cb6:	797b      	ldrb	r3, [r7, #5]
 8001cb8:	1e5a      	subs	r2, r3, #1
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	493d      	ldr	r1, [pc, #244]	; (8001db4 <analog_get_and_sort+0x124>)
 8001cbe:	0112      	lsls	r2, r2, #4
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001cc6:	807b      	strh	r3, [r7, #2]
					analogbuffers[alphaindex - 1][index] = analogbuffers[alphaindex][index];
 8001cc8:	7978      	ldrb	r0, [r7, #5]
 8001cca:	79f9      	ldrb	r1, [r7, #7]
 8001ccc:	797b      	ldrb	r3, [r7, #5]
 8001cce:	1e5a      	subs	r2, r3, #1
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	4c38      	ldr	r4, [pc, #224]	; (8001db4 <analog_get_and_sort+0x124>)
 8001cd4:	0100      	lsls	r0, r0, #4
 8001cd6:	4401      	add	r1, r0
 8001cd8:	f834 0011 	ldrh.w	r0, [r4, r1, lsl #1]
 8001cdc:	4935      	ldr	r1, [pc, #212]	; (8001db4 <analog_get_and_sort+0x124>)
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					analogbuffers[alphaindex][index] = analogbuffer;
 8001ce8:	797a      	ldrb	r2, [r7, #5]
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4931      	ldr	r1, [pc, #196]	; (8001db4 <analog_get_and_sort+0x124>)
 8001cee:	0112      	lsls	r2, r2, #4
 8001cf0:	4413      	add	r3, r2
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(unsigned char alphaindex = 0; alphaindex > count; alphaindex--)
 8001cf8:	797b      	ldrb	r3, [r7, #5]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	717b      	strb	r3, [r7, #5]
 8001cfe:	797a      	ldrb	r2, [r7, #5]
 8001d00:	79bb      	ldrb	r3, [r7, #6]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d8d7      	bhi.n	8001cb6 <analog_get_and_sort+0x26>
			for(unsigned char count = 0; count < SENSGETCOUNT; count++)
 8001d06:	79bb      	ldrb	r3, [r7, #6]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	71bb      	strb	r3, [r7, #6]
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d9ce      	bls.n	8001cb0 <analog_get_and_sort+0x20>
				}
			}

			/* get middle */
			analog[index] = analogbuffers[(int) SENSGETCOUNT / 2][index];
 8001d12:	79fa      	ldrb	r2, [r7, #7]
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	4927      	ldr	r1, [pc, #156]	; (8001db4 <analog_get_and_sort+0x124>)
 8001d18:	3240      	adds	r2, #64	; 0x40
 8001d1a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d1e:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <analog_get_and_sort+0x128>)
 8001d20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			
			/* get max and min */
			#if ANALOG_CALIBRATION_IN_WHILE
			analog_print_analogmode();
			#endif
			analogmax[index] = (analogmax[index] < analog[index]) ? analog[index] : analogmax[index];
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	4a25      	ldr	r2, [pc, #148]	; (8001dbc <analog_get_and_sort+0x12c>)
 8001d28:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	4a22      	ldr	r2, [pc, #136]	; (8001db8 <analog_get_and_sort+0x128>)
 8001d30:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	428a      	cmp	r2, r1
 8001d38:	bf38      	it	cc
 8001d3a:	460a      	movcc	r2, r1
 8001d3c:	b291      	uxth	r1, r2
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <analog_get_and_sort+0x12c>)
 8001d40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			analogmin[index] = (analogmin[index] > analog[index]) ? analog[index] : analogmin[index];
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <analog_get_and_sort+0x130>)
 8001d48:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <analog_get_and_sort+0x128>)
 8001d50:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	428a      	cmp	r2, r1
 8001d58:	bf28      	it	cs
 8001d5a:	460a      	movcs	r2, r1
 8001d5c:	b291      	uxth	r1, r2
 8001d5e:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <analog_get_and_sort+0x130>)
 8001d60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(unsigned char index = 0; index < CALIBRATIONSIZE; index++)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	3301      	adds	r3, #1
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b0f      	cmp	r3, #15
 8001d6e:	d99c      	bls.n	8001caa <analog_get_and_sort+0x1a>
	#if ANALOG_CALIBRATION_IN_WHILE
	// printf(" get sensor raw value ... \r\n");
	// printf("sensgettime = %2d\r\n", sensgettime);
	// analog_array_print(analograw);
	#endif
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	713b      	strb	r3, [r7, #4]
 8001d74:	e00f      	b.n	8001d96 <analog_get_and_sort+0x106>
    {
		#if ANALOG_CALIBRATION_IN_WHILE
		// printf("analogbuffers[%2d][%2d] = %5d\r\n", sensgettime, index, analograw[index]);
		#endif
		analogbuffers[sensgettime][index] = analograw[index];
 8001d76:	7939      	ldrb	r1, [r7, #4]
 8001d78:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <analog_get_and_sort+0x120>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	793b      	ldrb	r3, [r7, #4]
 8001d7e:	4811      	ldr	r0, [pc, #68]	; (8001dc4 <analog_get_and_sort+0x134>)
 8001d80:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8001d84:	490b      	ldr	r1, [pc, #44]	; (8001db4 <analog_get_and_sort+0x124>)
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	4413      	add	r3, r2
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(unsigned char index = 0; CALIBRATIONSIZE > index; index++)
 8001d90:	793b      	ldrb	r3, [r7, #4]
 8001d92:	3301      	adds	r3, #1
 8001d94:	713b      	strb	r3, [r7, #4]
 8001d96:	793b      	ldrb	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d9ec      	bls.n	8001d76 <analog_get_and_sort+0xe6>
	}
	sensgettime++;
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <analog_get_and_sort+0x120>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <analog_get_and_sort+0x120>)
 8001da4:	6013      	str	r3, [r2, #0]
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc90      	pop	{r4, r7}
 8001dae:	4770      	bx	lr
 8001db0:	20000260 	.word	0x20000260
 8001db4:	200002c8 	.word	0x200002c8
 8001db8:	20000240 	.word	0x20000240
 8001dbc:	200003e8 	.word	0x200003e8
 8001dc0:	20000284 	.word	0x20000284
 8001dc4:	20000264 	.word	0x20000264

08001dc8 <encoder_length>:
int16_t encoder_left, encoder_right;
double encoder;

/* public */
double encoder_length()
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length() > ");
    printf("encoder * (double) LENGTHPERPULSE = %6.1f * %1.5f = %7.5f\r\n", encoder, LENGTHPERPULSE, encoder * (double) LENGTHPERPULSE);
    #endif
    return (double) encoder * (double) LENGTHPERPULSE;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <encoder_length+0x30>)
 8001dce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dd2:	a307      	add	r3, pc, #28	; (adr r3, 8001df0 <encoder_length+0x28>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fc0e 	bl	80005f8 <__aeabi_dmul>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	ec43 2b17 	vmov	d7, r2, r3
}
 8001de4:	eeb0 0a47 	vmov.f32	s0, s14
 8001de8:	eef0 0a67 	vmov.f32	s1, s15
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	24a478cb 	.word	0x24a478cb
 8001df4:	40192ab8 	.word	0x40192ab8
 8001df8:	200007e8 	.word	0x200007e8
 8001dfc:	00000000 	.word	0x00000000

08001e00 <encoder_length_left>:

double encoder_length_left()
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_left() > ");
    printf("encoder_left * (double) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_left, LENGTHPERPULSE, encoder_left * (double) LENGTHPERPULSE);
    #endif
    return (double) encoder_left * (double) LENGTHPERPULSE;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <encoder_length_left+0x38>)
 8001e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb8a 	bl	8000524 <__aeabi_i2d>
 8001e10:	a307      	add	r3, pc, #28	; (adr r3, 8001e30 <encoder_length_left+0x30>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fbef 	bl	80005f8 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e22:	eeb0 0a47 	vmov.f32	s0, s14
 8001e26:	eef0 0a67 	vmov.f32	s1, s15
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	f3af 8000 	nop.w
 8001e30:	24a478cb 	.word	0x24a478cb
 8001e34:	40192ab8 	.word	0x40192ab8
 8001e38:	200007e0 	.word	0x200007e0
 8001e3c:	00000000 	.word	0x00000000

08001e40 <encoder_length_right>:

double encoder_length_right()
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_length_right() > ");
    printf("encoder_right * (double) LENGTHPERPULSE = %5d * %1.5f = %7.5f\r\n", encoder_right, LENGTHPERPULSE, encoder_right * (double) LENGTHPERPULSE);
    #endif
    return (double) encoder_right * (double) LENGTHPERPULSE;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <encoder_length_right+0x38>)
 8001e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb6a 	bl	8000524 <__aeabi_i2d>
 8001e50:	a307      	add	r3, pc, #28	; (adr r3, 8001e70 <encoder_length_right+0x30>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fbcf 	bl	80005f8 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e62:	eeb0 0a47 	vmov.f32	s0, s14
 8001e66:	eef0 0a67 	vmov.f32	s1, s15
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	f3af 8000 	nop.w
 8001e70:	24a478cb 	.word	0x24a478cb
 8001e74:	40192ab8 	.word	0x40192ab8
 8001e78:	200007f0 	.word	0x200007f0

08001e7c <encoder_set>:
    #endif
}

/* only read tim10_main */
void encoder_set()
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
    encoder_left = TIM1 -> CNT - ENCODER_MIDDLE;
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <encoder_set+0x5c>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	b21a      	sxth	r2, r3
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <encoder_set+0x60>)
 8001e90:	801a      	strh	r2, [r3, #0]
    encoder_right = -(TIM3 -> CNT - ENCODER_MIDDLE);
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <encoder_set+0x64>)
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <encoder_set+0x68>)
 8001ea2:	801a      	strh	r2, [r3, #0]
    encoder = (encoder_left + encoder_right) / (double) 2;
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <encoder_set+0x60>)
 8001ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <encoder_set+0x68>)
 8001eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fb35 	bl	8000524 <__aeabi_i2d>
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ec2:	f7fe fcc3 	bl	800084c <__aeabi_ddiv>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <encoder_set+0x6c>)
 8001ecc:	e9c1 2300 	strd	r2, r3, [r1]
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set() > ");
    printf("encoder_left = %6d, encoder_right = %6d, encoder = %6.1f\r\n", encoder_left, encoder_right, encoder);
    #endif

    encoder_set_middle();
 8001ed0:	f000 f84e 	bl	8001f70 <encoder_set_middle>
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40010000 	.word	0x40010000
 8001edc:	200007e0 	.word	0x200007e0
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	200007f0 	.word	0x200007f0
 8001ee8:	200007e8 	.word	0x200007e8

08001eec <encoder_init>:

void encoder_init()
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
    #if D_ENCODER
    printf("LENGTHPERPULSE = %7.2f\r\n", LENGTHPERPULSE);
    #endif
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <encoder_start>:
{
    encoder_stop();
}

void encoder_start()
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
    encoder_left = 0;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <encoder_start+0x3c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	801a      	strh	r2, [r3, #0]
    encoder_right = 0;
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <encoder_start+0x40>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	801a      	strh	r2, [r3, #0]
    encoder = 0;
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <encoder_start+0x44>)
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	e9c1 2300 	strd	r2, r3, [r1]

    encoder_set_middle();
 8001f1a:	f000 f829 	bl	8001f70 <encoder_set_middle>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001f1e:	213c      	movs	r1, #60	; 0x3c
 8001f20:	4808      	ldr	r0, [pc, #32]	; (8001f44 <encoder_start+0x48>)
 8001f22:	f006 fb23 	bl	800856c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001f26:	213c      	movs	r1, #60	; 0x3c
 8001f28:	4807      	ldr	r0, [pc, #28]	; (8001f48 <encoder_start+0x4c>)
 8001f2a:	f006 fb1f 	bl	800856c <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim10);
 8001f2e:	4807      	ldr	r0, [pc, #28]	; (8001f4c <encoder_start+0x50>)
 8001f30:	f006 f850 	bl	8007fd4 <HAL_TIM_Base_Start_IT>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200007e0 	.word	0x200007e0
 8001f3c:	200007f0 	.word	0x200007f0
 8001f40:	200007e8 	.word	0x200007e8
 8001f44:	200006c4 	.word	0x200006c4
 8001f48:	20000544 	.word	0x20000544
 8001f4c:	200004fc 	.word	0x200004fc

08001f50 <encoder_stop>:

void encoder_stop()
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001f54:	213c      	movs	r1, #60	; 0x3c
 8001f56:	4804      	ldr	r0, [pc, #16]	; (8001f68 <encoder_stop+0x18>)
 8001f58:	f006 fb96 	bl	8008688 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001f5c:	213c      	movs	r1, #60	; 0x3c
 8001f5e:	4803      	ldr	r0, [pc, #12]	; (8001f6c <encoder_stop+0x1c>)
 8001f60:	f006 fb92 	bl	8008688 <HAL_TIM_Encoder_Stop>
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	200006c4 	.word	0x200006c4
 8001f6c:	20000544 	.word	0x20000544

08001f70 <encoder_set_middle>:

/* private */
void encoder_set_middle()
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
    TIM1 -> CNT = ENCODER_MIDDLE;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <encoder_set_middle+0x20>)
 8001f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3 -> CNT = ENCODER_MIDDLE;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <encoder_set_middle+0x24>)
 8001f7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
    #if D_ENCODER_WHILE
    printf("encoder.c > encoder_set_middle() > ");
    printf("TIM1 -> CNT = %6lu, TIM3 -> CNT = %6lu\r\n", TIM1->CNT, TIM3->CNT);
    #endif
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40000400 	.word	0x40000400

08001f98 <flash_erase>:

const uint32_t start_address = 0x080E0000;
const uint32_t end_address = 0x080FFFFF;

void flash_erase(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_11;
 8001fa2:	230b      	movs	r3, #11
 8001fa4:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001faa:	2302      	movs	r3, #2
 8001fac:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);
 8001fb2:	463a      	mov	r2, r7
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f004 f96d 	bl	8006298 <HAL_FLASHEx_Erase>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <flash_writting>:

void flash_writting(uint32_t address, uint8_t *data, uint32_t size)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
#if USE_WRITE_FLASH
	HAL_FLASH_Unlock();
 8001fd2:	f003 ffff 	bl	8005fd4 <HAL_FLASH_Unlock>
	flash_erase();
 8001fd6:	f7ff ffdf 	bl	8001f98 <flash_erase>

	for (uint32_t add = address; add < (address + size); add++)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e00e      	b.n	8001ffe <flash_writting+0x38>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, add, *data);
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	6979      	ldr	r1, [r7, #20]
 8001fec:	2000      	movs	r0, #0
 8001fee:	f003 ff9d 	bl	8005f2c <HAL_FLASH_Program>
		data++;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
	for (uint32_t add = address; add < (address + size); add++)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	429a      	cmp	r2, r3
 8002008:	d3ea      	bcc.n	8001fe0 <flash_writting+0x1a>
	}

	HAL_FLASH_Lock();
 800200a:	f004 f805 	bl	8006018 <HAL_FLASH_Lock>
#endif
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <flash_reading>:

void flash_reading(uint32_t address, uint8_t *data, uint32_t size)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*) address, size);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4619      	mov	r1, r3
 8002028:	68b8      	ldr	r0, [r7, #8]
 800202a:	f007 fbfd 	bl	8009828 <memcpy>
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <flash_write>:

void flash_write()
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	flash_writting(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <flash_write+0x14>)
 800203e:	2260      	movs	r2, #96	; 0x60
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <flash_write+0x18>)
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ffbf 	bl	8001fc6 <flash_writting>
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	080e0000 	.word	0x080e0000
 8002050:	200007f8 	.word	0x200007f8

08002054 <flash_read>:

void flash_read()
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	flash_reading(start_address, (uint8_t *) &flashbuffer, sizeof(FlashBuffer));
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <flash_read+0x14>)
 800205a:	2260      	movs	r2, #96	; 0x60
 800205c:	4903      	ldr	r1, [pc, #12]	; (800206c <flash_read+0x18>)
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ffd9 	bl	8002016 <flash_reading>
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	080e0000 	.word	0x080e0000
 800206c:	200007f8 	.word	0x200007f8

08002070 <flash_init>:

/* flash_read called only this method. */
void flash_init()
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
	flash_read();
 8002074:	f7ff ffee 	bl	8002054 <flash_read>
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM14_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		#if !D_TIM6_WHILE
		tim6_main();
 800208e:	f001 fed3 	bl	8003e38 <tim6_main>
		#endif
	}

	if(htim->Instance == TIM10)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		#if !D_TIM7_WHILE
		tim7_main();
 800209c:	f001 ffe6 	bl	800406c <tim7_main>
		#endif
	}

	if(htim->Instance == TIM10)	// TIM10 // 1ms
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d101      	bne.n	80020ae <HAL_TIM_PeriodElapsedCallback+0x32>
	{
    #if !D_TIM10_WHILE
		tim10_main();
 80020aa:	f001 fd7d 	bl	8003ba8 <tim10_main>
    #endif
	}

	if (htim->Instance == TIM11)	// TIM11 // 1ms
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a06      	ldr	r2, [pc, #24]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d101      	bne.n	80020bc <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		tim11_main();
 80020b8:	f001 fe78 	bl	8003dac <tim11_main>
	}
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40001000 	.word	0x40001000
 80020c8:	40014400 	.word	0x40014400
 80020cc:	40014800 	.word	0x40014800

080020d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d4:	f002 fd40 	bl	8004b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020d8:	f000 f94c 	bl	8002374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020dc:	f000 fd6e 	bl	8002bbc <MX_GPIO_Init>
  MX_DMA_Init();
 80020e0:	f000 fd4c 	bl	8002b7c <MX_DMA_Init>
  MX_ADC1_Init();
 80020e4:	f000 f9b0 	bl	8002448 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 80020e8:	f000 fd1e 	bl	8002b28 <MX_USART6_UART_Init>
  MX_TIM6_Init();
 80020ec:	f000 fc44 	bl	8002978 <MX_TIM6_Init>
  MX_TIM4_Init();
 80020f0:	f000 fbde 	bl	80028b0 <MX_TIM4_Init>
  MX_TIM1_Init();
 80020f4:	f000 fb30 	bl	8002758 <MX_TIM1_Init>
  MX_TIM3_Init();
 80020f8:	f000 fb86 	bl	8002808 <MX_TIM3_Init>
  MX_TIM10_Init();
 80020fc:	f000 fca8 	bl	8002a50 <MX_TIM10_Init>
  MX_TIM11_Init();
 8002100:	f000 fcca 	bl	8002a98 <MX_TIM11_Init>
  MX_SPI2_Init();
 8002104:	f000 faf2 	bl	80026ec <MX_SPI2_Init>
  MX_I2C1_Init();
 8002108:	f000 fac2 	bl	8002690 <MX_I2C1_Init>
  MX_TIM14_Init();
 800210c:	f000 fce8 	bl	8002ae0 <MX_TIM14_Init>
  MX_TIM7_Init();
 8002110:	f000 fc68 	bl	80029e4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	printf(ESC_DEF);
 8002114:	4895      	ldr	r0, [pc, #596]	; (800236c <main+0x29c>)
 8002116:	f008 fa17 	bl	800a548 <iprintf>

	printf("\r\n\r\n\r\nStarting Program...\r\n\r\n");
 800211a:	4895      	ldr	r0, [pc, #596]	; (8002370 <main+0x2a0>)
 800211c:	f008 fa9a 	bl	800a654 <puts>

  main_init();
 8002120:	f000 fe36 	bl	8002d90 <main_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#if !D_LED
	while (1)
	{
    main_print_while();
 8002124:	f000 fe5e 	bl	8002de4 <main_print_while>

		if(switch_read_enter())
 8002128:	f7ff f9e6 	bl	80014f8 <switch_read_enter>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8111 	beq.w	8002356 <main+0x286>
		{
			switch(rotary_read())
 8002134:	f7ff f904 	bl	8001340 <rotary_read>
 8002138:	4603      	mov	r3, r0
 800213a:	2b0f      	cmp	r3, #15
 800213c:	f200 810d 	bhi.w	800235a <main+0x28a>
 8002140:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <main+0x78>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	08002189 	.word	0x08002189
 800214c:	080021c7 	.word	0x080021c7
 8002150:	080021e1 	.word	0x080021e1
 8002154:	080021fb 	.word	0x080021fb
 8002158:	08002215 	.word	0x08002215
 800215c:	0800222f 	.word	0x0800222f
 8002160:	08002249 	.word	0x08002249
 8002164:	08002263 	.word	0x08002263
 8002168:	0800227d 	.word	0x0800227d
 800216c:	08002297 	.word	0x08002297
 8002170:	080022b1 	.word	0x080022b1
 8002174:	080022cb 	.word	0x080022cb
 8002178:	080022e5 	.word	0x080022e5
 800217c:	080022ff 	.word	0x080022ff
 8002180:	08002319 	.word	0x08002319
 8002184:	08002333 	.word	0x08002333
      {
        case 0x00:
          if(rotary_read_playmode() == calibration)
 8002188:	f7ff f8b6 	bl	80012f8 <rotary_read_playmode>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10c      	bne.n	80021ac <main+0xdc>
          {
            /* min = 4096, max = 0, sensgettime = 0, HAL_ADC_Start_DMA() */
            analog_calibration_start();
 8002192:	f7ff fca1 	bl	8001ad8 <analog_calibration_start>

            while(switch_read_enter())
 8002196:	e001      	b.n	800219c <main+0xcc>
            {
              #if ANALOG_CALIBRATION_IN_WHILE
              analog_get_and_sort();
              #endif
              main_main();
 8002198:	f000 fe36 	bl	8002e08 <main_main>
            while(switch_read_enter())
 800219c:	f7ff f9ac 	bl	80014f8 <switch_read_enter>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f8      	bne.n	8002198 <main+0xc8>
            }

            /* analogmode = all, */
            analog_calibration_stop();
 80021a6:	f7ff fcbf 	bl	8001b28 <analog_calibration_stop>
              main_main();
            }

            running_stop();
          }
          break;	// case 0x00:
 80021aa:	e0d9      	b.n	8002360 <main+0x290>
            running_start();
 80021ac:	f000 fe00 	bl	8002db0 <running_start>
            while(switch_read_enter())
 80021b0:	e001      	b.n	80021b6 <main+0xe6>
              main_main();
 80021b2:	f000 fe29 	bl	8002e08 <main_main>
            while(switch_read_enter())
 80021b6:	f7ff f99f 	bl	80014f8 <switch_read_enter>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f8      	bne.n	80021b2 <main+0xe2>
            running_stop();
 80021c0:	f000 fe06 	bl	8002dd0 <running_stop>
          break;	// case 0x00:
 80021c4:	e0cc      	b.n	8002360 <main+0x290>
        case 0x01:	// 1
          running_start();
 80021c6:	f000 fdf3 	bl	8002db0 <running_start>

          while (switch_read_enter())
 80021ca:	e001      	b.n	80021d0 <main+0x100>
          {
            main_main();
 80021cc:	f000 fe1c 	bl	8002e08 <main_main>
          while (switch_read_enter())
 80021d0:	f7ff f992 	bl	80014f8 <switch_read_enter>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f8      	bne.n	80021cc <main+0xfc>
          }

          running_stop();
 80021da:	f000 fdf9 	bl	8002dd0 <running_stop>
          break;
 80021de:	e0bf      	b.n	8002360 <main+0x290>
        case 0x02:	// 2
          running_start();
 80021e0:	f000 fde6 	bl	8002db0 <running_start>

          while(switch_read_enter())
 80021e4:	e001      	b.n	80021ea <main+0x11a>
          {
            main_main();
 80021e6:	f000 fe0f 	bl	8002e08 <main_main>
          while(switch_read_enter())
 80021ea:	f7ff f985 	bl	80014f8 <switch_read_enter>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f8      	bne.n	80021e6 <main+0x116>
          }

          running_stop();
 80021f4:	f000 fdec 	bl	8002dd0 <running_stop>
          break;
 80021f8:	e0b2      	b.n	8002360 <main+0x290>
        case 0x03:	// 3
          running_start();
 80021fa:	f000 fdd9 	bl	8002db0 <running_start>

          while(switch_read_enter())
 80021fe:	e001      	b.n	8002204 <main+0x134>
          {
            main_main();
 8002200:	f000 fe02 	bl	8002e08 <main_main>
          while(switch_read_enter())
 8002204:	f7ff f978 	bl	80014f8 <switch_read_enter>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f8      	bne.n	8002200 <main+0x130>
          }

          running_stop();
 800220e:	f000 fddf 	bl	8002dd0 <running_stop>
          break;
 8002212:	e0a5      	b.n	8002360 <main+0x290>
        case 0x04:	// 4
          running_start();
 8002214:	f000 fdcc 	bl	8002db0 <running_start>

          while(switch_read_enter())
 8002218:	e001      	b.n	800221e <main+0x14e>
          {
            main_main();
 800221a:	f000 fdf5 	bl	8002e08 <main_main>
          while(switch_read_enter())
 800221e:	f7ff f96b 	bl	80014f8 <switch_read_enter>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f8      	bne.n	800221a <main+0x14a>
          }

          running_stop();
 8002228:	f000 fdd2 	bl	8002dd0 <running_stop>
          break;
 800222c:	e098      	b.n	8002360 <main+0x290>
        case 0x05:	// 5
          running_start();
 800222e:	f000 fdbf 	bl	8002db0 <running_start>

          while(switch_read_enter())
 8002232:	e001      	b.n	8002238 <main+0x168>
          {
            main_main();
 8002234:	f000 fde8 	bl	8002e08 <main_main>
          while(switch_read_enter())
 8002238:	f7ff f95e 	bl	80014f8 <switch_read_enter>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f8      	bne.n	8002234 <main+0x164>
          }

          running_stop();
 8002242:	f000 fdc5 	bl	8002dd0 <running_stop>
          break;
 8002246:	e08b      	b.n	8002360 <main+0x290>
        case 0x06:	// 6
          running_start();
 8002248:	f000 fdb2 	bl	8002db0 <running_start>

          while(switch_read_enter())
 800224c:	e001      	b.n	8002252 <main+0x182>
          {
            main_main();
 800224e:	f000 fddb 	bl	8002e08 <main_main>
          while(switch_read_enter())
 8002252:	f7ff f951 	bl	80014f8 <switch_read_enter>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f8      	bne.n	800224e <main+0x17e>
          }

          running_stop();
 800225c:	f000 fdb8 	bl	8002dd0 <running_stop>
          break;
 8002260:	e07e      	b.n	8002360 <main+0x290>
        case 0x07:	// 7
          running_start();
 8002262:	f000 fda5 	bl	8002db0 <running_start>

          while(switch_read_enter())
 8002266:	e001      	b.n	800226c <main+0x19c>
          {
            main_main();
 8002268:	f000 fdce 	bl	8002e08 <main_main>
          while(switch_read_enter())
 800226c:	f7ff f944 	bl	80014f8 <switch_read_enter>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f8      	bne.n	8002268 <main+0x198>
          }

          running_stop();
 8002276:	f000 fdab 	bl	8002dd0 <running_stop>
          break;
 800227a:	e071      	b.n	8002360 <main+0x290>
        case 0x08:	// 8
          running_start();
 800227c:	f000 fd98 	bl	8002db0 <running_start>

          while(switch_read_enter())
 8002280:	e001      	b.n	8002286 <main+0x1b6>
          {
            main_main();
 8002282:	f000 fdc1 	bl	8002e08 <main_main>
          while(switch_read_enter())
 8002286:	f7ff f937 	bl	80014f8 <switch_read_enter>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f8      	bne.n	8002282 <main+0x1b2>
          }

          running_stop();
 8002290:	f000 fd9e 	bl	8002dd0 <running_stop>
          break;
 8002294:	e064      	b.n	8002360 <main+0x290>
        case 0x09:	// 9
          running_start();
 8002296:	f000 fd8b 	bl	8002db0 <running_start>

          while(switch_read_enter())
 800229a:	e001      	b.n	80022a0 <main+0x1d0>
          {
            main_main();
 800229c:	f000 fdb4 	bl	8002e08 <main_main>
          while(switch_read_enter())
 80022a0:	f7ff f92a 	bl	80014f8 <switch_read_enter>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f8      	bne.n	800229c <main+0x1cc>
          }

          running_stop();
 80022aa:	f000 fd91 	bl	8002dd0 <running_stop>
          break;
 80022ae:	e057      	b.n	8002360 <main+0x290>
        case 0x0A:	// A
          running_start();
 80022b0:	f000 fd7e 	bl	8002db0 <running_start>

          while(switch_read_enter())
 80022b4:	e001      	b.n	80022ba <main+0x1ea>
          {
            main_main();
 80022b6:	f000 fda7 	bl	8002e08 <main_main>
          while(switch_read_enter())
 80022ba:	f7ff f91d 	bl	80014f8 <switch_read_enter>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f8      	bne.n	80022b6 <main+0x1e6>
          }

          running_stop();
 80022c4:	f000 fd84 	bl	8002dd0 <running_stop>
          break;
 80022c8:	e04a      	b.n	8002360 <main+0x290>
        case 0x0B:	// B
          running_start();
 80022ca:	f000 fd71 	bl	8002db0 <running_start>

          while(switch_read_enter())
 80022ce:	e001      	b.n	80022d4 <main+0x204>
          {
            main_main();
 80022d0:	f000 fd9a 	bl	8002e08 <main_main>
          while(switch_read_enter())
 80022d4:	f7ff f910 	bl	80014f8 <switch_read_enter>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f8      	bne.n	80022d0 <main+0x200>
          }

          running_stop();
 80022de:	f000 fd77 	bl	8002dd0 <running_stop>
          break;
 80022e2:	e03d      	b.n	8002360 <main+0x290>
        case 0x0C:	// C
          running_start();
 80022e4:	f000 fd64 	bl	8002db0 <running_start>

          while(switch_read_enter())
 80022e8:	e001      	b.n	80022ee <main+0x21e>
          {
            main_main();
 80022ea:	f000 fd8d 	bl	8002e08 <main_main>
          while(switch_read_enter())
 80022ee:	f7ff f903 	bl	80014f8 <switch_read_enter>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f8      	bne.n	80022ea <main+0x21a>
          }

          running_stop();
 80022f8:	f000 fd6a 	bl	8002dd0 <running_stop>
          break;
 80022fc:	e030      	b.n	8002360 <main+0x290>
        case 0x0D:	// D
          running_start();
 80022fe:	f000 fd57 	bl	8002db0 <running_start>

          while(switch_read_enter())
 8002302:	e001      	b.n	8002308 <main+0x238>
          {
            main_main();
 8002304:	f000 fd80 	bl	8002e08 <main_main>
          while(switch_read_enter())
 8002308:	f7ff f8f6 	bl	80014f8 <switch_read_enter>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f8      	bne.n	8002304 <main+0x234>
          }

          running_stop();
 8002312:	f000 fd5d 	bl	8002dd0 <running_stop>
          break;
 8002316:	e023      	b.n	8002360 <main+0x290>
        case 0x0E:	// E
          running_start();
 8002318:	f000 fd4a 	bl	8002db0 <running_start>

          while(switch_read_enter())
 800231c:	e001      	b.n	8002322 <main+0x252>
          {
            main_main();
 800231e:	f000 fd73 	bl	8002e08 <main_main>
          while(switch_read_enter())
 8002322:	f7ff f8e9 	bl	80014f8 <switch_read_enter>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f8      	bne.n	800231e <main+0x24e>
          }

          running_stop();
 800232c:	f000 fd50 	bl	8002dd0 <running_stop>
          break;
 8002330:	e016      	b.n	8002360 <main+0x290>
        case 0x0F:
          if(rotary_read_playmode()== flash_print)
 8002332:	f7fe ffe1 	bl	80012f8 <rotary_read_playmode>
 8002336:	4603      	mov	r3, r0
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d010      	beq.n	800235e <main+0x28e>
          {
          }
          else    // if(!(rotary_read_playmode()== flash_print))
          {
            running_start();
 800233c:	f000 fd38 	bl	8002db0 <running_start>

            while(switch_read_enter())
 8002340:	e001      	b.n	8002346 <main+0x276>
            {
              main_main();
 8002342:	f000 fd61 	bl	8002e08 <main_main>
            while(switch_read_enter())
 8002346:	f7ff f8d7 	bl	80014f8 <switch_read_enter>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f8      	bne.n	8002342 <main+0x272>
            }

            running_stop();
 8002350:	f000 fd3e 	bl	8002dd0 <running_stop>
          }
          break;
 8002354:	e003      	b.n	800235e <main+0x28e>
        default:
          break;
      } // switch(rotary_value)
		}	// if(switch_read_enter())
 8002356:	bf00      	nop
 8002358:	e002      	b.n	8002360 <main+0x290>
          break;
 800235a:	bf00      	nop
 800235c:	e000      	b.n	8002360 <main+0x290>
          break;
 800235e:	bf00      	nop
    HAL_Delay(500);
 8002360:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002364:	f002 fc6a 	bl	8004c3c <HAL_Delay>
    main_print_while();
 8002368:	e6dc      	b.n	8002124 <main+0x54>
 800236a:	bf00      	nop
 800236c:	0800e4b4 	.word	0x0800e4b4
 8002370:	0800e4bc 	.word	0x0800e4bc

08002374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b094      	sub	sp, #80	; 0x50
 8002378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800237a:	f107 0320 	add.w	r3, r7, #32
 800237e:	2230      	movs	r2, #48	; 0x30
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f007 fa5e 	bl	8009844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	4b28      	ldr	r3, [pc, #160]	; (8002440 <SystemClock_Config+0xcc>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <SystemClock_Config+0xcc>)
 80023a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a6:	6413      	str	r3, [r2, #64]	; 0x40
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <SystemClock_Config+0xcc>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b4:	2300      	movs	r3, #0
 80023b6:	607b      	str	r3, [r7, #4]
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <SystemClock_Config+0xd0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a21      	ldr	r2, [pc, #132]	; (8002444 <SystemClock_Config+0xd0>)
 80023be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c2:	6013      	str	r3, [r2, #0]
 80023c4:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <SystemClock_Config+0xd0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023d0:	2301      	movs	r3, #1
 80023d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80023d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023da:	2302      	movs	r3, #2
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023e4:	2308      	movs	r3, #8
 80023e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023e8:	23a8      	movs	r3, #168	; 0xa8
 80023ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023ec:	2302      	movs	r3, #2
 80023ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023f0:	2304      	movs	r3, #4
 80023f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f4:	f107 0320 	add.w	r3, r7, #32
 80023f8:	4618      	mov	r0, r3
 80023fa:	f004 fb81 	bl	8006b00 <HAL_RCC_OscConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002404:	f000 fd1e 	bl	8002e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002408:	230f      	movs	r3, #15
 800240a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800240c:	2302      	movs	r3, #2
 800240e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002414:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002418:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800241a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	2105      	movs	r1, #5
 8002426:	4618      	mov	r0, r3
 8002428:	f004 fde2 	bl	8006ff0 <HAL_RCC_ClockConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002432:	f000 fd07 	bl	8002e44 <Error_Handler>
  }
}
 8002436:	bf00      	nop
 8002438:	3750      	adds	r7, #80	; 0x50
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40007000 	.word	0x40007000

08002448 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800244e:	463b      	mov	r3, r7
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800245a:	4b8a      	ldr	r3, [pc, #552]	; (8002684 <MX_ADC1_Init+0x23c>)
 800245c:	4a8a      	ldr	r2, [pc, #552]	; (8002688 <MX_ADC1_Init+0x240>)
 800245e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002460:	4b88      	ldr	r3, [pc, #544]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002462:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002466:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002468:	4b86      	ldr	r3, [pc, #536]	; (8002684 <MX_ADC1_Init+0x23c>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800246e:	4b85      	ldr	r3, [pc, #532]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002470:	2201      	movs	r2, #1
 8002472:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002474:	4b83      	ldr	r3, [pc, #524]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002476:	2201      	movs	r2, #1
 8002478:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800247a:	4b82      	ldr	r3, [pc, #520]	; (8002684 <MX_ADC1_Init+0x23c>)
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002482:	4b80      	ldr	r3, [pc, #512]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002484:	2200      	movs	r2, #0
 8002486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002488:	4b7e      	ldr	r3, [pc, #504]	; (8002684 <MX_ADC1_Init+0x23c>)
 800248a:	4a80      	ldr	r2, [pc, #512]	; (800268c <MX_ADC1_Init+0x244>)
 800248c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800248e:	4b7d      	ldr	r3, [pc, #500]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002490:	2200      	movs	r2, #0
 8002492:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8002494:	4b7b      	ldr	r3, [pc, #492]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002496:	2210      	movs	r2, #16
 8002498:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800249a:	4b7a      	ldr	r3, [pc, #488]	; (8002684 <MX_ADC1_Init+0x23c>)
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024a2:	4b78      	ldr	r3, [pc, #480]	; (8002684 <MX_ADC1_Init+0x23c>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024a8:	4876      	ldr	r0, [pc, #472]	; (8002684 <MX_ADC1_Init+0x23c>)
 80024aa:	f002 fbeb 	bl	8004c84 <HAL_ADC_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80024b4:	f000 fcc6 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80024b8:	2309      	movs	r3, #9
 80024ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024bc:	2301      	movs	r3, #1
 80024be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80024c0:	2303      	movs	r3, #3
 80024c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024c4:	463b      	mov	r3, r7
 80024c6:	4619      	mov	r1, r3
 80024c8:	486e      	ldr	r0, [pc, #440]	; (8002684 <MX_ADC1_Init+0x23c>)
 80024ca:	f002 fd9d 	bl	8005008 <HAL_ADC_ConfigChannel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80024d4:	f000 fcb6 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80024d8:	230a      	movs	r3, #10
 80024da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80024dc:	2302      	movs	r3, #2
 80024de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024e0:	463b      	mov	r3, r7
 80024e2:	4619      	mov	r1, r3
 80024e4:	4867      	ldr	r0, [pc, #412]	; (8002684 <MX_ADC1_Init+0x23c>)
 80024e6:	f002 fd8f 	bl	8005008 <HAL_ADC_ConfigChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80024f0:	f000 fca8 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80024f4:	2308      	movs	r3, #8
 80024f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80024f8:	2303      	movs	r3, #3
 80024fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024fc:	463b      	mov	r3, r7
 80024fe:	4619      	mov	r1, r3
 8002500:	4860      	ldr	r0, [pc, #384]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002502:	f002 fd81 	bl	8005008 <HAL_ADC_ConfigChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800250c:	f000 fc9a 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002510:	230b      	movs	r3, #11
 8002512:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002514:	2304      	movs	r3, #4
 8002516:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002518:	463b      	mov	r3, r7
 800251a:	4619      	mov	r1, r3
 800251c:	4859      	ldr	r0, [pc, #356]	; (8002684 <MX_ADC1_Init+0x23c>)
 800251e:	f002 fd73 	bl	8005008 <HAL_ADC_ConfigChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002528:	f000 fc8c 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800252c:	230f      	movs	r3, #15
 800252e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002530:	2305      	movs	r3, #5
 8002532:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002534:	463b      	mov	r3, r7
 8002536:	4619      	mov	r1, r3
 8002538:	4852      	ldr	r0, [pc, #328]	; (8002684 <MX_ADC1_Init+0x23c>)
 800253a:	f002 fd65 	bl	8005008 <HAL_ADC_ConfigChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8002544:	f000 fc7e 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002548:	230c      	movs	r3, #12
 800254a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800254c:	2306      	movs	r3, #6
 800254e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002550:	463b      	mov	r3, r7
 8002552:	4619      	mov	r1, r3
 8002554:	484b      	ldr	r0, [pc, #300]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002556:	f002 fd57 	bl	8005008 <HAL_ADC_ConfigChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8002560:	f000 fc70 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002564:	230e      	movs	r3, #14
 8002566:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8002568:	2307      	movs	r3, #7
 800256a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800256c:	463b      	mov	r3, r7
 800256e:	4619      	mov	r1, r3
 8002570:	4844      	ldr	r0, [pc, #272]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002572:	f002 fd49 	bl	8005008 <HAL_ADC_ConfigChannel>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800257c:	f000 fc62 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002580:	230d      	movs	r3, #13
 8002582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002584:	2308      	movs	r3, #8
 8002586:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002588:	463b      	mov	r3, r7
 800258a:	4619      	mov	r1, r3
 800258c:	483d      	ldr	r0, [pc, #244]	; (8002684 <MX_ADC1_Init+0x23c>)
 800258e:	f002 fd3b 	bl	8005008 <HAL_ADC_ConfigChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8002598:	f000 fc54 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800259c:	2307      	movs	r3, #7
 800259e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80025a0:	2309      	movs	r3, #9
 80025a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025a4:	463b      	mov	r3, r7
 80025a6:	4619      	mov	r1, r3
 80025a8:	4836      	ldr	r0, [pc, #216]	; (8002684 <MX_ADC1_Init+0x23c>)
 80025aa:	f002 fd2d 	bl	8005008 <HAL_ADC_ConfigChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80025b4:	f000 fc46 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80025bc:	230a      	movs	r3, #10
 80025be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025c0:	463b      	mov	r3, r7
 80025c2:	4619      	mov	r1, r3
 80025c4:	482f      	ldr	r0, [pc, #188]	; (8002684 <MX_ADC1_Init+0x23c>)
 80025c6:	f002 fd1f 	bl	8005008 <HAL_ADC_ConfigChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80025d0:	f000 fc38 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80025d4:	2306      	movs	r3, #6
 80025d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80025d8:	230b      	movs	r3, #11
 80025da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025dc:	463b      	mov	r3, r7
 80025de:	4619      	mov	r1, r3
 80025e0:	4828      	ldr	r0, [pc, #160]	; (8002684 <MX_ADC1_Init+0x23c>)
 80025e2:	f002 fd11 	bl	8005008 <HAL_ADC_ConfigChannel>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80025ec:	f000 fc2a 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80025f4:	230c      	movs	r3, #12
 80025f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f8:	463b      	mov	r3, r7
 80025fa:	4619      	mov	r1, r3
 80025fc:	4821      	ldr	r0, [pc, #132]	; (8002684 <MX_ADC1_Init+0x23c>)
 80025fe:	f002 fd03 	bl	8005008 <HAL_ADC_ConfigChannel>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8002608:	f000 fc1c 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800260c:	2305      	movs	r3, #5
 800260e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8002610:	230d      	movs	r3, #13
 8002612:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002614:	463b      	mov	r3, r7
 8002616:	4619      	mov	r1, r3
 8002618:	481a      	ldr	r0, [pc, #104]	; (8002684 <MX_ADC1_Init+0x23c>)
 800261a:	f002 fcf5 	bl	8005008 <HAL_ADC_ConfigChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8002624:	f000 fc0e 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002628:	2302      	movs	r3, #2
 800262a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 800262c:	230e      	movs	r3, #14
 800262e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002630:	463b      	mov	r3, r7
 8002632:	4619      	mov	r1, r3
 8002634:	4813      	ldr	r0, [pc, #76]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002636:	f002 fce7 	bl	8005008 <HAL_ADC_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8002640:	f000 fc00 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002644:	2304      	movs	r3, #4
 8002646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 8002648:	230f      	movs	r3, #15
 800264a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800264c:	463b      	mov	r3, r7
 800264e:	4619      	mov	r1, r3
 8002650:	480c      	ldr	r0, [pc, #48]	; (8002684 <MX_ADC1_Init+0x23c>)
 8002652:	f002 fcd9 	bl	8005008 <HAL_ADC_ConfigChannel>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_ADC1_Init+0x218>
  {
    Error_Handler();
 800265c:	f000 fbf2 	bl	8002e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002660:	2303      	movs	r3, #3
 8002662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 8002664:	2310      	movs	r3, #16
 8002666:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002668:	463b      	mov	r3, r7
 800266a:	4619      	mov	r1, r3
 800266c:	4805      	ldr	r0, [pc, #20]	; (8002684 <MX_ADC1_Init+0x23c>)
 800266e:	f002 fccb 	bl	8005008 <HAL_ADC_ConfigChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_ADC1_Init+0x234>
  {
    Error_Handler();
 8002678:	f000 fbe4 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000058c 	.word	0x2000058c
 8002688:	40012000 	.word	0x40012000
 800268c:	0f000001 	.word	0x0f000001

08002690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <MX_I2C1_Init+0x50>)
 8002696:	4a13      	ldr	r2, [pc, #76]	; (80026e4 <MX_I2C1_Init+0x54>)
 8002698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <MX_I2C1_Init+0x50>)
 800269c:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <MX_I2C1_Init+0x58>)
 800269e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026a0:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <MX_I2C1_Init+0x50>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <MX_I2C1_Init+0x50>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <MX_I2C1_Init+0x50>)
 80026ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <MX_I2C1_Init+0x50>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <MX_I2C1_Init+0x50>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026c0:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <MX_I2C1_Init+0x50>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MX_I2C1_Init+0x50>)
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026cc:	4804      	ldr	r0, [pc, #16]	; (80026e0 <MX_I2C1_Init+0x50>)
 80026ce:	f004 f8d3 	bl	8006878 <HAL_I2C_Init>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80026d8:	f000 fbb4 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200004a8 	.word	0x200004a8
 80026e4:	40005400 	.word	0x40005400
 80026e8:	000186a0 	.word	0x000186a0

080026ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80026f0:	4b17      	ldr	r3, [pc, #92]	; (8002750 <MX_SPI2_Init+0x64>)
 80026f2:	4a18      	ldr	r2, [pc, #96]	; (8002754 <MX_SPI2_Init+0x68>)
 80026f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <MX_SPI2_Init+0x64>)
 80026f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80026fe:	4b14      	ldr	r3, [pc, #80]	; (8002750 <MX_SPI2_Init+0x64>)
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002704:	4b12      	ldr	r3, [pc, #72]	; (8002750 <MX_SPI2_Init+0x64>)
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <MX_SPI2_Init+0x64>)
 800270c:	2202      	movs	r2, #2
 800270e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <MX_SPI2_Init+0x64>)
 8002712:	2201      	movs	r2, #1
 8002714:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <MX_SPI2_Init+0x64>)
 8002718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800271c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <MX_SPI2_Init+0x64>)
 8002720:	2228      	movs	r2, #40	; 0x28
 8002722:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <MX_SPI2_Init+0x64>)
 8002726:	2200      	movs	r2, #0
 8002728:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <MX_SPI2_Init+0x64>)
 800272c:	2200      	movs	r2, #0
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <MX_SPI2_Init+0x64>)
 8002732:	2200      	movs	r2, #0
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <MX_SPI2_Init+0x64>)
 8002738:	220a      	movs	r2, #10
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800273c:	4804      	ldr	r0, [pc, #16]	; (8002750 <MX_SPI2_Init+0x64>)
 800273e:	f004 fe51 	bl	80073e4 <HAL_SPI_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002748:	f000 fb7c 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000408 	.word	0x20000408
 8002754:	40003800 	.word	0x40003800

08002758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08c      	sub	sp, #48	; 0x30
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f007 f86c 	bl	8009844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <MX_TIM1_Init+0xa8>)
 8002776:	4a23      	ldr	r2, [pc, #140]	; (8002804 <MX_TIM1_Init+0xac>)
 8002778:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800277a:	4b21      	ldr	r3, [pc, #132]	; (8002800 <MX_TIM1_Init+0xa8>)
 800277c:	2200      	movs	r2, #0
 800277e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002780:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <MX_TIM1_Init+0xa8>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4096;
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <MX_TIM1_Init+0xa8>)
 8002788:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800278c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <MX_TIM1_Init+0xa8>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002794:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <MX_TIM1_Init+0xa8>)
 8002796:	2200      	movs	r2, #0
 8002798:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <MX_TIM1_Init+0xa8>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027a0:	2303      	movs	r3, #3
 80027a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027a8:	2301      	movs	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027b8:	2301      	movs	r3, #1
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027bc:	2300      	movs	r3, #0
 80027be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80027c4:	f107 030c 	add.w	r3, r7, #12
 80027c8:	4619      	mov	r1, r3
 80027ca:	480d      	ldr	r0, [pc, #52]	; (8002800 <MX_TIM1_Init+0xa8>)
 80027cc:	f005 fe28 	bl	8008420 <HAL_TIM_Encoder_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80027d6:	f000 fb35 	bl	8002e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4806      	ldr	r0, [pc, #24]	; (8002800 <MX_TIM1_Init+0xa8>)
 80027e8:	f006 fc4e 	bl	8009088 <HAL_TIMEx_MasterConfigSynchronization>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80027f2:	f000 fb27 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	3730      	adds	r7, #48	; 0x30
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200006c4 	.word	0x200006c4
 8002804:	40010000 	.word	0x40010000

08002808 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800280e:	f107 030c 	add.w	r3, r7, #12
 8002812:	2224      	movs	r2, #36	; 0x24
 8002814:	2100      	movs	r1, #0
 8002816:	4618      	mov	r0, r3
 8002818:	f007 f814 	bl	8009844 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002824:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <MX_TIM3_Init+0xa0>)
 8002826:	4a21      	ldr	r2, [pc, #132]	; (80028ac <MX_TIM3_Init+0xa4>)
 8002828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <MX_TIM3_Init+0xa0>)
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	4b1d      	ldr	r3, [pc, #116]	; (80028a8 <MX_TIM3_Init+0xa0>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 8002836:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <MX_TIM3_Init+0xa0>)
 8002838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800283c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283e:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <MX_TIM3_Init+0xa0>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002844:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <MX_TIM3_Init+0xa0>)
 8002846:	2200      	movs	r2, #0
 8002848:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800284a:	2303      	movs	r3, #3
 800284c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002852:	2301      	movs	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002862:	2301      	movs	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002866:	2300      	movs	r3, #0
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	4619      	mov	r1, r3
 8002874:	480c      	ldr	r0, [pc, #48]	; (80028a8 <MX_TIM3_Init+0xa0>)
 8002876:	f005 fdd3 	bl	8008420 <HAL_TIM_Encoder_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002880:	f000 fae0 	bl	8002e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002884:	2300      	movs	r3, #0
 8002886:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	4619      	mov	r1, r3
 8002890:	4805      	ldr	r0, [pc, #20]	; (80028a8 <MX_TIM3_Init+0xa0>)
 8002892:	f006 fbf9 	bl	8009088 <HAL_TIMEx_MasterConfigSynchronization>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800289c:	f000 fad2 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	3730      	adds	r7, #48	; 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000544 	.word	0x20000544
 80028ac:	40000400 	.word	0x40000400

080028b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b6:	f107 0320 	add.w	r3, r7, #32
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028c0:	1d3b      	adds	r3, r7, #4
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
 80028cc:	611a      	str	r2, [r3, #16]
 80028ce:	615a      	str	r2, [r3, #20]
 80028d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <MX_TIM4_Init+0xc0>)
 80028d4:	4a27      	ldr	r2, [pc, #156]	; (8002974 <MX_TIM4_Init+0xc4>)
 80028d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <MX_TIM4_Init+0xc0>)
 80028da:	2202      	movs	r2, #2
 80028dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028de:	4b24      	ldr	r3, [pc, #144]	; (8002970 <MX_TIM4_Init+0xc0>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80028e4:	4b22      	ldr	r3, [pc, #136]	; (8002970 <MX_TIM4_Init+0xc0>)
 80028e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ec:	4b20      	ldr	r3, [pc, #128]	; (8002970 <MX_TIM4_Init+0xc0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f2:	4b1f      	ldr	r3, [pc, #124]	; (8002970 <MX_TIM4_Init+0xc0>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80028f8:	481d      	ldr	r0, [pc, #116]	; (8002970 <MX_TIM4_Init+0xc0>)
 80028fa:	f005 fc0a 	bl	8008112 <HAL_TIM_PWM_Init>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002904:	f000 fa9e 	bl	8002e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002910:	f107 0320 	add.w	r3, r7, #32
 8002914:	4619      	mov	r1, r3
 8002916:	4816      	ldr	r0, [pc, #88]	; (8002970 <MX_TIM4_Init+0xc0>)
 8002918:	f006 fbb6 	bl	8009088 <HAL_TIMEx_MasterConfigSynchronization>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002922:	f000 fa8f 	bl	8002e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002926:	2360      	movs	r3, #96	; 0x60
 8002928:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	2200      	movs	r2, #0
 800293a:	4619      	mov	r1, r3
 800293c:	480c      	ldr	r0, [pc, #48]	; (8002970 <MX_TIM4_Init+0xc0>)
 800293e:	f006 f843 	bl	80089c8 <HAL_TIM_PWM_ConfigChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002948:	f000 fa7c 	bl	8002e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800294c:	1d3b      	adds	r3, r7, #4
 800294e:	2204      	movs	r2, #4
 8002950:	4619      	mov	r1, r3
 8002952:	4807      	ldr	r0, [pc, #28]	; (8002970 <MX_TIM4_Init+0xc0>)
 8002954:	f006 f838 	bl	80089c8 <HAL_TIM_PWM_ConfigChannel>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800295e:	f000 fa71 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002962:	4803      	ldr	r0, [pc, #12]	; (8002970 <MX_TIM4_Init+0xc0>)
 8002964:	f000 ff1a 	bl	800379c <HAL_TIM_MspPostInit>

}
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	; 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000460 	.word	0x20000460
 8002974:	40000800 	.word	0x40000800

08002978 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297e:	463b      	mov	r3, r7
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <MX_TIM6_Init+0x64>)
 8002988:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <MX_TIM6_Init+0x68>)
 800298a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <MX_TIM6_Init+0x64>)
 800298e:	2204      	movs	r2, #4
 8002990:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002992:	4b12      	ldr	r3, [pc, #72]	; (80029dc <MX_TIM6_Init+0x64>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 33599;
 8002998:	4b10      	ldr	r3, [pc, #64]	; (80029dc <MX_TIM6_Init+0x64>)
 800299a:	f248 323f 	movw	r2, #33599	; 0x833f
 800299e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <MX_TIM6_Init+0x64>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80029a6:	480d      	ldr	r0, [pc, #52]	; (80029dc <MX_TIM6_Init+0x64>)
 80029a8:	f005 fac4 	bl	8007f34 <HAL_TIM_Base_Init>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80029b2:	f000 fa47 	bl	8002e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80029be:	463b      	mov	r3, r7
 80029c0:	4619      	mov	r1, r3
 80029c2:	4806      	ldr	r0, [pc, #24]	; (80029dc <MX_TIM6_Init+0x64>)
 80029c4:	f006 fb60 	bl	8009088 <HAL_TIMEx_MasterConfigSynchronization>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80029ce:	f000 fa39 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2000067c 	.word	0x2000067c
 80029e0:	40001000 	.word	0x40001000

080029e4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ea:	463b      	mov	r3, r7
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <MX_TIM7_Init+0x64>)
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <MX_TIM7_Init+0x68>)
 80029f6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <MX_TIM7_Init+0x64>)
 80029fa:	2204      	movs	r2, #4
 80029fc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <MX_TIM7_Init+0x64>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 33599;
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <MX_TIM7_Init+0x64>)
 8002a06:	f248 323f 	movw	r2, #33599	; 0x833f
 8002a0a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <MX_TIM7_Init+0x64>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a12:	480d      	ldr	r0, [pc, #52]	; (8002a48 <MX_TIM7_Init+0x64>)
 8002a14:	f005 fa8e 	bl	8007f34 <HAL_TIM_Base_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002a1e:	f000 fa11 	bl	8002e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a2a:	463b      	mov	r3, r7
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4806      	ldr	r0, [pc, #24]	; (8002a48 <MX_TIM7_Init+0x64>)
 8002a30:	f006 fb2a 	bl	8009088 <HAL_TIMEx_MasterConfigSynchronization>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002a3a:	f000 fa03 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000798 	.word	0x20000798
 8002a4c:	40001400 	.word	0x40001400

08002a50 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <MX_TIM10_Init+0x40>)
 8002a56:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <MX_TIM10_Init+0x44>)
 8002a58:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <MX_TIM10_Init+0x40>)
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <MX_TIM10_Init+0x40>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <MX_TIM10_Init+0x40>)
 8002a68:	f248 323f 	movw	r2, #33599	; 0x833f
 8002a6c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <MX_TIM10_Init+0x40>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <MX_TIM10_Init+0x40>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002a7a:	4805      	ldr	r0, [pc, #20]	; (8002a90 <MX_TIM10_Init+0x40>)
 8002a7c:	f005 fa5a 	bl	8007f34 <HAL_TIM_Base_Init>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002a86:	f000 f9dd 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200004fc 	.word	0x200004fc
 8002a94:	40014400 	.word	0x40014400

08002a98 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <MX_TIM11_Init+0x40>)
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <MX_TIM11_Init+0x44>)
 8002aa0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4;
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <MX_TIM11_Init+0x40>)
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <MX_TIM11_Init+0x40>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 33599;
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <MX_TIM11_Init+0x40>)
 8002ab0:	f248 323f 	movw	r2, #33599	; 0x833f
 8002ab4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <MX_TIM11_Init+0x40>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <MX_TIM11_Init+0x40>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002ac2:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_TIM11_Init+0x40>)
 8002ac4:	f005 fa36 	bl	8007f34 <HAL_TIM_Base_Init>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002ace:	f000 f9b9 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	200005d4 	.word	0x200005d4
 8002adc:	40014800 	.word	0x40014800

08002ae0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <MX_TIM14_Init+0x40>)
 8002ae6:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <MX_TIM14_Init+0x44>)
 8002ae8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4;
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <MX_TIM14_Init+0x40>)
 8002aec:	2204      	movs	r2, #4
 8002aee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <MX_TIM14_Init+0x40>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 33599;
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <MX_TIM14_Init+0x40>)
 8002af8:	f248 323f 	movw	r2, #33599	; 0x833f
 8002afc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <MX_TIM14_Init+0x40>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <MX_TIM14_Init+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002b0a:	4805      	ldr	r0, [pc, #20]	; (8002b20 <MX_TIM14_Init+0x40>)
 8002b0c:	f005 fa12 	bl	8007f34 <HAL_TIM_Base_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002b16:	f000 f995 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000750 	.word	0x20000750
 8002b24:	40002000 	.word	0x40002000

08002b28 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <MX_USART6_UART_Init+0x4c>)
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <MX_USART6_UART_Init+0x50>)
 8002b30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <MX_USART6_UART_Init+0x4c>)
 8002b34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002b38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <MX_USART6_UART_Init+0x4c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <MX_USART6_UART_Init+0x4c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002b46:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <MX_USART6_UART_Init+0x4c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <MX_USART6_UART_Init+0x4c>)
 8002b4e:	220c      	movs	r2, #12
 8002b50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b52:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <MX_USART6_UART_Init+0x4c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <MX_USART6_UART_Init+0x4c>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002b5e:	4805      	ldr	r0, [pc, #20]	; (8002b74 <MX_USART6_UART_Init+0x4c>)
 8002b60:	f006 fb22 	bl	80091a8 <HAL_UART_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002b6a:	f000 f96b 	bl	8002e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000070c 	.word	0x2000070c
 8002b78:	40011400 	.word	0x40011400

08002b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <MX_DMA_Init+0x3c>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <MX_DMA_Init+0x3c>)
 8002b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <MX_DMA_Init+0x3c>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	607b      	str	r3, [r7, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	2038      	movs	r0, #56	; 0x38
 8002ba4:	f002 fdab 	bl	80056fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ba8:	2038      	movs	r0, #56	; 0x38
 8002baa:	f002 fdc4 	bl	8005736 <HAL_NVIC_EnableIRQ>

}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a68      	ldr	r2, [pc, #416]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b66      	ldr	r3, [pc, #408]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	4b62      	ldr	r3, [pc, #392]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a61      	ldr	r2, [pc, #388]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b5f      	ldr	r3, [pc, #380]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	4a5a      	ldr	r2, [pc, #360]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1a:	4b58      	ldr	r3, [pc, #352]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	4b54      	ldr	r3, [pc, #336]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	4a53      	ldr	r2, [pc, #332]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	6313      	str	r3, [r2, #48]	; 0x30
 8002c36:	4b51      	ldr	r3, [pc, #324]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	4b4d      	ldr	r3, [pc, #308]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a4c      	ldr	r2, [pc, #304]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002c4c:	f043 0308 	orr.w	r3, r3, #8
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <MX_GPIO_Init+0x1c0>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRV2_PH_Pin|LED_White_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8002c64:	4846      	ldr	r0, [pc, #280]	; (8002d80 <MX_GPIO_Init+0x1c4>)
 8002c66:	f003 fded 	bl	8006844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_nCS_Pin|LED_Red_Pin, GPIO_PIN_RESET);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002c70:	4844      	ldr	r0, [pc, #272]	; (8002d84 <MX_GPIO_Init+0x1c8>)
 8002c72:	f003 fde7 	bl	8006844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002c7c:	4842      	ldr	r0, [pc, #264]	; (8002d88 <MX_GPIO_Init+0x1cc>)
 8002c7e:	f003 fde1 	bl	8006844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV1_PH_GPIO_Port, DRV1_PH_Pin, GPIO_PIN_RESET);
 8002c82:	2200      	movs	r2, #0
 8002c84:	2104      	movs	r1, #4
 8002c86:	4841      	ldr	r0, [pc, #260]	; (8002d8c <MX_GPIO_Init+0x1d0>)
 8002c88:	f003 fddc 	bl	8006844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRV2_PH_Pin LED_White_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = DRV2_PH_Pin|LED_White_Pin|LED_B_Pin;
 8002c8c:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c92:	2301      	movs	r3, #1
 8002c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9e:	f107 0314 	add.w	r3, r7, #20
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4836      	ldr	r0, [pc, #216]	; (8002d80 <MX_GPIO_Init+0x1c4>)
 8002ca6:	f003 fc19 	bl	80064dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin Rotary2_Pin Rotary8_Pin
                           Rotary1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|Rotary2_Pin|Rotary8_Pin
 8002caa:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8002cae:	617b      	str	r3, [r7, #20]
                          |Rotary1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4830      	ldr	r0, [pc, #192]	; (8002d80 <MX_GPIO_Init+0x1c4>)
 8002cc0:	f003 fc0c 	bl	80064dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SubSens1_Pin SubSens2_Pin */
  GPIO_InitStruct.Pin = SubSens1_Pin|SubSens2_Pin;
 8002cc4:	f640 0304 	movw	r3, #2052	; 0x804
 8002cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	482a      	ldr	r0, [pc, #168]	; (8002d84 <MX_GPIO_Init+0x1c8>)
 8002cda:	f003 fbff 	bl	80064dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_nCS_Pin LED_Red_Pin */
  GPIO_InitStruct.Pin = SPI2_nCS_Pin|LED_Red_Pin;
 8002cde:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4823      	ldr	r0, [pc, #140]	; (8002d84 <MX_GPIO_Init+0x1c8>)
 8002cf8:	f003 fbf0 	bl	80064dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8002cfc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f107 0314 	add.w	r3, r7, #20
 8002d12:	4619      	mov	r1, r3
 8002d14:	481c      	ldr	r0, [pc, #112]	; (8002d88 <MX_GPIO_Init+0x1cc>)
 8002d16:	f003 fbe1 	bl	80064dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Rotary4_Pin */
  GPIO_InitStruct.Pin = Rotary4_Pin;
 8002d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rotary4_GPIO_Port, &GPIO_InitStruct);
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4816      	ldr	r0, [pc, #88]	; (8002d88 <MX_GPIO_Init+0x1cc>)
 8002d30:	f003 fbd4 	bl	80064dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002d34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d46:	2301      	movs	r3, #1
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	480d      	ldr	r0, [pc, #52]	; (8002d88 <MX_GPIO_Init+0x1cc>)
 8002d52:	f003 fbc3 	bl	80064dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV1_PH_Pin */
  GPIO_InitStruct.Pin = DRV1_PH_Pin;
 8002d56:	2304      	movs	r3, #4
 8002d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d62:	2300      	movs	r3, #0
 8002d64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV1_PH_GPIO_Port, &GPIO_InitStruct);
 8002d66:	f107 0314 	add.w	r3, r7, #20
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4807      	ldr	r0, [pc, #28]	; (8002d8c <MX_GPIO_Init+0x1d0>)
 8002d6e:	f003 fbb5 	bl	80064dc <HAL_GPIO_Init>

}
 8002d72:	bf00      	nop
 8002d74:	3728      	adds	r7, #40	; 0x28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40020800 	.word	0x40020800
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40020c00 	.word	0x40020c00

08002d90 <main_init>:

/* USER CODE BEGIN 4 */
void main_init()
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  flash_init();
 8002d94:	f7ff f96c 	bl	8002070 <flash_init>
  /* switch_init, HAL_TIM_BASE_Start_IT(&htim11), rotary_init */
  tim11_init();
 8002d98:	f000 fffa 	bl	8003d90 <tim11_init>
  /* encoder_init */
  tim10_init();
 8002d9c:	f000 feb8 	bl	8003b10 <tim10_init>
  /* tim7 */
  tim7_init();
 8002da0:	f001 f8fa 	bl	8003f98 <tim7_init>
  /* motor_init, analog_init, velotrace_init(1), tracer_init(1) */
  tim6_init();
 8002da4:	f001 f80a 	bl	8003dbc <tim6_init>
  /* print who am i */
  imu_init();
 8002da8:	f7fe f97c 	bl	80010a4 <imu_init>
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <running_start>:

void running_start()
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  #if D_TIM7
  printf("main.c > running_start() > ");
 8002db4:	4805      	ldr	r0, [pc, #20]	; (8002dcc <running_start+0x1c>)
 8002db6:	f007 fbc7 	bl	800a548 <iprintf>
  #endif
  tim7_start();
 8002dba:	f001 f905 	bl	8003fc8 <tim7_start>
  /* encoder_set_middle, HAL_TIM_Encoder_Start, HAL_TIM_Base_Start_IT */
  #if D_PRINT
  printf("tim10_start()\r\n");
  #endif
  tim10_start();
 8002dbe:	f000 fec1 	bl	8003b44 <tim10_start>
  /* analogmin/max = FlashBuffer.analogmin/max, sensgettime = 0, HAL_ADC_Start_DMA, samplingtime = s_error = before_error = 0, if search ( p/i/d = [0], target = [0]), motor_enable = 0 */
  #if D_PRINT
  printf("tim6_start()\r\n");
  #endif
  tim6_start();
 8002dc2:	f001 f807 	bl	8003dd4 <tim6_start>
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	0800e4dc 	.word	0x0800e4dc

08002dd0 <running_stop>:

void running_stop()
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* HAL_TIM_Base_Stop_IT, HAL_ADC_Stop_DMA, motor_enable = 0, HAL_TIM_PWM_Stop */
  tim6_stop();
 8002dd4:	f001 f822 	bl	8003e1c <tim6_stop>
  /* tim7 */
  tim7_stop();
 8002dd8:	f001 f934 	bl	8004044 <tim7_stop>
  /* HAL_TIM_Base_Stop_IT, HAL_TIM_Encoder_Stop, sidesensor_stop */
  tim10_stop();
 8002ddc:	f000 fed6 	bl	8003b8c <tim10_stop>
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <main_print_while>:

void main_print_while()
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
	printf("///// WHILE /////\n\r");
 8002de8:	4806      	ldr	r0, [pc, #24]	; (8002e04 <main_print_while+0x20>)
 8002dea:	f007 fbad 	bl	800a548 <iprintf>
  rotary_print_playmode();
 8002dee:	f7fe faf1 	bl	80013d4 <rotary_print_playmode>
	print_rotary_value();
 8002df2:	f000 f91f 	bl	8003034 <print_rotary_value>
	/* print Tracer and Velotracer target and gains */
	tracer_print_values();
 8002df6:	f001 fbed 	bl	80045d4 <tracer_print_values>
	velotrace_print_values();
 8002dfa:	f001 fe3b 	bl	8004a74 <velotrace_print_values>
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	0800e4f8 	.word	0x0800e4f8

08002e08 <main_main>:

void main_main()
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
	printf("////////// main_d_print() //////////\r\n");
 8002e0c:	4804      	ldr	r0, [pc, #16]	; (8002e20 <main_main+0x18>)
 8002e0e:	f007 fc21 	bl	800a654 <puts>
	main_d_print();
 8002e12:	f000 f807 	bl	8002e24 <main_d_print>
	#endif
	#if D_TIM6_WHILE
	printf("////////// tim6_main() //////////\r\n");
	tim6_main();
	#endif
	HAL_Delay(200);
 8002e16:	20c8      	movs	r0, #200	; 0xc8
 8002e18:	f001 ff10 	bl	8004c3c <HAL_Delay>
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	0800e50c 	.word	0x0800e50c

08002e24 <main_d_print>:

void main_d_print()
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  #if D_TIM10
  printf("main.c > main_d_print > ");
  tim10_d_print();
  #endif
  #if D_TIM7
  printf("main.c > main_d_print > ");
 8002e28:	4805      	ldr	r0, [pc, #20]	; (8002e40 <main_d_print+0x1c>)
 8002e2a:	f007 fb8d 	bl	800a548 <iprintf>
  tim7_d_print();
 8002e2e:	f001 f9ff 	bl	8004230 <tim7_d_print>
  #endif
  #if D_TIM6
  printf("main.c > main_d_print > ");
 8002e32:	4803      	ldr	r0, [pc, #12]	; (8002e40 <main_d_print+0x1c>)
 8002e34:	f007 fb88 	bl	800a548 <iprintf>
  tim6_d_print();
 8002e38:	f001 f88e 	bl	8003f58 <tim6_d_print>
  #endif
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	0800e534 	.word	0x0800e534

08002e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e48:	b672      	cpsid	i
}
 8002e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002e4c:	e7fe      	b.n	8002e4c <Error_Handler+0x8>

08002e4e <motor_init>:
#include "motor.h"

char enable;

void motor_init()
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	af00      	add	r7, sp, #0
    motor_enable(0);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f000 f826 	bl	8002ea4 <motor_enable>
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <motor_start>:

void motor_start()
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
    #if D_MOTOR
    printf("HAL_TIM_PWM_Start, motor_enable(1)\r\n");
    #endif
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// 50kHz (0.02ms)
 8002e60:	2100      	movs	r1, #0
 8002e62:	4806      	ldr	r0, [pc, #24]	; (8002e7c <motor_start+0x20>)
 8002e64:	f005 f9a4 	bl	80081b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002e68:	2104      	movs	r1, #4
 8002e6a:	4804      	ldr	r0, [pc, #16]	; (8002e7c <motor_start+0x20>)
 8002e6c:	f005 f9a0 	bl	80081b0 <HAL_TIM_PWM_Start>
#if PLAY
    motor_enable(1);
 8002e70:	2001      	movs	r0, #1
 8002e72:	f000 f817 	bl	8002ea4 <motor_enable>
#endif
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000460 	.word	0x20000460

08002e80 <motor_stop>:

void motor_stop()
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
    motor_enable(0);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f000 f80d 	bl	8002ea4 <motor_enable>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	4804      	ldr	r0, [pc, #16]	; (8002ea0 <motor_stop+0x20>)
 8002e8e:	f005 fa57 	bl	8008340 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8002e92:	2100      	movs	r1, #0
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <motor_stop+0x20>)
 8002e96:	f005 fa53 	bl	8008340 <HAL_TIM_PWM_Stop>
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000460 	.word	0x20000460

08002ea4 <motor_enable>:

void motor_enable(uint8_t enable_)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
    enable = enable_ ? 1 : 0;
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <motor_enable+0x28>)
 8002ebe:	701a      	strb	r2, [r3, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	20000858 	.word	0x20000858

08002ed0 <motor_read_enable>:

char motor_read_enable()
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
    return enable;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <motor_read_enable+0x14>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000858 	.word	0x20000858

08002ee8 <motor_set>:

void motor_set(double motor_left_, double motor_right_)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	ed87 0b02 	vstr	d0, [r7, #8]
 8002ef2:	ed87 1b00 	vstr	d1, [r7]
    if(motor_left_ < 0)
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f02:	f7fd fdeb 	bl	8000adc <__aeabi_dcmplt>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <motor_set+0x3c>
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2104      	movs	r1, #4
 8002f10:	483a      	ldr	r0, [pc, #232]	; (8002ffc <motor_set+0x114>)
 8002f12:	f003 fc97 	bl	8006844 <HAL_GPIO_WritePin>
        motor_left_ = motor_left_ * -1;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e004      	b.n	8002f2e <motor_set+0x46>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8002f24:	2201      	movs	r2, #1
 8002f26:	2104      	movs	r1, #4
 8002f28:	4834      	ldr	r0, [pc, #208]	; (8002ffc <motor_set+0x114>)
 8002f2a:	f003 fc8b 	bl	8006844 <HAL_GPIO_WritePin>
    }

    if(motor_right_ < 0)
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f3a:	f7fd fdcf 	bl	8000adc <__aeabi_dcmplt>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <motor_set+0x76>
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002f44:	2201      	movs	r2, #1
 8002f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f4a:	482d      	ldr	r0, [pc, #180]	; (8003000 <motor_set+0x118>)
 8002f4c:	f003 fc7a 	bl	8006844 <HAL_GPIO_WritePin>
        motor_right_ = motor_right_ * -1;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	e005      	b.n	8002f6a <motor_set+0x82>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f64:	4826      	ldr	r0, [pc, #152]	; (8003000 <motor_set+0x118>)
 8002f66:	f003 fc6d 	bl	8006844 <HAL_GPIO_WritePin>
    }

    motor_left_ = motor_left_ > PWMMAX ? PWMMAX : motor_left_;
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	4b25      	ldr	r3, [pc, #148]	; (8003004 <motor_set+0x11c>)
 8002f70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f74:	f7fd fdd0 	bl	8000b18 <__aeabi_dcmpgt>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <motor_set+0x9e>
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <motor_set+0x11c>)
 8002f84:	e001      	b.n	8002f8a <motor_set+0xa2>
 8002f86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    motor_right_ = motor_right_ > PWMMAX ? PWMMAX : motor_right_;
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <motor_set+0x11c>)
 8002f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f98:	f7fd fdbe 	bl	8000b18 <__aeabi_dcmpgt>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <motor_set+0xc2>
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <motor_set+0x11c>)
 8002fa8:	e001      	b.n	8002fae <motor_set+0xc6>
 8002faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fae:	e9c7 2300 	strd	r2, r3, [r7]

    if(!enable)
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <motor_set+0x120>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <motor_set+0xea>
    {
        motor_left_ = 0;
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
        motor_right_ = 0;
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9c7 2300 	strd	r2, r3, [r7]
    }

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, motor_left_);
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <motor_set+0x124>)
 8002fd4:	681c      	ldr	r4, [r3, #0]
 8002fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fda:	f7fd fde5 	bl	8000ba8 <__aeabi_d2uiz>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, motor_right_);
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <motor_set+0x124>)
 8002fe4:	681c      	ldr	r4, [r3, #0]
 8002fe6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fea:	f7fd fddd 	bl	8000ba8 <__aeabi_d2uiz>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40020c00 	.word	0x40020c00
 8003000:	40020800 	.word	0x40020800
 8003004:	408f4000 	.word	0x408f4000
 8003008:	20000858 	.word	0x20000858
 800300c:	20000460 	.word	0x20000460

08003010 <__io_putchar>:
#include "print.h"

PUTCHAR_PROTOTYPE
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart6, (uint8_t*) &ch, 1, 0xFFFF);
 8003018:	1d39      	adds	r1, r7, #4
 800301a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800301e:	2201      	movs	r2, #1
 8003020:	4803      	ldr	r0, [pc, #12]	; (8003030 <__io_putchar+0x20>)
 8003022:	f006 f90e 	bl	8009242 <HAL_UART_Transmit>
	return ch;
 8003026:	687b      	ldr	r3, [r7, #4]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	2000070c 	.word	0x2000070c

08003034 <print_rotary_value>:

void print_rotary_value()
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
	printf("rotary_value = %2d\r\n", rotary_read_value());
 8003038:	f7fe f976 	bl	8001328 <rotary_read_value>
 800303c:	4603      	mov	r3, r0
 800303e:	4619      	mov	r1, r3
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <print_rotary_value+0x18>)
 8003042:	f007 fa81 	bl	800a548 <iprintf>
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	0800e550 	.word	0x0800e550

08003050 <sidesensor_read>:
unsigned char subsensbuf, marker, sidedeltacount, rightmarkercount;
SideSensorState markerstate;
char sidesensor_start_or_stop;

uint8_t sidesensor_read()
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
    uint8_t subsens;

    subsens = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) ? 1 : 0;
 800305a:	2104      	movs	r1, #4
 800305c:	4810      	ldr	r0, [pc, #64]	; (80030a0 <sidesensor_read+0x50>)
 800305e:	f003 fbd9 	bl	8006814 <HAL_GPIO_ReadPin>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	b2da      	uxtb	r2, r3
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	4413      	add	r3, r2
 8003074:	71fb      	strb	r3, [r7, #7]
    subsens += !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) ? 2 : 0;
 8003076:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800307a:	4809      	ldr	r0, [pc, #36]	; (80030a0 <sidesensor_read+0x50>)
 800307c:	f003 fbca 	bl	8006814 <HAL_GPIO_ReadPin>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <sidesensor_read+0x3a>
 8003086:	2302      	movs	r3, #2
 8003088:	e000      	b.n	800308c <sidesensor_read+0x3c>
 800308a:	2300      	movs	r3, #0
 800308c:	b2da      	uxtb	r2, r3
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	4413      	add	r3, r2
 8003092:	71fb      	strb	r3, [r7, #7]

    return subsens;
 8003094:	79fb      	ldrb	r3, [r7, #7]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40020400 	.word	0x40020400

080030a4 <sidesensor_start>:

void sidesensor_start()
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
    marker = 0;
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <sidesensor_start+0x2c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
    subsensbuf = 0;
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <sidesensor_start+0x30>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
    sidedeltacount = 0;
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <sidesensor_start+0x34>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
    rightmarkercount = 0;
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <sidesensor_start+0x38>)
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
	markerstate = start;
 80030c0:	4b07      	ldr	r3, [pc, #28]	; (80030e0 <sidesensor_start+0x3c>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
    // HAL_TIM_Base_Start_IT(&htim14);
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	2000085c 	.word	0x2000085c
 80030d4:	20000859 	.word	0x20000859
 80030d8:	2000085a 	.word	0x2000085a
 80030dc:	2000085e 	.word	0x2000085e
 80030e0:	2000085b 	.word	0x2000085b

080030e4 <sidesensor_stop>:

void sidesensor_stop()
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
	/* sidesensor_stop */
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <sidesensor_read_markerstate>:

SideSensorState sidesensor_read_markerstate()
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
	return markerstate;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <sidesensor_read_markerstate+0x14>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	2000085b 	.word	0x2000085b

0800310c <sidesensor_right>:

void sidesensor_right()
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
    if(rightmarkercount == 1 - 1)
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <sidesensor_right+0x38>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d103      	bne.n	8003120 <sidesensor_right+0x14>
    {
        // start
		markerstate = straight;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <sidesensor_right+0x3c>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e006      	b.n	800312e <sidesensor_right+0x22>
    }
    else if(rightmarkercount == 2 - 1)
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <sidesensor_right+0x38>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d102      	bne.n	800312e <sidesensor_right+0x22>
    {
        // stop
		markerstate = stop;
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <sidesensor_right+0x3c>)
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
    }
    rightmarkercount++;
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <sidesensor_right+0x38>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	b2da      	uxtb	r2, r3
 8003136:	4b03      	ldr	r3, [pc, #12]	; (8003144 <sidesensor_right+0x38>)
 8003138:	701a      	strb	r2, [r3, #0]
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	2000085e 	.word	0x2000085e
 8003148:	2000085b 	.word	0x2000085b

0800314c <sidesensor_left>:

void sidesensor_left()
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
    // curve
    markerstate = curve;
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <sidesensor_left+0x14>)
 8003152:	2203      	movs	r2, #3
 8003154:	701a      	strb	r2, [r3, #0]
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	2000085b 	.word	0x2000085b

08003164 <sidesensor_cross>:

void sidesensor_cross()
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
    // cross
    markerstate = cross;
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <sidesensor_cross+0x14>)
 800316a:	2204      	movs	r2, #4
 800316c:	701a      	strb	r2, [r3, #0]
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	2000085b 	.word	0x2000085b

0800317c <sidesensor_main>:
	// straight
	markerstate = straight;
}

void sidesensor_main()
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
	unsigned char subsens;

	subsens = sidesensor_read();
 8003182:	f7ff ff65 	bl	8003050 <sidesensor_read>
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]

	if(subsens != subsensbuf)
 800318a:	4b27      	ldr	r3, [pc, #156]	; (8003228 <sidesensor_main+0xac>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	79fa      	ldrb	r2, [r7, #7]
 8003190:	429a      	cmp	r2, r3
 8003192:	d044      	beq.n	800321e <sidesensor_main+0xa2>
	{
		subsensbuf = subsens;
 8003194:	4a24      	ldr	r2, [pc, #144]	; (8003228 <sidesensor_main+0xac>)
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	7013      	strb	r3, [r2, #0]
		marker += subsens << (2 * sidedeltacount);
 800319a:	79fa      	ldrb	r2, [r7, #7]
 800319c:	4b23      	ldr	r3, [pc, #140]	; (800322c <sidesensor_main+0xb0>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <sidesensor_main+0xb4>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4413      	add	r3, r2
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <sidesensor_main+0xb4>)
 80031b2:	701a      	strb	r2, [r3, #0]
		if(subsens == 0b00 && sidedeltacount != 0)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d12b      	bne.n	8003212 <sidesensor_main+0x96>
 80031ba:	4b1c      	ldr	r3, [pc, #112]	; (800322c <sidesensor_main+0xb0>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d027      	beq.n	8003212 <sidesensor_main+0x96>
		{
            unsigned char first, second;
			first = (marker & 0b0011);
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <sidesensor_main+0xb4>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	71bb      	strb	r3, [r7, #6]
			second = (marker & 0b1100) >> 2;
 80031cc:	4b18      	ldr	r3, [pc, #96]	; (8003230 <sidesensor_main+0xb4>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	109b      	asrs	r3, r3, #2
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	717b      	strb	r3, [r7, #5]
			if (second == 0b00)
 80031da:	797b      	ldrb	r3, [r7, #5]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10e      	bne.n	80031fe <sidesensor_main+0x82>
			{
				if (first == 0b01)
 80031e0:	79bb      	ldrb	r3, [r7, #6]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d102      	bne.n	80031ec <sidesensor_main+0x70>
				{
					// right -> start / stop
                    sidesensor_right();
 80031e6:	f7ff ff91 	bl	800310c <sidesensor_right>
 80031ea:	e00a      	b.n	8003202 <sidesensor_main+0x86>
				}
				else if (first == 0b10)
 80031ec:	79bb      	ldrb	r3, [r7, #6]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d102      	bne.n	80031f8 <sidesensor_main+0x7c>
				{
					// left -> curve
                    sidesensor_left();
 80031f2:	f7ff ffab 	bl	800314c <sidesensor_left>
 80031f6:	e004      	b.n	8003202 <sidesensor_main+0x86>
				}
				else
				{
					// cross
                    sidesensor_cross();
 80031f8:	f7ff ffb4 	bl	8003164 <sidesensor_cross>
 80031fc:	e001      	b.n	8003202 <sidesensor_main+0x86>
				}
			}
			else
			{
				// cross
                sidesensor_cross();
 80031fe:	f7ff ffb1 	bl	8003164 <sidesensor_cross>
			}
			sidedeltacount = 0;
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <sidesensor_main+0xb0>)
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
			marker = 0;
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <sidesensor_main+0xb4>)
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
		{
 800320e:	bf00      	nop
		else
		{
			sidedeltacount++;
		}
	}
}
 8003210:	e005      	b.n	800321e <sidesensor_main+0xa2>
			sidedeltacount++;
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <sidesensor_main+0xb0>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4b04      	ldr	r3, [pc, #16]	; (800322c <sidesensor_main+0xb0>)
 800321c:	701a      	strb	r2, [r3, #0]
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000859 	.word	0x20000859
 800322c:	2000085a 	.word	0x2000085a
 8003230:	2000085c 	.word	0x2000085c

08003234 <sidesensor_d_print>:
			break;
	}
}

void sidesensor_d_print()
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
	#if D_SIDESENSOR
	printf("sidesensor.c > sidesensor_d_print() > ");
	sidesensor_print_sidesensorstate(markerstate);
	#endif
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_MspInit+0x54>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	4a11      	ldr	r2, [pc, #68]	; (8003298 <HAL_MspInit+0x54>)
 8003254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003258:	6453      	str	r3, [r2, #68]	; 0x44
 800325a:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_MspInit+0x54>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_MspInit+0x54>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <HAL_MspInit+0x54>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	; 0x40
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_MspInit+0x54>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 15, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	210f      	movs	r1, #15
 8003286:	f06f 0003 	mvn.w	r0, #3
 800328a:	f002 fa38 	bl	80056fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800

0800329c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08c      	sub	sp, #48	; 0x30
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a4:	f107 031c 	add.w	r3, r7, #28
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a49      	ldr	r2, [pc, #292]	; (80033e0 <HAL_ADC_MspInit+0x144>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	f040 808c 	bne.w	80033d8 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]
 80032c4:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	4a46      	ldr	r2, [pc, #280]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 80032ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ce:	6453      	str	r3, [r2, #68]	; 0x44
 80032d0:	4b44      	ldr	r3, [pc, #272]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	61bb      	str	r3, [r7, #24]
 80032da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	4b40      	ldr	r3, [pc, #256]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	4a3f      	ldr	r2, [pc, #252]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	6313      	str	r3, [r2, #48]	; 0x30
 80032ec:	4b3d      	ldr	r3, [pc, #244]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a38      	ldr	r2, [pc, #224]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	4a31      	ldr	r2, [pc, #196]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	6313      	str	r3, [r2, #48]	; 0x30
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_ADC_MspInit+0x148>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003330:	233f      	movs	r3, #63	; 0x3f
 8003332:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003334:	2303      	movs	r3, #3
 8003336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800333c:	f107 031c 	add.w	r3, r7, #28
 8003340:	4619      	mov	r1, r3
 8003342:	4829      	ldr	r0, [pc, #164]	; (80033e8 <HAL_ADC_MspInit+0x14c>)
 8003344:	f003 f8ca 	bl	80064dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003348:	23ff      	movs	r3, #255	; 0xff
 800334a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800334c:	2303      	movs	r3, #3
 800334e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	4619      	mov	r1, r3
 800335a:	4824      	ldr	r0, [pc, #144]	; (80033ec <HAL_ADC_MspInit+0x150>)
 800335c:	f003 f8be 	bl	80064dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003360:	2303      	movs	r3, #3
 8003362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003364:	2303      	movs	r3, #3
 8003366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336c:	f107 031c 	add.w	r3, r7, #28
 8003370:	4619      	mov	r1, r3
 8003372:	481f      	ldr	r0, [pc, #124]	; (80033f0 <HAL_ADC_MspInit+0x154>)
 8003374:	f003 f8b2 	bl	80064dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 800337a:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <HAL_ADC_MspInit+0x15c>)
 800337c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 8003380:	2200      	movs	r2, #0
 8003382:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800338a:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 800338c:	2200      	movs	r2, #0
 800338e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003390:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 8003392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003396:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003398:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 800339a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800339e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 80033a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 80033aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80033b0:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b6:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033bc:	480d      	ldr	r0, [pc, #52]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 80033be:	f002 f9d5 	bl	800576c <HAL_DMA_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80033c8:	f7ff fd3c 	bl	8002e44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 80033d0:	639a      	str	r2, [r3, #56]	; 0x38
 80033d2:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <HAL_ADC_MspInit+0x158>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80033d8:	bf00      	nop
 80033da:	3730      	adds	r7, #48	; 0x30
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40012000 	.word	0x40012000
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020000 	.word	0x40020000
 80033f0:	40020400 	.word	0x40020400
 80033f4:	2000061c 	.word	0x2000061c
 80033f8:	40026410 	.word	0x40026410

080033fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08a      	sub	sp, #40	; 0x28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a19      	ldr	r2, [pc, #100]	; (8003480 <HAL_I2C_MspInit+0x84>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d12c      	bne.n	8003478 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_I2C_MspInit+0x88>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	4a17      	ldr	r2, [pc, #92]	; (8003484 <HAL_I2C_MspInit+0x88>)
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	6313      	str	r3, [r2, #48]	; 0x30
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_I2C_MspInit+0x88>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800343a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800343e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003440:	2312      	movs	r3, #18
 8003442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003444:	2301      	movs	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003448:	2303      	movs	r3, #3
 800344a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800344c:	2304      	movs	r3, #4
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	4619      	mov	r1, r3
 8003456:	480c      	ldr	r0, [pc, #48]	; (8003488 <HAL_I2C_MspInit+0x8c>)
 8003458:	f003 f840 	bl	80064dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_I2C_MspInit+0x88>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	4a07      	ldr	r2, [pc, #28]	; (8003484 <HAL_I2C_MspInit+0x88>)
 8003466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800346a:	6413      	str	r3, [r2, #64]	; 0x40
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_I2C_MspInit+0x88>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003478:	bf00      	nop
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40005400 	.word	0x40005400
 8003484:	40023800 	.word	0x40023800
 8003488:	40020400 	.word	0x40020400

0800348c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a19      	ldr	r2, [pc, #100]	; (8003510 <HAL_SPI_MspInit+0x84>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d12c      	bne.n	8003508 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	4b18      	ldr	r3, [pc, #96]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	4a17      	ldr	r2, [pc, #92]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034bc:	6413      	str	r3, [r2, #64]	; 0x40
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a10      	ldr	r2, [pc, #64]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034d4:	f043 0302 	orr.w	r3, r3, #2
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <HAL_SPI_MspInit+0x88>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80034e6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80034ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ec:	2302      	movs	r3, #2
 80034ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f4:	2303      	movs	r3, #3
 80034f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034f8:	2305      	movs	r3, #5
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fc:	f107 0314 	add.w	r3, r7, #20
 8003500:	4619      	mov	r1, r3
 8003502:	4805      	ldr	r0, [pc, #20]	; (8003518 <HAL_SPI_MspInit+0x8c>)
 8003504:	f002 ffea 	bl	80064dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003508:	bf00      	nop
 800350a:	3728      	adds	r7, #40	; 0x28
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40003800 	.word	0x40003800
 8003514:	40023800 	.word	0x40023800
 8003518:	40020400 	.word	0x40020400

0800351c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	; 0x30
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 031c 	add.w	r3, r7, #28
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a3a      	ldr	r2, [pc, #232]	; (8003624 <HAL_TIM_Encoder_MspInit+0x108>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d13d      	bne.n	80035ba <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	4b39      	ldr	r3, [pc, #228]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	4a38      	ldr	r2, [pc, #224]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6453      	str	r3, [r2, #68]	; 0x44
 800354e:	4b36      	ldr	r3, [pc, #216]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	4b32      	ldr	r3, [pc, #200]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a31      	ldr	r2, [pc, #196]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b2f      	ldr	r3, [pc, #188]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_A_Pin|Encoder1_B_Pin;
 8003576:	f44f 7340 	mov.w	r3, #768	; 0x300
 800357a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003584:	2300      	movs	r3, #0
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003588:	2301      	movs	r3, #1
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358c:	f107 031c 	add.w	r3, r7, #28
 8003590:	4619      	mov	r1, r3
 8003592:	4826      	ldr	r0, [pc, #152]	; (800362c <HAL_TIM_Encoder_MspInit+0x110>)
 8003594:	f002 ffa2 	bl	80064dc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003598:	2200      	movs	r2, #0
 800359a:	2100      	movs	r1, #0
 800359c:	2019      	movs	r0, #25
 800359e:	f002 f8ae 	bl	80056fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80035a2:	2019      	movs	r0, #25
 80035a4:	f002 f8c7 	bl	8005736 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	201a      	movs	r0, #26
 80035ae:	f002 f8a6 	bl	80056fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80035b2:	201a      	movs	r0, #26
 80035b4:	f002 f8bf 	bl	8005736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035b8:	e030      	b.n	800361c <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <HAL_TIM_Encoder_MspInit+0x114>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d12b      	bne.n	800361c <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	4b17      	ldr	r3, [pc, #92]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035cc:	4a16      	ldr	r2, [pc, #88]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035ce:	f043 0302 	orr.w	r3, r3, #2
 80035d2:	6413      	str	r3, [r2, #64]	; 0x40
 80035d4:	4b14      	ldr	r3, [pc, #80]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e0:	2300      	movs	r3, #0
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	4b10      	ldr	r3, [pc, #64]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	6313      	str	r3, [r2, #48]	; 0x30
 80035f0:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <HAL_TIM_Encoder_MspInit+0x10c>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_A_Pin|Encoder2_B_Pin;
 80035fc:	2330      	movs	r3, #48	; 0x30
 80035fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003600:	2302      	movs	r3, #2
 8003602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003608:	2300      	movs	r3, #0
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800360c:	2302      	movs	r3, #2
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003610:	f107 031c 	add.w	r3, r7, #28
 8003614:	4619      	mov	r1, r3
 8003616:	4807      	ldr	r0, [pc, #28]	; (8003634 <HAL_TIM_Encoder_MspInit+0x118>)
 8003618:	f002 ff60 	bl	80064dc <HAL_GPIO_Init>
}
 800361c:	bf00      	nop
 800361e:	3730      	adds	r7, #48	; 0x30
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40010000 	.word	0x40010000
 8003628:	40023800 	.word	0x40023800
 800362c:	40020000 	.word	0x40020000
 8003630:	40000400 	.word	0x40000400
 8003634:	40020400 	.word	0x40020400

08003638 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a0b      	ldr	r2, [pc, #44]	; (8003674 <HAL_TIM_PWM_MspInit+0x3c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10d      	bne.n	8003666 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_TIM_PWM_MspInit+0x40>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	4a09      	ldr	r2, [pc, #36]	; (8003678 <HAL_TIM_PWM_MspInit+0x40>)
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	6413      	str	r3, [r2, #64]	; 0x40
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <HAL_TIM_PWM_MspInit+0x40>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40000800 	.word	0x40000800
 8003678:	40023800 	.word	0x40023800

0800367c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a3e      	ldr	r2, [pc, #248]	; (8003784 <HAL_TIM_Base_MspInit+0x108>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d116      	bne.n	80036bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a3c      	ldr	r2, [pc, #240]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 8003698:	f043 0310 	orr.w	r3, r3, #16
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2036      	movs	r0, #54	; 0x36
 80036b0:	f002 f825 	bl	80056fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036b4:	2036      	movs	r0, #54	; 0x36
 80036b6:	f002 f83e 	bl	8005736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80036ba:	e05e      	b.n	800377a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a32      	ldr	r2, [pc, #200]	; (800378c <HAL_TIM_Base_MspInit+0x110>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10e      	bne.n	80036e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	4b2f      	ldr	r3, [pc, #188]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a2e      	ldr	r2, [pc, #184]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 80036d0:	f043 0320 	orr.w	r3, r3, #32
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b2c      	ldr	r3, [pc, #176]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	61bb      	str	r3, [r7, #24]
 80036e0:	69bb      	ldr	r3, [r7, #24]
}
 80036e2:	e04a      	b.n	800377a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a29      	ldr	r2, [pc, #164]	; (8003790 <HAL_TIM_Base_MspInit+0x114>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d116      	bne.n	800371c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	4a24      	ldr	r2, [pc, #144]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fc:	6453      	str	r3, [r2, #68]	; 0x44
 80036fe:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800370a:	2200      	movs	r2, #0
 800370c:	2100      	movs	r1, #0
 800370e:	2019      	movs	r0, #25
 8003710:	f001 fff5 	bl	80056fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003714:	2019      	movs	r0, #25
 8003716:	f002 f80e 	bl	8005736 <HAL_NVIC_EnableIRQ>
}
 800371a:	e02e      	b.n	800377a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <HAL_TIM_Base_MspInit+0x118>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d116      	bne.n	8003754 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4a16      	ldr	r2, [pc, #88]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 8003730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003734:	6453      	str	r3, [r2, #68]	; 0x44
 8003736:	4b14      	ldr	r3, [pc, #80]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003742:	2200      	movs	r2, #0
 8003744:	2100      	movs	r1, #0
 8003746:	201a      	movs	r0, #26
 8003748:	f001 ffd9 	bl	80056fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800374c:	201a      	movs	r0, #26
 800374e:	f001 fff2 	bl	8005736 <HAL_NVIC_EnableIRQ>
}
 8003752:	e012      	b.n	800377a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM14)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <HAL_TIM_Base_MspInit+0x11c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10d      	bne.n	800377a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	4a08      	ldr	r2, [pc, #32]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376c:	6413      	str	r3, [r2, #64]	; 0x40
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_TIM_Base_MspInit+0x10c>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
}
 800377a:	bf00      	nop
 800377c:	3720      	adds	r7, #32
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40001000 	.word	0x40001000
 8003788:	40023800 	.word	0x40023800
 800378c:	40001400 	.word	0x40001400
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800
 8003798:	40002000 	.word	0x40002000

0800379c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	f107 030c 	add.w	r3, r7, #12
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a12      	ldr	r2, [pc, #72]	; (8003804 <HAL_TIM_MspPostInit+0x68>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d11d      	bne.n	80037fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <HAL_TIM_MspPostInit+0x6c>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a10      	ldr	r2, [pc, #64]	; (8003808 <HAL_TIM_MspPostInit+0x6c>)
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <HAL_TIM_MspPostInit+0x6c>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = DRV1_EN_Pin|DRV2_EN_Pin;
 80037da:	23c0      	movs	r3, #192	; 0xc0
 80037dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037ea:	2302      	movs	r3, #2
 80037ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	4619      	mov	r1, r3
 80037f4:	4805      	ldr	r0, [pc, #20]	; (800380c <HAL_TIM_MspPostInit+0x70>)
 80037f6:	f002 fe71 	bl	80064dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80037fa:	bf00      	nop
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40000800 	.word	0x40000800
 8003808:	40023800 	.word	0x40023800
 800380c:	40020400 	.word	0x40020400

08003810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a19      	ldr	r2, [pc, #100]	; (8003894 <HAL_UART_MspInit+0x84>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d12b      	bne.n	800388a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	4b18      	ldr	r3, [pc, #96]	; (8003898 <HAL_UART_MspInit+0x88>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	4a17      	ldr	r2, [pc, #92]	; (8003898 <HAL_UART_MspInit+0x88>)
 800383c:	f043 0320 	orr.w	r3, r3, #32
 8003840:	6453      	str	r3, [r2, #68]	; 0x44
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <HAL_UART_MspInit+0x88>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <HAL_UART_MspInit+0x88>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	4a10      	ldr	r2, [pc, #64]	; (8003898 <HAL_UART_MspInit+0x88>)
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	6313      	str	r3, [r2, #48]	; 0x30
 800385e:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <HAL_UART_MspInit+0x88>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800386a:	23c0      	movs	r3, #192	; 0xc0
 800386c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003876:	2303      	movs	r3, #3
 8003878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800387a:	2308      	movs	r3, #8
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800387e:	f107 0314 	add.w	r3, r7, #20
 8003882:	4619      	mov	r1, r3
 8003884:	4805      	ldr	r0, [pc, #20]	; (800389c <HAL_UART_MspInit+0x8c>)
 8003886:	f002 fe29 	bl	80064dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800388a:	bf00      	nop
 800388c:	3728      	adds	r7, #40	; 0x28
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40011400 	.word	0x40011400
 8003898:	40023800 	.word	0x40023800
 800389c:	40020800 	.word	0x40020800

080038a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038a4:	e7fe      	b.n	80038a4 <NMI_Handler+0x4>

080038a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038a6:	b480      	push	{r7}
 80038a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038aa:	e7fe      	b.n	80038aa <HardFault_Handler+0x4>

080038ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <MemManage_Handler+0x4>

080038b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038b2:	b480      	push	{r7}
 80038b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038b6:	e7fe      	b.n	80038b6 <BusFault_Handler+0x4>

080038b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038bc:	e7fe      	b.n	80038bc <UsageFault_Handler+0x4>

080038be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr

080038da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038da:	b480      	push	{r7}
 80038dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038ec:	f001 f986 	bl	8004bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038f8:	4803      	ldr	r0, [pc, #12]	; (8003908 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80038fa:	f004 ff5c 	bl	80087b6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80038fe:	4803      	ldr	r0, [pc, #12]	; (800390c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003900:	f004 ff59 	bl	80087b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003904:	bf00      	nop
 8003906:	bd80      	pop	{r7, pc}
 8003908:	200006c4 	.word	0x200006c4
 800390c:	200004fc 	.word	0x200004fc

08003910 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003914:	4803      	ldr	r0, [pc, #12]	; (8003924 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003916:	f004 ff4e 	bl	80087b6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800391a:	4803      	ldr	r0, [pc, #12]	; (8003928 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800391c:	f004 ff4b 	bl	80087b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003920:	bf00      	nop
 8003922:	bd80      	pop	{r7, pc}
 8003924:	200006c4 	.word	0x200006c4
 8003928:	200005d4 	.word	0x200005d4

0800392c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <TIM6_DAC_IRQHandler+0x10>)
 8003932:	f004 ff40 	bl	80087b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	2000067c 	.word	0x2000067c

08003940 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <DMA2_Stream0_IRQHandler+0x10>)
 8003946:	f002 f887 	bl	8005a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	2000061c 	.word	0x2000061c

08003954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
	return 1;
 8003958:	2301      	movs	r3, #1
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <_kill>:

int _kill(int pid, int sig)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800396e:	f005 ff31 	bl	80097d4 <__errno>
 8003972:	4603      	mov	r3, r0
 8003974:	2216      	movs	r2, #22
 8003976:	601a      	str	r2, [r3, #0]
	return -1;
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <_exit>:

void _exit (int status)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800398c:	f04f 31ff 	mov.w	r1, #4294967295
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ffe7 	bl	8003964 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003996:	e7fe      	b.n	8003996 <_exit+0x12>

08003998 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	e00a      	b.n	80039c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039aa:	f3af 8000 	nop.w
 80039ae:	4601      	mov	r1, r0
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	60ba      	str	r2, [r7, #8]
 80039b6:	b2ca      	uxtb	r2, r1
 80039b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	dbf0      	blt.n	80039aa <_read+0x12>
	}

return len;
 80039c8:	687b      	ldr	r3, [r7, #4]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e009      	b.n	80039f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	60ba      	str	r2, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fb0f 	bl	8003010 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	3301      	adds	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	dbf1      	blt.n	80039e4 <_write+0x12>
	}
	return len;
 8003a00:	687b      	ldr	r3, [r7, #4]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <_close>:

int _close(int file)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
	return -1;
 8003a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a32:	605a      	str	r2, [r3, #4]
	return 0;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_isatty>:

int _isatty(int file)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
	return 1;
 8003a4a:	2301      	movs	r3, #1
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
	return 0;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <_sbrk+0x5c>)
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <_sbrk+0x60>)
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a88:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <_sbrk+0x64>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <_sbrk+0x64>)
 8003a92:	4a12      	ldr	r2, [pc, #72]	; (8003adc <_sbrk+0x68>)
 8003a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <_sbrk+0x64>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d207      	bcs.n	8003ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aa4:	f005 fe96 	bl	80097d4 <__errno>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	220c      	movs	r2, #12
 8003aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab2:	e009      	b.n	8003ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <_sbrk+0x64>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <_sbrk+0x64>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	4a05      	ldr	r2, [pc, #20]	; (8003ad8 <_sbrk+0x64>)
 8003ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20020000 	.word	0x20020000
 8003ad4:	00000400 	.word	0x00000400
 8003ad8:	200001fc 	.word	0x200001fc
 8003adc:	20000978 	.word	0x20000978

08003ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <SystemInit+0x28>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <SystemInit+0x28>)
 8003aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <SystemInit+0x28>)
 8003af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003afa:	609a      	str	r2, [r3, #8]
#endif
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000ed00 	.word	0xe000ed00
 8003b0c:	00000000 	.word	0x00000000

08003b10 <tim10_init>:
  return velocity;
}

/* only use in main.c */
void tim10_init()
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  tim10_length_set_zero();
 8003b14:	f000 f8d4 	bl	8003cc0 <tim10_length_set_zero>
  tim10_velocity_set_zero();
 8003b18:	f000 f8f4 	bl	8003d04 <tim10_velocity_set_zero>
  velotrace_init(1);
 8003b1c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8003b38 <tim10_init+0x28>
 8003b20:	f000 fd96 	bl	8004650 <velotrace_init>
	encoder_init();
 8003b24:	f7fe f9e2 	bl	8001eec <encoder_init>
	HAL_TIM_Base_Stop_IT(&htim10);
 8003b28:	4805      	ldr	r0, [pc, #20]	; (8003b40 <tim10_init+0x30>)
 8003b2a:	f004 fac3 	bl	80080b4 <HAL_TIM_Base_Stop_IT>
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	f3af 8000 	nop.w
 8003b38:	00000000 	.word	0x00000000
 8003b3c:	3ff00000 	.word	0x3ff00000
 8003b40:	200004fc 	.word	0x200004fc

08003b44 <tim10_start>:

void tim10_start()
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  tim10_left = 0;
 8003b48:	490d      	ldr	r1, [pc, #52]	; (8003b80 <tim10_start+0x3c>)
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9c1 2300 	strd	r2, r3, [r1]
  tim10_right = 0;
 8003b56:	490b      	ldr	r1, [pc, #44]	; (8003b84 <tim10_start+0x40>)
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	e9c1 2300 	strd	r2, r3, [r1]
  /* encoder_set_middle, HAL_TIM_Encoder_Start */
  encoder_start();
 8003b64:	f7fe f9ca 	bl	8001efc <encoder_start>
  /* marker = subsensbuf = sidedeltacount = markerstate = rightmarkercount = 0 */
  velotrace_start();
 8003b68:	f000 fd84 	bl	8004674 <velotrace_start>
  tim10_length_set_zero();
 8003b6c:	f000 f8a8 	bl	8003cc0 <tim10_length_set_zero>
  tim10_velocity_set_zero();
 8003b70:	f000 f8c8 	bl	8003d04 <tim10_velocity_set_zero>
  HAL_TIM_Base_Start_IT(&htim10);
 8003b74:	4804      	ldr	r0, [pc, #16]	; (8003b88 <tim10_start+0x44>)
 8003b76:	f004 fa2d 	bl	8007fd4 <HAL_TIM_Base_Start_IT>
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000870 	.word	0x20000870
 8003b84:	20000890 	.word	0x20000890
 8003b88:	200004fc 	.word	0x200004fc

08003b8c <tim10_stop>:

void tim10_stop()
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim10);
 8003b90:	4804      	ldr	r0, [pc, #16]	; (8003ba4 <tim10_stop+0x18>)
 8003b92:	f004 fa8f 	bl	80080b4 <HAL_TIM_Base_Stop_IT>
  velotrace_stop();
 8003b96:	f000 fdb3 	bl	8004700 <velotrace_stop>
  encoder_stop();
 8003b9a:	f7fe f9d9 	bl	8001f50 <encoder_stop>
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	200004fc 	.word	0x200004fc

08003ba8 <tim10_main>:

void tim10_main()
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0

  /* set encoder middle and update velocities */
  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > ");
  #endif
  encoder_set();
 8003bae:	f7fe f965 	bl	8001e7c <encoder_set>

  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > ");
  #endif
  el = encoder_length_left();
 8003bb2:	f7fe f925 	bl	8001e00 <encoder_length_left>
 8003bb6:	ed87 0b04 	vstr	d0, [r7, #16]
  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > ");
  #endif
  er = encoder_length_right();
 8003bba:	f7fe f941 	bl	8001e40 <encoder_length_right>
 8003bbe:	ed87 0b02 	vstr	d0, [r7, #8]
  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > ");
  #endif
  e = encoder_length();
 8003bc2:	f7fe f901 	bl	8001dc8 <encoder_length>
 8003bc6:	ed87 0b00 	vstr	d0, [r7]
  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > el = %7.2f, er = %7.2f, e = %7.2f\r\n", el, er, e);
  #endif

  /* update velocity */
  velocity_left = el * (double) TIM10_Hz;
 8003bca:	a333      	add	r3, pc, #204	; (adr r3, 8003c98 <tim10_main+0xf0>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003bd4:	f7fc fd10 	bl	80005f8 <__aeabi_dmul>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4930      	ldr	r1, [pc, #192]	; (8003ca0 <tim10_main+0xf8>)
 8003bde:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = er * (double) TIM10_Hz;
 8003be2:	a32d      	add	r3, pc, #180	; (adr r3, 8003c98 <tim10_main+0xf0>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bec:	f7fc fd04 	bl	80005f8 <__aeabi_dmul>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	492b      	ldr	r1, [pc, #172]	; (8003ca4 <tim10_main+0xfc>)
 8003bf6:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = e * (double) TIM10_Hz;
 8003bfa:	a327      	add	r3, pc, #156	; (adr r3, 8003c98 <tim10_main+0xf0>)
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c04:	f7fc fcf8 	bl	80005f8 <__aeabi_dmul>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4926      	ldr	r1, [pc, #152]	; (8003ca8 <tim10_main+0x100>)
 8003c0e:	e9c1 2300 	strd	r2, r3, [r1]


  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > ");
  #endif
  tim10_left  = velotrace_solve(velocity);
 8003c12:	4b25      	ldr	r3, [pc, #148]	; (8003ca8 <tim10_main+0x100>)
 8003c14:	ed93 7b00 	vldr	d7, [r3]
 8003c18:	eeb0 0a47 	vmov.f32	s0, s14
 8003c1c:	eef0 0a67 	vmov.f32	s1, s15
 8003c20:	f000 fea6 	bl	8004970 <velotrace_solve>
 8003c24:	eeb0 7a40 	vmov.f32	s14, s0
 8003c28:	eef0 7a60 	vmov.f32	s15, s1
 8003c2c:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <tim10_main+0x104>)
 8003c2e:	ed83 7b00 	vstr	d7, [r3]
  tim10_right = tim10_left;
 8003c32:	4b1e      	ldr	r3, [pc, #120]	; (8003cac <tim10_main+0x104>)
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	491d      	ldr	r1, [pc, #116]	; (8003cb0 <tim10_main+0x108>)
 8003c3a:	e9c1 2300 	strd	r2, r3, [r1]
  #if D_TIM10_WHILE
  printf("tim10.c > tim10_main() > tim10_left = %7.2f, tim10_right = %7.2f\r\n", tim10_left, tim10_right);
  #endif

  /* update lengths */
  length_left += velocity_left;
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <tim10_main+0x10c>)
 8003c40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c44:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <tim10_main+0xf8>)
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	f7fc fb1f 	bl	800028c <__adddf3>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4918      	ldr	r1, [pc, #96]	; (8003cb4 <tim10_main+0x10c>)
 8003c54:	e9c1 2300 	strd	r2, r3, [r1]
  length_right += velocity_right;
 8003c58:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <tim10_main+0x110>)
 8003c5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c5e:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <tim10_main+0xfc>)
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f7fc fb12 	bl	800028c <__adddf3>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4912      	ldr	r1, [pc, #72]	; (8003cb8 <tim10_main+0x110>)
 8003c6e:	e9c1 2300 	strd	r2, r3, [r1]
  length += velocity;
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <tim10_main+0x114>)
 8003c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <tim10_main+0x100>)
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	f7fc fb05 	bl	800028c <__adddf3>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	490d      	ldr	r1, [pc, #52]	; (8003cbc <tim10_main+0x114>)
 8003c88:	e9c1 2300 	strd	r2, r3, [r1]
  if(length >= SAMPLING_LENGTH)
  {
    course_state_function();
  }
  */
}
 8003c8c:	bf00      	nop
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	f3af 8000 	nop.w
 8003c98:	e0000000 	.word	0xe0000000
 8003c9c:	3f50624d 	.word	0x3f50624d
 8003ca0:	20000888 	.word	0x20000888
 8003ca4:	20000880 	.word	0x20000880
 8003ca8:	20000878 	.word	0x20000878
 8003cac:	20000870 	.word	0x20000870
 8003cb0:	20000890 	.word	0x20000890
 8003cb4:	20000860 	.word	0x20000860
 8003cb8:	20000898 	.word	0x20000898
 8003cbc:	20000868 	.word	0x20000868

08003cc0 <tim10_length_set_zero>:
  #endif
}

/* private */
void tim10_length_set_zero()
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  length_left = 0;
 8003cc4:	490c      	ldr	r1, [pc, #48]	; (8003cf8 <tim10_length_set_zero+0x38>)
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	e9c1 2300 	strd	r2, r3, [r1]
  length_right = 0;
 8003cd2:	490a      	ldr	r1, [pc, #40]	; (8003cfc <tim10_length_set_zero+0x3c>)
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9c1 2300 	strd	r2, r3, [r1]
  length = 0;
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <tim10_length_set_zero+0x40>)
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	20000860 	.word	0x20000860
 8003cfc:	20000898 	.word	0x20000898
 8003d00:	20000868 	.word	0x20000868

08003d04 <tim10_velocity_set_zero>:

void tim10_velocity_set_zero()
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  velocity_left = 0;
 8003d08:	490c      	ldr	r1, [pc, #48]	; (8003d3c <tim10_velocity_set_zero+0x38>)
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9c1 2300 	strd	r2, r3, [r1]
  velocity_right = 0;
 8003d16:	490a      	ldr	r1, [pc, #40]	; (8003d40 <tim10_velocity_set_zero+0x3c>)
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9c1 2300 	strd	r2, r3, [r1]
  velocity = 0;
 8003d24:	4907      	ldr	r1, [pc, #28]	; (8003d44 <tim10_velocity_set_zero+0x40>)
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003d32:	bf00      	nop
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	20000888 	.word	0x20000888
 8003d40:	20000880 	.word	0x20000880
 8003d44:	20000878 	.word	0x20000878

08003d48 <tim10_read_left>:

double tim10_read_left()
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return tim10_left;
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <tim10_read_left+0x20>)
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	ec43 2b17 	vmov	d7, r2, r3
}
 8003d56:	eeb0 0a47 	vmov.f32	s0, s14
 8003d5a:	eef0 0a67 	vmov.f32	s1, s15
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000870 	.word	0x20000870

08003d6c <tim10_read_right>:

double tim10_read_right()
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return tim10_right;
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <tim10_read_right+0x20>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	ec43 2b17 	vmov	d7, r2, r3
}
 8003d7a:	eeb0 0a47 	vmov.f32	s0, s14
 8003d7e:	eef0 0a67 	vmov.f32	s1, s15
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000890 	.word	0x20000890

08003d90 <tim11_init>:
#include "tim11.h"

uint8_t rotary_value;

void tim11_init()
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
    switch_init();
 8003d94:	f7fd fbaa 	bl	80014ec <switch_init>
	HAL_TIM_Base_Start_IT(&htim11);	// 1ms	// ROTARY SWITCH
 8003d98:	4803      	ldr	r0, [pc, #12]	; (8003da8 <tim11_init+0x18>)
 8003d9a:	f004 f91b 	bl	8007fd4 <HAL_TIM_Base_Start_IT>
    rotary_init();
 8003d9e:	f7fd fa97 	bl	80012d0 <rotary_init>
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	200005d4 	.word	0x200005d4

08003dac <tim11_main>:

void tim11_main()
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
    switch_enter();
 8003db0:	f7fd fbeb 	bl	800158a <switch_enter>
    rotary_set_value();
 8003db4:	f7fd faac 	bl	8001310 <rotary_set_value>
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <tim6_init>:
#if D_TIM6
double leftmotor, rightmotor;
#endif

void tim6_init()
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
    motor_init();
 8003dc0:	f7ff f845 	bl	8002e4e <motor_init>
    // sidesensor_init();
    HAL_TIM_Base_Stop_IT(&htim6);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <tim6_init+0x14>)
 8003dc6:	f004 f975 	bl	80080b4 <HAL_TIM_Base_Stop_IT>
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	2000067c 	.word	0x2000067c

08003dd4 <tim6_start>:

void tim6_start()
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
    printf("motor_start()\r\n");
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <tim6_start+0x38>)
 8003dda:	f006 fc3b 	bl	800a654 <puts>
    #if D_TIM6
    leftmotor = 0;
 8003dde:	490c      	ldr	r1, [pc, #48]	; (8003e10 <tim6_start+0x3c>)
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9c1 2300 	strd	r2, r3, [r1]
    rightmotor = 0;
 8003dec:	4909      	ldr	r1, [pc, #36]	; (8003e14 <tim6_start+0x40>)
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	e9c1 2300 	strd	r2, r3, [r1]
    #endif
    sidesensor_start();
 8003dfa:	f7ff f953 	bl	80030a4 <sidesensor_start>
    motor_start();
 8003dfe:	f7ff f82d 	bl	8002e5c <motor_start>
	HAL_TIM_Base_Start_IT(&htim6);	// PID
 8003e02:	4805      	ldr	r0, [pc, #20]	; (8003e18 <tim6_start+0x44>)
 8003e04:	f004 f8e6 	bl	8007fd4 <HAL_TIM_Base_Start_IT>
}
 8003e08:	bf00      	nop
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	0800e5c8 	.word	0x0800e5c8
 8003e10:	200008a8 	.word	0x200008a8
 8003e14:	200008a0 	.word	0x200008a0
 8003e18:	2000067c 	.word	0x2000067c

08003e1c <tim6_stop>:

void tim6_stop()
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
    motor_stop();
 8003e20:	f7ff f82e 	bl	8002e80 <motor_stop>
	HAL_TIM_Base_Stop_IT(&htim6);
 8003e24:	4803      	ldr	r0, [pc, #12]	; (8003e34 <tim6_stop+0x18>)
 8003e26:	f004 f945 	bl	80080b4 <HAL_TIM_Base_Stop_IT>
    sidesensor_stop();
 8003e2a:	f7ff f95b 	bl	80030e4 <sidesensor_stop>
}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	2000067c 	.word	0x2000067c

08003e38 <tim6_main>:

void tim6_main()
{
 8003e38:	b5b0      	push	{r4, r5, r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
    #if !D_TIM6
    double leftmotor, rightmotor;
    #endif

    sidesensor_main();
 8003e3c:	f7ff f99e 	bl	800317c <sidesensor_main>

    if(motor_read_enable())
 8003e40:	f7ff f846 	bl	8002ed0 <motor_read_enable>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d046      	beq.n	8003ed8 <tim6_main+0xa0>
                #endif
                break;
        }
        #else
        #if TRACER_TUNING
        leftmotor  =  tim7_read_left();
 8003e4a:	f000 f9cd 	bl	80041e8 <tim7_read_left>
 8003e4e:	eeb0 7a40 	vmov.f32	s14, s0
 8003e52:	eef0 7a60 	vmov.f32	s15, s1
 8003e56:	4b3e      	ldr	r3, [pc, #248]	; (8003f50 <tim6_main+0x118>)
 8003e58:	ed83 7b00 	vstr	d7, [r3]
        rightmotor = tim7_read_right();
 8003e5c:	f000 f9d6 	bl	800420c <tim7_read_right>
 8003e60:	eeb0 7a40 	vmov.f32	s14, s0
 8003e64:	eef0 7a60 	vmov.f32	s15, s1
 8003e68:	4b3a      	ldr	r3, [pc, #232]	; (8003f54 <tim6_main+0x11c>)
 8003e6a:	ed83 7b00 	vstr	d7, [r3]
        #endif
        #if VELOTRACE_TUNING
        leftmotor  =  tim10_read_left();
 8003e6e:	f7ff ff6b 	bl	8003d48 <tim10_read_left>
 8003e72:	eeb0 7a40 	vmov.f32	s14, s0
 8003e76:	eef0 7a60 	vmov.f32	s15, s1
 8003e7a:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <tim6_main+0x118>)
 8003e7c:	ed83 7b00 	vstr	d7, [r3]
        rightmotor = tim10_read_right();
 8003e80:	f7ff ff74 	bl	8003d6c <tim10_read_right>
 8003e84:	eeb0 7a40 	vmov.f32	s14, s0
 8003e88:	eef0 7a60 	vmov.f32	s15, s1
 8003e8c:	4b31      	ldr	r3, [pc, #196]	; (8003f54 <tim6_main+0x11c>)
 8003e8e:	ed83 7b00 	vstr	d7, [r3]
        #endif
        #if VELOTRACE_TUNING && TRACER_TUNING
        leftmotor  =  tim10_read_left() +  tim7_read_left();
 8003e92:	f7ff ff59 	bl	8003d48 <tim10_read_left>
 8003e96:	ec55 4b10 	vmov	r4, r5, d0
 8003e9a:	f000 f9a5 	bl	80041e8 <tim7_read_left>
 8003e9e:	ec53 2b10 	vmov	r2, r3, d0
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f7fc f9f1 	bl	800028c <__adddf3>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4928      	ldr	r1, [pc, #160]	; (8003f50 <tim6_main+0x118>)
 8003eb0:	e9c1 2300 	strd	r2, r3, [r1]
        rightmotor = tim10_read_right() + tim7_read_right();
 8003eb4:	f7ff ff5a 	bl	8003d6c <tim10_read_right>
 8003eb8:	ec55 4b10 	vmov	r4, r5, d0
 8003ebc:	f000 f9a6 	bl	800420c <tim7_read_right>
 8003ec0:	ec53 2b10 	vmov	r2, r3, d0
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	f7fc f9e0 	bl	800028c <__adddf3>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4920      	ldr	r1, [pc, #128]	; (8003f54 <tim6_main+0x11c>)
 8003ed2:	e9c1 2300 	strd	r2, r3, [r1]
 8003ed6:	e00d      	b.n	8003ef4 <tim6_main+0xbc>
        // printf("tracer_solve(direction) = %7.2f velotrace_solve(tim10_read_velocity()) = %7.2f\r\n", tracer_solve(direction), velotrace_solve(tim10_read_velocity()));
        #endif
    }
    else
    {
        leftmotor = 0;
 8003ed8:	491d      	ldr	r1, [pc, #116]	; (8003f50 <tim6_main+0x118>)
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9c1 2300 	strd	r2, r3, [r1]
        rightmotor = 0;
 8003ee6:	491b      	ldr	r1, [pc, #108]	; (8003f54 <tim6_main+0x11c>)
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	e9c1 2300 	strd	r2, r3, [r1]
    #if D_TIM6_WHILE
    printf("tim6.c > tim6_main() > ");
    printf("leftmotor = %7.2f, rightmotor = %7.2f\r\n", leftmotor, rightmotor);
    #endif

    if(rotary_read_playmode() == motor_free)
 8003ef4:	f7fd fa00 	bl	80012f8 <rotary_read_playmode>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d106      	bne.n	8003f0c <tim6_main+0xd4>
    {
        motor_set(0, 0);
 8003efe:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8003f48 <tim6_main+0x110>
 8003f02:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8003f48 <tim6_main+0x110>
 8003f06:	f7fe ffef 	bl	8002ee8 <motor_set>
            tim6_stop();
        }
		#endif	/* TEMPLATE */
    }

}
 8003f0a:	e019      	b.n	8003f40 <tim6_main+0x108>
        if(sidesensor_read_markerstate() != stop)
 8003f0c:	f7ff f8f2 	bl	80030f4 <sidesensor_read_markerstate>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d010      	beq.n	8003f38 <tim6_main+0x100>
            motor_set(leftmotor, rightmotor);
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <tim6_main+0x118>)
 8003f18:	ed93 7b00 	vldr	d7, [r3]
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <tim6_main+0x11c>)
 8003f1e:	ed93 6b00 	vldr	d6, [r3]
 8003f22:	eeb0 1a46 	vmov.f32	s2, s12
 8003f26:	eef0 1a66 	vmov.f32	s3, s13
 8003f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8003f2e:	eef0 0a67 	vmov.f32	s1, s15
 8003f32:	f7fe ffd9 	bl	8002ee8 <motor_set>
}
 8003f36:	e003      	b.n	8003f40 <tim6_main+0x108>
            switch_reset_enter();
 8003f38:	f7fd facc 	bl	80014d4 <switch_reset_enter>
            tim6_stop();
 8003f3c:	f7ff ff6e 	bl	8003e1c <tim6_stop>
}
 8003f40:	bf00      	nop
 8003f42:	bdb0      	pop	{r4, r5, r7, pc}
 8003f44:	f3af 8000 	nop.w
	...
 8003f50:	200008a8 	.word	0x200008a8
 8003f54:	200008a0 	.word	0x200008a0

08003f58 <tim6_d_print>:

void tim6_d_print()
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af02      	add	r7, sp, #8
    #if D_TIM6
    printf("tim6.c > tim6_d_print() > leftmotor = %5.3f, rightmotor = %5.3f\r\n", leftmotor, rightmotor); 
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <tim6_d_print+0x30>)
 8003f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <tim6_d_print+0x34>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	e9cd 2300 	strd	r2, r3, [sp]
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4807      	ldr	r0, [pc, #28]	; (8003f90 <tim6_d_print+0x38>)
 8003f74:	f006 fae8 	bl	800a548 <iprintf>
    printf("tim6.c > tim6_d_print() > sidesensor_d_print() > ");
 8003f78:	4806      	ldr	r0, [pc, #24]	; (8003f94 <tim6_d_print+0x3c>)
 8003f7a:	f006 fae5 	bl	800a548 <iprintf>
    sidesensor_d_print();
 8003f7e:	f7ff f959 	bl	8003234 <sidesensor_d_print>
    #endif
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	200008a8 	.word	0x200008a8
 8003f8c:	200008a0 	.word	0x200008a0
 8003f90:	0800e5d8 	.word	0x0800e5d8
 8003f94:	0800e61c 	.word	0x0800e61c

08003f98 <tim7_init>:
#if D_TIM7
unsigned char i_count, i_start;
#endif

void tim7_init()
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
    /* init */
    #if D_TIM7
    printf("tim7.c > tim7_init() > ");
 8003f9c:	4808      	ldr	r0, [pc, #32]	; (8003fc0 <tim7_init+0x28>)
 8003f9e:	f006 fad3 	bl	800a548 <iprintf>
    #endif
    analog_init();
 8003fa2:	f7fd fdd9 	bl	8001b58 <analog_init>
    tracer_init(1);
 8003fa6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8003fb8 <tim7_init+0x20>
 8003faa:	f000 f989 	bl	80042c0 <tracer_init>
    HAL_TIM_Base_Stop_IT(&htim7);
 8003fae:	4805      	ldr	r0, [pc, #20]	; (8003fc4 <tim7_init+0x2c>)
 8003fb0:	f004 f880 	bl	80080b4 <HAL_TIM_Base_Stop_IT>
}
 8003fb4:	bf00      	nop
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	00000000 	.word	0x00000000
 8003fbc:	3ff00000 	.word	0x3ff00000
 8003fc0:	0800e650 	.word	0x0800e650
 8003fc4:	20000798 	.word	0x20000798

08003fc8 <tim7_start>:

void tim7_start()
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
    /* start */
    #if D_TIM7
    printf("tim7.c > tim7_start() > ");
 8003fcc:	4817      	ldr	r0, [pc, #92]	; (800402c <tim7_start+0x64>)
 8003fce:	f006 fabb 	bl	800a548 <iprintf>
    #endif
    tim7_set_emergency(0);
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	f000 f8f8 	bl	80041c8 <tim7_set_emergency>
    tim7_left = 0;
 8003fd8:	4915      	ldr	r1, [pc, #84]	; (8004030 <tim7_start+0x68>)
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	e9c1 2300 	strd	r2, r3, [r1]
    tim7_right = 0;
 8003fe6:	4913      	ldr	r1, [pc, #76]	; (8004034 <tim7_start+0x6c>)
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	f04f 0300 	mov.w	r3, #0
 8003ff0:	e9c1 2300 	strd	r2, r3, [r1]
    analog_set_from_flash(flashbuffer.analogmin, flashbuffer.analogmax);
 8003ff4:	4910      	ldr	r1, [pc, #64]	; (8004038 <tim7_start+0x70>)
 8003ff6:	4811      	ldr	r0, [pc, #68]	; (800403c <tim7_start+0x74>)
 8003ff8:	f7fd fcea 	bl	80019d0 <analog_set_from_flash>
    if(rotary_read_playmode() == search)
 8003ffc:	f7fd f97c 	bl	80012f8 <rotary_read_playmode>
 8004000:	4603      	mov	r3, r0
 8004002:	2b01      	cmp	r3, #1
 8004004:	d103      	bne.n	800400e <tim7_start+0x46>
    {
        analog_set_analogmode(analogmode_short);
 8004006:	200c      	movs	r0, #12
 8004008:	f7fd fd4a 	bl	8001aa0 <analog_set_analogmode>
 800400c:	e002      	b.n	8004014 <tim7_start+0x4c>
    }
    else
    {
        analog_set_analogmode(analogmode_all);
 800400e:	2010      	movs	r0, #16
 8004010:	f7fd fd46 	bl	8001aa0 <analog_set_analogmode>
    }

    /* 本番直前なので無条件に analogmode_short にする */
    analog_set_analogmode(analogmode_short);
 8004014:	200c      	movs	r0, #12
 8004016:	f7fd fd43 	bl	8001aa0 <analog_set_analogmode>

    analog_start();
 800401a:	f7fd fdaf 	bl	8001b7c <analog_start>
    tracer_start();
 800401e:	f000 f923 	bl	8004268 <tracer_start>
    HAL_TIM_Base_Start_IT(&htim7);
 8004022:	4807      	ldr	r0, [pc, #28]	; (8004040 <tim7_start+0x78>)
 8004024:	f003 ffd6 	bl	8007fd4 <HAL_TIM_Base_Start_IT>
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}
 800402c:	0800e668 	.word	0x0800e668
 8004030:	200008c0 	.word	0x200008c0
 8004034:	200008b0 	.word	0x200008b0
 8004038:	2000081a 	.word	0x2000081a
 800403c:	200007fa 	.word	0x200007fa
 8004040:	20000798 	.word	0x20000798

08004044 <tim7_stop>:

void tim7_stop()
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
    /* stop */
    #if D_TIM7
    printf("tim7.c > tim7_stop() > ");
 8004048:	4806      	ldr	r0, [pc, #24]	; (8004064 <tim7_stop+0x20>)
 800404a:	f006 fa7d 	bl	800a548 <iprintf>
    #endif
    HAL_TIM_Base_Stop_IT(&htim7);
 800404e:	4806      	ldr	r0, [pc, #24]	; (8004068 <tim7_stop+0x24>)
 8004050:	f004 f830 	bl	80080b4 <HAL_TIM_Base_Stop_IT>
    motor_stop();
 8004054:	f7fe ff14 	bl	8002e80 <motor_stop>
    tracer_stop();
 8004058:	f000 f92a 	bl	80042b0 <tracer_stop>
    analog_stop();
 800405c:	f7fd fd9a 	bl	8001b94 <analog_stop>
}
 8004060:	bf00      	nop
 8004062:	bd80      	pop	{r7, pc}
 8004064:	0800e684 	.word	0x0800e684
 8004068:	20000798 	.word	0x20000798

0800406c <tim7_main>:

void tim7_main()
{
 800406c:	b5b0      	push	{r4, r5, r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
    /* main */
    int direction;

    direction = tim7_read_direction();
 8004072:	f000 f81d 	bl	80040b0 <tim7_read_direction>
 8004076:	6078      	str	r0, [r7, #4]
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("analogl = %5d, analogr = %5d, direction = %5d\r\n", analogl, analogr, direction);
    #endif

    tim7_left   =   tracer_solve(direction);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa35 	bl	80044e8 <tracer_solve>
 800407e:	eeb0 7a40 	vmov.f32	s14, s0
 8004082:	eef0 7a60 	vmov.f32	s15, s1
 8004086:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <tim7_main+0x3c>)
 8004088:	ed83 7b00 	vstr	d7, [r3]
    tim7_right  = - tim7_left;
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <tim7_main+0x3c>)
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	4614      	mov	r4, r2
 8004094:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004098:	4b04      	ldr	r3, [pc, #16]	; (80040ac <tim7_main+0x40>)
 800409a:	e9c3 4500 	strd	r4, r5, [r3]

    #if D_TIM7_WHILE
    printf("tim7.c > tim7_main() > ");
    printf("tim7_left = %7.2f, tim7_right = %7.2f\r\n", tim7_left, tim7_right);
    #endif
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bdb0      	pop	{r4, r5, r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200008c0 	.word	0x200008c0
 80040ac:	200008b0 	.word	0x200008b0

080040b0 <tim7_read_direction>:

/* this method is private */
int tim7_read_direction()
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
    uint16_t analogl, analogr;
	#if !D_TIM7
    unsigned char i_count, i_start;
	#endif

    analogl = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	80fb      	strh	r3, [r7, #6]
    analogr = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	80bb      	strh	r3, [r7, #4]

    switch(analog_read_analogmode())
 80040be:	f7fd fcff 	bl	8001ac0 <analog_read_analogmode>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b10      	cmp	r3, #16
 80040c6:	d83a      	bhi.n	800413e <tim7_read_direction+0x8e>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <tim7_read_direction+0x20>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	0800413f 	.word	0x0800413f
 80040d4:	0800413f 	.word	0x0800413f
 80040d8:	0800413f 	.word	0x0800413f
 80040dc:	0800413f 	.word	0x0800413f
 80040e0:	08004123 	.word	0x08004123
 80040e4:	0800413f 	.word	0x0800413f
 80040e8:	0800413f 	.word	0x0800413f
 80040ec:	0800413f 	.word	0x0800413f
 80040f0:	0800413f 	.word	0x0800413f
 80040f4:	0800413f 	.word	0x0800413f
 80040f8:	0800413f 	.word	0x0800413f
 80040fc:	0800413f 	.word	0x0800413f
 8004100:	08004115 	.word	0x08004115
 8004104:	0800413f 	.word	0x0800413f
 8004108:	0800413f 	.word	0x0800413f
 800410c:	0800413f 	.word	0x0800413f
 8004110:	08004131 	.word	0x08004131
    {
        case analogmode_calibrating:
            break;
        case analogmode_short:
            i_count = 12;
 8004114:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <tim7_read_direction+0x104>)
 8004116:	220c      	movs	r2, #12
 8004118:	701a      	strb	r2, [r3, #0]
            i_start = 0;
 800411a:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <tim7_read_direction+0x108>)
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
            break;
 8004120:	e00e      	b.n	8004140 <tim7_read_direction+0x90>
        case analogmode_long:
            i_count = 4;
 8004122:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <tim7_read_direction+0x104>)
 8004124:	2204      	movs	r2, #4
 8004126:	701a      	strb	r2, [r3, #0]
            i_start = 12;
 8004128:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <tim7_read_direction+0x108>)
 800412a:	220c      	movs	r2, #12
 800412c:	701a      	strb	r2, [r3, #0]
            break;
 800412e:	e007      	b.n	8004140 <tim7_read_direction+0x90>
        case analogmode_all:
            i_count = 16;
 8004130:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <tim7_read_direction+0x104>)
 8004132:	2210      	movs	r2, #16
 8004134:	701a      	strb	r2, [r3, #0]
            i_start = 0;
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <tim7_read_direction+0x108>)
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
            break;
 800413c:	e000      	b.n	8004140 <tim7_read_direction+0x90>
        default:
            /* unknown analogmode ... x_x */
            break;
 800413e:	bf00      	nop
    }

    for(unsigned char i = i_start; i < i_count; i++)
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <tim7_read_direction+0x108>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	70fb      	strb	r3, [r7, #3]
 8004146:	e01b      	b.n	8004180 <tim7_read_direction+0xd0>
    {
        #if D_TIM7_WHILE
        printf("tim7.c > tim7_main() > for() > ");
        printf("i = %2d", i);
        #endif
        if(i % 2 == 0)
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <tim7_read_direction+0xb8>
        {
            #if D_TIM7_WHILE
            printf("  odd\r\n");
            #endif
            analogl += analog_sensor_get(i);
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fd fd48 	bl	8001bec <analog_sensor_get>
 800415c:	4603      	mov	r3, r0
 800415e:	461a      	mov	r2, r3
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	4413      	add	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
 8004166:	e008      	b.n	800417a <tim7_read_direction+0xca>
        else
        {
            #if D_TIM7_WHILE
            printf(" even\r\n");
            #endif
            analogr += analog_sensor_get(i);
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	4618      	mov	r0, r3
 800416c:	f7fd fd3e 	bl	8001bec <analog_sensor_get>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	88bb      	ldrh	r3, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	80bb      	strh	r3, [r7, #4]
    for(unsigned char i = i_start; i < i_count; i++)
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	3301      	adds	r3, #1
 800417e:	70fb      	strb	r3, [r7, #3]
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <tim7_read_direction+0x104>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	429a      	cmp	r2, r3
 8004188:	d3de      	bcc.n	8004148 <tim7_read_direction+0x98>
        }
    }

    if(analogl + analogr >= TIM7_EMERGENCY_THRESHOLD * i_count)
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	88bb      	ldrh	r3, [r7, #4]
 800418e:	441a      	add	r2, r3
 8004190:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <tim7_read_direction+0x104>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	4619      	mov	r1, r3
 8004196:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800419a:	fb03 f301 	mul.w	r3, r3, r1
 800419e:	429a      	cmp	r2, r3
 80041a0:	db01      	blt.n	80041a6 <tim7_read_direction+0xf6>
    {
    	tim7_main_emergency();
 80041a2:	f000 f80b 	bl	80041bc <tim7_main_emergency>
    }

    return analogl - analogr;
 80041a6:	88fa      	ldrh	r2, [r7, #6]
 80041a8:	88bb      	ldrh	r3, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	200008b8 	.word	0x200008b8
 80041b8:	200008c8 	.word	0x200008c8

080041bc <tim7_main_emergency>:

void tim7_main_emergency()
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
	switch_reset_enter();
 80041c0:	f7fd f988 	bl	80014d4 <switch_reset_enter>
}
 80041c4:	bf00      	nop
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <tim7_set_emergency>:

void tim7_set_emergency(char emergency_)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
    tim7_emergency = emergency_;
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <tim7_set_emergency+0x1c>)
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	7013      	strb	r3, [r2, #0]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	200008b9 	.word	0x200008b9

080041e8 <tim7_read_left>:
{
    return tim7_emergency;
}

double tim7_read_left()
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c >  tim7_read_left() >  tim7_left = %7.2f\r\n", tim7_left);
    #endif
    return tim7_left;
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <tim7_read_left+0x20>)
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80041f6:	eeb0 0a47 	vmov.f32	s0, s14
 80041fa:	eef0 0a67 	vmov.f32	s1, s15
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	200008c0 	.word	0x200008c0

0800420c <tim7_read_right>:

double tim7_read_right()
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
    #if D_TIM7_WHILE
    printf("tim7.c > tim7_read_right() > tim7_right = %7.2f\r\n", tim7_right);
    #endif
    return tim7_right;
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <tim7_read_right+0x20>)
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	ec43 2b17 	vmov	d7, r2, r3
}
 800421a:	eeb0 0a47 	vmov.f32	s0, s14
 800421e:	eef0 0a67 	vmov.f32	s1, s15
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	200008b0 	.word	0x200008b0

08004230 <tim7_d_print>:

void tim7_d_print()
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
    /* d_print */
    #if D_TIM7
    printf("tim7.c > tim7_d_print() > ");
 8004234:	4807      	ldr	r0, [pc, #28]	; (8004254 <tim7_d_print+0x24>)
 8004236:	f006 f987 	bl	800a548 <iprintf>
    printf("i_count = %3d, i_start = %3d\r\n", i_count, i_start);
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <tim7_d_print+0x28>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	4619      	mov	r1, r3
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <tim7_d_print+0x2c>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	4806      	ldr	r0, [pc, #24]	; (8004260 <tim7_d_print+0x30>)
 8004248:	f006 f97e 	bl	800a548 <iprintf>
    analog_d_print();
 800424c:	f7fd fac6 	bl	80017dc <analog_d_print>
    #endif
}
 8004250:	bf00      	nop
 8004252:	bd80      	pop	{r7, pc}
 8004254:	0800e69c 	.word	0x0800e69c
 8004258:	200008b8 	.word	0x200008b8
 800425c:	200008c8 	.word	0x200008c8
 8004260:	0800e6b8 	.word	0x0800e6b8
 8004264:	00000000 	.word	0x00000000

08004268 <tracer_start>:
double tracer_samplingtime;

PID tracer_pid;

void tracer_start()
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
    tracer_s_error = 0;
 800426c:	490e      	ldr	r1, [pc, #56]	; (80042a8 <tracer_start+0x40>)
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	e9c1 2300 	strd	r2, r3, [r1]
    tracer_before_error = 0;
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <tracer_start+0x44>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
    tracer_set_gain(rotary_read_value());
 8004280:	f7fd f852 	bl	8001328 <rotary_read_value>
 8004284:	4603      	mov	r3, r0
 8004286:	b29b      	uxth	r3, r3
 8004288:	4618      	mov	r0, r3
 800428a:	f000 f8ef 	bl	800446c <tracer_set_gain>
    tracer_set_target(0);
 800428e:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80042a0 <tracer_start+0x38>
 8004292:	f000 f917 	bl	80044c4 <tracer_set_target>
    printf("tracer.c > tracer_start > ");
    printf("target = %5.2f\r\n", tracer_pid.target);
    printf("tracer.c > tracer_start > ");
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
    #endif
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	f3af 8000 	nop.w
	...
 80042a8:	20000900 	.word	0x20000900
 80042ac:	200008f8 	.word	0x200008f8

080042b0 <tracer_stop>:

void tracer_stop()
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
    tracer_set_target_zero();
 80042b4:	f000 f826 	bl	8004304 <tracer_set_target_zero>
    tracer_set_gain_zero();
 80042b8:	f000 f814 	bl	80042e4 <tracer_set_gain_zero>
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}

080042c0 <tracer_init>:

void tracer_init(double samplingtime_)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	ed87 0b00 	vstr	d0, [r7]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_init > ");
    printf("sampling_time = 1, tracer_s_error = 0, tracer_before_error = 0\r\n");
    #endif
    tracer_samplingtime = samplingtime_;
 80042ca:	4905      	ldr	r1, [pc, #20]	; (80042e0 <tracer_init+0x20>)
 80042cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042d0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	200008f0 	.word	0x200008f0

080042e4 <tracer_set_gain_zero>:

void tracer_set_gain_zero()
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
    tracer_pid.target = 0;
 80042e8:	4905      	ldr	r1, [pc, #20]	; (8004300 <tracer_set_gain_zero+0x1c>)
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	e9c1 2300 	strd	r2, r3, [r1]
}
 80042f6:	bf00      	nop
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	200008d0 	.word	0x200008d0

08004304 <tracer_set_target_zero>:

void tracer_set_target_zero()
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
    tracer_pid.kp = 0;
 8004308:	490c      	ldr	r1, [pc, #48]	; (800433c <tracer_set_target_zero+0x38>)
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9c1 2302 	strd	r2, r3, [r1, #8]
    tracer_pid.ki = 0;
 8004316:	4909      	ldr	r1, [pc, #36]	; (800433c <tracer_set_target_zero+0x38>)
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	e9c1 2304 	strd	r2, r3, [r1, #16]
    tracer_pid.kd = 0;
 8004324:	4905      	ldr	r1, [pc, #20]	; (800433c <tracer_set_target_zero+0x38>)
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8004332:	bf00      	nop
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	200008d0 	.word	0x200008d0

08004340 <tracer_read_gain_kp>:

double tracer_read_gain_kp(unsigned short int i)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	80fb      	strh	r3, [r7, #6]
    return TRACER_KP_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KP_MAX - TRACER_KP_MIN) / (double) (TRACER_STEP_SIZE - 1);
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	f1c3 030f 	rsb	r3, r3, #15
 8004350:	4618      	mov	r0, r3
 8004352:	f7fc f8e7 	bl	8000524 <__aeabi_i2d>
 8004356:	a313      	add	r3, pc, #76	; (adr r3, 80043a4 <tracer_read_gain_kp+0x64>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fc f94c 	bl	80005f8 <__aeabi_dmul>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <tracer_read_gain_kp+0x60>)
 800436e:	f7fc fa6d 	bl	800084c <__aeabi_ddiv>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	a108      	add	r1, pc, #32	; (adr r1, 8004398 <tracer_read_gain_kp+0x58>)
 8004378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800437c:	f7fb ff84 	bl	8000288 <__aeabi_dsub>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	ec43 2b17 	vmov	d7, r2, r3
}
 8004388:	eeb0 0a47 	vmov.f32	s0, s14
 800438c:	eef0 0a67 	vmov.f32	s1, s15
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	60000000 	.word	0x60000000
 800439c:	3fe66666 	.word	0x3fe66666
 80043a0:	402e0000 	.word	0x402e0000
 80043a4:	20000000 	.word	0x20000000
 80043a8:	3fd33333 	.word	0x3fd33333

080043ac <tracer_read_gain_ki>:

double tracer_read_gain_ki(unsigned short int i)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	80fb      	strh	r3, [r7, #6]
    return TRACER_KI_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KI_MAX - TRACER_KI_MIN) / (double) (TRACER_STEP_SIZE - 1);
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	f1c3 030f 	rsb	r3, r3, #15
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc f8b1 	bl	8000524 <__aeabi_i2d>
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	f7fc f915 	bl	80005f8 <__aeabi_dmul>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <tracer_read_gain_ki+0x5c>)
 80043dc:	f7fc fa36 	bl	800084c <__aeabi_ddiv>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	f04f 0000 	mov.w	r0, #0
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	f7fb ff4c 	bl	8000288 <__aeabi_dsub>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80043f8:	eeb0 0a47 	vmov.f32	s0, s14
 80043fc:	eef0 0a67 	vmov.f32	s1, s15
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	402e0000 	.word	0x402e0000

0800440c <tracer_read_gain_kd>:

double tracer_read_gain_kd(unsigned short int i)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	80fb      	strh	r3, [r7, #6]
    return TRACER_KD_MAX - ((TRACER_STEP_SIZE - 1) - i) * (double) (TRACER_KD_MAX - TRACER_KD_MIN) / (double) (TRACER_STEP_SIZE - 1);
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	f1c3 030f 	rsb	r3, r3, #15
 800441c:	4618      	mov	r0, r3
 800441e:	f7fc f881 	bl	8000524 <__aeabi_i2d>
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	f7fc f8e5 	bl	80005f8 <__aeabi_dmul>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4610      	mov	r0, r2
 8004434:	4619      	mov	r1, r3
 8004436:	f04f 0200 	mov.w	r2, #0
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <tracer_read_gain_kd+0x58>)
 800443c:	f7fc fa06 	bl	800084c <__aeabi_ddiv>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	f04f 0000 	mov.w	r0, #0
 8004448:	4907      	ldr	r1, [pc, #28]	; (8004468 <tracer_read_gain_kd+0x5c>)
 800444a:	f7fb ff1d 	bl	8000288 <__aeabi_dsub>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	ec43 2b17 	vmov	d7, r2, r3
}
 8004456:	eeb0 0a47 	vmov.f32	s0, s14
 800445a:	eef0 0a67 	vmov.f32	s1, s15
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	402e0000 	.word	0x402e0000
 8004468:	40240000 	.word	0x40240000

0800446c <tracer_set_gain>:

void tracer_set_gain(unsigned short int i)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	80fb      	strh	r3, [r7, #6]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_set_gain() > ");
    #endif
    tracer_pid.kp = tracer_read_gain_kp(i);
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff ff61 	bl	8004340 <tracer_read_gain_kp>
 800447e:	eeb0 7a40 	vmov.f32	s14, s0
 8004482:	eef0 7a60 	vmov.f32	s15, s1
 8004486:	4b0e      	ldr	r3, [pc, #56]	; (80044c0 <tracer_set_gain+0x54>)
 8004488:	ed83 7b02 	vstr	d7, [r3, #8]
    tracer_pid.ki = tracer_read_gain_ki(i);
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff ff8c 	bl	80043ac <tracer_read_gain_ki>
 8004494:	eeb0 7a40 	vmov.f32	s14, s0
 8004498:	eef0 7a60 	vmov.f32	s15, s1
 800449c:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <tracer_set_gain+0x54>)
 800449e:	ed83 7b04 	vstr	d7, [r3, #16]
    tracer_pid.kd = tracer_read_gain_kd(i);
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff ffb1 	bl	800440c <tracer_read_gain_kd>
 80044aa:	eeb0 7a40 	vmov.f32	s14, s0
 80044ae:	eef0 7a60 	vmov.f32	s15, s1
 80044b2:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <tracer_set_gain+0x54>)
 80044b4:	ed83 7b06 	vstr	d7, [r3, #24]
    #if D_TRACER
    printf("kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", tracer_pid.kp, tracer_pid.ki, tracer_pid.kd);
    #endif
}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	200008d0 	.word	0x200008d0

080044c4 <tracer_set_target>:

void tracer_set_target(double target_)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	ed87 0b00 	vstr	d0, [r7]
    #if D_TRACER
    printf("tracer.c > ");
    printf("tracer_set_target() > ");
    #endif
    tracer_pid.target = target_;
 80044ce:	4905      	ldr	r1, [pc, #20]	; (80044e4 <tracer_set_target+0x20>)
 80044d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044d4:	e9c1 2300 	strd	r2, r3, [r1]
    #if D_TRACER
    printf("target_ = %5.2f, target = %5.2f\r\n", target_, tracer_pid.target);
    #endif
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	200008d0 	.word	0x200008d0

080044e8 <tracer_solve>:

double tracer_solve(int reference_)
{
 80044e8:	b5b0      	push	{r4, r5, r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("reference_ = %5d\r\n", reference_);
    #endif

    error = reference_;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	61fb      	str	r3, [r7, #28]

    d_error = (error - tracer_before_error) / (double) tracer_samplingtime;
 80044f4:	4b33      	ldr	r3, [pc, #204]	; (80045c4 <tracer_solve+0xdc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fc f811 	bl	8000524 <__aeabi_i2d>
 8004502:	4b31      	ldr	r3, [pc, #196]	; (80045c8 <tracer_solve+0xe0>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f7fc f9a0 	bl	800084c <__aeabi_ddiv>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	e9c7 2304 	strd	r2, r3, [r7, #16]
    tracer_s_error += error * (double) tracer_samplingtime;
 8004514:	69f8      	ldr	r0, [r7, #28]
 8004516:	f7fc f805 	bl	8000524 <__aeabi_i2d>
 800451a:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <tracer_solve+0xe0>)
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f7fc f86a 	bl	80005f8 <__aeabi_dmul>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4610      	mov	r0, r2
 800452a:	4619      	mov	r1, r3
 800452c:	4b27      	ldr	r3, [pc, #156]	; (80045cc <tracer_solve+0xe4>)
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	f7fb feab 	bl	800028c <__adddf3>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4924      	ldr	r1, [pc, #144]	; (80045cc <tracer_solve+0xe4>)
 800453c:	e9c1 2300 	strd	r2, r3, [r1]

    result = tracer_pid.kp * error + tracer_pid.ki * tracer_s_error + tracer_pid.kd * d_error;
 8004540:	4b23      	ldr	r3, [pc, #140]	; (80045d0 <tracer_solve+0xe8>)
 8004542:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004546:	69f8      	ldr	r0, [r7, #28]
 8004548:	f7fb ffec 	bl	8000524 <__aeabi_i2d>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4620      	mov	r0, r4
 8004552:	4629      	mov	r1, r5
 8004554:	f7fc f850 	bl	80005f8 <__aeabi_dmul>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4614      	mov	r4, r2
 800455e:	461d      	mov	r5, r3
 8004560:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <tracer_solve+0xe8>)
 8004562:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004566:	4b19      	ldr	r3, [pc, #100]	; (80045cc <tracer_solve+0xe4>)
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f7fc f844 	bl	80005f8 <__aeabi_dmul>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4620      	mov	r0, r4
 8004576:	4629      	mov	r1, r5
 8004578:	f7fb fe88 	bl	800028c <__adddf3>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4614      	mov	r4, r2
 8004582:	461d      	mov	r5, r3
 8004584:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <tracer_solve+0xe8>)
 8004586:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800458a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800458e:	f7fc f833 	bl	80005f8 <__aeabi_dmul>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4620      	mov	r0, r4
 8004598:	4629      	mov	r1, r5
 800459a:	f7fb fe77 	bl	800028c <__adddf3>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    #if D_TRACER_WHILE
    printf("tracer.c > tracer_solve() > ");
    printf("%7.2f = %7.2f * %5d + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, tracer_pid.kp, error, tracer_pid.ki, tracer_s_error, tracer_pid.kd, d_error);
    #endif

    tracer_before_error = error;
 80045a6:	4a07      	ldr	r2, [pc, #28]	; (80045c4 <tracer_solve+0xdc>)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	6013      	str	r3, [r2, #0]

    return result;
 80045ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80045b4:	eeb0 0a47 	vmov.f32	s0, s14
 80045b8:	eef0 0a67 	vmov.f32	s1, s15
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bdb0      	pop	{r4, r5, r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200008f8 	.word	0x200008f8
 80045c8:	200008f0 	.word	0x200008f0
 80045cc:	20000900 	.word	0x20000900
 80045d0:	200008d0 	.word	0x200008d0

080045d4 <tracer_print_values>:
    printf("tracer.c > tracer_d_print() > target = %5d, kp = %7.2f, ki = %7.2f, kd = %7.2f\r\n", 0, tracer_read_gain_kp(0), tracer_read_gain_ki(0), tracer_read_gain_kd(0));
    printf("tracer.c > tracer_d_print() > tracer_before_error = %5d, tracer_s_error = %7.2f\r\n", tracer_before_error, tracer_s_error);
}

void tracer_print_values()
{
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	ed2d 8b02 	vpush	{d8}
 80045da:	b084      	sub	sp, #16
 80045dc:	af04      	add	r7, sp, #16
	printf("Tracer\r\n");
 80045de:	4819      	ldr	r0, [pc, #100]	; (8004644 <tracer_print_values+0x70>)
 80045e0:	f006 f838 	bl	800a654 <puts>
	printf("target = 0\r\n");
 80045e4:	4818      	ldr	r0, [pc, #96]	; (8004648 <tracer_print_values+0x74>)
 80045e6:	f006 f835 	bl	800a654 <puts>
	printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", tracer_read_gain_kp(rotary_read_value()), tracer_read_gain_ki(rotary_read_value()), tracer_read_gain_kd(rotary_read_value()));
 80045ea:	f7fc fe9d 	bl	8001328 <rotary_read_value>
 80045ee:	4603      	mov	r3, r0
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fea4 	bl	8004340 <tracer_read_gain_kp>
 80045f8:	ec55 4b10 	vmov	r4, r5, d0
 80045fc:	f7fc fe94 	bl	8001328 <rotary_read_value>
 8004600:	4603      	mov	r3, r0
 8004602:	b29b      	uxth	r3, r3
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fed1 	bl	80043ac <tracer_read_gain_ki>
 800460a:	eeb0 8a40 	vmov.f32	s16, s0
 800460e:	eef0 8a60 	vmov.f32	s17, s1
 8004612:	f7fc fe89 	bl	8001328 <rotary_read_value>
 8004616:	4603      	mov	r3, r0
 8004618:	b29b      	uxth	r3, r3
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fef6 	bl	800440c <tracer_read_gain_kd>
 8004620:	eeb0 7a40 	vmov.f32	s14, s0
 8004624:	eef0 7a60 	vmov.f32	s15, s1
 8004628:	ed8d 7b02 	vstr	d7, [sp, #8]
 800462c:	ed8d 8b00 	vstr	d8, [sp]
 8004630:	4622      	mov	r2, r4
 8004632:	462b      	mov	r3, r5
 8004634:	4805      	ldr	r0, [pc, #20]	; (800464c <tracer_print_values+0x78>)
 8004636:	f005 ff87 	bl	800a548 <iprintf>
}
 800463a:	bf00      	nop
 800463c:	46bd      	mov	sp, r7
 800463e:	ecbd 8b02 	vpop	{d8}
 8004642:	bdb0      	pop	{r4, r5, r7, pc}
 8004644:	0800e780 	.word	0x0800e780
 8004648:	0800e788 	.word	0x0800e788
 800464c:	0800e794 	.word	0x0800e794

08004650 <velotrace_init>:
double velotrace_samplingtime;

PID velotrace_pid;

void velotrace_init(double samplingtime_)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	ed87 0b00 	vstr	d0, [r7]
    velotrace_samplingtime = samplingtime_;
 800465a:	4905      	ldr	r1, [pc, #20]	; (8004670 <velotrace_init+0x20>)
 800465c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004660:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	20000910 	.word	0x20000910

08004674 <velotrace_start>:

void velotrace_start()
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
    #if D_VELOTRACE
    printf("velotrace_samplingtime = 1, velotrace_s_error = 0, velotrace_before_error = 0\r\n");
    #endif
    velotrace_s_error = 0;
 8004678:	491f      	ldr	r1, [pc, #124]	; (80046f8 <velotrace_start+0x84>)
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9c1 2300 	strd	r2, r3, [r1]
    velotrace_before_error = 0;
 8004686:	491d      	ldr	r1, [pc, #116]	; (80046fc <velotrace_start+0x88>)
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9c1 2300 	strd	r2, r3, [r1]
    switch(rotary_read_playmode())
 8004694:	f7fc fe30 	bl	80012f8 <rotary_read_playmode>
 8004698:	4603      	mov	r3, r0
 800469a:	2b06      	cmp	r3, #6
 800469c:	d00d      	beq.n	80046ba <velotrace_start+0x46>
 800469e:	2b06      	cmp	r3, #6
 80046a0:	dc19      	bgt.n	80046d6 <velotrace_start+0x62>
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d002      	beq.n	80046ac <velotrace_start+0x38>
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	d011      	beq.n	80046ce <velotrace_start+0x5a>
 80046aa:	e014      	b.n	80046d6 <velotrace_start+0x62>
    {
        case search:
            velotrace_set_gain(0);
 80046ac:	2000      	movs	r0, #0
 80046ae:	f000 f8ef 	bl	8004890 <velotrace_set_gain>
            velotrace_set_target(0);
 80046b2:	2000      	movs	r0, #0
 80046b4:	f000 f918 	bl	80048e8 <velotrace_set_target>
            break;
 80046b8:	e01c      	b.n	80046f4 <velotrace_start+0x80>
        case velotrace_tuning:
            velotrace_set_target_zero();
 80046ba:	f000 f949 	bl	8004950 <velotrace_set_target_zero>
            velotrace_set_gain(rotary_read_value());
 80046be:	f7fc fe33 	bl	8001328 <rotary_read_value>
 80046c2:	4603      	mov	r3, r0
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f8e2 	bl	8004890 <velotrace_set_gain>
            break;
 80046cc:	e012      	b.n	80046f4 <velotrace_start+0x80>
        case tracer_tuning:
            velotrace_set_target_zero();
 80046ce:	f000 f93f 	bl	8004950 <velotrace_set_target_zero>
            velotrace_set_gain_zero();
 80046d2:	f000 f91f 	bl	8004914 <velotrace_set_gain_zero>
        default:
            velotrace_set_gain(rotary_read_value());
 80046d6:	f7fc fe27 	bl	8001328 <rotary_read_value>
 80046da:	4603      	mov	r3, r0
 80046dc:	b29b      	uxth	r3, r3
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f8d6 	bl	8004890 <velotrace_set_gain>
            velotrace_set_target(rotary_read_value());
 80046e4:	f7fc fe20 	bl	8001328 <rotary_read_value>
 80046e8:	4603      	mov	r3, r0
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 f8fb 	bl	80048e8 <velotrace_set_target>
            break;
 80046f2:	bf00      	nop
    }
}
 80046f4:	bf00      	nop
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20000918 	.word	0x20000918
 80046fc:	20000908 	.word	0x20000908

08004700 <velotrace_stop>:

void velotrace_stop()
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
    velotrace_set_target_zero();
 8004704:	f000 f924 	bl	8004950 <velotrace_set_target_zero>
    velotrace_set_gain_zero();
 8004708:	f000 f904 	bl	8004914 <velotrace_set_gain_zero>
}
 800470c:	bf00      	nop
 800470e:	bd80      	pop	{r7, pc}

08004710 <velotrace_read_target>:

double velotrace_read_target(unsigned short int i)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_TARGET_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_TARGET_MAX - VELOCITY_TARGET_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	f1c3 030f 	rsb	r3, r3, #15
 8004720:	4618      	mov	r0, r3
 8004722:	f7fb feff 	bl	8000524 <__aeabi_i2d>
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	f7fb ff63 	bl	80005f8 <__aeabi_dmul>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <velotrace_read_target+0x58>)
 8004740:	f7fc f884 	bl	800084c <__aeabi_ddiv>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	f04f 0000 	mov.w	r0, #0
 800474c:	4907      	ldr	r1, [pc, #28]	; (800476c <velotrace_read_target+0x5c>)
 800474e:	f7fb fd9b 	bl	8000288 <__aeabi_dsub>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	ec43 2b17 	vmov	d7, r2, r3
}
 800475a:	eeb0 0a47 	vmov.f32	s0, s14
 800475e:	eef0 0a67 	vmov.f32	s1, s15
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	402e0000 	.word	0x402e0000
 800476c:	3ff00000 	.word	0x3ff00000

08004770 <velotrace_read_gain_kp>:

double velotrace_read_gain_kp(unsigned short int i)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KP_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KP_MAX - VELOCITY_KP_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	f1c3 030f 	rsb	r3, r3, #15
 8004780:	4618      	mov	r0, r3
 8004782:	f7fb fecf 	bl	8000524 <__aeabi_i2d>
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	f7fb ff33 	bl	80005f8 <__aeabi_dmul>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <velotrace_read_gain_kp+0x58>)
 80047a0:	f7fc f854 	bl	800084c <__aeabi_ddiv>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	f04f 0000 	mov.w	r0, #0
 80047ac:	4907      	ldr	r1, [pc, #28]	; (80047cc <velotrace_read_gain_kp+0x5c>)
 80047ae:	f7fb fd6b 	bl	8000288 <__aeabi_dsub>
 80047b2:	4602      	mov	r2, r0
 80047b4:	460b      	mov	r3, r1
 80047b6:	ec43 2b17 	vmov	d7, r2, r3
}
 80047ba:	eeb0 0a47 	vmov.f32	s0, s14
 80047be:	eef0 0a67 	vmov.f32	s1, s15
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	402e0000 	.word	0x402e0000
 80047cc:	408f4000 	.word	0x408f4000

080047d0 <velotrace_read_gain_ki>:

double velotrace_read_gain_ki(unsigned short int i)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KI_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KI_MAX - VELOCITY_KI_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	f1c3 030f 	rsb	r3, r3, #15
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fb fe9f 	bl	8000524 <__aeabi_i2d>
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	f7fb ff03 	bl	80005f8 <__aeabi_dmul>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4610      	mov	r0, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <velotrace_read_gain_ki+0x58>)
 8004800:	f7fc f824 	bl	800084c <__aeabi_ddiv>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	f04f 0000 	mov.w	r0, #0
 800480c:	4907      	ldr	r1, [pc, #28]	; (800482c <velotrace_read_gain_ki+0x5c>)
 800480e:	f7fb fd3b 	bl	8000288 <__aeabi_dsub>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	ec43 2b17 	vmov	d7, r2, r3
}
 800481a:	eeb0 0a47 	vmov.f32	s0, s14
 800481e:	eef0 0a67 	vmov.f32	s1, s15
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	402e0000 	.word	0x402e0000
 800482c:	40590000 	.word	0x40590000

08004830 <velotrace_read_gain_kd>:

double velotrace_read_gain_kd(unsigned short int i)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	80fb      	strh	r3, [r7, #6]
    return VELOCITY_KD_MAX - ((VELOTRACE_STEP_SIZE - 1) - i) * (double) (VELOCITY_KD_MAX - VELOCITY_KD_MIN) / (double) (VELOTRACE_STEP_SIZE - 1);
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	f1c3 030f 	rsb	r3, r3, #15
 8004840:	4618      	mov	r0, r3
 8004842:	f7fb fe6f 	bl	8000524 <__aeabi_i2d>
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	f7fb fed3 	bl	80005f8 <__aeabi_dmul>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <velotrace_read_gain_kd+0x5c>)
 8004860:	f7fb fff4 	bl	800084c <__aeabi_ddiv>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	f04f 0000 	mov.w	r0, #0
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	f7fb fd0a 	bl	8000288 <__aeabi_dsub>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	ec43 2b17 	vmov	d7, r2, r3
}
 800487c:	eeb0 0a47 	vmov.f32	s0, s14
 8004880:	eef0 0a67 	vmov.f32	s1, s15
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	402e0000 	.word	0x402e0000

08004890 <velotrace_set_gain>:

void velotrace_set_gain(unsigned short int i)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	80fb      	strh	r3, [r7, #6]
    #if D_VELOTRACE
    printf("velotrace_pid = velotrace_read_gain\r\n");
    #endif
    velotrace_pid.kp = velotrace_read_gain_kp(i);
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff ff67 	bl	8004770 <velotrace_read_gain_kp>
 80048a2:	eeb0 7a40 	vmov.f32	s14, s0
 80048a6:	eef0 7a60 	vmov.f32	s15, s1
 80048aa:	4b0e      	ldr	r3, [pc, #56]	; (80048e4 <velotrace_set_gain+0x54>)
 80048ac:	ed83 7b02 	vstr	d7, [r3, #8]
    velotrace_pid.ki = velotrace_read_gain_ki(i);
 80048b0:	88fb      	ldrh	r3, [r7, #6]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff ff8c 	bl	80047d0 <velotrace_read_gain_ki>
 80048b8:	eeb0 7a40 	vmov.f32	s14, s0
 80048bc:	eef0 7a60 	vmov.f32	s15, s1
 80048c0:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <velotrace_set_gain+0x54>)
 80048c2:	ed83 7b04 	vstr	d7, [r3, #16]
    velotrace_pid.kd = velotrace_read_gain_kd(i);
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff ffb1 	bl	8004830 <velotrace_read_gain_kd>
 80048ce:	eeb0 7a40 	vmov.f32	s14, s0
 80048d2:	eef0 7a60 	vmov.f32	s15, s1
 80048d6:	4b03      	ldr	r3, [pc, #12]	; (80048e4 <velotrace_set_gain+0x54>)
 80048d8:	ed83 7b06 	vstr	d7, [r3, #24]
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000920 	.word	0x20000920

080048e8 <velotrace_set_target>:

void velotrace_set_target(unsigned short int i)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	80fb      	strh	r3, [r7, #6]
    #if D_VELOTRACE
    printf("velotrace_pid = velotrace_read_target\r\n");
    #endif
    velotrace_pid.target = velotrace_read_target(i);
 80048f2:	88fb      	ldrh	r3, [r7, #6]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff ff0b 	bl	8004710 <velotrace_read_target>
 80048fa:	eeb0 7a40 	vmov.f32	s14, s0
 80048fe:	eef0 7a60 	vmov.f32	s15, s1
 8004902:	4b03      	ldr	r3, [pc, #12]	; (8004910 <velotrace_set_target+0x28>)
 8004904:	ed83 7b00 	vstr	d7, [r3]
}
 8004908:	bf00      	nop
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000920 	.word	0x20000920

08004914 <velotrace_set_gain_zero>:

void velotrace_set_gain_zero()
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
    velotrace_pid.kp = 0;
 8004918:	490c      	ldr	r1, [pc, #48]	; (800494c <velotrace_set_gain_zero+0x38>)
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	e9c1 2302 	strd	r2, r3, [r1, #8]
    velotrace_pid.ki = 0;
 8004926:	4909      	ldr	r1, [pc, #36]	; (800494c <velotrace_set_gain_zero+0x38>)
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	e9c1 2304 	strd	r2, r3, [r1, #16]
    velotrace_pid.kd = 0;
 8004934:	4905      	ldr	r1, [pc, #20]	; (800494c <velotrace_set_gain_zero+0x38>)
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	20000920 	.word	0x20000920

08004950 <velotrace_set_target_zero>:

void velotrace_set_target_zero()
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
    velotrace_pid.target = 0;
 8004954:	4905      	ldr	r1, [pc, #20]	; (800496c <velotrace_set_target_zero+0x1c>)
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	20000920 	.word	0x20000920

08004970 <velotrace_solve>:

double velotrace_solve(double reference_)
{
 8004970:	b5b0      	push	{r4, r5, r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	ed87 0b00 	vstr	d0, [r7]
    double error;
    double d_error;
    double result;

    error = reference_ - velotrace_pid.target;
 800497a:	4b3a      	ldr	r3, [pc, #232]	; (8004a64 <velotrace_solve+0xf4>)
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004984:	f7fb fc80 	bl	8000288 <__aeabi_dsub>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    d_error = (error - velotrace_before_error) / (double) velotrace_samplingtime;
 8004990:	4b35      	ldr	r3, [pc, #212]	; (8004a68 <velotrace_solve+0xf8>)
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800499a:	f7fb fc75 	bl	8000288 <__aeabi_dsub>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4610      	mov	r0, r2
 80049a4:	4619      	mov	r1, r3
 80049a6:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <velotrace_solve+0xfc>)
 80049a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ac:	f7fb ff4e 	bl	800084c <__aeabi_ddiv>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    velotrace_s_error += error * (double) velotrace_samplingtime;
 80049b8:	4b2c      	ldr	r3, [pc, #176]	; (8004a6c <velotrace_solve+0xfc>)
 80049ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049c2:	f7fb fe19 	bl	80005f8 <__aeabi_dmul>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4610      	mov	r0, r2
 80049cc:	4619      	mov	r1, r3
 80049ce:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <velotrace_solve+0x100>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb fc5a 	bl	800028c <__adddf3>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4924      	ldr	r1, [pc, #144]	; (8004a70 <velotrace_solve+0x100>)
 80049de:	e9c1 2300 	strd	r2, r3, [r1]

    result = - (velotrace_pid.kp * error + velotrace_pid.ki * velotrace_s_error + velotrace_pid.kd * d_error);
 80049e2:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <velotrace_solve+0xf4>)
 80049e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80049e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ec:	f7fb fe04 	bl	80005f8 <__aeabi_dmul>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4614      	mov	r4, r2
 80049f6:	461d      	mov	r5, r3
 80049f8:	4b1a      	ldr	r3, [pc, #104]	; (8004a64 <velotrace_solve+0xf4>)
 80049fa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80049fe:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <velotrace_solve+0x100>)
 8004a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a04:	f7fb fdf8 	bl	80005f8 <__aeabi_dmul>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	f7fb fc3c 	bl	800028c <__adddf3>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4614      	mov	r4, r2
 8004a1a:	461d      	mov	r5, r3
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <velotrace_solve+0xf4>)
 8004a1e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004a22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a26:	f7fb fde7 	bl	80005f8 <__aeabi_dmul>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4620      	mov	r0, r4
 8004a30:	4629      	mov	r1, r5
 8004a32:	f7fb fc2b 	bl	800028c <__adddf3>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004a42:	60fb      	str	r3, [r7, #12]
    printf("velotrace_solve()\r\n");
    printf("reference_ - velotrace_pid.target = %7.2f - %7.2f = %7.2f\r\n", reference_, velotrace_pid.target, reference_ - velotrace_pid.target);
    printf("%7.2f = %7.2f * %7.2f + %7.2f * %7.2f + %7.2f * %7.2f\r\n", result, velotrace_pid.kp, error, velotrace_pid.ki, velotrace_s_error, velotrace_pid.kd, d_error);
    #endif

    velotrace_before_error = error;
 8004a44:	4908      	ldr	r1, [pc, #32]	; (8004a68 <velotrace_solve+0xf8>)
 8004a46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a4a:	e9c1 2300 	strd	r2, r3, [r1]

    return result;
 8004a4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a52:	ec43 2b17 	vmov	d7, r2, r3
}
 8004a56:	eeb0 0a47 	vmov.f32	s0, s14
 8004a5a:	eef0 0a67 	vmov.f32	s1, s15
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bdb0      	pop	{r4, r5, r7, pc}
 8004a64:	20000920 	.word	0x20000920
 8004a68:	20000908 	.word	0x20000908
 8004a6c:	20000910 	.word	0x20000910
 8004a70:	20000918 	.word	0x20000918

08004a74 <velotrace_print_values>:

void velotrace_print_values()
{
 8004a74:	b5b0      	push	{r4, r5, r7, lr}
 8004a76:	ed2d 8b02 	vpush	{d8}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af04      	add	r7, sp, #16
	printf("Velotrace\r\n");
 8004a7e:	481e      	ldr	r0, [pc, #120]	; (8004af8 <velotrace_print_values+0x84>)
 8004a80:	f005 fde8 	bl	800a654 <puts>
	printf("target = %5.3f\r\n", velotrace_read_target(rotary_read_value()));
 8004a84:	f7fc fc50 	bl	8001328 <rotary_read_value>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fe3f 	bl	8004710 <velotrace_read_target>
 8004a92:	ec53 2b10 	vmov	r2, r3, d0
 8004a96:	4819      	ldr	r0, [pc, #100]	; (8004afc <velotrace_print_values+0x88>)
 8004a98:	f005 fd56 	bl	800a548 <iprintf>
	printf("kp = %5.3f, ki = %5.3f, kd = %5.3f\r\n", velotrace_read_gain_kp(rotary_read_value()), velotrace_read_gain_ki(rotary_read_value()), velotrace_read_gain_kd(rotary_read_value()));
 8004a9c:	f7fc fc44 	bl	8001328 <rotary_read_value>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff fe63 	bl	8004770 <velotrace_read_gain_kp>
 8004aaa:	ec55 4b10 	vmov	r4, r5, d0
 8004aae:	f7fc fc3b 	bl	8001328 <rotary_read_value>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fe8a 	bl	80047d0 <velotrace_read_gain_ki>
 8004abc:	eeb0 8a40 	vmov.f32	s16, s0
 8004ac0:	eef0 8a60 	vmov.f32	s17, s1
 8004ac4:	f7fc fc30 	bl	8001328 <rotary_read_value>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff feaf 	bl	8004830 <velotrace_read_gain_kd>
 8004ad2:	eeb0 7a40 	vmov.f32	s14, s0
 8004ad6:	eef0 7a60 	vmov.f32	s15, s1
 8004ada:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004ade:	ed8d 8b00 	vstr	d8, [sp]
 8004ae2:	4622      	mov	r2, r4
 8004ae4:	462b      	mov	r3, r5
 8004ae6:	4806      	ldr	r0, [pc, #24]	; (8004b00 <velotrace_print_values+0x8c>)
 8004ae8:	f005 fd2e 	bl	800a548 <iprintf>
}
 8004aec:	bf00      	nop
 8004aee:	46bd      	mov	sp, r7
 8004af0:	ecbd 8b02 	vpop	{d8}
 8004af4:	bdb0      	pop	{r4, r5, r7, pc}
 8004af6:	bf00      	nop
 8004af8:	0800e7bc 	.word	0x0800e7bc
 8004afc:	0800e7c8 	.word	0x0800e7c8
 8004b00:	0800e7dc 	.word	0x0800e7dc

08004b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b0a:	e003      	b.n	8004b14 <LoopCopyDataInit>

08004b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b12:	3104      	adds	r1, #4

08004b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b14:	480b      	ldr	r0, [pc, #44]	; (8004b44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b1c:	d3f6      	bcc.n	8004b0c <CopyDataInit>
  ldr  r2, =_sbss
 8004b1e:	4a0b      	ldr	r2, [pc, #44]	; (8004b4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b20:	e002      	b.n	8004b28 <LoopFillZerobss>

08004b22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b24:	f842 3b04 	str.w	r3, [r2], #4

08004b28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b28:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b2c:	d3f9      	bcc.n	8004b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b2e:	f7fe ffd7 	bl	8003ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b32:	f004 fe55 	bl	80097e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b36:	f7fd facb 	bl	80020d0 <main>
  bx  lr    
 8004b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004b40:	0800ecec 	.word	0x0800ecec
  ldr  r0, =_sdata
 8004b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b48:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8004b4c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8004b50:	20000974 	.word	0x20000974

08004b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b54:	e7fe      	b.n	8004b54 <ADC_IRQHandler>
	...

08004b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <HAL_Init+0x40>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a0d      	ldr	r2, [pc, #52]	; (8004b98 <HAL_Init+0x40>)
 8004b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <HAL_Init+0x40>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <HAL_Init+0x40>)
 8004b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b74:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_Init+0x40>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <HAL_Init+0x40>)
 8004b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b80:	2003      	movs	r0, #3
 8004b82:	f000 fdb1 	bl	80056e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b86:	2000      	movs	r0, #0
 8004b88:	f000 f808 	bl	8004b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b8c:	f7fe fb5a 	bl	8003244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40023c00 	.word	0x40023c00

08004b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_InitTick+0x54>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b12      	ldr	r3, [pc, #72]	; (8004bf4 <HAL_InitTick+0x58>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	4619      	mov	r1, r3
 8004bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fdc9 	bl	8005752 <HAL_SYSTICK_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e00e      	b.n	8004be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	d80a      	bhi.n	8004be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	f000 fd91 	bl	80056fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bdc:	4a06      	ldr	r2, [pc, #24]	; (8004bf8 <HAL_InitTick+0x5c>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	e000      	b.n	8004be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	20000008 	.word	0x20000008
 8004bf8:	20000004 	.word	0x20000004

08004bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c00:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_IncTick+0x20>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <HAL_IncTick+0x24>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <HAL_IncTick+0x24>)
 8004c0e:	6013      	str	r3, [r2, #0]
}
 8004c10:	bf00      	nop
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000008 	.word	0x20000008
 8004c20:	20000940 	.word	0x20000940

08004c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return uwTick;
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <HAL_GetTick+0x14>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000940 	.word	0x20000940

08004c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c44:	f7ff ffee 	bl	8004c24 <HAL_GetTick>
 8004c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d005      	beq.n	8004c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c56:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <HAL_Delay+0x44>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c62:	bf00      	nop
 8004c64:	f7ff ffde 	bl	8004c24 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d8f7      	bhi.n	8004c64 <HAL_Delay+0x28>
  {
  }
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000008 	.word	0x20000008

08004c84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e033      	b.n	8004d02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fe fafa 	bl	800329c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d118      	bne.n	8004cf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cca:	f023 0302 	bic.w	r3, r3, #2
 8004cce:	f043 0202 	orr.w	r2, r3, #2
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fab8 	bl	800524c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	f043 0201 	orr.w	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	641a      	str	r2, [r3, #64]	; 0x40
 8004cf2:	e001      	b.n	8004cf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_ADC_Start_DMA+0x1e>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e0e9      	b.n	8004efe <HAL_ADC_Start_DMA+0x1f2>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d018      	beq.n	8004d72 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d50:	4b6d      	ldr	r3, [pc, #436]	; (8004f08 <HAL_ADC_Start_DMA+0x1fc>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a6d      	ldr	r2, [pc, #436]	; (8004f0c <HAL_ADC_Start_DMA+0x200>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	0c9a      	lsrs	r2, r3, #18
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	4413      	add	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004d64:	e002      	b.n	8004d6c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f9      	bne.n	8004d66 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d80:	d107      	bne.n	8004d92 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d90:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	f040 80a1 	bne.w	8004ee4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de0:	d106      	bne.n	8004df0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	f023 0206 	bic.w	r2, r3, #6
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
 8004dee:	e002      	b.n	8004df6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dfe:	4b44      	ldr	r3, [pc, #272]	; (8004f10 <HAL_ADC_Start_DMA+0x204>)
 8004e00:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	4a43      	ldr	r2, [pc, #268]	; (8004f14 <HAL_ADC_Start_DMA+0x208>)
 8004e08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	4a42      	ldr	r2, [pc, #264]	; (8004f18 <HAL_ADC_Start_DMA+0x20c>)
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e16:	4a41      	ldr	r2, [pc, #260]	; (8004f1c <HAL_ADC_Start_DMA+0x210>)
 8004e18:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004e22:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004e32:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e42:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	334c      	adds	r3, #76	; 0x4c
 8004e4e:	4619      	mov	r1, r3
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f000 fd38 	bl	80058c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d12a      	bne.n	8004eba <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2d      	ldr	r2, [pc, #180]	; (8004f20 <HAL_ADC_Start_DMA+0x214>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d015      	beq.n	8004e9a <HAL_ADC_Start_DMA+0x18e>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2c      	ldr	r2, [pc, #176]	; (8004f24 <HAL_ADC_Start_DMA+0x218>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d105      	bne.n	8004e84 <HAL_ADC_Start_DMA+0x178>
 8004e78:	4b25      	ldr	r3, [pc, #148]	; (8004f10 <HAL_ADC_Start_DMA+0x204>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 031f 	and.w	r3, r3, #31
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <HAL_ADC_Start_DMA+0x21c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d136      	bne.n	8004efc <HAL_ADC_Start_DMA+0x1f0>
 8004e8e:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <HAL_ADC_Start_DMA+0x204>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 0310 	and.w	r3, r3, #16
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d130      	bne.n	8004efc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d129      	bne.n	8004efc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	e020      	b.n	8004efc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <HAL_ADC_Start_DMA+0x214>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d11b      	bne.n	8004efc <HAL_ADC_Start_DMA+0x1f0>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d114      	bne.n	8004efc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ee0:	609a      	str	r2, [r3, #8]
 8004ee2:	e00b      	b.n	8004efc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	f043 0210 	orr.w	r2, r3, #16
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	f043 0201 	orr.w	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000000 	.word	0x20000000
 8004f0c:	431bde83 	.word	0x431bde83
 8004f10:	40012300 	.word	0x40012300
 8004f14:	08005445 	.word	0x08005445
 8004f18:	080054ff 	.word	0x080054ff
 8004f1c:	0800551b 	.word	0x0800551b
 8004f20:	40012000 	.word	0x40012000
 8004f24:	40012100 	.word	0x40012100
 8004f28:	40012200 	.word	0x40012200

08004f2c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_ADC_Stop_DMA+0x1a>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e048      	b.n	8004fd8 <HAL_ADC_Stop_DMA+0xac>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d130      	bne.n	8004fce <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f7a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d10f      	bne.n	8004faa <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fcf2 	bl	8005978 <HAL_DMA_Abort>
 8004f94:	4603      	mov	r3, r0
 8004f96:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004fb8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	f043 0201 	orr.w	r2, r3, #1
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_ADC_ConfigChannel+0x1c>
 8005020:	2302      	movs	r3, #2
 8005022:	e105      	b.n	8005230 <HAL_ADC_ConfigChannel+0x228>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b09      	cmp	r3, #9
 8005032:	d925      	bls.n	8005080 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68d9      	ldr	r1, [r3, #12]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	b29b      	uxth	r3, r3
 8005040:	461a      	mov	r2, r3
 8005042:	4613      	mov	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	3b1e      	subs	r3, #30
 800504a:	2207      	movs	r2, #7
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43da      	mvns	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	400a      	ands	r2, r1
 8005058:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68d9      	ldr	r1, [r3, #12]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	4618      	mov	r0, r3
 800506c:	4603      	mov	r3, r0
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	4403      	add	r3, r0
 8005072:	3b1e      	subs	r3, #30
 8005074:	409a      	lsls	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	e022      	b.n	80050c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6919      	ldr	r1, [r3, #16]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	4613      	mov	r3, r2
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	4413      	add	r3, r2
 8005094:	2207      	movs	r2, #7
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43da      	mvns	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	400a      	ands	r2, r1
 80050a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6919      	ldr	r1, [r3, #16]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	4618      	mov	r0, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4403      	add	r3, r0
 80050bc:	409a      	lsls	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d824      	bhi.n	8005118 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	3b05      	subs	r3, #5
 80050e0:	221f      	movs	r2, #31
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43da      	mvns	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	400a      	ands	r2, r1
 80050ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	4618      	mov	r0, r3
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	3b05      	subs	r3, #5
 800510a:	fa00 f203 	lsl.w	r2, r0, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	635a      	str	r2, [r3, #52]	; 0x34
 8005116:	e04c      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b0c      	cmp	r3, #12
 800511e:	d824      	bhi.n	800516a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	3b23      	subs	r3, #35	; 0x23
 8005132:	221f      	movs	r2, #31
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	43da      	mvns	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	400a      	ands	r2, r1
 8005140:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	4618      	mov	r0, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	3b23      	subs	r3, #35	; 0x23
 800515c:	fa00 f203 	lsl.w	r2, r0, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
 8005168:	e023      	b.n	80051b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	3b41      	subs	r3, #65	; 0x41
 800517c:	221f      	movs	r2, #31
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43da      	mvns	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	400a      	ands	r2, r1
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	4618      	mov	r0, r3
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	3b41      	subs	r3, #65	; 0x41
 80051a6:	fa00 f203 	lsl.w	r2, r0, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051b2:	4b22      	ldr	r3, [pc, #136]	; (800523c <HAL_ADC_ConfigChannel+0x234>)
 80051b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a21      	ldr	r2, [pc, #132]	; (8005240 <HAL_ADC_ConfigChannel+0x238>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d109      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x1cc>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b12      	cmp	r3, #18
 80051c6:	d105      	bne.n	80051d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a19      	ldr	r2, [pc, #100]	; (8005240 <HAL_ADC_ConfigChannel+0x238>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d123      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x21e>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b10      	cmp	r3, #16
 80051e4:	d003      	beq.n	80051ee <HAL_ADC_ConfigChannel+0x1e6>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b11      	cmp	r3, #17
 80051ec:	d11b      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b10      	cmp	r3, #16
 8005200:	d111      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005202:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_ADC_ConfigChannel+0x23c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a10      	ldr	r2, [pc, #64]	; (8005248 <HAL_ADC_ConfigChannel+0x240>)
 8005208:	fba2 2303 	umull	r2, r3, r2, r3
 800520c:	0c9a      	lsrs	r2, r3, #18
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005218:	e002      	b.n	8005220 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	3b01      	subs	r3, #1
 800521e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f9      	bne.n	800521a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	40012300 	.word	0x40012300
 8005240:	40012000 	.word	0x40012000
 8005244:	20000000 	.word	0x20000000
 8005248:	431bde83 	.word	0x431bde83

0800524c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005254:	4b79      	ldr	r3, [pc, #484]	; (800543c <ADC_Init+0x1f0>)
 8005256:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005280:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6859      	ldr	r1, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	021a      	lsls	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80052a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6899      	ldr	r1, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68da      	ldr	r2, [r3, #12]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	4a58      	ldr	r2, [pc, #352]	; (8005440 <ADC_Init+0x1f4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d022      	beq.n	800532a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6899      	ldr	r1, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005314:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6899      	ldr	r1, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	e00f      	b.n	800534a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689a      	ldr	r2, [r3, #8]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005348:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0202 	bic.w	r2, r2, #2
 8005358:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6899      	ldr	r1, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	7e1b      	ldrb	r3, [r3, #24]
 8005364:	005a      	lsls	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01b      	beq.n	80053b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005386:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005396:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6859      	ldr	r1, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	3b01      	subs	r3, #1
 80053a4:	035a      	lsls	r2, r3, #13
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	e007      	b.n	80053c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	3b01      	subs	r3, #1
 80053dc:	051a      	lsls	r2, r3, #20
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6899      	ldr	r1, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005402:	025a      	lsls	r2, r3, #9
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6899      	ldr	r1, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	029a      	lsls	r2, r3, #10
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]
}
 8005430:	bf00      	nop
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	40012300 	.word	0x40012300
 8005440:	0f000001 	.word	0x0f000001

08005444 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800545a:	2b00      	cmp	r3, #0
 800545c:	d13c      	bne.n	80054d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d12b      	bne.n	80054d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800547c:	2b00      	cmp	r3, #0
 800547e:	d127      	bne.n	80054d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800548a:	2b00      	cmp	r3, #0
 800548c:	d006      	beq.n	800549c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005498:	2b00      	cmp	r3, #0
 800549a:	d119      	bne.n	80054d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0220 	bic.w	r2, r2, #32
 80054aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d105      	bne.n	80054d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	f043 0201 	orr.w	r2, r3, #1
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7fc fbd3 	bl	8001c7c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054d6:	e00e      	b.n	80054f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff fd85 	bl	8004ff4 <HAL_ADC_ErrorCallback>
}
 80054ea:	e004      	b.n	80054f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4798      	blx	r3
}
 80054f6:	bf00      	nop
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f7ff fd67 	bl	8004fe0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005532:	f043 0204 	orr.w	r2, r3, #4
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff fd5a 	bl	8004ff4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005558:	4b0c      	ldr	r3, [pc, #48]	; (800558c <__NVIC_SetPriorityGrouping+0x44>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005564:	4013      	ands	r3, r2
 8005566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800557a:	4a04      	ldr	r2, [pc, #16]	; (800558c <__NVIC_SetPriorityGrouping+0x44>)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	60d3      	str	r3, [r2, #12]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	e000ed00 	.word	0xe000ed00

08005590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	0a1b      	lsrs	r3, r3, #8
 800559a:	f003 0307 	and.w	r3, r3, #7
}
 800559e:	4618      	mov	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	e000ed00 	.word	0xe000ed00

080055ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	db0b      	blt.n	80055d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	f003 021f 	and.w	r2, r3, #31
 80055c4:	4907      	ldr	r1, [pc, #28]	; (80055e4 <__NVIC_EnableIRQ+0x38>)
 80055c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	2001      	movs	r0, #1
 80055ce:	fa00 f202 	lsl.w	r2, r0, r2
 80055d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	e000e100 	.word	0xe000e100

080055e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	6039      	str	r1, [r7, #0]
 80055f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	db0a      	blt.n	8005612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	490c      	ldr	r1, [pc, #48]	; (8005634 <__NVIC_SetPriority+0x4c>)
 8005602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005606:	0112      	lsls	r2, r2, #4
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	440b      	add	r3, r1
 800560c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005610:	e00a      	b.n	8005628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	b2da      	uxtb	r2, r3
 8005616:	4908      	ldr	r1, [pc, #32]	; (8005638 <__NVIC_SetPriority+0x50>)
 8005618:	79fb      	ldrb	r3, [r7, #7]
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	3b04      	subs	r3, #4
 8005620:	0112      	lsls	r2, r2, #4
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	440b      	add	r3, r1
 8005626:	761a      	strb	r2, [r3, #24]
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	e000e100 	.word	0xe000e100
 8005638:	e000ed00 	.word	0xe000ed00

0800563c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800563c:	b480      	push	{r7}
 800563e:	b089      	sub	sp, #36	; 0x24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f1c3 0307 	rsb	r3, r3, #7
 8005656:	2b04      	cmp	r3, #4
 8005658:	bf28      	it	cs
 800565a:	2304      	movcs	r3, #4
 800565c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	3304      	adds	r3, #4
 8005662:	2b06      	cmp	r3, #6
 8005664:	d902      	bls.n	800566c <NVIC_EncodePriority+0x30>
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3b03      	subs	r3, #3
 800566a:	e000      	b.n	800566e <NVIC_EncodePriority+0x32>
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005670:	f04f 32ff 	mov.w	r2, #4294967295
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	fa02 f303 	lsl.w	r3, r2, r3
 800567a:	43da      	mvns	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	401a      	ands	r2, r3
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005684:	f04f 31ff 	mov.w	r1, #4294967295
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	fa01 f303 	lsl.w	r3, r1, r3
 800568e:	43d9      	mvns	r1, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005694:	4313      	orrs	r3, r2
         );
}
 8005696:	4618      	mov	r0, r3
 8005698:	3724      	adds	r7, #36	; 0x24
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
	...

080056a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056b4:	d301      	bcc.n	80056ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056b6:	2301      	movs	r3, #1
 80056b8:	e00f      	b.n	80056da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056ba:	4a0a      	ldr	r2, [pc, #40]	; (80056e4 <SysTick_Config+0x40>)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3b01      	subs	r3, #1
 80056c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056c2:	210f      	movs	r1, #15
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	f7ff ff8e 	bl	80055e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <SysTick_Config+0x40>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056d2:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <SysTick_Config+0x40>)
 80056d4:	2207      	movs	r2, #7
 80056d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	e000e010 	.word	0xe000e010

080056e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7ff ff29 	bl	8005548 <__NVIC_SetPriorityGrouping>
}
 80056f6:	bf00      	nop
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056fe:	b580      	push	{r7, lr}
 8005700:	b086      	sub	sp, #24
 8005702:	af00      	add	r7, sp, #0
 8005704:	4603      	mov	r3, r0
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005710:	f7ff ff3e 	bl	8005590 <__NVIC_GetPriorityGrouping>
 8005714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	6978      	ldr	r0, [r7, #20]
 800571c:	f7ff ff8e 	bl	800563c <NVIC_EncodePriority>
 8005720:	4602      	mov	r2, r0
 8005722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005726:	4611      	mov	r1, r2
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff ff5d 	bl	80055e8 <__NVIC_SetPriority>
}
 800572e:	bf00      	nop
 8005730:	3718      	adds	r7, #24
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b082      	sub	sp, #8
 800573a:	af00      	add	r7, sp, #0
 800573c:	4603      	mov	r3, r0
 800573e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff ff31 	bl	80055ac <__NVIC_EnableIRQ>
}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b082      	sub	sp, #8
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ffa2 	bl	80056a4 <SysTick_Config>
 8005760:	4603      	mov	r3, r0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005778:	f7ff fa54 	bl	8004c24 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e099      	b.n	80058bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0201 	bic.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057a8:	e00f      	b.n	80057ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057aa:	f7ff fa3b 	bl	8004c24 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b05      	cmp	r3, #5
 80057b6:	d908      	bls.n	80057ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2203      	movs	r2, #3
 80057c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e078      	b.n	80058bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e8      	bne.n	80057aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4b38      	ldr	r3, [pc, #224]	; (80058c4 <HAL_DMA_Init+0x158>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80057f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800580e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	2b04      	cmp	r3, #4
 8005822:	d107      	bne.n	8005834 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	4313      	orrs	r3, r2
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f023 0307 	bic.w	r3, r3, #7
 800584a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2b04      	cmp	r3, #4
 800585c:	d117      	bne.n	800588e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00e      	beq.n	800588e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fadf 	bl	8005e34 <DMA_CheckFifoParam>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800588a:	2301      	movs	r3, #1
 800588c:	e016      	b.n	80058bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa96 	bl	8005dc8 <DMA_CalcBaseAndBitshift>
 800589c:	4603      	mov	r3, r0
 800589e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a4:	223f      	movs	r2, #63	; 0x3f
 80058a6:	409a      	lsls	r2, r3
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	f010803f 	.word	0xf010803f

080058c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_DMA_Start_IT+0x26>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e040      	b.n	8005970 <HAL_DMA_Start_IT+0xa8>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d12f      	bne.n	8005962 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2202      	movs	r2, #2
 8005906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fa28 	bl	8005d6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005920:	223f      	movs	r2, #63	; 0x3f
 8005922:	409a      	lsls	r2, r3
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0216 	orr.w	r2, r2, #22
 8005936:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0208 	orr.w	r2, r2, #8
 800594e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e005      	b.n	800596e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800596a:	2302      	movs	r3, #2
 800596c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005986:	f7ff f94d 	bl	8004c24 <HAL_GetTick>
 800598a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d008      	beq.n	80059aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2280      	movs	r2, #128	; 0x80
 800599c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e052      	b.n	8005a50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0216 	bic.w	r2, r2, #22
 80059b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695a      	ldr	r2, [r3, #20]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d103      	bne.n	80059da <HAL_DMA_Abort+0x62>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0208 	bic.w	r2, r2, #8
 80059e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059fa:	e013      	b.n	8005a24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059fc:	f7ff f912 	bl	8004c24 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b05      	cmp	r3, #5
 8005a08:	d90c      	bls.n	8005a24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2203      	movs	r2, #3
 8005a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e015      	b.n	8005a50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1e4      	bne.n	80059fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a36:	223f      	movs	r2, #63	; 0x3f
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a64:	4b92      	ldr	r3, [pc, #584]	; (8005cb0 <HAL_DMA_IRQHandler+0x258>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a92      	ldr	r2, [pc, #584]	; (8005cb4 <HAL_DMA_IRQHandler+0x25c>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	0a9b      	lsrs	r3, r3, #10
 8005a70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a82:	2208      	movs	r2, #8
 8005a84:	409a      	lsls	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4013      	ands	r3, r2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d01a      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d013      	beq.n	8005ac4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0204 	bic.w	r2, r2, #4
 8005aaa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab0:	2208      	movs	r2, #8
 8005ab2:	409a      	lsls	r2, r3
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005abc:	f043 0201 	orr.w	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac8:	2201      	movs	r2, #1
 8005aca:	409a      	lsls	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d012      	beq.n	8005afa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	409a      	lsls	r2, r3
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	f043 0202 	orr.w	r2, r3, #2
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afe:	2204      	movs	r2, #4
 8005b00:	409a      	lsls	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4013      	ands	r3, r2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d012      	beq.n	8005b30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b28:	f043 0204 	orr.w	r2, r3, #4
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b34:	2210      	movs	r2, #16
 8005b36:	409a      	lsls	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d043      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d03c      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b52:	2210      	movs	r2, #16
 8005b54:	409a      	lsls	r2, r3
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d018      	beq.n	8005b9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d024      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	4798      	blx	r3
 8005b86:	e01f      	b.n	8005bc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01b      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
 8005b98:	e016      	b.n	8005bc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d107      	bne.n	8005bb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0208 	bic.w	r2, r2, #8
 8005bb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bcc:	2220      	movs	r2, #32
 8005bce:	409a      	lsls	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 808e 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8086 	beq.w	8005cf6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bee:	2220      	movs	r2, #32
 8005bf0:	409a      	lsls	r2, r3
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b05      	cmp	r3, #5
 8005c00:	d136      	bne.n	8005c70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0216 	bic.w	r2, r2, #22
 8005c10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695a      	ldr	r2, [r3, #20]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <HAL_DMA_IRQHandler+0x1da>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0208 	bic.w	r2, r2, #8
 8005c40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c46:	223f      	movs	r2, #63	; 0x3f
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d07d      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	4798      	blx	r3
        }
        return;
 8005c6e:	e078      	b.n	8005d62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01c      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d108      	bne.n	8005c9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d030      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
 8005c9c:	e02b      	b.n	8005cf6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d027      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
 8005cae:	e022      	b.n	8005cf6 <HAL_DMA_IRQHandler+0x29e>
 8005cb0:	20000000 	.word	0x20000000
 8005cb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10f      	bne.n	8005ce6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0210 	bic.w	r2, r2, #16
 8005cd4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d032      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d022      	beq.n	8005d50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2205      	movs	r2, #5
 8005d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0201 	bic.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60bb      	str	r3, [r7, #8]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d307      	bcc.n	8005d3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f2      	bne.n	8005d22 <HAL_DMA_IRQHandler+0x2ca>
 8005d3c:	e000      	b.n	8005d40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005d3e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4798      	blx	r3
 8005d60:	e000      	b.n	8005d64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005d62:	bf00      	nop
    }
  }
}
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop

08005d6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d108      	bne.n	8005dac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005daa:	e007      	b.n	8005dbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	60da      	str	r2, [r3, #12]
}
 8005dbc:	bf00      	nop
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	3b10      	subs	r3, #16
 8005dd8:	4a14      	ldr	r2, [pc, #80]	; (8005e2c <DMA_CalcBaseAndBitshift+0x64>)
 8005dda:	fba2 2303 	umull	r2, r3, r2, r3
 8005dde:	091b      	lsrs	r3, r3, #4
 8005de0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005de2:	4a13      	ldr	r2, [pc, #76]	; (8005e30 <DMA_CalcBaseAndBitshift+0x68>)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d909      	bls.n	8005e0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	1d1a      	adds	r2, r3, #4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	659a      	str	r2, [r3, #88]	; 0x58
 8005e08:	e007      	b.n	8005e1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	aaaaaaab 	.word	0xaaaaaaab
 8005e30:	0800e81c 	.word	0x0800e81c

08005e34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d11f      	bne.n	8005e8e <DMA_CheckFifoParam+0x5a>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d856      	bhi.n	8005f02 <DMA_CheckFifoParam+0xce>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <DMA_CheckFifoParam+0x28>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005e6d 	.word	0x08005e6d
 8005e60:	08005e7f 	.word	0x08005e7f
 8005e64:	08005e6d 	.word	0x08005e6d
 8005e68:	08005f03 	.word	0x08005f03
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d046      	beq.n	8005f06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e7c:	e043      	b.n	8005f06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e86:	d140      	bne.n	8005f0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e8c:	e03d      	b.n	8005f0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e96:	d121      	bne.n	8005edc <DMA_CheckFifoParam+0xa8>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	2b03      	cmp	r3, #3
 8005e9c:	d837      	bhi.n	8005f0e <DMA_CheckFifoParam+0xda>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <DMA_CheckFifoParam+0x70>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005eb5 	.word	0x08005eb5
 8005ea8:	08005ebb 	.word	0x08005ebb
 8005eac:	08005eb5 	.word	0x08005eb5
 8005eb0:	08005ecd 	.word	0x08005ecd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb8:	e030      	b.n	8005f1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d025      	beq.n	8005f12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eca:	e022      	b.n	8005f12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ed4:	d11f      	bne.n	8005f16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005eda:	e01c      	b.n	8005f16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d903      	bls.n	8005eea <DMA_CheckFifoParam+0xb6>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d003      	beq.n	8005ef0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005ee8:	e018      	b.n	8005f1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
      break;
 8005eee:	e015      	b.n	8005f1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00e      	beq.n	8005f1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
      break;
 8005f00:	e00b      	b.n	8005f1a <DMA_CheckFifoParam+0xe6>
      break;
 8005f02:	bf00      	nop
 8005f04:	e00a      	b.n	8005f1c <DMA_CheckFifoParam+0xe8>
      break;
 8005f06:	bf00      	nop
 8005f08:	e008      	b.n	8005f1c <DMA_CheckFifoParam+0xe8>
      break;
 8005f0a:	bf00      	nop
 8005f0c:	e006      	b.n	8005f1c <DMA_CheckFifoParam+0xe8>
      break;
 8005f0e:	bf00      	nop
 8005f10:	e004      	b.n	8005f1c <DMA_CheckFifoParam+0xe8>
      break;
 8005f12:	bf00      	nop
 8005f14:	e002      	b.n	8005f1c <DMA_CheckFifoParam+0xe8>
      break;   
 8005f16:	bf00      	nop
 8005f18:	e000      	b.n	8005f1c <DMA_CheckFifoParam+0xe8>
      break;
 8005f1a:	bf00      	nop
    }
  } 
  
  return status; 
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop

08005f2c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f3e:	4b23      	ldr	r3, [pc, #140]	; (8005fcc <HAL_FLASH_Program+0xa0>)
 8005f40:	7e1b      	ldrb	r3, [r3, #24]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_FLASH_Program+0x1e>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e03b      	b.n	8005fc2 <HAL_FLASH_Program+0x96>
 8005f4a:	4b20      	ldr	r3, [pc, #128]	; (8005fcc <HAL_FLASH_Program+0xa0>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f54:	f000 f870 	bl	8006038 <FLASH_WaitForLastOperation>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d12b      	bne.n	8005fba <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d105      	bne.n	8005f74 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005f68:	783b      	ldrb	r3, [r7, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	68b8      	ldr	r0, [r7, #8]
 8005f6e:	f000 f91b 	bl	80061a8 <FLASH_Program_Byte>
 8005f72:	e016      	b.n	8005fa2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d105      	bne.n	8005f86 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005f7a:	883b      	ldrh	r3, [r7, #0]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	68b8      	ldr	r0, [r7, #8]
 8005f80:	f000 f8ee 	bl	8006160 <FLASH_Program_HalfWord>
 8005f84:	e00d      	b.n	8005fa2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d105      	bne.n	8005f98 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	68b8      	ldr	r0, [r7, #8]
 8005f92:	f000 f8c3 	bl	800611c <FLASH_Program_Word>
 8005f96:	e004      	b.n	8005fa2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f9c:	68b8      	ldr	r0, [r7, #8]
 8005f9e:	f000 f88b 	bl	80060b8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fa2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fa6:	f000 f847 	bl	8006038 <FLASH_WaitForLastOperation>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005fae:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <HAL_FLASH_Program+0xa4>)
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	4a07      	ldr	r2, [pc, #28]	; (8005fd0 <HAL_FLASH_Program+0xa4>)
 8005fb4:	f023 0301 	bic.w	r3, r3, #1
 8005fb8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005fba:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <HAL_FLASH_Program+0xa0>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3718      	adds	r7, #24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000944 	.word	0x20000944
 8005fd0:	40023c00 	.word	0x40023c00

08005fd4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005fde:	4b0b      	ldr	r3, [pc, #44]	; (800600c <HAL_FLASH_Unlock+0x38>)
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	da0b      	bge.n	8005ffe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005fe6:	4b09      	ldr	r3, [pc, #36]	; (800600c <HAL_FLASH_Unlock+0x38>)
 8005fe8:	4a09      	ldr	r2, [pc, #36]	; (8006010 <HAL_FLASH_Unlock+0x3c>)
 8005fea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005fec:	4b07      	ldr	r3, [pc, #28]	; (800600c <HAL_FLASH_Unlock+0x38>)
 8005fee:	4a09      	ldr	r2, [pc, #36]	; (8006014 <HAL_FLASH_Unlock+0x40>)
 8005ff0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <HAL_FLASH_Unlock+0x38>)
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	da01      	bge.n	8005ffe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	40023c00 	.word	0x40023c00
 8006010:	45670123 	.word	0x45670123
 8006014:	cdef89ab 	.word	0xcdef89ab

08006018 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <HAL_FLASH_Lock+0x1c>)
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	4a04      	ldr	r2, [pc, #16]	; (8006034 <HAL_FLASH_Lock+0x1c>)
 8006022:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006026:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	40023c00 	.word	0x40023c00

08006038 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006044:	4b1a      	ldr	r3, [pc, #104]	; (80060b0 <FLASH_WaitForLastOperation+0x78>)
 8006046:	2200      	movs	r2, #0
 8006048:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800604a:	f7fe fdeb 	bl	8004c24 <HAL_GetTick>
 800604e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006050:	e010      	b.n	8006074 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006058:	d00c      	beq.n	8006074 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d007      	beq.n	8006070 <FLASH_WaitForLastOperation+0x38>
 8006060:	f7fe fde0 	bl	8004c24 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d201      	bcs.n	8006074 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e019      	b.n	80060a8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006074:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <FLASH_WaitForLastOperation+0x7c>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1e8      	bne.n	8006052 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006080:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <FLASH_WaitForLastOperation+0x7c>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <FLASH_WaitForLastOperation+0x7c>)
 800608e:	2201      	movs	r2, #1
 8006090:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006092:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <FLASH_WaitForLastOperation+0x7c>)
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800609e:	f000 f8a5 	bl	80061ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
  
}  
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000944 	.word	0x20000944
 80060b4:	40023c00 	.word	0x40023c00

080060b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060c4:	4b14      	ldr	r3, [pc, #80]	; (8006118 <FLASH_Program_DoubleWord+0x60>)
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	4a13      	ldr	r2, [pc, #76]	; (8006118 <FLASH_Program_DoubleWord+0x60>)
 80060ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80060d0:	4b11      	ldr	r3, [pc, #68]	; (8006118 <FLASH_Program_DoubleWord+0x60>)
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	4a10      	ldr	r2, [pc, #64]	; (8006118 <FLASH_Program_DoubleWord+0x60>)
 80060d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80060da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <FLASH_Program_DoubleWord+0x60>)
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	4a0d      	ldr	r2, [pc, #52]	; (8006118 <FLASH_Program_DoubleWord+0x60>)
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80060ee:	f3bf 8f6f 	isb	sy
}
 80060f2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80060f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	000a      	movs	r2, r1
 8006102:	2300      	movs	r3, #0
 8006104:	68f9      	ldr	r1, [r7, #12]
 8006106:	3104      	adds	r1, #4
 8006108:	4613      	mov	r3, r2
 800610a:	600b      	str	r3, [r1, #0]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	40023c00 	.word	0x40023c00

0800611c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006126:	4b0d      	ldr	r3, [pc, #52]	; (800615c <FLASH_Program_Word+0x40>)
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	4a0c      	ldr	r2, [pc, #48]	; (800615c <FLASH_Program_Word+0x40>)
 800612c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006130:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <FLASH_Program_Word+0x40>)
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	4a09      	ldr	r2, [pc, #36]	; (800615c <FLASH_Program_Word+0x40>)
 8006138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800613c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <FLASH_Program_Word+0x40>)
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	4a06      	ldr	r2, [pc, #24]	; (800615c <FLASH_Program_Word+0x40>)
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	601a      	str	r2, [r3, #0]
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	40023c00 	.word	0x40023c00

08006160 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800616c:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <FLASH_Program_HalfWord+0x44>)
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	4a0c      	ldr	r2, [pc, #48]	; (80061a4 <FLASH_Program_HalfWord+0x44>)
 8006172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006176:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006178:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <FLASH_Program_HalfWord+0x44>)
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <FLASH_Program_HalfWord+0x44>)
 800617e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006182:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006184:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <FLASH_Program_HalfWord+0x44>)
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	4a06      	ldr	r2, [pc, #24]	; (80061a4 <FLASH_Program_HalfWord+0x44>)
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	887a      	ldrh	r2, [r7, #2]
 8006194:	801a      	strh	r2, [r3, #0]
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40023c00 	.word	0x40023c00

080061a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <FLASH_Program_Byte+0x40>)
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <FLASH_Program_Byte+0x40>)
 80061ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80061c0:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <FLASH_Program_Byte+0x40>)
 80061c2:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <FLASH_Program_Byte+0x40>)
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061c8:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <FLASH_Program_Byte+0x40>)
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	4a06      	ldr	r2, [pc, #24]	; (80061e8 <FLASH_Program_Byte+0x40>)
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	701a      	strb	r2, [r3, #0]
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40023c00 	.word	0x40023c00

080061ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80061f0:	4b27      	ldr	r3, [pc, #156]	; (8006290 <FLASH_SetErrorCode+0xa4>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0310 	and.w	r3, r3, #16
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80061fc:	4b25      	ldr	r3, [pc, #148]	; (8006294 <FLASH_SetErrorCode+0xa8>)
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	f043 0310 	orr.w	r3, r3, #16
 8006204:	4a23      	ldr	r2, [pc, #140]	; (8006294 <FLASH_SetErrorCode+0xa8>)
 8006206:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006208:	4b21      	ldr	r3, [pc, #132]	; (8006290 <FLASH_SetErrorCode+0xa4>)
 800620a:	2210      	movs	r2, #16
 800620c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800620e:	4b20      	ldr	r3, [pc, #128]	; (8006290 <FLASH_SetErrorCode+0xa4>)
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800621a:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <FLASH_SetErrorCode+0xa8>)
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f043 0308 	orr.w	r3, r3, #8
 8006222:	4a1c      	ldr	r2, [pc, #112]	; (8006294 <FLASH_SetErrorCode+0xa8>)
 8006224:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006226:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <FLASH_SetErrorCode+0xa4>)
 8006228:	2220      	movs	r2, #32
 800622a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800622c:	4b18      	ldr	r3, [pc, #96]	; (8006290 <FLASH_SetErrorCode+0xa4>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d008      	beq.n	800624a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006238:	4b16      	ldr	r3, [pc, #88]	; (8006294 <FLASH_SetErrorCode+0xa8>)
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f043 0304 	orr.w	r3, r3, #4
 8006240:	4a14      	ldr	r2, [pc, #80]	; (8006294 <FLASH_SetErrorCode+0xa8>)
 8006242:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006244:	4b12      	ldr	r3, [pc, #72]	; (8006290 <FLASH_SetErrorCode+0xa4>)
 8006246:	2240      	movs	r2, #64	; 0x40
 8006248:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800624a:	4b11      	ldr	r3, [pc, #68]	; (8006290 <FLASH_SetErrorCode+0xa4>)
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b00      	cmp	r3, #0
 8006254:	d008      	beq.n	8006268 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006256:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <FLASH_SetErrorCode+0xa8>)
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f043 0302 	orr.w	r3, r3, #2
 800625e:	4a0d      	ldr	r2, [pc, #52]	; (8006294 <FLASH_SetErrorCode+0xa8>)
 8006260:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006262:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <FLASH_SetErrorCode+0xa4>)
 8006264:	2280      	movs	r2, #128	; 0x80
 8006266:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006268:	4b09      	ldr	r3, [pc, #36]	; (8006290 <FLASH_SetErrorCode+0xa4>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006274:	4b07      	ldr	r3, [pc, #28]	; (8006294 <FLASH_SetErrorCode+0xa8>)
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	f043 0320 	orr.w	r3, r3, #32
 800627c:	4a05      	ldr	r2, [pc, #20]	; (8006294 <FLASH_SetErrorCode+0xa8>)
 800627e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006280:	4b03      	ldr	r3, [pc, #12]	; (8006290 <FLASH_SetErrorCode+0xa4>)
 8006282:	2202      	movs	r2, #2
 8006284:	60da      	str	r2, [r3, #12]
  }
}
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	40023c00 	.word	0x40023c00
 8006294:	20000944 	.word	0x20000944

08006298 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80062aa:	4b31      	ldr	r3, [pc, #196]	; (8006370 <HAL_FLASHEx_Erase+0xd8>)
 80062ac:	7e1b      	ldrb	r3, [r3, #24]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_FLASHEx_Erase+0x1e>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e058      	b.n	8006368 <HAL_FLASHEx_Erase+0xd0>
 80062b6:	4b2e      	ldr	r3, [pc, #184]	; (8006370 <HAL_FLASHEx_Erase+0xd8>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80062c0:	f7ff feba 	bl	8006038 <FLASH_WaitForLastOperation>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d148      	bne.n	8006360 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f04f 32ff 	mov.w	r2, #4294967295
 80062d4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d115      	bne.n	800630a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f000 f844 	bl	8006378 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80062f4:	f7ff fea0 	bl	8006038 <FLASH_WaitForLastOperation>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80062fc:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <HAL_FLASHEx_Erase+0xdc>)
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <HAL_FLASHEx_Erase+0xdc>)
 8006302:	f023 0304 	bic.w	r3, r3, #4
 8006306:	6113      	str	r3, [r2, #16]
 8006308:	e028      	b.n	800635c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60bb      	str	r3, [r7, #8]
 8006310:	e01c      	b.n	800634c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	b2db      	uxtb	r3, r3
 8006318:	4619      	mov	r1, r3
 800631a:	68b8      	ldr	r0, [r7, #8]
 800631c:	f000 f850 	bl	80063c0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006320:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006324:	f7ff fe88 	bl	8006038 <FLASH_WaitForLastOperation>
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800632c:	4b11      	ldr	r3, [pc, #68]	; (8006374 <HAL_FLASHEx_Erase+0xdc>)
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	4a10      	ldr	r2, [pc, #64]	; (8006374 <HAL_FLASHEx_Erase+0xdc>)
 8006332:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006336:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	601a      	str	r2, [r3, #0]
          break;
 8006344:	e00a      	b.n	800635c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	3301      	adds	r3, #1
 800634a:	60bb      	str	r3, [r7, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	4413      	add	r3, r2
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	429a      	cmp	r2, r3
 800635a:	d3da      	bcc.n	8006312 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800635c:	f000 f878 	bl	8006450 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006360:	4b03      	ldr	r3, [pc, #12]	; (8006370 <HAL_FLASHEx_Erase+0xd8>)
 8006362:	2200      	movs	r2, #0
 8006364:	761a      	strb	r2, [r3, #24]

  return status;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20000944 	.word	0x20000944
 8006374:	40023c00 	.word	0x40023c00

08006378 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	6039      	str	r1, [r7, #0]
 8006382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <FLASH_MassErase+0x44>)
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	4a0c      	ldr	r2, [pc, #48]	; (80063bc <FLASH_MassErase+0x44>)
 800638a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <FLASH_MassErase+0x44>)
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	4a09      	ldr	r2, [pc, #36]	; (80063bc <FLASH_MassErase+0x44>)
 8006396:	f043 0304 	orr.w	r3, r3, #4
 800639a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800639c:	4b07      	ldr	r3, [pc, #28]	; (80063bc <FLASH_MassErase+0x44>)
 800639e:	691a      	ldr	r2, [r3, #16]
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	4313      	orrs	r3, r2
 80063a6:	4a05      	ldr	r2, [pc, #20]	; (80063bc <FLASH_MassErase+0x44>)
 80063a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ac:	6113      	str	r3, [r2, #16]
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40023c00 	.word	0x40023c00

080063c0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d102      	bne.n	80063dc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e010      	b.n	80063fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d103      	bne.n	80063ea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80063e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e009      	b.n	80063fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d103      	bne.n	80063f8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80063f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	e002      	b.n	80063fe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80063f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063fc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063fe:	4b13      	ldr	r3, [pc, #76]	; (800644c <FLASH_Erase_Sector+0x8c>)
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	4a12      	ldr	r2, [pc, #72]	; (800644c <FLASH_Erase_Sector+0x8c>)
 8006404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006408:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800640a:	4b10      	ldr	r3, [pc, #64]	; (800644c <FLASH_Erase_Sector+0x8c>)
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	490f      	ldr	r1, [pc, #60]	; (800644c <FLASH_Erase_Sector+0x8c>)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4313      	orrs	r3, r2
 8006414:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006416:	4b0d      	ldr	r3, [pc, #52]	; (800644c <FLASH_Erase_Sector+0x8c>)
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	4a0c      	ldr	r2, [pc, #48]	; (800644c <FLASH_Erase_Sector+0x8c>)
 800641c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006420:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006422:	4b0a      	ldr	r3, [pc, #40]	; (800644c <FLASH_Erase_Sector+0x8c>)
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	4313      	orrs	r3, r2
 800642c:	4a07      	ldr	r2, [pc, #28]	; (800644c <FLASH_Erase_Sector+0x8c>)
 800642e:	f043 0302 	orr.w	r3, r3, #2
 8006432:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <FLASH_Erase_Sector+0x8c>)
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	4a04      	ldr	r2, [pc, #16]	; (800644c <FLASH_Erase_Sector+0x8c>)
 800643a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800643e:	6113      	str	r3, [r2, #16]
}
 8006440:	bf00      	nop
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40023c00 	.word	0x40023c00

08006450 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006454:	4b20      	ldr	r3, [pc, #128]	; (80064d8 <FLASH_FlushCaches+0x88>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800645c:	2b00      	cmp	r3, #0
 800645e:	d017      	beq.n	8006490 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006460:	4b1d      	ldr	r3, [pc, #116]	; (80064d8 <FLASH_FlushCaches+0x88>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a1c      	ldr	r2, [pc, #112]	; (80064d8 <FLASH_FlushCaches+0x88>)
 8006466:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800646a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800646c:	4b1a      	ldr	r3, [pc, #104]	; (80064d8 <FLASH_FlushCaches+0x88>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a19      	ldr	r2, [pc, #100]	; (80064d8 <FLASH_FlushCaches+0x88>)
 8006472:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <FLASH_FlushCaches+0x88>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a16      	ldr	r2, [pc, #88]	; (80064d8 <FLASH_FlushCaches+0x88>)
 800647e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006482:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006484:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <FLASH_FlushCaches+0x88>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a13      	ldr	r2, [pc, #76]	; (80064d8 <FLASH_FlushCaches+0x88>)
 800648a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800648e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006490:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <FLASH_FlushCaches+0x88>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006498:	2b00      	cmp	r3, #0
 800649a:	d017      	beq.n	80064cc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800649c:	4b0e      	ldr	r3, [pc, #56]	; (80064d8 <FLASH_FlushCaches+0x88>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a0d      	ldr	r2, [pc, #52]	; (80064d8 <FLASH_FlushCaches+0x88>)
 80064a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064a6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80064a8:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <FLASH_FlushCaches+0x88>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a0a      	ldr	r2, [pc, #40]	; (80064d8 <FLASH_FlushCaches+0x88>)
 80064ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	4b08      	ldr	r3, [pc, #32]	; (80064d8 <FLASH_FlushCaches+0x88>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a07      	ldr	r2, [pc, #28]	; (80064d8 <FLASH_FlushCaches+0x88>)
 80064ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064be:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <FLASH_FlushCaches+0x88>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a04      	ldr	r2, [pc, #16]	; (80064d8 <FLASH_FlushCaches+0x88>)
 80064c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064ca:	6013      	str	r3, [r2, #0]
  }
}
 80064cc:	bf00      	nop
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	40023c00 	.word	0x40023c00

080064dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064dc:	b480      	push	{r7}
 80064de:	b089      	sub	sp, #36	; 0x24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	e16b      	b.n	80067d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064f8:	2201      	movs	r2, #1
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4013      	ands	r3, r2
 800650a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	429a      	cmp	r2, r3
 8006512:	f040 815a 	bne.w	80067ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	2b01      	cmp	r3, #1
 8006520:	d005      	beq.n	800652e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800652a:	2b02      	cmp	r3, #2
 800652c:	d130      	bne.n	8006590 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	2203      	movs	r2, #3
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	43db      	mvns	r3, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4013      	ands	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	fa02 f303 	lsl.w	r3, r2, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4313      	orrs	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006564:	2201      	movs	r2, #1
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	43db      	mvns	r3, r3
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	4013      	ands	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	091b      	lsrs	r3, r3, #4
 800657a:	f003 0201 	and.w	r2, r3, #1
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	4313      	orrs	r3, r2
 8006588:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	2b03      	cmp	r3, #3
 800659a:	d017      	beq.n	80065cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	2203      	movs	r2, #3
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	43db      	mvns	r3, r3
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	4013      	ands	r3, r2
 80065b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d123      	bne.n	8006620 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	08da      	lsrs	r2, r3, #3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3208      	adds	r2, #8
 80065e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	220f      	movs	r2, #15
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	43db      	mvns	r3, r3
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	4013      	ands	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	4313      	orrs	r3, r2
 8006610:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	08da      	lsrs	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3208      	adds	r2, #8
 800661a:	69b9      	ldr	r1, [r7, #24]
 800661c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	2203      	movs	r2, #3
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	43db      	mvns	r3, r3
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	4013      	ands	r3, r2
 8006636:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f003 0203 	and.w	r2, r3, #3
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	fa02 f303 	lsl.w	r3, r2, r3
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	4313      	orrs	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80b4 	beq.w	80067ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	4b60      	ldr	r3, [pc, #384]	; (80067e8 <HAL_GPIO_Init+0x30c>)
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	4a5f      	ldr	r2, [pc, #380]	; (80067e8 <HAL_GPIO_Init+0x30c>)
 800666c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006670:	6453      	str	r3, [r2, #68]	; 0x44
 8006672:	4b5d      	ldr	r3, [pc, #372]	; (80067e8 <HAL_GPIO_Init+0x30c>)
 8006674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800667e:	4a5b      	ldr	r2, [pc, #364]	; (80067ec <HAL_GPIO_Init+0x310>)
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	089b      	lsrs	r3, r3, #2
 8006684:	3302      	adds	r3, #2
 8006686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800668a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	220f      	movs	r2, #15
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	43db      	mvns	r3, r3
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	4013      	ands	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a52      	ldr	r2, [pc, #328]	; (80067f0 <HAL_GPIO_Init+0x314>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02b      	beq.n	8006702 <HAL_GPIO_Init+0x226>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a51      	ldr	r2, [pc, #324]	; (80067f4 <HAL_GPIO_Init+0x318>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d025      	beq.n	80066fe <HAL_GPIO_Init+0x222>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a50      	ldr	r2, [pc, #320]	; (80067f8 <HAL_GPIO_Init+0x31c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01f      	beq.n	80066fa <HAL_GPIO_Init+0x21e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a4f      	ldr	r2, [pc, #316]	; (80067fc <HAL_GPIO_Init+0x320>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d019      	beq.n	80066f6 <HAL_GPIO_Init+0x21a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a4e      	ldr	r2, [pc, #312]	; (8006800 <HAL_GPIO_Init+0x324>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_GPIO_Init+0x216>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a4d      	ldr	r2, [pc, #308]	; (8006804 <HAL_GPIO_Init+0x328>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00d      	beq.n	80066ee <HAL_GPIO_Init+0x212>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a4c      	ldr	r2, [pc, #304]	; (8006808 <HAL_GPIO_Init+0x32c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <HAL_GPIO_Init+0x20e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a4b      	ldr	r2, [pc, #300]	; (800680c <HAL_GPIO_Init+0x330>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <HAL_GPIO_Init+0x20a>
 80066e2:	2307      	movs	r3, #7
 80066e4:	e00e      	b.n	8006704 <HAL_GPIO_Init+0x228>
 80066e6:	2308      	movs	r3, #8
 80066e8:	e00c      	b.n	8006704 <HAL_GPIO_Init+0x228>
 80066ea:	2306      	movs	r3, #6
 80066ec:	e00a      	b.n	8006704 <HAL_GPIO_Init+0x228>
 80066ee:	2305      	movs	r3, #5
 80066f0:	e008      	b.n	8006704 <HAL_GPIO_Init+0x228>
 80066f2:	2304      	movs	r3, #4
 80066f4:	e006      	b.n	8006704 <HAL_GPIO_Init+0x228>
 80066f6:	2303      	movs	r3, #3
 80066f8:	e004      	b.n	8006704 <HAL_GPIO_Init+0x228>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e002      	b.n	8006704 <HAL_GPIO_Init+0x228>
 80066fe:	2301      	movs	r3, #1
 8006700:	e000      	b.n	8006704 <HAL_GPIO_Init+0x228>
 8006702:	2300      	movs	r3, #0
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	f002 0203 	and.w	r2, r2, #3
 800670a:	0092      	lsls	r2, r2, #2
 800670c:	4093      	lsls	r3, r2
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	4313      	orrs	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006714:	4935      	ldr	r1, [pc, #212]	; (80067ec <HAL_GPIO_Init+0x310>)
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	089b      	lsrs	r3, r3, #2
 800671a:	3302      	adds	r3, #2
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006722:	4b3b      	ldr	r3, [pc, #236]	; (8006810 <HAL_GPIO_Init+0x334>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	43db      	mvns	r3, r3
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	4013      	ands	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006746:	4a32      	ldr	r2, [pc, #200]	; (8006810 <HAL_GPIO_Init+0x334>)
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800674c:	4b30      	ldr	r3, [pc, #192]	; (8006810 <HAL_GPIO_Init+0x334>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	43db      	mvns	r3, r3
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	4013      	ands	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006770:	4a27      	ldr	r2, [pc, #156]	; (8006810 <HAL_GPIO_Init+0x334>)
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006776:	4b26      	ldr	r3, [pc, #152]	; (8006810 <HAL_GPIO_Init+0x334>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	43db      	mvns	r3, r3
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	4013      	ands	r3, r2
 8006784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4313      	orrs	r3, r2
 8006798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800679a:	4a1d      	ldr	r2, [pc, #116]	; (8006810 <HAL_GPIO_Init+0x334>)
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067a0:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <HAL_GPIO_Init+0x334>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	43db      	mvns	r3, r3
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	4013      	ands	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067c4:	4a12      	ldr	r2, [pc, #72]	; (8006810 <HAL_GPIO_Init+0x334>)
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	3301      	adds	r3, #1
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b0f      	cmp	r3, #15
 80067d4:	f67f ae90 	bls.w	80064f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	3724      	adds	r7, #36	; 0x24
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40023800 	.word	0x40023800
 80067ec:	40013800 	.word	0x40013800
 80067f0:	40020000 	.word	0x40020000
 80067f4:	40020400 	.word	0x40020400
 80067f8:	40020800 	.word	0x40020800
 80067fc:	40020c00 	.word	0x40020c00
 8006800:	40021000 	.word	0x40021000
 8006804:	40021400 	.word	0x40021400
 8006808:	40021800 	.word	0x40021800
 800680c:	40021c00 	.word	0x40021c00
 8006810:	40013c00 	.word	0x40013c00

08006814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	887b      	ldrh	r3, [r7, #2]
 8006826:	4013      	ands	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800682c:	2301      	movs	r3, #1
 800682e:	73fb      	strb	r3, [r7, #15]
 8006830:	e001      	b.n	8006836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006836:	7bfb      	ldrb	r3, [r7, #15]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	807b      	strh	r3, [r7, #2]
 8006850:	4613      	mov	r3, r2
 8006852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006854:	787b      	ldrb	r3, [r7, #1]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800685a:	887a      	ldrh	r2, [r7, #2]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006860:	e003      	b.n	800686a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006862:	887b      	ldrh	r3, [r7, #2]
 8006864:	041a      	lsls	r2, r3, #16
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	619a      	str	r2, [r3, #24]
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
	...

08006878 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e12b      	b.n	8006ae2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006890:	b2db      	uxtb	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f7fc fdac 	bl	80033fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2224      	movs	r2, #36	; 0x24
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 0201 	bic.w	r2, r2, #1
 80068ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068dc:	f000 fd5a 	bl	8007394 <HAL_RCC_GetPCLK1Freq>
 80068e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	4a81      	ldr	r2, [pc, #516]	; (8006aec <HAL_I2C_Init+0x274>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d807      	bhi.n	80068fc <HAL_I2C_Init+0x84>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a80      	ldr	r2, [pc, #512]	; (8006af0 <HAL_I2C_Init+0x278>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	bf94      	ite	ls
 80068f4:	2301      	movls	r3, #1
 80068f6:	2300      	movhi	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	e006      	b.n	800690a <HAL_I2C_Init+0x92>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a7d      	ldr	r2, [pc, #500]	; (8006af4 <HAL_I2C_Init+0x27c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	bf94      	ite	ls
 8006904:	2301      	movls	r3, #1
 8006906:	2300      	movhi	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e0e7      	b.n	8006ae2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a78      	ldr	r2, [pc, #480]	; (8006af8 <HAL_I2C_Init+0x280>)
 8006916:	fba2 2303 	umull	r2, r3, r2, r3
 800691a:	0c9b      	lsrs	r3, r3, #18
 800691c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	4a6a      	ldr	r2, [pc, #424]	; (8006aec <HAL_I2C_Init+0x274>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d802      	bhi.n	800694c <HAL_I2C_Init+0xd4>
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	3301      	adds	r3, #1
 800694a:	e009      	b.n	8006960 <HAL_I2C_Init+0xe8>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006952:	fb02 f303 	mul.w	r3, r2, r3
 8006956:	4a69      	ldr	r2, [pc, #420]	; (8006afc <HAL_I2C_Init+0x284>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	099b      	lsrs	r3, r3, #6
 800695e:	3301      	adds	r3, #1
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	430b      	orrs	r3, r1
 8006966:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006972:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	495c      	ldr	r1, [pc, #368]	; (8006aec <HAL_I2C_Init+0x274>)
 800697c:	428b      	cmp	r3, r1
 800697e:	d819      	bhi.n	80069b4 <HAL_I2C_Init+0x13c>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	1e59      	subs	r1, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	fbb1 f3f3 	udiv	r3, r1, r3
 800698e:	1c59      	adds	r1, r3, #1
 8006990:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006994:	400b      	ands	r3, r1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <HAL_I2C_Init+0x138>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1e59      	subs	r1, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80069a8:	3301      	adds	r3, #1
 80069aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ae:	e051      	b.n	8006a54 <HAL_I2C_Init+0x1dc>
 80069b0:	2304      	movs	r3, #4
 80069b2:	e04f      	b.n	8006a54 <HAL_I2C_Init+0x1dc>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d111      	bne.n	80069e0 <HAL_I2C_Init+0x168>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	1e58      	subs	r0, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6859      	ldr	r1, [r3, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	440b      	add	r3, r1
 80069ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ce:	3301      	adds	r3, #1
 80069d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bf0c      	ite	eq
 80069d8:	2301      	moveq	r3, #1
 80069da:	2300      	movne	r3, #0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	e012      	b.n	8006a06 <HAL_I2C_Init+0x18e>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	1e58      	subs	r0, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6859      	ldr	r1, [r3, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	0099      	lsls	r1, r3, #2
 80069f0:	440b      	add	r3, r1
 80069f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069f6:	3301      	adds	r3, #1
 80069f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf0c      	ite	eq
 8006a00:	2301      	moveq	r3, #1
 8006a02:	2300      	movne	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_I2C_Init+0x196>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e022      	b.n	8006a54 <HAL_I2C_Init+0x1dc>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10e      	bne.n	8006a34 <HAL_I2C_Init+0x1bc>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	1e58      	subs	r0, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6859      	ldr	r1, [r3, #4]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	440b      	add	r3, r1
 8006a24:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a28:	3301      	adds	r3, #1
 8006a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a32:	e00f      	b.n	8006a54 <HAL_I2C_Init+0x1dc>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	1e58      	subs	r0, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6859      	ldr	r1, [r3, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	440b      	add	r3, r1
 8006a42:	0099      	lsls	r1, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	6809      	ldr	r1, [r1, #0]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69da      	ldr	r2, [r3, #28]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6911      	ldr	r1, [r2, #16]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	68d2      	ldr	r2, [r2, #12]
 8006a8e:	4311      	orrs	r1, r2
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	6812      	ldr	r2, [r2, #0]
 8006a94:	430b      	orrs	r3, r1
 8006a96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695a      	ldr	r2, [r3, #20]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0201 	orr.w	r2, r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	000186a0 	.word	0x000186a0
 8006af0:	001e847f 	.word	0x001e847f
 8006af4:	003d08ff 	.word	0x003d08ff
 8006af8:	431bde83 	.word	0x431bde83
 8006afc:	10624dd3 	.word	0x10624dd3

08006b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e264      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d075      	beq.n	8006c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b1e:	4ba3      	ldr	r3, [pc, #652]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 030c 	and.w	r3, r3, #12
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d00c      	beq.n	8006b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b2a:	4ba0      	ldr	r3, [pc, #640]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d112      	bne.n	8006b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b36:	4b9d      	ldr	r3, [pc, #628]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b42:	d10b      	bne.n	8006b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b44:	4b99      	ldr	r3, [pc, #612]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d05b      	beq.n	8006c08 <HAL_RCC_OscConfig+0x108>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d157      	bne.n	8006c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e23f      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b64:	d106      	bne.n	8006b74 <HAL_RCC_OscConfig+0x74>
 8006b66:	4b91      	ldr	r3, [pc, #580]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a90      	ldr	r2, [pc, #576]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e01d      	b.n	8006bb0 <HAL_RCC_OscConfig+0xb0>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b7c:	d10c      	bne.n	8006b98 <HAL_RCC_OscConfig+0x98>
 8006b7e:	4b8b      	ldr	r3, [pc, #556]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a8a      	ldr	r2, [pc, #552]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	4b88      	ldr	r3, [pc, #544]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a87      	ldr	r2, [pc, #540]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	e00b      	b.n	8006bb0 <HAL_RCC_OscConfig+0xb0>
 8006b98:	4b84      	ldr	r3, [pc, #528]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a83      	ldr	r2, [pc, #524]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	4b81      	ldr	r3, [pc, #516]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a80      	ldr	r2, [pc, #512]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb8:	f7fe f834 	bl	8004c24 <HAL_GetTick>
 8006bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bc0:	f7fe f830 	bl	8004c24 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b64      	cmp	r3, #100	; 0x64
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e204      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd2:	4b76      	ldr	r3, [pc, #472]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCC_OscConfig+0xc0>
 8006bde:	e014      	b.n	8006c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be0:	f7fe f820 	bl	8004c24 <HAL_GetTick>
 8006be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be8:	f7fe f81c 	bl	8004c24 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e1f0      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bfa:	4b6c      	ldr	r3, [pc, #432]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0xe8>
 8006c06:	e000      	b.n	8006c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d063      	beq.n	8006cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c16:	4b65      	ldr	r3, [pc, #404]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 030c 	and.w	r3, r3, #12
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00b      	beq.n	8006c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c22:	4b62      	ldr	r3, [pc, #392]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d11c      	bne.n	8006c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c2e:	4b5f      	ldr	r3, [pc, #380]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d116      	bne.n	8006c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c3a:	4b5c      	ldr	r3, [pc, #368]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <HAL_RCC_OscConfig+0x152>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e1c4      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c52:	4b56      	ldr	r3, [pc, #344]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	4952      	ldr	r1, [pc, #328]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c66:	e03a      	b.n	8006cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d020      	beq.n	8006cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c70:	4b4f      	ldr	r3, [pc, #316]	; (8006db0 <HAL_RCC_OscConfig+0x2b0>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c76:	f7fd ffd5 	bl	8004c24 <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c7e:	f7fd ffd1 	bl	8004c24 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e1a5      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c90:	4b46      	ldr	r3, [pc, #280]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c9c:	4b43      	ldr	r3, [pc, #268]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4940      	ldr	r1, [pc, #256]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	600b      	str	r3, [r1, #0]
 8006cb0:	e015      	b.n	8006cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cb2:	4b3f      	ldr	r3, [pc, #252]	; (8006db0 <HAL_RCC_OscConfig+0x2b0>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fd ffb4 	bl	8004c24 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cc0:	f7fd ffb0 	bl	8004c24 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e184      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd2:	4b36      	ldr	r3, [pc, #216]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d030      	beq.n	8006d4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d016      	beq.n	8006d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cf2:	4b30      	ldr	r3, [pc, #192]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf8:	f7fd ff94 	bl	8004c24 <HAL_GetTick>
 8006cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d00:	f7fd ff90 	bl	8004c24 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e164      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d12:	4b26      	ldr	r3, [pc, #152]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0f0      	beq.n	8006d00 <HAL_RCC_OscConfig+0x200>
 8006d1e:	e015      	b.n	8006d4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d20:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <HAL_RCC_OscConfig+0x2b4>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d26:	f7fd ff7d 	bl	8004c24 <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d2e:	f7fd ff79 	bl	8004c24 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e14d      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d40:	4b1a      	ldr	r3, [pc, #104]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f0      	bne.n	8006d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 80a0 	beq.w	8006e9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d5e:	4b13      	ldr	r3, [pc, #76]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10f      	bne.n	8006d8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	60bb      	str	r3, [r7, #8]
 8006d6e:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	4a0e      	ldr	r2, [pc, #56]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d78:	6413      	str	r3, [r2, #64]	; 0x40
 8006d7a:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <HAL_RCC_OscConfig+0x2ac>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d82:	60bb      	str	r3, [r7, #8]
 8006d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d8a:	4b0b      	ldr	r3, [pc, #44]	; (8006db8 <HAL_RCC_OscConfig+0x2b8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d121      	bne.n	8006dda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d96:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <HAL_RCC_OscConfig+0x2b8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a07      	ldr	r2, [pc, #28]	; (8006db8 <HAL_RCC_OscConfig+0x2b8>)
 8006d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006da2:	f7fd ff3f 	bl	8004c24 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da8:	e011      	b.n	8006dce <HAL_RCC_OscConfig+0x2ce>
 8006daa:	bf00      	nop
 8006dac:	40023800 	.word	0x40023800
 8006db0:	42470000 	.word	0x42470000
 8006db4:	42470e80 	.word	0x42470e80
 8006db8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dbc:	f7fd ff32 	bl	8004c24 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e106      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dce:	4b85      	ldr	r3, [pc, #532]	; (8006fe4 <HAL_RCC_OscConfig+0x4e4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0f0      	beq.n	8006dbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d106      	bne.n	8006df0 <HAL_RCC_OscConfig+0x2f0>
 8006de2:	4b81      	ldr	r3, [pc, #516]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	4a80      	ldr	r2, [pc, #512]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006de8:	f043 0301 	orr.w	r3, r3, #1
 8006dec:	6713      	str	r3, [r2, #112]	; 0x70
 8006dee:	e01c      	b.n	8006e2a <HAL_RCC_OscConfig+0x32a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	2b05      	cmp	r3, #5
 8006df6:	d10c      	bne.n	8006e12 <HAL_RCC_OscConfig+0x312>
 8006df8:	4b7b      	ldr	r3, [pc, #492]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfc:	4a7a      	ldr	r2, [pc, #488]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006dfe:	f043 0304 	orr.w	r3, r3, #4
 8006e02:	6713      	str	r3, [r2, #112]	; 0x70
 8006e04:	4b78      	ldr	r3, [pc, #480]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e08:	4a77      	ldr	r2, [pc, #476]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006e0a:	f043 0301 	orr.w	r3, r3, #1
 8006e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e10:	e00b      	b.n	8006e2a <HAL_RCC_OscConfig+0x32a>
 8006e12:	4b75      	ldr	r3, [pc, #468]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	4a74      	ldr	r2, [pc, #464]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006e18:	f023 0301 	bic.w	r3, r3, #1
 8006e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e1e:	4b72      	ldr	r3, [pc, #456]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e22:	4a71      	ldr	r2, [pc, #452]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006e24:	f023 0304 	bic.w	r3, r3, #4
 8006e28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d015      	beq.n	8006e5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e32:	f7fd fef7 	bl	8004c24 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e38:	e00a      	b.n	8006e50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e3a:	f7fd fef3 	bl	8004c24 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e0c5      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e50:	4b65      	ldr	r3, [pc, #404]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0ee      	beq.n	8006e3a <HAL_RCC_OscConfig+0x33a>
 8006e5c:	e014      	b.n	8006e88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e5e:	f7fd fee1 	bl	8004c24 <HAL_GetTick>
 8006e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e64:	e00a      	b.n	8006e7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e66:	f7fd fedd 	bl	8004c24 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e0af      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e7c:	4b5a      	ldr	r3, [pc, #360]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1ee      	bne.n	8006e66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d105      	bne.n	8006e9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e8e:	4b56      	ldr	r3, [pc, #344]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	4a55      	ldr	r2, [pc, #340]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 809b 	beq.w	8006fda <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ea4:	4b50      	ldr	r3, [pc, #320]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 030c 	and.w	r3, r3, #12
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d05c      	beq.n	8006f6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d141      	bne.n	8006f3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb8:	4b4c      	ldr	r3, [pc, #304]	; (8006fec <HAL_RCC_OscConfig+0x4ec>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ebe:	f7fd feb1 	bl	8004c24 <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ec6:	f7fd fead 	bl	8004c24 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e081      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed8:	4b43      	ldr	r3, [pc, #268]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f0      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	019b      	lsls	r3, r3, #6
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	085b      	lsrs	r3, r3, #1
 8006efc:	3b01      	subs	r3, #1
 8006efe:	041b      	lsls	r3, r3, #16
 8006f00:	431a      	orrs	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	061b      	lsls	r3, r3, #24
 8006f08:	4937      	ldr	r1, [pc, #220]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f0e:	4b37      	ldr	r3, [pc, #220]	; (8006fec <HAL_RCC_OscConfig+0x4ec>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f14:	f7fd fe86 	bl	8004c24 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f1c:	f7fd fe82 	bl	8004c24 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e056      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f2e:	4b2e      	ldr	r3, [pc, #184]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0f0      	beq.n	8006f1c <HAL_RCC_OscConfig+0x41c>
 8006f3a:	e04e      	b.n	8006fda <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f3c:	4b2b      	ldr	r3, [pc, #172]	; (8006fec <HAL_RCC_OscConfig+0x4ec>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f42:	f7fd fe6f 	bl	8004c24 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f4a:	f7fd fe6b 	bl	8004c24 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e03f      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5c:	4b22      	ldr	r3, [pc, #136]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1f0      	bne.n	8006f4a <HAL_RCC_OscConfig+0x44a>
 8006f68:	e037      	b.n	8006fda <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e032      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f76:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <HAL_RCC_OscConfig+0x4e8>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d028      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d121      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d11a      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d111      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d107      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d001      	beq.n	8006fda <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e000      	b.n	8006fdc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	40007000 	.word	0x40007000
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	42470060 	.word	0x42470060

08006ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e0cc      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007004:	4b68      	ldr	r3, [pc, #416]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	429a      	cmp	r2, r3
 8007010:	d90c      	bls.n	800702c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007012:	4b65      	ldr	r3, [pc, #404]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	b2d2      	uxtb	r2, r2
 8007018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800701a:	4b63      	ldr	r3, [pc, #396]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	429a      	cmp	r2, r3
 8007026:	d001      	beq.n	800702c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e0b8      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d020      	beq.n	800707a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0304 	and.w	r3, r3, #4
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007044:	4b59      	ldr	r3, [pc, #356]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	4a58      	ldr	r2, [pc, #352]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800704e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800705c:	4b53      	ldr	r3, [pc, #332]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4a52      	ldr	r2, [pc, #328]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007068:	4b50      	ldr	r3, [pc, #320]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	494d      	ldr	r1, [pc, #308]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007076:	4313      	orrs	r3, r2
 8007078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d044      	beq.n	8007110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d107      	bne.n	800709e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800708e:	4b47      	ldr	r3, [pc, #284]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d119      	bne.n	80070ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e07f      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d003      	beq.n	80070ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d107      	bne.n	80070be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ae:	4b3f      	ldr	r3, [pc, #252]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e06f      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070be:	4b3b      	ldr	r3, [pc, #236]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e067      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ce:	4b37      	ldr	r3, [pc, #220]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f023 0203 	bic.w	r2, r3, #3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	4934      	ldr	r1, [pc, #208]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070e0:	f7fd fda0 	bl	8004c24 <HAL_GetTick>
 80070e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070e6:	e00a      	b.n	80070fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070e8:	f7fd fd9c 	bl	8004c24 <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e04f      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070fe:	4b2b      	ldr	r3, [pc, #172]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 020c 	and.w	r2, r3, #12
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	429a      	cmp	r2, r3
 800710e:	d1eb      	bne.n	80070e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007110:	4b25      	ldr	r3, [pc, #148]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d20c      	bcs.n	8007138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800711e:	4b22      	ldr	r3, [pc, #136]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007126:	4b20      	ldr	r3, [pc, #128]	; (80071a8 <HAL_RCC_ClockConfig+0x1b8>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d001      	beq.n	8007138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e032      	b.n	800719e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	d008      	beq.n	8007156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007144:	4b19      	ldr	r3, [pc, #100]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	4916      	ldr	r1, [pc, #88]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007152:	4313      	orrs	r3, r2
 8007154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d009      	beq.n	8007176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007162:	4b12      	ldr	r3, [pc, #72]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	490e      	ldr	r1, [pc, #56]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 8007172:	4313      	orrs	r3, r2
 8007174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007176:	f000 f821 	bl	80071bc <HAL_RCC_GetSysClockFreq>
 800717a:	4602      	mov	r2, r0
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <HAL_RCC_ClockConfig+0x1bc>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	091b      	lsrs	r3, r3, #4
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	490a      	ldr	r1, [pc, #40]	; (80071b0 <HAL_RCC_ClockConfig+0x1c0>)
 8007188:	5ccb      	ldrb	r3, [r1, r3]
 800718a:	fa22 f303 	lsr.w	r3, r2, r3
 800718e:	4a09      	ldr	r2, [pc, #36]	; (80071b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f7fd fd00 	bl	8004b9c <HAL_InitTick>

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	40023c00 	.word	0x40023c00
 80071ac:	40023800 	.word	0x40023800
 80071b0:	0800e804 	.word	0x0800e804
 80071b4:	20000000 	.word	0x20000000
 80071b8:	20000004 	.word	0x20000004

080071bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	607b      	str	r3, [r7, #4]
 80071c8:	2300      	movs	r3, #0
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	2300      	movs	r3, #0
 80071ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071d4:	4b67      	ldr	r3, [pc, #412]	; (8007374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 030c 	and.w	r3, r3, #12
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d00d      	beq.n	80071fc <HAL_RCC_GetSysClockFreq+0x40>
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	f200 80bd 	bhi.w	8007360 <HAL_RCC_GetSysClockFreq+0x1a4>
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d002      	beq.n	80071f0 <HAL_RCC_GetSysClockFreq+0x34>
 80071ea:	2b04      	cmp	r3, #4
 80071ec:	d003      	beq.n	80071f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80071ee:	e0b7      	b.n	8007360 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071f0:	4b61      	ldr	r3, [pc, #388]	; (8007378 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071f2:	60bb      	str	r3, [r7, #8]
       break;
 80071f4:	e0b7      	b.n	8007366 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071f6:	4b60      	ldr	r3, [pc, #384]	; (8007378 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071f8:	60bb      	str	r3, [r7, #8]
      break;
 80071fa:	e0b4      	b.n	8007366 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071fc:	4b5d      	ldr	r3, [pc, #372]	; (8007374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007204:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007206:	4b5b      	ldr	r3, [pc, #364]	; (8007374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d04d      	beq.n	80072ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007212:	4b58      	ldr	r3, [pc, #352]	; (8007374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	099b      	lsrs	r3, r3, #6
 8007218:	461a      	mov	r2, r3
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007222:	f04f 0100 	mov.w	r1, #0
 8007226:	ea02 0800 	and.w	r8, r2, r0
 800722a:	ea03 0901 	and.w	r9, r3, r1
 800722e:	4640      	mov	r0, r8
 8007230:	4649      	mov	r1, r9
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	014b      	lsls	r3, r1, #5
 800723c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007240:	0142      	lsls	r2, r0, #5
 8007242:	4610      	mov	r0, r2
 8007244:	4619      	mov	r1, r3
 8007246:	ebb0 0008 	subs.w	r0, r0, r8
 800724a:	eb61 0109 	sbc.w	r1, r1, r9
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	018b      	lsls	r3, r1, #6
 8007258:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800725c:	0182      	lsls	r2, r0, #6
 800725e:	1a12      	subs	r2, r2, r0
 8007260:	eb63 0301 	sbc.w	r3, r3, r1
 8007264:	f04f 0000 	mov.w	r0, #0
 8007268:	f04f 0100 	mov.w	r1, #0
 800726c:	00d9      	lsls	r1, r3, #3
 800726e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007272:	00d0      	lsls	r0, r2, #3
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	eb12 0208 	adds.w	r2, r2, r8
 800727c:	eb43 0309 	adc.w	r3, r3, r9
 8007280:	f04f 0000 	mov.w	r0, #0
 8007284:	f04f 0100 	mov.w	r1, #0
 8007288:	0299      	lsls	r1, r3, #10
 800728a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800728e:	0290      	lsls	r0, r2, #10
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4610      	mov	r0, r2
 8007296:	4619      	mov	r1, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	461a      	mov	r2, r3
 800729c:	f04f 0300 	mov.w	r3, #0
 80072a0:	f7f9 fcf2 	bl	8000c88 <__aeabi_uldivmod>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4613      	mov	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	e04a      	b.n	8007344 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072ae:	4b31      	ldr	r3, [pc, #196]	; (8007374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	099b      	lsrs	r3, r3, #6
 80072b4:	461a      	mov	r2, r3
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072be:	f04f 0100 	mov.w	r1, #0
 80072c2:	ea02 0400 	and.w	r4, r2, r0
 80072c6:	ea03 0501 	and.w	r5, r3, r1
 80072ca:	4620      	mov	r0, r4
 80072cc:	4629      	mov	r1, r5
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	014b      	lsls	r3, r1, #5
 80072d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072dc:	0142      	lsls	r2, r0, #5
 80072de:	4610      	mov	r0, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	1b00      	subs	r0, r0, r4
 80072e4:	eb61 0105 	sbc.w	r1, r1, r5
 80072e8:	f04f 0200 	mov.w	r2, #0
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	018b      	lsls	r3, r1, #6
 80072f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072f6:	0182      	lsls	r2, r0, #6
 80072f8:	1a12      	subs	r2, r2, r0
 80072fa:	eb63 0301 	sbc.w	r3, r3, r1
 80072fe:	f04f 0000 	mov.w	r0, #0
 8007302:	f04f 0100 	mov.w	r1, #0
 8007306:	00d9      	lsls	r1, r3, #3
 8007308:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800730c:	00d0      	lsls	r0, r2, #3
 800730e:	4602      	mov	r2, r0
 8007310:	460b      	mov	r3, r1
 8007312:	1912      	adds	r2, r2, r4
 8007314:	eb45 0303 	adc.w	r3, r5, r3
 8007318:	f04f 0000 	mov.w	r0, #0
 800731c:	f04f 0100 	mov.w	r1, #0
 8007320:	0299      	lsls	r1, r3, #10
 8007322:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007326:	0290      	lsls	r0, r2, #10
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	4610      	mov	r0, r2
 800732e:	4619      	mov	r1, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	461a      	mov	r2, r3
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	f7f9 fca6 	bl	8000c88 <__aeabi_uldivmod>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4613      	mov	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007344:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	3301      	adds	r3, #1
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	fbb2 f3f3 	udiv	r3, r2, r3
 800735c:	60bb      	str	r3, [r7, #8]
      break;
 800735e:	e002      	b.n	8007366 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007360:	4b05      	ldr	r3, [pc, #20]	; (8007378 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007362:	60bb      	str	r3, [r7, #8]
      break;
 8007364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007366:	68bb      	ldr	r3, [r7, #8]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007372:	bf00      	nop
 8007374:	40023800 	.word	0x40023800
 8007378:	00f42400 	.word	0x00f42400

0800737c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007380:	4b03      	ldr	r3, [pc, #12]	; (8007390 <HAL_RCC_GetHCLKFreq+0x14>)
 8007382:	681b      	ldr	r3, [r3, #0]
}
 8007384:	4618      	mov	r0, r3
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20000000 	.word	0x20000000

08007394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007398:	f7ff fff0 	bl	800737c <HAL_RCC_GetHCLKFreq>
 800739c:	4602      	mov	r2, r0
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	0a9b      	lsrs	r3, r3, #10
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	4903      	ldr	r1, [pc, #12]	; (80073b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073aa:	5ccb      	ldrb	r3, [r1, r3]
 80073ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	40023800 	.word	0x40023800
 80073b8:	0800e814 	.word	0x0800e814

080073bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073c0:	f7ff ffdc 	bl	800737c <HAL_RCC_GetHCLKFreq>
 80073c4:	4602      	mov	r2, r0
 80073c6:	4b05      	ldr	r3, [pc, #20]	; (80073dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	0b5b      	lsrs	r3, r3, #13
 80073cc:	f003 0307 	and.w	r3, r3, #7
 80073d0:	4903      	ldr	r1, [pc, #12]	; (80073e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073d2:	5ccb      	ldrb	r3, [r1, r3]
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073d8:	4618      	mov	r0, r3
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40023800 	.word	0x40023800
 80073e0:	0800e814 	.word	0x0800e814

080073e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d101      	bne.n	80073f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e07b      	b.n	80074ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d108      	bne.n	8007410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007406:	d009      	beq.n	800741c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	61da      	str	r2, [r3, #28]
 800740e:	e005      	b.n	800741c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fc f828 	bl	800348c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007452:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a0:	ea42 0103 	orr.w	r1, r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	0c1b      	lsrs	r3, r3, #16
 80074ba:	f003 0104 	and.w	r1, r3, #4
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	f003 0210 	and.w	r2, r3, #16
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69da      	ldr	r2, [r3, #28]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b088      	sub	sp, #32
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	603b      	str	r3, [r7, #0]
 8007502:	4613      	mov	r3, r2
 8007504:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_SPI_Transmit+0x22>
 8007514:	2302      	movs	r3, #2
 8007516:	e126      	b.n	8007766 <HAL_SPI_Transmit+0x270>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007520:	f7fd fb80 	bl	8004c24 <HAL_GetTick>
 8007524:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b01      	cmp	r3, #1
 8007534:	d002      	beq.n	800753c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007536:	2302      	movs	r3, #2
 8007538:	77fb      	strb	r3, [r7, #31]
    goto error;
 800753a:	e10b      	b.n	8007754 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <HAL_SPI_Transmit+0x52>
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d102      	bne.n	800754e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800754c:	e102      	b.n	8007754 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2203      	movs	r2, #3
 8007552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	88fa      	ldrh	r2, [r7, #6]
 8007566:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	88fa      	ldrh	r2, [r7, #6]
 800756c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007594:	d10f      	bne.n	80075b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c0:	2b40      	cmp	r3, #64	; 0x40
 80075c2:	d007      	beq.n	80075d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075dc:	d14b      	bne.n	8007676 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <HAL_SPI_Transmit+0xf6>
 80075e6:	8afb      	ldrh	r3, [r7, #22]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d13e      	bne.n	800766a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	881a      	ldrh	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	1c9a      	adds	r2, r3, #2
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007610:	e02b      	b.n	800766a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b02      	cmp	r3, #2
 800761e:	d112      	bne.n	8007646 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007624:	881a      	ldrh	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007630:	1c9a      	adds	r2, r3, #2
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763a:	b29b      	uxth	r3, r3
 800763c:	3b01      	subs	r3, #1
 800763e:	b29a      	uxth	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	86da      	strh	r2, [r3, #54]	; 0x36
 8007644:	e011      	b.n	800766a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007646:	f7fd faed 	bl	8004c24 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d803      	bhi.n	800765e <HAL_SPI_Transmit+0x168>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d102      	bne.n	8007664 <HAL_SPI_Transmit+0x16e>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d102      	bne.n	800766a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007668:	e074      	b.n	8007754 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800766e:	b29b      	uxth	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1ce      	bne.n	8007612 <HAL_SPI_Transmit+0x11c>
 8007674:	e04c      	b.n	8007710 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_SPI_Transmit+0x18e>
 800767e:	8afb      	ldrh	r3, [r7, #22]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d140      	bne.n	8007706 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	330c      	adds	r3, #12
 800768e:	7812      	ldrb	r2, [r2, #0]
 8007690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076aa:	e02c      	b.n	8007706 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d113      	bne.n	80076e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	330c      	adds	r3, #12
 80076c4:	7812      	ldrb	r2, [r2, #0]
 80076c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	3b01      	subs	r3, #1
 80076da:	b29a      	uxth	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	86da      	strh	r2, [r3, #54]	; 0x36
 80076e0:	e011      	b.n	8007706 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076e2:	f7fd fa9f 	bl	8004c24 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d803      	bhi.n	80076fa <HAL_SPI_Transmit+0x204>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f8:	d102      	bne.n	8007700 <HAL_SPI_Transmit+0x20a>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007704:	e026      	b.n	8007754 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1cd      	bne.n	80076ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fbcb 	bl	8007eb0 <SPI_EndRxTxTransaction>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2220      	movs	r2, #32
 8007724:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10a      	bne.n	8007744 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800772e:	2300      	movs	r3, #0
 8007730:	613b      	str	r3, [r7, #16]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	77fb      	strb	r3, [r7, #31]
 8007750:	e000      	b.n	8007754 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007752:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007764:	7ffb      	ldrb	r3, [r7, #31]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b088      	sub	sp, #32
 8007772:	af02      	add	r7, sp, #8
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	603b      	str	r3, [r7, #0]
 800777a:	4613      	mov	r3, r2
 800777c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800778a:	d112      	bne.n	80077b2 <HAL_SPI_Receive+0x44>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10e      	bne.n	80077b2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2204      	movs	r2, #4
 8007798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800779c:	88fa      	ldrh	r2, [r7, #6]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	4613      	mov	r3, r2
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	68b9      	ldr	r1, [r7, #8]
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f8f1 	bl	8007990 <HAL_SPI_TransmitReceive>
 80077ae:	4603      	mov	r3, r0
 80077b0:	e0ea      	b.n	8007988 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_SPI_Receive+0x52>
 80077bc:	2302      	movs	r3, #2
 80077be:	e0e3      	b.n	8007988 <HAL_SPI_Receive+0x21a>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077c8:	f7fd fa2c 	bl	8004c24 <HAL_GetTick>
 80077cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d002      	beq.n	80077e0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80077da:	2302      	movs	r3, #2
 80077dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077de:	e0ca      	b.n	8007976 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_SPI_Receive+0x7e>
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d102      	bne.n	80077f2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077f0:	e0c1      	b.n	8007976 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2204      	movs	r2, #4
 80077f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007838:	d10f      	bne.n	800785a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007848:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007858:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b40      	cmp	r3, #64	; 0x40
 8007866:	d007      	beq.n	8007878 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007876:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d162      	bne.n	8007946 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007880:	e02e      	b.n	80078e0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b01      	cmp	r3, #1
 800788e:	d115      	bne.n	80078bc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f103 020c 	add.w	r2, r3, #12
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	7812      	ldrb	r2, [r2, #0]
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80078ba:	e011      	b.n	80078e0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078bc:	f7fd f9b2 	bl	8004c24 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d803      	bhi.n	80078d4 <HAL_SPI_Receive+0x166>
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d2:	d102      	bne.n	80078da <HAL_SPI_Receive+0x16c>
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078de:	e04a      	b.n	8007976 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1cb      	bne.n	8007882 <HAL_SPI_Receive+0x114>
 80078ea:	e031      	b.n	8007950 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d113      	bne.n	8007922 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68da      	ldr	r2, [r3, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007904:	b292      	uxth	r2, r2
 8007906:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	1c9a      	adds	r2, r3, #2
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007920:	e011      	b.n	8007946 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007922:	f7fd f97f 	bl	8004c24 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d803      	bhi.n	800793a <HAL_SPI_Receive+0x1cc>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007938:	d102      	bne.n	8007940 <HAL_SPI_Receive+0x1d2>
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d102      	bne.n	8007946 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007944:	e017      	b.n	8007976 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800794a:	b29b      	uxth	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1cd      	bne.n	80078ec <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 fa45 	bl	8007de4 <SPI_EndRxTransaction>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800796a:	2b00      	cmp	r3, #0
 800796c:	d002      	beq.n	8007974 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	75fb      	strb	r3, [r7, #23]
 8007972:	e000      	b.n	8007976 <HAL_SPI_Receive+0x208>
  }

error :
 8007974:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007986:	7dfb      	ldrb	r3, [r7, #23]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08c      	sub	sp, #48	; 0x30
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800799e:	2301      	movs	r3, #1
 80079a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x26>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e18a      	b.n	8007ccc <HAL_SPI_TransmitReceive+0x33c>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079be:	f7fd f931 	bl	8004c24 <HAL_GetTick>
 80079c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80079d4:	887b      	ldrh	r3, [r7, #2]
 80079d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d00f      	beq.n	8007a00 <HAL_SPI_TransmitReceive+0x70>
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079e6:	d107      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d103      	bne.n	80079f8 <HAL_SPI_TransmitReceive+0x68>
 80079f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d003      	beq.n	8007a00 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80079f8:	2302      	movs	r3, #2
 80079fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079fe:	e15b      	b.n	8007cb8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <HAL_SPI_TransmitReceive+0x82>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_SPI_TransmitReceive+0x82>
 8007a0c:	887b      	ldrh	r3, [r7, #2]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d103      	bne.n	8007a1a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a18:	e14e      	b.n	8007cb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d003      	beq.n	8007a2e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2205      	movs	r2, #5
 8007a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	887a      	ldrh	r2, [r7, #2]
 8007a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	887a      	ldrh	r2, [r7, #2]
 8007a44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	887a      	ldrh	r2, [r7, #2]
 8007a50:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	887a      	ldrh	r2, [r7, #2]
 8007a56:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6e:	2b40      	cmp	r3, #64	; 0x40
 8007a70:	d007      	beq.n	8007a82 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a8a:	d178      	bne.n	8007b7e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <HAL_SPI_TransmitReceive+0x10a>
 8007a94:	8b7b      	ldrh	r3, [r7, #26]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d166      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	881a      	ldrh	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	1c9a      	adds	r2, r3, #2
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007abe:	e053      	b.n	8007b68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d11b      	bne.n	8007b06 <HAL_SPI_TransmitReceive+0x176>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d016      	beq.n	8007b06 <HAL_SPI_TransmitReceive+0x176>
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d113      	bne.n	8007b06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae2:	881a      	ldrh	r2, [r3, #0]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aee:	1c9a      	adds	r2, r3, #2
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d119      	bne.n	8007b48 <HAL_SPI_TransmitReceive+0x1b8>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d014      	beq.n	8007b48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	b292      	uxth	r2, r2
 8007b2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	1c9a      	adds	r2, r3, #2
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b44:	2301      	movs	r3, #1
 8007b46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b48:	f7fd f86c 	bl	8004c24 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d807      	bhi.n	8007b68 <HAL_SPI_TransmitReceive+0x1d8>
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5e:	d003      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b66:	e0a7      	b.n	8007cb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1a6      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x130>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1a1      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x130>
 8007b7c:	e07c      	b.n	8007c78 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d002      	beq.n	8007b8c <HAL_SPI_TransmitReceive+0x1fc>
 8007b86:	8b7b      	ldrh	r3, [r7, #26]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d16b      	bne.n	8007c64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	330c      	adds	r3, #12
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bb2:	e057      	b.n	8007c64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d11c      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x26c>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d017      	beq.n	8007bfc <HAL_SPI_TransmitReceive+0x26c>
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d114      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	330c      	adds	r3, #12
 8007bdc:	7812      	ldrb	r2, [r2, #0]
 8007bde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d119      	bne.n	8007c3e <HAL_SPI_TransmitReceive+0x2ae>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d014      	beq.n	8007c3e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	b2d2      	uxtb	r2, r2
 8007c20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	1c5a      	adds	r2, r3, #1
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	3b01      	subs	r3, #1
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c3e:	f7fc fff1 	bl	8004c24 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d803      	bhi.n	8007c56 <HAL_SPI_TransmitReceive+0x2c6>
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c54:	d102      	bne.n	8007c5c <HAL_SPI_TransmitReceive+0x2cc>
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d103      	bne.n	8007c64 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c62:	e029      	b.n	8007cb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1a2      	bne.n	8007bb4 <HAL_SPI_TransmitReceive+0x224>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d19d      	bne.n	8007bb4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 f917 	bl	8007eb0 <SPI_EndRxTxTransaction>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d006      	beq.n	8007c96 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2220      	movs	r2, #32
 8007c92:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c94:	e010      	b.n	8007cb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10b      	bne.n	8007cb6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	e000      	b.n	8007cb8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007cb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007cc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3730      	adds	r7, #48	; 0x30
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	603b      	str	r3, [r7, #0]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ce4:	f7fc ff9e 	bl	8004c24 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	1a9b      	subs	r3, r3, r2
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007cf4:	f7fc ff96 	bl	8004c24 <HAL_GetTick>
 8007cf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007cfa:	4b39      	ldr	r3, [pc, #228]	; (8007de0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	015b      	lsls	r3, r3, #5
 8007d00:	0d1b      	lsrs	r3, r3, #20
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	fb02 f303 	mul.w	r3, r2, r3
 8007d08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d0a:	e054      	b.n	8007db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d12:	d050      	beq.n	8007db6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d14:	f7fc ff86 	bl	8004c24 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d902      	bls.n	8007d2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d13d      	bne.n	8007da6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d42:	d111      	bne.n	8007d68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d4c:	d004      	beq.n	8007d58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d56:	d107      	bne.n	8007d68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d70:	d10f      	bne.n	8007d92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e017      	b.n	8007dd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	bf0c      	ite	eq
 8007dc6:	2301      	moveq	r3, #1
 8007dc8:	2300      	movne	r3, #0
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	461a      	mov	r2, r3
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d19b      	bne.n	8007d0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3720      	adds	r7, #32
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20000000 	.word	0x20000000

08007de4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007df8:	d111      	bne.n	8007e1e <SPI_EndRxTransaction+0x3a>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e02:	d004      	beq.n	8007e0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e0c:	d107      	bne.n	8007e1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e26:	d12a      	bne.n	8007e7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e30:	d012      	beq.n	8007e58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2180      	movs	r1, #128	; 0x80
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7ff ff49 	bl	8007cd4 <SPI_WaitFlagStateUntilTimeout>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d02d      	beq.n	8007ea4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4c:	f043 0220 	orr.w	r2, r3, #32
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e026      	b.n	8007ea6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	2101      	movs	r1, #1
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f7ff ff36 	bl	8007cd4 <SPI_WaitFlagStateUntilTimeout>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d01a      	beq.n	8007ea4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e72:	f043 0220 	orr.w	r2, r3, #32
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e013      	b.n	8007ea6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2200      	movs	r2, #0
 8007e86:	2101      	movs	r1, #1
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff ff23 	bl	8007cd4 <SPI_WaitFlagStateUntilTimeout>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e98:	f043 0220 	orr.w	r2, r3, #32
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e000      	b.n	8007ea6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
	...

08007eb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b088      	sub	sp, #32
 8007eb4:	af02      	add	r7, sp, #8
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ebc:	4b1b      	ldr	r3, [pc, #108]	; (8007f2c <SPI_EndRxTxTransaction+0x7c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a1b      	ldr	r2, [pc, #108]	; (8007f30 <SPI_EndRxTxTransaction+0x80>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	0d5b      	lsrs	r3, r3, #21
 8007ec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ecc:	fb02 f303 	mul.w	r3, r2, r3
 8007ed0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eda:	d112      	bne.n	8007f02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2180      	movs	r1, #128	; 0x80
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f7ff fef4 	bl	8007cd4 <SPI_WaitFlagStateUntilTimeout>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d016      	beq.n	8007f20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef6:	f043 0220 	orr.w	r2, r3, #32
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e00f      	b.n	8007f22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00a      	beq.n	8007f1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f18:	2b80      	cmp	r3, #128	; 0x80
 8007f1a:	d0f2      	beq.n	8007f02 <SPI_EndRxTxTransaction+0x52>
 8007f1c:	e000      	b.n	8007f20 <SPI_EndRxTxTransaction+0x70>
        break;
 8007f1e:	bf00      	nop
  }

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000000 	.word	0x20000000
 8007f30:	165e9f81 	.word	0x165e9f81

08007f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e041      	b.n	8007fca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d106      	bne.n	8007f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7fb fb8e 	bl	800367c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f000 fe12 	bl	8008b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d001      	beq.n	8007fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e04e      	b.n	800808a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a23      	ldr	r2, [pc, #140]	; (8008098 <HAL_TIM_Base_Start_IT+0xc4>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d022      	beq.n	8008054 <HAL_TIM_Base_Start_IT+0x80>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008016:	d01d      	beq.n	8008054 <HAL_TIM_Base_Start_IT+0x80>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a1f      	ldr	r2, [pc, #124]	; (800809c <HAL_TIM_Base_Start_IT+0xc8>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d018      	beq.n	8008054 <HAL_TIM_Base_Start_IT+0x80>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a1e      	ldr	r2, [pc, #120]	; (80080a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d013      	beq.n	8008054 <HAL_TIM_Base_Start_IT+0x80>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a1c      	ldr	r2, [pc, #112]	; (80080a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00e      	beq.n	8008054 <HAL_TIM_Base_Start_IT+0x80>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a1b      	ldr	r2, [pc, #108]	; (80080a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d009      	beq.n	8008054 <HAL_TIM_Base_Start_IT+0x80>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a19      	ldr	r2, [pc, #100]	; (80080ac <HAL_TIM_Base_Start_IT+0xd8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d004      	beq.n	8008054 <HAL_TIM_Base_Start_IT+0x80>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d111      	bne.n	8008078 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 0307 	and.w	r3, r3, #7
 800805e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2b06      	cmp	r3, #6
 8008064:	d010      	beq.n	8008088 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f042 0201 	orr.w	r2, r2, #1
 8008074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008076:	e007      	b.n	8008088 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0201 	orr.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	40010000 	.word	0x40010000
 800809c:	40000400 	.word	0x40000400
 80080a0:	40000800 	.word	0x40000800
 80080a4:	40000c00 	.word	0x40000c00
 80080a8:	40010400 	.word	0x40010400
 80080ac:	40014000 	.word	0x40014000
 80080b0:	40001800 	.word	0x40001800

080080b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6a1a      	ldr	r2, [r3, #32]
 80080d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80080d6:	4013      	ands	r3, r2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10f      	bne.n	80080fc <HAL_TIM_Base_Stop_IT+0x48>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6a1a      	ldr	r2, [r3, #32]
 80080e2:	f240 4344 	movw	r3, #1092	; 0x444
 80080e6:	4013      	ands	r3, r2
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d107      	bne.n	80080fc <HAL_TIM_Base_Stop_IT+0x48>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0201 	bic.w	r2, r2, #1
 80080fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e041      	b.n	80081a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d106      	bne.n	800813e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7fb fa7d 	bl	8003638 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3304      	adds	r3, #4
 800814e:	4619      	mov	r1, r3
 8008150:	4610      	mov	r0, r2
 8008152:	f000 fd23 	bl	8008b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d109      	bne.n	80081d4 <HAL_TIM_PWM_Start+0x24>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	bf14      	ite	ne
 80081cc:	2301      	movne	r3, #1
 80081ce:	2300      	moveq	r3, #0
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	e022      	b.n	800821a <HAL_TIM_PWM_Start+0x6a>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	d109      	bne.n	80081ee <HAL_TIM_PWM_Start+0x3e>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	bf14      	ite	ne
 80081e6:	2301      	movne	r3, #1
 80081e8:	2300      	moveq	r3, #0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	e015      	b.n	800821a <HAL_TIM_PWM_Start+0x6a>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d109      	bne.n	8008208 <HAL_TIM_PWM_Start+0x58>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	bf14      	ite	ne
 8008200:	2301      	movne	r3, #1
 8008202:	2300      	moveq	r3, #0
 8008204:	b2db      	uxtb	r3, r3
 8008206:	e008      	b.n	800821a <HAL_TIM_PWM_Start+0x6a>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b01      	cmp	r3, #1
 8008212:	bf14      	ite	ne
 8008214:	2301      	movne	r3, #1
 8008216:	2300      	moveq	r3, #0
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e07c      	b.n	800831c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <HAL_TIM_PWM_Start+0x82>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008230:	e013      	b.n	800825a <HAL_TIM_PWM_Start+0xaa>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b04      	cmp	r3, #4
 8008236:	d104      	bne.n	8008242 <HAL_TIM_PWM_Start+0x92>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008240:	e00b      	b.n	800825a <HAL_TIM_PWM_Start+0xaa>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b08      	cmp	r3, #8
 8008246:	d104      	bne.n	8008252 <HAL_TIM_PWM_Start+0xa2>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008250:	e003      	b.n	800825a <HAL_TIM_PWM_Start+0xaa>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2202      	movs	r2, #2
 8008256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2201      	movs	r2, #1
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 feea 	bl	800903c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a2d      	ldr	r2, [pc, #180]	; (8008324 <HAL_TIM_PWM_Start+0x174>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d004      	beq.n	800827c <HAL_TIM_PWM_Start+0xcc>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a2c      	ldr	r2, [pc, #176]	; (8008328 <HAL_TIM_PWM_Start+0x178>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d101      	bne.n	8008280 <HAL_TIM_PWM_Start+0xd0>
 800827c:	2301      	movs	r3, #1
 800827e:	e000      	b.n	8008282 <HAL_TIM_PWM_Start+0xd2>
 8008280:	2300      	movs	r3, #0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008294:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a22      	ldr	r2, [pc, #136]	; (8008324 <HAL_TIM_PWM_Start+0x174>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d022      	beq.n	80082e6 <HAL_TIM_PWM_Start+0x136>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a8:	d01d      	beq.n	80082e6 <HAL_TIM_PWM_Start+0x136>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a1f      	ldr	r2, [pc, #124]	; (800832c <HAL_TIM_PWM_Start+0x17c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d018      	beq.n	80082e6 <HAL_TIM_PWM_Start+0x136>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1d      	ldr	r2, [pc, #116]	; (8008330 <HAL_TIM_PWM_Start+0x180>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d013      	beq.n	80082e6 <HAL_TIM_PWM_Start+0x136>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a1c      	ldr	r2, [pc, #112]	; (8008334 <HAL_TIM_PWM_Start+0x184>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d00e      	beq.n	80082e6 <HAL_TIM_PWM_Start+0x136>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a16      	ldr	r2, [pc, #88]	; (8008328 <HAL_TIM_PWM_Start+0x178>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d009      	beq.n	80082e6 <HAL_TIM_PWM_Start+0x136>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a18      	ldr	r2, [pc, #96]	; (8008338 <HAL_TIM_PWM_Start+0x188>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d004      	beq.n	80082e6 <HAL_TIM_PWM_Start+0x136>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a16      	ldr	r2, [pc, #88]	; (800833c <HAL_TIM_PWM_Start+0x18c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d111      	bne.n	800830a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f003 0307 	and.w	r3, r3, #7
 80082f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b06      	cmp	r3, #6
 80082f6:	d010      	beq.n	800831a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f042 0201 	orr.w	r2, r2, #1
 8008306:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008308:	e007      	b.n	800831a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f042 0201 	orr.w	r2, r2, #1
 8008318:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40010000 	.word	0x40010000
 8008328:	40010400 	.word	0x40010400
 800832c:	40000400 	.word	0x40000400
 8008330:	40000800 	.word	0x40000800
 8008334:	40000c00 	.word	0x40000c00
 8008338:	40014000 	.word	0x40014000
 800833c:	40001800 	.word	0x40001800

08008340 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2200      	movs	r2, #0
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f000 fe72 	bl	800903c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a2e      	ldr	r2, [pc, #184]	; (8008418 <HAL_TIM_PWM_Stop+0xd8>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d004      	beq.n	800836c <HAL_TIM_PWM_Stop+0x2c>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a2d      	ldr	r2, [pc, #180]	; (800841c <HAL_TIM_PWM_Stop+0xdc>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d101      	bne.n	8008370 <HAL_TIM_PWM_Stop+0x30>
 800836c:	2301      	movs	r3, #1
 800836e:	e000      	b.n	8008372 <HAL_TIM_PWM_Stop+0x32>
 8008370:	2300      	movs	r3, #0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d017      	beq.n	80083a6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6a1a      	ldr	r2, [r3, #32]
 800837c:	f241 1311 	movw	r3, #4369	; 0x1111
 8008380:	4013      	ands	r3, r2
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10f      	bne.n	80083a6 <HAL_TIM_PWM_Stop+0x66>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6a1a      	ldr	r2, [r3, #32]
 800838c:	f240 4344 	movw	r3, #1092	; 0x444
 8008390:	4013      	ands	r3, r2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d107      	bne.n	80083a6 <HAL_TIM_PWM_Stop+0x66>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	6a1a      	ldr	r2, [r3, #32]
 80083ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80083b0:	4013      	ands	r3, r2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10f      	bne.n	80083d6 <HAL_TIM_PWM_Stop+0x96>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6a1a      	ldr	r2, [r3, #32]
 80083bc:	f240 4344 	movw	r3, #1092	; 0x444
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d107      	bne.n	80083d6 <HAL_TIM_PWM_Stop+0x96>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0201 	bic.w	r2, r2, #1
 80083d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d104      	bne.n	80083e6 <HAL_TIM_PWM_Stop+0xa6>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083e4:	e013      	b.n	800840e <HAL_TIM_PWM_Stop+0xce>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b04      	cmp	r3, #4
 80083ea:	d104      	bne.n	80083f6 <HAL_TIM_PWM_Stop+0xb6>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083f4:	e00b      	b.n	800840e <HAL_TIM_PWM_Stop+0xce>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b08      	cmp	r3, #8
 80083fa:	d104      	bne.n	8008406 <HAL_TIM_PWM_Stop+0xc6>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008404:	e003      	b.n	800840e <HAL_TIM_PWM_Stop+0xce>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	40010000 	.word	0x40010000
 800841c:	40010400 	.word	0x40010400

08008420 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e097      	b.n	8008564 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b00      	cmp	r3, #0
 800843e:	d106      	bne.n	800844e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f7fb f867 	bl	800351c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2202      	movs	r2, #2
 8008452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6812      	ldr	r2, [r2, #0]
 8008460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008464:	f023 0307 	bic.w	r3, r3, #7
 8008468:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f000 fb91 	bl	8008b9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	4313      	orrs	r3, r2
 800849a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084a2:	f023 0303 	bic.w	r3, r3, #3
 80084a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	021b      	lsls	r3, r3, #8
 80084b2:	4313      	orrs	r3, r2
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80084c0:	f023 030c 	bic.w	r3, r3, #12
 80084c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	4313      	orrs	r3, r2
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	011a      	lsls	r2, r3, #4
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	031b      	lsls	r3, r3, #12
 80084f0:	4313      	orrs	r3, r2
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80084fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008506:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	4313      	orrs	r3, r2
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	4313      	orrs	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3718      	adds	r7, #24
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800857c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008584:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800858c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008594:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d110      	bne.n	80085be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d102      	bne.n	80085a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80085a2:	7b7b      	ldrb	r3, [r7, #13]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d001      	beq.n	80085ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e069      	b.n	8008680 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2202      	movs	r2, #2
 80085b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085bc:	e031      	b.n	8008622 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d110      	bne.n	80085e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d102      	bne.n	80085d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80085ca:	7b3b      	ldrb	r3, [r7, #12]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d001      	beq.n	80085d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e055      	b.n	8008680 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085e4:	e01d      	b.n	8008622 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d108      	bne.n	80085fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d105      	bne.n	80085fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085f2:	7b7b      	ldrb	r3, [r7, #13]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d102      	bne.n	80085fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80085f8:	7b3b      	ldrb	r3, [r7, #12]
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d001      	beq.n	8008602 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e03e      	b.n	8008680 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2202      	movs	r2, #2
 8008606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2202      	movs	r2, #2
 800860e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2202      	movs	r2, #2
 8008616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2202      	movs	r2, #2
 800861e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d003      	beq.n	8008630 <HAL_TIM_Encoder_Start+0xc4>
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b04      	cmp	r3, #4
 800862c:	d008      	beq.n	8008640 <HAL_TIM_Encoder_Start+0xd4>
 800862e:	e00f      	b.n	8008650 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2201      	movs	r2, #1
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fcff 	bl	800903c <TIM_CCxChannelCmd>
      break;
 800863e:	e016      	b.n	800866e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2201      	movs	r2, #1
 8008646:	2104      	movs	r1, #4
 8008648:	4618      	mov	r0, r3
 800864a:	f000 fcf7 	bl	800903c <TIM_CCxChannelCmd>
      break;
 800864e:	e00e      	b.n	800866e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2201      	movs	r2, #1
 8008656:	2100      	movs	r1, #0
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fcef 	bl	800903c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2201      	movs	r2, #1
 8008664:	2104      	movs	r1, #4
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fce8 	bl	800903c <TIM_CCxChannelCmd>
      break;
 800866c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f042 0201 	orr.w	r2, r2, #1
 800867c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <HAL_TIM_Encoder_Stop+0x18>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b04      	cmp	r3, #4
 800869c:	d008      	beq.n	80086b0 <HAL_TIM_Encoder_Stop+0x28>
 800869e:	e00f      	b.n	80086c0 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2200      	movs	r2, #0
 80086a6:	2100      	movs	r1, #0
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fcc7 	bl	800903c <TIM_CCxChannelCmd>
      break;
 80086ae:	e016      	b.n	80086de <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2200      	movs	r2, #0
 80086b6:	2104      	movs	r1, #4
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fcbf 	bl	800903c <TIM_CCxChannelCmd>
      break;
 80086be:	e00e      	b.n	80086de <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2200      	movs	r2, #0
 80086c6:	2100      	movs	r1, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 fcb7 	bl	800903c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2200      	movs	r2, #0
 80086d4:	2104      	movs	r1, #4
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fcb0 	bl	800903c <TIM_CCxChannelCmd>
      break;
 80086dc:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6a1a      	ldr	r2, [r3, #32]
 80086e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80086e8:	4013      	ands	r3, r2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10f      	bne.n	800870e <HAL_TIM_Encoder_Stop+0x86>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	6a1a      	ldr	r2, [r3, #32]
 80086f4:	f240 4344 	movw	r3, #1092	; 0x444
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d107      	bne.n	800870e <HAL_TIM_Encoder_Stop+0x86>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 0201 	bic.w	r2, r2, #1
 800870c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <HAL_TIM_Encoder_Stop+0x92>
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	2b04      	cmp	r3, #4
 8008718:	d138      	bne.n	800878c <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <HAL_TIM_Encoder_Stop+0xa2>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008728:	e013      	b.n	8008752 <HAL_TIM_Encoder_Stop+0xca>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b04      	cmp	r3, #4
 800872e:	d104      	bne.n	800873a <HAL_TIM_Encoder_Stop+0xb2>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008738:	e00b      	b.n	8008752 <HAL_TIM_Encoder_Stop+0xca>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b08      	cmp	r3, #8
 800873e:	d104      	bne.n	800874a <HAL_TIM_Encoder_Stop+0xc2>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008748:	e003      	b.n	8008752 <HAL_TIM_Encoder_Stop+0xca>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d104      	bne.n	8008762 <HAL_TIM_Encoder_Stop+0xda>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008760:	e024      	b.n	80087ac <HAL_TIM_Encoder_Stop+0x124>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b04      	cmp	r3, #4
 8008766:	d104      	bne.n	8008772 <HAL_TIM_Encoder_Stop+0xea>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008770:	e01c      	b.n	80087ac <HAL_TIM_Encoder_Stop+0x124>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b08      	cmp	r3, #8
 8008776:	d104      	bne.n	8008782 <HAL_TIM_Encoder_Stop+0xfa>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008780:	e014      	b.n	80087ac <HAL_TIM_Encoder_Stop+0x124>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800878a:	e00f      	b.n	80087ac <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b082      	sub	sp, #8
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d122      	bne.n	8008812 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d11b      	bne.n	8008812 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f06f 0202 	mvn.w	r2, #2
 80087e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	f003 0303 	and.w	r3, r3, #3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f9b1 	bl	8008b60 <HAL_TIM_IC_CaptureCallback>
 80087fe:	e005      	b.n	800880c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f9a3 	bl	8008b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 f9b4 	bl	8008b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b04      	cmp	r3, #4
 800881e:	d122      	bne.n	8008866 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	2b04      	cmp	r3, #4
 800882c:	d11b      	bne.n	8008866 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f06f 0204 	mvn.w	r2, #4
 8008836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008848:	2b00      	cmp	r3, #0
 800884a:	d003      	beq.n	8008854 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f987 	bl	8008b60 <HAL_TIM_IC_CaptureCallback>
 8008852:	e005      	b.n	8008860 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f979 	bl	8008b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 f98a 	bl	8008b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	f003 0308 	and.w	r3, r3, #8
 8008870:	2b08      	cmp	r3, #8
 8008872:	d122      	bne.n	80088ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f003 0308 	and.w	r3, r3, #8
 800887e:	2b08      	cmp	r3, #8
 8008880:	d11b      	bne.n	80088ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f06f 0208 	mvn.w	r2, #8
 800888a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2204      	movs	r2, #4
 8008890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	f003 0303 	and.w	r3, r3, #3
 800889c:	2b00      	cmp	r3, #0
 800889e:	d003      	beq.n	80088a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f95d 	bl	8008b60 <HAL_TIM_IC_CaptureCallback>
 80088a6:	e005      	b.n	80088b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f94f 	bl	8008b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f960 	bl	8008b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	f003 0310 	and.w	r3, r3, #16
 80088c4:	2b10      	cmp	r3, #16
 80088c6:	d122      	bne.n	800890e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f003 0310 	and.w	r3, r3, #16
 80088d2:	2b10      	cmp	r3, #16
 80088d4:	d11b      	bne.n	800890e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f06f 0210 	mvn.w	r2, #16
 80088de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2208      	movs	r2, #8
 80088e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f933 	bl	8008b60 <HAL_TIM_IC_CaptureCallback>
 80088fa:	e005      	b.n	8008908 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f925 	bl	8008b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f936 	bl	8008b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b01      	cmp	r3, #1
 800891a:	d10e      	bne.n	800893a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b01      	cmp	r3, #1
 8008928:	d107      	bne.n	800893a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f06f 0201 	mvn.w	r2, #1
 8008932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7f9 fba1 	bl	800207c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008944:	2b80      	cmp	r3, #128	; 0x80
 8008946:	d10e      	bne.n	8008966 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008952:	2b80      	cmp	r3, #128	; 0x80
 8008954:	d107      	bne.n	8008966 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800895e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fc17 	bl	8009194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008970:	2b40      	cmp	r3, #64	; 0x40
 8008972:	d10e      	bne.n	8008992 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897e:	2b40      	cmp	r3, #64	; 0x40
 8008980:	d107      	bne.n	8008992 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800898a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f8fb 	bl	8008b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b20      	cmp	r3, #32
 800899e:	d10e      	bne.n	80089be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f003 0320 	and.w	r3, r3, #32
 80089aa:	2b20      	cmp	r3, #32
 80089ac:	d107      	bne.n	80089be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f06f 0220 	mvn.w	r2, #32
 80089b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fbe1 	bl	8009180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d101      	bne.n	80089e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80089e2:	2302      	movs	r3, #2
 80089e4:	e0ae      	b.n	8008b44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b0c      	cmp	r3, #12
 80089f2:	f200 809f 	bhi.w	8008b34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80089f6:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a31 	.word	0x08008a31
 8008a00:	08008b35 	.word	0x08008b35
 8008a04:	08008b35 	.word	0x08008b35
 8008a08:	08008b35 	.word	0x08008b35
 8008a0c:	08008a71 	.word	0x08008a71
 8008a10:	08008b35 	.word	0x08008b35
 8008a14:	08008b35 	.word	0x08008b35
 8008a18:	08008b35 	.word	0x08008b35
 8008a1c:	08008ab3 	.word	0x08008ab3
 8008a20:	08008b35 	.word	0x08008b35
 8008a24:	08008b35 	.word	0x08008b35
 8008a28:	08008b35 	.word	0x08008b35
 8008a2c:	08008af3 	.word	0x08008af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68b9      	ldr	r1, [r7, #8]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f950 	bl	8008cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	699a      	ldr	r2, [r3, #24]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0208 	orr.w	r2, r2, #8
 8008a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 0204 	bic.w	r2, r2, #4
 8008a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6999      	ldr	r1, [r3, #24]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	691a      	ldr	r2, [r3, #16]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	619a      	str	r2, [r3, #24]
      break;
 8008a6e:	e064      	b.n	8008b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68b9      	ldr	r1, [r7, #8]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 f9a0 	bl	8008dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	699a      	ldr	r2, [r3, #24]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6999      	ldr	r1, [r3, #24]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	021a      	lsls	r2, r3, #8
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	619a      	str	r2, [r3, #24]
      break;
 8008ab0:	e043      	b.n	8008b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68b9      	ldr	r1, [r7, #8]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 f9f5 	bl	8008ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69da      	ldr	r2, [r3, #28]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f042 0208 	orr.w	r2, r2, #8
 8008acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	69da      	ldr	r2, [r3, #28]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f022 0204 	bic.w	r2, r2, #4
 8008adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	69d9      	ldr	r1, [r3, #28]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	691a      	ldr	r2, [r3, #16]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	61da      	str	r2, [r3, #28]
      break;
 8008af0:	e023      	b.n	8008b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fa49 	bl	8008f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69da      	ldr	r2, [r3, #28]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69da      	ldr	r2, [r3, #28]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69d9      	ldr	r1, [r3, #28]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	021a      	lsls	r2, r3, #8
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	61da      	str	r2, [r3, #28]
      break;
 8008b32:	e002      	b.n	8008b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	75fb      	strb	r3, [r7, #23]
      break;
 8008b38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a40      	ldr	r2, [pc, #256]	; (8008cb0 <TIM_Base_SetConfig+0x114>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d013      	beq.n	8008bdc <TIM_Base_SetConfig+0x40>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bba:	d00f      	beq.n	8008bdc <TIM_Base_SetConfig+0x40>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a3d      	ldr	r2, [pc, #244]	; (8008cb4 <TIM_Base_SetConfig+0x118>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d00b      	beq.n	8008bdc <TIM_Base_SetConfig+0x40>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a3c      	ldr	r2, [pc, #240]	; (8008cb8 <TIM_Base_SetConfig+0x11c>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d007      	beq.n	8008bdc <TIM_Base_SetConfig+0x40>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a3b      	ldr	r2, [pc, #236]	; (8008cbc <TIM_Base_SetConfig+0x120>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d003      	beq.n	8008bdc <TIM_Base_SetConfig+0x40>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a3a      	ldr	r2, [pc, #232]	; (8008cc0 <TIM_Base_SetConfig+0x124>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d108      	bne.n	8008bee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a2f      	ldr	r2, [pc, #188]	; (8008cb0 <TIM_Base_SetConfig+0x114>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d02b      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bfc:	d027      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a2c      	ldr	r2, [pc, #176]	; (8008cb4 <TIM_Base_SetConfig+0x118>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d023      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a2b      	ldr	r2, [pc, #172]	; (8008cb8 <TIM_Base_SetConfig+0x11c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d01f      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a2a      	ldr	r2, [pc, #168]	; (8008cbc <TIM_Base_SetConfig+0x120>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d01b      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a29      	ldr	r2, [pc, #164]	; (8008cc0 <TIM_Base_SetConfig+0x124>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d017      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a28      	ldr	r2, [pc, #160]	; (8008cc4 <TIM_Base_SetConfig+0x128>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d013      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a27      	ldr	r2, [pc, #156]	; (8008cc8 <TIM_Base_SetConfig+0x12c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d00f      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a26      	ldr	r2, [pc, #152]	; (8008ccc <TIM_Base_SetConfig+0x130>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00b      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a25      	ldr	r2, [pc, #148]	; (8008cd0 <TIM_Base_SetConfig+0x134>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d007      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a24      	ldr	r2, [pc, #144]	; (8008cd4 <TIM_Base_SetConfig+0x138>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d003      	beq.n	8008c4e <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a23      	ldr	r2, [pc, #140]	; (8008cd8 <TIM_Base_SetConfig+0x13c>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d108      	bne.n	8008c60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a0a      	ldr	r2, [pc, #40]	; (8008cb0 <TIM_Base_SetConfig+0x114>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d003      	beq.n	8008c94 <TIM_Base_SetConfig+0xf8>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a0c      	ldr	r2, [pc, #48]	; (8008cc0 <TIM_Base_SetConfig+0x124>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d103      	bne.n	8008c9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	691a      	ldr	r2, [r3, #16]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	615a      	str	r2, [r3, #20]
}
 8008ca2:	bf00      	nop
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	40000400 	.word	0x40000400
 8008cb8:	40000800 	.word	0x40000800
 8008cbc:	40000c00 	.word	0x40000c00
 8008cc0:	40010400 	.word	0x40010400
 8008cc4:	40014000 	.word	0x40014000
 8008cc8:	40014400 	.word	0x40014400
 8008ccc:	40014800 	.word	0x40014800
 8008cd0:	40001800 	.word	0x40001800
 8008cd4:	40001c00 	.word	0x40001c00
 8008cd8:	40002000 	.word	0x40002000

08008cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	f023 0201 	bic.w	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f023 0303 	bic.w	r3, r3, #3
 8008d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f023 0302 	bic.w	r3, r3, #2
 8008d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a20      	ldr	r2, [pc, #128]	; (8008db4 <TIM_OC1_SetConfig+0xd8>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d003      	beq.n	8008d40 <TIM_OC1_SetConfig+0x64>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a1f      	ldr	r2, [pc, #124]	; (8008db8 <TIM_OC1_SetConfig+0xdc>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d10c      	bne.n	8008d5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f023 0308 	bic.w	r3, r3, #8
 8008d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f023 0304 	bic.w	r3, r3, #4
 8008d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a15      	ldr	r2, [pc, #84]	; (8008db4 <TIM_OC1_SetConfig+0xd8>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d003      	beq.n	8008d6a <TIM_OC1_SetConfig+0x8e>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a14      	ldr	r2, [pc, #80]	; (8008db8 <TIM_OC1_SetConfig+0xdc>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d111      	bne.n	8008d8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	621a      	str	r2, [r3, #32]
}
 8008da8:	bf00      	nop
 8008daa:	371c      	adds	r7, #28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	40010000 	.word	0x40010000
 8008db8:	40010400 	.word	0x40010400

08008dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b087      	sub	sp, #28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	f023 0210 	bic.w	r2, r3, #16
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	021b      	lsls	r3, r3, #8
 8008dfa:	68fa      	ldr	r2, [r7, #12]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f023 0320 	bic.w	r3, r3, #32
 8008e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	011b      	lsls	r3, r3, #4
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a22      	ldr	r2, [pc, #136]	; (8008ea0 <TIM_OC2_SetConfig+0xe4>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d003      	beq.n	8008e24 <TIM_OC2_SetConfig+0x68>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a21      	ldr	r2, [pc, #132]	; (8008ea4 <TIM_OC2_SetConfig+0xe8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d10d      	bne.n	8008e40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a17      	ldr	r2, [pc, #92]	; (8008ea0 <TIM_OC2_SetConfig+0xe4>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d003      	beq.n	8008e50 <TIM_OC2_SetConfig+0x94>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a16      	ldr	r2, [pc, #88]	; (8008ea4 <TIM_OC2_SetConfig+0xe8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d113      	bne.n	8008e78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	621a      	str	r2, [r3, #32]
}
 8008e92:	bf00      	nop
 8008e94:	371c      	adds	r7, #28
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	40010400 	.word	0x40010400

08008ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f023 0303 	bic.w	r3, r3, #3
 8008ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	021b      	lsls	r3, r3, #8
 8008ef8:	697a      	ldr	r2, [r7, #20]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a21      	ldr	r2, [pc, #132]	; (8008f88 <TIM_OC3_SetConfig+0xe0>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d003      	beq.n	8008f0e <TIM_OC3_SetConfig+0x66>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a20      	ldr	r2, [pc, #128]	; (8008f8c <TIM_OC3_SetConfig+0xe4>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d10d      	bne.n	8008f2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a16      	ldr	r2, [pc, #88]	; (8008f88 <TIM_OC3_SetConfig+0xe0>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d003      	beq.n	8008f3a <TIM_OC3_SetConfig+0x92>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a15      	ldr	r2, [pc, #84]	; (8008f8c <TIM_OC3_SetConfig+0xe4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d113      	bne.n	8008f62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	011b      	lsls	r3, r3, #4
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	621a      	str	r2, [r3, #32]
}
 8008f7c:	bf00      	nop
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	40010000 	.word	0x40010000
 8008f8c:	40010400 	.word	0x40010400

08008f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	021b      	lsls	r3, r3, #8
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	031b      	lsls	r3, r3, #12
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a12      	ldr	r2, [pc, #72]	; (8009034 <TIM_OC4_SetConfig+0xa4>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d003      	beq.n	8008ff8 <TIM_OC4_SetConfig+0x68>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a11      	ldr	r2, [pc, #68]	; (8009038 <TIM_OC4_SetConfig+0xa8>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d109      	bne.n	800900c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ffe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	019b      	lsls	r3, r3, #6
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	4313      	orrs	r3, r2
 800900a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	621a      	str	r2, [r3, #32]
}
 8009026:	bf00      	nop
 8009028:	371c      	adds	r7, #28
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40010000 	.word	0x40010000
 8009038:	40010400 	.word	0x40010400

0800903c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	f003 031f 	and.w	r3, r3, #31
 800904e:	2201      	movs	r2, #1
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6a1a      	ldr	r2, [r3, #32]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	43db      	mvns	r3, r3
 800905e:	401a      	ands	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a1a      	ldr	r2, [r3, #32]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	f003 031f 	and.w	r3, r3, #31
 800906e:	6879      	ldr	r1, [r7, #4]
 8009070:	fa01 f303 	lsl.w	r3, r1, r3
 8009074:	431a      	orrs	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	621a      	str	r2, [r3, #32]
}
 800907a:	bf00      	nop
 800907c:	371c      	adds	r7, #28
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
	...

08009088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009098:	2b01      	cmp	r3, #1
 800909a:	d101      	bne.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800909c:	2302      	movs	r3, #2
 800909e:	e05a      	b.n	8009156 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2202      	movs	r2, #2
 80090ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a21      	ldr	r2, [pc, #132]	; (8009164 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d022      	beq.n	800912a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ec:	d01d      	beq.n	800912a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a1d      	ldr	r2, [pc, #116]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d018      	beq.n	800912a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a1b      	ldr	r2, [pc, #108]	; (800916c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d013      	beq.n	800912a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a1a      	ldr	r2, [pc, #104]	; (8009170 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d00e      	beq.n	800912a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a18      	ldr	r2, [pc, #96]	; (8009174 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d009      	beq.n	800912a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a17      	ldr	r2, [pc, #92]	; (8009178 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d004      	beq.n	800912a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a15      	ldr	r2, [pc, #84]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d10c      	bne.n	8009144 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	4313      	orrs	r3, r2
 800913a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	40010000 	.word	0x40010000
 8009168:	40000400 	.word	0x40000400
 800916c:	40000800 	.word	0x40000800
 8009170:	40000c00 	.word	0x40000c00
 8009174:	40010400 	.word	0x40010400
 8009178:	40014000 	.word	0x40014000
 800917c:	40001800 	.word	0x40001800

08009180 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e03f      	b.n	800923a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d106      	bne.n	80091d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7fa fb1e 	bl	8003810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2224      	movs	r2, #36	; 0x24
 80091d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f929 	bl	8009444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	691a      	ldr	r2, [r3, #16]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	695a      	ldr	r2, [r3, #20]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68da      	ldr	r2, [r3, #12]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2220      	movs	r2, #32
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2220      	movs	r2, #32
 8009234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b08a      	sub	sp, #40	; 0x28
 8009246:	af02      	add	r7, sp, #8
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	603b      	str	r3, [r7, #0]
 800924e:	4613      	mov	r3, r2
 8009250:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b20      	cmp	r3, #32
 8009260:	d17c      	bne.n	800935c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <HAL_UART_Transmit+0x2c>
 8009268:	88fb      	ldrh	r3, [r7, #6]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e075      	b.n	800935e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_UART_Transmit+0x3e>
 800927c:	2302      	movs	r3, #2
 800927e:	e06e      	b.n	800935e <HAL_UART_Transmit+0x11c>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2221      	movs	r2, #33	; 0x21
 8009292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009296:	f7fb fcc5 	bl	8004c24 <HAL_GetTick>
 800929a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	88fa      	ldrh	r2, [r7, #6]
 80092a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	88fa      	ldrh	r2, [r7, #6]
 80092a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092b0:	d108      	bne.n	80092c4 <HAL_UART_Transmit+0x82>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d104      	bne.n	80092c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	61bb      	str	r3, [r7, #24]
 80092c2:	e003      	b.n	80092cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80092d4:	e02a      	b.n	800932c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	9300      	str	r3, [sp, #0]
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	2200      	movs	r2, #0
 80092de:	2180      	movs	r1, #128	; 0x80
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 f840 	bl	8009366 <UART_WaitOnFlagUntilTimeout>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e036      	b.n	800935e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10b      	bne.n	800930e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	461a      	mov	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009304:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	3302      	adds	r3, #2
 800930a:	61bb      	str	r3, [r7, #24]
 800930c:	e007      	b.n	800931e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	781a      	ldrb	r2, [r3, #0]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	3301      	adds	r3, #1
 800931c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009322:	b29b      	uxth	r3, r3
 8009324:	3b01      	subs	r3, #1
 8009326:	b29a      	uxth	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009330:	b29b      	uxth	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1cf      	bne.n	80092d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2200      	movs	r2, #0
 800933e:	2140      	movs	r1, #64	; 0x40
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f810 	bl	8009366 <UART_WaitOnFlagUntilTimeout>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800934c:	2303      	movs	r3, #3
 800934e:	e006      	b.n	800935e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2220      	movs	r2, #32
 8009354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	e000      	b.n	800935e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800935c:	2302      	movs	r3, #2
  }
}
 800935e:	4618      	mov	r0, r3
 8009360:	3720      	adds	r7, #32
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b090      	sub	sp, #64	; 0x40
 800936a:	af00      	add	r7, sp, #0
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	603b      	str	r3, [r7, #0]
 8009372:	4613      	mov	r3, r2
 8009374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009376:	e050      	b.n	800941a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800937a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937e:	d04c      	beq.n	800941a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009382:	2b00      	cmp	r3, #0
 8009384:	d007      	beq.n	8009396 <UART_WaitOnFlagUntilTimeout+0x30>
 8009386:	f7fb fc4d 	bl	8004c24 <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009392:	429a      	cmp	r2, r3
 8009394:	d241      	bcs.n	800941a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	330c      	adds	r3, #12
 800939c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a0:	e853 3f00 	ldrex	r3, [r3]
 80093a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	330c      	adds	r3, #12
 80093b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093b6:	637a      	str	r2, [r7, #52]	; 0x34
 80093b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e5      	bne.n	8009396 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3314      	adds	r3, #20
 80093d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	613b      	str	r3, [r7, #16]
   return(result);
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f023 0301 	bic.w	r3, r3, #1
 80093e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3314      	adds	r3, #20
 80093e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ea:	623a      	str	r2, [r7, #32]
 80093ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ee:	69f9      	ldr	r1, [r7, #28]
 80093f0:	6a3a      	ldr	r2, [r7, #32]
 80093f2:	e841 2300 	strex	r3, r2, [r1]
 80093f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d1e5      	bne.n	80093ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2220      	movs	r2, #32
 8009402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2220      	movs	r2, #32
 800940a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e00f      	b.n	800943a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4013      	ands	r3, r2
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	429a      	cmp	r2, r3
 8009428:	bf0c      	ite	eq
 800942a:	2301      	moveq	r3, #1
 800942c:	2300      	movne	r3, #0
 800942e:	b2db      	uxtb	r3, r3
 8009430:	461a      	mov	r2, r3
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	429a      	cmp	r2, r3
 8009436:	d09f      	beq.n	8009378 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3740      	adds	r7, #64	; 0x40
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009448:	b09f      	sub	sp, #124	; 0x7c
 800944a:	af00      	add	r7, sp, #0
 800944c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800944e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800945a:	68d9      	ldr	r1, [r3, #12]
 800945c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	ea40 0301 	orr.w	r3, r0, r1
 8009464:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	431a      	orrs	r2, r3
 8009470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009472:	695b      	ldr	r3, [r3, #20]
 8009474:	431a      	orrs	r2, r3
 8009476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	4313      	orrs	r3, r2
 800947c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800947e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009488:	f021 010c 	bic.w	r1, r1, #12
 800948c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009492:	430b      	orrs	r3, r1
 8009494:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80094a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a2:	6999      	ldr	r1, [r3, #24]
 80094a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	ea40 0301 	orr.w	r3, r0, r1
 80094ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4bc5      	ldr	r3, [pc, #788]	; (80097c8 <UART_SetConfig+0x384>)
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d004      	beq.n	80094c2 <UART_SetConfig+0x7e>
 80094b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	4bc3      	ldr	r3, [pc, #780]	; (80097cc <UART_SetConfig+0x388>)
 80094be:	429a      	cmp	r2, r3
 80094c0:	d103      	bne.n	80094ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80094c2:	f7fd ff7b 	bl	80073bc <HAL_RCC_GetPCLK2Freq>
 80094c6:	6778      	str	r0, [r7, #116]	; 0x74
 80094c8:	e002      	b.n	80094d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80094ca:	f7fd ff63 	bl	8007394 <HAL_RCC_GetPCLK1Freq>
 80094ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d8:	f040 80b6 	bne.w	8009648 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80094dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094de:	461c      	mov	r4, r3
 80094e0:	f04f 0500 	mov.w	r5, #0
 80094e4:	4622      	mov	r2, r4
 80094e6:	462b      	mov	r3, r5
 80094e8:	1891      	adds	r1, r2, r2
 80094ea:	6439      	str	r1, [r7, #64]	; 0x40
 80094ec:	415b      	adcs	r3, r3
 80094ee:	647b      	str	r3, [r7, #68]	; 0x44
 80094f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094f4:	1912      	adds	r2, r2, r4
 80094f6:	eb45 0303 	adc.w	r3, r5, r3
 80094fa:	f04f 0000 	mov.w	r0, #0
 80094fe:	f04f 0100 	mov.w	r1, #0
 8009502:	00d9      	lsls	r1, r3, #3
 8009504:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009508:	00d0      	lsls	r0, r2, #3
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	1911      	adds	r1, r2, r4
 8009510:	6639      	str	r1, [r7, #96]	; 0x60
 8009512:	416b      	adcs	r3, r5
 8009514:	667b      	str	r3, [r7, #100]	; 0x64
 8009516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	461a      	mov	r2, r3
 800951c:	f04f 0300 	mov.w	r3, #0
 8009520:	1891      	adds	r1, r2, r2
 8009522:	63b9      	str	r1, [r7, #56]	; 0x38
 8009524:	415b      	adcs	r3, r3
 8009526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009528:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800952c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009530:	f7f7 fbaa 	bl	8000c88 <__aeabi_uldivmod>
 8009534:	4602      	mov	r2, r0
 8009536:	460b      	mov	r3, r1
 8009538:	4ba5      	ldr	r3, [pc, #660]	; (80097d0 <UART_SetConfig+0x38c>)
 800953a:	fba3 2302 	umull	r2, r3, r3, r2
 800953e:	095b      	lsrs	r3, r3, #5
 8009540:	011e      	lsls	r6, r3, #4
 8009542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009544:	461c      	mov	r4, r3
 8009546:	f04f 0500 	mov.w	r5, #0
 800954a:	4622      	mov	r2, r4
 800954c:	462b      	mov	r3, r5
 800954e:	1891      	adds	r1, r2, r2
 8009550:	6339      	str	r1, [r7, #48]	; 0x30
 8009552:	415b      	adcs	r3, r3
 8009554:	637b      	str	r3, [r7, #52]	; 0x34
 8009556:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800955a:	1912      	adds	r2, r2, r4
 800955c:	eb45 0303 	adc.w	r3, r5, r3
 8009560:	f04f 0000 	mov.w	r0, #0
 8009564:	f04f 0100 	mov.w	r1, #0
 8009568:	00d9      	lsls	r1, r3, #3
 800956a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800956e:	00d0      	lsls	r0, r2, #3
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	1911      	adds	r1, r2, r4
 8009576:	65b9      	str	r1, [r7, #88]	; 0x58
 8009578:	416b      	adcs	r3, r5
 800957a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800957c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	461a      	mov	r2, r3
 8009582:	f04f 0300 	mov.w	r3, #0
 8009586:	1891      	adds	r1, r2, r2
 8009588:	62b9      	str	r1, [r7, #40]	; 0x28
 800958a:	415b      	adcs	r3, r3
 800958c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800958e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009592:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009596:	f7f7 fb77 	bl	8000c88 <__aeabi_uldivmod>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4b8c      	ldr	r3, [pc, #560]	; (80097d0 <UART_SetConfig+0x38c>)
 80095a0:	fba3 1302 	umull	r1, r3, r3, r2
 80095a4:	095b      	lsrs	r3, r3, #5
 80095a6:	2164      	movs	r1, #100	; 0x64
 80095a8:	fb01 f303 	mul.w	r3, r1, r3
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	00db      	lsls	r3, r3, #3
 80095b0:	3332      	adds	r3, #50	; 0x32
 80095b2:	4a87      	ldr	r2, [pc, #540]	; (80097d0 <UART_SetConfig+0x38c>)
 80095b4:	fba2 2303 	umull	r2, r3, r2, r3
 80095b8:	095b      	lsrs	r3, r3, #5
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80095c0:	441e      	add	r6, r3
 80095c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095c4:	4618      	mov	r0, r3
 80095c6:	f04f 0100 	mov.w	r1, #0
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	1894      	adds	r4, r2, r2
 80095d0:	623c      	str	r4, [r7, #32]
 80095d2:	415b      	adcs	r3, r3
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
 80095d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095da:	1812      	adds	r2, r2, r0
 80095dc:	eb41 0303 	adc.w	r3, r1, r3
 80095e0:	f04f 0400 	mov.w	r4, #0
 80095e4:	f04f 0500 	mov.w	r5, #0
 80095e8:	00dd      	lsls	r5, r3, #3
 80095ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80095ee:	00d4      	lsls	r4, r2, #3
 80095f0:	4622      	mov	r2, r4
 80095f2:	462b      	mov	r3, r5
 80095f4:	1814      	adds	r4, r2, r0
 80095f6:	653c      	str	r4, [r7, #80]	; 0x50
 80095f8:	414b      	adcs	r3, r1
 80095fa:	657b      	str	r3, [r7, #84]	; 0x54
 80095fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	461a      	mov	r2, r3
 8009602:	f04f 0300 	mov.w	r3, #0
 8009606:	1891      	adds	r1, r2, r2
 8009608:	61b9      	str	r1, [r7, #24]
 800960a:	415b      	adcs	r3, r3
 800960c:	61fb      	str	r3, [r7, #28]
 800960e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009612:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009616:	f7f7 fb37 	bl	8000c88 <__aeabi_uldivmod>
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	4b6c      	ldr	r3, [pc, #432]	; (80097d0 <UART_SetConfig+0x38c>)
 8009620:	fba3 1302 	umull	r1, r3, r3, r2
 8009624:	095b      	lsrs	r3, r3, #5
 8009626:	2164      	movs	r1, #100	; 0x64
 8009628:	fb01 f303 	mul.w	r3, r1, r3
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	3332      	adds	r3, #50	; 0x32
 8009632:	4a67      	ldr	r2, [pc, #412]	; (80097d0 <UART_SetConfig+0x38c>)
 8009634:	fba2 2303 	umull	r2, r3, r2, r3
 8009638:	095b      	lsrs	r3, r3, #5
 800963a:	f003 0207 	and.w	r2, r3, #7
 800963e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4432      	add	r2, r6
 8009644:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009646:	e0b9      	b.n	80097bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800964a:	461c      	mov	r4, r3
 800964c:	f04f 0500 	mov.w	r5, #0
 8009650:	4622      	mov	r2, r4
 8009652:	462b      	mov	r3, r5
 8009654:	1891      	adds	r1, r2, r2
 8009656:	6139      	str	r1, [r7, #16]
 8009658:	415b      	adcs	r3, r3
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009660:	1912      	adds	r2, r2, r4
 8009662:	eb45 0303 	adc.w	r3, r5, r3
 8009666:	f04f 0000 	mov.w	r0, #0
 800966a:	f04f 0100 	mov.w	r1, #0
 800966e:	00d9      	lsls	r1, r3, #3
 8009670:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009674:	00d0      	lsls	r0, r2, #3
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	eb12 0804 	adds.w	r8, r2, r4
 800967e:	eb43 0905 	adc.w	r9, r3, r5
 8009682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	4618      	mov	r0, r3
 8009688:	f04f 0100 	mov.w	r1, #0
 800968c:	f04f 0200 	mov.w	r2, #0
 8009690:	f04f 0300 	mov.w	r3, #0
 8009694:	008b      	lsls	r3, r1, #2
 8009696:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800969a:	0082      	lsls	r2, r0, #2
 800969c:	4640      	mov	r0, r8
 800969e:	4649      	mov	r1, r9
 80096a0:	f7f7 faf2 	bl	8000c88 <__aeabi_uldivmod>
 80096a4:	4602      	mov	r2, r0
 80096a6:	460b      	mov	r3, r1
 80096a8:	4b49      	ldr	r3, [pc, #292]	; (80097d0 <UART_SetConfig+0x38c>)
 80096aa:	fba3 2302 	umull	r2, r3, r3, r2
 80096ae:	095b      	lsrs	r3, r3, #5
 80096b0:	011e      	lsls	r6, r3, #4
 80096b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096b4:	4618      	mov	r0, r3
 80096b6:	f04f 0100 	mov.w	r1, #0
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	1894      	adds	r4, r2, r2
 80096c0:	60bc      	str	r4, [r7, #8]
 80096c2:	415b      	adcs	r3, r3
 80096c4:	60fb      	str	r3, [r7, #12]
 80096c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096ca:	1812      	adds	r2, r2, r0
 80096cc:	eb41 0303 	adc.w	r3, r1, r3
 80096d0:	f04f 0400 	mov.w	r4, #0
 80096d4:	f04f 0500 	mov.w	r5, #0
 80096d8:	00dd      	lsls	r5, r3, #3
 80096da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80096de:	00d4      	lsls	r4, r2, #3
 80096e0:	4622      	mov	r2, r4
 80096e2:	462b      	mov	r3, r5
 80096e4:	1814      	adds	r4, r2, r0
 80096e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80096e8:	414b      	adcs	r3, r1
 80096ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f04f 0100 	mov.w	r1, #0
 80096f6:	f04f 0200 	mov.w	r2, #0
 80096fa:	f04f 0300 	mov.w	r3, #0
 80096fe:	008b      	lsls	r3, r1, #2
 8009700:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009704:	0082      	lsls	r2, r0, #2
 8009706:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800970a:	f7f7 fabd 	bl	8000c88 <__aeabi_uldivmod>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4b2f      	ldr	r3, [pc, #188]	; (80097d0 <UART_SetConfig+0x38c>)
 8009714:	fba3 1302 	umull	r1, r3, r3, r2
 8009718:	095b      	lsrs	r3, r3, #5
 800971a:	2164      	movs	r1, #100	; 0x64
 800971c:	fb01 f303 	mul.w	r3, r1, r3
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	3332      	adds	r3, #50	; 0x32
 8009726:	4a2a      	ldr	r2, [pc, #168]	; (80097d0 <UART_SetConfig+0x38c>)
 8009728:	fba2 2303 	umull	r2, r3, r2, r3
 800972c:	095b      	lsrs	r3, r3, #5
 800972e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009732:	441e      	add	r6, r3
 8009734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009736:	4618      	mov	r0, r3
 8009738:	f04f 0100 	mov.w	r1, #0
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	1894      	adds	r4, r2, r2
 8009742:	603c      	str	r4, [r7, #0]
 8009744:	415b      	adcs	r3, r3
 8009746:	607b      	str	r3, [r7, #4]
 8009748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800974c:	1812      	adds	r2, r2, r0
 800974e:	eb41 0303 	adc.w	r3, r1, r3
 8009752:	f04f 0400 	mov.w	r4, #0
 8009756:	f04f 0500 	mov.w	r5, #0
 800975a:	00dd      	lsls	r5, r3, #3
 800975c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009760:	00d4      	lsls	r4, r2, #3
 8009762:	4622      	mov	r2, r4
 8009764:	462b      	mov	r3, r5
 8009766:	eb12 0a00 	adds.w	sl, r2, r0
 800976a:	eb43 0b01 	adc.w	fp, r3, r1
 800976e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	4618      	mov	r0, r3
 8009774:	f04f 0100 	mov.w	r1, #0
 8009778:	f04f 0200 	mov.w	r2, #0
 800977c:	f04f 0300 	mov.w	r3, #0
 8009780:	008b      	lsls	r3, r1, #2
 8009782:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009786:	0082      	lsls	r2, r0, #2
 8009788:	4650      	mov	r0, sl
 800978a:	4659      	mov	r1, fp
 800978c:	f7f7 fa7c 	bl	8000c88 <__aeabi_uldivmod>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	4b0e      	ldr	r3, [pc, #56]	; (80097d0 <UART_SetConfig+0x38c>)
 8009796:	fba3 1302 	umull	r1, r3, r3, r2
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	2164      	movs	r1, #100	; 0x64
 800979e:	fb01 f303 	mul.w	r3, r1, r3
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	011b      	lsls	r3, r3, #4
 80097a6:	3332      	adds	r3, #50	; 0x32
 80097a8:	4a09      	ldr	r2, [pc, #36]	; (80097d0 <UART_SetConfig+0x38c>)
 80097aa:	fba2 2303 	umull	r2, r3, r2, r3
 80097ae:	095b      	lsrs	r3, r3, #5
 80097b0:	f003 020f 	and.w	r2, r3, #15
 80097b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4432      	add	r2, r6
 80097ba:	609a      	str	r2, [r3, #8]
}
 80097bc:	bf00      	nop
 80097be:	377c      	adds	r7, #124	; 0x7c
 80097c0:	46bd      	mov	sp, r7
 80097c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c6:	bf00      	nop
 80097c8:	40011000 	.word	0x40011000
 80097cc:	40011400 	.word	0x40011400
 80097d0:	51eb851f 	.word	0x51eb851f

080097d4 <__errno>:
 80097d4:	4b01      	ldr	r3, [pc, #4]	; (80097dc <__errno+0x8>)
 80097d6:	6818      	ldr	r0, [r3, #0]
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	2000000c 	.word	0x2000000c

080097e0 <__libc_init_array>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	4d0d      	ldr	r5, [pc, #52]	; (8009818 <__libc_init_array+0x38>)
 80097e4:	4c0d      	ldr	r4, [pc, #52]	; (800981c <__libc_init_array+0x3c>)
 80097e6:	1b64      	subs	r4, r4, r5
 80097e8:	10a4      	asrs	r4, r4, #2
 80097ea:	2600      	movs	r6, #0
 80097ec:	42a6      	cmp	r6, r4
 80097ee:	d109      	bne.n	8009804 <__libc_init_array+0x24>
 80097f0:	4d0b      	ldr	r5, [pc, #44]	; (8009820 <__libc_init_array+0x40>)
 80097f2:	4c0c      	ldr	r4, [pc, #48]	; (8009824 <__libc_init_array+0x44>)
 80097f4:	f004 fcd2 	bl	800e19c <_init>
 80097f8:	1b64      	subs	r4, r4, r5
 80097fa:	10a4      	asrs	r4, r4, #2
 80097fc:	2600      	movs	r6, #0
 80097fe:	42a6      	cmp	r6, r4
 8009800:	d105      	bne.n	800980e <__libc_init_array+0x2e>
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	f855 3b04 	ldr.w	r3, [r5], #4
 8009808:	4798      	blx	r3
 800980a:	3601      	adds	r6, #1
 800980c:	e7ee      	b.n	80097ec <__libc_init_array+0xc>
 800980e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009812:	4798      	blx	r3
 8009814:	3601      	adds	r6, #1
 8009816:	e7f2      	b.n	80097fe <__libc_init_array+0x1e>
 8009818:	0800ece4 	.word	0x0800ece4
 800981c:	0800ece4 	.word	0x0800ece4
 8009820:	0800ece4 	.word	0x0800ece4
 8009824:	0800ece8 	.word	0x0800ece8

08009828 <memcpy>:
 8009828:	440a      	add	r2, r1
 800982a:	4291      	cmp	r1, r2
 800982c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009830:	d100      	bne.n	8009834 <memcpy+0xc>
 8009832:	4770      	bx	lr
 8009834:	b510      	push	{r4, lr}
 8009836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800983a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800983e:	4291      	cmp	r1, r2
 8009840:	d1f9      	bne.n	8009836 <memcpy+0xe>
 8009842:	bd10      	pop	{r4, pc}

08009844 <memset>:
 8009844:	4402      	add	r2, r0
 8009846:	4603      	mov	r3, r0
 8009848:	4293      	cmp	r3, r2
 800984a:	d100      	bne.n	800984e <memset+0xa>
 800984c:	4770      	bx	lr
 800984e:	f803 1b01 	strb.w	r1, [r3], #1
 8009852:	e7f9      	b.n	8009848 <memset+0x4>

08009854 <__cvt>:
 8009854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009858:	ec55 4b10 	vmov	r4, r5, d0
 800985c:	2d00      	cmp	r5, #0
 800985e:	460e      	mov	r6, r1
 8009860:	4619      	mov	r1, r3
 8009862:	462b      	mov	r3, r5
 8009864:	bfbb      	ittet	lt
 8009866:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800986a:	461d      	movlt	r5, r3
 800986c:	2300      	movge	r3, #0
 800986e:	232d      	movlt	r3, #45	; 0x2d
 8009870:	700b      	strb	r3, [r1, #0]
 8009872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009874:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009878:	4691      	mov	r9, r2
 800987a:	f023 0820 	bic.w	r8, r3, #32
 800987e:	bfbc      	itt	lt
 8009880:	4622      	movlt	r2, r4
 8009882:	4614      	movlt	r4, r2
 8009884:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009888:	d005      	beq.n	8009896 <__cvt+0x42>
 800988a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800988e:	d100      	bne.n	8009892 <__cvt+0x3e>
 8009890:	3601      	adds	r6, #1
 8009892:	2102      	movs	r1, #2
 8009894:	e000      	b.n	8009898 <__cvt+0x44>
 8009896:	2103      	movs	r1, #3
 8009898:	ab03      	add	r3, sp, #12
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	ab02      	add	r3, sp, #8
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	ec45 4b10 	vmov	d0, r4, r5
 80098a4:	4653      	mov	r3, sl
 80098a6:	4632      	mov	r2, r6
 80098a8:	f001 ff02 	bl	800b6b0 <_dtoa_r>
 80098ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80098b0:	4607      	mov	r7, r0
 80098b2:	d102      	bne.n	80098ba <__cvt+0x66>
 80098b4:	f019 0f01 	tst.w	r9, #1
 80098b8:	d022      	beq.n	8009900 <__cvt+0xac>
 80098ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098be:	eb07 0906 	add.w	r9, r7, r6
 80098c2:	d110      	bne.n	80098e6 <__cvt+0x92>
 80098c4:	783b      	ldrb	r3, [r7, #0]
 80098c6:	2b30      	cmp	r3, #48	; 0x30
 80098c8:	d10a      	bne.n	80098e0 <__cvt+0x8c>
 80098ca:	2200      	movs	r2, #0
 80098cc:	2300      	movs	r3, #0
 80098ce:	4620      	mov	r0, r4
 80098d0:	4629      	mov	r1, r5
 80098d2:	f7f7 f8f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80098d6:	b918      	cbnz	r0, 80098e0 <__cvt+0x8c>
 80098d8:	f1c6 0601 	rsb	r6, r6, #1
 80098dc:	f8ca 6000 	str.w	r6, [sl]
 80098e0:	f8da 3000 	ldr.w	r3, [sl]
 80098e4:	4499      	add	r9, r3
 80098e6:	2200      	movs	r2, #0
 80098e8:	2300      	movs	r3, #0
 80098ea:	4620      	mov	r0, r4
 80098ec:	4629      	mov	r1, r5
 80098ee:	f7f7 f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80098f2:	b108      	cbz	r0, 80098f8 <__cvt+0xa4>
 80098f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80098f8:	2230      	movs	r2, #48	; 0x30
 80098fa:	9b03      	ldr	r3, [sp, #12]
 80098fc:	454b      	cmp	r3, r9
 80098fe:	d307      	bcc.n	8009910 <__cvt+0xbc>
 8009900:	9b03      	ldr	r3, [sp, #12]
 8009902:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009904:	1bdb      	subs	r3, r3, r7
 8009906:	4638      	mov	r0, r7
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	b004      	add	sp, #16
 800990c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009910:	1c59      	adds	r1, r3, #1
 8009912:	9103      	str	r1, [sp, #12]
 8009914:	701a      	strb	r2, [r3, #0]
 8009916:	e7f0      	b.n	80098fa <__cvt+0xa6>

08009918 <__exponent>:
 8009918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800991a:	4603      	mov	r3, r0
 800991c:	2900      	cmp	r1, #0
 800991e:	bfb8      	it	lt
 8009920:	4249      	neglt	r1, r1
 8009922:	f803 2b02 	strb.w	r2, [r3], #2
 8009926:	bfb4      	ite	lt
 8009928:	222d      	movlt	r2, #45	; 0x2d
 800992a:	222b      	movge	r2, #43	; 0x2b
 800992c:	2909      	cmp	r1, #9
 800992e:	7042      	strb	r2, [r0, #1]
 8009930:	dd2a      	ble.n	8009988 <__exponent+0x70>
 8009932:	f10d 0407 	add.w	r4, sp, #7
 8009936:	46a4      	mov	ip, r4
 8009938:	270a      	movs	r7, #10
 800993a:	46a6      	mov	lr, r4
 800993c:	460a      	mov	r2, r1
 800993e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009942:	fb07 1516 	mls	r5, r7, r6, r1
 8009946:	3530      	adds	r5, #48	; 0x30
 8009948:	2a63      	cmp	r2, #99	; 0x63
 800994a:	f104 34ff 	add.w	r4, r4, #4294967295
 800994e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009952:	4631      	mov	r1, r6
 8009954:	dcf1      	bgt.n	800993a <__exponent+0x22>
 8009956:	3130      	adds	r1, #48	; 0x30
 8009958:	f1ae 0502 	sub.w	r5, lr, #2
 800995c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009960:	1c44      	adds	r4, r0, #1
 8009962:	4629      	mov	r1, r5
 8009964:	4561      	cmp	r1, ip
 8009966:	d30a      	bcc.n	800997e <__exponent+0x66>
 8009968:	f10d 0209 	add.w	r2, sp, #9
 800996c:	eba2 020e 	sub.w	r2, r2, lr
 8009970:	4565      	cmp	r5, ip
 8009972:	bf88      	it	hi
 8009974:	2200      	movhi	r2, #0
 8009976:	4413      	add	r3, r2
 8009978:	1a18      	subs	r0, r3, r0
 800997a:	b003      	add	sp, #12
 800997c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800997e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009982:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009986:	e7ed      	b.n	8009964 <__exponent+0x4c>
 8009988:	2330      	movs	r3, #48	; 0x30
 800998a:	3130      	adds	r1, #48	; 0x30
 800998c:	7083      	strb	r3, [r0, #2]
 800998e:	70c1      	strb	r1, [r0, #3]
 8009990:	1d03      	adds	r3, r0, #4
 8009992:	e7f1      	b.n	8009978 <__exponent+0x60>

08009994 <_printf_float>:
 8009994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009998:	ed2d 8b02 	vpush	{d8}
 800999c:	b08d      	sub	sp, #52	; 0x34
 800999e:	460c      	mov	r4, r1
 80099a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80099a4:	4616      	mov	r6, r2
 80099a6:	461f      	mov	r7, r3
 80099a8:	4605      	mov	r5, r0
 80099aa:	f003 f993 	bl	800ccd4 <_localeconv_r>
 80099ae:	f8d0 a000 	ldr.w	sl, [r0]
 80099b2:	4650      	mov	r0, sl
 80099b4:	f7f6 fc0c 	bl	80001d0 <strlen>
 80099b8:	2300      	movs	r3, #0
 80099ba:	930a      	str	r3, [sp, #40]	; 0x28
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	9305      	str	r3, [sp, #20]
 80099c0:	f8d8 3000 	ldr.w	r3, [r8]
 80099c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80099c8:	3307      	adds	r3, #7
 80099ca:	f023 0307 	bic.w	r3, r3, #7
 80099ce:	f103 0208 	add.w	r2, r3, #8
 80099d2:	f8c8 2000 	str.w	r2, [r8]
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80099de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80099e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099e6:	9307      	str	r3, [sp, #28]
 80099e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80099ec:	ee08 0a10 	vmov	s16, r0
 80099f0:	4b9f      	ldr	r3, [pc, #636]	; (8009c70 <_printf_float+0x2dc>)
 80099f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099f6:	f04f 32ff 	mov.w	r2, #4294967295
 80099fa:	f7f7 f897 	bl	8000b2c <__aeabi_dcmpun>
 80099fe:	bb88      	cbnz	r0, 8009a64 <_printf_float+0xd0>
 8009a00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a04:	4b9a      	ldr	r3, [pc, #616]	; (8009c70 <_printf_float+0x2dc>)
 8009a06:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0a:	f7f7 f871 	bl	8000af0 <__aeabi_dcmple>
 8009a0e:	bb48      	cbnz	r0, 8009a64 <_printf_float+0xd0>
 8009a10:	2200      	movs	r2, #0
 8009a12:	2300      	movs	r3, #0
 8009a14:	4640      	mov	r0, r8
 8009a16:	4649      	mov	r1, r9
 8009a18:	f7f7 f860 	bl	8000adc <__aeabi_dcmplt>
 8009a1c:	b110      	cbz	r0, 8009a24 <_printf_float+0x90>
 8009a1e:	232d      	movs	r3, #45	; 0x2d
 8009a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a24:	4b93      	ldr	r3, [pc, #588]	; (8009c74 <_printf_float+0x2e0>)
 8009a26:	4894      	ldr	r0, [pc, #592]	; (8009c78 <_printf_float+0x2e4>)
 8009a28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a2c:	bf94      	ite	ls
 8009a2e:	4698      	movls	r8, r3
 8009a30:	4680      	movhi	r8, r0
 8009a32:	2303      	movs	r3, #3
 8009a34:	6123      	str	r3, [r4, #16]
 8009a36:	9b05      	ldr	r3, [sp, #20]
 8009a38:	f023 0204 	bic.w	r2, r3, #4
 8009a3c:	6022      	str	r2, [r4, #0]
 8009a3e:	f04f 0900 	mov.w	r9, #0
 8009a42:	9700      	str	r7, [sp, #0]
 8009a44:	4633      	mov	r3, r6
 8009a46:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a48:	4621      	mov	r1, r4
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f000 f9d8 	bl	8009e00 <_printf_common>
 8009a50:	3001      	adds	r0, #1
 8009a52:	f040 8090 	bne.w	8009b76 <_printf_float+0x1e2>
 8009a56:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5a:	b00d      	add	sp, #52	; 0x34
 8009a5c:	ecbd 8b02 	vpop	{d8}
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	4642      	mov	r2, r8
 8009a66:	464b      	mov	r3, r9
 8009a68:	4640      	mov	r0, r8
 8009a6a:	4649      	mov	r1, r9
 8009a6c:	f7f7 f85e 	bl	8000b2c <__aeabi_dcmpun>
 8009a70:	b140      	cbz	r0, 8009a84 <_printf_float+0xf0>
 8009a72:	464b      	mov	r3, r9
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	bfbc      	itt	lt
 8009a78:	232d      	movlt	r3, #45	; 0x2d
 8009a7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a7e:	487f      	ldr	r0, [pc, #508]	; (8009c7c <_printf_float+0x2e8>)
 8009a80:	4b7f      	ldr	r3, [pc, #508]	; (8009c80 <_printf_float+0x2ec>)
 8009a82:	e7d1      	b.n	8009a28 <_printf_float+0x94>
 8009a84:	6863      	ldr	r3, [r4, #4]
 8009a86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a8a:	9206      	str	r2, [sp, #24]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	d13f      	bne.n	8009b10 <_printf_float+0x17c>
 8009a90:	2306      	movs	r3, #6
 8009a92:	6063      	str	r3, [r4, #4]
 8009a94:	9b05      	ldr	r3, [sp, #20]
 8009a96:	6861      	ldr	r1, [r4, #4]
 8009a98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9303      	str	r3, [sp, #12]
 8009aa0:	ab0a      	add	r3, sp, #40	; 0x28
 8009aa2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009aa6:	ab09      	add	r3, sp, #36	; 0x24
 8009aa8:	ec49 8b10 	vmov	d0, r8, r9
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	6022      	str	r2, [r4, #0]
 8009ab0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ab4:	4628      	mov	r0, r5
 8009ab6:	f7ff fecd 	bl	8009854 <__cvt>
 8009aba:	9b06      	ldr	r3, [sp, #24]
 8009abc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009abe:	2b47      	cmp	r3, #71	; 0x47
 8009ac0:	4680      	mov	r8, r0
 8009ac2:	d108      	bne.n	8009ad6 <_printf_float+0x142>
 8009ac4:	1cc8      	adds	r0, r1, #3
 8009ac6:	db02      	blt.n	8009ace <_printf_float+0x13a>
 8009ac8:	6863      	ldr	r3, [r4, #4]
 8009aca:	4299      	cmp	r1, r3
 8009acc:	dd41      	ble.n	8009b52 <_printf_float+0x1be>
 8009ace:	f1ab 0b02 	sub.w	fp, fp, #2
 8009ad2:	fa5f fb8b 	uxtb.w	fp, fp
 8009ad6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ada:	d820      	bhi.n	8009b1e <_printf_float+0x18a>
 8009adc:	3901      	subs	r1, #1
 8009ade:	465a      	mov	r2, fp
 8009ae0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ae4:	9109      	str	r1, [sp, #36]	; 0x24
 8009ae6:	f7ff ff17 	bl	8009918 <__exponent>
 8009aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009aec:	1813      	adds	r3, r2, r0
 8009aee:	2a01      	cmp	r2, #1
 8009af0:	4681      	mov	r9, r0
 8009af2:	6123      	str	r3, [r4, #16]
 8009af4:	dc02      	bgt.n	8009afc <_printf_float+0x168>
 8009af6:	6822      	ldr	r2, [r4, #0]
 8009af8:	07d2      	lsls	r2, r2, #31
 8009afa:	d501      	bpl.n	8009b00 <_printf_float+0x16c>
 8009afc:	3301      	adds	r3, #1
 8009afe:	6123      	str	r3, [r4, #16]
 8009b00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d09c      	beq.n	8009a42 <_printf_float+0xae>
 8009b08:	232d      	movs	r3, #45	; 0x2d
 8009b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b0e:	e798      	b.n	8009a42 <_printf_float+0xae>
 8009b10:	9a06      	ldr	r2, [sp, #24]
 8009b12:	2a47      	cmp	r2, #71	; 0x47
 8009b14:	d1be      	bne.n	8009a94 <_printf_float+0x100>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1bc      	bne.n	8009a94 <_printf_float+0x100>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e7b9      	b.n	8009a92 <_printf_float+0xfe>
 8009b1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b22:	d118      	bne.n	8009b56 <_printf_float+0x1c2>
 8009b24:	2900      	cmp	r1, #0
 8009b26:	6863      	ldr	r3, [r4, #4]
 8009b28:	dd0b      	ble.n	8009b42 <_printf_float+0x1ae>
 8009b2a:	6121      	str	r1, [r4, #16]
 8009b2c:	b913      	cbnz	r3, 8009b34 <_printf_float+0x1a0>
 8009b2e:	6822      	ldr	r2, [r4, #0]
 8009b30:	07d0      	lsls	r0, r2, #31
 8009b32:	d502      	bpl.n	8009b3a <_printf_float+0x1a6>
 8009b34:	3301      	adds	r3, #1
 8009b36:	440b      	add	r3, r1
 8009b38:	6123      	str	r3, [r4, #16]
 8009b3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b3c:	f04f 0900 	mov.w	r9, #0
 8009b40:	e7de      	b.n	8009b00 <_printf_float+0x16c>
 8009b42:	b913      	cbnz	r3, 8009b4a <_printf_float+0x1b6>
 8009b44:	6822      	ldr	r2, [r4, #0]
 8009b46:	07d2      	lsls	r2, r2, #31
 8009b48:	d501      	bpl.n	8009b4e <_printf_float+0x1ba>
 8009b4a:	3302      	adds	r3, #2
 8009b4c:	e7f4      	b.n	8009b38 <_printf_float+0x1a4>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e7f2      	b.n	8009b38 <_printf_float+0x1a4>
 8009b52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b58:	4299      	cmp	r1, r3
 8009b5a:	db05      	blt.n	8009b68 <_printf_float+0x1d4>
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	6121      	str	r1, [r4, #16]
 8009b60:	07d8      	lsls	r0, r3, #31
 8009b62:	d5ea      	bpl.n	8009b3a <_printf_float+0x1a6>
 8009b64:	1c4b      	adds	r3, r1, #1
 8009b66:	e7e7      	b.n	8009b38 <_printf_float+0x1a4>
 8009b68:	2900      	cmp	r1, #0
 8009b6a:	bfd4      	ite	le
 8009b6c:	f1c1 0202 	rsble	r2, r1, #2
 8009b70:	2201      	movgt	r2, #1
 8009b72:	4413      	add	r3, r2
 8009b74:	e7e0      	b.n	8009b38 <_printf_float+0x1a4>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	055a      	lsls	r2, r3, #21
 8009b7a:	d407      	bmi.n	8009b8c <_printf_float+0x1f8>
 8009b7c:	6923      	ldr	r3, [r4, #16]
 8009b7e:	4642      	mov	r2, r8
 8009b80:	4631      	mov	r1, r6
 8009b82:	4628      	mov	r0, r5
 8009b84:	47b8      	blx	r7
 8009b86:	3001      	adds	r0, #1
 8009b88:	d12c      	bne.n	8009be4 <_printf_float+0x250>
 8009b8a:	e764      	b.n	8009a56 <_printf_float+0xc2>
 8009b8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b90:	f240 80e0 	bls.w	8009d54 <_printf_float+0x3c0>
 8009b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	f7f6 ff94 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d034      	beq.n	8009c0e <_printf_float+0x27a>
 8009ba4:	4a37      	ldr	r2, [pc, #220]	; (8009c84 <_printf_float+0x2f0>)
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	4631      	mov	r1, r6
 8009baa:	4628      	mov	r0, r5
 8009bac:	47b8      	blx	r7
 8009bae:	3001      	adds	r0, #1
 8009bb0:	f43f af51 	beq.w	8009a56 <_printf_float+0xc2>
 8009bb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	db02      	blt.n	8009bc2 <_printf_float+0x22e>
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	07d8      	lsls	r0, r3, #31
 8009bc0:	d510      	bpl.n	8009be4 <_printf_float+0x250>
 8009bc2:	ee18 3a10 	vmov	r3, s16
 8009bc6:	4652      	mov	r2, sl
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f43f af41 	beq.w	8009a56 <_printf_float+0xc2>
 8009bd4:	f04f 0800 	mov.w	r8, #0
 8009bd8:	f104 091a 	add.w	r9, r4, #26
 8009bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bde:	3b01      	subs	r3, #1
 8009be0:	4543      	cmp	r3, r8
 8009be2:	dc09      	bgt.n	8009bf8 <_printf_float+0x264>
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	079b      	lsls	r3, r3, #30
 8009be8:	f100 8105 	bmi.w	8009df6 <_printf_float+0x462>
 8009bec:	68e0      	ldr	r0, [r4, #12]
 8009bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bf0:	4298      	cmp	r0, r3
 8009bf2:	bfb8      	it	lt
 8009bf4:	4618      	movlt	r0, r3
 8009bf6:	e730      	b.n	8009a5a <_printf_float+0xc6>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	464a      	mov	r2, r9
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b8      	blx	r7
 8009c02:	3001      	adds	r0, #1
 8009c04:	f43f af27 	beq.w	8009a56 <_printf_float+0xc2>
 8009c08:	f108 0801 	add.w	r8, r8, #1
 8009c0c:	e7e6      	b.n	8009bdc <_printf_float+0x248>
 8009c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	dc39      	bgt.n	8009c88 <_printf_float+0x2f4>
 8009c14:	4a1b      	ldr	r2, [pc, #108]	; (8009c84 <_printf_float+0x2f0>)
 8009c16:	2301      	movs	r3, #1
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	47b8      	blx	r7
 8009c1e:	3001      	adds	r0, #1
 8009c20:	f43f af19 	beq.w	8009a56 <_printf_float+0xc2>
 8009c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	d102      	bne.n	8009c32 <_printf_float+0x29e>
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	07d9      	lsls	r1, r3, #31
 8009c30:	d5d8      	bpl.n	8009be4 <_printf_float+0x250>
 8009c32:	ee18 3a10 	vmov	r3, s16
 8009c36:	4652      	mov	r2, sl
 8009c38:	4631      	mov	r1, r6
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	47b8      	blx	r7
 8009c3e:	3001      	adds	r0, #1
 8009c40:	f43f af09 	beq.w	8009a56 <_printf_float+0xc2>
 8009c44:	f04f 0900 	mov.w	r9, #0
 8009c48:	f104 0a1a 	add.w	sl, r4, #26
 8009c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c4e:	425b      	negs	r3, r3
 8009c50:	454b      	cmp	r3, r9
 8009c52:	dc01      	bgt.n	8009c58 <_printf_float+0x2c4>
 8009c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c56:	e792      	b.n	8009b7e <_printf_float+0x1ea>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4652      	mov	r2, sl
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b8      	blx	r7
 8009c62:	3001      	adds	r0, #1
 8009c64:	f43f aef7 	beq.w	8009a56 <_printf_float+0xc2>
 8009c68:	f109 0901 	add.w	r9, r9, #1
 8009c6c:	e7ee      	b.n	8009c4c <_printf_float+0x2b8>
 8009c6e:	bf00      	nop
 8009c70:	7fefffff 	.word	0x7fefffff
 8009c74:	0800e828 	.word	0x0800e828
 8009c78:	0800e82c 	.word	0x0800e82c
 8009c7c:	0800e834 	.word	0x0800e834
 8009c80:	0800e830 	.word	0x0800e830
 8009c84:	0800e838 	.word	0x0800e838
 8009c88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	bfa8      	it	ge
 8009c90:	461a      	movge	r2, r3
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	4691      	mov	r9, r2
 8009c96:	dc37      	bgt.n	8009d08 <_printf_float+0x374>
 8009c98:	f04f 0b00 	mov.w	fp, #0
 8009c9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ca0:	f104 021a 	add.w	r2, r4, #26
 8009ca4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ca6:	9305      	str	r3, [sp, #20]
 8009ca8:	eba3 0309 	sub.w	r3, r3, r9
 8009cac:	455b      	cmp	r3, fp
 8009cae:	dc33      	bgt.n	8009d18 <_printf_float+0x384>
 8009cb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	db3b      	blt.n	8009d30 <_printf_float+0x39c>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	07da      	lsls	r2, r3, #31
 8009cbc:	d438      	bmi.n	8009d30 <_printf_float+0x39c>
 8009cbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cc0:	9b05      	ldr	r3, [sp, #20]
 8009cc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	eba2 0901 	sub.w	r9, r2, r1
 8009cca:	4599      	cmp	r9, r3
 8009ccc:	bfa8      	it	ge
 8009cce:	4699      	movge	r9, r3
 8009cd0:	f1b9 0f00 	cmp.w	r9, #0
 8009cd4:	dc35      	bgt.n	8009d42 <_printf_float+0x3ae>
 8009cd6:	f04f 0800 	mov.w	r8, #0
 8009cda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cde:	f104 0a1a 	add.w	sl, r4, #26
 8009ce2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ce6:	1a9b      	subs	r3, r3, r2
 8009ce8:	eba3 0309 	sub.w	r3, r3, r9
 8009cec:	4543      	cmp	r3, r8
 8009cee:	f77f af79 	ble.w	8009be4 <_printf_float+0x250>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	4652      	mov	r2, sl
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	4628      	mov	r0, r5
 8009cfa:	47b8      	blx	r7
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	f43f aeaa 	beq.w	8009a56 <_printf_float+0xc2>
 8009d02:	f108 0801 	add.w	r8, r8, #1
 8009d06:	e7ec      	b.n	8009ce2 <_printf_float+0x34e>
 8009d08:	4613      	mov	r3, r2
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	d1c0      	bne.n	8009c98 <_printf_float+0x304>
 8009d16:	e69e      	b.n	8009a56 <_printf_float+0xc2>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	9205      	str	r2, [sp, #20]
 8009d20:	47b8      	blx	r7
 8009d22:	3001      	adds	r0, #1
 8009d24:	f43f ae97 	beq.w	8009a56 <_printf_float+0xc2>
 8009d28:	9a05      	ldr	r2, [sp, #20]
 8009d2a:	f10b 0b01 	add.w	fp, fp, #1
 8009d2e:	e7b9      	b.n	8009ca4 <_printf_float+0x310>
 8009d30:	ee18 3a10 	vmov	r3, s16
 8009d34:	4652      	mov	r2, sl
 8009d36:	4631      	mov	r1, r6
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d1be      	bne.n	8009cbe <_printf_float+0x32a>
 8009d40:	e689      	b.n	8009a56 <_printf_float+0xc2>
 8009d42:	9a05      	ldr	r2, [sp, #20]
 8009d44:	464b      	mov	r3, r9
 8009d46:	4442      	add	r2, r8
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	d1c1      	bne.n	8009cd6 <_printf_float+0x342>
 8009d52:	e680      	b.n	8009a56 <_printf_float+0xc2>
 8009d54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d56:	2a01      	cmp	r2, #1
 8009d58:	dc01      	bgt.n	8009d5e <_printf_float+0x3ca>
 8009d5a:	07db      	lsls	r3, r3, #31
 8009d5c:	d538      	bpl.n	8009dd0 <_printf_float+0x43c>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	4642      	mov	r2, r8
 8009d62:	4631      	mov	r1, r6
 8009d64:	4628      	mov	r0, r5
 8009d66:	47b8      	blx	r7
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f43f ae74 	beq.w	8009a56 <_printf_float+0xc2>
 8009d6e:	ee18 3a10 	vmov	r3, s16
 8009d72:	4652      	mov	r2, sl
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b8      	blx	r7
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	f43f ae6b 	beq.w	8009a56 <_printf_float+0xc2>
 8009d80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d84:	2200      	movs	r2, #0
 8009d86:	2300      	movs	r3, #0
 8009d88:	f7f6 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d8c:	b9d8      	cbnz	r0, 8009dc6 <_printf_float+0x432>
 8009d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d90:	f108 0201 	add.w	r2, r8, #1
 8009d94:	3b01      	subs	r3, #1
 8009d96:	4631      	mov	r1, r6
 8009d98:	4628      	mov	r0, r5
 8009d9a:	47b8      	blx	r7
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d10e      	bne.n	8009dbe <_printf_float+0x42a>
 8009da0:	e659      	b.n	8009a56 <_printf_float+0xc2>
 8009da2:	2301      	movs	r3, #1
 8009da4:	4652      	mov	r2, sl
 8009da6:	4631      	mov	r1, r6
 8009da8:	4628      	mov	r0, r5
 8009daa:	47b8      	blx	r7
 8009dac:	3001      	adds	r0, #1
 8009dae:	f43f ae52 	beq.w	8009a56 <_printf_float+0xc2>
 8009db2:	f108 0801 	add.w	r8, r8, #1
 8009db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db8:	3b01      	subs	r3, #1
 8009dba:	4543      	cmp	r3, r8
 8009dbc:	dcf1      	bgt.n	8009da2 <_printf_float+0x40e>
 8009dbe:	464b      	mov	r3, r9
 8009dc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009dc4:	e6dc      	b.n	8009b80 <_printf_float+0x1ec>
 8009dc6:	f04f 0800 	mov.w	r8, #0
 8009dca:	f104 0a1a 	add.w	sl, r4, #26
 8009dce:	e7f2      	b.n	8009db6 <_printf_float+0x422>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	4642      	mov	r2, r8
 8009dd4:	e7df      	b.n	8009d96 <_printf_float+0x402>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	464a      	mov	r2, r9
 8009dda:	4631      	mov	r1, r6
 8009ddc:	4628      	mov	r0, r5
 8009dde:	47b8      	blx	r7
 8009de0:	3001      	adds	r0, #1
 8009de2:	f43f ae38 	beq.w	8009a56 <_printf_float+0xc2>
 8009de6:	f108 0801 	add.w	r8, r8, #1
 8009dea:	68e3      	ldr	r3, [r4, #12]
 8009dec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dee:	1a5b      	subs	r3, r3, r1
 8009df0:	4543      	cmp	r3, r8
 8009df2:	dcf0      	bgt.n	8009dd6 <_printf_float+0x442>
 8009df4:	e6fa      	b.n	8009bec <_printf_float+0x258>
 8009df6:	f04f 0800 	mov.w	r8, #0
 8009dfa:	f104 0919 	add.w	r9, r4, #25
 8009dfe:	e7f4      	b.n	8009dea <_printf_float+0x456>

08009e00 <_printf_common>:
 8009e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	4616      	mov	r6, r2
 8009e06:	4699      	mov	r9, r3
 8009e08:	688a      	ldr	r2, [r1, #8]
 8009e0a:	690b      	ldr	r3, [r1, #16]
 8009e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e10:	4293      	cmp	r3, r2
 8009e12:	bfb8      	it	lt
 8009e14:	4613      	movlt	r3, r2
 8009e16:	6033      	str	r3, [r6, #0]
 8009e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	b10a      	cbz	r2, 8009e26 <_printf_common+0x26>
 8009e22:	3301      	adds	r3, #1
 8009e24:	6033      	str	r3, [r6, #0]
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	0699      	lsls	r1, r3, #26
 8009e2a:	bf42      	ittt	mi
 8009e2c:	6833      	ldrmi	r3, [r6, #0]
 8009e2e:	3302      	addmi	r3, #2
 8009e30:	6033      	strmi	r3, [r6, #0]
 8009e32:	6825      	ldr	r5, [r4, #0]
 8009e34:	f015 0506 	ands.w	r5, r5, #6
 8009e38:	d106      	bne.n	8009e48 <_printf_common+0x48>
 8009e3a:	f104 0a19 	add.w	sl, r4, #25
 8009e3e:	68e3      	ldr	r3, [r4, #12]
 8009e40:	6832      	ldr	r2, [r6, #0]
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	42ab      	cmp	r3, r5
 8009e46:	dc26      	bgt.n	8009e96 <_printf_common+0x96>
 8009e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e4c:	1e13      	subs	r3, r2, #0
 8009e4e:	6822      	ldr	r2, [r4, #0]
 8009e50:	bf18      	it	ne
 8009e52:	2301      	movne	r3, #1
 8009e54:	0692      	lsls	r2, r2, #26
 8009e56:	d42b      	bmi.n	8009eb0 <_printf_common+0xb0>
 8009e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e5c:	4649      	mov	r1, r9
 8009e5e:	4638      	mov	r0, r7
 8009e60:	47c0      	blx	r8
 8009e62:	3001      	adds	r0, #1
 8009e64:	d01e      	beq.n	8009ea4 <_printf_common+0xa4>
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	68e5      	ldr	r5, [r4, #12]
 8009e6a:	6832      	ldr	r2, [r6, #0]
 8009e6c:	f003 0306 	and.w	r3, r3, #6
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	bf08      	it	eq
 8009e74:	1aad      	subeq	r5, r5, r2
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	6922      	ldr	r2, [r4, #16]
 8009e7a:	bf0c      	ite	eq
 8009e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e80:	2500      	movne	r5, #0
 8009e82:	4293      	cmp	r3, r2
 8009e84:	bfc4      	itt	gt
 8009e86:	1a9b      	subgt	r3, r3, r2
 8009e88:	18ed      	addgt	r5, r5, r3
 8009e8a:	2600      	movs	r6, #0
 8009e8c:	341a      	adds	r4, #26
 8009e8e:	42b5      	cmp	r5, r6
 8009e90:	d11a      	bne.n	8009ec8 <_printf_common+0xc8>
 8009e92:	2000      	movs	r0, #0
 8009e94:	e008      	b.n	8009ea8 <_printf_common+0xa8>
 8009e96:	2301      	movs	r3, #1
 8009e98:	4652      	mov	r2, sl
 8009e9a:	4649      	mov	r1, r9
 8009e9c:	4638      	mov	r0, r7
 8009e9e:	47c0      	blx	r8
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d103      	bne.n	8009eac <_printf_common+0xac>
 8009ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eac:	3501      	adds	r5, #1
 8009eae:	e7c6      	b.n	8009e3e <_printf_common+0x3e>
 8009eb0:	18e1      	adds	r1, r4, r3
 8009eb2:	1c5a      	adds	r2, r3, #1
 8009eb4:	2030      	movs	r0, #48	; 0x30
 8009eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009eba:	4422      	add	r2, r4
 8009ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ec4:	3302      	adds	r3, #2
 8009ec6:	e7c7      	b.n	8009e58 <_printf_common+0x58>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	4622      	mov	r2, r4
 8009ecc:	4649      	mov	r1, r9
 8009ece:	4638      	mov	r0, r7
 8009ed0:	47c0      	blx	r8
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	d0e6      	beq.n	8009ea4 <_printf_common+0xa4>
 8009ed6:	3601      	adds	r6, #1
 8009ed8:	e7d9      	b.n	8009e8e <_printf_common+0x8e>
	...

08009edc <_printf_i>:
 8009edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	4691      	mov	r9, r2
 8009ee4:	7e27      	ldrb	r7, [r4, #24]
 8009ee6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ee8:	2f78      	cmp	r7, #120	; 0x78
 8009eea:	4680      	mov	r8, r0
 8009eec:	469a      	mov	sl, r3
 8009eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef2:	d807      	bhi.n	8009f04 <_printf_i+0x28>
 8009ef4:	2f62      	cmp	r7, #98	; 0x62
 8009ef6:	d80a      	bhi.n	8009f0e <_printf_i+0x32>
 8009ef8:	2f00      	cmp	r7, #0
 8009efa:	f000 80d8 	beq.w	800a0ae <_printf_i+0x1d2>
 8009efe:	2f58      	cmp	r7, #88	; 0x58
 8009f00:	f000 80a3 	beq.w	800a04a <_printf_i+0x16e>
 8009f04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f0c:	e03a      	b.n	8009f84 <_printf_i+0xa8>
 8009f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f12:	2b15      	cmp	r3, #21
 8009f14:	d8f6      	bhi.n	8009f04 <_printf_i+0x28>
 8009f16:	a001      	add	r0, pc, #4	; (adr r0, 8009f1c <_printf_i+0x40>)
 8009f18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009f1c:	08009f75 	.word	0x08009f75
 8009f20:	08009f89 	.word	0x08009f89
 8009f24:	08009f05 	.word	0x08009f05
 8009f28:	08009f05 	.word	0x08009f05
 8009f2c:	08009f05 	.word	0x08009f05
 8009f30:	08009f05 	.word	0x08009f05
 8009f34:	08009f89 	.word	0x08009f89
 8009f38:	08009f05 	.word	0x08009f05
 8009f3c:	08009f05 	.word	0x08009f05
 8009f40:	08009f05 	.word	0x08009f05
 8009f44:	08009f05 	.word	0x08009f05
 8009f48:	0800a095 	.word	0x0800a095
 8009f4c:	08009fb9 	.word	0x08009fb9
 8009f50:	0800a077 	.word	0x0800a077
 8009f54:	08009f05 	.word	0x08009f05
 8009f58:	08009f05 	.word	0x08009f05
 8009f5c:	0800a0b7 	.word	0x0800a0b7
 8009f60:	08009f05 	.word	0x08009f05
 8009f64:	08009fb9 	.word	0x08009fb9
 8009f68:	08009f05 	.word	0x08009f05
 8009f6c:	08009f05 	.word	0x08009f05
 8009f70:	0800a07f 	.word	0x0800a07f
 8009f74:	680b      	ldr	r3, [r1, #0]
 8009f76:	1d1a      	adds	r2, r3, #4
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	600a      	str	r2, [r1, #0]
 8009f7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f84:	2301      	movs	r3, #1
 8009f86:	e0a3      	b.n	800a0d0 <_printf_i+0x1f4>
 8009f88:	6825      	ldr	r5, [r4, #0]
 8009f8a:	6808      	ldr	r0, [r1, #0]
 8009f8c:	062e      	lsls	r6, r5, #24
 8009f8e:	f100 0304 	add.w	r3, r0, #4
 8009f92:	d50a      	bpl.n	8009faa <_printf_i+0xce>
 8009f94:	6805      	ldr	r5, [r0, #0]
 8009f96:	600b      	str	r3, [r1, #0]
 8009f98:	2d00      	cmp	r5, #0
 8009f9a:	da03      	bge.n	8009fa4 <_printf_i+0xc8>
 8009f9c:	232d      	movs	r3, #45	; 0x2d
 8009f9e:	426d      	negs	r5, r5
 8009fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fa4:	485e      	ldr	r0, [pc, #376]	; (800a120 <_printf_i+0x244>)
 8009fa6:	230a      	movs	r3, #10
 8009fa8:	e019      	b.n	8009fde <_printf_i+0x102>
 8009faa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009fae:	6805      	ldr	r5, [r0, #0]
 8009fb0:	600b      	str	r3, [r1, #0]
 8009fb2:	bf18      	it	ne
 8009fb4:	b22d      	sxthne	r5, r5
 8009fb6:	e7ef      	b.n	8009f98 <_printf_i+0xbc>
 8009fb8:	680b      	ldr	r3, [r1, #0]
 8009fba:	6825      	ldr	r5, [r4, #0]
 8009fbc:	1d18      	adds	r0, r3, #4
 8009fbe:	6008      	str	r0, [r1, #0]
 8009fc0:	0628      	lsls	r0, r5, #24
 8009fc2:	d501      	bpl.n	8009fc8 <_printf_i+0xec>
 8009fc4:	681d      	ldr	r5, [r3, #0]
 8009fc6:	e002      	b.n	8009fce <_printf_i+0xf2>
 8009fc8:	0669      	lsls	r1, r5, #25
 8009fca:	d5fb      	bpl.n	8009fc4 <_printf_i+0xe8>
 8009fcc:	881d      	ldrh	r5, [r3, #0]
 8009fce:	4854      	ldr	r0, [pc, #336]	; (800a120 <_printf_i+0x244>)
 8009fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8009fd2:	bf0c      	ite	eq
 8009fd4:	2308      	moveq	r3, #8
 8009fd6:	230a      	movne	r3, #10
 8009fd8:	2100      	movs	r1, #0
 8009fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fde:	6866      	ldr	r6, [r4, #4]
 8009fe0:	60a6      	str	r6, [r4, #8]
 8009fe2:	2e00      	cmp	r6, #0
 8009fe4:	bfa2      	ittt	ge
 8009fe6:	6821      	ldrge	r1, [r4, #0]
 8009fe8:	f021 0104 	bicge.w	r1, r1, #4
 8009fec:	6021      	strge	r1, [r4, #0]
 8009fee:	b90d      	cbnz	r5, 8009ff4 <_printf_i+0x118>
 8009ff0:	2e00      	cmp	r6, #0
 8009ff2:	d04d      	beq.n	800a090 <_printf_i+0x1b4>
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ffa:	fb03 5711 	mls	r7, r3, r1, r5
 8009ffe:	5dc7      	ldrb	r7, [r0, r7]
 800a000:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a004:	462f      	mov	r7, r5
 800a006:	42bb      	cmp	r3, r7
 800a008:	460d      	mov	r5, r1
 800a00a:	d9f4      	bls.n	8009ff6 <_printf_i+0x11a>
 800a00c:	2b08      	cmp	r3, #8
 800a00e:	d10b      	bne.n	800a028 <_printf_i+0x14c>
 800a010:	6823      	ldr	r3, [r4, #0]
 800a012:	07df      	lsls	r7, r3, #31
 800a014:	d508      	bpl.n	800a028 <_printf_i+0x14c>
 800a016:	6923      	ldr	r3, [r4, #16]
 800a018:	6861      	ldr	r1, [r4, #4]
 800a01a:	4299      	cmp	r1, r3
 800a01c:	bfde      	ittt	le
 800a01e:	2330      	movle	r3, #48	; 0x30
 800a020:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a024:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a028:	1b92      	subs	r2, r2, r6
 800a02a:	6122      	str	r2, [r4, #16]
 800a02c:	f8cd a000 	str.w	sl, [sp]
 800a030:	464b      	mov	r3, r9
 800a032:	aa03      	add	r2, sp, #12
 800a034:	4621      	mov	r1, r4
 800a036:	4640      	mov	r0, r8
 800a038:	f7ff fee2 	bl	8009e00 <_printf_common>
 800a03c:	3001      	adds	r0, #1
 800a03e:	d14c      	bne.n	800a0da <_printf_i+0x1fe>
 800a040:	f04f 30ff 	mov.w	r0, #4294967295
 800a044:	b004      	add	sp, #16
 800a046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04a:	4835      	ldr	r0, [pc, #212]	; (800a120 <_printf_i+0x244>)
 800a04c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	680e      	ldr	r6, [r1, #0]
 800a054:	061f      	lsls	r7, r3, #24
 800a056:	f856 5b04 	ldr.w	r5, [r6], #4
 800a05a:	600e      	str	r6, [r1, #0]
 800a05c:	d514      	bpl.n	800a088 <_printf_i+0x1ac>
 800a05e:	07d9      	lsls	r1, r3, #31
 800a060:	bf44      	itt	mi
 800a062:	f043 0320 	orrmi.w	r3, r3, #32
 800a066:	6023      	strmi	r3, [r4, #0]
 800a068:	b91d      	cbnz	r5, 800a072 <_printf_i+0x196>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	f023 0320 	bic.w	r3, r3, #32
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	2310      	movs	r3, #16
 800a074:	e7b0      	b.n	8009fd8 <_printf_i+0xfc>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	f043 0320 	orr.w	r3, r3, #32
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	2378      	movs	r3, #120	; 0x78
 800a080:	4828      	ldr	r0, [pc, #160]	; (800a124 <_printf_i+0x248>)
 800a082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a086:	e7e3      	b.n	800a050 <_printf_i+0x174>
 800a088:	065e      	lsls	r6, r3, #25
 800a08a:	bf48      	it	mi
 800a08c:	b2ad      	uxthmi	r5, r5
 800a08e:	e7e6      	b.n	800a05e <_printf_i+0x182>
 800a090:	4616      	mov	r6, r2
 800a092:	e7bb      	b.n	800a00c <_printf_i+0x130>
 800a094:	680b      	ldr	r3, [r1, #0]
 800a096:	6826      	ldr	r6, [r4, #0]
 800a098:	6960      	ldr	r0, [r4, #20]
 800a09a:	1d1d      	adds	r5, r3, #4
 800a09c:	600d      	str	r5, [r1, #0]
 800a09e:	0635      	lsls	r5, r6, #24
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	d501      	bpl.n	800a0a8 <_printf_i+0x1cc>
 800a0a4:	6018      	str	r0, [r3, #0]
 800a0a6:	e002      	b.n	800a0ae <_printf_i+0x1d2>
 800a0a8:	0671      	lsls	r1, r6, #25
 800a0aa:	d5fb      	bpl.n	800a0a4 <_printf_i+0x1c8>
 800a0ac:	8018      	strh	r0, [r3, #0]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	6123      	str	r3, [r4, #16]
 800a0b2:	4616      	mov	r6, r2
 800a0b4:	e7ba      	b.n	800a02c <_printf_i+0x150>
 800a0b6:	680b      	ldr	r3, [r1, #0]
 800a0b8:	1d1a      	adds	r2, r3, #4
 800a0ba:	600a      	str	r2, [r1, #0]
 800a0bc:	681e      	ldr	r6, [r3, #0]
 800a0be:	6862      	ldr	r2, [r4, #4]
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f7f6 f88c 	bl	80001e0 <memchr>
 800a0c8:	b108      	cbz	r0, 800a0ce <_printf_i+0x1f2>
 800a0ca:	1b80      	subs	r0, r0, r6
 800a0cc:	6060      	str	r0, [r4, #4]
 800a0ce:	6863      	ldr	r3, [r4, #4]
 800a0d0:	6123      	str	r3, [r4, #16]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0d8:	e7a8      	b.n	800a02c <_printf_i+0x150>
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	4632      	mov	r2, r6
 800a0de:	4649      	mov	r1, r9
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	47d0      	blx	sl
 800a0e4:	3001      	adds	r0, #1
 800a0e6:	d0ab      	beq.n	800a040 <_printf_i+0x164>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	079b      	lsls	r3, r3, #30
 800a0ec:	d413      	bmi.n	800a116 <_printf_i+0x23a>
 800a0ee:	68e0      	ldr	r0, [r4, #12]
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	4298      	cmp	r0, r3
 800a0f4:	bfb8      	it	lt
 800a0f6:	4618      	movlt	r0, r3
 800a0f8:	e7a4      	b.n	800a044 <_printf_i+0x168>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	4632      	mov	r2, r6
 800a0fe:	4649      	mov	r1, r9
 800a100:	4640      	mov	r0, r8
 800a102:	47d0      	blx	sl
 800a104:	3001      	adds	r0, #1
 800a106:	d09b      	beq.n	800a040 <_printf_i+0x164>
 800a108:	3501      	adds	r5, #1
 800a10a:	68e3      	ldr	r3, [r4, #12]
 800a10c:	9903      	ldr	r1, [sp, #12]
 800a10e:	1a5b      	subs	r3, r3, r1
 800a110:	42ab      	cmp	r3, r5
 800a112:	dcf2      	bgt.n	800a0fa <_printf_i+0x21e>
 800a114:	e7eb      	b.n	800a0ee <_printf_i+0x212>
 800a116:	2500      	movs	r5, #0
 800a118:	f104 0619 	add.w	r6, r4, #25
 800a11c:	e7f5      	b.n	800a10a <_printf_i+0x22e>
 800a11e:	bf00      	nop
 800a120:	0800e83a 	.word	0x0800e83a
 800a124:	0800e84b 	.word	0x0800e84b

0800a128 <_scanf_float>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	b087      	sub	sp, #28
 800a12e:	4617      	mov	r7, r2
 800a130:	9303      	str	r3, [sp, #12]
 800a132:	688b      	ldr	r3, [r1, #8]
 800a134:	1e5a      	subs	r2, r3, #1
 800a136:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a13a:	bf83      	ittte	hi
 800a13c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a140:	195b      	addhi	r3, r3, r5
 800a142:	9302      	strhi	r3, [sp, #8]
 800a144:	2300      	movls	r3, #0
 800a146:	bf86      	itte	hi
 800a148:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a14c:	608b      	strhi	r3, [r1, #8]
 800a14e:	9302      	strls	r3, [sp, #8]
 800a150:	680b      	ldr	r3, [r1, #0]
 800a152:	468b      	mov	fp, r1
 800a154:	2500      	movs	r5, #0
 800a156:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a15a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a15e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a162:	4680      	mov	r8, r0
 800a164:	460c      	mov	r4, r1
 800a166:	465e      	mov	r6, fp
 800a168:	46aa      	mov	sl, r5
 800a16a:	46a9      	mov	r9, r5
 800a16c:	9501      	str	r5, [sp, #4]
 800a16e:	68a2      	ldr	r2, [r4, #8]
 800a170:	b152      	cbz	r2, 800a188 <_scanf_float+0x60>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b4e      	cmp	r3, #78	; 0x4e
 800a178:	d864      	bhi.n	800a244 <_scanf_float+0x11c>
 800a17a:	2b40      	cmp	r3, #64	; 0x40
 800a17c:	d83c      	bhi.n	800a1f8 <_scanf_float+0xd0>
 800a17e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a182:	b2c8      	uxtb	r0, r1
 800a184:	280e      	cmp	r0, #14
 800a186:	d93a      	bls.n	800a1fe <_scanf_float+0xd6>
 800a188:	f1b9 0f00 	cmp.w	r9, #0
 800a18c:	d003      	beq.n	800a196 <_scanf_float+0x6e>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a19a:	f1ba 0f01 	cmp.w	sl, #1
 800a19e:	f200 8113 	bhi.w	800a3c8 <_scanf_float+0x2a0>
 800a1a2:	455e      	cmp	r6, fp
 800a1a4:	f200 8105 	bhi.w	800a3b2 <_scanf_float+0x28a>
 800a1a8:	2501      	movs	r5, #1
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	b007      	add	sp, #28
 800a1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a1b6:	2a0d      	cmp	r2, #13
 800a1b8:	d8e6      	bhi.n	800a188 <_scanf_float+0x60>
 800a1ba:	a101      	add	r1, pc, #4	; (adr r1, 800a1c0 <_scanf_float+0x98>)
 800a1bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a1c0:	0800a2ff 	.word	0x0800a2ff
 800a1c4:	0800a189 	.word	0x0800a189
 800a1c8:	0800a189 	.word	0x0800a189
 800a1cc:	0800a189 	.word	0x0800a189
 800a1d0:	0800a35f 	.word	0x0800a35f
 800a1d4:	0800a337 	.word	0x0800a337
 800a1d8:	0800a189 	.word	0x0800a189
 800a1dc:	0800a189 	.word	0x0800a189
 800a1e0:	0800a30d 	.word	0x0800a30d
 800a1e4:	0800a189 	.word	0x0800a189
 800a1e8:	0800a189 	.word	0x0800a189
 800a1ec:	0800a189 	.word	0x0800a189
 800a1f0:	0800a189 	.word	0x0800a189
 800a1f4:	0800a2c5 	.word	0x0800a2c5
 800a1f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a1fc:	e7db      	b.n	800a1b6 <_scanf_float+0x8e>
 800a1fe:	290e      	cmp	r1, #14
 800a200:	d8c2      	bhi.n	800a188 <_scanf_float+0x60>
 800a202:	a001      	add	r0, pc, #4	; (adr r0, 800a208 <_scanf_float+0xe0>)
 800a204:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a208:	0800a2b7 	.word	0x0800a2b7
 800a20c:	0800a189 	.word	0x0800a189
 800a210:	0800a2b7 	.word	0x0800a2b7
 800a214:	0800a34b 	.word	0x0800a34b
 800a218:	0800a189 	.word	0x0800a189
 800a21c:	0800a265 	.word	0x0800a265
 800a220:	0800a2a1 	.word	0x0800a2a1
 800a224:	0800a2a1 	.word	0x0800a2a1
 800a228:	0800a2a1 	.word	0x0800a2a1
 800a22c:	0800a2a1 	.word	0x0800a2a1
 800a230:	0800a2a1 	.word	0x0800a2a1
 800a234:	0800a2a1 	.word	0x0800a2a1
 800a238:	0800a2a1 	.word	0x0800a2a1
 800a23c:	0800a2a1 	.word	0x0800a2a1
 800a240:	0800a2a1 	.word	0x0800a2a1
 800a244:	2b6e      	cmp	r3, #110	; 0x6e
 800a246:	d809      	bhi.n	800a25c <_scanf_float+0x134>
 800a248:	2b60      	cmp	r3, #96	; 0x60
 800a24a:	d8b2      	bhi.n	800a1b2 <_scanf_float+0x8a>
 800a24c:	2b54      	cmp	r3, #84	; 0x54
 800a24e:	d077      	beq.n	800a340 <_scanf_float+0x218>
 800a250:	2b59      	cmp	r3, #89	; 0x59
 800a252:	d199      	bne.n	800a188 <_scanf_float+0x60>
 800a254:	2d07      	cmp	r5, #7
 800a256:	d197      	bne.n	800a188 <_scanf_float+0x60>
 800a258:	2508      	movs	r5, #8
 800a25a:	e029      	b.n	800a2b0 <_scanf_float+0x188>
 800a25c:	2b74      	cmp	r3, #116	; 0x74
 800a25e:	d06f      	beq.n	800a340 <_scanf_float+0x218>
 800a260:	2b79      	cmp	r3, #121	; 0x79
 800a262:	e7f6      	b.n	800a252 <_scanf_float+0x12a>
 800a264:	6821      	ldr	r1, [r4, #0]
 800a266:	05c8      	lsls	r0, r1, #23
 800a268:	d51a      	bpl.n	800a2a0 <_scanf_float+0x178>
 800a26a:	9b02      	ldr	r3, [sp, #8]
 800a26c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a270:	6021      	str	r1, [r4, #0]
 800a272:	f109 0901 	add.w	r9, r9, #1
 800a276:	b11b      	cbz	r3, 800a280 <_scanf_float+0x158>
 800a278:	3b01      	subs	r3, #1
 800a27a:	3201      	adds	r2, #1
 800a27c:	9302      	str	r3, [sp, #8]
 800a27e:	60a2      	str	r2, [r4, #8]
 800a280:	68a3      	ldr	r3, [r4, #8]
 800a282:	3b01      	subs	r3, #1
 800a284:	60a3      	str	r3, [r4, #8]
 800a286:	6923      	ldr	r3, [r4, #16]
 800a288:	3301      	adds	r3, #1
 800a28a:	6123      	str	r3, [r4, #16]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3b01      	subs	r3, #1
 800a290:	2b00      	cmp	r3, #0
 800a292:	607b      	str	r3, [r7, #4]
 800a294:	f340 8084 	ble.w	800a3a0 <_scanf_float+0x278>
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	3301      	adds	r3, #1
 800a29c:	603b      	str	r3, [r7, #0]
 800a29e:	e766      	b.n	800a16e <_scanf_float+0x46>
 800a2a0:	eb1a 0f05 	cmn.w	sl, r5
 800a2a4:	f47f af70 	bne.w	800a188 <_scanf_float+0x60>
 800a2a8:	6822      	ldr	r2, [r4, #0]
 800a2aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a2ae:	6022      	str	r2, [r4, #0]
 800a2b0:	f806 3b01 	strb.w	r3, [r6], #1
 800a2b4:	e7e4      	b.n	800a280 <_scanf_float+0x158>
 800a2b6:	6822      	ldr	r2, [r4, #0]
 800a2b8:	0610      	lsls	r0, r2, #24
 800a2ba:	f57f af65 	bpl.w	800a188 <_scanf_float+0x60>
 800a2be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2c2:	e7f4      	b.n	800a2ae <_scanf_float+0x186>
 800a2c4:	f1ba 0f00 	cmp.w	sl, #0
 800a2c8:	d10e      	bne.n	800a2e8 <_scanf_float+0x1c0>
 800a2ca:	f1b9 0f00 	cmp.w	r9, #0
 800a2ce:	d10e      	bne.n	800a2ee <_scanf_float+0x1c6>
 800a2d0:	6822      	ldr	r2, [r4, #0]
 800a2d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a2d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a2da:	d108      	bne.n	800a2ee <_scanf_float+0x1c6>
 800a2dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2e0:	6022      	str	r2, [r4, #0]
 800a2e2:	f04f 0a01 	mov.w	sl, #1
 800a2e6:	e7e3      	b.n	800a2b0 <_scanf_float+0x188>
 800a2e8:	f1ba 0f02 	cmp.w	sl, #2
 800a2ec:	d055      	beq.n	800a39a <_scanf_float+0x272>
 800a2ee:	2d01      	cmp	r5, #1
 800a2f0:	d002      	beq.n	800a2f8 <_scanf_float+0x1d0>
 800a2f2:	2d04      	cmp	r5, #4
 800a2f4:	f47f af48 	bne.w	800a188 <_scanf_float+0x60>
 800a2f8:	3501      	adds	r5, #1
 800a2fa:	b2ed      	uxtb	r5, r5
 800a2fc:	e7d8      	b.n	800a2b0 <_scanf_float+0x188>
 800a2fe:	f1ba 0f01 	cmp.w	sl, #1
 800a302:	f47f af41 	bne.w	800a188 <_scanf_float+0x60>
 800a306:	f04f 0a02 	mov.w	sl, #2
 800a30a:	e7d1      	b.n	800a2b0 <_scanf_float+0x188>
 800a30c:	b97d      	cbnz	r5, 800a32e <_scanf_float+0x206>
 800a30e:	f1b9 0f00 	cmp.w	r9, #0
 800a312:	f47f af3c 	bne.w	800a18e <_scanf_float+0x66>
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a31c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a320:	f47f af39 	bne.w	800a196 <_scanf_float+0x6e>
 800a324:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a328:	6022      	str	r2, [r4, #0]
 800a32a:	2501      	movs	r5, #1
 800a32c:	e7c0      	b.n	800a2b0 <_scanf_float+0x188>
 800a32e:	2d03      	cmp	r5, #3
 800a330:	d0e2      	beq.n	800a2f8 <_scanf_float+0x1d0>
 800a332:	2d05      	cmp	r5, #5
 800a334:	e7de      	b.n	800a2f4 <_scanf_float+0x1cc>
 800a336:	2d02      	cmp	r5, #2
 800a338:	f47f af26 	bne.w	800a188 <_scanf_float+0x60>
 800a33c:	2503      	movs	r5, #3
 800a33e:	e7b7      	b.n	800a2b0 <_scanf_float+0x188>
 800a340:	2d06      	cmp	r5, #6
 800a342:	f47f af21 	bne.w	800a188 <_scanf_float+0x60>
 800a346:	2507      	movs	r5, #7
 800a348:	e7b2      	b.n	800a2b0 <_scanf_float+0x188>
 800a34a:	6822      	ldr	r2, [r4, #0]
 800a34c:	0591      	lsls	r1, r2, #22
 800a34e:	f57f af1b 	bpl.w	800a188 <_scanf_float+0x60>
 800a352:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a356:	6022      	str	r2, [r4, #0]
 800a358:	f8cd 9004 	str.w	r9, [sp, #4]
 800a35c:	e7a8      	b.n	800a2b0 <_scanf_float+0x188>
 800a35e:	6822      	ldr	r2, [r4, #0]
 800a360:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a364:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a368:	d006      	beq.n	800a378 <_scanf_float+0x250>
 800a36a:	0550      	lsls	r0, r2, #21
 800a36c:	f57f af0c 	bpl.w	800a188 <_scanf_float+0x60>
 800a370:	f1b9 0f00 	cmp.w	r9, #0
 800a374:	f43f af0f 	beq.w	800a196 <_scanf_float+0x6e>
 800a378:	0591      	lsls	r1, r2, #22
 800a37a:	bf58      	it	pl
 800a37c:	9901      	ldrpl	r1, [sp, #4]
 800a37e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a382:	bf58      	it	pl
 800a384:	eba9 0101 	subpl.w	r1, r9, r1
 800a388:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a38c:	bf58      	it	pl
 800a38e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a392:	6022      	str	r2, [r4, #0]
 800a394:	f04f 0900 	mov.w	r9, #0
 800a398:	e78a      	b.n	800a2b0 <_scanf_float+0x188>
 800a39a:	f04f 0a03 	mov.w	sl, #3
 800a39e:	e787      	b.n	800a2b0 <_scanf_float+0x188>
 800a3a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4798      	blx	r3
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	f43f aedf 	beq.w	800a16e <_scanf_float+0x46>
 800a3b0:	e6ea      	b.n	800a188 <_scanf_float+0x60>
 800a3b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3ba:	463a      	mov	r2, r7
 800a3bc:	4640      	mov	r0, r8
 800a3be:	4798      	blx	r3
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	6123      	str	r3, [r4, #16]
 800a3c6:	e6ec      	b.n	800a1a2 <_scanf_float+0x7a>
 800a3c8:	1e6b      	subs	r3, r5, #1
 800a3ca:	2b06      	cmp	r3, #6
 800a3cc:	d825      	bhi.n	800a41a <_scanf_float+0x2f2>
 800a3ce:	2d02      	cmp	r5, #2
 800a3d0:	d836      	bhi.n	800a440 <_scanf_float+0x318>
 800a3d2:	455e      	cmp	r6, fp
 800a3d4:	f67f aee8 	bls.w	800a1a8 <_scanf_float+0x80>
 800a3d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3e0:	463a      	mov	r2, r7
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	4798      	blx	r3
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	6123      	str	r3, [r4, #16]
 800a3ec:	e7f1      	b.n	800a3d2 <_scanf_float+0x2aa>
 800a3ee:	9802      	ldr	r0, [sp, #8]
 800a3f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a3f8:	9002      	str	r0, [sp, #8]
 800a3fa:	463a      	mov	r2, r7
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	4798      	blx	r3
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	3b01      	subs	r3, #1
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a40a:	fa5f fa8a 	uxtb.w	sl, sl
 800a40e:	f1ba 0f02 	cmp.w	sl, #2
 800a412:	d1ec      	bne.n	800a3ee <_scanf_float+0x2c6>
 800a414:	3d03      	subs	r5, #3
 800a416:	b2ed      	uxtb	r5, r5
 800a418:	1b76      	subs	r6, r6, r5
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	05da      	lsls	r2, r3, #23
 800a41e:	d52f      	bpl.n	800a480 <_scanf_float+0x358>
 800a420:	055b      	lsls	r3, r3, #21
 800a422:	d510      	bpl.n	800a446 <_scanf_float+0x31e>
 800a424:	455e      	cmp	r6, fp
 800a426:	f67f aebf 	bls.w	800a1a8 <_scanf_float+0x80>
 800a42a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a42e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a432:	463a      	mov	r2, r7
 800a434:	4640      	mov	r0, r8
 800a436:	4798      	blx	r3
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	3b01      	subs	r3, #1
 800a43c:	6123      	str	r3, [r4, #16]
 800a43e:	e7f1      	b.n	800a424 <_scanf_float+0x2fc>
 800a440:	46aa      	mov	sl, r5
 800a442:	9602      	str	r6, [sp, #8]
 800a444:	e7df      	b.n	800a406 <_scanf_float+0x2de>
 800a446:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a44a:	6923      	ldr	r3, [r4, #16]
 800a44c:	2965      	cmp	r1, #101	; 0x65
 800a44e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a452:	f106 35ff 	add.w	r5, r6, #4294967295
 800a456:	6123      	str	r3, [r4, #16]
 800a458:	d00c      	beq.n	800a474 <_scanf_float+0x34c>
 800a45a:	2945      	cmp	r1, #69	; 0x45
 800a45c:	d00a      	beq.n	800a474 <_scanf_float+0x34c>
 800a45e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a462:	463a      	mov	r2, r7
 800a464:	4640      	mov	r0, r8
 800a466:	4798      	blx	r3
 800a468:	6923      	ldr	r3, [r4, #16]
 800a46a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a46e:	3b01      	subs	r3, #1
 800a470:	1eb5      	subs	r5, r6, #2
 800a472:	6123      	str	r3, [r4, #16]
 800a474:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a478:	463a      	mov	r2, r7
 800a47a:	4640      	mov	r0, r8
 800a47c:	4798      	blx	r3
 800a47e:	462e      	mov	r6, r5
 800a480:	6825      	ldr	r5, [r4, #0]
 800a482:	f015 0510 	ands.w	r5, r5, #16
 800a486:	d158      	bne.n	800a53a <_scanf_float+0x412>
 800a488:	7035      	strb	r5, [r6, #0]
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a494:	d11c      	bne.n	800a4d0 <_scanf_float+0x3a8>
 800a496:	9b01      	ldr	r3, [sp, #4]
 800a498:	454b      	cmp	r3, r9
 800a49a:	eba3 0209 	sub.w	r2, r3, r9
 800a49e:	d124      	bne.n	800a4ea <_scanf_float+0x3c2>
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	4659      	mov	r1, fp
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	f000 ff29 	bl	800b2fc <_strtod_r>
 800a4aa:	9b03      	ldr	r3, [sp, #12]
 800a4ac:	6821      	ldr	r1, [r4, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f011 0f02 	tst.w	r1, #2
 800a4b4:	ec57 6b10 	vmov	r6, r7, d0
 800a4b8:	f103 0204 	add.w	r2, r3, #4
 800a4bc:	d020      	beq.n	800a500 <_scanf_float+0x3d8>
 800a4be:	9903      	ldr	r1, [sp, #12]
 800a4c0:	600a      	str	r2, [r1, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	e9c3 6700 	strd	r6, r7, [r3]
 800a4c8:	68e3      	ldr	r3, [r4, #12]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	60e3      	str	r3, [r4, #12]
 800a4ce:	e66c      	b.n	800a1aa <_scanf_float+0x82>
 800a4d0:	9b04      	ldr	r3, [sp, #16]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d0e4      	beq.n	800a4a0 <_scanf_float+0x378>
 800a4d6:	9905      	ldr	r1, [sp, #20]
 800a4d8:	230a      	movs	r3, #10
 800a4da:	462a      	mov	r2, r5
 800a4dc:	3101      	adds	r1, #1
 800a4de:	4640      	mov	r0, r8
 800a4e0:	f000 ff96 	bl	800b410 <_strtol_r>
 800a4e4:	9b04      	ldr	r3, [sp, #16]
 800a4e6:	9e05      	ldr	r6, [sp, #20]
 800a4e8:	1ac2      	subs	r2, r0, r3
 800a4ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a4ee:	429e      	cmp	r6, r3
 800a4f0:	bf28      	it	cs
 800a4f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a4f6:	4912      	ldr	r1, [pc, #72]	; (800a540 <_scanf_float+0x418>)
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	f000 f8b9 	bl	800a670 <siprintf>
 800a4fe:	e7cf      	b.n	800a4a0 <_scanf_float+0x378>
 800a500:	f011 0f04 	tst.w	r1, #4
 800a504:	9903      	ldr	r1, [sp, #12]
 800a506:	600a      	str	r2, [r1, #0]
 800a508:	d1db      	bne.n	800a4c2 <_scanf_float+0x39a>
 800a50a:	f8d3 8000 	ldr.w	r8, [r3]
 800a50e:	ee10 2a10 	vmov	r2, s0
 800a512:	ee10 0a10 	vmov	r0, s0
 800a516:	463b      	mov	r3, r7
 800a518:	4639      	mov	r1, r7
 800a51a:	f7f6 fb07 	bl	8000b2c <__aeabi_dcmpun>
 800a51e:	b128      	cbz	r0, 800a52c <_scanf_float+0x404>
 800a520:	4808      	ldr	r0, [pc, #32]	; (800a544 <_scanf_float+0x41c>)
 800a522:	f000 f89f 	bl	800a664 <nanf>
 800a526:	ed88 0a00 	vstr	s0, [r8]
 800a52a:	e7cd      	b.n	800a4c8 <_scanf_float+0x3a0>
 800a52c:	4630      	mov	r0, r6
 800a52e:	4639      	mov	r1, r7
 800a530:	f7f6 fb5a 	bl	8000be8 <__aeabi_d2f>
 800a534:	f8c8 0000 	str.w	r0, [r8]
 800a538:	e7c6      	b.n	800a4c8 <_scanf_float+0x3a0>
 800a53a:	2500      	movs	r5, #0
 800a53c:	e635      	b.n	800a1aa <_scanf_float+0x82>
 800a53e:	bf00      	nop
 800a540:	0800e85c 	.word	0x0800e85c
 800a544:	0800ecd8 	.word	0x0800ecd8

0800a548 <iprintf>:
 800a548:	b40f      	push	{r0, r1, r2, r3}
 800a54a:	4b0a      	ldr	r3, [pc, #40]	; (800a574 <iprintf+0x2c>)
 800a54c:	b513      	push	{r0, r1, r4, lr}
 800a54e:	681c      	ldr	r4, [r3, #0]
 800a550:	b124      	cbz	r4, 800a55c <iprintf+0x14>
 800a552:	69a3      	ldr	r3, [r4, #24]
 800a554:	b913      	cbnz	r3, 800a55c <iprintf+0x14>
 800a556:	4620      	mov	r0, r4
 800a558:	f001 ffb0 	bl	800c4bc <__sinit>
 800a55c:	ab05      	add	r3, sp, #20
 800a55e:	9a04      	ldr	r2, [sp, #16]
 800a560:	68a1      	ldr	r1, [r4, #8]
 800a562:	9301      	str	r3, [sp, #4]
 800a564:	4620      	mov	r0, r4
 800a566:	f003 fb35 	bl	800dbd4 <_vfiprintf_r>
 800a56a:	b002      	add	sp, #8
 800a56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a570:	b004      	add	sp, #16
 800a572:	4770      	bx	lr
 800a574:	2000000c 	.word	0x2000000c

0800a578 <_puts_r>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	460e      	mov	r6, r1
 800a57c:	4605      	mov	r5, r0
 800a57e:	b118      	cbz	r0, 800a588 <_puts_r+0x10>
 800a580:	6983      	ldr	r3, [r0, #24]
 800a582:	b90b      	cbnz	r3, 800a588 <_puts_r+0x10>
 800a584:	f001 ff9a 	bl	800c4bc <__sinit>
 800a588:	69ab      	ldr	r3, [r5, #24]
 800a58a:	68ac      	ldr	r4, [r5, #8]
 800a58c:	b913      	cbnz	r3, 800a594 <_puts_r+0x1c>
 800a58e:	4628      	mov	r0, r5
 800a590:	f001 ff94 	bl	800c4bc <__sinit>
 800a594:	4b2c      	ldr	r3, [pc, #176]	; (800a648 <_puts_r+0xd0>)
 800a596:	429c      	cmp	r4, r3
 800a598:	d120      	bne.n	800a5dc <_puts_r+0x64>
 800a59a:	686c      	ldr	r4, [r5, #4]
 800a59c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a59e:	07db      	lsls	r3, r3, #31
 800a5a0:	d405      	bmi.n	800a5ae <_puts_r+0x36>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	0598      	lsls	r0, r3, #22
 800a5a6:	d402      	bmi.n	800a5ae <_puts_r+0x36>
 800a5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5aa:	f002 fb98 	bl	800ccde <__retarget_lock_acquire_recursive>
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	0719      	lsls	r1, r3, #28
 800a5b2:	d51d      	bpl.n	800a5f0 <_puts_r+0x78>
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	b1db      	cbz	r3, 800a5f0 <_puts_r+0x78>
 800a5b8:	3e01      	subs	r6, #1
 800a5ba:	68a3      	ldr	r3, [r4, #8]
 800a5bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	60a3      	str	r3, [r4, #8]
 800a5c4:	bb39      	cbnz	r1, 800a616 <_puts_r+0x9e>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	da38      	bge.n	800a63c <_puts_r+0xc4>
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	210a      	movs	r1, #10
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 ff20 	bl	800b414 <__swbuf_r>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d011      	beq.n	800a5fc <_puts_r+0x84>
 800a5d8:	250a      	movs	r5, #10
 800a5da:	e011      	b.n	800a600 <_puts_r+0x88>
 800a5dc:	4b1b      	ldr	r3, [pc, #108]	; (800a64c <_puts_r+0xd4>)
 800a5de:	429c      	cmp	r4, r3
 800a5e0:	d101      	bne.n	800a5e6 <_puts_r+0x6e>
 800a5e2:	68ac      	ldr	r4, [r5, #8]
 800a5e4:	e7da      	b.n	800a59c <_puts_r+0x24>
 800a5e6:	4b1a      	ldr	r3, [pc, #104]	; (800a650 <_puts_r+0xd8>)
 800a5e8:	429c      	cmp	r4, r3
 800a5ea:	bf08      	it	eq
 800a5ec:	68ec      	ldreq	r4, [r5, #12]
 800a5ee:	e7d5      	b.n	800a59c <_puts_r+0x24>
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	f000 ff60 	bl	800b4b8 <__swsetup_r>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d0dd      	beq.n	800a5b8 <_puts_r+0x40>
 800a5fc:	f04f 35ff 	mov.w	r5, #4294967295
 800a600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a602:	07da      	lsls	r2, r3, #31
 800a604:	d405      	bmi.n	800a612 <_puts_r+0x9a>
 800a606:	89a3      	ldrh	r3, [r4, #12]
 800a608:	059b      	lsls	r3, r3, #22
 800a60a:	d402      	bmi.n	800a612 <_puts_r+0x9a>
 800a60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a60e:	f002 fb67 	bl	800cce0 <__retarget_lock_release_recursive>
 800a612:	4628      	mov	r0, r5
 800a614:	bd70      	pop	{r4, r5, r6, pc}
 800a616:	2b00      	cmp	r3, #0
 800a618:	da04      	bge.n	800a624 <_puts_r+0xac>
 800a61a:	69a2      	ldr	r2, [r4, #24]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	dc06      	bgt.n	800a62e <_puts_r+0xb6>
 800a620:	290a      	cmp	r1, #10
 800a622:	d004      	beq.n	800a62e <_puts_r+0xb6>
 800a624:	6823      	ldr	r3, [r4, #0]
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	6022      	str	r2, [r4, #0]
 800a62a:	7019      	strb	r1, [r3, #0]
 800a62c:	e7c5      	b.n	800a5ba <_puts_r+0x42>
 800a62e:	4622      	mov	r2, r4
 800a630:	4628      	mov	r0, r5
 800a632:	f000 feef 	bl	800b414 <__swbuf_r>
 800a636:	3001      	adds	r0, #1
 800a638:	d1bf      	bne.n	800a5ba <_puts_r+0x42>
 800a63a:	e7df      	b.n	800a5fc <_puts_r+0x84>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	250a      	movs	r5, #10
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	6022      	str	r2, [r4, #0]
 800a644:	701d      	strb	r5, [r3, #0]
 800a646:	e7db      	b.n	800a600 <_puts_r+0x88>
 800a648:	0800ea70 	.word	0x0800ea70
 800a64c:	0800ea90 	.word	0x0800ea90
 800a650:	0800ea50 	.word	0x0800ea50

0800a654 <puts>:
 800a654:	4b02      	ldr	r3, [pc, #8]	; (800a660 <puts+0xc>)
 800a656:	4601      	mov	r1, r0
 800a658:	6818      	ldr	r0, [r3, #0]
 800a65a:	f7ff bf8d 	b.w	800a578 <_puts_r>
 800a65e:	bf00      	nop
 800a660:	2000000c 	.word	0x2000000c

0800a664 <nanf>:
 800a664:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a66c <nanf+0x8>
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop
 800a66c:	7fc00000 	.word	0x7fc00000

0800a670 <siprintf>:
 800a670:	b40e      	push	{r1, r2, r3}
 800a672:	b500      	push	{lr}
 800a674:	b09c      	sub	sp, #112	; 0x70
 800a676:	ab1d      	add	r3, sp, #116	; 0x74
 800a678:	9002      	str	r0, [sp, #8]
 800a67a:	9006      	str	r0, [sp, #24]
 800a67c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a680:	4809      	ldr	r0, [pc, #36]	; (800a6a8 <siprintf+0x38>)
 800a682:	9107      	str	r1, [sp, #28]
 800a684:	9104      	str	r1, [sp, #16]
 800a686:	4909      	ldr	r1, [pc, #36]	; (800a6ac <siprintf+0x3c>)
 800a688:	f853 2b04 	ldr.w	r2, [r3], #4
 800a68c:	9105      	str	r1, [sp, #20]
 800a68e:	6800      	ldr	r0, [r0, #0]
 800a690:	9301      	str	r3, [sp, #4]
 800a692:	a902      	add	r1, sp, #8
 800a694:	f003 f974 	bl	800d980 <_svfiprintf_r>
 800a698:	9b02      	ldr	r3, [sp, #8]
 800a69a:	2200      	movs	r2, #0
 800a69c:	701a      	strb	r2, [r3, #0]
 800a69e:	b01c      	add	sp, #112	; 0x70
 800a6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6a4:	b003      	add	sp, #12
 800a6a6:	4770      	bx	lr
 800a6a8:	2000000c 	.word	0x2000000c
 800a6ac:	ffff0208 	.word	0xffff0208

0800a6b0 <sulp>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	460d      	mov	r5, r1
 800a6b6:	ec45 4b10 	vmov	d0, r4, r5
 800a6ba:	4616      	mov	r6, r2
 800a6bc:	f002 fefc 	bl	800d4b8 <__ulp>
 800a6c0:	ec51 0b10 	vmov	r0, r1, d0
 800a6c4:	b17e      	cbz	r6, 800a6e6 <sulp+0x36>
 800a6c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a6ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	dd09      	ble.n	800a6e6 <sulp+0x36>
 800a6d2:	051b      	lsls	r3, r3, #20
 800a6d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a6d8:	2400      	movs	r4, #0
 800a6da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a6de:	4622      	mov	r2, r4
 800a6e0:	462b      	mov	r3, r5
 800a6e2:	f7f5 ff89 	bl	80005f8 <__aeabi_dmul>
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}

0800a6e8 <_strtod_l>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	b0a3      	sub	sp, #140	; 0x8c
 800a6ee:	461f      	mov	r7, r3
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	931e      	str	r3, [sp, #120]	; 0x78
 800a6f4:	4ba4      	ldr	r3, [pc, #656]	; (800a988 <_strtod_l+0x2a0>)
 800a6f6:	9219      	str	r2, [sp, #100]	; 0x64
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	9307      	str	r3, [sp, #28]
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	4618      	mov	r0, r3
 800a700:	4688      	mov	r8, r1
 800a702:	f7f5 fd65 	bl	80001d0 <strlen>
 800a706:	f04f 0a00 	mov.w	sl, #0
 800a70a:	4605      	mov	r5, r0
 800a70c:	f04f 0b00 	mov.w	fp, #0
 800a710:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a716:	781a      	ldrb	r2, [r3, #0]
 800a718:	2a2b      	cmp	r2, #43	; 0x2b
 800a71a:	d04c      	beq.n	800a7b6 <_strtod_l+0xce>
 800a71c:	d839      	bhi.n	800a792 <_strtod_l+0xaa>
 800a71e:	2a0d      	cmp	r2, #13
 800a720:	d832      	bhi.n	800a788 <_strtod_l+0xa0>
 800a722:	2a08      	cmp	r2, #8
 800a724:	d832      	bhi.n	800a78c <_strtod_l+0xa4>
 800a726:	2a00      	cmp	r2, #0
 800a728:	d03c      	beq.n	800a7a4 <_strtod_l+0xbc>
 800a72a:	2300      	movs	r3, #0
 800a72c:	930e      	str	r3, [sp, #56]	; 0x38
 800a72e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a730:	7833      	ldrb	r3, [r6, #0]
 800a732:	2b30      	cmp	r3, #48	; 0x30
 800a734:	f040 80b4 	bne.w	800a8a0 <_strtod_l+0x1b8>
 800a738:	7873      	ldrb	r3, [r6, #1]
 800a73a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a73e:	2b58      	cmp	r3, #88	; 0x58
 800a740:	d16c      	bne.n	800a81c <_strtod_l+0x134>
 800a742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	ab1e      	add	r3, sp, #120	; 0x78
 800a748:	9702      	str	r7, [sp, #8]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	4a8f      	ldr	r2, [pc, #572]	; (800a98c <_strtod_l+0x2a4>)
 800a74e:	ab1f      	add	r3, sp, #124	; 0x7c
 800a750:	a91d      	add	r1, sp, #116	; 0x74
 800a752:	4620      	mov	r0, r4
 800a754:	f001 ffb6 	bl	800c6c4 <__gethex>
 800a758:	f010 0707 	ands.w	r7, r0, #7
 800a75c:	4605      	mov	r5, r0
 800a75e:	d005      	beq.n	800a76c <_strtod_l+0x84>
 800a760:	2f06      	cmp	r7, #6
 800a762:	d12a      	bne.n	800a7ba <_strtod_l+0xd2>
 800a764:	3601      	adds	r6, #1
 800a766:	2300      	movs	r3, #0
 800a768:	961d      	str	r6, [sp, #116]	; 0x74
 800a76a:	930e      	str	r3, [sp, #56]	; 0x38
 800a76c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f040 8596 	bne.w	800b2a0 <_strtod_l+0xbb8>
 800a774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a776:	b1db      	cbz	r3, 800a7b0 <_strtod_l+0xc8>
 800a778:	4652      	mov	r2, sl
 800a77a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a77e:	ec43 2b10 	vmov	d0, r2, r3
 800a782:	b023      	add	sp, #140	; 0x8c
 800a784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a788:	2a20      	cmp	r2, #32
 800a78a:	d1ce      	bne.n	800a72a <_strtod_l+0x42>
 800a78c:	3301      	adds	r3, #1
 800a78e:	931d      	str	r3, [sp, #116]	; 0x74
 800a790:	e7c0      	b.n	800a714 <_strtod_l+0x2c>
 800a792:	2a2d      	cmp	r2, #45	; 0x2d
 800a794:	d1c9      	bne.n	800a72a <_strtod_l+0x42>
 800a796:	2201      	movs	r2, #1
 800a798:	920e      	str	r2, [sp, #56]	; 0x38
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	921d      	str	r2, [sp, #116]	; 0x74
 800a79e:	785b      	ldrb	r3, [r3, #1]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1c4      	bne.n	800a72e <_strtod_l+0x46>
 800a7a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7a6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	f040 8576 	bne.w	800b29c <_strtod_l+0xbb4>
 800a7b0:	4652      	mov	r2, sl
 800a7b2:	465b      	mov	r3, fp
 800a7b4:	e7e3      	b.n	800a77e <_strtod_l+0x96>
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	e7ee      	b.n	800a798 <_strtod_l+0xb0>
 800a7ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a7bc:	b13a      	cbz	r2, 800a7ce <_strtod_l+0xe6>
 800a7be:	2135      	movs	r1, #53	; 0x35
 800a7c0:	a820      	add	r0, sp, #128	; 0x80
 800a7c2:	f002 ff84 	bl	800d6ce <__copybits>
 800a7c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f002 fb49 	bl	800ce60 <_Bfree>
 800a7ce:	3f01      	subs	r7, #1
 800a7d0:	2f05      	cmp	r7, #5
 800a7d2:	d807      	bhi.n	800a7e4 <_strtod_l+0xfc>
 800a7d4:	e8df f007 	tbb	[pc, r7]
 800a7d8:	1d180b0e 	.word	0x1d180b0e
 800a7dc:	030e      	.short	0x030e
 800a7de:	f04f 0b00 	mov.w	fp, #0
 800a7e2:	46da      	mov	sl, fp
 800a7e4:	0728      	lsls	r0, r5, #28
 800a7e6:	d5c1      	bpl.n	800a76c <_strtod_l+0x84>
 800a7e8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a7ec:	e7be      	b.n	800a76c <_strtod_l+0x84>
 800a7ee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a7f2:	e7f7      	b.n	800a7e4 <_strtod_l+0xfc>
 800a7f4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a7f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a7fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a7fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a802:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a806:	e7ed      	b.n	800a7e4 <_strtod_l+0xfc>
 800a808:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a990 <_strtod_l+0x2a8>
 800a80c:	f04f 0a00 	mov.w	sl, #0
 800a810:	e7e8      	b.n	800a7e4 <_strtod_l+0xfc>
 800a812:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a816:	f04f 3aff 	mov.w	sl, #4294967295
 800a81a:	e7e3      	b.n	800a7e4 <_strtod_l+0xfc>
 800a81c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a81e:	1c5a      	adds	r2, r3, #1
 800a820:	921d      	str	r2, [sp, #116]	; 0x74
 800a822:	785b      	ldrb	r3, [r3, #1]
 800a824:	2b30      	cmp	r3, #48	; 0x30
 800a826:	d0f9      	beq.n	800a81c <_strtod_l+0x134>
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d09f      	beq.n	800a76c <_strtod_l+0x84>
 800a82c:	2301      	movs	r3, #1
 800a82e:	f04f 0900 	mov.w	r9, #0
 800a832:	9304      	str	r3, [sp, #16]
 800a834:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a836:	930a      	str	r3, [sp, #40]	; 0x28
 800a838:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a83c:	464f      	mov	r7, r9
 800a83e:	220a      	movs	r2, #10
 800a840:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a842:	7806      	ldrb	r6, [r0, #0]
 800a844:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a848:	b2d9      	uxtb	r1, r3
 800a84a:	2909      	cmp	r1, #9
 800a84c:	d92a      	bls.n	800a8a4 <_strtod_l+0x1bc>
 800a84e:	9907      	ldr	r1, [sp, #28]
 800a850:	462a      	mov	r2, r5
 800a852:	f003 fb4c 	bl	800deee <strncmp>
 800a856:	b398      	cbz	r0, 800a8c0 <_strtod_l+0x1d8>
 800a858:	2000      	movs	r0, #0
 800a85a:	4633      	mov	r3, r6
 800a85c:	463d      	mov	r5, r7
 800a85e:	9007      	str	r0, [sp, #28]
 800a860:	4602      	mov	r2, r0
 800a862:	2b65      	cmp	r3, #101	; 0x65
 800a864:	d001      	beq.n	800a86a <_strtod_l+0x182>
 800a866:	2b45      	cmp	r3, #69	; 0x45
 800a868:	d118      	bne.n	800a89c <_strtod_l+0x1b4>
 800a86a:	b91d      	cbnz	r5, 800a874 <_strtod_l+0x18c>
 800a86c:	9b04      	ldr	r3, [sp, #16]
 800a86e:	4303      	orrs	r3, r0
 800a870:	d098      	beq.n	800a7a4 <_strtod_l+0xbc>
 800a872:	2500      	movs	r5, #0
 800a874:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a878:	f108 0301 	add.w	r3, r8, #1
 800a87c:	931d      	str	r3, [sp, #116]	; 0x74
 800a87e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a882:	2b2b      	cmp	r3, #43	; 0x2b
 800a884:	d075      	beq.n	800a972 <_strtod_l+0x28a>
 800a886:	2b2d      	cmp	r3, #45	; 0x2d
 800a888:	d07b      	beq.n	800a982 <_strtod_l+0x29a>
 800a88a:	f04f 0c00 	mov.w	ip, #0
 800a88e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a892:	2909      	cmp	r1, #9
 800a894:	f240 8082 	bls.w	800a99c <_strtod_l+0x2b4>
 800a898:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a89c:	2600      	movs	r6, #0
 800a89e:	e09d      	b.n	800a9dc <_strtod_l+0x2f4>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	e7c4      	b.n	800a82e <_strtod_l+0x146>
 800a8a4:	2f08      	cmp	r7, #8
 800a8a6:	bfd8      	it	le
 800a8a8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a8aa:	f100 0001 	add.w	r0, r0, #1
 800a8ae:	bfda      	itte	le
 800a8b0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a8b4:	9309      	strle	r3, [sp, #36]	; 0x24
 800a8b6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a8ba:	3701      	adds	r7, #1
 800a8bc:	901d      	str	r0, [sp, #116]	; 0x74
 800a8be:	e7bf      	b.n	800a840 <_strtod_l+0x158>
 800a8c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8c2:	195a      	adds	r2, r3, r5
 800a8c4:	921d      	str	r2, [sp, #116]	; 0x74
 800a8c6:	5d5b      	ldrb	r3, [r3, r5]
 800a8c8:	2f00      	cmp	r7, #0
 800a8ca:	d037      	beq.n	800a93c <_strtod_l+0x254>
 800a8cc:	9007      	str	r0, [sp, #28]
 800a8ce:	463d      	mov	r5, r7
 800a8d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a8d4:	2a09      	cmp	r2, #9
 800a8d6:	d912      	bls.n	800a8fe <_strtod_l+0x216>
 800a8d8:	2201      	movs	r2, #1
 800a8da:	e7c2      	b.n	800a862 <_strtod_l+0x17a>
 800a8dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	921d      	str	r2, [sp, #116]	; 0x74
 800a8e2:	785b      	ldrb	r3, [r3, #1]
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	2b30      	cmp	r3, #48	; 0x30
 800a8e8:	d0f8      	beq.n	800a8dc <_strtod_l+0x1f4>
 800a8ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a8ee:	2a08      	cmp	r2, #8
 800a8f0:	f200 84db 	bhi.w	800b2aa <_strtod_l+0xbc2>
 800a8f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a8f6:	9007      	str	r0, [sp, #28]
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	920a      	str	r2, [sp, #40]	; 0x28
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	3b30      	subs	r3, #48	; 0x30
 800a900:	f100 0201 	add.w	r2, r0, #1
 800a904:	d014      	beq.n	800a930 <_strtod_l+0x248>
 800a906:	9907      	ldr	r1, [sp, #28]
 800a908:	4411      	add	r1, r2
 800a90a:	9107      	str	r1, [sp, #28]
 800a90c:	462a      	mov	r2, r5
 800a90e:	eb00 0e05 	add.w	lr, r0, r5
 800a912:	210a      	movs	r1, #10
 800a914:	4572      	cmp	r2, lr
 800a916:	d113      	bne.n	800a940 <_strtod_l+0x258>
 800a918:	182a      	adds	r2, r5, r0
 800a91a:	2a08      	cmp	r2, #8
 800a91c:	f105 0501 	add.w	r5, r5, #1
 800a920:	4405      	add	r5, r0
 800a922:	dc1c      	bgt.n	800a95e <_strtod_l+0x276>
 800a924:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a926:	220a      	movs	r2, #10
 800a928:	fb02 3301 	mla	r3, r2, r1, r3
 800a92c:	9309      	str	r3, [sp, #36]	; 0x24
 800a92e:	2200      	movs	r2, #0
 800a930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a932:	1c59      	adds	r1, r3, #1
 800a934:	911d      	str	r1, [sp, #116]	; 0x74
 800a936:	785b      	ldrb	r3, [r3, #1]
 800a938:	4610      	mov	r0, r2
 800a93a:	e7c9      	b.n	800a8d0 <_strtod_l+0x1e8>
 800a93c:	4638      	mov	r0, r7
 800a93e:	e7d2      	b.n	800a8e6 <_strtod_l+0x1fe>
 800a940:	2a08      	cmp	r2, #8
 800a942:	dc04      	bgt.n	800a94e <_strtod_l+0x266>
 800a944:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a946:	434e      	muls	r6, r1
 800a948:	9609      	str	r6, [sp, #36]	; 0x24
 800a94a:	3201      	adds	r2, #1
 800a94c:	e7e2      	b.n	800a914 <_strtod_l+0x22c>
 800a94e:	f102 0c01 	add.w	ip, r2, #1
 800a952:	f1bc 0f10 	cmp.w	ip, #16
 800a956:	bfd8      	it	le
 800a958:	fb01 f909 	mulle.w	r9, r1, r9
 800a95c:	e7f5      	b.n	800a94a <_strtod_l+0x262>
 800a95e:	2d10      	cmp	r5, #16
 800a960:	bfdc      	itt	le
 800a962:	220a      	movle	r2, #10
 800a964:	fb02 3909 	mlale	r9, r2, r9, r3
 800a968:	e7e1      	b.n	800a92e <_strtod_l+0x246>
 800a96a:	2300      	movs	r3, #0
 800a96c:	9307      	str	r3, [sp, #28]
 800a96e:	2201      	movs	r2, #1
 800a970:	e77c      	b.n	800a86c <_strtod_l+0x184>
 800a972:	f04f 0c00 	mov.w	ip, #0
 800a976:	f108 0302 	add.w	r3, r8, #2
 800a97a:	931d      	str	r3, [sp, #116]	; 0x74
 800a97c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a980:	e785      	b.n	800a88e <_strtod_l+0x1a6>
 800a982:	f04f 0c01 	mov.w	ip, #1
 800a986:	e7f6      	b.n	800a976 <_strtod_l+0x28e>
 800a988:	0800eb1c 	.word	0x0800eb1c
 800a98c:	0800e864 	.word	0x0800e864
 800a990:	7ff00000 	.word	0x7ff00000
 800a994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a996:	1c59      	adds	r1, r3, #1
 800a998:	911d      	str	r1, [sp, #116]	; 0x74
 800a99a:	785b      	ldrb	r3, [r3, #1]
 800a99c:	2b30      	cmp	r3, #48	; 0x30
 800a99e:	d0f9      	beq.n	800a994 <_strtod_l+0x2ac>
 800a9a0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a9a4:	2908      	cmp	r1, #8
 800a9a6:	f63f af79 	bhi.w	800a89c <_strtod_l+0x1b4>
 800a9aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a9ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9b0:	9308      	str	r3, [sp, #32]
 800a9b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9b4:	1c59      	adds	r1, r3, #1
 800a9b6:	911d      	str	r1, [sp, #116]	; 0x74
 800a9b8:	785b      	ldrb	r3, [r3, #1]
 800a9ba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a9be:	2e09      	cmp	r6, #9
 800a9c0:	d937      	bls.n	800aa32 <_strtod_l+0x34a>
 800a9c2:	9e08      	ldr	r6, [sp, #32]
 800a9c4:	1b89      	subs	r1, r1, r6
 800a9c6:	2908      	cmp	r1, #8
 800a9c8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a9cc:	dc02      	bgt.n	800a9d4 <_strtod_l+0x2ec>
 800a9ce:	4576      	cmp	r6, lr
 800a9d0:	bfa8      	it	ge
 800a9d2:	4676      	movge	r6, lr
 800a9d4:	f1bc 0f00 	cmp.w	ip, #0
 800a9d8:	d000      	beq.n	800a9dc <_strtod_l+0x2f4>
 800a9da:	4276      	negs	r6, r6
 800a9dc:	2d00      	cmp	r5, #0
 800a9de:	d14f      	bne.n	800aa80 <_strtod_l+0x398>
 800a9e0:	9904      	ldr	r1, [sp, #16]
 800a9e2:	4301      	orrs	r1, r0
 800a9e4:	f47f aec2 	bne.w	800a76c <_strtod_l+0x84>
 800a9e8:	2a00      	cmp	r2, #0
 800a9ea:	f47f aedb 	bne.w	800a7a4 <_strtod_l+0xbc>
 800a9ee:	2b69      	cmp	r3, #105	; 0x69
 800a9f0:	d027      	beq.n	800aa42 <_strtod_l+0x35a>
 800a9f2:	dc24      	bgt.n	800aa3e <_strtod_l+0x356>
 800a9f4:	2b49      	cmp	r3, #73	; 0x49
 800a9f6:	d024      	beq.n	800aa42 <_strtod_l+0x35a>
 800a9f8:	2b4e      	cmp	r3, #78	; 0x4e
 800a9fa:	f47f aed3 	bne.w	800a7a4 <_strtod_l+0xbc>
 800a9fe:	499e      	ldr	r1, [pc, #632]	; (800ac78 <_strtod_l+0x590>)
 800aa00:	a81d      	add	r0, sp, #116	; 0x74
 800aa02:	f002 f8b7 	bl	800cb74 <__match>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	f43f aecc 	beq.w	800a7a4 <_strtod_l+0xbc>
 800aa0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b28      	cmp	r3, #40	; 0x28
 800aa12:	d12d      	bne.n	800aa70 <_strtod_l+0x388>
 800aa14:	4999      	ldr	r1, [pc, #612]	; (800ac7c <_strtod_l+0x594>)
 800aa16:	aa20      	add	r2, sp, #128	; 0x80
 800aa18:	a81d      	add	r0, sp, #116	; 0x74
 800aa1a:	f002 f8bf 	bl	800cb9c <__hexnan>
 800aa1e:	2805      	cmp	r0, #5
 800aa20:	d126      	bne.n	800aa70 <_strtod_l+0x388>
 800aa22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa24:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800aa28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aa2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aa30:	e69c      	b.n	800a76c <_strtod_l+0x84>
 800aa32:	210a      	movs	r1, #10
 800aa34:	fb01 3e0e 	mla	lr, r1, lr, r3
 800aa38:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800aa3c:	e7b9      	b.n	800a9b2 <_strtod_l+0x2ca>
 800aa3e:	2b6e      	cmp	r3, #110	; 0x6e
 800aa40:	e7db      	b.n	800a9fa <_strtod_l+0x312>
 800aa42:	498f      	ldr	r1, [pc, #572]	; (800ac80 <_strtod_l+0x598>)
 800aa44:	a81d      	add	r0, sp, #116	; 0x74
 800aa46:	f002 f895 	bl	800cb74 <__match>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	f43f aeaa 	beq.w	800a7a4 <_strtod_l+0xbc>
 800aa50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa52:	498c      	ldr	r1, [pc, #560]	; (800ac84 <_strtod_l+0x59c>)
 800aa54:	3b01      	subs	r3, #1
 800aa56:	a81d      	add	r0, sp, #116	; 0x74
 800aa58:	931d      	str	r3, [sp, #116]	; 0x74
 800aa5a:	f002 f88b 	bl	800cb74 <__match>
 800aa5e:	b910      	cbnz	r0, 800aa66 <_strtod_l+0x37e>
 800aa60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aa62:	3301      	adds	r3, #1
 800aa64:	931d      	str	r3, [sp, #116]	; 0x74
 800aa66:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ac94 <_strtod_l+0x5ac>
 800aa6a:	f04f 0a00 	mov.w	sl, #0
 800aa6e:	e67d      	b.n	800a76c <_strtod_l+0x84>
 800aa70:	4885      	ldr	r0, [pc, #532]	; (800ac88 <_strtod_l+0x5a0>)
 800aa72:	f003 f9e1 	bl	800de38 <nan>
 800aa76:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aa7a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aa7e:	e675      	b.n	800a76c <_strtod_l+0x84>
 800aa80:	9b07      	ldr	r3, [sp, #28]
 800aa82:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa84:	1af3      	subs	r3, r6, r3
 800aa86:	2f00      	cmp	r7, #0
 800aa88:	bf08      	it	eq
 800aa8a:	462f      	moveq	r7, r5
 800aa8c:	2d10      	cmp	r5, #16
 800aa8e:	9308      	str	r3, [sp, #32]
 800aa90:	46a8      	mov	r8, r5
 800aa92:	bfa8      	it	ge
 800aa94:	f04f 0810 	movge.w	r8, #16
 800aa98:	f7f5 fd34 	bl	8000504 <__aeabi_ui2d>
 800aa9c:	2d09      	cmp	r5, #9
 800aa9e:	4682      	mov	sl, r0
 800aaa0:	468b      	mov	fp, r1
 800aaa2:	dd13      	ble.n	800aacc <_strtod_l+0x3e4>
 800aaa4:	4b79      	ldr	r3, [pc, #484]	; (800ac8c <_strtod_l+0x5a4>)
 800aaa6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aaaa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aaae:	f7f5 fda3 	bl	80005f8 <__aeabi_dmul>
 800aab2:	4682      	mov	sl, r0
 800aab4:	4648      	mov	r0, r9
 800aab6:	468b      	mov	fp, r1
 800aab8:	f7f5 fd24 	bl	8000504 <__aeabi_ui2d>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4650      	mov	r0, sl
 800aac2:	4659      	mov	r1, fp
 800aac4:	f7f5 fbe2 	bl	800028c <__adddf3>
 800aac8:	4682      	mov	sl, r0
 800aaca:	468b      	mov	fp, r1
 800aacc:	2d0f      	cmp	r5, #15
 800aace:	dc38      	bgt.n	800ab42 <_strtod_l+0x45a>
 800aad0:	9b08      	ldr	r3, [sp, #32]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	f43f ae4a 	beq.w	800a76c <_strtod_l+0x84>
 800aad8:	dd24      	ble.n	800ab24 <_strtod_l+0x43c>
 800aada:	2b16      	cmp	r3, #22
 800aadc:	dc0b      	bgt.n	800aaf6 <_strtod_l+0x40e>
 800aade:	4d6b      	ldr	r5, [pc, #428]	; (800ac8c <_strtod_l+0x5a4>)
 800aae0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800aae4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800aae8:	4652      	mov	r2, sl
 800aaea:	465b      	mov	r3, fp
 800aaec:	f7f5 fd84 	bl	80005f8 <__aeabi_dmul>
 800aaf0:	4682      	mov	sl, r0
 800aaf2:	468b      	mov	fp, r1
 800aaf4:	e63a      	b.n	800a76c <_strtod_l+0x84>
 800aaf6:	9a08      	ldr	r2, [sp, #32]
 800aaf8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aafc:	4293      	cmp	r3, r2
 800aafe:	db20      	blt.n	800ab42 <_strtod_l+0x45a>
 800ab00:	4c62      	ldr	r4, [pc, #392]	; (800ac8c <_strtod_l+0x5a4>)
 800ab02:	f1c5 050f 	rsb	r5, r5, #15
 800ab06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ab0a:	4652      	mov	r2, sl
 800ab0c:	465b      	mov	r3, fp
 800ab0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab12:	f7f5 fd71 	bl	80005f8 <__aeabi_dmul>
 800ab16:	9b08      	ldr	r3, [sp, #32]
 800ab18:	1b5d      	subs	r5, r3, r5
 800ab1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ab1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab22:	e7e3      	b.n	800aaec <_strtod_l+0x404>
 800ab24:	9b08      	ldr	r3, [sp, #32]
 800ab26:	3316      	adds	r3, #22
 800ab28:	db0b      	blt.n	800ab42 <_strtod_l+0x45a>
 800ab2a:	9b07      	ldr	r3, [sp, #28]
 800ab2c:	4a57      	ldr	r2, [pc, #348]	; (800ac8c <_strtod_l+0x5a4>)
 800ab2e:	1b9e      	subs	r6, r3, r6
 800ab30:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ab34:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab38:	4650      	mov	r0, sl
 800ab3a:	4659      	mov	r1, fp
 800ab3c:	f7f5 fe86 	bl	800084c <__aeabi_ddiv>
 800ab40:	e7d6      	b.n	800aaf0 <_strtod_l+0x408>
 800ab42:	9b08      	ldr	r3, [sp, #32]
 800ab44:	eba5 0808 	sub.w	r8, r5, r8
 800ab48:	4498      	add	r8, r3
 800ab4a:	f1b8 0f00 	cmp.w	r8, #0
 800ab4e:	dd71      	ble.n	800ac34 <_strtod_l+0x54c>
 800ab50:	f018 030f 	ands.w	r3, r8, #15
 800ab54:	d00a      	beq.n	800ab6c <_strtod_l+0x484>
 800ab56:	494d      	ldr	r1, [pc, #308]	; (800ac8c <_strtod_l+0x5a4>)
 800ab58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab5c:	4652      	mov	r2, sl
 800ab5e:	465b      	mov	r3, fp
 800ab60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab64:	f7f5 fd48 	bl	80005f8 <__aeabi_dmul>
 800ab68:	4682      	mov	sl, r0
 800ab6a:	468b      	mov	fp, r1
 800ab6c:	f038 080f 	bics.w	r8, r8, #15
 800ab70:	d04d      	beq.n	800ac0e <_strtod_l+0x526>
 800ab72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ab76:	dd22      	ble.n	800abbe <_strtod_l+0x4d6>
 800ab78:	2500      	movs	r5, #0
 800ab7a:	462e      	mov	r6, r5
 800ab7c:	9509      	str	r5, [sp, #36]	; 0x24
 800ab7e:	9507      	str	r5, [sp, #28]
 800ab80:	2322      	movs	r3, #34	; 0x22
 800ab82:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ac94 <_strtod_l+0x5ac>
 800ab86:	6023      	str	r3, [r4, #0]
 800ab88:	f04f 0a00 	mov.w	sl, #0
 800ab8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f43f adec 	beq.w	800a76c <_strtod_l+0x84>
 800ab94:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ab96:	4620      	mov	r0, r4
 800ab98:	f002 f962 	bl	800ce60 <_Bfree>
 800ab9c:	9907      	ldr	r1, [sp, #28]
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f002 f95e 	bl	800ce60 <_Bfree>
 800aba4:	4631      	mov	r1, r6
 800aba6:	4620      	mov	r0, r4
 800aba8:	f002 f95a 	bl	800ce60 <_Bfree>
 800abac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abae:	4620      	mov	r0, r4
 800abb0:	f002 f956 	bl	800ce60 <_Bfree>
 800abb4:	4629      	mov	r1, r5
 800abb6:	4620      	mov	r0, r4
 800abb8:	f002 f952 	bl	800ce60 <_Bfree>
 800abbc:	e5d6      	b.n	800a76c <_strtod_l+0x84>
 800abbe:	2300      	movs	r3, #0
 800abc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800abc4:	4650      	mov	r0, sl
 800abc6:	4659      	mov	r1, fp
 800abc8:	4699      	mov	r9, r3
 800abca:	f1b8 0f01 	cmp.w	r8, #1
 800abce:	dc21      	bgt.n	800ac14 <_strtod_l+0x52c>
 800abd0:	b10b      	cbz	r3, 800abd6 <_strtod_l+0x4ee>
 800abd2:	4682      	mov	sl, r0
 800abd4:	468b      	mov	fp, r1
 800abd6:	4b2e      	ldr	r3, [pc, #184]	; (800ac90 <_strtod_l+0x5a8>)
 800abd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800abdc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800abe0:	4652      	mov	r2, sl
 800abe2:	465b      	mov	r3, fp
 800abe4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800abe8:	f7f5 fd06 	bl	80005f8 <__aeabi_dmul>
 800abec:	4b29      	ldr	r3, [pc, #164]	; (800ac94 <_strtod_l+0x5ac>)
 800abee:	460a      	mov	r2, r1
 800abf0:	400b      	ands	r3, r1
 800abf2:	4929      	ldr	r1, [pc, #164]	; (800ac98 <_strtod_l+0x5b0>)
 800abf4:	428b      	cmp	r3, r1
 800abf6:	4682      	mov	sl, r0
 800abf8:	d8be      	bhi.n	800ab78 <_strtod_l+0x490>
 800abfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800abfe:	428b      	cmp	r3, r1
 800ac00:	bf86      	itte	hi
 800ac02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ac9c <_strtod_l+0x5b4>
 800ac06:	f04f 3aff 	movhi.w	sl, #4294967295
 800ac0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ac0e:	2300      	movs	r3, #0
 800ac10:	9304      	str	r3, [sp, #16]
 800ac12:	e081      	b.n	800ad18 <_strtod_l+0x630>
 800ac14:	f018 0f01 	tst.w	r8, #1
 800ac18:	d007      	beq.n	800ac2a <_strtod_l+0x542>
 800ac1a:	4b1d      	ldr	r3, [pc, #116]	; (800ac90 <_strtod_l+0x5a8>)
 800ac1c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 fce8 	bl	80005f8 <__aeabi_dmul>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	f109 0901 	add.w	r9, r9, #1
 800ac2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ac32:	e7ca      	b.n	800abca <_strtod_l+0x4e2>
 800ac34:	d0eb      	beq.n	800ac0e <_strtod_l+0x526>
 800ac36:	f1c8 0800 	rsb	r8, r8, #0
 800ac3a:	f018 020f 	ands.w	r2, r8, #15
 800ac3e:	d00a      	beq.n	800ac56 <_strtod_l+0x56e>
 800ac40:	4b12      	ldr	r3, [pc, #72]	; (800ac8c <_strtod_l+0x5a4>)
 800ac42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac46:	4650      	mov	r0, sl
 800ac48:	4659      	mov	r1, fp
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f7f5 fdfd 	bl	800084c <__aeabi_ddiv>
 800ac52:	4682      	mov	sl, r0
 800ac54:	468b      	mov	fp, r1
 800ac56:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ac5a:	d0d8      	beq.n	800ac0e <_strtod_l+0x526>
 800ac5c:	f1b8 0f1f 	cmp.w	r8, #31
 800ac60:	dd1e      	ble.n	800aca0 <_strtod_l+0x5b8>
 800ac62:	2500      	movs	r5, #0
 800ac64:	462e      	mov	r6, r5
 800ac66:	9509      	str	r5, [sp, #36]	; 0x24
 800ac68:	9507      	str	r5, [sp, #28]
 800ac6a:	2322      	movs	r3, #34	; 0x22
 800ac6c:	f04f 0a00 	mov.w	sl, #0
 800ac70:	f04f 0b00 	mov.w	fp, #0
 800ac74:	6023      	str	r3, [r4, #0]
 800ac76:	e789      	b.n	800ab8c <_strtod_l+0x4a4>
 800ac78:	0800e835 	.word	0x0800e835
 800ac7c:	0800e878 	.word	0x0800e878
 800ac80:	0800e82d 	.word	0x0800e82d
 800ac84:	0800e9bc 	.word	0x0800e9bc
 800ac88:	0800ecd8 	.word	0x0800ecd8
 800ac8c:	0800ebb8 	.word	0x0800ebb8
 800ac90:	0800eb90 	.word	0x0800eb90
 800ac94:	7ff00000 	.word	0x7ff00000
 800ac98:	7ca00000 	.word	0x7ca00000
 800ac9c:	7fefffff 	.word	0x7fefffff
 800aca0:	f018 0310 	ands.w	r3, r8, #16
 800aca4:	bf18      	it	ne
 800aca6:	236a      	movne	r3, #106	; 0x6a
 800aca8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800b060 <_strtod_l+0x978>
 800acac:	9304      	str	r3, [sp, #16]
 800acae:	4650      	mov	r0, sl
 800acb0:	4659      	mov	r1, fp
 800acb2:	2300      	movs	r3, #0
 800acb4:	f018 0f01 	tst.w	r8, #1
 800acb8:	d004      	beq.n	800acc4 <_strtod_l+0x5dc>
 800acba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800acbe:	f7f5 fc9b 	bl	80005f8 <__aeabi_dmul>
 800acc2:	2301      	movs	r3, #1
 800acc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800acc8:	f109 0908 	add.w	r9, r9, #8
 800accc:	d1f2      	bne.n	800acb4 <_strtod_l+0x5cc>
 800acce:	b10b      	cbz	r3, 800acd4 <_strtod_l+0x5ec>
 800acd0:	4682      	mov	sl, r0
 800acd2:	468b      	mov	fp, r1
 800acd4:	9b04      	ldr	r3, [sp, #16]
 800acd6:	b1bb      	cbz	r3, 800ad08 <_strtod_l+0x620>
 800acd8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800acdc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	4659      	mov	r1, fp
 800ace4:	dd10      	ble.n	800ad08 <_strtod_l+0x620>
 800ace6:	2b1f      	cmp	r3, #31
 800ace8:	f340 8128 	ble.w	800af3c <_strtod_l+0x854>
 800acec:	2b34      	cmp	r3, #52	; 0x34
 800acee:	bfde      	ittt	le
 800acf0:	3b20      	suble	r3, #32
 800acf2:	f04f 32ff 	movle.w	r2, #4294967295
 800acf6:	fa02 f303 	lslle.w	r3, r2, r3
 800acfa:	f04f 0a00 	mov.w	sl, #0
 800acfe:	bfcc      	ite	gt
 800ad00:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ad04:	ea03 0b01 	andle.w	fp, r3, r1
 800ad08:	2200      	movs	r2, #0
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	4650      	mov	r0, sl
 800ad0e:	4659      	mov	r1, fp
 800ad10:	f7f5 feda 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d1a4      	bne.n	800ac62 <_strtod_l+0x57a>
 800ad18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad1e:	462b      	mov	r3, r5
 800ad20:	463a      	mov	r2, r7
 800ad22:	4620      	mov	r0, r4
 800ad24:	f002 f908 	bl	800cf38 <__s2b>
 800ad28:	9009      	str	r0, [sp, #36]	; 0x24
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	f43f af24 	beq.w	800ab78 <_strtod_l+0x490>
 800ad30:	9b07      	ldr	r3, [sp, #28]
 800ad32:	1b9e      	subs	r6, r3, r6
 800ad34:	9b08      	ldr	r3, [sp, #32]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	bfb4      	ite	lt
 800ad3a:	4633      	movlt	r3, r6
 800ad3c:	2300      	movge	r3, #0
 800ad3e:	9310      	str	r3, [sp, #64]	; 0x40
 800ad40:	9b08      	ldr	r3, [sp, #32]
 800ad42:	2500      	movs	r5, #0
 800ad44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ad48:	9318      	str	r3, [sp, #96]	; 0x60
 800ad4a:	462e      	mov	r6, r5
 800ad4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad4e:	4620      	mov	r0, r4
 800ad50:	6859      	ldr	r1, [r3, #4]
 800ad52:	f002 f845 	bl	800cde0 <_Balloc>
 800ad56:	9007      	str	r0, [sp, #28]
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	f43f af11 	beq.w	800ab80 <_strtod_l+0x498>
 800ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad60:	691a      	ldr	r2, [r3, #16]
 800ad62:	3202      	adds	r2, #2
 800ad64:	f103 010c 	add.w	r1, r3, #12
 800ad68:	0092      	lsls	r2, r2, #2
 800ad6a:	300c      	adds	r0, #12
 800ad6c:	f7fe fd5c 	bl	8009828 <memcpy>
 800ad70:	ec4b ab10 	vmov	d0, sl, fp
 800ad74:	aa20      	add	r2, sp, #128	; 0x80
 800ad76:	a91f      	add	r1, sp, #124	; 0x7c
 800ad78:	4620      	mov	r0, r4
 800ad7a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ad7e:	f002 fc17 	bl	800d5b0 <__d2b>
 800ad82:	901e      	str	r0, [sp, #120]	; 0x78
 800ad84:	2800      	cmp	r0, #0
 800ad86:	f43f aefb 	beq.w	800ab80 <_strtod_l+0x498>
 800ad8a:	2101      	movs	r1, #1
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f002 f96d 	bl	800d06c <__i2b>
 800ad92:	4606      	mov	r6, r0
 800ad94:	2800      	cmp	r0, #0
 800ad96:	f43f aef3 	beq.w	800ab80 <_strtod_l+0x498>
 800ad9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ad9c:	9904      	ldr	r1, [sp, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	bfab      	itete	ge
 800ada2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ada4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ada6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ada8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800adac:	bfac      	ite	ge
 800adae:	eb03 0902 	addge.w	r9, r3, r2
 800adb2:	1ad7      	sublt	r7, r2, r3
 800adb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800adb6:	eba3 0801 	sub.w	r8, r3, r1
 800adba:	4490      	add	r8, r2
 800adbc:	4ba3      	ldr	r3, [pc, #652]	; (800b04c <_strtod_l+0x964>)
 800adbe:	f108 38ff 	add.w	r8, r8, #4294967295
 800adc2:	4598      	cmp	r8, r3
 800adc4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800adc8:	f280 80cc 	bge.w	800af64 <_strtod_l+0x87c>
 800adcc:	eba3 0308 	sub.w	r3, r3, r8
 800add0:	2b1f      	cmp	r3, #31
 800add2:	eba2 0203 	sub.w	r2, r2, r3
 800add6:	f04f 0101 	mov.w	r1, #1
 800adda:	f300 80b6 	bgt.w	800af4a <_strtod_l+0x862>
 800adde:	fa01 f303 	lsl.w	r3, r1, r3
 800ade2:	9311      	str	r3, [sp, #68]	; 0x44
 800ade4:	2300      	movs	r3, #0
 800ade6:	930c      	str	r3, [sp, #48]	; 0x30
 800ade8:	eb09 0802 	add.w	r8, r9, r2
 800adec:	9b04      	ldr	r3, [sp, #16]
 800adee:	45c1      	cmp	r9, r8
 800adf0:	4417      	add	r7, r2
 800adf2:	441f      	add	r7, r3
 800adf4:	464b      	mov	r3, r9
 800adf6:	bfa8      	it	ge
 800adf8:	4643      	movge	r3, r8
 800adfa:	42bb      	cmp	r3, r7
 800adfc:	bfa8      	it	ge
 800adfe:	463b      	movge	r3, r7
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfc2      	ittt	gt
 800ae04:	eba8 0803 	subgt.w	r8, r8, r3
 800ae08:	1aff      	subgt	r7, r7, r3
 800ae0a:	eba9 0903 	subgt.w	r9, r9, r3
 800ae0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dd17      	ble.n	800ae44 <_strtod_l+0x75c>
 800ae14:	4631      	mov	r1, r6
 800ae16:	461a      	mov	r2, r3
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f002 f9e3 	bl	800d1e4 <__pow5mult>
 800ae1e:	4606      	mov	r6, r0
 800ae20:	2800      	cmp	r0, #0
 800ae22:	f43f aead 	beq.w	800ab80 <_strtod_l+0x498>
 800ae26:	4601      	mov	r1, r0
 800ae28:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f002 f934 	bl	800d098 <__multiply>
 800ae30:	900f      	str	r0, [sp, #60]	; 0x3c
 800ae32:	2800      	cmp	r0, #0
 800ae34:	f43f aea4 	beq.w	800ab80 <_strtod_l+0x498>
 800ae38:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f002 f810 	bl	800ce60 <_Bfree>
 800ae40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae42:	931e      	str	r3, [sp, #120]	; 0x78
 800ae44:	f1b8 0f00 	cmp.w	r8, #0
 800ae48:	f300 8091 	bgt.w	800af6e <_strtod_l+0x886>
 800ae4c:	9b08      	ldr	r3, [sp, #32]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	dd08      	ble.n	800ae64 <_strtod_l+0x77c>
 800ae52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae54:	9907      	ldr	r1, [sp, #28]
 800ae56:	4620      	mov	r0, r4
 800ae58:	f002 f9c4 	bl	800d1e4 <__pow5mult>
 800ae5c:	9007      	str	r0, [sp, #28]
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	f43f ae8e 	beq.w	800ab80 <_strtod_l+0x498>
 800ae64:	2f00      	cmp	r7, #0
 800ae66:	dd08      	ble.n	800ae7a <_strtod_l+0x792>
 800ae68:	9907      	ldr	r1, [sp, #28]
 800ae6a:	463a      	mov	r2, r7
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f002 fa13 	bl	800d298 <__lshift>
 800ae72:	9007      	str	r0, [sp, #28]
 800ae74:	2800      	cmp	r0, #0
 800ae76:	f43f ae83 	beq.w	800ab80 <_strtod_l+0x498>
 800ae7a:	f1b9 0f00 	cmp.w	r9, #0
 800ae7e:	dd08      	ble.n	800ae92 <_strtod_l+0x7aa>
 800ae80:	4631      	mov	r1, r6
 800ae82:	464a      	mov	r2, r9
 800ae84:	4620      	mov	r0, r4
 800ae86:	f002 fa07 	bl	800d298 <__lshift>
 800ae8a:	4606      	mov	r6, r0
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	f43f ae77 	beq.w	800ab80 <_strtod_l+0x498>
 800ae92:	9a07      	ldr	r2, [sp, #28]
 800ae94:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ae96:	4620      	mov	r0, r4
 800ae98:	f002 fa86 	bl	800d3a8 <__mdiff>
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	f43f ae6e 	beq.w	800ab80 <_strtod_l+0x498>
 800aea4:	68c3      	ldr	r3, [r0, #12]
 800aea6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60c3      	str	r3, [r0, #12]
 800aeac:	4631      	mov	r1, r6
 800aeae:	f002 fa5f 	bl	800d370 <__mcmp>
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	da65      	bge.n	800af82 <_strtod_l+0x89a>
 800aeb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeb8:	ea53 030a 	orrs.w	r3, r3, sl
 800aebc:	f040 8087 	bne.w	800afce <_strtod_l+0x8e6>
 800aec0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f040 8082 	bne.w	800afce <_strtod_l+0x8e6>
 800aeca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aece:	0d1b      	lsrs	r3, r3, #20
 800aed0:	051b      	lsls	r3, r3, #20
 800aed2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aed6:	d97a      	bls.n	800afce <_strtod_l+0x8e6>
 800aed8:	696b      	ldr	r3, [r5, #20]
 800aeda:	b913      	cbnz	r3, 800aee2 <_strtod_l+0x7fa>
 800aedc:	692b      	ldr	r3, [r5, #16]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	dd75      	ble.n	800afce <_strtod_l+0x8e6>
 800aee2:	4629      	mov	r1, r5
 800aee4:	2201      	movs	r2, #1
 800aee6:	4620      	mov	r0, r4
 800aee8:	f002 f9d6 	bl	800d298 <__lshift>
 800aeec:	4631      	mov	r1, r6
 800aeee:	4605      	mov	r5, r0
 800aef0:	f002 fa3e 	bl	800d370 <__mcmp>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	dd6a      	ble.n	800afce <_strtod_l+0x8e6>
 800aef8:	9904      	ldr	r1, [sp, #16]
 800aefa:	4a55      	ldr	r2, [pc, #340]	; (800b050 <_strtod_l+0x968>)
 800aefc:	465b      	mov	r3, fp
 800aefe:	2900      	cmp	r1, #0
 800af00:	f000 8085 	beq.w	800b00e <_strtod_l+0x926>
 800af04:	ea02 010b 	and.w	r1, r2, fp
 800af08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800af0c:	dc7f      	bgt.n	800b00e <_strtod_l+0x926>
 800af0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800af12:	f77f aeaa 	ble.w	800ac6a <_strtod_l+0x582>
 800af16:	4a4f      	ldr	r2, [pc, #316]	; (800b054 <_strtod_l+0x96c>)
 800af18:	2300      	movs	r3, #0
 800af1a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800af1e:	4650      	mov	r0, sl
 800af20:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800af24:	4659      	mov	r1, fp
 800af26:	f7f5 fb67 	bl	80005f8 <__aeabi_dmul>
 800af2a:	460b      	mov	r3, r1
 800af2c:	4303      	orrs	r3, r0
 800af2e:	bf08      	it	eq
 800af30:	2322      	moveq	r3, #34	; 0x22
 800af32:	4682      	mov	sl, r0
 800af34:	468b      	mov	fp, r1
 800af36:	bf08      	it	eq
 800af38:	6023      	streq	r3, [r4, #0]
 800af3a:	e62b      	b.n	800ab94 <_strtod_l+0x4ac>
 800af3c:	f04f 32ff 	mov.w	r2, #4294967295
 800af40:	fa02 f303 	lsl.w	r3, r2, r3
 800af44:	ea03 0a0a 	and.w	sl, r3, sl
 800af48:	e6de      	b.n	800ad08 <_strtod_l+0x620>
 800af4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800af4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800af52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800af56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800af5a:	fa01 f308 	lsl.w	r3, r1, r8
 800af5e:	930c      	str	r3, [sp, #48]	; 0x30
 800af60:	9111      	str	r1, [sp, #68]	; 0x44
 800af62:	e741      	b.n	800ade8 <_strtod_l+0x700>
 800af64:	2300      	movs	r3, #0
 800af66:	930c      	str	r3, [sp, #48]	; 0x30
 800af68:	2301      	movs	r3, #1
 800af6a:	9311      	str	r3, [sp, #68]	; 0x44
 800af6c:	e73c      	b.n	800ade8 <_strtod_l+0x700>
 800af6e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800af70:	4642      	mov	r2, r8
 800af72:	4620      	mov	r0, r4
 800af74:	f002 f990 	bl	800d298 <__lshift>
 800af78:	901e      	str	r0, [sp, #120]	; 0x78
 800af7a:	2800      	cmp	r0, #0
 800af7c:	f47f af66 	bne.w	800ae4c <_strtod_l+0x764>
 800af80:	e5fe      	b.n	800ab80 <_strtod_l+0x498>
 800af82:	465f      	mov	r7, fp
 800af84:	d16e      	bne.n	800b064 <_strtod_l+0x97c>
 800af86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af8c:	b342      	cbz	r2, 800afe0 <_strtod_l+0x8f8>
 800af8e:	4a32      	ldr	r2, [pc, #200]	; (800b058 <_strtod_l+0x970>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d128      	bne.n	800afe6 <_strtod_l+0x8fe>
 800af94:	9b04      	ldr	r3, [sp, #16]
 800af96:	4650      	mov	r0, sl
 800af98:	b1eb      	cbz	r3, 800afd6 <_strtod_l+0x8ee>
 800af9a:	4a2d      	ldr	r2, [pc, #180]	; (800b050 <_strtod_l+0x968>)
 800af9c:	403a      	ands	r2, r7
 800af9e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800afa2:	f04f 31ff 	mov.w	r1, #4294967295
 800afa6:	d819      	bhi.n	800afdc <_strtod_l+0x8f4>
 800afa8:	0d12      	lsrs	r2, r2, #20
 800afaa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800afae:	fa01 f303 	lsl.w	r3, r1, r3
 800afb2:	4298      	cmp	r0, r3
 800afb4:	d117      	bne.n	800afe6 <_strtod_l+0x8fe>
 800afb6:	4b29      	ldr	r3, [pc, #164]	; (800b05c <_strtod_l+0x974>)
 800afb8:	429f      	cmp	r7, r3
 800afba:	d102      	bne.n	800afc2 <_strtod_l+0x8da>
 800afbc:	3001      	adds	r0, #1
 800afbe:	f43f addf 	beq.w	800ab80 <_strtod_l+0x498>
 800afc2:	4b23      	ldr	r3, [pc, #140]	; (800b050 <_strtod_l+0x968>)
 800afc4:	403b      	ands	r3, r7
 800afc6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800afca:	f04f 0a00 	mov.w	sl, #0
 800afce:	9b04      	ldr	r3, [sp, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1a0      	bne.n	800af16 <_strtod_l+0x82e>
 800afd4:	e5de      	b.n	800ab94 <_strtod_l+0x4ac>
 800afd6:	f04f 33ff 	mov.w	r3, #4294967295
 800afda:	e7ea      	b.n	800afb2 <_strtod_l+0x8ca>
 800afdc:	460b      	mov	r3, r1
 800afde:	e7e8      	b.n	800afb2 <_strtod_l+0x8ca>
 800afe0:	ea53 030a 	orrs.w	r3, r3, sl
 800afe4:	d088      	beq.n	800aef8 <_strtod_l+0x810>
 800afe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afe8:	b1db      	cbz	r3, 800b022 <_strtod_l+0x93a>
 800afea:	423b      	tst	r3, r7
 800afec:	d0ef      	beq.n	800afce <_strtod_l+0x8e6>
 800afee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aff0:	9a04      	ldr	r2, [sp, #16]
 800aff2:	4650      	mov	r0, sl
 800aff4:	4659      	mov	r1, fp
 800aff6:	b1c3      	cbz	r3, 800b02a <_strtod_l+0x942>
 800aff8:	f7ff fb5a 	bl	800a6b0 <sulp>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b004:	f7f5 f942 	bl	800028c <__adddf3>
 800b008:	4682      	mov	sl, r0
 800b00a:	468b      	mov	fp, r1
 800b00c:	e7df      	b.n	800afce <_strtod_l+0x8e6>
 800b00e:	4013      	ands	r3, r2
 800b010:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b014:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b018:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b01c:	f04f 3aff 	mov.w	sl, #4294967295
 800b020:	e7d5      	b.n	800afce <_strtod_l+0x8e6>
 800b022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b024:	ea13 0f0a 	tst.w	r3, sl
 800b028:	e7e0      	b.n	800afec <_strtod_l+0x904>
 800b02a:	f7ff fb41 	bl	800a6b0 <sulp>
 800b02e:	4602      	mov	r2, r0
 800b030:	460b      	mov	r3, r1
 800b032:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b036:	f7f5 f927 	bl	8000288 <__aeabi_dsub>
 800b03a:	2200      	movs	r2, #0
 800b03c:	2300      	movs	r3, #0
 800b03e:	4682      	mov	sl, r0
 800b040:	468b      	mov	fp, r1
 800b042:	f7f5 fd41 	bl	8000ac8 <__aeabi_dcmpeq>
 800b046:	2800      	cmp	r0, #0
 800b048:	d0c1      	beq.n	800afce <_strtod_l+0x8e6>
 800b04a:	e60e      	b.n	800ac6a <_strtod_l+0x582>
 800b04c:	fffffc02 	.word	0xfffffc02
 800b050:	7ff00000 	.word	0x7ff00000
 800b054:	39500000 	.word	0x39500000
 800b058:	000fffff 	.word	0x000fffff
 800b05c:	7fefffff 	.word	0x7fefffff
 800b060:	0800e890 	.word	0x0800e890
 800b064:	4631      	mov	r1, r6
 800b066:	4628      	mov	r0, r5
 800b068:	f002 fafe 	bl	800d668 <__ratio>
 800b06c:	ec59 8b10 	vmov	r8, r9, d0
 800b070:	ee10 0a10 	vmov	r0, s0
 800b074:	2200      	movs	r2, #0
 800b076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b07a:	4649      	mov	r1, r9
 800b07c:	f7f5 fd38 	bl	8000af0 <__aeabi_dcmple>
 800b080:	2800      	cmp	r0, #0
 800b082:	d07c      	beq.n	800b17e <_strtod_l+0xa96>
 800b084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b086:	2b00      	cmp	r3, #0
 800b088:	d04c      	beq.n	800b124 <_strtod_l+0xa3c>
 800b08a:	4b95      	ldr	r3, [pc, #596]	; (800b2e0 <_strtod_l+0xbf8>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b092:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b2e0 <_strtod_l+0xbf8>
 800b096:	f04f 0800 	mov.w	r8, #0
 800b09a:	4b92      	ldr	r3, [pc, #584]	; (800b2e4 <_strtod_l+0xbfc>)
 800b09c:	403b      	ands	r3, r7
 800b09e:	9311      	str	r3, [sp, #68]	; 0x44
 800b0a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b0a2:	4b91      	ldr	r3, [pc, #580]	; (800b2e8 <_strtod_l+0xc00>)
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	f040 80b2 	bne.w	800b20e <_strtod_l+0xb26>
 800b0aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b0ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0b2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b0b6:	ec4b ab10 	vmov	d0, sl, fp
 800b0ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800b0be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b0c2:	f002 f9f9 	bl	800d4b8 <__ulp>
 800b0c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b0ca:	ec53 2b10 	vmov	r2, r3, d0
 800b0ce:	f7f5 fa93 	bl	80005f8 <__aeabi_dmul>
 800b0d2:	4652      	mov	r2, sl
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	f7f5 f8d9 	bl	800028c <__adddf3>
 800b0da:	460b      	mov	r3, r1
 800b0dc:	4981      	ldr	r1, [pc, #516]	; (800b2e4 <_strtod_l+0xbfc>)
 800b0de:	4a83      	ldr	r2, [pc, #524]	; (800b2ec <_strtod_l+0xc04>)
 800b0e0:	4019      	ands	r1, r3
 800b0e2:	4291      	cmp	r1, r2
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	d95e      	bls.n	800b1a6 <_strtod_l+0xabe>
 800b0e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d103      	bne.n	800b0fa <_strtod_l+0xa12>
 800b0f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	f43f ad43 	beq.w	800ab80 <_strtod_l+0x498>
 800b0fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b2f8 <_strtod_l+0xc10>
 800b0fe:	f04f 3aff 	mov.w	sl, #4294967295
 800b102:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b104:	4620      	mov	r0, r4
 800b106:	f001 feab 	bl	800ce60 <_Bfree>
 800b10a:	9907      	ldr	r1, [sp, #28]
 800b10c:	4620      	mov	r0, r4
 800b10e:	f001 fea7 	bl	800ce60 <_Bfree>
 800b112:	4631      	mov	r1, r6
 800b114:	4620      	mov	r0, r4
 800b116:	f001 fea3 	bl	800ce60 <_Bfree>
 800b11a:	4629      	mov	r1, r5
 800b11c:	4620      	mov	r0, r4
 800b11e:	f001 fe9f 	bl	800ce60 <_Bfree>
 800b122:	e613      	b.n	800ad4c <_strtod_l+0x664>
 800b124:	f1ba 0f00 	cmp.w	sl, #0
 800b128:	d11b      	bne.n	800b162 <_strtod_l+0xa7a>
 800b12a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b12e:	b9f3      	cbnz	r3, 800b16e <_strtod_l+0xa86>
 800b130:	4b6b      	ldr	r3, [pc, #428]	; (800b2e0 <_strtod_l+0xbf8>)
 800b132:	2200      	movs	r2, #0
 800b134:	4640      	mov	r0, r8
 800b136:	4649      	mov	r1, r9
 800b138:	f7f5 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800b13c:	b9d0      	cbnz	r0, 800b174 <_strtod_l+0xa8c>
 800b13e:	4640      	mov	r0, r8
 800b140:	4649      	mov	r1, r9
 800b142:	4b6b      	ldr	r3, [pc, #428]	; (800b2f0 <_strtod_l+0xc08>)
 800b144:	2200      	movs	r2, #0
 800b146:	f7f5 fa57 	bl	80005f8 <__aeabi_dmul>
 800b14a:	4680      	mov	r8, r0
 800b14c:	4689      	mov	r9, r1
 800b14e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b152:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b156:	931b      	str	r3, [sp, #108]	; 0x6c
 800b158:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b15c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b160:	e79b      	b.n	800b09a <_strtod_l+0x9b2>
 800b162:	f1ba 0f01 	cmp.w	sl, #1
 800b166:	d102      	bne.n	800b16e <_strtod_l+0xa86>
 800b168:	2f00      	cmp	r7, #0
 800b16a:	f43f ad7e 	beq.w	800ac6a <_strtod_l+0x582>
 800b16e:	4b61      	ldr	r3, [pc, #388]	; (800b2f4 <_strtod_l+0xc0c>)
 800b170:	2200      	movs	r2, #0
 800b172:	e78c      	b.n	800b08e <_strtod_l+0x9a6>
 800b174:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b2f0 <_strtod_l+0xc08>
 800b178:	f04f 0800 	mov.w	r8, #0
 800b17c:	e7e7      	b.n	800b14e <_strtod_l+0xa66>
 800b17e:	4b5c      	ldr	r3, [pc, #368]	; (800b2f0 <_strtod_l+0xc08>)
 800b180:	4640      	mov	r0, r8
 800b182:	4649      	mov	r1, r9
 800b184:	2200      	movs	r2, #0
 800b186:	f7f5 fa37 	bl	80005f8 <__aeabi_dmul>
 800b18a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b18c:	4680      	mov	r8, r0
 800b18e:	4689      	mov	r9, r1
 800b190:	b933      	cbnz	r3, 800b1a0 <_strtod_l+0xab8>
 800b192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b196:	9012      	str	r0, [sp, #72]	; 0x48
 800b198:	9313      	str	r3, [sp, #76]	; 0x4c
 800b19a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b19e:	e7dd      	b.n	800b15c <_strtod_l+0xa74>
 800b1a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b1a4:	e7f9      	b.n	800b19a <_strtod_l+0xab2>
 800b1a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b1aa:	9b04      	ldr	r3, [sp, #16]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1a8      	bne.n	800b102 <_strtod_l+0xa1a>
 800b1b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b1b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1b6:	0d1b      	lsrs	r3, r3, #20
 800b1b8:	051b      	lsls	r3, r3, #20
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d1a1      	bne.n	800b102 <_strtod_l+0xa1a>
 800b1be:	4640      	mov	r0, r8
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	f7f5 fd79 	bl	8000cb8 <__aeabi_d2lz>
 800b1c6:	f7f5 f9e9 	bl	800059c <__aeabi_l2d>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	4640      	mov	r0, r8
 800b1d0:	4649      	mov	r1, r9
 800b1d2:	f7f5 f859 	bl	8000288 <__aeabi_dsub>
 800b1d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1dc:	ea43 030a 	orr.w	r3, r3, sl
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	4680      	mov	r8, r0
 800b1e4:	4689      	mov	r9, r1
 800b1e6:	d053      	beq.n	800b290 <_strtod_l+0xba8>
 800b1e8:	a335      	add	r3, pc, #212	; (adr r3, 800b2c0 <_strtod_l+0xbd8>)
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	f7f5 fc75 	bl	8000adc <__aeabi_dcmplt>
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	f47f acce 	bne.w	800ab94 <_strtod_l+0x4ac>
 800b1f8:	a333      	add	r3, pc, #204	; (adr r3, 800b2c8 <_strtod_l+0xbe0>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	4640      	mov	r0, r8
 800b200:	4649      	mov	r1, r9
 800b202:	f7f5 fc89 	bl	8000b18 <__aeabi_dcmpgt>
 800b206:	2800      	cmp	r0, #0
 800b208:	f43f af7b 	beq.w	800b102 <_strtod_l+0xa1a>
 800b20c:	e4c2      	b.n	800ab94 <_strtod_l+0x4ac>
 800b20e:	9b04      	ldr	r3, [sp, #16]
 800b210:	b333      	cbz	r3, 800b260 <_strtod_l+0xb78>
 800b212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b214:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b218:	d822      	bhi.n	800b260 <_strtod_l+0xb78>
 800b21a:	a32d      	add	r3, pc, #180	; (adr r3, 800b2d0 <_strtod_l+0xbe8>)
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	4640      	mov	r0, r8
 800b222:	4649      	mov	r1, r9
 800b224:	f7f5 fc64 	bl	8000af0 <__aeabi_dcmple>
 800b228:	b1a0      	cbz	r0, 800b254 <_strtod_l+0xb6c>
 800b22a:	4649      	mov	r1, r9
 800b22c:	4640      	mov	r0, r8
 800b22e:	f7f5 fcbb 	bl	8000ba8 <__aeabi_d2uiz>
 800b232:	2801      	cmp	r0, #1
 800b234:	bf38      	it	cc
 800b236:	2001      	movcc	r0, #1
 800b238:	f7f5 f964 	bl	8000504 <__aeabi_ui2d>
 800b23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b23e:	4680      	mov	r8, r0
 800b240:	4689      	mov	r9, r1
 800b242:	bb13      	cbnz	r3, 800b28a <_strtod_l+0xba2>
 800b244:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b248:	9014      	str	r0, [sp, #80]	; 0x50
 800b24a:	9315      	str	r3, [sp, #84]	; 0x54
 800b24c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b250:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b256:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b258:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b25c:	1a9b      	subs	r3, r3, r2
 800b25e:	930d      	str	r3, [sp, #52]	; 0x34
 800b260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b264:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b268:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b26c:	f002 f924 	bl	800d4b8 <__ulp>
 800b270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b274:	ec53 2b10 	vmov	r2, r3, d0
 800b278:	f7f5 f9be 	bl	80005f8 <__aeabi_dmul>
 800b27c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b280:	f7f5 f804 	bl	800028c <__adddf3>
 800b284:	4682      	mov	sl, r0
 800b286:	468b      	mov	fp, r1
 800b288:	e78f      	b.n	800b1aa <_strtod_l+0xac2>
 800b28a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b28e:	e7dd      	b.n	800b24c <_strtod_l+0xb64>
 800b290:	a311      	add	r3, pc, #68	; (adr r3, 800b2d8 <_strtod_l+0xbf0>)
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f7f5 fc21 	bl	8000adc <__aeabi_dcmplt>
 800b29a:	e7b4      	b.n	800b206 <_strtod_l+0xb1e>
 800b29c:	2300      	movs	r3, #0
 800b29e:	930e      	str	r3, [sp, #56]	; 0x38
 800b2a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b2a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2a4:	6013      	str	r3, [r2, #0]
 800b2a6:	f7ff ba65 	b.w	800a774 <_strtod_l+0x8c>
 800b2aa:	2b65      	cmp	r3, #101	; 0x65
 800b2ac:	f43f ab5d 	beq.w	800a96a <_strtod_l+0x282>
 800b2b0:	2b45      	cmp	r3, #69	; 0x45
 800b2b2:	f43f ab5a 	beq.w	800a96a <_strtod_l+0x282>
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f7ff bb92 	b.w	800a9e0 <_strtod_l+0x2f8>
 800b2bc:	f3af 8000 	nop.w
 800b2c0:	94a03595 	.word	0x94a03595
 800b2c4:	3fdfffff 	.word	0x3fdfffff
 800b2c8:	35afe535 	.word	0x35afe535
 800b2cc:	3fe00000 	.word	0x3fe00000
 800b2d0:	ffc00000 	.word	0xffc00000
 800b2d4:	41dfffff 	.word	0x41dfffff
 800b2d8:	94a03595 	.word	0x94a03595
 800b2dc:	3fcfffff 	.word	0x3fcfffff
 800b2e0:	3ff00000 	.word	0x3ff00000
 800b2e4:	7ff00000 	.word	0x7ff00000
 800b2e8:	7fe00000 	.word	0x7fe00000
 800b2ec:	7c9fffff 	.word	0x7c9fffff
 800b2f0:	3fe00000 	.word	0x3fe00000
 800b2f4:	bff00000 	.word	0xbff00000
 800b2f8:	7fefffff 	.word	0x7fefffff

0800b2fc <_strtod_r>:
 800b2fc:	4b01      	ldr	r3, [pc, #4]	; (800b304 <_strtod_r+0x8>)
 800b2fe:	f7ff b9f3 	b.w	800a6e8 <_strtod_l>
 800b302:	bf00      	nop
 800b304:	20000074 	.word	0x20000074

0800b308 <_strtol_l.isra.0>:
 800b308:	2b01      	cmp	r3, #1
 800b30a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b30e:	d001      	beq.n	800b314 <_strtol_l.isra.0+0xc>
 800b310:	2b24      	cmp	r3, #36	; 0x24
 800b312:	d906      	bls.n	800b322 <_strtol_l.isra.0+0x1a>
 800b314:	f7fe fa5e 	bl	80097d4 <__errno>
 800b318:	2316      	movs	r3, #22
 800b31a:	6003      	str	r3, [r0, #0]
 800b31c:	2000      	movs	r0, #0
 800b31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b322:	4f3a      	ldr	r7, [pc, #232]	; (800b40c <_strtol_l.isra.0+0x104>)
 800b324:	468e      	mov	lr, r1
 800b326:	4676      	mov	r6, lr
 800b328:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b32c:	5de5      	ldrb	r5, [r4, r7]
 800b32e:	f015 0508 	ands.w	r5, r5, #8
 800b332:	d1f8      	bne.n	800b326 <_strtol_l.isra.0+0x1e>
 800b334:	2c2d      	cmp	r4, #45	; 0x2d
 800b336:	d134      	bne.n	800b3a2 <_strtol_l.isra.0+0x9a>
 800b338:	f89e 4000 	ldrb.w	r4, [lr]
 800b33c:	f04f 0801 	mov.w	r8, #1
 800b340:	f106 0e02 	add.w	lr, r6, #2
 800b344:	2b00      	cmp	r3, #0
 800b346:	d05c      	beq.n	800b402 <_strtol_l.isra.0+0xfa>
 800b348:	2b10      	cmp	r3, #16
 800b34a:	d10c      	bne.n	800b366 <_strtol_l.isra.0+0x5e>
 800b34c:	2c30      	cmp	r4, #48	; 0x30
 800b34e:	d10a      	bne.n	800b366 <_strtol_l.isra.0+0x5e>
 800b350:	f89e 4000 	ldrb.w	r4, [lr]
 800b354:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b358:	2c58      	cmp	r4, #88	; 0x58
 800b35a:	d14d      	bne.n	800b3f8 <_strtol_l.isra.0+0xf0>
 800b35c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b360:	2310      	movs	r3, #16
 800b362:	f10e 0e02 	add.w	lr, lr, #2
 800b366:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b36a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b36e:	2600      	movs	r6, #0
 800b370:	fbbc f9f3 	udiv	r9, ip, r3
 800b374:	4635      	mov	r5, r6
 800b376:	fb03 ca19 	mls	sl, r3, r9, ip
 800b37a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b37e:	2f09      	cmp	r7, #9
 800b380:	d818      	bhi.n	800b3b4 <_strtol_l.isra.0+0xac>
 800b382:	463c      	mov	r4, r7
 800b384:	42a3      	cmp	r3, r4
 800b386:	dd24      	ble.n	800b3d2 <_strtol_l.isra.0+0xca>
 800b388:	2e00      	cmp	r6, #0
 800b38a:	db1f      	blt.n	800b3cc <_strtol_l.isra.0+0xc4>
 800b38c:	45a9      	cmp	r9, r5
 800b38e:	d31d      	bcc.n	800b3cc <_strtol_l.isra.0+0xc4>
 800b390:	d101      	bne.n	800b396 <_strtol_l.isra.0+0x8e>
 800b392:	45a2      	cmp	sl, r4
 800b394:	db1a      	blt.n	800b3cc <_strtol_l.isra.0+0xc4>
 800b396:	fb05 4503 	mla	r5, r5, r3, r4
 800b39a:	2601      	movs	r6, #1
 800b39c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b3a0:	e7eb      	b.n	800b37a <_strtol_l.isra.0+0x72>
 800b3a2:	2c2b      	cmp	r4, #43	; 0x2b
 800b3a4:	bf08      	it	eq
 800b3a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b3aa:	46a8      	mov	r8, r5
 800b3ac:	bf08      	it	eq
 800b3ae:	f106 0e02 	addeq.w	lr, r6, #2
 800b3b2:	e7c7      	b.n	800b344 <_strtol_l.isra.0+0x3c>
 800b3b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b3b8:	2f19      	cmp	r7, #25
 800b3ba:	d801      	bhi.n	800b3c0 <_strtol_l.isra.0+0xb8>
 800b3bc:	3c37      	subs	r4, #55	; 0x37
 800b3be:	e7e1      	b.n	800b384 <_strtol_l.isra.0+0x7c>
 800b3c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b3c4:	2f19      	cmp	r7, #25
 800b3c6:	d804      	bhi.n	800b3d2 <_strtol_l.isra.0+0xca>
 800b3c8:	3c57      	subs	r4, #87	; 0x57
 800b3ca:	e7db      	b.n	800b384 <_strtol_l.isra.0+0x7c>
 800b3cc:	f04f 36ff 	mov.w	r6, #4294967295
 800b3d0:	e7e4      	b.n	800b39c <_strtol_l.isra.0+0x94>
 800b3d2:	2e00      	cmp	r6, #0
 800b3d4:	da05      	bge.n	800b3e2 <_strtol_l.isra.0+0xda>
 800b3d6:	2322      	movs	r3, #34	; 0x22
 800b3d8:	6003      	str	r3, [r0, #0]
 800b3da:	4665      	mov	r5, ip
 800b3dc:	b942      	cbnz	r2, 800b3f0 <_strtol_l.isra.0+0xe8>
 800b3de:	4628      	mov	r0, r5
 800b3e0:	e79d      	b.n	800b31e <_strtol_l.isra.0+0x16>
 800b3e2:	f1b8 0f00 	cmp.w	r8, #0
 800b3e6:	d000      	beq.n	800b3ea <_strtol_l.isra.0+0xe2>
 800b3e8:	426d      	negs	r5, r5
 800b3ea:	2a00      	cmp	r2, #0
 800b3ec:	d0f7      	beq.n	800b3de <_strtol_l.isra.0+0xd6>
 800b3ee:	b10e      	cbz	r6, 800b3f4 <_strtol_l.isra.0+0xec>
 800b3f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b3f4:	6011      	str	r1, [r2, #0]
 800b3f6:	e7f2      	b.n	800b3de <_strtol_l.isra.0+0xd6>
 800b3f8:	2430      	movs	r4, #48	; 0x30
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1b3      	bne.n	800b366 <_strtol_l.isra.0+0x5e>
 800b3fe:	2308      	movs	r3, #8
 800b400:	e7b1      	b.n	800b366 <_strtol_l.isra.0+0x5e>
 800b402:	2c30      	cmp	r4, #48	; 0x30
 800b404:	d0a4      	beq.n	800b350 <_strtol_l.isra.0+0x48>
 800b406:	230a      	movs	r3, #10
 800b408:	e7ad      	b.n	800b366 <_strtol_l.isra.0+0x5e>
 800b40a:	bf00      	nop
 800b40c:	0800e8b9 	.word	0x0800e8b9

0800b410 <_strtol_r>:
 800b410:	f7ff bf7a 	b.w	800b308 <_strtol_l.isra.0>

0800b414 <__swbuf_r>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	460e      	mov	r6, r1
 800b418:	4614      	mov	r4, r2
 800b41a:	4605      	mov	r5, r0
 800b41c:	b118      	cbz	r0, 800b426 <__swbuf_r+0x12>
 800b41e:	6983      	ldr	r3, [r0, #24]
 800b420:	b90b      	cbnz	r3, 800b426 <__swbuf_r+0x12>
 800b422:	f001 f84b 	bl	800c4bc <__sinit>
 800b426:	4b21      	ldr	r3, [pc, #132]	; (800b4ac <__swbuf_r+0x98>)
 800b428:	429c      	cmp	r4, r3
 800b42a:	d12b      	bne.n	800b484 <__swbuf_r+0x70>
 800b42c:	686c      	ldr	r4, [r5, #4]
 800b42e:	69a3      	ldr	r3, [r4, #24]
 800b430:	60a3      	str	r3, [r4, #8]
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	071a      	lsls	r2, r3, #28
 800b436:	d52f      	bpl.n	800b498 <__swbuf_r+0x84>
 800b438:	6923      	ldr	r3, [r4, #16]
 800b43a:	b36b      	cbz	r3, 800b498 <__swbuf_r+0x84>
 800b43c:	6923      	ldr	r3, [r4, #16]
 800b43e:	6820      	ldr	r0, [r4, #0]
 800b440:	1ac0      	subs	r0, r0, r3
 800b442:	6963      	ldr	r3, [r4, #20]
 800b444:	b2f6      	uxtb	r6, r6
 800b446:	4283      	cmp	r3, r0
 800b448:	4637      	mov	r7, r6
 800b44a:	dc04      	bgt.n	800b456 <__swbuf_r+0x42>
 800b44c:	4621      	mov	r1, r4
 800b44e:	4628      	mov	r0, r5
 800b450:	f000 ffa0 	bl	800c394 <_fflush_r>
 800b454:	bb30      	cbnz	r0, 800b4a4 <__swbuf_r+0x90>
 800b456:	68a3      	ldr	r3, [r4, #8]
 800b458:	3b01      	subs	r3, #1
 800b45a:	60a3      	str	r3, [r4, #8]
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	6022      	str	r2, [r4, #0]
 800b462:	701e      	strb	r6, [r3, #0]
 800b464:	6963      	ldr	r3, [r4, #20]
 800b466:	3001      	adds	r0, #1
 800b468:	4283      	cmp	r3, r0
 800b46a:	d004      	beq.n	800b476 <__swbuf_r+0x62>
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	07db      	lsls	r3, r3, #31
 800b470:	d506      	bpl.n	800b480 <__swbuf_r+0x6c>
 800b472:	2e0a      	cmp	r6, #10
 800b474:	d104      	bne.n	800b480 <__swbuf_r+0x6c>
 800b476:	4621      	mov	r1, r4
 800b478:	4628      	mov	r0, r5
 800b47a:	f000 ff8b 	bl	800c394 <_fflush_r>
 800b47e:	b988      	cbnz	r0, 800b4a4 <__swbuf_r+0x90>
 800b480:	4638      	mov	r0, r7
 800b482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b484:	4b0a      	ldr	r3, [pc, #40]	; (800b4b0 <__swbuf_r+0x9c>)
 800b486:	429c      	cmp	r4, r3
 800b488:	d101      	bne.n	800b48e <__swbuf_r+0x7a>
 800b48a:	68ac      	ldr	r4, [r5, #8]
 800b48c:	e7cf      	b.n	800b42e <__swbuf_r+0x1a>
 800b48e:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <__swbuf_r+0xa0>)
 800b490:	429c      	cmp	r4, r3
 800b492:	bf08      	it	eq
 800b494:	68ec      	ldreq	r4, [r5, #12]
 800b496:	e7ca      	b.n	800b42e <__swbuf_r+0x1a>
 800b498:	4621      	mov	r1, r4
 800b49a:	4628      	mov	r0, r5
 800b49c:	f000 f80c 	bl	800b4b8 <__swsetup_r>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d0cb      	beq.n	800b43c <__swbuf_r+0x28>
 800b4a4:	f04f 37ff 	mov.w	r7, #4294967295
 800b4a8:	e7ea      	b.n	800b480 <__swbuf_r+0x6c>
 800b4aa:	bf00      	nop
 800b4ac:	0800ea70 	.word	0x0800ea70
 800b4b0:	0800ea90 	.word	0x0800ea90
 800b4b4:	0800ea50 	.word	0x0800ea50

0800b4b8 <__swsetup_r>:
 800b4b8:	4b32      	ldr	r3, [pc, #200]	; (800b584 <__swsetup_r+0xcc>)
 800b4ba:	b570      	push	{r4, r5, r6, lr}
 800b4bc:	681d      	ldr	r5, [r3, #0]
 800b4be:	4606      	mov	r6, r0
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	b125      	cbz	r5, 800b4ce <__swsetup_r+0x16>
 800b4c4:	69ab      	ldr	r3, [r5, #24]
 800b4c6:	b913      	cbnz	r3, 800b4ce <__swsetup_r+0x16>
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	f000 fff7 	bl	800c4bc <__sinit>
 800b4ce:	4b2e      	ldr	r3, [pc, #184]	; (800b588 <__swsetup_r+0xd0>)
 800b4d0:	429c      	cmp	r4, r3
 800b4d2:	d10f      	bne.n	800b4f4 <__swsetup_r+0x3c>
 800b4d4:	686c      	ldr	r4, [r5, #4]
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4dc:	0719      	lsls	r1, r3, #28
 800b4de:	d42c      	bmi.n	800b53a <__swsetup_r+0x82>
 800b4e0:	06dd      	lsls	r5, r3, #27
 800b4e2:	d411      	bmi.n	800b508 <__swsetup_r+0x50>
 800b4e4:	2309      	movs	r3, #9
 800b4e6:	6033      	str	r3, [r6, #0]
 800b4e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4ec:	81a3      	strh	r3, [r4, #12]
 800b4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f2:	e03e      	b.n	800b572 <__swsetup_r+0xba>
 800b4f4:	4b25      	ldr	r3, [pc, #148]	; (800b58c <__swsetup_r+0xd4>)
 800b4f6:	429c      	cmp	r4, r3
 800b4f8:	d101      	bne.n	800b4fe <__swsetup_r+0x46>
 800b4fa:	68ac      	ldr	r4, [r5, #8]
 800b4fc:	e7eb      	b.n	800b4d6 <__swsetup_r+0x1e>
 800b4fe:	4b24      	ldr	r3, [pc, #144]	; (800b590 <__swsetup_r+0xd8>)
 800b500:	429c      	cmp	r4, r3
 800b502:	bf08      	it	eq
 800b504:	68ec      	ldreq	r4, [r5, #12]
 800b506:	e7e6      	b.n	800b4d6 <__swsetup_r+0x1e>
 800b508:	0758      	lsls	r0, r3, #29
 800b50a:	d512      	bpl.n	800b532 <__swsetup_r+0x7a>
 800b50c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b50e:	b141      	cbz	r1, 800b522 <__swsetup_r+0x6a>
 800b510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b514:	4299      	cmp	r1, r3
 800b516:	d002      	beq.n	800b51e <__swsetup_r+0x66>
 800b518:	4630      	mov	r0, r6
 800b51a:	f002 f92b 	bl	800d774 <_free_r>
 800b51e:	2300      	movs	r3, #0
 800b520:	6363      	str	r3, [r4, #52]	; 0x34
 800b522:	89a3      	ldrh	r3, [r4, #12]
 800b524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	2300      	movs	r3, #0
 800b52c:	6063      	str	r3, [r4, #4]
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	6023      	str	r3, [r4, #0]
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	f043 0308 	orr.w	r3, r3, #8
 800b538:	81a3      	strh	r3, [r4, #12]
 800b53a:	6923      	ldr	r3, [r4, #16]
 800b53c:	b94b      	cbnz	r3, 800b552 <__swsetup_r+0x9a>
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b548:	d003      	beq.n	800b552 <__swsetup_r+0x9a>
 800b54a:	4621      	mov	r1, r4
 800b54c:	4630      	mov	r0, r6
 800b54e:	f001 fbed 	bl	800cd2c <__smakebuf_r>
 800b552:	89a0      	ldrh	r0, [r4, #12]
 800b554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b558:	f010 0301 	ands.w	r3, r0, #1
 800b55c:	d00a      	beq.n	800b574 <__swsetup_r+0xbc>
 800b55e:	2300      	movs	r3, #0
 800b560:	60a3      	str	r3, [r4, #8]
 800b562:	6963      	ldr	r3, [r4, #20]
 800b564:	425b      	negs	r3, r3
 800b566:	61a3      	str	r3, [r4, #24]
 800b568:	6923      	ldr	r3, [r4, #16]
 800b56a:	b943      	cbnz	r3, 800b57e <__swsetup_r+0xc6>
 800b56c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b570:	d1ba      	bne.n	800b4e8 <__swsetup_r+0x30>
 800b572:	bd70      	pop	{r4, r5, r6, pc}
 800b574:	0781      	lsls	r1, r0, #30
 800b576:	bf58      	it	pl
 800b578:	6963      	ldrpl	r3, [r4, #20]
 800b57a:	60a3      	str	r3, [r4, #8]
 800b57c:	e7f4      	b.n	800b568 <__swsetup_r+0xb0>
 800b57e:	2000      	movs	r0, #0
 800b580:	e7f7      	b.n	800b572 <__swsetup_r+0xba>
 800b582:	bf00      	nop
 800b584:	2000000c 	.word	0x2000000c
 800b588:	0800ea70 	.word	0x0800ea70
 800b58c:	0800ea90 	.word	0x0800ea90
 800b590:	0800ea50 	.word	0x0800ea50

0800b594 <quorem>:
 800b594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	6903      	ldr	r3, [r0, #16]
 800b59a:	690c      	ldr	r4, [r1, #16]
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	4607      	mov	r7, r0
 800b5a0:	f2c0 8081 	blt.w	800b6a6 <quorem+0x112>
 800b5a4:	3c01      	subs	r4, #1
 800b5a6:	f101 0814 	add.w	r8, r1, #20
 800b5aa:	f100 0514 	add.w	r5, r0, #20
 800b5ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5b2:	9301      	str	r3, [sp, #4]
 800b5b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b5c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5cc:	d331      	bcc.n	800b632 <quorem+0x9e>
 800b5ce:	f04f 0e00 	mov.w	lr, #0
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	46ac      	mov	ip, r5
 800b5d6:	46f2      	mov	sl, lr
 800b5d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5dc:	b293      	uxth	r3, r2
 800b5de:	fb06 e303 	mla	r3, r6, r3, lr
 800b5e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	ebaa 0303 	sub.w	r3, sl, r3
 800b5ec:	0c12      	lsrs	r2, r2, #16
 800b5ee:	f8dc a000 	ldr.w	sl, [ip]
 800b5f2:	fb06 e202 	mla	r2, r6, r2, lr
 800b5f6:	fa13 f38a 	uxtah	r3, r3, sl
 800b5fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5fe:	fa1f fa82 	uxth.w	sl, r2
 800b602:	f8dc 2000 	ldr.w	r2, [ip]
 800b606:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b60a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b60e:	b29b      	uxth	r3, r3
 800b610:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b614:	4581      	cmp	r9, r0
 800b616:	f84c 3b04 	str.w	r3, [ip], #4
 800b61a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b61e:	d2db      	bcs.n	800b5d8 <quorem+0x44>
 800b620:	f855 300b 	ldr.w	r3, [r5, fp]
 800b624:	b92b      	cbnz	r3, 800b632 <quorem+0x9e>
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	3b04      	subs	r3, #4
 800b62a:	429d      	cmp	r5, r3
 800b62c:	461a      	mov	r2, r3
 800b62e:	d32e      	bcc.n	800b68e <quorem+0xfa>
 800b630:	613c      	str	r4, [r7, #16]
 800b632:	4638      	mov	r0, r7
 800b634:	f001 fe9c 	bl	800d370 <__mcmp>
 800b638:	2800      	cmp	r0, #0
 800b63a:	db24      	blt.n	800b686 <quorem+0xf2>
 800b63c:	3601      	adds	r6, #1
 800b63e:	4628      	mov	r0, r5
 800b640:	f04f 0c00 	mov.w	ip, #0
 800b644:	f858 2b04 	ldr.w	r2, [r8], #4
 800b648:	f8d0 e000 	ldr.w	lr, [r0]
 800b64c:	b293      	uxth	r3, r2
 800b64e:	ebac 0303 	sub.w	r3, ip, r3
 800b652:	0c12      	lsrs	r2, r2, #16
 800b654:	fa13 f38e 	uxtah	r3, r3, lr
 800b658:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b65c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b660:	b29b      	uxth	r3, r3
 800b662:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b666:	45c1      	cmp	r9, r8
 800b668:	f840 3b04 	str.w	r3, [r0], #4
 800b66c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b670:	d2e8      	bcs.n	800b644 <quorem+0xb0>
 800b672:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b67a:	b922      	cbnz	r2, 800b686 <quorem+0xf2>
 800b67c:	3b04      	subs	r3, #4
 800b67e:	429d      	cmp	r5, r3
 800b680:	461a      	mov	r2, r3
 800b682:	d30a      	bcc.n	800b69a <quorem+0x106>
 800b684:	613c      	str	r4, [r7, #16]
 800b686:	4630      	mov	r0, r6
 800b688:	b003      	add	sp, #12
 800b68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68e:	6812      	ldr	r2, [r2, #0]
 800b690:	3b04      	subs	r3, #4
 800b692:	2a00      	cmp	r2, #0
 800b694:	d1cc      	bne.n	800b630 <quorem+0x9c>
 800b696:	3c01      	subs	r4, #1
 800b698:	e7c7      	b.n	800b62a <quorem+0x96>
 800b69a:	6812      	ldr	r2, [r2, #0]
 800b69c:	3b04      	subs	r3, #4
 800b69e:	2a00      	cmp	r2, #0
 800b6a0:	d1f0      	bne.n	800b684 <quorem+0xf0>
 800b6a2:	3c01      	subs	r4, #1
 800b6a4:	e7eb      	b.n	800b67e <quorem+0xea>
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	e7ee      	b.n	800b688 <quorem+0xf4>
 800b6aa:	0000      	movs	r0, r0
 800b6ac:	0000      	movs	r0, r0
	...

0800b6b0 <_dtoa_r>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	ed2d 8b02 	vpush	{d8}
 800b6b8:	ec57 6b10 	vmov	r6, r7, d0
 800b6bc:	b095      	sub	sp, #84	; 0x54
 800b6be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b6c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b6c4:	9105      	str	r1, [sp, #20]
 800b6c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6d0:	b975      	cbnz	r5, 800b6f0 <_dtoa_r+0x40>
 800b6d2:	2010      	movs	r0, #16
 800b6d4:	f001 fb6a 	bl	800cdac <malloc>
 800b6d8:	4602      	mov	r2, r0
 800b6da:	6260      	str	r0, [r4, #36]	; 0x24
 800b6dc:	b920      	cbnz	r0, 800b6e8 <_dtoa_r+0x38>
 800b6de:	4bb2      	ldr	r3, [pc, #712]	; (800b9a8 <_dtoa_r+0x2f8>)
 800b6e0:	21ea      	movs	r1, #234	; 0xea
 800b6e2:	48b2      	ldr	r0, [pc, #712]	; (800b9ac <_dtoa_r+0x2fc>)
 800b6e4:	f002 fc34 	bl	800df50 <__assert_func>
 800b6e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b6ec:	6005      	str	r5, [r0, #0]
 800b6ee:	60c5      	str	r5, [r0, #12]
 800b6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6f2:	6819      	ldr	r1, [r3, #0]
 800b6f4:	b151      	cbz	r1, 800b70c <_dtoa_r+0x5c>
 800b6f6:	685a      	ldr	r2, [r3, #4]
 800b6f8:	604a      	str	r2, [r1, #4]
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	4093      	lsls	r3, r2
 800b6fe:	608b      	str	r3, [r1, #8]
 800b700:	4620      	mov	r0, r4
 800b702:	f001 fbad 	bl	800ce60 <_Bfree>
 800b706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b708:	2200      	movs	r2, #0
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	1e3b      	subs	r3, r7, #0
 800b70e:	bfb9      	ittee	lt
 800b710:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b714:	9303      	strlt	r3, [sp, #12]
 800b716:	2300      	movge	r3, #0
 800b718:	f8c8 3000 	strge.w	r3, [r8]
 800b71c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b720:	4ba3      	ldr	r3, [pc, #652]	; (800b9b0 <_dtoa_r+0x300>)
 800b722:	bfbc      	itt	lt
 800b724:	2201      	movlt	r2, #1
 800b726:	f8c8 2000 	strlt.w	r2, [r8]
 800b72a:	ea33 0309 	bics.w	r3, r3, r9
 800b72e:	d11b      	bne.n	800b768 <_dtoa_r+0xb8>
 800b730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b732:	f242 730f 	movw	r3, #9999	; 0x270f
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b73c:	4333      	orrs	r3, r6
 800b73e:	f000 857a 	beq.w	800c236 <_dtoa_r+0xb86>
 800b742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b744:	b963      	cbnz	r3, 800b760 <_dtoa_r+0xb0>
 800b746:	4b9b      	ldr	r3, [pc, #620]	; (800b9b4 <_dtoa_r+0x304>)
 800b748:	e024      	b.n	800b794 <_dtoa_r+0xe4>
 800b74a:	4b9b      	ldr	r3, [pc, #620]	; (800b9b8 <_dtoa_r+0x308>)
 800b74c:	9300      	str	r3, [sp, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b752:	6013      	str	r3, [r2, #0]
 800b754:	9800      	ldr	r0, [sp, #0]
 800b756:	b015      	add	sp, #84	; 0x54
 800b758:	ecbd 8b02 	vpop	{d8}
 800b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b760:	4b94      	ldr	r3, [pc, #592]	; (800b9b4 <_dtoa_r+0x304>)
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	3303      	adds	r3, #3
 800b766:	e7f3      	b.n	800b750 <_dtoa_r+0xa0>
 800b768:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b76c:	2200      	movs	r2, #0
 800b76e:	ec51 0b17 	vmov	r0, r1, d7
 800b772:	2300      	movs	r3, #0
 800b774:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b778:	f7f5 f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b77c:	4680      	mov	r8, r0
 800b77e:	b158      	cbz	r0, 800b798 <_dtoa_r+0xe8>
 800b780:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b782:	2301      	movs	r3, #1
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 8551 	beq.w	800c230 <_dtoa_r+0xb80>
 800b78e:	488b      	ldr	r0, [pc, #556]	; (800b9bc <_dtoa_r+0x30c>)
 800b790:	6018      	str	r0, [r3, #0]
 800b792:	1e43      	subs	r3, r0, #1
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	e7dd      	b.n	800b754 <_dtoa_r+0xa4>
 800b798:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b79c:	aa12      	add	r2, sp, #72	; 0x48
 800b79e:	a913      	add	r1, sp, #76	; 0x4c
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f001 ff05 	bl	800d5b0 <__d2b>
 800b7a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b7aa:	4683      	mov	fp, r0
 800b7ac:	2d00      	cmp	r5, #0
 800b7ae:	d07c      	beq.n	800b8aa <_dtoa_r+0x1fa>
 800b7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b7b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b7be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b7c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b7c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7ca:	4b7d      	ldr	r3, [pc, #500]	; (800b9c0 <_dtoa_r+0x310>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	4639      	mov	r1, r7
 800b7d2:	f7f4 fd59 	bl	8000288 <__aeabi_dsub>
 800b7d6:	a36e      	add	r3, pc, #440	; (adr r3, 800b990 <_dtoa_r+0x2e0>)
 800b7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7dc:	f7f4 ff0c 	bl	80005f8 <__aeabi_dmul>
 800b7e0:	a36d      	add	r3, pc, #436	; (adr r3, 800b998 <_dtoa_r+0x2e8>)
 800b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e6:	f7f4 fd51 	bl	800028c <__adddf3>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	f7f4 fe98 	bl	8000524 <__aeabi_i2d>
 800b7f4:	a36a      	add	r3, pc, #424	; (adr r3, 800b9a0 <_dtoa_r+0x2f0>)
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f7f4 fefd 	bl	80005f8 <__aeabi_dmul>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	4630      	mov	r0, r6
 800b804:	4639      	mov	r1, r7
 800b806:	f7f4 fd41 	bl	800028c <__adddf3>
 800b80a:	4606      	mov	r6, r0
 800b80c:	460f      	mov	r7, r1
 800b80e:	f7f5 f9a3 	bl	8000b58 <__aeabi_d2iz>
 800b812:	2200      	movs	r2, #0
 800b814:	4682      	mov	sl, r0
 800b816:	2300      	movs	r3, #0
 800b818:	4630      	mov	r0, r6
 800b81a:	4639      	mov	r1, r7
 800b81c:	f7f5 f95e 	bl	8000adc <__aeabi_dcmplt>
 800b820:	b148      	cbz	r0, 800b836 <_dtoa_r+0x186>
 800b822:	4650      	mov	r0, sl
 800b824:	f7f4 fe7e 	bl	8000524 <__aeabi_i2d>
 800b828:	4632      	mov	r2, r6
 800b82a:	463b      	mov	r3, r7
 800b82c:	f7f5 f94c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b830:	b908      	cbnz	r0, 800b836 <_dtoa_r+0x186>
 800b832:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b836:	f1ba 0f16 	cmp.w	sl, #22
 800b83a:	d854      	bhi.n	800b8e6 <_dtoa_r+0x236>
 800b83c:	4b61      	ldr	r3, [pc, #388]	; (800b9c4 <_dtoa_r+0x314>)
 800b83e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b84a:	f7f5 f947 	bl	8000adc <__aeabi_dcmplt>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d04b      	beq.n	800b8ea <_dtoa_r+0x23a>
 800b852:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b856:	2300      	movs	r3, #0
 800b858:	930e      	str	r3, [sp, #56]	; 0x38
 800b85a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b85c:	1b5d      	subs	r5, r3, r5
 800b85e:	1e6b      	subs	r3, r5, #1
 800b860:	9304      	str	r3, [sp, #16]
 800b862:	bf43      	ittte	mi
 800b864:	2300      	movmi	r3, #0
 800b866:	f1c5 0801 	rsbmi	r8, r5, #1
 800b86a:	9304      	strmi	r3, [sp, #16]
 800b86c:	f04f 0800 	movpl.w	r8, #0
 800b870:	f1ba 0f00 	cmp.w	sl, #0
 800b874:	db3b      	blt.n	800b8ee <_dtoa_r+0x23e>
 800b876:	9b04      	ldr	r3, [sp, #16]
 800b878:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b87c:	4453      	add	r3, sl
 800b87e:	9304      	str	r3, [sp, #16]
 800b880:	2300      	movs	r3, #0
 800b882:	9306      	str	r3, [sp, #24]
 800b884:	9b05      	ldr	r3, [sp, #20]
 800b886:	2b09      	cmp	r3, #9
 800b888:	d869      	bhi.n	800b95e <_dtoa_r+0x2ae>
 800b88a:	2b05      	cmp	r3, #5
 800b88c:	bfc4      	itt	gt
 800b88e:	3b04      	subgt	r3, #4
 800b890:	9305      	strgt	r3, [sp, #20]
 800b892:	9b05      	ldr	r3, [sp, #20]
 800b894:	f1a3 0302 	sub.w	r3, r3, #2
 800b898:	bfcc      	ite	gt
 800b89a:	2500      	movgt	r5, #0
 800b89c:	2501      	movle	r5, #1
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d869      	bhi.n	800b976 <_dtoa_r+0x2c6>
 800b8a2:	e8df f003 	tbb	[pc, r3]
 800b8a6:	4e2c      	.short	0x4e2c
 800b8a8:	5a4c      	.short	0x5a4c
 800b8aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b8ae:	441d      	add	r5, r3
 800b8b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b8b4:	2b20      	cmp	r3, #32
 800b8b6:	bfc1      	itttt	gt
 800b8b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b8c0:	fa09 f303 	lslgt.w	r3, r9, r3
 800b8c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b8c8:	bfda      	itte	le
 800b8ca:	f1c3 0320 	rsble	r3, r3, #32
 800b8ce:	fa06 f003 	lslle.w	r0, r6, r3
 800b8d2:	4318      	orrgt	r0, r3
 800b8d4:	f7f4 fe16 	bl	8000504 <__aeabi_ui2d>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	4606      	mov	r6, r0
 800b8dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b8e0:	3d01      	subs	r5, #1
 800b8e2:	9310      	str	r3, [sp, #64]	; 0x40
 800b8e4:	e771      	b.n	800b7ca <_dtoa_r+0x11a>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e7b6      	b.n	800b858 <_dtoa_r+0x1a8>
 800b8ea:	900e      	str	r0, [sp, #56]	; 0x38
 800b8ec:	e7b5      	b.n	800b85a <_dtoa_r+0x1aa>
 800b8ee:	f1ca 0300 	rsb	r3, sl, #0
 800b8f2:	9306      	str	r3, [sp, #24]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	eba8 080a 	sub.w	r8, r8, sl
 800b8fa:	930d      	str	r3, [sp, #52]	; 0x34
 800b8fc:	e7c2      	b.n	800b884 <_dtoa_r+0x1d4>
 800b8fe:	2300      	movs	r3, #0
 800b900:	9308      	str	r3, [sp, #32]
 800b902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b904:	2b00      	cmp	r3, #0
 800b906:	dc39      	bgt.n	800b97c <_dtoa_r+0x2cc>
 800b908:	f04f 0901 	mov.w	r9, #1
 800b90c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b910:	464b      	mov	r3, r9
 800b912:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b916:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b918:	2200      	movs	r2, #0
 800b91a:	6042      	str	r2, [r0, #4]
 800b91c:	2204      	movs	r2, #4
 800b91e:	f102 0614 	add.w	r6, r2, #20
 800b922:	429e      	cmp	r6, r3
 800b924:	6841      	ldr	r1, [r0, #4]
 800b926:	d92f      	bls.n	800b988 <_dtoa_r+0x2d8>
 800b928:	4620      	mov	r0, r4
 800b92a:	f001 fa59 	bl	800cde0 <_Balloc>
 800b92e:	9000      	str	r0, [sp, #0]
 800b930:	2800      	cmp	r0, #0
 800b932:	d14b      	bne.n	800b9cc <_dtoa_r+0x31c>
 800b934:	4b24      	ldr	r3, [pc, #144]	; (800b9c8 <_dtoa_r+0x318>)
 800b936:	4602      	mov	r2, r0
 800b938:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b93c:	e6d1      	b.n	800b6e2 <_dtoa_r+0x32>
 800b93e:	2301      	movs	r3, #1
 800b940:	e7de      	b.n	800b900 <_dtoa_r+0x250>
 800b942:	2300      	movs	r3, #0
 800b944:	9308      	str	r3, [sp, #32]
 800b946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b948:	eb0a 0903 	add.w	r9, sl, r3
 800b94c:	f109 0301 	add.w	r3, r9, #1
 800b950:	2b01      	cmp	r3, #1
 800b952:	9301      	str	r3, [sp, #4]
 800b954:	bfb8      	it	lt
 800b956:	2301      	movlt	r3, #1
 800b958:	e7dd      	b.n	800b916 <_dtoa_r+0x266>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e7f2      	b.n	800b944 <_dtoa_r+0x294>
 800b95e:	2501      	movs	r5, #1
 800b960:	2300      	movs	r3, #0
 800b962:	9305      	str	r3, [sp, #20]
 800b964:	9508      	str	r5, [sp, #32]
 800b966:	f04f 39ff 	mov.w	r9, #4294967295
 800b96a:	2200      	movs	r2, #0
 800b96c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b970:	2312      	movs	r3, #18
 800b972:	9209      	str	r2, [sp, #36]	; 0x24
 800b974:	e7cf      	b.n	800b916 <_dtoa_r+0x266>
 800b976:	2301      	movs	r3, #1
 800b978:	9308      	str	r3, [sp, #32]
 800b97a:	e7f4      	b.n	800b966 <_dtoa_r+0x2b6>
 800b97c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b980:	f8cd 9004 	str.w	r9, [sp, #4]
 800b984:	464b      	mov	r3, r9
 800b986:	e7c6      	b.n	800b916 <_dtoa_r+0x266>
 800b988:	3101      	adds	r1, #1
 800b98a:	6041      	str	r1, [r0, #4]
 800b98c:	0052      	lsls	r2, r2, #1
 800b98e:	e7c6      	b.n	800b91e <_dtoa_r+0x26e>
 800b990:	636f4361 	.word	0x636f4361
 800b994:	3fd287a7 	.word	0x3fd287a7
 800b998:	8b60c8b3 	.word	0x8b60c8b3
 800b99c:	3fc68a28 	.word	0x3fc68a28
 800b9a0:	509f79fb 	.word	0x509f79fb
 800b9a4:	3fd34413 	.word	0x3fd34413
 800b9a8:	0800e9c6 	.word	0x0800e9c6
 800b9ac:	0800e9dd 	.word	0x0800e9dd
 800b9b0:	7ff00000 	.word	0x7ff00000
 800b9b4:	0800e9c2 	.word	0x0800e9c2
 800b9b8:	0800e9b9 	.word	0x0800e9b9
 800b9bc:	0800e839 	.word	0x0800e839
 800b9c0:	3ff80000 	.word	0x3ff80000
 800b9c4:	0800ebb8 	.word	0x0800ebb8
 800b9c8:	0800ea3c 	.word	0x0800ea3c
 800b9cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9ce:	9a00      	ldr	r2, [sp, #0]
 800b9d0:	601a      	str	r2, [r3, #0]
 800b9d2:	9b01      	ldr	r3, [sp, #4]
 800b9d4:	2b0e      	cmp	r3, #14
 800b9d6:	f200 80ad 	bhi.w	800bb34 <_dtoa_r+0x484>
 800b9da:	2d00      	cmp	r5, #0
 800b9dc:	f000 80aa 	beq.w	800bb34 <_dtoa_r+0x484>
 800b9e0:	f1ba 0f00 	cmp.w	sl, #0
 800b9e4:	dd36      	ble.n	800ba54 <_dtoa_r+0x3a4>
 800b9e6:	4ac3      	ldr	r2, [pc, #780]	; (800bcf4 <_dtoa_r+0x644>)
 800b9e8:	f00a 030f 	and.w	r3, sl, #15
 800b9ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9f0:	ed93 7b00 	vldr	d7, [r3]
 800b9f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b9f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b9fc:	eeb0 8a47 	vmov.f32	s16, s14
 800ba00:	eef0 8a67 	vmov.f32	s17, s15
 800ba04:	d016      	beq.n	800ba34 <_dtoa_r+0x384>
 800ba06:	4bbc      	ldr	r3, [pc, #752]	; (800bcf8 <_dtoa_r+0x648>)
 800ba08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba10:	f7f4 ff1c 	bl	800084c <__aeabi_ddiv>
 800ba14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba18:	f007 070f 	and.w	r7, r7, #15
 800ba1c:	2503      	movs	r5, #3
 800ba1e:	4eb6      	ldr	r6, [pc, #728]	; (800bcf8 <_dtoa_r+0x648>)
 800ba20:	b957      	cbnz	r7, 800ba38 <_dtoa_r+0x388>
 800ba22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba26:	ec53 2b18 	vmov	r2, r3, d8
 800ba2a:	f7f4 ff0f 	bl	800084c <__aeabi_ddiv>
 800ba2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba32:	e029      	b.n	800ba88 <_dtoa_r+0x3d8>
 800ba34:	2502      	movs	r5, #2
 800ba36:	e7f2      	b.n	800ba1e <_dtoa_r+0x36e>
 800ba38:	07f9      	lsls	r1, r7, #31
 800ba3a:	d508      	bpl.n	800ba4e <_dtoa_r+0x39e>
 800ba3c:	ec51 0b18 	vmov	r0, r1, d8
 800ba40:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba44:	f7f4 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ba48:	ec41 0b18 	vmov	d8, r0, r1
 800ba4c:	3501      	adds	r5, #1
 800ba4e:	107f      	asrs	r7, r7, #1
 800ba50:	3608      	adds	r6, #8
 800ba52:	e7e5      	b.n	800ba20 <_dtoa_r+0x370>
 800ba54:	f000 80a6 	beq.w	800bba4 <_dtoa_r+0x4f4>
 800ba58:	f1ca 0600 	rsb	r6, sl, #0
 800ba5c:	4ba5      	ldr	r3, [pc, #660]	; (800bcf4 <_dtoa_r+0x644>)
 800ba5e:	4fa6      	ldr	r7, [pc, #664]	; (800bcf8 <_dtoa_r+0x648>)
 800ba60:	f006 020f 	and.w	r2, r6, #15
 800ba64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ba70:	f7f4 fdc2 	bl	80005f8 <__aeabi_dmul>
 800ba74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba78:	1136      	asrs	r6, r6, #4
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	2502      	movs	r5, #2
 800ba7e:	2e00      	cmp	r6, #0
 800ba80:	f040 8085 	bne.w	800bb8e <_dtoa_r+0x4de>
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1d2      	bne.n	800ba2e <_dtoa_r+0x37e>
 800ba88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 808c 	beq.w	800bba8 <_dtoa_r+0x4f8>
 800ba90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba94:	4b99      	ldr	r3, [pc, #612]	; (800bcfc <_dtoa_r+0x64c>)
 800ba96:	2200      	movs	r2, #0
 800ba98:	4630      	mov	r0, r6
 800ba9a:	4639      	mov	r1, r7
 800ba9c:	f7f5 f81e 	bl	8000adc <__aeabi_dcmplt>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	f000 8081 	beq.w	800bba8 <_dtoa_r+0x4f8>
 800baa6:	9b01      	ldr	r3, [sp, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d07d      	beq.n	800bba8 <_dtoa_r+0x4f8>
 800baac:	f1b9 0f00 	cmp.w	r9, #0
 800bab0:	dd3c      	ble.n	800bb2c <_dtoa_r+0x47c>
 800bab2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bab6:	9307      	str	r3, [sp, #28]
 800bab8:	2200      	movs	r2, #0
 800baba:	4b91      	ldr	r3, [pc, #580]	; (800bd00 <_dtoa_r+0x650>)
 800babc:	4630      	mov	r0, r6
 800babe:	4639      	mov	r1, r7
 800bac0:	f7f4 fd9a 	bl	80005f8 <__aeabi_dmul>
 800bac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bac8:	3501      	adds	r5, #1
 800baca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bace:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bad2:	4628      	mov	r0, r5
 800bad4:	f7f4 fd26 	bl	8000524 <__aeabi_i2d>
 800bad8:	4632      	mov	r2, r6
 800bada:	463b      	mov	r3, r7
 800badc:	f7f4 fd8c 	bl	80005f8 <__aeabi_dmul>
 800bae0:	4b88      	ldr	r3, [pc, #544]	; (800bd04 <_dtoa_r+0x654>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	f7f4 fbd2 	bl	800028c <__adddf3>
 800bae8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800baec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baf0:	9303      	str	r3, [sp, #12]
 800baf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d15c      	bne.n	800bbb2 <_dtoa_r+0x502>
 800baf8:	4b83      	ldr	r3, [pc, #524]	; (800bd08 <_dtoa_r+0x658>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	4630      	mov	r0, r6
 800bafe:	4639      	mov	r1, r7
 800bb00:	f7f4 fbc2 	bl	8000288 <__aeabi_dsub>
 800bb04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb08:	4606      	mov	r6, r0
 800bb0a:	460f      	mov	r7, r1
 800bb0c:	f7f5 f804 	bl	8000b18 <__aeabi_dcmpgt>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	f040 8296 	bne.w	800c042 <_dtoa_r+0x992>
 800bb16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bb1a:	4630      	mov	r0, r6
 800bb1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb20:	4639      	mov	r1, r7
 800bb22:	f7f4 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f040 8288 	bne.w	800c03c <_dtoa_r+0x98c>
 800bb2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f2c0 8158 	blt.w	800bdec <_dtoa_r+0x73c>
 800bb3c:	f1ba 0f0e 	cmp.w	sl, #14
 800bb40:	f300 8154 	bgt.w	800bdec <_dtoa_r+0x73c>
 800bb44:	4b6b      	ldr	r3, [pc, #428]	; (800bcf4 <_dtoa_r+0x644>)
 800bb46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bb4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f280 80e3 	bge.w	800bd1c <_dtoa_r+0x66c>
 800bb56:	9b01      	ldr	r3, [sp, #4]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f300 80df 	bgt.w	800bd1c <_dtoa_r+0x66c>
 800bb5e:	f040 826d 	bne.w	800c03c <_dtoa_r+0x98c>
 800bb62:	4b69      	ldr	r3, [pc, #420]	; (800bd08 <_dtoa_r+0x658>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	4640      	mov	r0, r8
 800bb68:	4649      	mov	r1, r9
 800bb6a:	f7f4 fd45 	bl	80005f8 <__aeabi_dmul>
 800bb6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb72:	f7f4 ffc7 	bl	8000b04 <__aeabi_dcmpge>
 800bb76:	9e01      	ldr	r6, [sp, #4]
 800bb78:	4637      	mov	r7, r6
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	f040 8243 	bne.w	800c006 <_dtoa_r+0x956>
 800bb80:	9d00      	ldr	r5, [sp, #0]
 800bb82:	2331      	movs	r3, #49	; 0x31
 800bb84:	f805 3b01 	strb.w	r3, [r5], #1
 800bb88:	f10a 0a01 	add.w	sl, sl, #1
 800bb8c:	e23f      	b.n	800c00e <_dtoa_r+0x95e>
 800bb8e:	07f2      	lsls	r2, r6, #31
 800bb90:	d505      	bpl.n	800bb9e <_dtoa_r+0x4ee>
 800bb92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb96:	f7f4 fd2f 	bl	80005f8 <__aeabi_dmul>
 800bb9a:	3501      	adds	r5, #1
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	1076      	asrs	r6, r6, #1
 800bba0:	3708      	adds	r7, #8
 800bba2:	e76c      	b.n	800ba7e <_dtoa_r+0x3ce>
 800bba4:	2502      	movs	r5, #2
 800bba6:	e76f      	b.n	800ba88 <_dtoa_r+0x3d8>
 800bba8:	9b01      	ldr	r3, [sp, #4]
 800bbaa:	f8cd a01c 	str.w	sl, [sp, #28]
 800bbae:	930c      	str	r3, [sp, #48]	; 0x30
 800bbb0:	e78d      	b.n	800bace <_dtoa_r+0x41e>
 800bbb2:	9900      	ldr	r1, [sp, #0]
 800bbb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bbb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bbb8:	4b4e      	ldr	r3, [pc, #312]	; (800bcf4 <_dtoa_r+0x644>)
 800bbba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbbe:	4401      	add	r1, r0
 800bbc0:	9102      	str	r1, [sp, #8]
 800bbc2:	9908      	ldr	r1, [sp, #32]
 800bbc4:	eeb0 8a47 	vmov.f32	s16, s14
 800bbc8:	eef0 8a67 	vmov.f32	s17, s15
 800bbcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbd4:	2900      	cmp	r1, #0
 800bbd6:	d045      	beq.n	800bc64 <_dtoa_r+0x5b4>
 800bbd8:	494c      	ldr	r1, [pc, #304]	; (800bd0c <_dtoa_r+0x65c>)
 800bbda:	2000      	movs	r0, #0
 800bbdc:	f7f4 fe36 	bl	800084c <__aeabi_ddiv>
 800bbe0:	ec53 2b18 	vmov	r2, r3, d8
 800bbe4:	f7f4 fb50 	bl	8000288 <__aeabi_dsub>
 800bbe8:	9d00      	ldr	r5, [sp, #0]
 800bbea:	ec41 0b18 	vmov	d8, r0, r1
 800bbee:	4639      	mov	r1, r7
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f7f4 ffb1 	bl	8000b58 <__aeabi_d2iz>
 800bbf6:	900c      	str	r0, [sp, #48]	; 0x30
 800bbf8:	f7f4 fc94 	bl	8000524 <__aeabi_i2d>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	4630      	mov	r0, r6
 800bc02:	4639      	mov	r1, r7
 800bc04:	f7f4 fb40 	bl	8000288 <__aeabi_dsub>
 800bc08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc0a:	3330      	adds	r3, #48	; 0x30
 800bc0c:	f805 3b01 	strb.w	r3, [r5], #1
 800bc10:	ec53 2b18 	vmov	r2, r3, d8
 800bc14:	4606      	mov	r6, r0
 800bc16:	460f      	mov	r7, r1
 800bc18:	f7f4 ff60 	bl	8000adc <__aeabi_dcmplt>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d165      	bne.n	800bcec <_dtoa_r+0x63c>
 800bc20:	4632      	mov	r2, r6
 800bc22:	463b      	mov	r3, r7
 800bc24:	4935      	ldr	r1, [pc, #212]	; (800bcfc <_dtoa_r+0x64c>)
 800bc26:	2000      	movs	r0, #0
 800bc28:	f7f4 fb2e 	bl	8000288 <__aeabi_dsub>
 800bc2c:	ec53 2b18 	vmov	r2, r3, d8
 800bc30:	f7f4 ff54 	bl	8000adc <__aeabi_dcmplt>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	f040 80b9 	bne.w	800bdac <_dtoa_r+0x6fc>
 800bc3a:	9b02      	ldr	r3, [sp, #8]
 800bc3c:	429d      	cmp	r5, r3
 800bc3e:	f43f af75 	beq.w	800bb2c <_dtoa_r+0x47c>
 800bc42:	4b2f      	ldr	r3, [pc, #188]	; (800bd00 <_dtoa_r+0x650>)
 800bc44:	ec51 0b18 	vmov	r0, r1, d8
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f7f4 fcd5 	bl	80005f8 <__aeabi_dmul>
 800bc4e:	4b2c      	ldr	r3, [pc, #176]	; (800bd00 <_dtoa_r+0x650>)
 800bc50:	ec41 0b18 	vmov	d8, r0, r1
 800bc54:	2200      	movs	r2, #0
 800bc56:	4630      	mov	r0, r6
 800bc58:	4639      	mov	r1, r7
 800bc5a:	f7f4 fccd 	bl	80005f8 <__aeabi_dmul>
 800bc5e:	4606      	mov	r6, r0
 800bc60:	460f      	mov	r7, r1
 800bc62:	e7c4      	b.n	800bbee <_dtoa_r+0x53e>
 800bc64:	ec51 0b17 	vmov	r0, r1, d7
 800bc68:	f7f4 fcc6 	bl	80005f8 <__aeabi_dmul>
 800bc6c:	9b02      	ldr	r3, [sp, #8]
 800bc6e:	9d00      	ldr	r5, [sp, #0]
 800bc70:	930c      	str	r3, [sp, #48]	; 0x30
 800bc72:	ec41 0b18 	vmov	d8, r0, r1
 800bc76:	4639      	mov	r1, r7
 800bc78:	4630      	mov	r0, r6
 800bc7a:	f7f4 ff6d 	bl	8000b58 <__aeabi_d2iz>
 800bc7e:	9011      	str	r0, [sp, #68]	; 0x44
 800bc80:	f7f4 fc50 	bl	8000524 <__aeabi_i2d>
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	4630      	mov	r0, r6
 800bc8a:	4639      	mov	r1, r7
 800bc8c:	f7f4 fafc 	bl	8000288 <__aeabi_dsub>
 800bc90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc92:	3330      	adds	r3, #48	; 0x30
 800bc94:	f805 3b01 	strb.w	r3, [r5], #1
 800bc98:	9b02      	ldr	r3, [sp, #8]
 800bc9a:	429d      	cmp	r5, r3
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	460f      	mov	r7, r1
 800bca0:	f04f 0200 	mov.w	r2, #0
 800bca4:	d134      	bne.n	800bd10 <_dtoa_r+0x660>
 800bca6:	4b19      	ldr	r3, [pc, #100]	; (800bd0c <_dtoa_r+0x65c>)
 800bca8:	ec51 0b18 	vmov	r0, r1, d8
 800bcac:	f7f4 faee 	bl	800028c <__adddf3>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	4639      	mov	r1, r7
 800bcb8:	f7f4 ff2e 	bl	8000b18 <__aeabi_dcmpgt>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d175      	bne.n	800bdac <_dtoa_r+0x6fc>
 800bcc0:	ec53 2b18 	vmov	r2, r3, d8
 800bcc4:	4911      	ldr	r1, [pc, #68]	; (800bd0c <_dtoa_r+0x65c>)
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	f7f4 fade 	bl	8000288 <__aeabi_dsub>
 800bccc:	4602      	mov	r2, r0
 800bcce:	460b      	mov	r3, r1
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	4639      	mov	r1, r7
 800bcd4:	f7f4 ff02 	bl	8000adc <__aeabi_dcmplt>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	f43f af27 	beq.w	800bb2c <_dtoa_r+0x47c>
 800bcde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bce0:	1e6b      	subs	r3, r5, #1
 800bce2:	930c      	str	r3, [sp, #48]	; 0x30
 800bce4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bce8:	2b30      	cmp	r3, #48	; 0x30
 800bcea:	d0f8      	beq.n	800bcde <_dtoa_r+0x62e>
 800bcec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bcf0:	e04a      	b.n	800bd88 <_dtoa_r+0x6d8>
 800bcf2:	bf00      	nop
 800bcf4:	0800ebb8 	.word	0x0800ebb8
 800bcf8:	0800eb90 	.word	0x0800eb90
 800bcfc:	3ff00000 	.word	0x3ff00000
 800bd00:	40240000 	.word	0x40240000
 800bd04:	401c0000 	.word	0x401c0000
 800bd08:	40140000 	.word	0x40140000
 800bd0c:	3fe00000 	.word	0x3fe00000
 800bd10:	4baf      	ldr	r3, [pc, #700]	; (800bfd0 <_dtoa_r+0x920>)
 800bd12:	f7f4 fc71 	bl	80005f8 <__aeabi_dmul>
 800bd16:	4606      	mov	r6, r0
 800bd18:	460f      	mov	r7, r1
 800bd1a:	e7ac      	b.n	800bc76 <_dtoa_r+0x5c6>
 800bd1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bd20:	9d00      	ldr	r5, [sp, #0]
 800bd22:	4642      	mov	r2, r8
 800bd24:	464b      	mov	r3, r9
 800bd26:	4630      	mov	r0, r6
 800bd28:	4639      	mov	r1, r7
 800bd2a:	f7f4 fd8f 	bl	800084c <__aeabi_ddiv>
 800bd2e:	f7f4 ff13 	bl	8000b58 <__aeabi_d2iz>
 800bd32:	9002      	str	r0, [sp, #8]
 800bd34:	f7f4 fbf6 	bl	8000524 <__aeabi_i2d>
 800bd38:	4642      	mov	r2, r8
 800bd3a:	464b      	mov	r3, r9
 800bd3c:	f7f4 fc5c 	bl	80005f8 <__aeabi_dmul>
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	4630      	mov	r0, r6
 800bd46:	4639      	mov	r1, r7
 800bd48:	f7f4 fa9e 	bl	8000288 <__aeabi_dsub>
 800bd4c:	9e02      	ldr	r6, [sp, #8]
 800bd4e:	9f01      	ldr	r7, [sp, #4]
 800bd50:	3630      	adds	r6, #48	; 0x30
 800bd52:	f805 6b01 	strb.w	r6, [r5], #1
 800bd56:	9e00      	ldr	r6, [sp, #0]
 800bd58:	1bae      	subs	r6, r5, r6
 800bd5a:	42b7      	cmp	r7, r6
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	d137      	bne.n	800bdd2 <_dtoa_r+0x722>
 800bd62:	f7f4 fa93 	bl	800028c <__adddf3>
 800bd66:	4642      	mov	r2, r8
 800bd68:	464b      	mov	r3, r9
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	f7f4 fed3 	bl	8000b18 <__aeabi_dcmpgt>
 800bd72:	b9c8      	cbnz	r0, 800bda8 <_dtoa_r+0x6f8>
 800bd74:	4642      	mov	r2, r8
 800bd76:	464b      	mov	r3, r9
 800bd78:	4630      	mov	r0, r6
 800bd7a:	4639      	mov	r1, r7
 800bd7c:	f7f4 fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd80:	b110      	cbz	r0, 800bd88 <_dtoa_r+0x6d8>
 800bd82:	9b02      	ldr	r3, [sp, #8]
 800bd84:	07d9      	lsls	r1, r3, #31
 800bd86:	d40f      	bmi.n	800bda8 <_dtoa_r+0x6f8>
 800bd88:	4620      	mov	r0, r4
 800bd8a:	4659      	mov	r1, fp
 800bd8c:	f001 f868 	bl	800ce60 <_Bfree>
 800bd90:	2300      	movs	r3, #0
 800bd92:	702b      	strb	r3, [r5, #0]
 800bd94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd96:	f10a 0001 	add.w	r0, sl, #1
 800bd9a:	6018      	str	r0, [r3, #0]
 800bd9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f43f acd8 	beq.w	800b754 <_dtoa_r+0xa4>
 800bda4:	601d      	str	r5, [r3, #0]
 800bda6:	e4d5      	b.n	800b754 <_dtoa_r+0xa4>
 800bda8:	f8cd a01c 	str.w	sl, [sp, #28]
 800bdac:	462b      	mov	r3, r5
 800bdae:	461d      	mov	r5, r3
 800bdb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdb4:	2a39      	cmp	r2, #57	; 0x39
 800bdb6:	d108      	bne.n	800bdca <_dtoa_r+0x71a>
 800bdb8:	9a00      	ldr	r2, [sp, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d1f7      	bne.n	800bdae <_dtoa_r+0x6fe>
 800bdbe:	9a07      	ldr	r2, [sp, #28]
 800bdc0:	9900      	ldr	r1, [sp, #0]
 800bdc2:	3201      	adds	r2, #1
 800bdc4:	9207      	str	r2, [sp, #28]
 800bdc6:	2230      	movs	r2, #48	; 0x30
 800bdc8:	700a      	strb	r2, [r1, #0]
 800bdca:	781a      	ldrb	r2, [r3, #0]
 800bdcc:	3201      	adds	r2, #1
 800bdce:	701a      	strb	r2, [r3, #0]
 800bdd0:	e78c      	b.n	800bcec <_dtoa_r+0x63c>
 800bdd2:	4b7f      	ldr	r3, [pc, #508]	; (800bfd0 <_dtoa_r+0x920>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f7f4 fc0f 	bl	80005f8 <__aeabi_dmul>
 800bdda:	2200      	movs	r2, #0
 800bddc:	2300      	movs	r3, #0
 800bdde:	4606      	mov	r6, r0
 800bde0:	460f      	mov	r7, r1
 800bde2:	f7f4 fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d09b      	beq.n	800bd22 <_dtoa_r+0x672>
 800bdea:	e7cd      	b.n	800bd88 <_dtoa_r+0x6d8>
 800bdec:	9a08      	ldr	r2, [sp, #32]
 800bdee:	2a00      	cmp	r2, #0
 800bdf0:	f000 80c4 	beq.w	800bf7c <_dtoa_r+0x8cc>
 800bdf4:	9a05      	ldr	r2, [sp, #20]
 800bdf6:	2a01      	cmp	r2, #1
 800bdf8:	f300 80a8 	bgt.w	800bf4c <_dtoa_r+0x89c>
 800bdfc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bdfe:	2a00      	cmp	r2, #0
 800be00:	f000 80a0 	beq.w	800bf44 <_dtoa_r+0x894>
 800be04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be08:	9e06      	ldr	r6, [sp, #24]
 800be0a:	4645      	mov	r5, r8
 800be0c:	9a04      	ldr	r2, [sp, #16]
 800be0e:	2101      	movs	r1, #1
 800be10:	441a      	add	r2, r3
 800be12:	4620      	mov	r0, r4
 800be14:	4498      	add	r8, r3
 800be16:	9204      	str	r2, [sp, #16]
 800be18:	f001 f928 	bl	800d06c <__i2b>
 800be1c:	4607      	mov	r7, r0
 800be1e:	2d00      	cmp	r5, #0
 800be20:	dd0b      	ble.n	800be3a <_dtoa_r+0x78a>
 800be22:	9b04      	ldr	r3, [sp, #16]
 800be24:	2b00      	cmp	r3, #0
 800be26:	dd08      	ble.n	800be3a <_dtoa_r+0x78a>
 800be28:	42ab      	cmp	r3, r5
 800be2a:	9a04      	ldr	r2, [sp, #16]
 800be2c:	bfa8      	it	ge
 800be2e:	462b      	movge	r3, r5
 800be30:	eba8 0803 	sub.w	r8, r8, r3
 800be34:	1aed      	subs	r5, r5, r3
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	9304      	str	r3, [sp, #16]
 800be3a:	9b06      	ldr	r3, [sp, #24]
 800be3c:	b1fb      	cbz	r3, 800be7e <_dtoa_r+0x7ce>
 800be3e:	9b08      	ldr	r3, [sp, #32]
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 809f 	beq.w	800bf84 <_dtoa_r+0x8d4>
 800be46:	2e00      	cmp	r6, #0
 800be48:	dd11      	ble.n	800be6e <_dtoa_r+0x7be>
 800be4a:	4639      	mov	r1, r7
 800be4c:	4632      	mov	r2, r6
 800be4e:	4620      	mov	r0, r4
 800be50:	f001 f9c8 	bl	800d1e4 <__pow5mult>
 800be54:	465a      	mov	r2, fp
 800be56:	4601      	mov	r1, r0
 800be58:	4607      	mov	r7, r0
 800be5a:	4620      	mov	r0, r4
 800be5c:	f001 f91c 	bl	800d098 <__multiply>
 800be60:	4659      	mov	r1, fp
 800be62:	9007      	str	r0, [sp, #28]
 800be64:	4620      	mov	r0, r4
 800be66:	f000 fffb 	bl	800ce60 <_Bfree>
 800be6a:	9b07      	ldr	r3, [sp, #28]
 800be6c:	469b      	mov	fp, r3
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	1b9a      	subs	r2, r3, r6
 800be72:	d004      	beq.n	800be7e <_dtoa_r+0x7ce>
 800be74:	4659      	mov	r1, fp
 800be76:	4620      	mov	r0, r4
 800be78:	f001 f9b4 	bl	800d1e4 <__pow5mult>
 800be7c:	4683      	mov	fp, r0
 800be7e:	2101      	movs	r1, #1
 800be80:	4620      	mov	r0, r4
 800be82:	f001 f8f3 	bl	800d06c <__i2b>
 800be86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be88:	2b00      	cmp	r3, #0
 800be8a:	4606      	mov	r6, r0
 800be8c:	dd7c      	ble.n	800bf88 <_dtoa_r+0x8d8>
 800be8e:	461a      	mov	r2, r3
 800be90:	4601      	mov	r1, r0
 800be92:	4620      	mov	r0, r4
 800be94:	f001 f9a6 	bl	800d1e4 <__pow5mult>
 800be98:	9b05      	ldr	r3, [sp, #20]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	4606      	mov	r6, r0
 800be9e:	dd76      	ble.n	800bf8e <_dtoa_r+0x8de>
 800bea0:	2300      	movs	r3, #0
 800bea2:	9306      	str	r3, [sp, #24]
 800bea4:	6933      	ldr	r3, [r6, #16]
 800bea6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800beaa:	6918      	ldr	r0, [r3, #16]
 800beac:	f001 f88e 	bl	800cfcc <__hi0bits>
 800beb0:	f1c0 0020 	rsb	r0, r0, #32
 800beb4:	9b04      	ldr	r3, [sp, #16]
 800beb6:	4418      	add	r0, r3
 800beb8:	f010 001f 	ands.w	r0, r0, #31
 800bebc:	f000 8086 	beq.w	800bfcc <_dtoa_r+0x91c>
 800bec0:	f1c0 0320 	rsb	r3, r0, #32
 800bec4:	2b04      	cmp	r3, #4
 800bec6:	dd7f      	ble.n	800bfc8 <_dtoa_r+0x918>
 800bec8:	f1c0 001c 	rsb	r0, r0, #28
 800becc:	9b04      	ldr	r3, [sp, #16]
 800bece:	4403      	add	r3, r0
 800bed0:	4480      	add	r8, r0
 800bed2:	4405      	add	r5, r0
 800bed4:	9304      	str	r3, [sp, #16]
 800bed6:	f1b8 0f00 	cmp.w	r8, #0
 800beda:	dd05      	ble.n	800bee8 <_dtoa_r+0x838>
 800bedc:	4659      	mov	r1, fp
 800bede:	4642      	mov	r2, r8
 800bee0:	4620      	mov	r0, r4
 800bee2:	f001 f9d9 	bl	800d298 <__lshift>
 800bee6:	4683      	mov	fp, r0
 800bee8:	9b04      	ldr	r3, [sp, #16]
 800beea:	2b00      	cmp	r3, #0
 800beec:	dd05      	ble.n	800befa <_dtoa_r+0x84a>
 800beee:	4631      	mov	r1, r6
 800bef0:	461a      	mov	r2, r3
 800bef2:	4620      	mov	r0, r4
 800bef4:	f001 f9d0 	bl	800d298 <__lshift>
 800bef8:	4606      	mov	r6, r0
 800befa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800befc:	2b00      	cmp	r3, #0
 800befe:	d069      	beq.n	800bfd4 <_dtoa_r+0x924>
 800bf00:	4631      	mov	r1, r6
 800bf02:	4658      	mov	r0, fp
 800bf04:	f001 fa34 	bl	800d370 <__mcmp>
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	da63      	bge.n	800bfd4 <_dtoa_r+0x924>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4659      	mov	r1, fp
 800bf10:	220a      	movs	r2, #10
 800bf12:	4620      	mov	r0, r4
 800bf14:	f000 ffc6 	bl	800cea4 <__multadd>
 800bf18:	9b08      	ldr	r3, [sp, #32]
 800bf1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf1e:	4683      	mov	fp, r0
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 818f 	beq.w	800c244 <_dtoa_r+0xb94>
 800bf26:	4639      	mov	r1, r7
 800bf28:	2300      	movs	r3, #0
 800bf2a:	220a      	movs	r2, #10
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 ffb9 	bl	800cea4 <__multadd>
 800bf32:	f1b9 0f00 	cmp.w	r9, #0
 800bf36:	4607      	mov	r7, r0
 800bf38:	f300 808e 	bgt.w	800c058 <_dtoa_r+0x9a8>
 800bf3c:	9b05      	ldr	r3, [sp, #20]
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	dc50      	bgt.n	800bfe4 <_dtoa_r+0x934>
 800bf42:	e089      	b.n	800c058 <_dtoa_r+0x9a8>
 800bf44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf4a:	e75d      	b.n	800be08 <_dtoa_r+0x758>
 800bf4c:	9b01      	ldr	r3, [sp, #4]
 800bf4e:	1e5e      	subs	r6, r3, #1
 800bf50:	9b06      	ldr	r3, [sp, #24]
 800bf52:	42b3      	cmp	r3, r6
 800bf54:	bfbf      	itttt	lt
 800bf56:	9b06      	ldrlt	r3, [sp, #24]
 800bf58:	9606      	strlt	r6, [sp, #24]
 800bf5a:	1af2      	sublt	r2, r6, r3
 800bf5c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bf5e:	bfb6      	itet	lt
 800bf60:	189b      	addlt	r3, r3, r2
 800bf62:	1b9e      	subge	r6, r3, r6
 800bf64:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bf66:	9b01      	ldr	r3, [sp, #4]
 800bf68:	bfb8      	it	lt
 800bf6a:	2600      	movlt	r6, #0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	bfb5      	itete	lt
 800bf70:	eba8 0503 	sublt.w	r5, r8, r3
 800bf74:	9b01      	ldrge	r3, [sp, #4]
 800bf76:	2300      	movlt	r3, #0
 800bf78:	4645      	movge	r5, r8
 800bf7a:	e747      	b.n	800be0c <_dtoa_r+0x75c>
 800bf7c:	9e06      	ldr	r6, [sp, #24]
 800bf7e:	9f08      	ldr	r7, [sp, #32]
 800bf80:	4645      	mov	r5, r8
 800bf82:	e74c      	b.n	800be1e <_dtoa_r+0x76e>
 800bf84:	9a06      	ldr	r2, [sp, #24]
 800bf86:	e775      	b.n	800be74 <_dtoa_r+0x7c4>
 800bf88:	9b05      	ldr	r3, [sp, #20]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	dc18      	bgt.n	800bfc0 <_dtoa_r+0x910>
 800bf8e:	9b02      	ldr	r3, [sp, #8]
 800bf90:	b9b3      	cbnz	r3, 800bfc0 <_dtoa_r+0x910>
 800bf92:	9b03      	ldr	r3, [sp, #12]
 800bf94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf98:	b9a3      	cbnz	r3, 800bfc4 <_dtoa_r+0x914>
 800bf9a:	9b03      	ldr	r3, [sp, #12]
 800bf9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfa0:	0d1b      	lsrs	r3, r3, #20
 800bfa2:	051b      	lsls	r3, r3, #20
 800bfa4:	b12b      	cbz	r3, 800bfb2 <_dtoa_r+0x902>
 800bfa6:	9b04      	ldr	r3, [sp, #16]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	9304      	str	r3, [sp, #16]
 800bfac:	f108 0801 	add.w	r8, r8, #1
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	9306      	str	r3, [sp, #24]
 800bfb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f47f af74 	bne.w	800bea4 <_dtoa_r+0x7f4>
 800bfbc:	2001      	movs	r0, #1
 800bfbe:	e779      	b.n	800beb4 <_dtoa_r+0x804>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	e7f6      	b.n	800bfb2 <_dtoa_r+0x902>
 800bfc4:	9b02      	ldr	r3, [sp, #8]
 800bfc6:	e7f4      	b.n	800bfb2 <_dtoa_r+0x902>
 800bfc8:	d085      	beq.n	800bed6 <_dtoa_r+0x826>
 800bfca:	4618      	mov	r0, r3
 800bfcc:	301c      	adds	r0, #28
 800bfce:	e77d      	b.n	800becc <_dtoa_r+0x81c>
 800bfd0:	40240000 	.word	0x40240000
 800bfd4:	9b01      	ldr	r3, [sp, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	dc38      	bgt.n	800c04c <_dtoa_r+0x99c>
 800bfda:	9b05      	ldr	r3, [sp, #20]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	dd35      	ble.n	800c04c <_dtoa_r+0x99c>
 800bfe0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bfe4:	f1b9 0f00 	cmp.w	r9, #0
 800bfe8:	d10d      	bne.n	800c006 <_dtoa_r+0x956>
 800bfea:	4631      	mov	r1, r6
 800bfec:	464b      	mov	r3, r9
 800bfee:	2205      	movs	r2, #5
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 ff57 	bl	800cea4 <__multadd>
 800bff6:	4601      	mov	r1, r0
 800bff8:	4606      	mov	r6, r0
 800bffa:	4658      	mov	r0, fp
 800bffc:	f001 f9b8 	bl	800d370 <__mcmp>
 800c000:	2800      	cmp	r0, #0
 800c002:	f73f adbd 	bgt.w	800bb80 <_dtoa_r+0x4d0>
 800c006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c008:	9d00      	ldr	r5, [sp, #0]
 800c00a:	ea6f 0a03 	mvn.w	sl, r3
 800c00e:	f04f 0800 	mov.w	r8, #0
 800c012:	4631      	mov	r1, r6
 800c014:	4620      	mov	r0, r4
 800c016:	f000 ff23 	bl	800ce60 <_Bfree>
 800c01a:	2f00      	cmp	r7, #0
 800c01c:	f43f aeb4 	beq.w	800bd88 <_dtoa_r+0x6d8>
 800c020:	f1b8 0f00 	cmp.w	r8, #0
 800c024:	d005      	beq.n	800c032 <_dtoa_r+0x982>
 800c026:	45b8      	cmp	r8, r7
 800c028:	d003      	beq.n	800c032 <_dtoa_r+0x982>
 800c02a:	4641      	mov	r1, r8
 800c02c:	4620      	mov	r0, r4
 800c02e:	f000 ff17 	bl	800ce60 <_Bfree>
 800c032:	4639      	mov	r1, r7
 800c034:	4620      	mov	r0, r4
 800c036:	f000 ff13 	bl	800ce60 <_Bfree>
 800c03a:	e6a5      	b.n	800bd88 <_dtoa_r+0x6d8>
 800c03c:	2600      	movs	r6, #0
 800c03e:	4637      	mov	r7, r6
 800c040:	e7e1      	b.n	800c006 <_dtoa_r+0x956>
 800c042:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c044:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c048:	4637      	mov	r7, r6
 800c04a:	e599      	b.n	800bb80 <_dtoa_r+0x4d0>
 800c04c:	9b08      	ldr	r3, [sp, #32]
 800c04e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 80fd 	beq.w	800c252 <_dtoa_r+0xba2>
 800c058:	2d00      	cmp	r5, #0
 800c05a:	dd05      	ble.n	800c068 <_dtoa_r+0x9b8>
 800c05c:	4639      	mov	r1, r7
 800c05e:	462a      	mov	r2, r5
 800c060:	4620      	mov	r0, r4
 800c062:	f001 f919 	bl	800d298 <__lshift>
 800c066:	4607      	mov	r7, r0
 800c068:	9b06      	ldr	r3, [sp, #24]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d05c      	beq.n	800c128 <_dtoa_r+0xa78>
 800c06e:	6879      	ldr	r1, [r7, #4]
 800c070:	4620      	mov	r0, r4
 800c072:	f000 feb5 	bl	800cde0 <_Balloc>
 800c076:	4605      	mov	r5, r0
 800c078:	b928      	cbnz	r0, 800c086 <_dtoa_r+0x9d6>
 800c07a:	4b80      	ldr	r3, [pc, #512]	; (800c27c <_dtoa_r+0xbcc>)
 800c07c:	4602      	mov	r2, r0
 800c07e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c082:	f7ff bb2e 	b.w	800b6e2 <_dtoa_r+0x32>
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	3202      	adds	r2, #2
 800c08a:	0092      	lsls	r2, r2, #2
 800c08c:	f107 010c 	add.w	r1, r7, #12
 800c090:	300c      	adds	r0, #12
 800c092:	f7fd fbc9 	bl	8009828 <memcpy>
 800c096:	2201      	movs	r2, #1
 800c098:	4629      	mov	r1, r5
 800c09a:	4620      	mov	r0, r4
 800c09c:	f001 f8fc 	bl	800d298 <__lshift>
 800c0a0:	9b00      	ldr	r3, [sp, #0]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	9301      	str	r3, [sp, #4]
 800c0a6:	9b00      	ldr	r3, [sp, #0]
 800c0a8:	444b      	add	r3, r9
 800c0aa:	9307      	str	r3, [sp, #28]
 800c0ac:	9b02      	ldr	r3, [sp, #8]
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	46b8      	mov	r8, r7
 800c0b4:	9306      	str	r3, [sp, #24]
 800c0b6:	4607      	mov	r7, r0
 800c0b8:	9b01      	ldr	r3, [sp, #4]
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	4658      	mov	r0, fp
 800c0c0:	9302      	str	r3, [sp, #8]
 800c0c2:	f7ff fa67 	bl	800b594 <quorem>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	3330      	adds	r3, #48	; 0x30
 800c0ca:	9004      	str	r0, [sp, #16]
 800c0cc:	4641      	mov	r1, r8
 800c0ce:	4658      	mov	r0, fp
 800c0d0:	9308      	str	r3, [sp, #32]
 800c0d2:	f001 f94d 	bl	800d370 <__mcmp>
 800c0d6:	463a      	mov	r2, r7
 800c0d8:	4681      	mov	r9, r0
 800c0da:	4631      	mov	r1, r6
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f001 f963 	bl	800d3a8 <__mdiff>
 800c0e2:	68c2      	ldr	r2, [r0, #12]
 800c0e4:	9b08      	ldr	r3, [sp, #32]
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	bb02      	cbnz	r2, 800c12c <_dtoa_r+0xa7c>
 800c0ea:	4601      	mov	r1, r0
 800c0ec:	4658      	mov	r0, fp
 800c0ee:	f001 f93f 	bl	800d370 <__mcmp>
 800c0f2:	9b08      	ldr	r3, [sp, #32]
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c0fe:	f000 feaf 	bl	800ce60 <_Bfree>
 800c102:	9b05      	ldr	r3, [sp, #20]
 800c104:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c106:	9d01      	ldr	r5, [sp, #4]
 800c108:	ea43 0102 	orr.w	r1, r3, r2
 800c10c:	9b06      	ldr	r3, [sp, #24]
 800c10e:	430b      	orrs	r3, r1
 800c110:	9b08      	ldr	r3, [sp, #32]
 800c112:	d10d      	bne.n	800c130 <_dtoa_r+0xa80>
 800c114:	2b39      	cmp	r3, #57	; 0x39
 800c116:	d029      	beq.n	800c16c <_dtoa_r+0xabc>
 800c118:	f1b9 0f00 	cmp.w	r9, #0
 800c11c:	dd01      	ble.n	800c122 <_dtoa_r+0xa72>
 800c11e:	9b04      	ldr	r3, [sp, #16]
 800c120:	3331      	adds	r3, #49	; 0x31
 800c122:	9a02      	ldr	r2, [sp, #8]
 800c124:	7013      	strb	r3, [r2, #0]
 800c126:	e774      	b.n	800c012 <_dtoa_r+0x962>
 800c128:	4638      	mov	r0, r7
 800c12a:	e7b9      	b.n	800c0a0 <_dtoa_r+0x9f0>
 800c12c:	2201      	movs	r2, #1
 800c12e:	e7e2      	b.n	800c0f6 <_dtoa_r+0xa46>
 800c130:	f1b9 0f00 	cmp.w	r9, #0
 800c134:	db06      	blt.n	800c144 <_dtoa_r+0xa94>
 800c136:	9905      	ldr	r1, [sp, #20]
 800c138:	ea41 0909 	orr.w	r9, r1, r9
 800c13c:	9906      	ldr	r1, [sp, #24]
 800c13e:	ea59 0101 	orrs.w	r1, r9, r1
 800c142:	d120      	bne.n	800c186 <_dtoa_r+0xad6>
 800c144:	2a00      	cmp	r2, #0
 800c146:	ddec      	ble.n	800c122 <_dtoa_r+0xa72>
 800c148:	4659      	mov	r1, fp
 800c14a:	2201      	movs	r2, #1
 800c14c:	4620      	mov	r0, r4
 800c14e:	9301      	str	r3, [sp, #4]
 800c150:	f001 f8a2 	bl	800d298 <__lshift>
 800c154:	4631      	mov	r1, r6
 800c156:	4683      	mov	fp, r0
 800c158:	f001 f90a 	bl	800d370 <__mcmp>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	9b01      	ldr	r3, [sp, #4]
 800c160:	dc02      	bgt.n	800c168 <_dtoa_r+0xab8>
 800c162:	d1de      	bne.n	800c122 <_dtoa_r+0xa72>
 800c164:	07da      	lsls	r2, r3, #31
 800c166:	d5dc      	bpl.n	800c122 <_dtoa_r+0xa72>
 800c168:	2b39      	cmp	r3, #57	; 0x39
 800c16a:	d1d8      	bne.n	800c11e <_dtoa_r+0xa6e>
 800c16c:	9a02      	ldr	r2, [sp, #8]
 800c16e:	2339      	movs	r3, #57	; 0x39
 800c170:	7013      	strb	r3, [r2, #0]
 800c172:	462b      	mov	r3, r5
 800c174:	461d      	mov	r5, r3
 800c176:	3b01      	subs	r3, #1
 800c178:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c17c:	2a39      	cmp	r2, #57	; 0x39
 800c17e:	d050      	beq.n	800c222 <_dtoa_r+0xb72>
 800c180:	3201      	adds	r2, #1
 800c182:	701a      	strb	r2, [r3, #0]
 800c184:	e745      	b.n	800c012 <_dtoa_r+0x962>
 800c186:	2a00      	cmp	r2, #0
 800c188:	dd03      	ble.n	800c192 <_dtoa_r+0xae2>
 800c18a:	2b39      	cmp	r3, #57	; 0x39
 800c18c:	d0ee      	beq.n	800c16c <_dtoa_r+0xabc>
 800c18e:	3301      	adds	r3, #1
 800c190:	e7c7      	b.n	800c122 <_dtoa_r+0xa72>
 800c192:	9a01      	ldr	r2, [sp, #4]
 800c194:	9907      	ldr	r1, [sp, #28]
 800c196:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c19a:	428a      	cmp	r2, r1
 800c19c:	d02a      	beq.n	800c1f4 <_dtoa_r+0xb44>
 800c19e:	4659      	mov	r1, fp
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	220a      	movs	r2, #10
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f000 fe7d 	bl	800cea4 <__multadd>
 800c1aa:	45b8      	cmp	r8, r7
 800c1ac:	4683      	mov	fp, r0
 800c1ae:	f04f 0300 	mov.w	r3, #0
 800c1b2:	f04f 020a 	mov.w	r2, #10
 800c1b6:	4641      	mov	r1, r8
 800c1b8:	4620      	mov	r0, r4
 800c1ba:	d107      	bne.n	800c1cc <_dtoa_r+0xb1c>
 800c1bc:	f000 fe72 	bl	800cea4 <__multadd>
 800c1c0:	4680      	mov	r8, r0
 800c1c2:	4607      	mov	r7, r0
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	9301      	str	r3, [sp, #4]
 800c1ca:	e775      	b.n	800c0b8 <_dtoa_r+0xa08>
 800c1cc:	f000 fe6a 	bl	800cea4 <__multadd>
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	4680      	mov	r8, r0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	220a      	movs	r2, #10
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 fe63 	bl	800cea4 <__multadd>
 800c1de:	4607      	mov	r7, r0
 800c1e0:	e7f0      	b.n	800c1c4 <_dtoa_r+0xb14>
 800c1e2:	f1b9 0f00 	cmp.w	r9, #0
 800c1e6:	9a00      	ldr	r2, [sp, #0]
 800c1e8:	bfcc      	ite	gt
 800c1ea:	464d      	movgt	r5, r9
 800c1ec:	2501      	movle	r5, #1
 800c1ee:	4415      	add	r5, r2
 800c1f0:	f04f 0800 	mov.w	r8, #0
 800c1f4:	4659      	mov	r1, fp
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	f001 f84c 	bl	800d298 <__lshift>
 800c200:	4631      	mov	r1, r6
 800c202:	4683      	mov	fp, r0
 800c204:	f001 f8b4 	bl	800d370 <__mcmp>
 800c208:	2800      	cmp	r0, #0
 800c20a:	dcb2      	bgt.n	800c172 <_dtoa_r+0xac2>
 800c20c:	d102      	bne.n	800c214 <_dtoa_r+0xb64>
 800c20e:	9b01      	ldr	r3, [sp, #4]
 800c210:	07db      	lsls	r3, r3, #31
 800c212:	d4ae      	bmi.n	800c172 <_dtoa_r+0xac2>
 800c214:	462b      	mov	r3, r5
 800c216:	461d      	mov	r5, r3
 800c218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c21c:	2a30      	cmp	r2, #48	; 0x30
 800c21e:	d0fa      	beq.n	800c216 <_dtoa_r+0xb66>
 800c220:	e6f7      	b.n	800c012 <_dtoa_r+0x962>
 800c222:	9a00      	ldr	r2, [sp, #0]
 800c224:	429a      	cmp	r2, r3
 800c226:	d1a5      	bne.n	800c174 <_dtoa_r+0xac4>
 800c228:	f10a 0a01 	add.w	sl, sl, #1
 800c22c:	2331      	movs	r3, #49	; 0x31
 800c22e:	e779      	b.n	800c124 <_dtoa_r+0xa74>
 800c230:	4b13      	ldr	r3, [pc, #76]	; (800c280 <_dtoa_r+0xbd0>)
 800c232:	f7ff baaf 	b.w	800b794 <_dtoa_r+0xe4>
 800c236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f47f aa86 	bne.w	800b74a <_dtoa_r+0x9a>
 800c23e:	4b11      	ldr	r3, [pc, #68]	; (800c284 <_dtoa_r+0xbd4>)
 800c240:	f7ff baa8 	b.w	800b794 <_dtoa_r+0xe4>
 800c244:	f1b9 0f00 	cmp.w	r9, #0
 800c248:	dc03      	bgt.n	800c252 <_dtoa_r+0xba2>
 800c24a:	9b05      	ldr	r3, [sp, #20]
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	f73f aec9 	bgt.w	800bfe4 <_dtoa_r+0x934>
 800c252:	9d00      	ldr	r5, [sp, #0]
 800c254:	4631      	mov	r1, r6
 800c256:	4658      	mov	r0, fp
 800c258:	f7ff f99c 	bl	800b594 <quorem>
 800c25c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c260:	f805 3b01 	strb.w	r3, [r5], #1
 800c264:	9a00      	ldr	r2, [sp, #0]
 800c266:	1aaa      	subs	r2, r5, r2
 800c268:	4591      	cmp	r9, r2
 800c26a:	ddba      	ble.n	800c1e2 <_dtoa_r+0xb32>
 800c26c:	4659      	mov	r1, fp
 800c26e:	2300      	movs	r3, #0
 800c270:	220a      	movs	r2, #10
 800c272:	4620      	mov	r0, r4
 800c274:	f000 fe16 	bl	800cea4 <__multadd>
 800c278:	4683      	mov	fp, r0
 800c27a:	e7eb      	b.n	800c254 <_dtoa_r+0xba4>
 800c27c:	0800ea3c 	.word	0x0800ea3c
 800c280:	0800e838 	.word	0x0800e838
 800c284:	0800e9b9 	.word	0x0800e9b9

0800c288 <__sflush_r>:
 800c288:	898a      	ldrh	r2, [r1, #12]
 800c28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28e:	4605      	mov	r5, r0
 800c290:	0710      	lsls	r0, r2, #28
 800c292:	460c      	mov	r4, r1
 800c294:	d458      	bmi.n	800c348 <__sflush_r+0xc0>
 800c296:	684b      	ldr	r3, [r1, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	dc05      	bgt.n	800c2a8 <__sflush_r+0x20>
 800c29c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	dc02      	bgt.n	800c2a8 <__sflush_r+0x20>
 800c2a2:	2000      	movs	r0, #0
 800c2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2aa:	2e00      	cmp	r6, #0
 800c2ac:	d0f9      	beq.n	800c2a2 <__sflush_r+0x1a>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2b4:	682f      	ldr	r7, [r5, #0]
 800c2b6:	602b      	str	r3, [r5, #0]
 800c2b8:	d032      	beq.n	800c320 <__sflush_r+0x98>
 800c2ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	075a      	lsls	r2, r3, #29
 800c2c0:	d505      	bpl.n	800c2ce <__sflush_r+0x46>
 800c2c2:	6863      	ldr	r3, [r4, #4]
 800c2c4:	1ac0      	subs	r0, r0, r3
 800c2c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2c8:	b10b      	cbz	r3, 800c2ce <__sflush_r+0x46>
 800c2ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2cc:	1ac0      	subs	r0, r0, r3
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2d4:	6a21      	ldr	r1, [r4, #32]
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	47b0      	blx	r6
 800c2da:	1c43      	adds	r3, r0, #1
 800c2dc:	89a3      	ldrh	r3, [r4, #12]
 800c2de:	d106      	bne.n	800c2ee <__sflush_r+0x66>
 800c2e0:	6829      	ldr	r1, [r5, #0]
 800c2e2:	291d      	cmp	r1, #29
 800c2e4:	d82c      	bhi.n	800c340 <__sflush_r+0xb8>
 800c2e6:	4a2a      	ldr	r2, [pc, #168]	; (800c390 <__sflush_r+0x108>)
 800c2e8:	40ca      	lsrs	r2, r1
 800c2ea:	07d6      	lsls	r6, r2, #31
 800c2ec:	d528      	bpl.n	800c340 <__sflush_r+0xb8>
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	6062      	str	r2, [r4, #4]
 800c2f2:	04d9      	lsls	r1, r3, #19
 800c2f4:	6922      	ldr	r2, [r4, #16]
 800c2f6:	6022      	str	r2, [r4, #0]
 800c2f8:	d504      	bpl.n	800c304 <__sflush_r+0x7c>
 800c2fa:	1c42      	adds	r2, r0, #1
 800c2fc:	d101      	bne.n	800c302 <__sflush_r+0x7a>
 800c2fe:	682b      	ldr	r3, [r5, #0]
 800c300:	b903      	cbnz	r3, 800c304 <__sflush_r+0x7c>
 800c302:	6560      	str	r0, [r4, #84]	; 0x54
 800c304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c306:	602f      	str	r7, [r5, #0]
 800c308:	2900      	cmp	r1, #0
 800c30a:	d0ca      	beq.n	800c2a2 <__sflush_r+0x1a>
 800c30c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c310:	4299      	cmp	r1, r3
 800c312:	d002      	beq.n	800c31a <__sflush_r+0x92>
 800c314:	4628      	mov	r0, r5
 800c316:	f001 fa2d 	bl	800d774 <_free_r>
 800c31a:	2000      	movs	r0, #0
 800c31c:	6360      	str	r0, [r4, #52]	; 0x34
 800c31e:	e7c1      	b.n	800c2a4 <__sflush_r+0x1c>
 800c320:	6a21      	ldr	r1, [r4, #32]
 800c322:	2301      	movs	r3, #1
 800c324:	4628      	mov	r0, r5
 800c326:	47b0      	blx	r6
 800c328:	1c41      	adds	r1, r0, #1
 800c32a:	d1c7      	bne.n	800c2bc <__sflush_r+0x34>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d0c4      	beq.n	800c2bc <__sflush_r+0x34>
 800c332:	2b1d      	cmp	r3, #29
 800c334:	d001      	beq.n	800c33a <__sflush_r+0xb2>
 800c336:	2b16      	cmp	r3, #22
 800c338:	d101      	bne.n	800c33e <__sflush_r+0xb6>
 800c33a:	602f      	str	r7, [r5, #0]
 800c33c:	e7b1      	b.n	800c2a2 <__sflush_r+0x1a>
 800c33e:	89a3      	ldrh	r3, [r4, #12]
 800c340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c344:	81a3      	strh	r3, [r4, #12]
 800c346:	e7ad      	b.n	800c2a4 <__sflush_r+0x1c>
 800c348:	690f      	ldr	r7, [r1, #16]
 800c34a:	2f00      	cmp	r7, #0
 800c34c:	d0a9      	beq.n	800c2a2 <__sflush_r+0x1a>
 800c34e:	0793      	lsls	r3, r2, #30
 800c350:	680e      	ldr	r6, [r1, #0]
 800c352:	bf08      	it	eq
 800c354:	694b      	ldreq	r3, [r1, #20]
 800c356:	600f      	str	r7, [r1, #0]
 800c358:	bf18      	it	ne
 800c35a:	2300      	movne	r3, #0
 800c35c:	eba6 0807 	sub.w	r8, r6, r7
 800c360:	608b      	str	r3, [r1, #8]
 800c362:	f1b8 0f00 	cmp.w	r8, #0
 800c366:	dd9c      	ble.n	800c2a2 <__sflush_r+0x1a>
 800c368:	6a21      	ldr	r1, [r4, #32]
 800c36a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c36c:	4643      	mov	r3, r8
 800c36e:	463a      	mov	r2, r7
 800c370:	4628      	mov	r0, r5
 800c372:	47b0      	blx	r6
 800c374:	2800      	cmp	r0, #0
 800c376:	dc06      	bgt.n	800c386 <__sflush_r+0xfe>
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c37e:	81a3      	strh	r3, [r4, #12]
 800c380:	f04f 30ff 	mov.w	r0, #4294967295
 800c384:	e78e      	b.n	800c2a4 <__sflush_r+0x1c>
 800c386:	4407      	add	r7, r0
 800c388:	eba8 0800 	sub.w	r8, r8, r0
 800c38c:	e7e9      	b.n	800c362 <__sflush_r+0xda>
 800c38e:	bf00      	nop
 800c390:	20400001 	.word	0x20400001

0800c394 <_fflush_r>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	690b      	ldr	r3, [r1, #16]
 800c398:	4605      	mov	r5, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	b913      	cbnz	r3, 800c3a4 <_fflush_r+0x10>
 800c39e:	2500      	movs	r5, #0
 800c3a0:	4628      	mov	r0, r5
 800c3a2:	bd38      	pop	{r3, r4, r5, pc}
 800c3a4:	b118      	cbz	r0, 800c3ae <_fflush_r+0x1a>
 800c3a6:	6983      	ldr	r3, [r0, #24]
 800c3a8:	b90b      	cbnz	r3, 800c3ae <_fflush_r+0x1a>
 800c3aa:	f000 f887 	bl	800c4bc <__sinit>
 800c3ae:	4b14      	ldr	r3, [pc, #80]	; (800c400 <_fflush_r+0x6c>)
 800c3b0:	429c      	cmp	r4, r3
 800c3b2:	d11b      	bne.n	800c3ec <_fflush_r+0x58>
 800c3b4:	686c      	ldr	r4, [r5, #4]
 800c3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d0ef      	beq.n	800c39e <_fflush_r+0xa>
 800c3be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3c0:	07d0      	lsls	r0, r2, #31
 800c3c2:	d404      	bmi.n	800c3ce <_fflush_r+0x3a>
 800c3c4:	0599      	lsls	r1, r3, #22
 800c3c6:	d402      	bmi.n	800c3ce <_fflush_r+0x3a>
 800c3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ca:	f000 fc88 	bl	800ccde <__retarget_lock_acquire_recursive>
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	4621      	mov	r1, r4
 800c3d2:	f7ff ff59 	bl	800c288 <__sflush_r>
 800c3d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3d8:	07da      	lsls	r2, r3, #31
 800c3da:	4605      	mov	r5, r0
 800c3dc:	d4e0      	bmi.n	800c3a0 <_fflush_r+0xc>
 800c3de:	89a3      	ldrh	r3, [r4, #12]
 800c3e0:	059b      	lsls	r3, r3, #22
 800c3e2:	d4dd      	bmi.n	800c3a0 <_fflush_r+0xc>
 800c3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e6:	f000 fc7b 	bl	800cce0 <__retarget_lock_release_recursive>
 800c3ea:	e7d9      	b.n	800c3a0 <_fflush_r+0xc>
 800c3ec:	4b05      	ldr	r3, [pc, #20]	; (800c404 <_fflush_r+0x70>)
 800c3ee:	429c      	cmp	r4, r3
 800c3f0:	d101      	bne.n	800c3f6 <_fflush_r+0x62>
 800c3f2:	68ac      	ldr	r4, [r5, #8]
 800c3f4:	e7df      	b.n	800c3b6 <_fflush_r+0x22>
 800c3f6:	4b04      	ldr	r3, [pc, #16]	; (800c408 <_fflush_r+0x74>)
 800c3f8:	429c      	cmp	r4, r3
 800c3fa:	bf08      	it	eq
 800c3fc:	68ec      	ldreq	r4, [r5, #12]
 800c3fe:	e7da      	b.n	800c3b6 <_fflush_r+0x22>
 800c400:	0800ea70 	.word	0x0800ea70
 800c404:	0800ea90 	.word	0x0800ea90
 800c408:	0800ea50 	.word	0x0800ea50

0800c40c <std>:
 800c40c:	2300      	movs	r3, #0
 800c40e:	b510      	push	{r4, lr}
 800c410:	4604      	mov	r4, r0
 800c412:	e9c0 3300 	strd	r3, r3, [r0]
 800c416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c41a:	6083      	str	r3, [r0, #8]
 800c41c:	8181      	strh	r1, [r0, #12]
 800c41e:	6643      	str	r3, [r0, #100]	; 0x64
 800c420:	81c2      	strh	r2, [r0, #14]
 800c422:	6183      	str	r3, [r0, #24]
 800c424:	4619      	mov	r1, r3
 800c426:	2208      	movs	r2, #8
 800c428:	305c      	adds	r0, #92	; 0x5c
 800c42a:	f7fd fa0b 	bl	8009844 <memset>
 800c42e:	4b05      	ldr	r3, [pc, #20]	; (800c444 <std+0x38>)
 800c430:	6263      	str	r3, [r4, #36]	; 0x24
 800c432:	4b05      	ldr	r3, [pc, #20]	; (800c448 <std+0x3c>)
 800c434:	62a3      	str	r3, [r4, #40]	; 0x28
 800c436:	4b05      	ldr	r3, [pc, #20]	; (800c44c <std+0x40>)
 800c438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c43a:	4b05      	ldr	r3, [pc, #20]	; (800c450 <std+0x44>)
 800c43c:	6224      	str	r4, [r4, #32]
 800c43e:	6323      	str	r3, [r4, #48]	; 0x30
 800c440:	bd10      	pop	{r4, pc}
 800c442:	bf00      	nop
 800c444:	0800de69 	.word	0x0800de69
 800c448:	0800de8b 	.word	0x0800de8b
 800c44c:	0800dec3 	.word	0x0800dec3
 800c450:	0800dee7 	.word	0x0800dee7

0800c454 <_cleanup_r>:
 800c454:	4901      	ldr	r1, [pc, #4]	; (800c45c <_cleanup_r+0x8>)
 800c456:	f000 b8af 	b.w	800c5b8 <_fwalk_reent>
 800c45a:	bf00      	nop
 800c45c:	0800c395 	.word	0x0800c395

0800c460 <__sfmoreglue>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	1e4a      	subs	r2, r1, #1
 800c464:	2568      	movs	r5, #104	; 0x68
 800c466:	4355      	muls	r5, r2
 800c468:	460e      	mov	r6, r1
 800c46a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c46e:	f001 f9d1 	bl	800d814 <_malloc_r>
 800c472:	4604      	mov	r4, r0
 800c474:	b140      	cbz	r0, 800c488 <__sfmoreglue+0x28>
 800c476:	2100      	movs	r1, #0
 800c478:	e9c0 1600 	strd	r1, r6, [r0]
 800c47c:	300c      	adds	r0, #12
 800c47e:	60a0      	str	r0, [r4, #8]
 800c480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c484:	f7fd f9de 	bl	8009844 <memset>
 800c488:	4620      	mov	r0, r4
 800c48a:	bd70      	pop	{r4, r5, r6, pc}

0800c48c <__sfp_lock_acquire>:
 800c48c:	4801      	ldr	r0, [pc, #4]	; (800c494 <__sfp_lock_acquire+0x8>)
 800c48e:	f000 bc26 	b.w	800ccde <__retarget_lock_acquire_recursive>
 800c492:	bf00      	nop
 800c494:	2000096c 	.word	0x2000096c

0800c498 <__sfp_lock_release>:
 800c498:	4801      	ldr	r0, [pc, #4]	; (800c4a0 <__sfp_lock_release+0x8>)
 800c49a:	f000 bc21 	b.w	800cce0 <__retarget_lock_release_recursive>
 800c49e:	bf00      	nop
 800c4a0:	2000096c 	.word	0x2000096c

0800c4a4 <__sinit_lock_acquire>:
 800c4a4:	4801      	ldr	r0, [pc, #4]	; (800c4ac <__sinit_lock_acquire+0x8>)
 800c4a6:	f000 bc1a 	b.w	800ccde <__retarget_lock_acquire_recursive>
 800c4aa:	bf00      	nop
 800c4ac:	20000967 	.word	0x20000967

0800c4b0 <__sinit_lock_release>:
 800c4b0:	4801      	ldr	r0, [pc, #4]	; (800c4b8 <__sinit_lock_release+0x8>)
 800c4b2:	f000 bc15 	b.w	800cce0 <__retarget_lock_release_recursive>
 800c4b6:	bf00      	nop
 800c4b8:	20000967 	.word	0x20000967

0800c4bc <__sinit>:
 800c4bc:	b510      	push	{r4, lr}
 800c4be:	4604      	mov	r4, r0
 800c4c0:	f7ff fff0 	bl	800c4a4 <__sinit_lock_acquire>
 800c4c4:	69a3      	ldr	r3, [r4, #24]
 800c4c6:	b11b      	cbz	r3, 800c4d0 <__sinit+0x14>
 800c4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4cc:	f7ff bff0 	b.w	800c4b0 <__sinit_lock_release>
 800c4d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c4d4:	6523      	str	r3, [r4, #80]	; 0x50
 800c4d6:	4b13      	ldr	r3, [pc, #76]	; (800c524 <__sinit+0x68>)
 800c4d8:	4a13      	ldr	r2, [pc, #76]	; (800c528 <__sinit+0x6c>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c4de:	42a3      	cmp	r3, r4
 800c4e0:	bf04      	itt	eq
 800c4e2:	2301      	moveq	r3, #1
 800c4e4:	61a3      	streq	r3, [r4, #24]
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	f000 f820 	bl	800c52c <__sfp>
 800c4ec:	6060      	str	r0, [r4, #4]
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f000 f81c 	bl	800c52c <__sfp>
 800c4f4:	60a0      	str	r0, [r4, #8]
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 f818 	bl	800c52c <__sfp>
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	60e0      	str	r0, [r4, #12]
 800c500:	2104      	movs	r1, #4
 800c502:	6860      	ldr	r0, [r4, #4]
 800c504:	f7ff ff82 	bl	800c40c <std>
 800c508:	68a0      	ldr	r0, [r4, #8]
 800c50a:	2201      	movs	r2, #1
 800c50c:	2109      	movs	r1, #9
 800c50e:	f7ff ff7d 	bl	800c40c <std>
 800c512:	68e0      	ldr	r0, [r4, #12]
 800c514:	2202      	movs	r2, #2
 800c516:	2112      	movs	r1, #18
 800c518:	f7ff ff78 	bl	800c40c <std>
 800c51c:	2301      	movs	r3, #1
 800c51e:	61a3      	str	r3, [r4, #24]
 800c520:	e7d2      	b.n	800c4c8 <__sinit+0xc>
 800c522:	bf00      	nop
 800c524:	0800e824 	.word	0x0800e824
 800c528:	0800c455 	.word	0x0800c455

0800c52c <__sfp>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	4607      	mov	r7, r0
 800c530:	f7ff ffac 	bl	800c48c <__sfp_lock_acquire>
 800c534:	4b1e      	ldr	r3, [pc, #120]	; (800c5b0 <__sfp+0x84>)
 800c536:	681e      	ldr	r6, [r3, #0]
 800c538:	69b3      	ldr	r3, [r6, #24]
 800c53a:	b913      	cbnz	r3, 800c542 <__sfp+0x16>
 800c53c:	4630      	mov	r0, r6
 800c53e:	f7ff ffbd 	bl	800c4bc <__sinit>
 800c542:	3648      	adds	r6, #72	; 0x48
 800c544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c548:	3b01      	subs	r3, #1
 800c54a:	d503      	bpl.n	800c554 <__sfp+0x28>
 800c54c:	6833      	ldr	r3, [r6, #0]
 800c54e:	b30b      	cbz	r3, 800c594 <__sfp+0x68>
 800c550:	6836      	ldr	r6, [r6, #0]
 800c552:	e7f7      	b.n	800c544 <__sfp+0x18>
 800c554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c558:	b9d5      	cbnz	r5, 800c590 <__sfp+0x64>
 800c55a:	4b16      	ldr	r3, [pc, #88]	; (800c5b4 <__sfp+0x88>)
 800c55c:	60e3      	str	r3, [r4, #12]
 800c55e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c562:	6665      	str	r5, [r4, #100]	; 0x64
 800c564:	f000 fbba 	bl	800ccdc <__retarget_lock_init_recursive>
 800c568:	f7ff ff96 	bl	800c498 <__sfp_lock_release>
 800c56c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c574:	6025      	str	r5, [r4, #0]
 800c576:	61a5      	str	r5, [r4, #24]
 800c578:	2208      	movs	r2, #8
 800c57a:	4629      	mov	r1, r5
 800c57c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c580:	f7fd f960 	bl	8009844 <memset>
 800c584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c58c:	4620      	mov	r0, r4
 800c58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c590:	3468      	adds	r4, #104	; 0x68
 800c592:	e7d9      	b.n	800c548 <__sfp+0x1c>
 800c594:	2104      	movs	r1, #4
 800c596:	4638      	mov	r0, r7
 800c598:	f7ff ff62 	bl	800c460 <__sfmoreglue>
 800c59c:	4604      	mov	r4, r0
 800c59e:	6030      	str	r0, [r6, #0]
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d1d5      	bne.n	800c550 <__sfp+0x24>
 800c5a4:	f7ff ff78 	bl	800c498 <__sfp_lock_release>
 800c5a8:	230c      	movs	r3, #12
 800c5aa:	603b      	str	r3, [r7, #0]
 800c5ac:	e7ee      	b.n	800c58c <__sfp+0x60>
 800c5ae:	bf00      	nop
 800c5b0:	0800e824 	.word	0x0800e824
 800c5b4:	ffff0001 	.word	0xffff0001

0800c5b8 <_fwalk_reent>:
 800c5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5bc:	4606      	mov	r6, r0
 800c5be:	4688      	mov	r8, r1
 800c5c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5c4:	2700      	movs	r7, #0
 800c5c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5ca:	f1b9 0901 	subs.w	r9, r9, #1
 800c5ce:	d505      	bpl.n	800c5dc <_fwalk_reent+0x24>
 800c5d0:	6824      	ldr	r4, [r4, #0]
 800c5d2:	2c00      	cmp	r4, #0
 800c5d4:	d1f7      	bne.n	800c5c6 <_fwalk_reent+0xe>
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5dc:	89ab      	ldrh	r3, [r5, #12]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d907      	bls.n	800c5f2 <_fwalk_reent+0x3a>
 800c5e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	d003      	beq.n	800c5f2 <_fwalk_reent+0x3a>
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	4630      	mov	r0, r6
 800c5ee:	47c0      	blx	r8
 800c5f0:	4307      	orrs	r7, r0
 800c5f2:	3568      	adds	r5, #104	; 0x68
 800c5f4:	e7e9      	b.n	800c5ca <_fwalk_reent+0x12>

0800c5f6 <rshift>:
 800c5f6:	6903      	ldr	r3, [r0, #16]
 800c5f8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c5fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c600:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c604:	f100 0414 	add.w	r4, r0, #20
 800c608:	dd45      	ble.n	800c696 <rshift+0xa0>
 800c60a:	f011 011f 	ands.w	r1, r1, #31
 800c60e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c612:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c616:	d10c      	bne.n	800c632 <rshift+0x3c>
 800c618:	f100 0710 	add.w	r7, r0, #16
 800c61c:	4629      	mov	r1, r5
 800c61e:	42b1      	cmp	r1, r6
 800c620:	d334      	bcc.n	800c68c <rshift+0x96>
 800c622:	1a9b      	subs	r3, r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	1eea      	subs	r2, r5, #3
 800c628:	4296      	cmp	r6, r2
 800c62a:	bf38      	it	cc
 800c62c:	2300      	movcc	r3, #0
 800c62e:	4423      	add	r3, r4
 800c630:	e015      	b.n	800c65e <rshift+0x68>
 800c632:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c636:	f1c1 0820 	rsb	r8, r1, #32
 800c63a:	40cf      	lsrs	r7, r1
 800c63c:	f105 0e04 	add.w	lr, r5, #4
 800c640:	46a1      	mov	r9, r4
 800c642:	4576      	cmp	r6, lr
 800c644:	46f4      	mov	ip, lr
 800c646:	d815      	bhi.n	800c674 <rshift+0x7e>
 800c648:	1a9b      	subs	r3, r3, r2
 800c64a:	009a      	lsls	r2, r3, #2
 800c64c:	3a04      	subs	r2, #4
 800c64e:	3501      	adds	r5, #1
 800c650:	42ae      	cmp	r6, r5
 800c652:	bf38      	it	cc
 800c654:	2200      	movcc	r2, #0
 800c656:	18a3      	adds	r3, r4, r2
 800c658:	50a7      	str	r7, [r4, r2]
 800c65a:	b107      	cbz	r7, 800c65e <rshift+0x68>
 800c65c:	3304      	adds	r3, #4
 800c65e:	1b1a      	subs	r2, r3, r4
 800c660:	42a3      	cmp	r3, r4
 800c662:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c666:	bf08      	it	eq
 800c668:	2300      	moveq	r3, #0
 800c66a:	6102      	str	r2, [r0, #16]
 800c66c:	bf08      	it	eq
 800c66e:	6143      	streq	r3, [r0, #20]
 800c670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c674:	f8dc c000 	ldr.w	ip, [ip]
 800c678:	fa0c fc08 	lsl.w	ip, ip, r8
 800c67c:	ea4c 0707 	orr.w	r7, ip, r7
 800c680:	f849 7b04 	str.w	r7, [r9], #4
 800c684:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c688:	40cf      	lsrs	r7, r1
 800c68a:	e7da      	b.n	800c642 <rshift+0x4c>
 800c68c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c690:	f847 cf04 	str.w	ip, [r7, #4]!
 800c694:	e7c3      	b.n	800c61e <rshift+0x28>
 800c696:	4623      	mov	r3, r4
 800c698:	e7e1      	b.n	800c65e <rshift+0x68>

0800c69a <__hexdig_fun>:
 800c69a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c69e:	2b09      	cmp	r3, #9
 800c6a0:	d802      	bhi.n	800c6a8 <__hexdig_fun+0xe>
 800c6a2:	3820      	subs	r0, #32
 800c6a4:	b2c0      	uxtb	r0, r0
 800c6a6:	4770      	bx	lr
 800c6a8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c6ac:	2b05      	cmp	r3, #5
 800c6ae:	d801      	bhi.n	800c6b4 <__hexdig_fun+0x1a>
 800c6b0:	3847      	subs	r0, #71	; 0x47
 800c6b2:	e7f7      	b.n	800c6a4 <__hexdig_fun+0xa>
 800c6b4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c6b8:	2b05      	cmp	r3, #5
 800c6ba:	d801      	bhi.n	800c6c0 <__hexdig_fun+0x26>
 800c6bc:	3827      	subs	r0, #39	; 0x27
 800c6be:	e7f1      	b.n	800c6a4 <__hexdig_fun+0xa>
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	4770      	bx	lr

0800c6c4 <__gethex>:
 800c6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c8:	ed2d 8b02 	vpush	{d8}
 800c6cc:	b089      	sub	sp, #36	; 0x24
 800c6ce:	ee08 0a10 	vmov	s16, r0
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	4bbc      	ldr	r3, [pc, #752]	; (800c9c8 <__gethex+0x304>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	468b      	mov	fp, r1
 800c6de:	4690      	mov	r8, r2
 800c6e0:	f7f3 fd76 	bl	80001d0 <strlen>
 800c6e4:	9b01      	ldr	r3, [sp, #4]
 800c6e6:	f8db 2000 	ldr.w	r2, [fp]
 800c6ea:	4403      	add	r3, r0
 800c6ec:	4682      	mov	sl, r0
 800c6ee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c6f2:	9305      	str	r3, [sp, #20]
 800c6f4:	1c93      	adds	r3, r2, #2
 800c6f6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c6fa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c6fe:	32fe      	adds	r2, #254	; 0xfe
 800c700:	18d1      	adds	r1, r2, r3
 800c702:	461f      	mov	r7, r3
 800c704:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c708:	9100      	str	r1, [sp, #0]
 800c70a:	2830      	cmp	r0, #48	; 0x30
 800c70c:	d0f8      	beq.n	800c700 <__gethex+0x3c>
 800c70e:	f7ff ffc4 	bl	800c69a <__hexdig_fun>
 800c712:	4604      	mov	r4, r0
 800c714:	2800      	cmp	r0, #0
 800c716:	d13a      	bne.n	800c78e <__gethex+0xca>
 800c718:	9901      	ldr	r1, [sp, #4]
 800c71a:	4652      	mov	r2, sl
 800c71c:	4638      	mov	r0, r7
 800c71e:	f001 fbe6 	bl	800deee <strncmp>
 800c722:	4605      	mov	r5, r0
 800c724:	2800      	cmp	r0, #0
 800c726:	d168      	bne.n	800c7fa <__gethex+0x136>
 800c728:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c72c:	eb07 060a 	add.w	r6, r7, sl
 800c730:	f7ff ffb3 	bl	800c69a <__hexdig_fun>
 800c734:	2800      	cmp	r0, #0
 800c736:	d062      	beq.n	800c7fe <__gethex+0x13a>
 800c738:	4633      	mov	r3, r6
 800c73a:	7818      	ldrb	r0, [r3, #0]
 800c73c:	2830      	cmp	r0, #48	; 0x30
 800c73e:	461f      	mov	r7, r3
 800c740:	f103 0301 	add.w	r3, r3, #1
 800c744:	d0f9      	beq.n	800c73a <__gethex+0x76>
 800c746:	f7ff ffa8 	bl	800c69a <__hexdig_fun>
 800c74a:	2301      	movs	r3, #1
 800c74c:	fab0 f480 	clz	r4, r0
 800c750:	0964      	lsrs	r4, r4, #5
 800c752:	4635      	mov	r5, r6
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	463a      	mov	r2, r7
 800c758:	4616      	mov	r6, r2
 800c75a:	3201      	adds	r2, #1
 800c75c:	7830      	ldrb	r0, [r6, #0]
 800c75e:	f7ff ff9c 	bl	800c69a <__hexdig_fun>
 800c762:	2800      	cmp	r0, #0
 800c764:	d1f8      	bne.n	800c758 <__gethex+0x94>
 800c766:	9901      	ldr	r1, [sp, #4]
 800c768:	4652      	mov	r2, sl
 800c76a:	4630      	mov	r0, r6
 800c76c:	f001 fbbf 	bl	800deee <strncmp>
 800c770:	b980      	cbnz	r0, 800c794 <__gethex+0xd0>
 800c772:	b94d      	cbnz	r5, 800c788 <__gethex+0xc4>
 800c774:	eb06 050a 	add.w	r5, r6, sl
 800c778:	462a      	mov	r2, r5
 800c77a:	4616      	mov	r6, r2
 800c77c:	3201      	adds	r2, #1
 800c77e:	7830      	ldrb	r0, [r6, #0]
 800c780:	f7ff ff8b 	bl	800c69a <__hexdig_fun>
 800c784:	2800      	cmp	r0, #0
 800c786:	d1f8      	bne.n	800c77a <__gethex+0xb6>
 800c788:	1bad      	subs	r5, r5, r6
 800c78a:	00ad      	lsls	r5, r5, #2
 800c78c:	e004      	b.n	800c798 <__gethex+0xd4>
 800c78e:	2400      	movs	r4, #0
 800c790:	4625      	mov	r5, r4
 800c792:	e7e0      	b.n	800c756 <__gethex+0x92>
 800c794:	2d00      	cmp	r5, #0
 800c796:	d1f7      	bne.n	800c788 <__gethex+0xc4>
 800c798:	7833      	ldrb	r3, [r6, #0]
 800c79a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c79e:	2b50      	cmp	r3, #80	; 0x50
 800c7a0:	d13b      	bne.n	800c81a <__gethex+0x156>
 800c7a2:	7873      	ldrb	r3, [r6, #1]
 800c7a4:	2b2b      	cmp	r3, #43	; 0x2b
 800c7a6:	d02c      	beq.n	800c802 <__gethex+0x13e>
 800c7a8:	2b2d      	cmp	r3, #45	; 0x2d
 800c7aa:	d02e      	beq.n	800c80a <__gethex+0x146>
 800c7ac:	1c71      	adds	r1, r6, #1
 800c7ae:	f04f 0900 	mov.w	r9, #0
 800c7b2:	7808      	ldrb	r0, [r1, #0]
 800c7b4:	f7ff ff71 	bl	800c69a <__hexdig_fun>
 800c7b8:	1e43      	subs	r3, r0, #1
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	2b18      	cmp	r3, #24
 800c7be:	d82c      	bhi.n	800c81a <__gethex+0x156>
 800c7c0:	f1a0 0210 	sub.w	r2, r0, #16
 800c7c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c7c8:	f7ff ff67 	bl	800c69a <__hexdig_fun>
 800c7cc:	1e43      	subs	r3, r0, #1
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b18      	cmp	r3, #24
 800c7d2:	d91d      	bls.n	800c810 <__gethex+0x14c>
 800c7d4:	f1b9 0f00 	cmp.w	r9, #0
 800c7d8:	d000      	beq.n	800c7dc <__gethex+0x118>
 800c7da:	4252      	negs	r2, r2
 800c7dc:	4415      	add	r5, r2
 800c7de:	f8cb 1000 	str.w	r1, [fp]
 800c7e2:	b1e4      	cbz	r4, 800c81e <__gethex+0x15a>
 800c7e4:	9b00      	ldr	r3, [sp, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	bf14      	ite	ne
 800c7ea:	2700      	movne	r7, #0
 800c7ec:	2706      	moveq	r7, #6
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	b009      	add	sp, #36	; 0x24
 800c7f2:	ecbd 8b02 	vpop	{d8}
 800c7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fa:	463e      	mov	r6, r7
 800c7fc:	4625      	mov	r5, r4
 800c7fe:	2401      	movs	r4, #1
 800c800:	e7ca      	b.n	800c798 <__gethex+0xd4>
 800c802:	f04f 0900 	mov.w	r9, #0
 800c806:	1cb1      	adds	r1, r6, #2
 800c808:	e7d3      	b.n	800c7b2 <__gethex+0xee>
 800c80a:	f04f 0901 	mov.w	r9, #1
 800c80e:	e7fa      	b.n	800c806 <__gethex+0x142>
 800c810:	230a      	movs	r3, #10
 800c812:	fb03 0202 	mla	r2, r3, r2, r0
 800c816:	3a10      	subs	r2, #16
 800c818:	e7d4      	b.n	800c7c4 <__gethex+0x100>
 800c81a:	4631      	mov	r1, r6
 800c81c:	e7df      	b.n	800c7de <__gethex+0x11a>
 800c81e:	1bf3      	subs	r3, r6, r7
 800c820:	3b01      	subs	r3, #1
 800c822:	4621      	mov	r1, r4
 800c824:	2b07      	cmp	r3, #7
 800c826:	dc0b      	bgt.n	800c840 <__gethex+0x17c>
 800c828:	ee18 0a10 	vmov	r0, s16
 800c82c:	f000 fad8 	bl	800cde0 <_Balloc>
 800c830:	4604      	mov	r4, r0
 800c832:	b940      	cbnz	r0, 800c846 <__gethex+0x182>
 800c834:	4b65      	ldr	r3, [pc, #404]	; (800c9cc <__gethex+0x308>)
 800c836:	4602      	mov	r2, r0
 800c838:	21de      	movs	r1, #222	; 0xde
 800c83a:	4865      	ldr	r0, [pc, #404]	; (800c9d0 <__gethex+0x30c>)
 800c83c:	f001 fb88 	bl	800df50 <__assert_func>
 800c840:	3101      	adds	r1, #1
 800c842:	105b      	asrs	r3, r3, #1
 800c844:	e7ee      	b.n	800c824 <__gethex+0x160>
 800c846:	f100 0914 	add.w	r9, r0, #20
 800c84a:	f04f 0b00 	mov.w	fp, #0
 800c84e:	f1ca 0301 	rsb	r3, sl, #1
 800c852:	f8cd 9008 	str.w	r9, [sp, #8]
 800c856:	f8cd b000 	str.w	fp, [sp]
 800c85a:	9306      	str	r3, [sp, #24]
 800c85c:	42b7      	cmp	r7, r6
 800c85e:	d340      	bcc.n	800c8e2 <__gethex+0x21e>
 800c860:	9802      	ldr	r0, [sp, #8]
 800c862:	9b00      	ldr	r3, [sp, #0]
 800c864:	f840 3b04 	str.w	r3, [r0], #4
 800c868:	eba0 0009 	sub.w	r0, r0, r9
 800c86c:	1080      	asrs	r0, r0, #2
 800c86e:	0146      	lsls	r6, r0, #5
 800c870:	6120      	str	r0, [r4, #16]
 800c872:	4618      	mov	r0, r3
 800c874:	f000 fbaa 	bl	800cfcc <__hi0bits>
 800c878:	1a30      	subs	r0, r6, r0
 800c87a:	f8d8 6000 	ldr.w	r6, [r8]
 800c87e:	42b0      	cmp	r0, r6
 800c880:	dd63      	ble.n	800c94a <__gethex+0x286>
 800c882:	1b87      	subs	r7, r0, r6
 800c884:	4639      	mov	r1, r7
 800c886:	4620      	mov	r0, r4
 800c888:	f000 ff44 	bl	800d714 <__any_on>
 800c88c:	4682      	mov	sl, r0
 800c88e:	b1a8      	cbz	r0, 800c8bc <__gethex+0x1f8>
 800c890:	1e7b      	subs	r3, r7, #1
 800c892:	1159      	asrs	r1, r3, #5
 800c894:	f003 021f 	and.w	r2, r3, #31
 800c898:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c89c:	f04f 0a01 	mov.w	sl, #1
 800c8a0:	fa0a f202 	lsl.w	r2, sl, r2
 800c8a4:	420a      	tst	r2, r1
 800c8a6:	d009      	beq.n	800c8bc <__gethex+0x1f8>
 800c8a8:	4553      	cmp	r3, sl
 800c8aa:	dd05      	ble.n	800c8b8 <__gethex+0x1f4>
 800c8ac:	1eb9      	subs	r1, r7, #2
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 ff30 	bl	800d714 <__any_on>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d145      	bne.n	800c944 <__gethex+0x280>
 800c8b8:	f04f 0a02 	mov.w	sl, #2
 800c8bc:	4639      	mov	r1, r7
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f7ff fe99 	bl	800c5f6 <rshift>
 800c8c4:	443d      	add	r5, r7
 800c8c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8ca:	42ab      	cmp	r3, r5
 800c8cc:	da4c      	bge.n	800c968 <__gethex+0x2a4>
 800c8ce:	ee18 0a10 	vmov	r0, s16
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	f000 fac4 	bl	800ce60 <_Bfree>
 800c8d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c8da:	2300      	movs	r3, #0
 800c8dc:	6013      	str	r3, [r2, #0]
 800c8de:	27a3      	movs	r7, #163	; 0xa3
 800c8e0:	e785      	b.n	800c7ee <__gethex+0x12a>
 800c8e2:	1e73      	subs	r3, r6, #1
 800c8e4:	9a05      	ldr	r2, [sp, #20]
 800c8e6:	9303      	str	r3, [sp, #12]
 800c8e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d019      	beq.n	800c924 <__gethex+0x260>
 800c8f0:	f1bb 0f20 	cmp.w	fp, #32
 800c8f4:	d107      	bne.n	800c906 <__gethex+0x242>
 800c8f6:	9b02      	ldr	r3, [sp, #8]
 800c8f8:	9a00      	ldr	r2, [sp, #0]
 800c8fa:	f843 2b04 	str.w	r2, [r3], #4
 800c8fe:	9302      	str	r3, [sp, #8]
 800c900:	2300      	movs	r3, #0
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	469b      	mov	fp, r3
 800c906:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c90a:	f7ff fec6 	bl	800c69a <__hexdig_fun>
 800c90e:	9b00      	ldr	r3, [sp, #0]
 800c910:	f000 000f 	and.w	r0, r0, #15
 800c914:	fa00 f00b 	lsl.w	r0, r0, fp
 800c918:	4303      	orrs	r3, r0
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	f10b 0b04 	add.w	fp, fp, #4
 800c920:	9b03      	ldr	r3, [sp, #12]
 800c922:	e00d      	b.n	800c940 <__gethex+0x27c>
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	9a06      	ldr	r2, [sp, #24]
 800c928:	4413      	add	r3, r2
 800c92a:	42bb      	cmp	r3, r7
 800c92c:	d3e0      	bcc.n	800c8f0 <__gethex+0x22c>
 800c92e:	4618      	mov	r0, r3
 800c930:	9901      	ldr	r1, [sp, #4]
 800c932:	9307      	str	r3, [sp, #28]
 800c934:	4652      	mov	r2, sl
 800c936:	f001 fada 	bl	800deee <strncmp>
 800c93a:	9b07      	ldr	r3, [sp, #28]
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d1d7      	bne.n	800c8f0 <__gethex+0x22c>
 800c940:	461e      	mov	r6, r3
 800c942:	e78b      	b.n	800c85c <__gethex+0x198>
 800c944:	f04f 0a03 	mov.w	sl, #3
 800c948:	e7b8      	b.n	800c8bc <__gethex+0x1f8>
 800c94a:	da0a      	bge.n	800c962 <__gethex+0x29e>
 800c94c:	1a37      	subs	r7, r6, r0
 800c94e:	4621      	mov	r1, r4
 800c950:	ee18 0a10 	vmov	r0, s16
 800c954:	463a      	mov	r2, r7
 800c956:	f000 fc9f 	bl	800d298 <__lshift>
 800c95a:	1bed      	subs	r5, r5, r7
 800c95c:	4604      	mov	r4, r0
 800c95e:	f100 0914 	add.w	r9, r0, #20
 800c962:	f04f 0a00 	mov.w	sl, #0
 800c966:	e7ae      	b.n	800c8c6 <__gethex+0x202>
 800c968:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c96c:	42a8      	cmp	r0, r5
 800c96e:	dd72      	ble.n	800ca56 <__gethex+0x392>
 800c970:	1b45      	subs	r5, r0, r5
 800c972:	42ae      	cmp	r6, r5
 800c974:	dc36      	bgt.n	800c9e4 <__gethex+0x320>
 800c976:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d02a      	beq.n	800c9d4 <__gethex+0x310>
 800c97e:	2b03      	cmp	r3, #3
 800c980:	d02c      	beq.n	800c9dc <__gethex+0x318>
 800c982:	2b01      	cmp	r3, #1
 800c984:	d115      	bne.n	800c9b2 <__gethex+0x2ee>
 800c986:	42ae      	cmp	r6, r5
 800c988:	d113      	bne.n	800c9b2 <__gethex+0x2ee>
 800c98a:	2e01      	cmp	r6, #1
 800c98c:	d10b      	bne.n	800c9a6 <__gethex+0x2e2>
 800c98e:	9a04      	ldr	r2, [sp, #16]
 800c990:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c994:	6013      	str	r3, [r2, #0]
 800c996:	2301      	movs	r3, #1
 800c998:	6123      	str	r3, [r4, #16]
 800c99a:	f8c9 3000 	str.w	r3, [r9]
 800c99e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9a0:	2762      	movs	r7, #98	; 0x62
 800c9a2:	601c      	str	r4, [r3, #0]
 800c9a4:	e723      	b.n	800c7ee <__gethex+0x12a>
 800c9a6:	1e71      	subs	r1, r6, #1
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f000 feb3 	bl	800d714 <__any_on>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	d1ed      	bne.n	800c98e <__gethex+0x2ca>
 800c9b2:	ee18 0a10 	vmov	r0, s16
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	f000 fa52 	bl	800ce60 <_Bfree>
 800c9bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c9be:	2300      	movs	r3, #0
 800c9c0:	6013      	str	r3, [r2, #0]
 800c9c2:	2750      	movs	r7, #80	; 0x50
 800c9c4:	e713      	b.n	800c7ee <__gethex+0x12a>
 800c9c6:	bf00      	nop
 800c9c8:	0800eb1c 	.word	0x0800eb1c
 800c9cc:	0800ea3c 	.word	0x0800ea3c
 800c9d0:	0800eab0 	.word	0x0800eab0
 800c9d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1eb      	bne.n	800c9b2 <__gethex+0x2ee>
 800c9da:	e7d8      	b.n	800c98e <__gethex+0x2ca>
 800c9dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1d5      	bne.n	800c98e <__gethex+0x2ca>
 800c9e2:	e7e6      	b.n	800c9b2 <__gethex+0x2ee>
 800c9e4:	1e6f      	subs	r7, r5, #1
 800c9e6:	f1ba 0f00 	cmp.w	sl, #0
 800c9ea:	d131      	bne.n	800ca50 <__gethex+0x38c>
 800c9ec:	b127      	cbz	r7, 800c9f8 <__gethex+0x334>
 800c9ee:	4639      	mov	r1, r7
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f000 fe8f 	bl	800d714 <__any_on>
 800c9f6:	4682      	mov	sl, r0
 800c9f8:	117b      	asrs	r3, r7, #5
 800c9fa:	2101      	movs	r1, #1
 800c9fc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ca00:	f007 071f 	and.w	r7, r7, #31
 800ca04:	fa01 f707 	lsl.w	r7, r1, r7
 800ca08:	421f      	tst	r7, r3
 800ca0a:	4629      	mov	r1, r5
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	bf18      	it	ne
 800ca10:	f04a 0a02 	orrne.w	sl, sl, #2
 800ca14:	1b76      	subs	r6, r6, r5
 800ca16:	f7ff fdee 	bl	800c5f6 <rshift>
 800ca1a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ca1e:	2702      	movs	r7, #2
 800ca20:	f1ba 0f00 	cmp.w	sl, #0
 800ca24:	d048      	beq.n	800cab8 <__gethex+0x3f4>
 800ca26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca2a:	2b02      	cmp	r3, #2
 800ca2c:	d015      	beq.n	800ca5a <__gethex+0x396>
 800ca2e:	2b03      	cmp	r3, #3
 800ca30:	d017      	beq.n	800ca62 <__gethex+0x39e>
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d109      	bne.n	800ca4a <__gethex+0x386>
 800ca36:	f01a 0f02 	tst.w	sl, #2
 800ca3a:	d006      	beq.n	800ca4a <__gethex+0x386>
 800ca3c:	f8d9 0000 	ldr.w	r0, [r9]
 800ca40:	ea4a 0a00 	orr.w	sl, sl, r0
 800ca44:	f01a 0f01 	tst.w	sl, #1
 800ca48:	d10e      	bne.n	800ca68 <__gethex+0x3a4>
 800ca4a:	f047 0710 	orr.w	r7, r7, #16
 800ca4e:	e033      	b.n	800cab8 <__gethex+0x3f4>
 800ca50:	f04f 0a01 	mov.w	sl, #1
 800ca54:	e7d0      	b.n	800c9f8 <__gethex+0x334>
 800ca56:	2701      	movs	r7, #1
 800ca58:	e7e2      	b.n	800ca20 <__gethex+0x35c>
 800ca5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca5c:	f1c3 0301 	rsb	r3, r3, #1
 800ca60:	9315      	str	r3, [sp, #84]	; 0x54
 800ca62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d0f0      	beq.n	800ca4a <__gethex+0x386>
 800ca68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca6c:	f104 0314 	add.w	r3, r4, #20
 800ca70:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca74:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca78:	f04f 0c00 	mov.w	ip, #0
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca82:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca86:	d01c      	beq.n	800cac2 <__gethex+0x3fe>
 800ca88:	3201      	adds	r2, #1
 800ca8a:	6002      	str	r2, [r0, #0]
 800ca8c:	2f02      	cmp	r7, #2
 800ca8e:	f104 0314 	add.w	r3, r4, #20
 800ca92:	d13f      	bne.n	800cb14 <__gethex+0x450>
 800ca94:	f8d8 2000 	ldr.w	r2, [r8]
 800ca98:	3a01      	subs	r2, #1
 800ca9a:	42b2      	cmp	r2, r6
 800ca9c:	d10a      	bne.n	800cab4 <__gethex+0x3f0>
 800ca9e:	1171      	asrs	r1, r6, #5
 800caa0:	2201      	movs	r2, #1
 800caa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800caa6:	f006 061f 	and.w	r6, r6, #31
 800caaa:	fa02 f606 	lsl.w	r6, r2, r6
 800caae:	421e      	tst	r6, r3
 800cab0:	bf18      	it	ne
 800cab2:	4617      	movne	r7, r2
 800cab4:	f047 0720 	orr.w	r7, r7, #32
 800cab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800caba:	601c      	str	r4, [r3, #0]
 800cabc:	9b04      	ldr	r3, [sp, #16]
 800cabe:	601d      	str	r5, [r3, #0]
 800cac0:	e695      	b.n	800c7ee <__gethex+0x12a>
 800cac2:	4299      	cmp	r1, r3
 800cac4:	f843 cc04 	str.w	ip, [r3, #-4]
 800cac8:	d8d8      	bhi.n	800ca7c <__gethex+0x3b8>
 800caca:	68a3      	ldr	r3, [r4, #8]
 800cacc:	459b      	cmp	fp, r3
 800cace:	db19      	blt.n	800cb04 <__gethex+0x440>
 800cad0:	6861      	ldr	r1, [r4, #4]
 800cad2:	ee18 0a10 	vmov	r0, s16
 800cad6:	3101      	adds	r1, #1
 800cad8:	f000 f982 	bl	800cde0 <_Balloc>
 800cadc:	4681      	mov	r9, r0
 800cade:	b918      	cbnz	r0, 800cae8 <__gethex+0x424>
 800cae0:	4b1a      	ldr	r3, [pc, #104]	; (800cb4c <__gethex+0x488>)
 800cae2:	4602      	mov	r2, r0
 800cae4:	2184      	movs	r1, #132	; 0x84
 800cae6:	e6a8      	b.n	800c83a <__gethex+0x176>
 800cae8:	6922      	ldr	r2, [r4, #16]
 800caea:	3202      	adds	r2, #2
 800caec:	f104 010c 	add.w	r1, r4, #12
 800caf0:	0092      	lsls	r2, r2, #2
 800caf2:	300c      	adds	r0, #12
 800caf4:	f7fc fe98 	bl	8009828 <memcpy>
 800caf8:	4621      	mov	r1, r4
 800cafa:	ee18 0a10 	vmov	r0, s16
 800cafe:	f000 f9af 	bl	800ce60 <_Bfree>
 800cb02:	464c      	mov	r4, r9
 800cb04:	6923      	ldr	r3, [r4, #16]
 800cb06:	1c5a      	adds	r2, r3, #1
 800cb08:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb0c:	6122      	str	r2, [r4, #16]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	615a      	str	r2, [r3, #20]
 800cb12:	e7bb      	b.n	800ca8c <__gethex+0x3c8>
 800cb14:	6922      	ldr	r2, [r4, #16]
 800cb16:	455a      	cmp	r2, fp
 800cb18:	dd0b      	ble.n	800cb32 <__gethex+0x46e>
 800cb1a:	2101      	movs	r1, #1
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	f7ff fd6a 	bl	800c5f6 <rshift>
 800cb22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb26:	3501      	adds	r5, #1
 800cb28:	42ab      	cmp	r3, r5
 800cb2a:	f6ff aed0 	blt.w	800c8ce <__gethex+0x20a>
 800cb2e:	2701      	movs	r7, #1
 800cb30:	e7c0      	b.n	800cab4 <__gethex+0x3f0>
 800cb32:	f016 061f 	ands.w	r6, r6, #31
 800cb36:	d0fa      	beq.n	800cb2e <__gethex+0x46a>
 800cb38:	449a      	add	sl, r3
 800cb3a:	f1c6 0620 	rsb	r6, r6, #32
 800cb3e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cb42:	f000 fa43 	bl	800cfcc <__hi0bits>
 800cb46:	42b0      	cmp	r0, r6
 800cb48:	dbe7      	blt.n	800cb1a <__gethex+0x456>
 800cb4a:	e7f0      	b.n	800cb2e <__gethex+0x46a>
 800cb4c:	0800ea3c 	.word	0x0800ea3c

0800cb50 <L_shift>:
 800cb50:	f1c2 0208 	rsb	r2, r2, #8
 800cb54:	0092      	lsls	r2, r2, #2
 800cb56:	b570      	push	{r4, r5, r6, lr}
 800cb58:	f1c2 0620 	rsb	r6, r2, #32
 800cb5c:	6843      	ldr	r3, [r0, #4]
 800cb5e:	6804      	ldr	r4, [r0, #0]
 800cb60:	fa03 f506 	lsl.w	r5, r3, r6
 800cb64:	432c      	orrs	r4, r5
 800cb66:	40d3      	lsrs	r3, r2
 800cb68:	6004      	str	r4, [r0, #0]
 800cb6a:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb6e:	4288      	cmp	r0, r1
 800cb70:	d3f4      	bcc.n	800cb5c <L_shift+0xc>
 800cb72:	bd70      	pop	{r4, r5, r6, pc}

0800cb74 <__match>:
 800cb74:	b530      	push	{r4, r5, lr}
 800cb76:	6803      	ldr	r3, [r0, #0]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb7e:	b914      	cbnz	r4, 800cb86 <__match+0x12>
 800cb80:	6003      	str	r3, [r0, #0]
 800cb82:	2001      	movs	r0, #1
 800cb84:	bd30      	pop	{r4, r5, pc}
 800cb86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cb8e:	2d19      	cmp	r5, #25
 800cb90:	bf98      	it	ls
 800cb92:	3220      	addls	r2, #32
 800cb94:	42a2      	cmp	r2, r4
 800cb96:	d0f0      	beq.n	800cb7a <__match+0x6>
 800cb98:	2000      	movs	r0, #0
 800cb9a:	e7f3      	b.n	800cb84 <__match+0x10>

0800cb9c <__hexnan>:
 800cb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba0:	680b      	ldr	r3, [r1, #0]
 800cba2:	6801      	ldr	r1, [r0, #0]
 800cba4:	115e      	asrs	r6, r3, #5
 800cba6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cbaa:	f013 031f 	ands.w	r3, r3, #31
 800cbae:	b087      	sub	sp, #28
 800cbb0:	bf18      	it	ne
 800cbb2:	3604      	addne	r6, #4
 800cbb4:	2500      	movs	r5, #0
 800cbb6:	1f37      	subs	r7, r6, #4
 800cbb8:	4682      	mov	sl, r0
 800cbba:	4690      	mov	r8, r2
 800cbbc:	9301      	str	r3, [sp, #4]
 800cbbe:	f846 5c04 	str.w	r5, [r6, #-4]
 800cbc2:	46b9      	mov	r9, r7
 800cbc4:	463c      	mov	r4, r7
 800cbc6:	9502      	str	r5, [sp, #8]
 800cbc8:	46ab      	mov	fp, r5
 800cbca:	784a      	ldrb	r2, [r1, #1]
 800cbcc:	1c4b      	adds	r3, r1, #1
 800cbce:	9303      	str	r3, [sp, #12]
 800cbd0:	b342      	cbz	r2, 800cc24 <__hexnan+0x88>
 800cbd2:	4610      	mov	r0, r2
 800cbd4:	9105      	str	r1, [sp, #20]
 800cbd6:	9204      	str	r2, [sp, #16]
 800cbd8:	f7ff fd5f 	bl	800c69a <__hexdig_fun>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	d14f      	bne.n	800cc80 <__hexnan+0xe4>
 800cbe0:	9a04      	ldr	r2, [sp, #16]
 800cbe2:	9905      	ldr	r1, [sp, #20]
 800cbe4:	2a20      	cmp	r2, #32
 800cbe6:	d818      	bhi.n	800cc1a <__hexnan+0x7e>
 800cbe8:	9b02      	ldr	r3, [sp, #8]
 800cbea:	459b      	cmp	fp, r3
 800cbec:	dd13      	ble.n	800cc16 <__hexnan+0x7a>
 800cbee:	454c      	cmp	r4, r9
 800cbf0:	d206      	bcs.n	800cc00 <__hexnan+0x64>
 800cbf2:	2d07      	cmp	r5, #7
 800cbf4:	dc04      	bgt.n	800cc00 <__hexnan+0x64>
 800cbf6:	462a      	mov	r2, r5
 800cbf8:	4649      	mov	r1, r9
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f7ff ffa8 	bl	800cb50 <L_shift>
 800cc00:	4544      	cmp	r4, r8
 800cc02:	d950      	bls.n	800cca6 <__hexnan+0x10a>
 800cc04:	2300      	movs	r3, #0
 800cc06:	f1a4 0904 	sub.w	r9, r4, #4
 800cc0a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc0e:	f8cd b008 	str.w	fp, [sp, #8]
 800cc12:	464c      	mov	r4, r9
 800cc14:	461d      	mov	r5, r3
 800cc16:	9903      	ldr	r1, [sp, #12]
 800cc18:	e7d7      	b.n	800cbca <__hexnan+0x2e>
 800cc1a:	2a29      	cmp	r2, #41	; 0x29
 800cc1c:	d156      	bne.n	800cccc <__hexnan+0x130>
 800cc1e:	3102      	adds	r1, #2
 800cc20:	f8ca 1000 	str.w	r1, [sl]
 800cc24:	f1bb 0f00 	cmp.w	fp, #0
 800cc28:	d050      	beq.n	800cccc <__hexnan+0x130>
 800cc2a:	454c      	cmp	r4, r9
 800cc2c:	d206      	bcs.n	800cc3c <__hexnan+0xa0>
 800cc2e:	2d07      	cmp	r5, #7
 800cc30:	dc04      	bgt.n	800cc3c <__hexnan+0xa0>
 800cc32:	462a      	mov	r2, r5
 800cc34:	4649      	mov	r1, r9
 800cc36:	4620      	mov	r0, r4
 800cc38:	f7ff ff8a 	bl	800cb50 <L_shift>
 800cc3c:	4544      	cmp	r4, r8
 800cc3e:	d934      	bls.n	800ccaa <__hexnan+0x10e>
 800cc40:	f1a8 0204 	sub.w	r2, r8, #4
 800cc44:	4623      	mov	r3, r4
 800cc46:	f853 1b04 	ldr.w	r1, [r3], #4
 800cc4a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cc4e:	429f      	cmp	r7, r3
 800cc50:	d2f9      	bcs.n	800cc46 <__hexnan+0xaa>
 800cc52:	1b3b      	subs	r3, r7, r4
 800cc54:	f023 0303 	bic.w	r3, r3, #3
 800cc58:	3304      	adds	r3, #4
 800cc5a:	3401      	adds	r4, #1
 800cc5c:	3e03      	subs	r6, #3
 800cc5e:	42b4      	cmp	r4, r6
 800cc60:	bf88      	it	hi
 800cc62:	2304      	movhi	r3, #4
 800cc64:	4443      	add	r3, r8
 800cc66:	2200      	movs	r2, #0
 800cc68:	f843 2b04 	str.w	r2, [r3], #4
 800cc6c:	429f      	cmp	r7, r3
 800cc6e:	d2fb      	bcs.n	800cc68 <__hexnan+0xcc>
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	b91b      	cbnz	r3, 800cc7c <__hexnan+0xe0>
 800cc74:	4547      	cmp	r7, r8
 800cc76:	d127      	bne.n	800ccc8 <__hexnan+0x12c>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	603b      	str	r3, [r7, #0]
 800cc7c:	2005      	movs	r0, #5
 800cc7e:	e026      	b.n	800ccce <__hexnan+0x132>
 800cc80:	3501      	adds	r5, #1
 800cc82:	2d08      	cmp	r5, #8
 800cc84:	f10b 0b01 	add.w	fp, fp, #1
 800cc88:	dd06      	ble.n	800cc98 <__hexnan+0xfc>
 800cc8a:	4544      	cmp	r4, r8
 800cc8c:	d9c3      	bls.n	800cc16 <__hexnan+0x7a>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc94:	2501      	movs	r5, #1
 800cc96:	3c04      	subs	r4, #4
 800cc98:	6822      	ldr	r2, [r4, #0]
 800cc9a:	f000 000f 	and.w	r0, r0, #15
 800cc9e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cca2:	6022      	str	r2, [r4, #0]
 800cca4:	e7b7      	b.n	800cc16 <__hexnan+0x7a>
 800cca6:	2508      	movs	r5, #8
 800cca8:	e7b5      	b.n	800cc16 <__hexnan+0x7a>
 800ccaa:	9b01      	ldr	r3, [sp, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d0df      	beq.n	800cc70 <__hexnan+0xd4>
 800ccb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb4:	f1c3 0320 	rsb	r3, r3, #32
 800ccb8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccbc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ccc0:	401a      	ands	r2, r3
 800ccc2:	f846 2c04 	str.w	r2, [r6, #-4]
 800ccc6:	e7d3      	b.n	800cc70 <__hexnan+0xd4>
 800ccc8:	3f04      	subs	r7, #4
 800ccca:	e7d1      	b.n	800cc70 <__hexnan+0xd4>
 800cccc:	2004      	movs	r0, #4
 800ccce:	b007      	add	sp, #28
 800ccd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ccd4 <_localeconv_r>:
 800ccd4:	4800      	ldr	r0, [pc, #0]	; (800ccd8 <_localeconv_r+0x4>)
 800ccd6:	4770      	bx	lr
 800ccd8:	20000164 	.word	0x20000164

0800ccdc <__retarget_lock_init_recursive>:
 800ccdc:	4770      	bx	lr

0800ccde <__retarget_lock_acquire_recursive>:
 800ccde:	4770      	bx	lr

0800cce0 <__retarget_lock_release_recursive>:
 800cce0:	4770      	bx	lr

0800cce2 <__swhatbuf_r>:
 800cce2:	b570      	push	{r4, r5, r6, lr}
 800cce4:	460e      	mov	r6, r1
 800cce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccea:	2900      	cmp	r1, #0
 800ccec:	b096      	sub	sp, #88	; 0x58
 800ccee:	4614      	mov	r4, r2
 800ccf0:	461d      	mov	r5, r3
 800ccf2:	da07      	bge.n	800cd04 <__swhatbuf_r+0x22>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	602b      	str	r3, [r5, #0]
 800ccf8:	89b3      	ldrh	r3, [r6, #12]
 800ccfa:	061a      	lsls	r2, r3, #24
 800ccfc:	d410      	bmi.n	800cd20 <__swhatbuf_r+0x3e>
 800ccfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd02:	e00e      	b.n	800cd22 <__swhatbuf_r+0x40>
 800cd04:	466a      	mov	r2, sp
 800cd06:	f001 f963 	bl	800dfd0 <_fstat_r>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	dbf2      	blt.n	800ccf4 <__swhatbuf_r+0x12>
 800cd0e:	9a01      	ldr	r2, [sp, #4]
 800cd10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd18:	425a      	negs	r2, r3
 800cd1a:	415a      	adcs	r2, r3
 800cd1c:	602a      	str	r2, [r5, #0]
 800cd1e:	e7ee      	b.n	800ccfe <__swhatbuf_r+0x1c>
 800cd20:	2340      	movs	r3, #64	; 0x40
 800cd22:	2000      	movs	r0, #0
 800cd24:	6023      	str	r3, [r4, #0]
 800cd26:	b016      	add	sp, #88	; 0x58
 800cd28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd2c <__smakebuf_r>:
 800cd2c:	898b      	ldrh	r3, [r1, #12]
 800cd2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd30:	079d      	lsls	r5, r3, #30
 800cd32:	4606      	mov	r6, r0
 800cd34:	460c      	mov	r4, r1
 800cd36:	d507      	bpl.n	800cd48 <__smakebuf_r+0x1c>
 800cd38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd3c:	6023      	str	r3, [r4, #0]
 800cd3e:	6123      	str	r3, [r4, #16]
 800cd40:	2301      	movs	r3, #1
 800cd42:	6163      	str	r3, [r4, #20]
 800cd44:	b002      	add	sp, #8
 800cd46:	bd70      	pop	{r4, r5, r6, pc}
 800cd48:	ab01      	add	r3, sp, #4
 800cd4a:	466a      	mov	r2, sp
 800cd4c:	f7ff ffc9 	bl	800cce2 <__swhatbuf_r>
 800cd50:	9900      	ldr	r1, [sp, #0]
 800cd52:	4605      	mov	r5, r0
 800cd54:	4630      	mov	r0, r6
 800cd56:	f000 fd5d 	bl	800d814 <_malloc_r>
 800cd5a:	b948      	cbnz	r0, 800cd70 <__smakebuf_r+0x44>
 800cd5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd60:	059a      	lsls	r2, r3, #22
 800cd62:	d4ef      	bmi.n	800cd44 <__smakebuf_r+0x18>
 800cd64:	f023 0303 	bic.w	r3, r3, #3
 800cd68:	f043 0302 	orr.w	r3, r3, #2
 800cd6c:	81a3      	strh	r3, [r4, #12]
 800cd6e:	e7e3      	b.n	800cd38 <__smakebuf_r+0xc>
 800cd70:	4b0d      	ldr	r3, [pc, #52]	; (800cda8 <__smakebuf_r+0x7c>)
 800cd72:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd74:	89a3      	ldrh	r3, [r4, #12]
 800cd76:	6020      	str	r0, [r4, #0]
 800cd78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd7c:	81a3      	strh	r3, [r4, #12]
 800cd7e:	9b00      	ldr	r3, [sp, #0]
 800cd80:	6163      	str	r3, [r4, #20]
 800cd82:	9b01      	ldr	r3, [sp, #4]
 800cd84:	6120      	str	r0, [r4, #16]
 800cd86:	b15b      	cbz	r3, 800cda0 <__smakebuf_r+0x74>
 800cd88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	f001 f931 	bl	800dff4 <_isatty_r>
 800cd92:	b128      	cbz	r0, 800cda0 <__smakebuf_r+0x74>
 800cd94:	89a3      	ldrh	r3, [r4, #12]
 800cd96:	f023 0303 	bic.w	r3, r3, #3
 800cd9a:	f043 0301 	orr.w	r3, r3, #1
 800cd9e:	81a3      	strh	r3, [r4, #12]
 800cda0:	89a0      	ldrh	r0, [r4, #12]
 800cda2:	4305      	orrs	r5, r0
 800cda4:	81a5      	strh	r5, [r4, #12]
 800cda6:	e7cd      	b.n	800cd44 <__smakebuf_r+0x18>
 800cda8:	0800c455 	.word	0x0800c455

0800cdac <malloc>:
 800cdac:	4b02      	ldr	r3, [pc, #8]	; (800cdb8 <malloc+0xc>)
 800cdae:	4601      	mov	r1, r0
 800cdb0:	6818      	ldr	r0, [r3, #0]
 800cdb2:	f000 bd2f 	b.w	800d814 <_malloc_r>
 800cdb6:	bf00      	nop
 800cdb8:	2000000c 	.word	0x2000000c

0800cdbc <__ascii_mbtowc>:
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	b901      	cbnz	r1, 800cdc2 <__ascii_mbtowc+0x6>
 800cdc0:	a901      	add	r1, sp, #4
 800cdc2:	b142      	cbz	r2, 800cdd6 <__ascii_mbtowc+0x1a>
 800cdc4:	b14b      	cbz	r3, 800cdda <__ascii_mbtowc+0x1e>
 800cdc6:	7813      	ldrb	r3, [r2, #0]
 800cdc8:	600b      	str	r3, [r1, #0]
 800cdca:	7812      	ldrb	r2, [r2, #0]
 800cdcc:	1e10      	subs	r0, r2, #0
 800cdce:	bf18      	it	ne
 800cdd0:	2001      	movne	r0, #1
 800cdd2:	b002      	add	sp, #8
 800cdd4:	4770      	bx	lr
 800cdd6:	4610      	mov	r0, r2
 800cdd8:	e7fb      	b.n	800cdd2 <__ascii_mbtowc+0x16>
 800cdda:	f06f 0001 	mvn.w	r0, #1
 800cdde:	e7f8      	b.n	800cdd2 <__ascii_mbtowc+0x16>

0800cde0 <_Balloc>:
 800cde0:	b570      	push	{r4, r5, r6, lr}
 800cde2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cde4:	4604      	mov	r4, r0
 800cde6:	460d      	mov	r5, r1
 800cde8:	b976      	cbnz	r6, 800ce08 <_Balloc+0x28>
 800cdea:	2010      	movs	r0, #16
 800cdec:	f7ff ffde 	bl	800cdac <malloc>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	6260      	str	r0, [r4, #36]	; 0x24
 800cdf4:	b920      	cbnz	r0, 800ce00 <_Balloc+0x20>
 800cdf6:	4b18      	ldr	r3, [pc, #96]	; (800ce58 <_Balloc+0x78>)
 800cdf8:	4818      	ldr	r0, [pc, #96]	; (800ce5c <_Balloc+0x7c>)
 800cdfa:	2166      	movs	r1, #102	; 0x66
 800cdfc:	f001 f8a8 	bl	800df50 <__assert_func>
 800ce00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce04:	6006      	str	r6, [r0, #0]
 800ce06:	60c6      	str	r6, [r0, #12]
 800ce08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce0a:	68f3      	ldr	r3, [r6, #12]
 800ce0c:	b183      	cbz	r3, 800ce30 <_Balloc+0x50>
 800ce0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce16:	b9b8      	cbnz	r0, 800ce48 <_Balloc+0x68>
 800ce18:	2101      	movs	r1, #1
 800ce1a:	fa01 f605 	lsl.w	r6, r1, r5
 800ce1e:	1d72      	adds	r2, r6, #5
 800ce20:	0092      	lsls	r2, r2, #2
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 fc97 	bl	800d756 <_calloc_r>
 800ce28:	b160      	cbz	r0, 800ce44 <_Balloc+0x64>
 800ce2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce2e:	e00e      	b.n	800ce4e <_Balloc+0x6e>
 800ce30:	2221      	movs	r2, #33	; 0x21
 800ce32:	2104      	movs	r1, #4
 800ce34:	4620      	mov	r0, r4
 800ce36:	f000 fc8e 	bl	800d756 <_calloc_r>
 800ce3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce3c:	60f0      	str	r0, [r6, #12]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1e4      	bne.n	800ce0e <_Balloc+0x2e>
 800ce44:	2000      	movs	r0, #0
 800ce46:	bd70      	pop	{r4, r5, r6, pc}
 800ce48:	6802      	ldr	r2, [r0, #0]
 800ce4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce4e:	2300      	movs	r3, #0
 800ce50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce54:	e7f7      	b.n	800ce46 <_Balloc+0x66>
 800ce56:	bf00      	nop
 800ce58:	0800e9c6 	.word	0x0800e9c6
 800ce5c:	0800eb30 	.word	0x0800eb30

0800ce60 <_Bfree>:
 800ce60:	b570      	push	{r4, r5, r6, lr}
 800ce62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce64:	4605      	mov	r5, r0
 800ce66:	460c      	mov	r4, r1
 800ce68:	b976      	cbnz	r6, 800ce88 <_Bfree+0x28>
 800ce6a:	2010      	movs	r0, #16
 800ce6c:	f7ff ff9e 	bl	800cdac <malloc>
 800ce70:	4602      	mov	r2, r0
 800ce72:	6268      	str	r0, [r5, #36]	; 0x24
 800ce74:	b920      	cbnz	r0, 800ce80 <_Bfree+0x20>
 800ce76:	4b09      	ldr	r3, [pc, #36]	; (800ce9c <_Bfree+0x3c>)
 800ce78:	4809      	ldr	r0, [pc, #36]	; (800cea0 <_Bfree+0x40>)
 800ce7a:	218a      	movs	r1, #138	; 0x8a
 800ce7c:	f001 f868 	bl	800df50 <__assert_func>
 800ce80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce84:	6006      	str	r6, [r0, #0]
 800ce86:	60c6      	str	r6, [r0, #12]
 800ce88:	b13c      	cbz	r4, 800ce9a <_Bfree+0x3a>
 800ce8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce8c:	6862      	ldr	r2, [r4, #4]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce94:	6021      	str	r1, [r4, #0]
 800ce96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce9a:	bd70      	pop	{r4, r5, r6, pc}
 800ce9c:	0800e9c6 	.word	0x0800e9c6
 800cea0:	0800eb30 	.word	0x0800eb30

0800cea4 <__multadd>:
 800cea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea8:	690e      	ldr	r6, [r1, #16]
 800ceaa:	4607      	mov	r7, r0
 800ceac:	4698      	mov	r8, r3
 800ceae:	460c      	mov	r4, r1
 800ceb0:	f101 0014 	add.w	r0, r1, #20
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	6805      	ldr	r5, [r0, #0]
 800ceb8:	b2a9      	uxth	r1, r5
 800ceba:	fb02 8101 	mla	r1, r2, r1, r8
 800cebe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cec2:	0c2d      	lsrs	r5, r5, #16
 800cec4:	fb02 c505 	mla	r5, r2, r5, ip
 800cec8:	b289      	uxth	r1, r1
 800ceca:	3301      	adds	r3, #1
 800cecc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ced0:	429e      	cmp	r6, r3
 800ced2:	f840 1b04 	str.w	r1, [r0], #4
 800ced6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ceda:	dcec      	bgt.n	800ceb6 <__multadd+0x12>
 800cedc:	f1b8 0f00 	cmp.w	r8, #0
 800cee0:	d022      	beq.n	800cf28 <__multadd+0x84>
 800cee2:	68a3      	ldr	r3, [r4, #8]
 800cee4:	42b3      	cmp	r3, r6
 800cee6:	dc19      	bgt.n	800cf1c <__multadd+0x78>
 800cee8:	6861      	ldr	r1, [r4, #4]
 800ceea:	4638      	mov	r0, r7
 800ceec:	3101      	adds	r1, #1
 800ceee:	f7ff ff77 	bl	800cde0 <_Balloc>
 800cef2:	4605      	mov	r5, r0
 800cef4:	b928      	cbnz	r0, 800cf02 <__multadd+0x5e>
 800cef6:	4602      	mov	r2, r0
 800cef8:	4b0d      	ldr	r3, [pc, #52]	; (800cf30 <__multadd+0x8c>)
 800cefa:	480e      	ldr	r0, [pc, #56]	; (800cf34 <__multadd+0x90>)
 800cefc:	21b5      	movs	r1, #181	; 0xb5
 800cefe:	f001 f827 	bl	800df50 <__assert_func>
 800cf02:	6922      	ldr	r2, [r4, #16]
 800cf04:	3202      	adds	r2, #2
 800cf06:	f104 010c 	add.w	r1, r4, #12
 800cf0a:	0092      	lsls	r2, r2, #2
 800cf0c:	300c      	adds	r0, #12
 800cf0e:	f7fc fc8b 	bl	8009828 <memcpy>
 800cf12:	4621      	mov	r1, r4
 800cf14:	4638      	mov	r0, r7
 800cf16:	f7ff ffa3 	bl	800ce60 <_Bfree>
 800cf1a:	462c      	mov	r4, r5
 800cf1c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cf20:	3601      	adds	r6, #1
 800cf22:	f8c3 8014 	str.w	r8, [r3, #20]
 800cf26:	6126      	str	r6, [r4, #16]
 800cf28:	4620      	mov	r0, r4
 800cf2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf2e:	bf00      	nop
 800cf30:	0800ea3c 	.word	0x0800ea3c
 800cf34:	0800eb30 	.word	0x0800eb30

0800cf38 <__s2b>:
 800cf38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	4615      	mov	r5, r2
 800cf40:	461f      	mov	r7, r3
 800cf42:	2209      	movs	r2, #9
 800cf44:	3308      	adds	r3, #8
 800cf46:	4606      	mov	r6, r0
 800cf48:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	2201      	movs	r2, #1
 800cf50:	429a      	cmp	r2, r3
 800cf52:	db09      	blt.n	800cf68 <__s2b+0x30>
 800cf54:	4630      	mov	r0, r6
 800cf56:	f7ff ff43 	bl	800cde0 <_Balloc>
 800cf5a:	b940      	cbnz	r0, 800cf6e <__s2b+0x36>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	4b19      	ldr	r3, [pc, #100]	; (800cfc4 <__s2b+0x8c>)
 800cf60:	4819      	ldr	r0, [pc, #100]	; (800cfc8 <__s2b+0x90>)
 800cf62:	21ce      	movs	r1, #206	; 0xce
 800cf64:	f000 fff4 	bl	800df50 <__assert_func>
 800cf68:	0052      	lsls	r2, r2, #1
 800cf6a:	3101      	adds	r1, #1
 800cf6c:	e7f0      	b.n	800cf50 <__s2b+0x18>
 800cf6e:	9b08      	ldr	r3, [sp, #32]
 800cf70:	6143      	str	r3, [r0, #20]
 800cf72:	2d09      	cmp	r5, #9
 800cf74:	f04f 0301 	mov.w	r3, #1
 800cf78:	6103      	str	r3, [r0, #16]
 800cf7a:	dd16      	ble.n	800cfaa <__s2b+0x72>
 800cf7c:	f104 0909 	add.w	r9, r4, #9
 800cf80:	46c8      	mov	r8, r9
 800cf82:	442c      	add	r4, r5
 800cf84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf88:	4601      	mov	r1, r0
 800cf8a:	3b30      	subs	r3, #48	; 0x30
 800cf8c:	220a      	movs	r2, #10
 800cf8e:	4630      	mov	r0, r6
 800cf90:	f7ff ff88 	bl	800cea4 <__multadd>
 800cf94:	45a0      	cmp	r8, r4
 800cf96:	d1f5      	bne.n	800cf84 <__s2b+0x4c>
 800cf98:	f1a5 0408 	sub.w	r4, r5, #8
 800cf9c:	444c      	add	r4, r9
 800cf9e:	1b2d      	subs	r5, r5, r4
 800cfa0:	1963      	adds	r3, r4, r5
 800cfa2:	42bb      	cmp	r3, r7
 800cfa4:	db04      	blt.n	800cfb0 <__s2b+0x78>
 800cfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfaa:	340a      	adds	r4, #10
 800cfac:	2509      	movs	r5, #9
 800cfae:	e7f6      	b.n	800cf9e <__s2b+0x66>
 800cfb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cfb4:	4601      	mov	r1, r0
 800cfb6:	3b30      	subs	r3, #48	; 0x30
 800cfb8:	220a      	movs	r2, #10
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7ff ff72 	bl	800cea4 <__multadd>
 800cfc0:	e7ee      	b.n	800cfa0 <__s2b+0x68>
 800cfc2:	bf00      	nop
 800cfc4:	0800ea3c 	.word	0x0800ea3c
 800cfc8:	0800eb30 	.word	0x0800eb30

0800cfcc <__hi0bits>:
 800cfcc:	0c03      	lsrs	r3, r0, #16
 800cfce:	041b      	lsls	r3, r3, #16
 800cfd0:	b9d3      	cbnz	r3, 800d008 <__hi0bits+0x3c>
 800cfd2:	0400      	lsls	r0, r0, #16
 800cfd4:	2310      	movs	r3, #16
 800cfd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cfda:	bf04      	itt	eq
 800cfdc:	0200      	lsleq	r0, r0, #8
 800cfde:	3308      	addeq	r3, #8
 800cfe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cfe4:	bf04      	itt	eq
 800cfe6:	0100      	lsleq	r0, r0, #4
 800cfe8:	3304      	addeq	r3, #4
 800cfea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cfee:	bf04      	itt	eq
 800cff0:	0080      	lsleq	r0, r0, #2
 800cff2:	3302      	addeq	r3, #2
 800cff4:	2800      	cmp	r0, #0
 800cff6:	db05      	blt.n	800d004 <__hi0bits+0x38>
 800cff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cffc:	f103 0301 	add.w	r3, r3, #1
 800d000:	bf08      	it	eq
 800d002:	2320      	moveq	r3, #32
 800d004:	4618      	mov	r0, r3
 800d006:	4770      	bx	lr
 800d008:	2300      	movs	r3, #0
 800d00a:	e7e4      	b.n	800cfd6 <__hi0bits+0xa>

0800d00c <__lo0bits>:
 800d00c:	6803      	ldr	r3, [r0, #0]
 800d00e:	f013 0207 	ands.w	r2, r3, #7
 800d012:	4601      	mov	r1, r0
 800d014:	d00b      	beq.n	800d02e <__lo0bits+0x22>
 800d016:	07da      	lsls	r2, r3, #31
 800d018:	d424      	bmi.n	800d064 <__lo0bits+0x58>
 800d01a:	0798      	lsls	r0, r3, #30
 800d01c:	bf49      	itett	mi
 800d01e:	085b      	lsrmi	r3, r3, #1
 800d020:	089b      	lsrpl	r3, r3, #2
 800d022:	2001      	movmi	r0, #1
 800d024:	600b      	strmi	r3, [r1, #0]
 800d026:	bf5c      	itt	pl
 800d028:	600b      	strpl	r3, [r1, #0]
 800d02a:	2002      	movpl	r0, #2
 800d02c:	4770      	bx	lr
 800d02e:	b298      	uxth	r0, r3
 800d030:	b9b0      	cbnz	r0, 800d060 <__lo0bits+0x54>
 800d032:	0c1b      	lsrs	r3, r3, #16
 800d034:	2010      	movs	r0, #16
 800d036:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d03a:	bf04      	itt	eq
 800d03c:	0a1b      	lsreq	r3, r3, #8
 800d03e:	3008      	addeq	r0, #8
 800d040:	071a      	lsls	r2, r3, #28
 800d042:	bf04      	itt	eq
 800d044:	091b      	lsreq	r3, r3, #4
 800d046:	3004      	addeq	r0, #4
 800d048:	079a      	lsls	r2, r3, #30
 800d04a:	bf04      	itt	eq
 800d04c:	089b      	lsreq	r3, r3, #2
 800d04e:	3002      	addeq	r0, #2
 800d050:	07da      	lsls	r2, r3, #31
 800d052:	d403      	bmi.n	800d05c <__lo0bits+0x50>
 800d054:	085b      	lsrs	r3, r3, #1
 800d056:	f100 0001 	add.w	r0, r0, #1
 800d05a:	d005      	beq.n	800d068 <__lo0bits+0x5c>
 800d05c:	600b      	str	r3, [r1, #0]
 800d05e:	4770      	bx	lr
 800d060:	4610      	mov	r0, r2
 800d062:	e7e8      	b.n	800d036 <__lo0bits+0x2a>
 800d064:	2000      	movs	r0, #0
 800d066:	4770      	bx	lr
 800d068:	2020      	movs	r0, #32
 800d06a:	4770      	bx	lr

0800d06c <__i2b>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	460c      	mov	r4, r1
 800d070:	2101      	movs	r1, #1
 800d072:	f7ff feb5 	bl	800cde0 <_Balloc>
 800d076:	4602      	mov	r2, r0
 800d078:	b928      	cbnz	r0, 800d086 <__i2b+0x1a>
 800d07a:	4b05      	ldr	r3, [pc, #20]	; (800d090 <__i2b+0x24>)
 800d07c:	4805      	ldr	r0, [pc, #20]	; (800d094 <__i2b+0x28>)
 800d07e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d082:	f000 ff65 	bl	800df50 <__assert_func>
 800d086:	2301      	movs	r3, #1
 800d088:	6144      	str	r4, [r0, #20]
 800d08a:	6103      	str	r3, [r0, #16]
 800d08c:	bd10      	pop	{r4, pc}
 800d08e:	bf00      	nop
 800d090:	0800ea3c 	.word	0x0800ea3c
 800d094:	0800eb30 	.word	0x0800eb30

0800d098 <__multiply>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	4614      	mov	r4, r2
 800d09e:	690a      	ldr	r2, [r1, #16]
 800d0a0:	6923      	ldr	r3, [r4, #16]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	bfb8      	it	lt
 800d0a6:	460b      	movlt	r3, r1
 800d0a8:	460d      	mov	r5, r1
 800d0aa:	bfbc      	itt	lt
 800d0ac:	4625      	movlt	r5, r4
 800d0ae:	461c      	movlt	r4, r3
 800d0b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d0b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d0b8:	68ab      	ldr	r3, [r5, #8]
 800d0ba:	6869      	ldr	r1, [r5, #4]
 800d0bc:	eb0a 0709 	add.w	r7, sl, r9
 800d0c0:	42bb      	cmp	r3, r7
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	bfb8      	it	lt
 800d0c6:	3101      	addlt	r1, #1
 800d0c8:	f7ff fe8a 	bl	800cde0 <_Balloc>
 800d0cc:	b930      	cbnz	r0, 800d0dc <__multiply+0x44>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	4b42      	ldr	r3, [pc, #264]	; (800d1dc <__multiply+0x144>)
 800d0d2:	4843      	ldr	r0, [pc, #268]	; (800d1e0 <__multiply+0x148>)
 800d0d4:	f240 115d 	movw	r1, #349	; 0x15d
 800d0d8:	f000 ff3a 	bl	800df50 <__assert_func>
 800d0dc:	f100 0614 	add.w	r6, r0, #20
 800d0e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d0e4:	4633      	mov	r3, r6
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	4543      	cmp	r3, r8
 800d0ea:	d31e      	bcc.n	800d12a <__multiply+0x92>
 800d0ec:	f105 0c14 	add.w	ip, r5, #20
 800d0f0:	f104 0314 	add.w	r3, r4, #20
 800d0f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d0f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d0fc:	9202      	str	r2, [sp, #8]
 800d0fe:	ebac 0205 	sub.w	r2, ip, r5
 800d102:	3a15      	subs	r2, #21
 800d104:	f022 0203 	bic.w	r2, r2, #3
 800d108:	3204      	adds	r2, #4
 800d10a:	f105 0115 	add.w	r1, r5, #21
 800d10e:	458c      	cmp	ip, r1
 800d110:	bf38      	it	cc
 800d112:	2204      	movcc	r2, #4
 800d114:	9201      	str	r2, [sp, #4]
 800d116:	9a02      	ldr	r2, [sp, #8]
 800d118:	9303      	str	r3, [sp, #12]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d808      	bhi.n	800d130 <__multiply+0x98>
 800d11e:	2f00      	cmp	r7, #0
 800d120:	dc55      	bgt.n	800d1ce <__multiply+0x136>
 800d122:	6107      	str	r7, [r0, #16]
 800d124:	b005      	add	sp, #20
 800d126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d12a:	f843 2b04 	str.w	r2, [r3], #4
 800d12e:	e7db      	b.n	800d0e8 <__multiply+0x50>
 800d130:	f8b3 a000 	ldrh.w	sl, [r3]
 800d134:	f1ba 0f00 	cmp.w	sl, #0
 800d138:	d020      	beq.n	800d17c <__multiply+0xe4>
 800d13a:	f105 0e14 	add.w	lr, r5, #20
 800d13e:	46b1      	mov	r9, r6
 800d140:	2200      	movs	r2, #0
 800d142:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d146:	f8d9 b000 	ldr.w	fp, [r9]
 800d14a:	b2a1      	uxth	r1, r4
 800d14c:	fa1f fb8b 	uxth.w	fp, fp
 800d150:	fb0a b101 	mla	r1, sl, r1, fp
 800d154:	4411      	add	r1, r2
 800d156:	f8d9 2000 	ldr.w	r2, [r9]
 800d15a:	0c24      	lsrs	r4, r4, #16
 800d15c:	0c12      	lsrs	r2, r2, #16
 800d15e:	fb0a 2404 	mla	r4, sl, r4, r2
 800d162:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d166:	b289      	uxth	r1, r1
 800d168:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d16c:	45f4      	cmp	ip, lr
 800d16e:	f849 1b04 	str.w	r1, [r9], #4
 800d172:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d176:	d8e4      	bhi.n	800d142 <__multiply+0xaa>
 800d178:	9901      	ldr	r1, [sp, #4]
 800d17a:	5072      	str	r2, [r6, r1]
 800d17c:	9a03      	ldr	r2, [sp, #12]
 800d17e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d182:	3304      	adds	r3, #4
 800d184:	f1b9 0f00 	cmp.w	r9, #0
 800d188:	d01f      	beq.n	800d1ca <__multiply+0x132>
 800d18a:	6834      	ldr	r4, [r6, #0]
 800d18c:	f105 0114 	add.w	r1, r5, #20
 800d190:	46b6      	mov	lr, r6
 800d192:	f04f 0a00 	mov.w	sl, #0
 800d196:	880a      	ldrh	r2, [r1, #0]
 800d198:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d19c:	fb09 b202 	mla	r2, r9, r2, fp
 800d1a0:	4492      	add	sl, r2
 800d1a2:	b2a4      	uxth	r4, r4
 800d1a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d1a8:	f84e 4b04 	str.w	r4, [lr], #4
 800d1ac:	f851 4b04 	ldr.w	r4, [r1], #4
 800d1b0:	f8be 2000 	ldrh.w	r2, [lr]
 800d1b4:	0c24      	lsrs	r4, r4, #16
 800d1b6:	fb09 2404 	mla	r4, r9, r4, r2
 800d1ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d1be:	458c      	cmp	ip, r1
 800d1c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d1c4:	d8e7      	bhi.n	800d196 <__multiply+0xfe>
 800d1c6:	9a01      	ldr	r2, [sp, #4]
 800d1c8:	50b4      	str	r4, [r6, r2]
 800d1ca:	3604      	adds	r6, #4
 800d1cc:	e7a3      	b.n	800d116 <__multiply+0x7e>
 800d1ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1a5      	bne.n	800d122 <__multiply+0x8a>
 800d1d6:	3f01      	subs	r7, #1
 800d1d8:	e7a1      	b.n	800d11e <__multiply+0x86>
 800d1da:	bf00      	nop
 800d1dc:	0800ea3c 	.word	0x0800ea3c
 800d1e0:	0800eb30 	.word	0x0800eb30

0800d1e4 <__pow5mult>:
 800d1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1e8:	4615      	mov	r5, r2
 800d1ea:	f012 0203 	ands.w	r2, r2, #3
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	460f      	mov	r7, r1
 800d1f2:	d007      	beq.n	800d204 <__pow5mult+0x20>
 800d1f4:	4c25      	ldr	r4, [pc, #148]	; (800d28c <__pow5mult+0xa8>)
 800d1f6:	3a01      	subs	r2, #1
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1fe:	f7ff fe51 	bl	800cea4 <__multadd>
 800d202:	4607      	mov	r7, r0
 800d204:	10ad      	asrs	r5, r5, #2
 800d206:	d03d      	beq.n	800d284 <__pow5mult+0xa0>
 800d208:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d20a:	b97c      	cbnz	r4, 800d22c <__pow5mult+0x48>
 800d20c:	2010      	movs	r0, #16
 800d20e:	f7ff fdcd 	bl	800cdac <malloc>
 800d212:	4602      	mov	r2, r0
 800d214:	6270      	str	r0, [r6, #36]	; 0x24
 800d216:	b928      	cbnz	r0, 800d224 <__pow5mult+0x40>
 800d218:	4b1d      	ldr	r3, [pc, #116]	; (800d290 <__pow5mult+0xac>)
 800d21a:	481e      	ldr	r0, [pc, #120]	; (800d294 <__pow5mult+0xb0>)
 800d21c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d220:	f000 fe96 	bl	800df50 <__assert_func>
 800d224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d228:	6004      	str	r4, [r0, #0]
 800d22a:	60c4      	str	r4, [r0, #12]
 800d22c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d234:	b94c      	cbnz	r4, 800d24a <__pow5mult+0x66>
 800d236:	f240 2171 	movw	r1, #625	; 0x271
 800d23a:	4630      	mov	r0, r6
 800d23c:	f7ff ff16 	bl	800d06c <__i2b>
 800d240:	2300      	movs	r3, #0
 800d242:	f8c8 0008 	str.w	r0, [r8, #8]
 800d246:	4604      	mov	r4, r0
 800d248:	6003      	str	r3, [r0, #0]
 800d24a:	f04f 0900 	mov.w	r9, #0
 800d24e:	07eb      	lsls	r3, r5, #31
 800d250:	d50a      	bpl.n	800d268 <__pow5mult+0x84>
 800d252:	4639      	mov	r1, r7
 800d254:	4622      	mov	r2, r4
 800d256:	4630      	mov	r0, r6
 800d258:	f7ff ff1e 	bl	800d098 <__multiply>
 800d25c:	4639      	mov	r1, r7
 800d25e:	4680      	mov	r8, r0
 800d260:	4630      	mov	r0, r6
 800d262:	f7ff fdfd 	bl	800ce60 <_Bfree>
 800d266:	4647      	mov	r7, r8
 800d268:	106d      	asrs	r5, r5, #1
 800d26a:	d00b      	beq.n	800d284 <__pow5mult+0xa0>
 800d26c:	6820      	ldr	r0, [r4, #0]
 800d26e:	b938      	cbnz	r0, 800d280 <__pow5mult+0x9c>
 800d270:	4622      	mov	r2, r4
 800d272:	4621      	mov	r1, r4
 800d274:	4630      	mov	r0, r6
 800d276:	f7ff ff0f 	bl	800d098 <__multiply>
 800d27a:	6020      	str	r0, [r4, #0]
 800d27c:	f8c0 9000 	str.w	r9, [r0]
 800d280:	4604      	mov	r4, r0
 800d282:	e7e4      	b.n	800d24e <__pow5mult+0x6a>
 800d284:	4638      	mov	r0, r7
 800d286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d28a:	bf00      	nop
 800d28c:	0800ec80 	.word	0x0800ec80
 800d290:	0800e9c6 	.word	0x0800e9c6
 800d294:	0800eb30 	.word	0x0800eb30

0800d298 <__lshift>:
 800d298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d29c:	460c      	mov	r4, r1
 800d29e:	6849      	ldr	r1, [r1, #4]
 800d2a0:	6923      	ldr	r3, [r4, #16]
 800d2a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2a6:	68a3      	ldr	r3, [r4, #8]
 800d2a8:	4607      	mov	r7, r0
 800d2aa:	4691      	mov	r9, r2
 800d2ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2b0:	f108 0601 	add.w	r6, r8, #1
 800d2b4:	42b3      	cmp	r3, r6
 800d2b6:	db0b      	blt.n	800d2d0 <__lshift+0x38>
 800d2b8:	4638      	mov	r0, r7
 800d2ba:	f7ff fd91 	bl	800cde0 <_Balloc>
 800d2be:	4605      	mov	r5, r0
 800d2c0:	b948      	cbnz	r0, 800d2d6 <__lshift+0x3e>
 800d2c2:	4602      	mov	r2, r0
 800d2c4:	4b28      	ldr	r3, [pc, #160]	; (800d368 <__lshift+0xd0>)
 800d2c6:	4829      	ldr	r0, [pc, #164]	; (800d36c <__lshift+0xd4>)
 800d2c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d2cc:	f000 fe40 	bl	800df50 <__assert_func>
 800d2d0:	3101      	adds	r1, #1
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	e7ee      	b.n	800d2b4 <__lshift+0x1c>
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	f100 0114 	add.w	r1, r0, #20
 800d2dc:	f100 0210 	add.w	r2, r0, #16
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	4553      	cmp	r3, sl
 800d2e4:	db33      	blt.n	800d34e <__lshift+0xb6>
 800d2e6:	6920      	ldr	r0, [r4, #16]
 800d2e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2ec:	f104 0314 	add.w	r3, r4, #20
 800d2f0:	f019 091f 	ands.w	r9, r9, #31
 800d2f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2fc:	d02b      	beq.n	800d356 <__lshift+0xbe>
 800d2fe:	f1c9 0e20 	rsb	lr, r9, #32
 800d302:	468a      	mov	sl, r1
 800d304:	2200      	movs	r2, #0
 800d306:	6818      	ldr	r0, [r3, #0]
 800d308:	fa00 f009 	lsl.w	r0, r0, r9
 800d30c:	4302      	orrs	r2, r0
 800d30e:	f84a 2b04 	str.w	r2, [sl], #4
 800d312:	f853 2b04 	ldr.w	r2, [r3], #4
 800d316:	459c      	cmp	ip, r3
 800d318:	fa22 f20e 	lsr.w	r2, r2, lr
 800d31c:	d8f3      	bhi.n	800d306 <__lshift+0x6e>
 800d31e:	ebac 0304 	sub.w	r3, ip, r4
 800d322:	3b15      	subs	r3, #21
 800d324:	f023 0303 	bic.w	r3, r3, #3
 800d328:	3304      	adds	r3, #4
 800d32a:	f104 0015 	add.w	r0, r4, #21
 800d32e:	4584      	cmp	ip, r0
 800d330:	bf38      	it	cc
 800d332:	2304      	movcc	r3, #4
 800d334:	50ca      	str	r2, [r1, r3]
 800d336:	b10a      	cbz	r2, 800d33c <__lshift+0xa4>
 800d338:	f108 0602 	add.w	r6, r8, #2
 800d33c:	3e01      	subs	r6, #1
 800d33e:	4638      	mov	r0, r7
 800d340:	612e      	str	r6, [r5, #16]
 800d342:	4621      	mov	r1, r4
 800d344:	f7ff fd8c 	bl	800ce60 <_Bfree>
 800d348:	4628      	mov	r0, r5
 800d34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d34e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d352:	3301      	adds	r3, #1
 800d354:	e7c5      	b.n	800d2e2 <__lshift+0x4a>
 800d356:	3904      	subs	r1, #4
 800d358:	f853 2b04 	ldr.w	r2, [r3], #4
 800d35c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d360:	459c      	cmp	ip, r3
 800d362:	d8f9      	bhi.n	800d358 <__lshift+0xc0>
 800d364:	e7ea      	b.n	800d33c <__lshift+0xa4>
 800d366:	bf00      	nop
 800d368:	0800ea3c 	.word	0x0800ea3c
 800d36c:	0800eb30 	.word	0x0800eb30

0800d370 <__mcmp>:
 800d370:	b530      	push	{r4, r5, lr}
 800d372:	6902      	ldr	r2, [r0, #16]
 800d374:	690c      	ldr	r4, [r1, #16]
 800d376:	1b12      	subs	r2, r2, r4
 800d378:	d10e      	bne.n	800d398 <__mcmp+0x28>
 800d37a:	f100 0314 	add.w	r3, r0, #20
 800d37e:	3114      	adds	r1, #20
 800d380:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d384:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d388:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d38c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d390:	42a5      	cmp	r5, r4
 800d392:	d003      	beq.n	800d39c <__mcmp+0x2c>
 800d394:	d305      	bcc.n	800d3a2 <__mcmp+0x32>
 800d396:	2201      	movs	r2, #1
 800d398:	4610      	mov	r0, r2
 800d39a:	bd30      	pop	{r4, r5, pc}
 800d39c:	4283      	cmp	r3, r0
 800d39e:	d3f3      	bcc.n	800d388 <__mcmp+0x18>
 800d3a0:	e7fa      	b.n	800d398 <__mcmp+0x28>
 800d3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a6:	e7f7      	b.n	800d398 <__mcmp+0x28>

0800d3a8 <__mdiff>:
 800d3a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	460c      	mov	r4, r1
 800d3ae:	4606      	mov	r6, r0
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	4617      	mov	r7, r2
 800d3b6:	f7ff ffdb 	bl	800d370 <__mcmp>
 800d3ba:	1e05      	subs	r5, r0, #0
 800d3bc:	d110      	bne.n	800d3e0 <__mdiff+0x38>
 800d3be:	4629      	mov	r1, r5
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f7ff fd0d 	bl	800cde0 <_Balloc>
 800d3c6:	b930      	cbnz	r0, 800d3d6 <__mdiff+0x2e>
 800d3c8:	4b39      	ldr	r3, [pc, #228]	; (800d4b0 <__mdiff+0x108>)
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	f240 2132 	movw	r1, #562	; 0x232
 800d3d0:	4838      	ldr	r0, [pc, #224]	; (800d4b4 <__mdiff+0x10c>)
 800d3d2:	f000 fdbd 	bl	800df50 <__assert_func>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e0:	bfa4      	itt	ge
 800d3e2:	463b      	movge	r3, r7
 800d3e4:	4627      	movge	r7, r4
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	6879      	ldr	r1, [r7, #4]
 800d3ea:	bfa6      	itte	ge
 800d3ec:	461c      	movge	r4, r3
 800d3ee:	2500      	movge	r5, #0
 800d3f0:	2501      	movlt	r5, #1
 800d3f2:	f7ff fcf5 	bl	800cde0 <_Balloc>
 800d3f6:	b920      	cbnz	r0, 800d402 <__mdiff+0x5a>
 800d3f8:	4b2d      	ldr	r3, [pc, #180]	; (800d4b0 <__mdiff+0x108>)
 800d3fa:	4602      	mov	r2, r0
 800d3fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d400:	e7e6      	b.n	800d3d0 <__mdiff+0x28>
 800d402:	693e      	ldr	r6, [r7, #16]
 800d404:	60c5      	str	r5, [r0, #12]
 800d406:	6925      	ldr	r5, [r4, #16]
 800d408:	f107 0114 	add.w	r1, r7, #20
 800d40c:	f104 0914 	add.w	r9, r4, #20
 800d410:	f100 0e14 	add.w	lr, r0, #20
 800d414:	f107 0210 	add.w	r2, r7, #16
 800d418:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d41c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d420:	46f2      	mov	sl, lr
 800d422:	2700      	movs	r7, #0
 800d424:	f859 3b04 	ldr.w	r3, [r9], #4
 800d428:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d42c:	fa1f f883 	uxth.w	r8, r3
 800d430:	fa17 f78b 	uxtah	r7, r7, fp
 800d434:	0c1b      	lsrs	r3, r3, #16
 800d436:	eba7 0808 	sub.w	r8, r7, r8
 800d43a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d43e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d442:	fa1f f888 	uxth.w	r8, r8
 800d446:	141f      	asrs	r7, r3, #16
 800d448:	454d      	cmp	r5, r9
 800d44a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d44e:	f84a 3b04 	str.w	r3, [sl], #4
 800d452:	d8e7      	bhi.n	800d424 <__mdiff+0x7c>
 800d454:	1b2b      	subs	r3, r5, r4
 800d456:	3b15      	subs	r3, #21
 800d458:	f023 0303 	bic.w	r3, r3, #3
 800d45c:	3304      	adds	r3, #4
 800d45e:	3415      	adds	r4, #21
 800d460:	42a5      	cmp	r5, r4
 800d462:	bf38      	it	cc
 800d464:	2304      	movcc	r3, #4
 800d466:	4419      	add	r1, r3
 800d468:	4473      	add	r3, lr
 800d46a:	469e      	mov	lr, r3
 800d46c:	460d      	mov	r5, r1
 800d46e:	4565      	cmp	r5, ip
 800d470:	d30e      	bcc.n	800d490 <__mdiff+0xe8>
 800d472:	f10c 0203 	add.w	r2, ip, #3
 800d476:	1a52      	subs	r2, r2, r1
 800d478:	f022 0203 	bic.w	r2, r2, #3
 800d47c:	3903      	subs	r1, #3
 800d47e:	458c      	cmp	ip, r1
 800d480:	bf38      	it	cc
 800d482:	2200      	movcc	r2, #0
 800d484:	441a      	add	r2, r3
 800d486:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d48a:	b17b      	cbz	r3, 800d4ac <__mdiff+0x104>
 800d48c:	6106      	str	r6, [r0, #16]
 800d48e:	e7a5      	b.n	800d3dc <__mdiff+0x34>
 800d490:	f855 8b04 	ldr.w	r8, [r5], #4
 800d494:	fa17 f488 	uxtah	r4, r7, r8
 800d498:	1422      	asrs	r2, r4, #16
 800d49a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d49e:	b2a4      	uxth	r4, r4
 800d4a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d4a4:	f84e 4b04 	str.w	r4, [lr], #4
 800d4a8:	1417      	asrs	r7, r2, #16
 800d4aa:	e7e0      	b.n	800d46e <__mdiff+0xc6>
 800d4ac:	3e01      	subs	r6, #1
 800d4ae:	e7ea      	b.n	800d486 <__mdiff+0xde>
 800d4b0:	0800ea3c 	.word	0x0800ea3c
 800d4b4:	0800eb30 	.word	0x0800eb30

0800d4b8 <__ulp>:
 800d4b8:	b082      	sub	sp, #8
 800d4ba:	ed8d 0b00 	vstr	d0, [sp]
 800d4be:	9b01      	ldr	r3, [sp, #4]
 800d4c0:	4912      	ldr	r1, [pc, #72]	; (800d50c <__ulp+0x54>)
 800d4c2:	4019      	ands	r1, r3
 800d4c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d4c8:	2900      	cmp	r1, #0
 800d4ca:	dd05      	ble.n	800d4d8 <__ulp+0x20>
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	ec43 2b10 	vmov	d0, r2, r3
 800d4d4:	b002      	add	sp, #8
 800d4d6:	4770      	bx	lr
 800d4d8:	4249      	negs	r1, r1
 800d4da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d4de:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d4e2:	f04f 0200 	mov.w	r2, #0
 800d4e6:	f04f 0300 	mov.w	r3, #0
 800d4ea:	da04      	bge.n	800d4f6 <__ulp+0x3e>
 800d4ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d4f0:	fa41 f300 	asr.w	r3, r1, r0
 800d4f4:	e7ec      	b.n	800d4d0 <__ulp+0x18>
 800d4f6:	f1a0 0114 	sub.w	r1, r0, #20
 800d4fa:	291e      	cmp	r1, #30
 800d4fc:	bfda      	itte	le
 800d4fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d502:	fa20 f101 	lsrle.w	r1, r0, r1
 800d506:	2101      	movgt	r1, #1
 800d508:	460a      	mov	r2, r1
 800d50a:	e7e1      	b.n	800d4d0 <__ulp+0x18>
 800d50c:	7ff00000 	.word	0x7ff00000

0800d510 <__b2d>:
 800d510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d512:	6905      	ldr	r5, [r0, #16]
 800d514:	f100 0714 	add.w	r7, r0, #20
 800d518:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d51c:	1f2e      	subs	r6, r5, #4
 800d51e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d522:	4620      	mov	r0, r4
 800d524:	f7ff fd52 	bl	800cfcc <__hi0bits>
 800d528:	f1c0 0320 	rsb	r3, r0, #32
 800d52c:	280a      	cmp	r0, #10
 800d52e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d5ac <__b2d+0x9c>
 800d532:	600b      	str	r3, [r1, #0]
 800d534:	dc14      	bgt.n	800d560 <__b2d+0x50>
 800d536:	f1c0 0e0b 	rsb	lr, r0, #11
 800d53a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d53e:	42b7      	cmp	r7, r6
 800d540:	ea41 030c 	orr.w	r3, r1, ip
 800d544:	bf34      	ite	cc
 800d546:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d54a:	2100      	movcs	r1, #0
 800d54c:	3015      	adds	r0, #21
 800d54e:	fa04 f000 	lsl.w	r0, r4, r0
 800d552:	fa21 f10e 	lsr.w	r1, r1, lr
 800d556:	ea40 0201 	orr.w	r2, r0, r1
 800d55a:	ec43 2b10 	vmov	d0, r2, r3
 800d55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d560:	42b7      	cmp	r7, r6
 800d562:	bf3a      	itte	cc
 800d564:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d568:	f1a5 0608 	subcc.w	r6, r5, #8
 800d56c:	2100      	movcs	r1, #0
 800d56e:	380b      	subs	r0, #11
 800d570:	d017      	beq.n	800d5a2 <__b2d+0x92>
 800d572:	f1c0 0c20 	rsb	ip, r0, #32
 800d576:	fa04 f500 	lsl.w	r5, r4, r0
 800d57a:	42be      	cmp	r6, r7
 800d57c:	fa21 f40c 	lsr.w	r4, r1, ip
 800d580:	ea45 0504 	orr.w	r5, r5, r4
 800d584:	bf8c      	ite	hi
 800d586:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d58a:	2400      	movls	r4, #0
 800d58c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d590:	fa01 f000 	lsl.w	r0, r1, r0
 800d594:	fa24 f40c 	lsr.w	r4, r4, ip
 800d598:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d59c:	ea40 0204 	orr.w	r2, r0, r4
 800d5a0:	e7db      	b.n	800d55a <__b2d+0x4a>
 800d5a2:	ea44 030c 	orr.w	r3, r4, ip
 800d5a6:	460a      	mov	r2, r1
 800d5a8:	e7d7      	b.n	800d55a <__b2d+0x4a>
 800d5aa:	bf00      	nop
 800d5ac:	3ff00000 	.word	0x3ff00000

0800d5b0 <__d2b>:
 800d5b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d5b4:	4689      	mov	r9, r1
 800d5b6:	2101      	movs	r1, #1
 800d5b8:	ec57 6b10 	vmov	r6, r7, d0
 800d5bc:	4690      	mov	r8, r2
 800d5be:	f7ff fc0f 	bl	800cde0 <_Balloc>
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	b930      	cbnz	r0, 800d5d4 <__d2b+0x24>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	4b25      	ldr	r3, [pc, #148]	; (800d660 <__d2b+0xb0>)
 800d5ca:	4826      	ldr	r0, [pc, #152]	; (800d664 <__d2b+0xb4>)
 800d5cc:	f240 310a 	movw	r1, #778	; 0x30a
 800d5d0:	f000 fcbe 	bl	800df50 <__assert_func>
 800d5d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d5d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d5dc:	bb35      	cbnz	r5, 800d62c <__d2b+0x7c>
 800d5de:	2e00      	cmp	r6, #0
 800d5e0:	9301      	str	r3, [sp, #4]
 800d5e2:	d028      	beq.n	800d636 <__d2b+0x86>
 800d5e4:	4668      	mov	r0, sp
 800d5e6:	9600      	str	r6, [sp, #0]
 800d5e8:	f7ff fd10 	bl	800d00c <__lo0bits>
 800d5ec:	9900      	ldr	r1, [sp, #0]
 800d5ee:	b300      	cbz	r0, 800d632 <__d2b+0x82>
 800d5f0:	9a01      	ldr	r2, [sp, #4]
 800d5f2:	f1c0 0320 	rsb	r3, r0, #32
 800d5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5fa:	430b      	orrs	r3, r1
 800d5fc:	40c2      	lsrs	r2, r0
 800d5fe:	6163      	str	r3, [r4, #20]
 800d600:	9201      	str	r2, [sp, #4]
 800d602:	9b01      	ldr	r3, [sp, #4]
 800d604:	61a3      	str	r3, [r4, #24]
 800d606:	2b00      	cmp	r3, #0
 800d608:	bf14      	ite	ne
 800d60a:	2202      	movne	r2, #2
 800d60c:	2201      	moveq	r2, #1
 800d60e:	6122      	str	r2, [r4, #16]
 800d610:	b1d5      	cbz	r5, 800d648 <__d2b+0x98>
 800d612:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d616:	4405      	add	r5, r0
 800d618:	f8c9 5000 	str.w	r5, [r9]
 800d61c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d620:	f8c8 0000 	str.w	r0, [r8]
 800d624:	4620      	mov	r0, r4
 800d626:	b003      	add	sp, #12
 800d628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d62c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d630:	e7d5      	b.n	800d5de <__d2b+0x2e>
 800d632:	6161      	str	r1, [r4, #20]
 800d634:	e7e5      	b.n	800d602 <__d2b+0x52>
 800d636:	a801      	add	r0, sp, #4
 800d638:	f7ff fce8 	bl	800d00c <__lo0bits>
 800d63c:	9b01      	ldr	r3, [sp, #4]
 800d63e:	6163      	str	r3, [r4, #20]
 800d640:	2201      	movs	r2, #1
 800d642:	6122      	str	r2, [r4, #16]
 800d644:	3020      	adds	r0, #32
 800d646:	e7e3      	b.n	800d610 <__d2b+0x60>
 800d648:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d64c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d650:	f8c9 0000 	str.w	r0, [r9]
 800d654:	6918      	ldr	r0, [r3, #16]
 800d656:	f7ff fcb9 	bl	800cfcc <__hi0bits>
 800d65a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d65e:	e7df      	b.n	800d620 <__d2b+0x70>
 800d660:	0800ea3c 	.word	0x0800ea3c
 800d664:	0800eb30 	.word	0x0800eb30

0800d668 <__ratio>:
 800d668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66c:	4688      	mov	r8, r1
 800d66e:	4669      	mov	r1, sp
 800d670:	4681      	mov	r9, r0
 800d672:	f7ff ff4d 	bl	800d510 <__b2d>
 800d676:	a901      	add	r1, sp, #4
 800d678:	4640      	mov	r0, r8
 800d67a:	ec55 4b10 	vmov	r4, r5, d0
 800d67e:	f7ff ff47 	bl	800d510 <__b2d>
 800d682:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d686:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d68a:	eba3 0c02 	sub.w	ip, r3, r2
 800d68e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d692:	1a9b      	subs	r3, r3, r2
 800d694:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d698:	ec51 0b10 	vmov	r0, r1, d0
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	bfd6      	itet	le
 800d6a0:	460a      	movle	r2, r1
 800d6a2:	462a      	movgt	r2, r5
 800d6a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d6a8:	468b      	mov	fp, r1
 800d6aa:	462f      	mov	r7, r5
 800d6ac:	bfd4      	ite	le
 800d6ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d6b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	ee10 2a10 	vmov	r2, s0
 800d6bc:	465b      	mov	r3, fp
 800d6be:	4639      	mov	r1, r7
 800d6c0:	f7f3 f8c4 	bl	800084c <__aeabi_ddiv>
 800d6c4:	ec41 0b10 	vmov	d0, r0, r1
 800d6c8:	b003      	add	sp, #12
 800d6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d6ce <__copybits>:
 800d6ce:	3901      	subs	r1, #1
 800d6d0:	b570      	push	{r4, r5, r6, lr}
 800d6d2:	1149      	asrs	r1, r1, #5
 800d6d4:	6914      	ldr	r4, [r2, #16]
 800d6d6:	3101      	adds	r1, #1
 800d6d8:	f102 0314 	add.w	r3, r2, #20
 800d6dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d6e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d6e4:	1f05      	subs	r5, r0, #4
 800d6e6:	42a3      	cmp	r3, r4
 800d6e8:	d30c      	bcc.n	800d704 <__copybits+0x36>
 800d6ea:	1aa3      	subs	r3, r4, r2
 800d6ec:	3b11      	subs	r3, #17
 800d6ee:	f023 0303 	bic.w	r3, r3, #3
 800d6f2:	3211      	adds	r2, #17
 800d6f4:	42a2      	cmp	r2, r4
 800d6f6:	bf88      	it	hi
 800d6f8:	2300      	movhi	r3, #0
 800d6fa:	4418      	add	r0, r3
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	4288      	cmp	r0, r1
 800d700:	d305      	bcc.n	800d70e <__copybits+0x40>
 800d702:	bd70      	pop	{r4, r5, r6, pc}
 800d704:	f853 6b04 	ldr.w	r6, [r3], #4
 800d708:	f845 6f04 	str.w	r6, [r5, #4]!
 800d70c:	e7eb      	b.n	800d6e6 <__copybits+0x18>
 800d70e:	f840 3b04 	str.w	r3, [r0], #4
 800d712:	e7f4      	b.n	800d6fe <__copybits+0x30>

0800d714 <__any_on>:
 800d714:	f100 0214 	add.w	r2, r0, #20
 800d718:	6900      	ldr	r0, [r0, #16]
 800d71a:	114b      	asrs	r3, r1, #5
 800d71c:	4298      	cmp	r0, r3
 800d71e:	b510      	push	{r4, lr}
 800d720:	db11      	blt.n	800d746 <__any_on+0x32>
 800d722:	dd0a      	ble.n	800d73a <__any_on+0x26>
 800d724:	f011 011f 	ands.w	r1, r1, #31
 800d728:	d007      	beq.n	800d73a <__any_on+0x26>
 800d72a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d72e:	fa24 f001 	lsr.w	r0, r4, r1
 800d732:	fa00 f101 	lsl.w	r1, r0, r1
 800d736:	428c      	cmp	r4, r1
 800d738:	d10b      	bne.n	800d752 <__any_on+0x3e>
 800d73a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d73e:	4293      	cmp	r3, r2
 800d740:	d803      	bhi.n	800d74a <__any_on+0x36>
 800d742:	2000      	movs	r0, #0
 800d744:	bd10      	pop	{r4, pc}
 800d746:	4603      	mov	r3, r0
 800d748:	e7f7      	b.n	800d73a <__any_on+0x26>
 800d74a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d74e:	2900      	cmp	r1, #0
 800d750:	d0f5      	beq.n	800d73e <__any_on+0x2a>
 800d752:	2001      	movs	r0, #1
 800d754:	e7f6      	b.n	800d744 <__any_on+0x30>

0800d756 <_calloc_r>:
 800d756:	b513      	push	{r0, r1, r4, lr}
 800d758:	434a      	muls	r2, r1
 800d75a:	4611      	mov	r1, r2
 800d75c:	9201      	str	r2, [sp, #4]
 800d75e:	f000 f859 	bl	800d814 <_malloc_r>
 800d762:	4604      	mov	r4, r0
 800d764:	b118      	cbz	r0, 800d76e <_calloc_r+0x18>
 800d766:	9a01      	ldr	r2, [sp, #4]
 800d768:	2100      	movs	r1, #0
 800d76a:	f7fc f86b 	bl	8009844 <memset>
 800d76e:	4620      	mov	r0, r4
 800d770:	b002      	add	sp, #8
 800d772:	bd10      	pop	{r4, pc}

0800d774 <_free_r>:
 800d774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d776:	2900      	cmp	r1, #0
 800d778:	d048      	beq.n	800d80c <_free_r+0x98>
 800d77a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d77e:	9001      	str	r0, [sp, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	f1a1 0404 	sub.w	r4, r1, #4
 800d786:	bfb8      	it	lt
 800d788:	18e4      	addlt	r4, r4, r3
 800d78a:	f000 fc6f 	bl	800e06c <__malloc_lock>
 800d78e:	4a20      	ldr	r2, [pc, #128]	; (800d810 <_free_r+0x9c>)
 800d790:	9801      	ldr	r0, [sp, #4]
 800d792:	6813      	ldr	r3, [r2, #0]
 800d794:	4615      	mov	r5, r2
 800d796:	b933      	cbnz	r3, 800d7a6 <_free_r+0x32>
 800d798:	6063      	str	r3, [r4, #4]
 800d79a:	6014      	str	r4, [r2, #0]
 800d79c:	b003      	add	sp, #12
 800d79e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7a2:	f000 bc69 	b.w	800e078 <__malloc_unlock>
 800d7a6:	42a3      	cmp	r3, r4
 800d7a8:	d90b      	bls.n	800d7c2 <_free_r+0x4e>
 800d7aa:	6821      	ldr	r1, [r4, #0]
 800d7ac:	1862      	adds	r2, r4, r1
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	bf04      	itt	eq
 800d7b2:	681a      	ldreq	r2, [r3, #0]
 800d7b4:	685b      	ldreq	r3, [r3, #4]
 800d7b6:	6063      	str	r3, [r4, #4]
 800d7b8:	bf04      	itt	eq
 800d7ba:	1852      	addeq	r2, r2, r1
 800d7bc:	6022      	streq	r2, [r4, #0]
 800d7be:	602c      	str	r4, [r5, #0]
 800d7c0:	e7ec      	b.n	800d79c <_free_r+0x28>
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	b10b      	cbz	r3, 800d7cc <_free_r+0x58>
 800d7c8:	42a3      	cmp	r3, r4
 800d7ca:	d9fa      	bls.n	800d7c2 <_free_r+0x4e>
 800d7cc:	6811      	ldr	r1, [r2, #0]
 800d7ce:	1855      	adds	r5, r2, r1
 800d7d0:	42a5      	cmp	r5, r4
 800d7d2:	d10b      	bne.n	800d7ec <_free_r+0x78>
 800d7d4:	6824      	ldr	r4, [r4, #0]
 800d7d6:	4421      	add	r1, r4
 800d7d8:	1854      	adds	r4, r2, r1
 800d7da:	42a3      	cmp	r3, r4
 800d7dc:	6011      	str	r1, [r2, #0]
 800d7de:	d1dd      	bne.n	800d79c <_free_r+0x28>
 800d7e0:	681c      	ldr	r4, [r3, #0]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	6053      	str	r3, [r2, #4]
 800d7e6:	4421      	add	r1, r4
 800d7e8:	6011      	str	r1, [r2, #0]
 800d7ea:	e7d7      	b.n	800d79c <_free_r+0x28>
 800d7ec:	d902      	bls.n	800d7f4 <_free_r+0x80>
 800d7ee:	230c      	movs	r3, #12
 800d7f0:	6003      	str	r3, [r0, #0]
 800d7f2:	e7d3      	b.n	800d79c <_free_r+0x28>
 800d7f4:	6825      	ldr	r5, [r4, #0]
 800d7f6:	1961      	adds	r1, r4, r5
 800d7f8:	428b      	cmp	r3, r1
 800d7fa:	bf04      	itt	eq
 800d7fc:	6819      	ldreq	r1, [r3, #0]
 800d7fe:	685b      	ldreq	r3, [r3, #4]
 800d800:	6063      	str	r3, [r4, #4]
 800d802:	bf04      	itt	eq
 800d804:	1949      	addeq	r1, r1, r5
 800d806:	6021      	streq	r1, [r4, #0]
 800d808:	6054      	str	r4, [r2, #4]
 800d80a:	e7c7      	b.n	800d79c <_free_r+0x28>
 800d80c:	b003      	add	sp, #12
 800d80e:	bd30      	pop	{r4, r5, pc}
 800d810:	20000200 	.word	0x20000200

0800d814 <_malloc_r>:
 800d814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d816:	1ccd      	adds	r5, r1, #3
 800d818:	f025 0503 	bic.w	r5, r5, #3
 800d81c:	3508      	adds	r5, #8
 800d81e:	2d0c      	cmp	r5, #12
 800d820:	bf38      	it	cc
 800d822:	250c      	movcc	r5, #12
 800d824:	2d00      	cmp	r5, #0
 800d826:	4606      	mov	r6, r0
 800d828:	db01      	blt.n	800d82e <_malloc_r+0x1a>
 800d82a:	42a9      	cmp	r1, r5
 800d82c:	d903      	bls.n	800d836 <_malloc_r+0x22>
 800d82e:	230c      	movs	r3, #12
 800d830:	6033      	str	r3, [r6, #0]
 800d832:	2000      	movs	r0, #0
 800d834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d836:	f000 fc19 	bl	800e06c <__malloc_lock>
 800d83a:	4921      	ldr	r1, [pc, #132]	; (800d8c0 <_malloc_r+0xac>)
 800d83c:	680a      	ldr	r2, [r1, #0]
 800d83e:	4614      	mov	r4, r2
 800d840:	b99c      	cbnz	r4, 800d86a <_malloc_r+0x56>
 800d842:	4f20      	ldr	r7, [pc, #128]	; (800d8c4 <_malloc_r+0xb0>)
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	b923      	cbnz	r3, 800d852 <_malloc_r+0x3e>
 800d848:	4621      	mov	r1, r4
 800d84a:	4630      	mov	r0, r6
 800d84c:	f000 fafc 	bl	800de48 <_sbrk_r>
 800d850:	6038      	str	r0, [r7, #0]
 800d852:	4629      	mov	r1, r5
 800d854:	4630      	mov	r0, r6
 800d856:	f000 faf7 	bl	800de48 <_sbrk_r>
 800d85a:	1c43      	adds	r3, r0, #1
 800d85c:	d123      	bne.n	800d8a6 <_malloc_r+0x92>
 800d85e:	230c      	movs	r3, #12
 800d860:	6033      	str	r3, [r6, #0]
 800d862:	4630      	mov	r0, r6
 800d864:	f000 fc08 	bl	800e078 <__malloc_unlock>
 800d868:	e7e3      	b.n	800d832 <_malloc_r+0x1e>
 800d86a:	6823      	ldr	r3, [r4, #0]
 800d86c:	1b5b      	subs	r3, r3, r5
 800d86e:	d417      	bmi.n	800d8a0 <_malloc_r+0x8c>
 800d870:	2b0b      	cmp	r3, #11
 800d872:	d903      	bls.n	800d87c <_malloc_r+0x68>
 800d874:	6023      	str	r3, [r4, #0]
 800d876:	441c      	add	r4, r3
 800d878:	6025      	str	r5, [r4, #0]
 800d87a:	e004      	b.n	800d886 <_malloc_r+0x72>
 800d87c:	6863      	ldr	r3, [r4, #4]
 800d87e:	42a2      	cmp	r2, r4
 800d880:	bf0c      	ite	eq
 800d882:	600b      	streq	r3, [r1, #0]
 800d884:	6053      	strne	r3, [r2, #4]
 800d886:	4630      	mov	r0, r6
 800d888:	f000 fbf6 	bl	800e078 <__malloc_unlock>
 800d88c:	f104 000b 	add.w	r0, r4, #11
 800d890:	1d23      	adds	r3, r4, #4
 800d892:	f020 0007 	bic.w	r0, r0, #7
 800d896:	1ac2      	subs	r2, r0, r3
 800d898:	d0cc      	beq.n	800d834 <_malloc_r+0x20>
 800d89a:	1a1b      	subs	r3, r3, r0
 800d89c:	50a3      	str	r3, [r4, r2]
 800d89e:	e7c9      	b.n	800d834 <_malloc_r+0x20>
 800d8a0:	4622      	mov	r2, r4
 800d8a2:	6864      	ldr	r4, [r4, #4]
 800d8a4:	e7cc      	b.n	800d840 <_malloc_r+0x2c>
 800d8a6:	1cc4      	adds	r4, r0, #3
 800d8a8:	f024 0403 	bic.w	r4, r4, #3
 800d8ac:	42a0      	cmp	r0, r4
 800d8ae:	d0e3      	beq.n	800d878 <_malloc_r+0x64>
 800d8b0:	1a21      	subs	r1, r4, r0
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	f000 fac8 	bl	800de48 <_sbrk_r>
 800d8b8:	3001      	adds	r0, #1
 800d8ba:	d1dd      	bne.n	800d878 <_malloc_r+0x64>
 800d8bc:	e7cf      	b.n	800d85e <_malloc_r+0x4a>
 800d8be:	bf00      	nop
 800d8c0:	20000200 	.word	0x20000200
 800d8c4:	20000204 	.word	0x20000204

0800d8c8 <__ssputs_r>:
 800d8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8cc:	688e      	ldr	r6, [r1, #8]
 800d8ce:	429e      	cmp	r6, r3
 800d8d0:	4682      	mov	sl, r0
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	4690      	mov	r8, r2
 800d8d6:	461f      	mov	r7, r3
 800d8d8:	d838      	bhi.n	800d94c <__ssputs_r+0x84>
 800d8da:	898a      	ldrh	r2, [r1, #12]
 800d8dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8e0:	d032      	beq.n	800d948 <__ssputs_r+0x80>
 800d8e2:	6825      	ldr	r5, [r4, #0]
 800d8e4:	6909      	ldr	r1, [r1, #16]
 800d8e6:	eba5 0901 	sub.w	r9, r5, r1
 800d8ea:	6965      	ldr	r5, [r4, #20]
 800d8ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	444b      	add	r3, r9
 800d8f8:	106d      	asrs	r5, r5, #1
 800d8fa:	429d      	cmp	r5, r3
 800d8fc:	bf38      	it	cc
 800d8fe:	461d      	movcc	r5, r3
 800d900:	0553      	lsls	r3, r2, #21
 800d902:	d531      	bpl.n	800d968 <__ssputs_r+0xa0>
 800d904:	4629      	mov	r1, r5
 800d906:	f7ff ff85 	bl	800d814 <_malloc_r>
 800d90a:	4606      	mov	r6, r0
 800d90c:	b950      	cbnz	r0, 800d924 <__ssputs_r+0x5c>
 800d90e:	230c      	movs	r3, #12
 800d910:	f8ca 3000 	str.w	r3, [sl]
 800d914:	89a3      	ldrh	r3, [r4, #12]
 800d916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d91a:	81a3      	strh	r3, [r4, #12]
 800d91c:	f04f 30ff 	mov.w	r0, #4294967295
 800d920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d924:	6921      	ldr	r1, [r4, #16]
 800d926:	464a      	mov	r2, r9
 800d928:	f7fb ff7e 	bl	8009828 <memcpy>
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d936:	81a3      	strh	r3, [r4, #12]
 800d938:	6126      	str	r6, [r4, #16]
 800d93a:	6165      	str	r5, [r4, #20]
 800d93c:	444e      	add	r6, r9
 800d93e:	eba5 0509 	sub.w	r5, r5, r9
 800d942:	6026      	str	r6, [r4, #0]
 800d944:	60a5      	str	r5, [r4, #8]
 800d946:	463e      	mov	r6, r7
 800d948:	42be      	cmp	r6, r7
 800d94a:	d900      	bls.n	800d94e <__ssputs_r+0x86>
 800d94c:	463e      	mov	r6, r7
 800d94e:	4632      	mov	r2, r6
 800d950:	6820      	ldr	r0, [r4, #0]
 800d952:	4641      	mov	r1, r8
 800d954:	f000 fb70 	bl	800e038 <memmove>
 800d958:	68a3      	ldr	r3, [r4, #8]
 800d95a:	6822      	ldr	r2, [r4, #0]
 800d95c:	1b9b      	subs	r3, r3, r6
 800d95e:	4432      	add	r2, r6
 800d960:	60a3      	str	r3, [r4, #8]
 800d962:	6022      	str	r2, [r4, #0]
 800d964:	2000      	movs	r0, #0
 800d966:	e7db      	b.n	800d920 <__ssputs_r+0x58>
 800d968:	462a      	mov	r2, r5
 800d96a:	f000 fb8b 	bl	800e084 <_realloc_r>
 800d96e:	4606      	mov	r6, r0
 800d970:	2800      	cmp	r0, #0
 800d972:	d1e1      	bne.n	800d938 <__ssputs_r+0x70>
 800d974:	6921      	ldr	r1, [r4, #16]
 800d976:	4650      	mov	r0, sl
 800d978:	f7ff fefc 	bl	800d774 <_free_r>
 800d97c:	e7c7      	b.n	800d90e <__ssputs_r+0x46>
	...

0800d980 <_svfiprintf_r>:
 800d980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d984:	4698      	mov	r8, r3
 800d986:	898b      	ldrh	r3, [r1, #12]
 800d988:	061b      	lsls	r3, r3, #24
 800d98a:	b09d      	sub	sp, #116	; 0x74
 800d98c:	4607      	mov	r7, r0
 800d98e:	460d      	mov	r5, r1
 800d990:	4614      	mov	r4, r2
 800d992:	d50e      	bpl.n	800d9b2 <_svfiprintf_r+0x32>
 800d994:	690b      	ldr	r3, [r1, #16]
 800d996:	b963      	cbnz	r3, 800d9b2 <_svfiprintf_r+0x32>
 800d998:	2140      	movs	r1, #64	; 0x40
 800d99a:	f7ff ff3b 	bl	800d814 <_malloc_r>
 800d99e:	6028      	str	r0, [r5, #0]
 800d9a0:	6128      	str	r0, [r5, #16]
 800d9a2:	b920      	cbnz	r0, 800d9ae <_svfiprintf_r+0x2e>
 800d9a4:	230c      	movs	r3, #12
 800d9a6:	603b      	str	r3, [r7, #0]
 800d9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ac:	e0d1      	b.n	800db52 <_svfiprintf_r+0x1d2>
 800d9ae:	2340      	movs	r3, #64	; 0x40
 800d9b0:	616b      	str	r3, [r5, #20]
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d9b6:	2320      	movs	r3, #32
 800d9b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9c0:	2330      	movs	r3, #48	; 0x30
 800d9c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db6c <_svfiprintf_r+0x1ec>
 800d9c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9ca:	f04f 0901 	mov.w	r9, #1
 800d9ce:	4623      	mov	r3, r4
 800d9d0:	469a      	mov	sl, r3
 800d9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9d6:	b10a      	cbz	r2, 800d9dc <_svfiprintf_r+0x5c>
 800d9d8:	2a25      	cmp	r2, #37	; 0x25
 800d9da:	d1f9      	bne.n	800d9d0 <_svfiprintf_r+0x50>
 800d9dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d9e0:	d00b      	beq.n	800d9fa <_svfiprintf_r+0x7a>
 800d9e2:	465b      	mov	r3, fp
 800d9e4:	4622      	mov	r2, r4
 800d9e6:	4629      	mov	r1, r5
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	f7ff ff6d 	bl	800d8c8 <__ssputs_r>
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	f000 80aa 	beq.w	800db48 <_svfiprintf_r+0x1c8>
 800d9f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9f6:	445a      	add	r2, fp
 800d9f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d9fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f000 80a2 	beq.w	800db48 <_svfiprintf_r+0x1c8>
 800da04:	2300      	movs	r3, #0
 800da06:	f04f 32ff 	mov.w	r2, #4294967295
 800da0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da0e:	f10a 0a01 	add.w	sl, sl, #1
 800da12:	9304      	str	r3, [sp, #16]
 800da14:	9307      	str	r3, [sp, #28]
 800da16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da1a:	931a      	str	r3, [sp, #104]	; 0x68
 800da1c:	4654      	mov	r4, sl
 800da1e:	2205      	movs	r2, #5
 800da20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da24:	4851      	ldr	r0, [pc, #324]	; (800db6c <_svfiprintf_r+0x1ec>)
 800da26:	f7f2 fbdb 	bl	80001e0 <memchr>
 800da2a:	9a04      	ldr	r2, [sp, #16]
 800da2c:	b9d8      	cbnz	r0, 800da66 <_svfiprintf_r+0xe6>
 800da2e:	06d0      	lsls	r0, r2, #27
 800da30:	bf44      	itt	mi
 800da32:	2320      	movmi	r3, #32
 800da34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da38:	0711      	lsls	r1, r2, #28
 800da3a:	bf44      	itt	mi
 800da3c:	232b      	movmi	r3, #43	; 0x2b
 800da3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da42:	f89a 3000 	ldrb.w	r3, [sl]
 800da46:	2b2a      	cmp	r3, #42	; 0x2a
 800da48:	d015      	beq.n	800da76 <_svfiprintf_r+0xf6>
 800da4a:	9a07      	ldr	r2, [sp, #28]
 800da4c:	4654      	mov	r4, sl
 800da4e:	2000      	movs	r0, #0
 800da50:	f04f 0c0a 	mov.w	ip, #10
 800da54:	4621      	mov	r1, r4
 800da56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da5a:	3b30      	subs	r3, #48	; 0x30
 800da5c:	2b09      	cmp	r3, #9
 800da5e:	d94e      	bls.n	800dafe <_svfiprintf_r+0x17e>
 800da60:	b1b0      	cbz	r0, 800da90 <_svfiprintf_r+0x110>
 800da62:	9207      	str	r2, [sp, #28]
 800da64:	e014      	b.n	800da90 <_svfiprintf_r+0x110>
 800da66:	eba0 0308 	sub.w	r3, r0, r8
 800da6a:	fa09 f303 	lsl.w	r3, r9, r3
 800da6e:	4313      	orrs	r3, r2
 800da70:	9304      	str	r3, [sp, #16]
 800da72:	46a2      	mov	sl, r4
 800da74:	e7d2      	b.n	800da1c <_svfiprintf_r+0x9c>
 800da76:	9b03      	ldr	r3, [sp, #12]
 800da78:	1d19      	adds	r1, r3, #4
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	9103      	str	r1, [sp, #12]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	bfbb      	ittet	lt
 800da82:	425b      	neglt	r3, r3
 800da84:	f042 0202 	orrlt.w	r2, r2, #2
 800da88:	9307      	strge	r3, [sp, #28]
 800da8a:	9307      	strlt	r3, [sp, #28]
 800da8c:	bfb8      	it	lt
 800da8e:	9204      	strlt	r2, [sp, #16]
 800da90:	7823      	ldrb	r3, [r4, #0]
 800da92:	2b2e      	cmp	r3, #46	; 0x2e
 800da94:	d10c      	bne.n	800dab0 <_svfiprintf_r+0x130>
 800da96:	7863      	ldrb	r3, [r4, #1]
 800da98:	2b2a      	cmp	r3, #42	; 0x2a
 800da9a:	d135      	bne.n	800db08 <_svfiprintf_r+0x188>
 800da9c:	9b03      	ldr	r3, [sp, #12]
 800da9e:	1d1a      	adds	r2, r3, #4
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	9203      	str	r2, [sp, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	bfb8      	it	lt
 800daa8:	f04f 33ff 	movlt.w	r3, #4294967295
 800daac:	3402      	adds	r4, #2
 800daae:	9305      	str	r3, [sp, #20]
 800dab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db7c <_svfiprintf_r+0x1fc>
 800dab4:	7821      	ldrb	r1, [r4, #0]
 800dab6:	2203      	movs	r2, #3
 800dab8:	4650      	mov	r0, sl
 800daba:	f7f2 fb91 	bl	80001e0 <memchr>
 800dabe:	b140      	cbz	r0, 800dad2 <_svfiprintf_r+0x152>
 800dac0:	2340      	movs	r3, #64	; 0x40
 800dac2:	eba0 000a 	sub.w	r0, r0, sl
 800dac6:	fa03 f000 	lsl.w	r0, r3, r0
 800daca:	9b04      	ldr	r3, [sp, #16]
 800dacc:	4303      	orrs	r3, r0
 800dace:	3401      	adds	r4, #1
 800dad0:	9304      	str	r3, [sp, #16]
 800dad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dad6:	4826      	ldr	r0, [pc, #152]	; (800db70 <_svfiprintf_r+0x1f0>)
 800dad8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dadc:	2206      	movs	r2, #6
 800dade:	f7f2 fb7f 	bl	80001e0 <memchr>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d038      	beq.n	800db58 <_svfiprintf_r+0x1d8>
 800dae6:	4b23      	ldr	r3, [pc, #140]	; (800db74 <_svfiprintf_r+0x1f4>)
 800dae8:	bb1b      	cbnz	r3, 800db32 <_svfiprintf_r+0x1b2>
 800daea:	9b03      	ldr	r3, [sp, #12]
 800daec:	3307      	adds	r3, #7
 800daee:	f023 0307 	bic.w	r3, r3, #7
 800daf2:	3308      	adds	r3, #8
 800daf4:	9303      	str	r3, [sp, #12]
 800daf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf8:	4433      	add	r3, r6
 800dafa:	9309      	str	r3, [sp, #36]	; 0x24
 800dafc:	e767      	b.n	800d9ce <_svfiprintf_r+0x4e>
 800dafe:	fb0c 3202 	mla	r2, ip, r2, r3
 800db02:	460c      	mov	r4, r1
 800db04:	2001      	movs	r0, #1
 800db06:	e7a5      	b.n	800da54 <_svfiprintf_r+0xd4>
 800db08:	2300      	movs	r3, #0
 800db0a:	3401      	adds	r4, #1
 800db0c:	9305      	str	r3, [sp, #20]
 800db0e:	4619      	mov	r1, r3
 800db10:	f04f 0c0a 	mov.w	ip, #10
 800db14:	4620      	mov	r0, r4
 800db16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db1a:	3a30      	subs	r2, #48	; 0x30
 800db1c:	2a09      	cmp	r2, #9
 800db1e:	d903      	bls.n	800db28 <_svfiprintf_r+0x1a8>
 800db20:	2b00      	cmp	r3, #0
 800db22:	d0c5      	beq.n	800dab0 <_svfiprintf_r+0x130>
 800db24:	9105      	str	r1, [sp, #20]
 800db26:	e7c3      	b.n	800dab0 <_svfiprintf_r+0x130>
 800db28:	fb0c 2101 	mla	r1, ip, r1, r2
 800db2c:	4604      	mov	r4, r0
 800db2e:	2301      	movs	r3, #1
 800db30:	e7f0      	b.n	800db14 <_svfiprintf_r+0x194>
 800db32:	ab03      	add	r3, sp, #12
 800db34:	9300      	str	r3, [sp, #0]
 800db36:	462a      	mov	r2, r5
 800db38:	4b0f      	ldr	r3, [pc, #60]	; (800db78 <_svfiprintf_r+0x1f8>)
 800db3a:	a904      	add	r1, sp, #16
 800db3c:	4638      	mov	r0, r7
 800db3e:	f7fb ff29 	bl	8009994 <_printf_float>
 800db42:	1c42      	adds	r2, r0, #1
 800db44:	4606      	mov	r6, r0
 800db46:	d1d6      	bne.n	800daf6 <_svfiprintf_r+0x176>
 800db48:	89ab      	ldrh	r3, [r5, #12]
 800db4a:	065b      	lsls	r3, r3, #25
 800db4c:	f53f af2c 	bmi.w	800d9a8 <_svfiprintf_r+0x28>
 800db50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db52:	b01d      	add	sp, #116	; 0x74
 800db54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db58:	ab03      	add	r3, sp, #12
 800db5a:	9300      	str	r3, [sp, #0]
 800db5c:	462a      	mov	r2, r5
 800db5e:	4b06      	ldr	r3, [pc, #24]	; (800db78 <_svfiprintf_r+0x1f8>)
 800db60:	a904      	add	r1, sp, #16
 800db62:	4638      	mov	r0, r7
 800db64:	f7fc f9ba 	bl	8009edc <_printf_i>
 800db68:	e7eb      	b.n	800db42 <_svfiprintf_r+0x1c2>
 800db6a:	bf00      	nop
 800db6c:	0800ec8c 	.word	0x0800ec8c
 800db70:	0800ec96 	.word	0x0800ec96
 800db74:	08009995 	.word	0x08009995
 800db78:	0800d8c9 	.word	0x0800d8c9
 800db7c:	0800ec92 	.word	0x0800ec92

0800db80 <__sfputc_r>:
 800db80:	6893      	ldr	r3, [r2, #8]
 800db82:	3b01      	subs	r3, #1
 800db84:	2b00      	cmp	r3, #0
 800db86:	b410      	push	{r4}
 800db88:	6093      	str	r3, [r2, #8]
 800db8a:	da08      	bge.n	800db9e <__sfputc_r+0x1e>
 800db8c:	6994      	ldr	r4, [r2, #24]
 800db8e:	42a3      	cmp	r3, r4
 800db90:	db01      	blt.n	800db96 <__sfputc_r+0x16>
 800db92:	290a      	cmp	r1, #10
 800db94:	d103      	bne.n	800db9e <__sfputc_r+0x1e>
 800db96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db9a:	f7fd bc3b 	b.w	800b414 <__swbuf_r>
 800db9e:	6813      	ldr	r3, [r2, #0]
 800dba0:	1c58      	adds	r0, r3, #1
 800dba2:	6010      	str	r0, [r2, #0]
 800dba4:	7019      	strb	r1, [r3, #0]
 800dba6:	4608      	mov	r0, r1
 800dba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbac:	4770      	bx	lr

0800dbae <__sfputs_r>:
 800dbae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	460f      	mov	r7, r1
 800dbb4:	4614      	mov	r4, r2
 800dbb6:	18d5      	adds	r5, r2, r3
 800dbb8:	42ac      	cmp	r4, r5
 800dbba:	d101      	bne.n	800dbc0 <__sfputs_r+0x12>
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	e007      	b.n	800dbd0 <__sfputs_r+0x22>
 800dbc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbc4:	463a      	mov	r2, r7
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	f7ff ffda 	bl	800db80 <__sfputc_r>
 800dbcc:	1c43      	adds	r3, r0, #1
 800dbce:	d1f3      	bne.n	800dbb8 <__sfputs_r+0xa>
 800dbd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbd4 <_vfiprintf_r>:
 800dbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	460d      	mov	r5, r1
 800dbda:	b09d      	sub	sp, #116	; 0x74
 800dbdc:	4614      	mov	r4, r2
 800dbde:	4698      	mov	r8, r3
 800dbe0:	4606      	mov	r6, r0
 800dbe2:	b118      	cbz	r0, 800dbec <_vfiprintf_r+0x18>
 800dbe4:	6983      	ldr	r3, [r0, #24]
 800dbe6:	b90b      	cbnz	r3, 800dbec <_vfiprintf_r+0x18>
 800dbe8:	f7fe fc68 	bl	800c4bc <__sinit>
 800dbec:	4b89      	ldr	r3, [pc, #548]	; (800de14 <_vfiprintf_r+0x240>)
 800dbee:	429d      	cmp	r5, r3
 800dbf0:	d11b      	bne.n	800dc2a <_vfiprintf_r+0x56>
 800dbf2:	6875      	ldr	r5, [r6, #4]
 800dbf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbf6:	07d9      	lsls	r1, r3, #31
 800dbf8:	d405      	bmi.n	800dc06 <_vfiprintf_r+0x32>
 800dbfa:	89ab      	ldrh	r3, [r5, #12]
 800dbfc:	059a      	lsls	r2, r3, #22
 800dbfe:	d402      	bmi.n	800dc06 <_vfiprintf_r+0x32>
 800dc00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc02:	f7ff f86c 	bl	800ccde <__retarget_lock_acquire_recursive>
 800dc06:	89ab      	ldrh	r3, [r5, #12]
 800dc08:	071b      	lsls	r3, r3, #28
 800dc0a:	d501      	bpl.n	800dc10 <_vfiprintf_r+0x3c>
 800dc0c:	692b      	ldr	r3, [r5, #16]
 800dc0e:	b9eb      	cbnz	r3, 800dc4c <_vfiprintf_r+0x78>
 800dc10:	4629      	mov	r1, r5
 800dc12:	4630      	mov	r0, r6
 800dc14:	f7fd fc50 	bl	800b4b8 <__swsetup_r>
 800dc18:	b1c0      	cbz	r0, 800dc4c <_vfiprintf_r+0x78>
 800dc1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc1c:	07dc      	lsls	r4, r3, #31
 800dc1e:	d50e      	bpl.n	800dc3e <_vfiprintf_r+0x6a>
 800dc20:	f04f 30ff 	mov.w	r0, #4294967295
 800dc24:	b01d      	add	sp, #116	; 0x74
 800dc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2a:	4b7b      	ldr	r3, [pc, #492]	; (800de18 <_vfiprintf_r+0x244>)
 800dc2c:	429d      	cmp	r5, r3
 800dc2e:	d101      	bne.n	800dc34 <_vfiprintf_r+0x60>
 800dc30:	68b5      	ldr	r5, [r6, #8]
 800dc32:	e7df      	b.n	800dbf4 <_vfiprintf_r+0x20>
 800dc34:	4b79      	ldr	r3, [pc, #484]	; (800de1c <_vfiprintf_r+0x248>)
 800dc36:	429d      	cmp	r5, r3
 800dc38:	bf08      	it	eq
 800dc3a:	68f5      	ldreq	r5, [r6, #12]
 800dc3c:	e7da      	b.n	800dbf4 <_vfiprintf_r+0x20>
 800dc3e:	89ab      	ldrh	r3, [r5, #12]
 800dc40:	0598      	lsls	r0, r3, #22
 800dc42:	d4ed      	bmi.n	800dc20 <_vfiprintf_r+0x4c>
 800dc44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc46:	f7ff f84b 	bl	800cce0 <__retarget_lock_release_recursive>
 800dc4a:	e7e9      	b.n	800dc20 <_vfiprintf_r+0x4c>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc50:	2320      	movs	r3, #32
 800dc52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc56:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc5a:	2330      	movs	r3, #48	; 0x30
 800dc5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800de20 <_vfiprintf_r+0x24c>
 800dc60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc64:	f04f 0901 	mov.w	r9, #1
 800dc68:	4623      	mov	r3, r4
 800dc6a:	469a      	mov	sl, r3
 800dc6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc70:	b10a      	cbz	r2, 800dc76 <_vfiprintf_r+0xa2>
 800dc72:	2a25      	cmp	r2, #37	; 0x25
 800dc74:	d1f9      	bne.n	800dc6a <_vfiprintf_r+0x96>
 800dc76:	ebba 0b04 	subs.w	fp, sl, r4
 800dc7a:	d00b      	beq.n	800dc94 <_vfiprintf_r+0xc0>
 800dc7c:	465b      	mov	r3, fp
 800dc7e:	4622      	mov	r2, r4
 800dc80:	4629      	mov	r1, r5
 800dc82:	4630      	mov	r0, r6
 800dc84:	f7ff ff93 	bl	800dbae <__sfputs_r>
 800dc88:	3001      	adds	r0, #1
 800dc8a:	f000 80aa 	beq.w	800dde2 <_vfiprintf_r+0x20e>
 800dc8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc90:	445a      	add	r2, fp
 800dc92:	9209      	str	r2, [sp, #36]	; 0x24
 800dc94:	f89a 3000 	ldrb.w	r3, [sl]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f000 80a2 	beq.w	800dde2 <_vfiprintf_r+0x20e>
 800dc9e:	2300      	movs	r3, #0
 800dca0:	f04f 32ff 	mov.w	r2, #4294967295
 800dca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dca8:	f10a 0a01 	add.w	sl, sl, #1
 800dcac:	9304      	str	r3, [sp, #16]
 800dcae:	9307      	str	r3, [sp, #28]
 800dcb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dcb4:	931a      	str	r3, [sp, #104]	; 0x68
 800dcb6:	4654      	mov	r4, sl
 800dcb8:	2205      	movs	r2, #5
 800dcba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcbe:	4858      	ldr	r0, [pc, #352]	; (800de20 <_vfiprintf_r+0x24c>)
 800dcc0:	f7f2 fa8e 	bl	80001e0 <memchr>
 800dcc4:	9a04      	ldr	r2, [sp, #16]
 800dcc6:	b9d8      	cbnz	r0, 800dd00 <_vfiprintf_r+0x12c>
 800dcc8:	06d1      	lsls	r1, r2, #27
 800dcca:	bf44      	itt	mi
 800dccc:	2320      	movmi	r3, #32
 800dcce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcd2:	0713      	lsls	r3, r2, #28
 800dcd4:	bf44      	itt	mi
 800dcd6:	232b      	movmi	r3, #43	; 0x2b
 800dcd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcdc:	f89a 3000 	ldrb.w	r3, [sl]
 800dce0:	2b2a      	cmp	r3, #42	; 0x2a
 800dce2:	d015      	beq.n	800dd10 <_vfiprintf_r+0x13c>
 800dce4:	9a07      	ldr	r2, [sp, #28]
 800dce6:	4654      	mov	r4, sl
 800dce8:	2000      	movs	r0, #0
 800dcea:	f04f 0c0a 	mov.w	ip, #10
 800dcee:	4621      	mov	r1, r4
 800dcf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcf4:	3b30      	subs	r3, #48	; 0x30
 800dcf6:	2b09      	cmp	r3, #9
 800dcf8:	d94e      	bls.n	800dd98 <_vfiprintf_r+0x1c4>
 800dcfa:	b1b0      	cbz	r0, 800dd2a <_vfiprintf_r+0x156>
 800dcfc:	9207      	str	r2, [sp, #28]
 800dcfe:	e014      	b.n	800dd2a <_vfiprintf_r+0x156>
 800dd00:	eba0 0308 	sub.w	r3, r0, r8
 800dd04:	fa09 f303 	lsl.w	r3, r9, r3
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	9304      	str	r3, [sp, #16]
 800dd0c:	46a2      	mov	sl, r4
 800dd0e:	e7d2      	b.n	800dcb6 <_vfiprintf_r+0xe2>
 800dd10:	9b03      	ldr	r3, [sp, #12]
 800dd12:	1d19      	adds	r1, r3, #4
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	9103      	str	r1, [sp, #12]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	bfbb      	ittet	lt
 800dd1c:	425b      	neglt	r3, r3
 800dd1e:	f042 0202 	orrlt.w	r2, r2, #2
 800dd22:	9307      	strge	r3, [sp, #28]
 800dd24:	9307      	strlt	r3, [sp, #28]
 800dd26:	bfb8      	it	lt
 800dd28:	9204      	strlt	r2, [sp, #16]
 800dd2a:	7823      	ldrb	r3, [r4, #0]
 800dd2c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd2e:	d10c      	bne.n	800dd4a <_vfiprintf_r+0x176>
 800dd30:	7863      	ldrb	r3, [r4, #1]
 800dd32:	2b2a      	cmp	r3, #42	; 0x2a
 800dd34:	d135      	bne.n	800dda2 <_vfiprintf_r+0x1ce>
 800dd36:	9b03      	ldr	r3, [sp, #12]
 800dd38:	1d1a      	adds	r2, r3, #4
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	9203      	str	r2, [sp, #12]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	bfb8      	it	lt
 800dd42:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd46:	3402      	adds	r4, #2
 800dd48:	9305      	str	r3, [sp, #20]
 800dd4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800de30 <_vfiprintf_r+0x25c>
 800dd4e:	7821      	ldrb	r1, [r4, #0]
 800dd50:	2203      	movs	r2, #3
 800dd52:	4650      	mov	r0, sl
 800dd54:	f7f2 fa44 	bl	80001e0 <memchr>
 800dd58:	b140      	cbz	r0, 800dd6c <_vfiprintf_r+0x198>
 800dd5a:	2340      	movs	r3, #64	; 0x40
 800dd5c:	eba0 000a 	sub.w	r0, r0, sl
 800dd60:	fa03 f000 	lsl.w	r0, r3, r0
 800dd64:	9b04      	ldr	r3, [sp, #16]
 800dd66:	4303      	orrs	r3, r0
 800dd68:	3401      	adds	r4, #1
 800dd6a:	9304      	str	r3, [sp, #16]
 800dd6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd70:	482c      	ldr	r0, [pc, #176]	; (800de24 <_vfiprintf_r+0x250>)
 800dd72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd76:	2206      	movs	r2, #6
 800dd78:	f7f2 fa32 	bl	80001e0 <memchr>
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	d03f      	beq.n	800de00 <_vfiprintf_r+0x22c>
 800dd80:	4b29      	ldr	r3, [pc, #164]	; (800de28 <_vfiprintf_r+0x254>)
 800dd82:	bb1b      	cbnz	r3, 800ddcc <_vfiprintf_r+0x1f8>
 800dd84:	9b03      	ldr	r3, [sp, #12]
 800dd86:	3307      	adds	r3, #7
 800dd88:	f023 0307 	bic.w	r3, r3, #7
 800dd8c:	3308      	adds	r3, #8
 800dd8e:	9303      	str	r3, [sp, #12]
 800dd90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd92:	443b      	add	r3, r7
 800dd94:	9309      	str	r3, [sp, #36]	; 0x24
 800dd96:	e767      	b.n	800dc68 <_vfiprintf_r+0x94>
 800dd98:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd9c:	460c      	mov	r4, r1
 800dd9e:	2001      	movs	r0, #1
 800dda0:	e7a5      	b.n	800dcee <_vfiprintf_r+0x11a>
 800dda2:	2300      	movs	r3, #0
 800dda4:	3401      	adds	r4, #1
 800dda6:	9305      	str	r3, [sp, #20]
 800dda8:	4619      	mov	r1, r3
 800ddaa:	f04f 0c0a 	mov.w	ip, #10
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddb4:	3a30      	subs	r2, #48	; 0x30
 800ddb6:	2a09      	cmp	r2, #9
 800ddb8:	d903      	bls.n	800ddc2 <_vfiprintf_r+0x1ee>
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d0c5      	beq.n	800dd4a <_vfiprintf_r+0x176>
 800ddbe:	9105      	str	r1, [sp, #20]
 800ddc0:	e7c3      	b.n	800dd4a <_vfiprintf_r+0x176>
 800ddc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	2301      	movs	r3, #1
 800ddca:	e7f0      	b.n	800ddae <_vfiprintf_r+0x1da>
 800ddcc:	ab03      	add	r3, sp, #12
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	462a      	mov	r2, r5
 800ddd2:	4b16      	ldr	r3, [pc, #88]	; (800de2c <_vfiprintf_r+0x258>)
 800ddd4:	a904      	add	r1, sp, #16
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	f7fb fddc 	bl	8009994 <_printf_float>
 800dddc:	4607      	mov	r7, r0
 800ddde:	1c78      	adds	r0, r7, #1
 800dde0:	d1d6      	bne.n	800dd90 <_vfiprintf_r+0x1bc>
 800dde2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dde4:	07d9      	lsls	r1, r3, #31
 800dde6:	d405      	bmi.n	800ddf4 <_vfiprintf_r+0x220>
 800dde8:	89ab      	ldrh	r3, [r5, #12]
 800ddea:	059a      	lsls	r2, r3, #22
 800ddec:	d402      	bmi.n	800ddf4 <_vfiprintf_r+0x220>
 800ddee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddf0:	f7fe ff76 	bl	800cce0 <__retarget_lock_release_recursive>
 800ddf4:	89ab      	ldrh	r3, [r5, #12]
 800ddf6:	065b      	lsls	r3, r3, #25
 800ddf8:	f53f af12 	bmi.w	800dc20 <_vfiprintf_r+0x4c>
 800ddfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddfe:	e711      	b.n	800dc24 <_vfiprintf_r+0x50>
 800de00:	ab03      	add	r3, sp, #12
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	462a      	mov	r2, r5
 800de06:	4b09      	ldr	r3, [pc, #36]	; (800de2c <_vfiprintf_r+0x258>)
 800de08:	a904      	add	r1, sp, #16
 800de0a:	4630      	mov	r0, r6
 800de0c:	f7fc f866 	bl	8009edc <_printf_i>
 800de10:	e7e4      	b.n	800dddc <_vfiprintf_r+0x208>
 800de12:	bf00      	nop
 800de14:	0800ea70 	.word	0x0800ea70
 800de18:	0800ea90 	.word	0x0800ea90
 800de1c:	0800ea50 	.word	0x0800ea50
 800de20:	0800ec8c 	.word	0x0800ec8c
 800de24:	0800ec96 	.word	0x0800ec96
 800de28:	08009995 	.word	0x08009995
 800de2c:	0800dbaf 	.word	0x0800dbaf
 800de30:	0800ec92 	.word	0x0800ec92
 800de34:	00000000 	.word	0x00000000

0800de38 <nan>:
 800de38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800de40 <nan+0x8>
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop
 800de40:	00000000 	.word	0x00000000
 800de44:	7ff80000 	.word	0x7ff80000

0800de48 <_sbrk_r>:
 800de48:	b538      	push	{r3, r4, r5, lr}
 800de4a:	4d06      	ldr	r5, [pc, #24]	; (800de64 <_sbrk_r+0x1c>)
 800de4c:	2300      	movs	r3, #0
 800de4e:	4604      	mov	r4, r0
 800de50:	4608      	mov	r0, r1
 800de52:	602b      	str	r3, [r5, #0]
 800de54:	f7f5 fe0e 	bl	8003a74 <_sbrk>
 800de58:	1c43      	adds	r3, r0, #1
 800de5a:	d102      	bne.n	800de62 <_sbrk_r+0x1a>
 800de5c:	682b      	ldr	r3, [r5, #0]
 800de5e:	b103      	cbz	r3, 800de62 <_sbrk_r+0x1a>
 800de60:	6023      	str	r3, [r4, #0]
 800de62:	bd38      	pop	{r3, r4, r5, pc}
 800de64:	20000970 	.word	0x20000970

0800de68 <__sread>:
 800de68:	b510      	push	{r4, lr}
 800de6a:	460c      	mov	r4, r1
 800de6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de70:	f000 f92e 	bl	800e0d0 <_read_r>
 800de74:	2800      	cmp	r0, #0
 800de76:	bfab      	itete	ge
 800de78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de7a:	89a3      	ldrhlt	r3, [r4, #12]
 800de7c:	181b      	addge	r3, r3, r0
 800de7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de82:	bfac      	ite	ge
 800de84:	6563      	strge	r3, [r4, #84]	; 0x54
 800de86:	81a3      	strhlt	r3, [r4, #12]
 800de88:	bd10      	pop	{r4, pc}

0800de8a <__swrite>:
 800de8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8e:	461f      	mov	r7, r3
 800de90:	898b      	ldrh	r3, [r1, #12]
 800de92:	05db      	lsls	r3, r3, #23
 800de94:	4605      	mov	r5, r0
 800de96:	460c      	mov	r4, r1
 800de98:	4616      	mov	r6, r2
 800de9a:	d505      	bpl.n	800dea8 <__swrite+0x1e>
 800de9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dea0:	2302      	movs	r3, #2
 800dea2:	2200      	movs	r2, #0
 800dea4:	f000 f8b6 	bl	800e014 <_lseek_r>
 800dea8:	89a3      	ldrh	r3, [r4, #12]
 800deaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800deae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800deb2:	81a3      	strh	r3, [r4, #12]
 800deb4:	4632      	mov	r2, r6
 800deb6:	463b      	mov	r3, r7
 800deb8:	4628      	mov	r0, r5
 800deba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800debe:	f000 b835 	b.w	800df2c <_write_r>

0800dec2 <__sseek>:
 800dec2:	b510      	push	{r4, lr}
 800dec4:	460c      	mov	r4, r1
 800dec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deca:	f000 f8a3 	bl	800e014 <_lseek_r>
 800dece:	1c43      	adds	r3, r0, #1
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	bf15      	itete	ne
 800ded4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ded6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800deda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dede:	81a3      	strheq	r3, [r4, #12]
 800dee0:	bf18      	it	ne
 800dee2:	81a3      	strhne	r3, [r4, #12]
 800dee4:	bd10      	pop	{r4, pc}

0800dee6 <__sclose>:
 800dee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deea:	f000 b84f 	b.w	800df8c <_close_r>

0800deee <strncmp>:
 800deee:	b510      	push	{r4, lr}
 800def0:	b16a      	cbz	r2, 800df0e <strncmp+0x20>
 800def2:	3901      	subs	r1, #1
 800def4:	1884      	adds	r4, r0, r2
 800def6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800defa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800defe:	4293      	cmp	r3, r2
 800df00:	d103      	bne.n	800df0a <strncmp+0x1c>
 800df02:	42a0      	cmp	r0, r4
 800df04:	d001      	beq.n	800df0a <strncmp+0x1c>
 800df06:	2b00      	cmp	r3, #0
 800df08:	d1f5      	bne.n	800def6 <strncmp+0x8>
 800df0a:	1a98      	subs	r0, r3, r2
 800df0c:	bd10      	pop	{r4, pc}
 800df0e:	4610      	mov	r0, r2
 800df10:	e7fc      	b.n	800df0c <strncmp+0x1e>

0800df12 <__ascii_wctomb>:
 800df12:	b149      	cbz	r1, 800df28 <__ascii_wctomb+0x16>
 800df14:	2aff      	cmp	r2, #255	; 0xff
 800df16:	bf85      	ittet	hi
 800df18:	238a      	movhi	r3, #138	; 0x8a
 800df1a:	6003      	strhi	r3, [r0, #0]
 800df1c:	700a      	strbls	r2, [r1, #0]
 800df1e:	f04f 30ff 	movhi.w	r0, #4294967295
 800df22:	bf98      	it	ls
 800df24:	2001      	movls	r0, #1
 800df26:	4770      	bx	lr
 800df28:	4608      	mov	r0, r1
 800df2a:	4770      	bx	lr

0800df2c <_write_r>:
 800df2c:	b538      	push	{r3, r4, r5, lr}
 800df2e:	4d07      	ldr	r5, [pc, #28]	; (800df4c <_write_r+0x20>)
 800df30:	4604      	mov	r4, r0
 800df32:	4608      	mov	r0, r1
 800df34:	4611      	mov	r1, r2
 800df36:	2200      	movs	r2, #0
 800df38:	602a      	str	r2, [r5, #0]
 800df3a:	461a      	mov	r2, r3
 800df3c:	f7f5 fd49 	bl	80039d2 <_write>
 800df40:	1c43      	adds	r3, r0, #1
 800df42:	d102      	bne.n	800df4a <_write_r+0x1e>
 800df44:	682b      	ldr	r3, [r5, #0]
 800df46:	b103      	cbz	r3, 800df4a <_write_r+0x1e>
 800df48:	6023      	str	r3, [r4, #0]
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	20000970 	.word	0x20000970

0800df50 <__assert_func>:
 800df50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df52:	4614      	mov	r4, r2
 800df54:	461a      	mov	r2, r3
 800df56:	4b09      	ldr	r3, [pc, #36]	; (800df7c <__assert_func+0x2c>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4605      	mov	r5, r0
 800df5c:	68d8      	ldr	r0, [r3, #12]
 800df5e:	b14c      	cbz	r4, 800df74 <__assert_func+0x24>
 800df60:	4b07      	ldr	r3, [pc, #28]	; (800df80 <__assert_func+0x30>)
 800df62:	9100      	str	r1, [sp, #0]
 800df64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df68:	4906      	ldr	r1, [pc, #24]	; (800df84 <__assert_func+0x34>)
 800df6a:	462b      	mov	r3, r5
 800df6c:	f000 f81e 	bl	800dfac <fiprintf>
 800df70:	f000 f8c0 	bl	800e0f4 <abort>
 800df74:	4b04      	ldr	r3, [pc, #16]	; (800df88 <__assert_func+0x38>)
 800df76:	461c      	mov	r4, r3
 800df78:	e7f3      	b.n	800df62 <__assert_func+0x12>
 800df7a:	bf00      	nop
 800df7c:	2000000c 	.word	0x2000000c
 800df80:	0800ec9d 	.word	0x0800ec9d
 800df84:	0800ecaa 	.word	0x0800ecaa
 800df88:	0800ecd8 	.word	0x0800ecd8

0800df8c <_close_r>:
 800df8c:	b538      	push	{r3, r4, r5, lr}
 800df8e:	4d06      	ldr	r5, [pc, #24]	; (800dfa8 <_close_r+0x1c>)
 800df90:	2300      	movs	r3, #0
 800df92:	4604      	mov	r4, r0
 800df94:	4608      	mov	r0, r1
 800df96:	602b      	str	r3, [r5, #0]
 800df98:	f7f5 fd37 	bl	8003a0a <_close>
 800df9c:	1c43      	adds	r3, r0, #1
 800df9e:	d102      	bne.n	800dfa6 <_close_r+0x1a>
 800dfa0:	682b      	ldr	r3, [r5, #0]
 800dfa2:	b103      	cbz	r3, 800dfa6 <_close_r+0x1a>
 800dfa4:	6023      	str	r3, [r4, #0]
 800dfa6:	bd38      	pop	{r3, r4, r5, pc}
 800dfa8:	20000970 	.word	0x20000970

0800dfac <fiprintf>:
 800dfac:	b40e      	push	{r1, r2, r3}
 800dfae:	b503      	push	{r0, r1, lr}
 800dfb0:	4601      	mov	r1, r0
 800dfb2:	ab03      	add	r3, sp, #12
 800dfb4:	4805      	ldr	r0, [pc, #20]	; (800dfcc <fiprintf+0x20>)
 800dfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfba:	6800      	ldr	r0, [r0, #0]
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	f7ff fe09 	bl	800dbd4 <_vfiprintf_r>
 800dfc2:	b002      	add	sp, #8
 800dfc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfc8:	b003      	add	sp, #12
 800dfca:	4770      	bx	lr
 800dfcc:	2000000c 	.word	0x2000000c

0800dfd0 <_fstat_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	4d07      	ldr	r5, [pc, #28]	; (800dff0 <_fstat_r+0x20>)
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	4608      	mov	r0, r1
 800dfda:	4611      	mov	r1, r2
 800dfdc:	602b      	str	r3, [r5, #0]
 800dfde:	f7f5 fd20 	bl	8003a22 <_fstat>
 800dfe2:	1c43      	adds	r3, r0, #1
 800dfe4:	d102      	bne.n	800dfec <_fstat_r+0x1c>
 800dfe6:	682b      	ldr	r3, [r5, #0]
 800dfe8:	b103      	cbz	r3, 800dfec <_fstat_r+0x1c>
 800dfea:	6023      	str	r3, [r4, #0]
 800dfec:	bd38      	pop	{r3, r4, r5, pc}
 800dfee:	bf00      	nop
 800dff0:	20000970 	.word	0x20000970

0800dff4 <_isatty_r>:
 800dff4:	b538      	push	{r3, r4, r5, lr}
 800dff6:	4d06      	ldr	r5, [pc, #24]	; (800e010 <_isatty_r+0x1c>)
 800dff8:	2300      	movs	r3, #0
 800dffa:	4604      	mov	r4, r0
 800dffc:	4608      	mov	r0, r1
 800dffe:	602b      	str	r3, [r5, #0]
 800e000:	f7f5 fd1f 	bl	8003a42 <_isatty>
 800e004:	1c43      	adds	r3, r0, #1
 800e006:	d102      	bne.n	800e00e <_isatty_r+0x1a>
 800e008:	682b      	ldr	r3, [r5, #0]
 800e00a:	b103      	cbz	r3, 800e00e <_isatty_r+0x1a>
 800e00c:	6023      	str	r3, [r4, #0]
 800e00e:	bd38      	pop	{r3, r4, r5, pc}
 800e010:	20000970 	.word	0x20000970

0800e014 <_lseek_r>:
 800e014:	b538      	push	{r3, r4, r5, lr}
 800e016:	4d07      	ldr	r5, [pc, #28]	; (800e034 <_lseek_r+0x20>)
 800e018:	4604      	mov	r4, r0
 800e01a:	4608      	mov	r0, r1
 800e01c:	4611      	mov	r1, r2
 800e01e:	2200      	movs	r2, #0
 800e020:	602a      	str	r2, [r5, #0]
 800e022:	461a      	mov	r2, r3
 800e024:	f7f5 fd18 	bl	8003a58 <_lseek>
 800e028:	1c43      	adds	r3, r0, #1
 800e02a:	d102      	bne.n	800e032 <_lseek_r+0x1e>
 800e02c:	682b      	ldr	r3, [r5, #0]
 800e02e:	b103      	cbz	r3, 800e032 <_lseek_r+0x1e>
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	20000970 	.word	0x20000970

0800e038 <memmove>:
 800e038:	4288      	cmp	r0, r1
 800e03a:	b510      	push	{r4, lr}
 800e03c:	eb01 0402 	add.w	r4, r1, r2
 800e040:	d902      	bls.n	800e048 <memmove+0x10>
 800e042:	4284      	cmp	r4, r0
 800e044:	4623      	mov	r3, r4
 800e046:	d807      	bhi.n	800e058 <memmove+0x20>
 800e048:	1e43      	subs	r3, r0, #1
 800e04a:	42a1      	cmp	r1, r4
 800e04c:	d008      	beq.n	800e060 <memmove+0x28>
 800e04e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e052:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e056:	e7f8      	b.n	800e04a <memmove+0x12>
 800e058:	4402      	add	r2, r0
 800e05a:	4601      	mov	r1, r0
 800e05c:	428a      	cmp	r2, r1
 800e05e:	d100      	bne.n	800e062 <memmove+0x2a>
 800e060:	bd10      	pop	{r4, pc}
 800e062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e06a:	e7f7      	b.n	800e05c <memmove+0x24>

0800e06c <__malloc_lock>:
 800e06c:	4801      	ldr	r0, [pc, #4]	; (800e074 <__malloc_lock+0x8>)
 800e06e:	f7fe be36 	b.w	800ccde <__retarget_lock_acquire_recursive>
 800e072:	bf00      	nop
 800e074:	20000968 	.word	0x20000968

0800e078 <__malloc_unlock>:
 800e078:	4801      	ldr	r0, [pc, #4]	; (800e080 <__malloc_unlock+0x8>)
 800e07a:	f7fe be31 	b.w	800cce0 <__retarget_lock_release_recursive>
 800e07e:	bf00      	nop
 800e080:	20000968 	.word	0x20000968

0800e084 <_realloc_r>:
 800e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e086:	4607      	mov	r7, r0
 800e088:	4614      	mov	r4, r2
 800e08a:	460e      	mov	r6, r1
 800e08c:	b921      	cbnz	r1, 800e098 <_realloc_r+0x14>
 800e08e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e092:	4611      	mov	r1, r2
 800e094:	f7ff bbbe 	b.w	800d814 <_malloc_r>
 800e098:	b922      	cbnz	r2, 800e0a4 <_realloc_r+0x20>
 800e09a:	f7ff fb6b 	bl	800d774 <_free_r>
 800e09e:	4625      	mov	r5, r4
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0a4:	f000 f82d 	bl	800e102 <_malloc_usable_size_r>
 800e0a8:	42a0      	cmp	r0, r4
 800e0aa:	d20f      	bcs.n	800e0cc <_realloc_r+0x48>
 800e0ac:	4621      	mov	r1, r4
 800e0ae:	4638      	mov	r0, r7
 800e0b0:	f7ff fbb0 	bl	800d814 <_malloc_r>
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	d0f2      	beq.n	800e0a0 <_realloc_r+0x1c>
 800e0ba:	4631      	mov	r1, r6
 800e0bc:	4622      	mov	r2, r4
 800e0be:	f7fb fbb3 	bl	8009828 <memcpy>
 800e0c2:	4631      	mov	r1, r6
 800e0c4:	4638      	mov	r0, r7
 800e0c6:	f7ff fb55 	bl	800d774 <_free_r>
 800e0ca:	e7e9      	b.n	800e0a0 <_realloc_r+0x1c>
 800e0cc:	4635      	mov	r5, r6
 800e0ce:	e7e7      	b.n	800e0a0 <_realloc_r+0x1c>

0800e0d0 <_read_r>:
 800e0d0:	b538      	push	{r3, r4, r5, lr}
 800e0d2:	4d07      	ldr	r5, [pc, #28]	; (800e0f0 <_read_r+0x20>)
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	4608      	mov	r0, r1
 800e0d8:	4611      	mov	r1, r2
 800e0da:	2200      	movs	r2, #0
 800e0dc:	602a      	str	r2, [r5, #0]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	f7f5 fc5a 	bl	8003998 <_read>
 800e0e4:	1c43      	adds	r3, r0, #1
 800e0e6:	d102      	bne.n	800e0ee <_read_r+0x1e>
 800e0e8:	682b      	ldr	r3, [r5, #0]
 800e0ea:	b103      	cbz	r3, 800e0ee <_read_r+0x1e>
 800e0ec:	6023      	str	r3, [r4, #0]
 800e0ee:	bd38      	pop	{r3, r4, r5, pc}
 800e0f0:	20000970 	.word	0x20000970

0800e0f4 <abort>:
 800e0f4:	b508      	push	{r3, lr}
 800e0f6:	2006      	movs	r0, #6
 800e0f8:	f000 f834 	bl	800e164 <raise>
 800e0fc:	2001      	movs	r0, #1
 800e0fe:	f7f5 fc41 	bl	8003984 <_exit>

0800e102 <_malloc_usable_size_r>:
 800e102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e106:	1f18      	subs	r0, r3, #4
 800e108:	2b00      	cmp	r3, #0
 800e10a:	bfbc      	itt	lt
 800e10c:	580b      	ldrlt	r3, [r1, r0]
 800e10e:	18c0      	addlt	r0, r0, r3
 800e110:	4770      	bx	lr

0800e112 <_raise_r>:
 800e112:	291f      	cmp	r1, #31
 800e114:	b538      	push	{r3, r4, r5, lr}
 800e116:	4604      	mov	r4, r0
 800e118:	460d      	mov	r5, r1
 800e11a:	d904      	bls.n	800e126 <_raise_r+0x14>
 800e11c:	2316      	movs	r3, #22
 800e11e:	6003      	str	r3, [r0, #0]
 800e120:	f04f 30ff 	mov.w	r0, #4294967295
 800e124:	bd38      	pop	{r3, r4, r5, pc}
 800e126:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e128:	b112      	cbz	r2, 800e130 <_raise_r+0x1e>
 800e12a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e12e:	b94b      	cbnz	r3, 800e144 <_raise_r+0x32>
 800e130:	4620      	mov	r0, r4
 800e132:	f000 f831 	bl	800e198 <_getpid_r>
 800e136:	462a      	mov	r2, r5
 800e138:	4601      	mov	r1, r0
 800e13a:	4620      	mov	r0, r4
 800e13c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e140:	f000 b818 	b.w	800e174 <_kill_r>
 800e144:	2b01      	cmp	r3, #1
 800e146:	d00a      	beq.n	800e15e <_raise_r+0x4c>
 800e148:	1c59      	adds	r1, r3, #1
 800e14a:	d103      	bne.n	800e154 <_raise_r+0x42>
 800e14c:	2316      	movs	r3, #22
 800e14e:	6003      	str	r3, [r0, #0]
 800e150:	2001      	movs	r0, #1
 800e152:	e7e7      	b.n	800e124 <_raise_r+0x12>
 800e154:	2400      	movs	r4, #0
 800e156:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e15a:	4628      	mov	r0, r5
 800e15c:	4798      	blx	r3
 800e15e:	2000      	movs	r0, #0
 800e160:	e7e0      	b.n	800e124 <_raise_r+0x12>
	...

0800e164 <raise>:
 800e164:	4b02      	ldr	r3, [pc, #8]	; (800e170 <raise+0xc>)
 800e166:	4601      	mov	r1, r0
 800e168:	6818      	ldr	r0, [r3, #0]
 800e16a:	f7ff bfd2 	b.w	800e112 <_raise_r>
 800e16e:	bf00      	nop
 800e170:	2000000c 	.word	0x2000000c

0800e174 <_kill_r>:
 800e174:	b538      	push	{r3, r4, r5, lr}
 800e176:	4d07      	ldr	r5, [pc, #28]	; (800e194 <_kill_r+0x20>)
 800e178:	2300      	movs	r3, #0
 800e17a:	4604      	mov	r4, r0
 800e17c:	4608      	mov	r0, r1
 800e17e:	4611      	mov	r1, r2
 800e180:	602b      	str	r3, [r5, #0]
 800e182:	f7f5 fbef 	bl	8003964 <_kill>
 800e186:	1c43      	adds	r3, r0, #1
 800e188:	d102      	bne.n	800e190 <_kill_r+0x1c>
 800e18a:	682b      	ldr	r3, [r5, #0]
 800e18c:	b103      	cbz	r3, 800e190 <_kill_r+0x1c>
 800e18e:	6023      	str	r3, [r4, #0]
 800e190:	bd38      	pop	{r3, r4, r5, pc}
 800e192:	bf00      	nop
 800e194:	20000970 	.word	0x20000970

0800e198 <_getpid_r>:
 800e198:	f7f5 bbdc 	b.w	8003954 <_getpid>

0800e19c <_init>:
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e19e:	bf00      	nop
 800e1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1a2:	bc08      	pop	{r3}
 800e1a4:	469e      	mov	lr, r3
 800e1a6:	4770      	bx	lr

0800e1a8 <_fini>:
 800e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1aa:	bf00      	nop
 800e1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ae:	bc08      	pop	{r3}
 800e1b0:	469e      	mov	lr, r3
 800e1b2:	4770      	bx	lr
